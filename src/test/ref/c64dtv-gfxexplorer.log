Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void dtvSetCpuBankSegment1(byte dtvSetCpuBankSegment1::cpuBankIdx)
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@4 gfx_init_plane_8bppchunky::@6 gfx_init_plane_charset8 gfx_init_plane_charset8::@8 gfx_init_plane_fill gfx_init_plane_fill::@4 gfx_init_plane_horisontal gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@4 gfx_init_plane_horisontal::@7 gfx_init_plane_vertical gfx_init_plane_vertical::@4
  dtvSetCpuBankSegment1::cpuBankIdx#13 = phi( gfx_init_plane_8bppchunky/dtvSetCpuBankSegment1::cpuBankIdx#0, gfx_init_plane_8bppchunky::@4/dtvSetCpuBankSegment1::cpuBankIdx#1, gfx_init_plane_8bppchunky::@6/dtvSetCpuBankSegment1::cpuBankIdx#2, gfx_init_plane_charset8/dtvSetCpuBankSegment1::cpuBankIdx#9, gfx_init_plane_charset8::@8/dtvSetCpuBankSegment1::cpuBankIdx#10, gfx_init_plane_fill/dtvSetCpuBankSegment1::cpuBankIdx#11, gfx_init_plane_fill::@4/dtvSetCpuBankSegment1::cpuBankIdx#12, gfx_init_plane_horisontal/dtvSetCpuBankSegment1::cpuBankIdx#3, gfx_init_plane_horisontal2/dtvSetCpuBankSegment1::cpuBankIdx#5, gfx_init_plane_horisontal2::@4/dtvSetCpuBankSegment1::cpuBankIdx#6, gfx_init_plane_horisontal::@7/dtvSetCpuBankSegment1::cpuBankIdx#4, gfx_init_plane_vertical/dtvSetCpuBankSegment1::cpuBankIdx#7, gfx_init_plane_vertical::@4/dtvSetCpuBankSegment1::cpuBankIdx#8 )
  *dtvSetCpuBankSegment1::cpuBank = dtvSetCpuBankSegment1::cpuBankIdx#13
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1 print_cls
  memset::c#6 = phi( bitmap_clear/memset::c#1, bitmap_clear::@1/memset::c#2, print_cls/memset::c#0 )
  memset::str#5 = phi( bitmap_clear/memset::str#1, bitmap_clear::@1/memset::str#2, print_cls/memset::str#0 )
  memset::num#3 = phi( bitmap_clear/memset::num#1, bitmap_clear::@1/memset::num#2, print_cls/memset::num#0 )
  memset::$0 = memset::num#3 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#3 = phi( memset/memset::str#5, memset::@3/memset::str#6 )
  memset::return#0 = memset::str#3
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#5 = phi( memset/memset::c#6 )
  memset::num#4 = phi( memset/memset::num#3 )
  memset::str#4 = phi( memset/memset::str#5 )
  memset::$4 = (byte*)memset::str#4
  memset::$2 = memset::$4 + memset::num#4
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#4
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#4 = phi( memset::@2/memset::c#5, memset::@4/memset::c#3 )
  memset::str#6 = phi( memset::@2/memset::str#4, memset::@4/memset::str#7 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#7 = phi( memset::@3/memset::str#6 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#3 = phi( memset::@3/memset::c#4 )
  *memset::dst#3 = memset::c#3
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#5 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#5
  return 
  to:@return

void print_str_lines(byte* print_str_lines::str)
print_str_lines: scope:[print_str_lines]  from form_mode::@12 form_mode::@9
  print_line_cursor#47 = phi( form_mode::@12/print_line_cursor#14, form_mode::@9/print_line_cursor#11 )
  print_char_cursor#53 = phi( form_mode::@12/print_char_cursor#17, form_mode::@9/print_char_cursor#14 )
  print_str_lines::str#5 = phi( form_mode::@12/print_str_lines::str#2, form_mode::@9/print_str_lines::str#1 )
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@7
  print_line_cursor#39 = phi( print_str_lines/print_line_cursor#47, print_str_lines::@7/print_line_cursor#0 )
  print_char_cursor#45 = phi( print_str_lines/print_char_cursor#53, print_str_lines::@7/print_char_cursor#1 )
  print_str_lines::str#3 = phi( print_str_lines/print_str_lines::str#5, print_str_lines::@7/print_str_lines::str#6 )
  print_str_lines::$3 = 0 != *print_str_lines::str#3
  if(print_str_lines::$3) goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@3
  print_line_cursor#55 = phi( print_str_lines::@1/print_line_cursor#39, print_str_lines::@3/print_line_cursor#48 )
  print_char_cursor#54 = phi( print_str_lines::@1/print_char_cursor#45, print_str_lines::@3/print_char_cursor#55 )
  print_str_lines::str#4 = phi( print_str_lines::@1/print_str_lines::str#3, print_str_lines::@3/print_str_lines::str#7 )
  print_str_lines::ch#0 = *print_str_lines::str#4
  print_str_lines::str#0 = ++ print_str_lines::str#4
  print_str_lines::$5 = 0 != print_str_lines::ch#0
  print_str_lines::$0 = ! print_str_lines::$5
  if(print_str_lines::$0) goto print_str_lines::@3
  to:print_str_lines::@4
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@6
  print_char_cursor#55 = phi( print_str_lines::@2/print_char_cursor#54, print_str_lines::@6/print_char_cursor#0 )
  print_line_cursor#48 = phi( print_str_lines::@2/print_line_cursor#55, print_str_lines::@6/print_line_cursor#56 )
  print_str_lines::str#7 = phi( print_str_lines::@2/print_str_lines::str#0, print_str_lines::@6/print_str_lines::str#8 )
  print_str_lines::ch#1 = phi( print_str_lines::@2/print_str_lines::ch#0, print_str_lines::@6/print_str_lines::ch#3 )
  print_str_lines::$4 = 0 != print_str_lines::ch#1
  if(print_str_lines::$4) goto print_str_lines::@2
  to:print_str_lines::@5
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2
  print_line_cursor#61 = phi( print_str_lines::@2/print_line_cursor#55 )
  print_str_lines::str#10 = phi( print_str_lines::@2/print_str_lines::str#0 )
  print_char_cursor#43 = phi( print_str_lines::@2/print_char_cursor#54 )
  print_str_lines::ch#2 = phi( print_str_lines::@2/print_str_lines::ch#0 )
  print_char::ch#0 = print_str_lines::ch#2
  call print_char 
  to:print_str_lines::@6
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@4
  print_line_cursor#56 = phi( print_str_lines::@4/print_line_cursor#61 )
  print_str_lines::str#8 = phi( print_str_lines::@4/print_str_lines::str#10 )
  print_str_lines::ch#3 = phi( print_str_lines::@4/print_str_lines::ch#2 )
  print_char_cursor#23 = phi( print_str_lines::@4/print_char_cursor#6 )
  print_char_cursor#0 = print_char_cursor#23
  to:print_str_lines::@3
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@3
  print_str_lines::str#9 = phi( print_str_lines::@3/print_str_lines::str#7 )
  print_char_cursor#44 = phi( print_str_lines::@3/print_char_cursor#55 )
  print_line_cursor#38 = phi( print_str_lines::@3/print_line_cursor#48 )
  call print_ln 
  to:print_str_lines::@7
print_str_lines::@7: scope:[print_str_lines]  from print_str_lines::@5
  print_str_lines::str#6 = phi( print_str_lines::@5/print_str_lines::str#9 )
  print_char_cursor#24 = phi( print_str_lines::@5/print_char_cursor#4 )
  print_line_cursor#20 = phi( print_str_lines::@5/print_line_cursor#3 )
  print_line_cursor#0 = print_line_cursor#20
  print_char_cursor#1 = print_char_cursor#24
  to:print_str_lines::@1
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  print_line_cursor#21 = phi( print_str_lines::@1/print_line_cursor#39 )
  print_char_cursor#25 = phi( print_str_lines::@1/print_char_cursor#45 )
  print_char_cursor#2 = print_char_cursor#25
  print_line_cursor#1 = print_line_cursor#21
  return 
  to:@return

void print_str_at(byte* print_str_at::str , byte* print_str_at::at)
print_str_at: scope:[print_str_at]  from render_preset_name::@12
  print_str_at::at#4 = phi( render_preset_name::@12/print_str_at::at#1 )
  print_str_at::str#4 = phi( render_preset_name::@12/print_str_at::str#1 )
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  print_str_at::at#3 = phi( print_str_at/print_str_at::at#4, print_str_at::@2/print_str_at::at#0 )
  print_str_at::str#2 = phi( print_str_at/print_str_at::str#4, print_str_at::@2/print_str_at::str#0 )
  print_str_at::$0 = 0 != *print_str_at::str#2
  if(print_str_at::$0) goto print_str_at::@2
  to:print_str_at::@return
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1
  print_str_at::at#2 = phi( print_str_at::@1/print_str_at::at#3 )
  print_str_at::str#3 = phi( print_str_at::@1/print_str_at::str#2 )
  *print_str_at::at#2 = *print_str_at::str#3
  print_str_at::at#0 = ++ print_str_at::at#2
  print_str_at::str#0 = ++ print_str_at::str#3
  to:print_str_at::@1
print_str_at::@return: scope:[print_str_at]  from print_str_at::@1
  return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from print_str_lines::@5
  print_char_cursor#46 = phi( print_str_lines::@5/print_char_cursor#44 )
  print_line_cursor#40 = phi( print_str_lines::@5/print_line_cursor#38 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  print_char_cursor#26 = phi( print_ln/print_char_cursor#46, print_ln::@1/print_char_cursor#26 )
  print_line_cursor#22 = phi( print_ln/print_line_cursor#40, print_ln::@1/print_line_cursor#2 )
  print_ln::$0 = print_line_cursor#22 + $28
  print_line_cursor#2 = print_ln::$0
  print_ln::$1 = print_line_cursor#2 < print_char_cursor#26
  if(print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  print_line_cursor#23 = phi( print_ln::@1/print_line_cursor#2 )
  print_char_cursor#3 = print_line_cursor#23
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  print_char_cursor#27 = phi( print_ln::@2/print_char_cursor#3 )
  print_line_cursor#24 = phi( print_ln::@2/print_line_cursor#23 )
  print_line_cursor#3 = print_line_cursor#24
  print_char_cursor#4 = print_char_cursor#27
  return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from print_str_lines::@4
  print_char_cursor#28 = phi( print_str_lines::@4/print_char_cursor#43 )
  print_char::ch#1 = phi( print_str_lines::@4/print_char::ch#0 )
  *print_char_cursor#28 = print_char::ch#1
  print_char_cursor#5 = ++ print_char_cursor#28
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  print_char_cursor#29 = phi( print_char/print_char_cursor#5 )
  print_char_cursor#6 = print_char_cursor#29
  return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from form_mode::@11 form_mode::@8
  print_screen#10 = phi( form_mode::@11/print_screen#5, form_mode::@8/print_screen#4 )
  memset::str#0 = (void*)print_screen#10
  memset::c#0 = ' '
  memset::num#0 = $3e8
  call memset 
  memset::return#2 = memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  print_screen#11 = phi( print_cls/print_screen#10 )
  print_line_cursor#4 = print_screen#11
  print_char_cursor#7 = print_line_cursor#4
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  print_char_cursor#30 = phi( print_cls::@1/print_char_cursor#7 )
  print_line_cursor#25 = phi( print_cls::@1/print_line_cursor#4 )
  print_line_cursor#5 = print_line_cursor#25
  print_char_cursor#8 = print_char_cursor#30
  return 
  to:@return

void print_set_screen(byte* print_set_screen::screen)
print_set_screen: scope:[print_set_screen]  from form_mode form_mode::@10
  print_set_screen::screen#2 = phi( form_mode/print_set_screen::screen#0, form_mode::@10/print_set_screen::screen#1 )
  print_screen#0 = print_set_screen::screen#2
  print_line_cursor#6 = print_screen#0
  print_char_cursor#9 = print_line_cursor#6
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  print_char_cursor#31 = phi( print_set_screen/print_char_cursor#9 )
  print_line_cursor#26 = phi( print_set_screen/print_line_cursor#6 )
  print_screen#12 = phi( print_set_screen/print_screen#0 )
  print_screen#1 = print_screen#12
  print_line_cursor#7 = print_line_cursor#26
  print_char_cursor#10 = print_char_cursor#31
  return 
  to:@return

void keyboard_init()
keyboard_init: scope:[keyboard_init]  from main
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = $ff
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) = 0
  to:keyboard_init::@return
keyboard_init::@return: scope:[keyboard_init]  from keyboard_init
  return 
  to:@return

byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@7
  keyboard_matrix_read::rowid#1 = phi( keyboard_event_scan::@7/keyboard_matrix_read::rowid#0 )
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#1]
  keyboard_matrix_read::$0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  keyboard_matrix_read::row_pressed_bits#0 = keyboard_matrix_read::$0
  keyboard_matrix_read::return#0 = keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  keyboard_matrix_read::return#3 = phi( keyboard_matrix_read/keyboard_matrix_read::return#0 )
  keyboard_matrix_read::return#1 = keyboard_matrix_read::return#3
  return 
  to:@return

void keyboard_event_scan()
keyboard_event_scan: scope:[keyboard_event_scan]  from form_control::@3 gfx_mode::@29
  keyboard_events_size#98 = phi( form_control::@3/keyboard_events_size#50, gfx_mode::@29/keyboard_events_size#46 )
  keyboard_event_scan::keycode#0 = 0
  keyboard_event_scan::row#0 = 0
  to:keyboard_event_scan::@7
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@9
  keyboard_events_size#90 = phi( keyboard_event_scan/keyboard_events_size#98, keyboard_event_scan::@9/keyboard_events_size#99 )
  keyboard_event_scan::keycode#11 = phi( keyboard_event_scan/keyboard_event_scan::keycode#0, keyboard_event_scan::@9/keyboard_event_scan::keycode#13 )
  keyboard_event_scan::row#2 = phi( keyboard_event_scan/keyboard_event_scan::row#0, keyboard_event_scan::@9/keyboard_event_scan::row#1 )
  keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2
  call keyboard_matrix_read 
  keyboard_matrix_read::return#2 = keyboard_matrix_read::return#1
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@7
  keyboard_events_size#78 = phi( keyboard_event_scan::@7/keyboard_events_size#90 )
  keyboard_event_scan::keycode#7 = phi( keyboard_event_scan::@7/keyboard_event_scan::keycode#11 )
  keyboard_event_scan::row#3 = phi( keyboard_event_scan::@7/keyboard_event_scan::row#2 )
  keyboard_matrix_read::return#4 = phi( keyboard_event_scan::@7/keyboard_matrix_read::return#2 )
  keyboard_event_scan::$12 = keyboard_matrix_read::return#4
  keyboard_event_scan::row_scan#0 = keyboard_event_scan::$12
  keyboard_event_scan::$13 = keyboard_event_scan::row_scan#0 != keyboard_scan_values[keyboard_event_scan::row#3]
  if(keyboard_event_scan::$13) goto keyboard_event_scan::@8
  to:keyboard_event_scan::@17
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  keyboard_events_size#57 = phi( keyboard_event_scan::@20/keyboard_events_size#78 )
  keyboard_event_scan::keycode#12 = phi( keyboard_event_scan::@20/keyboard_event_scan::keycode#7 )
  keyboard_event_scan::row#9 = phi( keyboard_event_scan::@20/keyboard_event_scan::row#3 )
  keyboard_event_scan::row_scan#5 = phi( keyboard_event_scan::@20/keyboard_event_scan::row_scan#0 )
  keyboard_event_scan::col#0 = 0
  to:keyboard_event_scan::@10
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  keyboard_events_size#107 = phi( keyboard_event_scan::@20/keyboard_events_size#78 )
  keyboard_event_scan::row#7 = phi( keyboard_event_scan::@20/keyboard_event_scan::row#3 )
  keyboard_event_scan::keycode#3 = phi( keyboard_event_scan::@20/keyboard_event_scan::keycode#7 )
  keyboard_event_scan::$14 = keyboard_event_scan::keycode#3 + 8
  keyboard_event_scan::keycode#1 = keyboard_event_scan::$14
  to:keyboard_event_scan::@9
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@16 keyboard_event_scan::@17
  keyboard_events_size#99 = phi( keyboard_event_scan::@16/keyboard_events_size#106, keyboard_event_scan::@17/keyboard_events_size#107 )
  keyboard_event_scan::keycode#13 = phi( keyboard_event_scan::@16/keyboard_event_scan::keycode#14, keyboard_event_scan::@17/keyboard_event_scan::keycode#1 )
  keyboard_event_scan::row#4 = phi( keyboard_event_scan::@16/keyboard_event_scan::row#6, keyboard_event_scan::@17/keyboard_event_scan::row#7 )
  keyboard_event_scan::row#1 = keyboard_event_scan::row#4 + rangenext(0,7)
  keyboard_event_scan::$25 = keyboard_event_scan::row#1 != rangelast(0,7)
  if(keyboard_event_scan::$25) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@18
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@8
  keyboard_events_size#39 = phi( keyboard_event_scan::@11/keyboard_events_size#56, keyboard_event_scan::@8/keyboard_events_size#57 )
  keyboard_event_scan::keycode#8 = phi( keyboard_event_scan::@11/keyboard_event_scan::keycode#2, keyboard_event_scan::@8/keyboard_event_scan::keycode#12 )
  keyboard_event_scan::col#2 = phi( keyboard_event_scan::@11/keyboard_event_scan::col#1, keyboard_event_scan::@8/keyboard_event_scan::col#0 )
  keyboard_event_scan::row#5 = phi( keyboard_event_scan::@11/keyboard_event_scan::row#8, keyboard_event_scan::@8/keyboard_event_scan::row#9 )
  keyboard_event_scan::row_scan#1 = phi( keyboard_event_scan::@11/keyboard_event_scan::row_scan#4, keyboard_event_scan::@8/keyboard_event_scan::row_scan#5 )
  keyboard_event_scan::$15 = keyboard_event_scan::row_scan#1 ^ keyboard_scan_values[keyboard_event_scan::row#5]
  keyboard_event_scan::$16 = keyboard_event_scan::$15 & keyboard_matrix_col_bitmask[keyboard_event_scan::col#2]
  keyboard_event_scan::$17 = keyboard_event_scan::$16 != 0
  keyboard_event_scan::$18 = ! keyboard_event_scan::$17
  if(keyboard_event_scan::$18) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@13
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@10 keyboard_event_scan::@12 keyboard_event_scan::@13 keyboard_event_scan::@15
  keyboard_events_size#56 = phi( keyboard_event_scan::@10/keyboard_events_size#39, keyboard_event_scan::@12/keyboard_events_size#0, keyboard_event_scan::@13/keyboard_events_size#19, keyboard_event_scan::@15/keyboard_events_size#1 )
  keyboard_event_scan::row#8 = phi( keyboard_event_scan::@10/keyboard_event_scan::row#5, keyboard_event_scan::@12/keyboard_event_scan::row#10, keyboard_event_scan::@13/keyboard_event_scan::row#11, keyboard_event_scan::@15/keyboard_event_scan::row#12 )
  keyboard_event_scan::row_scan#4 = phi( keyboard_event_scan::@10/keyboard_event_scan::row_scan#1, keyboard_event_scan::@12/keyboard_event_scan::row_scan#7, keyboard_event_scan::@13/keyboard_event_scan::row_scan#6, keyboard_event_scan::@15/keyboard_event_scan::row_scan#8 )
  keyboard_event_scan::col#3 = phi( keyboard_event_scan::@10/keyboard_event_scan::col#2, keyboard_event_scan::@12/keyboard_event_scan::col#5, keyboard_event_scan::@13/keyboard_event_scan::col#6, keyboard_event_scan::@15/keyboard_event_scan::col#7 )
  keyboard_event_scan::keycode#4 = phi( keyboard_event_scan::@10/keyboard_event_scan::keycode#8, keyboard_event_scan::@12/keyboard_event_scan::keycode#5, keyboard_event_scan::@13/keyboard_event_scan::keycode#9, keyboard_event_scan::@15/keyboard_event_scan::keycode#6 )
  keyboard_event_scan::keycode#2 = ++ keyboard_event_scan::keycode#4
  keyboard_event_scan::col#1 = keyboard_event_scan::col#3 + rangenext(0,7)
  keyboard_event_scan::$24 = keyboard_event_scan::col#1 != rangelast(0,7)
  if(keyboard_event_scan::$24) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@16
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  keyboard_event_scan::row#11 = phi( keyboard_event_scan::@10/keyboard_event_scan::row#5 )
  keyboard_event_scan::row_scan#6 = phi( keyboard_event_scan::@10/keyboard_event_scan::row_scan#1 )
  keyboard_event_scan::col#6 = phi( keyboard_event_scan::@10/keyboard_event_scan::col#2 )
  keyboard_event_scan::keycode#9 = phi( keyboard_event_scan::@10/keyboard_event_scan::keycode#8 )
  keyboard_events_size#19 = phi( keyboard_event_scan::@10/keyboard_events_size#39 )
  keyboard_event_scan::$19 = keyboard_events_size#19 != 8
  keyboard_event_scan::$20 = ! keyboard_event_scan::$19
  if(keyboard_event_scan::$20) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@14
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  keyboard_event_scan::row#13 = phi( keyboard_event_scan::@13/keyboard_event_scan::row#11 )
  keyboard_events_size#40 = phi( keyboard_event_scan::@13/keyboard_events_size#19 )
  keyboard_event_scan::keycode#10 = phi( keyboard_event_scan::@13/keyboard_event_scan::keycode#9 )
  keyboard_event_scan::col#4 = phi( keyboard_event_scan::@13/keyboard_event_scan::col#6 )
  keyboard_event_scan::row_scan#2 = phi( keyboard_event_scan::@13/keyboard_event_scan::row_scan#6 )
  keyboard_event_scan::$21 = keyboard_event_scan::row_scan#2 & keyboard_matrix_col_bitmask[keyboard_event_scan::col#4]
  keyboard_event_scan::event_type#0 = keyboard_event_scan::$21
  keyboard_event_scan::$22 = keyboard_event_scan::event_type#0 == 0
  if(keyboard_event_scan::$22) goto keyboard_event_scan::@12
  to:keyboard_event_scan::@15
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@14
  keyboard_event_scan::row#10 = phi( keyboard_event_scan::@14/keyboard_event_scan::row#13 )
  keyboard_event_scan::row_scan#7 = phi( keyboard_event_scan::@14/keyboard_event_scan::row_scan#2 )
  keyboard_event_scan::col#5 = phi( keyboard_event_scan::@14/keyboard_event_scan::col#4 )
  keyboard_events_size#20 = phi( keyboard_event_scan::@14/keyboard_events_size#40 )
  keyboard_event_scan::keycode#5 = phi( keyboard_event_scan::@14/keyboard_event_scan::keycode#10 )
  keyboard_event_scan::$23 = keyboard_event_scan::keycode#5 | $40
  keyboard_events[keyboard_events_size#20] = keyboard_event_scan::$23
  keyboard_events_size#0 = ++ keyboard_events_size#20
  to:keyboard_event_scan::@11
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@14
  keyboard_event_scan::row#12 = phi( keyboard_event_scan::@14/keyboard_event_scan::row#13 )
  keyboard_event_scan::row_scan#8 = phi( keyboard_event_scan::@14/keyboard_event_scan::row_scan#2 )
  keyboard_event_scan::col#7 = phi( keyboard_event_scan::@14/keyboard_event_scan::col#4 )
  keyboard_events_size#21 = phi( keyboard_event_scan::@14/keyboard_events_size#40 )
  keyboard_event_scan::keycode#6 = phi( keyboard_event_scan::@14/keyboard_event_scan::keycode#10 )
  keyboard_events[keyboard_events_size#21] = keyboard_event_scan::keycode#6
  keyboard_events_size#1 = ++ keyboard_events_size#21
  to:keyboard_event_scan::@11
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  keyboard_events_size#106 = phi( keyboard_event_scan::@11/keyboard_events_size#56 )
  keyboard_event_scan::keycode#14 = phi( keyboard_event_scan::@11/keyboard_event_scan::keycode#2 )
  keyboard_event_scan::row#6 = phi( keyboard_event_scan::@11/keyboard_event_scan::row#8 )
  keyboard_event_scan::row_scan#3 = phi( keyboard_event_scan::@11/keyboard_event_scan::row_scan#4 )
  keyboard_scan_values[keyboard_event_scan::row#6] = keyboard_event_scan::row_scan#3
  to:keyboard_event_scan::@9
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  keyboard_events_size#115 = phi( keyboard_event_scan::@9/keyboard_events_size#99 )
  keyboard_modifiers#0 = 0
  keyboard_event_pressed::keycode#0 = KEY_LSHIFT
  call keyboard_event_pressed 
  keyboard_event_pressed::return#0 = keyboard_event_pressed::return#5
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@18
  keyboard_events_size#112 = phi( keyboard_event_scan::@18/keyboard_events_size#115 )
  keyboard_modifiers#36 = phi( keyboard_event_scan::@18/keyboard_modifiers#0 )
  keyboard_event_pressed::return#6 = phi( keyboard_event_scan::@18/keyboard_event_pressed::return#0 )
  keyboard_event_scan::$0 = keyboard_event_pressed::return#6
  keyboard_event_scan::$1 = keyboard_event_scan::$0 != 0
  keyboard_event_scan::$2 = ! keyboard_event_scan::$1
  if(keyboard_event_scan::$2) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@19
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@19 keyboard_event_scan::@21
  keyboard_events_size#108 = phi( keyboard_event_scan::@19/keyboard_events_size#111, keyboard_event_scan::@21/keyboard_events_size#112 )
  keyboard_modifiers#55 = phi( keyboard_event_scan::@19/keyboard_modifiers#1, keyboard_event_scan::@21/keyboard_modifiers#36 )
  keyboard_event_pressed::keycode#1 = KEY_RSHIFT
  call keyboard_event_pressed 
  keyboard_event_pressed::return#1 = keyboard_event_pressed::return#5
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  keyboard_events_size#100 = phi( keyboard_event_scan::@1/keyboard_events_size#108 )
  keyboard_modifiers#37 = phi( keyboard_event_scan::@1/keyboard_modifiers#55 )
  keyboard_event_pressed::return#7 = phi( keyboard_event_scan::@1/keyboard_event_pressed::return#1 )
  keyboard_event_scan::$3 = keyboard_event_pressed::return#7
  keyboard_event_scan::$4 = keyboard_event_scan::$3 != 0
  keyboard_event_scan::$5 = ! keyboard_event_scan::$4
  if(keyboard_event_scan::$5) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@4
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@21
  keyboard_events_size#111 = phi( keyboard_event_scan::@21/keyboard_events_size#112 )
  keyboard_modifiers#18 = phi( keyboard_event_scan::@21/keyboard_modifiers#36 )
  keyboard_event_scan::$26 = keyboard_modifiers#18 | KEY_MODIFIER_LSHIFT
  keyboard_modifiers#1 = keyboard_event_scan::$26
  to:keyboard_event_scan::@1
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@4
  keyboard_events_size#91 = phi( keyboard_event_scan::@22/keyboard_events_size#100, keyboard_event_scan::@4/keyboard_events_size#101 )
  keyboard_modifiers#56 = phi( keyboard_event_scan::@22/keyboard_modifiers#37, keyboard_event_scan::@4/keyboard_modifiers#2 )
  keyboard_event_pressed::keycode#2 = KEY_CTRL
  call keyboard_event_pressed 
  keyboard_event_pressed::return#2 = keyboard_event_pressed::return#5
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  keyboard_events_size#79 = phi( keyboard_event_scan::@2/keyboard_events_size#91 )
  keyboard_modifiers#38 = phi( keyboard_event_scan::@2/keyboard_modifiers#56 )
  keyboard_event_pressed::return#8 = phi( keyboard_event_scan::@2/keyboard_event_pressed::return#2 )
  keyboard_event_scan::$6 = keyboard_event_pressed::return#8
  keyboard_event_scan::$7 = keyboard_event_scan::$6 != 0
  keyboard_event_scan::$8 = ! keyboard_event_scan::$7
  if(keyboard_event_scan::$8) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@5
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@22
  keyboard_events_size#101 = phi( keyboard_event_scan::@22/keyboard_events_size#100 )
  keyboard_modifiers#19 = phi( keyboard_event_scan::@22/keyboard_modifiers#37 )
  keyboard_event_scan::$27 = keyboard_modifiers#19 | KEY_MODIFIER_RSHIFT
  keyboard_modifiers#2 = keyboard_event_scan::$27
  to:keyboard_event_scan::@2
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@5
  keyboard_events_size#58 = phi( keyboard_event_scan::@23/keyboard_events_size#79, keyboard_event_scan::@5/keyboard_events_size#80 )
  keyboard_modifiers#57 = phi( keyboard_event_scan::@23/keyboard_modifiers#38, keyboard_event_scan::@5/keyboard_modifiers#3 )
  keyboard_event_pressed::keycode#3 = KEY_COMMODORE
  call keyboard_event_pressed 
  keyboard_event_pressed::return#3 = keyboard_event_pressed::return#5
  to:keyboard_event_scan::@24
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  keyboard_events_size#41 = phi( keyboard_event_scan::@3/keyboard_events_size#58 )
  keyboard_modifiers#39 = phi( keyboard_event_scan::@3/keyboard_modifiers#57 )
  keyboard_event_pressed::return#9 = phi( keyboard_event_scan::@3/keyboard_event_pressed::return#3 )
  keyboard_event_scan::$9 = keyboard_event_pressed::return#9
  keyboard_event_scan::$10 = keyboard_event_scan::$9 != 0
  keyboard_event_scan::$11 = ! keyboard_event_scan::$10
  if(keyboard_event_scan::$11) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@6
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  keyboard_events_size#80 = phi( keyboard_event_scan::@23/keyboard_events_size#79 )
  keyboard_modifiers#20 = phi( keyboard_event_scan::@23/keyboard_modifiers#38 )
  keyboard_event_scan::$28 = keyboard_modifiers#20 | KEY_MODIFIER_CTRL
  keyboard_modifiers#3 = keyboard_event_scan::$28
  to:keyboard_event_scan::@3
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@24
  keyboard_events_size#42 = phi( keyboard_event_scan::@24/keyboard_events_size#41 )
  keyboard_modifiers#21 = phi( keyboard_event_scan::@24/keyboard_modifiers#39 )
  keyboard_event_scan::$29 = keyboard_modifiers#21 | KEY_MODIFIER_COMMODORE
  keyboard_modifiers#4 = keyboard_event_scan::$29
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@24 keyboard_event_scan::@6
  keyboard_modifiers#22 = phi( keyboard_event_scan::@24/keyboard_modifiers#39, keyboard_event_scan::@6/keyboard_modifiers#4 )
  keyboard_events_size#22 = phi( keyboard_event_scan::@24/keyboard_events_size#41, keyboard_event_scan::@6/keyboard_events_size#42 )
  keyboard_events_size#2 = keyboard_events_size#22
  keyboard_modifiers#5 = keyboard_modifiers#22
  return 
  to:@return

byte keyboard_event_pressed(byte keyboard_event_pressed::keycode)
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@18 keyboard_event_scan::@2 keyboard_event_scan::@3
  keyboard_event_pressed::keycode#4 = phi( keyboard_event_scan::@1/keyboard_event_pressed::keycode#1, keyboard_event_scan::@18/keyboard_event_pressed::keycode#0, keyboard_event_scan::@2/keyboard_event_pressed::keycode#2, keyboard_event_scan::@3/keyboard_event_pressed::keycode#3 )
  keyboard_event_pressed::$0 = keyboard_event_pressed::keycode#4 >> 3
  keyboard_event_pressed::row_bits#0 = keyboard_scan_values[keyboard_event_pressed::$0]
  keyboard_event_pressed::$1 = keyboard_event_pressed::keycode#4 & 7
  keyboard_event_pressed::$2 = keyboard_event_pressed::row_bits#0 & keyboard_matrix_col_bitmask[keyboard_event_pressed::$1]
  keyboard_event_pressed::return#4 = keyboard_event_pressed::$2
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  keyboard_event_pressed::return#10 = phi( keyboard_event_pressed/keyboard_event_pressed::return#4 )
  keyboard_event_pressed::return#5 = keyboard_event_pressed::return#10
  return 
  to:@return

byte keyboard_event_get()
keyboard_event_get: scope:[keyboard_event_get]  from form_control::@23 gfx_mode::@35
  keyboard_events_size#23 = phi( form_control::@23/keyboard_events_size#13, gfx_mode::@35/keyboard_events_size#8 )
  keyboard_event_get::$0 = keyboard_events_size#23 == 0
  if(keyboard_event_get::$0) goto keyboard_event_get::@1
  to:keyboard_event_get::@2
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  keyboard_events_size#43 = phi( keyboard_event_get/keyboard_events_size#23 )
  keyboard_event_get::return#0 = $ff
  to:keyboard_event_get::@return
keyboard_event_get::@2: scope:[keyboard_event_get]  from keyboard_event_get
  keyboard_events_size#24 = phi( keyboard_event_get/keyboard_events_size#23 )
  keyboard_events_size#3 = -- keyboard_events_size#24
  keyboard_event_get::return#1 = keyboard_events[keyboard_events_size#3]
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get::@1 keyboard_event_get::@2
  keyboard_events_size#25 = phi( keyboard_event_get::@1/keyboard_events_size#43, keyboard_event_get::@2/keyboard_events_size#3 )
  keyboard_event_get::return#5 = phi( keyboard_event_get::@1/keyboard_event_get::return#0, keyboard_event_get::@2/keyboard_event_get::return#1 )
  keyboard_event_get::return#2 = keyboard_event_get::return#5
  keyboard_events_size#4 = keyboard_events_size#25
  return 
  to:@return

void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
bitmap_init: scope:[bitmap_init]  from gfx_init_VICII_bitmap
  bitmap_init::screen#1 = phi( gfx_init_VICII_bitmap/bitmap_init::screen#0 )
  bitmap_init::gfx#1 = phi( gfx_init_VICII_bitmap/bitmap_init::gfx#0 )
  bitmap_gfx#0 = bitmap_init::gfx#1
  bitmap_screen#0 = bitmap_init::screen#1
  bitmap_init::bits#0 = $80
  bitmap_init::x#0 = 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  bitmap_screen#46 = phi( bitmap_init/bitmap_screen#0, bitmap_init::@2/bitmap_screen#42 )
  bitmap_gfx#47 = phi( bitmap_init/bitmap_gfx#0, bitmap_init::@2/bitmap_gfx#43 )
  bitmap_init::gfx#4 = phi( bitmap_init/bitmap_init::gfx#1, bitmap_init::@2/bitmap_init::gfx#3 )
  bitmap_init::x#2 = phi( bitmap_init/bitmap_init::x#0, bitmap_init::@2/bitmap_init::x#1 )
  bitmap_init::bits#3 = phi( bitmap_init/bitmap_init::bits#0, bitmap_init::@2/bitmap_init::bits#4 )
  bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
  bitmap_init::$0 = bitmap_init::bits#1 == 0
  bitmap_init::$1 = ! bitmap_init::$0
  if(bitmap_init::$1) goto bitmap_init::@2
  to:bitmap_init::@3
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@3
  bitmap_screen#42 = phi( bitmap_init::@1/bitmap_screen#46, bitmap_init::@3/bitmap_screen#47 )
  bitmap_gfx#43 = phi( bitmap_init::@1/bitmap_gfx#47, bitmap_init::@3/bitmap_gfx#48 )
  bitmap_init::gfx#3 = phi( bitmap_init::@1/bitmap_init::gfx#4, bitmap_init::@3/bitmap_init::gfx#5 )
  bitmap_init::bits#4 = phi( bitmap_init::@1/bitmap_init::bits#1, bitmap_init::@3/bitmap_init::bits#2 )
  bitmap_init::x#3 = phi( bitmap_init::@1/bitmap_init::x#2, bitmap_init::@3/bitmap_init::x#4 )
  bitmap_init::x#1 = bitmap_init::x#3 + rangenext(0,$ff)
  bitmap_init::$2 = bitmap_init::x#1 != rangelast(0,$ff)
  if(bitmap_init::$2) goto bitmap_init::@1
  to:bitmap_init::@4
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@1
  bitmap_screen#47 = phi( bitmap_init::@1/bitmap_screen#46 )
  bitmap_gfx#48 = phi( bitmap_init::@1/bitmap_gfx#47 )
  bitmap_init::gfx#5 = phi( bitmap_init::@1/bitmap_init::gfx#4 )
  bitmap_init::x#4 = phi( bitmap_init::@1/bitmap_init::x#2 )
  bitmap_init::bits#2 = $80
  to:bitmap_init::@2
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@2
  bitmap_screen#37 = phi( bitmap_init::@2/bitmap_screen#42 )
  bitmap_gfx#38 = phi( bitmap_init::@2/bitmap_gfx#43 )
  bitmap_init::gfx#2 = phi( bitmap_init::@2/bitmap_init::gfx#3 )
  bitmap_init::yoffs#0 = bitmap_init::gfx#2
  bitmap_init::y#0 = 0
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  bitmap_screen#29 = phi( bitmap_init::@4/bitmap_screen#37, bitmap_init::@6/bitmap_screen#21 )
  bitmap_gfx#30 = phi( bitmap_init::@4/bitmap_gfx#38, bitmap_init::@6/bitmap_gfx#21 )
  bitmap_init::yoffs#2 = phi( bitmap_init::@4/bitmap_init::yoffs#0, bitmap_init::@6/bitmap_init::yoffs#4 )
  bitmap_init::y#2 = phi( bitmap_init::@4/bitmap_init::y#0, bitmap_init::@6/bitmap_init::y#1 )
  bitmap_init::$3 = bitmap_init::y#2 & 7
  bitmap_init::$4 = < bitmap_init::yoffs#2
  bitmap_init::$5 = bitmap_init::$3 | bitmap_init::$4
  bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5
  bitmap_init::$6 = > bitmap_init::yoffs#2
  bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6
  bitmap_init::$7 = bitmap_init::y#2 & 7
  bitmap_init::$8 = bitmap_init::$7 == 7
  bitmap_init::$9 = ! bitmap_init::$8
  if(bitmap_init::$9) goto bitmap_init::@6
  to:bitmap_init::@7
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@5 bitmap_init::@7
  bitmap_screen#21 = phi( bitmap_init::@5/bitmap_screen#29, bitmap_init::@7/bitmap_screen#30 )
  bitmap_gfx#21 = phi( bitmap_init::@5/bitmap_gfx#30, bitmap_init::@7/bitmap_gfx#31 )
  bitmap_init::yoffs#4 = phi( bitmap_init::@5/bitmap_init::yoffs#2, bitmap_init::@7/bitmap_init::yoffs#1 )
  bitmap_init::y#3 = phi( bitmap_init::@5/bitmap_init::y#2, bitmap_init::@7/bitmap_init::y#4 )
  bitmap_init::y#1 = bitmap_init::y#3 + rangenext(0,$ff)
  bitmap_init::$11 = bitmap_init::y#1 != rangelast(0,$ff)
  if(bitmap_init::$11) goto bitmap_init::@5
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@5
  bitmap_screen#30 = phi( bitmap_init::@5/bitmap_screen#29 )
  bitmap_gfx#31 = phi( bitmap_init::@5/bitmap_gfx#30 )
  bitmap_init::y#4 = phi( bitmap_init::@5/bitmap_init::y#2 )
  bitmap_init::yoffs#3 = phi( bitmap_init::@5/bitmap_init::yoffs#2 )
  bitmap_init::$10 = bitmap_init::yoffs#3 + $28*8
  bitmap_init::yoffs#1 = bitmap_init::$10
  to:bitmap_init::@6
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@6
  bitmap_screen#11 = phi( bitmap_init::@6/bitmap_screen#21 )
  bitmap_gfx#11 = phi( bitmap_init::@6/bitmap_gfx#21 )
  bitmap_gfx#1 = bitmap_gfx#11
  bitmap_screen#1 = bitmap_screen#11
  return 
  to:@return

void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
bitmap_clear: scope:[bitmap_clear]  from gfx_init_VICII_bitmap::@3
  bitmap_gfx#22 = phi( gfx_init_VICII_bitmap::@3/bitmap_gfx#6 )
  bitmap_screen#12 = phi( gfx_init_VICII_bitmap::@3/bitmap_screen#6 )
  bitmap_clear::bgcol#1 = phi( gfx_init_VICII_bitmap::@3/bitmap_clear::bgcol#0 )
  bitmap_clear::fgcol#1 = phi( gfx_init_VICII_bitmap::@3/bitmap_clear::fgcol#0 )
  bitmap_clear::$0 = bitmap_clear::fgcol#1 * $10
  bitmap_clear::$1 = bitmap_clear::$0 + bitmap_clear::bgcol#1
  bitmap_clear::col#0 = bitmap_clear::$1
  memset::str#1 = (void*)bitmap_screen#12
  memset::c#1 = bitmap_clear::col#0
  memset::num#1 = $3e8
  call memset 
  memset::return#3 = memset::return#1
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  bitmap_gfx#12 = phi( bitmap_clear/bitmap_gfx#22 )
  memset::str#2 = (void*)bitmap_gfx#12
  memset::c#2 = 0
  memset::num#2 = $1f40
  call memset 
  memset::return#4 = memset::return#1
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@2
  return 
  to:@return

void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line::@3 bitmap_line::@4 bitmap_line::@6 bitmap_line::@9
  bitmap_plot::x#4 = phi( bitmap_line::@3/bitmap_plot::x#2, bitmap_line::@4/bitmap_plot::x#0, bitmap_line::@6/bitmap_plot::x#1, bitmap_line::@9/bitmap_plot::x#3 )
  bitmap_plot::y#4 = phi( bitmap_line::@3/bitmap_plot::y#2, bitmap_line::@4/bitmap_plot::y#0, bitmap_line::@6/bitmap_plot::y#1, bitmap_line::@9/bitmap_plot::y#3 )
  bitmap_plot::plotter#0 = (byte*){ bitmap_plot_yhi[bitmap_plot::y#4], bitmap_plot_ylo[bitmap_plot::y#4] }
  bitmap_plot::$0 = bitmap_plot::x#4 & $fff8
  bitmap_plot::plotter#1 = bitmap_plot::plotter#0 + bitmap_plot::$0
  bitmap_plot::$1 = < bitmap_plot::x#4
  *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1]
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return

void bitmap_line(word bitmap_line::x1 , word bitmap_line::y1 , word bitmap_line::x2 , word bitmap_line::y2)
bitmap_line: scope:[bitmap_line]  from gfx_init_VICII_bitmap::@2
  bitmap_line::y2#4 = phi( gfx_init_VICII_bitmap::@2/bitmap_line::y2#0 )
  bitmap_line::x2#1 = phi( gfx_init_VICII_bitmap::@2/bitmap_line::x2#0 )
  bitmap_line::y1#1 = phi( gfx_init_VICII_bitmap::@2/bitmap_line::y1#0 )
  bitmap_line::x1#1 = phi( gfx_init_VICII_bitmap::@2/bitmap_line::x1#0 )
  bitmap_line::x#0 = bitmap_line::x1#1
  bitmap_line::y#0 = bitmap_line::y1#1
  bitmap_line::$0 = bitmap_line::x2#1 - bitmap_line::x1#1
  abs_u16::w#0 = bitmap_line::$0
  call abs_u16 
  abs_u16::return#0 = abs_u16::return#4
  to:bitmap_line::@12
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line
  bitmap_line::y#16 = phi( bitmap_line/bitmap_line::y#0 )
  bitmap_line::x#16 = phi( bitmap_line/bitmap_line::x#0 )
  bitmap_line::x1#4 = phi( bitmap_line/bitmap_line::x1#1 )
  bitmap_line::x2#7 = phi( bitmap_line/bitmap_line::x2#1 )
  bitmap_line::y1#2 = phi( bitmap_line/bitmap_line::y1#1 )
  bitmap_line::y2#1 = phi( bitmap_line/bitmap_line::y2#4 )
  abs_u16::return#5 = phi( bitmap_line/abs_u16::return#0 )
  bitmap_line::$1 = abs_u16::return#5
  bitmap_line::dx#0 = bitmap_line::$1
  bitmap_line::$2 = bitmap_line::y2#1 - bitmap_line::y1#2
  abs_u16::w#1 = bitmap_line::$2
  call abs_u16 
  abs_u16::return#1 = abs_u16::return#4
  to:bitmap_line::@13
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@12
  bitmap_line::y1#5 = phi( bitmap_line::@12/bitmap_line::y1#2 )
  bitmap_line::y2#8 = phi( bitmap_line::@12/bitmap_line::y2#1 )
  bitmap_line::y#10 = phi( bitmap_line::@12/bitmap_line::y#16 )
  bitmap_line::x#10 = phi( bitmap_line::@12/bitmap_line::x#16 )
  bitmap_line::x1#3 = phi( bitmap_line::@12/bitmap_line::x1#4 )
  bitmap_line::x2#4 = phi( bitmap_line::@12/bitmap_line::x2#7 )
  bitmap_line::dx#1 = phi( bitmap_line::@12/bitmap_line::dx#0 )
  abs_u16::return#6 = phi( bitmap_line::@12/abs_u16::return#1 )
  bitmap_line::$3 = abs_u16::return#6
  bitmap_line::dy#0 = bitmap_line::$3
  bitmap_line::$4 = bitmap_line::dx#1 == 0
  bitmap_line::$5 = bitmap_line::dy#0 == 0
  bitmap_line::$6 = bitmap_line::$4 && bitmap_line::$5
  bitmap_line::$7 = ! bitmap_line::$6
  if(bitmap_line::$7) goto bitmap_line::@1
  to:bitmap_line::@4
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line::@13
  bitmap_line::y#19 = phi( bitmap_line::@13/bitmap_line::y#10 )
  bitmap_line::x#19 = phi( bitmap_line::@13/bitmap_line::x#10 )
  bitmap_line::dy#9 = phi( bitmap_line::@13/bitmap_line::dy#0 )
  bitmap_line::dx#10 = phi( bitmap_line::@13/bitmap_line::dx#1 )
  bitmap_line::y1#4 = phi( bitmap_line::@13/bitmap_line::y1#5 )
  bitmap_line::y2#5 = phi( bitmap_line::@13/bitmap_line::y2#8 )
  bitmap_line::x1#2 = phi( bitmap_line::@13/bitmap_line::x1#3 )
  bitmap_line::x2#2 = phi( bitmap_line::@13/bitmap_line::x2#4 )
  bitmap_line::$8 = bitmap_line::x2#2 - bitmap_line::x1#2
  sgn_u16::w#0 = bitmap_line::$8
  call sgn_u16 
  sgn_u16::return#0 = sgn_u16::return#4
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@1
  bitmap_line::x2#11 = phi( bitmap_line::@1/bitmap_line::x2#2 )
  bitmap_line::y#18 = phi( bitmap_line::@1/bitmap_line::y#19 )
  bitmap_line::x#18 = phi( bitmap_line::@1/bitmap_line::x#19 )
  bitmap_line::dy#6 = phi( bitmap_line::@1/bitmap_line::dy#9 )
  bitmap_line::dx#7 = phi( bitmap_line::@1/bitmap_line::dx#10 )
  bitmap_line::y1#3 = phi( bitmap_line::@1/bitmap_line::y1#4 )
  bitmap_line::y2#2 = phi( bitmap_line::@1/bitmap_line::y2#5 )
  sgn_u16::return#5 = phi( bitmap_line::@1/sgn_u16::return#0 )
  bitmap_line::$9 = sgn_u16::return#5
  bitmap_line::sx#0 = bitmap_line::$9
  bitmap_line::$10 = bitmap_line::y2#2 - bitmap_line::y1#3
  sgn_u16::w#1 = bitmap_line::$10
  call sgn_u16 
  sgn_u16::return#1 = sgn_u16::return#4
  to:bitmap_line::@15
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line::@14
  bitmap_line::y2#11 = phi( bitmap_line::@14/bitmap_line::y2#2 )
  bitmap_line::x2#10 = phi( bitmap_line::@14/bitmap_line::x2#11 )
  bitmap_line::sx#8 = phi( bitmap_line::@14/bitmap_line::sx#0 )
  bitmap_line::y#17 = phi( bitmap_line::@14/bitmap_line::y#18 )
  bitmap_line::x#17 = phi( bitmap_line::@14/bitmap_line::x#18 )
  bitmap_line::dy#1 = phi( bitmap_line::@14/bitmap_line::dy#6 )
  bitmap_line::dx#2 = phi( bitmap_line::@14/bitmap_line::dx#7 )
  sgn_u16::return#6 = phi( bitmap_line::@14/sgn_u16::return#1 )
  bitmap_line::$11 = sgn_u16::return#6
  bitmap_line::sy#0 = bitmap_line::$11
  bitmap_line::$12 = bitmap_line::dx#2 > bitmap_line::dy#1
  if(bitmap_line::$12) goto bitmap_line::@2
  to:bitmap_line::@5
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@13
  bitmap_line::y#3 = phi( bitmap_line::@13/bitmap_line::y#10 )
  bitmap_line::x#3 = phi( bitmap_line::@13/bitmap_line::x#10 )
  bitmap_plot::x#0 = bitmap_line::x#3
  bitmap_plot::y#0 = (byte)bitmap_line::y#3
  call bitmap_plot 
  to:bitmap_line::@16
bitmap_line::@16: scope:[bitmap_line]  from bitmap_line::@4
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@16 bitmap_line::@18
  return 
  to:@return
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line::@15
  bitmap_line::sy#10 = phi( bitmap_line::@15/bitmap_line::sy#0 )
  bitmap_line::x2#9 = phi( bitmap_line::@15/bitmap_line::x2#10 )
  bitmap_line::dx#13 = phi( bitmap_line::@15/bitmap_line::dx#2 )
  bitmap_line::sx#7 = phi( bitmap_line::@15/bitmap_line::sx#8 )
  bitmap_line::y#14 = phi( bitmap_line::@15/bitmap_line::y#17 )
  bitmap_line::x#14 = phi( bitmap_line::@15/bitmap_line::x#17 )
  bitmap_line::dy#2 = phi( bitmap_line::@15/bitmap_line::dy#1 )
  bitmap_line::$20 = bitmap_line::dy#2 / 2
  bitmap_line::e1#0 = bitmap_line::$20
  to:bitmap_line::@9
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@15
  bitmap_line::sx#9 = phi( bitmap_line::@15/bitmap_line::sx#8 )
  bitmap_line::y2#10 = phi( bitmap_line::@15/bitmap_line::y2#11 )
  bitmap_line::dy#10 = phi( bitmap_line::@15/bitmap_line::dy#1 )
  bitmap_line::sy#5 = phi( bitmap_line::@15/bitmap_line::sy#0 )
  bitmap_line::y#11 = phi( bitmap_line::@15/bitmap_line::y#17 )
  bitmap_line::x#11 = phi( bitmap_line::@15/bitmap_line::x#17 )
  bitmap_line::dx#3 = phi( bitmap_line::@15/bitmap_line::dx#2 )
  bitmap_line::$15 = bitmap_line::dx#3 / 2
  bitmap_line::e#0 = bitmap_line::$15
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5 bitmap_line::@7
  bitmap_line::sx#5 = phi( bitmap_line::@5/bitmap_line::sx#9, bitmap_line::@7/bitmap_line::sx#10 )
  bitmap_line::y2#9 = phi( bitmap_line::@5/bitmap_line::y2#10, bitmap_line::@7/bitmap_line::y2#3 )
  bitmap_line::dy#7 = phi( bitmap_line::@5/bitmap_line::dy#10, bitmap_line::@7/bitmap_line::dy#11 )
  bitmap_line::dx#8 = phi( bitmap_line::@5/bitmap_line::dx#3, bitmap_line::@7/bitmap_line::dx#11 )
  bitmap_line::e#5 = phi( bitmap_line::@5/bitmap_line::e#0, bitmap_line::@7/bitmap_line::e#6 )
  bitmap_line::sy#3 = phi( bitmap_line::@5/bitmap_line::sy#5, bitmap_line::@7/bitmap_line::sy#6 )
  bitmap_line::y#4 = phi( bitmap_line::@5/bitmap_line::y#11, bitmap_line::@7/bitmap_line::y#6 )
  bitmap_line::x#4 = phi( bitmap_line::@5/bitmap_line::x#11, bitmap_line::@7/bitmap_line::x#12 )
  bitmap_plot::x#1 = bitmap_line::x#4
  bitmap_plot::y#1 = (byte)bitmap_line::y#4
  call bitmap_plot 
  to:bitmap_line::@17
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@6
  bitmap_line::sx#3 = phi( bitmap_line::@6/bitmap_line::sx#5 )
  bitmap_line::x#13 = phi( bitmap_line::@6/bitmap_line::x#4 )
  bitmap_line::y2#6 = phi( bitmap_line::@6/bitmap_line::y2#9 )
  bitmap_line::dy#3 = phi( bitmap_line::@6/bitmap_line::dy#7 )
  bitmap_line::dx#4 = phi( bitmap_line::@6/bitmap_line::dx#8 )
  bitmap_line::e#3 = phi( bitmap_line::@6/bitmap_line::e#5 )
  bitmap_line::sy#1 = phi( bitmap_line::@6/bitmap_line::sy#3 )
  bitmap_line::y#5 = phi( bitmap_line::@6/bitmap_line::y#4 )
  bitmap_line::y#1 = bitmap_line::y#5 + bitmap_line::sy#1
  bitmap_line::e#1 = bitmap_line::e#3 + bitmap_line::dx#4
  bitmap_line::$17 = bitmap_line::dy#3 < bitmap_line::e#1
  bitmap_line::$18 = ! bitmap_line::$17
  if(bitmap_line::$18) goto bitmap_line::@7
  to:bitmap_line::@8
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@17 bitmap_line::@8
  bitmap_line::sx#10 = phi( bitmap_line::@17/bitmap_line::sx#3, bitmap_line::@8/bitmap_line::sx#1 )
  bitmap_line::dy#11 = phi( bitmap_line::@17/bitmap_line::dy#3, bitmap_line::@8/bitmap_line::dy#4 )
  bitmap_line::dx#11 = phi( bitmap_line::@17/bitmap_line::dx#4, bitmap_line::@8/bitmap_line::dx#14 )
  bitmap_line::e#6 = phi( bitmap_line::@17/bitmap_line::e#1, bitmap_line::@8/bitmap_line::e#2 )
  bitmap_line::sy#6 = phi( bitmap_line::@17/bitmap_line::sy#1, bitmap_line::@8/bitmap_line::sy#8 )
  bitmap_line::x#12 = phi( bitmap_line::@17/bitmap_line::x#13, bitmap_line::@8/bitmap_line::x#1 )
  bitmap_line::y2#3 = phi( bitmap_line::@17/bitmap_line::y2#6, bitmap_line::@8/bitmap_line::y2#7 )
  bitmap_line::y#6 = phi( bitmap_line::@17/bitmap_line::y#1, bitmap_line::@8/bitmap_line::y#12 )
  bitmap_line::$19 = bitmap_line::y#6 != bitmap_line::y2#3
  if(bitmap_line::$19) goto bitmap_line::@6
  to:bitmap_line::@3
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@17
  bitmap_line::dx#14 = phi( bitmap_line::@17/bitmap_line::dx#4 )
  bitmap_line::sy#8 = phi( bitmap_line::@17/bitmap_line::sy#1 )
  bitmap_line::y2#7 = phi( bitmap_line::@17/bitmap_line::y2#6 )
  bitmap_line::y#12 = phi( bitmap_line::@17/bitmap_line::y#1 )
  bitmap_line::dy#4 = phi( bitmap_line::@17/bitmap_line::dy#3 )
  bitmap_line::e#4 = phi( bitmap_line::@17/bitmap_line::e#1 )
  bitmap_line::sx#1 = phi( bitmap_line::@17/bitmap_line::sx#3 )
  bitmap_line::x#5 = phi( bitmap_line::@17/bitmap_line::x#13 )
  bitmap_line::x#1 = bitmap_line::x#5 + bitmap_line::sx#1
  bitmap_line::e#2 = bitmap_line::e#4 - bitmap_line::dy#4
  to:bitmap_line::@7
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@7
  bitmap_line::y#7 = phi( bitmap_line::@10/bitmap_line::y#13, bitmap_line::@7/bitmap_line::y#6 )
  bitmap_line::x#6 = phi( bitmap_line::@10/bitmap_line::x#9, bitmap_line::@7/bitmap_line::x#12 )
  bitmap_plot::x#2 = bitmap_line::x#6
  bitmap_plot::y#2 = (byte)bitmap_line::y#7
  call bitmap_plot 
  to:bitmap_line::@18
bitmap_line::@18: scope:[bitmap_line]  from bitmap_line::@3
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@2
  bitmap_line::sy#7 = phi( bitmap_line::@10/bitmap_line::sy#9, bitmap_line::@2/bitmap_line::sy#10 )
  bitmap_line::x2#8 = phi( bitmap_line::@10/bitmap_line::x2#3, bitmap_line::@2/bitmap_line::x2#9 )
  bitmap_line::dx#9 = phi( bitmap_line::@10/bitmap_line::dx#12, bitmap_line::@2/bitmap_line::dx#13 )
  bitmap_line::dy#8 = phi( bitmap_line::@10/bitmap_line::dy#12, bitmap_line::@2/bitmap_line::dy#2 )
  bitmap_line::e1#5 = phi( bitmap_line::@10/bitmap_line::e1#6, bitmap_line::@2/bitmap_line::e1#0 )
  bitmap_line::sx#4 = phi( bitmap_line::@10/bitmap_line::sx#6, bitmap_line::@2/bitmap_line::sx#7 )
  bitmap_line::y#8 = phi( bitmap_line::@10/bitmap_line::y#13, bitmap_line::@2/bitmap_line::y#14 )
  bitmap_line::x#7 = phi( bitmap_line::@10/bitmap_line::x#9, bitmap_line::@2/bitmap_line::x#14 )
  bitmap_plot::x#3 = bitmap_line::x#7
  bitmap_plot::y#3 = (byte)bitmap_line::y#8
  call bitmap_plot 
  to:bitmap_line::@19
bitmap_line::@19: scope:[bitmap_line]  from bitmap_line::@9
  bitmap_line::sy#4 = phi( bitmap_line::@9/bitmap_line::sy#7 )
  bitmap_line::y#15 = phi( bitmap_line::@9/bitmap_line::y#8 )
  bitmap_line::x2#6 = phi( bitmap_line::@9/bitmap_line::x2#8 )
  bitmap_line::dx#5 = phi( bitmap_line::@9/bitmap_line::dx#9 )
  bitmap_line::dy#5 = phi( bitmap_line::@9/bitmap_line::dy#8 )
  bitmap_line::e1#3 = phi( bitmap_line::@9/bitmap_line::e1#5 )
  bitmap_line::sx#2 = phi( bitmap_line::@9/bitmap_line::sx#4 )
  bitmap_line::x#8 = phi( bitmap_line::@9/bitmap_line::x#7 )
  bitmap_line::x#2 = bitmap_line::x#8 + bitmap_line::sx#2
  bitmap_line::e1#1 = bitmap_line::e1#3 + bitmap_line::dy#5
  bitmap_line::$22 = bitmap_line::dx#5 < bitmap_line::e1#1
  bitmap_line::$23 = ! bitmap_line::$22
  if(bitmap_line::$23) goto bitmap_line::@10
  to:bitmap_line::@11
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@11 bitmap_line::@19
  bitmap_line::sy#9 = phi( bitmap_line::@11/bitmap_line::sy#2, bitmap_line::@19/bitmap_line::sy#4 )
  bitmap_line::dx#12 = phi( bitmap_line::@11/bitmap_line::dx#6, bitmap_line::@19/bitmap_line::dx#5 )
  bitmap_line::dy#12 = phi( bitmap_line::@11/bitmap_line::dy#13, bitmap_line::@19/bitmap_line::dy#5 )
  bitmap_line::e1#6 = phi( bitmap_line::@11/bitmap_line::e1#2, bitmap_line::@19/bitmap_line::e1#1 )
  bitmap_line::sx#6 = phi( bitmap_line::@11/bitmap_line::sx#11, bitmap_line::@19/bitmap_line::sx#2 )
  bitmap_line::y#13 = phi( bitmap_line::@11/bitmap_line::y#2, bitmap_line::@19/bitmap_line::y#15 )
  bitmap_line::x2#3 = phi( bitmap_line::@11/bitmap_line::x2#5, bitmap_line::@19/bitmap_line::x2#6 )
  bitmap_line::x#9 = phi( bitmap_line::@11/bitmap_line::x#15, bitmap_line::@19/bitmap_line::x#2 )
  bitmap_line::$24 = bitmap_line::x#9 != bitmap_line::x2#3
  if(bitmap_line::$24) goto bitmap_line::@9
  to:bitmap_line::@3
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@19
  bitmap_line::dy#13 = phi( bitmap_line::@19/bitmap_line::dy#5 )
  bitmap_line::sx#11 = phi( bitmap_line::@19/bitmap_line::sx#2 )
  bitmap_line::x2#5 = phi( bitmap_line::@19/bitmap_line::x2#6 )
  bitmap_line::x#15 = phi( bitmap_line::@19/bitmap_line::x#2 )
  bitmap_line::dx#6 = phi( bitmap_line::@19/bitmap_line::dx#5 )
  bitmap_line::e1#4 = phi( bitmap_line::@19/bitmap_line::e1#1 )
  bitmap_line::sy#2 = phi( bitmap_line::@19/bitmap_line::sy#4 )
  bitmap_line::y#9 = phi( bitmap_line::@19/bitmap_line::y#15 )
  bitmap_line::y#2 = bitmap_line::y#9 + bitmap_line::sy#2
  bitmap_line::e1#2 = bitmap_line::e1#4 - bitmap_line::dx#6
  to:bitmap_line::@10

word abs_u16(word abs_u16::w)
abs_u16: scope:[abs_u16]  from bitmap_line bitmap_line::@12
  abs_u16::w#2 = phi( bitmap_line/abs_u16::w#0, bitmap_line::@12/abs_u16::w#1 )
  abs_u16::$0 = > abs_u16::w#2
  abs_u16::$1 = abs_u16::$0 & $80
  abs_u16::$3 = 0 != abs_u16::$1
  if(abs_u16::$3) goto abs_u16::@1
  to:abs_u16::@2
abs_u16::@1: scope:[abs_u16]  from abs_u16
  abs_u16::w#3 = phi( abs_u16/abs_u16::w#2 )
  abs_u16::$2 = - abs_u16::w#3
  abs_u16::return#2 = abs_u16::$2
  to:abs_u16::@return
abs_u16::@2: scope:[abs_u16]  from abs_u16
  abs_u16::w#4 = phi( abs_u16/abs_u16::w#2 )
  abs_u16::return#3 = abs_u16::w#4
  to:abs_u16::@return
abs_u16::@return: scope:[abs_u16]  from abs_u16::@1 abs_u16::@2
  abs_u16::return#7 = phi( abs_u16::@1/abs_u16::return#2, abs_u16::@2/abs_u16::return#3 )
  abs_u16::return#4 = abs_u16::return#7
  return 
  to:@return

word sgn_u16(word sgn_u16::w)
sgn_u16: scope:[sgn_u16]  from bitmap_line::@1 bitmap_line::@14
  sgn_u16::w#2 = phi( bitmap_line::@1/sgn_u16::w#0, bitmap_line::@14/sgn_u16::w#1 )
  sgn_u16::$0 = > sgn_u16::w#2
  sgn_u16::$1 = sgn_u16::$0 & $80
  sgn_u16::$2 = 0 != sgn_u16::$1
  if(sgn_u16::$2) goto sgn_u16::@1
  to:sgn_u16::@2
sgn_u16::@1: scope:[sgn_u16]  from sgn_u16
  sgn_u16::return#2 = -1
  to:sgn_u16::@return
sgn_u16::@2: scope:[sgn_u16]  from sgn_u16
  sgn_u16::return#3 = 1
  to:sgn_u16::@return
sgn_u16::@return: scope:[sgn_u16]  from sgn_u16::@1 sgn_u16::@2
  sgn_u16::return#7 = phi( sgn_u16::@1/sgn_u16::return#2, sgn_u16::@2/sgn_u16::return#3 )
  sgn_u16::return#4 = sgn_u16::return#7
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  form_field_idx#50 = phi( __start::@1/form_field_idx#36 )
  keyboard_modifiers#83 = phi( __start::@1/keyboard_modifiers#54 )
  keyboard_events_size#92 = phi( __start::@1/keyboard_events_size#55 )
  form_cursor_count#45 = phi( __start::@1/form_cursor_count#28 )
  print_char_cursor#66 = phi( __start::@1/print_char_cursor#52 )
  print_line_cursor#62 = phi( __start::@1/print_line_cursor#46 )
  print_screen#38 = phi( __start::@1/print_screen#26 )
  bitmap_screen#31 = phi( __start::@1/bitmap_screen#28 )
  bitmap_gfx#32 = phi( __start::@1/bitmap_gfx#29 )
  asm { sei  }
  *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  *PROCPORT = PROCPORT_RAM_IO
  *DTV_FEATURE = DTV_FEATURE_ENABLE
  call keyboard_init 
  to:main::@3
main::@3: scope:[main]  from main
  form_field_idx#46 = phi( main/form_field_idx#50 )
  keyboard_modifiers#77 = phi( main/keyboard_modifiers#83 )
  keyboard_events_size#81 = phi( main/keyboard_events_size#92 )
  form_cursor_count#40 = phi( main/form_cursor_count#45 )
  print_char_cursor#62 = phi( main/print_char_cursor#66 )
  print_line_cursor#57 = phi( main/print_line_cursor#62 )
  print_screen#34 = phi( main/print_screen#38 )
  bitmap_screen#22 = phi( main/bitmap_screen#31 )
  bitmap_gfx#23 = phi( main/bitmap_gfx#32 )
  call gfx_init 
  to:main::@4
main::@4: scope:[main]  from main::@3
  form_field_idx#37 = phi( main::@3/form_field_idx#46 )
  keyboard_modifiers#58 = phi( main::@3/keyboard_modifiers#77 )
  keyboard_events_size#59 = phi( main::@3/keyboard_events_size#81 )
  form_cursor_count#29 = phi( main::@3/form_cursor_count#40 )
  print_char_cursor#56 = phi( main::@3/print_char_cursor#62 )
  print_line_cursor#49 = phi( main::@3/print_line_cursor#57 )
  print_screen#27 = phi( main::@3/print_screen#34 )
  bitmap_screen#13 = phi( main::@3/bitmap_screen#5 )
  bitmap_gfx#13 = phi( main::@3/bitmap_gfx#5 )
  bitmap_gfx#2 = bitmap_gfx#13
  bitmap_screen#2 = bitmap_screen#13
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@6
  form_field_idx#28 = phi( main::@4/form_field_idx#37, main::@6/form_field_idx#38 )
  keyboard_modifiers#41 = phi( main::@4/keyboard_modifiers#58, main::@6/keyboard_modifiers#7 )
  keyboard_events_size#45 = phi( main::@4/keyboard_events_size#59, main::@6/keyboard_events_size#6 )
  form_cursor_count#21 = phi( main::@4/form_cursor_count#29, main::@6/form_cursor_count#30 )
  print_char_cursor#48 = phi( main::@4/print_char_cursor#56, main::@6/print_char_cursor#57 )
  print_line_cursor#42 = phi( main::@4/print_line_cursor#49, main::@6/print_line_cursor#50 )
  print_screen#21 = phi( main::@4/print_screen#27, main::@6/print_screen#28 )
  bitmap_screen#23 = phi( main::@4/bitmap_screen#2, main::@6/bitmap_screen#32 )
  bitmap_gfx#24 = phi( main::@4/bitmap_gfx#2, main::@6/bitmap_gfx#33 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  bitmap_screen#43 = phi( main::@1/bitmap_screen#23 )
  bitmap_gfx#44 = phi( main::@1/bitmap_gfx#24 )
  form_field_idx#27 = phi( main::@1/form_field_idx#28 )
  keyboard_modifiers#40 = phi( main::@1/keyboard_modifiers#41 )
  keyboard_events_size#44 = phi( main::@1/keyboard_events_size#45 )
  form_cursor_count#20 = phi( main::@1/form_cursor_count#21 )
  print_char_cursor#47 = phi( main::@1/print_char_cursor#48 )
  print_line_cursor#41 = phi( main::@1/print_line_cursor#42 )
  print_screen#20 = phi( main::@1/print_screen#21 )
  call form_mode 
  to:main::@5
main::@5: scope:[main]  from main::@2
  bitmap_screen#38 = phi( main::@2/bitmap_screen#43 )
  bitmap_gfx#39 = phi( main::@2/bitmap_gfx#44 )
  form_field_idx#12 = phi( main::@2/form_field_idx#3 )
  keyboard_modifiers#23 = phi( main::@2/keyboard_modifiers#12 )
  keyboard_events_size#26 = phi( main::@2/keyboard_events_size#12 )
  form_cursor_count#11 = phi( main::@2/form_cursor_count#3 )
  print_char_cursor#32 = phi( main::@2/print_char_cursor#19 )
  print_line_cursor#27 = phi( main::@2/print_line_cursor#16 )
  print_screen#13 = phi( main::@2/print_screen#6 )
  print_screen#2 = print_screen#13
  print_line_cursor#8 = print_line_cursor#27
  print_char_cursor#11 = print_char_cursor#32
  form_cursor_count#0 = form_cursor_count#11
  keyboard_events_size#5 = keyboard_events_size#26
  keyboard_modifiers#6 = keyboard_modifiers#23
  form_field_idx#0 = form_field_idx#12
  call gfx_mode 
  to:main::@6
main::@6: scope:[main]  from main::@5
  form_field_idx#38 = phi( main::@5/form_field_idx#0 )
  form_cursor_count#30 = phi( main::@5/form_cursor_count#0 )
  print_char_cursor#57 = phi( main::@5/print_char_cursor#11 )
  print_line_cursor#50 = phi( main::@5/print_line_cursor#8 )
  print_screen#28 = phi( main::@5/print_screen#2 )
  bitmap_screen#32 = phi( main::@5/bitmap_screen#38 )
  bitmap_gfx#33 = phi( main::@5/bitmap_gfx#39 )
  keyboard_modifiers#24 = phi( main::@5/keyboard_modifiers#10 )
  keyboard_events_size#27 = phi( main::@5/keyboard_events_size#10 )
  keyboard_events_size#6 = keyboard_events_size#27
  keyboard_modifiers#7 = keyboard_modifiers#24
  to:main::@1
main::@return: scope:[main]  from main::@1
  form_field_idx#13 = phi( main::@1/form_field_idx#28 )
  keyboard_modifiers#25 = phi( main::@1/keyboard_modifiers#41 )
  keyboard_events_size#28 = phi( main::@1/keyboard_events_size#45 )
  form_cursor_count#12 = phi( main::@1/form_cursor_count#21 )
  print_char_cursor#33 = phi( main::@1/print_char_cursor#48 )
  print_line_cursor#28 = phi( main::@1/print_line_cursor#42 )
  print_screen#14 = phi( main::@1/print_screen#21 )
  bitmap_screen#14 = phi( main::@1/bitmap_screen#23 )
  bitmap_gfx#14 = phi( main::@1/bitmap_gfx#24 )
  bitmap_gfx#3 = bitmap_gfx#14
  bitmap_screen#3 = bitmap_screen#14
  print_screen#3 = print_screen#14
  print_line_cursor#9 = print_line_cursor#28
  print_char_cursor#12 = print_char_cursor#33
  form_cursor_count#1 = form_cursor_count#12
  keyboard_events_size#7 = keyboard_events_size#28
  keyboard_modifiers#8 = keyboard_modifiers#25
  form_field_idx#1 = form_field_idx#13
  return 
  to:@return

dword get_plane(byte get_plane::idx)
get_plane: scope:[get_plane]  from gfx_mode::@30 gfx_mode::@9
  get_plane::idx#2 = phi( gfx_mode::@30/get_plane::idx#1, gfx_mode::@9/get_plane::idx#0 )
  get_plane::$0 = get_plane::idx#2 == 0
  if(get_plane::$0) goto get_plane::@1
  to:get_plane::@15
get_plane::@1: scope:[get_plane]  from get_plane
  get_plane::return#0 = (dword)VICII_SCREEN0
  to:get_plane::@return
get_plane::@15: scope:[get_plane]  from get_plane
  get_plane::idx#3 = phi( get_plane/get_plane::idx#2 )
  get_plane::$1 = get_plane::idx#3 == 1
  if(get_plane::$1) goto get_plane::@2
  to:get_plane::@16
get_plane::@2: scope:[get_plane]  from get_plane::@15
  get_plane::return#1 = (dword)VICII_SCREEN1
  to:get_plane::@return
get_plane::@16: scope:[get_plane]  from get_plane::@15
  get_plane::idx#4 = phi( get_plane::@15/get_plane::idx#3 )
  get_plane::$2 = get_plane::idx#4 == 2
  if(get_plane::$2) goto get_plane::@3
  to:get_plane::@17
get_plane::@3: scope:[get_plane]  from get_plane::@16
  get_plane::return#2 = (dword)VICII_SCREEN2
  to:get_plane::@return
get_plane::@17: scope:[get_plane]  from get_plane::@16
  get_plane::idx#5 = phi( get_plane::@16/get_plane::idx#4 )
  get_plane::$3 = get_plane::idx#5 == 3
  if(get_plane::$3) goto get_plane::@4
  to:get_plane::@18
get_plane::@4: scope:[get_plane]  from get_plane::@17
  get_plane::return#3 = (dword)VICII_SCREEN3
  to:get_plane::@return
get_plane::@18: scope:[get_plane]  from get_plane::@17
  get_plane::idx#6 = phi( get_plane::@17/get_plane::idx#5 )
  get_plane::$4 = get_plane::idx#6 == 4
  if(get_plane::$4) goto get_plane::@5
  to:get_plane::@19
get_plane::@5: scope:[get_plane]  from get_plane::@18
  get_plane::return#4 = (dword)VICII_BITMAP
  to:get_plane::@return
get_plane::@19: scope:[get_plane]  from get_plane::@18
  get_plane::idx#7 = phi( get_plane::@18/get_plane::idx#6 )
  get_plane::$5 = get_plane::idx#7 == 5
  if(get_plane::$5) goto get_plane::@6
  to:get_plane::@20
get_plane::@6: scope:[get_plane]  from get_plane::@19
  get_plane::return#5 = (dword)VICII_CHARSET_ROM
  to:get_plane::@return
get_plane::@20: scope:[get_plane]  from get_plane::@19
  get_plane::idx#8 = phi( get_plane::@19/get_plane::idx#7 )
  get_plane::$6 = get_plane::idx#8 == 6
  if(get_plane::$6) goto get_plane::@7
  to:get_plane::@21
get_plane::@7: scope:[get_plane]  from get_plane::@20
  get_plane::return#6 = (dword)PLANE_8BPP_CHUNKY
  to:get_plane::@return
get_plane::@21: scope:[get_plane]  from get_plane::@20
  get_plane::idx#9 = phi( get_plane::@20/get_plane::idx#8 )
  get_plane::$7 = get_plane::idx#9 == 7
  if(get_plane::$7) goto get_plane::@8
  to:get_plane::@22
get_plane::@8: scope:[get_plane]  from get_plane::@21
  get_plane::return#7 = (dword)PLANE_HORISONTAL
  to:get_plane::@return
get_plane::@22: scope:[get_plane]  from get_plane::@21
  get_plane::idx#10 = phi( get_plane::@21/get_plane::idx#9 )
  get_plane::$8 = get_plane::idx#10 == 8
  if(get_plane::$8) goto get_plane::@9
  to:get_plane::@23
get_plane::@9: scope:[get_plane]  from get_plane::@22
  get_plane::return#8 = (dword)PLANE_VERTICAL
  to:get_plane::@return
get_plane::@23: scope:[get_plane]  from get_plane::@22
  get_plane::idx#11 = phi( get_plane::@22/get_plane::idx#10 )
  get_plane::$9 = get_plane::idx#11 == 9
  if(get_plane::$9) goto get_plane::@10
  to:get_plane::@24
get_plane::@10: scope:[get_plane]  from get_plane::@23
  get_plane::return#9 = (dword)PLANE_HORISONTAL2
  to:get_plane::@return
get_plane::@24: scope:[get_plane]  from get_plane::@23
  get_plane::idx#12 = phi( get_plane::@23/get_plane::idx#11 )
  get_plane::$10 = get_plane::idx#12 == $a
  if(get_plane::$10) goto get_plane::@11
  to:get_plane::@25
get_plane::@11: scope:[get_plane]  from get_plane::@24
  get_plane::return#10 = (dword)PLANE_VERTICAL2
  to:get_plane::@return
get_plane::@25: scope:[get_plane]  from get_plane::@24
  get_plane::idx#13 = phi( get_plane::@24/get_plane::idx#12 )
  get_plane::$11 = get_plane::idx#13 == $b
  if(get_plane::$11) goto get_plane::@12
  to:get_plane::@26
get_plane::@12: scope:[get_plane]  from get_plane::@25
  get_plane::return#11 = (dword)PLANE_CHARSET8
  to:get_plane::@return
get_plane::@26: scope:[get_plane]  from get_plane::@25
  get_plane::idx#14 = phi( get_plane::@25/get_plane::idx#13 )
  get_plane::$12 = get_plane::idx#14 == $c
  if(get_plane::$12) goto get_plane::@13
  to:get_plane::@27
get_plane::@13: scope:[get_plane]  from get_plane::@26
  get_plane::return#12 = (dword)PLANE_BLANK
  to:get_plane::@return
get_plane::@27: scope:[get_plane]  from get_plane::@26
  get_plane::idx#15 = phi( get_plane::@26/get_plane::idx#14 )
  get_plane::$13 = get_plane::idx#15 == $d
  get_plane::$14 = ! get_plane::$13
  if(get_plane::$14) goto get_plane::@14
  to:get_plane::@28
get_plane::@28: scope:[get_plane]  from get_plane::@27
  get_plane::return#13 = (dword)PLANE_FULL
  to:get_plane::@return
get_plane::@return: scope:[get_plane]  from get_plane::@1 get_plane::@10 get_plane::@11 get_plane::@12 get_plane::@13 get_plane::@14 get_plane::@2 get_plane::@28 get_plane::@3 get_plane::@4 get_plane::@5 get_plane::@6 get_plane::@7 get_plane::@8 get_plane::@9
  get_plane::return#18 = phi( get_plane::@1/get_plane::return#0, get_plane::@10/get_plane::return#9, get_plane::@11/get_plane::return#10, get_plane::@12/get_plane::return#11, get_plane::@13/get_plane::return#12, get_plane::@14/get_plane::return#15, get_plane::@2/get_plane::return#1, get_plane::@28/get_plane::return#13, get_plane::@3/get_plane::return#2, get_plane::@4/get_plane::return#3, get_plane::@5/get_plane::return#4, get_plane::@6/get_plane::return#5, get_plane::@7/get_plane::return#6, get_plane::@8/get_plane::return#7, get_plane::@9/get_plane::return#8 )
  get_plane::return#14 = get_plane::return#18
  return 
  to:@return
get_plane::@14: scope:[get_plane]  from get_plane::@27
  get_plane::return#15 = (dword)VICII_SCREEN0
  to:get_plane::@return

byte* get_VICII_screen(byte get_VICII_screen::idx)
get_VICII_screen: scope:[get_VICII_screen]  from gfx_mode::@31 gfx_mode::@33
  get_VICII_screen::idx#2 = phi( gfx_mode::@31/get_VICII_screen::idx#0, gfx_mode::@33/get_VICII_screen::idx#1 )
  get_VICII_screen::$0 = get_VICII_screen::idx#2 == 0
  if(get_VICII_screen::$0) goto get_VICII_screen::@1
  to:get_VICII_screen::@6
get_VICII_screen::@1: scope:[get_VICII_screen]  from get_VICII_screen
  get_VICII_screen::return#0 = VICII_SCREEN0
  to:get_VICII_screen::@return
get_VICII_screen::@6: scope:[get_VICII_screen]  from get_VICII_screen
  get_VICII_screen::idx#3 = phi( get_VICII_screen/get_VICII_screen::idx#2 )
  get_VICII_screen::$1 = get_VICII_screen::idx#3 == 1
  if(get_VICII_screen::$1) goto get_VICII_screen::@2
  to:get_VICII_screen::@7
get_VICII_screen::@2: scope:[get_VICII_screen]  from get_VICII_screen::@6
  get_VICII_screen::return#1 = VICII_SCREEN1
  to:get_VICII_screen::@return
get_VICII_screen::@7: scope:[get_VICII_screen]  from get_VICII_screen::@6
  get_VICII_screen::idx#4 = phi( get_VICII_screen::@6/get_VICII_screen::idx#3 )
  get_VICII_screen::$2 = get_VICII_screen::idx#4 == 2
  if(get_VICII_screen::$2) goto get_VICII_screen::@3
  to:get_VICII_screen::@8
get_VICII_screen::@3: scope:[get_VICII_screen]  from get_VICII_screen::@7
  get_VICII_screen::return#2 = VICII_SCREEN2
  to:get_VICII_screen::@return
get_VICII_screen::@8: scope:[get_VICII_screen]  from get_VICII_screen::@7
  get_VICII_screen::idx#5 = phi( get_VICII_screen::@7/get_VICII_screen::idx#4 )
  get_VICII_screen::$3 = get_VICII_screen::idx#5 == 3
  if(get_VICII_screen::$3) goto get_VICII_screen::@4
  to:get_VICII_screen::@9
get_VICII_screen::@4: scope:[get_VICII_screen]  from get_VICII_screen::@8
  get_VICII_screen::return#3 = VICII_SCREEN3
  to:get_VICII_screen::@return
get_VICII_screen::@9: scope:[get_VICII_screen]  from get_VICII_screen::@8
  get_VICII_screen::idx#6 = phi( get_VICII_screen::@8/get_VICII_screen::idx#5 )
  get_VICII_screen::$4 = get_VICII_screen::idx#6 == 4
  get_VICII_screen::$5 = ! get_VICII_screen::$4
  if(get_VICII_screen::$5) goto get_VICII_screen::@5
  to:get_VICII_screen::@10
get_VICII_screen::@10: scope:[get_VICII_screen]  from get_VICII_screen::@9
  get_VICII_screen::return#4 = VICII_SCREEN4
  to:get_VICII_screen::@return
get_VICII_screen::@return: scope:[get_VICII_screen]  from get_VICII_screen::@1 get_VICII_screen::@10 get_VICII_screen::@2 get_VICII_screen::@3 get_VICII_screen::@4 get_VICII_screen::@5
  get_VICII_screen::return#9 = phi( get_VICII_screen::@1/get_VICII_screen::return#0, get_VICII_screen::@10/get_VICII_screen::return#4, get_VICII_screen::@2/get_VICII_screen::return#1, get_VICII_screen::@3/get_VICII_screen::return#2, get_VICII_screen::@4/get_VICII_screen::return#3, get_VICII_screen::@5/get_VICII_screen::return#6 )
  get_VICII_screen::return#5 = get_VICII_screen::return#9
  return 
  to:@return
get_VICII_screen::@5: scope:[get_VICII_screen]  from get_VICII_screen::@9
  get_VICII_screen::return#6 = VICII_SCREEN0
  to:get_VICII_screen::@return

byte* get_VICII_charset(byte get_VICII_charset::idx)
get_VICII_charset: scope:[get_VICII_charset]  from gfx_mode::@32
  get_VICII_charset::idx#1 = phi( gfx_mode::@32/get_VICII_charset::idx#0 )
  get_VICII_charset::$0 = get_VICII_charset::idx#1 == 0
  if(get_VICII_charset::$0) goto get_VICII_charset::@1
  to:get_VICII_charset::@3
get_VICII_charset::@1: scope:[get_VICII_charset]  from get_VICII_charset
  get_VICII_charset::return#0 = VICII_CHARSET_ROM
  to:get_VICII_charset::@return
get_VICII_charset::@3: scope:[get_VICII_charset]  from get_VICII_charset
  get_VICII_charset::idx#2 = phi( get_VICII_charset/get_VICII_charset::idx#1 )
  get_VICII_charset::$1 = get_VICII_charset::idx#2 == 1
  get_VICII_charset::$2 = ! get_VICII_charset::$1
  if(get_VICII_charset::$2) goto get_VICII_charset::@2
  to:get_VICII_charset::@4
get_VICII_charset::@4: scope:[get_VICII_charset]  from get_VICII_charset::@3
  get_VICII_charset::return#1 = VICII_BITMAP
  to:get_VICII_charset::@return
get_VICII_charset::@return: scope:[get_VICII_charset]  from get_VICII_charset::@1 get_VICII_charset::@2 get_VICII_charset::@4
  get_VICII_charset::return#5 = phi( get_VICII_charset::@1/get_VICII_charset::return#0, get_VICII_charset::@2/get_VICII_charset::return#3, get_VICII_charset::@4/get_VICII_charset::return#1 )
  get_VICII_charset::return#2 = get_VICII_charset::return#5
  return 
  to:@return
get_VICII_charset::@2: scope:[get_VICII_charset]  from get_VICII_charset::@3
  get_VICII_charset::return#3 = VICII_CHARSET_ROM
  to:get_VICII_charset::@return

void apply_preset(byte apply_preset::idx)
apply_preset: scope:[apply_preset]  from form_mode::@7
  apply_preset::idx#1 = phi( form_mode::@7/apply_preset::idx#0 )
  apply_preset::preset#0 = (byte*) 0
  apply_preset::$0 = apply_preset::idx#1 == 0
  if(apply_preset::$0) goto apply_preset::@1
  to:apply_preset::@13
apply_preset::@1: scope:[apply_preset]  from apply_preset
  apply_preset::preset#1 = preset_stdchar
  to:apply_preset::@12
apply_preset::@13: scope:[apply_preset]  from apply_preset
  apply_preset::idx#2 = phi( apply_preset/apply_preset::idx#1 )
  apply_preset::$1 = apply_preset::idx#2 == 1
  if(apply_preset::$1) goto apply_preset::@2
  to:apply_preset::@14
apply_preset::@2: scope:[apply_preset]  from apply_preset::@13
  apply_preset::preset#2 = preset_ecmchar
  to:apply_preset::@12
apply_preset::@14: scope:[apply_preset]  from apply_preset::@13
  apply_preset::idx#3 = phi( apply_preset::@13/apply_preset::idx#2 )
  apply_preset::$2 = apply_preset::idx#3 == 2
  if(apply_preset::$2) goto apply_preset::@3
  to:apply_preset::@15
apply_preset::@3: scope:[apply_preset]  from apply_preset::@14
  apply_preset::preset#3 = preset_stdbm
  to:apply_preset::@12
apply_preset::@15: scope:[apply_preset]  from apply_preset::@14
  apply_preset::idx#4 = phi( apply_preset::@14/apply_preset::idx#3 )
  apply_preset::$3 = apply_preset::idx#4 == 3
  if(apply_preset::$3) goto apply_preset::@4
  to:apply_preset::@16
apply_preset::@4: scope:[apply_preset]  from apply_preset::@15
  apply_preset::preset#4 = preset_mcbm
  to:apply_preset::@12
apply_preset::@16: scope:[apply_preset]  from apply_preset::@15
  apply_preset::idx#5 = phi( apply_preset::@15/apply_preset::idx#4 )
  apply_preset::$4 = apply_preset::idx#5 == 4
  if(apply_preset::$4) goto apply_preset::@5
  to:apply_preset::@17
apply_preset::@5: scope:[apply_preset]  from apply_preset::@16
  apply_preset::preset#5 = preset_hi_stdchar
  to:apply_preset::@12
apply_preset::@17: scope:[apply_preset]  from apply_preset::@16
  apply_preset::idx#6 = phi( apply_preset::@16/apply_preset::idx#5 )
  apply_preset::$5 = apply_preset::idx#6 == 5
  if(apply_preset::$5) goto apply_preset::@6
  to:apply_preset::@18
apply_preset::@6: scope:[apply_preset]  from apply_preset::@17
  apply_preset::preset#6 = preset_hi_ecmchar
  to:apply_preset::@12
apply_preset::@18: scope:[apply_preset]  from apply_preset::@17
  apply_preset::idx#7 = phi( apply_preset::@17/apply_preset::idx#6 )
  apply_preset::$6 = apply_preset::idx#7 == 6
  if(apply_preset::$6) goto apply_preset::@7
  to:apply_preset::@19
apply_preset::@7: scope:[apply_preset]  from apply_preset::@18
  apply_preset::preset#7 = preset_twoplane
  to:apply_preset::@12
apply_preset::@19: scope:[apply_preset]  from apply_preset::@18
  apply_preset::idx#8 = phi( apply_preset::@18/apply_preset::idx#7 )
  apply_preset::$7 = apply_preset::idx#8 == 7
  if(apply_preset::$7) goto apply_preset::@8
  to:apply_preset::@20
apply_preset::@8: scope:[apply_preset]  from apply_preset::@19
  apply_preset::preset#8 = preset_chunky
  to:apply_preset::@12
apply_preset::@20: scope:[apply_preset]  from apply_preset::@19
  apply_preset::idx#9 = phi( apply_preset::@19/apply_preset::idx#8 )
  apply_preset::$8 = apply_preset::idx#9 == 8
  if(apply_preset::$8) goto apply_preset::@9
  to:apply_preset::@21
apply_preset::@9: scope:[apply_preset]  from apply_preset::@20
  apply_preset::preset#9 = preset_sixsfred
  to:apply_preset::@12
apply_preset::@21: scope:[apply_preset]  from apply_preset::@20
  apply_preset::idx#10 = phi( apply_preset::@20/apply_preset::idx#9 )
  apply_preset::$9 = apply_preset::idx#10 == 9
  if(apply_preset::$9) goto apply_preset::@10
  to:apply_preset::@22
apply_preset::@10: scope:[apply_preset]  from apply_preset::@21
  apply_preset::preset#10 = preset_sixsfred2
  to:apply_preset::@12
apply_preset::@22: scope:[apply_preset]  from apply_preset::@21
  apply_preset::idx#11 = phi( apply_preset::@21/apply_preset::idx#10 )
  apply_preset::$10 = apply_preset::idx#11 == $a
  if(apply_preset::$10) goto apply_preset::@11
  to:apply_preset::@23
apply_preset::@11: scope:[apply_preset]  from apply_preset::@22
  apply_preset::preset#11 = preset_8bpppixelcell
  to:apply_preset::@12
apply_preset::@23: scope:[apply_preset]  from apply_preset::@22
  apply_preset::preset#12 = preset_stdchar
  to:apply_preset::@12
apply_preset::@12: scope:[apply_preset]  from apply_preset::@1 apply_preset::@10 apply_preset::@11 apply_preset::@2 apply_preset::@23 apply_preset::@3 apply_preset::@4 apply_preset::@5 apply_preset::@6 apply_preset::@7 apply_preset::@8 apply_preset::@9
  apply_preset::preset#15 = phi( apply_preset::@1/apply_preset::preset#1, apply_preset::@10/apply_preset::preset#10, apply_preset::@11/apply_preset::preset#11, apply_preset::@2/apply_preset::preset#2, apply_preset::@23/apply_preset::preset#12, apply_preset::@3/apply_preset::preset#3, apply_preset::@4/apply_preset::preset#4, apply_preset::@5/apply_preset::preset#5, apply_preset::@6/apply_preset::preset#6, apply_preset::@7/apply_preset::preset#7, apply_preset::@8/apply_preset::preset#8, apply_preset::@9/apply_preset::preset#9 )
  apply_preset::i#0 = 0
  to:apply_preset::@24
apply_preset::@24: scope:[apply_preset]  from apply_preset::@12 apply_preset::@25
  apply_preset::preset#14 = phi( apply_preset::@12/apply_preset::preset#15, apply_preset::@25/apply_preset::preset#13 )
  apply_preset::i#2 = phi( apply_preset::@12/apply_preset::i#0, apply_preset::@25/apply_preset::i#1 )
  apply_preset::$11 = apply_preset::i#2 != form_fields_cnt
  if(apply_preset::$11) goto apply_preset::@25
  to:apply_preset::@return
apply_preset::@25: scope:[apply_preset]  from apply_preset::@24
  apply_preset::i#3 = phi( apply_preset::@24/apply_preset::i#2 )
  apply_preset::preset#13 = phi( apply_preset::@24/apply_preset::preset#14 )
  form_fields_val[apply_preset::i#3] = apply_preset::preset#13[apply_preset::i#3]
  apply_preset::i#1 = ++ apply_preset::i#3
  to:apply_preset::@24
apply_preset::@return: scope:[apply_preset]  from apply_preset::@24
  return 
  to:@return

void render_preset_name(byte render_preset_name::idx)
render_preset_name: scope:[render_preset_name]  from form_mode::@15 form_mode::@19
  render_preset_name::idx#2 = phi( form_mode::@15/render_preset_name::idx#0, form_mode::@19/render_preset_name::idx#1 )
  render_preset_name::name#0 = (byte*) 0
  render_preset_name::$0 = render_preset_name::idx#2 == 0
  if(render_preset_name::$0) goto render_preset_name::@1
  to:render_preset_name::@13
render_preset_name::@1: scope:[render_preset_name]  from render_preset_name
  render_preset_name::name#1 = render_preset_name::$12
  to:render_preset_name::@12
render_preset_name::@13: scope:[render_preset_name]  from render_preset_name
  render_preset_name::idx#3 = phi( render_preset_name/render_preset_name::idx#2 )
  render_preset_name::$1 = render_preset_name::idx#3 == 1
  if(render_preset_name::$1) goto render_preset_name::@2
  to:render_preset_name::@14
render_preset_name::@2: scope:[render_preset_name]  from render_preset_name::@13
  render_preset_name::name#2 = render_preset_name::$13
  to:render_preset_name::@12
render_preset_name::@14: scope:[render_preset_name]  from render_preset_name::@13
  render_preset_name::idx#4 = phi( render_preset_name::@13/render_preset_name::idx#3 )
  render_preset_name::$2 = render_preset_name::idx#4 == 2
  if(render_preset_name::$2) goto render_preset_name::@3
  to:render_preset_name::@15
render_preset_name::@3: scope:[render_preset_name]  from render_preset_name::@14
  render_preset_name::name#3 = render_preset_name::$14
  to:render_preset_name::@12
render_preset_name::@15: scope:[render_preset_name]  from render_preset_name::@14
  render_preset_name::idx#5 = phi( render_preset_name::@14/render_preset_name::idx#4 )
  render_preset_name::$3 = render_preset_name::idx#5 == 3
  if(render_preset_name::$3) goto render_preset_name::@4
  to:render_preset_name::@16
render_preset_name::@4: scope:[render_preset_name]  from render_preset_name::@15
  render_preset_name::name#4 = render_preset_name::$15
  to:render_preset_name::@12
render_preset_name::@16: scope:[render_preset_name]  from render_preset_name::@15
  render_preset_name::idx#6 = phi( render_preset_name::@15/render_preset_name::idx#5 )
  render_preset_name::$4 = render_preset_name::idx#6 == 4
  if(render_preset_name::$4) goto render_preset_name::@5
  to:render_preset_name::@17
render_preset_name::@5: scope:[render_preset_name]  from render_preset_name::@16
  render_preset_name::name#5 = render_preset_name::$16
  to:render_preset_name::@12
render_preset_name::@17: scope:[render_preset_name]  from render_preset_name::@16
  render_preset_name::idx#7 = phi( render_preset_name::@16/render_preset_name::idx#6 )
  render_preset_name::$5 = render_preset_name::idx#7 == 5
  if(render_preset_name::$5) goto render_preset_name::@6
  to:render_preset_name::@18
render_preset_name::@6: scope:[render_preset_name]  from render_preset_name::@17
  render_preset_name::name#6 = render_preset_name::$17
  to:render_preset_name::@12
render_preset_name::@18: scope:[render_preset_name]  from render_preset_name::@17
  render_preset_name::idx#8 = phi( render_preset_name::@17/render_preset_name::idx#7 )
  render_preset_name::$6 = render_preset_name::idx#8 == 6
  if(render_preset_name::$6) goto render_preset_name::@7
  to:render_preset_name::@19
render_preset_name::@7: scope:[render_preset_name]  from render_preset_name::@18
  render_preset_name::name#7 = render_preset_name::$18
  to:render_preset_name::@12
render_preset_name::@19: scope:[render_preset_name]  from render_preset_name::@18
  render_preset_name::idx#9 = phi( render_preset_name::@18/render_preset_name::idx#8 )
  render_preset_name::$7 = render_preset_name::idx#9 == 7
  if(render_preset_name::$7) goto render_preset_name::@8
  to:render_preset_name::@20
render_preset_name::@8: scope:[render_preset_name]  from render_preset_name::@19
  render_preset_name::name#8 = render_preset_name::$19
  to:render_preset_name::@12
render_preset_name::@20: scope:[render_preset_name]  from render_preset_name::@19
  render_preset_name::idx#10 = phi( render_preset_name::@19/render_preset_name::idx#9 )
  render_preset_name::$8 = render_preset_name::idx#10 == 8
  if(render_preset_name::$8) goto render_preset_name::@9
  to:render_preset_name::@21
render_preset_name::@9: scope:[render_preset_name]  from render_preset_name::@20
  render_preset_name::name#9 = render_preset_name::$20
  to:render_preset_name::@12
render_preset_name::@21: scope:[render_preset_name]  from render_preset_name::@20
  render_preset_name::idx#11 = phi( render_preset_name::@20/render_preset_name::idx#10 )
  render_preset_name::$9 = render_preset_name::idx#11 == 9
  if(render_preset_name::$9) goto render_preset_name::@10
  to:render_preset_name::@22
render_preset_name::@10: scope:[render_preset_name]  from render_preset_name::@21
  render_preset_name::name#10 = render_preset_name::$21
  to:render_preset_name::@12
render_preset_name::@22: scope:[render_preset_name]  from render_preset_name::@21
  render_preset_name::idx#12 = phi( render_preset_name::@21/render_preset_name::idx#11 )
  render_preset_name::$10 = render_preset_name::idx#12 == $a
  if(render_preset_name::$10) goto render_preset_name::@11
  to:render_preset_name::@23
render_preset_name::@11: scope:[render_preset_name]  from render_preset_name::@22
  render_preset_name::name#11 = render_preset_name::$22
  to:render_preset_name::@12
render_preset_name::@23: scope:[render_preset_name]  from render_preset_name::@22
  render_preset_name::name#12 = render_preset_name::$23
  to:render_preset_name::@12
render_preset_name::@12: scope:[render_preset_name]  from render_preset_name::@1 render_preset_name::@10 render_preset_name::@11 render_preset_name::@2 render_preset_name::@23 render_preset_name::@3 render_preset_name::@4 render_preset_name::@5 render_preset_name::@6 render_preset_name::@7 render_preset_name::@8 render_preset_name::@9
  render_preset_name::name#13 = phi( render_preset_name::@1/render_preset_name::name#1, render_preset_name::@10/render_preset_name::name#10, render_preset_name::@11/render_preset_name::name#11, render_preset_name::@2/render_preset_name::name#2, render_preset_name::@23/render_preset_name::name#12, render_preset_name::@3/render_preset_name::name#3, render_preset_name::@4/render_preset_name::name#4, render_preset_name::@5/render_preset_name::name#5, render_preset_name::@6/render_preset_name::name#6, render_preset_name::@7/render_preset_name::name#7, render_preset_name::@8/render_preset_name::name#8, render_preset_name::@9/render_preset_name::name#9 )
  print_str_at::str#1 = render_preset_name::name#13
  print_str_at::at#1 = FORM_SCREEN+$28*2+$a
  call print_str_at 
  to:render_preset_name::@24
render_preset_name::@24: scope:[render_preset_name]  from render_preset_name::@12
  to:render_preset_name::@return
render_preset_name::@return: scope:[render_preset_name]  from render_preset_name::@24
  return 
  to:@return

void gfx_mode()
gfx_mode: scope:[gfx_mode]  from main::@5
  keyboard_modifiers#125 = phi( main::@5/keyboard_modifiers#6 )
  keyboard_events_size#144 = phi( main::@5/keyboard_events_size#5 )
  gfx_mode::dtv_control#0 = 0
  gfx_mode::$0 = *form_ctrl_line != 0
  gfx_mode::$1 = ! gfx_mode::$0
  if(gfx_mode::$1) goto gfx_mode::@1
  to:gfx_mode::@11
gfx_mode::@1: scope:[gfx_mode]  from gfx_mode gfx_mode::@11
  keyboard_modifiers#123 = phi( gfx_mode/keyboard_modifiers#125, gfx_mode::@11/keyboard_modifiers#126 )
  keyboard_events_size#142 = phi( gfx_mode/keyboard_events_size#144, gfx_mode::@11/keyboard_events_size#145 )
  gfx_mode::dtv_control#14 = phi( gfx_mode/gfx_mode::dtv_control#0, gfx_mode::@11/gfx_mode::dtv_control#1 )
  gfx_mode::$2 = *form_ctrl_borof != 0
  gfx_mode::$3 = ! gfx_mode::$2
  if(gfx_mode::$3) goto gfx_mode::@2
  to:gfx_mode::@12
gfx_mode::@11: scope:[gfx_mode]  from gfx_mode
  keyboard_modifiers#126 = phi( gfx_mode/keyboard_modifiers#125 )
  keyboard_events_size#145 = phi( gfx_mode/keyboard_events_size#144 )
  gfx_mode::dtv_control#7 = phi( gfx_mode/gfx_mode::dtv_control#0 )
  gfx_mode::$64 = gfx_mode::dtv_control#7 | DTV_LINEAR
  gfx_mode::dtv_control#1 = gfx_mode::$64
  to:gfx_mode::@1
gfx_mode::@2: scope:[gfx_mode]  from gfx_mode::@1 gfx_mode::@12
  keyboard_modifiers#122 = phi( gfx_mode::@1/keyboard_modifiers#123, gfx_mode::@12/keyboard_modifiers#124 )
  keyboard_events_size#141 = phi( gfx_mode::@1/keyboard_events_size#142, gfx_mode::@12/keyboard_events_size#143 )
  gfx_mode::dtv_control#15 = phi( gfx_mode::@1/gfx_mode::dtv_control#14, gfx_mode::@12/gfx_mode::dtv_control#2 )
  gfx_mode::$4 = *form_ctrl_hicol != 0
  gfx_mode::$5 = ! gfx_mode::$4
  if(gfx_mode::$5) goto gfx_mode::@3
  to:gfx_mode::@13
gfx_mode::@12: scope:[gfx_mode]  from gfx_mode::@1
  keyboard_modifiers#124 = phi( gfx_mode::@1/keyboard_modifiers#123 )
  keyboard_events_size#143 = phi( gfx_mode::@1/keyboard_events_size#142 )
  gfx_mode::dtv_control#8 = phi( gfx_mode::@1/gfx_mode::dtv_control#14 )
  gfx_mode::$65 = gfx_mode::dtv_control#8 | DTV_BORDER_OFF
  gfx_mode::dtv_control#2 = gfx_mode::$65
  to:gfx_mode::@2
gfx_mode::@3: scope:[gfx_mode]  from gfx_mode::@13 gfx_mode::@2
  keyboard_modifiers#120 = phi( gfx_mode::@13/keyboard_modifiers#121, gfx_mode::@2/keyboard_modifiers#122 )
  keyboard_events_size#139 = phi( gfx_mode::@13/keyboard_events_size#140, gfx_mode::@2/keyboard_events_size#141 )
  gfx_mode::dtv_control#16 = phi( gfx_mode::@13/gfx_mode::dtv_control#3, gfx_mode::@2/gfx_mode::dtv_control#15 )
  gfx_mode::$6 = *form_ctrl_overs != 0
  gfx_mode::$7 = ! gfx_mode::$6
  if(gfx_mode::$7) goto gfx_mode::@4
  to:gfx_mode::@14
gfx_mode::@13: scope:[gfx_mode]  from gfx_mode::@2
  keyboard_modifiers#121 = phi( gfx_mode::@2/keyboard_modifiers#122 )
  keyboard_events_size#140 = phi( gfx_mode::@2/keyboard_events_size#141 )
  gfx_mode::dtv_control#9 = phi( gfx_mode::@2/gfx_mode::dtv_control#15 )
  gfx_mode::$66 = gfx_mode::dtv_control#9 | DTV_HIGHCOLOR
  gfx_mode::dtv_control#3 = gfx_mode::$66
  to:gfx_mode::@3
gfx_mode::@4: scope:[gfx_mode]  from gfx_mode::@14 gfx_mode::@3
  keyboard_modifiers#118 = phi( gfx_mode::@14/keyboard_modifiers#119, gfx_mode::@3/keyboard_modifiers#120 )
  keyboard_events_size#137 = phi( gfx_mode::@14/keyboard_events_size#138, gfx_mode::@3/keyboard_events_size#139 )
  gfx_mode::dtv_control#17 = phi( gfx_mode::@14/gfx_mode::dtv_control#4, gfx_mode::@3/gfx_mode::dtv_control#16 )
  gfx_mode::$8 = *form_ctrl_colof != 0
  gfx_mode::$9 = ! gfx_mode::$8
  if(gfx_mode::$9) goto gfx_mode::@5
  to:gfx_mode::@15
gfx_mode::@14: scope:[gfx_mode]  from gfx_mode::@3
  keyboard_modifiers#119 = phi( gfx_mode::@3/keyboard_modifiers#120 )
  keyboard_events_size#138 = phi( gfx_mode::@3/keyboard_events_size#139 )
  gfx_mode::dtv_control#10 = phi( gfx_mode::@3/gfx_mode::dtv_control#16 )
  gfx_mode::$67 = gfx_mode::dtv_control#10 | DTV_OVERSCAN
  gfx_mode::dtv_control#4 = gfx_mode::$67
  to:gfx_mode::@4
gfx_mode::@5: scope:[gfx_mode]  from gfx_mode::@15 gfx_mode::@4
  keyboard_modifiers#116 = phi( gfx_mode::@15/keyboard_modifiers#117, gfx_mode::@4/keyboard_modifiers#118 )
  keyboard_events_size#135 = phi( gfx_mode::@15/keyboard_events_size#136, gfx_mode::@4/keyboard_events_size#137 )
  gfx_mode::dtv_control#18 = phi( gfx_mode::@15/gfx_mode::dtv_control#5, gfx_mode::@4/gfx_mode::dtv_control#17 )
  gfx_mode::$10 = *form_ctrl_chunk != 0
  gfx_mode::$11 = ! gfx_mode::$10
  if(gfx_mode::$11) goto gfx_mode::@6
  to:gfx_mode::@16
gfx_mode::@15: scope:[gfx_mode]  from gfx_mode::@4
  keyboard_modifiers#117 = phi( gfx_mode::@4/keyboard_modifiers#118 )
  keyboard_events_size#136 = phi( gfx_mode::@4/keyboard_events_size#137 )
  gfx_mode::dtv_control#11 = phi( gfx_mode::@4/gfx_mode::dtv_control#17 )
  gfx_mode::$68 = gfx_mode::dtv_control#11 | DTV_COLORRAM_OFF
  gfx_mode::dtv_control#5 = gfx_mode::$68
  to:gfx_mode::@5
gfx_mode::@6: scope:[gfx_mode]  from gfx_mode::@16 gfx_mode::@5
  keyboard_modifiers#114 = phi( gfx_mode::@16/keyboard_modifiers#115, gfx_mode::@5/keyboard_modifiers#116 )
  keyboard_events_size#133 = phi( gfx_mode::@16/keyboard_events_size#134, gfx_mode::@5/keyboard_events_size#135 )
  gfx_mode::dtv_control#12 = phi( gfx_mode::@16/gfx_mode::dtv_control#6, gfx_mode::@5/gfx_mode::dtv_control#18 )
  *DTV_CONTROL = gfx_mode::dtv_control#12
  gfx_mode::VICII_control#0 = (byte)VICII_DEN|VICII_RSEL|3
  gfx_mode::$12 = *form_ctrl_ecm != 0
  gfx_mode::$13 = ! gfx_mode::$12
  if(gfx_mode::$13) goto gfx_mode::@7
  to:gfx_mode::@17
gfx_mode::@16: scope:[gfx_mode]  from gfx_mode::@5
  keyboard_modifiers#115 = phi( gfx_mode::@5/keyboard_modifiers#116 )
  keyboard_events_size#134 = phi( gfx_mode::@5/keyboard_events_size#135 )
  gfx_mode::dtv_control#13 = phi( gfx_mode::@5/gfx_mode::dtv_control#18 )
  gfx_mode::$69 = gfx_mode::dtv_control#13 | DTV_CHUNKY
  gfx_mode::dtv_control#6 = gfx_mode::$69
  to:gfx_mode::@6
gfx_mode::@7: scope:[gfx_mode]  from gfx_mode::@17 gfx_mode::@6
  keyboard_modifiers#112 = phi( gfx_mode::@17/keyboard_modifiers#113, gfx_mode::@6/keyboard_modifiers#114 )
  keyboard_events_size#131 = phi( gfx_mode::@17/keyboard_events_size#132, gfx_mode::@6/keyboard_events_size#133 )
  gfx_mode::VICII_control#6 = phi( gfx_mode::@17/gfx_mode::VICII_control#1, gfx_mode::@6/gfx_mode::VICII_control#0 )
  gfx_mode::$14 = *form_ctrl_bmm != 0
  gfx_mode::$15 = ! gfx_mode::$14
  if(gfx_mode::$15) goto gfx_mode::@8
  to:gfx_mode::@18
gfx_mode::@17: scope:[gfx_mode]  from gfx_mode::@6
  keyboard_modifiers#113 = phi( gfx_mode::@6/keyboard_modifiers#114 )
  keyboard_events_size#132 = phi( gfx_mode::@6/keyboard_events_size#133 )
  gfx_mode::VICII_control#3 = phi( gfx_mode::@6/gfx_mode::VICII_control#0 )
  gfx_mode::$70 = gfx_mode::VICII_control#3 | VICII_ECM
  gfx_mode::VICII_control#1 = gfx_mode::$70
  to:gfx_mode::@7
gfx_mode::@8: scope:[gfx_mode]  from gfx_mode::@18 gfx_mode::@7
  keyboard_modifiers#110 = phi( gfx_mode::@18/keyboard_modifiers#111, gfx_mode::@7/keyboard_modifiers#112 )
  keyboard_events_size#129 = phi( gfx_mode::@18/keyboard_events_size#130, gfx_mode::@7/keyboard_events_size#131 )
  gfx_mode::VICII_control#4 = phi( gfx_mode::@18/gfx_mode::VICII_control#2, gfx_mode::@7/gfx_mode::VICII_control#6 )
  *VICII_CONTROL1 = gfx_mode::VICII_control#4
  gfx_mode::VICII_control2#0 = VICII_CSEL
  gfx_mode::$16 = *form_ctrl_mcm != 0
  gfx_mode::$17 = ! gfx_mode::$16
  if(gfx_mode::$17) goto gfx_mode::@9
  to:gfx_mode::@19
gfx_mode::@18: scope:[gfx_mode]  from gfx_mode::@7
  keyboard_modifiers#111 = phi( gfx_mode::@7/keyboard_modifiers#112 )
  keyboard_events_size#130 = phi( gfx_mode::@7/keyboard_events_size#131 )
  gfx_mode::VICII_control#5 = phi( gfx_mode::@7/gfx_mode::VICII_control#6 )
  gfx_mode::$71 = gfx_mode::VICII_control#5 | VICII_BMM
  gfx_mode::VICII_control#2 = gfx_mode::$71
  to:gfx_mode::@8
gfx_mode::@9: scope:[gfx_mode]  from gfx_mode::@19 gfx_mode::@8
  keyboard_modifiers#107 = phi( gfx_mode::@19/keyboard_modifiers#109, gfx_mode::@8/keyboard_modifiers#110 )
  keyboard_events_size#126 = phi( gfx_mode::@19/keyboard_events_size#128, gfx_mode::@8/keyboard_events_size#129 )
  gfx_mode::VICII_control2#2 = phi( gfx_mode::@19/gfx_mode::VICII_control2#1, gfx_mode::@8/gfx_mode::VICII_control2#0 )
  *VICII_CONTROL2 = gfx_mode::VICII_control2#2
  gfx_mode::$18 = *form_a_start_hi * $10
  gfx_mode::$19 = gfx_mode::$18 | *form_a_start_lo
  gfx_mode::plane_a_offs#0 = gfx_mode::$19
  get_plane::idx#0 = *form_a_pattern
  call get_plane 
  get_plane::return#16 = get_plane::return#14
  to:gfx_mode::@30
gfx_mode::@30: scope:[gfx_mode]  from gfx_mode::@9
  keyboard_modifiers#105 = phi( gfx_mode::@9/keyboard_modifiers#107 )
  keyboard_events_size#124 = phi( gfx_mode::@9/keyboard_events_size#126 )
  gfx_mode::plane_a_offs#1 = phi( gfx_mode::@9/gfx_mode::plane_a_offs#0 )
  get_plane::return#19 = phi( gfx_mode::@9/get_plane::return#16 )
  gfx_mode::$20 = get_plane::return#19
  gfx_mode::$21 = gfx_mode::$20 + gfx_mode::plane_a_offs#1
  gfx_mode::plane_a#0 = gfx_mode::$21
  gfx_mode::$22 = < gfx_mode::plane_a#0
  gfx_mode::$23 = < gfx_mode::$22
  *DTV_PLANEA_START_LO = gfx_mode::$23
  gfx_mode::$24 = < gfx_mode::plane_a#0
  gfx_mode::$25 = > gfx_mode::$24
  *DTV_PLANEA_START_MI = gfx_mode::$25
  gfx_mode::$26 = > gfx_mode::plane_a#0
  gfx_mode::$27 = < gfx_mode::$26
  *DTV_PLANEA_START_HI = gfx_mode::$27
  gfx_mode::$28 = *form_a_step_hi * $10
  gfx_mode::$29 = gfx_mode::$28 | *form_a_step_lo
  *DTV_PLANEA_STEP = gfx_mode::$29
  gfx_mode::$30 = *form_a_mod_hi * $10
  gfx_mode::$31 = gfx_mode::$30 | *form_a_mod_lo
  *DTV_PLANEA_MODULO_LO = gfx_mode::$31
  *DTV_PLANEA_MODULO_HI = 0
  gfx_mode::$32 = *form_b_start_hi * $10
  gfx_mode::$33 = gfx_mode::$32 | *form_b_start_lo
  gfx_mode::plane_b_offs#0 = gfx_mode::$33
  get_plane::idx#1 = *form_b_pattern
  call get_plane 
  get_plane::return#17 = get_plane::return#14
  to:gfx_mode::@31
gfx_mode::@31: scope:[gfx_mode]  from gfx_mode::@30
  keyboard_modifiers#103 = phi( gfx_mode::@30/keyboard_modifiers#105 )
  keyboard_events_size#122 = phi( gfx_mode::@30/keyboard_events_size#124 )
  gfx_mode::plane_b_offs#1 = phi( gfx_mode::@30/gfx_mode::plane_b_offs#0 )
  get_plane::return#20 = phi( gfx_mode::@30/get_plane::return#17 )
  gfx_mode::$34 = get_plane::return#20
  gfx_mode::$35 = gfx_mode::$34 + gfx_mode::plane_b_offs#1
  gfx_mode::plane_b#0 = gfx_mode::$35
  gfx_mode::$36 = < gfx_mode::plane_b#0
  gfx_mode::$37 = < gfx_mode::$36
  *DTV_PLANEB_START_LO = gfx_mode::$37
  gfx_mode::$38 = < gfx_mode::plane_b#0
  gfx_mode::$39 = > gfx_mode::$38
  *DTV_PLANEB_START_MI = gfx_mode::$39
  gfx_mode::$40 = > gfx_mode::plane_b#0
  gfx_mode::$41 = < gfx_mode::$40
  *DTV_PLANEB_START_HI = gfx_mode::$41
  gfx_mode::$42 = *form_b_step_hi * $10
  gfx_mode::$43 = gfx_mode::$42 | *form_b_step_lo
  *DTV_PLANEB_STEP = gfx_mode::$43
  gfx_mode::$44 = *form_b_mod_hi * $10
  gfx_mode::$45 = gfx_mode::$44 | *form_b_mod_lo
  *DTV_PLANEB_MODULO_LO = gfx_mode::$45
  *DTV_PLANEB_MODULO_HI = 0
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)VICII_SCREEN0/$4000
  get_VICII_screen::idx#0 = *form_VICII_screen
  call get_VICII_screen 
  get_VICII_screen::return#7 = get_VICII_screen::return#5
  to:gfx_mode::@32
gfx_mode::@32: scope:[gfx_mode]  from gfx_mode::@31
  keyboard_modifiers#101 = phi( gfx_mode::@31/keyboard_modifiers#103 )
  keyboard_events_size#120 = phi( gfx_mode::@31/keyboard_events_size#122 )
  get_VICII_screen::return#10 = phi( gfx_mode::@31/get_VICII_screen::return#7 )
  gfx_mode::$46 = get_VICII_screen::return#10
  gfx_mode::$82 = (word)gfx_mode::$46
  gfx_mode::$47 = gfx_mode::$82 & $3fff
  gfx_mode::$48 = gfx_mode::$47 / $40
  get_VICII_charset::idx#0 = *form_VICII_gfx
  call get_VICII_charset 
  get_VICII_charset::return#4 = get_VICII_charset::return#2
  to:gfx_mode::@33
gfx_mode::@33: scope:[gfx_mode]  from gfx_mode::@32
  keyboard_modifiers#99 = phi( gfx_mode::@32/keyboard_modifiers#101 )
  keyboard_events_size#118 = phi( gfx_mode::@32/keyboard_events_size#120 )
  get_VICII_charset::return#6 = phi( gfx_mode::@32/get_VICII_charset::return#4 )
  gfx_mode::$49 = get_VICII_charset::return#6
  gfx_mode::$83 = (word)gfx_mode::$49
  gfx_mode::$50 = gfx_mode::$83 & $3fff
  gfx_mode::$51 = > gfx_mode::$50
  gfx_mode::$52 = gfx_mode::$51 / 4
  gfx_mode::$84 = (byte)gfx_mode::$48
  gfx_mode::$53 = gfx_mode::$84 | gfx_mode::$52
  *VICII_MEMORY = gfx_mode::$53
  get_VICII_screen::idx#1 = *form_VICII_cols
  call get_VICII_screen 
  get_VICII_screen::return#8 = get_VICII_screen::return#5
  to:gfx_mode::@34
gfx_mode::@34: scope:[gfx_mode]  from gfx_mode::@33
  keyboard_modifiers#97 = phi( gfx_mode::@33/keyboard_modifiers#99 )
  keyboard_events_size#116 = phi( gfx_mode::@33/keyboard_events_size#118 )
  get_VICII_screen::return#11 = phi( gfx_mode::@33/get_VICII_screen::return#8 )
  gfx_mode::$54 = get_VICII_screen::return#11
  gfx_mode::VICII_colors#0 = gfx_mode::$54
  gfx_mode::col#0 = COLS
  gfx_mode::cy#0 = 0
  to:gfx_mode::@20
gfx_mode::@19: scope:[gfx_mode]  from gfx_mode::@8
  keyboard_modifiers#109 = phi( gfx_mode::@8/keyboard_modifiers#110 )
  keyboard_events_size#128 = phi( gfx_mode::@8/keyboard_events_size#129 )
  gfx_mode::VICII_control2#3 = phi( gfx_mode::@8/gfx_mode::VICII_control2#0 )
  gfx_mode::$72 = gfx_mode::VICII_control2#3 | VICII_MCM
  gfx_mode::VICII_control2#1 = gfx_mode::$72
  to:gfx_mode::@9
gfx_mode::@20: scope:[gfx_mode]  from gfx_mode::@22 gfx_mode::@34
  keyboard_modifiers#95 = phi( gfx_mode::@22/keyboard_modifiers#89, gfx_mode::@34/keyboard_modifiers#97 )
  keyboard_events_size#113 = phi( gfx_mode::@22/keyboard_events_size#102, gfx_mode::@34/keyboard_events_size#116 )
  gfx_mode::cy#4 = phi( gfx_mode::@22/gfx_mode::cy#1, gfx_mode::@34/gfx_mode::cy#0 )
  gfx_mode::col#3 = phi( gfx_mode::@22/gfx_mode::col#4, gfx_mode::@34/gfx_mode::col#0 )
  gfx_mode::VICII_colors#3 = phi( gfx_mode::@22/gfx_mode::VICII_colors#4, gfx_mode::@34/gfx_mode::VICII_colors#0 )
  gfx_mode::cx#0 = 0
  to:gfx_mode::@21
gfx_mode::@21: scope:[gfx_mode]  from gfx_mode::@20 gfx_mode::@21
  keyboard_modifiers#93 = phi( gfx_mode::@20/keyboard_modifiers#95, gfx_mode::@21/keyboard_modifiers#93 )
  keyboard_events_size#109 = phi( gfx_mode::@20/keyboard_events_size#113, gfx_mode::@21/keyboard_events_size#109 )
  gfx_mode::cy#3 = phi( gfx_mode::@20/gfx_mode::cy#4, gfx_mode::@21/gfx_mode::cy#3 )
  gfx_mode::cx#2 = phi( gfx_mode::@20/gfx_mode::cx#0, gfx_mode::@21/gfx_mode::cx#1 )
  gfx_mode::col#2 = phi( gfx_mode::@20/gfx_mode::col#3, gfx_mode::@21/gfx_mode::col#1 )
  gfx_mode::VICII_colors#2 = phi( gfx_mode::@20/gfx_mode::VICII_colors#3, gfx_mode::@21/gfx_mode::VICII_colors#1 )
  *gfx_mode::col#2 = *gfx_mode::VICII_colors#2
  gfx_mode::col#1 = ++ gfx_mode::col#2
  gfx_mode::VICII_colors#1 = ++ gfx_mode::VICII_colors#2
  gfx_mode::cx#1 = gfx_mode::cx#2 + rangenext(0,$27)
  gfx_mode::$73 = gfx_mode::cx#1 != rangelast(0,$27)
  if(gfx_mode::$73) goto gfx_mode::@21
  to:gfx_mode::@22
gfx_mode::@22: scope:[gfx_mode]  from gfx_mode::@21
  keyboard_modifiers#89 = phi( gfx_mode::@21/keyboard_modifiers#93 )
  keyboard_events_size#102 = phi( gfx_mode::@21/keyboard_events_size#109 )
  gfx_mode::col#4 = phi( gfx_mode::@21/gfx_mode::col#1 )
  gfx_mode::VICII_colors#4 = phi( gfx_mode::@21/gfx_mode::VICII_colors#1 )
  gfx_mode::cy#2 = phi( gfx_mode::@21/gfx_mode::cy#3 )
  gfx_mode::cy#1 = gfx_mode::cy#2 + rangenext(0,$18)
  gfx_mode::$74 = gfx_mode::cy#1 != rangelast(0,$18)
  if(gfx_mode::$74) goto gfx_mode::@20
  to:gfx_mode::@23
gfx_mode::@23: scope:[gfx_mode]  from gfx_mode::@22
  keyboard_modifiers#84 = phi( gfx_mode::@22/keyboard_modifiers#89 )
  keyboard_events_size#93 = phi( gfx_mode::@22/keyboard_events_size#102 )
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0
  gfx_mode::$55 = *form_VICII_bg0_hi * $10
  gfx_mode::$56 = gfx_mode::$55 | *form_VICII_bg0_lo
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = gfx_mode::$56
  gfx_mode::$57 = *form_VICII_bg1_hi * $10
  gfx_mode::$58 = gfx_mode::$57 | *form_VICII_bg1_lo
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1) = gfx_mode::$58
  gfx_mode::$59 = *form_VICII_bg2_hi * $10
  gfx_mode::$60 = gfx_mode::$59 | *form_VICII_bg2_lo
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2) = gfx_mode::$60
  gfx_mode::$61 = *form_VICII_bg3_hi * $10
  gfx_mode::$62 = gfx_mode::$61 | *form_VICII_bg3_lo
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3) = gfx_mode::$62
  gfx_mode::$63 = *form_dtv_palet == 0
  if(gfx_mode::$63) goto gfx_mode::@10
  to:gfx_mode::@24
gfx_mode::@10: scope:[gfx_mode]  from gfx_mode::@23
  keyboard_modifiers#79 = phi( gfx_mode::@23/keyboard_modifiers#84 )
  keyboard_events_size#83 = phi( gfx_mode::@23/keyboard_events_size#93 )
  gfx_mode::i#0 = 0
  to:gfx_mode::@26
gfx_mode::@24: scope:[gfx_mode]  from gfx_mode::@23
  keyboard_modifiers#78 = phi( gfx_mode::@23/keyboard_modifiers#84 )
  keyboard_events_size#82 = phi( gfx_mode::@23/keyboard_events_size#93 )
  gfx_mode::j#0 = 0
  to:gfx_mode::@25
gfx_mode::@25: scope:[gfx_mode]  from gfx_mode::@24 gfx_mode::@25
  keyboard_modifiers#59 = phi( gfx_mode::@24/keyboard_modifiers#78, gfx_mode::@25/keyboard_modifiers#59 )
  keyboard_events_size#60 = phi( gfx_mode::@24/keyboard_events_size#82, gfx_mode::@25/keyboard_events_size#60 )
  gfx_mode::j#2 = phi( gfx_mode::@24/gfx_mode::j#0, gfx_mode::@25/gfx_mode::j#1 )
  DTV_PALETTE[gfx_mode::j#2] = gfx_mode::j#2
  gfx_mode::j#1 = gfx_mode::j#2 + rangenext(0,$f)
  gfx_mode::$75 = gfx_mode::j#1 != rangelast(0,$f)
  if(gfx_mode::$75) goto gfx_mode::@25
  to:gfx_mode::@27
gfx_mode::@26: scope:[gfx_mode]  from gfx_mode::@10 gfx_mode::@26
  keyboard_modifiers#60 = phi( gfx_mode::@10/keyboard_modifiers#79, gfx_mode::@26/keyboard_modifiers#60 )
  keyboard_events_size#61 = phi( gfx_mode::@10/keyboard_events_size#83, gfx_mode::@26/keyboard_events_size#61 )
  gfx_mode::i#2 = phi( gfx_mode::@10/gfx_mode::i#0, gfx_mode::@26/gfx_mode::i#1 )
  DTV_PALETTE[gfx_mode::i#2] = DTV_PALETTE_DEFAULT[gfx_mode::i#2]
  gfx_mode::i#1 = gfx_mode::i#2 + rangenext(0,$f)
  gfx_mode::$76 = gfx_mode::i#1 != rangelast(0,$f)
  if(gfx_mode::$76) goto gfx_mode::@26
  to:gfx_mode::@27
gfx_mode::@27: scope:[gfx_mode]  from gfx_mode::@25 gfx_mode::@26 gfx_mode::@36
  keyboard_modifiers#43 = phi( gfx_mode::@25/keyboard_modifiers#59, gfx_mode::@26/keyboard_modifiers#60, gfx_mode::@36/keyboard_modifiers#44 )
  keyboard_events_size#47 = phi( gfx_mode::@25/keyboard_events_size#60, gfx_mode::@26/keyboard_events_size#61, gfx_mode::@36/keyboard_events_size#9 )
  if(true) goto gfx_mode::@28
  to:gfx_mode::@return
gfx_mode::@28: scope:[gfx_mode]  from gfx_mode::@27 gfx_mode::@28
  keyboard_modifiers#61 = phi( gfx_mode::@27/keyboard_modifiers#43, gfx_mode::@28/keyboard_modifiers#61 )
  keyboard_events_size#62 = phi( gfx_mode::@27/keyboard_events_size#47, gfx_mode::@28/keyboard_events_size#62 )
  gfx_mode::$77 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $ff
  if(gfx_mode::$77) goto gfx_mode::@28
  to:gfx_mode::@29
gfx_mode::@29: scope:[gfx_mode]  from gfx_mode::@28
  keyboard_modifiers#42 = phi( gfx_mode::@28/keyboard_modifiers#61 )
  keyboard_events_size#46 = phi( gfx_mode::@28/keyboard_events_size#62 )
  call keyboard_event_scan 
  to:gfx_mode::@35
gfx_mode::@35: scope:[gfx_mode]  from gfx_mode::@29
  keyboard_modifiers#26 = phi( gfx_mode::@29/keyboard_modifiers#5 )
  keyboard_events_size#29 = phi( gfx_mode::@29/keyboard_events_size#2 )
  keyboard_events_size#8 = keyboard_events_size#29
  keyboard_modifiers#9 = keyboard_modifiers#26
  call keyboard_event_get 
  keyboard_event_get::return#3 = keyboard_event_get::return#2
  to:gfx_mode::@36
gfx_mode::@36: scope:[gfx_mode]  from gfx_mode::@35
  keyboard_modifiers#44 = phi( gfx_mode::@35/keyboard_modifiers#9 )
  keyboard_events_size#30 = phi( gfx_mode::@35/keyboard_events_size#4 )
  keyboard_event_get::return#6 = phi( gfx_mode::@35/keyboard_event_get::return#3 )
  gfx_mode::$79 = keyboard_event_get::return#6
  keyboard_events_size#9 = keyboard_events_size#30
  gfx_mode::keyboard_event#0 = gfx_mode::$79
  gfx_mode::$80 = gfx_mode::keyboard_event#0 == KEY_SPACE
  gfx_mode::$81 = ! gfx_mode::$80
  if(gfx_mode::$81) goto gfx_mode::@27
  to:gfx_mode::@return
gfx_mode::@return: scope:[gfx_mode]  from gfx_mode::@27 gfx_mode::@36
  keyboard_modifiers#27 = phi( gfx_mode::@27/keyboard_modifiers#43, gfx_mode::@36/keyboard_modifiers#44 )
  keyboard_events_size#31 = phi( gfx_mode::@27/keyboard_events_size#47, gfx_mode::@36/keyboard_events_size#9 )
  keyboard_events_size#10 = keyboard_events_size#31
  keyboard_modifiers#10 = keyboard_modifiers#27
  return 
  to:@return

void gfx_init()
gfx_init: scope:[gfx_init]  from main::@3
  bitmap_screen#52 = phi( main::@3/bitmap_screen#22 )
  bitmap_gfx#53 = phi( main::@3/bitmap_gfx#23 )
  call gfx_init_screen0 
  to:gfx_init::@1
gfx_init::@1: scope:[gfx_init]  from gfx_init
  bitmap_screen#50 = phi( gfx_init/bitmap_screen#52 )
  bitmap_gfx#51 = phi( gfx_init/bitmap_gfx#53 )
  call gfx_init_screen1 
  to:gfx_init::@2
gfx_init::@2: scope:[gfx_init]  from gfx_init::@1
  bitmap_screen#48 = phi( gfx_init::@1/bitmap_screen#50 )
  bitmap_gfx#49 = phi( gfx_init::@1/bitmap_gfx#51 )
  call gfx_init_screen2 
  to:gfx_init::@3
gfx_init::@3: scope:[gfx_init]  from gfx_init::@2
  bitmap_screen#44 = phi( gfx_init::@2/bitmap_screen#48 )
  bitmap_gfx#45 = phi( gfx_init::@2/bitmap_gfx#49 )
  call gfx_init_screen3 
  to:gfx_init::@4
gfx_init::@4: scope:[gfx_init]  from gfx_init::@3
  bitmap_screen#39 = phi( gfx_init::@3/bitmap_screen#44 )
  bitmap_gfx#40 = phi( gfx_init::@3/bitmap_gfx#45 )
  call gfx_init_screen4 
  to:gfx_init::@5
gfx_init::@5: scope:[gfx_init]  from gfx_init::@4
  bitmap_screen#33 = phi( gfx_init::@4/bitmap_screen#39 )
  bitmap_gfx#34 = phi( gfx_init::@4/bitmap_gfx#40 )
  call gfx_init_charset 
  to:gfx_init::@6
gfx_init::@6: scope:[gfx_init]  from gfx_init::@5
  bitmap_screen#24 = phi( gfx_init::@5/bitmap_screen#33 )
  bitmap_gfx#25 = phi( gfx_init::@5/bitmap_gfx#34 )
  call gfx_init_VICII_bitmap 
  to:gfx_init::@7
gfx_init::@7: scope:[gfx_init]  from gfx_init::@6
  bitmap_screen#15 = phi( gfx_init::@6/bitmap_screen#7 )
  bitmap_gfx#15 = phi( gfx_init::@6/bitmap_gfx#7 )
  bitmap_gfx#4 = bitmap_gfx#15
  bitmap_screen#4 = bitmap_screen#15
  call gfx_init_plane_8bppchunky 
  to:gfx_init::@8
gfx_init::@8: scope:[gfx_init]  from gfx_init::@7
  bitmap_screen#54 = phi( gfx_init::@7/bitmap_screen#4 )
  bitmap_gfx#55 = phi( gfx_init::@7/bitmap_gfx#4 )
  call gfx_init_plane_charset8 
  to:gfx_init::@9
gfx_init::@9: scope:[gfx_init]  from gfx_init::@8
  bitmap_screen#53 = phi( gfx_init::@8/bitmap_screen#54 )
  bitmap_gfx#54 = phi( gfx_init::@8/bitmap_gfx#55 )
  call gfx_init_plane_horisontal 
  to:gfx_init::@10
gfx_init::@10: scope:[gfx_init]  from gfx_init::@9
  bitmap_screen#51 = phi( gfx_init::@9/bitmap_screen#53 )
  bitmap_gfx#52 = phi( gfx_init::@9/bitmap_gfx#54 )
  call gfx_init_plane_vertical 
  to:gfx_init::@11
gfx_init::@11: scope:[gfx_init]  from gfx_init::@10
  bitmap_screen#49 = phi( gfx_init::@10/bitmap_screen#51 )
  bitmap_gfx#50 = phi( gfx_init::@10/bitmap_gfx#52 )
  call gfx_init_plane_horisontal2 
  to:gfx_init::@12
gfx_init::@12: scope:[gfx_init]  from gfx_init::@11
  bitmap_screen#45 = phi( gfx_init::@11/bitmap_screen#49 )
  bitmap_gfx#46 = phi( gfx_init::@11/bitmap_gfx#50 )
  call gfx_init_plane_vertical2 
  to:gfx_init::@13
gfx_init::@13: scope:[gfx_init]  from gfx_init::@12
  bitmap_screen#40 = phi( gfx_init::@12/bitmap_screen#45 )
  bitmap_gfx#41 = phi( gfx_init::@12/bitmap_gfx#46 )
  call gfx_init_plane_blank 
  to:gfx_init::@14
gfx_init::@14: scope:[gfx_init]  from gfx_init::@13
  bitmap_screen#34 = phi( gfx_init::@13/bitmap_screen#40 )
  bitmap_gfx#35 = phi( gfx_init::@13/bitmap_gfx#41 )
  call gfx_init_plane_full 
  to:gfx_init::@15
gfx_init::@15: scope:[gfx_init]  from gfx_init::@14
  bitmap_screen#25 = phi( gfx_init::@14/bitmap_screen#34 )
  bitmap_gfx#26 = phi( gfx_init::@14/bitmap_gfx#35 )
  to:gfx_init::@return
gfx_init::@return: scope:[gfx_init]  from gfx_init::@15
  bitmap_screen#16 = phi( gfx_init::@15/bitmap_screen#25 )
  bitmap_gfx#16 = phi( gfx_init::@15/bitmap_gfx#26 )
  bitmap_gfx#5 = bitmap_gfx#16
  bitmap_screen#5 = bitmap_screen#16
  return 
  to:@return

void gfx_init_charset()
gfx_init_charset: scope:[gfx_init_charset]  from gfx_init::@5
  *PROCPORT = $32
  gfx_init_charset::chargen#0 = CHARGEN
  gfx_init_charset::charset#0 = VICII_CHARSET_ROM
  gfx_init_charset::c#0 = 0
  to:gfx_init_charset::@1
gfx_init_charset::@1: scope:[gfx_init_charset]  from gfx_init_charset gfx_init_charset::@3
  gfx_init_charset::c#4 = phi( gfx_init_charset/gfx_init_charset::c#0, gfx_init_charset::@3/gfx_init_charset::c#1 )
  gfx_init_charset::charset#3 = phi( gfx_init_charset/gfx_init_charset::charset#0, gfx_init_charset::@3/gfx_init_charset::charset#4 )
  gfx_init_charset::chargen#3 = phi( gfx_init_charset/gfx_init_charset::chargen#0, gfx_init_charset::@3/gfx_init_charset::chargen#4 )
  gfx_init_charset::l#0 = 0
  to:gfx_init_charset::@2
gfx_init_charset::@2: scope:[gfx_init_charset]  from gfx_init_charset::@1 gfx_init_charset::@2
  gfx_init_charset::c#3 = phi( gfx_init_charset::@1/gfx_init_charset::c#4, gfx_init_charset::@2/gfx_init_charset::c#3 )
  gfx_init_charset::l#2 = phi( gfx_init_charset::@1/gfx_init_charset::l#0, gfx_init_charset::@2/gfx_init_charset::l#1 )
  gfx_init_charset::charset#2 = phi( gfx_init_charset::@1/gfx_init_charset::charset#3, gfx_init_charset::@2/gfx_init_charset::charset#1 )
  gfx_init_charset::chargen#2 = phi( gfx_init_charset::@1/gfx_init_charset::chargen#3, gfx_init_charset::@2/gfx_init_charset::chargen#1 )
  *gfx_init_charset::charset#2 = *gfx_init_charset::chargen#2
  gfx_init_charset::charset#1 = ++ gfx_init_charset::charset#2
  gfx_init_charset::chargen#1 = ++ gfx_init_charset::chargen#2
  gfx_init_charset::l#1 = gfx_init_charset::l#2 + rangenext(0,7)
  gfx_init_charset::$0 = gfx_init_charset::l#1 != rangelast(0,7)
  if(gfx_init_charset::$0) goto gfx_init_charset::@2
  to:gfx_init_charset::@3
gfx_init_charset::@3: scope:[gfx_init_charset]  from gfx_init_charset::@2
  gfx_init_charset::charset#4 = phi( gfx_init_charset::@2/gfx_init_charset::charset#1 )
  gfx_init_charset::chargen#4 = phi( gfx_init_charset::@2/gfx_init_charset::chargen#1 )
  gfx_init_charset::c#2 = phi( gfx_init_charset::@2/gfx_init_charset::c#3 )
  gfx_init_charset::c#1 = gfx_init_charset::c#2 + rangenext(0,$ff)
  gfx_init_charset::$1 = gfx_init_charset::c#1 != rangelast(0,$ff)
  if(gfx_init_charset::$1) goto gfx_init_charset::@1
  to:gfx_init_charset::@4
gfx_init_charset::@4: scope:[gfx_init_charset]  from gfx_init_charset::@3
  *PROCPORT = $37
  to:gfx_init_charset::@return
gfx_init_charset::@return: scope:[gfx_init_charset]  from gfx_init_charset::@4
  return 
  to:@return

void gfx_init_screen0()
gfx_init_screen0: scope:[gfx_init_screen0]  from gfx_init
  gfx_init_screen0::ch#0 = VICII_SCREEN0
  gfx_init_screen0::cy#0 = 0
  to:gfx_init_screen0::@1
gfx_init_screen0::@1: scope:[gfx_init_screen0]  from gfx_init_screen0 gfx_init_screen0::@3
  gfx_init_screen0::ch#3 = phi( gfx_init_screen0/gfx_init_screen0::ch#0, gfx_init_screen0::@3/gfx_init_screen0::ch#4 )
  gfx_init_screen0::cy#4 = phi( gfx_init_screen0/gfx_init_screen0::cy#0, gfx_init_screen0::@3/gfx_init_screen0::cy#1 )
  gfx_init_screen0::cx#0 = 0
  to:gfx_init_screen0::@2
gfx_init_screen0::@2: scope:[gfx_init_screen0]  from gfx_init_screen0::@1 gfx_init_screen0::@2
  gfx_init_screen0::ch#2 = phi( gfx_init_screen0::@1/gfx_init_screen0::ch#3, gfx_init_screen0::@2/gfx_init_screen0::ch#1 )
  gfx_init_screen0::cx#2 = phi( gfx_init_screen0::@1/gfx_init_screen0::cx#0, gfx_init_screen0::@2/gfx_init_screen0::cx#1 )
  gfx_init_screen0::cy#2 = phi( gfx_init_screen0::@1/gfx_init_screen0::cy#4, gfx_init_screen0::@2/gfx_init_screen0::cy#2 )
  gfx_init_screen0::$0 = gfx_init_screen0::cy#2 & $f
  gfx_init_screen0::$1 = gfx_init_screen0::$0 * $10
  gfx_init_screen0::$2 = gfx_init_screen0::cx#2 & $f
  gfx_init_screen0::$3 = gfx_init_screen0::$1 | gfx_init_screen0::$2
  *gfx_init_screen0::ch#2 = gfx_init_screen0::$3
  gfx_init_screen0::ch#1 = ++ gfx_init_screen0::ch#2
  gfx_init_screen0::cx#1 = gfx_init_screen0::cx#2 + rangenext(0,$27)
  gfx_init_screen0::$4 = gfx_init_screen0::cx#1 != rangelast(0,$27)
  if(gfx_init_screen0::$4) goto gfx_init_screen0::@2
  to:gfx_init_screen0::@3
gfx_init_screen0::@3: scope:[gfx_init_screen0]  from gfx_init_screen0::@2
  gfx_init_screen0::ch#4 = phi( gfx_init_screen0::@2/gfx_init_screen0::ch#1 )
  gfx_init_screen0::cy#3 = phi( gfx_init_screen0::@2/gfx_init_screen0::cy#2 )
  gfx_init_screen0::cy#1 = gfx_init_screen0::cy#3 + rangenext(0,$18)
  gfx_init_screen0::$5 = gfx_init_screen0::cy#1 != rangelast(0,$18)
  if(gfx_init_screen0::$5) goto gfx_init_screen0::@1
  to:gfx_init_screen0::@return
gfx_init_screen0::@return: scope:[gfx_init_screen0]  from gfx_init_screen0::@3
  return 
  to:@return

void gfx_init_screen1()
gfx_init_screen1: scope:[gfx_init_screen1]  from gfx_init::@1
  gfx_init_screen1::ch#0 = VICII_SCREEN1
  gfx_init_screen1::cy#0 = 0
  to:gfx_init_screen1::@1
gfx_init_screen1::@1: scope:[gfx_init_screen1]  from gfx_init_screen1 gfx_init_screen1::@3
  gfx_init_screen1::ch#3 = phi( gfx_init_screen1/gfx_init_screen1::ch#0, gfx_init_screen1::@3/gfx_init_screen1::ch#4 )
  gfx_init_screen1::cy#4 = phi( gfx_init_screen1/gfx_init_screen1::cy#0, gfx_init_screen1::@3/gfx_init_screen1::cy#1 )
  gfx_init_screen1::cx#0 = 0
  to:gfx_init_screen1::@2
gfx_init_screen1::@2: scope:[gfx_init_screen1]  from gfx_init_screen1::@1 gfx_init_screen1::@2
  gfx_init_screen1::ch#2 = phi( gfx_init_screen1::@1/gfx_init_screen1::ch#3, gfx_init_screen1::@2/gfx_init_screen1::ch#1 )
  gfx_init_screen1::cy#2 = phi( gfx_init_screen1::@1/gfx_init_screen1::cy#4, gfx_init_screen1::@2/gfx_init_screen1::cy#2 )
  gfx_init_screen1::cx#2 = phi( gfx_init_screen1::@1/gfx_init_screen1::cx#0, gfx_init_screen1::@2/gfx_init_screen1::cx#1 )
  gfx_init_screen1::$0 = gfx_init_screen1::cx#2 + gfx_init_screen1::cy#2
  gfx_init_screen1::$1 = gfx_init_screen1::$0 & $f
  *gfx_init_screen1::ch#2 = gfx_init_screen1::$1
  gfx_init_screen1::ch#1 = ++ gfx_init_screen1::ch#2
  gfx_init_screen1::cx#1 = gfx_init_screen1::cx#2 + rangenext(0,$27)
  gfx_init_screen1::$2 = gfx_init_screen1::cx#1 != rangelast(0,$27)
  if(gfx_init_screen1::$2) goto gfx_init_screen1::@2
  to:gfx_init_screen1::@3
gfx_init_screen1::@3: scope:[gfx_init_screen1]  from gfx_init_screen1::@2
  gfx_init_screen1::ch#4 = phi( gfx_init_screen1::@2/gfx_init_screen1::ch#1 )
  gfx_init_screen1::cy#3 = phi( gfx_init_screen1::@2/gfx_init_screen1::cy#2 )
  gfx_init_screen1::cy#1 = gfx_init_screen1::cy#3 + rangenext(0,$18)
  gfx_init_screen1::$3 = gfx_init_screen1::cy#1 != rangelast(0,$18)
  if(gfx_init_screen1::$3) goto gfx_init_screen1::@1
  to:gfx_init_screen1::@return
gfx_init_screen1::@return: scope:[gfx_init_screen1]  from gfx_init_screen1::@3
  return 
  to:@return

void gfx_init_screen2()
gfx_init_screen2: scope:[gfx_init_screen2]  from gfx_init::@2
  gfx_init_screen2::ch#0 = VICII_SCREEN2
  gfx_init_screen2::cy#0 = 0
  to:gfx_init_screen2::@1
gfx_init_screen2::@1: scope:[gfx_init_screen2]  from gfx_init_screen2 gfx_init_screen2::@3
  gfx_init_screen2::ch#3 = phi( gfx_init_screen2/gfx_init_screen2::ch#0, gfx_init_screen2::@3/gfx_init_screen2::ch#4 )
  gfx_init_screen2::cy#4 = phi( gfx_init_screen2/gfx_init_screen2::cy#0, gfx_init_screen2::@3/gfx_init_screen2::cy#1 )
  gfx_init_screen2::cx#0 = 0
  to:gfx_init_screen2::@2
gfx_init_screen2::@2: scope:[gfx_init_screen2]  from gfx_init_screen2::@1 gfx_init_screen2::@2
  gfx_init_screen2::ch#2 = phi( gfx_init_screen2::@1/gfx_init_screen2::ch#3, gfx_init_screen2::@2/gfx_init_screen2::ch#1 )
  gfx_init_screen2::cy#2 = phi( gfx_init_screen2::@1/gfx_init_screen2::cy#4, gfx_init_screen2::@2/gfx_init_screen2::cy#2 )
  gfx_init_screen2::cx#2 = phi( gfx_init_screen2::@1/gfx_init_screen2::cx#0, gfx_init_screen2::@2/gfx_init_screen2::cx#1 )
  gfx_init_screen2::$0 = gfx_init_screen2::cx#2 + gfx_init_screen2::cy#2
  gfx_init_screen2::$1 = gfx_init_screen2::$0 & $f
  gfx_init_screen2::col#0 = gfx_init_screen2::$1
  gfx_init_screen2::$2 = $f - gfx_init_screen2::col#0
  gfx_init_screen2::col2#0 = gfx_init_screen2::$2
  gfx_init_screen2::$3 = gfx_init_screen2::col#0 * $10
  gfx_init_screen2::$4 = gfx_init_screen2::$3 | gfx_init_screen2::col2#0
  *gfx_init_screen2::ch#2 = gfx_init_screen2::$4
  gfx_init_screen2::ch#1 = ++ gfx_init_screen2::ch#2
  gfx_init_screen2::cx#1 = gfx_init_screen2::cx#2 + rangenext(0,$27)
  gfx_init_screen2::$5 = gfx_init_screen2::cx#1 != rangelast(0,$27)
  if(gfx_init_screen2::$5) goto gfx_init_screen2::@2
  to:gfx_init_screen2::@3
gfx_init_screen2::@3: scope:[gfx_init_screen2]  from gfx_init_screen2::@2
  gfx_init_screen2::ch#4 = phi( gfx_init_screen2::@2/gfx_init_screen2::ch#1 )
  gfx_init_screen2::cy#3 = phi( gfx_init_screen2::@2/gfx_init_screen2::cy#2 )
  gfx_init_screen2::cy#1 = gfx_init_screen2::cy#3 + rangenext(0,$18)
  gfx_init_screen2::$6 = gfx_init_screen2::cy#1 != rangelast(0,$18)
  if(gfx_init_screen2::$6) goto gfx_init_screen2::@1
  to:gfx_init_screen2::@return
gfx_init_screen2::@return: scope:[gfx_init_screen2]  from gfx_init_screen2::@3
  return 
  to:@return

void gfx_init_screen3()
gfx_init_screen3: scope:[gfx_init_screen3]  from gfx_init::@3
  gfx_init_screen3::ch#0 = VICII_SCREEN3
  gfx_init_screen3::cy#0 = 0
  to:gfx_init_screen3::@1
gfx_init_screen3::@1: scope:[gfx_init_screen3]  from gfx_init_screen3 gfx_init_screen3::@3
  gfx_init_screen3::ch#3 = phi( gfx_init_screen3/gfx_init_screen3::ch#0, gfx_init_screen3::@3/gfx_init_screen3::ch#4 )
  gfx_init_screen3::cy#4 = phi( gfx_init_screen3/gfx_init_screen3::cy#0, gfx_init_screen3::@3/gfx_init_screen3::cy#1 )
  gfx_init_screen3::cx#0 = 0
  to:gfx_init_screen3::@2
gfx_init_screen3::@2: scope:[gfx_init_screen3]  from gfx_init_screen3::@1 gfx_init_screen3::@2
  gfx_init_screen3::ch#2 = phi( gfx_init_screen3::@1/gfx_init_screen3::ch#3, gfx_init_screen3::@2/gfx_init_screen3::ch#1 )
  gfx_init_screen3::cy#2 = phi( gfx_init_screen3::@1/gfx_init_screen3::cy#4, gfx_init_screen3::@2/gfx_init_screen3::cy#2 )
  gfx_init_screen3::cx#2 = phi( gfx_init_screen3::@1/gfx_init_screen3::cx#0, gfx_init_screen3::@2/gfx_init_screen3::cx#1 )
  gfx_init_screen3::$0 = gfx_init_screen3::cx#2 & 3
  gfx_init_screen3::$1 = gfx_init_screen3::$0 * $10
  gfx_init_screen3::$2 = gfx_init_screen3::cy#2 & 3
  gfx_init_screen3::$3 = gfx_init_screen3::$1 | gfx_init_screen3::$2
  *gfx_init_screen3::ch#2 = gfx_init_screen3::$3
  gfx_init_screen3::ch#1 = ++ gfx_init_screen3::ch#2
  gfx_init_screen3::cx#1 = gfx_init_screen3::cx#2 + rangenext(0,$27)
  gfx_init_screen3::$4 = gfx_init_screen3::cx#1 != rangelast(0,$27)
  if(gfx_init_screen3::$4) goto gfx_init_screen3::@2
  to:gfx_init_screen3::@3
gfx_init_screen3::@3: scope:[gfx_init_screen3]  from gfx_init_screen3::@2
  gfx_init_screen3::ch#4 = phi( gfx_init_screen3::@2/gfx_init_screen3::ch#1 )
  gfx_init_screen3::cy#3 = phi( gfx_init_screen3::@2/gfx_init_screen3::cy#2 )
  gfx_init_screen3::cy#1 = gfx_init_screen3::cy#3 + rangenext(0,$18)
  gfx_init_screen3::$5 = gfx_init_screen3::cy#1 != rangelast(0,$18)
  if(gfx_init_screen3::$5) goto gfx_init_screen3::@1
  to:gfx_init_screen3::@return
gfx_init_screen3::@return: scope:[gfx_init_screen3]  from gfx_init_screen3::@3
  return 
  to:@return

void gfx_init_screen4()
gfx_init_screen4: scope:[gfx_init_screen4]  from gfx_init::@4
  gfx_init_screen4::ch#0 = VICII_SCREEN4
  gfx_init_screen4::cy#0 = 0
  to:gfx_init_screen4::@1
gfx_init_screen4::@1: scope:[gfx_init_screen4]  from gfx_init_screen4 gfx_init_screen4::@3
  gfx_init_screen4::cy#4 = phi( gfx_init_screen4/gfx_init_screen4::cy#0, gfx_init_screen4::@3/gfx_init_screen4::cy#1 )
  gfx_init_screen4::ch#3 = phi( gfx_init_screen4/gfx_init_screen4::ch#0, gfx_init_screen4::@3/gfx_init_screen4::ch#4 )
  gfx_init_screen4::cx#0 = 0
  to:gfx_init_screen4::@2
gfx_init_screen4::@2: scope:[gfx_init_screen4]  from gfx_init_screen4::@1 gfx_init_screen4::@2
  gfx_init_screen4::cy#3 = phi( gfx_init_screen4::@1/gfx_init_screen4::cy#4, gfx_init_screen4::@2/gfx_init_screen4::cy#3 )
  gfx_init_screen4::cx#2 = phi( gfx_init_screen4::@1/gfx_init_screen4::cx#0, gfx_init_screen4::@2/gfx_init_screen4::cx#1 )
  gfx_init_screen4::ch#2 = phi( gfx_init_screen4::@1/gfx_init_screen4::ch#3, gfx_init_screen4::@2/gfx_init_screen4::ch#1 )
  *gfx_init_screen4::ch#2 = 0
  gfx_init_screen4::ch#1 = ++ gfx_init_screen4::ch#2
  gfx_init_screen4::cx#1 = gfx_init_screen4::cx#2 + rangenext(0,$27)
  gfx_init_screen4::$0 = gfx_init_screen4::cx#1 != rangelast(0,$27)
  if(gfx_init_screen4::$0) goto gfx_init_screen4::@2
  to:gfx_init_screen4::@3
gfx_init_screen4::@3: scope:[gfx_init_screen4]  from gfx_init_screen4::@2
  gfx_init_screen4::ch#4 = phi( gfx_init_screen4::@2/gfx_init_screen4::ch#1 )
  gfx_init_screen4::cy#2 = phi( gfx_init_screen4::@2/gfx_init_screen4::cy#3 )
  gfx_init_screen4::cy#1 = gfx_init_screen4::cy#2 + rangenext(0,$18)
  gfx_init_screen4::$1 = gfx_init_screen4::cy#1 != rangelast(0,$18)
  if(gfx_init_screen4::$1) goto gfx_init_screen4::@1
  to:gfx_init_screen4::@return
gfx_init_screen4::@return: scope:[gfx_init_screen4]  from gfx_init_screen4::@3
  return 
  to:@return

void gfx_init_VICII_bitmap()
gfx_init_VICII_bitmap: scope:[gfx_init_VICII_bitmap]  from gfx_init::@6
  bitmap_screen#26 = phi( gfx_init::@6/bitmap_screen#24 )
  bitmap_gfx#27 = phi( gfx_init::@6/bitmap_gfx#25 )
  bitmap_init::gfx#0 = VICII_BITMAP
  bitmap_init::screen#0 = VICII_SCREEN0
  call bitmap_init 
  to:gfx_init_VICII_bitmap::@3
gfx_init_VICII_bitmap::@3: scope:[gfx_init_VICII_bitmap]  from gfx_init_VICII_bitmap
  bitmap_screen#17 = phi( gfx_init_VICII_bitmap/bitmap_screen#1 )
  bitmap_gfx#17 = phi( gfx_init_VICII_bitmap/bitmap_gfx#1 )
  bitmap_gfx#6 = bitmap_gfx#17
  bitmap_screen#6 = bitmap_screen#17
  bitmap_clear::bgcol#0 = BLACK
  bitmap_clear::fgcol#0 = WHITE
  call bitmap_clear 
  to:gfx_init_VICII_bitmap::@4
gfx_init_VICII_bitmap::@4: scope:[gfx_init_VICII_bitmap]  from gfx_init_VICII_bitmap::@3
  bitmap_screen#35 = phi( gfx_init_VICII_bitmap::@3/bitmap_screen#6 )
  bitmap_gfx#36 = phi( gfx_init_VICII_bitmap::@3/bitmap_gfx#6 )
  gfx_init_VICII_bitmap::l#0 = 0
  to:gfx_init_VICII_bitmap::@1
gfx_init_VICII_bitmap::@1: scope:[gfx_init_VICII_bitmap]  from gfx_init_VICII_bitmap::@4 gfx_init_VICII_bitmap::@5
  bitmap_screen#27 = phi( gfx_init_VICII_bitmap::@4/bitmap_screen#35, gfx_init_VICII_bitmap::@5/bitmap_screen#36 )
  bitmap_gfx#28 = phi( gfx_init_VICII_bitmap::@4/bitmap_gfx#36, gfx_init_VICII_bitmap::@5/bitmap_gfx#37 )
  gfx_init_VICII_bitmap::l#2 = phi( gfx_init_VICII_bitmap::@4/gfx_init_VICII_bitmap::l#0, gfx_init_VICII_bitmap::@5/gfx_init_VICII_bitmap::l#1 )
  gfx_init_VICII_bitmap::$2 = gfx_init_VICII_bitmap::l#2 < gfx_init_VICII_bitmap::lines_cnt
  if(gfx_init_VICII_bitmap::$2) goto gfx_init_VICII_bitmap::@2
  to:gfx_init_VICII_bitmap::@return
gfx_init_VICII_bitmap::@2: scope:[gfx_init_VICII_bitmap]  from gfx_init_VICII_bitmap::@1
  bitmap_screen#41 = phi( gfx_init_VICII_bitmap::@1/bitmap_screen#27 )
  bitmap_gfx#42 = phi( gfx_init_VICII_bitmap::@1/bitmap_gfx#28 )
  gfx_init_VICII_bitmap::l#3 = phi( gfx_init_VICII_bitmap::@1/gfx_init_VICII_bitmap::l#2 )
  gfx_init_VICII_bitmap::$3 = gfx_init_VICII_bitmap::l#3 + 1
  gfx_init_VICII_bitmap::$4 = gfx_init_VICII_bitmap::l#3 + 1
  bitmap_line::x1#0 = gfx_init_VICII_bitmap::lines_x[gfx_init_VICII_bitmap::l#3]
  bitmap_line::y1#0 = gfx_init_VICII_bitmap::lines_y[gfx_init_VICII_bitmap::l#3]
  bitmap_line::x2#0 = gfx_init_VICII_bitmap::lines_x[gfx_init_VICII_bitmap::$3]
  bitmap_line::y2#0 = gfx_init_VICII_bitmap::lines_y[gfx_init_VICII_bitmap::$4]
  call bitmap_line 
  to:gfx_init_VICII_bitmap::@5
gfx_init_VICII_bitmap::@5: scope:[gfx_init_VICII_bitmap]  from gfx_init_VICII_bitmap::@2
  bitmap_screen#36 = phi( gfx_init_VICII_bitmap::@2/bitmap_screen#41 )
  bitmap_gfx#37 = phi( gfx_init_VICII_bitmap::@2/bitmap_gfx#42 )
  gfx_init_VICII_bitmap::l#4 = phi( gfx_init_VICII_bitmap::@2/gfx_init_VICII_bitmap::l#3 )
  gfx_init_VICII_bitmap::l#1 = ++ gfx_init_VICII_bitmap::l#4
  to:gfx_init_VICII_bitmap::@1
gfx_init_VICII_bitmap::@return: scope:[gfx_init_VICII_bitmap]  from gfx_init_VICII_bitmap::@1
  bitmap_screen#18 = phi( gfx_init_VICII_bitmap::@1/bitmap_screen#27 )
  bitmap_gfx#18 = phi( gfx_init_VICII_bitmap::@1/bitmap_gfx#28 )
  bitmap_gfx#7 = bitmap_gfx#18
  bitmap_screen#7 = bitmap_screen#18
  return 
  to:@return

void gfx_init_plane_8bppchunky()
gfx_init_plane_8bppchunky: scope:[gfx_init_plane_8bppchunky]  from gfx_init::@7
  gfx_init_plane_8bppchunky::gfxbCpuBank#0 = (byte)PLANE_8BPP_CHUNKY/$4000
  dtvSetCpuBankSegment1::cpuBankIdx#0 = gfx_init_plane_8bppchunky::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@7
gfx_init_plane_8bppchunky::@7: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky
  gfx_init_plane_8bppchunky::gfxbCpuBank#3 = phi( gfx_init_plane_8bppchunky/gfx_init_plane_8bppchunky::gfxbCpuBank#0 )
  gfx_init_plane_8bppchunky::gfxbCpuBank#1 = ++ gfx_init_plane_8bppchunky::gfxbCpuBank#3
  gfx_init_plane_8bppchunky::gfxb#0 = (byte*)$4000
  gfx_init_plane_8bppchunky::y#0 = 0
  to:gfx_init_plane_8bppchunky::@1
gfx_init_plane_8bppchunky::@1: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5 gfx_init_plane_8bppchunky::@7
  gfx_init_plane_8bppchunky::gfxbCpuBank#7 = phi( gfx_init_plane_8bppchunky::@5/gfx_init_plane_8bppchunky::gfxbCpuBank#9, gfx_init_plane_8bppchunky::@7/gfx_init_plane_8bppchunky::gfxbCpuBank#1 )
  gfx_init_plane_8bppchunky::y#6 = phi( gfx_init_plane_8bppchunky::@5/gfx_init_plane_8bppchunky::y#1, gfx_init_plane_8bppchunky::@7/gfx_init_plane_8bppchunky::y#0 )
  gfx_init_plane_8bppchunky::gfxb#5 = phi( gfx_init_plane_8bppchunky::@5/gfx_init_plane_8bppchunky::gfxb#6, gfx_init_plane_8bppchunky::@7/gfx_init_plane_8bppchunky::gfxb#0 )
  gfx_init_plane_8bppchunky::x#0 = 0
  to:gfx_init_plane_8bppchunky::@2
gfx_init_plane_8bppchunky::@2: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@1 gfx_init_plane_8bppchunky::@3
  gfx_init_plane_8bppchunky::gfxbCpuBank#6 = phi( gfx_init_plane_8bppchunky::@1/gfx_init_plane_8bppchunky::gfxbCpuBank#7, gfx_init_plane_8bppchunky::@3/gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  gfx_init_plane_8bppchunky::y#4 = phi( gfx_init_plane_8bppchunky::@1/gfx_init_plane_8bppchunky::y#6, gfx_init_plane_8bppchunky::@3/gfx_init_plane_8bppchunky::y#2 )
  gfx_init_plane_8bppchunky::x#3 = phi( gfx_init_plane_8bppchunky::@1/gfx_init_plane_8bppchunky::x#0, gfx_init_plane_8bppchunky::@3/gfx_init_plane_8bppchunky::x#1 )
  gfx_init_plane_8bppchunky::gfxb#3 = phi( gfx_init_plane_8bppchunky::@1/gfx_init_plane_8bppchunky::gfxb#5, gfx_init_plane_8bppchunky::@3/gfx_init_plane_8bppchunky::gfxb#1 )
  gfx_init_plane_8bppchunky::$2 = gfx_init_plane_8bppchunky::gfxb#3 == $8000
  gfx_init_plane_8bppchunky::$3 = ! gfx_init_plane_8bppchunky::$2
  if(gfx_init_plane_8bppchunky::$3) goto gfx_init_plane_8bppchunky::@3
  to:gfx_init_plane_8bppchunky::@4
gfx_init_plane_8bppchunky::@3: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2 gfx_init_plane_8bppchunky::@8
  gfx_init_plane_8bppchunky::gfxbCpuBank#8 = phi( gfx_init_plane_8bppchunky::@2/gfx_init_plane_8bppchunky::gfxbCpuBank#6, gfx_init_plane_8bppchunky::@8/gfx_init_plane_8bppchunky::gfxbCpuBank#2 )
  gfx_init_plane_8bppchunky::gfxb#4 = phi( gfx_init_plane_8bppchunky::@2/gfx_init_plane_8bppchunky::gfxb#3, gfx_init_plane_8bppchunky::@8/gfx_init_plane_8bppchunky::gfxb#2 )
  gfx_init_plane_8bppchunky::y#2 = phi( gfx_init_plane_8bppchunky::@2/gfx_init_plane_8bppchunky::y#4, gfx_init_plane_8bppchunky::@8/gfx_init_plane_8bppchunky::y#5 )
  gfx_init_plane_8bppchunky::x#2 = phi( gfx_init_plane_8bppchunky::@2/gfx_init_plane_8bppchunky::x#3, gfx_init_plane_8bppchunky::@8/gfx_init_plane_8bppchunky::x#4 )
  gfx_init_plane_8bppchunky::$5 = gfx_init_plane_8bppchunky::x#2 + gfx_init_plane_8bppchunky::y#2
  gfx_init_plane_8bppchunky::c#0 = (byte)gfx_init_plane_8bppchunky::$5
  *gfx_init_plane_8bppchunky::gfxb#4 = gfx_init_plane_8bppchunky::c#0
  gfx_init_plane_8bppchunky::gfxb#1 = ++ gfx_init_plane_8bppchunky::gfxb#4
  gfx_init_plane_8bppchunky::x#1 = gfx_init_plane_8bppchunky::x#2 + rangenext(0,$13f)
  gfx_init_plane_8bppchunky::$6 = gfx_init_plane_8bppchunky::x#1 != rangelast(0,$13f)
  if(gfx_init_plane_8bppchunky::$6) goto gfx_init_plane_8bppchunky::@2
  to:gfx_init_plane_8bppchunky::@5
gfx_init_plane_8bppchunky::@4: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2
  gfx_init_plane_8bppchunky::y#7 = phi( gfx_init_plane_8bppchunky::@2/gfx_init_plane_8bppchunky::y#4 )
  gfx_init_plane_8bppchunky::x#5 = phi( gfx_init_plane_8bppchunky::@2/gfx_init_plane_8bppchunky::x#3 )
  gfx_init_plane_8bppchunky::gfxbCpuBank#4 = phi( gfx_init_plane_8bppchunky::@2/gfx_init_plane_8bppchunky::gfxbCpuBank#6 )
  dtvSetCpuBankSegment1::cpuBankIdx#1 = gfx_init_plane_8bppchunky::gfxbCpuBank#4
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@8
gfx_init_plane_8bppchunky::@8: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@4
  gfx_init_plane_8bppchunky::y#5 = phi( gfx_init_plane_8bppchunky::@4/gfx_init_plane_8bppchunky::y#7 )
  gfx_init_plane_8bppchunky::x#4 = phi( gfx_init_plane_8bppchunky::@4/gfx_init_plane_8bppchunky::x#5 )
  gfx_init_plane_8bppchunky::gfxbCpuBank#5 = phi( gfx_init_plane_8bppchunky::@4/gfx_init_plane_8bppchunky::gfxbCpuBank#4 )
  gfx_init_plane_8bppchunky::gfxbCpuBank#2 = ++ gfx_init_plane_8bppchunky::gfxbCpuBank#5
  gfx_init_plane_8bppchunky::gfxb#2 = ((byte*)) $4000
  to:gfx_init_plane_8bppchunky::@3
gfx_init_plane_8bppchunky::@5: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@3
  gfx_init_plane_8bppchunky::gfxbCpuBank#9 = phi( gfx_init_plane_8bppchunky::@3/gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  gfx_init_plane_8bppchunky::gfxb#6 = phi( gfx_init_plane_8bppchunky::@3/gfx_init_plane_8bppchunky::gfxb#1 )
  gfx_init_plane_8bppchunky::y#3 = phi( gfx_init_plane_8bppchunky::@3/gfx_init_plane_8bppchunky::y#2 )
  gfx_init_plane_8bppchunky::y#1 = gfx_init_plane_8bppchunky::y#3 + rangenext(0,$c7)
  gfx_init_plane_8bppchunky::$7 = gfx_init_plane_8bppchunky::y#1 != rangelast(0,$c7)
  if(gfx_init_plane_8bppchunky::$7) goto gfx_init_plane_8bppchunky::@1
  to:gfx_init_plane_8bppchunky::@6
gfx_init_plane_8bppchunky::@6: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5
  dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte)$4000/$4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@9
gfx_init_plane_8bppchunky::@9: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@6
  to:gfx_init_plane_8bppchunky::@return
gfx_init_plane_8bppchunky::@return: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@9
  return 
  to:@return

void gfx_init_plane_horisontal()
gfx_init_plane_horisontal: scope:[gfx_init_plane_horisontal]  from gfx_init::@9
  gfx_init_plane_horisontal::gfxbCpuBank#0 = (byte)PLANE_HORISONTAL/$4000
  dtvSetCpuBankSegment1::cpuBankIdx#3 = gfx_init_plane_horisontal::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@8
gfx_init_plane_horisontal::@8: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal
  gfx_init_plane_horisontal::gfxbCpuBank#2 = phi( gfx_init_plane_horisontal/gfx_init_plane_horisontal::gfxbCpuBank#0 )
  gfx_init_plane_horisontal::gfxbCpuBank#1 = ++ gfx_init_plane_horisontal::gfxbCpuBank#2
  gfx_init_plane_horisontal::gfxa#0 = (byte*)$4000+PLANE_HORISONTAL&$3fff
  gfx_init_plane_horisontal::ay#0 = 0
  to:gfx_init_plane_horisontal::@1
gfx_init_plane_horisontal::@1: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@6 gfx_init_plane_horisontal::@8
  gfx_init_plane_horisontal::gfxa#6 = phi( gfx_init_plane_horisontal::@6/gfx_init_plane_horisontal::gfxa#8, gfx_init_plane_horisontal::@8/gfx_init_plane_horisontal::gfxa#0 )
  gfx_init_plane_horisontal::ay#4 = phi( gfx_init_plane_horisontal::@6/gfx_init_plane_horisontal::ay#1, gfx_init_plane_horisontal::@8/gfx_init_plane_horisontal::ay#0 )
  gfx_init_plane_horisontal::ax#0 = 0
  to:gfx_init_plane_horisontal::@2
gfx_init_plane_horisontal::@2: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@1 gfx_init_plane_horisontal::@4
  gfx_init_plane_horisontal::ax#5 = phi( gfx_init_plane_horisontal::@1/gfx_init_plane_horisontal::ax#0, gfx_init_plane_horisontal::@4/gfx_init_plane_horisontal::ax#1 )
  gfx_init_plane_horisontal::gfxa#5 = phi( gfx_init_plane_horisontal::@1/gfx_init_plane_horisontal::gfxa#6, gfx_init_plane_horisontal::@4/gfx_init_plane_horisontal::gfxa#7 )
  gfx_init_plane_horisontal::ay#2 = phi( gfx_init_plane_horisontal::@1/gfx_init_plane_horisontal::ay#4, gfx_init_plane_horisontal::@4/gfx_init_plane_horisontal::ay#5 )
  gfx_init_plane_horisontal::$2 = gfx_init_plane_horisontal::ay#2 & 4
  gfx_init_plane_horisontal::$3 = gfx_init_plane_horisontal::$2 == 0
  if(gfx_init_plane_horisontal::$3) goto gfx_init_plane_horisontal::@3
  to:gfx_init_plane_horisontal::@5
gfx_init_plane_horisontal::@3: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  gfx_init_plane_horisontal::ay#6 = phi( gfx_init_plane_horisontal::@2/gfx_init_plane_horisontal::ay#2 )
  gfx_init_plane_horisontal::ax#3 = phi( gfx_init_plane_horisontal::@2/gfx_init_plane_horisontal::ax#5 )
  gfx_init_plane_horisontal::gfxa#3 = phi( gfx_init_plane_horisontal::@2/gfx_init_plane_horisontal::gfxa#5 )
  *gfx_init_plane_horisontal::gfxa#3 = 0
  gfx_init_plane_horisontal::gfxa#1 = ++ gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@5: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  gfx_init_plane_horisontal::ay#7 = phi( gfx_init_plane_horisontal::@2/gfx_init_plane_horisontal::ay#2 )
  gfx_init_plane_horisontal::ax#4 = phi( gfx_init_plane_horisontal::@2/gfx_init_plane_horisontal::ax#5 )
  gfx_init_plane_horisontal::gfxa#4 = phi( gfx_init_plane_horisontal::@2/gfx_init_plane_horisontal::gfxa#5 )
  *gfx_init_plane_horisontal::gfxa#4 = $ff
  gfx_init_plane_horisontal::gfxa#2 = ++ gfx_init_plane_horisontal::gfxa#4
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@4: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5
  gfx_init_plane_horisontal::gfxa#7 = phi( gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::gfxa#1, gfx_init_plane_horisontal::@5/gfx_init_plane_horisontal::gfxa#2 )
  gfx_init_plane_horisontal::ay#5 = phi( gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::ay#6, gfx_init_plane_horisontal::@5/gfx_init_plane_horisontal::ay#7 )
  gfx_init_plane_horisontal::ax#2 = phi( gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::ax#3, gfx_init_plane_horisontal::@5/gfx_init_plane_horisontal::ax#4 )
  gfx_init_plane_horisontal::ax#1 = gfx_init_plane_horisontal::ax#2 + rangenext(0,$27)
  gfx_init_plane_horisontal::$4 = gfx_init_plane_horisontal::ax#1 != rangelast(0,$27)
  if(gfx_init_plane_horisontal::$4) goto gfx_init_plane_horisontal::@2
  to:gfx_init_plane_horisontal::@6
gfx_init_plane_horisontal::@6: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@4
  gfx_init_plane_horisontal::gfxa#8 = phi( gfx_init_plane_horisontal::@4/gfx_init_plane_horisontal::gfxa#7 )
  gfx_init_plane_horisontal::ay#3 = phi( gfx_init_plane_horisontal::@4/gfx_init_plane_horisontal::ay#5 )
  gfx_init_plane_horisontal::ay#1 = gfx_init_plane_horisontal::ay#3 + rangenext(0,$c7)
  gfx_init_plane_horisontal::$5 = gfx_init_plane_horisontal::ay#1 != rangelast(0,$c7)
  if(gfx_init_plane_horisontal::$5) goto gfx_init_plane_horisontal::@1
  to:gfx_init_plane_horisontal::@7
gfx_init_plane_horisontal::@7: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@6
  dtvSetCpuBankSegment1::cpuBankIdx#4 = (byte)$4000/$4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@9
gfx_init_plane_horisontal::@9: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@7
  to:gfx_init_plane_horisontal::@return
gfx_init_plane_horisontal::@return: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@9
  return 
  to:@return

void gfx_init_plane_horisontal2()
gfx_init_plane_horisontal2: scope:[gfx_init_plane_horisontal2]  from gfx_init::@11
  gfx_init_plane_horisontal2::gfxbCpuBank#0 = (byte)PLANE_HORISONTAL2/$4000
  dtvSetCpuBankSegment1::cpuBankIdx#5 = gfx_init_plane_horisontal2::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@5
gfx_init_plane_horisontal2::@5: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2
  gfx_init_plane_horisontal2::gfxbCpuBank#2 = phi( gfx_init_plane_horisontal2/gfx_init_plane_horisontal2::gfxbCpuBank#0 )
  gfx_init_plane_horisontal2::gfxbCpuBank#1 = ++ gfx_init_plane_horisontal2::gfxbCpuBank#2
  gfx_init_plane_horisontal2::gfxa#0 = (byte*)$4000+PLANE_HORISONTAL2&$3fff
  gfx_init_plane_horisontal2::ay#0 = 0
  to:gfx_init_plane_horisontal2::@1
gfx_init_plane_horisontal2::@1: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3 gfx_init_plane_horisontal2::@5
  gfx_init_plane_horisontal2::gfxa#3 = phi( gfx_init_plane_horisontal2::@3/gfx_init_plane_horisontal2::gfxa#4, gfx_init_plane_horisontal2::@5/gfx_init_plane_horisontal2::gfxa#0 )
  gfx_init_plane_horisontal2::ay#4 = phi( gfx_init_plane_horisontal2::@3/gfx_init_plane_horisontal2::ay#1, gfx_init_plane_horisontal2::@5/gfx_init_plane_horisontal2::ay#0 )
  gfx_init_plane_horisontal2::ax#0 = 0
  to:gfx_init_plane_horisontal2::@2
gfx_init_plane_horisontal2::@2: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@1 gfx_init_plane_horisontal2::@2
  gfx_init_plane_horisontal2::ax#2 = phi( gfx_init_plane_horisontal2::@1/gfx_init_plane_horisontal2::ax#0, gfx_init_plane_horisontal2::@2/gfx_init_plane_horisontal2::ax#1 )
  gfx_init_plane_horisontal2::gfxa#2 = phi( gfx_init_plane_horisontal2::@1/gfx_init_plane_horisontal2::gfxa#3, gfx_init_plane_horisontal2::@2/gfx_init_plane_horisontal2::gfxa#1 )
  gfx_init_plane_horisontal2::ay#2 = phi( gfx_init_plane_horisontal2::@1/gfx_init_plane_horisontal2::ay#4, gfx_init_plane_horisontal2::@2/gfx_init_plane_horisontal2::ay#2 )
  gfx_init_plane_horisontal2::$2 = gfx_init_plane_horisontal2::ay#2 / 2
  gfx_init_plane_horisontal2::$3 = gfx_init_plane_horisontal2::$2 & 3
  gfx_init_plane_horisontal2::row#0 = gfx_init_plane_horisontal2::$3
  *gfx_init_plane_horisontal2::gfxa#2 = gfx_init_plane_horisontal2::row_bitmask[gfx_init_plane_horisontal2::row#0]
  gfx_init_plane_horisontal2::gfxa#1 = ++ gfx_init_plane_horisontal2::gfxa#2
  gfx_init_plane_horisontal2::ax#1 = gfx_init_plane_horisontal2::ax#2 + rangenext(0,$27)
  gfx_init_plane_horisontal2::$4 = gfx_init_plane_horisontal2::ax#1 != rangelast(0,$27)
  if(gfx_init_plane_horisontal2::$4) goto gfx_init_plane_horisontal2::@2
  to:gfx_init_plane_horisontal2::@3
gfx_init_plane_horisontal2::@3: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@2
  gfx_init_plane_horisontal2::gfxa#4 = phi( gfx_init_plane_horisontal2::@2/gfx_init_plane_horisontal2::gfxa#1 )
  gfx_init_plane_horisontal2::ay#3 = phi( gfx_init_plane_horisontal2::@2/gfx_init_plane_horisontal2::ay#2 )
  gfx_init_plane_horisontal2::ay#1 = gfx_init_plane_horisontal2::ay#3 + rangenext(0,$c7)
  gfx_init_plane_horisontal2::$5 = gfx_init_plane_horisontal2::ay#1 != rangelast(0,$c7)
  if(gfx_init_plane_horisontal2::$5) goto gfx_init_plane_horisontal2::@1
  to:gfx_init_plane_horisontal2::@4
gfx_init_plane_horisontal2::@4: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3
  dtvSetCpuBankSegment1::cpuBankIdx#6 = (byte)$4000/$4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@6
gfx_init_plane_horisontal2::@6: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@4
  to:gfx_init_plane_horisontal2::@return
gfx_init_plane_horisontal2::@return: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@6
  return 
  to:@return

void gfx_init_plane_vertical()
gfx_init_plane_vertical: scope:[gfx_init_plane_vertical]  from gfx_init::@10
  gfx_init_plane_vertical::gfxbCpuBank#0 = (byte)PLANE_VERTICAL/$4000
  dtvSetCpuBankSegment1::cpuBankIdx#7 = gfx_init_plane_vertical::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@5
gfx_init_plane_vertical::@5: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical
  gfx_init_plane_vertical::gfxbCpuBank#2 = phi( gfx_init_plane_vertical/gfx_init_plane_vertical::gfxbCpuBank#0 )
  gfx_init_plane_vertical::gfxbCpuBank#1 = ++ gfx_init_plane_vertical::gfxbCpuBank#2
  gfx_init_plane_vertical::gfxb#0 = (byte*)$4000+PLANE_VERTICAL&$3fff
  gfx_init_plane_vertical::by#0 = 0
  to:gfx_init_plane_vertical::@1
gfx_init_plane_vertical::@1: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3 gfx_init_plane_vertical::@5
  gfx_init_plane_vertical::by#4 = phi( gfx_init_plane_vertical::@3/gfx_init_plane_vertical::by#1, gfx_init_plane_vertical::@5/gfx_init_plane_vertical::by#0 )
  gfx_init_plane_vertical::gfxb#3 = phi( gfx_init_plane_vertical::@3/gfx_init_plane_vertical::gfxb#4, gfx_init_plane_vertical::@5/gfx_init_plane_vertical::gfxb#0 )
  gfx_init_plane_vertical::bx#0 = 0
  to:gfx_init_plane_vertical::@2
gfx_init_plane_vertical::@2: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@1 gfx_init_plane_vertical::@2
  gfx_init_plane_vertical::by#3 = phi( gfx_init_plane_vertical::@1/gfx_init_plane_vertical::by#4, gfx_init_plane_vertical::@2/gfx_init_plane_vertical::by#3 )
  gfx_init_plane_vertical::bx#2 = phi( gfx_init_plane_vertical::@1/gfx_init_plane_vertical::bx#0, gfx_init_plane_vertical::@2/gfx_init_plane_vertical::bx#1 )
  gfx_init_plane_vertical::gfxb#2 = phi( gfx_init_plane_vertical::@1/gfx_init_plane_vertical::gfxb#3, gfx_init_plane_vertical::@2/gfx_init_plane_vertical::gfxb#1 )
  *gfx_init_plane_vertical::gfxb#2 = $f
  gfx_init_plane_vertical::gfxb#1 = ++ gfx_init_plane_vertical::gfxb#2
  gfx_init_plane_vertical::bx#1 = gfx_init_plane_vertical::bx#2 + rangenext(0,$27)
  gfx_init_plane_vertical::$2 = gfx_init_plane_vertical::bx#1 != rangelast(0,$27)
  if(gfx_init_plane_vertical::$2) goto gfx_init_plane_vertical::@2
  to:gfx_init_plane_vertical::@3
gfx_init_plane_vertical::@3: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@2
  gfx_init_plane_vertical::gfxb#4 = phi( gfx_init_plane_vertical::@2/gfx_init_plane_vertical::gfxb#1 )
  gfx_init_plane_vertical::by#2 = phi( gfx_init_plane_vertical::@2/gfx_init_plane_vertical::by#3 )
  gfx_init_plane_vertical::by#1 = gfx_init_plane_vertical::by#2 + rangenext(0,$c7)
  gfx_init_plane_vertical::$3 = gfx_init_plane_vertical::by#1 != rangelast(0,$c7)
  if(gfx_init_plane_vertical::$3) goto gfx_init_plane_vertical::@1
  to:gfx_init_plane_vertical::@4
gfx_init_plane_vertical::@4: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3
  dtvSetCpuBankSegment1::cpuBankIdx#8 = (byte)$4000/$4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@6
gfx_init_plane_vertical::@6: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@4
  to:gfx_init_plane_vertical::@return
gfx_init_plane_vertical::@return: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@6
  return 
  to:@return

void gfx_init_plane_charset8()
gfx_init_plane_charset8: scope:[gfx_init_plane_charset8]  from gfx_init::@8
  gfx_init_plane_charset8::gfxbCpuBank#0 = (byte)PLANE_CHARSET8/$4000
  dtvSetCpuBankSegment1::cpuBankIdx#9 = gfx_init_plane_charset8::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@9
gfx_init_plane_charset8::@9: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8
  gfx_init_plane_charset8::gfxbCpuBank#2 = phi( gfx_init_plane_charset8/gfx_init_plane_charset8::gfxbCpuBank#0 )
  gfx_init_plane_charset8::gfxbCpuBank#1 = ++ gfx_init_plane_charset8::gfxbCpuBank#2
  gfx_init_plane_charset8::gfxa#0 = (byte*)$4000+PLANE_CHARSET8&$3fff
  gfx_init_plane_charset8::chargen#0 = CHARGEN
  *PROCPORT = PROCPORT_RAM_CHARROM
  gfx_init_plane_charset8::col#0 = 0
  gfx_init_plane_charset8::ch#0 = 0
  to:gfx_init_plane_charset8::@1
gfx_init_plane_charset8::@1: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7 gfx_init_plane_charset8::@9
  gfx_init_plane_charset8::ch#8 = phi( gfx_init_plane_charset8::@7/gfx_init_plane_charset8::ch#1, gfx_init_plane_charset8::@9/gfx_init_plane_charset8::ch#0 )
  gfx_init_plane_charset8::col#6 = phi( gfx_init_plane_charset8::@7/gfx_init_plane_charset8::col#8, gfx_init_plane_charset8::@9/gfx_init_plane_charset8::col#0 )
  gfx_init_plane_charset8::gfxa#6 = phi( gfx_init_plane_charset8::@7/gfx_init_plane_charset8::gfxa#8, gfx_init_plane_charset8::@9/gfx_init_plane_charset8::gfxa#0 )
  gfx_init_plane_charset8::chargen#3 = phi( gfx_init_plane_charset8::@7/gfx_init_plane_charset8::chargen#5, gfx_init_plane_charset8::@9/gfx_init_plane_charset8::chargen#0 )
  gfx_init_plane_charset8::cr#0 = 0
  to:gfx_init_plane_charset8::@2
gfx_init_plane_charset8::@2: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@1 gfx_init_plane_charset8::@6
  gfx_init_plane_charset8::ch#7 = phi( gfx_init_plane_charset8::@1/gfx_init_plane_charset8::ch#8, gfx_init_plane_charset8::@6/gfx_init_plane_charset8::ch#3 )
  gfx_init_plane_charset8::cr#6 = phi( gfx_init_plane_charset8::@1/gfx_init_plane_charset8::cr#0, gfx_init_plane_charset8::@6/gfx_init_plane_charset8::cr#1 )
  gfx_init_plane_charset8::col#5 = phi( gfx_init_plane_charset8::@1/gfx_init_plane_charset8::col#6, gfx_init_plane_charset8::@6/gfx_init_plane_charset8::col#7 )
  gfx_init_plane_charset8::gfxa#5 = phi( gfx_init_plane_charset8::@1/gfx_init_plane_charset8::gfxa#6, gfx_init_plane_charset8::@6/gfx_init_plane_charset8::gfxa#7 )
  gfx_init_plane_charset8::chargen#2 = phi( gfx_init_plane_charset8::@1/gfx_init_plane_charset8::chargen#3, gfx_init_plane_charset8::@6/gfx_init_plane_charset8::chargen#4 )
  gfx_init_plane_charset8::bits#0 = *gfx_init_plane_charset8::chargen#2
  gfx_init_plane_charset8::chargen#1 = ++ gfx_init_plane_charset8::chargen#2
  gfx_init_plane_charset8::cp#0 = 0
  to:gfx_init_plane_charset8::@3
gfx_init_plane_charset8::@3: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@2 gfx_init_plane_charset8::@4
  gfx_init_plane_charset8::ch#5 = phi( gfx_init_plane_charset8::@2/gfx_init_plane_charset8::ch#7, gfx_init_plane_charset8::@4/gfx_init_plane_charset8::ch#4 )
  gfx_init_plane_charset8::chargen#7 = phi( gfx_init_plane_charset8::@2/gfx_init_plane_charset8::chargen#1, gfx_init_plane_charset8::@4/gfx_init_plane_charset8::chargen#6 )
  gfx_init_plane_charset8::cr#4 = phi( gfx_init_plane_charset8::@2/gfx_init_plane_charset8::cr#6, gfx_init_plane_charset8::@4/gfx_init_plane_charset8::cr#3 )
  gfx_init_plane_charset8::cp#3 = phi( gfx_init_plane_charset8::@2/gfx_init_plane_charset8::cp#0, gfx_init_plane_charset8::@4/gfx_init_plane_charset8::cp#1 )
  gfx_init_plane_charset8::col#4 = phi( gfx_init_plane_charset8::@2/gfx_init_plane_charset8::col#5, gfx_init_plane_charset8::@4/gfx_init_plane_charset8::col#1 )
  gfx_init_plane_charset8::gfxa#3 = phi( gfx_init_plane_charset8::@2/gfx_init_plane_charset8::gfxa#5, gfx_init_plane_charset8::@4/gfx_init_plane_charset8::gfxa#1 )
  gfx_init_plane_charset8::bits#2 = phi( gfx_init_plane_charset8::@2/gfx_init_plane_charset8::bits#0, gfx_init_plane_charset8::@4/gfx_init_plane_charset8::bits#1 )
  gfx_init_plane_charset8::c#0 = 0
  gfx_init_plane_charset8::$2 = gfx_init_plane_charset8::bits#2 & $80
  gfx_init_plane_charset8::$3 = gfx_init_plane_charset8::$2 != 0
  gfx_init_plane_charset8::$4 = ! gfx_init_plane_charset8::$3
  if(gfx_init_plane_charset8::$4) goto gfx_init_plane_charset8::@4
  to:gfx_init_plane_charset8::@5
gfx_init_plane_charset8::@4: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3 gfx_init_plane_charset8::@5
  gfx_init_plane_charset8::ch#4 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::ch#5, gfx_init_plane_charset8::@5/gfx_init_plane_charset8::ch#6 )
  gfx_init_plane_charset8::chargen#6 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::chargen#7, gfx_init_plane_charset8::@5/gfx_init_plane_charset8::chargen#8 )
  gfx_init_plane_charset8::cr#3 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::cr#4, gfx_init_plane_charset8::@5/gfx_init_plane_charset8::cr#5 )
  gfx_init_plane_charset8::cp#2 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::cp#3, gfx_init_plane_charset8::@5/gfx_init_plane_charset8::cp#4 )
  gfx_init_plane_charset8::col#2 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::col#4, gfx_init_plane_charset8::@5/gfx_init_plane_charset8::col#3 )
  gfx_init_plane_charset8::bits#3 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::bits#2, gfx_init_plane_charset8::@5/gfx_init_plane_charset8::bits#4 )
  gfx_init_plane_charset8::gfxa#2 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::gfxa#3, gfx_init_plane_charset8::@5/gfx_init_plane_charset8::gfxa#4 )
  gfx_init_plane_charset8::c#2 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::c#0, gfx_init_plane_charset8::@5/gfx_init_plane_charset8::c#1 )
  *gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::c#2
  gfx_init_plane_charset8::gfxa#1 = ++ gfx_init_plane_charset8::gfxa#2
  gfx_init_plane_charset8::$5 = gfx_init_plane_charset8::bits#3 * 2
  gfx_init_plane_charset8::bits#1 = gfx_init_plane_charset8::$5
  gfx_init_plane_charset8::col#1 = ++ gfx_init_plane_charset8::col#2
  gfx_init_plane_charset8::cp#1 = gfx_init_plane_charset8::cp#2 + rangenext(0,7)
  gfx_init_plane_charset8::$6 = gfx_init_plane_charset8::cp#1 != rangelast(0,7)
  if(gfx_init_plane_charset8::$6) goto gfx_init_plane_charset8::@3
  to:gfx_init_plane_charset8::@6
gfx_init_plane_charset8::@5: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3
  gfx_init_plane_charset8::ch#6 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::ch#5 )
  gfx_init_plane_charset8::chargen#8 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::chargen#7 )
  gfx_init_plane_charset8::cr#5 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::cr#4 )
  gfx_init_plane_charset8::cp#4 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::cp#3 )
  gfx_init_plane_charset8::bits#4 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::bits#2 )
  gfx_init_plane_charset8::gfxa#4 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::gfxa#3 )
  gfx_init_plane_charset8::col#3 = phi( gfx_init_plane_charset8::@3/gfx_init_plane_charset8::col#4 )
  gfx_init_plane_charset8::c#1 = gfx_init_plane_charset8::col#3
  to:gfx_init_plane_charset8::@4
gfx_init_plane_charset8::@6: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@4
  gfx_init_plane_charset8::col#7 = phi( gfx_init_plane_charset8::@4/gfx_init_plane_charset8::col#1 )
  gfx_init_plane_charset8::gfxa#7 = phi( gfx_init_plane_charset8::@4/gfx_init_plane_charset8::gfxa#1 )
  gfx_init_plane_charset8::ch#3 = phi( gfx_init_plane_charset8::@4/gfx_init_plane_charset8::ch#4 )
  gfx_init_plane_charset8::chargen#4 = phi( gfx_init_plane_charset8::@4/gfx_init_plane_charset8::chargen#6 )
  gfx_init_plane_charset8::cr#2 = phi( gfx_init_plane_charset8::@4/gfx_init_plane_charset8::cr#3 )
  gfx_init_plane_charset8::cr#1 = gfx_init_plane_charset8::cr#2 + rangenext(0,7)
  gfx_init_plane_charset8::$7 = gfx_init_plane_charset8::cr#1 != rangelast(0,7)
  if(gfx_init_plane_charset8::$7) goto gfx_init_plane_charset8::@2
  to:gfx_init_plane_charset8::@7
gfx_init_plane_charset8::@7: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@6
  gfx_init_plane_charset8::col#8 = phi( gfx_init_plane_charset8::@6/gfx_init_plane_charset8::col#7 )
  gfx_init_plane_charset8::gfxa#8 = phi( gfx_init_plane_charset8::@6/gfx_init_plane_charset8::gfxa#7 )
  gfx_init_plane_charset8::chargen#5 = phi( gfx_init_plane_charset8::@6/gfx_init_plane_charset8::chargen#4 )
  gfx_init_plane_charset8::ch#2 = phi( gfx_init_plane_charset8::@6/gfx_init_plane_charset8::ch#3 )
  gfx_init_plane_charset8::ch#1 = gfx_init_plane_charset8::ch#2 + rangenext(0,$ff)
  gfx_init_plane_charset8::$8 = gfx_init_plane_charset8::ch#1 != rangelast(0,$ff)
  if(gfx_init_plane_charset8::$8) goto gfx_init_plane_charset8::@1
  to:gfx_init_plane_charset8::@8
gfx_init_plane_charset8::@8: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7
  *PROCPORT = PROCPORT_RAM_IO
  dtvSetCpuBankSegment1::cpuBankIdx#10 = (byte)$4000/$4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@10
gfx_init_plane_charset8::@10: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@8
  to:gfx_init_plane_charset8::@return
gfx_init_plane_charset8::@return: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@10
  return 
  to:@return

void gfx_init_plane_vertical2()
gfx_init_plane_vertical2: scope:[gfx_init_plane_vertical2]  from gfx_init::@12
  gfx_init_plane_fill::plane_addr#0 = PLANE_VERTICAL2
  gfx_init_plane_fill::fill#0 = $1b
  call gfx_init_plane_fill 
  to:gfx_init_plane_vertical2::@1
gfx_init_plane_vertical2::@1: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2
  to:gfx_init_plane_vertical2::@return
gfx_init_plane_vertical2::@return: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2::@1
  return 
  to:@return

void gfx_init_plane_blank()
gfx_init_plane_blank: scope:[gfx_init_plane_blank]  from gfx_init::@13
  gfx_init_plane_fill::plane_addr#1 = PLANE_BLANK
  gfx_init_plane_fill::fill#1 = 0
  call gfx_init_plane_fill 
  to:gfx_init_plane_blank::@1
gfx_init_plane_blank::@1: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank
  to:gfx_init_plane_blank::@return
gfx_init_plane_blank::@return: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank::@1
  return 
  to:@return

void gfx_init_plane_full()
gfx_init_plane_full: scope:[gfx_init_plane_full]  from gfx_init::@14
  gfx_init_plane_fill::plane_addr#2 = PLANE_FULL
  gfx_init_plane_fill::fill#2 = $ff
  call gfx_init_plane_fill 
  to:gfx_init_plane_full::@1
gfx_init_plane_full::@1: scope:[gfx_init_plane_full]  from gfx_init_plane_full
  to:gfx_init_plane_full::@return
gfx_init_plane_full::@return: scope:[gfx_init_plane_full]  from gfx_init_plane_full::@1
  return 
  to:@return

void gfx_init_plane_fill(dword gfx_init_plane_fill::plane_addr , byte gfx_init_plane_fill::fill)
gfx_init_plane_fill: scope:[gfx_init_plane_fill]  from gfx_init_plane_blank gfx_init_plane_full gfx_init_plane_vertical2
  gfx_init_plane_fill::fill#7 = phi( gfx_init_plane_blank/gfx_init_plane_fill::fill#1, gfx_init_plane_full/gfx_init_plane_fill::fill#2, gfx_init_plane_vertical2/gfx_init_plane_fill::fill#0 )
  gfx_init_plane_fill::plane_addr#3 = phi( gfx_init_plane_blank/gfx_init_plane_fill::plane_addr#1, gfx_init_plane_full/gfx_init_plane_fill::plane_addr#2, gfx_init_plane_vertical2/gfx_init_plane_fill::plane_addr#0 )
  gfx_init_plane_fill::$0 = gfx_init_plane_fill::plane_addr#3 * 4
  gfx_init_plane_fill::$1 = > gfx_init_plane_fill::$0
  gfx_init_plane_fill::$2 = < gfx_init_plane_fill::$1
  gfx_init_plane_fill::gfxbCpuBank#0 = gfx_init_plane_fill::$2
  dtvSetCpuBankSegment1::cpuBankIdx#11 = gfx_init_plane_fill::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@5
gfx_init_plane_fill::@5: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill
  gfx_init_plane_fill::fill#6 = phi( gfx_init_plane_fill/gfx_init_plane_fill::fill#7 )
  gfx_init_plane_fill::plane_addr#4 = phi( gfx_init_plane_fill/gfx_init_plane_fill::plane_addr#3 )
  gfx_init_plane_fill::gfxbCpuBank#2 = phi( gfx_init_plane_fill/gfx_init_plane_fill::gfxbCpuBank#0 )
  gfx_init_plane_fill::gfxbCpuBank#1 = ++ gfx_init_plane_fill::gfxbCpuBank#2
  gfx_init_plane_fill::$4 = < gfx_init_plane_fill::plane_addr#4
  gfx_init_plane_fill::$5 = gfx_init_plane_fill::$4 & $3fff
  gfx_init_plane_fill::$6 = $4000 + gfx_init_plane_fill::$5
  gfx_init_plane_fill::gfxb#0 = ((byte*)) gfx_init_plane_fill::$6
  gfx_init_plane_fill::by#0 = 0
  to:gfx_init_plane_fill::@1
gfx_init_plane_fill::@1: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3 gfx_init_plane_fill::@5
  gfx_init_plane_fill::by#4 = phi( gfx_init_plane_fill::@3/gfx_init_plane_fill::by#1, gfx_init_plane_fill::@5/gfx_init_plane_fill::by#0 )
  gfx_init_plane_fill::gfxb#3 = phi( gfx_init_plane_fill::@3/gfx_init_plane_fill::gfxb#4, gfx_init_plane_fill::@5/gfx_init_plane_fill::gfxb#0 )
  gfx_init_plane_fill::fill#4 = phi( gfx_init_plane_fill::@3/gfx_init_plane_fill::fill#5, gfx_init_plane_fill::@5/gfx_init_plane_fill::fill#6 )
  gfx_init_plane_fill::bx#0 = 0
  to:gfx_init_plane_fill::@2
gfx_init_plane_fill::@2: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@1 gfx_init_plane_fill::@2
  gfx_init_plane_fill::by#3 = phi( gfx_init_plane_fill::@1/gfx_init_plane_fill::by#4, gfx_init_plane_fill::@2/gfx_init_plane_fill::by#3 )
  gfx_init_plane_fill::bx#2 = phi( gfx_init_plane_fill::@1/gfx_init_plane_fill::bx#0, gfx_init_plane_fill::@2/gfx_init_plane_fill::bx#1 )
  gfx_init_plane_fill::gfxb#2 = phi( gfx_init_plane_fill::@1/gfx_init_plane_fill::gfxb#3, gfx_init_plane_fill::@2/gfx_init_plane_fill::gfxb#1 )
  gfx_init_plane_fill::fill#3 = phi( gfx_init_plane_fill::@1/gfx_init_plane_fill::fill#4, gfx_init_plane_fill::@2/gfx_init_plane_fill::fill#3 )
  *gfx_init_plane_fill::gfxb#2 = gfx_init_plane_fill::fill#3
  gfx_init_plane_fill::gfxb#1 = ++ gfx_init_plane_fill::gfxb#2
  gfx_init_plane_fill::bx#1 = gfx_init_plane_fill::bx#2 + rangenext(0,$27)
  gfx_init_plane_fill::$8 = gfx_init_plane_fill::bx#1 != rangelast(0,$27)
  if(gfx_init_plane_fill::$8) goto gfx_init_plane_fill::@2
  to:gfx_init_plane_fill::@3
gfx_init_plane_fill::@3: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@2
  gfx_init_plane_fill::gfxb#4 = phi( gfx_init_plane_fill::@2/gfx_init_plane_fill::gfxb#1 )
  gfx_init_plane_fill::fill#5 = phi( gfx_init_plane_fill::@2/gfx_init_plane_fill::fill#3 )
  gfx_init_plane_fill::by#2 = phi( gfx_init_plane_fill::@2/gfx_init_plane_fill::by#3 )
  gfx_init_plane_fill::by#1 = gfx_init_plane_fill::by#2 + rangenext(0,$c7)
  gfx_init_plane_fill::$9 = gfx_init_plane_fill::by#1 != rangelast(0,$c7)
  if(gfx_init_plane_fill::$9) goto gfx_init_plane_fill::@1
  to:gfx_init_plane_fill::@4
gfx_init_plane_fill::@4: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3
  dtvSetCpuBankSegment1::cpuBankIdx#12 = (byte)$4000/$4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@6
gfx_init_plane_fill::@6: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@4
  to:gfx_init_plane_fill::@return
gfx_init_plane_fill::@return: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@6
  return 
  to:@return

void form_mode()
form_mode: scope:[form_mode]  from main::@2
  form_field_idx#68 = phi( main::@2/form_field_idx#27 )
  keyboard_modifiers#108 = phi( main::@2/keyboard_modifiers#40 )
  keyboard_events_size#127 = phi( main::@2/keyboard_events_size#44 )
  form_cursor_count#62 = phi( main::@2/form_cursor_count#20 )
  print_char_cursor#49 = phi( main::@2/print_char_cursor#47 )
  print_line_cursor#43 = phi( main::@2/print_line_cursor#41 )
  print_screen#22 = phi( main::@2/print_screen#20 )
  print_set_screen::screen#0 = COLS
  call print_set_screen 
  to:form_mode::@8
form_mode::@8: scope:[form_mode]  from form_mode
  form_field_idx#67 = phi( form_mode/form_field_idx#68 )
  keyboard_modifiers#106 = phi( form_mode/keyboard_modifiers#108 )
  keyboard_events_size#125 = phi( form_mode/keyboard_events_size#127 )
  form_cursor_count#61 = phi( form_mode/form_cursor_count#62 )
  print_char_cursor#34 = phi( form_mode/print_char_cursor#10 )
  print_line_cursor#29 = phi( form_mode/print_line_cursor#7 )
  print_screen#15 = phi( form_mode/print_screen#1 )
  print_screen#4 = print_screen#15
  print_line_cursor#10 = print_line_cursor#29
  print_char_cursor#13 = print_char_cursor#34
  call print_cls 
  to:form_mode::@9
form_mode::@9: scope:[form_mode]  from form_mode::@8
  form_field_idx#66 = phi( form_mode::@8/form_field_idx#67 )
  keyboard_modifiers#104 = phi( form_mode::@8/keyboard_modifiers#106 )
  keyboard_events_size#123 = phi( form_mode::@8/keyboard_events_size#125 )
  form_cursor_count#60 = phi( form_mode::@8/form_cursor_count#61 )
  print_screen#29 = phi( form_mode::@8/print_screen#4 )
  print_char_cursor#35 = phi( form_mode::@8/print_char_cursor#8 )
  print_line_cursor#30 = phi( form_mode::@8/print_line_cursor#5 )
  print_line_cursor#11 = print_line_cursor#30
  print_char_cursor#14 = print_char_cursor#35
  print_str_lines::str#1 = FORM_COLS
  call print_str_lines 
  to:form_mode::@10
form_mode::@10: scope:[form_mode]  from form_mode::@9
  form_field_idx#65 = phi( form_mode::@9/form_field_idx#66 )
  keyboard_modifiers#102 = phi( form_mode::@9/keyboard_modifiers#104 )
  keyboard_events_size#121 = phi( form_mode::@9/keyboard_events_size#123 )
  form_cursor_count#59 = phi( form_mode::@9/form_cursor_count#60 )
  print_screen#23 = phi( form_mode::@9/print_screen#29 )
  print_line_cursor#31 = phi( form_mode::@9/print_line_cursor#1 )
  print_char_cursor#36 = phi( form_mode::@9/print_char_cursor#2 )
  print_char_cursor#15 = print_char_cursor#36
  print_line_cursor#12 = print_line_cursor#31
  print_set_screen::screen#1 = FORM_SCREEN
  call print_set_screen 
  to:form_mode::@11
form_mode::@11: scope:[form_mode]  from form_mode::@10
  form_field_idx#64 = phi( form_mode::@10/form_field_idx#65 )
  keyboard_modifiers#100 = phi( form_mode::@10/keyboard_modifiers#102 )
  keyboard_events_size#119 = phi( form_mode::@10/keyboard_events_size#121 )
  form_cursor_count#58 = phi( form_mode::@10/form_cursor_count#59 )
  print_char_cursor#37 = phi( form_mode::@10/print_char_cursor#10 )
  print_line_cursor#32 = phi( form_mode::@10/print_line_cursor#7 )
  print_screen#16 = phi( form_mode::@10/print_screen#1 )
  print_screen#5 = print_screen#16
  print_line_cursor#13 = print_line_cursor#32
  print_char_cursor#16 = print_char_cursor#37
  call print_cls 
  to:form_mode::@12
form_mode::@12: scope:[form_mode]  from form_mode::@11
  form_field_idx#63 = phi( form_mode::@11/form_field_idx#64 )
  keyboard_modifiers#98 = phi( form_mode::@11/keyboard_modifiers#100 )
  keyboard_events_size#117 = phi( form_mode::@11/keyboard_events_size#119 )
  form_cursor_count#57 = phi( form_mode::@11/form_cursor_count#58 )
  print_screen#45 = phi( form_mode::@11/print_screen#5 )
  print_char_cursor#38 = phi( form_mode::@11/print_char_cursor#8 )
  print_line_cursor#33 = phi( form_mode::@11/print_line_cursor#5 )
  print_line_cursor#14 = print_line_cursor#33
  print_char_cursor#17 = print_char_cursor#38
  print_str_lines::str#2 = FORM_TEXT
  call print_str_lines 
  to:form_mode::@13
form_mode::@13: scope:[form_mode]  from form_mode::@12
  form_field_idx#60 = phi( form_mode::@12/form_field_idx#63 )
  keyboard_modifiers#96 = phi( form_mode::@12/keyboard_modifiers#98 )
  keyboard_events_size#114 = phi( form_mode::@12/keyboard_events_size#117 )
  form_cursor_count#54 = phi( form_mode::@12/form_cursor_count#57 )
  print_screen#44 = phi( form_mode::@12/print_screen#45 )
  print_line_cursor#34 = phi( form_mode::@12/print_line_cursor#1 )
  print_char_cursor#39 = phi( form_mode::@12/print_char_cursor#2 )
  print_char_cursor#18 = print_char_cursor#39
  print_line_cursor#15 = print_line_cursor#34
  form_set_screen::screen#0 = FORM_SCREEN
  call form_set_screen 
  to:form_mode::@14
form_mode::@14: scope:[form_mode]  from form_mode::@13
  form_field_idx#58 = phi( form_mode::@13/form_field_idx#60 )
  keyboard_modifiers#94 = phi( form_mode::@13/keyboard_modifiers#96 )
  keyboard_events_size#110 = phi( form_mode::@13/keyboard_events_size#114 )
  form_cursor_count#52 = phi( form_mode::@13/form_cursor_count#54 )
  print_char_cursor#71 = phi( form_mode::@13/print_char_cursor#18 )
  print_line_cursor#67 = phi( form_mode::@13/print_line_cursor#15 )
  print_screen#43 = phi( form_mode::@13/print_screen#44 )
  call form_render_values 
  to:form_mode::@15
form_mode::@15: scope:[form_mode]  from form_mode::@14
  form_field_idx#54 = phi( form_mode::@14/form_field_idx#58 )
  keyboard_modifiers#90 = phi( form_mode::@14/keyboard_modifiers#94 )
  keyboard_events_size#103 = phi( form_mode::@14/keyboard_events_size#110 )
  form_cursor_count#49 = phi( form_mode::@14/form_cursor_count#52 )
  print_char_cursor#69 = phi( form_mode::@14/print_char_cursor#71 )
  print_line_cursor#65 = phi( form_mode::@14/print_line_cursor#67 )
  print_screen#41 = phi( form_mode::@14/print_screen#43 )
  render_preset_name::idx#0 = *form_preset
  call render_preset_name 
  to:form_mode::@16
form_mode::@16: scope:[form_mode]  from form_mode::@15
  form_field_idx#51 = phi( form_mode::@15/form_field_idx#54 )
  keyboard_modifiers#85 = phi( form_mode::@15/keyboard_modifiers#90 )
  keyboard_events_size#94 = phi( form_mode::@15/keyboard_events_size#103 )
  form_cursor_count#46 = phi( form_mode::@15/form_cursor_count#49 )
  print_char_cursor#67 = phi( form_mode::@15/print_char_cursor#69 )
  print_line_cursor#63 = phi( form_mode::@15/print_line_cursor#65 )
  print_screen#39 = phi( form_mode::@15/print_screen#41 )
  *DTV_GRAPHICS_VIC_BANK = (byte)(dword)FORM_CHARSET/$10000
  *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
  *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)FORM_CHARSET/$4000
  *DTV_CONTROL = 0
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = VICII_DEN|VICII_RSEL|3
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = VICII_CSEL
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = (byte)(word)FORM_SCREEN&$3fff/$40|(word)FORM_CHARSET&$3fff/$400
  *DTV_PLANEA_START_LO = <FORM_SCREEN
  *DTV_PLANEA_START_MI = >FORM_SCREEN
  *DTV_PLANEA_START_HI = 0
  form_mode::i#0 = 0
  to:form_mode::@1
form_mode::@1: scope:[form_mode]  from form_mode::@1 form_mode::@16
  form_field_idx#47 = phi( form_mode::@1/form_field_idx#47, form_mode::@16/form_field_idx#51 )
  keyboard_modifiers#80 = phi( form_mode::@1/keyboard_modifiers#80, form_mode::@16/keyboard_modifiers#85 )
  keyboard_events_size#84 = phi( form_mode::@1/keyboard_events_size#84, form_mode::@16/keyboard_events_size#94 )
  form_cursor_count#41 = phi( form_mode::@1/form_cursor_count#41, form_mode::@16/form_cursor_count#46 )
  print_char_cursor#63 = phi( form_mode::@1/print_char_cursor#63, form_mode::@16/print_char_cursor#67 )
  print_line_cursor#58 = phi( form_mode::@1/print_line_cursor#58, form_mode::@16/print_line_cursor#63 )
  print_screen#35 = phi( form_mode::@1/print_screen#35, form_mode::@16/print_screen#39 )
  form_mode::i#2 = phi( form_mode::@1/form_mode::i#1, form_mode::@16/form_mode::i#0 )
  DTV_PALETTE[form_mode::i#2] = DTV_PALETTE_DEFAULT[form_mode::i#2]
  form_mode::i#1 = form_mode::i#2 + rangenext(0,$f)
  form_mode::$9 = form_mode::i#1 != rangelast(0,$f)
  if(form_mode::$9) goto form_mode::@1
  to:form_mode::@2
form_mode::@2: scope:[form_mode]  from form_mode::@1
  form_field_idx#39 = phi( form_mode::@1/form_field_idx#47 )
  keyboard_modifiers#62 = phi( form_mode::@1/keyboard_modifiers#80 )
  keyboard_events_size#63 = phi( form_mode::@1/keyboard_events_size#84 )
  form_cursor_count#31 = phi( form_mode::@1/form_cursor_count#41 )
  print_char_cursor#58 = phi( form_mode::@1/print_char_cursor#63 )
  print_line_cursor#51 = phi( form_mode::@1/print_line_cursor#58 )
  print_screen#30 = phi( form_mode::@1/print_screen#35 )
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0
  form_mode::preset_current#0 = *form_preset
  to:form_mode::@3
form_mode::@3: scope:[form_mode]  from form_mode::@2 form_mode::@20 form_mode::@6
  form_mode::preset_current#6 = phi( form_mode::@2/form_mode::preset_current#0, form_mode::@20/form_mode::preset_current#7, form_mode::@6/form_mode::preset_current#2 )
  form_field_idx#30 = phi( form_mode::@2/form_field_idx#39, form_mode::@20/form_field_idx#40, form_mode::@6/form_field_idx#41 )
  keyboard_modifiers#46 = phi( form_mode::@2/keyboard_modifiers#62, form_mode::@20/keyboard_modifiers#63, form_mode::@6/keyboard_modifiers#64 )
  keyboard_events_size#49 = phi( form_mode::@2/keyboard_events_size#63, form_mode::@20/keyboard_events_size#64, form_mode::@6/keyboard_events_size#65 )
  form_cursor_count#23 = phi( form_mode::@2/form_cursor_count#31, form_mode::@20/form_cursor_count#32, form_mode::@6/form_cursor_count#33 )
  print_char_cursor#51 = phi( form_mode::@2/print_char_cursor#58, form_mode::@20/print_char_cursor#59, form_mode::@6/print_char_cursor#60 )
  print_line_cursor#45 = phi( form_mode::@2/print_line_cursor#51, form_mode::@20/print_line_cursor#52, form_mode::@6/print_line_cursor#53 )
  print_screen#25 = phi( form_mode::@2/print_screen#30, form_mode::@20/print_screen#31, form_mode::@6/print_screen#32 )
  if(true) goto form_mode::@4
  to:form_mode::@return
form_mode::@4: scope:[form_mode]  from form_mode::@3 form_mode::@4
  print_char_cursor#64 = phi( form_mode::@3/print_char_cursor#51, form_mode::@4/print_char_cursor#64 )
  print_line_cursor#59 = phi( form_mode::@3/print_line_cursor#45, form_mode::@4/print_line_cursor#59 )
  print_screen#36 = phi( form_mode::@3/print_screen#25, form_mode::@4/print_screen#36 )
  form_mode::preset_current#5 = phi( form_mode::@3/form_mode::preset_current#6, form_mode::@4/form_mode::preset_current#5 )
  form_field_idx#42 = phi( form_mode::@3/form_field_idx#30, form_mode::@4/form_field_idx#42 )
  keyboard_modifiers#65 = phi( form_mode::@3/keyboard_modifiers#46, form_mode::@4/keyboard_modifiers#65 )
  keyboard_events_size#66 = phi( form_mode::@3/keyboard_events_size#49, form_mode::@4/keyboard_events_size#66 )
  form_cursor_count#34 = phi( form_mode::@3/form_cursor_count#23, form_mode::@4/form_cursor_count#34 )
  form_mode::$10 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $ff
  if(form_mode::$10) goto form_mode::@4
  to:form_mode::@5
form_mode::@5: scope:[form_mode]  from form_mode::@4
  print_char_cursor#61 = phi( form_mode::@4/print_char_cursor#64 )
  print_line_cursor#54 = phi( form_mode::@4/print_line_cursor#59 )
  print_screen#33 = phi( form_mode::@4/print_screen#36 )
  form_mode::preset_current#4 = phi( form_mode::@4/form_mode::preset_current#5 )
  form_field_idx#29 = phi( form_mode::@4/form_field_idx#42 )
  keyboard_modifiers#45 = phi( form_mode::@4/keyboard_modifiers#65 )
  keyboard_events_size#48 = phi( form_mode::@4/keyboard_events_size#66 )
  form_cursor_count#22 = phi( form_mode::@4/form_cursor_count#34 )
  call form_control 
  form_control::return#0 = form_control::return#2
  to:form_mode::@17
form_mode::@17: scope:[form_mode]  from form_mode::@5
  print_char_cursor#50 = phi( form_mode::@5/print_char_cursor#61 )
  print_line_cursor#44 = phi( form_mode::@5/print_line_cursor#54 )
  print_screen#24 = phi( form_mode::@5/print_screen#33 )
  form_mode::preset_current#3 = phi( form_mode::@5/form_mode::preset_current#4 )
  form_field_idx#14 = phi( form_mode::@5/form_field_idx#8 )
  keyboard_modifiers#28 = phi( form_mode::@5/keyboard_modifiers#14 )
  keyboard_events_size#32 = phi( form_mode::@5/keyboard_events_size#15 )
  form_cursor_count#13 = phi( form_mode::@5/form_cursor_count#7 )
  form_control::return#6 = phi( form_mode::@5/form_control::return#0 )
  form_mode::$11 = form_control::return#6
  form_cursor_count#2 = form_cursor_count#13
  keyboard_events_size#11 = keyboard_events_size#32
  keyboard_modifiers#11 = keyboard_modifiers#28
  form_field_idx#2 = form_field_idx#14
  form_mode::$12 = form_mode::$11 != 0
  form_mode::$13 = ! form_mode::$12
  if(form_mode::$13) goto form_mode::@6
  to:form_mode::@return
form_mode::@6: scope:[form_mode]  from form_mode::@17
  form_field_idx#41 = phi( form_mode::@17/form_field_idx#2 )
  keyboard_modifiers#64 = phi( form_mode::@17/keyboard_modifiers#11 )
  keyboard_events_size#65 = phi( form_mode::@17/keyboard_events_size#11 )
  form_cursor_count#33 = phi( form_mode::@17/form_cursor_count#2 )
  print_char_cursor#60 = phi( form_mode::@17/print_char_cursor#50 )
  print_line_cursor#53 = phi( form_mode::@17/print_line_cursor#44 )
  print_screen#32 = phi( form_mode::@17/print_screen#24 )
  form_mode::preset_current#2 = phi( form_mode::@17/form_mode::preset_current#3 )
  form_mode::$14 = form_mode::preset_current#2 != *form_preset
  form_mode::$15 = ! form_mode::$14
  if(form_mode::$15) goto form_mode::@3
  to:form_mode::@7
form_mode::@return: scope:[form_mode]  from form_mode::@17 form_mode::@3
  form_field_idx#15 = phi( form_mode::@17/form_field_idx#2, form_mode::@3/form_field_idx#30 )
  keyboard_modifiers#29 = phi( form_mode::@17/keyboard_modifiers#11, form_mode::@3/keyboard_modifiers#46 )
  keyboard_events_size#33 = phi( form_mode::@17/keyboard_events_size#11, form_mode::@3/keyboard_events_size#49 )
  form_cursor_count#14 = phi( form_mode::@17/form_cursor_count#2, form_mode::@3/form_cursor_count#23 )
  print_char_cursor#40 = phi( form_mode::@17/print_char_cursor#50, form_mode::@3/print_char_cursor#51 )
  print_line_cursor#35 = phi( form_mode::@17/print_line_cursor#44, form_mode::@3/print_line_cursor#45 )
  print_screen#17 = phi( form_mode::@17/print_screen#24, form_mode::@3/print_screen#25 )
  print_screen#6 = print_screen#17
  print_line_cursor#16 = print_line_cursor#35
  print_char_cursor#19 = print_char_cursor#40
  form_cursor_count#3 = form_cursor_count#14
  keyboard_events_size#12 = keyboard_events_size#33
  keyboard_modifiers#12 = keyboard_modifiers#29
  form_field_idx#3 = form_field_idx#15
  return 
  to:@return
form_mode::@7: scope:[form_mode]  from form_mode::@6
  form_field_idx#55 = phi( form_mode::@6/form_field_idx#41 )
  keyboard_modifiers#91 = phi( form_mode::@6/keyboard_modifiers#64 )
  keyboard_events_size#104 = phi( form_mode::@6/keyboard_events_size#65 )
  form_cursor_count#50 = phi( form_mode::@6/form_cursor_count#33 )
  print_char_cursor#70 = phi( form_mode::@6/print_char_cursor#60 )
  print_line_cursor#66 = phi( form_mode::@6/print_line_cursor#53 )
  print_screen#42 = phi( form_mode::@6/print_screen#32 )
  apply_preset::idx#0 = *form_preset
  call apply_preset 
  to:form_mode::@18
form_mode::@18: scope:[form_mode]  from form_mode::@7
  form_field_idx#52 = phi( form_mode::@7/form_field_idx#55 )
  keyboard_modifiers#86 = phi( form_mode::@7/keyboard_modifiers#91 )
  keyboard_events_size#95 = phi( form_mode::@7/keyboard_events_size#104 )
  form_cursor_count#47 = phi( form_mode::@7/form_cursor_count#50 )
  print_char_cursor#68 = phi( form_mode::@7/print_char_cursor#70 )
  print_line_cursor#64 = phi( form_mode::@7/print_line_cursor#66 )
  print_screen#40 = phi( form_mode::@7/print_screen#42 )
  form_mode::preset_current#1 = *form_preset
  call form_render_values 
  to:form_mode::@19
form_mode::@19: scope:[form_mode]  from form_mode::@18
  form_mode::preset_current#8 = phi( form_mode::@18/form_mode::preset_current#1 )
  form_field_idx#48 = phi( form_mode::@18/form_field_idx#52 )
  keyboard_modifiers#81 = phi( form_mode::@18/keyboard_modifiers#86 )
  keyboard_events_size#85 = phi( form_mode::@18/keyboard_events_size#95 )
  form_cursor_count#42 = phi( form_mode::@18/form_cursor_count#47 )
  print_char_cursor#65 = phi( form_mode::@18/print_char_cursor#68 )
  print_line_cursor#60 = phi( form_mode::@18/print_line_cursor#64 )
  print_screen#37 = phi( form_mode::@18/print_screen#40 )
  render_preset_name::idx#1 = *form_preset
  call render_preset_name 
  to:form_mode::@20
form_mode::@20: scope:[form_mode]  from form_mode::@19
  form_mode::preset_current#7 = phi( form_mode::@19/form_mode::preset_current#8 )
  form_field_idx#40 = phi( form_mode::@19/form_field_idx#48 )
  keyboard_modifiers#63 = phi( form_mode::@19/keyboard_modifiers#81 )
  keyboard_events_size#64 = phi( form_mode::@19/keyboard_events_size#85 )
  form_cursor_count#32 = phi( form_mode::@19/form_cursor_count#42 )
  print_char_cursor#59 = phi( form_mode::@19/print_char_cursor#65 )
  print_line_cursor#52 = phi( form_mode::@19/print_line_cursor#60 )
  print_screen#31 = phi( form_mode::@19/print_screen#37 )
  to:form_mode::@3

void form_set_screen(byte* form_set_screen::screen)
form_set_screen: scope:[form_set_screen]  from form_mode::@13
  form_set_screen::screen#1 = phi( form_mode::@13/form_set_screen::screen#0 )
  form_set_screen::line#0 = form_set_screen::screen#1
  form_set_screen::y#0 = 0
  to:form_set_screen::@1
form_set_screen::@1: scope:[form_set_screen]  from form_set_screen form_set_screen::@1
  form_set_screen::y#2 = phi( form_set_screen/form_set_screen::y#0, form_set_screen::@1/form_set_screen::y#1 )
  form_set_screen::line#2 = phi( form_set_screen/form_set_screen::line#0, form_set_screen::@1/form_set_screen::line#1 )
  form_set_screen::$0 = < form_set_screen::line#2
  form_line_lo[form_set_screen::y#2] = form_set_screen::$0
  form_set_screen::$1 = > form_set_screen::line#2
  form_line_hi[form_set_screen::y#2] = form_set_screen::$1
  form_set_screen::$2 = form_set_screen::line#2 + $28
  form_set_screen::line#1 = form_set_screen::$2
  form_set_screen::y#1 = form_set_screen::y#2 + rangenext(0,$18)
  form_set_screen::$3 = form_set_screen::y#1 != rangelast(0,$18)
  if(form_set_screen::$3) goto form_set_screen::@1
  to:form_set_screen::@return
form_set_screen::@return: scope:[form_set_screen]  from form_set_screen::@1
  return 
  to:@return

byte* form_field_ptr(byte form_field_ptr::field_idx)
form_field_ptr: scope:[form_field_ptr]  from form_control form_render_values::@2
  form_field_ptr::field_idx#2 = phi( form_control/form_field_ptr::field_idx#1, form_render_values::@2/form_field_ptr::field_idx#0 )
  form_field_ptr::y#0 = form_fields_y[form_field_ptr::field_idx#2]
  form_field_ptr::line#0 = (byte*){ form_line_hi[form_field_ptr::y#0], form_line_lo[form_field_ptr::y#0] }
  form_field_ptr::x#0 = form_fields_x[form_field_ptr::field_idx#2]
  form_field_ptr::$0 = form_field_ptr::line#0 + form_field_ptr::x#0
  form_field_ptr::field#0 = form_field_ptr::$0
  form_field_ptr::return#0 = form_field_ptr::field#0
  to:form_field_ptr::@return
form_field_ptr::@return: scope:[form_field_ptr]  from form_field_ptr
  form_field_ptr::return#4 = phi( form_field_ptr/form_field_ptr::return#0 )
  form_field_ptr::return#1 = form_field_ptr::return#4
  return 
  to:@return

void form_render_values()
form_render_values: scope:[form_render_values]  from form_mode::@14 form_mode::@18
  form_render_values::idx#0 = 0
  to:form_render_values::@1
form_render_values::@1: scope:[form_render_values]  from form_render_values form_render_values::@3
  form_render_values::idx#2 = phi( form_render_values/form_render_values::idx#0, form_render_values::@3/form_render_values::idx#1 )
  form_render_values::$0 = form_render_values::idx#2 < form_fields_cnt
  if(form_render_values::$0) goto form_render_values::@2
  to:form_render_values::@return
form_render_values::@2: scope:[form_render_values]  from form_render_values::@1
  form_render_values::idx#3 = phi( form_render_values::@1/form_render_values::idx#2 )
  form_field_ptr::field_idx#0 = form_render_values::idx#3
  call form_field_ptr 
  form_field_ptr::return#2 = form_field_ptr::return#1
  to:form_render_values::@3
form_render_values::@3: scope:[form_render_values]  from form_render_values::@2
  form_render_values::idx#4 = phi( form_render_values::@2/form_render_values::idx#3 )
  form_field_ptr::return#5 = phi( form_render_values::@2/form_field_ptr::return#2 )
  form_render_values::$1 = form_field_ptr::return#5
  form_render_values::field#0 = form_render_values::$1
  *form_render_values::field#0 = print_hextab[form_fields_val[form_render_values::idx#4]]
  form_render_values::idx#1 = ++ form_render_values::idx#4
  to:form_render_values::@1
form_render_values::@return: scope:[form_render_values]  from form_render_values::@1
  return 
  to:@return

byte form_control()
form_control: scope:[form_control]  from form_mode::@5
  keyboard_modifiers#92 = phi( form_mode::@5/keyboard_modifiers#45 )
  keyboard_events_size#105 = phi( form_mode::@5/keyboard_events_size#48 )
  form_cursor_count#24 = phi( form_mode::@5/form_cursor_count#22 )
  form_field_idx#16 = phi( form_mode::@5/form_field_idx#29 )
  form_field_ptr::field_idx#1 = form_field_idx#16
  call form_field_ptr 
  form_field_ptr::return#3 = form_field_ptr::return#1
  to:form_control::@22
form_control::@22: scope:[form_control]  from form_control
  form_field_idx#61 = phi( form_control/form_field_idx#16 )
  keyboard_modifiers#87 = phi( form_control/keyboard_modifiers#92 )
  keyboard_events_size#96 = phi( form_control/keyboard_events_size#105 )
  form_cursor_count#15 = phi( form_control/form_cursor_count#24 )
  form_field_ptr::return#6 = phi( form_control/form_field_ptr::return#3 )
  form_control::$0 = form_field_ptr::return#6
  form_control::field#0 = form_control::$0
  form_cursor_count#4 = -- form_cursor_count#15
  form_control::$1 = form_cursor_count#4 < 0
  form_control::$2 = ! form_control::$1
  if(form_control::$2) goto form_control::@1
  to:form_control::@7
form_control::@1: scope:[form_control]  from form_control::@22 form_control::@7
  form_field_idx#59 = phi( form_control::@22/form_field_idx#61, form_control::@7/form_field_idx#62 )
  keyboard_modifiers#82 = phi( form_control::@22/keyboard_modifiers#87, form_control::@7/keyboard_modifiers#88 )
  keyboard_events_size#86 = phi( form_control::@22/keyboard_events_size#96, form_control::@7/keyboard_events_size#97 )
  form_control::field#5 = phi( form_control::@22/form_control::field#0, form_control::@7/form_control::field#11 )
  form_cursor_count#16 = phi( form_control::@22/form_cursor_count#4, form_control::@7/form_cursor_count#5 )
  form_control::$3 = form_cursor_count#16 < FORM_CURSOR_BLINK/2
  if(form_control::$3) goto form_control::@2
  to:form_control::@8
form_control::@7: scope:[form_control]  from form_control::@22
  form_field_idx#62 = phi( form_control::@22/form_field_idx#61 )
  keyboard_modifiers#88 = phi( form_control::@22/keyboard_modifiers#87 )
  keyboard_events_size#97 = phi( form_control::@22/keyboard_events_size#96 )
  form_control::field#11 = phi( form_control::@22/form_control::field#0 )
  form_cursor_count#5 = FORM_CURSOR_BLINK
  to:form_control::@1
form_control::@2: scope:[form_control]  from form_control::@1
  form_cursor_count#55 = phi( form_control::@1/form_cursor_count#16 )
  form_field_idx#56 = phi( form_control::@1/form_field_idx#59 )
  keyboard_modifiers#66 = phi( form_control::@1/keyboard_modifiers#82 )
  keyboard_events_size#67 = phi( form_control::@1/keyboard_events_size#86 )
  form_control::field#1 = phi( form_control::@1/form_control::field#5 )
  form_control::$13 = *form_control::field#1 | $80
  *form_control::field#1 = form_control::$13
  to:form_control::@3
form_control::@8: scope:[form_control]  from form_control::@1
  form_cursor_count#56 = phi( form_control::@1/form_cursor_count#16 )
  form_field_idx#57 = phi( form_control::@1/form_field_idx#59 )
  keyboard_modifiers#67 = phi( form_control::@1/keyboard_modifiers#82 )
  keyboard_events_size#68 = phi( form_control::@1/keyboard_events_size#86 )
  form_control::field#2 = phi( form_control::@1/form_control::field#5 )
  form_control::$12 = *form_control::field#2 & $7f
  *form_control::field#2 = form_control::$12
  to:form_control::@3
form_control::@3: scope:[form_control]  from form_control::@2 form_control::@8
  form_cursor_count#53 = phi( form_control::@2/form_cursor_count#55, form_control::@8/form_cursor_count#56 )
  form_field_idx#53 = phi( form_control::@2/form_field_idx#56, form_control::@8/form_field_idx#57 )
  form_control::field#14 = phi( form_control::@2/form_control::field#1, form_control::@8/form_control::field#2 )
  keyboard_modifiers#47 = phi( form_control::@2/keyboard_modifiers#66, form_control::@8/keyboard_modifiers#67 )
  keyboard_events_size#50 = phi( form_control::@2/keyboard_events_size#67, form_control::@8/keyboard_events_size#68 )
  call keyboard_event_scan 
  to:form_control::@23
form_control::@23: scope:[form_control]  from form_control::@3
  form_cursor_count#51 = phi( form_control::@3/form_cursor_count#53 )
  form_field_idx#49 = phi( form_control::@3/form_field_idx#53 )
  form_control::field#12 = phi( form_control::@3/form_control::field#14 )
  keyboard_modifiers#30 = phi( form_control::@3/keyboard_modifiers#5 )
  keyboard_events_size#34 = phi( form_control::@3/keyboard_events_size#2 )
  keyboard_events_size#13 = keyboard_events_size#34
  keyboard_modifiers#13 = keyboard_modifiers#30
  call keyboard_event_get 
  keyboard_event_get::return#4 = keyboard_event_get::return#2
  to:form_control::@24
form_control::@24: scope:[form_control]  from form_control::@23
  form_cursor_count#48 = phi( form_control::@23/form_cursor_count#51 )
  form_field_idx#43 = phi( form_control::@23/form_field_idx#49 )
  keyboard_modifiers#48 = phi( form_control::@23/keyboard_modifiers#13 )
  form_control::field#6 = phi( form_control::@23/form_control::field#12 )
  keyboard_events_size#35 = phi( form_control::@23/keyboard_events_size#4 )
  keyboard_event_get::return#7 = phi( form_control::@23/keyboard_event_get::return#4 )
  form_control::$5 = keyboard_event_get::return#7
  keyboard_events_size#14 = keyboard_events_size#35
  form_control::key_event#0 = form_control::$5
  form_control::$6 = form_control::key_event#0 == KEY_CRSR_DOWN
  form_control::$7 = ! form_control::$6
  if(form_control::$7) goto form_control::@4
  to:form_control::@9
form_control::@4: scope:[form_control]  from form_control::@24
  form_control::field#15 = phi( form_control::@24/form_control::field#6 )
  keyboard_events_size#88 = phi( form_control::@24/keyboard_events_size#14 )
  form_cursor_count#43 = phi( form_control::@24/form_cursor_count#48 )
  form_field_idx#44 = phi( form_control::@24/form_field_idx#43 )
  keyboard_modifiers#53 = phi( form_control::@24/keyboard_modifiers#48 )
  form_control::key_event#1 = phi( form_control::@24/form_control::key_event#0 )
  form_control::$8 = form_control::key_event#1 == KEY_CRSR_RIGHT
  form_control::$9 = ! form_control::$8
  if(form_control::$9) goto form_control::@5
  to:form_control::@12
form_control::@9: scope:[form_control]  from form_control::@24
  keyboard_events_size#87 = phi( form_control::@24/keyboard_events_size#14 )
  form_field_idx#31 = phi( form_control::@24/form_field_idx#43 )
  keyboard_modifiers#31 = phi( form_control::@24/keyboard_modifiers#48 )
  form_control::field#3 = phi( form_control::@24/form_control::field#6 )
  form_control::$14 = *form_control::field#3 & $7f
  *form_control::field#3 = form_control::$14
  form_control::$15 = keyboard_modifiers#31 & KEY_MODIFIER_SHIFT
  form_control::$16 = form_control::$15 == 0
  if(form_control::$16) goto form_control::@16
  to:form_control::@10
form_control::@16: scope:[form_control]  from form_control::@9
  keyboard_modifiers#70 = phi( form_control::@9/keyboard_modifiers#31 )
  keyboard_events_size#71 = phi( form_control::@9/keyboard_events_size#87 )
  form_field_idx#17 = phi( form_control::@9/form_field_idx#31 )
  form_field_idx#4 = ++ form_field_idx#17
  form_control::$20 = form_field_idx#4 == form_fields_cnt
  form_control::$21 = ! form_control::$20
  if(form_control::$21) goto form_control::@17
  to:form_control::@18
form_control::@10: scope:[form_control]  from form_control::@9
  keyboard_modifiers#68 = phi( form_control::@9/keyboard_modifiers#31 )
  keyboard_events_size#69 = phi( form_control::@9/keyboard_events_size#87 )
  form_field_idx#18 = phi( form_control::@9/form_field_idx#31 )
  form_field_idx#5 = -- form_field_idx#18
  form_control::$17 = form_field_idx#5 == $ff
  form_control::$18 = ! form_control::$17
  if(form_control::$18) goto form_control::@17
  to:form_control::@11
form_control::@11: scope:[form_control]  from form_control::@10
  keyboard_modifiers#69 = phi( form_control::@10/keyboard_modifiers#68 )
  keyboard_events_size#70 = phi( form_control::@10/keyboard_events_size#69 )
  form_control::$19 = form_fields_cnt - 1
  form_field_idx#6 = form_control::$19
  to:form_control::@17
form_control::@17: scope:[form_control]  from form_control::@10 form_control::@11 form_control::@16 form_control::@18
  form_field_idx#33 = phi( form_control::@10/form_field_idx#5, form_control::@11/form_field_idx#6, form_control::@16/form_field_idx#4, form_control::@18/form_field_idx#7 )
  keyboard_modifiers#50 = phi( form_control::@10/keyboard_modifiers#68, form_control::@11/keyboard_modifiers#69, form_control::@16/keyboard_modifiers#70, form_control::@18/keyboard_modifiers#71 )
  keyboard_events_size#52 = phi( form_control::@10/keyboard_events_size#69, form_control::@11/keyboard_events_size#70, form_control::@16/keyboard_events_size#71, form_control::@18/keyboard_events_size#72 )
  form_cursor_count#6 = FORM_CURSOR_BLINK/2
  form_control::return#1 = 0
  to:form_control::@return
form_control::@18: scope:[form_control]  from form_control::@16
  keyboard_modifiers#71 = phi( form_control::@16/keyboard_modifiers#70 )
  keyboard_events_size#72 = phi( form_control::@16/keyboard_events_size#71 )
  form_field_idx#7 = 0
  to:form_control::@17
form_control::@return: scope:[form_control]  from form_control::@15 form_control::@17 form_control::@20 form_control::@6
  form_field_idx#19 = phi( form_control::@15/form_field_idx#32, form_control::@17/form_field_idx#33, form_control::@20/form_field_idx#23, form_control::@6/form_field_idx#34 )
  keyboard_modifiers#32 = phi( form_control::@15/keyboard_modifiers#49, form_control::@17/keyboard_modifiers#50, form_control::@20/keyboard_modifiers#51, form_control::@6/keyboard_modifiers#52 )
  keyboard_events_size#36 = phi( form_control::@15/keyboard_events_size#51, form_control::@17/keyboard_events_size#52, form_control::@20/keyboard_events_size#53, form_control::@6/keyboard_events_size#54 )
  form_cursor_count#17 = phi( form_control::@15/form_cursor_count#25, form_control::@17/form_cursor_count#6, form_control::@20/form_cursor_count#26, form_control::@6/form_cursor_count#27 )
  form_control::return#7 = phi( form_control::@15/form_control::return#5, form_control::@17/form_control::return#1, form_control::@20/form_control::return#3, form_control::@6/form_control::return#4 )
  form_control::return#2 = form_control::return#7
  form_cursor_count#7 = form_cursor_count#17
  keyboard_events_size#15 = keyboard_events_size#36
  keyboard_modifiers#14 = keyboard_modifiers#32
  form_field_idx#8 = form_field_idx#19
  return 
  to:@return
form_control::@5: scope:[form_control]  from form_control::@4
  form_field_idx#45 = phi( form_control::@4/form_field_idx#44 )
  keyboard_modifiers#76 = phi( form_control::@4/keyboard_modifiers#53 )
  keyboard_events_size#77 = phi( form_control::@4/keyboard_events_size#88 )
  form_cursor_count#39 = phi( form_control::@4/form_cursor_count#43 )
  form_control::key_event#2 = phi( form_control::@4/form_control::key_event#1 )
  form_control::$10 = form_control::key_event#2 == KEY_SPACE
  form_control::$11 = ! form_control::$10
  if(form_control::$11) goto form_control::@6
  to:form_control::@15
form_control::@12: scope:[form_control]  from form_control::@4
  keyboard_events_size#89 = phi( form_control::@4/keyboard_events_size#88 )
  form_cursor_count#44 = phi( form_control::@4/form_cursor_count#43 )
  form_control::field#13 = phi( form_control::@4/form_control::field#15 )
  form_field_idx#35 = phi( form_control::@4/form_field_idx#44 )
  keyboard_modifiers#33 = phi( form_control::@4/keyboard_modifiers#53 )
  form_control::$22 = keyboard_modifiers#33 & KEY_MODIFIER_SHIFT
  form_control::$23 = form_control::$22 == 0
  if(form_control::$23) goto form_control::@19
  to:form_control::@13
form_control::@19: scope:[form_control]  from form_control::@12
  keyboard_modifiers#74 = phi( form_control::@12/keyboard_modifiers#33 )
  keyboard_events_size#75 = phi( form_control::@12/keyboard_events_size#89 )
  form_cursor_count#37 = phi( form_control::@12/form_cursor_count#44 )
  form_control::field#9 = phi( form_control::@12/form_control::field#13 )
  form_field_idx#20 = phi( form_control::@12/form_field_idx#35 )
  form_fields_val[form_field_idx#20] = ++ form_fields_val[form_field_idx#20]
  form_control::$26 = form_fields_val[form_field_idx#20] > form_fields_max[form_field_idx#20]
  form_control::$27 = ! form_control::$26
  if(form_control::$27) goto form_control::@20
  to:form_control::@21
form_control::@13: scope:[form_control]  from form_control::@12
  keyboard_modifiers#72 = phi( form_control::@12/keyboard_modifiers#33 )
  keyboard_events_size#73 = phi( form_control::@12/keyboard_events_size#89 )
  form_cursor_count#35 = phi( form_control::@12/form_cursor_count#44 )
  form_control::field#7 = phi( form_control::@12/form_control::field#13 )
  form_field_idx#21 = phi( form_control::@12/form_field_idx#35 )
  form_fields_val[form_field_idx#21] = -- form_fields_val[form_field_idx#21]
  form_control::$24 = form_fields_val[form_field_idx#21] == $ff
  form_control::$25 = ! form_control::$24
  if(form_control::$25) goto form_control::@20
  to:form_control::@14
form_control::@14: scope:[form_control]  from form_control::@13
  keyboard_modifiers#73 = phi( form_control::@13/keyboard_modifiers#72 )
  keyboard_events_size#74 = phi( form_control::@13/keyboard_events_size#73 )
  form_cursor_count#36 = phi( form_control::@13/form_cursor_count#35 )
  form_control::field#8 = phi( form_control::@13/form_control::field#7 )
  form_field_idx#22 = phi( form_control::@13/form_field_idx#21 )
  form_fields_val[form_field_idx#22] = form_fields_max[form_field_idx#22]
  to:form_control::@20
form_control::@20: scope:[form_control]  from form_control::@13 form_control::@14 form_control::@19 form_control::@21
  keyboard_modifiers#51 = phi( form_control::@13/keyboard_modifiers#72, form_control::@14/keyboard_modifiers#73, form_control::@19/keyboard_modifiers#74, form_control::@21/keyboard_modifiers#75 )
  keyboard_events_size#53 = phi( form_control::@13/keyboard_events_size#73, form_control::@14/keyboard_events_size#74, form_control::@19/keyboard_events_size#75, form_control::@21/keyboard_events_size#76 )
  form_cursor_count#26 = phi( form_control::@13/form_cursor_count#35, form_control::@14/form_cursor_count#36, form_control::@19/form_cursor_count#37, form_control::@21/form_cursor_count#38 )
  form_control::field#4 = phi( form_control::@13/form_control::field#7, form_control::@14/form_control::field#8, form_control::@19/form_control::field#9, form_control::@21/form_control::field#10 )
  form_field_idx#23 = phi( form_control::@13/form_field_idx#21, form_control::@14/form_field_idx#22, form_control::@19/form_field_idx#20, form_control::@21/form_field_idx#24 )
  *form_control::field#4 = print_hextab[form_fields_val[form_field_idx#23]]
  form_control::return#3 = 0
  to:form_control::@return
form_control::@21: scope:[form_control]  from form_control::@19
  keyboard_modifiers#75 = phi( form_control::@19/keyboard_modifiers#74 )
  keyboard_events_size#76 = phi( form_control::@19/keyboard_events_size#75 )
  form_cursor_count#38 = phi( form_control::@19/form_cursor_count#37 )
  form_control::field#10 = phi( form_control::@19/form_control::field#9 )
  form_field_idx#24 = phi( form_control::@19/form_field_idx#20 )
  form_fields_val[form_field_idx#24] = 0
  to:form_control::@20
form_control::@6: scope:[form_control]  from form_control::@5
  form_field_idx#34 = phi( form_control::@5/form_field_idx#45 )
  keyboard_modifiers#52 = phi( form_control::@5/keyboard_modifiers#76 )
  keyboard_events_size#54 = phi( form_control::@5/keyboard_events_size#77 )
  form_cursor_count#27 = phi( form_control::@5/form_cursor_count#39 )
  form_control::return#4 = 0
  to:form_control::@return
form_control::@15: scope:[form_control]  from form_control::@5
  form_field_idx#32 = phi( form_control::@5/form_field_idx#45 )
  keyboard_modifiers#49 = phi( form_control::@5/keyboard_modifiers#76 )
  keyboard_events_size#51 = phi( form_control::@5/keyboard_events_size#77 )
  form_cursor_count#25 = phi( form_control::@5/form_cursor_count#39 )
  form_control::return#5 = $ff
  to:form_control::@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  print_screen#7 = (byte*)$400
  print_line_cursor#17 = print_screen#7
  print_char_cursor#20 = print_line_cursor#17
  keyboard_events_size#16 = 0
  keyboard_modifiers#15 = 0
  bitmap_screen#8 = (byte*) 0
  bitmap_gfx#8 = (byte*) 0
  form_field_idx#9 = 0
  form_cursor_count#8 = (signed byte)FORM_CURSOR_BLINK/2
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  form_field_idx#36 = phi( __start::__init1/form_field_idx#9 )
  keyboard_modifiers#54 = phi( __start::__init1/keyboard_modifiers#15 )
  keyboard_events_size#55 = phi( __start::__init1/keyboard_events_size#16 )
  form_cursor_count#28 = phi( __start::__init1/form_cursor_count#8 )
  print_char_cursor#52 = phi( __start::__init1/print_char_cursor#20 )
  print_line_cursor#46 = phi( __start::__init1/print_line_cursor#17 )
  print_screen#26 = phi( __start::__init1/print_screen#7 )
  bitmap_screen#28 = phi( __start::__init1/bitmap_screen#8 )
  bitmap_gfx#29 = phi( __start::__init1/bitmap_gfx#8 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  form_field_idx#25 = phi( __start::@1/form_field_idx#1 )
  keyboard_modifiers#34 = phi( __start::@1/keyboard_modifiers#8 )
  keyboard_events_size#37 = phi( __start::@1/keyboard_events_size#7 )
  form_cursor_count#18 = phi( __start::@1/form_cursor_count#1 )
  print_char_cursor#41 = phi( __start::@1/print_char_cursor#12 )
  print_line_cursor#36 = phi( __start::@1/print_line_cursor#9 )
  print_screen#18 = phi( __start::@1/print_screen#3 )
  bitmap_screen#19 = phi( __start::@1/bitmap_screen#3 )
  bitmap_gfx#19 = phi( __start::@1/bitmap_gfx#3 )
  bitmap_gfx#9 = bitmap_gfx#19
  bitmap_screen#9 = bitmap_screen#19
  print_screen#8 = print_screen#18
  print_line_cursor#18 = print_line_cursor#36
  print_char_cursor#21 = print_char_cursor#41
  form_cursor_count#9 = form_cursor_count#18
  keyboard_events_size#17 = keyboard_events_size#37
  keyboard_modifiers#16 = keyboard_modifiers#34
  form_field_idx#10 = form_field_idx#25
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  form_cursor_count#19 = phi( __start::@2/form_cursor_count#9 )
  form_field_idx#26 = phi( __start::@2/form_field_idx#10 )
  bitmap_gfx#20 = phi( __start::@2/bitmap_gfx#9 )
  bitmap_screen#20 = phi( __start::@2/bitmap_screen#9 )
  keyboard_modifiers#35 = phi( __start::@2/keyboard_modifiers#16 )
  keyboard_events_size#38 = phi( __start::@2/keyboard_events_size#17 )
  print_char_cursor#42 = phi( __start::@2/print_char_cursor#21 )
  print_line_cursor#37 = phi( __start::@2/print_line_cursor#18 )
  print_screen#19 = phi( __start::@2/print_screen#8 )
  print_screen#9 = print_screen#19
  print_line_cursor#19 = print_line_cursor#37
  print_char_cursor#22 = print_char_cursor#42
  keyboard_events_size#18 = keyboard_events_size#38
  keyboard_modifiers#17 = keyboard_modifiers#35
  bitmap_screen#10 = bitmap_screen#20
  bitmap_gfx#10 = bitmap_gfx#20
  form_field_idx#11 = form_field_idx#26
  form_cursor_count#10 = form_cursor_count#19
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte BLACK = 0
const nomodify byte* CHARGEN = (byte*)$d000
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*)$dc00
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*)$dd00
const nomodify byte* COLS = (byte*)$d800
const nomodify byte DTV_BORDER_OFF = 2
const nomodify byte DTV_CHUNKY = $40
const nomodify byte DTV_COLORRAM_OFF = $10
const nomodify dword DTV_COLOR_BANK_DEFAULT = $1d800
const nomodify byte* DTV_COLOR_BANK_HI = (byte*)$d037
const nomodify byte* DTV_COLOR_BANK_LO = (byte*)$d036
const nomodify byte* DTV_CONTROL = (byte*)$d03c
const nomodify byte* DTV_FEATURE = (byte*)$d03f
const nomodify byte DTV_FEATURE_ENABLE = 1
const nomodify byte* DTV_GRAPHICS_VIC_BANK = (byte*)$d03d
const nomodify byte DTV_HIGHCOLOR = 4
const nomodify byte DTV_LINEAR = 1
const nomodify byte DTV_OVERSCAN = 8
const nomodify byte* DTV_PALETTE = (byte*)$d200
const byte* DTV_PALETTE_DEFAULT[$10]  = { 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a }
const nomodify byte* DTV_PLANEA_MODULO_HI = (byte*)$d039
const nomodify byte* DTV_PLANEA_MODULO_LO = (byte*)$d038
const nomodify byte* DTV_PLANEA_START_HI = (byte*)$d045
const nomodify byte* DTV_PLANEA_START_LO = (byte*)$d03a
const nomodify byte* DTV_PLANEA_START_MI = (byte*)$d03b
const nomodify byte* DTV_PLANEA_STEP = (byte*)$d046
const nomodify byte* DTV_PLANEB_MODULO_HI = (byte*)$d048
const nomodify byte* DTV_PLANEB_MODULO_LO = (byte*)$d047
const nomodify byte* DTV_PLANEB_START_HI = (byte*)$d04b
const nomodify byte* DTV_PLANEB_START_LO = (byte*)$d049
const nomodify byte* DTV_PLANEB_START_MI = (byte*)$d04a
const nomodify byte* DTV_PLANEB_STEP = (byte*)$d04c
const nomodify byte* FORM_CHARSET = (byte*)$1800
const byte* FORM_COLS[]  = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
const nomodify signed byte FORM_CURSOR_BLINK = $28
const nomodify byte* FORM_SCREEN = (byte*)$400
const byte* FORM_TEXT[]  = " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
const nomodify byte KEY_COMMODORE = $3d
const nomodify byte KEY_CRSR_DOWN = 7
const nomodify byte KEY_CRSR_RIGHT = 2
const nomodify byte KEY_CTRL = $3a
const nomodify byte KEY_LSHIFT = $f
const nomodify byte KEY_MODIFIER_COMMODORE = 8
const nomodify byte KEY_MODIFIER_CTRL = 4
const nomodify byte KEY_MODIFIER_LSHIFT = 1
const nomodify byte KEY_MODIFIER_RSHIFT = 2
const nomodify byte KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
const nomodify byte KEY_RSHIFT = $34
const nomodify byte KEY_SPACE = $3c
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A = 0
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR = 3
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1 = $22
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2 = $23
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3 = $24
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
const byte OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const nomodify dword PLANE_8BPP_CHUNKY = $20000
const nomodify dword PLANE_BLANK = $38000
const nomodify dword PLANE_CHARSET8 = $3c000
const nomodify dword PLANE_FULL = $3a000
const nomodify dword PLANE_HORISONTAL = $30000
const nomodify dword PLANE_HORISONTAL2 = $34000
const nomodify dword PLANE_VERTICAL = $32000
const nomodify dword PLANE_VERTICAL2 = $36000
const nomodify byte* PROCPORT = (byte*)1
const nomodify byte* PROCPORT_DDR = (byte*)0
const nomodify byte PROCPORT_DDR_MEMORY_MASK = 7
const nomodify byte PROCPORT_RAM_CHARROM = 1
const nomodify byte PROCPORT_RAM_IO = 5
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*)$d000
const nomodify byte* VICII_BITMAP = (byte*)$6000
const nomodify byte VICII_BMM = $20
const nomodify byte* VICII_CHARSET_ROM = (byte*)$5800
const nomodify byte* VICII_CONTROL1 = (byte*)$d011
const nomodify byte* VICII_CONTROL2 = (byte*)$d016
const nomodify byte VICII_CSEL = 8
const nomodify byte VICII_DEN = $10
const nomodify byte VICII_ECM = $40
const nomodify byte VICII_MCM = $10
const nomodify byte* VICII_MEMORY = (byte*)$d018
const nomodify byte VICII_RSEL = 8
const nomodify byte* VICII_SCREEN0 = (byte*)$4000
const nomodify byte* VICII_SCREEN1 = (byte*)$4400
const nomodify byte* VICII_SCREEN2 = (byte*)$4800
const nomodify byte* VICII_SCREEN3 = (byte*)$4c00
const nomodify byte* VICII_SCREEN4 = (byte*)$5000
const nomodify byte WHITE = 1
void __start()
word abs_u16(word abs_u16::w)
byte~ abs_u16::$0
number~ abs_u16::$1
word~ abs_u16::$2
bool~ abs_u16::$3
word abs_u16::return
word abs_u16::return#0
word abs_u16::return#1
word abs_u16::return#2
word abs_u16::return#3
word abs_u16::return#4
word abs_u16::return#5
word abs_u16::return#6
word abs_u16::return#7
word abs_u16::w
word abs_u16::w#0
word abs_u16::w#1
word abs_u16::w#2
word abs_u16::w#3
word abs_u16::w#4
void apply_preset(byte apply_preset::idx)
bool~ apply_preset::$0
bool~ apply_preset::$1
bool~ apply_preset::$10
bool~ apply_preset::$11
bool~ apply_preset::$2
bool~ apply_preset::$3
bool~ apply_preset::$4
bool~ apply_preset::$5
bool~ apply_preset::$6
bool~ apply_preset::$7
bool~ apply_preset::$8
bool~ apply_preset::$9
byte apply_preset::i
byte apply_preset::i#0
byte apply_preset::i#1
byte apply_preset::i#2
byte apply_preset::i#3
byte apply_preset::idx
byte apply_preset::idx#0
byte apply_preset::idx#1
byte apply_preset::idx#10
byte apply_preset::idx#11
byte apply_preset::idx#2
byte apply_preset::idx#3
byte apply_preset::idx#4
byte apply_preset::idx#5
byte apply_preset::idx#6
byte apply_preset::idx#7
byte apply_preset::idx#8
byte apply_preset::idx#9
byte* apply_preset::preset
byte* apply_preset::preset#0
byte* apply_preset::preset#1
byte* apply_preset::preset#10
byte* apply_preset::preset#11
byte* apply_preset::preset#12
byte* apply_preset::preset#13
byte* apply_preset::preset#14
byte* apply_preset::preset#15
byte* apply_preset::preset#2
byte* apply_preset::preset#3
byte* apply_preset::preset#4
byte* apply_preset::preset#5
byte* apply_preset::preset#6
byte* apply_preset::preset#7
byte* apply_preset::preset#8
byte* apply_preset::preset#9
void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
number~ bitmap_clear::$0
number~ bitmap_clear::$1
byte bitmap_clear::bgcol
byte bitmap_clear::bgcol#0
byte bitmap_clear::bgcol#1
byte bitmap_clear::col
byte bitmap_clear::col#0
byte bitmap_clear::fgcol
byte bitmap_clear::fgcol#0
byte bitmap_clear::fgcol#1
byte* bitmap_gfx
byte* bitmap_gfx#0
byte* bitmap_gfx#1
byte* bitmap_gfx#10
byte* bitmap_gfx#11
byte* bitmap_gfx#12
byte* bitmap_gfx#13
byte* bitmap_gfx#14
byte* bitmap_gfx#15
byte* bitmap_gfx#16
byte* bitmap_gfx#17
byte* bitmap_gfx#18
byte* bitmap_gfx#19
byte* bitmap_gfx#2
byte* bitmap_gfx#20
byte* bitmap_gfx#21
byte* bitmap_gfx#22
byte* bitmap_gfx#23
byte* bitmap_gfx#24
byte* bitmap_gfx#25
byte* bitmap_gfx#26
byte* bitmap_gfx#27
byte* bitmap_gfx#28
byte* bitmap_gfx#29
byte* bitmap_gfx#3
byte* bitmap_gfx#30
byte* bitmap_gfx#31
byte* bitmap_gfx#32
byte* bitmap_gfx#33
byte* bitmap_gfx#34
byte* bitmap_gfx#35
byte* bitmap_gfx#36
byte* bitmap_gfx#37
byte* bitmap_gfx#38
byte* bitmap_gfx#39
byte* bitmap_gfx#4
byte* bitmap_gfx#40
byte* bitmap_gfx#41
byte* bitmap_gfx#42
byte* bitmap_gfx#43
byte* bitmap_gfx#44
byte* bitmap_gfx#45
byte* bitmap_gfx#46
byte* bitmap_gfx#47
byte* bitmap_gfx#48
byte* bitmap_gfx#49
byte* bitmap_gfx#5
byte* bitmap_gfx#50
byte* bitmap_gfx#51
byte* bitmap_gfx#52
byte* bitmap_gfx#53
byte* bitmap_gfx#54
byte* bitmap_gfx#55
byte* bitmap_gfx#6
byte* bitmap_gfx#7
byte* bitmap_gfx#8
byte* bitmap_gfx#9
void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
bool~ bitmap_init::$0
bool~ bitmap_init::$1
byte*~ bitmap_init::$10
bool~ bitmap_init::$11
bool~ bitmap_init::$2
number~ bitmap_init::$3
byte~ bitmap_init::$4
number~ bitmap_init::$5
byte~ bitmap_init::$6
number~ bitmap_init::$7
bool~ bitmap_init::$8
bool~ bitmap_init::$9
byte bitmap_init::bits
byte bitmap_init::bits#0
byte bitmap_init::bits#1
byte bitmap_init::bits#2
byte bitmap_init::bits#3
byte bitmap_init::bits#4
byte* bitmap_init::gfx
byte* bitmap_init::gfx#0
byte* bitmap_init::gfx#1
byte* bitmap_init::gfx#2
byte* bitmap_init::gfx#3
byte* bitmap_init::gfx#4
byte* bitmap_init::gfx#5
byte* bitmap_init::screen
byte* bitmap_init::screen#0
byte* bitmap_init::screen#1
byte bitmap_init::x
byte bitmap_init::x#0
byte bitmap_init::x#1
byte bitmap_init::x#2
byte bitmap_init::x#3
byte bitmap_init::x#4
byte bitmap_init::y
byte bitmap_init::y#0
byte bitmap_init::y#1
byte bitmap_init::y#2
byte bitmap_init::y#3
byte bitmap_init::y#4
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#0
byte* bitmap_init::yoffs#1
byte* bitmap_init::yoffs#2
byte* bitmap_init::yoffs#3
byte* bitmap_init::yoffs#4
void bitmap_line(word bitmap_line::x1 , word bitmap_line::y1 , word bitmap_line::x2 , word bitmap_line::y2)
word~ bitmap_line::$0
word~ bitmap_line::$1
word~ bitmap_line::$10
word~ bitmap_line::$11
bool~ bitmap_line::$12
number~ bitmap_line::$15
bool~ bitmap_line::$17
bool~ bitmap_line::$18
bool~ bitmap_line::$19
word~ bitmap_line::$2
number~ bitmap_line::$20
bool~ bitmap_line::$22
bool~ bitmap_line::$23
bool~ bitmap_line::$24
word~ bitmap_line::$3
bool~ bitmap_line::$4
bool~ bitmap_line::$5
bool~ bitmap_line::$6
bool~ bitmap_line::$7
word~ bitmap_line::$8
word~ bitmap_line::$9
word bitmap_line::dx
word bitmap_line::dx#0
word bitmap_line::dx#1
word bitmap_line::dx#10
word bitmap_line::dx#11
word bitmap_line::dx#12
word bitmap_line::dx#13
word bitmap_line::dx#14
word bitmap_line::dx#2
word bitmap_line::dx#3
word bitmap_line::dx#4
word bitmap_line::dx#5
word bitmap_line::dx#6
word bitmap_line::dx#7
word bitmap_line::dx#8
word bitmap_line::dx#9
word bitmap_line::dy
word bitmap_line::dy#0
word bitmap_line::dy#1
word bitmap_line::dy#10
word bitmap_line::dy#11
word bitmap_line::dy#12
word bitmap_line::dy#13
word bitmap_line::dy#2
word bitmap_line::dy#3
word bitmap_line::dy#4
word bitmap_line::dy#5
word bitmap_line::dy#6
word bitmap_line::dy#7
word bitmap_line::dy#8
word bitmap_line::dy#9
word bitmap_line::e
word bitmap_line::e#0
word bitmap_line::e#1
word bitmap_line::e#2
word bitmap_line::e#3
word bitmap_line::e#4
word bitmap_line::e#5
word bitmap_line::e#6
word bitmap_line::e1
word bitmap_line::e1#0
word bitmap_line::e1#1
word bitmap_line::e1#2
word bitmap_line::e1#3
word bitmap_line::e1#4
word bitmap_line::e1#5
word bitmap_line::e1#6
word bitmap_line::sx
word bitmap_line::sx#0
word bitmap_line::sx#1
word bitmap_line::sx#10
word bitmap_line::sx#11
word bitmap_line::sx#2
word bitmap_line::sx#3
word bitmap_line::sx#4
word bitmap_line::sx#5
word bitmap_line::sx#6
word bitmap_line::sx#7
word bitmap_line::sx#8
word bitmap_line::sx#9
word bitmap_line::sy
word bitmap_line::sy#0
word bitmap_line::sy#1
word bitmap_line::sy#10
word bitmap_line::sy#2
word bitmap_line::sy#3
word bitmap_line::sy#4
word bitmap_line::sy#5
word bitmap_line::sy#6
word bitmap_line::sy#7
word bitmap_line::sy#8
word bitmap_line::sy#9
word bitmap_line::x
word bitmap_line::x#0
word bitmap_line::x#1
word bitmap_line::x#10
word bitmap_line::x#11
word bitmap_line::x#12
word bitmap_line::x#13
word bitmap_line::x#14
word bitmap_line::x#15
word bitmap_line::x#16
word bitmap_line::x#17
word bitmap_line::x#18
word bitmap_line::x#19
word bitmap_line::x#2
word bitmap_line::x#3
word bitmap_line::x#4
word bitmap_line::x#5
word bitmap_line::x#6
word bitmap_line::x#7
word bitmap_line::x#8
word bitmap_line::x#9
word bitmap_line::x1
word bitmap_line::x1#0
word bitmap_line::x1#1
word bitmap_line::x1#2
word bitmap_line::x1#3
word bitmap_line::x1#4
word bitmap_line::x2
word bitmap_line::x2#0
word bitmap_line::x2#1
word bitmap_line::x2#10
word bitmap_line::x2#11
word bitmap_line::x2#2
word bitmap_line::x2#3
word bitmap_line::x2#4
word bitmap_line::x2#5
word bitmap_line::x2#6
word bitmap_line::x2#7
word bitmap_line::x2#8
word bitmap_line::x2#9
word bitmap_line::y
word bitmap_line::y#0
word bitmap_line::y#1
word bitmap_line::y#10
word bitmap_line::y#11
word bitmap_line::y#12
word bitmap_line::y#13
word bitmap_line::y#14
word bitmap_line::y#15
word bitmap_line::y#16
word bitmap_line::y#17
word bitmap_line::y#18
word bitmap_line::y#19
word bitmap_line::y#2
word bitmap_line::y#3
word bitmap_line::y#4
word bitmap_line::y#5
word bitmap_line::y#6
word bitmap_line::y#7
word bitmap_line::y#8
word bitmap_line::y#9
word bitmap_line::y1
word bitmap_line::y1#0
word bitmap_line::y1#1
word bitmap_line::y1#2
word bitmap_line::y1#3
word bitmap_line::y1#4
word bitmap_line::y1#5
word bitmap_line::y2
word bitmap_line::y2#0
word bitmap_line::y2#1
word bitmap_line::y2#10
word bitmap_line::y2#11
word bitmap_line::y2#2
word bitmap_line::y2#3
word bitmap_line::y2#4
word bitmap_line::y2#5
word bitmap_line::y2#6
word bitmap_line::y2#7
word bitmap_line::y2#8
word bitmap_line::y2#9
void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
number~ bitmap_plot::$0
byte~ bitmap_plot::$1
byte* bitmap_plot::plotter
byte* bitmap_plot::plotter#0
byte* bitmap_plot::plotter#1
word bitmap_plot::x
word bitmap_plot::x#0
word bitmap_plot::x#1
word bitmap_plot::x#2
word bitmap_plot::x#3
word bitmap_plot::x#4
byte bitmap_plot::y
byte bitmap_plot::y#0
byte bitmap_plot::y#1
byte bitmap_plot::y#2
byte bitmap_plot::y#3
byte bitmap_plot::y#4
const to_nomodify byte* bitmap_plot_bit[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_yhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_ylo[$100]  = { fill( $100, 0) }
byte* bitmap_screen
byte* bitmap_screen#0
byte* bitmap_screen#1
byte* bitmap_screen#10
byte* bitmap_screen#11
byte* bitmap_screen#12
byte* bitmap_screen#13
byte* bitmap_screen#14
byte* bitmap_screen#15
byte* bitmap_screen#16
byte* bitmap_screen#17
byte* bitmap_screen#18
byte* bitmap_screen#19
byte* bitmap_screen#2
byte* bitmap_screen#20
byte* bitmap_screen#21
byte* bitmap_screen#22
byte* bitmap_screen#23
byte* bitmap_screen#24
byte* bitmap_screen#25
byte* bitmap_screen#26
byte* bitmap_screen#27
byte* bitmap_screen#28
byte* bitmap_screen#29
byte* bitmap_screen#3
byte* bitmap_screen#30
byte* bitmap_screen#31
byte* bitmap_screen#32
byte* bitmap_screen#33
byte* bitmap_screen#34
byte* bitmap_screen#35
byte* bitmap_screen#36
byte* bitmap_screen#37
byte* bitmap_screen#38
byte* bitmap_screen#39
byte* bitmap_screen#4
byte* bitmap_screen#40
byte* bitmap_screen#41
byte* bitmap_screen#42
byte* bitmap_screen#43
byte* bitmap_screen#44
byte* bitmap_screen#45
byte* bitmap_screen#46
byte* bitmap_screen#47
byte* bitmap_screen#48
byte* bitmap_screen#49
byte* bitmap_screen#5
byte* bitmap_screen#50
byte* bitmap_screen#51
byte* bitmap_screen#52
byte* bitmap_screen#53
byte* bitmap_screen#54
byte* bitmap_screen#6
byte* bitmap_screen#7
byte* bitmap_screen#8
byte* bitmap_screen#9
void dtvSetCpuBankSegment1(byte dtvSetCpuBankSegment1::cpuBankIdx)
const byte* dtvSetCpuBankSegment1::cpuBank = (byte*)$ff
byte dtvSetCpuBankSegment1::cpuBankIdx
byte dtvSetCpuBankSegment1::cpuBankIdx#0
byte dtvSetCpuBankSegment1::cpuBankIdx#1
byte dtvSetCpuBankSegment1::cpuBankIdx#10
byte dtvSetCpuBankSegment1::cpuBankIdx#11
byte dtvSetCpuBankSegment1::cpuBankIdx#12
byte dtvSetCpuBankSegment1::cpuBankIdx#13
byte dtvSetCpuBankSegment1::cpuBankIdx#2
byte dtvSetCpuBankSegment1::cpuBankIdx#3
byte dtvSetCpuBankSegment1::cpuBankIdx#4
byte dtvSetCpuBankSegment1::cpuBankIdx#5
byte dtvSetCpuBankSegment1::cpuBankIdx#6
byte dtvSetCpuBankSegment1::cpuBankIdx#7
byte dtvSetCpuBankSegment1::cpuBankIdx#8
byte dtvSetCpuBankSegment1::cpuBankIdx#9
const nomodify byte* form_VICII_bg0_hi = form_fields_val+$1c
const nomodify byte* form_VICII_bg0_lo = form_fields_val+$1d
const nomodify byte* form_VICII_bg1_hi = form_fields_val+$1e
const nomodify byte* form_VICII_bg1_lo = form_fields_val+$1f
const nomodify byte* form_VICII_bg2_hi = form_fields_val+$20
const nomodify byte* form_VICII_bg2_lo = form_fields_val+$21
const nomodify byte* form_VICII_bg3_hi = form_fields_val+$22
const nomodify byte* form_VICII_bg3_lo = form_fields_val+$23
const nomodify byte* form_VICII_cols = form_fields_val+$1a
const nomodify byte* form_VICII_gfx = form_fields_val+$19
const nomodify byte* form_VICII_screen = form_fields_val+$18
const nomodify byte* form_a_mod_hi = form_fields_val+$f
const nomodify byte* form_a_mod_lo = form_fields_val+$10
const nomodify byte* form_a_pattern = form_fields_val+$a
const nomodify byte* form_a_start_hi = form_fields_val+$b
const nomodify byte* form_a_start_lo = form_fields_val+$c
const nomodify byte* form_a_step_hi = form_fields_val+$d
const nomodify byte* form_a_step_lo = form_fields_val+$e
const nomodify byte* form_b_mod_hi = form_fields_val+$16
const nomodify byte* form_b_mod_lo = form_fields_val+$17
const nomodify byte* form_b_pattern = form_fields_val+$11
const nomodify byte* form_b_start_hi = form_fields_val+$12
const nomodify byte* form_b_start_lo = form_fields_val+$13
const nomodify byte* form_b_step_hi = form_fields_val+$14
const nomodify byte* form_b_step_lo = form_fields_val+$15
byte form_control()
byte*~ form_control::$0
bool~ form_control::$1
bool~ form_control::$10
bool~ form_control::$11
number~ form_control::$12
number~ form_control::$13
number~ form_control::$14
byte~ form_control::$15
bool~ form_control::$16
bool~ form_control::$17
bool~ form_control::$18
number~ form_control::$19
bool~ form_control::$2
bool~ form_control::$20
bool~ form_control::$21
byte~ form_control::$22
bool~ form_control::$23
bool~ form_control::$24
bool~ form_control::$25
bool~ form_control::$26
bool~ form_control::$27
bool~ form_control::$3
byte~ form_control::$5
bool~ form_control::$6
bool~ form_control::$7
bool~ form_control::$8
bool~ form_control::$9
byte* form_control::field
byte* form_control::field#0
byte* form_control::field#1
byte* form_control::field#10
byte* form_control::field#11
byte* form_control::field#12
byte* form_control::field#13
byte* form_control::field#14
byte* form_control::field#15
byte* form_control::field#2
byte* form_control::field#3
byte* form_control::field#4
byte* form_control::field#5
byte* form_control::field#6
byte* form_control::field#7
byte* form_control::field#8
byte* form_control::field#9
byte form_control::key_event
byte form_control::key_event#0
byte form_control::key_event#1
byte form_control::key_event#2
byte form_control::return
byte form_control::return#0
byte form_control::return#1
byte form_control::return#2
byte form_control::return#3
byte form_control::return#4
byte form_control::return#5
byte form_control::return#6
byte form_control::return#7
const nomodify byte* form_ctrl_bmm = form_fields_val+1
const nomodify byte* form_ctrl_borof = form_fields_val+8
const nomodify byte* form_ctrl_chunk = form_fields_val+7
const nomodify byte* form_ctrl_colof = form_fields_val+6
const nomodify byte* form_ctrl_ecm = form_fields_val+3
const nomodify byte* form_ctrl_hicol = form_fields_val+4
const nomodify byte* form_ctrl_line = form_fields_val+5
const nomodify byte* form_ctrl_mcm = form_fields_val+2
const nomodify byte* form_ctrl_overs = form_fields_val+9
signed byte form_cursor_count
signed byte form_cursor_count#0
signed byte form_cursor_count#1
signed byte form_cursor_count#10
signed byte form_cursor_count#11
signed byte form_cursor_count#12
signed byte form_cursor_count#13
signed byte form_cursor_count#14
signed byte form_cursor_count#15
signed byte form_cursor_count#16
signed byte form_cursor_count#17
signed byte form_cursor_count#18
signed byte form_cursor_count#19
signed byte form_cursor_count#2
signed byte form_cursor_count#20
signed byte form_cursor_count#21
signed byte form_cursor_count#22
signed byte form_cursor_count#23
signed byte form_cursor_count#24
signed byte form_cursor_count#25
signed byte form_cursor_count#26
signed byte form_cursor_count#27
signed byte form_cursor_count#28
signed byte form_cursor_count#29
signed byte form_cursor_count#3
signed byte form_cursor_count#30
signed byte form_cursor_count#31
signed byte form_cursor_count#32
signed byte form_cursor_count#33
signed byte form_cursor_count#34
signed byte form_cursor_count#35
signed byte form_cursor_count#36
signed byte form_cursor_count#37
signed byte form_cursor_count#38
signed byte form_cursor_count#39
signed byte form_cursor_count#4
signed byte form_cursor_count#40
signed byte form_cursor_count#41
signed byte form_cursor_count#42
signed byte form_cursor_count#43
signed byte form_cursor_count#44
signed byte form_cursor_count#45
signed byte form_cursor_count#46
signed byte form_cursor_count#47
signed byte form_cursor_count#48
signed byte form_cursor_count#49
signed byte form_cursor_count#5
signed byte form_cursor_count#50
signed byte form_cursor_count#51
signed byte form_cursor_count#52
signed byte form_cursor_count#53
signed byte form_cursor_count#54
signed byte form_cursor_count#55
signed byte form_cursor_count#56
signed byte form_cursor_count#57
signed byte form_cursor_count#58
signed byte form_cursor_count#59
signed byte form_cursor_count#6
signed byte form_cursor_count#60
signed byte form_cursor_count#61
signed byte form_cursor_count#62
signed byte form_cursor_count#7
signed byte form_cursor_count#8
signed byte form_cursor_count#9
const nomodify byte* form_dtv_palet = form_fields_val+$1b
byte form_field_idx
byte form_field_idx#0
byte form_field_idx#1
byte form_field_idx#10
byte form_field_idx#11
byte form_field_idx#12
byte form_field_idx#13
byte form_field_idx#14
byte form_field_idx#15
byte form_field_idx#16
byte form_field_idx#17
byte form_field_idx#18
byte form_field_idx#19
byte form_field_idx#2
byte form_field_idx#20
byte form_field_idx#21
byte form_field_idx#22
byte form_field_idx#23
byte form_field_idx#24
byte form_field_idx#25
byte form_field_idx#26
byte form_field_idx#27
byte form_field_idx#28
byte form_field_idx#29
byte form_field_idx#3
byte form_field_idx#30
byte form_field_idx#31
byte form_field_idx#32
byte form_field_idx#33
byte form_field_idx#34
byte form_field_idx#35
byte form_field_idx#36
byte form_field_idx#37
byte form_field_idx#38
byte form_field_idx#39
byte form_field_idx#4
byte form_field_idx#40
byte form_field_idx#41
byte form_field_idx#42
byte form_field_idx#43
byte form_field_idx#44
byte form_field_idx#45
byte form_field_idx#46
byte form_field_idx#47
byte form_field_idx#48
byte form_field_idx#49
byte form_field_idx#5
byte form_field_idx#50
byte form_field_idx#51
byte form_field_idx#52
byte form_field_idx#53
byte form_field_idx#54
byte form_field_idx#55
byte form_field_idx#56
byte form_field_idx#57
byte form_field_idx#58
byte form_field_idx#59
byte form_field_idx#6
byte form_field_idx#60
byte form_field_idx#61
byte form_field_idx#62
byte form_field_idx#63
byte form_field_idx#64
byte form_field_idx#65
byte form_field_idx#66
byte form_field_idx#67
byte form_field_idx#68
byte form_field_idx#7
byte form_field_idx#8
byte form_field_idx#9
byte* form_field_ptr(byte form_field_ptr::field_idx)
byte*~ form_field_ptr::$0
byte* form_field_ptr::field
byte* form_field_ptr::field#0
byte form_field_ptr::field_idx
byte form_field_ptr::field_idx#0
byte form_field_ptr::field_idx#1
byte form_field_ptr::field_idx#2
byte* form_field_ptr::line
byte* form_field_ptr::line#0
byte* form_field_ptr::return
byte* form_field_ptr::return#0
byte* form_field_ptr::return#1
byte* form_field_ptr::return#2
byte* form_field_ptr::return#3
byte* form_field_ptr::return#4
byte* form_field_ptr::return#5
byte* form_field_ptr::return#6
byte form_field_ptr::x
byte form_field_ptr::x#0
byte form_field_ptr::y
byte form_field_ptr::y#0
const byte form_fields_cnt = $24
const byte* form_fields_max[]  = { $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f }
const byte* form_fields_val[]  = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* form_fields_x[]  = { 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25 }
const byte* form_fields_y[]  = { 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e }
const byte* form_line_hi[$19]  = { fill( $19, 0) }
const byte* form_line_lo[$19]  = { fill( $19, 0) }
void form_mode()
bool~ form_mode::$10
byte~ form_mode::$11
bool~ form_mode::$12
bool~ form_mode::$13
bool~ form_mode::$14
bool~ form_mode::$15
bool~ form_mode::$9
byte form_mode::i
byte form_mode::i#0
byte form_mode::i#1
byte form_mode::i#2
byte form_mode::preset_current
byte form_mode::preset_current#0
byte form_mode::preset_current#1
byte form_mode::preset_current#2
byte form_mode::preset_current#3
byte form_mode::preset_current#4
byte form_mode::preset_current#5
byte form_mode::preset_current#6
byte form_mode::preset_current#7
byte form_mode::preset_current#8
const nomodify byte* form_preset = form_fields_val+0
void form_render_values()
bool~ form_render_values::$0
byte*~ form_render_values::$1
byte* form_render_values::field
byte* form_render_values::field#0
byte form_render_values::idx
byte form_render_values::idx#0
byte form_render_values::idx#1
byte form_render_values::idx#2
byte form_render_values::idx#3
byte form_render_values::idx#4
void form_set_screen(byte* form_set_screen::screen)
byte~ form_set_screen::$0
byte~ form_set_screen::$1
byte*~ form_set_screen::$2
bool~ form_set_screen::$3
byte* form_set_screen::line
byte* form_set_screen::line#0
byte* form_set_screen::line#1
byte* form_set_screen::line#2
byte* form_set_screen::screen
byte* form_set_screen::screen#0
byte* form_set_screen::screen#1
byte form_set_screen::y
byte form_set_screen::y#0
byte form_set_screen::y#1
byte form_set_screen::y#2
byte* get_VICII_charset(byte get_VICII_charset::idx)
bool~ get_VICII_charset::$0
bool~ get_VICII_charset::$1
bool~ get_VICII_charset::$2
byte get_VICII_charset::idx
byte get_VICII_charset::idx#0
byte get_VICII_charset::idx#1
byte get_VICII_charset::idx#2
byte* get_VICII_charset::return
byte* get_VICII_charset::return#0
byte* get_VICII_charset::return#1
byte* get_VICII_charset::return#2
byte* get_VICII_charset::return#3
byte* get_VICII_charset::return#4
byte* get_VICII_charset::return#5
byte* get_VICII_charset::return#6
byte* get_VICII_screen(byte get_VICII_screen::idx)
bool~ get_VICII_screen::$0
bool~ get_VICII_screen::$1
bool~ get_VICII_screen::$2
bool~ get_VICII_screen::$3
bool~ get_VICII_screen::$4
bool~ get_VICII_screen::$5
byte get_VICII_screen::idx
byte get_VICII_screen::idx#0
byte get_VICII_screen::idx#1
byte get_VICII_screen::idx#2
byte get_VICII_screen::idx#3
byte get_VICII_screen::idx#4
byte get_VICII_screen::idx#5
byte get_VICII_screen::idx#6
byte* get_VICII_screen::return
byte* get_VICII_screen::return#0
byte* get_VICII_screen::return#1
byte* get_VICII_screen::return#10
byte* get_VICII_screen::return#11
byte* get_VICII_screen::return#2
byte* get_VICII_screen::return#3
byte* get_VICII_screen::return#4
byte* get_VICII_screen::return#5
byte* get_VICII_screen::return#6
byte* get_VICII_screen::return#7
byte* get_VICII_screen::return#8
byte* get_VICII_screen::return#9
dword get_plane(byte get_plane::idx)
bool~ get_plane::$0
bool~ get_plane::$1
bool~ get_plane::$10
bool~ get_plane::$11
bool~ get_plane::$12
bool~ get_plane::$13
bool~ get_plane::$14
bool~ get_plane::$2
bool~ get_plane::$3
bool~ get_plane::$4
bool~ get_plane::$5
bool~ get_plane::$6
bool~ get_plane::$7
bool~ get_plane::$8
bool~ get_plane::$9
byte get_plane::idx
byte get_plane::idx#0
byte get_plane::idx#1
byte get_plane::idx#10
byte get_plane::idx#11
byte get_plane::idx#12
byte get_plane::idx#13
byte get_plane::idx#14
byte get_plane::idx#15
byte get_plane::idx#2
byte get_plane::idx#3
byte get_plane::idx#4
byte get_plane::idx#5
byte get_plane::idx#6
byte get_plane::idx#7
byte get_plane::idx#8
byte get_plane::idx#9
dword get_plane::return
dword get_plane::return#0
dword get_plane::return#1
dword get_plane::return#10
dword get_plane::return#11
dword get_plane::return#12
dword get_plane::return#13
dword get_plane::return#14
dword get_plane::return#15
dword get_plane::return#16
dword get_plane::return#17
dword get_plane::return#18
dword get_plane::return#19
dword get_plane::return#2
dword get_plane::return#20
dword get_plane::return#3
dword get_plane::return#4
dword get_plane::return#5
dword get_plane::return#6
dword get_plane::return#7
dword get_plane::return#8
dword get_plane::return#9
void gfx_init()
void gfx_init_VICII_bitmap()
bool~ gfx_init_VICII_bitmap::$2
number~ gfx_init_VICII_bitmap::$3
number~ gfx_init_VICII_bitmap::$4
byte gfx_init_VICII_bitmap::l
byte gfx_init_VICII_bitmap::l#0
byte gfx_init_VICII_bitmap::l#1
byte gfx_init_VICII_bitmap::l#2
byte gfx_init_VICII_bitmap::l#3
byte gfx_init_VICII_bitmap::l#4
const byte gfx_init_VICII_bitmap::lines_cnt = 9
const byte* gfx_init_VICII_bitmap::lines_x[]  = { 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80 }
const byte* gfx_init_VICII_bitmap::lines_y[]  = { 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0 }
void gfx_init_charset()
bool~ gfx_init_charset::$0
bool~ gfx_init_charset::$1
byte gfx_init_charset::c
byte gfx_init_charset::c#0
byte gfx_init_charset::c#1
byte gfx_init_charset::c#2
byte gfx_init_charset::c#3
byte gfx_init_charset::c#4
byte* gfx_init_charset::chargen
byte* gfx_init_charset::chargen#0
byte* gfx_init_charset::chargen#1
byte* gfx_init_charset::chargen#2
byte* gfx_init_charset::chargen#3
byte* gfx_init_charset::chargen#4
byte* gfx_init_charset::charset
byte* gfx_init_charset::charset#0
byte* gfx_init_charset::charset#1
byte* gfx_init_charset::charset#2
byte* gfx_init_charset::charset#3
byte* gfx_init_charset::charset#4
byte gfx_init_charset::l
byte gfx_init_charset::l#0
byte gfx_init_charset::l#1
byte gfx_init_charset::l#2
void gfx_init_plane_8bppchunky()
bool~ gfx_init_plane_8bppchunky::$2
bool~ gfx_init_plane_8bppchunky::$3
word~ gfx_init_plane_8bppchunky::$5
bool~ gfx_init_plane_8bppchunky::$6
bool~ gfx_init_plane_8bppchunky::$7
byte gfx_init_plane_8bppchunky::c
byte gfx_init_plane_8bppchunky::c#0
byte* gfx_init_plane_8bppchunky::gfxb
byte* gfx_init_plane_8bppchunky::gfxb#0
byte* gfx_init_plane_8bppchunky::gfxb#1
byte* gfx_init_plane_8bppchunky::gfxb#2
byte* gfx_init_plane_8bppchunky::gfxb#3
byte* gfx_init_plane_8bppchunky::gfxb#4
byte* gfx_init_plane_8bppchunky::gfxb#5
byte* gfx_init_plane_8bppchunky::gfxb#6
byte gfx_init_plane_8bppchunky::gfxbCpuBank
byte gfx_init_plane_8bppchunky::gfxbCpuBank#0
byte gfx_init_plane_8bppchunky::gfxbCpuBank#1
byte gfx_init_plane_8bppchunky::gfxbCpuBank#2
byte gfx_init_plane_8bppchunky::gfxbCpuBank#3
byte gfx_init_plane_8bppchunky::gfxbCpuBank#4
byte gfx_init_plane_8bppchunky::gfxbCpuBank#5
byte gfx_init_plane_8bppchunky::gfxbCpuBank#6
byte gfx_init_plane_8bppchunky::gfxbCpuBank#7
byte gfx_init_plane_8bppchunky::gfxbCpuBank#8
byte gfx_init_plane_8bppchunky::gfxbCpuBank#9
word gfx_init_plane_8bppchunky::x
word gfx_init_plane_8bppchunky::x#0
word gfx_init_plane_8bppchunky::x#1
word gfx_init_plane_8bppchunky::x#2
word gfx_init_plane_8bppchunky::x#3
word gfx_init_plane_8bppchunky::x#4
word gfx_init_plane_8bppchunky::x#5
byte gfx_init_plane_8bppchunky::y
byte gfx_init_plane_8bppchunky::y#0
byte gfx_init_plane_8bppchunky::y#1
byte gfx_init_plane_8bppchunky::y#2
byte gfx_init_plane_8bppchunky::y#3
byte gfx_init_plane_8bppchunky::y#4
byte gfx_init_plane_8bppchunky::y#5
byte gfx_init_plane_8bppchunky::y#6
byte gfx_init_plane_8bppchunky::y#7
void gfx_init_plane_blank()
void gfx_init_plane_charset8()
number~ gfx_init_plane_charset8::$2
bool~ gfx_init_plane_charset8::$3
bool~ gfx_init_plane_charset8::$4
number~ gfx_init_plane_charset8::$5
bool~ gfx_init_plane_charset8::$6
bool~ gfx_init_plane_charset8::$7
bool~ gfx_init_plane_charset8::$8
byte gfx_init_plane_charset8::bits
byte gfx_init_plane_charset8::bits#0
byte gfx_init_plane_charset8::bits#1
byte gfx_init_plane_charset8::bits#2
byte gfx_init_plane_charset8::bits#3
byte gfx_init_plane_charset8::bits#4
byte gfx_init_plane_charset8::c
byte gfx_init_plane_charset8::c#0
byte gfx_init_plane_charset8::c#1
byte gfx_init_plane_charset8::c#2
byte gfx_init_plane_charset8::ch
byte gfx_init_plane_charset8::ch#0
byte gfx_init_plane_charset8::ch#1
byte gfx_init_plane_charset8::ch#2
byte gfx_init_plane_charset8::ch#3
byte gfx_init_plane_charset8::ch#4
byte gfx_init_plane_charset8::ch#5
byte gfx_init_plane_charset8::ch#6
byte gfx_init_plane_charset8::ch#7
byte gfx_init_plane_charset8::ch#8
byte* gfx_init_plane_charset8::chargen
byte* gfx_init_plane_charset8::chargen#0
byte* gfx_init_plane_charset8::chargen#1
byte* gfx_init_plane_charset8::chargen#2
byte* gfx_init_plane_charset8::chargen#3
byte* gfx_init_plane_charset8::chargen#4
byte* gfx_init_plane_charset8::chargen#5
byte* gfx_init_plane_charset8::chargen#6
byte* gfx_init_plane_charset8::chargen#7
byte* gfx_init_plane_charset8::chargen#8
byte gfx_init_plane_charset8::col
byte gfx_init_plane_charset8::col#0
byte gfx_init_plane_charset8::col#1
byte gfx_init_plane_charset8::col#2
byte gfx_init_plane_charset8::col#3
byte gfx_init_plane_charset8::col#4
byte gfx_init_plane_charset8::col#5
byte gfx_init_plane_charset8::col#6
byte gfx_init_plane_charset8::col#7
byte gfx_init_plane_charset8::col#8
byte gfx_init_plane_charset8::cp
byte gfx_init_plane_charset8::cp#0
byte gfx_init_plane_charset8::cp#1
byte gfx_init_plane_charset8::cp#2
byte gfx_init_plane_charset8::cp#3
byte gfx_init_plane_charset8::cp#4
byte gfx_init_plane_charset8::cr
byte gfx_init_plane_charset8::cr#0
byte gfx_init_plane_charset8::cr#1
byte gfx_init_plane_charset8::cr#2
byte gfx_init_plane_charset8::cr#3
byte gfx_init_plane_charset8::cr#4
byte gfx_init_plane_charset8::cr#5
byte gfx_init_plane_charset8::cr#6
byte* gfx_init_plane_charset8::gfxa
byte* gfx_init_plane_charset8::gfxa#0
byte* gfx_init_plane_charset8::gfxa#1
byte* gfx_init_plane_charset8::gfxa#2
byte* gfx_init_plane_charset8::gfxa#3
byte* gfx_init_plane_charset8::gfxa#4
byte* gfx_init_plane_charset8::gfxa#5
byte* gfx_init_plane_charset8::gfxa#6
byte* gfx_init_plane_charset8::gfxa#7
byte* gfx_init_plane_charset8::gfxa#8
byte gfx_init_plane_charset8::gfxbCpuBank
byte gfx_init_plane_charset8::gfxbCpuBank#0
byte gfx_init_plane_charset8::gfxbCpuBank#1
byte gfx_init_plane_charset8::gfxbCpuBank#2
void gfx_init_plane_fill(dword gfx_init_plane_fill::plane_addr , byte gfx_init_plane_fill::fill)
number~ gfx_init_plane_fill::$0
number~ gfx_init_plane_fill::$1
number~ gfx_init_plane_fill::$2
word~ gfx_init_plane_fill::$4
number~ gfx_init_plane_fill::$5
number~ gfx_init_plane_fill::$6
bool~ gfx_init_plane_fill::$8
bool~ gfx_init_plane_fill::$9
byte gfx_init_plane_fill::bx
byte gfx_init_plane_fill::bx#0
byte gfx_init_plane_fill::bx#1
byte gfx_init_plane_fill::bx#2
byte gfx_init_plane_fill::by
byte gfx_init_plane_fill::by#0
byte gfx_init_plane_fill::by#1
byte gfx_init_plane_fill::by#2
byte gfx_init_plane_fill::by#3
byte gfx_init_plane_fill::by#4
byte gfx_init_plane_fill::fill
byte gfx_init_plane_fill::fill#0
byte gfx_init_plane_fill::fill#1
byte gfx_init_plane_fill::fill#2
byte gfx_init_plane_fill::fill#3
byte gfx_init_plane_fill::fill#4
byte gfx_init_plane_fill::fill#5
byte gfx_init_plane_fill::fill#6
byte gfx_init_plane_fill::fill#7
byte* gfx_init_plane_fill::gfxb
byte* gfx_init_plane_fill::gfxb#0
byte* gfx_init_plane_fill::gfxb#1
byte* gfx_init_plane_fill::gfxb#2
byte* gfx_init_plane_fill::gfxb#3
byte* gfx_init_plane_fill::gfxb#4
byte gfx_init_plane_fill::gfxbCpuBank
byte gfx_init_plane_fill::gfxbCpuBank#0
byte gfx_init_plane_fill::gfxbCpuBank#1
byte gfx_init_plane_fill::gfxbCpuBank#2
dword gfx_init_plane_fill::plane_addr
dword gfx_init_plane_fill::plane_addr#0
dword gfx_init_plane_fill::plane_addr#1
dword gfx_init_plane_fill::plane_addr#2
dword gfx_init_plane_fill::plane_addr#3
dword gfx_init_plane_fill::plane_addr#4
void gfx_init_plane_full()
void gfx_init_plane_horisontal()
number~ gfx_init_plane_horisontal::$2
bool~ gfx_init_plane_horisontal::$3
bool~ gfx_init_plane_horisontal::$4
bool~ gfx_init_plane_horisontal::$5
byte gfx_init_plane_horisontal::ax
byte gfx_init_plane_horisontal::ax#0
byte gfx_init_plane_horisontal::ax#1
byte gfx_init_plane_horisontal::ax#2
byte gfx_init_plane_horisontal::ax#3
byte gfx_init_plane_horisontal::ax#4
byte gfx_init_plane_horisontal::ax#5
byte gfx_init_plane_horisontal::ay
byte gfx_init_plane_horisontal::ay#0
byte gfx_init_plane_horisontal::ay#1
byte gfx_init_plane_horisontal::ay#2
byte gfx_init_plane_horisontal::ay#3
byte gfx_init_plane_horisontal::ay#4
byte gfx_init_plane_horisontal::ay#5
byte gfx_init_plane_horisontal::ay#6
byte gfx_init_plane_horisontal::ay#7
byte* gfx_init_plane_horisontal::gfxa
byte* gfx_init_plane_horisontal::gfxa#0
byte* gfx_init_plane_horisontal::gfxa#1
byte* gfx_init_plane_horisontal::gfxa#2
byte* gfx_init_plane_horisontal::gfxa#3
byte* gfx_init_plane_horisontal::gfxa#4
byte* gfx_init_plane_horisontal::gfxa#5
byte* gfx_init_plane_horisontal::gfxa#6
byte* gfx_init_plane_horisontal::gfxa#7
byte* gfx_init_plane_horisontal::gfxa#8
byte gfx_init_plane_horisontal::gfxbCpuBank
byte gfx_init_plane_horisontal::gfxbCpuBank#0
byte gfx_init_plane_horisontal::gfxbCpuBank#1
byte gfx_init_plane_horisontal::gfxbCpuBank#2
void gfx_init_plane_horisontal2()
number~ gfx_init_plane_horisontal2::$2
number~ gfx_init_plane_horisontal2::$3
bool~ gfx_init_plane_horisontal2::$4
bool~ gfx_init_plane_horisontal2::$5
byte gfx_init_plane_horisontal2::ax
byte gfx_init_plane_horisontal2::ax#0
byte gfx_init_plane_horisontal2::ax#1
byte gfx_init_plane_horisontal2::ax#2
byte gfx_init_plane_horisontal2::ay
byte gfx_init_plane_horisontal2::ay#0
byte gfx_init_plane_horisontal2::ay#1
byte gfx_init_plane_horisontal2::ay#2
byte gfx_init_plane_horisontal2::ay#3
byte gfx_init_plane_horisontal2::ay#4
byte* gfx_init_plane_horisontal2::gfxa
byte* gfx_init_plane_horisontal2::gfxa#0
byte* gfx_init_plane_horisontal2::gfxa#1
byte* gfx_init_plane_horisontal2::gfxa#2
byte* gfx_init_plane_horisontal2::gfxa#3
byte* gfx_init_plane_horisontal2::gfxa#4
byte gfx_init_plane_horisontal2::gfxbCpuBank
byte gfx_init_plane_horisontal2::gfxbCpuBank#0
byte gfx_init_plane_horisontal2::gfxbCpuBank#1
byte gfx_init_plane_horisontal2::gfxbCpuBank#2
byte gfx_init_plane_horisontal2::row
byte gfx_init_plane_horisontal2::row#0
const byte* gfx_init_plane_horisontal2::row_bitmask[]  = { 0, $55, $aa, $ff }
void gfx_init_plane_vertical()
bool~ gfx_init_plane_vertical::$2
bool~ gfx_init_plane_vertical::$3
byte gfx_init_plane_vertical::bx
byte gfx_init_plane_vertical::bx#0
byte gfx_init_plane_vertical::bx#1
byte gfx_init_plane_vertical::bx#2
byte gfx_init_plane_vertical::by
byte gfx_init_plane_vertical::by#0
byte gfx_init_plane_vertical::by#1
byte gfx_init_plane_vertical::by#2
byte gfx_init_plane_vertical::by#3
byte gfx_init_plane_vertical::by#4
byte* gfx_init_plane_vertical::gfxb
byte* gfx_init_plane_vertical::gfxb#0
byte* gfx_init_plane_vertical::gfxb#1
byte* gfx_init_plane_vertical::gfxb#2
byte* gfx_init_plane_vertical::gfxb#3
byte* gfx_init_plane_vertical::gfxb#4
byte gfx_init_plane_vertical::gfxbCpuBank
byte gfx_init_plane_vertical::gfxbCpuBank#0
byte gfx_init_plane_vertical::gfxbCpuBank#1
byte gfx_init_plane_vertical::gfxbCpuBank#2
void gfx_init_plane_vertical2()
void gfx_init_screen0()
number~ gfx_init_screen0::$0
number~ gfx_init_screen0::$1
number~ gfx_init_screen0::$2
number~ gfx_init_screen0::$3
bool~ gfx_init_screen0::$4
bool~ gfx_init_screen0::$5
byte* gfx_init_screen0::ch
byte* gfx_init_screen0::ch#0
byte* gfx_init_screen0::ch#1
byte* gfx_init_screen0::ch#2
byte* gfx_init_screen0::ch#3
byte* gfx_init_screen0::ch#4
byte gfx_init_screen0::cx
byte gfx_init_screen0::cx#0
byte gfx_init_screen0::cx#1
byte gfx_init_screen0::cx#2
byte gfx_init_screen0::cy
byte gfx_init_screen0::cy#0
byte gfx_init_screen0::cy#1
byte gfx_init_screen0::cy#2
byte gfx_init_screen0::cy#3
byte gfx_init_screen0::cy#4
void gfx_init_screen1()
byte~ gfx_init_screen1::$0
number~ gfx_init_screen1::$1
bool~ gfx_init_screen1::$2
bool~ gfx_init_screen1::$3
byte* gfx_init_screen1::ch
byte* gfx_init_screen1::ch#0
byte* gfx_init_screen1::ch#1
byte* gfx_init_screen1::ch#2
byte* gfx_init_screen1::ch#3
byte* gfx_init_screen1::ch#4
byte gfx_init_screen1::cx
byte gfx_init_screen1::cx#0
byte gfx_init_screen1::cx#1
byte gfx_init_screen1::cx#2
byte gfx_init_screen1::cy
byte gfx_init_screen1::cy#0
byte gfx_init_screen1::cy#1
byte gfx_init_screen1::cy#2
byte gfx_init_screen1::cy#3
byte gfx_init_screen1::cy#4
void gfx_init_screen2()
byte~ gfx_init_screen2::$0
number~ gfx_init_screen2::$1
number~ gfx_init_screen2::$2
number~ gfx_init_screen2::$3
number~ gfx_init_screen2::$4
bool~ gfx_init_screen2::$5
bool~ gfx_init_screen2::$6
byte* gfx_init_screen2::ch
byte* gfx_init_screen2::ch#0
byte* gfx_init_screen2::ch#1
byte* gfx_init_screen2::ch#2
byte* gfx_init_screen2::ch#3
byte* gfx_init_screen2::ch#4
byte gfx_init_screen2::col
byte gfx_init_screen2::col#0
byte gfx_init_screen2::col2
byte gfx_init_screen2::col2#0
byte gfx_init_screen2::cx
byte gfx_init_screen2::cx#0
byte gfx_init_screen2::cx#1
byte gfx_init_screen2::cx#2
byte gfx_init_screen2::cy
byte gfx_init_screen2::cy#0
byte gfx_init_screen2::cy#1
byte gfx_init_screen2::cy#2
byte gfx_init_screen2::cy#3
byte gfx_init_screen2::cy#4
void gfx_init_screen3()
number~ gfx_init_screen3::$0
number~ gfx_init_screen3::$1
number~ gfx_init_screen3::$2
number~ gfx_init_screen3::$3
bool~ gfx_init_screen3::$4
bool~ gfx_init_screen3::$5
byte* gfx_init_screen3::ch
byte* gfx_init_screen3::ch#0
byte* gfx_init_screen3::ch#1
byte* gfx_init_screen3::ch#2
byte* gfx_init_screen3::ch#3
byte* gfx_init_screen3::ch#4
byte gfx_init_screen3::cx
byte gfx_init_screen3::cx#0
byte gfx_init_screen3::cx#1
byte gfx_init_screen3::cx#2
byte gfx_init_screen3::cy
byte gfx_init_screen3::cy#0
byte gfx_init_screen3::cy#1
byte gfx_init_screen3::cy#2
byte gfx_init_screen3::cy#3
byte gfx_init_screen3::cy#4
void gfx_init_screen4()
bool~ gfx_init_screen4::$0
bool~ gfx_init_screen4::$1
byte* gfx_init_screen4::ch
byte* gfx_init_screen4::ch#0
byte* gfx_init_screen4::ch#1
byte* gfx_init_screen4::ch#2
byte* gfx_init_screen4::ch#3
byte* gfx_init_screen4::ch#4
byte gfx_init_screen4::cx
byte gfx_init_screen4::cx#0
byte gfx_init_screen4::cx#1
byte gfx_init_screen4::cx#2
byte gfx_init_screen4::cy
byte gfx_init_screen4::cy#0
byte gfx_init_screen4::cy#1
byte gfx_init_screen4::cy#2
byte gfx_init_screen4::cy#3
byte gfx_init_screen4::cy#4
void gfx_mode()
bool~ gfx_mode::$0
bool~ gfx_mode::$1
bool~ gfx_mode::$10
bool~ gfx_mode::$11
bool~ gfx_mode::$12
bool~ gfx_mode::$13
bool~ gfx_mode::$14
bool~ gfx_mode::$15
bool~ gfx_mode::$16
bool~ gfx_mode::$17
number~ gfx_mode::$18
number~ gfx_mode::$19
bool~ gfx_mode::$2
dword~ gfx_mode::$20
dword~ gfx_mode::$21
word~ gfx_mode::$22
byte~ gfx_mode::$23
word~ gfx_mode::$24
byte~ gfx_mode::$25
word~ gfx_mode::$26
byte~ gfx_mode::$27
number~ gfx_mode::$28
number~ gfx_mode::$29
bool~ gfx_mode::$3
number~ gfx_mode::$30
number~ gfx_mode::$31
number~ gfx_mode::$32
number~ gfx_mode::$33
dword~ gfx_mode::$34
dword~ gfx_mode::$35
word~ gfx_mode::$36
byte~ gfx_mode::$37
word~ gfx_mode::$38
byte~ gfx_mode::$39
bool~ gfx_mode::$4
word~ gfx_mode::$40
byte~ gfx_mode::$41
number~ gfx_mode::$42
number~ gfx_mode::$43
number~ gfx_mode::$44
number~ gfx_mode::$45
byte*~ gfx_mode::$46
number~ gfx_mode::$47
number~ gfx_mode::$48
byte*~ gfx_mode::$49
bool~ gfx_mode::$5
number~ gfx_mode::$50
number~ gfx_mode::$51
number~ gfx_mode::$52
number~ gfx_mode::$53
byte*~ gfx_mode::$54
number~ gfx_mode::$55
number~ gfx_mode::$56
number~ gfx_mode::$57
number~ gfx_mode::$58
number~ gfx_mode::$59
bool~ gfx_mode::$6
number~ gfx_mode::$60
number~ gfx_mode::$61
number~ gfx_mode::$62
bool~ gfx_mode::$63
byte~ gfx_mode::$64
byte~ gfx_mode::$65
byte~ gfx_mode::$66
byte~ gfx_mode::$67
byte~ gfx_mode::$68
byte~ gfx_mode::$69
bool~ gfx_mode::$7
byte~ gfx_mode::$70
byte~ gfx_mode::$71
byte~ gfx_mode::$72
bool~ gfx_mode::$73
bool~ gfx_mode::$74
bool~ gfx_mode::$75
bool~ gfx_mode::$76
bool~ gfx_mode::$77
byte~ gfx_mode::$79
bool~ gfx_mode::$8
bool~ gfx_mode::$80
bool~ gfx_mode::$81
word~ gfx_mode::$82
word~ gfx_mode::$83
byte~ gfx_mode::$84
bool~ gfx_mode::$9
byte* gfx_mode::VICII_colors
byte* gfx_mode::VICII_colors#0
byte* gfx_mode::VICII_colors#1
byte* gfx_mode::VICII_colors#2
byte* gfx_mode::VICII_colors#3
byte* gfx_mode::VICII_colors#4
byte gfx_mode::VICII_control
byte gfx_mode::VICII_control#0
byte gfx_mode::VICII_control#1
byte gfx_mode::VICII_control#2
byte gfx_mode::VICII_control#3
byte gfx_mode::VICII_control#4
byte gfx_mode::VICII_control#5
byte gfx_mode::VICII_control#6
byte gfx_mode::VICII_control2
byte gfx_mode::VICII_control2#0
byte gfx_mode::VICII_control2#1
byte gfx_mode::VICII_control2#2
byte gfx_mode::VICII_control2#3
byte* gfx_mode::col
byte* gfx_mode::col#0
byte* gfx_mode::col#1
byte* gfx_mode::col#2
byte* gfx_mode::col#3
byte* gfx_mode::col#4
byte gfx_mode::cx
byte gfx_mode::cx#0
byte gfx_mode::cx#1
byte gfx_mode::cx#2
byte gfx_mode::cy
byte gfx_mode::cy#0
byte gfx_mode::cy#1
byte gfx_mode::cy#2
byte gfx_mode::cy#3
byte gfx_mode::cy#4
byte gfx_mode::dtv_control
byte gfx_mode::dtv_control#0
byte gfx_mode::dtv_control#1
byte gfx_mode::dtv_control#10
byte gfx_mode::dtv_control#11
byte gfx_mode::dtv_control#12
byte gfx_mode::dtv_control#13
byte gfx_mode::dtv_control#14
byte gfx_mode::dtv_control#15
byte gfx_mode::dtv_control#16
byte gfx_mode::dtv_control#17
byte gfx_mode::dtv_control#18
byte gfx_mode::dtv_control#2
byte gfx_mode::dtv_control#3
byte gfx_mode::dtv_control#4
byte gfx_mode::dtv_control#5
byte gfx_mode::dtv_control#6
byte gfx_mode::dtv_control#7
byte gfx_mode::dtv_control#8
byte gfx_mode::dtv_control#9
byte gfx_mode::i
byte gfx_mode::i#0
byte gfx_mode::i#1
byte gfx_mode::i#2
byte gfx_mode::j
byte gfx_mode::j#0
byte gfx_mode::j#1
byte gfx_mode::j#2
byte gfx_mode::keyboard_event
byte gfx_mode::keyboard_event#0
dword gfx_mode::plane_a
dword gfx_mode::plane_a#0
byte gfx_mode::plane_a_offs
byte gfx_mode::plane_a_offs#0
byte gfx_mode::plane_a_offs#1
dword gfx_mode::plane_b
dword gfx_mode::plane_b#0
byte gfx_mode::plane_b_offs
byte gfx_mode::plane_b_offs#0
byte gfx_mode::plane_b_offs#1
byte keyboard_event_get()
bool~ keyboard_event_get::$0
byte keyboard_event_get::return
byte keyboard_event_get::return#0
byte keyboard_event_get::return#1
byte keyboard_event_get::return#2
byte keyboard_event_get::return#3
byte keyboard_event_get::return#4
byte keyboard_event_get::return#5
byte keyboard_event_get::return#6
byte keyboard_event_get::return#7
byte keyboard_event_pressed(byte keyboard_event_pressed::keycode)
byte~ keyboard_event_pressed::$0
number~ keyboard_event_pressed::$1
byte~ keyboard_event_pressed::$2
byte keyboard_event_pressed::keycode
byte keyboard_event_pressed::keycode#0
byte keyboard_event_pressed::keycode#1
byte keyboard_event_pressed::keycode#2
byte keyboard_event_pressed::keycode#3
byte keyboard_event_pressed::keycode#4
byte keyboard_event_pressed::return
byte keyboard_event_pressed::return#0
byte keyboard_event_pressed::return#1
byte keyboard_event_pressed::return#10
byte keyboard_event_pressed::return#2
byte keyboard_event_pressed::return#3
byte keyboard_event_pressed::return#4
byte keyboard_event_pressed::return#5
byte keyboard_event_pressed::return#6
byte keyboard_event_pressed::return#7
byte keyboard_event_pressed::return#8
byte keyboard_event_pressed::return#9
byte keyboard_event_pressed::row_bits
byte keyboard_event_pressed::row_bits#0
void keyboard_event_scan()
byte~ keyboard_event_scan::$0
bool~ keyboard_event_scan::$1
bool~ keyboard_event_scan::$10
bool~ keyboard_event_scan::$11
byte~ keyboard_event_scan::$12
bool~ keyboard_event_scan::$13
number~ keyboard_event_scan::$14
byte~ keyboard_event_scan::$15
byte~ keyboard_event_scan::$16
bool~ keyboard_event_scan::$17
bool~ keyboard_event_scan::$18
bool~ keyboard_event_scan::$19
bool~ keyboard_event_scan::$2
bool~ keyboard_event_scan::$20
byte~ keyboard_event_scan::$21
bool~ keyboard_event_scan::$22
number~ keyboard_event_scan::$23
bool~ keyboard_event_scan::$24
bool~ keyboard_event_scan::$25
byte~ keyboard_event_scan::$26
byte~ keyboard_event_scan::$27
byte~ keyboard_event_scan::$28
byte~ keyboard_event_scan::$29
byte~ keyboard_event_scan::$3
bool~ keyboard_event_scan::$4
bool~ keyboard_event_scan::$5
byte~ keyboard_event_scan::$6
bool~ keyboard_event_scan::$7
bool~ keyboard_event_scan::$8
byte~ keyboard_event_scan::$9
byte keyboard_event_scan::col
byte keyboard_event_scan::col#0
byte keyboard_event_scan::col#1
byte keyboard_event_scan::col#2
byte keyboard_event_scan::col#3
byte keyboard_event_scan::col#4
byte keyboard_event_scan::col#5
byte keyboard_event_scan::col#6
byte keyboard_event_scan::col#7
byte keyboard_event_scan::event_type
byte keyboard_event_scan::event_type#0
byte keyboard_event_scan::keycode
byte keyboard_event_scan::keycode#0
byte keyboard_event_scan::keycode#1
byte keyboard_event_scan::keycode#10
byte keyboard_event_scan::keycode#11
byte keyboard_event_scan::keycode#12
byte keyboard_event_scan::keycode#13
byte keyboard_event_scan::keycode#14
byte keyboard_event_scan::keycode#2
byte keyboard_event_scan::keycode#3
byte keyboard_event_scan::keycode#4
byte keyboard_event_scan::keycode#5
byte keyboard_event_scan::keycode#6
byte keyboard_event_scan::keycode#7
byte keyboard_event_scan::keycode#8
byte keyboard_event_scan::keycode#9
byte keyboard_event_scan::row
byte keyboard_event_scan::row#0
byte keyboard_event_scan::row#1
byte keyboard_event_scan::row#10
byte keyboard_event_scan::row#11
byte keyboard_event_scan::row#12
byte keyboard_event_scan::row#13
byte keyboard_event_scan::row#2
byte keyboard_event_scan::row#3
byte keyboard_event_scan::row#4
byte keyboard_event_scan::row#5
byte keyboard_event_scan::row#6
byte keyboard_event_scan::row#7
byte keyboard_event_scan::row#8
byte keyboard_event_scan::row#9
byte keyboard_event_scan::row_scan
byte keyboard_event_scan::row_scan#0
byte keyboard_event_scan::row_scan#1
byte keyboard_event_scan::row_scan#2
byte keyboard_event_scan::row_scan#3
byte keyboard_event_scan::row_scan#4
byte keyboard_event_scan::row_scan#5
byte keyboard_event_scan::row_scan#6
byte keyboard_event_scan::row_scan#7
byte keyboard_event_scan::row_scan#8
const byte* keyboard_events[8]  = { fill( 8, 0) }
byte keyboard_events_size
byte keyboard_events_size#0
byte keyboard_events_size#1
byte keyboard_events_size#10
byte keyboard_events_size#100
byte keyboard_events_size#101
byte keyboard_events_size#102
byte keyboard_events_size#103
byte keyboard_events_size#104
byte keyboard_events_size#105
byte keyboard_events_size#106
byte keyboard_events_size#107
byte keyboard_events_size#108
byte keyboard_events_size#109
byte keyboard_events_size#11
byte keyboard_events_size#110
byte keyboard_events_size#111
byte keyboard_events_size#112
byte keyboard_events_size#113
byte keyboard_events_size#114
byte keyboard_events_size#115
byte keyboard_events_size#116
byte keyboard_events_size#117
byte keyboard_events_size#118
byte keyboard_events_size#119
byte keyboard_events_size#12
byte keyboard_events_size#120
byte keyboard_events_size#121
byte keyboard_events_size#122
byte keyboard_events_size#123
byte keyboard_events_size#124
byte keyboard_events_size#125
byte keyboard_events_size#126
byte keyboard_events_size#127
byte keyboard_events_size#128
byte keyboard_events_size#129
byte keyboard_events_size#13
byte keyboard_events_size#130
byte keyboard_events_size#131
byte keyboard_events_size#132
byte keyboard_events_size#133
byte keyboard_events_size#134
byte keyboard_events_size#135
byte keyboard_events_size#136
byte keyboard_events_size#137
byte keyboard_events_size#138
byte keyboard_events_size#139
byte keyboard_events_size#14
byte keyboard_events_size#140
byte keyboard_events_size#141
byte keyboard_events_size#142
byte keyboard_events_size#143
byte keyboard_events_size#144
byte keyboard_events_size#145
byte keyboard_events_size#15
byte keyboard_events_size#16
byte keyboard_events_size#17
byte keyboard_events_size#18
byte keyboard_events_size#19
byte keyboard_events_size#2
byte keyboard_events_size#20
byte keyboard_events_size#21
byte keyboard_events_size#22
byte keyboard_events_size#23
byte keyboard_events_size#24
byte keyboard_events_size#25
byte keyboard_events_size#26
byte keyboard_events_size#27
byte keyboard_events_size#28
byte keyboard_events_size#29
byte keyboard_events_size#3
byte keyboard_events_size#30
byte keyboard_events_size#31
byte keyboard_events_size#32
byte keyboard_events_size#33
byte keyboard_events_size#34
byte keyboard_events_size#35
byte keyboard_events_size#36
byte keyboard_events_size#37
byte keyboard_events_size#38
byte keyboard_events_size#39
byte keyboard_events_size#4
byte keyboard_events_size#40
byte keyboard_events_size#41
byte keyboard_events_size#42
byte keyboard_events_size#43
byte keyboard_events_size#44
byte keyboard_events_size#45
byte keyboard_events_size#46
byte keyboard_events_size#47
byte keyboard_events_size#48
byte keyboard_events_size#49
byte keyboard_events_size#5
byte keyboard_events_size#50
byte keyboard_events_size#51
byte keyboard_events_size#52
byte keyboard_events_size#53
byte keyboard_events_size#54
byte keyboard_events_size#55
byte keyboard_events_size#56
byte keyboard_events_size#57
byte keyboard_events_size#58
byte keyboard_events_size#59
byte keyboard_events_size#6
byte keyboard_events_size#60
byte keyboard_events_size#61
byte keyboard_events_size#62
byte keyboard_events_size#63
byte keyboard_events_size#64
byte keyboard_events_size#65
byte keyboard_events_size#66
byte keyboard_events_size#67
byte keyboard_events_size#68
byte keyboard_events_size#69
byte keyboard_events_size#7
byte keyboard_events_size#70
byte keyboard_events_size#71
byte keyboard_events_size#72
byte keyboard_events_size#73
byte keyboard_events_size#74
byte keyboard_events_size#75
byte keyboard_events_size#76
byte keyboard_events_size#77
byte keyboard_events_size#78
byte keyboard_events_size#79
byte keyboard_events_size#8
byte keyboard_events_size#80
byte keyboard_events_size#81
byte keyboard_events_size#82
byte keyboard_events_size#83
byte keyboard_events_size#84
byte keyboard_events_size#85
byte keyboard_events_size#86
byte keyboard_events_size#87
byte keyboard_events_size#88
byte keyboard_events_size#89
byte keyboard_events_size#9
byte keyboard_events_size#90
byte keyboard_events_size#91
byte keyboard_events_size#92
byte keyboard_events_size#93
byte keyboard_events_size#94
byte keyboard_events_size#95
byte keyboard_events_size#96
byte keyboard_events_size#97
byte keyboard_events_size#98
byte keyboard_events_size#99
void keyboard_init()
const byte* keyboard_matrix_col_bitmask[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte~ keyboard_matrix_read::$0
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0
byte keyboard_matrix_read::return#1
byte keyboard_matrix_read::return#2
byte keyboard_matrix_read::return#3
byte keyboard_matrix_read::return#4
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::row_pressed_bits#0
byte keyboard_matrix_read::rowid
byte keyboard_matrix_read::rowid#0
byte keyboard_matrix_read::rowid#1
const byte* keyboard_matrix_row_bitmask[8]  = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
byte keyboard_modifiers
byte keyboard_modifiers#0
byte keyboard_modifiers#1
byte keyboard_modifiers#10
byte keyboard_modifiers#100
byte keyboard_modifiers#101
byte keyboard_modifiers#102
byte keyboard_modifiers#103
byte keyboard_modifiers#104
byte keyboard_modifiers#105
byte keyboard_modifiers#106
byte keyboard_modifiers#107
byte keyboard_modifiers#108
byte keyboard_modifiers#109
byte keyboard_modifiers#11
byte keyboard_modifiers#110
byte keyboard_modifiers#111
byte keyboard_modifiers#112
byte keyboard_modifiers#113
byte keyboard_modifiers#114
byte keyboard_modifiers#115
byte keyboard_modifiers#116
byte keyboard_modifiers#117
byte keyboard_modifiers#118
byte keyboard_modifiers#119
byte keyboard_modifiers#12
byte keyboard_modifiers#120
byte keyboard_modifiers#121
byte keyboard_modifiers#122
byte keyboard_modifiers#123
byte keyboard_modifiers#124
byte keyboard_modifiers#125
byte keyboard_modifiers#126
byte keyboard_modifiers#13
byte keyboard_modifiers#14
byte keyboard_modifiers#15
byte keyboard_modifiers#16
byte keyboard_modifiers#17
byte keyboard_modifiers#18
byte keyboard_modifiers#19
byte keyboard_modifiers#2
byte keyboard_modifiers#20
byte keyboard_modifiers#21
byte keyboard_modifiers#22
byte keyboard_modifiers#23
byte keyboard_modifiers#24
byte keyboard_modifiers#25
byte keyboard_modifiers#26
byte keyboard_modifiers#27
byte keyboard_modifiers#28
byte keyboard_modifiers#29
byte keyboard_modifiers#3
byte keyboard_modifiers#30
byte keyboard_modifiers#31
byte keyboard_modifiers#32
byte keyboard_modifiers#33
byte keyboard_modifiers#34
byte keyboard_modifiers#35
byte keyboard_modifiers#36
byte keyboard_modifiers#37
byte keyboard_modifiers#38
byte keyboard_modifiers#39
byte keyboard_modifiers#4
byte keyboard_modifiers#40
byte keyboard_modifiers#41
byte keyboard_modifiers#42
byte keyboard_modifiers#43
byte keyboard_modifiers#44
byte keyboard_modifiers#45
byte keyboard_modifiers#46
byte keyboard_modifiers#47
byte keyboard_modifiers#48
byte keyboard_modifiers#49
byte keyboard_modifiers#5
byte keyboard_modifiers#50
byte keyboard_modifiers#51
byte keyboard_modifiers#52
byte keyboard_modifiers#53
byte keyboard_modifiers#54
byte keyboard_modifiers#55
byte keyboard_modifiers#56
byte keyboard_modifiers#57
byte keyboard_modifiers#58
byte keyboard_modifiers#59
byte keyboard_modifiers#6
byte keyboard_modifiers#60
byte keyboard_modifiers#61
byte keyboard_modifiers#62
byte keyboard_modifiers#63
byte keyboard_modifiers#64
byte keyboard_modifiers#65
byte keyboard_modifiers#66
byte keyboard_modifiers#67
byte keyboard_modifiers#68
byte keyboard_modifiers#69
byte keyboard_modifiers#7
byte keyboard_modifiers#70
byte keyboard_modifiers#71
byte keyboard_modifiers#72
byte keyboard_modifiers#73
byte keyboard_modifiers#74
byte keyboard_modifiers#75
byte keyboard_modifiers#76
byte keyboard_modifiers#77
byte keyboard_modifiers#78
byte keyboard_modifiers#79
byte keyboard_modifiers#8
byte keyboard_modifiers#80
byte keyboard_modifiers#81
byte keyboard_modifiers#82
byte keyboard_modifiers#83
byte keyboard_modifiers#84
byte keyboard_modifiers#85
byte keyboard_modifiers#86
byte keyboard_modifiers#87
byte keyboard_modifiers#88
byte keyboard_modifiers#89
byte keyboard_modifiers#9
byte keyboard_modifiers#90
byte keyboard_modifiers#91
byte keyboard_modifiers#92
byte keyboard_modifiers#93
byte keyboard_modifiers#94
byte keyboard_modifiers#95
byte keyboard_modifiers#96
byte keyboard_modifiers#97
byte keyboard_modifiers#98
byte keyboard_modifiers#99
const byte* keyboard_scan_values[8]  = { fill( 8, 0) }
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte memset::c#5
byte memset::c#6
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
word memset::num#3
word memset::num#4
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::return#4
void* memset::return#5
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void* memset::str#6
void* memset::str#7
const byte* preset_8bpppixelcell[]  = { $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_chunky[]  = { 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_ecmchar[]  = { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6 }
const byte* preset_hi_ecmchar[]  = { 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c }
const byte* preset_hi_stdchar[]  = { 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_mcbm[]  = { 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0 }
const byte* preset_sixsfred[]  = { 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_sixsfred2[]  = { 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_stdbm[]  = { 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_stdchar[]  = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_twoplane[]  = { 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0 }
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0
byte print_char::ch#1
byte* print_char_cursor
byte* print_char_cursor#0
byte* print_char_cursor#1
byte* print_char_cursor#10
byte* print_char_cursor#11
byte* print_char_cursor#12
byte* print_char_cursor#13
byte* print_char_cursor#14
byte* print_char_cursor#15
byte* print_char_cursor#16
byte* print_char_cursor#17
byte* print_char_cursor#18
byte* print_char_cursor#19
byte* print_char_cursor#2
byte* print_char_cursor#20
byte* print_char_cursor#21
byte* print_char_cursor#22
byte* print_char_cursor#23
byte* print_char_cursor#24
byte* print_char_cursor#25
byte* print_char_cursor#26
byte* print_char_cursor#27
byte* print_char_cursor#28
byte* print_char_cursor#29
byte* print_char_cursor#3
byte* print_char_cursor#30
byte* print_char_cursor#31
byte* print_char_cursor#32
byte* print_char_cursor#33
byte* print_char_cursor#34
byte* print_char_cursor#35
byte* print_char_cursor#36
byte* print_char_cursor#37
byte* print_char_cursor#38
byte* print_char_cursor#39
byte* print_char_cursor#4
byte* print_char_cursor#40
byte* print_char_cursor#41
byte* print_char_cursor#42
byte* print_char_cursor#43
byte* print_char_cursor#44
byte* print_char_cursor#45
byte* print_char_cursor#46
byte* print_char_cursor#47
byte* print_char_cursor#48
byte* print_char_cursor#49
byte* print_char_cursor#5
byte* print_char_cursor#50
byte* print_char_cursor#51
byte* print_char_cursor#52
byte* print_char_cursor#53
byte* print_char_cursor#54
byte* print_char_cursor#55
byte* print_char_cursor#56
byte* print_char_cursor#57
byte* print_char_cursor#58
byte* print_char_cursor#59
byte* print_char_cursor#6
byte* print_char_cursor#60
byte* print_char_cursor#61
byte* print_char_cursor#62
byte* print_char_cursor#63
byte* print_char_cursor#64
byte* print_char_cursor#65
byte* print_char_cursor#66
byte* print_char_cursor#67
byte* print_char_cursor#68
byte* print_char_cursor#69
byte* print_char_cursor#7
byte* print_char_cursor#70
byte* print_char_cursor#71
byte* print_char_cursor#8
byte* print_char_cursor#9
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0
byte* print_line_cursor#1
byte* print_line_cursor#10
byte* print_line_cursor#11
byte* print_line_cursor#12
byte* print_line_cursor#13
byte* print_line_cursor#14
byte* print_line_cursor#15
byte* print_line_cursor#16
byte* print_line_cursor#17
byte* print_line_cursor#18
byte* print_line_cursor#19
byte* print_line_cursor#2
byte* print_line_cursor#20
byte* print_line_cursor#21
byte* print_line_cursor#22
byte* print_line_cursor#23
byte* print_line_cursor#24
byte* print_line_cursor#25
byte* print_line_cursor#26
byte* print_line_cursor#27
byte* print_line_cursor#28
byte* print_line_cursor#29
byte* print_line_cursor#3
byte* print_line_cursor#30
byte* print_line_cursor#31
byte* print_line_cursor#32
byte* print_line_cursor#33
byte* print_line_cursor#34
byte* print_line_cursor#35
byte* print_line_cursor#36
byte* print_line_cursor#37
byte* print_line_cursor#38
byte* print_line_cursor#39
byte* print_line_cursor#4
byte* print_line_cursor#40
byte* print_line_cursor#41
byte* print_line_cursor#42
byte* print_line_cursor#43
byte* print_line_cursor#44
byte* print_line_cursor#45
byte* print_line_cursor#46
byte* print_line_cursor#47
byte* print_line_cursor#48
byte* print_line_cursor#49
byte* print_line_cursor#5
byte* print_line_cursor#50
byte* print_line_cursor#51
byte* print_line_cursor#52
byte* print_line_cursor#53
byte* print_line_cursor#54
byte* print_line_cursor#55
byte* print_line_cursor#56
byte* print_line_cursor#57
byte* print_line_cursor#58
byte* print_line_cursor#59
byte* print_line_cursor#6
byte* print_line_cursor#60
byte* print_line_cursor#61
byte* print_line_cursor#62
byte* print_line_cursor#63
byte* print_line_cursor#64
byte* print_line_cursor#65
byte* print_line_cursor#66
byte* print_line_cursor#67
byte* print_line_cursor#7
byte* print_line_cursor#8
byte* print_line_cursor#9
void print_ln()
byte*~ print_ln::$0
bool~ print_ln::$1
byte* print_screen
byte* print_screen#0
byte* print_screen#1
byte* print_screen#10
byte* print_screen#11
byte* print_screen#12
byte* print_screen#13
byte* print_screen#14
byte* print_screen#15
byte* print_screen#16
byte* print_screen#17
byte* print_screen#18
byte* print_screen#19
byte* print_screen#2
byte* print_screen#20
byte* print_screen#21
byte* print_screen#22
byte* print_screen#23
byte* print_screen#24
byte* print_screen#25
byte* print_screen#26
byte* print_screen#27
byte* print_screen#28
byte* print_screen#29
byte* print_screen#3
byte* print_screen#30
byte* print_screen#31
byte* print_screen#32
byte* print_screen#33
byte* print_screen#34
byte* print_screen#35
byte* print_screen#36
byte* print_screen#37
byte* print_screen#38
byte* print_screen#39
byte* print_screen#4
byte* print_screen#40
byte* print_screen#41
byte* print_screen#42
byte* print_screen#43
byte* print_screen#44
byte* print_screen#45
byte* print_screen#5
byte* print_screen#6
byte* print_screen#7
byte* print_screen#8
byte* print_screen#9
void print_set_screen(byte* print_set_screen::screen)
byte* print_set_screen::screen
byte* print_set_screen::screen#0
byte* print_set_screen::screen#1
byte* print_set_screen::screen#2
void print_str_at(byte* print_str_at::str , byte* print_str_at::at)
bool~ print_str_at::$0
byte* print_str_at::at
byte* print_str_at::at#0
byte* print_str_at::at#1
byte* print_str_at::at#2
byte* print_str_at::at#3
byte* print_str_at::at#4
byte* print_str_at::str
byte* print_str_at::str#0
byte* print_str_at::str#1
byte* print_str_at::str#2
byte* print_str_at::str#3
byte* print_str_at::str#4
void print_str_lines(byte* print_str_lines::str)
bool~ print_str_lines::$0
bool~ print_str_lines::$3
bool~ print_str_lines::$4
bool~ print_str_lines::$5
byte print_str_lines::ch
byte print_str_lines::ch#0
byte print_str_lines::ch#1
byte print_str_lines::ch#2
byte print_str_lines::ch#3
byte* print_str_lines::str
byte* print_str_lines::str#0
byte* print_str_lines::str#1
byte* print_str_lines::str#10
byte* print_str_lines::str#2
byte* print_str_lines::str#3
byte* print_str_lines::str#4
byte* print_str_lines::str#5
byte* print_str_lines::str#6
byte* print_str_lines::str#7
byte* print_str_lines::str#8
byte* print_str_lines::str#9
void render_preset_name(byte render_preset_name::idx)
bool~ render_preset_name::$0
bool~ render_preset_name::$1
bool~ render_preset_name::$10
const byte* render_preset_name::$12[$1f]  = "Standard Charset              "
const byte* render_preset_name::$13[$1f]  = "Extended Color Charset        "
const byte* render_preset_name::$14[$1f]  = "Standard Bitmap               "
const byte* render_preset_name::$15[$1f]  = "Multicolor Bitmap             "
const byte* render_preset_name::$16[$1f]  = "Hicolor Charset               "
const byte* render_preset_name::$17[$1f]  = "Hicolor Extended Color Charset"
const byte* render_preset_name::$18[$1f]  = "Twoplane Bitmap               "
const byte* render_preset_name::$19[$1f]  = "Chunky 8bpp                   "
bool~ render_preset_name::$2
const byte* render_preset_name::$20[$1f]  = "Sixs Fred                     "
const byte* render_preset_name::$21[$1f]  = "Sixs Fred 2                   "
const byte* render_preset_name::$22[$1f]  = "8bpp Pixel Cell               "
const byte* render_preset_name::$23[$1f]  = "Standard Charset              "
bool~ render_preset_name::$3
bool~ render_preset_name::$4
bool~ render_preset_name::$5
bool~ render_preset_name::$6
bool~ render_preset_name::$7
bool~ render_preset_name::$8
bool~ render_preset_name::$9
byte render_preset_name::idx
byte render_preset_name::idx#0
byte render_preset_name::idx#1
byte render_preset_name::idx#10
byte render_preset_name::idx#11
byte render_preset_name::idx#12
byte render_preset_name::idx#2
byte render_preset_name::idx#3
byte render_preset_name::idx#4
byte render_preset_name::idx#5
byte render_preset_name::idx#6
byte render_preset_name::idx#7
byte render_preset_name::idx#8
byte render_preset_name::idx#9
byte* render_preset_name::name
byte* render_preset_name::name#0
byte* render_preset_name::name#1
byte* render_preset_name::name#10
byte* render_preset_name::name#11
byte* render_preset_name::name#12
byte* render_preset_name::name#13
byte* render_preset_name::name#2
byte* render_preset_name::name#3
byte* render_preset_name::name#4
byte* render_preset_name::name#5
byte* render_preset_name::name#6
byte* render_preset_name::name#7
byte* render_preset_name::name#8
byte* render_preset_name::name#9
word sgn_u16(word sgn_u16::w)
byte~ sgn_u16::$0
number~ sgn_u16::$1
bool~ sgn_u16::$2
word sgn_u16::return
word sgn_u16::return#0
word sgn_u16::return#1
word sgn_u16::return#2
word sgn_u16::return#3
word sgn_u16::return#4
word sgn_u16::return#5
word sgn_u16::return#6
word sgn_u16::return#7
word sgn_u16::w
word sgn_u16::w#0
word sgn_u16::w#1
word sgn_u16::w#2

Fixing inline constructor with bitmap_plot::$2 = (byte)bitmap_plot_yhi[bitmap_plot::y#4] w= (byte)bitmap_plot_ylo[bitmap_plot::y#4]
Fixing inline constructor with form_field_ptr::$1 = (byte)form_line_hi[form_field_ptr::y#0] w= (byte)form_line_lo[form_field_ptr::y#0]
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 0 in 
Adding number conversion cast (unumber) 1 in 
Adding number conversion cast (unumber) 2 in 
Adding number conversion cast (unumber) 3 in 
Adding number conversion cast (unumber) 4 in 
Adding number conversion cast (unumber) 5 in 
Adding number conversion cast (unumber) 6 in 
Adding number conversion cast (unumber) 7 in 
Adding number conversion cast (unumber) 8 in 
Adding number conversion cast (unumber) 9 in 
Adding number conversion cast (unumber) $a in 
Adding number conversion cast (unumber) $b in 
Adding number conversion cast (unumber) $c in 
Adding number conversion cast (unumber) $d in 
Adding number conversion cast (unumber) $e in 
Adding number conversion cast (unumber) $f in 
Adding number conversion cast (unumber) $10 in 
Adding number conversion cast (unumber) $11 in 
Adding number conversion cast (unumber) $12 in 
Adding number conversion cast (unumber) $13 in 
Adding number conversion cast (unumber) $14 in 
Adding number conversion cast (unumber) $15 in 
Adding number conversion cast (unumber) $16 in 
Adding number conversion cast (unumber) $17 in 
Adding number conversion cast (unumber) $18 in 
Adding number conversion cast (unumber) $19 in 
Adding number conversion cast (unumber) $1a in 
Adding number conversion cast (unumber) $1b in 
Adding number conversion cast (unumber) $1c in 
Adding number conversion cast (unumber) $1d in 
Adding number conversion cast (unumber) $1e in 
Adding number conversion cast (unumber) $1f in 
Adding number conversion cast (unumber) $20 in 
Adding number conversion cast (unumber) $21 in 
Adding number conversion cast (unumber) $22 in 
Adding number conversion cast (unumber) $23 in 
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#3 > 0
Adding number conversion cast (unumber) 0 in print_str_lines::$3 = 0 != *print_str_lines::str#3
Adding number conversion cast (unumber) 0 in print_str_lines::$5 = 0 != print_str_lines::ch#0
Adding number conversion cast (unumber) 0 in print_str_lines::$4 = 0 != print_str_lines::ch#1
Adding number conversion cast (unumber) 0 in print_str_at::$0 = 0 != *print_str_at::str#2
Adding number conversion cast (unumber) $28 in print_ln::$0 = print_line_cursor#22 + $28
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Adding number conversion cast (unumber) $ff in *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = $ff
Adding number conversion cast (unumber) 0 in *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) = 0
Adding number conversion cast (unumber) 8 in keyboard_event_scan::$14 = keyboard_event_scan::keycode#3 + 8
Adding number conversion cast (unumber) keyboard_event_scan::$14 in keyboard_event_scan::$14 = keyboard_event_scan::keycode#3 + (unumber)8
Adding number conversion cast (unumber) 0 in keyboard_event_scan::$17 = keyboard_event_scan::$16 != 0
Adding number conversion cast (unumber) 8 in keyboard_event_scan::$19 = keyboard_events_size#19 != 8
Adding number conversion cast (unumber) 0 in keyboard_event_scan::$22 = keyboard_event_scan::event_type#0 == 0
Adding number conversion cast (unumber) $40 in keyboard_event_scan::$23 = keyboard_event_scan::keycode#5 | $40
Adding number conversion cast (unumber) keyboard_event_scan::$23 in keyboard_event_scan::$23 = keyboard_event_scan::keycode#5 | (unumber)$40
Adding number conversion cast (unumber) 0 in keyboard_modifiers#0 = 0
Adding number conversion cast (unumber) 0 in keyboard_event_scan::$1 = keyboard_event_scan::$0 != 0
Adding number conversion cast (unumber) 0 in keyboard_event_scan::$4 = keyboard_event_scan::$3 != 0
Adding number conversion cast (unumber) 0 in keyboard_event_scan::$7 = keyboard_event_scan::$6 != 0
Adding number conversion cast (unumber) 0 in keyboard_event_scan::$10 = keyboard_event_scan::$9 != 0
Adding number conversion cast (unumber) 3 in keyboard_event_pressed::$0 = keyboard_event_pressed::keycode#4 >> 3
Adding number conversion cast (unumber) 7 in keyboard_event_pressed::$1 = keyboard_event_pressed::keycode#4 & 7
Adding number conversion cast (unumber) keyboard_event_pressed::$1 in keyboard_event_pressed::$1 = keyboard_event_pressed::keycode#4 & (unumber)7
Adding number conversion cast (unumber) 0 in keyboard_event_get::$0 = keyboard_events_size#23 == 0
Adding number conversion cast (unumber) $ff in keyboard_event_get::return#0 = $ff
Adding number conversion cast (unumber) 1 in bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
Adding number conversion cast (unumber) 0 in bitmap_init::$0 = bitmap_init::bits#1 == 0
Adding number conversion cast (unumber) $80 in bitmap_init::bits#2 = $80
Adding number conversion cast (unumber) 7 in bitmap_init::$3 = bitmap_init::y#2 & 7
Adding number conversion cast (unumber) bitmap_init::$3 in bitmap_init::$3 = bitmap_init::y#2 & (unumber)7
Adding number conversion cast (unumber) bitmap_init::$5 in bitmap_init::$5 = bitmap_init::$3 | bitmap_init::$4
Adding number conversion cast (unumber) 7 in bitmap_init::$7 = bitmap_init::y#2 & 7
Adding number conversion cast (unumber) bitmap_init::$7 in bitmap_init::$7 = bitmap_init::y#2 & (unumber)7
Adding number conversion cast (unumber) 7 in bitmap_init::$8 = bitmap_init::$7 == 7
Adding number conversion cast (unumber) $28*8 in bitmap_init::$10 = bitmap_init::yoffs#3 + $28*8
Adding number conversion cast (unumber) $10 in bitmap_clear::$0 = bitmap_clear::fgcol#1 * $10
Adding number conversion cast (unumber) bitmap_clear::$0 in bitmap_clear::$0 = bitmap_clear::fgcol#1 * (unumber)$10
Adding number conversion cast (unumber) bitmap_clear::$1 in bitmap_clear::$1 = bitmap_clear::$0 + bitmap_clear::bgcol#1
Adding number conversion cast (unumber) 0 in memset::c#2 = 0
Adding number conversion cast (unumber) $fff8 in bitmap_plot::$0 = bitmap_plot::x#4 & $fff8
Adding number conversion cast (unumber) bitmap_plot::$0 in bitmap_plot::$0 = bitmap_plot::x#4 & (unumber)$fff8
Adding number conversion cast (unumber) 0 in bitmap_line::$4 = bitmap_line::dx#1 == 0
Adding number conversion cast (unumber) 0 in bitmap_line::$5 = bitmap_line::dy#0 == 0
Adding number conversion cast (unumber) 2 in bitmap_line::$20 = bitmap_line::dy#2 / 2
Adding number conversion cast (unumber) bitmap_line::$20 in bitmap_line::$20 = bitmap_line::dy#2 / (unumber)2
Adding number conversion cast (unumber) 2 in bitmap_line::$15 = bitmap_line::dx#3 / 2
Adding number conversion cast (unumber) bitmap_line::$15 in bitmap_line::$15 = bitmap_line::dx#3 / (unumber)2
Adding number conversion cast (unumber) $80 in abs_u16::$1 = abs_u16::$0 & $80
Adding number conversion cast (unumber) abs_u16::$1 in abs_u16::$1 = abs_u16::$0 & (unumber)$80
Adding number conversion cast (unumber) 0 in abs_u16::$3 = 0 != abs_u16::$1
Adding number conversion cast (unumber) $80 in sgn_u16::$1 = sgn_u16::$0 & $80
Adding number conversion cast (unumber) sgn_u16::$1 in sgn_u16::$1 = sgn_u16::$0 & (unumber)$80
Adding number conversion cast (unumber) 0 in sgn_u16::$2 = 0 != sgn_u16::$1
Adding number conversion cast (unumber) -1 in sgn_u16::return#2 = -1
Adding number conversion cast (unumber) 1 in sgn_u16::return#3 = 1
Adding number conversion cast (unumber) 0 in get_plane::$0 = get_plane::idx#2 == 0
Adding number conversion cast (unumber) 1 in get_plane::$1 = get_plane::idx#3 == 1
Adding number conversion cast (unumber) 2 in get_plane::$2 = get_plane::idx#4 == 2
Adding number conversion cast (unumber) 3 in get_plane::$3 = get_plane::idx#5 == 3
Adding number conversion cast (unumber) 4 in get_plane::$4 = get_plane::idx#6 == 4
Adding number conversion cast (unumber) 5 in get_plane::$5 = get_plane::idx#7 == 5
Adding number conversion cast (unumber) 6 in get_plane::$6 = get_plane::idx#8 == 6
Adding number conversion cast (unumber) 7 in get_plane::$7 = get_plane::idx#9 == 7
Adding number conversion cast (unumber) 8 in get_plane::$8 = get_plane::idx#10 == 8
Adding number conversion cast (unumber) 9 in get_plane::$9 = get_plane::idx#11 == 9
Adding number conversion cast (unumber) $a in get_plane::$10 = get_plane::idx#12 == $a
Adding number conversion cast (unumber) $b in get_plane::$11 = get_plane::idx#13 == $b
Adding number conversion cast (unumber) $c in get_plane::$12 = get_plane::idx#14 == $c
Adding number conversion cast (unumber) $d in get_plane::$13 = get_plane::idx#15 == $d
Adding number conversion cast (unumber) 0 in get_VICII_screen::$0 = get_VICII_screen::idx#2 == 0
Adding number conversion cast (unumber) 1 in get_VICII_screen::$1 = get_VICII_screen::idx#3 == 1
Adding number conversion cast (unumber) 2 in get_VICII_screen::$2 = get_VICII_screen::idx#4 == 2
Adding number conversion cast (unumber) 3 in get_VICII_screen::$3 = get_VICII_screen::idx#5 == 3
Adding number conversion cast (unumber) 4 in get_VICII_screen::$4 = get_VICII_screen::idx#6 == 4
Adding number conversion cast (unumber) 0 in get_VICII_charset::$0 = get_VICII_charset::idx#1 == 0
Adding number conversion cast (unumber) 1 in get_VICII_charset::$1 = get_VICII_charset::idx#2 == 1
Adding number conversion cast (unumber) 0 in apply_preset::$0 = apply_preset::idx#1 == 0
Adding number conversion cast (unumber) 1 in apply_preset::$1 = apply_preset::idx#2 == 1
Adding number conversion cast (unumber) 2 in apply_preset::$2 = apply_preset::idx#3 == 2
Adding number conversion cast (unumber) 3 in apply_preset::$3 = apply_preset::idx#4 == 3
Adding number conversion cast (unumber) 4 in apply_preset::$4 = apply_preset::idx#5 == 4
Adding number conversion cast (unumber) 5 in apply_preset::$5 = apply_preset::idx#6 == 5
Adding number conversion cast (unumber) 6 in apply_preset::$6 = apply_preset::idx#7 == 6
Adding number conversion cast (unumber) 7 in apply_preset::$7 = apply_preset::idx#8 == 7
Adding number conversion cast (unumber) 8 in apply_preset::$8 = apply_preset::idx#9 == 8
Adding number conversion cast (unumber) 9 in apply_preset::$9 = apply_preset::idx#10 == 9
Adding number conversion cast (unumber) $a in apply_preset::$10 = apply_preset::idx#11 == $a
Adding number conversion cast (unumber) 0 in render_preset_name::$0 = render_preset_name::idx#2 == 0
Adding number conversion cast (unumber) 1 in render_preset_name::$1 = render_preset_name::idx#3 == 1
Adding number conversion cast (unumber) 2 in render_preset_name::$2 = render_preset_name::idx#4 == 2
Adding number conversion cast (unumber) 3 in render_preset_name::$3 = render_preset_name::idx#5 == 3
Adding number conversion cast (unumber) 4 in render_preset_name::$4 = render_preset_name::idx#6 == 4
Adding number conversion cast (unumber) 5 in render_preset_name::$5 = render_preset_name::idx#7 == 5
Adding number conversion cast (unumber) 6 in render_preset_name::$6 = render_preset_name::idx#8 == 6
Adding number conversion cast (unumber) 7 in render_preset_name::$7 = render_preset_name::idx#9 == 7
Adding number conversion cast (unumber) 8 in render_preset_name::$8 = render_preset_name::idx#10 == 8
Adding number conversion cast (unumber) 9 in render_preset_name::$9 = render_preset_name::idx#11 == 9
Adding number conversion cast (unumber) $a in render_preset_name::$10 = render_preset_name::idx#12 == $a
Adding number conversion cast (unumber) $a in print_str_at::at#1 = FORM_SCREEN+$28*2+$a
Adding number conversion cast (unumber) $28*2 in print_str_at::at#1 = FORM_SCREEN+$28*2+(unumber)$a
Adding number conversion cast (unumber) 0 in gfx_mode::$0 = *form_ctrl_line != 0
Adding number conversion cast (unumber) 0 in gfx_mode::$2 = *form_ctrl_borof != 0
Adding number conversion cast (unumber) 0 in gfx_mode::$4 = *form_ctrl_hicol != 0
Adding number conversion cast (unumber) 0 in gfx_mode::$6 = *form_ctrl_overs != 0
Adding number conversion cast (unumber) 0 in gfx_mode::$8 = *form_ctrl_colof != 0
Adding number conversion cast (unumber) 0 in gfx_mode::$10 = *form_ctrl_chunk != 0
Adding number conversion cast (unumber) 3 in gfx_mode::VICII_control#0 = (byte)VICII_DEN|VICII_RSEL|3
Adding number conversion cast (unumber) 0 in gfx_mode::$12 = *form_ctrl_ecm != 0
Adding number conversion cast (unumber) 0 in gfx_mode::$14 = *form_ctrl_bmm != 0
Adding number conversion cast (unumber) 0 in gfx_mode::$16 = *form_ctrl_mcm != 0
Adding number conversion cast (unumber) $10 in gfx_mode::$18 = *form_a_start_hi * $10
Adding number conversion cast (unumber) gfx_mode::$18 in gfx_mode::$18 = *form_a_start_hi * (unumber)$10
Adding number conversion cast (unumber) gfx_mode::$19 in gfx_mode::$19 = gfx_mode::$18 | *form_a_start_lo
Adding number conversion cast (unumber) $10 in gfx_mode::$28 = *form_a_step_hi * $10
Adding number conversion cast (unumber) gfx_mode::$28 in gfx_mode::$28 = *form_a_step_hi * (unumber)$10
Adding number conversion cast (unumber) gfx_mode::$29 in gfx_mode::$29 = gfx_mode::$28 | *form_a_step_lo
Adding number conversion cast (unumber) $10 in gfx_mode::$30 = *form_a_mod_hi * $10
Adding number conversion cast (unumber) gfx_mode::$30 in gfx_mode::$30 = *form_a_mod_hi * (unumber)$10
Adding number conversion cast (unumber) gfx_mode::$31 in gfx_mode::$31 = gfx_mode::$30 | *form_a_mod_lo
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_MODULO_HI = 0
Adding number conversion cast (unumber) $10 in gfx_mode::$32 = *form_b_start_hi * $10
Adding number conversion cast (unumber) gfx_mode::$32 in gfx_mode::$32 = *form_b_start_hi * (unumber)$10
Adding number conversion cast (unumber) gfx_mode::$33 in gfx_mode::$33 = gfx_mode::$32 | *form_b_start_lo
Adding number conversion cast (unumber) $10 in gfx_mode::$42 = *form_b_step_hi * $10
Adding number conversion cast (unumber) gfx_mode::$42 in gfx_mode::$42 = *form_b_step_hi * (unumber)$10
Adding number conversion cast (unumber) gfx_mode::$43 in gfx_mode::$43 = gfx_mode::$42 | *form_b_step_lo
Adding number conversion cast (unumber) $10 in gfx_mode::$44 = *form_b_mod_hi * $10
Adding number conversion cast (unumber) gfx_mode::$44 in gfx_mode::$44 = *form_b_mod_hi * (unumber)$10
Adding number conversion cast (unumber) gfx_mode::$45 in gfx_mode::$45 = gfx_mode::$44 | *form_b_mod_lo
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_MODULO_HI = 0
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) 3^(byte)(word)VICII_SCREEN0/$4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)VICII_SCREEN0/$4000
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) 3^(byte)(word)VICII_SCREEN0/$4000
Adding number conversion cast (unumber) $4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) (unumber)3^(byte)(word)VICII_SCREEN0/$4000
Adding number conversion cast (unumber) $3fff in gfx_mode::$47 = gfx_mode::$82 & $3fff
Adding number conversion cast (unumber) gfx_mode::$47 in gfx_mode::$47 = gfx_mode::$82 & (unumber)$3fff
Adding number conversion cast (unumber) $40 in gfx_mode::$48 = gfx_mode::$47 / $40
Adding number conversion cast (unumber) gfx_mode::$48 in gfx_mode::$48 = gfx_mode::$47 / (unumber)$40
Adding number conversion cast (unumber) $3fff in gfx_mode::$50 = gfx_mode::$83 & $3fff
Adding number conversion cast (unumber) gfx_mode::$50 in gfx_mode::$50 = gfx_mode::$83 & (unumber)$3fff
Adding number conversion cast (unumber) gfx_mode::$51 in gfx_mode::$51 = > gfx_mode::$50
Adding number conversion cast (unumber) 4 in gfx_mode::$52 = gfx_mode::$51 / 4
Adding number conversion cast (unumber) gfx_mode::$52 in gfx_mode::$52 = gfx_mode::$51 / (unumber)4
Adding number conversion cast (unumber) gfx_mode::$53 in gfx_mode::$53 = gfx_mode::$84 | gfx_mode::$52
Adding number conversion cast (unumber) 0 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0
Adding number conversion cast (unumber) $10 in gfx_mode::$55 = *form_VICII_bg0_hi * $10
Adding number conversion cast (unumber) gfx_mode::$55 in gfx_mode::$55 = *form_VICII_bg0_hi * (unumber)$10
Adding number conversion cast (unumber) gfx_mode::$56 in gfx_mode::$56 = gfx_mode::$55 | *form_VICII_bg0_lo
Adding number conversion cast (unumber) $10 in gfx_mode::$57 = *form_VICII_bg1_hi * $10
Adding number conversion cast (unumber) gfx_mode::$57 in gfx_mode::$57 = *form_VICII_bg1_hi * (unumber)$10
Adding number conversion cast (unumber) gfx_mode::$58 in gfx_mode::$58 = gfx_mode::$57 | *form_VICII_bg1_lo
Adding number conversion cast (unumber) $10 in gfx_mode::$59 = *form_VICII_bg2_hi * $10
Adding number conversion cast (unumber) gfx_mode::$59 in gfx_mode::$59 = *form_VICII_bg2_hi * (unumber)$10
Adding number conversion cast (unumber) gfx_mode::$60 in gfx_mode::$60 = gfx_mode::$59 | *form_VICII_bg2_lo
Adding number conversion cast (unumber) $10 in gfx_mode::$61 = *form_VICII_bg3_hi * $10
Adding number conversion cast (unumber) gfx_mode::$61 in gfx_mode::$61 = *form_VICII_bg3_hi * (unumber)$10
Adding number conversion cast (unumber) gfx_mode::$62 in gfx_mode::$62 = gfx_mode::$61 | *form_VICII_bg3_lo
Adding number conversion cast (unumber) 0 in gfx_mode::$63 = *form_dtv_palet == 0
Adding number conversion cast (unumber) $ff in gfx_mode::$77 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $ff
Adding number conversion cast (unumber) $32 in *PROCPORT = $32
Adding number conversion cast (unumber) $37 in *PROCPORT = $37
Adding number conversion cast (unumber) $f in gfx_init_screen0::$0 = gfx_init_screen0::cy#2 & $f
Adding number conversion cast (unumber) gfx_init_screen0::$0 in gfx_init_screen0::$0 = gfx_init_screen0::cy#2 & (unumber)$f
Adding number conversion cast (unumber) $10 in gfx_init_screen0::$1 = gfx_init_screen0::$0 * $10
Adding number conversion cast (unumber) gfx_init_screen0::$1 in gfx_init_screen0::$1 = gfx_init_screen0::$0 * (unumber)$10
Adding number conversion cast (unumber) $f in gfx_init_screen0::$2 = gfx_init_screen0::cx#2 & $f
Adding number conversion cast (unumber) gfx_init_screen0::$2 in gfx_init_screen0::$2 = gfx_init_screen0::cx#2 & (unumber)$f
Adding number conversion cast (unumber) gfx_init_screen0::$3 in gfx_init_screen0::$3 = gfx_init_screen0::$1 | gfx_init_screen0::$2
Adding number conversion cast (unumber) $f in gfx_init_screen1::$1 = gfx_init_screen1::$0 & $f
Adding number conversion cast (unumber) gfx_init_screen1::$1 in gfx_init_screen1::$1 = gfx_init_screen1::$0 & (unumber)$f
Adding number conversion cast (unumber) $f in gfx_init_screen2::$1 = gfx_init_screen2::$0 & $f
Adding number conversion cast (unumber) gfx_init_screen2::$1 in gfx_init_screen2::$1 = gfx_init_screen2::$0 & (unumber)$f
Adding number conversion cast (unumber) $f in gfx_init_screen2::$2 = $f - gfx_init_screen2::col#0
Adding number conversion cast (unumber) gfx_init_screen2::$2 in gfx_init_screen2::$2 = (unumber)$f - gfx_init_screen2::col#0
Adding number conversion cast (unumber) $10 in gfx_init_screen2::$3 = gfx_init_screen2::col#0 * $10
Adding number conversion cast (unumber) gfx_init_screen2::$3 in gfx_init_screen2::$3 = gfx_init_screen2::col#0 * (unumber)$10
Adding number conversion cast (unumber) gfx_init_screen2::$4 in gfx_init_screen2::$4 = gfx_init_screen2::$3 | gfx_init_screen2::col2#0
Adding number conversion cast (unumber) 3 in gfx_init_screen3::$0 = gfx_init_screen3::cx#2 & 3
Adding number conversion cast (unumber) gfx_init_screen3::$0 in gfx_init_screen3::$0 = gfx_init_screen3::cx#2 & (unumber)3
Adding number conversion cast (unumber) $10 in gfx_init_screen3::$1 = gfx_init_screen3::$0 * $10
Adding number conversion cast (unumber) gfx_init_screen3::$1 in gfx_init_screen3::$1 = gfx_init_screen3::$0 * (unumber)$10
Adding number conversion cast (unumber) 3 in gfx_init_screen3::$2 = gfx_init_screen3::cy#2 & 3
Adding number conversion cast (unumber) gfx_init_screen3::$2 in gfx_init_screen3::$2 = gfx_init_screen3::cy#2 & (unumber)3
Adding number conversion cast (unumber) gfx_init_screen3::$3 in gfx_init_screen3::$3 = gfx_init_screen3::$1 | gfx_init_screen3::$2
Adding number conversion cast (unumber) 0 in *gfx_init_screen4::ch#2 = 0
Adding number conversion cast (unumber) 1 in gfx_init_VICII_bitmap::$3 = gfx_init_VICII_bitmap::l#3 + 1
Adding number conversion cast (unumber) gfx_init_VICII_bitmap::$3 in gfx_init_VICII_bitmap::$3 = gfx_init_VICII_bitmap::l#3 + (unumber)1
Adding number conversion cast (unumber) 1 in gfx_init_VICII_bitmap::$4 = gfx_init_VICII_bitmap::l#3 + 1
Adding number conversion cast (unumber) gfx_init_VICII_bitmap::$4 in gfx_init_VICII_bitmap::$4 = gfx_init_VICII_bitmap::l#3 + (unumber)1
Adding number conversion cast (unumber) $4000 in gfx_init_plane_8bppchunky::gfxbCpuBank#0 = (byte)PLANE_8BPP_CHUNKY/$4000
Adding number conversion cast (unumber) $8000 in gfx_init_plane_8bppchunky::$2 = gfx_init_plane_8bppchunky::gfxb#3 == $8000
Adding number conversion cast (unumber) $4000 in gfx_init_plane_horisontal::gfxbCpuBank#0 = (byte)PLANE_HORISONTAL/$4000
Adding number conversion cast (unumber) $3fff in gfx_init_plane_horisontal::gfxa#0 = (byte*)$4000+PLANE_HORISONTAL&$3fff
Adding number conversion cast (unumber) 4 in gfx_init_plane_horisontal::$2 = gfx_init_plane_horisontal::ay#2 & 4
Adding number conversion cast (unumber) gfx_init_plane_horisontal::$2 in gfx_init_plane_horisontal::$2 = gfx_init_plane_horisontal::ay#2 & (unumber)4
Adding number conversion cast (unumber) 0 in gfx_init_plane_horisontal::$3 = gfx_init_plane_horisontal::$2 == 0
Adding number conversion cast (unumber) 0 in *gfx_init_plane_horisontal::gfxa#3 = 0
Adding number conversion cast (unumber) $ff in *gfx_init_plane_horisontal::gfxa#4 = $ff
Adding number conversion cast (unumber) $4000 in gfx_init_plane_horisontal2::gfxbCpuBank#0 = (byte)PLANE_HORISONTAL2/$4000
Adding number conversion cast (unumber) $3fff in gfx_init_plane_horisontal2::gfxa#0 = (byte*)$4000+PLANE_HORISONTAL2&$3fff
Adding number conversion cast (unumber) 2 in gfx_init_plane_horisontal2::$2 = gfx_init_plane_horisontal2::ay#2 / 2
Adding number conversion cast (unumber) gfx_init_plane_horisontal2::$2 in gfx_init_plane_horisontal2::$2 = gfx_init_plane_horisontal2::ay#2 / (unumber)2
Adding number conversion cast (unumber) 3 in gfx_init_plane_horisontal2::$3 = gfx_init_plane_horisontal2::$2 & 3
Adding number conversion cast (unumber) gfx_init_plane_horisontal2::$3 in gfx_init_plane_horisontal2::$3 = gfx_init_plane_horisontal2::$2 & (unumber)3
Adding number conversion cast (unumber) $4000 in gfx_init_plane_vertical::gfxbCpuBank#0 = (byte)PLANE_VERTICAL/$4000
Adding number conversion cast (unumber) $3fff in gfx_init_plane_vertical::gfxb#0 = (byte*)$4000+PLANE_VERTICAL&$3fff
Adding number conversion cast (unumber) $f in *gfx_init_plane_vertical::gfxb#2 = $f
Adding number conversion cast (unumber) $4000 in gfx_init_plane_charset8::gfxbCpuBank#0 = (byte)PLANE_CHARSET8/$4000
Adding number conversion cast (unumber) $3fff in gfx_init_plane_charset8::gfxa#0 = (byte*)$4000+PLANE_CHARSET8&$3fff
Adding number conversion cast (unumber) $80 in gfx_init_plane_charset8::$2 = gfx_init_plane_charset8::bits#2 & $80
Adding number conversion cast (unumber) gfx_init_plane_charset8::$2 in gfx_init_plane_charset8::$2 = gfx_init_plane_charset8::bits#2 & (unumber)$80
Adding number conversion cast (unumber) 0 in gfx_init_plane_charset8::$3 = gfx_init_plane_charset8::$2 != 0
Adding number conversion cast (unumber) 2 in gfx_init_plane_charset8::$5 = gfx_init_plane_charset8::bits#3 * 2
Adding number conversion cast (unumber) gfx_init_plane_charset8::$5 in gfx_init_plane_charset8::$5 = gfx_init_plane_charset8::bits#3 * (unumber)2
Adding number conversion cast (unumber) $1b in gfx_init_plane_fill::fill#0 = $1b
Adding number conversion cast (unumber) 0 in gfx_init_plane_fill::fill#1 = 0
Adding number conversion cast (unumber) $ff in gfx_init_plane_fill::fill#2 = $ff
Adding number conversion cast (unumber) 4 in gfx_init_plane_fill::$0 = gfx_init_plane_fill::plane_addr#3 * 4
Adding number conversion cast (unumber) gfx_init_plane_fill::$0 in gfx_init_plane_fill::$0 = gfx_init_plane_fill::plane_addr#3 * (unumber)4
Adding number conversion cast (unumber) gfx_init_plane_fill::$1 in gfx_init_plane_fill::$1 = > gfx_init_plane_fill::$0
Adding number conversion cast (unumber) gfx_init_plane_fill::$2 in gfx_init_plane_fill::$2 = < gfx_init_plane_fill::$1
Adding number conversion cast (unumber) $3fff in gfx_init_plane_fill::$5 = gfx_init_plane_fill::$4 & $3fff
Adding number conversion cast (unumber) gfx_init_plane_fill::$5 in gfx_init_plane_fill::$5 = gfx_init_plane_fill::$4 & (unumber)$3fff
Adding number conversion cast (unumber) $4000 in gfx_init_plane_fill::$6 = $4000 + gfx_init_plane_fill::$5
Adding number conversion cast (unumber) gfx_init_plane_fill::$6 in gfx_init_plane_fill::$6 = (unumber)$4000 + gfx_init_plane_fill::$5
Adding number conversion cast (unumber) $10000 in *DTV_GRAPHICS_VIC_BANK = (byte)(dword)FORM_CHARSET/$10000
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) 3^(byte)(word)FORM_CHARSET/$4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)FORM_CHARSET/$4000
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) 3^(byte)(word)FORM_CHARSET/$4000
Adding number conversion cast (unumber) $4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) (unumber)3^(byte)(word)FORM_CHARSET/$4000
Adding number conversion cast (unumber) 0 in *DTV_CONTROL = 0
Adding number conversion cast (unumber) VICII_DEN|VICII_RSEL|3 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = VICII_DEN|VICII_RSEL|3
Adding number conversion cast (unumber) 3 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = ((unumber)) VICII_DEN|VICII_RSEL|3
Adding number conversion cast (unumber) $3fff in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = (byte)(word)FORM_SCREEN&$3fff/$40|(word)FORM_CHARSET&$3fff/$400
Adding number conversion cast (unumber) $3fff in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = (byte)(word)FORM_SCREEN&(unumber)$3fff/$40|(word)FORM_CHARSET&$3fff/$400
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_START_HI = 0
Adding number conversion cast (unumber) 0 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0
Adding number conversion cast (unumber) 0 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0
Adding number conversion cast (unumber) $ff in form_mode::$10 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $ff
Adding number conversion cast (unumber) 0 in form_mode::$12 = form_mode::$11 != 0
Adding number conversion cast (unumber) $28 in form_set_screen::$2 = form_set_screen::line#2 + $28
Adding number conversion cast (snumber) 0 in form_control::$1 = form_cursor_count#4 < 0
Adding number conversion cast (snumber) FORM_CURSOR_BLINK/2 in form_control::$3 = form_cursor_count#16 < FORM_CURSOR_BLINK/2
Adding number conversion cast (snumber) 2 in form_control::$3 = form_cursor_count#16 < (snumber)FORM_CURSOR_BLINK/2
Adding number conversion cast (unumber) $80 in form_control::$13 = *form_control::field#1 | $80
Adding number conversion cast (unumber) form_control::$13 in form_control::$13 = *form_control::field#1 | (unumber)$80
Adding number conversion cast (unumber) $7f in form_control::$12 = *form_control::field#2 & $7f
Adding number conversion cast (unumber) form_control::$12 in form_control::$12 = *form_control::field#2 & (unumber)$7f
Adding number conversion cast (unumber) $7f in form_control::$14 = *form_control::field#3 & $7f
Adding number conversion cast (unumber) form_control::$14 in form_control::$14 = *form_control::field#3 & (unumber)$7f
Adding number conversion cast (unumber) 0 in form_control::$16 = form_control::$15 == 0
Adding number conversion cast (unumber) $ff in form_control::$17 = form_field_idx#5 == $ff
Adding number conversion cast (unumber) 1 in form_control::$19 = form_fields_cnt - 1
Adding number conversion cast (unumber) form_control::$19 in form_control::$19 = form_fields_cnt - (unumber)1
Adding number conversion cast (snumber) FORM_CURSOR_BLINK/2 in form_cursor_count#6 = FORM_CURSOR_BLINK/2
Adding number conversion cast (snumber) 2 in form_cursor_count#6 = ((snumber)) FORM_CURSOR_BLINK/2
Adding number conversion cast (unumber) 0 in form_control::return#1 = 0
Adding number conversion cast (unumber) 0 in form_field_idx#7 = 0
Adding number conversion cast (unumber) 0 in form_control::$23 = form_control::$22 == 0
Adding number conversion cast (unumber) $ff in form_control::$24 = form_fields_val[form_field_idx#21] == $ff
Adding number conversion cast (unumber) 0 in form_control::return#3 = 0
Adding number conversion cast (unumber) 0 in form_fields_val[form_field_idx#24] = 0
Adding number conversion cast (unumber) 0 in form_control::return#4 = 0
Adding number conversion cast (unumber) $ff in form_control::return#5 = $ff
Adding number conversion cast (snumber) 2 in form_cursor_count#8 = (signed byte)FORM_CURSOR_BLINK/2
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) $4000 in gfx_init_plane_horisontal::gfxa#0 = (byte*)$4000+PLANE_HORISONTAL&(unumber)$3fff
Adding number conversion cast (unumber) $4000 in gfx_init_plane_horisontal2::gfxa#0 = (byte*)$4000+PLANE_HORISONTAL2&(unumber)$3fff
Adding number conversion cast (unumber) $4000 in gfx_init_plane_vertical::gfxb#0 = (byte*)$4000+PLANE_VERTICAL&(unumber)$3fff
Adding number conversion cast (unumber) $4000 in gfx_init_plane_charset8::gfxa#0 = (byte*)$4000+PLANE_CHARSET8&(unumber)$3fff
Adding number conversion cast (unumber) $40 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = (byte)(word)FORM_SCREEN&(unumber)$3fff/$40|(word)FORM_CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $400 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = (byte)(word)FORM_SCREEN&(unumber)$3fff/(unumber)$40|(word)FORM_CHARSET&(unumber)$3fff/$400
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memset::dst#0 = (byte*)memset::str#4
Inlining cast memset::num#0 = (unumber)$3e8
Inlining cast *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)$ff
Inlining cast *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) = (unumber)0
Inlining cast keyboard_modifiers#0 = (unumber)0
Inlining cast keyboard_event_get::return#0 = (unumber)$ff
Inlining cast bitmap_init::bits#2 = (unumber)$80
Inlining cast memset::c#2 = (unumber)0
Inlining cast sgn_u16::return#2 = (unumber)-1
Inlining cast sgn_u16::return#3 = (unumber)1
Inlining cast *DTV_PLANEA_MODULO_HI = (unumber)0
Inlining cast *DTV_PLANEB_MODULO_HI = (unumber)0
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = (unumber)(unumber)3^(byte)(word)VICII_SCREEN0/(unumber)$4000
Inlining cast *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = (unumber)0
Inlining cast *PROCPORT = (unumber)$32
Inlining cast *PROCPORT = (unumber)$37
Inlining cast *gfx_init_screen4::ch#2 = (unumber)0
Inlining cast gfx_init_plane_8bppchunky::gfxb#2 = (byte*)$4000
Inlining cast *gfx_init_plane_horisontal::gfxa#3 = (unumber)0
Inlining cast *gfx_init_plane_horisontal::gfxa#4 = (unumber)$ff
Inlining cast *gfx_init_plane_vertical::gfxb#2 = (unumber)$f
Inlining cast gfx_init_plane_fill::fill#0 = (unumber)$1b
Inlining cast gfx_init_plane_fill::fill#1 = (unumber)0
Inlining cast gfx_init_plane_fill::fill#2 = (unumber)$ff
Inlining cast gfx_init_plane_fill::gfxb#0 = (byte*)gfx_init_plane_fill::$6
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = (unumber)(unumber)3^(byte)(word)FORM_CHARSET/(unumber)$4000
Inlining cast *DTV_CONTROL = (unumber)0
Inlining cast *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = (unumber)VICII_DEN|VICII_RSEL|(unumber)3
Inlining cast *DTV_PLANEA_START_HI = (unumber)0
Inlining cast *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = (unumber)0
Inlining cast *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = (unumber)0
Inlining cast form_cursor_count#6 = (snumber)FORM_CURSOR_BLINK/(snumber)2
Inlining cast form_control::return#1 = (unumber)0
Inlining cast form_field_idx#7 = (unumber)0
Inlining cast form_control::return#3 = (unumber)0
Inlining cast form_fields_val[form_field_idx#24] = (unumber)0
Inlining cast form_control::return#4 = (unumber)0
Inlining cast form_control::return#5 = (unumber)$ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53270
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (byte*) 53311
Simplifying constant pointer cast (byte*) 53308
Simplifying constant pointer cast (byte*) 53760
Simplifying constant pointer cast (byte*) 53306
Simplifying constant pointer cast (byte*) 53307
Simplifying constant pointer cast (byte*) 53317
Simplifying constant pointer cast (byte*) 53318
Simplifying constant pointer cast (byte*) 53304
Simplifying constant pointer cast (byte*) 53305
Simplifying constant pointer cast (byte*) 53321
Simplifying constant pointer cast (byte*) 53322
Simplifying constant pointer cast (byte*) 53323
Simplifying constant pointer cast (byte*) 53324
Simplifying constant pointer cast (byte*) 53319
Simplifying constant pointer cast (byte*) 53320
Simplifying constant pointer cast (byte*) 53302
Simplifying constant pointer cast (byte*) 53303
Simplifying constant pointer cast (byte*) 53309
Simplifying constant pointer cast (byte*) 255
Simplifying constant pointer cast (byte*) 16384
Simplifying constant pointer cast (byte*) 17408
Simplifying constant pointer cast (byte*) 18432
Simplifying constant pointer cast (byte*) 19456
Simplifying constant pointer cast (byte*) 20480
Simplifying constant pointer cast (byte*) 22528
Simplifying constant pointer cast (byte*) 24576
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 6144
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $a
Simplifying constant integer cast $b
Simplifying constant integer cast $c
Simplifying constant integer cast $d
Simplifying constant integer cast $e
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $11
Simplifying constant integer cast $12
Simplifying constant integer cast $13
Simplifying constant integer cast $14
Simplifying constant integer cast $15
Simplifying constant integer cast $16
Simplifying constant integer cast $17
Simplifying constant integer cast $18
Simplifying constant integer cast $19
Simplifying constant integer cast $1a
Simplifying constant integer cast $1b
Simplifying constant integer cast $1c
Simplifying constant integer cast $1d
Simplifying constant integer cast $1e
Simplifying constant integer cast $1f
Simplifying constant integer cast $20
Simplifying constant integer cast $21
Simplifying constant integer cast $22
Simplifying constant integer cast $23
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $3e8
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast bitmap_plot_yhi[bitmap_plot::y#4]
Simplifying constant integer cast bitmap_plot_ylo[bitmap_plot::y#4]
Simplifying constant integer cast $fff8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast PLANE_8BPP_CHUNKY
Simplifying constant integer cast 7
Simplifying constant integer cast PLANE_HORISONTAL
Simplifying constant integer cast 8
Simplifying constant integer cast PLANE_VERTICAL
Simplifying constant integer cast 9
Simplifying constant integer cast PLANE_HORISONTAL2
Simplifying constant integer cast $a
Simplifying constant integer cast PLANE_VERTICAL2
Simplifying constant integer cast $b
Simplifying constant integer cast PLANE_CHARSET8
Simplifying constant integer cast $c
Simplifying constant integer cast PLANE_BLANK
Simplifying constant integer cast $d
Simplifying constant integer cast PLANE_FULL
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $a
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)3^(byte)(word)VICII_SCREEN0/(unumber)$4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $32
Simplifying constant integer cast $37
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast 3
Simplifying constant integer cast $10
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $4000
Simplifying constant pointer cast (byte*) 16384
Simplifying constant integer cast $8000
Simplifying constant pointer cast (byte*) 16384
Simplifying constant integer cast $4000
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $4000
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast $f
Simplifying constant integer cast $4000
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $1b
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 4
Simplifying constant integer cast $3fff
Simplifying constant integer cast $4000
Simplifying constant integer cast $10000
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)3^(byte)(word)FORM_CHARSET/(unumber)$4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast 0
Simplifying constant integer cast VICII_DEN|VICII_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast form_line_hi[form_field_ptr::y#0]
Simplifying constant integer cast form_line_lo[form_field_ptr::y#0]
Simplifying constant integer cast 0
Simplifying constant integer cast FORM_CURSOR_BLINK/(snumber)2
Simplifying constant integer cast 2
Simplifying constant integer cast $80
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast FORM_CURSOR_BLINK/(snumber)2
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $d
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $11
Finalized unsigned number type (byte) $12
Finalized unsigned number type (byte) $13
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) $16
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $1a
Finalized unsigned number type (byte) $1b
Finalized unsigned number type (byte) $1c
Finalized unsigned number type (byte) $1d
Finalized unsigned number type (byte) $1e
Finalized unsigned number type (byte) $1f
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $21
Finalized unsigned number type (byte) $22
Finalized unsigned number type (byte) $23
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $fff8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) -1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $d
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $40
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $32
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $8000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $1b
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $4000
Finalized unsigned number type (dword) $10000
Finalized unsigned number type (word) $400
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $4000
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $40
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 2
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized signed number type (signed byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in keyboard_event_scan::$14 = keyboard_event_scan::keycode#3 + 8
Inferred type updated to byte in keyboard_event_scan::$23 = keyboard_event_scan::keycode#5 | $40
Inferred type updated to byte in keyboard_event_pressed::$1 = keyboard_event_pressed::keycode#4 & 7
Inferred type updated to byte in bitmap_init::$3 = bitmap_init::y#2 & 7
Inferred type updated to byte in bitmap_init::$5 = bitmap_init::$3 | bitmap_init::$4
Inferred type updated to byte in bitmap_init::$7 = bitmap_init::y#2 & 7
Inferred type updated to byte in bitmap_clear::$0 = bitmap_clear::fgcol#1 * $10
Inferred type updated to byte in bitmap_clear::$1 = bitmap_clear::$0 + bitmap_clear::bgcol#1
Inferred type updated to word in bitmap_plot::$0 = bitmap_plot::x#4 & $fff8
Inferred type updated to word in bitmap_line::$20 = bitmap_line::dy#2 / 2
Inferred type updated to word in bitmap_line::$15 = bitmap_line::dx#3 / 2
Inferred type updated to byte in abs_u16::$1 = abs_u16::$0 & $80
Inferred type updated to byte in sgn_u16::$1 = sgn_u16::$0 & $80
Inferred type updated to byte in gfx_mode::$18 = *form_a_start_hi * $10
Inferred type updated to byte in gfx_mode::$19 = gfx_mode::$18 | *form_a_start_lo
Inferred type updated to byte in gfx_mode::$28 = *form_a_step_hi * $10
Inferred type updated to byte in gfx_mode::$29 = gfx_mode::$28 | *form_a_step_lo
Inferred type updated to byte in gfx_mode::$30 = *form_a_mod_hi * $10
Inferred type updated to byte in gfx_mode::$31 = gfx_mode::$30 | *form_a_mod_lo
Inferred type updated to byte in gfx_mode::$32 = *form_b_start_hi * $10
Inferred type updated to byte in gfx_mode::$33 = gfx_mode::$32 | *form_b_start_lo
Inferred type updated to byte in gfx_mode::$42 = *form_b_step_hi * $10
Inferred type updated to byte in gfx_mode::$43 = gfx_mode::$42 | *form_b_step_lo
Inferred type updated to byte in gfx_mode::$44 = *form_b_mod_hi * $10
Inferred type updated to byte in gfx_mode::$45 = gfx_mode::$44 | *form_b_mod_lo
Inferred type updated to word in gfx_mode::$47 = gfx_mode::$82 & $3fff
Inferred type updated to word in gfx_mode::$48 = gfx_mode::$47 / $40
Inferred type updated to word in gfx_mode::$50 = gfx_mode::$83 & $3fff
Inferred type updated to byte in gfx_mode::$51 = > gfx_mode::$50
Inferred type updated to byte in gfx_mode::$52 = gfx_mode::$51 / 4
Inferred type updated to byte in gfx_mode::$53 = gfx_mode::$84 | gfx_mode::$52
Inferred type updated to byte in gfx_mode::$55 = *form_VICII_bg0_hi * $10
Inferred type updated to byte in gfx_mode::$56 = gfx_mode::$55 | *form_VICII_bg0_lo
Inferred type updated to byte in gfx_mode::$57 = *form_VICII_bg1_hi * $10
Inferred type updated to byte in gfx_mode::$58 = gfx_mode::$57 | *form_VICII_bg1_lo
Inferred type updated to byte in gfx_mode::$59 = *form_VICII_bg2_hi * $10
Inferred type updated to byte in gfx_mode::$60 = gfx_mode::$59 | *form_VICII_bg2_lo
Inferred type updated to byte in gfx_mode::$61 = *form_VICII_bg3_hi * $10
Inferred type updated to byte in gfx_mode::$62 = gfx_mode::$61 | *form_VICII_bg3_lo
Inferred type updated to byte in gfx_init_screen0::$0 = gfx_init_screen0::cy#2 & $f
Inferred type updated to byte in gfx_init_screen0::$1 = gfx_init_screen0::$0 * $10
Inferred type updated to byte in gfx_init_screen0::$2 = gfx_init_screen0::cx#2 & $f
Inferred type updated to byte in gfx_init_screen0::$3 = gfx_init_screen0::$1 | gfx_init_screen0::$2
Inferred type updated to byte in gfx_init_screen1::$1 = gfx_init_screen1::$0 & $f
Inferred type updated to byte in gfx_init_screen2::$1 = gfx_init_screen2::$0 & $f
Inferred type updated to byte in gfx_init_screen2::$2 = $f - gfx_init_screen2::col#0
Inferred type updated to byte in gfx_init_screen2::$3 = gfx_init_screen2::col#0 * $10
Inferred type updated to byte in gfx_init_screen2::$4 = gfx_init_screen2::$3 | gfx_init_screen2::col2#0
Inferred type updated to byte in gfx_init_screen3::$0 = gfx_init_screen3::cx#2 & 3
Inferred type updated to byte in gfx_init_screen3::$1 = gfx_init_screen3::$0 * $10
Inferred type updated to byte in gfx_init_screen3::$2 = gfx_init_screen3::cy#2 & 3
Inferred type updated to byte in gfx_init_screen3::$3 = gfx_init_screen3::$1 | gfx_init_screen3::$2
Inferred type updated to byte in gfx_init_VICII_bitmap::$3 = gfx_init_VICII_bitmap::l#3 + 1
Inferred type updated to byte in gfx_init_VICII_bitmap::$4 = gfx_init_VICII_bitmap::l#3 + 1
Inferred type updated to byte in gfx_init_plane_horisontal::$2 = gfx_init_plane_horisontal::ay#2 & 4
Inferred type updated to byte in gfx_init_plane_horisontal2::$2 = gfx_init_plane_horisontal2::ay#2 / 2
Inferred type updated to byte in gfx_init_plane_horisontal2::$3 = gfx_init_plane_horisontal2::$2 & 3
Inferred type updated to byte in gfx_init_plane_charset8::$2 = gfx_init_plane_charset8::bits#2 & $80
Inferred type updated to byte in gfx_init_plane_charset8::$5 = gfx_init_plane_charset8::bits#3 * 2
Inferred type updated to dword in gfx_init_plane_fill::$0 = gfx_init_plane_fill::plane_addr#3 * 4
Inferred type updated to word in gfx_init_plane_fill::$1 = > gfx_init_plane_fill::$0
Inferred type updated to byte in gfx_init_plane_fill::$2 = < gfx_init_plane_fill::$1
Inferred type updated to word in gfx_init_plane_fill::$5 = gfx_init_plane_fill::$4 & $3fff
Inferred type updated to word in gfx_init_plane_fill::$6 = $4000 + gfx_init_plane_fill::$5
Inferred type updated to byte in form_control::$13 = *form_control::field#1 | $80
Inferred type updated to byte in form_control::$12 = *form_control::field#2 & $7f
Inferred type updated to byte in form_control::$14 = *form_control::field#3 & $7f
Inferred type updated to byte in form_control::$19 = form_fields_cnt - 1
Adding pointer type conversion cast (byte*) bitmap_plot::$2 in bitmap_plot::$2 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4]
Adding pointer type conversion cast (byte*) form_field_ptr::$1 in form_field_ptr::$1 = form_line_hi[form_field_ptr::y#0] w= form_line_lo[form_field_ptr::y#0]
Successful SSA optimization PassNAddTypeConversionAssignment
Inversing boolean not [6] memset::$1 = memset::num#3 <= 0 from [5] memset::$0 = memset::num#3 > 0
Inversing boolean not [32] print_str_lines::$0 = 0 == print_str_lines::ch#0 from [31] print_str_lines::$5 = 0 != print_str_lines::ch#0
Inversing boolean not [136] keyboard_event_scan::$18 = keyboard_event_scan::$16 == 0 from [135] keyboard_event_scan::$17 = keyboard_event_scan::$16 != 0
Inversing boolean not [145] keyboard_event_scan::$20 = keyboard_events_size#19 == 8 from [144] keyboard_event_scan::$19 = keyboard_events_size#19 != 8
Inversing boolean not [169] keyboard_event_scan::$2 = keyboard_event_scan::$0 == 0 from [168] keyboard_event_scan::$1 = keyboard_event_scan::$0 != 0
Inversing boolean not [178] keyboard_event_scan::$5 = keyboard_event_scan::$3 == 0 from [177] keyboard_event_scan::$4 = keyboard_event_scan::$3 != 0
Inversing boolean not [190] keyboard_event_scan::$8 = keyboard_event_scan::$6 == 0 from [189] keyboard_event_scan::$7 = keyboard_event_scan::$6 != 0
Inversing boolean not [202] keyboard_event_scan::$11 = keyboard_event_scan::$9 == 0 from [201] keyboard_event_scan::$10 = keyboard_event_scan::$9 != 0
Inversing boolean not [244] bitmap_init::$1 = bitmap_init::bits#1 != 0 from [243] bitmap_init::$0 = bitmap_init::bits#1 == 0
Inversing boolean not [264] bitmap_init::$9 = bitmap_init::$7 != 7 from [263] bitmap_init::$8 = bitmap_init::$7 == 7
Inversing boolean not [360] bitmap_line::$18 = bitmap_line::dy#3 >= bitmap_line::e#1 from [359] bitmap_line::$17 = bitmap_line::dy#3 < bitmap_line::e#1
Inversing boolean not [380] bitmap_line::$23 = bitmap_line::dx#5 >= bitmap_line::e1#1 from [379] bitmap_line::$22 = bitmap_line::dx#5 < bitmap_line::e1#1
Inversing boolean not [503] get_plane::$14 = get_plane::idx#15 != $d from [502] get_plane::$13 = get_plane::idx#15 == $d
Inversing boolean not [528] get_VICII_screen::$5 = get_VICII_screen::idx#6 != 4 from [527] get_VICII_screen::$4 = get_VICII_screen::idx#6 == 4
Inversing boolean not [541] get_VICII_charset::$2 = get_VICII_charset::idx#2 != 1 from [540] get_VICII_charset::$1 = get_VICII_charset::idx#2 == 1
Inversing boolean not [657] gfx_mode::$1 = *form_ctrl_line == 0 from [656] gfx_mode::$0 = *form_ctrl_line != 0
Inversing boolean not [661] gfx_mode::$3 = *form_ctrl_borof == 0 from [660] gfx_mode::$2 = *form_ctrl_borof != 0
Inversing boolean not [668] gfx_mode::$5 = *form_ctrl_hicol == 0 from [667] gfx_mode::$4 = *form_ctrl_hicol != 0
Inversing boolean not [675] gfx_mode::$7 = *form_ctrl_overs == 0 from [674] gfx_mode::$6 = *form_ctrl_overs != 0
Inversing boolean not [682] gfx_mode::$9 = *form_ctrl_colof == 0 from [681] gfx_mode::$8 = *form_ctrl_colof != 0
Inversing boolean not [689] gfx_mode::$11 = *form_ctrl_chunk == 0 from [688] gfx_mode::$10 = *form_ctrl_chunk != 0
Inversing boolean not [698] gfx_mode::$13 = *form_ctrl_ecm == 0 from [697] gfx_mode::$12 = *form_ctrl_ecm != 0
Inversing boolean not [705] gfx_mode::$15 = *form_ctrl_bmm == 0 from [704] gfx_mode::$14 = *form_ctrl_bmm != 0
Inversing boolean not [714] gfx_mode::$17 = *form_ctrl_mcm == 0 from [713] gfx_mode::$16 = *form_ctrl_mcm != 0
Inversing boolean not [866] gfx_mode::$81 = gfx_mode::keyboard_event#0 != KEY_SPACE from [865] gfx_mode::$80 = gfx_mode::keyboard_event#0 == KEY_SPACE
Inversing boolean not [1060] gfx_init_plane_8bppchunky::$3 = gfx_init_plane_8bppchunky::gfxb#3 != $8000 from [1059] gfx_init_plane_8bppchunky::$2 = gfx_init_plane_8bppchunky::gfxb#3 == $8000
Inversing boolean not [1180] gfx_init_plane_charset8::$4 = gfx_init_plane_charset8::$2 == 0 from [1179] gfx_init_plane_charset8::$3 = gfx_init_plane_charset8::$2 != 0
Inversing boolean not [1322] form_mode::$13 = form_mode::$11 == 0 from [1321] form_mode::$12 = form_mode::$11 != 0
Inversing boolean not [1326] form_mode::$15 = form_mode::preset_current#2 == *form_preset from [1325] form_mode::$14 = form_mode::preset_current#2 != *form_preset
Inversing boolean not [1396] form_control::$2 = form_cursor_count#4 >= 0 from [1395] form_control::$1 = form_cursor_count#4 < 0
Inversing boolean not [1421] form_control::$7 = form_control::key_event#0 != KEY_CRSR_DOWN from [1420] form_control::$6 = form_control::key_event#0 == KEY_CRSR_DOWN
Inversing boolean not [1425] form_control::$9 = form_control::key_event#1 != KEY_CRSR_RIGHT from [1424] form_control::$8 = form_control::key_event#1 == KEY_CRSR_RIGHT
Inversing boolean not [1436] form_control::$21 = form_field_idx#4 != form_fields_cnt from [1435] form_control::$20 = form_field_idx#4 == form_fields_cnt
Inversing boolean not [1441] form_control::$18 = form_field_idx#5 != $ff from [1440] form_control::$17 = form_field_idx#5 == $ff
Inversing boolean not [1460] form_control::$11 = form_control::key_event#2 != KEY_SPACE from [1459] form_control::$10 = form_control::key_event#2 == KEY_SPACE
Inversing boolean not [1469] form_control::$27 = form_fields_val[form_field_idx#20] <= form_fields_max[form_field_idx#20] from [1468] form_control::$26 = form_fields_val[form_field_idx#20] > form_fields_max[form_field_idx#20]
Inversing boolean not [1474] form_control::$25 = form_fields_val[form_field_idx#21] != $ff from [1473] form_control::$24 = form_fields_val[form_field_idx#21] == $ff
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#3 memset::return#5 memset::return#1 
Alias memset::str#4 = memset::str#5 
Alias memset::num#3 = memset::num#4 
Alias memset::c#5 = memset::c#6 
Alias memset::end#0 = memset::$2 
Alias memset::c#3 = memset::c#4 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#6 = memset::str#7 
Alias print_str_lines::ch#0 = print_str_lines::ch#2 print_str_lines::ch#3 
Alias print_char_cursor#43 = print_char_cursor#54 
Alias print_str_lines::str#0 = print_str_lines::str#10 print_str_lines::str#8 
Alias print_line_cursor#55 = print_line_cursor#61 print_line_cursor#56 
Alias print_char_cursor#0 = print_char_cursor#23 
Alias print_line_cursor#38 = print_line_cursor#48 
Alias print_char_cursor#44 = print_char_cursor#55 
Alias print_str_lines::str#6 = print_str_lines::str#9 print_str_lines::str#7 
Alias print_line_cursor#0 = print_line_cursor#20 
Alias print_char_cursor#1 = print_char_cursor#24 
Alias print_char_cursor#2 = print_char_cursor#25 print_char_cursor#45 
Alias print_line_cursor#1 = print_line_cursor#21 print_line_cursor#39 
Alias print_str_at::str#2 = print_str_at::str#3 
Alias print_str_at::at#2 = print_str_at::at#3 
Alias print_line_cursor#2 = print_ln::$0 print_line_cursor#23 print_char_cursor#3 print_line_cursor#24 print_char_cursor#27 print_line_cursor#3 print_char_cursor#4 
Alias print_char_cursor#29 = print_char_cursor#5 print_char_cursor#6 
Alias print_line_cursor#25 = print_screen#11 print_screen#10 print_line_cursor#4 print_char_cursor#7 print_char_cursor#30 print_line_cursor#5 print_char_cursor#8 
Alias print_screen#0 = print_line_cursor#6 print_char_cursor#9 print_screen#12 print_line_cursor#26 print_char_cursor#31 print_screen#1 print_line_cursor#7 print_char_cursor#10 
Alias keyboard_matrix_read::return#0 = keyboard_matrix_read::row_pressed_bits#0 keyboard_matrix_read::$0 keyboard_matrix_read::return#3 keyboard_matrix_read::return#1 
Alias keyboard_matrix_read::return#2 = keyboard_matrix_read::return#4 
Alias keyboard_event_scan::row#2 = keyboard_event_scan::row#3 keyboard_event_scan::row#9 keyboard_event_scan::row#7 
Alias keyboard_event_scan::keycode#11 = keyboard_event_scan::keycode#7 keyboard_event_scan::keycode#12 keyboard_event_scan::keycode#3 
Alias keyboard_events_size#107 = keyboard_events_size#78 keyboard_events_size#90 keyboard_events_size#57 
Alias keyboard_event_scan::row_scan#0 = keyboard_event_scan::$12 keyboard_event_scan::row_scan#5 
Alias keyboard_event_scan::keycode#1 = keyboard_event_scan::$14 
Alias keyboard_events_size#19 = keyboard_events_size#39 keyboard_events_size#40 keyboard_events_size#20 keyboard_events_size#21 
Alias keyboard_event_scan::keycode#10 = keyboard_event_scan::keycode#9 keyboard_event_scan::keycode#8 keyboard_event_scan::keycode#5 keyboard_event_scan::keycode#6 
Alias keyboard_event_scan::col#2 = keyboard_event_scan::col#6 keyboard_event_scan::col#4 keyboard_event_scan::col#5 keyboard_event_scan::col#7 
Alias keyboard_event_scan::row_scan#1 = keyboard_event_scan::row_scan#6 keyboard_event_scan::row_scan#2 keyboard_event_scan::row_scan#7 keyboard_event_scan::row_scan#8 
Alias keyboard_event_scan::row#10 = keyboard_event_scan::row#11 keyboard_event_scan::row#5 keyboard_event_scan::row#13 keyboard_event_scan::row#12 
Alias keyboard_event_scan::event_type#0 = keyboard_event_scan::$21 
Alias keyboard_event_scan::row_scan#3 = keyboard_event_scan::row_scan#4 
Alias keyboard_event_scan::row#6 = keyboard_event_scan::row#8 
Alias keyboard_event_scan::keycode#14 = keyboard_event_scan::keycode#2 
Alias keyboard_events_size#106 = keyboard_events_size#56 
Alias keyboard_events_size#111 = keyboard_events_size#115 keyboard_events_size#99 keyboard_events_size#112 
Alias keyboard_event_pressed::return#0 = keyboard_event_pressed::return#6 
Alias keyboard_modifiers#0 = keyboard_modifiers#36 keyboard_modifiers#18 
Alias keyboard_event_pressed::return#1 = keyboard_event_pressed::return#7 
Alias keyboard_modifiers#19 = keyboard_modifiers#37 keyboard_modifiers#55 
Alias keyboard_events_size#100 = keyboard_events_size#108 keyboard_events_size#101 
Alias keyboard_modifiers#1 = keyboard_event_scan::$26 
Alias keyboard_event_pressed::return#2 = keyboard_event_pressed::return#8 
Alias keyboard_modifiers#20 = keyboard_modifiers#38 keyboard_modifiers#56 
Alias keyboard_events_size#79 = keyboard_events_size#91 keyboard_events_size#80 
Alias keyboard_modifiers#2 = keyboard_event_scan::$27 
Alias keyboard_event_pressed::return#3 = keyboard_event_pressed::return#9 
Alias keyboard_modifiers#21 = keyboard_modifiers#39 keyboard_modifiers#57 
Alias keyboard_events_size#41 = keyboard_events_size#58 keyboard_events_size#42 
Alias keyboard_modifiers#3 = keyboard_event_scan::$28 
Alias keyboard_modifiers#4 = keyboard_event_scan::$29 
Alias keyboard_events_size#2 = keyboard_events_size#22 
Alias keyboard_modifiers#22 = keyboard_modifiers#5 
Alias keyboard_event_pressed::return#10 = keyboard_event_pressed::return#4 keyboard_event_pressed::$2 keyboard_event_pressed::return#5 
Alias keyboard_events_size#23 = keyboard_events_size#43 keyboard_events_size#24 
Alias keyboard_event_get::return#2 = keyboard_event_get::return#5 
Alias keyboard_events_size#25 = keyboard_events_size#4 
Alias bitmap_init::x#2 = bitmap_init::x#4 
Alias bitmap_init::gfx#4 = bitmap_init::gfx#5 
Alias bitmap_gfx#47 = bitmap_gfx#48 
Alias bitmap_screen#46 = bitmap_screen#47 
Alias bitmap_init::gfx#2 = bitmap_init::gfx#3 bitmap_init::yoffs#0 
Alias bitmap_gfx#38 = bitmap_gfx#43 
Alias bitmap_screen#37 = bitmap_screen#42 
Alias bitmap_init::yoffs#2 = bitmap_init::yoffs#3 
Alias bitmap_init::y#2 = bitmap_init::y#4 
Alias bitmap_gfx#30 = bitmap_gfx#31 
Alias bitmap_screen#29 = bitmap_screen#30 
Alias bitmap_init::yoffs#1 = bitmap_init::$10 
Alias bitmap_gfx#1 = bitmap_gfx#11 bitmap_gfx#21 
Alias bitmap_screen#1 = bitmap_screen#11 bitmap_screen#21 
Alias bitmap_clear::col#0 = bitmap_clear::$1 
Alias bitmap_gfx#12 = bitmap_gfx#22 
Alias bitmap_plot::plotter#0 = bitmap_plot::$2 
Alias bitmap_line::x#0 = bitmap_line::x1#1 bitmap_line::x1#4 bitmap_line::x#16 bitmap_line::x1#3 bitmap_line::x#10 bitmap_line::x1#2 bitmap_line::x#19 bitmap_line::x#18 bitmap_line::x#17 bitmap_line::x#3 bitmap_line::x#14 bitmap_line::x#11 
Alias bitmap_line::y#0 = bitmap_line::y1#1 bitmap_line::y1#2 bitmap_line::y#16 bitmap_line::y#10 bitmap_line::y1#5 bitmap_line::y1#4 bitmap_line::y#19 bitmap_line::y1#3 bitmap_line::y#18 bitmap_line::y#17 bitmap_line::y#3 bitmap_line::y#14 bitmap_line::y#11 
Alias abs_u16::w#0 = bitmap_line::$0 
Alias abs_u16::return#0 = abs_u16::return#5 
Alias bitmap_line::y2#1 = bitmap_line::y2#4 bitmap_line::y2#8 bitmap_line::y2#5 bitmap_line::y2#2 bitmap_line::y2#11 bitmap_line::y2#10 
Alias bitmap_line::x2#1 = bitmap_line::x2#7 bitmap_line::x2#4 bitmap_line::x2#2 bitmap_line::x2#11 bitmap_line::x2#10 bitmap_line::x2#9 
Alias bitmap_line::dx#0 = bitmap_line::$1 bitmap_line::dx#1 bitmap_line::dx#10 bitmap_line::dx#7 bitmap_line::dx#2 bitmap_line::dx#13 bitmap_line::dx#3 
Alias abs_u16::w#1 = bitmap_line::$2 
Alias abs_u16::return#1 = abs_u16::return#6 
Alias bitmap_line::dy#0 = bitmap_line::$3 bitmap_line::dy#9 bitmap_line::dy#6 bitmap_line::dy#1 bitmap_line::dy#2 bitmap_line::dy#10 
Alias sgn_u16::w#0 = bitmap_line::$8 
Alias sgn_u16::return#0 = sgn_u16::return#5 
Alias bitmap_line::sx#0 = bitmap_line::$9 bitmap_line::sx#8 bitmap_line::sx#7 bitmap_line::sx#9 
Alias sgn_u16::w#1 = bitmap_line::$10 
Alias sgn_u16::return#1 = sgn_u16::return#6 
Alias bitmap_line::sy#0 = bitmap_line::$11 bitmap_line::sy#10 bitmap_line::sy#5 
Alias bitmap_line::e1#0 = bitmap_line::$20 
Alias bitmap_line::e#0 = bitmap_line::$15 
Alias bitmap_line::y#4 = bitmap_line::y#5 
Alias bitmap_line::sy#1 = bitmap_line::sy#3 bitmap_line::sy#8 
Alias bitmap_line::e#3 = bitmap_line::e#5 
Alias bitmap_line::dx#14 = bitmap_line::dx#4 bitmap_line::dx#8 
Alias bitmap_line::dy#3 = bitmap_line::dy#7 bitmap_line::dy#4 
Alias bitmap_line::y2#6 = bitmap_line::y2#9 bitmap_line::y2#7 
Alias bitmap_line::x#13 = bitmap_line::x#4 bitmap_line::x#5 
Alias bitmap_line::sx#1 = bitmap_line::sx#3 bitmap_line::sx#5 
Alias bitmap_line::e#1 = bitmap_line::e#4 
Alias bitmap_line::y#1 = bitmap_line::y#12 
Alias bitmap_line::x#7 = bitmap_line::x#8 
Alias bitmap_line::sx#11 = bitmap_line::sx#2 bitmap_line::sx#4 
Alias bitmap_line::e1#3 = bitmap_line::e1#5 
Alias bitmap_line::dy#13 = bitmap_line::dy#5 bitmap_line::dy#8 
Alias bitmap_line::dx#5 = bitmap_line::dx#9 bitmap_line::dx#6 
Alias bitmap_line::x2#5 = bitmap_line::x2#6 bitmap_line::x2#8 
Alias bitmap_line::y#15 = bitmap_line::y#8 bitmap_line::y#9 
Alias bitmap_line::sy#2 = bitmap_line::sy#4 bitmap_line::sy#7 
Alias bitmap_line::e1#1 = bitmap_line::e1#4 
Alias bitmap_line::x#15 = bitmap_line::x#2 
Alias abs_u16::w#2 = abs_u16::w#3 abs_u16::w#4 abs_u16::return#3 
Alias abs_u16::return#2 = abs_u16::$2 
Alias abs_u16::return#4 = abs_u16::return#7 
Alias sgn_u16::return#4 = sgn_u16::return#7 
Alias bitmap_gfx#23 = bitmap_gfx#32 
Alias bitmap_screen#22 = bitmap_screen#31 
Alias print_screen#27 = print_screen#34 print_screen#38 
Alias print_line_cursor#49 = print_line_cursor#57 print_line_cursor#62 
Alias print_char_cursor#56 = print_char_cursor#62 print_char_cursor#66 
Alias form_cursor_count#29 = form_cursor_count#40 form_cursor_count#45 
Alias keyboard_events_size#59 = keyboard_events_size#81 keyboard_events_size#92 
Alias keyboard_modifiers#58 = keyboard_modifiers#77 keyboard_modifiers#83 
Alias form_field_idx#37 = form_field_idx#46 form_field_idx#50 
Alias bitmap_gfx#13 = bitmap_gfx#2 
Alias bitmap_screen#13 = bitmap_screen#2 
Alias print_screen#14 = print_screen#20 print_screen#21 print_screen#3 
Alias print_line_cursor#28 = print_line_cursor#41 print_line_cursor#42 print_line_cursor#9 
Alias print_char_cursor#12 = print_char_cursor#47 print_char_cursor#48 print_char_cursor#33 
Alias form_cursor_count#1 = form_cursor_count#20 form_cursor_count#21 form_cursor_count#12 
Alias keyboard_events_size#28 = keyboard_events_size#44 keyboard_events_size#45 keyboard_events_size#7 
Alias keyboard_modifiers#25 = keyboard_modifiers#40 keyboard_modifiers#41 keyboard_modifiers#8 
Alias form_field_idx#1 = form_field_idx#27 form_field_idx#28 form_field_idx#13 
Alias bitmap_gfx#14 = bitmap_gfx#44 bitmap_gfx#24 bitmap_gfx#39 bitmap_gfx#33 bitmap_gfx#3 
Alias bitmap_screen#14 = bitmap_screen#43 bitmap_screen#23 bitmap_screen#38 bitmap_screen#32 bitmap_screen#3 
Alias print_screen#13 = print_screen#2 print_screen#28 
Alias print_line_cursor#27 = print_line_cursor#8 print_line_cursor#50 
Alias print_char_cursor#11 = print_char_cursor#32 print_char_cursor#57 
Alias form_cursor_count#0 = form_cursor_count#11 form_cursor_count#30 
Alias keyboard_events_size#26 = keyboard_events_size#5 
Alias keyboard_modifiers#23 = keyboard_modifiers#6 
Alias form_field_idx#0 = form_field_idx#12 form_field_idx#38 
Alias keyboard_events_size#27 = keyboard_events_size#6 
Alias keyboard_modifiers#24 = keyboard_modifiers#7 
Alias get_plane::idx#10 = get_plane::idx#3 get_plane::idx#2 get_plane::idx#4 get_plane::idx#5 get_plane::idx#6 get_plane::idx#7 get_plane::idx#8 get_plane::idx#9 get_plane::idx#11 get_plane::idx#12 get_plane::idx#13 get_plane::idx#14 get_plane::idx#15 
Alias get_plane::return#14 = get_plane::return#18 
Alias get_VICII_screen::idx#2 = get_VICII_screen::idx#3 get_VICII_screen::idx#4 get_VICII_screen::idx#5 get_VICII_screen::idx#6 
Alias get_VICII_screen::return#5 = get_VICII_screen::return#9 
Alias get_VICII_charset::idx#1 = get_VICII_charset::idx#2 
Alias get_VICII_charset::return#2 = get_VICII_charset::return#5 
Alias apply_preset::idx#1 = apply_preset::idx#2 apply_preset::idx#3 apply_preset::idx#4 apply_preset::idx#5 apply_preset::idx#6 apply_preset::idx#7 apply_preset::idx#8 apply_preset::idx#9 apply_preset::idx#10 apply_preset::idx#11 
Alias apply_preset::preset#13 = apply_preset::preset#14 
Alias apply_preset::i#2 = apply_preset::i#3 
Alias render_preset_name::idx#10 = render_preset_name::idx#3 render_preset_name::idx#2 render_preset_name::idx#4 render_preset_name::idx#5 render_preset_name::idx#6 render_preset_name::idx#7 render_preset_name::idx#8 render_preset_name::idx#9 render_preset_name::idx#11 render_preset_name::idx#12 
Alias gfx_mode::dtv_control#0 = gfx_mode::dtv_control#7 
Alias keyboard_events_size#144 = keyboard_events_size#145 
Alias keyboard_modifiers#125 = keyboard_modifiers#126 
Alias gfx_mode::dtv_control#1 = gfx_mode::$64 
Alias gfx_mode::dtv_control#14 = gfx_mode::dtv_control#8 
Alias keyboard_events_size#142 = keyboard_events_size#143 
Alias keyboard_modifiers#123 = keyboard_modifiers#124 
Alias gfx_mode::dtv_control#2 = gfx_mode::$65 
Alias gfx_mode::dtv_control#15 = gfx_mode::dtv_control#9 
Alias keyboard_events_size#140 = keyboard_events_size#141 
Alias keyboard_modifiers#121 = keyboard_modifiers#122 
Alias gfx_mode::dtv_control#3 = gfx_mode::$66 
Alias gfx_mode::dtv_control#10 = gfx_mode::dtv_control#16 
Alias keyboard_events_size#138 = keyboard_events_size#139 
Alias keyboard_modifiers#119 = keyboard_modifiers#120 
Alias gfx_mode::dtv_control#4 = gfx_mode::$67 
Alias gfx_mode::dtv_control#11 = gfx_mode::dtv_control#17 
Alias keyboard_events_size#136 = keyboard_events_size#137 
Alias keyboard_modifiers#117 = keyboard_modifiers#118 
Alias gfx_mode::dtv_control#5 = gfx_mode::$68 
Alias gfx_mode::dtv_control#13 = gfx_mode::dtv_control#18 
Alias keyboard_events_size#134 = keyboard_events_size#135 
Alias keyboard_modifiers#115 = keyboard_modifiers#116 
Alias gfx_mode::dtv_control#6 = gfx_mode::$69 
Alias gfx_mode::VICII_control#0 = gfx_mode::VICII_control#3 
Alias keyboard_events_size#132 = keyboard_events_size#133 
Alias keyboard_modifiers#113 = keyboard_modifiers#114 
Alias gfx_mode::VICII_control#1 = gfx_mode::$70 
Alias gfx_mode::VICII_control#5 = gfx_mode::VICII_control#6 
Alias keyboard_events_size#130 = keyboard_events_size#131 
Alias keyboard_modifiers#111 = keyboard_modifiers#112 
Alias gfx_mode::VICII_control#2 = gfx_mode::$71 
Alias gfx_mode::plane_a_offs#0 = gfx_mode::$19 gfx_mode::plane_a_offs#1 
Alias get_plane::return#16 = get_plane::return#19 
Alias keyboard_events_size#116 = keyboard_events_size#124 keyboard_events_size#126 keyboard_events_size#122 keyboard_events_size#120 keyboard_events_size#118 
Alias keyboard_modifiers#101 = keyboard_modifiers#105 keyboard_modifiers#107 keyboard_modifiers#103 keyboard_modifiers#99 keyboard_modifiers#97 
Alias gfx_mode::plane_a#0 = gfx_mode::$21 
Alias gfx_mode::plane_b_offs#0 = gfx_mode::$33 gfx_mode::plane_b_offs#1 
Alias get_plane::return#17 = get_plane::return#20 
Alias gfx_mode::plane_b#0 = gfx_mode::$35 
Alias get_VICII_screen::return#10 = get_VICII_screen::return#7 
Alias get_VICII_charset::return#4 = get_VICII_charset::return#6 
Alias get_VICII_screen::return#11 = get_VICII_screen::return#8 
Alias gfx_mode::VICII_colors#0 = gfx_mode::$54 
Alias gfx_mode::VICII_control2#0 = gfx_mode::VICII_control2#3 
Alias keyboard_events_size#128 = keyboard_events_size#129 
Alias keyboard_modifiers#109 = keyboard_modifiers#110 
Alias gfx_mode::VICII_control2#1 = gfx_mode::$72 
Alias gfx_mode::cy#2 = gfx_mode::cy#3 
Alias gfx_mode::VICII_colors#1 = gfx_mode::VICII_colors#4 
Alias gfx_mode::col#1 = gfx_mode::col#4 
Alias keyboard_events_size#102 = keyboard_events_size#109 keyboard_events_size#93 keyboard_events_size#83 keyboard_events_size#82 
Alias keyboard_modifiers#78 = keyboard_modifiers#89 keyboard_modifiers#93 keyboard_modifiers#84 keyboard_modifiers#79 
Alias keyboard_events_size#46 = keyboard_events_size#62 
Alias keyboard_modifiers#42 = keyboard_modifiers#61 
Alias keyboard_events_size#29 = keyboard_events_size#8 
Alias keyboard_modifiers#26 = keyboard_modifiers#9 keyboard_modifiers#44 
Alias keyboard_event_get::return#3 = keyboard_event_get::return#6 
Alias keyboard_events_size#30 = keyboard_events_size#9 
Alias gfx_mode::keyboard_event#0 = gfx_mode::$79 
Alias keyboard_events_size#10 = keyboard_events_size#31 
Alias keyboard_modifiers#10 = keyboard_modifiers#27 
Alias bitmap_gfx#25 = bitmap_gfx#51 bitmap_gfx#53 bitmap_gfx#49 bitmap_gfx#45 bitmap_gfx#40 bitmap_gfx#34 
Alias bitmap_screen#24 = bitmap_screen#50 bitmap_screen#52 bitmap_screen#48 bitmap_screen#44 bitmap_screen#39 bitmap_screen#33 
Alias bitmap_gfx#15 = bitmap_gfx#4 bitmap_gfx#55 bitmap_gfx#54 bitmap_gfx#52 bitmap_gfx#50 bitmap_gfx#46 bitmap_gfx#41 bitmap_gfx#35 bitmap_gfx#26 bitmap_gfx#16 bitmap_gfx#5 
Alias bitmap_screen#15 = bitmap_screen#4 bitmap_screen#54 bitmap_screen#53 bitmap_screen#51 bitmap_screen#49 bitmap_screen#45 bitmap_screen#40 bitmap_screen#34 bitmap_screen#25 bitmap_screen#16 bitmap_screen#5 
Alias gfx_init_charset::c#2 = gfx_init_charset::c#3 
Alias gfx_init_charset::chargen#1 = gfx_init_charset::chargen#4 
Alias gfx_init_charset::charset#1 = gfx_init_charset::charset#4 
Alias gfx_init_screen0::cy#2 = gfx_init_screen0::cy#3 
Alias gfx_init_screen0::ch#1 = gfx_init_screen0::ch#4 
Alias gfx_init_screen1::cy#2 = gfx_init_screen1::cy#3 
Alias gfx_init_screen1::ch#1 = gfx_init_screen1::ch#4 
Alias gfx_init_screen2::col#0 = gfx_init_screen2::$1 
Alias gfx_init_screen2::col2#0 = gfx_init_screen2::$2 
Alias gfx_init_screen2::cy#2 = gfx_init_screen2::cy#3 
Alias gfx_init_screen2::ch#1 = gfx_init_screen2::ch#4 
Alias gfx_init_screen3::cy#2 = gfx_init_screen3::cy#3 
Alias gfx_init_screen3::ch#1 = gfx_init_screen3::ch#4 
Alias gfx_init_screen4::cy#2 = gfx_init_screen4::cy#3 
Alias gfx_init_screen4::ch#1 = gfx_init_screen4::ch#4 
Alias bitmap_gfx#17 = bitmap_gfx#6 bitmap_gfx#36 
Alias bitmap_screen#17 = bitmap_screen#6 bitmap_screen#35 
Alias gfx_init_VICII_bitmap::l#2 = gfx_init_VICII_bitmap::l#3 gfx_init_VICII_bitmap::l#4 
Alias bitmap_gfx#18 = bitmap_gfx#42 bitmap_gfx#28 bitmap_gfx#37 bitmap_gfx#7 
Alias bitmap_screen#18 = bitmap_screen#41 bitmap_screen#27 bitmap_screen#36 bitmap_screen#7 
Alias gfx_init_plane_8bppchunky::gfxbCpuBank#0 = gfx_init_plane_8bppchunky::gfxbCpuBank#3 
Alias gfx_init_plane_8bppchunky::gfxbCpuBank#4 = gfx_init_plane_8bppchunky::gfxbCpuBank#6 gfx_init_plane_8bppchunky::gfxbCpuBank#5 
Alias gfx_init_plane_8bppchunky::x#3 = gfx_init_plane_8bppchunky::x#5 gfx_init_plane_8bppchunky::x#4 
Alias gfx_init_plane_8bppchunky::y#4 = gfx_init_plane_8bppchunky::y#7 gfx_init_plane_8bppchunky::y#5 
Alias gfx_init_plane_8bppchunky::y#2 = gfx_init_plane_8bppchunky::y#3 
Alias gfx_init_plane_8bppchunky::gfxb#1 = gfx_init_plane_8bppchunky::gfxb#6 
Alias gfx_init_plane_8bppchunky::gfxbCpuBank#8 = gfx_init_plane_8bppchunky::gfxbCpuBank#9 
Alias gfx_init_plane_horisontal::gfxbCpuBank#0 = gfx_init_plane_horisontal::gfxbCpuBank#2 
Alias gfx_init_plane_horisontal::gfxa#3 = gfx_init_plane_horisontal::gfxa#5 gfx_init_plane_horisontal::gfxa#4 
Alias gfx_init_plane_horisontal::ax#3 = gfx_init_plane_horisontal::ax#5 gfx_init_plane_horisontal::ax#4 
Alias gfx_init_plane_horisontal::ay#2 = gfx_init_plane_horisontal::ay#6 gfx_init_plane_horisontal::ay#7 
Alias gfx_init_plane_horisontal::ay#3 = gfx_init_plane_horisontal::ay#5 
Alias gfx_init_plane_horisontal::gfxa#7 = gfx_init_plane_horisontal::gfxa#8 
Alias gfx_init_plane_horisontal2::gfxbCpuBank#0 = gfx_init_plane_horisontal2::gfxbCpuBank#2 
Alias gfx_init_plane_horisontal2::row#0 = gfx_init_plane_horisontal2::$3 
Alias gfx_init_plane_horisontal2::ay#2 = gfx_init_plane_horisontal2::ay#3 
Alias gfx_init_plane_horisontal2::gfxa#1 = gfx_init_plane_horisontal2::gfxa#4 
Alias gfx_init_plane_vertical::gfxbCpuBank#0 = gfx_init_plane_vertical::gfxbCpuBank#2 
Alias gfx_init_plane_vertical::by#2 = gfx_init_plane_vertical::by#3 
Alias gfx_init_plane_vertical::gfxb#1 = gfx_init_plane_vertical::gfxb#4 
Alias gfx_init_plane_charset8::gfxbCpuBank#0 = gfx_init_plane_charset8::gfxbCpuBank#2 
Alias gfx_init_plane_charset8::bits#1 = gfx_init_plane_charset8::$5 
Alias gfx_init_plane_charset8::col#3 = gfx_init_plane_charset8::col#4 gfx_init_plane_charset8::c#1 
Alias gfx_init_plane_charset8::gfxa#3 = gfx_init_plane_charset8::gfxa#4 
Alias gfx_init_plane_charset8::bits#2 = gfx_init_plane_charset8::bits#4 
Alias gfx_init_plane_charset8::cp#3 = gfx_init_plane_charset8::cp#4 
Alias gfx_init_plane_charset8::cr#4 = gfx_init_plane_charset8::cr#5 
Alias gfx_init_plane_charset8::chargen#7 = gfx_init_plane_charset8::chargen#8 
Alias gfx_init_plane_charset8::ch#5 = gfx_init_plane_charset8::ch#6 
Alias gfx_init_plane_charset8::cr#2 = gfx_init_plane_charset8::cr#3 
Alias gfx_init_plane_charset8::chargen#4 = gfx_init_plane_charset8::chargen#6 gfx_init_plane_charset8::chargen#5 
Alias gfx_init_plane_charset8::ch#2 = gfx_init_plane_charset8::ch#3 gfx_init_plane_charset8::ch#4 
Alias gfx_init_plane_charset8::gfxa#1 = gfx_init_plane_charset8::gfxa#7 gfx_init_plane_charset8::gfxa#8 
Alias gfx_init_plane_charset8::col#1 = gfx_init_plane_charset8::col#7 gfx_init_plane_charset8::col#8 
Alias gfx_init_plane_fill::gfxbCpuBank#0 = gfx_init_plane_fill::$2 gfx_init_plane_fill::gfxbCpuBank#2 
Alias gfx_init_plane_fill::plane_addr#3 = gfx_init_plane_fill::plane_addr#4 
Alias gfx_init_plane_fill::fill#6 = gfx_init_plane_fill::fill#7 
Alias gfx_init_plane_fill::by#2 = gfx_init_plane_fill::by#3 
Alias gfx_init_plane_fill::fill#3 = gfx_init_plane_fill::fill#5 
Alias gfx_init_plane_fill::gfxb#1 = gfx_init_plane_fill::gfxb#4 
Alias form_cursor_count#46 = form_cursor_count#61 form_cursor_count#62 form_cursor_count#60 form_cursor_count#59 form_cursor_count#58 form_cursor_count#57 form_cursor_count#54 form_cursor_count#52 form_cursor_count#49 
Alias keyboard_events_size#103 = keyboard_events_size#125 keyboard_events_size#127 keyboard_events_size#123 keyboard_events_size#121 keyboard_events_size#119 keyboard_events_size#117 keyboard_events_size#114 keyboard_events_size#110 keyboard_events_size#94 
Alias keyboard_modifiers#100 = keyboard_modifiers#106 keyboard_modifiers#108 keyboard_modifiers#104 keyboard_modifiers#102 keyboard_modifiers#98 keyboard_modifiers#96 keyboard_modifiers#94 keyboard_modifiers#90 keyboard_modifiers#85 
Alias form_field_idx#51 = form_field_idx#67 form_field_idx#68 form_field_idx#66 form_field_idx#65 form_field_idx#64 form_field_idx#63 form_field_idx#60 form_field_idx#58 form_field_idx#54 
Alias print_screen#15 = print_screen#4 print_screen#29 print_screen#23 
Alias print_line_cursor#10 = print_line_cursor#29 
Alias print_char_cursor#13 = print_char_cursor#34 
Alias print_line_cursor#11 = print_line_cursor#30 
Alias print_char_cursor#14 = print_char_cursor#35 
Alias print_char_cursor#15 = print_char_cursor#36 
Alias print_line_cursor#12 = print_line_cursor#31 
Alias print_screen#16 = print_screen#5 print_screen#45 print_screen#44 print_screen#43 print_screen#41 print_screen#39 
Alias print_line_cursor#13 = print_line_cursor#32 
Alias print_char_cursor#16 = print_char_cursor#37 
Alias print_line_cursor#14 = print_line_cursor#33 
Alias print_char_cursor#17 = print_char_cursor#38 
Alias print_char_cursor#18 = print_char_cursor#39 print_char_cursor#71 print_char_cursor#69 print_char_cursor#67 
Alias print_line_cursor#15 = print_line_cursor#34 print_line_cursor#67 print_line_cursor#65 print_line_cursor#63 
Alias print_screen#30 = print_screen#35 
Alias print_line_cursor#51 = print_line_cursor#58 
Alias print_char_cursor#58 = print_char_cursor#63 
Alias form_cursor_count#31 = form_cursor_count#41 
Alias keyboard_events_size#63 = keyboard_events_size#84 
Alias keyboard_modifiers#62 = keyboard_modifiers#80 
Alias form_field_idx#39 = form_field_idx#47 
Alias form_cursor_count#22 = form_cursor_count#34 
Alias keyboard_events_size#48 = keyboard_events_size#66 
Alias keyboard_modifiers#45 = keyboard_modifiers#65 
Alias form_field_idx#29 = form_field_idx#42 
Alias form_mode::preset_current#2 = form_mode::preset_current#4 form_mode::preset_current#5 form_mode::preset_current#3 
Alias print_screen#24 = print_screen#33 print_screen#36 print_screen#32 print_screen#42 print_screen#40 print_screen#37 print_screen#31 
Alias print_line_cursor#44 = print_line_cursor#54 print_line_cursor#59 print_line_cursor#53 print_line_cursor#66 print_line_cursor#64 print_line_cursor#60 print_line_cursor#52 
Alias print_char_cursor#50 = print_char_cursor#61 print_char_cursor#64 print_char_cursor#60 print_char_cursor#70 print_char_cursor#68 print_char_cursor#65 print_char_cursor#59 
Alias form_control::return#0 = form_control::return#6 
Alias form_cursor_count#13 = form_cursor_count#2 form_cursor_count#33 form_cursor_count#50 form_cursor_count#47 form_cursor_count#42 form_cursor_count#32 
Alias keyboard_events_size#104 = keyboard_events_size#11 keyboard_events_size#32 keyboard_events_size#65 keyboard_events_size#95 keyboard_events_size#85 keyboard_events_size#64 
Alias keyboard_modifiers#11 = keyboard_modifiers#28 keyboard_modifiers#64 keyboard_modifiers#91 keyboard_modifiers#86 keyboard_modifiers#81 keyboard_modifiers#63 
Alias form_field_idx#14 = form_field_idx#2 form_field_idx#41 form_field_idx#55 form_field_idx#52 form_field_idx#48 form_field_idx#40 
Alias print_screen#17 = print_screen#6 
Alias print_line_cursor#16 = print_line_cursor#35 
Alias print_char_cursor#19 = print_char_cursor#40 
Alias form_cursor_count#14 = form_cursor_count#3 
Alias keyboard_events_size#12 = keyboard_events_size#33 
Alias keyboard_modifiers#12 = keyboard_modifiers#29 
Alias form_field_idx#15 = form_field_idx#3 
Alias form_mode::preset_current#1 = form_mode::preset_current#8 form_mode::preset_current#7 
Alias form_set_screen::line#0 = form_set_screen::screen#1 
Alias form_set_screen::line#1 = form_set_screen::$2 
Alias form_field_ptr::line#0 = form_field_ptr::$1 
Alias form_field_ptr::return#0 = form_field_ptr::field#0 form_field_ptr::$0 form_field_ptr::return#4 form_field_ptr::return#1 
Alias form_render_values::idx#2 = form_render_values::idx#3 form_render_values::idx#4 
Alias form_field_ptr::return#2 = form_field_ptr::return#5 
Alias form_render_values::field#0 = form_render_values::$1 
Alias form_field_ptr::return#3 = form_field_ptr::return#6 
Alias form_cursor_count#15 = form_cursor_count#24 
Alias keyboard_events_size#105 = keyboard_events_size#96 keyboard_events_size#97 
Alias keyboard_modifiers#87 = keyboard_modifiers#92 keyboard_modifiers#88 
Alias form_field_idx#16 = form_field_idx#61 form_field_idx#62 
Alias form_control::field#0 = form_control::$0 form_control::field#11 
Alias form_control::field#1 = form_control::field#5 form_control::field#2 
Alias keyboard_events_size#67 = keyboard_events_size#86 keyboard_events_size#68 
Alias keyboard_modifiers#66 = keyboard_modifiers#82 keyboard_modifiers#67 
Alias form_field_idx#56 = form_field_idx#59 form_field_idx#57 
Alias form_cursor_count#16 = form_cursor_count#55 form_cursor_count#56 
Alias form_control::field#10 = form_control::field#12 form_control::field#14 form_control::field#6 form_control::field#15 form_control::field#3 form_control::field#13 form_control::field#9 form_control::field#7 form_control::field#8 
Alias form_field_idx#17 = form_field_idx#49 form_field_idx#53 form_field_idx#43 form_field_idx#44 form_field_idx#31 form_field_idx#18 form_field_idx#45 form_field_idx#35 form_field_idx#20 form_field_idx#21 form_field_idx#22 form_field_idx#24 form_field_idx#34 form_field_idx#32 
Alias form_cursor_count#25 = form_cursor_count#51 form_cursor_count#53 form_cursor_count#48 form_cursor_count#43 form_cursor_count#39 form_cursor_count#44 form_cursor_count#37 form_cursor_count#35 form_cursor_count#36 form_cursor_count#38 form_cursor_count#27 
Alias keyboard_events_size#13 = keyboard_events_size#34 
Alias keyboard_modifiers#13 = keyboard_modifiers#30 keyboard_modifiers#48 keyboard_modifiers#53 keyboard_modifiers#31 keyboard_modifiers#70 keyboard_modifiers#68 keyboard_modifiers#69 keyboard_modifiers#71 keyboard_modifiers#76 keyboard_modifiers#33 keyboard_modifiers#74 keyboard_modifiers#72 keyboard_modifiers#73 keyboard_modifiers#75 keyboard_modifiers#52 keyboard_modifiers#49 
Alias keyboard_event_get::return#4 = keyboard_event_get::return#7 
Alias keyboard_events_size#14 = keyboard_events_size#35 keyboard_events_size#88 keyboard_events_size#87 keyboard_events_size#71 keyboard_events_size#69 keyboard_events_size#70 keyboard_events_size#72 keyboard_events_size#77 keyboard_events_size#89 keyboard_events_size#75 keyboard_events_size#73 keyboard_events_size#74 keyboard_events_size#76 keyboard_events_size#54 keyboard_events_size#51 
Alias form_control::key_event#0 = form_control::$5 form_control::key_event#1 form_control::key_event#2 
Alias form_field_idx#6 = form_control::$19 
Alias form_control::return#2 = form_control::return#7 
Alias form_cursor_count#17 = form_cursor_count#7 
Alias keyboard_events_size#15 = keyboard_events_size#36 
Alias keyboard_modifiers#14 = keyboard_modifiers#32 
Alias form_field_idx#19 = form_field_idx#8 
Alias print_screen#26 = print_line_cursor#17 print_screen#7 print_char_cursor#20 print_line_cursor#46 print_char_cursor#52 
Alias bitmap_gfx#29 = bitmap_gfx#8 
Alias bitmap_screen#28 = bitmap_screen#8 
Alias form_cursor_count#28 = form_cursor_count#8 
Alias keyboard_events_size#16 = keyboard_events_size#55 
Alias keyboard_modifiers#15 = keyboard_modifiers#54 
Alias form_field_idx#36 = form_field_idx#9 
Alias bitmap_gfx#10 = bitmap_gfx#9 bitmap_gfx#19 bitmap_gfx#20 
Alias bitmap_screen#10 = bitmap_screen#9 bitmap_screen#19 bitmap_screen#20 
Alias print_screen#18 = print_screen#8 print_screen#19 print_screen#9 
Alias print_line_cursor#18 = print_line_cursor#36 print_line_cursor#37 print_line_cursor#19 
Alias print_char_cursor#21 = print_char_cursor#41 print_char_cursor#42 print_char_cursor#22 
Alias form_cursor_count#10 = form_cursor_count#9 form_cursor_count#18 form_cursor_count#19 
Alias keyboard_events_size#17 = keyboard_events_size#37 keyboard_events_size#38 keyboard_events_size#18 
Alias keyboard_modifiers#16 = keyboard_modifiers#34 keyboard_modifiers#35 keyboard_modifiers#17 
Alias form_field_idx#10 = form_field_idx#25 form_field_idx#26 form_field_idx#11 
Successful SSA optimization Pass2AliasElimination
Alias print_str_lines::ch#0 = print_str_lines::ch#1 
Alias print_str_lines::str#0 = print_str_lines::str#6 
Alias print_line_cursor#38 = print_line_cursor#55 
Alias keyboard_event_scan::keycode#10 = keyboard_event_scan::keycode#4 
Alias keyboard_event_scan::col#2 = keyboard_event_scan::col#3 
Alias keyboard_event_scan::row_scan#1 = keyboard_event_scan::row_scan#3 
Alias keyboard_event_scan::row#10 = keyboard_event_scan::row#6 
Alias keyboard_events_size#100 = keyboard_events_size#111 keyboard_events_size#79 keyboard_events_size#41 keyboard_events_size#2 
Alias bitmap_init::x#2 = bitmap_init::x#3 
Alias bitmap_init::gfx#2 = bitmap_init::gfx#4 
Alias bitmap_gfx#38 = bitmap_gfx#47 
Alias bitmap_screen#37 = bitmap_screen#46 
Alias bitmap_init::y#2 = bitmap_init::y#3 
Alias bitmap_gfx#1 = bitmap_gfx#30 
Alias bitmap_screen#1 = bitmap_screen#29 
Alias bitmap_line::y#1 = bitmap_line::y#6 
Alias bitmap_line::y2#3 = bitmap_line::y2#6 
Alias bitmap_line::sy#1 = bitmap_line::sy#6 
Alias bitmap_line::dx#11 = bitmap_line::dx#14 
Alias bitmap_line::dy#11 = bitmap_line::dy#3 
Alias bitmap_line::sx#1 = bitmap_line::sx#10 
Alias bitmap_line::x#15 = bitmap_line::x#9 
Alias bitmap_line::x2#3 = bitmap_line::x2#5 
Alias bitmap_line::sx#11 = bitmap_line::sx#6 
Alias bitmap_line::dy#12 = bitmap_line::dy#13 
Alias bitmap_line::dx#12 = bitmap_line::dx#5 
Alias bitmap_line::sy#2 = bitmap_line::sy#9 
Alias keyboard_events_size#116 = keyboard_events_size#142 keyboard_events_size#144 keyboard_events_size#140 keyboard_events_size#138 keyboard_events_size#136 keyboard_events_size#134 keyboard_events_size#132 keyboard_events_size#130 keyboard_events_size#128 
Alias keyboard_modifiers#101 = keyboard_modifiers#123 keyboard_modifiers#125 keyboard_modifiers#121 keyboard_modifiers#119 keyboard_modifiers#117 keyboard_modifiers#115 keyboard_modifiers#113 keyboard_modifiers#111 keyboard_modifiers#109 
Alias gfx_init_plane_8bppchunky::x#2 = gfx_init_plane_8bppchunky::x#3 
Alias gfx_init_plane_8bppchunky::y#2 = gfx_init_plane_8bppchunky::y#4 
Alias gfx_init_plane_horisontal::ax#2 = gfx_init_plane_horisontal::ax#3 
Alias gfx_init_plane_horisontal::ay#2 = gfx_init_plane_horisontal::ay#3 
Alias gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::gfxa#3 
Alias gfx_init_plane_charset8::bits#2 = gfx_init_plane_charset8::bits#3 
Alias gfx_init_plane_charset8::col#2 = gfx_init_plane_charset8::col#3 
Alias gfx_init_plane_charset8::cp#2 = gfx_init_plane_charset8::cp#3 
Alias gfx_init_plane_charset8::cr#2 = gfx_init_plane_charset8::cr#4 
Alias gfx_init_plane_charset8::chargen#4 = gfx_init_plane_charset8::chargen#7 
Alias gfx_init_plane_charset8::ch#2 = gfx_init_plane_charset8::ch#5 
Alias form_control::field#0 = form_control::field#1 form_control::field#10 form_control::field#4 
Alias keyboard_events_size#105 = keyboard_events_size#67 keyboard_events_size#50 
Alias keyboard_modifiers#47 = keyboard_modifiers#66 keyboard_modifiers#87 
Alias form_field_idx#16 = form_field_idx#56 form_field_idx#17 form_field_idx#23 
Alias form_cursor_count#16 = form_cursor_count#25 form_cursor_count#26 
Alias keyboard_events_size#14 = keyboard_events_size#52 keyboard_events_size#53 
Alias keyboard_modifiers#13 = keyboard_modifiers#50 keyboard_modifiers#51 
Successful SSA optimization Pass2AliasElimination
Alias keyboard_events_size#14 = keyboard_events_size#15 
Alias keyboard_modifiers#13 = keyboard_modifiers#14 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#6 memset::str#4
Identical Phi Values memset::c#3 memset::c#5
Identical Phi Values print_line_cursor#38 print_line_cursor#1
Identical Phi Values print_char_cursor#0 print_char_cursor#29
Identical Phi Values print_line_cursor#0 print_line_cursor#2
Identical Phi Values print_char_cursor#1 print_line_cursor#2
Identical Phi Values print_str_at::str#4 print_str_at::str#1
Identical Phi Values print_str_at::at#4 print_str_at::at#1
Identical Phi Values print_line_cursor#40 print_line_cursor#38
Identical Phi Values print_char_cursor#46 print_char_cursor#44
Identical Phi Values print_char_cursor#26 print_char_cursor#46
Identical Phi Values print_char::ch#1 print_char::ch#0
Identical Phi Values print_char_cursor#28 print_char_cursor#43
Identical Phi Values keyboard_matrix_read::rowid#1 keyboard_matrix_read::rowid#0
Identical Phi Values keyboard_event_scan::row_scan#1 keyboard_event_scan::row_scan#0
Identical Phi Values keyboard_event_scan::row#10 keyboard_event_scan::row#2
Identical Phi Values bitmap_init::gfx#1 bitmap_init::gfx#0
Identical Phi Values bitmap_init::screen#1 bitmap_init::screen#0
Identical Phi Values bitmap_init::gfx#2 bitmap_init::gfx#1
Identical Phi Values bitmap_gfx#38 bitmap_gfx#0
Identical Phi Values bitmap_screen#37 bitmap_screen#0
Identical Phi Values bitmap_gfx#1 bitmap_gfx#38
Identical Phi Values bitmap_screen#1 bitmap_screen#37
Identical Phi Values bitmap_clear::fgcol#1 bitmap_clear::fgcol#0
Identical Phi Values bitmap_clear::bgcol#1 bitmap_clear::bgcol#0
Identical Phi Values bitmap_screen#12 bitmap_screen#17
Identical Phi Values bitmap_gfx#12 bitmap_gfx#17
Identical Phi Values bitmap_line::x#0 bitmap_line::x1#0
Identical Phi Values bitmap_line::y#0 bitmap_line::y1#0
Identical Phi Values bitmap_line::x2#1 bitmap_line::x2#0
Identical Phi Values bitmap_line::y2#1 bitmap_line::y2#0
Identical Phi Values bitmap_line::sy#1 bitmap_line::sy#0
Identical Phi Values bitmap_line::dx#11 bitmap_line::dx#0
Identical Phi Values bitmap_line::dy#11 bitmap_line::dy#0
Identical Phi Values bitmap_line::y2#3 bitmap_line::y2#1
Identical Phi Values bitmap_line::sx#1 bitmap_line::sx#0
Identical Phi Values bitmap_line::sx#11 bitmap_line::sx#0
Identical Phi Values bitmap_line::dy#12 bitmap_line::dy#0
Identical Phi Values bitmap_line::dx#12 bitmap_line::dx#0
Identical Phi Values bitmap_line::x2#3 bitmap_line::x2#1
Identical Phi Values bitmap_line::sy#2 bitmap_line::sy#0
Identical Phi Values bitmap_gfx#23 bitmap_gfx#29
Identical Phi Values bitmap_screen#22 bitmap_screen#28
Identical Phi Values print_screen#27 print_screen#26
Identical Phi Values print_line_cursor#49 print_screen#26
Identical Phi Values print_char_cursor#56 print_screen#26
Identical Phi Values form_cursor_count#29 form_cursor_count#28
Identical Phi Values keyboard_events_size#59 keyboard_events_size#16
Identical Phi Values keyboard_modifiers#58 keyboard_modifiers#15
Identical Phi Values form_field_idx#37 form_field_idx#36
Identical Phi Values bitmap_gfx#13 bitmap_gfx#15
Identical Phi Values bitmap_screen#13 bitmap_screen#15
Identical Phi Values bitmap_gfx#14 bitmap_gfx#13
Identical Phi Values bitmap_screen#14 bitmap_screen#13
Identical Phi Values print_screen#13 print_screen#17
Identical Phi Values print_line_cursor#27 print_line_cursor#16
Identical Phi Values print_char_cursor#11 print_char_cursor#19
Identical Phi Values form_cursor_count#0 form_cursor_count#14
Identical Phi Values keyboard_events_size#26 keyboard_events_size#12
Identical Phi Values keyboard_modifiers#23 keyboard_modifiers#12
Identical Phi Values form_field_idx#0 form_field_idx#15
Identical Phi Values keyboard_events_size#27 keyboard_events_size#10
Identical Phi Values keyboard_modifiers#24 keyboard_modifiers#10
Identical Phi Values get_VICII_charset::idx#1 get_VICII_charset::idx#0
Identical Phi Values apply_preset::idx#1 apply_preset::idx#0
Identical Phi Values apply_preset::preset#13 apply_preset::preset#15
Identical Phi Values keyboard_events_size#116 keyboard_events_size#26
Identical Phi Values keyboard_modifiers#101 keyboard_modifiers#23
Identical Phi Values gfx_mode::cy#2 gfx_mode::cy#4
Identical Phi Values keyboard_events_size#102 keyboard_events_size#113
Identical Phi Values keyboard_modifiers#78 keyboard_modifiers#95
Identical Phi Values keyboard_events_size#60 keyboard_events_size#102
Identical Phi Values keyboard_modifiers#59 keyboard_modifiers#78
Identical Phi Values keyboard_events_size#61 keyboard_events_size#102
Identical Phi Values keyboard_modifiers#60 keyboard_modifiers#78
Identical Phi Values keyboard_events_size#46 keyboard_events_size#47
Identical Phi Values keyboard_modifiers#42 keyboard_modifiers#43
Identical Phi Values keyboard_events_size#29 keyboard_events_size#100
Identical Phi Values keyboard_modifiers#26 keyboard_modifiers#22
Identical Phi Values keyboard_events_size#30 keyboard_events_size#25
Identical Phi Values bitmap_gfx#25 bitmap_gfx#23
Identical Phi Values bitmap_screen#24 bitmap_screen#22
Identical Phi Values bitmap_gfx#15 bitmap_gfx#18
Identical Phi Values bitmap_screen#15 bitmap_screen#18
Identical Phi Values gfx_init_charset::c#2 gfx_init_charset::c#4
Identical Phi Values gfx_init_screen0::cy#2 gfx_init_screen0::cy#4
Identical Phi Values gfx_init_screen1::cy#2 gfx_init_screen1::cy#4
Identical Phi Values gfx_init_screen2::cy#2 gfx_init_screen2::cy#4
Identical Phi Values gfx_init_screen3::cy#2 gfx_init_screen3::cy#4
Identical Phi Values gfx_init_screen4::cy#2 gfx_init_screen4::cy#4
Identical Phi Values bitmap_gfx#27 bitmap_gfx#25
Identical Phi Values bitmap_screen#26 bitmap_screen#24
Identical Phi Values bitmap_gfx#17 bitmap_gfx#1
Identical Phi Values bitmap_screen#17 bitmap_screen#1
Identical Phi Values bitmap_gfx#18 bitmap_gfx#17
Identical Phi Values bitmap_screen#18 bitmap_screen#17
Identical Phi Values gfx_init_plane_8bppchunky::y#2 gfx_init_plane_8bppchunky::y#6
Identical Phi Values gfx_init_plane_horisontal::ay#2 gfx_init_plane_horisontal::ay#4
Identical Phi Values gfx_init_plane_horisontal2::ay#2 gfx_init_plane_horisontal2::ay#4
Identical Phi Values gfx_init_plane_vertical::by#2 gfx_init_plane_vertical::by#4
Identical Phi Values gfx_init_plane_charset8::cr#2 gfx_init_plane_charset8::cr#6
Identical Phi Values gfx_init_plane_charset8::chargen#4 gfx_init_plane_charset8::chargen#1
Identical Phi Values gfx_init_plane_charset8::ch#2 gfx_init_plane_charset8::ch#7
Identical Phi Values gfx_init_plane_fill::fill#3 gfx_init_plane_fill::fill#4
Identical Phi Values gfx_init_plane_fill::by#2 gfx_init_plane_fill::by#4
Identical Phi Values print_screen#22 print_screen#14
Identical Phi Values print_line_cursor#43 print_line_cursor#28
Identical Phi Values print_char_cursor#49 print_char_cursor#12
Identical Phi Values form_cursor_count#46 form_cursor_count#1
Identical Phi Values keyboard_events_size#103 keyboard_events_size#28
Identical Phi Values keyboard_modifiers#100 keyboard_modifiers#25
Identical Phi Values form_field_idx#51 form_field_idx#1
Identical Phi Values print_screen#15 print_screen#0
Identical Phi Values print_line_cursor#10 print_screen#0
Identical Phi Values print_char_cursor#13 print_screen#0
Identical Phi Values print_line_cursor#11 print_line_cursor#25
Identical Phi Values print_char_cursor#14 print_line_cursor#25
Identical Phi Values print_char_cursor#15 print_char_cursor#2
Identical Phi Values print_line_cursor#12 print_line_cursor#1
Identical Phi Values print_screen#16 print_screen#0
Identical Phi Values print_line_cursor#13 print_screen#0
Identical Phi Values print_char_cursor#16 print_screen#0
Identical Phi Values print_line_cursor#14 print_line_cursor#25
Identical Phi Values print_char_cursor#17 print_line_cursor#25
Identical Phi Values print_char_cursor#18 print_char_cursor#2
Identical Phi Values print_line_cursor#15 print_line_cursor#1
Identical Phi Values print_screen#30 print_screen#16
Identical Phi Values print_line_cursor#51 print_line_cursor#15
Identical Phi Values print_char_cursor#58 print_char_cursor#18
Identical Phi Values form_cursor_count#31 form_cursor_count#46
Identical Phi Values keyboard_events_size#63 keyboard_events_size#103
Identical Phi Values keyboard_modifiers#62 keyboard_modifiers#100
Identical Phi Values form_field_idx#39 form_field_idx#51
Identical Phi Values form_cursor_count#22 form_cursor_count#23
Identical Phi Values keyboard_events_size#48 keyboard_events_size#49
Identical Phi Values keyboard_modifiers#45 keyboard_modifiers#46
Identical Phi Values form_field_idx#29 form_field_idx#30
Identical Phi Values form_mode::preset_current#2 form_mode::preset_current#6
Identical Phi Values print_screen#24 print_screen#25
Identical Phi Values print_line_cursor#44 print_line_cursor#45
Identical Phi Values print_char_cursor#50 print_char_cursor#51
Identical Phi Values form_cursor_count#13 form_cursor_count#17
Identical Phi Values keyboard_events_size#104 keyboard_events_size#14
Identical Phi Values keyboard_modifiers#11 keyboard_modifiers#13
Identical Phi Values form_field_idx#14 form_field_idx#19
Identical Phi Values form_set_screen::line#0 form_set_screen::screen#0
Identical Phi Values form_field_idx#16 form_field_idx#29
Identical Phi Values form_cursor_count#15 form_cursor_count#22
Identical Phi Values keyboard_events_size#105 keyboard_events_size#48
Identical Phi Values keyboard_modifiers#47 keyboard_modifiers#45
Identical Phi Values keyboard_events_size#13 keyboard_events_size#100
Identical Phi Values keyboard_modifiers#13 keyboard_modifiers#22
Identical Phi Values keyboard_events_size#14 keyboard_events_size#25
Identical Phi Values bitmap_gfx#10 bitmap_gfx#14
Identical Phi Values bitmap_screen#10 bitmap_screen#14
Identical Phi Values print_screen#18 print_screen#14
Identical Phi Values print_line_cursor#18 print_line_cursor#28
Identical Phi Values print_char_cursor#21 print_char_cursor#12
Identical Phi Values form_cursor_count#10 form_cursor_count#1
Identical Phi Values keyboard_events_size#17 keyboard_events_size#28
Identical Phi Values keyboard_modifiers#16 keyboard_modifiers#25
Identical Phi Values form_field_idx#10 form_field_idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#4
Identical Phi Values print_char_cursor#53 print_line_cursor#25
Identical Phi Values print_line_cursor#47 print_line_cursor#25
Identical Phi Values print_line_cursor#25 print_screen#0
Identical Phi Values keyboard_event_scan::row#4 keyboard_event_scan::row#2
Identical Phi Values keyboard_events_size#23 keyboard_events_size#100
Identical Phi Values keyboard_events_size#113 keyboard_events_size#12
Identical Phi Values keyboard_modifiers#95 keyboard_modifiers#12
Identical Phi Values gfx_init_plane_charset8::ch#7 gfx_init_plane_charset8::ch#8
Identical Phi Values gfx_init_plane_fill::fill#4 gfx_init_plane_fill::fill#6
Identical Phi Values print_screen#25 print_screen#0
Identical Phi Values print_line_cursor#45 print_line_cursor#1
Identical Phi Values print_char_cursor#51 print_char_cursor#2
Identical Phi Values print_screen#17 print_screen#25
Identical Phi Values print_line_cursor#16 print_line_cursor#45
Identical Phi Values print_char_cursor#19 print_char_cursor#51
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [262] bitmap_init::$7 = bitmap_init::y#2 & 7
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition memset::$1 [6] if(memset::num#3<=0) goto memset::@1
Simple Condition memset::$3 [13] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition print_str_lines::$3 [20] if(0!=*print_str_lines::str#3) goto print_str_lines::@2
Simple Condition print_str_lines::$0 [25] if(0==print_str_lines::ch#0) goto print_str_lines::@3
Simple Condition print_str_lines::$4 [28] if(0!=print_str_lines::ch#0) goto print_str_lines::@2
Simple Condition print_str_at::$0 [38] if(0!=*print_str_at::str#2) goto print_str_at::@2
Simple Condition print_ln::$1 [47] if(print_line_cursor#2<print_char_cursor#44) goto print_ln::@1
Simple Condition keyboard_event_scan::$13 [79] if(keyboard_event_scan::row_scan#0!=keyboard_scan_values[keyboard_event_scan::row#2]) goto keyboard_event_scan::@8
Simple Condition keyboard_event_scan::$25 [85] if(keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@7
Simple Condition keyboard_event_scan::$18 [90] if(keyboard_event_scan::$16==0) goto keyboard_event_scan::@11
Simple Condition keyboard_event_scan::$24 [95] if(keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@10
Simple Condition keyboard_event_scan::$20 [97] if(keyboard_events_size#19==8) goto keyboard_event_scan::@11
Simple Condition keyboard_event_scan::$22 [100] if(keyboard_event_scan::event_type#0==0) goto keyboard_event_scan::@12
Simple Condition keyboard_event_scan::$2 [113] if(keyboard_event_scan::$0==0) goto keyboard_event_scan::@1
Simple Condition keyboard_event_scan::$5 [120] if(keyboard_event_scan::$3==0) goto keyboard_event_scan::@2
Simple Condition keyboard_event_scan::$8 [128] if(keyboard_event_scan::$6==0) goto keyboard_event_scan::@3
Simple Condition keyboard_event_scan::$11 [136] if(keyboard_event_scan::$9==0) goto keyboard_event_scan::@return
Simple Condition keyboard_event_get::$0 [149] if(keyboard_events_size#100==0) goto keyboard_event_get::@1
Simple Condition bitmap_init::$1 [164] if(bitmap_init::bits#1!=0) goto bitmap_init::@2
Simple Condition bitmap_init::$2 [168] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition bitmap_init::$9 [180] if(bitmap_init::$7!=7) goto bitmap_init::@6
Simple Condition bitmap_init::$11 [184] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5
Simple Condition bitmap_line::$12 [232] if(bitmap_line::dx#0>bitmap_line::dy#0) goto bitmap_line::@2
Simple Condition bitmap_line::$18 [246] if(bitmap_line::dy#0>=bitmap_line::e#1) goto bitmap_line::@7
Simple Condition bitmap_line::$19 [249] if(bitmap_line::y#1!=bitmap_line::y2#0) goto bitmap_line::@6
Simple Condition bitmap_line::$23 [263] if(bitmap_line::dx#0>=bitmap_line::e1#1) goto bitmap_line::@10
Simple Condition bitmap_line::$24 [266] if(bitmap_line::x#15!=bitmap_line::x2#0) goto bitmap_line::@9
Simple Condition abs_u16::$3 [273] if(0!=abs_u16::$1) goto abs_u16::@1
Simple Condition sgn_u16::$2 [281] if(0!=sgn_u16::$1) goto sgn_u16::@1
Simple Condition get_plane::$0 [303] if(get_plane::idx#10==0) goto get_plane::@1
Simple Condition get_plane::$1 [306] if(get_plane::idx#10==1) goto get_plane::@2
Simple Condition get_plane::$2 [309] if(get_plane::idx#10==2) goto get_plane::@3
Simple Condition get_plane::$3 [312] if(get_plane::idx#10==3) goto get_plane::@4
Simple Condition get_plane::$4 [315] if(get_plane::idx#10==4) goto get_plane::@5
Simple Condition get_plane::$5 [318] if(get_plane::idx#10==5) goto get_plane::@6
Simple Condition get_plane::$6 [321] if(get_plane::idx#10==6) goto get_plane::@7
Simple Condition get_plane::$7 [324] if(get_plane::idx#10==7) goto get_plane::@8
Simple Condition get_plane::$8 [327] if(get_plane::idx#10==8) goto get_plane::@9
Simple Condition get_plane::$9 [330] if(get_plane::idx#10==9) goto get_plane::@10
Simple Condition get_plane::$10 [333] if(get_plane::idx#10==$a) goto get_plane::@11
Simple Condition get_plane::$11 [336] if(get_plane::idx#10==$b) goto get_plane::@12
Simple Condition get_plane::$12 [339] if(get_plane::idx#10==$c) goto get_plane::@13
Simple Condition get_plane::$14 [342] if(get_plane::idx#10!=$d) goto get_plane::@14
Simple Condition get_VICII_screen::$0 [349] if(get_VICII_screen::idx#2==0) goto get_VICII_screen::@1
Simple Condition get_VICII_screen::$1 [352] if(get_VICII_screen::idx#2==1) goto get_VICII_screen::@2
Simple Condition get_VICII_screen::$2 [355] if(get_VICII_screen::idx#2==2) goto get_VICII_screen::@3
Simple Condition get_VICII_screen::$3 [358] if(get_VICII_screen::idx#2==3) goto get_VICII_screen::@4
Simple Condition get_VICII_screen::$5 [361] if(get_VICII_screen::idx#2!=4) goto get_VICII_screen::@5
Simple Condition get_VICII_charset::$0 [368] if(get_VICII_charset::idx#0==0) goto get_VICII_charset::@1
Simple Condition get_VICII_charset::$2 [371] if(get_VICII_charset::idx#0!=1) goto get_VICII_charset::@2
Simple Condition apply_preset::$0 [379] if(apply_preset::idx#0==0) goto apply_preset::@1
Simple Condition apply_preset::$1 [382] if(apply_preset::idx#0==1) goto apply_preset::@2
Simple Condition apply_preset::$2 [385] if(apply_preset::idx#0==2) goto apply_preset::@3
Simple Condition apply_preset::$3 [388] if(apply_preset::idx#0==3) goto apply_preset::@4
Simple Condition apply_preset::$4 [391] if(apply_preset::idx#0==4) goto apply_preset::@5
Simple Condition apply_preset::$5 [394] if(apply_preset::idx#0==5) goto apply_preset::@6
Simple Condition apply_preset::$6 [397] if(apply_preset::idx#0==6) goto apply_preset::@7
Simple Condition apply_preset::$7 [400] if(apply_preset::idx#0==7) goto apply_preset::@8
Simple Condition apply_preset::$8 [403] if(apply_preset::idx#0==8) goto apply_preset::@9
Simple Condition apply_preset::$9 [406] if(apply_preset::idx#0==9) goto apply_preset::@10
Simple Condition apply_preset::$10 [409] if(apply_preset::idx#0==$a) goto apply_preset::@11
Simple Condition apply_preset::$11 [416] if(apply_preset::i#2!=form_fields_cnt) goto apply_preset::@25
Simple Condition render_preset_name::$0 [423] if(render_preset_name::idx#10==0) goto render_preset_name::@1
Simple Condition render_preset_name::$1 [426] if(render_preset_name::idx#10==1) goto render_preset_name::@2
Simple Condition render_preset_name::$2 [429] if(render_preset_name::idx#10==2) goto render_preset_name::@3
Simple Condition render_preset_name::$3 [432] if(render_preset_name::idx#10==3) goto render_preset_name::@4
Simple Condition render_preset_name::$4 [435] if(render_preset_name::idx#10==4) goto render_preset_name::@5
Simple Condition render_preset_name::$5 [438] if(render_preset_name::idx#10==5) goto render_preset_name::@6
Simple Condition render_preset_name::$6 [441] if(render_preset_name::idx#10==6) goto render_preset_name::@7
Simple Condition render_preset_name::$7 [444] if(render_preset_name::idx#10==7) goto render_preset_name::@8
Simple Condition render_preset_name::$8 [447] if(render_preset_name::idx#10==8) goto render_preset_name::@9
Simple Condition render_preset_name::$9 [450] if(render_preset_name::idx#10==9) goto render_preset_name::@10
Simple Condition render_preset_name::$10 [453] if(render_preset_name::idx#10==$a) goto render_preset_name::@11
Simple Condition gfx_mode::$1 [464] if(*form_ctrl_line==0) goto gfx_mode::@1
Simple Condition gfx_mode::$3 [467] if(*form_ctrl_borof==0) goto gfx_mode::@2
Simple Condition gfx_mode::$5 [471] if(*form_ctrl_hicol==0) goto gfx_mode::@3
Simple Condition gfx_mode::$7 [475] if(*form_ctrl_overs==0) goto gfx_mode::@4
Simple Condition gfx_mode::$9 [479] if(*form_ctrl_colof==0) goto gfx_mode::@5
Simple Condition gfx_mode::$11 [483] if(*form_ctrl_chunk==0) goto gfx_mode::@6
Simple Condition gfx_mode::$13 [489] if(*form_ctrl_ecm==0) goto gfx_mode::@7
Simple Condition gfx_mode::$15 [493] if(*form_ctrl_bmm==0) goto gfx_mode::@8
Simple Condition gfx_mode::$17 [499] if(*form_ctrl_mcm==0) goto gfx_mode::@9
Simple Condition gfx_mode::$73 [584] if(gfx_mode::cx#1!=rangelast(0,$27)) goto gfx_mode::@21
Simple Condition gfx_mode::$74 [587] if(gfx_mode::cy#1!=rangelast(0,$18)) goto gfx_mode::@20
Simple Condition gfx_mode::$63 [602] if(*form_dtv_palet==0) goto gfx_mode::@10
Simple Condition gfx_mode::$75 [609] if(gfx_mode::j#1!=rangelast(0,$f)) goto gfx_mode::@25
Simple Condition gfx_mode::$76 [614] if(gfx_mode::i#1!=rangelast(0,$f)) goto gfx_mode::@26
Simple Condition gfx_mode::$77 [619] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto gfx_mode::@28
Simple Condition gfx_mode::$81 [627] if(gfx_mode::keyboard_event#0!=KEY_SPACE) goto gfx_mode::@27
Simple Condition gfx_init_charset::$0 [660] if(gfx_init_charset::l#1!=rangelast(0,7)) goto gfx_init_charset::@2
Simple Condition gfx_init_charset::$1 [663] if(gfx_init_charset::c#1!=rangelast(0,$ff)) goto gfx_init_charset::@1
Simple Condition gfx_init_screen0::$4 [679] if(gfx_init_screen0::cx#1!=rangelast(0,$27)) goto gfx_init_screen0::@2
Simple Condition gfx_init_screen0::$5 [682] if(gfx_init_screen0::cy#1!=rangelast(0,$18)) goto gfx_init_screen0::@1
Simple Condition gfx_init_screen1::$2 [695] if(gfx_init_screen1::cx#1!=rangelast(0,$27)) goto gfx_init_screen1::@2
Simple Condition gfx_init_screen1::$3 [698] if(gfx_init_screen1::cy#1!=rangelast(0,$18)) goto gfx_init_screen1::@1
Simple Condition gfx_init_screen2::$5 [714] if(gfx_init_screen2::cx#1!=rangelast(0,$27)) goto gfx_init_screen2::@2
Simple Condition gfx_init_screen2::$6 [717] if(gfx_init_screen2::cy#1!=rangelast(0,$18)) goto gfx_init_screen2::@1
Simple Condition gfx_init_screen3::$4 [732] if(gfx_init_screen3::cx#1!=rangelast(0,$27)) goto gfx_init_screen3::@2
Simple Condition gfx_init_screen3::$5 [735] if(gfx_init_screen3::cy#1!=rangelast(0,$18)) goto gfx_init_screen3::@1
Simple Condition gfx_init_screen4::$0 [746] if(gfx_init_screen4::cx#1!=rangelast(0,$27)) goto gfx_init_screen4::@2
Simple Condition gfx_init_screen4::$1 [749] if(gfx_init_screen4::cy#1!=rangelast(0,$18)) goto gfx_init_screen4::@1
Simple Condition gfx_init_VICII_bitmap::$2 [762] if(gfx_init_VICII_bitmap::l#2<gfx_init_VICII_bitmap::lines_cnt) goto gfx_init_VICII_bitmap::@2
Simple Condition gfx_init_plane_8bppchunky::$3 [782] if(gfx_init_plane_8bppchunky::gfxb#3!=$8000) goto gfx_init_plane_8bppchunky::@3
Simple Condition gfx_init_plane_8bppchunky::$6 [790] if(gfx_init_plane_8bppchunky::x#1!=rangelast(0,$13f)) goto gfx_init_plane_8bppchunky::@2
Simple Condition gfx_init_plane_8bppchunky::$7 [797] if(gfx_init_plane_8bppchunky::y#1!=rangelast(0,$c7)) goto gfx_init_plane_8bppchunky::@1
Simple Condition gfx_init_plane_horisontal::$3 [812] if(gfx_init_plane_horisontal::$2==0) goto gfx_init_plane_horisontal::@3
Simple Condition gfx_init_plane_horisontal::$4 [820] if(gfx_init_plane_horisontal::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal::@2
Simple Condition gfx_init_plane_horisontal::$5 [823] if(gfx_init_plane_horisontal::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal::@1
Simple Condition gfx_init_plane_horisontal2::$4 [842] if(gfx_init_plane_horisontal2::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal2::@2
Simple Condition gfx_init_plane_horisontal2::$5 [845] if(gfx_init_plane_horisontal2::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal2::@1
Simple Condition gfx_init_plane_vertical::$2 [862] if(gfx_init_plane_vertical::bx#1!=rangelast(0,$27)) goto gfx_init_plane_vertical::@2
Simple Condition gfx_init_plane_vertical::$3 [865] if(gfx_init_plane_vertical::by#1!=rangelast(0,$c7)) goto gfx_init_plane_vertical::@1
Simple Condition gfx_init_plane_charset8::$4 [888] if(gfx_init_plane_charset8::$2==0) goto gfx_init_plane_charset8::@4
Simple Condition gfx_init_plane_charset8::$6 [896] if(gfx_init_plane_charset8::cp#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@3
Simple Condition gfx_init_plane_charset8::$7 [899] if(gfx_init_plane_charset8::cr#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@2
Simple Condition gfx_init_plane_charset8::$8 [902] if(gfx_init_plane_charset8::ch#1!=rangelast(0,$ff)) goto gfx_init_plane_charset8::@1
Simple Condition gfx_init_plane_fill::$8 [938] if(gfx_init_plane_fill::bx#1!=rangelast(0,$27)) goto gfx_init_plane_fill::@2
Simple Condition gfx_init_plane_fill::$9 [941] if(gfx_init_plane_fill::by#1!=rangelast(0,$c7)) goto gfx_init_plane_fill::@1
Simple Condition form_mode::$9 [984] if(form_mode::i#1!=rangelast(0,$f)) goto form_mode::@1
Simple Condition form_mode::$10 [992] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto form_mode::@4
Simple Condition form_mode::$13 [998] if(form_mode::$11==0) goto form_mode::@6
Simple Condition form_mode::$15 [1000] if(form_mode::preset_current#6==*form_preset) goto form_mode::@3
Simple Condition form_set_screen::$3 [1019] if(form_set_screen::y#1!=rangelast(0,$18)) goto form_set_screen::@1
Simple Condition form_render_values::$0 [1031] if(form_render_values::idx#2<form_fields_cnt) goto form_render_values::@2
Simple Condition form_control::$2 [1046] if(form_cursor_count#4>=0) goto form_control::@1
Simple Condition form_control::$3 [1049] if(form_cursor_count#16<FORM_CURSOR_BLINK/2) goto form_control::@2
Simple Condition form_control::$7 [1062] if(form_control::key_event#0!=KEY_CRSR_DOWN) goto form_control::@4
Simple Condition form_control::$9 [1064] if(form_control::key_event#0!=KEY_CRSR_RIGHT) goto form_control::@5
Simple Condition form_control::$16 [1069] if(form_control::$15==0) goto form_control::@16
Simple Condition form_control::$21 [1072] if(form_field_idx#4!=form_fields_cnt) goto form_control::@17
Simple Condition form_control::$18 [1075] if(form_field_idx#5!=$ff) goto form_control::@17
Simple Condition form_control::$11 [1084] if(form_control::key_event#0!=KEY_SPACE) goto form_control::@6
Simple Condition form_control::$23 [1087] if(form_control::$22==0) goto form_control::@19
Simple Condition form_control::$27 [1090] if(form_fields_val[form_field_idx#30]<=form_fields_max[form_field_idx#30]) goto form_control::@20
Simple Condition form_control::$25 [1093] if(form_fields_val[form_field_idx#30]!=$ff) goto form_control::@20
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [221] bitmap_line::$7 = ! bitmap_line::$6
Rewriting && if()-condition to two if()s [220] bitmap_line::$6 = bitmap_line::$4 && bitmap_line::$5
Successful SSA optimization Pass2ConditionalAndOrRewriting
Negating conditional jump and destination [627] if(gfx_mode::keyboard_event#0==KEY_SPACE) goto gfx_mode::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [1076] form_field_idx#6 = form_fields_cnt - 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memset::c#0 = ' '
Constant memset::num#0 = $3e8
Constant keyboard_event_scan::keycode#0 = 0
Constant keyboard_event_scan::row#0 = 0
Constant keyboard_event_scan::col#0 = 0
Constant keyboard_modifiers#0 = 0
Constant keyboard_event_pressed::keycode#0 = KEY_LSHIFT
Constant keyboard_event_pressed::keycode#1 = KEY_RSHIFT
Constant keyboard_event_pressed::keycode#2 = KEY_CTRL
Constant keyboard_event_pressed::keycode#3 = KEY_COMMODORE
Constant keyboard_event_get::return#0 = $ff
Constant bitmap_init::bits#0 = $80
Constant bitmap_init::x#0 = 0
Constant bitmap_init::bits#2 = $80
Constant bitmap_init::y#0 = 0
Constant memset::num#1 = $3e8
Constant memset::c#2 = 0
Constant memset::num#2 = $1f40
Constant sgn_u16::return#2 = -1
Constant sgn_u16::return#3 = 1
Constant get_plane::return#0 = (dword)VICII_SCREEN0
Constant get_plane::return#1 = (dword)VICII_SCREEN1
Constant get_plane::return#2 = (dword)VICII_SCREEN2
Constant get_plane::return#3 = (dword)VICII_SCREEN3
Constant get_plane::return#4 = (dword)VICII_BITMAP
Constant get_plane::return#5 = (dword)VICII_CHARSET_ROM
Constant get_plane::return#6 = PLANE_8BPP_CHUNKY
Constant get_plane::return#7 = PLANE_HORISONTAL
Constant get_plane::return#8 = PLANE_VERTICAL
Constant get_plane::return#9 = PLANE_HORISONTAL2
Constant get_plane::return#10 = PLANE_VERTICAL2
Constant get_plane::return#11 = PLANE_CHARSET8
Constant get_plane::return#12 = PLANE_BLANK
Constant get_plane::return#13 = PLANE_FULL
Constant get_plane::return#15 = (dword)VICII_SCREEN0
Constant get_VICII_screen::return#0 = VICII_SCREEN0
Constant get_VICII_screen::return#1 = VICII_SCREEN1
Constant get_VICII_screen::return#2 = VICII_SCREEN2
Constant get_VICII_screen::return#3 = VICII_SCREEN3
Constant get_VICII_screen::return#4 = VICII_SCREEN4
Constant get_VICII_screen::return#6 = VICII_SCREEN0
Constant get_VICII_charset::return#0 = VICII_CHARSET_ROM
Constant get_VICII_charset::return#1 = VICII_BITMAP
Constant get_VICII_charset::return#3 = VICII_CHARSET_ROM
Constant apply_preset::preset#0 = (byte*) 0
Constant apply_preset::preset#1 = preset_stdchar
Constant apply_preset::preset#2 = preset_ecmchar
Constant apply_preset::preset#3 = preset_stdbm
Constant apply_preset::preset#4 = preset_mcbm
Constant apply_preset::preset#5 = preset_hi_stdchar
Constant apply_preset::preset#6 = preset_hi_ecmchar
Constant apply_preset::preset#7 = preset_twoplane
Constant apply_preset::preset#8 = preset_chunky
Constant apply_preset::preset#9 = preset_sixsfred
Constant apply_preset::preset#10 = preset_sixsfred2
Constant apply_preset::preset#11 = preset_8bpppixelcell
Constant apply_preset::preset#12 = preset_stdchar
Constant apply_preset::i#0 = 0
Constant render_preset_name::name#0 = (byte*) 0
Constant render_preset_name::name#1 = render_preset_name::$12
Constant render_preset_name::name#2 = render_preset_name::$13
Constant render_preset_name::name#3 = render_preset_name::$14
Constant render_preset_name::name#4 = render_preset_name::$15
Constant render_preset_name::name#5 = render_preset_name::$16
Constant render_preset_name::name#6 = render_preset_name::$17
Constant render_preset_name::name#7 = render_preset_name::$18
Constant render_preset_name::name#8 = render_preset_name::$19
Constant render_preset_name::name#9 = render_preset_name::$20
Constant render_preset_name::name#10 = render_preset_name::$21
Constant render_preset_name::name#11 = render_preset_name::$22
Constant render_preset_name::name#12 = render_preset_name::$23
Constant print_str_at::at#1 = FORM_SCREEN+(byte)$28*2+$a
Constant gfx_mode::dtv_control#0 = 0
Constant gfx_mode::VICII_control#0 = (byte)VICII_DEN|VICII_RSEL|3
Constant gfx_mode::VICII_control2#0 = VICII_CSEL
Constant gfx_mode::col#0 = COLS
Constant gfx_mode::cy#0 = 0
Constant gfx_mode::cx#0 = 0
Constant gfx_mode::i#0 = 0
Constant gfx_mode::j#0 = 0
Constant gfx_init_charset::chargen#0 = CHARGEN
Constant gfx_init_charset::charset#0 = VICII_CHARSET_ROM
Constant gfx_init_charset::c#0 = 0
Constant gfx_init_charset::l#0 = 0
Constant gfx_init_screen0::ch#0 = VICII_SCREEN0
Constant gfx_init_screen0::cy#0 = 0
Constant gfx_init_screen0::cx#0 = 0
Constant gfx_init_screen1::ch#0 = VICII_SCREEN1
Constant gfx_init_screen1::cy#0 = 0
Constant gfx_init_screen1::cx#0 = 0
Constant gfx_init_screen2::ch#0 = VICII_SCREEN2
Constant gfx_init_screen2::cy#0 = 0
Constant gfx_init_screen2::cx#0 = 0
Constant gfx_init_screen3::ch#0 = VICII_SCREEN3
Constant gfx_init_screen3::cy#0 = 0
Constant gfx_init_screen3::cx#0 = 0
Constant gfx_init_screen4::ch#0 = VICII_SCREEN4
Constant gfx_init_screen4::cy#0 = 0
Constant gfx_init_screen4::cx#0 = 0
Constant bitmap_init::gfx#0 = VICII_BITMAP
Constant bitmap_init::screen#0 = VICII_SCREEN0
Constant bitmap_clear::bgcol#0 = BLACK
Constant bitmap_clear::fgcol#0 = WHITE
Constant gfx_init_VICII_bitmap::l#0 = 0
Constant gfx_init_plane_8bppchunky::gfxbCpuBank#0 = (byte)PLANE_8BPP_CHUNKY/$4000
Constant gfx_init_plane_8bppchunky::gfxb#0 = (byte*) 16384
Constant gfx_init_plane_8bppchunky::y#0 = 0
Constant gfx_init_plane_8bppchunky::x#0 = 0
Constant gfx_init_plane_8bppchunky::gfxb#2 = (byte*) 16384
Constant dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte)$4000/$4000
Constant gfx_init_plane_horisontal::gfxbCpuBank#0 = (byte)PLANE_HORISONTAL/$4000
Constant gfx_init_plane_horisontal::gfxa#0 = (byte*)$4000+PLANE_HORISONTAL&$3fff
Constant gfx_init_plane_horisontal::ay#0 = 0
Constant gfx_init_plane_horisontal::ax#0 = 0
Constant dtvSetCpuBankSegment1::cpuBankIdx#4 = (byte)$4000/$4000
Constant gfx_init_plane_horisontal2::gfxbCpuBank#0 = (byte)PLANE_HORISONTAL2/$4000
Constant gfx_init_plane_horisontal2::gfxa#0 = (byte*)$4000+PLANE_HORISONTAL2&$3fff
Constant gfx_init_plane_horisontal2::ay#0 = 0
Constant gfx_init_plane_horisontal2::ax#0 = 0
Constant dtvSetCpuBankSegment1::cpuBankIdx#6 = (byte)$4000/$4000
Constant gfx_init_plane_vertical::gfxbCpuBank#0 = (byte)PLANE_VERTICAL/$4000
Constant gfx_init_plane_vertical::gfxb#0 = (byte*)$4000+PLANE_VERTICAL&$3fff
Constant gfx_init_plane_vertical::by#0 = 0
Constant gfx_init_plane_vertical::bx#0 = 0
Constant dtvSetCpuBankSegment1::cpuBankIdx#8 = (byte)$4000/$4000
Constant gfx_init_plane_charset8::gfxbCpuBank#0 = (byte)PLANE_CHARSET8/$4000
Constant gfx_init_plane_charset8::gfxa#0 = (byte*)$4000+PLANE_CHARSET8&$3fff
Constant gfx_init_plane_charset8::chargen#0 = CHARGEN
Constant gfx_init_plane_charset8::col#0 = 0
Constant gfx_init_plane_charset8::ch#0 = 0
Constant gfx_init_plane_charset8::cr#0 = 0
Constant gfx_init_plane_charset8::cp#0 = 0
Constant gfx_init_plane_charset8::c#0 = 0
Constant dtvSetCpuBankSegment1::cpuBankIdx#10 = (byte)$4000/$4000
Constant gfx_init_plane_fill::plane_addr#0 = PLANE_VERTICAL2
Constant gfx_init_plane_fill::fill#0 = $1b
Constant gfx_init_plane_fill::plane_addr#1 = PLANE_BLANK
Constant gfx_init_plane_fill::fill#1 = 0
Constant gfx_init_plane_fill::plane_addr#2 = PLANE_FULL
Constant gfx_init_plane_fill::fill#2 = $ff
Constant gfx_init_plane_fill::by#0 = 0
Constant gfx_init_plane_fill::bx#0 = 0
Constant dtvSetCpuBankSegment1::cpuBankIdx#12 = (byte)$4000/$4000
Constant print_set_screen::screen#0 = COLS
Constant print_str_lines::str#1 = FORM_COLS
Constant print_set_screen::screen#1 = FORM_SCREEN
Constant print_str_lines::str#2 = FORM_TEXT
Constant form_set_screen::screen#0 = FORM_SCREEN
Constant form_mode::i#0 = 0
Constant form_set_screen::y#0 = 0
Constant form_render_values::idx#0 = 0
Constant form_cursor_count#5 = FORM_CURSOR_BLINK
Constant form_field_idx#6 = form_fields_cnt-1
Constant form_cursor_count#6 = FORM_CURSOR_BLINK/2
Constant form_control::return#1 = 0
Constant form_field_idx#7 = 0
Constant form_control::return#3 = 0
Constant form_control::return#4 = 0
Constant form_control::return#5 = $ff
Constant print_screen#26 = (byte*) 1024
Constant keyboard_events_size#16 = 0
Constant keyboard_modifiers#15 = 0
Constant bitmap_screen#28 = (byte*) 0
Constant bitmap_gfx#29 = (byte*) 0
Constant form_field_idx#36 = 0
Constant form_cursor_count#28 = (signed byte)FORM_CURSOR_BLINK/2
Successful SSA optimization Pass2ConstantIdentification
Constant bitmap_gfx#0 = bitmap_init::gfx#0
Constant bitmap_screen#0 = bitmap_init::screen#0
Constant dtvSetCpuBankSegment1::cpuBankIdx#0 = gfx_init_plane_8bppchunky::gfxbCpuBank#0
Constant dtvSetCpuBankSegment1::cpuBankIdx#3 = gfx_init_plane_horisontal::gfxbCpuBank#0
Constant dtvSetCpuBankSegment1::cpuBankIdx#5 = gfx_init_plane_horisontal2::gfxbCpuBank#0
Constant dtvSetCpuBankSegment1::cpuBankIdx#7 = gfx_init_plane_vertical::gfxbCpuBank#0
Constant dtvSetCpuBankSegment1::cpuBankIdx#9 = gfx_init_plane_charset8::gfxbCpuBank#0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::str#1 = (void*)bitmap_screen#0
Constant memset::str#2 = (void*)bitmap_gfx#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [295] if(true) goto main::@2
Removing PHI-reference to removed block (gfx_mode::@27) in block gfx_mode::@return
Removing PHI-reference to removed block (gfx_mode::@27) in block gfx_mode::@return
if() condition always true - replacing block destination [616] if(true) goto gfx_mode::@28
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
if() condition always true - replacing block destination [989] if(true) goto form_mode::@4
Successful SSA optimization Pass2ConstantIfs
Consolidated constant strings into render_preset_name::$12
Successful SSA optimization Pass2ConstantStringConsolidation
Resolved ranged next value [83] keyboard_event_scan::row#1 = ++ keyboard_event_scan::row#2 to ++
Resolved ranged comparison value [85] if(keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@7 to 8
Resolved ranged next value [93] keyboard_event_scan::col#1 = ++ keyboard_event_scan::col#2 to ++
Resolved ranged comparison value [95] if(keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@10 to 8
Resolved ranged next value [166] bitmap_init::x#1 = ++ bitmap_init::x#2 to ++
Resolved ranged comparison value [168] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to 0
Resolved ranged next value [182] bitmap_init::y#1 = ++ bitmap_init::y#2 to ++
Resolved ranged comparison value [184] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5 to 0
Resolved ranged next value [582] gfx_mode::cx#1 = ++ gfx_mode::cx#2 to ++
Resolved ranged comparison value [584] if(gfx_mode::cx#1!=rangelast(0,$27)) goto gfx_mode::@21 to $28
Resolved ranged next value [585] gfx_mode::cy#1 = ++ gfx_mode::cy#4 to ++
Resolved ranged comparison value [587] if(gfx_mode::cy#1!=rangelast(0,$18)) goto gfx_mode::@20 to $19
Resolved ranged next value [607] gfx_mode::j#1 = ++ gfx_mode::j#2 to ++
Resolved ranged comparison value [609] if(gfx_mode::j#1!=rangelast(0,$f)) goto gfx_mode::@25 to $10
Resolved ranged next value [612] gfx_mode::i#1 = ++ gfx_mode::i#2 to ++
Resolved ranged comparison value [614] if(gfx_mode::i#1!=rangelast(0,$f)) goto gfx_mode::@26 to $10
Resolved ranged next value [658] gfx_init_charset::l#1 = ++ gfx_init_charset::l#2 to ++
Resolved ranged comparison value [660] if(gfx_init_charset::l#1!=rangelast(0,7)) goto gfx_init_charset::@2 to 8
Resolved ranged next value [661] gfx_init_charset::c#1 = ++ gfx_init_charset::c#4 to ++
Resolved ranged comparison value [663] if(gfx_init_charset::c#1!=rangelast(0,$ff)) goto gfx_init_charset::@1 to 0
Resolved ranged next value [677] gfx_init_screen0::cx#1 = ++ gfx_init_screen0::cx#2 to ++
Resolved ranged comparison value [679] if(gfx_init_screen0::cx#1!=rangelast(0,$27)) goto gfx_init_screen0::@2 to $28
Resolved ranged next value [680] gfx_init_screen0::cy#1 = ++ gfx_init_screen0::cy#4 to ++
Resolved ranged comparison value [682] if(gfx_init_screen0::cy#1!=rangelast(0,$18)) goto gfx_init_screen0::@1 to $19
Resolved ranged next value [693] gfx_init_screen1::cx#1 = ++ gfx_init_screen1::cx#2 to ++
Resolved ranged comparison value [695] if(gfx_init_screen1::cx#1!=rangelast(0,$27)) goto gfx_init_screen1::@2 to $28
Resolved ranged next value [696] gfx_init_screen1::cy#1 = ++ gfx_init_screen1::cy#4 to ++
Resolved ranged comparison value [698] if(gfx_init_screen1::cy#1!=rangelast(0,$18)) goto gfx_init_screen1::@1 to $19
Resolved ranged next value [712] gfx_init_screen2::cx#1 = ++ gfx_init_screen2::cx#2 to ++
Resolved ranged comparison value [714] if(gfx_init_screen2::cx#1!=rangelast(0,$27)) goto gfx_init_screen2::@2 to $28
Resolved ranged next value [715] gfx_init_screen2::cy#1 = ++ gfx_init_screen2::cy#4 to ++
Resolved ranged comparison value [717] if(gfx_init_screen2::cy#1!=rangelast(0,$18)) goto gfx_init_screen2::@1 to $19
Resolved ranged next value [730] gfx_init_screen3::cx#1 = ++ gfx_init_screen3::cx#2 to ++
Resolved ranged comparison value [732] if(gfx_init_screen3::cx#1!=rangelast(0,$27)) goto gfx_init_screen3::@2 to $28
Resolved ranged next value [733] gfx_init_screen3::cy#1 = ++ gfx_init_screen3::cy#4 to ++
Resolved ranged comparison value [735] if(gfx_init_screen3::cy#1!=rangelast(0,$18)) goto gfx_init_screen3::@1 to $19
Resolved ranged next value [744] gfx_init_screen4::cx#1 = ++ gfx_init_screen4::cx#2 to ++
Resolved ranged comparison value [746] if(gfx_init_screen4::cx#1!=rangelast(0,$27)) goto gfx_init_screen4::@2 to $28
Resolved ranged next value [747] gfx_init_screen4::cy#1 = ++ gfx_init_screen4::cy#4 to ++
Resolved ranged comparison value [749] if(gfx_init_screen4::cy#1!=rangelast(0,$18)) goto gfx_init_screen4::@1 to $19
Resolved ranged next value [788] gfx_init_plane_8bppchunky::x#1 = ++ gfx_init_plane_8bppchunky::x#2 to ++
Resolved ranged comparison value [790] if(gfx_init_plane_8bppchunky::x#1!=rangelast(0,$13f)) goto gfx_init_plane_8bppchunky::@2 to $140
Resolved ranged next value [795] gfx_init_plane_8bppchunky::y#1 = ++ gfx_init_plane_8bppchunky::y#6 to ++
Resolved ranged comparison value [797] if(gfx_init_plane_8bppchunky::y#1!=rangelast(0,$c7)) goto gfx_init_plane_8bppchunky::@1 to $c8
Resolved ranged next value [818] gfx_init_plane_horisontal::ax#1 = ++ gfx_init_plane_horisontal::ax#2 to ++
Resolved ranged comparison value [820] if(gfx_init_plane_horisontal::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal::@2 to $28
Resolved ranged next value [821] gfx_init_plane_horisontal::ay#1 = ++ gfx_init_plane_horisontal::ay#4 to ++
Resolved ranged comparison value [823] if(gfx_init_plane_horisontal::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal::@1 to $c8
Resolved ranged next value [840] gfx_init_plane_horisontal2::ax#1 = ++ gfx_init_plane_horisontal2::ax#2 to ++
Resolved ranged comparison value [842] if(gfx_init_plane_horisontal2::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal2::@2 to $28
Resolved ranged next value [843] gfx_init_plane_horisontal2::ay#1 = ++ gfx_init_plane_horisontal2::ay#4 to ++
Resolved ranged comparison value [845] if(gfx_init_plane_horisontal2::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal2::@1 to $c8
Resolved ranged next value [860] gfx_init_plane_vertical::bx#1 = ++ gfx_init_plane_vertical::bx#2 to ++
Resolved ranged comparison value [862] if(gfx_init_plane_vertical::bx#1!=rangelast(0,$27)) goto gfx_init_plane_vertical::@2 to $28
Resolved ranged next value [863] gfx_init_plane_vertical::by#1 = ++ gfx_init_plane_vertical::by#4 to ++
Resolved ranged comparison value [865] if(gfx_init_plane_vertical::by#1!=rangelast(0,$c7)) goto gfx_init_plane_vertical::@1 to $c8
Resolved ranged next value [894] gfx_init_plane_charset8::cp#1 = ++ gfx_init_plane_charset8::cp#2 to ++
Resolved ranged comparison value [896] if(gfx_init_plane_charset8::cp#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@3 to 8
Resolved ranged next value [897] gfx_init_plane_charset8::cr#1 = ++ gfx_init_plane_charset8::cr#6 to ++
Resolved ranged comparison value [899] if(gfx_init_plane_charset8::cr#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@2 to 8
Resolved ranged next value [900] gfx_init_plane_charset8::ch#1 = ++ gfx_init_plane_charset8::ch#8 to ++
Resolved ranged comparison value [902] if(gfx_init_plane_charset8::ch#1!=rangelast(0,$ff)) goto gfx_init_plane_charset8::@1 to 0
Resolved ranged next value [936] gfx_init_plane_fill::bx#1 = ++ gfx_init_plane_fill::bx#2 to ++
Resolved ranged comparison value [938] if(gfx_init_plane_fill::bx#1!=rangelast(0,$27)) goto gfx_init_plane_fill::@2 to $28
Resolved ranged next value [939] gfx_init_plane_fill::by#1 = ++ gfx_init_plane_fill::by#4 to ++
Resolved ranged comparison value [941] if(gfx_init_plane_fill::by#1!=rangelast(0,$c7)) goto gfx_init_plane_fill::@1 to $c8
Resolved ranged next value [982] form_mode::i#1 = ++ form_mode::i#2 to ++
Resolved ranged comparison value [984] if(form_mode::i#1!=rangelast(0,$f)) goto form_mode::@1 to $10
Resolved ranged next value [1017] form_set_screen::y#1 = ++ form_set_screen::y#2 to ++
Resolved ranged comparison value [1019] if(form_set_screen::y#1!=rangelast(0,$18)) goto form_set_screen::@1 to $19
Converting *(pointer+n) to pointer[n] [1036] *form_render_values::field#0 = print_hextab[form_fields_val[form_render_values::idx#2]]  -- form_field_ptr::line#0[form_field_ptr::x#0]
Successful SSA optimization Pass2InlineDerefIdx
Simplifying constant evaluating to zero PLANE_HORISONTAL&$3fff in 
Simplifying constant evaluating to zero PLANE_HORISONTAL2&$3fff in 
Simplifying constant evaluating to zero PLANE_CHARSET8&$3fff in 
Simplifying constant evaluating to zero (byte)(dword)FORM_CHARSET/$10000 in [967] *DTV_GRAPHICS_VIC_BANK = (byte)(dword)FORM_CHARSET/$10000
Simplifying constant evaluating to zero >(word)DTV_COLOR_BANK_DEFAULT/$400 in [969] *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
Simplifying constant evaluating to zero (byte)(word)FORM_CHARSET/$4000 in [971] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)FORM_CHARSET/$4000
Simplifying constant evaluating to zero <FORM_SCREEN in [976] *DTV_PLANEA_START_LO = <FORM_SCREEN
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero form_fields_val in 
Simplifying expression containing zero $4000 in 
Simplifying expression containing zero $4000 in 
Simplifying expression containing zero $4000 in 
Simplifying expression containing zero (byte*)CIA1 in [67] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0]
Simplifying expression containing zero KEY_MODIFIER_LSHIFT in [121] keyboard_modifiers#1 = keyboard_modifiers#0 | KEY_MODIFIER_LSHIFT
Simplifying expression containing zero bitmap_clear::$0 in [189] bitmap_clear::col#0 = bitmap_clear::$0 + bitmap_clear::bgcol#0
Simplifying expression containing zero DTV_LINEAR in [468] gfx_mode::dtv_control#1 = gfx_mode::dtv_control#0 | DTV_LINEAR
Simplifying expression containing zero (byte*)CIA2 in [550] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)VICII_SCREEN0/$4000
Simplifying expression containing zero 3 in [971] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^0
Simplifying expression containing zero (byte*)CIA2 in [971] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable memset::return#2 and assignment [42] memset::return#2 = memset::str#4
Eliminating unused variable memset::return#3 and assignment [142] memset::return#3 = memset::str#4
Eliminating unused variable memset::return#4 and assignment [144] memset::return#4 = memset::str#4
Eliminating unused variable - keeping the phi block print_screen#14
Eliminating unused variable - keeping the phi block print_line_cursor#28
Eliminating unused variable - keeping the phi block print_char_cursor#12
Eliminating unused variable - keeping the phi block keyboard_modifiers#43
Eliminating unused variable gfx_init_plane_horisontal::gfxbCpuBank#1 and assignment [552] gfx_init_plane_horisontal::gfxbCpuBank#1 = ++ gfx_init_plane_horisontal::gfxbCpuBank#0
Eliminating unused variable gfx_init_plane_horisontal2::gfxbCpuBank#1 and assignment [569] gfx_init_plane_horisontal2::gfxbCpuBank#1 = ++ gfx_init_plane_horisontal2::gfxbCpuBank#0
Eliminating unused variable gfx_init_plane_vertical::gfxbCpuBank#1 and assignment [583] gfx_init_plane_vertical::gfxbCpuBank#1 = ++ gfx_init_plane_vertical::gfxbCpuBank#0
Eliminating unused variable gfx_init_plane_charset8::gfxbCpuBank#1 and assignment [595] gfx_init_plane_charset8::gfxbCpuBank#1 = ++ gfx_init_plane_charset8::gfxbCpuBank#0
Eliminating unused variable gfx_init_plane_fill::gfxbCpuBank#1 and assignment [630] gfx_init_plane_fill::gfxbCpuBank#1 = ++ gfx_init_plane_fill::gfxbCpuBank#0
Eliminating unused variable - keeping the phi block keyboard_modifiers#46
Eliminating unused variable form_render_values::field#0 and assignment [710] form_render_values::field#0 = form_field_ptr::return#2
Eliminating unused constant bitmap_clear::bgcol#0
Eliminating unused constant apply_preset::preset#0
Eliminating unused constant render_preset_name::name#0
Eliminating unused constant OFFSET_STRUCT_MOS6526_CIA_PORT_A
Eliminating unused constant bitmap_screen#28
Eliminating unused constant bitmap_gfx#29
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block keyboard_modifiers#25
Eliminating unused variable - keeping the phi block keyboard_modifiers#12
Eliminating unused variable form_field_ptr::return#2 and assignment [701] form_field_ptr::return#2 = form_field_ptr::return#0
Eliminating unused constant BLACK
Eliminating unused constant print_screen#26
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block keyboard_modifiers#10
Eliminating unused constant keyboard_modifiers#15
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [62] if(keyboard_event_scan::row#1!=8) goto keyboard_event_scan::@7
Adding number conversion cast (unumber) 8 in [70] if(keyboard_event_scan::col#1!=8) goto keyboard_event_scan::@10
Adding number conversion cast (unumber) 0 in [122] if(bitmap_init::x#1!=0) goto bitmap_init::@1
Adding number conversion cast (unumber) 0 in [134] if(bitmap_init::y#1!=0) goto bitmap_init::@5
Adding number conversion cast (unumber) $28 in [393] if(gfx_mode::cx#1!=$28) goto gfx_mode::@21
Adding number conversion cast (unumber) $19 in [395] if(gfx_mode::cy#1!=$19) goto gfx_mode::@20
Adding number conversion cast (unumber) $10 in [413] if(gfx_mode::j#1!=$10) goto gfx_mode::@25
Adding number conversion cast (unumber) $10 in [417] if(gfx_mode::i#1!=$10) goto gfx_mode::@26
Adding number conversion cast (unumber) 8 in [450] if(gfx_init_charset::l#1!=8) goto gfx_init_charset::@2
Adding number conversion cast (unumber) 0 in [452] if(gfx_init_charset::c#1!=0) goto gfx_init_charset::@1
Adding number conversion cast (unumber) $28 in [464] if(gfx_init_screen0::cx#1!=$28) goto gfx_init_screen0::@2
Adding number conversion cast (unumber) $19 in [466] if(gfx_init_screen0::cy#1!=$19) goto gfx_init_screen0::@1
Adding number conversion cast (unumber) $28 in [475] if(gfx_init_screen1::cx#1!=$28) goto gfx_init_screen1::@2
Adding number conversion cast (unumber) $19 in [477] if(gfx_init_screen1::cy#1!=$19) goto gfx_init_screen1::@1
Adding number conversion cast (unumber) $28 in [489] if(gfx_init_screen2::cx#1!=$28) goto gfx_init_screen2::@2
Adding number conversion cast (unumber) $19 in [491] if(gfx_init_screen2::cy#1!=$19) goto gfx_init_screen2::@1
Adding number conversion cast (unumber) $28 in [502] if(gfx_init_screen3::cx#1!=$28) goto gfx_init_screen3::@2
Adding number conversion cast (unumber) $19 in [504] if(gfx_init_screen3::cy#1!=$19) goto gfx_init_screen3::@1
Adding number conversion cast (unumber) $28 in [511] if(gfx_init_screen4::cx#1!=$28) goto gfx_init_screen4::@2
Adding number conversion cast (unumber) $19 in [513] if(gfx_init_screen4::cy#1!=$19) goto gfx_init_screen4::@1
Adding number conversion cast (unumber) $140 in [539] if(gfx_init_plane_8bppchunky::x#1!=$140) goto gfx_init_plane_8bppchunky::@2
Adding number conversion cast (unumber) $c8 in [544] if(gfx_init_plane_8bppchunky::y#1!=$c8) goto gfx_init_plane_8bppchunky::@1
Adding number conversion cast (unumber) $28 in [558] if(gfx_init_plane_horisontal::ax#1!=$28) goto gfx_init_plane_horisontal::@2
Adding number conversion cast (unumber) $c8 in [560] if(gfx_init_plane_horisontal::ay#1!=$c8) goto gfx_init_plane_horisontal::@1
Adding number conversion cast (unumber) $28 in [571] if(gfx_init_plane_horisontal2::ax#1!=$28) goto gfx_init_plane_horisontal2::@2
Adding number conversion cast (unumber) $c8 in [573] if(gfx_init_plane_horisontal2::ay#1!=$c8) goto gfx_init_plane_horisontal2::@1
Adding number conversion cast (unumber) $28 in [582] if(gfx_init_plane_vertical::bx#1!=$28) goto gfx_init_plane_vertical::@2
Adding number conversion cast (unumber) $c8 in [584] if(gfx_init_plane_vertical::by#1!=$c8) goto gfx_init_plane_vertical::@1
Adding number conversion cast (unumber) 8 in [602] if(gfx_init_plane_charset8::cp#1!=8) goto gfx_init_plane_charset8::@3
Adding number conversion cast (unumber) 8 in [604] if(gfx_init_plane_charset8::cr#1!=8) goto gfx_init_plane_charset8::@2
Adding number conversion cast (unumber) 0 in [606] if(gfx_init_plane_charset8::ch#1!=0) goto gfx_init_plane_charset8::@1
Adding number conversion cast (unumber) $28 in [631] if(gfx_init_plane_fill::bx#1!=$28) goto gfx_init_plane_fill::@2
Adding number conversion cast (unumber) $c8 in [633] if(gfx_init_plane_fill::by#1!=$c8) goto gfx_init_plane_fill::@1
Adding number conversion cast (unumber) $10 in [661] if(form_mode::i#1!=$10) goto form_mode::@1
Adding number conversion cast (unumber) $19 in [687] if(form_set_screen::y#1!=$19) goto form_set_screen::@1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [145] bitmap_plot::plotter#0 = (byte*)bitmap_plot::$3
Inlining cast [692] form_field_ptr::line#0 = (byte*)form_field_ptr::$2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast VICII_DEN|VICII_RSEL|3
Simplifying constant integer cast FORM_CURSOR_BLINK/2
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $140
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $10
Simplifying constant integer cast $19
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (word) $140
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $19
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias bitmap_init::$7 = bitmap_init::$3 
Alias bitmap_clear::col#0 = bitmap_clear::$0 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values keyboard_events_size#10 keyboard_events_size#25
Identical Phi Values form_cursor_count#14 form_cursor_count#17
Identical Phi Values keyboard_events_size#12 keyboard_events_size#25
Identical Phi Values form_field_idx#15 form_field_idx#19
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values keyboard_events_size#47 keyboard_events_size#25
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition bitmap_line::$4 [159] if(bitmap_line::dx#0==0) goto bitmap_line::@20
Simple Condition bitmap_line::$5 [740] if(bitmap_line::dy#0==0) goto bitmap_line::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [159] if(bitmap_line::dx#0!=0) goto bitmap_line::@1
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [136] bitmap_clear::col#0 = bitmap_clear::fgcol#0 * $10
Constant right-side identified [307] gfx_mode::VICII_control#1 = gfx_mode::VICII_control#0 | VICII_ECM
Constant right-side identified [384] gfx_mode::VICII_control2#1 = gfx_mode::VICII_control2#0 | VICII_MCM
Constant right-side identified [527] gfx_init_plane_8bppchunky::gfxbCpuBank#1 = ++ gfx_init_plane_8bppchunky::gfxbCpuBank#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant keyboard_modifiers#1 = KEY_MODIFIER_LSHIFT
Constant bitmap_clear::col#0 = bitmap_clear::fgcol#0*$10
Constant gfx_mode::dtv_control#1 = DTV_LINEAR
Constant gfx_mode::VICII_control#1 = gfx_mode::VICII_control#0|VICII_ECM
Constant gfx_mode::VICII_control2#1 = gfx_mode::VICII_control2#0|VICII_MCM
Constant gfx_init_plane_8bppchunky::gfxbCpuBank#1 = ++gfx_init_plane_8bppchunky::gfxbCpuBank#0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::c#1 = bitmap_clear::col#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [6] memset::$4 = (byte*)memset::str#4 keeping memset::str#4
Inlining Noop Cast [8] memset::dst#0 = (byte*)memset::str#4 keeping memset::str#4
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [140] bitmap_plot::plotter#0 = (byte*)bitmap_plot::$3 keeping bitmap_plot::plotter#0
Inlining Noop Cast [359] gfx_mode::$82 = (word)gfx_mode::$46 keeping gfx_mode::$82
Inlining Noop Cast [366] gfx_mode::$83 = (word)gfx_mode::$49 keeping gfx_mode::$83
Inlining Noop Cast [612] gfx_init_plane_fill::gfxb#0 = (byte*)gfx_init_plane_fill::$6 keeping gfx_init_plane_fill::gfxb#0
Inlining Noop Cast [678] form_field_ptr::line#0 = (byte*)form_field_ptr::$2 keeping form_field_ptr::line#0
Successful SSA optimization Pass2NopCastInlining
Rewriting division to use shift [168] bitmap_line::e1#0 = bitmap_line::dy#0 / 2
Rewriting division to use shift [169] bitmap_line::e#0 = bitmap_line::dx#0 / 2
Rewriting multiplication to use shift [307] gfx_mode::$18 = *form_a_start_hi * $10
Rewriting multiplication to use shift [323] gfx_mode::$28 = *form_a_step_hi * $10
Rewriting multiplication to use shift [326] gfx_mode::$30 = *form_a_mod_hi * $10
Rewriting multiplication to use shift [330] gfx_mode::$32 = *form_b_start_hi * $10
Rewriting multiplication to use shift [346] gfx_mode::$42 = *form_b_step_hi * $10
Rewriting multiplication to use shift [349] gfx_mode::$44 = *form_b_mod_hi * $10
Rewriting division to use shift [361] gfx_mode::$48 = gfx_mode::$47 / $40
Rewriting division to use shift [369] gfx_mode::$52 = gfx_mode::$51 / 4
Rewriting multiplication to use shift [387] gfx_mode::$55 = *form_VICII_bg0_hi * $10
Rewriting multiplication to use shift [390] gfx_mode::$57 = *form_VICII_bg1_hi * $10
Rewriting multiplication to use shift [393] gfx_mode::$59 = *form_VICII_bg2_hi * $10
Rewriting multiplication to use shift [396] gfx_mode::$61 = *form_VICII_bg3_hi * $10
Rewriting multiplication to use shift [446] gfx_init_screen0::$1 = gfx_init_screen0::$0 * $10
Rewriting multiplication to use shift [472] gfx_init_screen2::$3 = gfx_init_screen2::col#0 * $10
Rewriting multiplication to use shift [484] gfx_init_screen3::$1 = gfx_init_screen3::$0 * $10
Rewriting division to use shift [553] gfx_init_plane_horisontal2::$2 = gfx_init_plane_horisontal2::ay#4 / 2
Rewriting multiplication to use shift [586] gfx_init_plane_charset8::bits#1 = gfx_init_plane_charset8::bits#2 * 2
Rewriting multiplication to use shift [604] gfx_init_plane_fill::$0 = gfx_init_plane_fill::plane_addr#3 * 4
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#2
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#4
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#6
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#8
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#10
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#12
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#0
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#3
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#5
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#7
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#9
Inlining constant with var siblings memset::c#0
Inlining constant with var siblings memset::num#0
Inlining constant with var siblings memset::num#1
Inlining constant with var siblings memset::c#2
Inlining constant with var siblings memset::num#2
Inlining constant with var siblings memset::str#1
Inlining constant with var siblings memset::str#2
Inlining constant with var siblings memset::c#1
Inlining constant with var siblings print_str_lines::str#1
Inlining constant with var siblings print_str_lines::str#2
Inlining constant with var siblings print_str_at::at#1
Inlining constant with var siblings print_set_screen::screen#0
Inlining constant with var siblings print_set_screen::screen#1
Inlining constant with var siblings keyboard_event_scan::keycode#0
Inlining constant with var siblings keyboard_event_scan::row#0
Inlining constant with var siblings keyboard_event_scan::col#0
Inlining constant with var siblings keyboard_event_pressed::keycode#0
Inlining constant with var siblings keyboard_event_pressed::keycode#1
Inlining constant with var siblings keyboard_event_pressed::keycode#2
Inlining constant with var siblings keyboard_event_pressed::keycode#3
Inlining constant with var siblings keyboard_event_get::return#0
Inlining constant with var siblings bitmap_init::bits#0
Inlining constant with var siblings bitmap_init::x#0
Inlining constant with var siblings bitmap_init::bits#2
Inlining constant with var siblings bitmap_init::y#0
Inlining constant with var siblings sgn_u16::return#2
Inlining constant with var siblings sgn_u16::return#3
Inlining constant with var siblings get_plane::return#0
Inlining constant with var siblings get_plane::return#1
Inlining constant with var siblings get_plane::return#2
Inlining constant with var siblings get_plane::return#3
Inlining constant with var siblings get_plane::return#4
Inlining constant with var siblings get_plane::return#5
Inlining constant with var siblings get_plane::return#6
Inlining constant with var siblings get_plane::return#7
Inlining constant with var siblings get_plane::return#8
Inlining constant with var siblings get_plane::return#9
Inlining constant with var siblings get_plane::return#10
Inlining constant with var siblings get_plane::return#11
Inlining constant with var siblings get_plane::return#12
Inlining constant with var siblings get_plane::return#13
Inlining constant with var siblings get_plane::return#15
Inlining constant with var siblings get_VICII_screen::return#0
Inlining constant with var siblings get_VICII_screen::return#1
Inlining constant with var siblings get_VICII_screen::return#2
Inlining constant with var siblings get_VICII_screen::return#3
Inlining constant with var siblings get_VICII_screen::return#4
Inlining constant with var siblings get_VICII_screen::return#6
Inlining constant with var siblings get_VICII_charset::return#0
Inlining constant with var siblings get_VICII_charset::return#1
Inlining constant with var siblings get_VICII_charset::return#3
Inlining constant with var siblings apply_preset::preset#1
Inlining constant with var siblings apply_preset::preset#2
Inlining constant with var siblings apply_preset::preset#3
Inlining constant with var siblings apply_preset::preset#4
Inlining constant with var siblings apply_preset::preset#5
Inlining constant with var siblings apply_preset::preset#6
Inlining constant with var siblings apply_preset::preset#7
Inlining constant with var siblings apply_preset::preset#8
Inlining constant with var siblings apply_preset::preset#9
Inlining constant with var siblings apply_preset::preset#10
Inlining constant with var siblings apply_preset::preset#11
Inlining constant with var siblings apply_preset::preset#12
Inlining constant with var siblings apply_preset::i#0
Inlining constant with var siblings render_preset_name::name#1
Inlining constant with var siblings render_preset_name::name#2
Inlining constant with var siblings render_preset_name::name#3
Inlining constant with var siblings render_preset_name::name#4
Inlining constant with var siblings render_preset_name::name#5
Inlining constant with var siblings render_preset_name::name#6
Inlining constant with var siblings render_preset_name::name#7
Inlining constant with var siblings render_preset_name::name#8
Inlining constant with var siblings render_preset_name::name#9
Inlining constant with var siblings render_preset_name::name#10
Inlining constant with var siblings render_preset_name::name#11
Inlining constant with var siblings render_preset_name::name#12
Inlining constant with var siblings gfx_mode::dtv_control#0
Inlining constant with var siblings gfx_mode::VICII_control#0
Inlining constant with var siblings gfx_mode::VICII_control2#0
Inlining constant with var siblings gfx_mode::col#0
Inlining constant with var siblings gfx_mode::cy#0
Inlining constant with var siblings gfx_mode::cx#0
Inlining constant with var siblings gfx_mode::i#0
Inlining constant with var siblings gfx_mode::j#0
Inlining constant with var siblings gfx_mode::dtv_control#1
Inlining constant with var siblings gfx_mode::VICII_control#1
Inlining constant with var siblings gfx_mode::VICII_control2#1
Inlining constant with var siblings gfx_init_charset::chargen#0
Inlining constant with var siblings gfx_init_charset::charset#0
Inlining constant with var siblings gfx_init_charset::c#0
Inlining constant with var siblings gfx_init_charset::l#0
Inlining constant with var siblings gfx_init_screen0::ch#0
Inlining constant with var siblings gfx_init_screen0::cy#0
Inlining constant with var siblings gfx_init_screen0::cx#0
Inlining constant with var siblings gfx_init_screen1::ch#0
Inlining constant with var siblings gfx_init_screen1::cy#0
Inlining constant with var siblings gfx_init_screen1::cx#0
Inlining constant with var siblings gfx_init_screen2::ch#0
Inlining constant with var siblings gfx_init_screen2::cy#0
Inlining constant with var siblings gfx_init_screen2::cx#0
Inlining constant with var siblings gfx_init_screen3::ch#0
Inlining constant with var siblings gfx_init_screen3::cy#0
Inlining constant with var siblings gfx_init_screen3::cx#0
Inlining constant with var siblings gfx_init_screen4::ch#0
Inlining constant with var siblings gfx_init_screen4::cy#0
Inlining constant with var siblings gfx_init_screen4::cx#0
Inlining constant with var siblings gfx_init_VICII_bitmap::l#0
Inlining constant with var siblings gfx_init_plane_8bppchunky::gfxbCpuBank#0
Inlining constant with var siblings gfx_init_plane_8bppchunky::gfxb#0
Inlining constant with var siblings gfx_init_plane_8bppchunky::y#0
Inlining constant with var siblings gfx_init_plane_8bppchunky::x#0
Inlining constant with var siblings gfx_init_plane_8bppchunky::gfxb#2
Inlining constant with var siblings gfx_init_plane_8bppchunky::gfxbCpuBank#1
Inlining constant with var siblings gfx_init_plane_horisontal::gfxa#0
Inlining constant with var siblings gfx_init_plane_horisontal::ay#0
Inlining constant with var siblings gfx_init_plane_horisontal::ax#0
Inlining constant with var siblings gfx_init_plane_horisontal2::gfxa#0
Inlining constant with var siblings gfx_init_plane_horisontal2::ay#0
Inlining constant with var siblings gfx_init_plane_horisontal2::ax#0
Inlining constant with var siblings gfx_init_plane_vertical::gfxb#0
Inlining constant with var siblings gfx_init_plane_vertical::by#0
Inlining constant with var siblings gfx_init_plane_vertical::bx#0
Inlining constant with var siblings gfx_init_plane_charset8::gfxa#0
Inlining constant with var siblings gfx_init_plane_charset8::chargen#0
Inlining constant with var siblings gfx_init_plane_charset8::col#0
Inlining constant with var siblings gfx_init_plane_charset8::ch#0
Inlining constant with var siblings gfx_init_plane_charset8::cr#0
Inlining constant with var siblings gfx_init_plane_charset8::cp#0
Inlining constant with var siblings gfx_init_plane_charset8::c#0
Inlining constant with var siblings gfx_init_plane_fill::plane_addr#0
Inlining constant with var siblings gfx_init_plane_fill::fill#0
Inlining constant with var siblings gfx_init_plane_fill::plane_addr#1
Inlining constant with var siblings gfx_init_plane_fill::fill#1
Inlining constant with var siblings gfx_init_plane_fill::plane_addr#2
Inlining constant with var siblings gfx_init_plane_fill::fill#2
Inlining constant with var siblings gfx_init_plane_fill::by#0
Inlining constant with var siblings gfx_init_plane_fill::bx#0
Inlining constant with var siblings form_mode::i#0
Inlining constant with var siblings form_set_screen::y#0
Inlining constant with var siblings form_render_values::idx#0
Inlining constant with var siblings form_control::return#1
Inlining constant with var siblings form_control::return#3
Inlining constant with var siblings form_control::return#4
Inlining constant with var siblings form_control::return#5
Inlining constant with var siblings keyboard_modifiers#0
Inlining constant with var siblings form_cursor_count#5
Inlining constant with var siblings form_field_idx#6
Inlining constant with var siblings form_cursor_count#6
Inlining constant with var siblings form_field_idx#7
Inlining constant with var siblings keyboard_events_size#16
Inlining constant with var siblings form_field_idx#36
Inlining constant with var siblings form_cursor_count#28
Inlining constant with var siblings keyboard_modifiers#1
Constant inlined bitmap_init::screen#0 = VICII_SCREEN0
Constant inlined form_field_idx#36 = 0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#0 = (byte)PLANE_8BPP_CHUNKY/$4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#3 = gfx_init_plane_horisontal::gfxbCpuBank#0
Constant inlined gfx_mode::i#0 = 0
Constant inlined gfx_init_plane_charset8::cp#0 = 0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte)$4000/$4000
Constant inlined gfx_init_plane_horisontal::gfxa#0 = (byte*)$4000
Constant inlined gfx_init_screen3::cx#0 = 0
Constant inlined apply_preset::i#0 = 0
Constant inlined gfx_init_plane_horisontal::ax#0 = 0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#9 = gfx_init_plane_charset8::gfxbCpuBank#0
Constant inlined get_VICII_charset::return#1 = VICII_BITMAP
Constant inlined gfx_init_charset::charset#0 = VICII_CHARSET_ROM
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#8 = (byte)$4000/$4000
Constant inlined gfx_init_plane_charset8::ch#0 = 0
Constant inlined get_VICII_charset::return#0 = VICII_CHARSET_ROM
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#5 = gfx_init_plane_horisontal2::gfxbCpuBank#0
Constant inlined gfx_mode::dtv_control#0 = 0
Constant inlined gfx_mode::dtv_control#1 = DTV_LINEAR
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#4 = (byte)$4000/$4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#7 = gfx_init_plane_vertical::gfxbCpuBank#0
Constant inlined get_VICII_charset::return#3 = VICII_CHARSET_ROM
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#6 = (byte)$4000/$4000
Constant inlined gfx_init_charset::chargen#0 = CHARGEN
Constant inlined gfx_init_plane_horisontal2::ax#0 = 0
Constant inlined gfx_mode::cy#0 = 0
Constant inlined gfx_init_plane_fill::bx#0 = 0
Constant inlined gfx_init_screen1::ch#0 = VICII_SCREEN1
Constant inlined gfx_init_charset::c#0 = 0
Constant inlined print_str_lines::str#2 = FORM_TEXT
Constant inlined print_str_lines::str#1 = FORM_COLS
Constant inlined memset::c#0 = ' '
Constant inlined memset::c#1 = bitmap_clear::col#0
Constant inlined memset::c#2 = 0
Constant inlined gfx_init_screen1::cx#0 = 0
Constant inlined gfx_init_plane_vertical::by#0 = 0
Constant inlined gfx_mode::j#0 = 0
Constant inlined keyboard_event_scan::col#0 = 0
Constant inlined apply_preset::preset#5 = preset_hi_stdchar
Constant inlined apply_preset::preset#4 = preset_mcbm
Constant inlined apply_preset::preset#7 = preset_twoplane
Constant inlined apply_preset::preset#6 = preset_hi_ecmchar
Constant inlined apply_preset::preset#9 = preset_sixsfred
Constant inlined apply_preset::preset#8 = preset_chunky
Constant inlined gfx_mode::VICII_control2#1 = VICII_CSEL|VICII_MCM
Constant inlined gfx_init_plane_horisontal::ay#0 = 0
Constant inlined gfx_mode::VICII_control2#0 = VICII_CSEL
Constant inlined sgn_u16::return#3 = 1
Constant inlined sgn_u16::return#2 = -1
Constant inlined keyboard_events_size#16 = 0
Constant inlined gfx_init_plane_horisontal2::ay#0 = 0
Constant inlined gfx_init_plane_vertical::gfxb#0 = (byte*)$4000+PLANE_VERTICAL&$3fff
Constant inlined get_VICII_screen::return#2 = VICII_SCREEN2
Constant inlined apply_preset::preset#11 = preset_8bpppixelcell
Constant inlined gfx_init_screen0::cx#0 = 0
Constant inlined form_render_values::idx#0 = 0
Constant inlined get_VICII_screen::return#1 = VICII_SCREEN1
Constant inlined apply_preset::preset#12 = preset_stdchar
Constant inlined get_VICII_screen::return#0 = VICII_SCREEN0
Constant inlined gfx_mode::cx#0 = 0
Constant inlined get_VICII_screen::return#6 = VICII_SCREEN0
Constant inlined get_VICII_screen::return#4 = VICII_SCREEN4
Constant inlined get_VICII_screen::return#3 = VICII_SCREEN3
Constant inlined apply_preset::preset#10 = preset_sixsfred2
Constant inlined keyboard_event_pressed::keycode#3 = KEY_COMMODORE
Constant inlined keyboard_event_pressed::keycode#2 = KEY_CTRL
Constant inlined keyboard_event_pressed::keycode#1 = KEY_RSHIFT
Constant inlined keyboard_event_pressed::keycode#0 = KEY_LSHIFT
Constant inlined gfx_init_screen0::ch#0 = VICII_SCREEN0
Constant inlined apply_preset::preset#1 = preset_stdchar
Constant inlined gfx_mode::col#0 = COLS
Constant inlined apply_preset::preset#3 = preset_stdbm
Constant inlined apply_preset::preset#2 = preset_ecmchar
Constant inlined bitmap_screen#0 = VICII_SCREEN0
Constant inlined bitmap_init::y#0 = 0
Constant inlined gfx_init_plane_charset8::col#0 = 0
Constant inlined form_cursor_count#5 = FORM_CURSOR_BLINK
Constant inlined get_plane::return#15 = (dword)VICII_SCREEN0
Constant inlined gfx_init_screen1::cy#0 = 0
Constant inlined gfx_init_plane_vertical::bx#0 = 0
Constant inlined form_cursor_count#6 = FORM_CURSOR_BLINK/2
Constant inlined get_plane::return#13 = PLANE_FULL
Constant inlined get_plane::return#12 = PLANE_BLANK
Constant inlined get_plane::return#11 = PLANE_CHARSET8
Constant inlined get_plane::return#10 = PLANE_VERTICAL2
Constant inlined get_plane::return#2 = (dword)VICII_SCREEN2
Constant inlined get_plane::return#3 = (dword)VICII_SCREEN3
Constant inlined form_control::return#5 = $ff
Constant inlined get_plane::return#0 = (dword)VICII_SCREEN0
Constant inlined bitmap_init::gfx#0 = VICII_BITMAP
Constant inlined print_str_at::at#1 = FORM_SCREEN+(byte)$28*2+$a
Constant inlined get_plane::return#1 = (dword)VICII_SCREEN1
Constant inlined gfx_init_plane_horisontal2::gfxa#0 = (byte*)$4000
Constant inlined get_plane::return#6 = PLANE_8BPP_CHUNKY
Constant inlined keyboard_modifiers#0 = 0
Constant inlined get_plane::return#7 = PLANE_HORISONTAL
Constant inlined memset::num#2 = $1f40
Constant inlined gfx_init_plane_charset8::cr#0 = 0
Constant inlined form_control::return#1 = 0
Constant inlined gfx_init_screen2::ch#0 = VICII_SCREEN2
Constant inlined get_plane::return#4 = (dword)VICII_BITMAP
Constant inlined form_control::return#4 = 0
Constant inlined keyboard_modifiers#1 = KEY_MODIFIER_LSHIFT
Constant inlined get_plane::return#5 = (dword)VICII_CHARSET_ROM
Constant inlined form_control::return#3 = 0
Constant inlined get_plane::return#8 = PLANE_VERTICAL
Constant inlined memset::num#1 = $3e8
Constant inlined form_field_idx#7 = 0
Constant inlined get_plane::return#9 = PLANE_HORISONTAL2
Constant inlined memset::num#0 = $3e8
Constant inlined form_field_idx#6 = form_fields_cnt-1
Constant inlined gfx_init_plane_charset8::chargen#0 = CHARGEN
Constant inlined gfx_init_plane_8bppchunky::gfxb#0 = (byte*) 16384
Constant inlined gfx_init_screen2::cx#0 = 0
Constant inlined gfx_init_plane_fill::fill#1 = 0
Constant inlined gfx_init_plane_8bppchunky::gfxb#2 = (byte*) 16384
Constant inlined gfx_init_plane_fill::fill#2 = $ff
Constant inlined gfx_init_plane_8bppchunky::x#0 = 0
Constant inlined form_mode::i#0 = 0
Constant inlined gfx_init_screen0::cy#0 = 0
Constant inlined gfx_init_screen2::cy#0 = 0
Constant inlined keyboard_event_scan::keycode#0 = 0
Constant inlined bitmap_gfx#0 = VICII_BITMAP
Constant inlined form_cursor_count#28 = FORM_CURSOR_BLINK/2
Constant inlined gfx_init_plane_8bppchunky::gfxbCpuBank#0 = (byte)PLANE_8BPP_CHUNKY/$4000
Constant inlined gfx_init_plane_8bppchunky::gfxbCpuBank#1 = ++(byte)PLANE_8BPP_CHUNKY/$4000
Constant inlined gfx_init_screen4::cx#0 = 0
Constant inlined bitmap_init::x#0 = 0
Constant inlined render_preset_name::$13 = render_preset_name::name#2
Constant inlined render_preset_name::$14 = render_preset_name::name#3
Constant inlined gfx_init_plane_charset8::gfxa#0 = (byte*)$4000
Constant inlined render_preset_name::$15 = render_preset_name::name#4
Constant inlined render_preset_name::$16 = render_preset_name::name#5
Constant inlined gfx_init_VICII_bitmap::l#0 = 0
Constant inlined gfx_init_screen4::ch#0 = VICII_SCREEN4
Constant inlined render_preset_name::$12 = render_preset_name::name#1
Constant inlined keyboard_event_scan::row#0 = 0
Constant inlined bitmap_init::bits#0 = $80
Constant inlined gfx_init_plane_charset8::c#0 = 0
Constant inlined render_preset_name::$17 = render_preset_name::name#6
Constant inlined render_preset_name::$18 = render_preset_name::name#7
Constant inlined bitmap_init::bits#2 = $80
Constant inlined form_set_screen::y#0 = 0
Constant inlined render_preset_name::$19 = render_preset_name::name#8
Constant inlined gfx_init_screen3::cy#0 = 0
Constant inlined form_set_screen::screen#0 = FORM_SCREEN
Constant inlined print_set_screen::screen#0 = COLS
Constant inlined print_set_screen::screen#1 = FORM_SCREEN
Constant inlined gfx_init_plane_8bppchunky::y#0 = 0
Constant inlined memset::str#2 = (void*)VICII_BITMAP
Constant inlined memset::str#1 = (void*)VICII_SCREEN0
Constant inlined gfx_mode::VICII_control#1 = VICII_DEN|VICII_RSEL|3|VICII_ECM
Constant inlined gfx_mode::VICII_control#0 = VICII_DEN|VICII_RSEL|3
Constant inlined render_preset_name::$20 = render_preset_name::name#9
Constant inlined render_preset_name::$21 = render_preset_name::name#10
Constant inlined render_preset_name::$22 = render_preset_name::name#11
Constant inlined render_preset_name::$23 = render_preset_name::name#12
Constant inlined gfx_init_plane_fill::by#0 = 0
Constant inlined gfx_init_plane_fill::fill#0 = $1b
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#12 = (byte)$4000/$4000
Constant inlined bitmap_clear::fgcol#0 = WHITE
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#10 = (byte)$4000/$4000
Constant inlined form_preset = form_fields_val
Constant inlined gfx_init_charset::l#0 = 0
Constant inlined gfx_init_screen4::cy#0 = 0
Constant inlined gfx_init_plane_fill::plane_addr#2 = PLANE_FULL
Constant inlined gfx_init_plane_fill::plane_addr#0 = PLANE_VERTICAL2
Constant inlined gfx_init_plane_fill::plane_addr#1 = PLANE_BLANK
Constant inlined keyboard_event_get::return#0 = $ff
Constant inlined gfx_init_screen3::ch#0 = VICII_SCREEN3
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings render_preset_name::name#1
Inlining constant with var siblings render_preset_name::name#2
Inlining constant with var siblings render_preset_name::name#3
Inlining constant with var siblings render_preset_name::name#4
Inlining constant with var siblings render_preset_name::name#5
Inlining constant with var siblings render_preset_name::name#6
Inlining constant with var siblings render_preset_name::name#7
Inlining constant with var siblings render_preset_name::name#8
Inlining constant with var siblings render_preset_name::name#9
Inlining constant with var siblings render_preset_name::name#10
Inlining constant with var siblings render_preset_name::name#11
Inlining constant with var siblings render_preset_name::name#12
Consolidated array index constant in assignment (gfx_init_VICII_bitmap::lines_x+1)[gfx_init_VICII_bitmap::$3]
Consolidated array index constant in assignment (gfx_init_VICII_bitmap::lines_y+1)[gfx_init_VICII_bitmap::$4]
Successful SSA optimization Pass2ConstantAdditionElimination
Alias gfx_init_VICII_bitmap::l#2 = gfx_init_VICII_bitmap::$3 gfx_init_VICII_bitmap::$4 
Successful SSA optimization Pass2AliasElimination
Consolidated constant strings into render_preset_name::name#1
Successful SSA optimization Pass2ConstantStringConsolidation
Inlining constant with var siblings render_preset_name::name#1
Inlining constant with var siblings render_preset_name::name#2
Inlining constant with var siblings render_preset_name::name#3
Inlining constant with var siblings render_preset_name::name#4
Inlining constant with var siblings render_preset_name::name#5
Inlining constant with var siblings render_preset_name::name#6
Inlining constant with var siblings render_preset_name::name#7
Inlining constant with var siblings render_preset_name::name#8
Inlining constant with var siblings render_preset_name::name#9
Inlining constant with var siblings render_preset_name::name#10
Inlining constant with var siblings render_preset_name::name#11
Inlining constant with var siblings render_preset_name::name#12
Constant inlined render_preset_name::name#12 = render_preset_name::name#1
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings render_preset_name::name#1
Inlining constant with var siblings render_preset_name::name#2
Inlining constant with var siblings render_preset_name::name#3
Inlining constant with var siblings render_preset_name::name#4
Inlining constant with var siblings render_preset_name::name#5
Inlining constant with var siblings render_preset_name::name#6
Inlining constant with var siblings render_preset_name::name#7
Inlining constant with var siblings render_preset_name::name#8
Inlining constant with var siblings render_preset_name::name#9
Inlining constant with var siblings render_preset_name::name#10
Inlining constant with var siblings render_preset_name::name#11
Inlining constant with var siblings render_preset_name::name#1
Inlining constant with var siblings render_preset_name::name#2
Inlining constant with var siblings render_preset_name::name#3
Inlining constant with var siblings render_preset_name::name#4
Inlining constant with var siblings render_preset_name::name#5
Inlining constant with var siblings render_preset_name::name#6
Inlining constant with var siblings render_preset_name::name#7
Inlining constant with var siblings render_preset_name::name#8
Inlining constant with var siblings render_preset_name::name#9
Inlining constant with var siblings render_preset_name::name#10
Inlining constant with var siblings render_preset_name::name#11
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $19
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast $28*2
Successful SSA optimization PassNCastSimplification
Added new block during phi lifting print_str_lines::@8(between print_str_lines::@1 and print_str_lines::@2)
Added new block during phi lifting print_str_lines::@9(between print_str_lines::@3 and print_str_lines::@2)
Added new block during phi lifting print_str_lines::@10(between print_str_lines::@2 and print_str_lines::@3)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting keyboard_event_scan::@25(between keyboard_event_scan::@9 and keyboard_event_scan::@7)
Added new block during phi lifting keyboard_event_scan::@26(between keyboard_event_scan::@11 and keyboard_event_scan::@10)
Added new block during phi lifting keyboard_event_scan::@27(between keyboard_event_scan::@10 and keyboard_event_scan::@11)
Added new block during phi lifting keyboard_event_scan::@28(between keyboard_event_scan::@13 and keyboard_event_scan::@11)
Added new block during phi lifting keyboard_event_scan::@29(between keyboard_event_scan::@22 and keyboard_event_scan::@2)
Added new block during phi lifting keyboard_event_scan::@30(between keyboard_event_scan::@23 and keyboard_event_scan::@3)
Added new block during phi lifting keyboard_event_scan::@31(between keyboard_event_scan::@24 and keyboard_event_scan::@return)
Added new block during phi lifting bitmap_init::@8(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@6 and bitmap_init::@5)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@5 and bitmap_init::@6)
Added new block during phi lifting bitmap_line::@21(between bitmap_line::@7 and bitmap_line::@6)
Added new block during phi lifting bitmap_line::@22(between bitmap_line::@17 and bitmap_line::@7)
Added new block during phi lifting bitmap_line::@23(between bitmap_line::@10 and bitmap_line::@3)
Added new block during phi lifting bitmap_line::@24(between bitmap_line::@7 and bitmap_line::@3)
Added new block during phi lifting bitmap_line::@25(between bitmap_line::@10 and bitmap_line::@9)
Added new block during phi lifting bitmap_line::@26(between bitmap_line::@19 and bitmap_line::@10)
Added new block during phi lifting gfx_mode::@37(between gfx_mode::@1 and gfx_mode::@2)
Added new block during phi lifting gfx_mode::@38(between gfx_mode::@2 and gfx_mode::@3)
Added new block during phi lifting gfx_mode::@39(between gfx_mode::@3 and gfx_mode::@4)
Added new block during phi lifting gfx_mode::@40(between gfx_mode::@4 and gfx_mode::@5)
Added new block during phi lifting gfx_mode::@41(between gfx_mode::@5 and gfx_mode::@6)
Added new block during phi lifting gfx_mode::@42(between gfx_mode::@7 and gfx_mode::@8)
Added new block during phi lifting gfx_mode::@43(between gfx_mode::@22 and gfx_mode::@20)
Added new block during phi lifting gfx_mode::@44(between gfx_mode::@21 and gfx_mode::@21)
Added new block during phi lifting gfx_mode::@45(between gfx_mode::@25 and gfx_mode::@25)
Added new block during phi lifting gfx_mode::@46(between gfx_mode::@26 and gfx_mode::@26)
Added new block during phi lifting gfx_init_charset::@5(between gfx_init_charset::@3 and gfx_init_charset::@1)
Added new block during phi lifting gfx_init_charset::@6(between gfx_init_charset::@2 and gfx_init_charset::@2)
Added new block during phi lifting gfx_init_screen0::@4(between gfx_init_screen0::@3 and gfx_init_screen0::@1)
Added new block during phi lifting gfx_init_screen0::@5(between gfx_init_screen0::@2 and gfx_init_screen0::@2)
Added new block during phi lifting gfx_init_screen1::@4(between gfx_init_screen1::@3 and gfx_init_screen1::@1)
Added new block during phi lifting gfx_init_screen1::@5(between gfx_init_screen1::@2 and gfx_init_screen1::@2)
Added new block during phi lifting gfx_init_screen2::@4(between gfx_init_screen2::@3 and gfx_init_screen2::@1)
Added new block during phi lifting gfx_init_screen2::@5(between gfx_init_screen2::@2 and gfx_init_screen2::@2)
Added new block during phi lifting gfx_init_screen3::@4(between gfx_init_screen3::@3 and gfx_init_screen3::@1)
Added new block during phi lifting gfx_init_screen3::@5(between gfx_init_screen3::@2 and gfx_init_screen3::@2)
Added new block during phi lifting gfx_init_screen4::@4(between gfx_init_screen4::@3 and gfx_init_screen4::@1)
Added new block during phi lifting gfx_init_screen4::@5(between gfx_init_screen4::@2 and gfx_init_screen4::@2)
Added new block during phi lifting gfx_init_plane_8bppchunky::@10(between gfx_init_plane_8bppchunky::@5 and gfx_init_plane_8bppchunky::@1)
Added new block during phi lifting gfx_init_plane_8bppchunky::@11(between gfx_init_plane_8bppchunky::@3 and gfx_init_plane_8bppchunky::@2)
Added new block during phi lifting gfx_init_plane_8bppchunky::@12(between gfx_init_plane_8bppchunky::@2 and gfx_init_plane_8bppchunky::@3)
Added new block during phi lifting gfx_init_plane_horisontal::@10(between gfx_init_plane_horisontal::@6 and gfx_init_plane_horisontal::@1)
Added new block during phi lifting gfx_init_plane_horisontal::@11(between gfx_init_plane_horisontal::@4 and gfx_init_plane_horisontal::@2)
Added new block during phi lifting gfx_init_plane_horisontal2::@7(between gfx_init_plane_horisontal2::@3 and gfx_init_plane_horisontal2::@1)
Added new block during phi lifting gfx_init_plane_horisontal2::@8(between gfx_init_plane_horisontal2::@2 and gfx_init_plane_horisontal2::@2)
Added new block during phi lifting gfx_init_plane_vertical::@7(between gfx_init_plane_vertical::@3 and gfx_init_plane_vertical::@1)
Added new block during phi lifting gfx_init_plane_vertical::@8(between gfx_init_plane_vertical::@2 and gfx_init_plane_vertical::@2)
Added new block during phi lifting gfx_init_plane_charset8::@11(between gfx_init_plane_charset8::@7 and gfx_init_plane_charset8::@1)
Added new block during phi lifting gfx_init_plane_charset8::@12(between gfx_init_plane_charset8::@6 and gfx_init_plane_charset8::@2)
Added new block during phi lifting gfx_init_plane_charset8::@13(between gfx_init_plane_charset8::@4 and gfx_init_plane_charset8::@3)
Added new block during phi lifting gfx_init_plane_fill::@7(between gfx_init_plane_fill::@3 and gfx_init_plane_fill::@1)
Added new block during phi lifting gfx_init_plane_fill::@8(between gfx_init_plane_fill::@2 and gfx_init_plane_fill::@2)
Added new block during phi lifting form_mode::@21(between form_mode::@1 and form_mode::@1)
Added new block during phi lifting form_mode::@22(between form_mode::@6 and form_mode::@3)
Added new block during phi lifting form_set_screen::@2(between form_set_screen::@1 and form_set_screen::@1)
Added new block during phi lifting form_control::@25(between form_control::@22 and form_control::@1)
Added new block during phi lifting form_control::@26(between form_control::@10 and form_control::@17)
Added new block during phi lifting form_control::@27(between form_control::@16 and form_control::@17)
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of gfx_init
Adding NOP phi() at start of gfx_init::@1
Adding NOP phi() at start of gfx_init::@2
Adding NOP phi() at start of gfx_init::@3
Adding NOP phi() at start of gfx_init::@4
Adding NOP phi() at start of gfx_init::@5
Adding NOP phi() at start of gfx_init::@6
Adding NOP phi() at start of gfx_init::@7
Adding NOP phi() at start of gfx_init::@8
Adding NOP phi() at start of gfx_init::@9
Adding NOP phi() at start of gfx_init::@10
Adding NOP phi() at start of gfx_init::@11
Adding NOP phi() at start of gfx_init::@12
Adding NOP phi() at start of gfx_init::@13
Adding NOP phi() at start of gfx_init::@14
Adding NOP phi() at start of gfx_init::@15
Adding NOP phi() at start of form_mode
Adding NOP phi() at start of form_mode::@8
Adding NOP phi() at start of form_mode::@9
Adding NOP phi() at start of form_mode::@10
Adding NOP phi() at start of form_mode::@11
Adding NOP phi() at start of form_mode::@12
Adding NOP phi() at start of form_mode::@13
Adding NOP phi() at start of form_mode::@14
Adding NOP phi() at start of form_mode::@5
Adding NOP phi() at start of gfx_mode::@11
Adding NOP phi() at start of gfx_mode::@17
Adding NOP phi() at start of gfx_mode::@19
Adding NOP phi() at start of gfx_mode::@24
Adding NOP phi() at start of gfx_mode::@27
Adding NOP phi() at start of gfx_mode::@35
Adding NOP phi() at start of gfx_mode::@10
Adding NOP phi() at start of gfx_init_screen0
Adding NOP phi() at start of gfx_init_screen1
Adding NOP phi() at start of gfx_init_screen2
Adding NOP phi() at start of gfx_init_screen3
Adding NOP phi() at start of gfx_init_screen4
Adding NOP phi() at start of gfx_init_VICII_bitmap
Adding NOP phi() at start of gfx_init_VICII_bitmap::@3
Adding NOP phi() at start of gfx_init_VICII_bitmap::@4
Adding NOP phi() at start of gfx_init_plane_8bppchunky
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@7
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@6
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@9
Adding NOP phi() at start of gfx_init_plane_charset8
Adding NOP phi() at start of gfx_init_plane_charset8::@10
Adding NOP phi() at start of gfx_init_plane_horisontal
Adding NOP phi() at start of gfx_init_plane_horisontal::@8
Adding NOP phi() at start of gfx_init_plane_horisontal::@7
Adding NOP phi() at start of gfx_init_plane_horisontal::@9
Adding NOP phi() at start of gfx_init_plane_vertical
Adding NOP phi() at start of gfx_init_plane_vertical::@5
Adding NOP phi() at start of gfx_init_plane_vertical::@4
Adding NOP phi() at start of gfx_init_plane_vertical::@6
Adding NOP phi() at start of gfx_init_plane_horisontal2
Adding NOP phi() at start of gfx_init_plane_horisontal2::@5
Adding NOP phi() at start of gfx_init_plane_horisontal2::@4
Adding NOP phi() at start of gfx_init_plane_horisontal2::@6
Adding NOP phi() at start of gfx_init_plane_vertical2
Adding NOP phi() at start of gfx_init_plane_vertical2::@1
Adding NOP phi() at start of gfx_init_plane_blank
Adding NOP phi() at start of gfx_init_plane_blank::@1
Adding NOP phi() at start of gfx_init_plane_full
Adding NOP phi() at start of gfx_init_plane_full::@1
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of print_str_lines::@5
Adding NOP phi() at start of form_set_screen
Adding NOP phi() at start of form_render_values
Adding NOP phi() at start of render_preset_name::@23
Adding NOP phi() at start of render_preset_name::@24
Adding NOP phi() at start of render_preset_name::@11
Adding NOP phi() at start of render_preset_name::@10
Adding NOP phi() at start of render_preset_name::@9
Adding NOP phi() at start of render_preset_name::@8
Adding NOP phi() at start of render_preset_name::@7
Adding NOP phi() at start of render_preset_name::@6
Adding NOP phi() at start of render_preset_name::@5
Adding NOP phi() at start of render_preset_name::@4
Adding NOP phi() at start of render_preset_name::@3
Adding NOP phi() at start of render_preset_name::@2
Adding NOP phi() at start of render_preset_name::@1
Adding NOP phi() at start of form_control::@7
Adding NOP phi() at start of form_control::@23
Adding NOP phi() at start of form_control::@11
Adding NOP phi() at start of form_control::@18
Adding NOP phi() at start of apply_preset::@23
Adding NOP phi() at start of apply_preset::@11
Adding NOP phi() at start of apply_preset::@10
Adding NOP phi() at start of apply_preset::@9
Adding NOP phi() at start of apply_preset::@8
Adding NOP phi() at start of apply_preset::@7
Adding NOP phi() at start of apply_preset::@6
Adding NOP phi() at start of apply_preset::@5
Adding NOP phi() at start of apply_preset::@4
Adding NOP phi() at start of apply_preset::@3
Adding NOP phi() at start of apply_preset::@2
Adding NOP phi() at start of apply_preset::@1
Adding NOP phi() at start of get_plane::@28
Adding NOP phi() at start of get_plane::@14
Adding NOP phi() at start of get_plane::@13
Adding NOP phi() at start of get_plane::@12
Adding NOP phi() at start of get_plane::@11
Adding NOP phi() at start of get_plane::@10
Adding NOP phi() at start of get_plane::@9
Adding NOP phi() at start of get_plane::@8
Adding NOP phi() at start of get_plane::@7
Adding NOP phi() at start of get_plane::@6
Adding NOP phi() at start of get_plane::@5
Adding NOP phi() at start of get_plane::@4
Adding NOP phi() at start of get_plane::@3
Adding NOP phi() at start of get_plane::@2
Adding NOP phi() at start of get_plane::@1
Adding NOP phi() at start of get_VICII_screen::@10
Adding NOP phi() at start of get_VICII_screen::@5
Adding NOP phi() at start of get_VICII_screen::@4
Adding NOP phi() at start of get_VICII_screen::@3
Adding NOP phi() at start of get_VICII_screen::@2
Adding NOP phi() at start of get_VICII_screen::@1
Adding NOP phi() at start of get_VICII_charset::@4
Adding NOP phi() at start of get_VICII_charset::@2
Adding NOP phi() at start of get_VICII_charset::@1
Adding NOP phi() at start of keyboard_event_scan::@18
Adding NOP phi() at start of keyboard_event_scan::@19
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@3
Adding NOP phi() at start of bitmap_init::@4
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of bitmap_clear::@2
Adding NOP phi() at start of bitmap_line::@18
Adding NOP phi() at start of bitmap_line::@16
Adding NOP phi() at start of gfx_init_plane_fill::@4
Adding NOP phi() at start of gfx_init_plane_fill::@6
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of sgn_u16::@2
Adding NOP phi() at start of sgn_u16::@1
CALL GRAPH
Calls in [main] to keyboard_init:4 gfx_init:6 form_mode:10 gfx_mode:12 
Calls in [gfx_init] to gfx_init_screen0:20 gfx_init_screen1:22 gfx_init_screen2:24 gfx_init_screen3:26 gfx_init_screen4:28 gfx_init_charset:30 gfx_init_VICII_bitmap:32 gfx_init_plane_8bppchunky:34 gfx_init_plane_charset8:36 gfx_init_plane_horisontal:38 gfx_init_plane_vertical:40 gfx_init_plane_horisontal2:42 gfx_init_plane_vertical2:44 gfx_init_plane_blank:46 gfx_init_plane_full:48 
Calls in [form_mode] to print_set_screen:52 print_cls:54 print_str_lines:56 print_set_screen:58 print_cls:60 print_str_lines:62 form_set_screen:64 form_render_values:66 render_preset_name:69 form_control:96 apply_preset:103 form_render_values:105 render_preset_name:108 
Calls in [gfx_mode] to get_plane:158 get_plane:182 get_VICII_screen:206 get_VICII_charset:212 get_VICII_screen:223 keyboard_event_scan:260 keyboard_event_get:262 
Calls in [gfx_init_VICII_bitmap] to bitmap_init:397 bitmap_clear:399 bitmap_line:408 
Calls in [gfx_init_plane_8bppchunky] to dtvSetCpuBankSegment1:412 dtvSetCpuBankSegment1:421 dtvSetCpuBankSegment1:434 
Calls in [gfx_init_plane_charset8] to dtvSetCpuBankSegment1:446 dtvSetCpuBankSegment1:474 
Calls in [gfx_init_plane_horisontal] to dtvSetCpuBankSegment1:490 dtvSetCpuBankSegment1:506 
Calls in [gfx_init_plane_vertical] to dtvSetCpuBankSegment1:517 dtvSetCpuBankSegment1:529 
Calls in [gfx_init_plane_horisontal2] to dtvSetCpuBankSegment1:537 dtvSetCpuBankSegment1:551 
Calls in [gfx_init_plane_vertical2] to gfx_init_plane_fill:559 
Calls in [gfx_init_plane_blank] to gfx_init_plane_fill:563 
Calls in [gfx_init_plane_full] to gfx_init_plane_fill:567 
Calls in [print_cls] to memset:575 
Calls in [print_str_lines] to print_char:592 print_ln:597 
Calls in [form_render_values] to form_field_ptr:622 
Calls in [render_preset_name] to print_str_at:641 
Calls in [form_control] to form_field_ptr:657 keyboard_event_scan:668 keyboard_event_get:670 
Calls in [keyboard_event_scan] to keyboard_matrix_read:797 keyboard_event_pressed:808 keyboard_event_pressed:814 keyboard_event_pressed:821 keyboard_event_pressed:828 
Calls in [bitmap_clear] to memset:909 memset:911 
Calls in [bitmap_line] to abs_u16:916 abs_u16:921 sgn_u16:928 sgn_u16:933 bitmap_plot:946 bitmap_plot:963 bitmap_plot:980 bitmap_plot:1001 
Calls in [gfx_init_plane_fill] to dtvSetCpuBankSegment1:1013 dtvSetCpuBankSegment1:1028 

Created 167 initial phi equivalence classes
Coalesced [13] form_cursor_count#63 = form_cursor_count#17
Coalesced [14] keyboard_events_size#160 = keyboard_events_size#25
Coalesced [15] form_field_idx#69 = form_field_idx#19
Coalesced [68] render_preset_name::idx#13 = render_preset_name::idx#0
Coalesced [89] form_cursor_count#64 = form_cursor_count#1
Coalesced [90] keyboard_events_size#161 = keyboard_events_size#28
Coalesced [91] form_field_idx#70 = form_field_idx#1
Coalesced [92] form_mode::preset_current#9 = form_mode::preset_current#0
Coalesced [107] render_preset_name::idx#14 = render_preset_name::idx#1
Coalesced (already) [109] form_cursor_count#65 = form_cursor_count#17
Coalesced (already) [110] keyboard_events_size#162 = keyboard_events_size#25
Coalesced (already) [111] form_field_idx#71 = form_field_idx#19
Coalesced [112] form_mode::preset_current#10 = form_mode::preset_current#1
Coalesced (already) [113] form_cursor_count#66 = form_cursor_count#17
Coalesced (already) [114] keyboard_events_size#163 = keyboard_events_size#25
Coalesced (already) [115] form_field_idx#72 = form_field_idx#19
Coalesced (already) [116] form_mode::preset_current#11 = form_mode::preset_current#6
Coalesced [117] form_mode::i#3 = form_mode::i#1
Coalesced [123] gfx_mode::dtv_control#20 = gfx_mode::dtv_control#2
Coalesced [127] gfx_mode::dtv_control#21 = gfx_mode::dtv_control#3
Coalesced [131] gfx_mode::dtv_control#23 = gfx_mode::dtv_control#4
Coalesced [135] gfx_mode::dtv_control#25 = gfx_mode::dtv_control#5
Coalesced [139] gfx_mode::dtv_control#27 = gfx_mode::dtv_control#6
Coalesced [147] gfx_mode::VICII_control#7 = gfx_mode::VICII_control#2
Coalesced [157] get_plane::idx#17 = get_plane::idx#0
Coalesced [181] get_plane::idx#16 = get_plane::idx#1
Coalesced [205] get_VICII_screen::idx#7 = get_VICII_screen::idx#0
Coalesced [222] get_VICII_screen::idx#8 = get_VICII_screen::idx#1
Coalesced [226] gfx_mode::VICII_colors#6 = gfx_mode::VICII_colors#0
Coalesced [228] gfx_mode::VICII_colors#7 = gfx_mode::VICII_colors#3
Coalesced [229] gfx_mode::col#6 = gfx_mode::col#3
Coalesced [259] keyboard_events_size#147 = keyboard_events_size#25
Coalesced [267] gfx_mode::j#3 = gfx_mode::j#1
Coalesced [273] gfx_mode::i#3 = gfx_mode::i#1
Coalesced [274] gfx_mode::VICII_colors#5 = gfx_mode::VICII_colors#1
Coalesced [275] gfx_mode::col#5 = gfx_mode::col#1
Coalesced [276] gfx_mode::cy#5 = gfx_mode::cy#1
Coalesced (already) [277] gfx_mode::VICII_colors#8 = gfx_mode::VICII_colors#1
Coalesced (already) [278] gfx_mode::col#7 = gfx_mode::col#1
Coalesced [279] gfx_mode::cx#3 = gfx_mode::cx#1
Coalesced [280] gfx_mode::VICII_control#8 = gfx_mode::VICII_control#5
Coalesced [281] gfx_mode::dtv_control#28 = gfx_mode::dtv_control#13
Coalesced [282] gfx_mode::dtv_control#26 = gfx_mode::dtv_control#11
Coalesced [283] gfx_mode::dtv_control#24 = gfx_mode::dtv_control#10
Coalesced [284] gfx_mode::dtv_control#22 = gfx_mode::dtv_control#15
Coalesced [285] gfx_mode::dtv_control#19 = gfx_mode::dtv_control#14
Coalesced [288] gfx_init_screen0::ch#6 = gfx_init_screen0::ch#3
Coalesced [301] gfx_init_screen0::cy#5 = gfx_init_screen0::cy#1
Coalesced [302] gfx_init_screen0::ch#5 = gfx_init_screen0::ch#1
Coalesced [303] gfx_init_screen0::cx#3 = gfx_init_screen0::cx#1
Coalesced (already) [304] gfx_init_screen0::ch#7 = gfx_init_screen0::ch#1
Coalesced [307] gfx_init_screen1::ch#6 = gfx_init_screen1::ch#3
Coalesced [318] gfx_init_screen1::cy#5 = gfx_init_screen1::cy#1
Coalesced [319] gfx_init_screen1::ch#5 = gfx_init_screen1::ch#1
Coalesced [320] gfx_init_screen1::cx#3 = gfx_init_screen1::cx#1
Coalesced (already) [321] gfx_init_screen1::ch#7 = gfx_init_screen1::ch#1
Coalesced [324] gfx_init_screen2::ch#6 = gfx_init_screen2::ch#3
Coalesced [338] gfx_init_screen2::cy#5 = gfx_init_screen2::cy#1
Coalesced [339] gfx_init_screen2::ch#5 = gfx_init_screen2::ch#1
Coalesced [340] gfx_init_screen2::cx#3 = gfx_init_screen2::cx#1
Coalesced (already) [341] gfx_init_screen2::ch#7 = gfx_init_screen2::ch#1
Coalesced [344] gfx_init_screen3::ch#6 = gfx_init_screen3::ch#3
Coalesced [357] gfx_init_screen3::cy#5 = gfx_init_screen3::cy#1
Coalesced [358] gfx_init_screen3::ch#5 = gfx_init_screen3::ch#1
Coalesced [359] gfx_init_screen3::cx#3 = gfx_init_screen3::cx#1
Coalesced (already) [360] gfx_init_screen3::ch#7 = gfx_init_screen3::ch#1
Coalesced [363] gfx_init_screen4::ch#6 = gfx_init_screen4::ch#3
Coalesced [372] gfx_init_screen4::ch#5 = gfx_init_screen4::ch#1
Coalesced [373] gfx_init_screen4::cy#5 = gfx_init_screen4::cy#1
Coalesced (already) [374] gfx_init_screen4::ch#7 = gfx_init_screen4::ch#1
Coalesced [375] gfx_init_screen4::cx#3 = gfx_init_screen4::cx#1
Coalesced [378] gfx_init_charset::chargen#6 = gfx_init_charset::chargen#3
Coalesced [379] gfx_init_charset::charset#6 = gfx_init_charset::charset#3
Coalesced [390] gfx_init_charset::chargen#5 = gfx_init_charset::chargen#1
Coalesced [391] gfx_init_charset::charset#5 = gfx_init_charset::charset#1
Coalesced [392] gfx_init_charset::c#5 = gfx_init_charset::c#1
Coalesced (already) [393] gfx_init_charset::chargen#7 = gfx_init_charset::chargen#1
Coalesced (already) [394] gfx_init_charset::charset#7 = gfx_init_charset::charset#1
Coalesced [395] gfx_init_charset::l#3 = gfx_init_charset::l#1
Coalesced [410] gfx_init_VICII_bitmap::l#5 = gfx_init_VICII_bitmap::l#1
Coalesced [415] gfx_init_plane_8bppchunky::gfxb#8 = gfx_init_plane_8bppchunky::gfxb#5
Coalesced [416] gfx_init_plane_8bppchunky::gfxbCpuBank#11 = gfx_init_plane_8bppchunky::gfxbCpuBank#7
Coalesced [420] dtvSetCpuBankSegment1::cpuBankIdx#14 = dtvSetCpuBankSegment1::cpuBankIdx#1
Coalesced [423] gfx_init_plane_8bppchunky::gfxbCpuBank#14 = gfx_init_plane_8bppchunky::gfxbCpuBank#2
Coalesced [437] gfx_init_plane_8bppchunky::gfxb#7 = gfx_init_plane_8bppchunky::gfxb#1
Coalesced [438] gfx_init_plane_8bppchunky::y#8 = gfx_init_plane_8bppchunky::y#1
Coalesced [439] gfx_init_plane_8bppchunky::gfxbCpuBank#10 = gfx_init_plane_8bppchunky::gfxbCpuBank#8
Coalesced (already) [440] gfx_init_plane_8bppchunky::gfxb#9 = gfx_init_plane_8bppchunky::gfxb#1
Coalesced [441] gfx_init_plane_8bppchunky::x#6 = gfx_init_plane_8bppchunky::x#1
Coalesced (already) [442] gfx_init_plane_8bppchunky::gfxbCpuBank#12 = gfx_init_plane_8bppchunky::gfxbCpuBank#8
Coalesced [443] gfx_init_plane_8bppchunky::gfxb#10 = gfx_init_plane_8bppchunky::gfxb#3
Coalesced (already) [444] gfx_init_plane_8bppchunky::gfxbCpuBank#13 = gfx_init_plane_8bppchunky::gfxbCpuBank#4
Coalesced [449] gfx_init_plane_charset8::chargen#10 = gfx_init_plane_charset8::chargen#3
Coalesced [450] gfx_init_plane_charset8::gfxa#10 = gfx_init_plane_charset8::gfxa#6
Coalesced [451] gfx_init_plane_charset8::col#10 = gfx_init_plane_charset8::col#6
Coalesced [455] gfx_init_plane_charset8::bits#5 = gfx_init_plane_charset8::bits#0
Coalesced [456] gfx_init_plane_charset8::gfxa#12 = gfx_init_plane_charset8::gfxa#5
Coalesced [457] gfx_init_plane_charset8::col#12 = gfx_init_plane_charset8::col#5
Not coalescing [461] gfx_init_plane_charset8::c#3 = gfx_init_plane_charset8::col#2
Coalesced [477] gfx_init_plane_charset8::chargen#9 = gfx_init_plane_charset8::chargen#1
Coalesced [478] gfx_init_plane_charset8::gfxa#9 = gfx_init_plane_charset8::gfxa#1
Coalesced [479] gfx_init_plane_charset8::col#9 = gfx_init_plane_charset8::col#1
Coalesced [480] gfx_init_plane_charset8::ch#9 = gfx_init_plane_charset8::ch#1
Coalesced (already) [481] gfx_init_plane_charset8::chargen#11 = gfx_init_plane_charset8::chargen#1
Coalesced (already) [482] gfx_init_plane_charset8::gfxa#11 = gfx_init_plane_charset8::gfxa#1
Coalesced (already) [483] gfx_init_plane_charset8::col#11 = gfx_init_plane_charset8::col#1
Coalesced [484] gfx_init_plane_charset8::cr#7 = gfx_init_plane_charset8::cr#1
Coalesced [485] gfx_init_plane_charset8::bits#6 = gfx_init_plane_charset8::bits#1
Coalesced (already) [486] gfx_init_plane_charset8::gfxa#13 = gfx_init_plane_charset8::gfxa#1
Coalesced (already) [487] gfx_init_plane_charset8::col#13 = gfx_init_plane_charset8::col#1
Coalesced [488] gfx_init_plane_charset8::cp#5 = gfx_init_plane_charset8::cp#1
Coalesced [493] gfx_init_plane_horisontal::gfxa#10 = gfx_init_plane_horisontal::gfxa#6
Coalesced [499] gfx_init_plane_horisontal::gfxa#13 = gfx_init_plane_horisontal::gfxa#2
Coalesced [509] gfx_init_plane_horisontal::ay#8 = gfx_init_plane_horisontal::ay#1
Coalesced [510] gfx_init_plane_horisontal::gfxa#9 = gfx_init_plane_horisontal::gfxa#7
Coalesced (already) [511] gfx_init_plane_horisontal::gfxa#11 = gfx_init_plane_horisontal::gfxa#7
Coalesced [512] gfx_init_plane_horisontal::ax#6 = gfx_init_plane_horisontal::ax#1
Coalesced [515] gfx_init_plane_horisontal::gfxa#12 = gfx_init_plane_horisontal::gfxa#1
Coalesced [520] gfx_init_plane_vertical::gfxb#6 = gfx_init_plane_vertical::gfxb#3
Coalesced [532] gfx_init_plane_vertical::gfxb#5 = gfx_init_plane_vertical::gfxb#1
Coalesced [533] gfx_init_plane_vertical::by#5 = gfx_init_plane_vertical::by#1
Coalesced (already) [534] gfx_init_plane_vertical::gfxb#7 = gfx_init_plane_vertical::gfxb#1
Coalesced [535] gfx_init_plane_vertical::bx#3 = gfx_init_plane_vertical::bx#1
Coalesced [540] gfx_init_plane_horisontal2::gfxa#6 = gfx_init_plane_horisontal2::gfxa#3
Coalesced [554] gfx_init_plane_horisontal2::ay#5 = gfx_init_plane_horisontal2::ay#1
Coalesced [555] gfx_init_plane_horisontal2::gfxa#5 = gfx_init_plane_horisontal2::gfxa#1
Coalesced (already) [556] gfx_init_plane_horisontal2::gfxa#7 = gfx_init_plane_horisontal2::gfxa#1
Coalesced [557] gfx_init_plane_horisontal2::ax#3 = gfx_init_plane_horisontal2::ax#1
Coalesced [574] memset::str#8 = memset::str#0
Coalesced [579] print_str_lines::str#11 = print_str_lines::str#5
Not coalescing [580] print_char_cursor#72 = print_screen#0
Coalesced [581] print_line_cursor#68 = print_screen#0
Coalesced [585] print_str_lines::str#13 = print_str_lines::str#3
Coalesced [586] print_char_cursor#74 = print_char_cursor#2
Coalesced [593] print_char_cursor#77 = print_char_cursor#29
Coalesced [598] print_str_lines::str#12 = print_str_lines::str#0
Not coalescing [599] print_char_cursor#73 = print_line_cursor#2
Coalesced [600] print_line_cursor#69 = print_line_cursor#2
Coalesced (already) [601] print_str_lines::str#14 = print_str_lines::str#0
Coalesced [602] print_char_cursor#75 = print_char_cursor#44
Coalesced (already) [603] print_char_cursor#76 = print_char_cursor#43
Coalesced [614] form_set_screen::line#3 = form_set_screen::line#1
Coalesced [615] form_set_screen::y#3 = form_set_screen::y#1
Coalesced [621] form_field_ptr::field_idx#4 = form_field_ptr::field_idx#0
Coalesced [625] form_render_values::idx#5 = form_render_values::idx#1
Coalesced [656] form_field_ptr::field_idx#3 = form_field_ptr::field_idx#1
Coalesced (already) [667] keyboard_events_size#146 = keyboard_events_size#49
Coalesced [682] form_field_idx#76 = form_field_idx#33
Coalesced [685] form_field_idx#73 = form_field_idx#5
Coalesced [689] form_field_idx#74 = form_field_idx#4
Coalesced [697] form_cursor_count#69 = form_cursor_count#16
Coalesced (already) [698] form_field_idx#77 = form_field_idx#30
Coalesced (already) [703] form_cursor_count#68 = form_cursor_count#16
Coalesced (already) [704] form_field_idx#75 = form_field_idx#30
Coalesced (already) [705] form_cursor_count#70 = form_cursor_count#16
Coalesced (already) [706] form_field_idx#78 = form_field_idx#30
Coalesced [709] form_cursor_count#67 = form_cursor_count#4
Coalesced [728] apply_preset::i#4 = apply_preset::i#1
Coalesced [794] keyboard_events_size#148 = keyboard_events_size#98
Coalesced [802] keyboard_event_scan::keycode#17 = keyboard_event_scan::keycode#1
Coalesced [803] keyboard_events_size#151 = keyboard_events_size#107
Coalesced [819] keyboard_modifiers#128 = keyboard_modifiers#2
Coalesced [826] keyboard_modifiers#130 = keyboard_modifiers#3
Coalesced [833] keyboard_modifiers#132 = keyboard_modifiers#4
Coalesced [836] keyboard_modifiers#131 = keyboard_modifiers#21
Coalesced [837] keyboard_modifiers#129 = keyboard_modifiers#20
Coalesced [838] keyboard_modifiers#127 = keyboard_modifiers#19
Coalesced [839] keyboard_event_scan::row#14 = keyboard_event_scan::row#1
Coalesced [840] keyboard_event_scan::keycode#15 = keyboard_event_scan::keycode#13
Coalesced (already) [841] keyboard_events_size#149 = keyboard_events_size#100
Coalesced [842] keyboard_event_scan::keycode#19 = keyboard_event_scan::keycode#11
Coalesced [843] keyboard_events_size#153 = keyboard_events_size#107
Coalesced [853] keyboard_events_size#157 = keyboard_events_size#1
Coalesced [859] keyboard_event_scan::keycode#16 = keyboard_event_scan::keycode#14
Coalesced [860] keyboard_events_size#150 = keyboard_events_size#106
Coalesced [861] keyboard_event_scan::col#8 = keyboard_event_scan::col#1
Coalesced (already) [862] keyboard_event_scan::keycode#18 = keyboard_event_scan::keycode#14
Coalesced (already) [863] keyboard_events_size#152 = keyboard_events_size#106
Coalesced [867] keyboard_events_size#155 = keyboard_events_size#0
Coalesced (already) [868] keyboard_events_size#156 = keyboard_events_size#19
Coalesced (already) [869] keyboard_events_size#154 = keyboard_events_size#19
Coalesced [873] keyboard_event_get::return#8 = keyboard_event_get::return#1
Coalesced [874] keyboard_events_size#159 = keyboard_events_size#3
Coalesced (already) [877] keyboard_events_size#158 = keyboard_events_size#100
Coalesced [897] bitmap_init::yoffs#7 = bitmap_init::yoffs#1
Coalesced [902] bitmap_init::y#5 = bitmap_init::y#1
Coalesced [903] bitmap_init::yoffs#5 = bitmap_init::yoffs#4
Coalesced (already) [904] bitmap_init::yoffs#6 = bitmap_init::yoffs#2
Coalesced [905] bitmap_init::bits#5 = bitmap_init::bits#4
Coalesced [906] bitmap_init::x#5 = bitmap_init::x#1
Coalesced [907] bitmap_init::bits#6 = bitmap_init::bits#1
Coalesced [915] abs_u16::w#5 = abs_u16::w#0
Coalesced [920] abs_u16::w#6 = abs_u16::w#1
Coalesced [927] sgn_u16::w#3 = sgn_u16::w#0
Coalesced [932] sgn_u16::w#4 = sgn_u16::w#1
Coalesced [938] bitmap_line::x#20 = bitmap_line::x1#0
Coalesced [939] bitmap_line::y#20 = bitmap_line::y1#0
Coalesced [940] bitmap_line::e#7 = bitmap_line::e#0
Coalesced [944] bitmap_plot::y#7 = bitmap_plot::y#1
Coalesced [945] bitmap_plot::x#7 = bitmap_plot::x#1
Coalesced [952] bitmap_line::x#23 = bitmap_line::x#1
Coalesced [953] bitmap_line::e#10 = bitmap_line::e#2
Coalesced [956] bitmap_line::x#25 = bitmap_line::x#12
Coalesced [957] bitmap_line::y#23 = bitmap_line::y#1
Coalesced [961] bitmap_plot::y#5 = bitmap_plot::y#2
Coalesced [962] bitmap_plot::x#5 = bitmap_plot::x#2
Coalesced [966] bitmap_line::x#21 = bitmap_line::x#12
Coalesced [967] bitmap_line::y#21 = bitmap_line::y#1
Coalesced [968] bitmap_line::e#8 = bitmap_line::e#6
Coalesced (already) [969] bitmap_line::x#22 = bitmap_line::x#13
Coalesced [970] bitmap_line::e#9 = bitmap_line::e#1
Coalesced [972] bitmap_line::x#27 = bitmap_line::x1#0
Coalesced [973] bitmap_line::y#25 = bitmap_line::y1#0
Coalesced [974] bitmap_line::e1#8 = bitmap_line::e1#0
Coalesced [978] bitmap_plot::y#8 = bitmap_plot::y#3
Coalesced [979] bitmap_plot::x#8 = bitmap_plot::x#3
Coalesced [986] bitmap_line::y#26 = bitmap_line::y#2
Coalesced [987] bitmap_line::e1#9 = bitmap_line::e1#2
Coalesced [990] bitmap_line::x#24 = bitmap_line::x#15
Coalesced [991] bitmap_line::y#22 = bitmap_line::y#13
Coalesced (already) [992] bitmap_line::x#26 = bitmap_line::x#15
Coalesced (already) [993] bitmap_line::y#24 = bitmap_line::y#13
Coalesced [994] bitmap_line::e1#7 = bitmap_line::e1#6
Coalesced (already) [995] bitmap_line::y#27 = bitmap_line::y#15
Coalesced [996] bitmap_line::e1#10 = bitmap_line::e1#1
Coalesced [999] bitmap_plot::y#6 = bitmap_plot::y#0
Coalesced [1000] bitmap_plot::x#6 = bitmap_plot::x#0
Coalesced [1012] dtvSetCpuBankSegment1::cpuBankIdx#15 = dtvSetCpuBankSegment1::cpuBankIdx#11
Coalesced [1019] gfx_init_plane_fill::gfxb#7 = gfx_init_plane_fill::gfxb#3
Coalesced [1031] gfx_init_plane_fill::gfxb#5 = gfx_init_plane_fill::gfxb#1
Coalesced [1032] gfx_init_plane_fill::by#5 = gfx_init_plane_fill::by#1
Coalesced (already) [1033] gfx_init_plane_fill::gfxb#8 = gfx_init_plane_fill::gfxb#1
Coalesced [1034] gfx_init_plane_fill::bx#3 = gfx_init_plane_fill::bx#1
Coalesced [1045] memset::dst#5 = memset::dst#1
Coalesced [1049] print_line_cursor#70 = print_line_cursor#1
Coalesced (already) [1055] print_line_cursor#71 = print_line_cursor#2
Coalesced [1062] print_str_at::str#5 = print_str_at::str#1
Coalesced [1069] print_str_at::str#6 = print_str_at::str#0
Coalesced [1070] print_str_at::at#5 = print_str_at::at#0
Coalesced [1084] abs_u16::return#9 = abs_u16::w#2
Coalesced [1088] abs_u16::return#8 = abs_u16::return#2
Coalesced down to 104 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label main::@6
Culled Empty Block label gfx_init::@15
Culled Empty Block label form_mode::@20
Culled Empty Block label form_mode::@22
Culled Empty Block label form_mode::@21
Culled Empty Block label gfx_mode::@24
Culled Empty Block label gfx_mode::@27
Culled Empty Block label gfx_mode::@45
Culled Empty Block label gfx_mode::@10
Culled Empty Block label gfx_mode::@46
Culled Empty Block label gfx_mode::@43
Culled Empty Block label gfx_mode::@44
Culled Empty Block label gfx_mode::@42
Culled Empty Block label gfx_mode::@41
Culled Empty Block label gfx_mode::@40
Culled Empty Block label gfx_mode::@39
Culled Empty Block label gfx_mode::@38
Culled Empty Block label gfx_mode::@37
Culled Empty Block label gfx_init_screen0::@4
Culled Empty Block label gfx_init_screen0::@5
Culled Empty Block label gfx_init_screen1::@4
Culled Empty Block label gfx_init_screen1::@5
Culled Empty Block label gfx_init_screen2::@4
Culled Empty Block label gfx_init_screen2::@5
Culled Empty Block label gfx_init_screen3::@4
Culled Empty Block label gfx_init_screen3::@5
Culled Empty Block label gfx_init_screen4::@4
Culled Empty Block label gfx_init_screen4::@5
Culled Empty Block label gfx_init_charset::@5
Culled Empty Block label gfx_init_charset::@6
Culled Empty Block label gfx_init_VICII_bitmap::@4
Culled Empty Block label gfx_init_plane_8bppchunky::@7
Culled Empty Block label gfx_init_plane_8bppchunky::@9
Culled Empty Block label gfx_init_plane_8bppchunky::@10
Culled Empty Block label gfx_init_plane_8bppchunky::@11
Culled Empty Block label gfx_init_plane_8bppchunky::@12
Culled Empty Block label gfx_init_plane_charset8::@10
Culled Empty Block label gfx_init_plane_charset8::@11
Culled Empty Block label gfx_init_plane_charset8::@12
Culled Empty Block label gfx_init_plane_charset8::@13
Culled Empty Block label gfx_init_plane_horisontal::@8
Culled Empty Block label gfx_init_plane_horisontal::@9
Culled Empty Block label gfx_init_plane_horisontal::@10
Culled Empty Block label gfx_init_plane_horisontal::@11
Culled Empty Block label gfx_init_plane_vertical::@5
Culled Empty Block label gfx_init_plane_vertical::@6
Culled Empty Block label gfx_init_plane_vertical::@7
Culled Empty Block label gfx_init_plane_vertical::@8
Culled Empty Block label gfx_init_plane_horisontal2::@5
Culled Empty Block label gfx_init_plane_horisontal2::@6
Culled Empty Block label gfx_init_plane_horisontal2::@7
Culled Empty Block label gfx_init_plane_horisontal2::@8
Culled Empty Block label gfx_init_plane_vertical2::@1
Culled Empty Block label gfx_init_plane_blank::@1
Culled Empty Block label gfx_init_plane_full::@1
Culled Empty Block label print_cls::@1
Culled Empty Block label print_str_lines::@8
Culled Empty Block label print_str_lines::@6
Culled Empty Block label print_str_lines::@9
Culled Empty Block label print_str_lines::@10
Culled Empty Block label form_set_screen::@2
Culled Empty Block label render_preset_name::@23
Culled Empty Block label render_preset_name::@24
Culled Empty Block label render_preset_name::@10
Culled Empty Block label render_preset_name::@9
Culled Empty Block label render_preset_name::@8
Culled Empty Block label render_preset_name::@7
Culled Empty Block label render_preset_name::@6
Culled Empty Block label render_preset_name::@5
Culled Empty Block label render_preset_name::@4
Culled Empty Block label render_preset_name::@3
Culled Empty Block label render_preset_name::@2
Culled Empty Block label render_preset_name::@1
Culled Empty Block label form_control::@7
Culled Empty Block label form_control::@11
Culled Empty Block label form_control::@18
Culled Empty Block label form_control::@15
Culled Empty Block label apply_preset::@23
Culled Empty Block label apply_preset::@10
Culled Empty Block label apply_preset::@9
Culled Empty Block label apply_preset::@8
Culled Empty Block label apply_preset::@7
Culled Empty Block label apply_preset::@6
Culled Empty Block label apply_preset::@5
Culled Empty Block label apply_preset::@4
Culled Empty Block label apply_preset::@3
Culled Empty Block label apply_preset::@2
Culled Empty Block label apply_preset::@1
Culled Empty Block label get_plane::@28
Culled Empty Block label get_plane::@13
Culled Empty Block label get_plane::@12
Culled Empty Block label get_plane::@11
Culled Empty Block label get_plane::@10
Culled Empty Block label get_plane::@9
Culled Empty Block label get_plane::@8
Culled Empty Block label get_plane::@7
Culled Empty Block label get_plane::@6
Culled Empty Block label get_plane::@5
Culled Empty Block label get_plane::@4
Culled Empty Block label get_plane::@3
Culled Empty Block label get_plane::@2
Culled Empty Block label get_plane::@1
Culled Empty Block label get_VICII_screen::@10
Culled Empty Block label get_VICII_screen::@4
Culled Empty Block label get_VICII_screen::@3
Culled Empty Block label get_VICII_screen::@2
Culled Empty Block label get_VICII_screen::@1
Culled Empty Block label get_VICII_charset::@4
Culled Empty Block label get_VICII_charset::@1
Culled Empty Block label keyboard_event_scan::@31
Culled Empty Block label keyboard_event_scan::@30
Culled Empty Block label keyboard_event_scan::@29
Culled Empty Block label keyboard_event_scan::@25
Culled Empty Block label keyboard_event_scan::@8
Culled Empty Block label keyboard_event_scan::@26
Culled Empty Block label keyboard_event_scan::@28
Culled Empty Block label keyboard_event_scan::@27
Culled Empty Block label keyboard_event_get::@1
Culled Empty Block label bitmap_init::@3
Culled Empty Block label bitmap_init::@4
Culled Empty Block label bitmap_init::@10
Culled Empty Block label bitmap_init::@11
Culled Empty Block label bitmap_init::@8
Culled Empty Block label bitmap_clear::@2
Culled Empty Block label bitmap_line::@24
Culled Empty Block label bitmap_line::@18
Culled Empty Block label bitmap_line::@21
Culled Empty Block label bitmap_line::@22
Culled Empty Block label bitmap_line::@23
Culled Empty Block label bitmap_line::@25
Culled Empty Block label bitmap_line::@26
Culled Empty Block label bitmap_line::@16
Culled Empty Block label gfx_init_plane_fill::@6
Culled Empty Block label gfx_init_plane_fill::@7
Culled Empty Block label gfx_init_plane_fill::@8
Culled Empty Block label memset::@1
Culled Empty Block label print_ln::@2
Culled Empty Block label print_ln::@3
Culled Empty Block label abs_u16::@2
Culled Empty Block label sgn_u16::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block print_str_lines::@7 to print_str_lines::@6
Renumbering block keyboard_event_scan::@9 to keyboard_event_scan::@8
Renumbering block keyboard_event_scan::@10 to keyboard_event_scan::@9
Renumbering block keyboard_event_scan::@11 to keyboard_event_scan::@10
Renumbering block keyboard_event_scan::@12 to keyboard_event_scan::@11
Renumbering block keyboard_event_scan::@13 to keyboard_event_scan::@12
Renumbering block keyboard_event_scan::@14 to keyboard_event_scan::@13
Renumbering block keyboard_event_scan::@15 to keyboard_event_scan::@14
Renumbering block keyboard_event_scan::@16 to keyboard_event_scan::@15
Renumbering block keyboard_event_scan::@17 to keyboard_event_scan::@16
Renumbering block keyboard_event_scan::@18 to keyboard_event_scan::@17
Renumbering block keyboard_event_scan::@19 to keyboard_event_scan::@18
Renumbering block keyboard_event_scan::@20 to keyboard_event_scan::@19
Renumbering block keyboard_event_scan::@21 to keyboard_event_scan::@20
Renumbering block keyboard_event_scan::@22 to keyboard_event_scan::@21
Renumbering block keyboard_event_scan::@23 to keyboard_event_scan::@22
Renumbering block keyboard_event_scan::@24 to keyboard_event_scan::@23
Renumbering block keyboard_event_get::@2 to keyboard_event_get::@1
Renumbering block bitmap_init::@5 to bitmap_init::@3
Renumbering block bitmap_init::@6 to bitmap_init::@4
Renumbering block bitmap_init::@7 to bitmap_init::@5
Renumbering block bitmap_init::@9 to bitmap_init::@6
Renumbering block bitmap_line::@17 to bitmap_line::@16
Renumbering block bitmap_line::@19 to bitmap_line::@17
Renumbering block bitmap_line::@20 to bitmap_line::@18
Renumbering block main::@5 to main::@4
Renumbering block get_plane::@14 to get_plane::@1
Renumbering block get_plane::@15 to get_plane::@2
Renumbering block get_plane::@16 to get_plane::@3
Renumbering block get_plane::@17 to get_plane::@4
Renumbering block get_plane::@18 to get_plane::@5
Renumbering block get_plane::@19 to get_plane::@6
Renumbering block get_plane::@20 to get_plane::@7
Renumbering block get_plane::@21 to get_plane::@8
Renumbering block get_plane::@22 to get_plane::@9
Renumbering block get_plane::@23 to get_plane::@10
Renumbering block get_plane::@24 to get_plane::@11
Renumbering block get_plane::@25 to get_plane::@12
Renumbering block get_plane::@26 to get_plane::@13
Renumbering block get_plane::@27 to get_plane::@14
Renumbering block get_VICII_screen::@5 to get_VICII_screen::@1
Renumbering block get_VICII_screen::@6 to get_VICII_screen::@2
Renumbering block get_VICII_screen::@7 to get_VICII_screen::@3
Renumbering block get_VICII_screen::@8 to get_VICII_screen::@4
Renumbering block get_VICII_screen::@9 to get_VICII_screen::@5
Renumbering block get_VICII_charset::@2 to get_VICII_charset::@1
Renumbering block get_VICII_charset::@3 to get_VICII_charset::@2
Renumbering block apply_preset::@11 to apply_preset::@1
Renumbering block apply_preset::@12 to apply_preset::@2
Renumbering block apply_preset::@13 to apply_preset::@3
Renumbering block apply_preset::@14 to apply_preset::@4
Renumbering block apply_preset::@15 to apply_preset::@5
Renumbering block apply_preset::@16 to apply_preset::@6
Renumbering block apply_preset::@17 to apply_preset::@7
Renumbering block apply_preset::@18 to apply_preset::@8
Renumbering block apply_preset::@19 to apply_preset::@9
Renumbering block apply_preset::@20 to apply_preset::@10
Renumbering block apply_preset::@21 to apply_preset::@11
Renumbering block apply_preset::@22 to apply_preset::@12
Renumbering block apply_preset::@24 to apply_preset::@13
Renumbering block apply_preset::@25 to apply_preset::@14
Renumbering block render_preset_name::@11 to render_preset_name::@1
Renumbering block render_preset_name::@12 to render_preset_name::@2
Renumbering block render_preset_name::@13 to render_preset_name::@3
Renumbering block render_preset_name::@14 to render_preset_name::@4
Renumbering block render_preset_name::@15 to render_preset_name::@5
Renumbering block render_preset_name::@16 to render_preset_name::@6
Renumbering block render_preset_name::@17 to render_preset_name::@7
Renumbering block render_preset_name::@18 to render_preset_name::@8
Renumbering block render_preset_name::@19 to render_preset_name::@9
Renumbering block render_preset_name::@20 to render_preset_name::@10
Renumbering block render_preset_name::@21 to render_preset_name::@11
Renumbering block render_preset_name::@22 to render_preset_name::@12
Renumbering block gfx_mode::@11 to gfx_mode::@10
Renumbering block gfx_mode::@12 to gfx_mode::@11
Renumbering block gfx_mode::@13 to gfx_mode::@12
Renumbering block gfx_mode::@14 to gfx_mode::@13
Renumbering block gfx_mode::@15 to gfx_mode::@14
Renumbering block gfx_mode::@16 to gfx_mode::@15
Renumbering block gfx_mode::@17 to gfx_mode::@16
Renumbering block gfx_mode::@18 to gfx_mode::@17
Renumbering block gfx_mode::@19 to gfx_mode::@18
Renumbering block gfx_mode::@20 to gfx_mode::@19
Renumbering block gfx_mode::@21 to gfx_mode::@20
Renumbering block gfx_mode::@22 to gfx_mode::@21
Renumbering block gfx_mode::@23 to gfx_mode::@22
Renumbering block gfx_mode::@25 to gfx_mode::@23
Renumbering block gfx_mode::@26 to gfx_mode::@24
Renumbering block gfx_mode::@28 to gfx_mode::@25
Renumbering block gfx_mode::@29 to gfx_mode::@26
Renumbering block gfx_mode::@30 to gfx_mode::@27
Renumbering block gfx_mode::@31 to gfx_mode::@28
Renumbering block gfx_mode::@32 to gfx_mode::@29
Renumbering block gfx_mode::@33 to gfx_mode::@30
Renumbering block gfx_mode::@34 to gfx_mode::@31
Renumbering block gfx_mode::@35 to gfx_mode::@32
Renumbering block gfx_mode::@36 to gfx_mode::@33
Renumbering block gfx_init_VICII_bitmap::@5 to gfx_init_VICII_bitmap::@4
Renumbering block gfx_init_plane_8bppchunky::@8 to gfx_init_plane_8bppchunky::@7
Renumbering block form_control::@8 to form_control::@7
Renumbering block form_control::@9 to form_control::@8
Renumbering block form_control::@10 to form_control::@9
Renumbering block form_control::@12 to form_control::@10
Renumbering block form_control::@13 to form_control::@11
Renumbering block form_control::@14 to form_control::@12
Renumbering block form_control::@16 to form_control::@13
Renumbering block form_control::@17 to form_control::@14
Renumbering block form_control::@19 to form_control::@15
Renumbering block form_control::@20 to form_control::@16
Renumbering block form_control::@21 to form_control::@17
Renumbering block form_control::@22 to form_control::@18
Renumbering block form_control::@23 to form_control::@19
Renumbering block form_control::@24 to form_control::@20
Renumbering block form_control::@25 to form_control::@21
Renumbering block form_control::@26 to form_control::@22
Renumbering block form_control::@27 to form_control::@23
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of gfx_init
Adding NOP phi() at start of gfx_init::@1
Adding NOP phi() at start of gfx_init::@2
Adding NOP phi() at start of gfx_init::@3
Adding NOP phi() at start of gfx_init::@4
Adding NOP phi() at start of gfx_init::@5
Adding NOP phi() at start of gfx_init::@6
Adding NOP phi() at start of gfx_init::@7
Adding NOP phi() at start of gfx_init::@8
Adding NOP phi() at start of gfx_init::@9
Adding NOP phi() at start of gfx_init::@10
Adding NOP phi() at start of gfx_init::@11
Adding NOP phi() at start of gfx_init::@12
Adding NOP phi() at start of gfx_init::@13
Adding NOP phi() at start of gfx_init::@14
Adding NOP phi() at start of form_mode
Adding NOP phi() at start of form_mode::@8
Adding NOP phi() at start of form_mode::@9
Adding NOP phi() at start of form_mode::@10
Adding NOP phi() at start of form_mode::@11
Adding NOP phi() at start of form_mode::@12
Adding NOP phi() at start of form_mode::@13
Adding NOP phi() at start of form_mode::@14
Adding NOP phi() at start of form_mode::@5
Adding NOP phi() at start of gfx_mode::@10
Adding NOP phi() at start of gfx_mode::@16
Adding NOP phi() at start of gfx_mode::@18
Adding NOP phi() at start of gfx_mode::@26
Adding NOP phi() at start of gfx_mode::@32
Adding NOP phi() at start of gfx_init_screen0
Adding NOP phi() at start of gfx_init_screen1
Adding NOP phi() at start of gfx_init_screen2
Adding NOP phi() at start of gfx_init_screen3
Adding NOP phi() at start of gfx_init_screen4
Adding NOP phi() at start of gfx_init_VICII_bitmap
Adding NOP phi() at start of gfx_init_VICII_bitmap::@3
Adding NOP phi() at start of gfx_init_plane_8bppchunky
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@6
Adding NOP phi() at start of gfx_init_plane_charset8
Adding NOP phi() at start of gfx_init_plane_horisontal
Adding NOP phi() at start of gfx_init_plane_horisontal::@7
Adding NOP phi() at start of gfx_init_plane_vertical
Adding NOP phi() at start of gfx_init_plane_vertical::@4
Adding NOP phi() at start of gfx_init_plane_horisontal2
Adding NOP phi() at start of gfx_init_plane_horisontal2::@4
Adding NOP phi() at start of gfx_init_plane_vertical2
Adding NOP phi() at start of gfx_init_plane_blank
Adding NOP phi() at start of gfx_init_plane_full
Adding NOP phi() at start of print_str_lines::@5
Adding NOP phi() at start of form_set_screen
Adding NOP phi() at start of form_render_values
Adding NOP phi() at start of render_preset_name::@1
Adding NOP phi() at start of form_control::@21
Adding NOP phi() at start of form_control::@3
Adding NOP phi() at start of form_control::@19
Adding NOP phi() at start of form_control::@22
Adding NOP phi() at start of form_control::@23
Adding NOP phi() at start of form_control::@6
Adding NOP phi() at start of apply_preset::@1
Adding NOP phi() at start of get_plane::@1
Adding NOP phi() at start of get_VICII_screen::@1
Adding NOP phi() at start of get_VICII_charset::@1
Adding NOP phi() at start of keyboard_event_scan::@17
Adding NOP phi() at start of keyboard_event_scan::@18
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@6
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of gfx_init_plane_fill::@4
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_str_at
Adding NOP phi() at start of sgn_u16::@1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  [2] *PROCPORT = PROCPORT_RAM_IO
  [3] *DTV_FEATURE = DTV_FEATURE_ENABLE
  [4] call keyboard_init 
  to:main::@3
main::@3: scope:[main]  from main
  [5] phi()
  [6] call gfx_init 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@4
  [7] form_field_idx#1 = phi( main::@3/0, main::@4/form_field_idx#19 )
  [7] keyboard_events_size#28 = phi( main::@3/0, main::@4/keyboard_events_size#25 )
  [7] form_cursor_count#1 = phi( main::@3/FORM_CURSOR_BLINK/2, main::@4/form_cursor_count#17 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call form_mode 
  to:main::@4
main::@4: scope:[main]  from main::@2
  [10] phi()
  [11] call gfx_mode 
  to:main::@1

void keyboard_init()
keyboard_init: scope:[keyboard_init]  from main
  [12] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = $ff
  [13] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) = 0
  to:keyboard_init::@return
keyboard_init::@return: scope:[keyboard_init]  from keyboard_init
  [14] return 
  to:@return

void gfx_init()
gfx_init: scope:[gfx_init]  from main::@3
  [15] phi()
  [16] call gfx_init_screen0 
  to:gfx_init::@1
gfx_init::@1: scope:[gfx_init]  from gfx_init
  [17] phi()
  [18] call gfx_init_screen1 
  to:gfx_init::@2
gfx_init::@2: scope:[gfx_init]  from gfx_init::@1
  [19] phi()
  [20] call gfx_init_screen2 
  to:gfx_init::@3
gfx_init::@3: scope:[gfx_init]  from gfx_init::@2
  [21] phi()
  [22] call gfx_init_screen3 
  to:gfx_init::@4
gfx_init::@4: scope:[gfx_init]  from gfx_init::@3
  [23] phi()
  [24] call gfx_init_screen4 
  to:gfx_init::@5
gfx_init::@5: scope:[gfx_init]  from gfx_init::@4
  [25] phi()
  [26] call gfx_init_charset 
  to:gfx_init::@6
gfx_init::@6: scope:[gfx_init]  from gfx_init::@5
  [27] phi()
  [28] call gfx_init_VICII_bitmap 
  to:gfx_init::@7
gfx_init::@7: scope:[gfx_init]  from gfx_init::@6
  [29] phi()
  [30] call gfx_init_plane_8bppchunky 
  to:gfx_init::@8
gfx_init::@8: scope:[gfx_init]  from gfx_init::@7
  [31] phi()
  [32] call gfx_init_plane_charset8 
  to:gfx_init::@9
gfx_init::@9: scope:[gfx_init]  from gfx_init::@8
  [33] phi()
  [34] call gfx_init_plane_horisontal 
  to:gfx_init::@10
gfx_init::@10: scope:[gfx_init]  from gfx_init::@9
  [35] phi()
  [36] call gfx_init_plane_vertical 
  to:gfx_init::@11
gfx_init::@11: scope:[gfx_init]  from gfx_init::@10
  [37] phi()
  [38] call gfx_init_plane_horisontal2 
  to:gfx_init::@12
gfx_init::@12: scope:[gfx_init]  from gfx_init::@11
  [39] phi()
  [40] call gfx_init_plane_vertical2 
  to:gfx_init::@13
gfx_init::@13: scope:[gfx_init]  from gfx_init::@12
  [41] phi()
  [42] call gfx_init_plane_blank 
  to:gfx_init::@14
gfx_init::@14: scope:[gfx_init]  from gfx_init::@13
  [43] phi()
  [44] call gfx_init_plane_full 
  to:gfx_init::@return
gfx_init::@return: scope:[gfx_init]  from gfx_init::@14
  [45] return 
  to:@return

void form_mode()
form_mode: scope:[form_mode]  from main::@2
  [46] phi()
  [47] call print_set_screen 
  to:form_mode::@8
form_mode::@8: scope:[form_mode]  from form_mode
  [48] phi()
  [49] call print_cls 
  to:form_mode::@9
form_mode::@9: scope:[form_mode]  from form_mode::@8
  [50] phi()
  [51] call print_str_lines 
  to:form_mode::@10
form_mode::@10: scope:[form_mode]  from form_mode::@9
  [52] phi()
  [53] call print_set_screen 
  to:form_mode::@11
form_mode::@11: scope:[form_mode]  from form_mode::@10
  [54] phi()
  [55] call print_cls 
  to:form_mode::@12
form_mode::@12: scope:[form_mode]  from form_mode::@11
  [56] phi()
  [57] call print_str_lines 
  to:form_mode::@13
form_mode::@13: scope:[form_mode]  from form_mode::@12
  [58] phi()
  [59] call form_set_screen 
  to:form_mode::@14
form_mode::@14: scope:[form_mode]  from form_mode::@13
  [60] phi()
  [61] call form_render_values 
  to:form_mode::@15
form_mode::@15: scope:[form_mode]  from form_mode::@14
  [62] render_preset_name::idx#0 = *form_fields_val
  [63] call render_preset_name 
  to:form_mode::@16
form_mode::@16: scope:[form_mode]  from form_mode::@15
  [64] *DTV_GRAPHICS_VIC_BANK = 0
  [65] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
  [66] *DTV_COLOR_BANK_HI = 0
  [67] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  [68] *((byte*)CIA2) = 3
  [69] *DTV_CONTROL = 0
  [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = VICII_DEN|VICII_RSEL|3
  [71] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = VICII_CSEL
  [72] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = (byte)(word)FORM_SCREEN&$3fff/$40|(word)FORM_CHARSET&$3fff/$400
  [73] *DTV_PLANEA_START_LO = 0
  [74] *DTV_PLANEA_START_MI = >FORM_SCREEN
  [75] *DTV_PLANEA_START_HI = 0
  to:form_mode::@1
form_mode::@1: scope:[form_mode]  from form_mode::@1 form_mode::@16
  [76] form_mode::i#2 = phi( form_mode::@1/form_mode::i#1, form_mode::@16/0 )
  [77] DTV_PALETTE[form_mode::i#2] = DTV_PALETTE_DEFAULT[form_mode::i#2]
  [78] form_mode::i#1 = ++ form_mode::i#2
  [79] if(form_mode::i#1!=$10) goto form_mode::@1
  to:form_mode::@2
form_mode::@2: scope:[form_mode]  from form_mode::@1
  [80] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0
  [81] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0
  [82] form_mode::preset_current#0 = *form_fields_val
  to:form_mode::@3
form_mode::@3: scope:[form_mode]  from form_mode::@19 form_mode::@2 form_mode::@6
  [83] form_mode::preset_current#6 = phi( form_mode::@2/form_mode::preset_current#0, form_mode::@19/form_mode::preset_current#1, form_mode::@6/form_mode::preset_current#6 )
  [83] form_field_idx#30 = phi( form_mode::@2/form_field_idx#1, form_mode::@19/form_field_idx#19, form_mode::@6/form_field_idx#19 )
  [83] keyboard_events_size#49 = phi( form_mode::@2/keyboard_events_size#28, form_mode::@19/keyboard_events_size#25, form_mode::@6/keyboard_events_size#25 )
  [83] form_cursor_count#23 = phi( form_mode::@2/form_cursor_count#1, form_mode::@19/form_cursor_count#17, form_mode::@6/form_cursor_count#17 )
  to:form_mode::@4
form_mode::@4: scope:[form_mode]  from form_mode::@3 form_mode::@4
  [84] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto form_mode::@4
  to:form_mode::@5
form_mode::@5: scope:[form_mode]  from form_mode::@4
  [85] phi()
  [86] call form_control 
  [87] form_control::return#0 = form_control::return#2
  to:form_mode::@17
form_mode::@17: scope:[form_mode]  from form_mode::@5
  [88] form_mode::$11 = form_control::return#0
  [89] if(form_mode::$11==0) goto form_mode::@6
  to:form_mode::@return
form_mode::@return: scope:[form_mode]  from form_mode::@17
  [90] return 
  to:@return
form_mode::@6: scope:[form_mode]  from form_mode::@17
  [91] if(form_mode::preset_current#6==*form_fields_val) goto form_mode::@3
  to:form_mode::@7
form_mode::@7: scope:[form_mode]  from form_mode::@6
  [92] apply_preset::idx#0 = *form_fields_val
  [93] call apply_preset 
  to:form_mode::@18
form_mode::@18: scope:[form_mode]  from form_mode::@7
  [94] form_mode::preset_current#1 = *form_fields_val
  [95] call form_render_values 
  to:form_mode::@19
form_mode::@19: scope:[form_mode]  from form_mode::@18
  [96] render_preset_name::idx#1 = *form_fields_val
  [97] call render_preset_name 
  to:form_mode::@3

void gfx_mode()
gfx_mode: scope:[gfx_mode]  from main::@4
  [98] if(*form_ctrl_line==0) goto gfx_mode::@1
  to:gfx_mode::@10
gfx_mode::@10: scope:[gfx_mode]  from gfx_mode
  [99] phi()
  to:gfx_mode::@1
gfx_mode::@1: scope:[gfx_mode]  from gfx_mode gfx_mode::@10
  [100] gfx_mode::dtv_control#14 = phi( gfx_mode/0, gfx_mode::@10/DTV_LINEAR )
  [101] if(*form_ctrl_borof==0) goto gfx_mode::@2
  to:gfx_mode::@11
gfx_mode::@11: scope:[gfx_mode]  from gfx_mode::@1
  [102] gfx_mode::dtv_control#2 = gfx_mode::dtv_control#14 | DTV_BORDER_OFF
  to:gfx_mode::@2
gfx_mode::@2: scope:[gfx_mode]  from gfx_mode::@1 gfx_mode::@11
  [103] gfx_mode::dtv_control#15 = phi( gfx_mode::@1/gfx_mode::dtv_control#14, gfx_mode::@11/gfx_mode::dtv_control#2 )
  [104] if(*form_ctrl_hicol==0) goto gfx_mode::@3
  to:gfx_mode::@12
gfx_mode::@12: scope:[gfx_mode]  from gfx_mode::@2
  [105] gfx_mode::dtv_control#3 = gfx_mode::dtv_control#15 | DTV_HIGHCOLOR
  to:gfx_mode::@3
gfx_mode::@3: scope:[gfx_mode]  from gfx_mode::@12 gfx_mode::@2
  [106] gfx_mode::dtv_control#10 = phi( gfx_mode::@12/gfx_mode::dtv_control#3, gfx_mode::@2/gfx_mode::dtv_control#15 )
  [107] if(*form_ctrl_overs==0) goto gfx_mode::@4
  to:gfx_mode::@13
gfx_mode::@13: scope:[gfx_mode]  from gfx_mode::@3
  [108] gfx_mode::dtv_control#4 = gfx_mode::dtv_control#10 | DTV_OVERSCAN
  to:gfx_mode::@4
gfx_mode::@4: scope:[gfx_mode]  from gfx_mode::@13 gfx_mode::@3
  [109] gfx_mode::dtv_control#11 = phi( gfx_mode::@13/gfx_mode::dtv_control#4, gfx_mode::@3/gfx_mode::dtv_control#10 )
  [110] if(*form_ctrl_colof==0) goto gfx_mode::@5
  to:gfx_mode::@14
gfx_mode::@14: scope:[gfx_mode]  from gfx_mode::@4
  [111] gfx_mode::dtv_control#5 = gfx_mode::dtv_control#11 | DTV_COLORRAM_OFF
  to:gfx_mode::@5
gfx_mode::@5: scope:[gfx_mode]  from gfx_mode::@14 gfx_mode::@4
  [112] gfx_mode::dtv_control#13 = phi( gfx_mode::@14/gfx_mode::dtv_control#5, gfx_mode::@4/gfx_mode::dtv_control#11 )
  [113] if(*form_ctrl_chunk==0) goto gfx_mode::@6
  to:gfx_mode::@15
gfx_mode::@15: scope:[gfx_mode]  from gfx_mode::@5
  [114] gfx_mode::dtv_control#6 = gfx_mode::dtv_control#13 | DTV_CHUNKY
  to:gfx_mode::@6
gfx_mode::@6: scope:[gfx_mode]  from gfx_mode::@15 gfx_mode::@5
  [115] gfx_mode::dtv_control#12 = phi( gfx_mode::@15/gfx_mode::dtv_control#6, gfx_mode::@5/gfx_mode::dtv_control#13 )
  [116] *DTV_CONTROL = gfx_mode::dtv_control#12
  [117] if(*form_ctrl_ecm==0) goto gfx_mode::@7
  to:gfx_mode::@16
gfx_mode::@16: scope:[gfx_mode]  from gfx_mode::@6
  [118] phi()
  to:gfx_mode::@7
gfx_mode::@7: scope:[gfx_mode]  from gfx_mode::@16 gfx_mode::@6
  [119] gfx_mode::VICII_control#5 = phi( gfx_mode::@16/VICII_DEN|VICII_RSEL|3|VICII_ECM, gfx_mode::@6/VICII_DEN|VICII_RSEL|3 )
  [120] if(*form_ctrl_bmm==0) goto gfx_mode::@8
  to:gfx_mode::@17
gfx_mode::@17: scope:[gfx_mode]  from gfx_mode::@7
  [121] gfx_mode::VICII_control#2 = gfx_mode::VICII_control#5 | VICII_BMM
  to:gfx_mode::@8
gfx_mode::@8: scope:[gfx_mode]  from gfx_mode::@17 gfx_mode::@7
  [122] gfx_mode::VICII_control#4 = phi( gfx_mode::@17/gfx_mode::VICII_control#2, gfx_mode::@7/gfx_mode::VICII_control#5 )
  [123] *VICII_CONTROL1 = gfx_mode::VICII_control#4
  [124] if(*form_ctrl_mcm==0) goto gfx_mode::@9
  to:gfx_mode::@18
gfx_mode::@18: scope:[gfx_mode]  from gfx_mode::@8
  [125] phi()
  to:gfx_mode::@9
gfx_mode::@9: scope:[gfx_mode]  from gfx_mode::@18 gfx_mode::@8
  [126] gfx_mode::VICII_control2#2 = phi( gfx_mode::@18/VICII_CSEL|VICII_MCM, gfx_mode::@8/VICII_CSEL )
  [127] *VICII_CONTROL2 = gfx_mode::VICII_control2#2
  [128] gfx_mode::$18 = *form_a_start_hi << 4
  [129] gfx_mode::plane_a_offs#0 = gfx_mode::$18 | *form_a_start_lo
  [130] get_plane::idx#0 = *form_a_pattern
  [131] call get_plane 
  [132] get_plane::return#16 = get_plane::return#14
  to:gfx_mode::@27
gfx_mode::@27: scope:[gfx_mode]  from gfx_mode::@9
  [133] gfx_mode::$20 = get_plane::return#16
  [134] gfx_mode::plane_a#0 = gfx_mode::$20 + gfx_mode::plane_a_offs#0
  [135] gfx_mode::$22 = < gfx_mode::plane_a#0
  [136] gfx_mode::$23 = < gfx_mode::$22
  [137] *DTV_PLANEA_START_LO = gfx_mode::$23
  [138] gfx_mode::$24 = < gfx_mode::plane_a#0
  [139] gfx_mode::$25 = > gfx_mode::$24
  [140] *DTV_PLANEA_START_MI = gfx_mode::$25
  [141] gfx_mode::$26 = > gfx_mode::plane_a#0
  [142] gfx_mode::$27 = < gfx_mode::$26
  [143] *DTV_PLANEA_START_HI = gfx_mode::$27
  [144] gfx_mode::$28 = *form_a_step_hi << 4
  [145] gfx_mode::$29 = gfx_mode::$28 | *form_a_step_lo
  [146] *DTV_PLANEA_STEP = gfx_mode::$29
  [147] gfx_mode::$30 = *form_a_mod_hi << 4
  [148] gfx_mode::$31 = gfx_mode::$30 | *form_a_mod_lo
  [149] *DTV_PLANEA_MODULO_LO = gfx_mode::$31
  [150] *DTV_PLANEA_MODULO_HI = 0
  [151] gfx_mode::$32 = *form_b_start_hi << 4
  [152] gfx_mode::plane_b_offs#0 = gfx_mode::$32 | *form_b_start_lo
  [153] get_plane::idx#1 = *form_b_pattern
  [154] call get_plane 
  [155] get_plane::return#17 = get_plane::return#14
  to:gfx_mode::@28
gfx_mode::@28: scope:[gfx_mode]  from gfx_mode::@27
  [156] gfx_mode::$34 = get_plane::return#17
  [157] gfx_mode::plane_b#0 = gfx_mode::$34 + gfx_mode::plane_b_offs#0
  [158] gfx_mode::$36 = < gfx_mode::plane_b#0
  [159] gfx_mode::$37 = < gfx_mode::$36
  [160] *DTV_PLANEB_START_LO = gfx_mode::$37
  [161] gfx_mode::$38 = < gfx_mode::plane_b#0
  [162] gfx_mode::$39 = > gfx_mode::$38
  [163] *DTV_PLANEB_START_MI = gfx_mode::$39
  [164] gfx_mode::$40 = > gfx_mode::plane_b#0
  [165] gfx_mode::$41 = < gfx_mode::$40
  [166] *DTV_PLANEB_START_HI = gfx_mode::$41
  [167] gfx_mode::$42 = *form_b_step_hi << 4
  [168] gfx_mode::$43 = gfx_mode::$42 | *form_b_step_lo
  [169] *DTV_PLANEB_STEP = gfx_mode::$43
  [170] gfx_mode::$44 = *form_b_mod_hi << 4
  [171] gfx_mode::$45 = gfx_mode::$44 | *form_b_mod_lo
  [172] *DTV_PLANEB_MODULO_LO = gfx_mode::$45
  [173] *DTV_PLANEB_MODULO_HI = 0
  [174] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  [175] *((byte*)CIA2) = 3^(byte)(word)VICII_SCREEN0/$4000
  [176] get_VICII_screen::idx#0 = *form_VICII_screen
  [177] call get_VICII_screen 
  [178] get_VICII_screen::return#10 = get_VICII_screen::return#5
  to:gfx_mode::@29
gfx_mode::@29: scope:[gfx_mode]  from gfx_mode::@28
  [179] gfx_mode::$82 = get_VICII_screen::return#10
  [180] gfx_mode::$47 = (word)gfx_mode::$82 & $3fff
  [181] gfx_mode::$48 = gfx_mode::$47 >> 6
  [182] get_VICII_charset::idx#0 = *form_VICII_gfx
  [183] call get_VICII_charset 
  [184] get_VICII_charset::return#4 = get_VICII_charset::return#2
  to:gfx_mode::@30
gfx_mode::@30: scope:[gfx_mode]  from gfx_mode::@29
  [185] gfx_mode::$83 = get_VICII_charset::return#4
  [186] gfx_mode::$50 = (word)gfx_mode::$83 & $3fff
  [187] gfx_mode::$51 = > gfx_mode::$50
  [188] gfx_mode::$52 = gfx_mode::$51 >> 2
  [189] gfx_mode::$84 = (byte)gfx_mode::$48
  [190] gfx_mode::$53 = gfx_mode::$84 | gfx_mode::$52
  [191] *VICII_MEMORY = gfx_mode::$53
  [192] get_VICII_screen::idx#1 = *form_VICII_cols
  [193] call get_VICII_screen 
  [194] get_VICII_screen::return#11 = get_VICII_screen::return#5
  to:gfx_mode::@31
gfx_mode::@31: scope:[gfx_mode]  from gfx_mode::@30
  [195] gfx_mode::VICII_colors#0 = get_VICII_screen::return#11
  to:gfx_mode::@19
gfx_mode::@19: scope:[gfx_mode]  from gfx_mode::@21 gfx_mode::@31
  [196] gfx_mode::cy#4 = phi( gfx_mode::@21/gfx_mode::cy#1, gfx_mode::@31/0 )
  [196] gfx_mode::col#3 = phi( gfx_mode::@21/gfx_mode::col#1, gfx_mode::@31/COLS )
  [196] gfx_mode::VICII_colors#3 = phi( gfx_mode::@21/gfx_mode::VICII_colors#1, gfx_mode::@31/gfx_mode::VICII_colors#0 )
  to:gfx_mode::@20
gfx_mode::@20: scope:[gfx_mode]  from gfx_mode::@19 gfx_mode::@20
  [197] gfx_mode::cx#2 = phi( gfx_mode::@19/0, gfx_mode::@20/gfx_mode::cx#1 )
  [197] gfx_mode::col#2 = phi( gfx_mode::@19/gfx_mode::col#3, gfx_mode::@20/gfx_mode::col#1 )
  [197] gfx_mode::VICII_colors#2 = phi( gfx_mode::@19/gfx_mode::VICII_colors#3, gfx_mode::@20/gfx_mode::VICII_colors#1 )
  [198] *gfx_mode::col#2 = *gfx_mode::VICII_colors#2
  [199] gfx_mode::col#1 = ++ gfx_mode::col#2
  [200] gfx_mode::VICII_colors#1 = ++ gfx_mode::VICII_colors#2
  [201] gfx_mode::cx#1 = ++ gfx_mode::cx#2
  [202] if(gfx_mode::cx#1!=$28) goto gfx_mode::@20
  to:gfx_mode::@21
gfx_mode::@21: scope:[gfx_mode]  from gfx_mode::@20
  [203] gfx_mode::cy#1 = ++ gfx_mode::cy#4
  [204] if(gfx_mode::cy#1!=$19) goto gfx_mode::@19
  to:gfx_mode::@22
gfx_mode::@22: scope:[gfx_mode]  from gfx_mode::@21
  [205] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0
  [206] gfx_mode::$55 = *form_VICII_bg0_hi << 4
  [207] gfx_mode::$56 = gfx_mode::$55 | *form_VICII_bg0_lo
  [208] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = gfx_mode::$56
  [209] gfx_mode::$57 = *form_VICII_bg1_hi << 4
  [210] gfx_mode::$58 = gfx_mode::$57 | *form_VICII_bg1_lo
  [211] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1) = gfx_mode::$58
  [212] gfx_mode::$59 = *form_VICII_bg2_hi << 4
  [213] gfx_mode::$60 = gfx_mode::$59 | *form_VICII_bg2_lo
  [214] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2) = gfx_mode::$60
  [215] gfx_mode::$61 = *form_VICII_bg3_hi << 4
  [216] gfx_mode::$62 = gfx_mode::$61 | *form_VICII_bg3_lo
  [217] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3) = gfx_mode::$62
  [218] if(*form_dtv_palet==0) goto gfx_mode::@24
  to:gfx_mode::@23
gfx_mode::@23: scope:[gfx_mode]  from gfx_mode::@22 gfx_mode::@23
  [219] gfx_mode::j#2 = phi( gfx_mode::@22/0, gfx_mode::@23/gfx_mode::j#1 )
  [220] DTV_PALETTE[gfx_mode::j#2] = gfx_mode::j#2
  [221] gfx_mode::j#1 = ++ gfx_mode::j#2
  [222] if(gfx_mode::j#1!=$10) goto gfx_mode::@23
  to:gfx_mode::@25
gfx_mode::@25: scope:[gfx_mode]  from gfx_mode::@23 gfx_mode::@24 gfx_mode::@25 gfx_mode::@33
  [223] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto gfx_mode::@25
  to:gfx_mode::@26
gfx_mode::@26: scope:[gfx_mode]  from gfx_mode::@25
  [224] phi()
  [225] call keyboard_event_scan 
  to:gfx_mode::@32
gfx_mode::@32: scope:[gfx_mode]  from gfx_mode::@26
  [226] phi()
  [227] call keyboard_event_get 
  [228] keyboard_event_get::return#3 = keyboard_event_get::return#2
  to:gfx_mode::@33
gfx_mode::@33: scope:[gfx_mode]  from gfx_mode::@32
  [229] gfx_mode::keyboard_event#0 = keyboard_event_get::return#3
  [230] if(gfx_mode::keyboard_event#0==KEY_SPACE) goto gfx_mode::@return
  to:gfx_mode::@25
gfx_mode::@return: scope:[gfx_mode]  from gfx_mode::@33
  [231] return 
  to:@return
gfx_mode::@24: scope:[gfx_mode]  from gfx_mode::@22 gfx_mode::@24
  [232] gfx_mode::i#2 = phi( gfx_mode::@22/0, gfx_mode::@24/gfx_mode::i#1 )
  [233] DTV_PALETTE[gfx_mode::i#2] = DTV_PALETTE_DEFAULT[gfx_mode::i#2]
  [234] gfx_mode::i#1 = ++ gfx_mode::i#2
  [235] if(gfx_mode::i#1!=$10) goto gfx_mode::@24
  to:gfx_mode::@25

void gfx_init_screen0()
gfx_init_screen0: scope:[gfx_init_screen0]  from gfx_init
  [236] phi()
  to:gfx_init_screen0::@1
gfx_init_screen0::@1: scope:[gfx_init_screen0]  from gfx_init_screen0 gfx_init_screen0::@3
  [237] gfx_init_screen0::ch#3 = phi( gfx_init_screen0/VICII_SCREEN0, gfx_init_screen0::@3/gfx_init_screen0::ch#1 )
  [237] gfx_init_screen0::cy#4 = phi( gfx_init_screen0/0, gfx_init_screen0::@3/gfx_init_screen0::cy#1 )
  to:gfx_init_screen0::@2
gfx_init_screen0::@2: scope:[gfx_init_screen0]  from gfx_init_screen0::@1 gfx_init_screen0::@2
  [238] gfx_init_screen0::ch#2 = phi( gfx_init_screen0::@1/gfx_init_screen0::ch#3, gfx_init_screen0::@2/gfx_init_screen0::ch#1 )
  [238] gfx_init_screen0::cx#2 = phi( gfx_init_screen0::@1/0, gfx_init_screen0::@2/gfx_init_screen0::cx#1 )
  [239] gfx_init_screen0::$0 = gfx_init_screen0::cy#4 & $f
  [240] gfx_init_screen0::$1 = gfx_init_screen0::$0 << 4
  [241] gfx_init_screen0::$2 = gfx_init_screen0::cx#2 & $f
  [242] gfx_init_screen0::$3 = gfx_init_screen0::$1 | gfx_init_screen0::$2
  [243] *gfx_init_screen0::ch#2 = gfx_init_screen0::$3
  [244] gfx_init_screen0::ch#1 = ++ gfx_init_screen0::ch#2
  [245] gfx_init_screen0::cx#1 = ++ gfx_init_screen0::cx#2
  [246] if(gfx_init_screen0::cx#1!=$28) goto gfx_init_screen0::@2
  to:gfx_init_screen0::@3
gfx_init_screen0::@3: scope:[gfx_init_screen0]  from gfx_init_screen0::@2
  [247] gfx_init_screen0::cy#1 = ++ gfx_init_screen0::cy#4
  [248] if(gfx_init_screen0::cy#1!=$19) goto gfx_init_screen0::@1
  to:gfx_init_screen0::@return
gfx_init_screen0::@return: scope:[gfx_init_screen0]  from gfx_init_screen0::@3
  [249] return 
  to:@return

void gfx_init_screen1()
gfx_init_screen1: scope:[gfx_init_screen1]  from gfx_init::@1
  [250] phi()
  to:gfx_init_screen1::@1
gfx_init_screen1::@1: scope:[gfx_init_screen1]  from gfx_init_screen1 gfx_init_screen1::@3
  [251] gfx_init_screen1::ch#3 = phi( gfx_init_screen1/VICII_SCREEN1, gfx_init_screen1::@3/gfx_init_screen1::ch#1 )
  [251] gfx_init_screen1::cy#4 = phi( gfx_init_screen1/0, gfx_init_screen1::@3/gfx_init_screen1::cy#1 )
  to:gfx_init_screen1::@2
gfx_init_screen1::@2: scope:[gfx_init_screen1]  from gfx_init_screen1::@1 gfx_init_screen1::@2
  [252] gfx_init_screen1::ch#2 = phi( gfx_init_screen1::@1/gfx_init_screen1::ch#3, gfx_init_screen1::@2/gfx_init_screen1::ch#1 )
  [252] gfx_init_screen1::cx#2 = phi( gfx_init_screen1::@1/0, gfx_init_screen1::@2/gfx_init_screen1::cx#1 )
  [253] gfx_init_screen1::$0 = gfx_init_screen1::cx#2 + gfx_init_screen1::cy#4
  [254] gfx_init_screen1::$1 = gfx_init_screen1::$0 & $f
  [255] *gfx_init_screen1::ch#2 = gfx_init_screen1::$1
  [256] gfx_init_screen1::ch#1 = ++ gfx_init_screen1::ch#2
  [257] gfx_init_screen1::cx#1 = ++ gfx_init_screen1::cx#2
  [258] if(gfx_init_screen1::cx#1!=$28) goto gfx_init_screen1::@2
  to:gfx_init_screen1::@3
gfx_init_screen1::@3: scope:[gfx_init_screen1]  from gfx_init_screen1::@2
  [259] gfx_init_screen1::cy#1 = ++ gfx_init_screen1::cy#4
  [260] if(gfx_init_screen1::cy#1!=$19) goto gfx_init_screen1::@1
  to:gfx_init_screen1::@return
gfx_init_screen1::@return: scope:[gfx_init_screen1]  from gfx_init_screen1::@3
  [261] return 
  to:@return

void gfx_init_screen2()
gfx_init_screen2: scope:[gfx_init_screen2]  from gfx_init::@2
  [262] phi()
  to:gfx_init_screen2::@1
gfx_init_screen2::@1: scope:[gfx_init_screen2]  from gfx_init_screen2 gfx_init_screen2::@3
  [263] gfx_init_screen2::ch#3 = phi( gfx_init_screen2/VICII_SCREEN2, gfx_init_screen2::@3/gfx_init_screen2::ch#1 )
  [263] gfx_init_screen2::cy#4 = phi( gfx_init_screen2/0, gfx_init_screen2::@3/gfx_init_screen2::cy#1 )
  to:gfx_init_screen2::@2
gfx_init_screen2::@2: scope:[gfx_init_screen2]  from gfx_init_screen2::@1 gfx_init_screen2::@2
  [264] gfx_init_screen2::ch#2 = phi( gfx_init_screen2::@1/gfx_init_screen2::ch#3, gfx_init_screen2::@2/gfx_init_screen2::ch#1 )
  [264] gfx_init_screen2::cx#2 = phi( gfx_init_screen2::@1/0, gfx_init_screen2::@2/gfx_init_screen2::cx#1 )
  [265] gfx_init_screen2::$0 = gfx_init_screen2::cx#2 + gfx_init_screen2::cy#4
  [266] gfx_init_screen2::col#0 = gfx_init_screen2::$0 & $f
  [267] gfx_init_screen2::col2#0 = $f - gfx_init_screen2::col#0
  [268] gfx_init_screen2::$3 = gfx_init_screen2::col#0 << 4
  [269] gfx_init_screen2::$4 = gfx_init_screen2::$3 | gfx_init_screen2::col2#0
  [270] *gfx_init_screen2::ch#2 = gfx_init_screen2::$4
  [271] gfx_init_screen2::ch#1 = ++ gfx_init_screen2::ch#2
  [272] gfx_init_screen2::cx#1 = ++ gfx_init_screen2::cx#2
  [273] if(gfx_init_screen2::cx#1!=$28) goto gfx_init_screen2::@2
  to:gfx_init_screen2::@3
gfx_init_screen2::@3: scope:[gfx_init_screen2]  from gfx_init_screen2::@2
  [274] gfx_init_screen2::cy#1 = ++ gfx_init_screen2::cy#4
  [275] if(gfx_init_screen2::cy#1!=$19) goto gfx_init_screen2::@1
  to:gfx_init_screen2::@return
gfx_init_screen2::@return: scope:[gfx_init_screen2]  from gfx_init_screen2::@3
  [276] return 
  to:@return

void gfx_init_screen3()
gfx_init_screen3: scope:[gfx_init_screen3]  from gfx_init::@3
  [277] phi()
  to:gfx_init_screen3::@1
gfx_init_screen3::@1: scope:[gfx_init_screen3]  from gfx_init_screen3 gfx_init_screen3::@3
  [278] gfx_init_screen3::ch#3 = phi( gfx_init_screen3/VICII_SCREEN3, gfx_init_screen3::@3/gfx_init_screen3::ch#1 )
  [278] gfx_init_screen3::cy#4 = phi( gfx_init_screen3/0, gfx_init_screen3::@3/gfx_init_screen3::cy#1 )
  to:gfx_init_screen3::@2
gfx_init_screen3::@2: scope:[gfx_init_screen3]  from gfx_init_screen3::@1 gfx_init_screen3::@2
  [279] gfx_init_screen3::ch#2 = phi( gfx_init_screen3::@1/gfx_init_screen3::ch#3, gfx_init_screen3::@2/gfx_init_screen3::ch#1 )
  [279] gfx_init_screen3::cx#2 = phi( gfx_init_screen3::@1/0, gfx_init_screen3::@2/gfx_init_screen3::cx#1 )
  [280] gfx_init_screen3::$0 = gfx_init_screen3::cx#2 & 3
  [281] gfx_init_screen3::$1 = gfx_init_screen3::$0 << 4
  [282] gfx_init_screen3::$2 = gfx_init_screen3::cy#4 & 3
  [283] gfx_init_screen3::$3 = gfx_init_screen3::$1 | gfx_init_screen3::$2
  [284] *gfx_init_screen3::ch#2 = gfx_init_screen3::$3
  [285] gfx_init_screen3::ch#1 = ++ gfx_init_screen3::ch#2
  [286] gfx_init_screen3::cx#1 = ++ gfx_init_screen3::cx#2
  [287] if(gfx_init_screen3::cx#1!=$28) goto gfx_init_screen3::@2
  to:gfx_init_screen3::@3
gfx_init_screen3::@3: scope:[gfx_init_screen3]  from gfx_init_screen3::@2
  [288] gfx_init_screen3::cy#1 = ++ gfx_init_screen3::cy#4
  [289] if(gfx_init_screen3::cy#1!=$19) goto gfx_init_screen3::@1
  to:gfx_init_screen3::@return
gfx_init_screen3::@return: scope:[gfx_init_screen3]  from gfx_init_screen3::@3
  [290] return 
  to:@return

void gfx_init_screen4()
gfx_init_screen4: scope:[gfx_init_screen4]  from gfx_init::@4
  [291] phi()
  to:gfx_init_screen4::@1
gfx_init_screen4::@1: scope:[gfx_init_screen4]  from gfx_init_screen4 gfx_init_screen4::@3
  [292] gfx_init_screen4::cy#4 = phi( gfx_init_screen4/0, gfx_init_screen4::@3/gfx_init_screen4::cy#1 )
  [292] gfx_init_screen4::ch#3 = phi( gfx_init_screen4/VICII_SCREEN4, gfx_init_screen4::@3/gfx_init_screen4::ch#1 )
  to:gfx_init_screen4::@2
gfx_init_screen4::@2: scope:[gfx_init_screen4]  from gfx_init_screen4::@1 gfx_init_screen4::@2
  [293] gfx_init_screen4::cx#2 = phi( gfx_init_screen4::@1/0, gfx_init_screen4::@2/gfx_init_screen4::cx#1 )
  [293] gfx_init_screen4::ch#2 = phi( gfx_init_screen4::@1/gfx_init_screen4::ch#3, gfx_init_screen4::@2/gfx_init_screen4::ch#1 )
  [294] *gfx_init_screen4::ch#2 = 0
  [295] gfx_init_screen4::ch#1 = ++ gfx_init_screen4::ch#2
  [296] gfx_init_screen4::cx#1 = ++ gfx_init_screen4::cx#2
  [297] if(gfx_init_screen4::cx#1!=$28) goto gfx_init_screen4::@2
  to:gfx_init_screen4::@3
gfx_init_screen4::@3: scope:[gfx_init_screen4]  from gfx_init_screen4::@2
  [298] gfx_init_screen4::cy#1 = ++ gfx_init_screen4::cy#4
  [299] if(gfx_init_screen4::cy#1!=$19) goto gfx_init_screen4::@1
  to:gfx_init_screen4::@return
gfx_init_screen4::@return: scope:[gfx_init_screen4]  from gfx_init_screen4::@3
  [300] return 
  to:@return

void gfx_init_charset()
gfx_init_charset: scope:[gfx_init_charset]  from gfx_init::@5
  [301] *PROCPORT = $32
  to:gfx_init_charset::@1
gfx_init_charset::@1: scope:[gfx_init_charset]  from gfx_init_charset gfx_init_charset::@3
  [302] gfx_init_charset::c#4 = phi( gfx_init_charset/0, gfx_init_charset::@3/gfx_init_charset::c#1 )
  [302] gfx_init_charset::charset#3 = phi( gfx_init_charset/VICII_CHARSET_ROM, gfx_init_charset::@3/gfx_init_charset::charset#1 )
  [302] gfx_init_charset::chargen#3 = phi( gfx_init_charset/CHARGEN, gfx_init_charset::@3/gfx_init_charset::chargen#1 )
  to:gfx_init_charset::@2
gfx_init_charset::@2: scope:[gfx_init_charset]  from gfx_init_charset::@1 gfx_init_charset::@2
  [303] gfx_init_charset::l#2 = phi( gfx_init_charset::@1/0, gfx_init_charset::@2/gfx_init_charset::l#1 )
  [303] gfx_init_charset::charset#2 = phi( gfx_init_charset::@1/gfx_init_charset::charset#3, gfx_init_charset::@2/gfx_init_charset::charset#1 )
  [303] gfx_init_charset::chargen#2 = phi( gfx_init_charset::@1/gfx_init_charset::chargen#3, gfx_init_charset::@2/gfx_init_charset::chargen#1 )
  [304] *gfx_init_charset::charset#2 = *gfx_init_charset::chargen#2
  [305] gfx_init_charset::charset#1 = ++ gfx_init_charset::charset#2
  [306] gfx_init_charset::chargen#1 = ++ gfx_init_charset::chargen#2
  [307] gfx_init_charset::l#1 = ++ gfx_init_charset::l#2
  [308] if(gfx_init_charset::l#1!=8) goto gfx_init_charset::@2
  to:gfx_init_charset::@3
gfx_init_charset::@3: scope:[gfx_init_charset]  from gfx_init_charset::@2
  [309] gfx_init_charset::c#1 = ++ gfx_init_charset::c#4
  [310] if(gfx_init_charset::c#1!=0) goto gfx_init_charset::@1
  to:gfx_init_charset::@4
gfx_init_charset::@4: scope:[gfx_init_charset]  from gfx_init_charset::@3
  [311] *PROCPORT = $37
  to:gfx_init_charset::@return
gfx_init_charset::@return: scope:[gfx_init_charset]  from gfx_init_charset::@4
  [312] return 
  to:@return

void gfx_init_VICII_bitmap()
gfx_init_VICII_bitmap: scope:[gfx_init_VICII_bitmap]  from gfx_init::@6
  [313] phi()
  [314] call bitmap_init 
  to:gfx_init_VICII_bitmap::@3
gfx_init_VICII_bitmap::@3: scope:[gfx_init_VICII_bitmap]  from gfx_init_VICII_bitmap
  [315] phi()
  [316] call bitmap_clear 
  to:gfx_init_VICII_bitmap::@1
gfx_init_VICII_bitmap::@1: scope:[gfx_init_VICII_bitmap]  from gfx_init_VICII_bitmap::@3 gfx_init_VICII_bitmap::@4
  [317] gfx_init_VICII_bitmap::l#2 = phi( gfx_init_VICII_bitmap::@3/0, gfx_init_VICII_bitmap::@4/gfx_init_VICII_bitmap::l#1 )
  [318] if(gfx_init_VICII_bitmap::l#2<gfx_init_VICII_bitmap::lines_cnt) goto gfx_init_VICII_bitmap::@2
  to:gfx_init_VICII_bitmap::@return
gfx_init_VICII_bitmap::@return: scope:[gfx_init_VICII_bitmap]  from gfx_init_VICII_bitmap::@1
  [319] return 
  to:@return
gfx_init_VICII_bitmap::@2: scope:[gfx_init_VICII_bitmap]  from gfx_init_VICII_bitmap::@1
  [320] bitmap_line::x1#0 = gfx_init_VICII_bitmap::lines_x[gfx_init_VICII_bitmap::l#2]
  [321] bitmap_line::y1#0 = gfx_init_VICII_bitmap::lines_y[gfx_init_VICII_bitmap::l#2]
  [322] bitmap_line::x2#0 = (gfx_init_VICII_bitmap::lines_x+1)[gfx_init_VICII_bitmap::l#2]
  [323] bitmap_line::y2#0 = (gfx_init_VICII_bitmap::lines_y+1)[gfx_init_VICII_bitmap::l#2]
  [324] call bitmap_line 
  to:gfx_init_VICII_bitmap::@4
gfx_init_VICII_bitmap::@4: scope:[gfx_init_VICII_bitmap]  from gfx_init_VICII_bitmap::@2
  [325] gfx_init_VICII_bitmap::l#1 = ++ gfx_init_VICII_bitmap::l#2
  to:gfx_init_VICII_bitmap::@1

void gfx_init_plane_8bppchunky()
gfx_init_plane_8bppchunky: scope:[gfx_init_plane_8bppchunky]  from gfx_init::@7
  [326] phi()
  [327] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@1
gfx_init_plane_8bppchunky::@1: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@5
  [328] gfx_init_plane_8bppchunky::gfxbCpuBank#7 = phi( gfx_init_plane_8bppchunky::@5/gfx_init_plane_8bppchunky::gfxbCpuBank#8, gfx_init_plane_8bppchunky/++(byte)PLANE_8BPP_CHUNKY/$4000 )
  [328] gfx_init_plane_8bppchunky::y#6 = phi( gfx_init_plane_8bppchunky::@5/gfx_init_plane_8bppchunky::y#1, gfx_init_plane_8bppchunky/0 )
  [328] gfx_init_plane_8bppchunky::gfxb#5 = phi( gfx_init_plane_8bppchunky::@5/gfx_init_plane_8bppchunky::gfxb#1, gfx_init_plane_8bppchunky/(byte*) 16384 )
  to:gfx_init_plane_8bppchunky::@2
gfx_init_plane_8bppchunky::@2: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@1 gfx_init_plane_8bppchunky::@3
  [329] gfx_init_plane_8bppchunky::gfxbCpuBank#4 = phi( gfx_init_plane_8bppchunky::@1/gfx_init_plane_8bppchunky::gfxbCpuBank#7, gfx_init_plane_8bppchunky::@3/gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  [329] gfx_init_plane_8bppchunky::x#2 = phi( gfx_init_plane_8bppchunky::@1/0, gfx_init_plane_8bppchunky::@3/gfx_init_plane_8bppchunky::x#1 )
  [329] gfx_init_plane_8bppchunky::gfxb#3 = phi( gfx_init_plane_8bppchunky::@1/gfx_init_plane_8bppchunky::gfxb#5, gfx_init_plane_8bppchunky::@3/gfx_init_plane_8bppchunky::gfxb#1 )
  [330] if(gfx_init_plane_8bppchunky::gfxb#3!=$8000) goto gfx_init_plane_8bppchunky::@3
  to:gfx_init_plane_8bppchunky::@4
gfx_init_plane_8bppchunky::@4: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2
  [331] dtvSetCpuBankSegment1::cpuBankIdx#1 = gfx_init_plane_8bppchunky::gfxbCpuBank#4
  [332] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@7
gfx_init_plane_8bppchunky::@7: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@4
  [333] gfx_init_plane_8bppchunky::gfxbCpuBank#2 = ++ gfx_init_plane_8bppchunky::gfxbCpuBank#4
  to:gfx_init_plane_8bppchunky::@3
gfx_init_plane_8bppchunky::@3: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2 gfx_init_plane_8bppchunky::@7
  [334] gfx_init_plane_8bppchunky::gfxbCpuBank#8 = phi( gfx_init_plane_8bppchunky::@2/gfx_init_plane_8bppchunky::gfxbCpuBank#4, gfx_init_plane_8bppchunky::@7/gfx_init_plane_8bppchunky::gfxbCpuBank#2 )
  [334] gfx_init_plane_8bppchunky::gfxb#4 = phi( gfx_init_plane_8bppchunky::@2/gfx_init_plane_8bppchunky::gfxb#3, gfx_init_plane_8bppchunky::@7/(byte*) 16384 )
  [335] gfx_init_plane_8bppchunky::$5 = gfx_init_plane_8bppchunky::x#2 + gfx_init_plane_8bppchunky::y#6
  [336] gfx_init_plane_8bppchunky::c#0 = (byte)gfx_init_plane_8bppchunky::$5
  [337] *gfx_init_plane_8bppchunky::gfxb#4 = gfx_init_plane_8bppchunky::c#0
  [338] gfx_init_plane_8bppchunky::gfxb#1 = ++ gfx_init_plane_8bppchunky::gfxb#4
  [339] gfx_init_plane_8bppchunky::x#1 = ++ gfx_init_plane_8bppchunky::x#2
  [340] if(gfx_init_plane_8bppchunky::x#1!=$140) goto gfx_init_plane_8bppchunky::@2
  to:gfx_init_plane_8bppchunky::@5
gfx_init_plane_8bppchunky::@5: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@3
  [341] gfx_init_plane_8bppchunky::y#1 = ++ gfx_init_plane_8bppchunky::y#6
  [342] if(gfx_init_plane_8bppchunky::y#1!=$c8) goto gfx_init_plane_8bppchunky::@1
  to:gfx_init_plane_8bppchunky::@6
gfx_init_plane_8bppchunky::@6: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5
  [343] phi()
  [344] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@return
gfx_init_plane_8bppchunky::@return: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@6
  [345] return 
  to:@return

void gfx_init_plane_charset8()
gfx_init_plane_charset8: scope:[gfx_init_plane_charset8]  from gfx_init::@8
  [346] phi()
  [347] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@9
gfx_init_plane_charset8::@9: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8
  [348] *PROCPORT = PROCPORT_RAM_CHARROM
  to:gfx_init_plane_charset8::@1
gfx_init_plane_charset8::@1: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7 gfx_init_plane_charset8::@9
  [349] gfx_init_plane_charset8::ch#8 = phi( gfx_init_plane_charset8::@7/gfx_init_plane_charset8::ch#1, gfx_init_plane_charset8::@9/0 )
  [349] gfx_init_plane_charset8::col#6 = phi( gfx_init_plane_charset8::@7/gfx_init_plane_charset8::col#1, gfx_init_plane_charset8::@9/0 )
  [349] gfx_init_plane_charset8::gfxa#6 = phi( gfx_init_plane_charset8::@7/gfx_init_plane_charset8::gfxa#1, gfx_init_plane_charset8::@9/(byte*)$4000 )
  [349] gfx_init_plane_charset8::chargen#3 = phi( gfx_init_plane_charset8::@7/gfx_init_plane_charset8::chargen#1, gfx_init_plane_charset8::@9/CHARGEN )
  to:gfx_init_plane_charset8::@2
gfx_init_plane_charset8::@2: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@1 gfx_init_plane_charset8::@6
  [350] gfx_init_plane_charset8::cr#6 = phi( gfx_init_plane_charset8::@1/0, gfx_init_plane_charset8::@6/gfx_init_plane_charset8::cr#1 )
  [350] gfx_init_plane_charset8::col#5 = phi( gfx_init_plane_charset8::@1/gfx_init_plane_charset8::col#6, gfx_init_plane_charset8::@6/gfx_init_plane_charset8::col#1 )
  [350] gfx_init_plane_charset8::gfxa#5 = phi( gfx_init_plane_charset8::@1/gfx_init_plane_charset8::gfxa#6, gfx_init_plane_charset8::@6/gfx_init_plane_charset8::gfxa#1 )
  [350] gfx_init_plane_charset8::chargen#2 = phi( gfx_init_plane_charset8::@1/gfx_init_plane_charset8::chargen#3, gfx_init_plane_charset8::@6/gfx_init_plane_charset8::chargen#1 )
  [351] gfx_init_plane_charset8::bits#0 = *gfx_init_plane_charset8::chargen#2
  [352] gfx_init_plane_charset8::chargen#1 = ++ gfx_init_plane_charset8::chargen#2
  to:gfx_init_plane_charset8::@3
gfx_init_plane_charset8::@3: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@2 gfx_init_plane_charset8::@4
  [353] gfx_init_plane_charset8::cp#2 = phi( gfx_init_plane_charset8::@2/0, gfx_init_plane_charset8::@4/gfx_init_plane_charset8::cp#1 )
  [353] gfx_init_plane_charset8::col#2 = phi( gfx_init_plane_charset8::@2/gfx_init_plane_charset8::col#5, gfx_init_plane_charset8::@4/gfx_init_plane_charset8::col#1 )
  [353] gfx_init_plane_charset8::gfxa#2 = phi( gfx_init_plane_charset8::@2/gfx_init_plane_charset8::gfxa#5, gfx_init_plane_charset8::@4/gfx_init_plane_charset8::gfxa#1 )
  [353] gfx_init_plane_charset8::bits#2 = phi( gfx_init_plane_charset8::@2/gfx_init_plane_charset8::bits#0, gfx_init_plane_charset8::@4/gfx_init_plane_charset8::bits#1 )
  [354] gfx_init_plane_charset8::$2 = gfx_init_plane_charset8::bits#2 & $80
  [355] if(gfx_init_plane_charset8::$2==0) goto gfx_init_plane_charset8::@4
  to:gfx_init_plane_charset8::@5
gfx_init_plane_charset8::@5: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3
  [356] gfx_init_plane_charset8::c#3 = gfx_init_plane_charset8::col#2
  to:gfx_init_plane_charset8::@4
gfx_init_plane_charset8::@4: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3 gfx_init_plane_charset8::@5
  [357] gfx_init_plane_charset8::c#2 = phi( gfx_init_plane_charset8::@3/0, gfx_init_plane_charset8::@5/gfx_init_plane_charset8::c#3 )
  [358] *gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::c#2
  [359] gfx_init_plane_charset8::gfxa#1 = ++ gfx_init_plane_charset8::gfxa#2
  [360] gfx_init_plane_charset8::bits#1 = gfx_init_plane_charset8::bits#2 << 1
  [361] gfx_init_plane_charset8::col#1 = ++ gfx_init_plane_charset8::col#2
  [362] gfx_init_plane_charset8::cp#1 = ++ gfx_init_plane_charset8::cp#2
  [363] if(gfx_init_plane_charset8::cp#1!=8) goto gfx_init_plane_charset8::@3
  to:gfx_init_plane_charset8::@6
gfx_init_plane_charset8::@6: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@4
  [364] gfx_init_plane_charset8::cr#1 = ++ gfx_init_plane_charset8::cr#6
  [365] if(gfx_init_plane_charset8::cr#1!=8) goto gfx_init_plane_charset8::@2
  to:gfx_init_plane_charset8::@7
gfx_init_plane_charset8::@7: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@6
  [366] gfx_init_plane_charset8::ch#1 = ++ gfx_init_plane_charset8::ch#8
  [367] if(gfx_init_plane_charset8::ch#1!=0) goto gfx_init_plane_charset8::@1
  to:gfx_init_plane_charset8::@8
gfx_init_plane_charset8::@8: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7
  [368] *PROCPORT = PROCPORT_RAM_IO
  [369] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@return
gfx_init_plane_charset8::@return: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@8
  [370] return 
  to:@return

void gfx_init_plane_horisontal()
gfx_init_plane_horisontal: scope:[gfx_init_plane_horisontal]  from gfx_init::@9
  [371] phi()
  [372] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@1
gfx_init_plane_horisontal::@1: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal gfx_init_plane_horisontal::@6
  [373] gfx_init_plane_horisontal::gfxa#6 = phi( gfx_init_plane_horisontal::@6/gfx_init_plane_horisontal::gfxa#7, gfx_init_plane_horisontal/(byte*)$4000 )
  [373] gfx_init_plane_horisontal::ay#4 = phi( gfx_init_plane_horisontal::@6/gfx_init_plane_horisontal::ay#1, gfx_init_plane_horisontal/0 )
  to:gfx_init_plane_horisontal::@2
gfx_init_plane_horisontal::@2: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@1 gfx_init_plane_horisontal::@4
  [374] gfx_init_plane_horisontal::ax#2 = phi( gfx_init_plane_horisontal::@1/0, gfx_init_plane_horisontal::@4/gfx_init_plane_horisontal::ax#1 )
  [374] gfx_init_plane_horisontal::gfxa#3 = phi( gfx_init_plane_horisontal::@1/gfx_init_plane_horisontal::gfxa#6, gfx_init_plane_horisontal::@4/gfx_init_plane_horisontal::gfxa#7 )
  [375] gfx_init_plane_horisontal::$2 = gfx_init_plane_horisontal::ay#4 & 4
  [376] if(gfx_init_plane_horisontal::$2==0) goto gfx_init_plane_horisontal::@3
  to:gfx_init_plane_horisontal::@5
gfx_init_plane_horisontal::@5: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  [377] *gfx_init_plane_horisontal::gfxa#3 = $ff
  [378] gfx_init_plane_horisontal::gfxa#2 = ++ gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@4: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5
  [379] gfx_init_plane_horisontal::gfxa#7 = phi( gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::gfxa#1, gfx_init_plane_horisontal::@5/gfx_init_plane_horisontal::gfxa#2 )
  [380] gfx_init_plane_horisontal::ax#1 = ++ gfx_init_plane_horisontal::ax#2
  [381] if(gfx_init_plane_horisontal::ax#1!=$28) goto gfx_init_plane_horisontal::@2
  to:gfx_init_plane_horisontal::@6
gfx_init_plane_horisontal::@6: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@4
  [382] gfx_init_plane_horisontal::ay#1 = ++ gfx_init_plane_horisontal::ay#4
  [383] if(gfx_init_plane_horisontal::ay#1!=$c8) goto gfx_init_plane_horisontal::@1
  to:gfx_init_plane_horisontal::@7
gfx_init_plane_horisontal::@7: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@6
  [384] phi()
  [385] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@return
gfx_init_plane_horisontal::@return: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@7
  [386] return 
  to:@return
gfx_init_plane_horisontal::@3: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  [387] *gfx_init_plane_horisontal::gfxa#3 = 0
  [388] gfx_init_plane_horisontal::gfxa#1 = ++ gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4

void gfx_init_plane_vertical()
gfx_init_plane_vertical: scope:[gfx_init_plane_vertical]  from gfx_init::@10
  [389] phi()
  [390] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@1
gfx_init_plane_vertical::@1: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical gfx_init_plane_vertical::@3
  [391] gfx_init_plane_vertical::by#4 = phi( gfx_init_plane_vertical::@3/gfx_init_plane_vertical::by#1, gfx_init_plane_vertical/0 )
  [391] gfx_init_plane_vertical::gfxb#3 = phi( gfx_init_plane_vertical::@3/gfx_init_plane_vertical::gfxb#1, gfx_init_plane_vertical/(byte*)$4000+PLANE_VERTICAL&$3fff )
  to:gfx_init_plane_vertical::@2
gfx_init_plane_vertical::@2: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@1 gfx_init_plane_vertical::@2
  [392] gfx_init_plane_vertical::bx#2 = phi( gfx_init_plane_vertical::@1/0, gfx_init_plane_vertical::@2/gfx_init_plane_vertical::bx#1 )
  [392] gfx_init_plane_vertical::gfxb#2 = phi( gfx_init_plane_vertical::@1/gfx_init_plane_vertical::gfxb#3, gfx_init_plane_vertical::@2/gfx_init_plane_vertical::gfxb#1 )
  [393] *gfx_init_plane_vertical::gfxb#2 = $f
  [394] gfx_init_plane_vertical::gfxb#1 = ++ gfx_init_plane_vertical::gfxb#2
  [395] gfx_init_plane_vertical::bx#1 = ++ gfx_init_plane_vertical::bx#2
  [396] if(gfx_init_plane_vertical::bx#1!=$28) goto gfx_init_plane_vertical::@2
  to:gfx_init_plane_vertical::@3
gfx_init_plane_vertical::@3: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@2
  [397] gfx_init_plane_vertical::by#1 = ++ gfx_init_plane_vertical::by#4
  [398] if(gfx_init_plane_vertical::by#1!=$c8) goto gfx_init_plane_vertical::@1
  to:gfx_init_plane_vertical::@4
gfx_init_plane_vertical::@4: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3
  [399] phi()
  [400] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@return
gfx_init_plane_vertical::@return: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@4
  [401] return 
  to:@return

void gfx_init_plane_horisontal2()
gfx_init_plane_horisontal2: scope:[gfx_init_plane_horisontal2]  from gfx_init::@11
  [402] phi()
  [403] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@1
gfx_init_plane_horisontal2::@1: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@3
  [404] gfx_init_plane_horisontal2::gfxa#3 = phi( gfx_init_plane_horisontal2::@3/gfx_init_plane_horisontal2::gfxa#1, gfx_init_plane_horisontal2/(byte*)$4000 )
  [404] gfx_init_plane_horisontal2::ay#4 = phi( gfx_init_plane_horisontal2::@3/gfx_init_plane_horisontal2::ay#1, gfx_init_plane_horisontal2/0 )
  to:gfx_init_plane_horisontal2::@2
gfx_init_plane_horisontal2::@2: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@1 gfx_init_plane_horisontal2::@2
  [405] gfx_init_plane_horisontal2::ax#2 = phi( gfx_init_plane_horisontal2::@1/0, gfx_init_plane_horisontal2::@2/gfx_init_plane_horisontal2::ax#1 )
  [405] gfx_init_plane_horisontal2::gfxa#2 = phi( gfx_init_plane_horisontal2::@1/gfx_init_plane_horisontal2::gfxa#3, gfx_init_plane_horisontal2::@2/gfx_init_plane_horisontal2::gfxa#1 )
  [406] gfx_init_plane_horisontal2::$2 = gfx_init_plane_horisontal2::ay#4 >> 1
  [407] gfx_init_plane_horisontal2::row#0 = gfx_init_plane_horisontal2::$2 & 3
  [408] *gfx_init_plane_horisontal2::gfxa#2 = gfx_init_plane_horisontal2::row_bitmask[gfx_init_plane_horisontal2::row#0]
  [409] gfx_init_plane_horisontal2::gfxa#1 = ++ gfx_init_plane_horisontal2::gfxa#2
  [410] gfx_init_plane_horisontal2::ax#1 = ++ gfx_init_plane_horisontal2::ax#2
  [411] if(gfx_init_plane_horisontal2::ax#1!=$28) goto gfx_init_plane_horisontal2::@2
  to:gfx_init_plane_horisontal2::@3
gfx_init_plane_horisontal2::@3: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@2
  [412] gfx_init_plane_horisontal2::ay#1 = ++ gfx_init_plane_horisontal2::ay#4
  [413] if(gfx_init_plane_horisontal2::ay#1!=$c8) goto gfx_init_plane_horisontal2::@1
  to:gfx_init_plane_horisontal2::@4
gfx_init_plane_horisontal2::@4: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3
  [414] phi()
  [415] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@return
gfx_init_plane_horisontal2::@return: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@4
  [416] return 
  to:@return

void gfx_init_plane_vertical2()
gfx_init_plane_vertical2: scope:[gfx_init_plane_vertical2]  from gfx_init::@12
  [417] phi()
  [418] call gfx_init_plane_fill 
  to:gfx_init_plane_vertical2::@return
gfx_init_plane_vertical2::@return: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2
  [419] return 
  to:@return

void gfx_init_plane_blank()
gfx_init_plane_blank: scope:[gfx_init_plane_blank]  from gfx_init::@13
  [420] phi()
  [421] call gfx_init_plane_fill 
  to:gfx_init_plane_blank::@return
gfx_init_plane_blank::@return: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank
  [422] return 
  to:@return

void gfx_init_plane_full()
gfx_init_plane_full: scope:[gfx_init_plane_full]  from gfx_init::@14
  [423] phi()
  [424] call gfx_init_plane_fill 
  to:gfx_init_plane_full::@return
gfx_init_plane_full::@return: scope:[gfx_init_plane_full]  from gfx_init_plane_full
  [425] return 
  to:@return

void print_set_screen(byte* print_set_screen::screen)
print_set_screen: scope:[print_set_screen]  from form_mode form_mode::@10
  [426] print_set_screen::screen#2 = phi( form_mode/COLS, form_mode::@10/FORM_SCREEN )
  [427] print_screen#0 = print_set_screen::screen#2
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  [428] return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from form_mode::@11 form_mode::@8
  [429] memset::str#0 = (void*)print_screen#0
  [430] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [431] return 
  to:@return

void print_str_lines(byte* print_str_lines::str)
print_str_lines: scope:[print_str_lines]  from form_mode::@12 form_mode::@9
  [432] print_str_lines::str#5 = phi( form_mode::@12/FORM_TEXT, form_mode::@9/FORM_COLS )
  [433] print_char_cursor#72 = print_screen#0
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@6
  [434] print_line_cursor#1 = phi( print_str_lines/print_screen#0, print_str_lines::@6/print_line_cursor#2 )
  [434] print_char_cursor#2 = phi( print_str_lines/print_char_cursor#72, print_str_lines::@6/print_char_cursor#73 )
  [434] print_str_lines::str#3 = phi( print_str_lines/print_str_lines::str#5, print_str_lines::@6/print_str_lines::str#0 )
  [435] if(0!=*print_str_lines::str#3) goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  [436] return 
  to:@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@3
  [437] print_char_cursor#43 = phi( print_str_lines::@1/print_char_cursor#2, print_str_lines::@3/print_char_cursor#44 )
  [437] print_str_lines::str#4 = phi( print_str_lines::@1/print_str_lines::str#3, print_str_lines::@3/print_str_lines::str#0 )
  [438] print_str_lines::ch#0 = *print_str_lines::str#4
  [439] print_str_lines::str#0 = ++ print_str_lines::str#4
  [440] if(0==print_str_lines::ch#0) goto print_str_lines::@3
  to:print_str_lines::@4
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2
  [441] print_char::ch#0 = print_str_lines::ch#0
  [442] call print_char 
  to:print_str_lines::@3
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@4
  [443] print_char_cursor#44 = phi( print_str_lines::@2/print_char_cursor#43, print_str_lines::@4/print_char_cursor#29 )
  [444] if(0!=print_str_lines::ch#0) goto print_str_lines::@2
  to:print_str_lines::@5
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@3
  [445] phi()
  [446] call print_ln 
  to:print_str_lines::@6
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@5
  [447] print_char_cursor#73 = print_line_cursor#2
  to:print_str_lines::@1

void form_set_screen(byte* form_set_screen::screen)
form_set_screen: scope:[form_set_screen]  from form_mode::@13
  [448] phi()
  to:form_set_screen::@1
form_set_screen::@1: scope:[form_set_screen]  from form_set_screen form_set_screen::@1
  [449] form_set_screen::y#2 = phi( form_set_screen/0, form_set_screen::@1/form_set_screen::y#1 )
  [449] form_set_screen::line#2 = phi( form_set_screen/FORM_SCREEN, form_set_screen::@1/form_set_screen::line#1 )
  [450] form_set_screen::$0 = < form_set_screen::line#2
  [451] form_line_lo[form_set_screen::y#2] = form_set_screen::$0
  [452] form_set_screen::$1 = > form_set_screen::line#2
  [453] form_line_hi[form_set_screen::y#2] = form_set_screen::$1
  [454] form_set_screen::line#1 = form_set_screen::line#2 + $28
  [455] form_set_screen::y#1 = ++ form_set_screen::y#2
  [456] if(form_set_screen::y#1!=$19) goto form_set_screen::@1
  to:form_set_screen::@return
form_set_screen::@return: scope:[form_set_screen]  from form_set_screen::@1
  [457] return 
  to:@return

void form_render_values()
form_render_values: scope:[form_render_values]  from form_mode::@14 form_mode::@18
  [458] phi()
  to:form_render_values::@1
form_render_values::@1: scope:[form_render_values]  from form_render_values form_render_values::@3
  [459] form_render_values::idx#2 = phi( form_render_values/0, form_render_values::@3/form_render_values::idx#1 )
  [460] if(form_render_values::idx#2<form_fields_cnt) goto form_render_values::@2
  to:form_render_values::@return
form_render_values::@return: scope:[form_render_values]  from form_render_values::@1
  [461] return 
  to:@return
form_render_values::@2: scope:[form_render_values]  from form_render_values::@1
  [462] form_field_ptr::field_idx#0 = form_render_values::idx#2
  [463] call form_field_ptr 
  to:form_render_values::@3
form_render_values::@3: scope:[form_render_values]  from form_render_values::@2
  [464] ((byte*)form_field_ptr::line#0)[form_field_ptr::x#0] = print_hextab[form_fields_val[form_render_values::idx#2]]
  [465] form_render_values::idx#1 = ++ form_render_values::idx#2
  to:form_render_values::@1

void render_preset_name(byte render_preset_name::idx)
render_preset_name: scope:[render_preset_name]  from form_mode::@15 form_mode::@19
  [466] render_preset_name::idx#10 = phi( form_mode::@15/render_preset_name::idx#0, form_mode::@19/render_preset_name::idx#1 )
  [467] if(render_preset_name::idx#10==0) goto render_preset_name::@2
  to:render_preset_name::@3
render_preset_name::@3: scope:[render_preset_name]  from render_preset_name
  [468] if(render_preset_name::idx#10==1) goto render_preset_name::@2
  to:render_preset_name::@4
render_preset_name::@4: scope:[render_preset_name]  from render_preset_name::@3
  [469] if(render_preset_name::idx#10==2) goto render_preset_name::@2
  to:render_preset_name::@5
render_preset_name::@5: scope:[render_preset_name]  from render_preset_name::@4
  [470] if(render_preset_name::idx#10==3) goto render_preset_name::@2
  to:render_preset_name::@6
render_preset_name::@6: scope:[render_preset_name]  from render_preset_name::@5
  [471] if(render_preset_name::idx#10==4) goto render_preset_name::@2
  to:render_preset_name::@7
render_preset_name::@7: scope:[render_preset_name]  from render_preset_name::@6
  [472] if(render_preset_name::idx#10==5) goto render_preset_name::@2
  to:render_preset_name::@8
render_preset_name::@8: scope:[render_preset_name]  from render_preset_name::@7
  [473] if(render_preset_name::idx#10==6) goto render_preset_name::@2
  to:render_preset_name::@9
render_preset_name::@9: scope:[render_preset_name]  from render_preset_name::@8
  [474] if(render_preset_name::idx#10==7) goto render_preset_name::@2
  to:render_preset_name::@10
render_preset_name::@10: scope:[render_preset_name]  from render_preset_name::@9
  [475] if(render_preset_name::idx#10==8) goto render_preset_name::@2
  to:render_preset_name::@11
render_preset_name::@11: scope:[render_preset_name]  from render_preset_name::@10
  [476] if(render_preset_name::idx#10==9) goto render_preset_name::@2
  to:render_preset_name::@12
render_preset_name::@12: scope:[render_preset_name]  from render_preset_name::@11
  [477] if(render_preset_name::idx#10==$a) goto render_preset_name::@1
  to:render_preset_name::@2
render_preset_name::@1: scope:[render_preset_name]  from render_preset_name::@12
  [478] phi()
  to:render_preset_name::@2
render_preset_name::@2: scope:[render_preset_name]  from render_preset_name render_preset_name::@1 render_preset_name::@10 render_preset_name::@11 render_preset_name::@12 render_preset_name::@3 render_preset_name::@4 render_preset_name::@5 render_preset_name::@6 render_preset_name::@7 render_preset_name::@8 render_preset_name::@9
  [479] render_preset_name::name#13 = phi( render_preset_name/render_preset_name::name#1, render_preset_name::@11/render_preset_name::name#10, render_preset_name::@1/render_preset_name::name#11, render_preset_name::@3/render_preset_name::name#2, render_preset_name::@12/render_preset_name::name#1, render_preset_name::@4/render_preset_name::name#3, render_preset_name::@5/render_preset_name::name#4, render_preset_name::@6/render_preset_name::name#5, render_preset_name::@7/render_preset_name::name#6, render_preset_name::@8/render_preset_name::name#7, render_preset_name::@9/render_preset_name::name#8, render_preset_name::@10/render_preset_name::name#9 )
  [480] print_str_at::str#1 = render_preset_name::name#13
  [481] call print_str_at 
  to:render_preset_name::@return
render_preset_name::@return: scope:[render_preset_name]  from render_preset_name::@2
  [482] return 
  to:@return

byte form_control()
form_control: scope:[form_control]  from form_mode::@5
  [483] form_field_ptr::field_idx#1 = form_field_idx#30
  [484] call form_field_ptr 
  [485] form_field_ptr::return#3 = form_field_ptr::return#0
  to:form_control::@18
form_control::@18: scope:[form_control]  from form_control
  [486] form_control::field#0 = form_field_ptr::return#3
  [487] form_cursor_count#4 = -- form_cursor_count#23
  [488] if(form_cursor_count#4>=0) goto form_control::@21
  to:form_control::@1
form_control::@21: scope:[form_control]  from form_control::@18
  [489] phi()
  to:form_control::@1
form_control::@1: scope:[form_control]  from form_control::@18 form_control::@21
  [490] form_cursor_count#16 = phi( form_control::@21/form_cursor_count#4, form_control::@18/FORM_CURSOR_BLINK )
  [491] if(form_cursor_count#16<FORM_CURSOR_BLINK/2) goto form_control::@2
  to:form_control::@7
form_control::@7: scope:[form_control]  from form_control::@1
  [492] form_control::$12 = *form_control::field#0 & $7f
  [493] *form_control::field#0 = form_control::$12
  to:form_control::@3
form_control::@3: scope:[form_control]  from form_control::@2 form_control::@7
  [494] phi()
  [495] call keyboard_event_scan 
  to:form_control::@19
form_control::@19: scope:[form_control]  from form_control::@3
  [496] phi()
  [497] call keyboard_event_get 
  [498] keyboard_event_get::return#4 = keyboard_event_get::return#2
  to:form_control::@20
form_control::@20: scope:[form_control]  from form_control::@19
  [499] form_control::key_event#0 = keyboard_event_get::return#4
  [500] if(form_control::key_event#0!=KEY_CRSR_DOWN) goto form_control::@4
  to:form_control::@8
form_control::@8: scope:[form_control]  from form_control::@20
  [501] form_control::$14 = *form_control::field#0 & $7f
  [502] *form_control::field#0 = form_control::$14
  [503] form_control::$15 = keyboard_modifiers#22 & KEY_MODIFIER_SHIFT
  [504] if(form_control::$15==0) goto form_control::@13
  to:form_control::@9
form_control::@9: scope:[form_control]  from form_control::@8
  [505] form_field_idx#5 = -- form_field_idx#30
  [506] if(form_field_idx#5!=$ff) goto form_control::@22
  to:form_control::@14
form_control::@22: scope:[form_control]  from form_control::@9
  [507] phi()
  to:form_control::@14
form_control::@14: scope:[form_control]  from form_control::@13 form_control::@22 form_control::@23 form_control::@9
  [508] form_field_idx#33 = phi( form_control::@22/form_field_idx#5, form_control::@9/form_fields_cnt-1, form_control::@23/form_field_idx#4, form_control::@13/0 )
  to:form_control::@return
form_control::@return: scope:[form_control]  from form_control::@14 form_control::@16 form_control::@5 form_control::@6
  [509] form_field_idx#19 = phi( form_control::@5/form_field_idx#30, form_control::@14/form_field_idx#33, form_control::@16/form_field_idx#30, form_control::@6/form_field_idx#30 )
  [509] form_cursor_count#17 = phi( form_control::@5/form_cursor_count#16, form_control::@14/FORM_CURSOR_BLINK/2, form_control::@16/form_cursor_count#16, form_control::@6/form_cursor_count#16 )
  [509] form_control::return#2 = phi( form_control::@5/$ff, form_control::@14/0, form_control::@16/0, form_control::@6/0 )
  [510] return 
  to:@return
form_control::@13: scope:[form_control]  from form_control::@8
  [511] form_field_idx#4 = ++ form_field_idx#30
  [512] if(form_field_idx#4!=form_fields_cnt) goto form_control::@23
  to:form_control::@14
form_control::@23: scope:[form_control]  from form_control::@13
  [513] phi()
  to:form_control::@14
form_control::@4: scope:[form_control]  from form_control::@20
  [514] if(form_control::key_event#0!=KEY_CRSR_RIGHT) goto form_control::@5
  to:form_control::@10
form_control::@10: scope:[form_control]  from form_control::@4
  [515] form_control::$22 = keyboard_modifiers#22 & KEY_MODIFIER_SHIFT
  [516] if(form_control::$22==0) goto form_control::@15
  to:form_control::@11
form_control::@11: scope:[form_control]  from form_control::@10
  [517] form_fields_val[form_field_idx#30] = -- form_fields_val[form_field_idx#30]
  [518] if(form_fields_val[form_field_idx#30]!=$ff) goto form_control::@16
  to:form_control::@12
form_control::@12: scope:[form_control]  from form_control::@11
  [519] form_fields_val[form_field_idx#30] = form_fields_max[form_field_idx#30]
  to:form_control::@16
form_control::@16: scope:[form_control]  from form_control::@11 form_control::@12 form_control::@15 form_control::@17
  [520] *form_control::field#0 = print_hextab[form_fields_val[form_field_idx#30]]
  to:form_control::@return
form_control::@15: scope:[form_control]  from form_control::@10
  [521] form_fields_val[form_field_idx#30] = ++ form_fields_val[form_field_idx#30]
  [522] if(form_fields_val[form_field_idx#30]<=form_fields_max[form_field_idx#30]) goto form_control::@16
  to:form_control::@17
form_control::@17: scope:[form_control]  from form_control::@15
  [523] form_fields_val[form_field_idx#30] = 0
  to:form_control::@16
form_control::@5: scope:[form_control]  from form_control::@4
  [524] if(form_control::key_event#0!=KEY_SPACE) goto form_control::@6
  to:form_control::@return
form_control::@6: scope:[form_control]  from form_control::@5
  [525] phi()
  to:form_control::@return
form_control::@2: scope:[form_control]  from form_control::@1
  [526] form_control::$13 = *form_control::field#0 | $80
  [527] *form_control::field#0 = form_control::$13
  to:form_control::@3

void apply_preset(byte apply_preset::idx)
apply_preset: scope:[apply_preset]  from form_mode::@7
  [528] if(apply_preset::idx#0==0) goto apply_preset::@2
  to:apply_preset::@3
apply_preset::@3: scope:[apply_preset]  from apply_preset
  [529] if(apply_preset::idx#0==1) goto apply_preset::@2
  to:apply_preset::@4
apply_preset::@4: scope:[apply_preset]  from apply_preset::@3
  [530] if(apply_preset::idx#0==2) goto apply_preset::@2
  to:apply_preset::@5
apply_preset::@5: scope:[apply_preset]  from apply_preset::@4
  [531] if(apply_preset::idx#0==3) goto apply_preset::@2
  to:apply_preset::@6
apply_preset::@6: scope:[apply_preset]  from apply_preset::@5
  [532] if(apply_preset::idx#0==4) goto apply_preset::@2
  to:apply_preset::@7
apply_preset::@7: scope:[apply_preset]  from apply_preset::@6
  [533] if(apply_preset::idx#0==5) goto apply_preset::@2
  to:apply_preset::@8
apply_preset::@8: scope:[apply_preset]  from apply_preset::@7
  [534] if(apply_preset::idx#0==6) goto apply_preset::@2
  to:apply_preset::@9
apply_preset::@9: scope:[apply_preset]  from apply_preset::@8
  [535] if(apply_preset::idx#0==7) goto apply_preset::@2
  to:apply_preset::@10
apply_preset::@10: scope:[apply_preset]  from apply_preset::@9
  [536] if(apply_preset::idx#0==8) goto apply_preset::@2
  to:apply_preset::@11
apply_preset::@11: scope:[apply_preset]  from apply_preset::@10
  [537] if(apply_preset::idx#0==9) goto apply_preset::@2
  to:apply_preset::@12
apply_preset::@12: scope:[apply_preset]  from apply_preset::@11
  [538] if(apply_preset::idx#0==$a) goto apply_preset::@1
  to:apply_preset::@2
apply_preset::@1: scope:[apply_preset]  from apply_preset::@12
  [539] phi()
  to:apply_preset::@2
apply_preset::@2: scope:[apply_preset]  from apply_preset apply_preset::@1 apply_preset::@10 apply_preset::@11 apply_preset::@12 apply_preset::@3 apply_preset::@4 apply_preset::@5 apply_preset::@6 apply_preset::@7 apply_preset::@8 apply_preset::@9
  [540] apply_preset::preset#15 = phi( apply_preset/preset_stdchar, apply_preset::@11/preset_sixsfred2, apply_preset::@1/preset_8bpppixelcell, apply_preset::@3/preset_ecmchar, apply_preset::@12/preset_stdchar, apply_preset::@4/preset_stdbm, apply_preset::@5/preset_mcbm, apply_preset::@6/preset_hi_stdchar, apply_preset::@7/preset_hi_ecmchar, apply_preset::@8/preset_twoplane, apply_preset::@9/preset_chunky, apply_preset::@10/preset_sixsfred )
  to:apply_preset::@13
apply_preset::@13: scope:[apply_preset]  from apply_preset::@14 apply_preset::@2
  [541] apply_preset::i#2 = phi( apply_preset::@2/0, apply_preset::@14/apply_preset::i#1 )
  [542] if(apply_preset::i#2!=form_fields_cnt) goto apply_preset::@14
  to:apply_preset::@return
apply_preset::@return: scope:[apply_preset]  from apply_preset::@13
  [543] return 
  to:@return
apply_preset::@14: scope:[apply_preset]  from apply_preset::@13
  [544] form_fields_val[apply_preset::i#2] = apply_preset::preset#15[apply_preset::i#2]
  [545] apply_preset::i#1 = ++ apply_preset::i#2
  to:apply_preset::@13

dword get_plane(byte get_plane::idx)
get_plane: scope:[get_plane]  from gfx_mode::@27 gfx_mode::@9
  [546] get_plane::idx#10 = phi( gfx_mode::@27/get_plane::idx#1, gfx_mode::@9/get_plane::idx#0 )
  [547] if(get_plane::idx#10==0) goto get_plane::@return
  to:get_plane::@2
get_plane::@2: scope:[get_plane]  from get_plane
  [548] if(get_plane::idx#10==1) goto get_plane::@return
  to:get_plane::@3
get_plane::@3: scope:[get_plane]  from get_plane::@2
  [549] if(get_plane::idx#10==2) goto get_plane::@return
  to:get_plane::@4
get_plane::@4: scope:[get_plane]  from get_plane::@3
  [550] if(get_plane::idx#10==3) goto get_plane::@return
  to:get_plane::@5
get_plane::@5: scope:[get_plane]  from get_plane::@4
  [551] if(get_plane::idx#10==4) goto get_plane::@return
  to:get_plane::@6
get_plane::@6: scope:[get_plane]  from get_plane::@5
  [552] if(get_plane::idx#10==5) goto get_plane::@return
  to:get_plane::@7
get_plane::@7: scope:[get_plane]  from get_plane::@6
  [553] if(get_plane::idx#10==6) goto get_plane::@return
  to:get_plane::@8
get_plane::@8: scope:[get_plane]  from get_plane::@7
  [554] if(get_plane::idx#10==7) goto get_plane::@return
  to:get_plane::@9
get_plane::@9: scope:[get_plane]  from get_plane::@8
  [555] if(get_plane::idx#10==8) goto get_plane::@return
  to:get_plane::@10
get_plane::@10: scope:[get_plane]  from get_plane::@9
  [556] if(get_plane::idx#10==9) goto get_plane::@return
  to:get_plane::@11
get_plane::@11: scope:[get_plane]  from get_plane::@10
  [557] if(get_plane::idx#10==$a) goto get_plane::@return
  to:get_plane::@12
get_plane::@12: scope:[get_plane]  from get_plane::@11
  [558] if(get_plane::idx#10==$b) goto get_plane::@return
  to:get_plane::@13
get_plane::@13: scope:[get_plane]  from get_plane::@12
  [559] if(get_plane::idx#10==$c) goto get_plane::@return
  to:get_plane::@14
get_plane::@14: scope:[get_plane]  from get_plane::@13
  [560] if(get_plane::idx#10!=$d) goto get_plane::@1
  to:get_plane::@return
get_plane::@1: scope:[get_plane]  from get_plane::@14
  [561] phi()
  to:get_plane::@return
get_plane::@return: scope:[get_plane]  from get_plane get_plane::@1 get_plane::@10 get_plane::@11 get_plane::@12 get_plane::@13 get_plane::@14 get_plane::@2 get_plane::@3 get_plane::@4 get_plane::@5 get_plane::@6 get_plane::@7 get_plane::@8 get_plane::@9
  [562] get_plane::return#14 = phi( get_plane/(dword)VICII_SCREEN0, get_plane::@10/PLANE_HORISONTAL2, get_plane::@11/PLANE_VERTICAL2, get_plane::@12/PLANE_CHARSET8, get_plane::@13/PLANE_BLANK, get_plane::@1/(dword)VICII_SCREEN0, get_plane::@2/(dword)VICII_SCREEN1, get_plane::@14/PLANE_FULL, get_plane::@3/(dword)VICII_SCREEN2, get_plane::@4/(dword)VICII_SCREEN3, get_plane::@5/(dword)VICII_BITMAP, get_plane::@6/(dword)VICII_CHARSET_ROM, get_plane::@7/PLANE_8BPP_CHUNKY, get_plane::@8/PLANE_HORISONTAL, get_plane::@9/PLANE_VERTICAL )
  [563] return 
  to:@return

byte* get_VICII_screen(byte get_VICII_screen::idx)
get_VICII_screen: scope:[get_VICII_screen]  from gfx_mode::@28 gfx_mode::@30
  [564] get_VICII_screen::idx#2 = phi( gfx_mode::@28/get_VICII_screen::idx#0, gfx_mode::@30/get_VICII_screen::idx#1 )
  [565] if(get_VICII_screen::idx#2==0) goto get_VICII_screen::@return
  to:get_VICII_screen::@2
get_VICII_screen::@2: scope:[get_VICII_screen]  from get_VICII_screen
  [566] if(get_VICII_screen::idx#2==1) goto get_VICII_screen::@return
  to:get_VICII_screen::@3
get_VICII_screen::@3: scope:[get_VICII_screen]  from get_VICII_screen::@2
  [567] if(get_VICII_screen::idx#2==2) goto get_VICII_screen::@return
  to:get_VICII_screen::@4
get_VICII_screen::@4: scope:[get_VICII_screen]  from get_VICII_screen::@3
  [568] if(get_VICII_screen::idx#2==3) goto get_VICII_screen::@return
  to:get_VICII_screen::@5
get_VICII_screen::@5: scope:[get_VICII_screen]  from get_VICII_screen::@4
  [569] if(get_VICII_screen::idx#2!=4) goto get_VICII_screen::@1
  to:get_VICII_screen::@return
get_VICII_screen::@1: scope:[get_VICII_screen]  from get_VICII_screen::@5
  [570] phi()
  to:get_VICII_screen::@return
get_VICII_screen::@return: scope:[get_VICII_screen]  from get_VICII_screen get_VICII_screen::@1 get_VICII_screen::@2 get_VICII_screen::@3 get_VICII_screen::@4 get_VICII_screen::@5
  [571] get_VICII_screen::return#5 = phi( get_VICII_screen/VICII_SCREEN0, get_VICII_screen::@5/VICII_SCREEN4, get_VICII_screen::@2/VICII_SCREEN1, get_VICII_screen::@3/VICII_SCREEN2, get_VICII_screen::@4/VICII_SCREEN3, get_VICII_screen::@1/VICII_SCREEN0 )
  [572] return 
  to:@return

byte* get_VICII_charset(byte get_VICII_charset::idx)
get_VICII_charset: scope:[get_VICII_charset]  from gfx_mode::@29
  [573] if(get_VICII_charset::idx#0==0) goto get_VICII_charset::@return
  to:get_VICII_charset::@2
get_VICII_charset::@2: scope:[get_VICII_charset]  from get_VICII_charset
  [574] if(get_VICII_charset::idx#0!=1) goto get_VICII_charset::@1
  to:get_VICII_charset::@return
get_VICII_charset::@1: scope:[get_VICII_charset]  from get_VICII_charset::@2
  [575] phi()
  to:get_VICII_charset::@return
get_VICII_charset::@return: scope:[get_VICII_charset]  from get_VICII_charset get_VICII_charset::@1 get_VICII_charset::@2
  [576] get_VICII_charset::return#2 = phi( get_VICII_charset/VICII_CHARSET_ROM, get_VICII_charset::@1/VICII_CHARSET_ROM, get_VICII_charset::@2/VICII_BITMAP )
  [577] return 
  to:@return

void keyboard_event_scan()
keyboard_event_scan: scope:[keyboard_event_scan]  from form_control::@3 gfx_mode::@26
  [578] keyboard_events_size#98 = phi( form_control::@3/keyboard_events_size#49, gfx_mode::@26/keyboard_events_size#25 )
  to:keyboard_event_scan::@7
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@8
  [579] keyboard_events_size#107 = phi( keyboard_event_scan/keyboard_events_size#98, keyboard_event_scan::@8/keyboard_events_size#100 )
  [579] keyboard_event_scan::keycode#11 = phi( keyboard_event_scan/0, keyboard_event_scan::@8/keyboard_event_scan::keycode#13 )
  [579] keyboard_event_scan::row#2 = phi( keyboard_event_scan/0, keyboard_event_scan::@8/keyboard_event_scan::row#1 )
  [580] keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2
  [581] call keyboard_matrix_read 
  [582] keyboard_matrix_read::return#2 = keyboard_matrix_read::return#0
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@7
  [583] keyboard_event_scan::row_scan#0 = keyboard_matrix_read::return#2
  [584] if(keyboard_event_scan::row_scan#0!=keyboard_scan_values[keyboard_event_scan::row#2]) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@19
  [585] keyboard_event_scan::keycode#1 = keyboard_event_scan::keycode#11 + 8
  to:keyboard_event_scan::@8
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@16
  [586] keyboard_events_size#100 = phi( keyboard_event_scan::@15/keyboard_events_size#106, keyboard_event_scan::@16/keyboard_events_size#107 )
  [586] keyboard_event_scan::keycode#13 = phi( keyboard_event_scan::@15/keyboard_event_scan::keycode#14, keyboard_event_scan::@16/keyboard_event_scan::keycode#1 )
  [587] keyboard_event_scan::row#1 = ++ keyboard_event_scan::row#2
  [588] if(keyboard_event_scan::row#1!=8) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@8
  [589] phi()
  [590] call keyboard_event_pressed 
  [591] keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  [592] keyboard_event_scan::$0 = keyboard_event_pressed::return#0
  [593] if(keyboard_event_scan::$0==0) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@18
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [594] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@18 keyboard_event_scan::@20
  [595] keyboard_modifiers#19 = phi( keyboard_event_scan::@18/KEY_MODIFIER_LSHIFT, keyboard_event_scan::@20/0 )
  [596] call keyboard_event_pressed 
  [597] keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [598] keyboard_event_scan::$3 = keyboard_event_pressed::return#1
  [599] if(keyboard_event_scan::$3==0) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@4
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@21
  [600] keyboard_modifiers#2 = keyboard_modifiers#19 | KEY_MODIFIER_RSHIFT
  to:keyboard_event_scan::@2
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@4
  [601] keyboard_modifiers#20 = phi( keyboard_event_scan::@21/keyboard_modifiers#19, keyboard_event_scan::@4/keyboard_modifiers#2 )
  [602] call keyboard_event_pressed 
  [603] keyboard_event_pressed::return#2 = keyboard_event_pressed::return#10
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  [604] keyboard_event_scan::$6 = keyboard_event_pressed::return#2
  [605] if(keyboard_event_scan::$6==0) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@22
  [606] keyboard_modifiers#3 = keyboard_modifiers#20 | KEY_MODIFIER_CTRL
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@5
  [607] keyboard_modifiers#21 = phi( keyboard_event_scan::@22/keyboard_modifiers#20, keyboard_event_scan::@5/keyboard_modifiers#3 )
  [608] call keyboard_event_pressed 
  [609] keyboard_event_pressed::return#3 = keyboard_event_pressed::return#10
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [610] keyboard_event_scan::$9 = keyboard_event_pressed::return#3
  [611] if(keyboard_event_scan::$9==0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@6
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  [612] keyboard_modifiers#4 = keyboard_modifiers#21 | KEY_MODIFIER_COMMODORE
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@6
  [613] keyboard_modifiers#22 = phi( keyboard_event_scan::@23/keyboard_modifiers#21, keyboard_event_scan::@6/keyboard_modifiers#4 )
  [614] return 
  to:@return
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@10 keyboard_event_scan::@19
  [615] keyboard_events_size#19 = phi( keyboard_event_scan::@10/keyboard_events_size#106, keyboard_event_scan::@19/keyboard_events_size#107 )
  [615] keyboard_event_scan::keycode#10 = phi( keyboard_event_scan::@10/keyboard_event_scan::keycode#14, keyboard_event_scan::@19/keyboard_event_scan::keycode#11 )
  [615] keyboard_event_scan::col#2 = phi( keyboard_event_scan::@10/keyboard_event_scan::col#1, keyboard_event_scan::@19/0 )
  [616] keyboard_event_scan::$15 = keyboard_event_scan::row_scan#0 ^ keyboard_scan_values[keyboard_event_scan::row#2]
  [617] keyboard_event_scan::$16 = keyboard_event_scan::$15 & keyboard_matrix_col_bitmask[keyboard_event_scan::col#2]
  [618] if(keyboard_event_scan::$16==0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@12
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [619] if(keyboard_events_size#19==8) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@12
  [620] keyboard_event_scan::event_type#0 = keyboard_event_scan::row_scan#0 & keyboard_matrix_col_bitmask[keyboard_event_scan::col#2]
  [621] if(keyboard_event_scan::event_type#0==0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@14
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [622] keyboard_events[keyboard_events_size#19] = keyboard_event_scan::keycode#10
  [623] keyboard_events_size#1 = ++ keyboard_events_size#19
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9
  [624] keyboard_events_size#106 = phi( keyboard_event_scan::@9/keyboard_events_size#19, keyboard_event_scan::@11/keyboard_events_size#0, keyboard_event_scan::@12/keyboard_events_size#19, keyboard_event_scan::@14/keyboard_events_size#1 )
  [625] keyboard_event_scan::keycode#14 = ++ keyboard_event_scan::keycode#10
  [626] keyboard_event_scan::col#1 = ++ keyboard_event_scan::col#2
  [627] if(keyboard_event_scan::col#1!=8) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [628] keyboard_scan_values[keyboard_event_scan::row#2] = keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@8
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [629] keyboard_event_scan::$23 = keyboard_event_scan::keycode#10 | $40
  [630] keyboard_events[keyboard_events_size#19] = keyboard_event_scan::$23
  [631] keyboard_events_size#0 = ++ keyboard_events_size#19
  to:keyboard_event_scan::@10

byte keyboard_event_get()
keyboard_event_get: scope:[keyboard_event_get]  from form_control::@19 gfx_mode::@32
  [632] if(keyboard_events_size#100==0) goto keyboard_event_get::@return
  to:keyboard_event_get::@1
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  [633] keyboard_events_size#3 = -- keyboard_events_size#100
  [634] keyboard_event_get::return#1 = keyboard_events[keyboard_events_size#3]
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@1
  [635] keyboard_events_size#25 = phi( keyboard_event_get/keyboard_events_size#100, keyboard_event_get::@1/keyboard_events_size#3 )
  [635] keyboard_event_get::return#2 = phi( keyboard_event_get/$ff, keyboard_event_get::@1/keyboard_event_get::return#1 )
  [636] return 
  to:@return

void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
bitmap_init: scope:[bitmap_init]  from gfx_init_VICII_bitmap
  [637] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [638] bitmap_init::x#2 = phi( bitmap_init/0, bitmap_init::@2/bitmap_init::x#1 )
  [638] bitmap_init::bits#3 = phi( bitmap_init/$80, bitmap_init::@2/bitmap_init::bits#4 )
  [639] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  [640] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
  [641] if(bitmap_init::bits#1!=0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [642] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [643] bitmap_init::bits#4 = phi( bitmap_init::@6/bitmap_init::bits#1, bitmap_init::@1/$80 )
  [644] bitmap_init::x#1 = ++ bitmap_init::x#2
  [645] if(bitmap_init::x#1!=0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [646] bitmap_init::yoffs#2 = phi( bitmap_init::@2/VICII_BITMAP, bitmap_init::@4/bitmap_init::yoffs#4 )
  [646] bitmap_init::y#2 = phi( bitmap_init::@2/0, bitmap_init::@4/bitmap_init::y#1 )
  [647] bitmap_init::$7 = bitmap_init::y#2 & 7
  [648] bitmap_init::$4 = < bitmap_init::yoffs#2
  [649] bitmap_init::$5 = bitmap_init::$7 | bitmap_init::$4
  [650] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5
  [651] bitmap_init::$6 = > bitmap_init::yoffs#2
  [652] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6
  [653] if(bitmap_init::$7!=7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [654] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [655] bitmap_init::yoffs#4 = phi( bitmap_init::@3/bitmap_init::yoffs#2, bitmap_init::@5/bitmap_init::yoffs#1 )
  [656] bitmap_init::y#1 = ++ bitmap_init::y#2
  [657] if(bitmap_init::y#1!=0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [658] return 
  to:@return

void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
bitmap_clear: scope:[bitmap_clear]  from gfx_init_VICII_bitmap::@3
  [659] phi()
  [660] call memset 
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  [661] phi()
  [662] call memset 
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@1
  [663] return 
  to:@return

void bitmap_line(word bitmap_line::x1 , word bitmap_line::y1 , word bitmap_line::x2 , word bitmap_line::y2)
bitmap_line: scope:[bitmap_line]  from gfx_init_VICII_bitmap::@2
  [664] abs_u16::w#0 = bitmap_line::x2#0 - bitmap_line::x1#0
  [665] call abs_u16 
  [666] abs_u16::return#0 = abs_u16::return#4
  to:bitmap_line::@12
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line
  [667] bitmap_line::dx#0 = abs_u16::return#0
  [668] abs_u16::w#1 = bitmap_line::y2#0 - bitmap_line::y1#0
  [669] call abs_u16 
  [670] abs_u16::return#1 = abs_u16::return#4
  to:bitmap_line::@13
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@12
  [671] bitmap_line::dy#0 = abs_u16::return#1
  [672] if(bitmap_line::dx#0!=0) goto bitmap_line::@1
  to:bitmap_line::@18
bitmap_line::@18: scope:[bitmap_line]  from bitmap_line::@13
  [673] if(bitmap_line::dy#0==0) goto bitmap_line::@4
  to:bitmap_line::@1
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line::@13 bitmap_line::@18
  [674] sgn_u16::w#0 = bitmap_line::x2#0 - bitmap_line::x1#0
  [675] call sgn_u16 
  [676] sgn_u16::return#0 = sgn_u16::return#4
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@1
  [677] bitmap_line::sx#0 = sgn_u16::return#0
  [678] sgn_u16::w#1 = bitmap_line::y2#0 - bitmap_line::y1#0
  [679] call sgn_u16 
  [680] sgn_u16::return#1 = sgn_u16::return#4
  to:bitmap_line::@15
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line::@14
  [681] bitmap_line::sy#0 = sgn_u16::return#1
  [682] if(bitmap_line::dx#0>bitmap_line::dy#0) goto bitmap_line::@2
  to:bitmap_line::@5
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@15
  [683] bitmap_line::e#0 = bitmap_line::dx#0 >> 1
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5 bitmap_line::@7
  [684] bitmap_line::e#3 = phi( bitmap_line::@5/bitmap_line::e#0, bitmap_line::@7/bitmap_line::e#6 )
  [684] bitmap_line::y#4 = phi( bitmap_line::@5/bitmap_line::y1#0, bitmap_line::@7/bitmap_line::y#1 )
  [684] bitmap_line::x#13 = phi( bitmap_line::@5/bitmap_line::x1#0, bitmap_line::@7/bitmap_line::x#12 )
  [685] bitmap_plot::x#1 = bitmap_line::x#13
  [686] bitmap_plot::y#1 = (byte)bitmap_line::y#4
  [687] call bitmap_plot 
  to:bitmap_line::@16
bitmap_line::@16: scope:[bitmap_line]  from bitmap_line::@6
  [688] bitmap_line::y#1 = bitmap_line::y#4 + bitmap_line::sy#0
  [689] bitmap_line::e#1 = bitmap_line::e#3 + bitmap_line::dx#0
  [690] if(bitmap_line::dy#0>=bitmap_line::e#1) goto bitmap_line::@7
  to:bitmap_line::@8
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@16
  [691] bitmap_line::x#1 = bitmap_line::x#13 + bitmap_line::sx#0
  [692] bitmap_line::e#2 = bitmap_line::e#1 - bitmap_line::dy#0
  to:bitmap_line::@7
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@16 bitmap_line::@8
  [693] bitmap_line::e#6 = phi( bitmap_line::@16/bitmap_line::e#1, bitmap_line::@8/bitmap_line::e#2 )
  [693] bitmap_line::x#12 = phi( bitmap_line::@16/bitmap_line::x#13, bitmap_line::@8/bitmap_line::x#1 )
  [694] if(bitmap_line::y#1!=bitmap_line::y2#0) goto bitmap_line::@6
  to:bitmap_line::@3
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@7
  [695] bitmap_line::y#7 = phi( bitmap_line::@10/bitmap_line::y#13, bitmap_line::@7/bitmap_line::y#1 )
  [695] bitmap_line::x#6 = phi( bitmap_line::@10/bitmap_line::x#15, bitmap_line::@7/bitmap_line::x#12 )
  [696] bitmap_plot::x#2 = bitmap_line::x#6
  [697] bitmap_plot::y#2 = (byte)bitmap_line::y#7
  [698] call bitmap_plot 
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@3 bitmap_line::@4
  [699] return 
  to:@return
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line::@15
  [700] bitmap_line::e1#0 = bitmap_line::dy#0 >> 1
  to:bitmap_line::@9
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@2
  [701] bitmap_line::e1#3 = phi( bitmap_line::@10/bitmap_line::e1#6, bitmap_line::@2/bitmap_line::e1#0 )
  [701] bitmap_line::y#15 = phi( bitmap_line::@10/bitmap_line::y#13, bitmap_line::@2/bitmap_line::y1#0 )
  [701] bitmap_line::x#7 = phi( bitmap_line::@10/bitmap_line::x#15, bitmap_line::@2/bitmap_line::x1#0 )
  [702] bitmap_plot::x#3 = bitmap_line::x#7
  [703] bitmap_plot::y#3 = (byte)bitmap_line::y#15
  [704] call bitmap_plot 
  to:bitmap_line::@17
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@9
  [705] bitmap_line::x#15 = bitmap_line::x#7 + bitmap_line::sx#0
  [706] bitmap_line::e1#1 = bitmap_line::e1#3 + bitmap_line::dy#0
  [707] if(bitmap_line::dx#0>=bitmap_line::e1#1) goto bitmap_line::@10
  to:bitmap_line::@11
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@17
  [708] bitmap_line::y#2 = bitmap_line::y#15 + bitmap_line::sy#0
  [709] bitmap_line::e1#2 = bitmap_line::e1#1 - bitmap_line::dx#0
  to:bitmap_line::@10
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@11 bitmap_line::@17
  [710] bitmap_line::e1#6 = phi( bitmap_line::@11/bitmap_line::e1#2, bitmap_line::@17/bitmap_line::e1#1 )
  [710] bitmap_line::y#13 = phi( bitmap_line::@11/bitmap_line::y#2, bitmap_line::@17/bitmap_line::y#15 )
  [711] if(bitmap_line::x#15!=bitmap_line::x2#0) goto bitmap_line::@9
  to:bitmap_line::@3
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@18
  [712] bitmap_plot::x#0 = bitmap_line::x1#0
  [713] bitmap_plot::y#0 = (byte)bitmap_line::y1#0
  [714] call bitmap_plot 
  to:bitmap_line::@return

void dtvSetCpuBankSegment1(byte dtvSetCpuBankSegment1::cpuBankIdx)
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@4 gfx_init_plane_8bppchunky::@6 gfx_init_plane_charset8 gfx_init_plane_charset8::@8 gfx_init_plane_fill gfx_init_plane_fill::@4 gfx_init_plane_horisontal gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@4 gfx_init_plane_horisontal::@7 gfx_init_plane_vertical gfx_init_plane_vertical::@4
  [715] dtvSetCpuBankSegment1::cpuBankIdx#13 = phi( gfx_init_plane_8bppchunky/(byte)PLANE_8BPP_CHUNKY/$4000, gfx_init_plane_8bppchunky::@4/dtvSetCpuBankSegment1::cpuBankIdx#1, gfx_init_plane_8bppchunky::@6/(byte)$4000/$4000, gfx_init_plane_charset8/gfx_init_plane_charset8::gfxbCpuBank#0, gfx_init_plane_charset8::@8/(byte)$4000/$4000, gfx_init_plane_fill/dtvSetCpuBankSegment1::cpuBankIdx#11, gfx_init_plane_fill::@4/(byte)$4000/$4000, gfx_init_plane_horisontal/gfx_init_plane_horisontal::gfxbCpuBank#0, gfx_init_plane_horisontal2/gfx_init_plane_horisontal2::gfxbCpuBank#0, gfx_init_plane_horisontal2::@4/(byte)$4000/$4000, gfx_init_plane_horisontal::@7/(byte)$4000/$4000, gfx_init_plane_vertical/gfx_init_plane_vertical::gfxbCpuBank#0, gfx_init_plane_vertical::@4/(byte)$4000/$4000 )
  [716] *dtvSetCpuBankSegment1::cpuBank = dtvSetCpuBankSegment1::cpuBankIdx#13
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  [718] return 
  to:@return

void gfx_init_plane_fill(dword gfx_init_plane_fill::plane_addr , byte gfx_init_plane_fill::fill)
gfx_init_plane_fill: scope:[gfx_init_plane_fill]  from gfx_init_plane_blank gfx_init_plane_full gfx_init_plane_vertical2
  [719] gfx_init_plane_fill::fill#6 = phi( gfx_init_plane_blank/0, gfx_init_plane_full/$ff, gfx_init_plane_vertical2/$1b )
  [719] gfx_init_plane_fill::plane_addr#3 = phi( gfx_init_plane_blank/PLANE_BLANK, gfx_init_plane_full/PLANE_FULL, gfx_init_plane_vertical2/PLANE_VERTICAL2 )
  [720] gfx_init_plane_fill::$0 = gfx_init_plane_fill::plane_addr#3 << 2
  [721] gfx_init_plane_fill::$1 = > gfx_init_plane_fill::$0
  [722] gfx_init_plane_fill::gfxbCpuBank#0 = < gfx_init_plane_fill::$1
  [723] dtvSetCpuBankSegment1::cpuBankIdx#11 = gfx_init_plane_fill::gfxbCpuBank#0
  [724] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@5
gfx_init_plane_fill::@5: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill
  [725] gfx_init_plane_fill::$4 = < gfx_init_plane_fill::plane_addr#3
  [726] gfx_init_plane_fill::$5 = gfx_init_plane_fill::$4 & $3fff
  [727] gfx_init_plane_fill::gfxb#0 = $4000 + gfx_init_plane_fill::$5
  [728] gfx_init_plane_fill::gfxb#6 = (byte*)gfx_init_plane_fill::gfxb#0
  to:gfx_init_plane_fill::@1
gfx_init_plane_fill::@1: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3 gfx_init_plane_fill::@5
  [729] gfx_init_plane_fill::by#4 = phi( gfx_init_plane_fill::@3/gfx_init_plane_fill::by#1, gfx_init_plane_fill::@5/0 )
  [729] gfx_init_plane_fill::gfxb#3 = phi( gfx_init_plane_fill::@3/gfx_init_plane_fill::gfxb#1, gfx_init_plane_fill::@5/gfx_init_plane_fill::gfxb#6 )
  to:gfx_init_plane_fill::@2
gfx_init_plane_fill::@2: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@1 gfx_init_plane_fill::@2
  [730] gfx_init_plane_fill::bx#2 = phi( gfx_init_plane_fill::@1/0, gfx_init_plane_fill::@2/gfx_init_plane_fill::bx#1 )
  [730] gfx_init_plane_fill::gfxb#2 = phi( gfx_init_plane_fill::@1/gfx_init_plane_fill::gfxb#3, gfx_init_plane_fill::@2/gfx_init_plane_fill::gfxb#1 )
  [731] *gfx_init_plane_fill::gfxb#2 = gfx_init_plane_fill::fill#6
  [732] gfx_init_plane_fill::gfxb#1 = ++ gfx_init_plane_fill::gfxb#2
  [733] gfx_init_plane_fill::bx#1 = ++ gfx_init_plane_fill::bx#2
  [734] if(gfx_init_plane_fill::bx#1!=$28) goto gfx_init_plane_fill::@2
  to:gfx_init_plane_fill::@3
gfx_init_plane_fill::@3: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@2
  [735] gfx_init_plane_fill::by#1 = ++ gfx_init_plane_fill::by#4
  [736] if(gfx_init_plane_fill::by#1!=$c8) goto gfx_init_plane_fill::@1
  to:gfx_init_plane_fill::@4
gfx_init_plane_fill::@4: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3
  [737] phi()
  [738] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@return
gfx_init_plane_fill::@return: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@4
  [739] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1 print_cls
  [740] memset::c#5 = phi( bitmap_clear/bitmap_clear::col#0, bitmap_clear::@1/0, print_cls/' ' )
  [740] memset::str#4 = phi( bitmap_clear/(void*)VICII_SCREEN0, bitmap_clear::@1/(void*)VICII_BITMAP, print_cls/memset::str#0 )
  [740] memset::num#3 = phi( bitmap_clear/$3e8, bitmap_clear::@1/$1f40, print_cls/$3e8 )
  [741] if(memset::num#3<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [742] memset::end#0 = (byte*)memset::str#4 + memset::num#3
  [743] memset::dst#4 = (byte*)memset::str#4
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [744] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [745] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [746] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [747] *memset::dst#2 = memset::c#5
  [748] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from print_str_lines::@4
  [749] *print_char_cursor#43 = print_char::ch#0
  [750] print_char_cursor#29 = ++ print_char_cursor#43
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [751] return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from print_str_lines::@5
  [752] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [753] print_line_cursor#22 = phi( print_ln/print_line_cursor#1, print_ln::@1/print_line_cursor#2 )
  [754] print_line_cursor#2 = print_line_cursor#22 + $28
  [755] if(print_line_cursor#2<print_char_cursor#44) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [756] return 
  to:@return

byte* form_field_ptr(byte form_field_ptr::field_idx)
form_field_ptr: scope:[form_field_ptr]  from form_control form_render_values::@2
  [757] form_field_ptr::field_idx#2 = phi( form_control/form_field_ptr::field_idx#1, form_render_values::@2/form_field_ptr::field_idx#0 )
  [758] form_field_ptr::y#0 = form_fields_y[form_field_ptr::field_idx#2]
  [759] form_field_ptr::line#0 = form_line_hi[form_field_ptr::y#0] w= form_line_lo[form_field_ptr::y#0]
  [760] form_field_ptr::x#0 = form_fields_x[form_field_ptr::field_idx#2]
  [761] form_field_ptr::return#0 = (byte*)form_field_ptr::line#0 + form_field_ptr::x#0
  to:form_field_ptr::@return
form_field_ptr::@return: scope:[form_field_ptr]  from form_field_ptr
  [762] return 
  to:@return

void print_str_at(byte* print_str_at::str , byte* print_str_at::at)
print_str_at: scope:[print_str_at]  from render_preset_name::@2
  [763] phi()
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  [764] print_str_at::at#2 = phi( print_str_at/FORM_SCREEN+$28*2+$a, print_str_at::@2/print_str_at::at#0 )
  [764] print_str_at::str#2 = phi( print_str_at/print_str_at::str#1, print_str_at::@2/print_str_at::str#0 )
  [765] if(0!=*print_str_at::str#2) goto print_str_at::@2
  to:print_str_at::@return
print_str_at::@return: scope:[print_str_at]  from print_str_at::@1
  [766] return 
  to:@return
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1
  [767] *print_str_at::at#2 = *print_str_at::str#2
  [768] print_str_at::at#0 = ++ print_str_at::at#2
  [769] print_str_at::str#0 = ++ print_str_at::str#2
  to:print_str_at::@1

byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@7
  [770] *((byte*)CIA1) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0]
  [771] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [772] return 
  to:@return

byte keyboard_event_pressed(byte keyboard_event_pressed::keycode)
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@17 keyboard_event_scan::@2 keyboard_event_scan::@3
  [773] keyboard_event_pressed::keycode#4 = phi( keyboard_event_scan::@1/KEY_RSHIFT, keyboard_event_scan::@17/KEY_LSHIFT, keyboard_event_scan::@2/KEY_CTRL, keyboard_event_scan::@3/KEY_COMMODORE )
  [774] keyboard_event_pressed::$0 = keyboard_event_pressed::keycode#4 >> 3
  [775] keyboard_event_pressed::row_bits#0 = keyboard_scan_values[keyboard_event_pressed::$0]
  [776] keyboard_event_pressed::$1 = keyboard_event_pressed::keycode#4 & 7
  [777] keyboard_event_pressed::return#10 = keyboard_event_pressed::row_bits#0 & keyboard_matrix_col_bitmask[keyboard_event_pressed::$1]
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [778] return 
  to:@return

word abs_u16(word abs_u16::w)
abs_u16: scope:[abs_u16]  from bitmap_line bitmap_line::@12
  [779] abs_u16::w#2 = phi( bitmap_line/abs_u16::w#0, bitmap_line::@12/abs_u16::w#1 )
  [780] abs_u16::$0 = > abs_u16::w#2
  [781] abs_u16::$1 = abs_u16::$0 & $80
  [782] if(0!=abs_u16::$1) goto abs_u16::@1
  to:abs_u16::@return
abs_u16::@1: scope:[abs_u16]  from abs_u16
  [783] abs_u16::return#2 = - abs_u16::w#2
  to:abs_u16::@return
abs_u16::@return: scope:[abs_u16]  from abs_u16 abs_u16::@1
  [784] abs_u16::return#4 = phi( abs_u16::@1/abs_u16::return#2, abs_u16/abs_u16::w#2 )
  [785] return 
  to:@return

word sgn_u16(word sgn_u16::w)
sgn_u16: scope:[sgn_u16]  from bitmap_line::@1 bitmap_line::@14
  [786] sgn_u16::w#2 = phi( bitmap_line::@1/sgn_u16::w#0, bitmap_line::@14/sgn_u16::w#1 )
  [787] sgn_u16::$0 = > sgn_u16::w#2
  [788] sgn_u16::$1 = sgn_u16::$0 & $80
  [789] if(0!=sgn_u16::$1) goto sgn_u16::@1
  to:sgn_u16::@return
sgn_u16::@1: scope:[sgn_u16]  from sgn_u16
  [790] phi()
  to:sgn_u16::@return
sgn_u16::@return: scope:[sgn_u16]  from sgn_u16 sgn_u16::@1
  [791] sgn_u16::return#4 = phi( sgn_u16::@1/-1, sgn_u16/1 )
  [792] return 
  to:@return

void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line::@3 bitmap_line::@4 bitmap_line::@6 bitmap_line::@9
  [793] bitmap_plot::x#4 = phi( bitmap_line::@3/bitmap_plot::x#2, bitmap_line::@4/bitmap_plot::x#0, bitmap_line::@6/bitmap_plot::x#1, bitmap_line::@9/bitmap_plot::x#3 )
  [793] bitmap_plot::y#4 = phi( bitmap_line::@3/bitmap_plot::y#2, bitmap_line::@4/bitmap_plot::y#0, bitmap_line::@6/bitmap_plot::y#1, bitmap_line::@9/bitmap_plot::y#3 )
  [794] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4]
  [795] bitmap_plot::$0 = bitmap_plot::x#4 & $fff8
  [796] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$0
  [797] bitmap_plot::$1 = < bitmap_plot::x#4
  [798] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1]
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [799] return 
  to:@return


VARIABLE REGISTER WEIGHTS
word abs_u16(word abs_u16::w)
byte~ abs_u16::$0 200002.0
byte~ abs_u16::$1 200002.0
word abs_u16::return
word abs_u16::return#0 20002.0
word abs_u16::return#1 20002.0
word abs_u16::return#2 200002.0
word abs_u16::return#4 55001.0
word abs_u16::w
word abs_u16::w#0 20002.0
word abs_u16::w#1 20002.0
word abs_u16::w#2 80001.25
void apply_preset(byte apply_preset::idx)
byte apply_preset::i
byte apply_preset::i#1 2.00000002E8
byte apply_preset::i#2 1.6666666833333334E8
byte apply_preset::idx
byte apply_preset::idx#0 100910.18181818182
byte* apply_preset::preset
byte* apply_preset::preset#15 2.00000002E7
void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
byte bitmap_clear::bgcol
byte bitmap_clear::col
byte bitmap_clear::fgcol
byte* bitmap_gfx
void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
byte~ bitmap_init::$4 20002.0
byte~ bitmap_init::$5 20002.0
byte~ bitmap_init::$6 20002.0
byte~ bitmap_init::$7 5000.5
byte bitmap_init::bits
byte bitmap_init::bits#1 10001.0
byte bitmap_init::bits#3 15001.5
byte bitmap_init::bits#4 6667.333333333333
byte* bitmap_init::gfx
byte* bitmap_init::screen
byte bitmap_init::x
byte bitmap_init::x#1 15001.5
byte bitmap_init::x#2 5000.5
byte bitmap_init::y
byte bitmap_init::y#1 15001.5
byte bitmap_init::y#2 5000.5
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#1 20002.0
byte* bitmap_init::yoffs#2 6250.625
byte* bitmap_init::yoffs#4 10001.0
void bitmap_line(word bitmap_line::x1 , word bitmap_line::y1 , word bitmap_line::x2 , word bitmap_line::y2)
word bitmap_line::dx
word bitmap_line::dx#0 76000.175
word bitmap_line::dy
word bitmap_line::dy#0 84444.63888888889
word bitmap_line::e
word bitmap_line::e#0 20002.0
word bitmap_line::e#1 1333334.6666666667
word bitmap_line::e#2 2000002.0
word bitmap_line::e#3 402000.60000000003
word bitmap_line::e#6 1500001.5
word bitmap_line::e1
word bitmap_line::e1#0 20002.0
word bitmap_line::e1#1 1333334.6666666667
word bitmap_line::e1#2 2000002.0
word bitmap_line::e1#3 402000.60000000003
word bitmap_line::e1#6 1500001.5
word bitmap_line::sx
word bitmap_line::sx#0 67000.1
word bitmap_line::sy
word bitmap_line::sy#0 77307.80769230769
word bitmap_line::x
word bitmap_line::x#1 1000001.0
word bitmap_line::x#12 2000002.0
word bitmap_line::x#13 572857.857142857
word bitmap_line::x#15 571429.1428571428
word bitmap_line::x#6 2010003.0
word bitmap_line::x#7 752501.0
word bitmap_line::x1
word bitmap_line::x1#0 2040.24
word bitmap_line::x2
word bitmap_line::x2#0 30939.515151515152
word bitmap_line::y
word bitmap_line::y#1 571429.1428571428
word bitmap_line::y#13 2000002.0
word bitmap_line::y#15 430000.57142857136
word bitmap_line::y#2 1000001.0
word bitmap_line::y#4 502500.75
word bitmap_line::y#7 1000001.0
word bitmap_line::y1
word bitmap_line::y1#0 1640.2
word bitmap_line::y2
word bitmap_line::y2#0 31906.375
void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
word~ bitmap_plot::$0 2.0000002E7
byte~ bitmap_plot::$1 2.0000002E7
byte* bitmap_plot::plotter
word bitmap_plot::plotter#0 5000000.5
byte* bitmap_plot::plotter#1 1.50000015E7
word bitmap_plot::x
word bitmap_plot::x#0 10001.0
word bitmap_plot::x#1 1000001.0
word bitmap_plot::x#2 10001.0
word bitmap_plot::x#3 1000001.0
word bitmap_plot::x#4 5505001.5
byte bitmap_plot::y
byte bitmap_plot::y#0 20002.0
byte bitmap_plot::y#1 2000002.0
byte bitmap_plot::y#2 20002.0
byte bitmap_plot::y#3 2000002.0
byte bitmap_plot::y#4 2.2020006E7
byte* bitmap_screen
void dtvSetCpuBankSegment1(byte dtvSetCpuBankSegment1::cpuBankIdx)
byte dtvSetCpuBankSegment1::cpuBankIdx
byte dtvSetCpuBankSegment1::cpuBankIdx#1 20002.0
byte dtvSetCpuBankSegment1::cpuBankIdx#11 2002.0
byte dtvSetCpuBankSegment1::cpuBankIdx#13 111003.0
byte form_control()
byte~ form_control::$12 2000002.0
byte~ form_control::$13 2000002.0
byte~ form_control::$14 2000002.0
byte~ form_control::$15 2000002.0
byte~ form_control::$22 2000002.0
byte* form_control::field
byte* form_control::field#0 296296.5925925926
byte form_control::key_event
byte form_control::key_event#0 1333334.6666666667
byte form_control::return
byte form_control::return#0 200002.0
byte form_control::return#2 33333.666666666664
signed byte form_cursor_count
signed byte form_cursor_count#1 2.871794871794872
signed byte form_cursor_count#16 200000.2
signed byte form_cursor_count#17 182942.11764705883
signed byte form_cursor_count#23 158586.2857142857
signed byte form_cursor_count#4 1000001.0
byte form_field_idx
byte form_field_idx#1 2.871794871794872
byte form_field_idx#19 241765.70588235295
byte form_field_idx#30 438721.0256410255
byte form_field_idx#33 3000003.0
byte form_field_idx#4 1000001.0
byte form_field_idx#5 1000001.0
byte* form_field_ptr(byte form_field_ptr::field_idx)
byte* form_field_ptr::field
byte form_field_ptr::field_idx
byte form_field_ptr::field_idx#0 2.00000002E8
byte form_field_ptr::field_idx#1 2000002.0
byte form_field_ptr::field_idx#2 7.003333346666667E8
byte* form_field_ptr::line
word form_field_ptr::line#0 2.000000002E8
byte* form_field_ptr::return
byte* form_field_ptr::return#0 3.336666673333334E8
byte* form_field_ptr::return#3 2000002.0
byte form_field_ptr::x
byte form_field_ptr::x#0 5.2500000075E8
byte form_field_ptr::y
byte form_field_ptr::y#0 3.000000003E9
void form_mode()
byte~ form_mode::$11 200002.0
byte form_mode::i
byte form_mode::i#1 15001.5
byte form_mode::i#2 20002.0
byte form_mode::preset_current
byte form_mode::preset_current#0 202.0
byte form_mode::preset_current#1 5000.5
byte form_mode::preset_current#6 38763.125
void form_render_values()
byte* form_render_values::field
byte form_render_values::idx
byte form_render_values::idx#1 2.00000002E8
byte form_render_values::idx#2 1.00000001E8
void form_set_screen(byte* form_set_screen::screen)
byte~ form_set_screen::$0 200002.0
byte~ form_set_screen::$1 200002.0
byte* form_set_screen::line
byte* form_set_screen::line#1 66667.33333333333
byte* form_set_screen::line#2 80000.8
byte* form_set_screen::screen
byte form_set_screen::y
byte form_set_screen::y#1 150001.5
byte form_set_screen::y#2 66667.33333333333
byte* get_VICII_charset(byte get_VICII_charset::idx)
byte get_VICII_charset::idx
byte get_VICII_charset::idx#0 1051.5
byte* get_VICII_charset::return
byte* get_VICII_charset::return#2 33.666666666666664
byte* get_VICII_charset::return#4 202.0
byte* get_VICII_screen(byte get_VICII_screen::idx)
byte get_VICII_screen::idx
byte get_VICII_screen::idx#0 202.0
byte get_VICII_screen::idx#1 202.0
byte get_VICII_screen::idx#2 1041.4
byte* get_VICII_screen::return
byte* get_VICII_screen::return#10 202.0
byte* get_VICII_screen::return#11 202.0
byte* get_VICII_screen::return#5 50.5
dword get_plane(byte get_plane::idx)
byte get_plane::idx
byte get_plane::idx#0 202.0
byte get_plane::idx#1 202.0
byte get_plane::idx#10 1015.4285714285714
dword get_plane::return
dword get_plane::return#14 50.5
dword get_plane::return#16 202.0
dword get_plane::return#17 202.0
void gfx_init()
void gfx_init_VICII_bitmap()
byte gfx_init_VICII_bitmap::l
byte gfx_init_VICII_bitmap::l#1 2002.0
byte gfx_init_VICII_bitmap::l#2 1001.0
void gfx_init_charset()
byte gfx_init_charset::c
byte gfx_init_charset::c#1 1501.5
byte gfx_init_charset::c#4 286.0
byte* gfx_init_charset::chargen
byte* gfx_init_charset::chargen#1 4200.6
byte* gfx_init_charset::chargen#2 10334.666666666666
byte* gfx_init_charset::chargen#3 2002.0
byte* gfx_init_charset::charset
byte* gfx_init_charset::charset#1 3500.5
byte* gfx_init_charset::charset#2 15502.0
byte* gfx_init_charset::charset#3 2002.0
byte gfx_init_charset::l
byte gfx_init_charset::l#1 15001.5
byte gfx_init_charset::l#2 5000.5
void gfx_init_plane_8bppchunky()
word~ gfx_init_plane_8bppchunky::$5 10001.0
byte gfx_init_plane_8bppchunky::c
byte gfx_init_plane_8bppchunky::c#0 20002.0
byte* gfx_init_plane_8bppchunky::gfxb
byte* gfx_init_plane_8bppchunky::gfxb#1 4200.6
byte* gfx_init_plane_8bppchunky::gfxb#3 15502.0
byte* gfx_init_plane_8bppchunky::gfxb#4 7500.75
byte* gfx_init_plane_8bppchunky::gfxb#5 2002.0
byte gfx_init_plane_8bppchunky::gfxbCpuBank
byte gfx_init_plane_8bppchunky::gfxbCpuBank#2 20002.0
byte gfx_init_plane_8bppchunky::gfxbCpuBank#4 10251.25
byte gfx_init_plane_8bppchunky::gfxbCpuBank#7 2002.0
byte gfx_init_plane_8bppchunky::gfxbCpuBank#8 3444.8888888888887
word gfx_init_plane_8bppchunky::x
word gfx_init_plane_8bppchunky::x#1 15001.5
word gfx_init_plane_8bppchunky::x#2 3000.3
byte gfx_init_plane_8bppchunky::y
byte gfx_init_plane_8bppchunky::y#1 1501.5
byte gfx_init_plane_8bppchunky::y#6 923.3076923076923
void gfx_init_plane_blank()
void gfx_init_plane_charset8()
byte~ gfx_init_plane_charset8::$2 200002.0
byte gfx_init_plane_charset8::bits
byte gfx_init_plane_charset8::bits#0 10001.0
byte gfx_init_plane_charset8::bits#1 50000.5
byte gfx_init_plane_charset8::bits#2 44286.28571428572
byte gfx_init_plane_charset8::c
byte gfx_init_plane_charset8::c#2 200002.0
byte gfx_init_plane_charset8::c#3 200002.0
byte gfx_init_plane_charset8::ch
byte gfx_init_plane_charset8::ch#1 1501.5
byte gfx_init_plane_charset8::ch#8 117.76470588235294
byte* gfx_init_plane_charset8::chargen
byte* gfx_init_plane_charset8::chargen#1 1312.6875
byte* gfx_init_plane_charset8::chargen#2 15502.0
byte* gfx_init_plane_charset8::chargen#3 2002.0
byte gfx_init_plane_charset8::col
byte gfx_init_plane_charset8::col#1 30143.428571428572
byte gfx_init_plane_charset8::col#2 38750.5
byte gfx_init_plane_charset8::col#5 7001.0
byte gfx_init_plane_charset8::col#6 2002.0
byte gfx_init_plane_charset8::cp
byte gfx_init_plane_charset8::cp#1 150001.5
byte gfx_init_plane_charset8::cp#2 22222.444444444445
byte gfx_init_plane_charset8::cr
byte gfx_init_plane_charset8::cr#1 15001.5
byte gfx_init_plane_charset8::cr#6 1428.7142857142858
byte* gfx_init_plane_charset8::gfxa
byte* gfx_init_plane_charset8::gfxa#1 23444.88888888889
byte* gfx_init_plane_charset8::gfxa#2 51667.33333333333
byte* gfx_init_plane_charset8::gfxa#5 7001.0
byte* gfx_init_plane_charset8::gfxa#6 2002.0
byte gfx_init_plane_charset8::gfxbCpuBank
void gfx_init_plane_fill(dword gfx_init_plane_fill::plane_addr , byte gfx_init_plane_fill::fill)
dword~ gfx_init_plane_fill::$0 2002.0
word~ gfx_init_plane_fill::$1 2002.0
word~ gfx_init_plane_fill::$4 2002.0
word~ gfx_init_plane_fill::$5 2002.0
byte gfx_init_plane_fill::bx
byte gfx_init_plane_fill::bx#1 150001.5
byte gfx_init_plane_fill::bx#2 66667.33333333333
byte gfx_init_plane_fill::by
byte gfx_init_plane_fill::by#1 15001.5
byte gfx_init_plane_fill::by#4 3333.6666666666665
byte gfx_init_plane_fill::fill
byte gfx_init_plane_fill::fill#6 5555.611111111111
byte* gfx_init_plane_fill::gfxb
word gfx_init_plane_fill::gfxb#0 1001.0
byte* gfx_init_plane_fill::gfxb#1 42000.600000000006
byte* gfx_init_plane_fill::gfxb#2 155002.0
byte* gfx_init_plane_fill::gfxb#3 21003.0
byte* gfx_init_plane_fill::gfxb#6 2002.0
byte gfx_init_plane_fill::gfxbCpuBank
byte gfx_init_plane_fill::gfxbCpuBank#0 2002.0
dword gfx_init_plane_fill::plane_addr
dword gfx_init_plane_fill::plane_addr#3 333.6666666666667
void gfx_init_plane_full()
void gfx_init_plane_horisontal()
byte~ gfx_init_plane_horisontal::$2 20002.0
byte gfx_init_plane_horisontal::ax
byte gfx_init_plane_horisontal::ax#1 15001.5
byte gfx_init_plane_horisontal::ax#2 2500.25
byte gfx_init_plane_horisontal::ay
byte gfx_init_plane_horisontal::ay#1 1501.5
byte gfx_init_plane_horisontal::ay#4 1091.181818181818
byte* gfx_init_plane_horisontal::gfxa
byte* gfx_init_plane_horisontal::gfxa#1 20002.0
byte* gfx_init_plane_horisontal::gfxa#2 20002.0
byte* gfx_init_plane_horisontal::gfxa#3 10201.2
byte* gfx_init_plane_horisontal::gfxa#6 2002.0
byte* gfx_init_plane_horisontal::gfxa#7 6200.8
byte gfx_init_plane_horisontal::gfxbCpuBank
void gfx_init_plane_horisontal2()
byte~ gfx_init_plane_horisontal2::$2 20002.0
byte gfx_init_plane_horisontal2::ax
byte gfx_init_plane_horisontal2::ax#1 15001.5
byte gfx_init_plane_horisontal2::ax#2 4000.4
byte gfx_init_plane_horisontal2::ay
byte gfx_init_plane_horisontal2::ay#1 1501.5
byte gfx_init_plane_horisontal2::ay#4 1500.375
byte* gfx_init_plane_horisontal2::gfxa
byte* gfx_init_plane_horisontal2::gfxa#1 4200.6
byte* gfx_init_plane_horisontal2::gfxa#2 7751.0
byte* gfx_init_plane_horisontal2::gfxa#3 2002.0
byte gfx_init_plane_horisontal2::gfxbCpuBank
byte gfx_init_plane_horisontal2::row
byte gfx_init_plane_horisontal2::row#0 20002.0
void gfx_init_plane_vertical()
byte gfx_init_plane_vertical::bx
byte gfx_init_plane_vertical::bx#1 15001.5
byte gfx_init_plane_vertical::bx#2 6667.333333333333
byte gfx_init_plane_vertical::by
byte gfx_init_plane_vertical::by#1 1501.5
byte gfx_init_plane_vertical::by#4 333.6666666666667
byte* gfx_init_plane_vertical::gfxb
byte* gfx_init_plane_vertical::gfxb#1 4200.6
byte* gfx_init_plane_vertical::gfxb#2 15502.0
byte* gfx_init_plane_vertical::gfxb#3 2002.0
byte gfx_init_plane_vertical::gfxbCpuBank
void gfx_init_plane_vertical2()
void gfx_init_screen0()
byte~ gfx_init_screen0::$0 20002.0
byte~ gfx_init_screen0::$1 10001.0
byte~ gfx_init_screen0::$2 20002.0
byte~ gfx_init_screen0::$3 20002.0
byte* gfx_init_screen0::ch
byte* gfx_init_screen0::ch#1 4200.6
byte* gfx_init_screen0::ch#2 5167.333333333333
byte* gfx_init_screen0::ch#3 2002.0
byte gfx_init_screen0::cx
byte gfx_init_screen0::cx#1 15001.5
byte gfx_init_screen0::cx#2 4286.142857142857
byte gfx_init_screen0::cy
byte gfx_init_screen0::cy#1 1501.5
byte gfx_init_screen0::cy#4 1200.3
void gfx_init_screen1()
byte~ gfx_init_screen1::$0 20002.0
byte~ gfx_init_screen1::$1 20002.0
byte* gfx_init_screen1::ch
byte* gfx_init_screen1::ch#1 4200.6
byte* gfx_init_screen1::ch#2 7751.0
byte* gfx_init_screen1::ch#3 2002.0
byte gfx_init_screen1::cx
byte gfx_init_screen1::cx#1 15001.5
byte gfx_init_screen1::cx#2 6000.6
byte gfx_init_screen1::cy
byte gfx_init_screen1::cy#1 1501.5
byte gfx_init_screen1::cy#4 1500.375
void gfx_init_screen2()
byte~ gfx_init_screen2::$0 20002.0
byte~ gfx_init_screen2::$3 20002.0
byte~ gfx_init_screen2::$4 20002.0
byte* gfx_init_screen2::ch
byte* gfx_init_screen2::ch#1 4200.6
byte* gfx_init_screen2::ch#2 4429.142857142857
byte* gfx_init_screen2::ch#3 2002.0
byte gfx_init_screen2::col
byte gfx_init_screen2::col#0 15001.5
byte gfx_init_screen2::col2
byte gfx_init_screen2::col2#0 10001.0
byte gfx_init_screen2::cx
byte gfx_init_screen2::cx#1 15001.5
byte gfx_init_screen2::cx#2 3750.375
byte gfx_init_screen2::cy
byte gfx_init_screen2::cy#1 1501.5
byte gfx_init_screen2::cy#4 1091.181818181818
void gfx_init_screen3()
byte~ gfx_init_screen3::$0 20002.0
byte~ gfx_init_screen3::$1 10001.0
byte~ gfx_init_screen3::$2 20002.0
byte~ gfx_init_screen3::$3 20002.0
byte* gfx_init_screen3::ch
byte* gfx_init_screen3::ch#1 4200.6
byte* gfx_init_screen3::ch#2 5167.333333333333
byte* gfx_init_screen3::ch#3 2002.0
byte gfx_init_screen3::cx
byte gfx_init_screen3::cx#1 15001.5
byte gfx_init_screen3::cx#2 4286.142857142857
byte gfx_init_screen3::cy
byte gfx_init_screen3::cy#1 1501.5
byte gfx_init_screen3::cy#4 1200.3
void gfx_init_screen4()
byte* gfx_init_screen4::ch
byte* gfx_init_screen4::ch#1 4200.6
byte* gfx_init_screen4::ch#2 15502.0
byte* gfx_init_screen4::ch#3 2002.0
byte gfx_init_screen4::cx
byte gfx_init_screen4::cx#1 15001.5
byte gfx_init_screen4::cx#2 6667.333333333333
byte gfx_init_screen4::cy
byte gfx_init_screen4::cy#1 1501.5
byte gfx_init_screen4::cy#4 333.6666666666667
void gfx_mode()
byte~ gfx_mode::$18 202.0
dword~ gfx_mode::$20 202.0
word~ gfx_mode::$22 202.0
byte~ gfx_mode::$23 202.0
word~ gfx_mode::$24 202.0
byte~ gfx_mode::$25 202.0
word~ gfx_mode::$26 202.0
byte~ gfx_mode::$27 202.0
byte~ gfx_mode::$28 202.0
byte~ gfx_mode::$29 202.0
byte~ gfx_mode::$30 202.0
byte~ gfx_mode::$31 202.0
byte~ gfx_mode::$32 202.0
dword~ gfx_mode::$34 202.0
word~ gfx_mode::$36 202.0
byte~ gfx_mode::$37 202.0
word~ gfx_mode::$38 202.0
byte~ gfx_mode::$39 202.0
word~ gfx_mode::$40 202.0
byte~ gfx_mode::$41 202.0
byte~ gfx_mode::$42 202.0
byte~ gfx_mode::$43 202.0
byte~ gfx_mode::$44 202.0
byte~ gfx_mode::$45 202.0
word~ gfx_mode::$47 202.0
word~ gfx_mode::$48 12.625
word~ gfx_mode::$50 202.0
byte~ gfx_mode::$51 202.0
byte~ gfx_mode::$52 101.0
byte~ gfx_mode::$53 202.0
byte~ gfx_mode::$55 202.0
byte~ gfx_mode::$56 202.0
byte~ gfx_mode::$57 202.0
byte~ gfx_mode::$58 202.0
byte~ gfx_mode::$59 202.0
byte~ gfx_mode::$60 202.0
byte~ gfx_mode::$61 202.0
byte~ gfx_mode::$62 202.0
byte*~ gfx_mode::$82 101.0
byte*~ gfx_mode::$83 101.0
byte~ gfx_mode::$84 202.0
byte* gfx_mode::VICII_colors
byte* gfx_mode::VICII_colors#0 202.0
byte* gfx_mode::VICII_colors#1 42000.600000000006
byte* gfx_mode::VICII_colors#2 103334.66666666666
byte* gfx_mode::VICII_colors#3 20103.0
byte gfx_mode::VICII_control
byte gfx_mode::VICII_control#2 202.0
byte gfx_mode::VICII_control#4 303.0
byte gfx_mode::VICII_control#5 101.0
byte gfx_mode::VICII_control2
byte gfx_mode::VICII_control2#2 101.0
byte* gfx_mode::col
byte* gfx_mode::col#1 35000.5
byte* gfx_mode::col#2 155002.0
byte* gfx_mode::col#3 20002.0
byte gfx_mode::cx
byte gfx_mode::cx#1 150001.5
byte gfx_mode::cx#2 50000.5
byte gfx_mode::cy
byte gfx_mode::cy#1 15001.5
byte gfx_mode::cy#4 2857.4285714285716
byte gfx_mode::dtv_control
byte gfx_mode::dtv_control#10 202.0
byte gfx_mode::dtv_control#11 202.0
byte gfx_mode::dtv_control#12 303.0
byte gfx_mode::dtv_control#13 202.0
byte gfx_mode::dtv_control#14 101.0
byte gfx_mode::dtv_control#15 202.0
byte gfx_mode::dtv_control#2 202.0
byte gfx_mode::dtv_control#3 202.0
byte gfx_mode::dtv_control#4 202.0
byte gfx_mode::dtv_control#5 202.0
byte gfx_mode::dtv_control#6 202.0
byte gfx_mode::i
byte gfx_mode::i#1 15001.5
byte gfx_mode::i#2 20002.0
byte gfx_mode::j
byte gfx_mode::j#1 15001.5
byte gfx_mode::j#2 20002.0
byte gfx_mode::keyboard_event
byte gfx_mode::keyboard_event#0 20002.0
dword gfx_mode::plane_a
dword gfx_mode::plane_a#0 57.714285714285715
byte gfx_mode::plane_a_offs
byte gfx_mode::plane_a_offs#0 40.4
dword gfx_mode::plane_b
dword gfx_mode::plane_b#0 57.714285714285715
byte gfx_mode::plane_b_offs
byte gfx_mode::plane_b_offs#0 40.4
byte keyboard_event_get()
byte keyboard_event_get::return
byte keyboard_event_get::return#1 2.0000002E7
byte keyboard_event_get::return#2 2752500.75
byte keyboard_event_get::return#3 20002.0
byte keyboard_event_get::return#4 2000002.0
byte keyboard_event_pressed(byte keyboard_event_pressed::keycode)
byte~ keyboard_event_pressed::$0 2.00000002E8
byte~ keyboard_event_pressed::$1 2.00000002E8
byte keyboard_event_pressed::keycode
byte keyboard_event_pressed::keycode#4 6.6666667333333336E7
byte keyboard_event_pressed::return
byte keyboard_event_pressed::return#0 2.0000002E7
byte keyboard_event_pressed::return#1 2.0000002E7
byte keyboard_event_pressed::return#10 2.3333334166666668E7
byte keyboard_event_pressed::return#2 2.0000002E7
byte keyboard_event_pressed::return#3 2.0000002E7
byte keyboard_event_pressed::row_bits
byte keyboard_event_pressed::row_bits#0 1.00000001E8
void keyboard_event_scan()
byte~ keyboard_event_scan::$0 2.0000002E7
byte~ keyboard_event_scan::$15 2.000000000002E12
byte~ keyboard_event_scan::$16 2.000000000002E12
byte~ keyboard_event_scan::$23 2.000000000002E12
byte~ keyboard_event_scan::$3 2.0000002E7
byte~ keyboard_event_scan::$6 2.0000002E7
byte~ keyboard_event_scan::$9 2.0000002E7
byte keyboard_event_scan::col
byte keyboard_event_scan::col#1 1.5000000000015E12
byte keyboard_event_scan::col#2 2.857142857145714E11
byte keyboard_event_scan::event_type
byte keyboard_event_scan::event_type#0 2.000000000002E12
byte keyboard_event_scan::keycode
byte keyboard_event_scan::keycode#1 2.00000000002E11
byte keyboard_event_scan::keycode#10 3.15384615385E11
byte keyboard_event_scan::keycode#11 5.00000000005E10
byte keyboard_event_scan::keycode#13 1.00000000001E11
byte keyboard_event_scan::keycode#14 5.2500000000075E11
byte keyboard_event_scan::row
byte keyboard_event_scan::row#1 1.500000000015E11
byte keyboard_event_scan::row#2 6.000000000024E10
byte keyboard_event_scan::row_scan
byte keyboard_event_scan::row_scan#0 1.2777777777805557E11
byte keyboard_events_size
byte keyboard_events_size#0 2.000000000002E12
byte keyboard_events_size#1 2.000000000002E12
byte keyboard_events_size#100 8.82441176488235E9
byte keyboard_events_size#106 1.0200000000012E12
byte keyboard_events_size#107 4.285857142914285E10
byte keyboard_events_size#19 8.100000000008999E11
byte keyboard_events_size#25 110549.53846153847
byte keyboard_events_size#28 2.871794871794872
byte keyboard_events_size#3 1.50000015E7
byte keyboard_events_size#49 65300.23529411765
byte keyboard_events_size#98 1.1010003E7
void keyboard_init()
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0 3.666666666673334E11
byte keyboard_matrix_read::return#2 2.00000000002E11
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::rowid
byte keyboard_matrix_read::rowid#0 1.100000000002E12
byte keyboard_modifiers
byte keyboard_modifiers#19 4000000.4
byte keyboard_modifiers#2 2.0000002E7
byte keyboard_modifiers#20 8000000.8
byte keyboard_modifiers#21 8000000.8
byte keyboard_modifiers#22 2000000.3636363638
byte keyboard_modifiers#3 2.0000002E7
byte keyboard_modifiers#4 2.0000002E7
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#5 125000.125
byte* memset::dst
byte* memset::dst#1 2000002.0
byte* memset::dst#2 1336668.3333333335
byte* memset::dst#4 20002.0
byte* memset::end
byte* memset::end#0 168333.6666666667
word memset::num
word memset::num#3 10001.0
void* memset::return
void* memset::str
void* memset::str#0 2002.0
void* memset::str#4 333.6666666666667
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 1.1000002E7
byte* print_char_cursor
byte* print_char_cursor#2 100501.5
byte* print_char_cursor#29 3666667.333333333
byte* print_char_cursor#43 3683334.1666666665
byte* print_char_cursor#44 1.4328571485714287E8
byte* print_char_cursor#72 2002.0
byte* print_char_cursor#73 200002.0
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#1 91750.25
byte* print_line_cursor#2 6.00040001E8
byte* print_line_cursor#22 2.001000003E9
void print_ln()
byte* print_screen
byte* print_screen#0 200.2
void print_set_screen(byte* print_set_screen::screen)
byte* print_set_screen::screen
byte* print_set_screen::screen#2 1001.0
void print_str_at(byte* print_str_at::str , byte* print_str_at::at)
byte* print_str_at::at
byte* print_str_at::at#0 1.000000001E9
byte* print_str_at::at#2 1.000000001E9
byte* print_str_at::str
byte* print_str_at::str#0 2.000000002E9
byte* print_str_at::str#1 550001.0
byte* print_str_at::str#2 1.00025000125E9
void print_str_lines(byte* print_str_lines::str)
byte print_str_lines::ch
byte print_str_lines::ch#0 666667.3333333334
byte* print_str_lines::str
byte* print_str_lines::str#0 233333.66666666666
byte* print_str_lines::str#3 150502.0
byte* print_str_lines::str#4 1550002.0
byte* print_str_lines::str#5 500.5
void render_preset_name(byte render_preset_name::idx)
byte render_preset_name::idx
byte render_preset_name::idx#0 202.0
byte render_preset_name::idx#1 20002.0
byte render_preset_name::idx#10 100919.36363636363
byte* render_preset_name::name
byte* render_preset_name::name#13 100001.0
word sgn_u16(word sgn_u16::w)
byte~ sgn_u16::$0 200002.0
byte~ sgn_u16::$1 200002.0
word sgn_u16::return
word sgn_u16::return#0 20002.0
word sgn_u16::return#1 20002.0
word sgn_u16::return#4 5000.5
word sgn_u16::w
word sgn_u16::w#0 20002.0
word sgn_u16::w#1 20002.0
word sgn_u16::w#2 120003.0

Initial phi equivalence classes
[ form_mode::i#2 form_mode::i#1 ]
[ form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ]
[ form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ]
[ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
[ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
[ gfx_mode::VICII_control#4 gfx_mode::VICII_control#2 gfx_mode::VICII_control#5 ]
[ gfx_mode::VICII_control2#2 ]
[ gfx_mode::cy#4 gfx_mode::cy#1 ]
[ gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 ]
[ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
[ gfx_mode::cx#2 gfx_mode::cx#1 ]
[ gfx_mode::j#2 gfx_mode::j#1 ]
[ gfx_mode::i#2 gfx_mode::i#1 ]
[ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
[ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
[ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
[ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
[ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
[ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
[ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
[ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
[ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
[ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
[ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
[ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
[ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
[ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
[ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
[ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
[ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
[ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
[ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
[ gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ]
[ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
[ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
[ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
[ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
[ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
[ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
[ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
[ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
[ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
[ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
[ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
[ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
[ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
[ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
[ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
[ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
[ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
[ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
[ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
[ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
[ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
[ print_set_screen::screen#2 ]
[ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
[ print_char_cursor#43 print_char_cursor#2 print_char_cursor#72 print_char_cursor#73 print_char_cursor#44 print_char_cursor#29 ]
[ form_set_screen::line#2 form_set_screen::line#1 ]
[ form_set_screen::y#2 form_set_screen::y#1 ]
[ form_render_values::idx#2 form_render_values::idx#1 ]
[ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
[ render_preset_name::name#13 ]
[ form_control::return#2 ]
[ apply_preset::preset#15 ]
[ apply_preset::i#2 apply_preset::i#1 ]
[ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
[ get_plane::return#14 ]
[ get_VICII_screen::idx#2 get_VICII_screen::idx#0 get_VICII_screen::idx#1 ]
[ get_VICII_screen::return#5 ]
[ get_VICII_charset::return#2 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_modifiers#22 keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#2 keyboard_modifiers#3 keyboard_modifiers#4 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
[ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ]
[ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ]
[ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
[ gfx_init_plane_fill::plane_addr#3 ]
[ gfx_init_plane_fill::fill#6 ]
[ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
[ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
[ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
[ memset::num#3 ]
[ memset::str#4 memset::str#0 ]
[ memset::c#5 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ]
[ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
[ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
[ print_str_at::at#2 print_str_at::at#0 ]
[ keyboard_event_pressed::keycode#4 ]
[ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ]
[ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]
[ sgn_u16::return#4 ]
[ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ]
[ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ]
Added variable form_control::return#0 to live range equivalence class [ form_control::return#0 ]
Added variable form_mode::$11 to live range equivalence class [ form_mode::$11 ]
Added variable apply_preset::idx#0 to live range equivalence class [ apply_preset::idx#0 ]
Added variable gfx_mode::$18 to live range equivalence class [ gfx_mode::$18 ]
Added variable gfx_mode::plane_a_offs#0 to live range equivalence class [ gfx_mode::plane_a_offs#0 ]
Added variable get_plane::return#16 to live range equivalence class [ get_plane::return#16 ]
Added variable gfx_mode::$20 to live range equivalence class [ gfx_mode::$20 ]
Added variable gfx_mode::plane_a#0 to live range equivalence class [ gfx_mode::plane_a#0 ]
Added variable gfx_mode::$22 to live range equivalence class [ gfx_mode::$22 ]
Added variable gfx_mode::$23 to live range equivalence class [ gfx_mode::$23 ]
Added variable gfx_mode::$24 to live range equivalence class [ gfx_mode::$24 ]
Added variable gfx_mode::$25 to live range equivalence class [ gfx_mode::$25 ]
Added variable gfx_mode::$26 to live range equivalence class [ gfx_mode::$26 ]
Added variable gfx_mode::$27 to live range equivalence class [ gfx_mode::$27 ]
Added variable gfx_mode::$28 to live range equivalence class [ gfx_mode::$28 ]
Added variable gfx_mode::$29 to live range equivalence class [ gfx_mode::$29 ]
Added variable gfx_mode::$30 to live range equivalence class [ gfx_mode::$30 ]
Added variable gfx_mode::$31 to live range equivalence class [ gfx_mode::$31 ]
Added variable gfx_mode::$32 to live range equivalence class [ gfx_mode::$32 ]
Added variable gfx_mode::plane_b_offs#0 to live range equivalence class [ gfx_mode::plane_b_offs#0 ]
Added variable get_plane::return#17 to live range equivalence class [ get_plane::return#17 ]
Added variable gfx_mode::$34 to live range equivalence class [ gfx_mode::$34 ]
Added variable gfx_mode::plane_b#0 to live range equivalence class [ gfx_mode::plane_b#0 ]
Added variable gfx_mode::$36 to live range equivalence class [ gfx_mode::$36 ]
Added variable gfx_mode::$37 to live range equivalence class [ gfx_mode::$37 ]
Added variable gfx_mode::$38 to live range equivalence class [ gfx_mode::$38 ]
Added variable gfx_mode::$39 to live range equivalence class [ gfx_mode::$39 ]
Added variable gfx_mode::$40 to live range equivalence class [ gfx_mode::$40 ]
Added variable gfx_mode::$41 to live range equivalence class [ gfx_mode::$41 ]
Added variable gfx_mode::$42 to live range equivalence class [ gfx_mode::$42 ]
Added variable gfx_mode::$43 to live range equivalence class [ gfx_mode::$43 ]
Added variable gfx_mode::$44 to live range equivalence class [ gfx_mode::$44 ]
Added variable gfx_mode::$45 to live range equivalence class [ gfx_mode::$45 ]
Added variable get_VICII_screen::return#10 to live range equivalence class [ get_VICII_screen::return#10 ]
Added variable gfx_mode::$82 to live range equivalence class [ gfx_mode::$82 ]
Added variable gfx_mode::$47 to live range equivalence class [ gfx_mode::$47 ]
Added variable gfx_mode::$48 to live range equivalence class [ gfx_mode::$48 ]
Added variable get_VICII_charset::idx#0 to live range equivalence class [ get_VICII_charset::idx#0 ]
Added variable get_VICII_charset::return#4 to live range equivalence class [ get_VICII_charset::return#4 ]
Added variable gfx_mode::$83 to live range equivalence class [ gfx_mode::$83 ]
Added variable gfx_mode::$50 to live range equivalence class [ gfx_mode::$50 ]
Added variable gfx_mode::$51 to live range equivalence class [ gfx_mode::$51 ]
Added variable gfx_mode::$52 to live range equivalence class [ gfx_mode::$52 ]
Added variable gfx_mode::$84 to live range equivalence class [ gfx_mode::$84 ]
Added variable gfx_mode::$53 to live range equivalence class [ gfx_mode::$53 ]
Added variable get_VICII_screen::return#11 to live range equivalence class [ get_VICII_screen::return#11 ]
Added variable gfx_mode::$55 to live range equivalence class [ gfx_mode::$55 ]
Added variable gfx_mode::$56 to live range equivalence class [ gfx_mode::$56 ]
Added variable gfx_mode::$57 to live range equivalence class [ gfx_mode::$57 ]
Added variable gfx_mode::$58 to live range equivalence class [ gfx_mode::$58 ]
Added variable gfx_mode::$59 to live range equivalence class [ gfx_mode::$59 ]
Added variable gfx_mode::$60 to live range equivalence class [ gfx_mode::$60 ]
Added variable gfx_mode::$61 to live range equivalence class [ gfx_mode::$61 ]
Added variable gfx_mode::$62 to live range equivalence class [ gfx_mode::$62 ]
Added variable keyboard_event_get::return#3 to live range equivalence class [ keyboard_event_get::return#3 ]
Added variable gfx_mode::keyboard_event#0 to live range equivalence class [ gfx_mode::keyboard_event#0 ]
Added variable gfx_init_screen0::$0 to live range equivalence class [ gfx_init_screen0::$0 ]
Added variable gfx_init_screen0::$1 to live range equivalence class [ gfx_init_screen0::$1 ]
Added variable gfx_init_screen0::$2 to live range equivalence class [ gfx_init_screen0::$2 ]
Added variable gfx_init_screen0::$3 to live range equivalence class [ gfx_init_screen0::$3 ]
Added variable gfx_init_screen1::$0 to live range equivalence class [ gfx_init_screen1::$0 ]
Added variable gfx_init_screen1::$1 to live range equivalence class [ gfx_init_screen1::$1 ]
Added variable gfx_init_screen2::$0 to live range equivalence class [ gfx_init_screen2::$0 ]
Added variable gfx_init_screen2::col#0 to live range equivalence class [ gfx_init_screen2::col#0 ]
Added variable gfx_init_screen2::col2#0 to live range equivalence class [ gfx_init_screen2::col2#0 ]
Added variable gfx_init_screen2::$3 to live range equivalence class [ gfx_init_screen2::$3 ]
Added variable gfx_init_screen2::$4 to live range equivalence class [ gfx_init_screen2::$4 ]
Added variable gfx_init_screen3::$0 to live range equivalence class [ gfx_init_screen3::$0 ]
Added variable gfx_init_screen3::$1 to live range equivalence class [ gfx_init_screen3::$1 ]
Added variable gfx_init_screen3::$2 to live range equivalence class [ gfx_init_screen3::$2 ]
Added variable gfx_init_screen3::$3 to live range equivalence class [ gfx_init_screen3::$3 ]
Added variable bitmap_line::x2#0 to live range equivalence class [ bitmap_line::x2#0 ]
Added variable bitmap_line::y2#0 to live range equivalence class [ bitmap_line::y2#0 ]
Added variable gfx_init_plane_8bppchunky::$5 to live range equivalence class [ gfx_init_plane_8bppchunky::$5 ]
Added variable gfx_init_plane_8bppchunky::c#0 to live range equivalence class [ gfx_init_plane_8bppchunky::c#0 ]
Added variable gfx_init_plane_charset8::$2 to live range equivalence class [ gfx_init_plane_charset8::$2 ]
Added variable gfx_init_plane_horisontal::$2 to live range equivalence class [ gfx_init_plane_horisontal::$2 ]
Added variable gfx_init_plane_horisontal2::$2 to live range equivalence class [ gfx_init_plane_horisontal2::$2 ]
Added variable gfx_init_plane_horisontal2::row#0 to live range equivalence class [ gfx_init_plane_horisontal2::row#0 ]
Added variable print_str_lines::ch#0 to live range equivalence class [ print_str_lines::ch#0 ]
Added variable print_char::ch#0 to live range equivalence class [ print_char::ch#0 ]
Added variable form_set_screen::$0 to live range equivalence class [ form_set_screen::$0 ]
Added variable form_set_screen::$1 to live range equivalence class [ form_set_screen::$1 ]
Added variable form_field_ptr::return#3 to live range equivalence class [ form_field_ptr::return#3 ]
Added variable form_control::field#0 to live range equivalence class [ form_control::field#0 ]
Added variable form_control::$12 to live range equivalence class [ form_control::$12 ]
Added variable keyboard_event_get::return#4 to live range equivalence class [ keyboard_event_get::return#4 ]
Added variable form_control::key_event#0 to live range equivalence class [ form_control::key_event#0 ]
Added variable form_control::$14 to live range equivalence class [ form_control::$14 ]
Added variable form_control::$15 to live range equivalence class [ form_control::$15 ]
Added variable form_control::$22 to live range equivalence class [ form_control::$22 ]
Added variable form_control::$13 to live range equivalence class [ form_control::$13 ]
Added variable keyboard_matrix_read::rowid#0 to live range equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to live range equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_event_scan::row_scan#0 to live range equivalence class [ keyboard_event_scan::row_scan#0 ]
Added variable keyboard_event_pressed::return#0 to live range equivalence class [ keyboard_event_pressed::return#0 ]
Added variable keyboard_event_scan::$0 to live range equivalence class [ keyboard_event_scan::$0 ]
Added variable keyboard_event_pressed::return#1 to live range equivalence class [ keyboard_event_pressed::return#1 ]
Added variable keyboard_event_scan::$3 to live range equivalence class [ keyboard_event_scan::$3 ]
Added variable keyboard_event_pressed::return#2 to live range equivalence class [ keyboard_event_pressed::return#2 ]
Added variable keyboard_event_scan::$6 to live range equivalence class [ keyboard_event_scan::$6 ]
Added variable keyboard_event_pressed::return#3 to live range equivalence class [ keyboard_event_pressed::return#3 ]
Added variable keyboard_event_scan::$9 to live range equivalence class [ keyboard_event_scan::$9 ]
Added variable keyboard_event_scan::$15 to live range equivalence class [ keyboard_event_scan::$15 ]
Added variable keyboard_event_scan::$16 to live range equivalence class [ keyboard_event_scan::$16 ]
Added variable keyboard_event_scan::event_type#0 to live range equivalence class [ keyboard_event_scan::event_type#0 ]
Added variable keyboard_event_scan::$23 to live range equivalence class [ keyboard_event_scan::$23 ]
Added variable bitmap_init::$7 to live range equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$4 to live range equivalence class [ bitmap_init::$4 ]
Added variable bitmap_init::$5 to live range equivalence class [ bitmap_init::$5 ]
Added variable bitmap_init::$6 to live range equivalence class [ bitmap_init::$6 ]
Added variable abs_u16::return#0 to live range equivalence class [ abs_u16::return#0 ]
Added variable bitmap_line::dx#0 to live range equivalence class [ bitmap_line::dx#0 ]
Added variable abs_u16::return#1 to live range equivalence class [ abs_u16::return#1 ]
Added variable bitmap_line::dy#0 to live range equivalence class [ bitmap_line::dy#0 ]
Added variable sgn_u16::return#0 to live range equivalence class [ sgn_u16::return#0 ]
Added variable bitmap_line::sx#0 to live range equivalence class [ bitmap_line::sx#0 ]
Added variable sgn_u16::return#1 to live range equivalence class [ sgn_u16::return#1 ]
Added variable bitmap_line::sy#0 to live range equivalence class [ bitmap_line::sy#0 ]
Added variable gfx_init_plane_fill::$0 to live range equivalence class [ gfx_init_plane_fill::$0 ]
Added variable gfx_init_plane_fill::$1 to live range equivalence class [ gfx_init_plane_fill::$1 ]
Added variable gfx_init_plane_fill::gfxbCpuBank#0 to live range equivalence class [ gfx_init_plane_fill::gfxbCpuBank#0 ]
Added variable gfx_init_plane_fill::$4 to live range equivalence class [ gfx_init_plane_fill::$4 ]
Added variable gfx_init_plane_fill::$5 to live range equivalence class [ gfx_init_plane_fill::$5 ]
Added variable gfx_init_plane_fill::gfxb#0 to live range equivalence class [ gfx_init_plane_fill::gfxb#0 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable form_field_ptr::y#0 to live range equivalence class [ form_field_ptr::y#0 ]
Added variable form_field_ptr::line#0 to live range equivalence class [ form_field_ptr::line#0 ]
Added variable form_field_ptr::x#0 to live range equivalence class [ form_field_ptr::x#0 ]
Added variable form_field_ptr::return#0 to live range equivalence class [ form_field_ptr::return#0 ]
Added variable keyboard_matrix_read::return#0 to live range equivalence class [ keyboard_matrix_read::return#0 ]
Added variable keyboard_event_pressed::$0 to live range equivalence class [ keyboard_event_pressed::$0 ]
Added variable keyboard_event_pressed::row_bits#0 to live range equivalence class [ keyboard_event_pressed::row_bits#0 ]
Added variable keyboard_event_pressed::$1 to live range equivalence class [ keyboard_event_pressed::$1 ]
Added variable keyboard_event_pressed::return#10 to live range equivalence class [ keyboard_event_pressed::return#10 ]
Added variable abs_u16::$0 to live range equivalence class [ abs_u16::$0 ]
Added variable abs_u16::$1 to live range equivalence class [ abs_u16::$1 ]
Added variable sgn_u16::$0 to live range equivalence class [ sgn_u16::$0 ]
Added variable sgn_u16::$1 to live range equivalence class [ sgn_u16::$1 ]
Added variable bitmap_plot::plotter#0 to live range equivalence class [ bitmap_plot::plotter#0 ]
Added variable bitmap_plot::$0 to live range equivalence class [ bitmap_plot::$0 ]
Added variable bitmap_plot::plotter#1 to live range equivalence class [ bitmap_plot::plotter#1 ]
Added variable bitmap_plot::$1 to live range equivalence class [ bitmap_plot::$1 ]
Complete equivalence classes
[ form_mode::i#2 form_mode::i#1 ]
[ form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ]
[ form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ]
[ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
[ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
[ gfx_mode::VICII_control#4 gfx_mode::VICII_control#2 gfx_mode::VICII_control#5 ]
[ gfx_mode::VICII_control2#2 ]
[ gfx_mode::cy#4 gfx_mode::cy#1 ]
[ gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 ]
[ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
[ gfx_mode::cx#2 gfx_mode::cx#1 ]
[ gfx_mode::j#2 gfx_mode::j#1 ]
[ gfx_mode::i#2 gfx_mode::i#1 ]
[ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
[ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
[ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
[ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
[ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
[ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
[ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
[ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
[ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
[ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
[ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
[ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
[ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
[ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
[ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
[ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
[ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
[ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
[ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
[ gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ]
[ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
[ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
[ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
[ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
[ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
[ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
[ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
[ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
[ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
[ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
[ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
[ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
[ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
[ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
[ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
[ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
[ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
[ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
[ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
[ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
[ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
[ print_set_screen::screen#2 ]
[ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
[ print_char_cursor#43 print_char_cursor#2 print_char_cursor#72 print_char_cursor#73 print_char_cursor#44 print_char_cursor#29 ]
[ form_set_screen::line#2 form_set_screen::line#1 ]
[ form_set_screen::y#2 form_set_screen::y#1 ]
[ form_render_values::idx#2 form_render_values::idx#1 ]
[ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
[ render_preset_name::name#13 ]
[ form_control::return#2 ]
[ apply_preset::preset#15 ]
[ apply_preset::i#2 apply_preset::i#1 ]
[ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
[ get_plane::return#14 ]
[ get_VICII_screen::idx#2 get_VICII_screen::idx#0 get_VICII_screen::idx#1 ]
[ get_VICII_screen::return#5 ]
[ get_VICII_charset::return#2 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_modifiers#22 keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#2 keyboard_modifiers#3 keyboard_modifiers#4 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
[ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ]
[ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ]
[ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
[ gfx_init_plane_fill::plane_addr#3 ]
[ gfx_init_plane_fill::fill#6 ]
[ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
[ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
[ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
[ memset::num#3 ]
[ memset::str#4 memset::str#0 ]
[ memset::c#5 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ]
[ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
[ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
[ print_str_at::at#2 print_str_at::at#0 ]
[ keyboard_event_pressed::keycode#4 ]
[ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ]
[ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]
[ sgn_u16::return#4 ]
[ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ]
[ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ]
[ form_control::return#0 ]
[ form_mode::$11 ]
[ apply_preset::idx#0 ]
[ gfx_mode::$18 ]
[ gfx_mode::plane_a_offs#0 ]
[ get_plane::return#16 ]
[ gfx_mode::$20 ]
[ gfx_mode::plane_a#0 ]
[ gfx_mode::$22 ]
[ gfx_mode::$23 ]
[ gfx_mode::$24 ]
[ gfx_mode::$25 ]
[ gfx_mode::$26 ]
[ gfx_mode::$27 ]
[ gfx_mode::$28 ]
[ gfx_mode::$29 ]
[ gfx_mode::$30 ]
[ gfx_mode::$31 ]
[ gfx_mode::$32 ]
[ gfx_mode::plane_b_offs#0 ]
[ get_plane::return#17 ]
[ gfx_mode::$34 ]
[ gfx_mode::plane_b#0 ]
[ gfx_mode::$36 ]
[ gfx_mode::$37 ]
[ gfx_mode::$38 ]
[ gfx_mode::$39 ]
[ gfx_mode::$40 ]
[ gfx_mode::$41 ]
[ gfx_mode::$42 ]
[ gfx_mode::$43 ]
[ gfx_mode::$44 ]
[ gfx_mode::$45 ]
[ get_VICII_screen::return#10 ]
[ gfx_mode::$82 ]
[ gfx_mode::$47 ]
[ gfx_mode::$48 ]
[ get_VICII_charset::idx#0 ]
[ get_VICII_charset::return#4 ]
[ gfx_mode::$83 ]
[ gfx_mode::$50 ]
[ gfx_mode::$51 ]
[ gfx_mode::$52 ]
[ gfx_mode::$84 ]
[ gfx_mode::$53 ]
[ get_VICII_screen::return#11 ]
[ gfx_mode::$55 ]
[ gfx_mode::$56 ]
[ gfx_mode::$57 ]
[ gfx_mode::$58 ]
[ gfx_mode::$59 ]
[ gfx_mode::$60 ]
[ gfx_mode::$61 ]
[ gfx_mode::$62 ]
[ keyboard_event_get::return#3 ]
[ gfx_mode::keyboard_event#0 ]
[ gfx_init_screen0::$0 ]
[ gfx_init_screen0::$1 ]
[ gfx_init_screen0::$2 ]
[ gfx_init_screen0::$3 ]
[ gfx_init_screen1::$0 ]
[ gfx_init_screen1::$1 ]
[ gfx_init_screen2::$0 ]
[ gfx_init_screen2::col#0 ]
[ gfx_init_screen2::col2#0 ]
[ gfx_init_screen2::$3 ]
[ gfx_init_screen2::$4 ]
[ gfx_init_screen3::$0 ]
[ gfx_init_screen3::$1 ]
[ gfx_init_screen3::$2 ]
[ gfx_init_screen3::$3 ]
[ bitmap_line::x2#0 ]
[ bitmap_line::y2#0 ]
[ gfx_init_plane_8bppchunky::$5 ]
[ gfx_init_plane_8bppchunky::c#0 ]
[ gfx_init_plane_charset8::$2 ]
[ gfx_init_plane_horisontal::$2 ]
[ gfx_init_plane_horisontal2::$2 ]
[ gfx_init_plane_horisontal2::row#0 ]
[ print_str_lines::ch#0 ]
[ print_char::ch#0 ]
[ form_set_screen::$0 ]
[ form_set_screen::$1 ]
[ form_field_ptr::return#3 ]
[ form_control::field#0 ]
[ form_control::$12 ]
[ keyboard_event_get::return#4 ]
[ form_control::key_event#0 ]
[ form_control::$14 ]
[ form_control::$15 ]
[ form_control::$22 ]
[ form_control::$13 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_event_scan::row_scan#0 ]
[ keyboard_event_pressed::return#0 ]
[ keyboard_event_scan::$0 ]
[ keyboard_event_pressed::return#1 ]
[ keyboard_event_scan::$3 ]
[ keyboard_event_pressed::return#2 ]
[ keyboard_event_scan::$6 ]
[ keyboard_event_pressed::return#3 ]
[ keyboard_event_scan::$9 ]
[ keyboard_event_scan::$15 ]
[ keyboard_event_scan::$16 ]
[ keyboard_event_scan::event_type#0 ]
[ keyboard_event_scan::$23 ]
[ bitmap_init::$7 ]
[ bitmap_init::$4 ]
[ bitmap_init::$5 ]
[ bitmap_init::$6 ]
[ abs_u16::return#0 ]
[ bitmap_line::dx#0 ]
[ abs_u16::return#1 ]
[ bitmap_line::dy#0 ]
[ sgn_u16::return#0 ]
[ bitmap_line::sx#0 ]
[ sgn_u16::return#1 ]
[ bitmap_line::sy#0 ]
[ gfx_init_plane_fill::$0 ]
[ gfx_init_plane_fill::$1 ]
[ gfx_init_plane_fill::gfxbCpuBank#0 ]
[ gfx_init_plane_fill::$4 ]
[ gfx_init_plane_fill::$5 ]
[ gfx_init_plane_fill::gfxb#0 ]
[ memset::end#0 ]
[ form_field_ptr::y#0 ]
[ form_field_ptr::line#0 ]
[ form_field_ptr::x#0 ]
[ form_field_ptr::return#0 ]
[ keyboard_matrix_read::return#0 ]
[ keyboard_event_pressed::$0 ]
[ keyboard_event_pressed::row_bits#0 ]
[ keyboard_event_pressed::$1 ]
[ keyboard_event_pressed::return#10 ]
[ abs_u16::$0 ]
[ abs_u16::$1 ]
[ sgn_u16::$0 ]
[ sgn_u16::$1 ]
[ bitmap_plot::plotter#0 ]
[ bitmap_plot::$0 ]
[ bitmap_plot::plotter#1 ]
[ bitmap_plot::$1 ]
Allocated zp[1]:2 [ form_mode::i#2 form_mode::i#1 ]
Allocated zp[1]:3 [ form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ]
Allocated zp[1]:4 [ form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ]
Allocated zp[1]:5 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Allocated zp[1]:6 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Allocated zp[1]:7 [ gfx_mode::VICII_control#4 gfx_mode::VICII_control#2 gfx_mode::VICII_control#5 ]
Allocated zp[1]:8 [ gfx_mode::VICII_control2#2 ]
Allocated zp[1]:9 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Allocated zp[2]:10 [ gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 ]
Allocated zp[2]:12 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
Allocated zp[1]:14 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Allocated zp[1]:15 [ gfx_mode::j#2 gfx_mode::j#1 ]
Allocated zp[1]:16 [ gfx_mode::i#2 gfx_mode::i#1 ]
Allocated zp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Allocated zp[1]:18 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Allocated zp[2]:19 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
Allocated zp[1]:21 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Allocated zp[1]:22 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Allocated zp[2]:23 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
Allocated zp[1]:25 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Allocated zp[1]:26 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Allocated zp[2]:27 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
Allocated zp[1]:29 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Allocated zp[1]:30 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Allocated zp[2]:31 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
Allocated zp[1]:33 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Allocated zp[2]:34 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
Allocated zp[1]:36 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Allocated zp[1]:37 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Allocated zp[2]:38 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
Allocated zp[2]:40 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
Allocated zp[1]:42 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Allocated zp[1]:43 [ gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ]
Allocated zp[1]:44 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Allocated zp[2]:45 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
Allocated zp[1]:47 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Allocated zp[2]:48 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
Allocated zp[1]:50 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Allocated zp[2]:51 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
Allocated zp[1]:53 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Allocated zp[1]:54 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Allocated zp[2]:55 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
Allocated zp[1]:57 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Allocated zp[1]:58 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Allocated zp[1]:59 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
Allocated zp[1]:60 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Allocated zp[2]:61 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
Allocated zp[1]:63 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Allocated zp[1]:64 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Allocated zp[2]:65 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
Allocated zp[1]:67 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Allocated zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Allocated zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
Allocated zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Allocated zp[2]:72 [ print_set_screen::screen#2 ]
Allocated zp[2]:74 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
Allocated zp[2]:76 [ print_char_cursor#43 print_char_cursor#2 print_char_cursor#72 print_char_cursor#73 print_char_cursor#44 print_char_cursor#29 ]
Allocated zp[2]:78 [ form_set_screen::line#2 form_set_screen::line#1 ]
Allocated zp[1]:80 [ form_set_screen::y#2 form_set_screen::y#1 ]
Allocated zp[1]:81 [ form_render_values::idx#2 form_render_values::idx#1 ]
Allocated zp[1]:82 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
Allocated zp[2]:83 [ render_preset_name::name#13 ]
Allocated zp[1]:85 [ form_control::return#2 ]
Allocated zp[2]:86 [ apply_preset::preset#15 ]
Allocated zp[1]:88 [ apply_preset::i#2 apply_preset::i#1 ]
Allocated zp[1]:89 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
Allocated zp[4]:90 [ get_plane::return#14 ]
Allocated zp[1]:94 [ get_VICII_screen::idx#2 get_VICII_screen::idx#0 get_VICII_screen::idx#1 ]
Allocated zp[2]:95 [ get_VICII_screen::return#5 ]
Allocated zp[2]:97 [ get_VICII_charset::return#2 ]
Allocated zp[1]:99 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Allocated zp[1]:100 [ keyboard_modifiers#22 keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#2 keyboard_modifiers#3 keyboard_modifiers#4 ]
Allocated zp[1]:101 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Allocated zp[1]:102 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Allocated zp[1]:103 [ keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ]
Allocated zp[1]:104 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
Allocated zp[1]:105 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp[1]:106 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp[1]:107 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp[2]:108 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp[2]:110 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
Allocated zp[2]:112 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ]
Allocated zp[2]:114 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ]
Allocated zp[2]:116 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
Allocated zp[1]:118 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
Allocated zp[4]:119 [ gfx_init_plane_fill::plane_addr#3 ]
Allocated zp[1]:123 [ gfx_init_plane_fill::fill#6 ]
Allocated zp[1]:124 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Allocated zp[2]:125 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
Allocated zp[1]:127 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Allocated zp[2]:128 [ memset::num#3 ]
Allocated zp[2]:130 [ memset::str#4 memset::str#0 ]
Allocated zp[1]:132 [ memset::c#5 ]
Allocated zp[2]:133 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:135 [ print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ]
Allocated zp[1]:137 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
Allocated zp[2]:138 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
Allocated zp[2]:140 [ print_str_at::at#2 print_str_at::at#0 ]
Allocated zp[1]:142 [ keyboard_event_pressed::keycode#4 ]
Allocated zp[2]:143 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ]
Allocated zp[2]:145 [ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]
Allocated zp[2]:147 [ sgn_u16::return#4 ]
Allocated zp[1]:149 [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ]
Allocated zp[2]:150 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ]
Allocated zp[1]:152 [ form_control::return#0 ]
Allocated zp[1]:153 [ form_mode::$11 ]
Allocated zp[1]:154 [ apply_preset::idx#0 ]
Allocated zp[1]:155 [ gfx_mode::$18 ]
Allocated zp[1]:156 [ gfx_mode::plane_a_offs#0 ]
Allocated zp[4]:157 [ get_plane::return#16 ]
Allocated zp[4]:161 [ gfx_mode::$20 ]
Allocated zp[4]:165 [ gfx_mode::plane_a#0 ]
Allocated zp[2]:169 [ gfx_mode::$22 ]
Allocated zp[1]:171 [ gfx_mode::$23 ]
Allocated zp[2]:172 [ gfx_mode::$24 ]
Allocated zp[1]:174 [ gfx_mode::$25 ]
Allocated zp[2]:175 [ gfx_mode::$26 ]
Allocated zp[1]:177 [ gfx_mode::$27 ]
Allocated zp[1]:178 [ gfx_mode::$28 ]
Allocated zp[1]:179 [ gfx_mode::$29 ]
Allocated zp[1]:180 [ gfx_mode::$30 ]
Allocated zp[1]:181 [ gfx_mode::$31 ]
Allocated zp[1]:182 [ gfx_mode::$32 ]
Allocated zp[1]:183 [ gfx_mode::plane_b_offs#0 ]
Allocated zp[4]:184 [ get_plane::return#17 ]
Allocated zp[4]:188 [ gfx_mode::$34 ]
Allocated zp[4]:192 [ gfx_mode::plane_b#0 ]
Allocated zp[2]:196 [ gfx_mode::$36 ]
Allocated zp[1]:198 [ gfx_mode::$37 ]
Allocated zp[2]:199 [ gfx_mode::$38 ]
Allocated zp[1]:201 [ gfx_mode::$39 ]
Allocated zp[2]:202 [ gfx_mode::$40 ]
Allocated zp[1]:204 [ gfx_mode::$41 ]
Allocated zp[1]:205 [ gfx_mode::$42 ]
Allocated zp[1]:206 [ gfx_mode::$43 ]
Allocated zp[1]:207 [ gfx_mode::$44 ]
Allocated zp[1]:208 [ gfx_mode::$45 ]
Allocated zp[2]:209 [ get_VICII_screen::return#10 ]
Allocated zp[2]:211 [ gfx_mode::$82 ]
Allocated zp[2]:213 [ gfx_mode::$47 ]
Allocated zp[2]:215 [ gfx_mode::$48 ]
Allocated zp[1]:217 [ get_VICII_charset::idx#0 ]
Allocated zp[2]:218 [ get_VICII_charset::return#4 ]
Allocated zp[2]:220 [ gfx_mode::$83 ]
Allocated zp[2]:222 [ gfx_mode::$50 ]
Allocated zp[1]:224 [ gfx_mode::$51 ]
Allocated zp[1]:225 [ gfx_mode::$52 ]
Allocated zp[1]:226 [ gfx_mode::$84 ]
Allocated zp[1]:227 [ gfx_mode::$53 ]
Allocated zp[2]:228 [ get_VICII_screen::return#11 ]
Allocated zp[1]:230 [ gfx_mode::$55 ]
Allocated zp[1]:231 [ gfx_mode::$56 ]
Allocated zp[1]:232 [ gfx_mode::$57 ]
Allocated zp[1]:233 [ gfx_mode::$58 ]
Allocated zp[1]:234 [ gfx_mode::$59 ]
Allocated zp[1]:235 [ gfx_mode::$60 ]
Allocated zp[1]:236 [ gfx_mode::$61 ]
Allocated zp[1]:237 [ gfx_mode::$62 ]
Allocated zp[1]:238 [ keyboard_event_get::return#3 ]
Allocated zp[1]:239 [ gfx_mode::keyboard_event#0 ]
Allocated zp[1]:240 [ gfx_init_screen0::$0 ]
Allocated zp[1]:241 [ gfx_init_screen0::$1 ]
Allocated zp[1]:242 [ gfx_init_screen0::$2 ]
Allocated zp[1]:243 [ gfx_init_screen0::$3 ]
Allocated zp[1]:244 [ gfx_init_screen1::$0 ]
Allocated zp[1]:245 [ gfx_init_screen1::$1 ]
Allocated zp[1]:246 [ gfx_init_screen2::$0 ]
Allocated zp[1]:247 [ gfx_init_screen2::col#0 ]
Allocated zp[1]:248 [ gfx_init_screen2::col2#0 ]
Allocated zp[1]:249 [ gfx_init_screen2::$3 ]
Allocated zp[1]:250 [ gfx_init_screen2::$4 ]
Allocated zp[1]:251 [ gfx_init_screen3::$0 ]
Allocated zp[1]:252 [ gfx_init_screen3::$1 ]
Allocated zp[1]:253 [ gfx_init_screen3::$2 ]
Allocated zp[1]:254 [ gfx_init_screen3::$3 ]
Allocated zp[2]:255 [ bitmap_line::x2#0 ]
Allocated zp[2]:257 [ bitmap_line::y2#0 ]
Allocated zp[2]:259 [ gfx_init_plane_8bppchunky::$5 ]
Allocated zp[1]:261 [ gfx_init_plane_8bppchunky::c#0 ]
Allocated zp[1]:262 [ gfx_init_plane_charset8::$2 ]
Allocated zp[1]:263 [ gfx_init_plane_horisontal::$2 ]
Allocated zp[1]:264 [ gfx_init_plane_horisontal2::$2 ]
Allocated zp[1]:265 [ gfx_init_plane_horisontal2::row#0 ]
Allocated zp[1]:266 [ print_str_lines::ch#0 ]
Allocated zp[1]:267 [ print_char::ch#0 ]
Allocated zp[1]:268 [ form_set_screen::$0 ]
Allocated zp[1]:269 [ form_set_screen::$1 ]
Allocated zp[2]:270 [ form_field_ptr::return#3 ]
Allocated zp[2]:272 [ form_control::field#0 ]
Allocated zp[1]:274 [ form_control::$12 ]
Allocated zp[1]:275 [ keyboard_event_get::return#4 ]
Allocated zp[1]:276 [ form_control::key_event#0 ]
Allocated zp[1]:277 [ form_control::$14 ]
Allocated zp[1]:278 [ form_control::$15 ]
Allocated zp[1]:279 [ form_control::$22 ]
Allocated zp[1]:280 [ form_control::$13 ]
Allocated zp[1]:281 [ keyboard_matrix_read::rowid#0 ]
Allocated zp[1]:282 [ keyboard_matrix_read::return#2 ]
Allocated zp[1]:283 [ keyboard_event_scan::row_scan#0 ]
Allocated zp[1]:284 [ keyboard_event_pressed::return#0 ]
Allocated zp[1]:285 [ keyboard_event_scan::$0 ]
Allocated zp[1]:286 [ keyboard_event_pressed::return#1 ]
Allocated zp[1]:287 [ keyboard_event_scan::$3 ]
Allocated zp[1]:288 [ keyboard_event_pressed::return#2 ]
Allocated zp[1]:289 [ keyboard_event_scan::$6 ]
Allocated zp[1]:290 [ keyboard_event_pressed::return#3 ]
Allocated zp[1]:291 [ keyboard_event_scan::$9 ]
Allocated zp[1]:292 [ keyboard_event_scan::$15 ]
Allocated zp[1]:293 [ keyboard_event_scan::$16 ]
Allocated zp[1]:294 [ keyboard_event_scan::event_type#0 ]
Allocated zp[1]:295 [ keyboard_event_scan::$23 ]
Allocated zp[1]:296 [ bitmap_init::$7 ]
Allocated zp[1]:297 [ bitmap_init::$4 ]
Allocated zp[1]:298 [ bitmap_init::$5 ]
Allocated zp[1]:299 [ bitmap_init::$6 ]
Allocated zp[2]:300 [ abs_u16::return#0 ]
Allocated zp[2]:302 [ bitmap_line::dx#0 ]
Allocated zp[2]:304 [ abs_u16::return#1 ]
Allocated zp[2]:306 [ bitmap_line::dy#0 ]
Allocated zp[2]:308 [ sgn_u16::return#0 ]
Allocated zp[2]:310 [ bitmap_line::sx#0 ]
Allocated zp[2]:312 [ sgn_u16::return#1 ]
Allocated zp[2]:314 [ bitmap_line::sy#0 ]
Allocated zp[4]:316 [ gfx_init_plane_fill::$0 ]
Allocated zp[2]:320 [ gfx_init_plane_fill::$1 ]
Allocated zp[1]:322 [ gfx_init_plane_fill::gfxbCpuBank#0 ]
Allocated zp[2]:323 [ gfx_init_plane_fill::$4 ]
Allocated zp[2]:325 [ gfx_init_plane_fill::$5 ]
Allocated zp[2]:327 [ gfx_init_plane_fill::gfxb#0 ]
Allocated zp[2]:329 [ memset::end#0 ]
Allocated zp[1]:331 [ form_field_ptr::y#0 ]
Allocated zp[2]:332 [ form_field_ptr::line#0 ]
Allocated zp[1]:334 [ form_field_ptr::x#0 ]
Allocated zp[2]:335 [ form_field_ptr::return#0 ]
Allocated zp[1]:337 [ keyboard_matrix_read::return#0 ]
Allocated zp[1]:338 [ keyboard_event_pressed::$0 ]
Allocated zp[1]:339 [ keyboard_event_pressed::row_bits#0 ]
Allocated zp[1]:340 [ keyboard_event_pressed::$1 ]
Allocated zp[1]:341 [ keyboard_event_pressed::return#10 ]
Allocated zp[1]:342 [ abs_u16::$0 ]
Allocated zp[1]:343 [ abs_u16::$1 ]
Allocated zp[1]:344 [ sgn_u16::$0 ]
Allocated zp[1]:345 [ sgn_u16::$1 ]
Allocated zp[2]:346 [ bitmap_plot::plotter#0 ]
Allocated zp[2]:348 [ bitmap_plot::$0 ]
Allocated zp[2]:350 [ bitmap_plot::plotter#1 ]
Allocated zp[1]:352 [ bitmap_plot::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:297 [ bitmap_init::$4 ] has ALU potential.
Statement [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *PROCPORT = PROCPORT_RAM_IO [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *DTV_FEATURE = DTV_FEATURE_ENABLE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [12] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = $ff [ ] ( keyboard_init:4 [ ] { }  ) always clobbers reg byte a 
Statement [13] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) = 0 [ ] ( keyboard_init:4 [ ] { }  ) always clobbers reg byte a 
Statement [64] *DTV_GRAPHICS_VIC_BANK = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ]
Removing always clobbered register reg byte a as potential for zp[1]:103 [ keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ]
Statement [65] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [66] *DTV_COLOR_BANK_HI = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [67] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*)CIA2) = 3 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [69] *DTV_CONTROL = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = VICII_DEN|VICII_RSEL|3 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [71] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = VICII_CSEL [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [72] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = (byte)(word)FORM_SCREEN&$3fff/$40|(word)FORM_CHARSET&$3fff/$400 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [73] *DTV_PLANEA_START_LO = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [74] *DTV_PLANEA_START_MI = >FORM_SCREEN [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [75] *DTV_PLANEA_START_HI = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [77] DTV_PALETTE[form_mode::i#2] = DTV_PALETTE_DEFAULT[form_mode::i#2] [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_mode::i#2 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_mode::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ form_mode::i#2 form_mode::i#1 ]
Statement [80] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [81] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [84] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto form_mode::@4 [ form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_mode::preset_current#6 ] ( form_mode:9 [ form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_mode::preset_current#6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Statement [98] if(*form_ctrl_line==0) goto gfx_mode::@1 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [101] if(*form_ctrl_borof==0) goto gfx_mode::@2 [ keyboard_events_size#25 gfx_mode::dtv_control#14 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#14 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Statement [102] gfx_mode::dtv_control#2 = gfx_mode::dtv_control#14 | DTV_BORDER_OFF [ keyboard_events_size#25 gfx_mode::dtv_control#2 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#2 ] { }  ) always clobbers reg byte a 
Statement [104] if(*form_ctrl_hicol==0) goto gfx_mode::@3 [ keyboard_events_size#25 gfx_mode::dtv_control#15 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#15 ] { }  ) always clobbers reg byte a 
Statement [105] gfx_mode::dtv_control#3 = gfx_mode::dtv_control#15 | DTV_HIGHCOLOR [ keyboard_events_size#25 gfx_mode::dtv_control#3 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#3 ] { }  ) always clobbers reg byte a 
Statement [107] if(*form_ctrl_overs==0) goto gfx_mode::@4 [ keyboard_events_size#25 gfx_mode::dtv_control#10 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#10 ] { }  ) always clobbers reg byte a 
Statement [108] gfx_mode::dtv_control#4 = gfx_mode::dtv_control#10 | DTV_OVERSCAN [ keyboard_events_size#25 gfx_mode::dtv_control#4 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#4 ] { }  ) always clobbers reg byte a 
Statement [110] if(*form_ctrl_colof==0) goto gfx_mode::@5 [ keyboard_events_size#25 gfx_mode::dtv_control#11 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#11 ] { }  ) always clobbers reg byte a 
Statement [111] gfx_mode::dtv_control#5 = gfx_mode::dtv_control#11 | DTV_COLORRAM_OFF [ keyboard_events_size#25 gfx_mode::dtv_control#5 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#5 ] { }  ) always clobbers reg byte a 
Statement [113] if(*form_ctrl_chunk==0) goto gfx_mode::@6 [ keyboard_events_size#25 gfx_mode::dtv_control#13 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#13 ] { }  ) always clobbers reg byte a 
Statement [114] gfx_mode::dtv_control#6 = gfx_mode::dtv_control#13 | DTV_CHUNKY [ keyboard_events_size#25 gfx_mode::dtv_control#6 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#6 ] { }  ) always clobbers reg byte a 
Statement [117] if(*form_ctrl_ecm==0) goto gfx_mode::@7 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [120] if(*form_ctrl_bmm==0) goto gfx_mode::@8 [ keyboard_events_size#25 gfx_mode::VICII_control#5 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::VICII_control#5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ gfx_mode::VICII_control#4 gfx_mode::VICII_control#2 gfx_mode::VICII_control#5 ]
Statement [121] gfx_mode::VICII_control#2 = gfx_mode::VICII_control#5 | VICII_BMM [ keyboard_events_size#25 gfx_mode::VICII_control#2 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::VICII_control#2 ] { }  ) always clobbers reg byte a 
Statement [124] if(*form_ctrl_mcm==0) goto gfx_mode::@9 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [128] gfx_mode::$18 = *form_a_start_hi << 4 [ keyboard_events_size#25 gfx_mode::$18 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$18 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Statement [129] gfx_mode::plane_a_offs#0 = gfx_mode::$18 | *form_a_start_lo [ keyboard_events_size#25 gfx_mode::plane_a_offs#0 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a_offs#0 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Statement [132] get_plane::return#16 = get_plane::return#14 [ keyboard_events_size#25 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a_offs#0 get_plane::return#16 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:156 [ gfx_mode::plane_a_offs#0 ]
Statement [133] gfx_mode::$20 = get_plane::return#16 [ keyboard_events_size#25 gfx_mode::plane_a_offs#0 gfx_mode::$20 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a_offs#0 gfx_mode::$20 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [134] gfx_mode::plane_a#0 = gfx_mode::$20 + gfx_mode::plane_a_offs#0 [ keyboard_events_size#25 gfx_mode::plane_a#0 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a#0 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [135] gfx_mode::$22 = < gfx_mode::plane_a#0 [ keyboard_events_size#25 gfx_mode::plane_a#0 gfx_mode::$22 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a#0 gfx_mode::$22 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [138] gfx_mode::$24 = < gfx_mode::plane_a#0 [ keyboard_events_size#25 gfx_mode::plane_a#0 gfx_mode::$24 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a#0 gfx_mode::$24 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [141] gfx_mode::$26 = > gfx_mode::plane_a#0 [ keyboard_events_size#25 gfx_mode::$26 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$26 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [144] gfx_mode::$28 = *form_a_step_hi << 4 [ keyboard_events_size#25 gfx_mode::$28 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$28 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [145] gfx_mode::$29 = gfx_mode::$28 | *form_a_step_lo [ keyboard_events_size#25 gfx_mode::$29 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$29 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [147] gfx_mode::$30 = *form_a_mod_hi << 4 [ keyboard_events_size#25 gfx_mode::$30 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$30 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [148] gfx_mode::$31 = gfx_mode::$30 | *form_a_mod_lo [ keyboard_events_size#25 gfx_mode::$31 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$31 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [150] *DTV_PLANEA_MODULO_HI = 0 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [151] gfx_mode::$32 = *form_b_start_hi << 4 [ keyboard_events_size#25 gfx_mode::$32 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$32 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [152] gfx_mode::plane_b_offs#0 = gfx_mode::$32 | *form_b_start_lo [ keyboard_events_size#25 gfx_mode::plane_b_offs#0 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b_offs#0 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [155] get_plane::return#17 = get_plane::return#14 [ keyboard_events_size#25 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b_offs#0 get_plane::return#17 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:183 [ gfx_mode::plane_b_offs#0 ]
Statement [156] gfx_mode::$34 = get_plane::return#17 [ keyboard_events_size#25 gfx_mode::plane_b_offs#0 gfx_mode::$34 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b_offs#0 gfx_mode::$34 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [157] gfx_mode::plane_b#0 = gfx_mode::$34 + gfx_mode::plane_b_offs#0 [ keyboard_events_size#25 gfx_mode::plane_b#0 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b#0 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [158] gfx_mode::$36 = < gfx_mode::plane_b#0 [ keyboard_events_size#25 gfx_mode::plane_b#0 gfx_mode::$36 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b#0 gfx_mode::$36 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [161] gfx_mode::$38 = < gfx_mode::plane_b#0 [ keyboard_events_size#25 gfx_mode::plane_b#0 gfx_mode::$38 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b#0 gfx_mode::$38 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [164] gfx_mode::$40 = > gfx_mode::plane_b#0 [ keyboard_events_size#25 gfx_mode::$40 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$40 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [167] gfx_mode::$42 = *form_b_step_hi << 4 [ keyboard_events_size#25 gfx_mode::$42 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$42 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [168] gfx_mode::$43 = gfx_mode::$42 | *form_b_step_lo [ keyboard_events_size#25 gfx_mode::$43 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$43 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [170] gfx_mode::$44 = *form_b_mod_hi << 4 [ keyboard_events_size#25 gfx_mode::$44 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$44 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [171] gfx_mode::$45 = gfx_mode::$44 | *form_b_mod_lo [ keyboard_events_size#25 gfx_mode::$45 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$45 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [173] *DTV_PLANEB_MODULO_HI = 0 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [174] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [175] *((byte*)CIA2) = 3^(byte)(word)VICII_SCREEN0/$4000 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [178] get_VICII_screen::return#10 = get_VICII_screen::return#5 [ keyboard_events_size#25 get_VICII_screen::return#10 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 get_VICII_screen::return#10 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [179] gfx_mode::$82 = get_VICII_screen::return#10 [ keyboard_events_size#25 gfx_mode::$82 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$82 ] { { get_VICII_charset::return#2 = get_VICII_charset::return#4 } }  ) always clobbers reg byte a 
Statement [180] gfx_mode::$47 = (word)gfx_mode::$82 & $3fff [ keyboard_events_size#25 gfx_mode::$47 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$47 ] { { get_VICII_charset::return#2 = get_VICII_charset::return#4 } }  ) always clobbers reg byte a 
Statement [181] gfx_mode::$48 = gfx_mode::$47 >> 6 [ keyboard_events_size#25 gfx_mode::$48 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$48 ] { { get_VICII_charset::return#2 = get_VICII_charset::return#4 } }  ) always clobbers reg byte a 
Statement [184] get_VICII_charset::return#4 = get_VICII_charset::return#2 [ keyboard_events_size#25 gfx_mode::$48 get_VICII_charset::return#4 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$48 get_VICII_charset::return#4 ] { { get_VICII_charset::return#2 = get_VICII_charset::return#4 } }  ) always clobbers reg byte a 
Statement [185] gfx_mode::$83 = get_VICII_charset::return#4 [ keyboard_events_size#25 gfx_mode::$48 gfx_mode::$83 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$48 gfx_mode::$83 ] { { get_VICII_screen::idx#1 = get_VICII_screen::idx#2 } { get_VICII_screen::return#11 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [186] gfx_mode::$50 = (word)gfx_mode::$83 & $3fff [ keyboard_events_size#25 gfx_mode::$48 gfx_mode::$50 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$48 gfx_mode::$50 ] { { get_VICII_screen::idx#1 = get_VICII_screen::idx#2 } { get_VICII_screen::return#11 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [188] gfx_mode::$52 = gfx_mode::$51 >> 2 [ keyboard_events_size#25 gfx_mode::$48 gfx_mode::$52 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$48 gfx_mode::$52 ] { { get_VICII_screen::idx#1 = get_VICII_screen::idx#2 } { get_VICII_screen::return#11 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [189] gfx_mode::$84 = (byte)gfx_mode::$48 [ keyboard_events_size#25 gfx_mode::$52 gfx_mode::$84 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$52 gfx_mode::$84 ] { { get_VICII_screen::idx#1 = get_VICII_screen::idx#2 } { get_VICII_screen::return#11 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:225 [ gfx_mode::$52 ]
Statement [194] get_VICII_screen::return#11 = get_VICII_screen::return#5 [ keyboard_events_size#25 get_VICII_screen::return#11 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 get_VICII_screen::return#11 ] { { get_VICII_screen::idx#1 = get_VICII_screen::idx#2 } { get_VICII_screen::return#11 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [195] gfx_mode::VICII_colors#0 = get_VICII_screen::return#11 [ keyboard_events_size#25 gfx_mode::VICII_colors#0 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::VICII_colors#0 ] { }  ) always clobbers reg byte a 
Statement [198] *gfx_mode::col#2 = *gfx_mode::VICII_colors#2 [ keyboard_events_size#25 gfx_mode::cy#4 gfx_mode::VICII_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::cy#4 gfx_mode::VICII_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:3 [ form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ]
Removing always clobbered register reg byte y as potential for zp[1]:103 [ keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:9 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:9 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:14 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:14 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Statement [205] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [206] gfx_mode::$55 = *form_VICII_bg0_hi << 4 [ keyboard_events_size#25 gfx_mode::$55 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$55 ] { }  ) always clobbers reg byte a 
Statement [207] gfx_mode::$56 = gfx_mode::$55 | *form_VICII_bg0_lo [ keyboard_events_size#25 gfx_mode::$56 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$56 ] { }  ) always clobbers reg byte a 
Statement [209] gfx_mode::$57 = *form_VICII_bg1_hi << 4 [ keyboard_events_size#25 gfx_mode::$57 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$57 ] { }  ) always clobbers reg byte a 
Statement [210] gfx_mode::$58 = gfx_mode::$57 | *form_VICII_bg1_lo [ keyboard_events_size#25 gfx_mode::$58 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$58 ] { }  ) always clobbers reg byte a 
Statement [212] gfx_mode::$59 = *form_VICII_bg2_hi << 4 [ keyboard_events_size#25 gfx_mode::$59 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$59 ] { }  ) always clobbers reg byte a 
Statement [213] gfx_mode::$60 = gfx_mode::$59 | *form_VICII_bg2_lo [ keyboard_events_size#25 gfx_mode::$60 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$60 ] { }  ) always clobbers reg byte a 
Statement [215] gfx_mode::$61 = *form_VICII_bg3_hi << 4 [ keyboard_events_size#25 gfx_mode::$61 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$61 ] { }  ) always clobbers reg byte a 
Statement [216] gfx_mode::$62 = gfx_mode::$61 | *form_VICII_bg3_lo [ keyboard_events_size#25 gfx_mode::$62 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$62 ] { }  ) always clobbers reg byte a 
Statement [218] if(*form_dtv_palet==0) goto gfx_mode::@24 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [223] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto gfx_mode::@25 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [233] DTV_PALETTE[gfx_mode::i#2] = DTV_PALETTE_DEFAULT[gfx_mode::i#2] [ keyboard_events_size#25 gfx_mode::i#2 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:16 [ gfx_mode::i#2 gfx_mode::i#1 ]
Statement [240] gfx_init_screen0::$1 = gfx_init_screen0::$0 << 4 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ( gfx_init:6::gfx_init_screen0:16 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:18 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Statement [241] gfx_init_screen0::$2 = gfx_init_screen0::cx#2 & $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ( gfx_init:6::gfx_init_screen0:16 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:241 [ gfx_init_screen0::$1 ]
Statement [243] *gfx_init_screen0::ch#2 = gfx_init_screen0::$3 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ( gfx_init:6::gfx_init_screen0:16 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:18 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Statement [253] gfx_init_screen1::$0 = gfx_init_screen1::cx#2 + gfx_init_screen1::cy#4 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ( gfx_init:6::gfx_init_screen1:18 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:21 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:22 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Statement [255] *gfx_init_screen1::ch#2 = gfx_init_screen1::$1 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ( gfx_init:6::gfx_init_screen1:18 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:21 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:22 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Statement [265] gfx_init_screen2::$0 = gfx_init_screen2::cx#2 + gfx_init_screen2::cy#4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ( gfx_init:6::gfx_init_screen2:20 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:25 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:26 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Statement [267] gfx_init_screen2::col2#0 = $f - gfx_init_screen2::col#0 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ( gfx_init:6::gfx_init_screen2:20 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:247 [ gfx_init_screen2::col#0 ]
Statement [268] gfx_init_screen2::$3 = gfx_init_screen2::col#0 << 4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ( gfx_init:6::gfx_init_screen2:20 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:248 [ gfx_init_screen2::col2#0 ]
Statement [270] *gfx_init_screen2::ch#2 = gfx_init_screen2::$4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ( gfx_init:6::gfx_init_screen2:20 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:25 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:26 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Statement [281] gfx_init_screen3::$1 = gfx_init_screen3::$0 << 4 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ( gfx_init:6::gfx_init_screen3:22 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:29 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:30 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Statement [282] gfx_init_screen3::$2 = gfx_init_screen3::cy#4 & 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ( gfx_init:6::gfx_init_screen3:22 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:252 [ gfx_init_screen3::$1 ]
Statement [284] *gfx_init_screen3::ch#2 = gfx_init_screen3::$3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ( gfx_init:6::gfx_init_screen3:22 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:29 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:30 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Statement [294] *gfx_init_screen4::ch#2 = 0 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ( gfx_init:6::gfx_init_screen4:24 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:33 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:33 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:36 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:36 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Statement [301] *PROCPORT = $32 [ ] ( gfx_init:6::gfx_init_charset:26 [ ] { }  ) always clobbers reg byte a 
Statement [304] *gfx_init_charset::charset#2 = *gfx_init_charset::chargen#2 [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ( gfx_init:6::gfx_init_charset:26 [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:37 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:37 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:42 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:42 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Statement [311] *PROCPORT = $37 [ ] ( gfx_init:6::gfx_init_charset:26 [ ] { }  ) always clobbers reg byte a 
Statement [320] bitmap_line::x1#0 = gfx_init_VICII_bitmap::lines_x[gfx_init_VICII_bitmap::l#2] [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:43 [ gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ]
Statement [321] bitmap_line::y1#0 = gfx_init_VICII_bitmap::lines_y[gfx_init_VICII_bitmap::l#2] [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 ] { }  ) always clobbers reg byte a 
Statement [322] bitmap_line::x2#0 = (gfx_init_VICII_bitmap::lines_x+1)[gfx_init_VICII_bitmap::l#2] [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 ] { }  ) always clobbers reg byte a 
Statement [323] bitmap_line::y2#0 = (gfx_init_VICII_bitmap::lines_y+1)[gfx_init_VICII_bitmap::l#2] [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 ] { }  ) always clobbers reg byte a 
Statement [330] if(gfx_init_plane_8bppchunky::gfxb#3!=$8000) goto gfx_init_plane_8bppchunky::@3 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ( gfx_init:6::gfx_init_plane_8bppchunky:30 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:44 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:47 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Statement [335] gfx_init_plane_8bppchunky::$5 = gfx_init_plane_8bppchunky::x#2 + gfx_init_plane_8bppchunky::y#6 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$5 ] ( gfx_init:6::gfx_init_plane_8bppchunky:30 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$5 ] { }  ) always clobbers reg byte a 
Statement [336] gfx_init_plane_8bppchunky::c#0 = (byte)gfx_init_plane_8bppchunky::$5 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ( gfx_init:6::gfx_init_plane_8bppchunky:30 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] { }  ) always clobbers reg byte a 
Statement [337] *gfx_init_plane_8bppchunky::gfxb#4 = gfx_init_plane_8bppchunky::c#0 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ( gfx_init:6::gfx_init_plane_8bppchunky:30 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:44 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:47 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Statement [340] if(gfx_init_plane_8bppchunky::x#1!=$140) goto gfx_init_plane_8bppchunky::@2 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ( gfx_init:6::gfx_init_plane_8bppchunky:30 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] { }  ) always clobbers reg byte a 
Statement [348] *PROCPORT = PROCPORT_RAM_CHARROM [ ] ( gfx_init:6::gfx_init_plane_charset8:32 [ ] { }  ) always clobbers reg byte a 
Statement [351] gfx_init_plane_charset8::bits#0 = *gfx_init_plane_charset8::chargen#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ( gfx_init:6::gfx_init_plane_charset8:32 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:50 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:50 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:57 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:57 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:53 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:53 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Statement [358] *gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::c#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ( gfx_init:6::gfx_init_plane_charset8:32 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:54 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:58 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Statement [368] *PROCPORT = PROCPORT_RAM_IO [ ] ( gfx_init:6::gfx_init_plane_charset8:32 [ ] { }  ) always clobbers reg byte a 
Statement [377] *gfx_init_plane_horisontal::gfxa#3 = $ff [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( gfx_init:6::gfx_init_plane_horisontal:34 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:60 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:60 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:63 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:63 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Statement [387] *gfx_init_plane_horisontal::gfxa#3 = 0 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( gfx_init:6::gfx_init_plane_horisontal:34 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [393] *gfx_init_plane_vertical::gfxb#2 = $f [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ( gfx_init:6::gfx_init_plane_vertical:36 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:64 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:64 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:67 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:67 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Statement [406] gfx_init_plane_horisontal2::$2 = gfx_init_plane_horisontal2::ay#4 >> 1 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$2 ] ( gfx_init:6::gfx_init_plane_horisontal2:38 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Statement [408] *gfx_init_plane_horisontal2::gfxa#2 = gfx_init_plane_horisontal2::row_bitmask[gfx_init_plane_horisontal2::row#0] [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ( gfx_init:6::gfx_init_plane_horisontal2:38 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Statement [427] print_screen#0 = print_set_screen::screen#2 [ print_screen#0 ] ( form_mode:9::print_set_screen:47 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 ] { }  form_mode:9::print_set_screen:53 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 ] { }  ) always clobbers reg byte a 
Statement [429] memset::str#0 = (void*)print_screen#0 [ print_screen#0 memset::str#0 ] ( form_mode:9::print_cls:49 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::str#0 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::str#0 ] { { memset::str#0 = memset::str#4 } }  ) always clobbers reg byte a 
Statement [433] print_char_cursor#72 = print_screen#0 [ print_screen#0 print_str_lines::str#5 print_char_cursor#72 ] ( form_mode:9::print_str_lines:51 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 print_str_lines::str#5 print_char_cursor#72 ] { }  form_mode:9::print_str_lines:57 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 print_str_lines::str#5 print_char_cursor#72 ] { }  ) always clobbers reg byte a 
Statement [435] if(0!=*print_str_lines::str#3) goto print_str_lines::@2 [ print_str_lines::str#3 print_char_cursor#2 print_line_cursor#1 ] ( form_mode:9::print_str_lines:51 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#3 print_char_cursor#2 print_line_cursor#1 ] { }  form_mode:9::print_str_lines:57 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#3 print_char_cursor#2 print_line_cursor#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [438] print_str_lines::ch#0 = *print_str_lines::str#4 [ print_line_cursor#1 print_str_lines::str#4 print_char_cursor#43 print_str_lines::ch#0 ] ( form_mode:9::print_str_lines:51 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_line_cursor#1 print_str_lines::str#4 print_char_cursor#43 print_str_lines::ch#0 ] { }  form_mode:9::print_str_lines:57 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_line_cursor#1 print_str_lines::str#4 print_char_cursor#43 print_str_lines::ch#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [447] print_char_cursor#73 = print_line_cursor#2 [ print_str_lines::str#0 print_char_cursor#73 print_line_cursor#2 ] ( form_mode:9::print_str_lines:51 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_char_cursor#73 print_line_cursor#2 ] { }  form_mode:9::print_str_lines:57 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_char_cursor#73 print_line_cursor#2 ] { }  ) always clobbers reg byte a 
Statement [454] form_set_screen::line#1 = form_set_screen::line#2 + $28 [ form_set_screen::y#2 form_set_screen::line#1 ] ( form_mode:9::form_set_screen:59 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_set_screen::y#2 form_set_screen::line#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:80 [ form_set_screen::y#2 form_set_screen::y#1 ]
Statement [464] ((byte*)form_field_ptr::line#0)[form_field_ptr::x#0] = print_hextab[form_fields_val[form_render_values::idx#2]] [ form_render_values::idx#2 ] ( form_mode:9::form_render_values:61 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_render_values::idx#2 ] { }  form_mode:9::form_render_values:95 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 form_render_values::idx#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:81 [ form_render_values::idx#2 form_render_values::idx#1 ]
Statement [480] print_str_at::str#1 = render_preset_name::name#13 [ print_str_at::str#1 ] ( form_mode:9::render_preset_name:63 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_at::str#1 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  form_mode:9::render_preset_name:97 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 print_str_at::str#1 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a 
Statement [485] form_field_ptr::return#3 = form_field_ptr::return#0 [ form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_field_ptr::return#3 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_field_ptr::return#3 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#30 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [486] form_control::field#0 = form_field_ptr::return#3 [ form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_control::field#0 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_control::field#0 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [491] if(form_cursor_count#16<FORM_CURSOR_BLINK/2) goto form_control::@2 [ keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [492] form_control::$12 = *form_control::field#0 & $7f [ keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$12 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$12 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:5 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Statement [493] *form_control::field#0 = form_control::$12 [ keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [501] form_control::$14 = *form_control::field#0 & $7f [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_control::$14 keyboard_modifiers#22 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_control::$14 keyboard_modifiers#22 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:100 [ keyboard_modifiers#22 keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#2 keyboard_modifiers#3 keyboard_modifiers#4 ]
Removing always clobbered register reg byte y as potential for zp[1]:100 [ keyboard_modifiers#22 keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#2 keyboard_modifiers#3 keyboard_modifiers#4 ]
Statement [502] *form_control::field#0 = form_control::$14 [ keyboard_events_size#25 form_field_idx#30 keyboard_modifiers#22 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 keyboard_modifiers#22 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [503] form_control::$15 = keyboard_modifiers#22 & KEY_MODIFIER_SHIFT [ keyboard_events_size#25 form_field_idx#30 form_control::$15 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::$15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [515] form_control::$22 = keyboard_modifiers#22 & KEY_MODIFIER_SHIFT [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$22 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$22 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [518] if(form_fields_val[form_field_idx#30]!=$ff) goto form_control::@16 [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [519] form_fields_val[form_field_idx#30] = form_fields_max[form_field_idx#30] [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [520] *form_control::field#0 = print_hextab[form_fields_val[form_field_idx#30]] [ keyboard_events_size#25 form_field_idx#30 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [522] if(form_fields_val[form_field_idx#30]<=form_fields_max[form_field_idx#30]) goto form_control::@16 [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [523] form_fields_val[form_field_idx#30] = 0 [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [526] form_control::$13 = *form_control::field#0 | $80 [ keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$13 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$13 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [527] *form_control::field#0 = form_control::$13 [ keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [544] form_fields_val[apply_preset::i#2] = apply_preset::preset#15[apply_preset::i#2] [ apply_preset::preset#15 apply_preset::i#2 ] ( form_mode:9::apply_preset:93 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 apply_preset::preset#15 apply_preset::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:88 [ apply_preset::i#2 apply_preset::i#1 ]
Statement [585] keyboard_event_scan::keycode#1 = keyboard_event_scan::keycode#11 + 8 [ keyboard_event_scan::row#2 keyboard_events_size#107 keyboard_event_scan::keycode#1 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_events_size#107 keyboard_event_scan::keycode#1 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_events_size#107 keyboard_event_scan::keycode#1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:99 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Statement [600] keyboard_modifiers#2 = keyboard_modifiers#19 | KEY_MODIFIER_RSHIFT [ keyboard_events_size#100 keyboard_modifiers#2 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#2 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#2 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [606] keyboard_modifiers#3 = keyboard_modifiers#20 | KEY_MODIFIER_CTRL [ keyboard_events_size#100 keyboard_modifiers#3 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#3 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#3 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [612] keyboard_modifiers#4 = keyboard_modifiers#21 | KEY_MODIFIER_COMMODORE [ keyboard_events_size#100 keyboard_modifiers#4 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#4 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#4 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [616] keyboard_event_scan::$15 = keyboard_event_scan::row_scan#0 ^ keyboard_scan_values[keyboard_event_scan::row#2] [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$15 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$15 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$15 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:283 [ keyboard_event_scan::row_scan#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:101 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:102 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Statement [620] keyboard_event_scan::event_type#0 = keyboard_event_scan::row_scan#0 & keyboard_matrix_col_bitmask[keyboard_event_scan::col#2] [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::event_type#0 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::event_type#0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::event_type#0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [622] keyboard_events[keyboard_events_size#19] = keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [628] keyboard_scan_values[keyboard_event_scan::row#2] = keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#106 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#106 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#106 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [629] keyboard_event_scan::$23 = keyboard_event_scan::keycode#10 | $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$23 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$23 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$23 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [654] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_init:314 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:107 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [664] abs_u16::w#0 = bitmap_line::x2#0 - bitmap_line::x1#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 abs_u16::w#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 abs_u16::w#0 ] { { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [666] abs_u16::return#0 = abs_u16::return#4 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 abs_u16::return#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 abs_u16::return#0 ] { { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [667] bitmap_line::dx#0 = abs_u16::return#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 ] { { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [668] abs_u16::w#1 = bitmap_line::y2#0 - bitmap_line::y1#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 abs_u16::w#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 abs_u16::w#1 ] { { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [670] abs_u16::return#1 = abs_u16::return#4 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 abs_u16::return#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 abs_u16::return#1 ] { { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [671] bitmap_line::dy#0 = abs_u16::return#1 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { }  ) always clobbers reg byte a 
Statement [672] if(bitmap_line::dx#0!=0) goto bitmap_line::@1 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { }  ) always clobbers reg byte a 
Statement [673] if(bitmap_line::dy#0==0) goto bitmap_line::@4 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { }  ) always clobbers reg byte a 
Statement [674] sgn_u16::w#0 = bitmap_line::x2#0 - bitmap_line::x1#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] { { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [676] sgn_u16::return#0 = sgn_u16::return#4 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] { { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [677] bitmap_line::sx#0 = sgn_u16::return#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] { { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [678] sgn_u16::w#1 = bitmap_line::y2#0 - bitmap_line::y1#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::w#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::w#1 ] { { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [680] sgn_u16::return#1 = sgn_u16::return#4 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] { { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [681] bitmap_line::sy#0 = sgn_u16::return#1 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { }  ) always clobbers reg byte a 
Statement [682] if(bitmap_line::dx#0>bitmap_line::dy#0) goto bitmap_line::@2 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { }  ) always clobbers reg byte a 
Statement [683] bitmap_line::e#0 = bitmap_line::dx#0 >> 1 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] { }  ) always clobbers reg byte a 
Statement [685] bitmap_plot::x#1 = bitmap_line::x#13 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [686] bitmap_plot::y#1 = (byte)bitmap_line::y#4 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [688] bitmap_line::y#1 = bitmap_line::y#4 + bitmap_line::sy#0 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] { }  ) always clobbers reg byte a 
Statement [689] bitmap_line::e#1 = bitmap_line::e#3 + bitmap_line::dx#0 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { }  ) always clobbers reg byte a 
Statement [690] if(bitmap_line::dy#0>=bitmap_line::e#1) goto bitmap_line::@7 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { }  ) always clobbers reg byte a 
Statement [691] bitmap_line::x#1 = bitmap_line::x#13 + bitmap_line::sx#0 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] { }  ) always clobbers reg byte a 
Statement [692] bitmap_line::e#2 = bitmap_line::e#1 - bitmap_line::dy#0 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] { }  ) always clobbers reg byte a 
Statement [694] if(bitmap_line::y#1!=bitmap_line::y2#0) goto bitmap_line::@6 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] { }  ) always clobbers reg byte a 
Statement [696] bitmap_plot::x#2 = bitmap_line::x#6 [ bitmap_line::y#7 bitmap_plot::x#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y#7 bitmap_plot::x#2 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [697] bitmap_plot::y#2 = (byte)bitmap_line::y#7 [ bitmap_plot::x#2 bitmap_plot::y#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#2 bitmap_plot::y#2 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [700] bitmap_line::e1#0 = bitmap_line::dy#0 >> 1 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] { }  ) always clobbers reg byte a 
Statement [702] bitmap_plot::x#3 = bitmap_line::x#7 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [703] bitmap_plot::y#3 = (byte)bitmap_line::y#15 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [705] bitmap_line::x#15 = bitmap_line::x#7 + bitmap_line::sx#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] { }  ) always clobbers reg byte a 
Statement [706] bitmap_line::e1#1 = bitmap_line::e1#3 + bitmap_line::dy#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { }  ) always clobbers reg byte a 
Statement [707] if(bitmap_line::dx#0>=bitmap_line::e1#1) goto bitmap_line::@10 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { }  ) always clobbers reg byte a 
Statement [708] bitmap_line::y#2 = bitmap_line::y#15 + bitmap_line::sy#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] { }  ) always clobbers reg byte a 
Statement [709] bitmap_line::e1#2 = bitmap_line::e1#1 - bitmap_line::dx#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] { }  ) always clobbers reg byte a 
Statement [711] if(bitmap_line::x#15!=bitmap_line::x2#0) goto bitmap_line::@9 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] { }  ) always clobbers reg byte a 
Statement [712] bitmap_plot::x#0 = bitmap_line::x1#0 [ bitmap_line::y1#0 bitmap_plot::x#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y1#0 bitmap_plot::x#0 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [713] bitmap_plot::y#0 = (byte)bitmap_line::y1#0 [ bitmap_plot::x#0 bitmap_plot::y#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#0 bitmap_plot::y#0 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:123 [ gfx_init_plane_fill::fill#6 ]
Statement [720] gfx_init_plane_fill::$0 = gfx_init_plane_fill::plane_addr#3 << 2 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  ) always clobbers reg byte a 
Statement [721] gfx_init_plane_fill::$1 = > gfx_init_plane_fill::$0 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  ) always clobbers reg byte a 
Statement [725] gfx_init_plane_fill::$4 = < gfx_init_plane_fill::plane_addr#3 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  ) always clobbers reg byte a 
Statement [726] gfx_init_plane_fill::$5 = gfx_init_plane_fill::$4 & $3fff [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  ) always clobbers reg byte a 
Statement [727] gfx_init_plane_fill::gfxb#0 = $4000 + gfx_init_plane_fill::$5 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  ) always clobbers reg byte a 
Statement [728] gfx_init_plane_fill::gfxb#6 = (byte*)gfx_init_plane_fill::gfxb#0 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  ) always clobbers reg byte a 
Statement [731] *gfx_init_plane_fill::gfxb#2 = gfx_init_plane_fill::fill#6 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:123 [ gfx_init_plane_fill::fill#6 ]
Removing always clobbered register reg byte a as potential for zp[1]:124 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:124 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:127 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:127 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Statement [741] if(memset::num#3<=0) goto memset::@return [ memset::num#3 memset::str#4 memset::c#5 ] ( form_mode:9::print_cls:49::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::num#3 memset::str#4 memset::c#5 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::num#3 memset::str#4 memset::c#5 ] { { memset::str#0 = memset::str#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:660 [ memset::num#3 memset::str#4 memset::c#5 ] { }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:662 [ memset::num#3 memset::str#4 memset::c#5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:132 [ memset::c#5 ]
Statement [742] memset::end#0 = (byte*)memset::str#4 + memset::num#3 [ memset::str#4 memset::c#5 memset::end#0 ] ( form_mode:9::print_cls:49::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::str#4 memset::c#5 memset::end#0 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::str#4 memset::c#5 memset::end#0 ] { { memset::str#0 = memset::str#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:660 [ memset::str#4 memset::c#5 memset::end#0 ] { }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:662 [ memset::str#4 memset::c#5 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [743] memset::dst#4 = (byte*)memset::str#4 [ memset::c#5 memset::end#0 memset::dst#4 ] ( form_mode:9::print_cls:49::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#4 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#4 ] { { memset::str#0 = memset::str#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:660 [ memset::c#5 memset::end#0 memset::dst#4 ] { }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:662 [ memset::c#5 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [745] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#5 memset::end#0 memset::dst#2 ] ( form_mode:9::print_cls:49::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#2 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#2 ] { { memset::str#0 = memset::str#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:660 [ memset::c#5 memset::end#0 memset::dst#2 ] { }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:662 [ memset::c#5 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [747] *memset::dst#2 = memset::c#5 [ memset::c#5 memset::end#0 memset::dst#2 ] ( form_mode:9::print_cls:49::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#2 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#2 ] { { memset::str#0 = memset::str#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:660 [ memset::c#5 memset::end#0 memset::dst#2 ] { }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:662 [ memset::c#5 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:132 [ memset::c#5 ]
Statement [749] *print_char_cursor#43 = print_char::ch#0 [ print_char_cursor#43 ] ( form_mode:9::print_str_lines:51::print_char:442 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_line_cursor#1 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#43 ] { { print_char::ch#0 = print_str_lines::ch#0 } }  form_mode:9::print_str_lines:57::print_char:442 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_line_cursor#1 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#43 ] { { print_char::ch#0 = print_str_lines::ch#0 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:266 [ print_str_lines::ch#0 ]
Statement [754] print_line_cursor#2 = print_line_cursor#22 + $28 [ print_line_cursor#2 print_char_cursor#44 ] ( form_mode:9::print_str_lines:51::print_ln:446 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_line_cursor#2 print_char_cursor#44 ] { }  form_mode:9::print_str_lines:57::print_ln:446 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_line_cursor#2 print_char_cursor#44 ] { }  ) always clobbers reg byte a 
Statement [755] if(print_line_cursor#2<print_char_cursor#44) goto print_ln::@1 [ print_line_cursor#2 print_char_cursor#44 ] ( form_mode:9::print_str_lines:51::print_ln:446 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_line_cursor#2 print_char_cursor#44 ] { }  form_mode:9::print_str_lines:57::print_ln:446 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_line_cursor#2 print_char_cursor#44 ] { }  ) always clobbers reg byte a 
Statement [759] form_field_ptr::line#0 = form_line_hi[form_field_ptr::y#0] w= form_line_lo[form_field_ptr::y#0] [ form_field_ptr::line#0 form_field_ptr::field_idx#2 ] ( form_mode:9::form_render_values:61::form_field_ptr:463 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  form_mode:9::form_render_values:95::form_field_ptr:463 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  form_mode:9::form_control:86::form_field_ptr:484 [ form_mode::preset_current#6 form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#30 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:137 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
Statement [761] form_field_ptr::return#0 = (byte*)form_field_ptr::line#0 + form_field_ptr::x#0 [ form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] ( form_mode:9::form_render_values:61::form_field_ptr:463 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  form_mode:9::form_render_values:95::form_field_ptr:463 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  form_mode:9::form_control:86::form_field_ptr:484 [ form_mode::preset_current#6 form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#30 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:334 [ form_field_ptr::x#0 ]
Statement [765] if(0!=*print_str_at::str#2) goto print_str_at::@2 [ print_str_at::str#2 print_str_at::at#2 ] ( form_mode:9::render_preset_name:63::print_str_at:481 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  form_mode:9::render_preset_name:97::print_str_at:481 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a reg byte y 
Statement [767] *print_str_at::at#2 = *print_str_at::str#2 [ print_str_at::str#2 print_str_at::at#2 ] ( form_mode:9::render_preset_name:63::print_str_at:481 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  form_mode:9::render_preset_name:97::print_str_at:481 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a reg byte y 
Statement [770] *((byte*)CIA1) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0] [ ] ( gfx_mode:11::keyboard_event_scan:225::keyboard_matrix_read:581 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#107 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_matrix_read:581 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#107 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [771] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( gfx_mode:11::keyboard_event_scan:225::keyboard_matrix_read:581 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#107 keyboard_matrix_read::return#0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_matrix_read:581 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#107 keyboard_matrix_read::return#0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [774] keyboard_event_pressed::$0 = keyboard_event_pressed::keycode#4 >> 3 [ keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ( gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:590 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:590 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:596 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:596 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:602 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:602 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:608 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:608 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:142 [ keyboard_event_pressed::keycode#4 ]
Statement [776] keyboard_event_pressed::$1 = keyboard_event_pressed::keycode#4 & 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:590 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:590 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:596 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:596 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:602 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:602 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:608 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:608 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:339 [ keyboard_event_pressed::row_bits#0 ]
Statement [777] keyboard_event_pressed::return#10 = keyboard_event_pressed::row_bits#0 & keyboard_matrix_col_bitmask[keyboard_event_pressed::$1] [ keyboard_event_pressed::return#10 ] ( gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:590 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_event_pressed::return#10 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:590 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:596 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:596 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:602 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:602 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:608 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::return#10 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:608 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Statement [783] abs_u16::return#2 = - abs_u16::w#2 [ abs_u16::return#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::abs_u16:665 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 abs_u16::return#2 ] { { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::abs_u16:669 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 abs_u16::return#2 ] { { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [794] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:687 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:698 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:704 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:714 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [795] bitmap_plot::$0 = bitmap_plot::x#4 & $fff8 [ bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:687 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:698 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:704 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:714 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [796] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$0 [ bitmap_plot::x#4 bitmap_plot::plotter#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:687 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:698 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:704 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:714 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [798] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1] [ ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:687 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:698 [ gfx_init_VICII_bitmap::l#2 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:704 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:714 [ gfx_init_VICII_bitmap::l#2 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:43 [ gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ]
Statement [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *PROCPORT = PROCPORT_RAM_IO [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *DTV_FEATURE = DTV_FEATURE_ENABLE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [12] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = $ff [ ] ( keyboard_init:4 [ ] { }  ) always clobbers reg byte a 
Statement [13] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) = 0 [ ] ( keyboard_init:4 [ ] { }  ) always clobbers reg byte a 
Statement [64] *DTV_GRAPHICS_VIC_BANK = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [65] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [66] *DTV_COLOR_BANK_HI = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [67] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*)CIA2) = 3 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [69] *DTV_CONTROL = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = VICII_DEN|VICII_RSEL|3 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [71] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = VICII_CSEL [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [72] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = (byte)(word)FORM_SCREEN&$3fff/$40|(word)FORM_CHARSET&$3fff/$400 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [73] *DTV_PLANEA_START_LO = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [74] *DTV_PLANEA_START_MI = >FORM_SCREEN [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [75] *DTV_PLANEA_START_HI = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [77] DTV_PALETTE[form_mode::i#2] = DTV_PALETTE_DEFAULT[form_mode::i#2] [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_mode::i#2 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_mode::i#2 ] { }  ) always clobbers reg byte a 
Statement [80] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [81] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] ( form_mode:9 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [84] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto form_mode::@4 [ form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_mode::preset_current#6 ] ( form_mode:9 [ form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_mode::preset_current#6 ] { }  ) always clobbers reg byte a 
Statement [98] if(*form_ctrl_line==0) goto gfx_mode::@1 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [101] if(*form_ctrl_borof==0) goto gfx_mode::@2 [ keyboard_events_size#25 gfx_mode::dtv_control#14 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#14 ] { }  ) always clobbers reg byte a 
Statement [102] gfx_mode::dtv_control#2 = gfx_mode::dtv_control#14 | DTV_BORDER_OFF [ keyboard_events_size#25 gfx_mode::dtv_control#2 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#2 ] { }  ) always clobbers reg byte a 
Statement [104] if(*form_ctrl_hicol==0) goto gfx_mode::@3 [ keyboard_events_size#25 gfx_mode::dtv_control#15 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#15 ] { }  ) always clobbers reg byte a 
Statement [105] gfx_mode::dtv_control#3 = gfx_mode::dtv_control#15 | DTV_HIGHCOLOR [ keyboard_events_size#25 gfx_mode::dtv_control#3 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#3 ] { }  ) always clobbers reg byte a 
Statement [107] if(*form_ctrl_overs==0) goto gfx_mode::@4 [ keyboard_events_size#25 gfx_mode::dtv_control#10 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#10 ] { }  ) always clobbers reg byte a 
Statement [108] gfx_mode::dtv_control#4 = gfx_mode::dtv_control#10 | DTV_OVERSCAN [ keyboard_events_size#25 gfx_mode::dtv_control#4 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#4 ] { }  ) always clobbers reg byte a 
Statement [110] if(*form_ctrl_colof==0) goto gfx_mode::@5 [ keyboard_events_size#25 gfx_mode::dtv_control#11 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#11 ] { }  ) always clobbers reg byte a 
Statement [111] gfx_mode::dtv_control#5 = gfx_mode::dtv_control#11 | DTV_COLORRAM_OFF [ keyboard_events_size#25 gfx_mode::dtv_control#5 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#5 ] { }  ) always clobbers reg byte a 
Statement [113] if(*form_ctrl_chunk==0) goto gfx_mode::@6 [ keyboard_events_size#25 gfx_mode::dtv_control#13 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#13 ] { }  ) always clobbers reg byte a 
Statement [114] gfx_mode::dtv_control#6 = gfx_mode::dtv_control#13 | DTV_CHUNKY [ keyboard_events_size#25 gfx_mode::dtv_control#6 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::dtv_control#6 ] { }  ) always clobbers reg byte a 
Statement [117] if(*form_ctrl_ecm==0) goto gfx_mode::@7 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [120] if(*form_ctrl_bmm==0) goto gfx_mode::@8 [ keyboard_events_size#25 gfx_mode::VICII_control#5 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::VICII_control#5 ] { }  ) always clobbers reg byte a 
Statement [121] gfx_mode::VICII_control#2 = gfx_mode::VICII_control#5 | VICII_BMM [ keyboard_events_size#25 gfx_mode::VICII_control#2 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::VICII_control#2 ] { }  ) always clobbers reg byte a 
Statement [124] if(*form_ctrl_mcm==0) goto gfx_mode::@9 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [128] gfx_mode::$18 = *form_a_start_hi << 4 [ keyboard_events_size#25 gfx_mode::$18 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$18 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Statement [129] gfx_mode::plane_a_offs#0 = gfx_mode::$18 | *form_a_start_lo [ keyboard_events_size#25 gfx_mode::plane_a_offs#0 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a_offs#0 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Statement [132] get_plane::return#16 = get_plane::return#14 [ keyboard_events_size#25 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a_offs#0 get_plane::return#16 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Statement [133] gfx_mode::$20 = get_plane::return#16 [ keyboard_events_size#25 gfx_mode::plane_a_offs#0 gfx_mode::$20 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a_offs#0 gfx_mode::$20 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [134] gfx_mode::plane_a#0 = gfx_mode::$20 + gfx_mode::plane_a_offs#0 [ keyboard_events_size#25 gfx_mode::plane_a#0 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a#0 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [135] gfx_mode::$22 = < gfx_mode::plane_a#0 [ keyboard_events_size#25 gfx_mode::plane_a#0 gfx_mode::$22 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a#0 gfx_mode::$22 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [138] gfx_mode::$24 = < gfx_mode::plane_a#0 [ keyboard_events_size#25 gfx_mode::plane_a#0 gfx_mode::$24 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_a#0 gfx_mode::$24 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [141] gfx_mode::$26 = > gfx_mode::plane_a#0 [ keyboard_events_size#25 gfx_mode::$26 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$26 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [144] gfx_mode::$28 = *form_a_step_hi << 4 [ keyboard_events_size#25 gfx_mode::$28 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$28 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [145] gfx_mode::$29 = gfx_mode::$28 | *form_a_step_lo [ keyboard_events_size#25 gfx_mode::$29 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$29 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [147] gfx_mode::$30 = *form_a_mod_hi << 4 [ keyboard_events_size#25 gfx_mode::$30 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$30 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [148] gfx_mode::$31 = gfx_mode::$30 | *form_a_mod_lo [ keyboard_events_size#25 gfx_mode::$31 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$31 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [150] *DTV_PLANEA_MODULO_HI = 0 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [151] gfx_mode::$32 = *form_b_start_hi << 4 [ keyboard_events_size#25 gfx_mode::$32 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$32 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [152] gfx_mode::plane_b_offs#0 = gfx_mode::$32 | *form_b_start_lo [ keyboard_events_size#25 gfx_mode::plane_b_offs#0 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b_offs#0 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [155] get_plane::return#17 = get_plane::return#14 [ keyboard_events_size#25 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b_offs#0 get_plane::return#17 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [156] gfx_mode::$34 = get_plane::return#17 [ keyboard_events_size#25 gfx_mode::plane_b_offs#0 gfx_mode::$34 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b_offs#0 gfx_mode::$34 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [157] gfx_mode::plane_b#0 = gfx_mode::$34 + gfx_mode::plane_b_offs#0 [ keyboard_events_size#25 gfx_mode::plane_b#0 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b#0 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [158] gfx_mode::$36 = < gfx_mode::plane_b#0 [ keyboard_events_size#25 gfx_mode::plane_b#0 gfx_mode::$36 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b#0 gfx_mode::$36 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [161] gfx_mode::$38 = < gfx_mode::plane_b#0 [ keyboard_events_size#25 gfx_mode::plane_b#0 gfx_mode::$38 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::plane_b#0 gfx_mode::$38 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [164] gfx_mode::$40 = > gfx_mode::plane_b#0 [ keyboard_events_size#25 gfx_mode::$40 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$40 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [167] gfx_mode::$42 = *form_b_step_hi << 4 [ keyboard_events_size#25 gfx_mode::$42 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$42 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [168] gfx_mode::$43 = gfx_mode::$42 | *form_b_step_lo [ keyboard_events_size#25 gfx_mode::$43 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$43 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [170] gfx_mode::$44 = *form_b_mod_hi << 4 [ keyboard_events_size#25 gfx_mode::$44 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$44 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [171] gfx_mode::$45 = gfx_mode::$44 | *form_b_mod_lo [ keyboard_events_size#25 gfx_mode::$45 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$45 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [173] *DTV_PLANEB_MODULO_HI = 0 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [174] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [175] *((byte*)CIA2) = 3^(byte)(word)VICII_SCREEN0/$4000 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [178] get_VICII_screen::return#10 = get_VICII_screen::return#5 [ keyboard_events_size#25 get_VICII_screen::return#10 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 get_VICII_screen::return#10 ] { { get_VICII_screen::idx#0 = get_VICII_screen::idx#2 } { get_VICII_screen::return#10 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [179] gfx_mode::$82 = get_VICII_screen::return#10 [ keyboard_events_size#25 gfx_mode::$82 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$82 ] { { get_VICII_charset::return#2 = get_VICII_charset::return#4 } }  ) always clobbers reg byte a 
Statement [180] gfx_mode::$47 = (word)gfx_mode::$82 & $3fff [ keyboard_events_size#25 gfx_mode::$47 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$47 ] { { get_VICII_charset::return#2 = get_VICII_charset::return#4 } }  ) always clobbers reg byte a 
Statement [181] gfx_mode::$48 = gfx_mode::$47 >> 6 [ keyboard_events_size#25 gfx_mode::$48 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$48 ] { { get_VICII_charset::return#2 = get_VICII_charset::return#4 } }  ) always clobbers reg byte a 
Statement [184] get_VICII_charset::return#4 = get_VICII_charset::return#2 [ keyboard_events_size#25 gfx_mode::$48 get_VICII_charset::return#4 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$48 get_VICII_charset::return#4 ] { { get_VICII_charset::return#2 = get_VICII_charset::return#4 } }  ) always clobbers reg byte a 
Statement [185] gfx_mode::$83 = get_VICII_charset::return#4 [ keyboard_events_size#25 gfx_mode::$48 gfx_mode::$83 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$48 gfx_mode::$83 ] { { get_VICII_screen::idx#1 = get_VICII_screen::idx#2 } { get_VICII_screen::return#11 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [186] gfx_mode::$50 = (word)gfx_mode::$83 & $3fff [ keyboard_events_size#25 gfx_mode::$48 gfx_mode::$50 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$48 gfx_mode::$50 ] { { get_VICII_screen::idx#1 = get_VICII_screen::idx#2 } { get_VICII_screen::return#11 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [188] gfx_mode::$52 = gfx_mode::$51 >> 2 [ keyboard_events_size#25 gfx_mode::$48 gfx_mode::$52 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$48 gfx_mode::$52 ] { { get_VICII_screen::idx#1 = get_VICII_screen::idx#2 } { get_VICII_screen::return#11 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [189] gfx_mode::$84 = (byte)gfx_mode::$48 [ keyboard_events_size#25 gfx_mode::$52 gfx_mode::$84 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$52 gfx_mode::$84 ] { { get_VICII_screen::idx#1 = get_VICII_screen::idx#2 } { get_VICII_screen::return#11 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [194] get_VICII_screen::return#11 = get_VICII_screen::return#5 [ keyboard_events_size#25 get_VICII_screen::return#11 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 get_VICII_screen::return#11 ] { { get_VICII_screen::idx#1 = get_VICII_screen::idx#2 } { get_VICII_screen::return#11 = get_VICII_screen::return#5 } }  ) always clobbers reg byte a 
Statement [195] gfx_mode::VICII_colors#0 = get_VICII_screen::return#11 [ keyboard_events_size#25 gfx_mode::VICII_colors#0 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::VICII_colors#0 ] { }  ) always clobbers reg byte a 
Statement [198] *gfx_mode::col#2 = *gfx_mode::VICII_colors#2 [ keyboard_events_size#25 gfx_mode::cy#4 gfx_mode::VICII_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::cy#4 gfx_mode::VICII_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [205] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [206] gfx_mode::$55 = *form_VICII_bg0_hi << 4 [ keyboard_events_size#25 gfx_mode::$55 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$55 ] { }  ) always clobbers reg byte a 
Statement [207] gfx_mode::$56 = gfx_mode::$55 | *form_VICII_bg0_lo [ keyboard_events_size#25 gfx_mode::$56 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$56 ] { }  ) always clobbers reg byte a 
Statement [209] gfx_mode::$57 = *form_VICII_bg1_hi << 4 [ keyboard_events_size#25 gfx_mode::$57 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$57 ] { }  ) always clobbers reg byte a 
Statement [210] gfx_mode::$58 = gfx_mode::$57 | *form_VICII_bg1_lo [ keyboard_events_size#25 gfx_mode::$58 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$58 ] { }  ) always clobbers reg byte a 
Statement [212] gfx_mode::$59 = *form_VICII_bg2_hi << 4 [ keyboard_events_size#25 gfx_mode::$59 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$59 ] { }  ) always clobbers reg byte a 
Statement [213] gfx_mode::$60 = gfx_mode::$59 | *form_VICII_bg2_lo [ keyboard_events_size#25 gfx_mode::$60 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$60 ] { }  ) always clobbers reg byte a 
Statement [215] gfx_mode::$61 = *form_VICII_bg3_hi << 4 [ keyboard_events_size#25 gfx_mode::$61 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$61 ] { }  ) always clobbers reg byte a 
Statement [216] gfx_mode::$62 = gfx_mode::$61 | *form_VICII_bg3_lo [ keyboard_events_size#25 gfx_mode::$62 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::$62 ] { }  ) always clobbers reg byte a 
Statement [218] if(*form_dtv_palet==0) goto gfx_mode::@24 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [223] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto gfx_mode::@25 [ keyboard_events_size#25 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 ] { }  ) always clobbers reg byte a 
Statement [233] DTV_PALETTE[gfx_mode::i#2] = DTV_PALETTE_DEFAULT[gfx_mode::i#2] [ keyboard_events_size#25 gfx_mode::i#2 ] ( gfx_mode:11 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#25 gfx_mode::i#2 ] { }  ) always clobbers reg byte a 
Statement [239] gfx_init_screen0::$0 = gfx_init_screen0::cy#4 & $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ( gfx_init:6::gfx_init_screen0:16 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] { }  ) always clobbers reg byte a 
Statement [240] gfx_init_screen0::$1 = gfx_init_screen0::$0 << 4 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ( gfx_init:6::gfx_init_screen0:16 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] { }  ) always clobbers reg byte a 
Statement [241] gfx_init_screen0::$2 = gfx_init_screen0::cx#2 & $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ( gfx_init:6::gfx_init_screen0:16 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] { }  ) always clobbers reg byte a 
Statement [243] *gfx_init_screen0::ch#2 = gfx_init_screen0::$3 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ( gfx_init:6::gfx_init_screen0:16 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] { }  ) always clobbers reg byte y 
Statement [253] gfx_init_screen1::$0 = gfx_init_screen1::cx#2 + gfx_init_screen1::cy#4 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ( gfx_init:6::gfx_init_screen1:18 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] { }  ) always clobbers reg byte a 
Statement [255] *gfx_init_screen1::ch#2 = gfx_init_screen1::$1 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ( gfx_init:6::gfx_init_screen1:18 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] { }  ) always clobbers reg byte y 
Statement [265] gfx_init_screen2::$0 = gfx_init_screen2::cx#2 + gfx_init_screen2::cy#4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ( gfx_init:6::gfx_init_screen2:20 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] { }  ) always clobbers reg byte a 
Statement [267] gfx_init_screen2::col2#0 = $f - gfx_init_screen2::col#0 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ( gfx_init:6::gfx_init_screen2:20 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] { }  ) always clobbers reg byte a 
Statement [268] gfx_init_screen2::$3 = gfx_init_screen2::col#0 << 4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ( gfx_init:6::gfx_init_screen2:20 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] { }  ) always clobbers reg byte a 
Statement [270] *gfx_init_screen2::ch#2 = gfx_init_screen2::$4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ( gfx_init:6::gfx_init_screen2:20 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] { }  ) always clobbers reg byte y 
Statement [280] gfx_init_screen3::$0 = gfx_init_screen3::cx#2 & 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$0 ] ( gfx_init:6::gfx_init_screen3:22 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$0 ] { }  ) always clobbers reg byte a 
Statement [281] gfx_init_screen3::$1 = gfx_init_screen3::$0 << 4 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ( gfx_init:6::gfx_init_screen3:22 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] { }  ) always clobbers reg byte a 
Statement [282] gfx_init_screen3::$2 = gfx_init_screen3::cy#4 & 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ( gfx_init:6::gfx_init_screen3:22 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] { }  ) always clobbers reg byte a 
Statement [284] *gfx_init_screen3::ch#2 = gfx_init_screen3::$3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ( gfx_init:6::gfx_init_screen3:22 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] { }  ) always clobbers reg byte y 
Statement [294] *gfx_init_screen4::ch#2 = 0 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ( gfx_init:6::gfx_init_screen4:24 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [301] *PROCPORT = $32 [ ] ( gfx_init:6::gfx_init_charset:26 [ ] { }  ) always clobbers reg byte a 
Statement [304] *gfx_init_charset::charset#2 = *gfx_init_charset::chargen#2 [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ( gfx_init:6::gfx_init_charset:26 [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [311] *PROCPORT = $37 [ ] ( gfx_init:6::gfx_init_charset:26 [ ] { }  ) always clobbers reg byte a 
Statement [320] bitmap_line::x1#0 = gfx_init_VICII_bitmap::lines_x[gfx_init_VICII_bitmap::l#2] [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 ] { }  ) always clobbers reg byte a 
Statement [321] bitmap_line::y1#0 = gfx_init_VICII_bitmap::lines_y[gfx_init_VICII_bitmap::l#2] [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 ] { }  ) always clobbers reg byte a 
Statement [322] bitmap_line::x2#0 = (gfx_init_VICII_bitmap::lines_x+1)[gfx_init_VICII_bitmap::l#2] [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 ] { }  ) always clobbers reg byte a 
Statement [323] bitmap_line::y2#0 = (gfx_init_VICII_bitmap::lines_y+1)[gfx_init_VICII_bitmap::l#2] [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 ] { }  ) always clobbers reg byte a 
Statement [330] if(gfx_init_plane_8bppchunky::gfxb#3!=$8000) goto gfx_init_plane_8bppchunky::@3 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ( gfx_init:6::gfx_init_plane_8bppchunky:30 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] { }  ) always clobbers reg byte a 
Statement [335] gfx_init_plane_8bppchunky::$5 = gfx_init_plane_8bppchunky::x#2 + gfx_init_plane_8bppchunky::y#6 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$5 ] ( gfx_init:6::gfx_init_plane_8bppchunky:30 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$5 ] { }  ) always clobbers reg byte a 
Statement [336] gfx_init_plane_8bppchunky::c#0 = (byte)gfx_init_plane_8bppchunky::$5 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ( gfx_init:6::gfx_init_plane_8bppchunky:30 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] { }  ) always clobbers reg byte a 
Statement [337] *gfx_init_plane_8bppchunky::gfxb#4 = gfx_init_plane_8bppchunky::c#0 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ( gfx_init:6::gfx_init_plane_8bppchunky:30 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] { }  ) always clobbers reg byte y 
Statement [340] if(gfx_init_plane_8bppchunky::x#1!=$140) goto gfx_init_plane_8bppchunky::@2 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ( gfx_init:6::gfx_init_plane_8bppchunky:30 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] { }  ) always clobbers reg byte a 
Statement [348] *PROCPORT = PROCPORT_RAM_CHARROM [ ] ( gfx_init:6::gfx_init_plane_charset8:32 [ ] { }  ) always clobbers reg byte a 
Statement [351] gfx_init_plane_charset8::bits#0 = *gfx_init_plane_charset8::chargen#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ( gfx_init:6::gfx_init_plane_charset8:32 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [358] *gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::c#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ( gfx_init:6::gfx_init_plane_charset8:32 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] { }  ) always clobbers reg byte y 
Statement [368] *PROCPORT = PROCPORT_RAM_IO [ ] ( gfx_init:6::gfx_init_plane_charset8:32 [ ] { }  ) always clobbers reg byte a 
Statement [375] gfx_init_plane_horisontal::$2 = gfx_init_plane_horisontal::ay#4 & 4 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::$2 ] ( gfx_init:6::gfx_init_plane_horisontal:34 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::$2 ] { }  ) always clobbers reg byte a 
Statement [377] *gfx_init_plane_horisontal::gfxa#3 = $ff [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( gfx_init:6::gfx_init_plane_horisontal:34 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [387] *gfx_init_plane_horisontal::gfxa#3 = 0 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( gfx_init:6::gfx_init_plane_horisontal:34 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [393] *gfx_init_plane_vertical::gfxb#2 = $f [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ( gfx_init:6::gfx_init_plane_vertical:36 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [406] gfx_init_plane_horisontal2::$2 = gfx_init_plane_horisontal2::ay#4 >> 1 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$2 ] ( gfx_init:6::gfx_init_plane_horisontal2:38 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$2 ] { }  ) always clobbers reg byte a 
Statement [408] *gfx_init_plane_horisontal2::gfxa#2 = gfx_init_plane_horisontal2::row_bitmask[gfx_init_plane_horisontal2::row#0] [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ( gfx_init:6::gfx_init_plane_horisontal2:38 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [427] print_screen#0 = print_set_screen::screen#2 [ print_screen#0 ] ( form_mode:9::print_set_screen:47 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 ] { }  form_mode:9::print_set_screen:53 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 ] { }  ) always clobbers reg byte a 
Statement [429] memset::str#0 = (void*)print_screen#0 [ print_screen#0 memset::str#0 ] ( form_mode:9::print_cls:49 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::str#0 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::str#0 ] { { memset::str#0 = memset::str#4 } }  ) always clobbers reg byte a 
Statement [433] print_char_cursor#72 = print_screen#0 [ print_screen#0 print_str_lines::str#5 print_char_cursor#72 ] ( form_mode:9::print_str_lines:51 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 print_str_lines::str#5 print_char_cursor#72 ] { }  form_mode:9::print_str_lines:57 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 print_str_lines::str#5 print_char_cursor#72 ] { }  ) always clobbers reg byte a 
Statement [435] if(0!=*print_str_lines::str#3) goto print_str_lines::@2 [ print_str_lines::str#3 print_char_cursor#2 print_line_cursor#1 ] ( form_mode:9::print_str_lines:51 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#3 print_char_cursor#2 print_line_cursor#1 ] { }  form_mode:9::print_str_lines:57 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#3 print_char_cursor#2 print_line_cursor#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [438] print_str_lines::ch#0 = *print_str_lines::str#4 [ print_line_cursor#1 print_str_lines::str#4 print_char_cursor#43 print_str_lines::ch#0 ] ( form_mode:9::print_str_lines:51 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_line_cursor#1 print_str_lines::str#4 print_char_cursor#43 print_str_lines::ch#0 ] { }  form_mode:9::print_str_lines:57 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_line_cursor#1 print_str_lines::str#4 print_char_cursor#43 print_str_lines::ch#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [447] print_char_cursor#73 = print_line_cursor#2 [ print_str_lines::str#0 print_char_cursor#73 print_line_cursor#2 ] ( form_mode:9::print_str_lines:51 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_char_cursor#73 print_line_cursor#2 ] { }  form_mode:9::print_str_lines:57 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_char_cursor#73 print_line_cursor#2 ] { }  ) always clobbers reg byte a 
Statement [454] form_set_screen::line#1 = form_set_screen::line#2 + $28 [ form_set_screen::y#2 form_set_screen::line#1 ] ( form_mode:9::form_set_screen:59 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_set_screen::y#2 form_set_screen::line#1 ] { }  ) always clobbers reg byte a 
Statement [464] ((byte*)form_field_ptr::line#0)[form_field_ptr::x#0] = print_hextab[form_fields_val[form_render_values::idx#2]] [ form_render_values::idx#2 ] ( form_mode:9::form_render_values:61 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_render_values::idx#2 ] { }  form_mode:9::form_render_values:95 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 form_render_values::idx#2 ] { }  ) always clobbers reg byte a 
Statement [480] print_str_at::str#1 = render_preset_name::name#13 [ print_str_at::str#1 ] ( form_mode:9::render_preset_name:63 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_at::str#1 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  form_mode:9::render_preset_name:97 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 print_str_at::str#1 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a 
Statement [485] form_field_ptr::return#3 = form_field_ptr::return#0 [ form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_field_ptr::return#3 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_field_ptr::return#3 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#30 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [486] form_control::field#0 = form_field_ptr::return#3 [ form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_control::field#0 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_control::field#0 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [491] if(form_cursor_count#16<FORM_CURSOR_BLINK/2) goto form_control::@2 [ keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [492] form_control::$12 = *form_control::field#0 & $7f [ keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$12 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$12 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [493] *form_control::field#0 = form_control::$12 [ keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [501] form_control::$14 = *form_control::field#0 & $7f [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_control::$14 keyboard_modifiers#22 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_control::$14 keyboard_modifiers#22 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [502] *form_control::field#0 = form_control::$14 [ keyboard_events_size#25 form_field_idx#30 keyboard_modifiers#22 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 keyboard_modifiers#22 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [503] form_control::$15 = keyboard_modifiers#22 & KEY_MODIFIER_SHIFT [ keyboard_events_size#25 form_field_idx#30 form_control::$15 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::$15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [515] form_control::$22 = keyboard_modifiers#22 & KEY_MODIFIER_SHIFT [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$22 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$22 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [518] if(form_fields_val[form_field_idx#30]!=$ff) goto form_control::@16 [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [519] form_fields_val[form_field_idx#30] = form_fields_max[form_field_idx#30] [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [520] *form_control::field#0 = print_hextab[form_fields_val[form_field_idx#30]] [ keyboard_events_size#25 form_field_idx#30 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [522] if(form_fields_val[form_field_idx#30]<=form_fields_max[form_field_idx#30]) goto form_control::@16 [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [523] form_fields_val[form_field_idx#30] = 0 [ keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#25 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [526] form_control::$13 = *form_control::field#0 | $80 [ keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$13 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 form_control::$13 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [527] *form_control::field#0 = form_control::$13 [ keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] ( form_mode:9::form_control:86 [ form_mode::preset_current#6 keyboard_events_size#49 form_field_idx#30 form_control::field#0 form_cursor_count#16 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [544] form_fields_val[apply_preset::i#2] = apply_preset::preset#15[apply_preset::i#2] [ apply_preset::preset#15 apply_preset::i#2 ] ( form_mode:9::apply_preset:93 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 apply_preset::preset#15 apply_preset::i#2 ] { }  ) always clobbers reg byte a 
Statement [584] if(keyboard_event_scan::row_scan#0!=keyboard_scan_values[keyboard_event_scan::row#2]) goto keyboard_event_scan::@9 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#107 keyboard_event_scan::row_scan#0 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#107 keyboard_event_scan::row_scan#0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#107 keyboard_event_scan::row_scan#0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [585] keyboard_event_scan::keycode#1 = keyboard_event_scan::keycode#11 + 8 [ keyboard_event_scan::row#2 keyboard_events_size#107 keyboard_event_scan::keycode#1 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_events_size#107 keyboard_event_scan::keycode#1 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_events_size#107 keyboard_event_scan::keycode#1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [600] keyboard_modifiers#2 = keyboard_modifiers#19 | KEY_MODIFIER_RSHIFT [ keyboard_events_size#100 keyboard_modifiers#2 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#2 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#2 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [606] keyboard_modifiers#3 = keyboard_modifiers#20 | KEY_MODIFIER_CTRL [ keyboard_events_size#100 keyboard_modifiers#3 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#3 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#3 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [612] keyboard_modifiers#4 = keyboard_modifiers#21 | KEY_MODIFIER_COMMODORE [ keyboard_events_size#100 keyboard_modifiers#4 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#4 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#4 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [616] keyboard_event_scan::$15 = keyboard_event_scan::row_scan#0 ^ keyboard_scan_values[keyboard_event_scan::row#2] [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$15 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$15 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$15 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [620] keyboard_event_scan::event_type#0 = keyboard_event_scan::row_scan#0 & keyboard_matrix_col_bitmask[keyboard_event_scan::col#2] [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::event_type#0 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::event_type#0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::event_type#0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [622] keyboard_events[keyboard_events_size#19] = keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [628] keyboard_scan_values[keyboard_event_scan::row#2] = keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#106 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#106 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#106 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [629] keyboard_event_scan::$23 = keyboard_event_scan::keycode#10 | $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$23 ] ( gfx_mode:11::keyboard_event_scan:225 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$23 ] { { keyboard_events_size#25 = keyboard_events_size#98 } }  form_mode:9::form_control:86::keyboard_event_scan:495 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#19 keyboard_event_scan::$23 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } }  ) always clobbers reg byte a 
Statement [647] bitmap_init::$7 = bitmap_init::y#2 & 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_init:314 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] { }  ) always clobbers reg byte a 
Statement [654] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_init:314 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Statement [664] abs_u16::w#0 = bitmap_line::x2#0 - bitmap_line::x1#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 abs_u16::w#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 abs_u16::w#0 ] { { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [666] abs_u16::return#0 = abs_u16::return#4 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 abs_u16::return#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 abs_u16::return#0 ] { { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [667] bitmap_line::dx#0 = abs_u16::return#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 ] { { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [668] abs_u16::w#1 = bitmap_line::y2#0 - bitmap_line::y1#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 abs_u16::w#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 abs_u16::w#1 ] { { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [670] abs_u16::return#1 = abs_u16::return#4 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 abs_u16::return#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 abs_u16::return#1 ] { { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [671] bitmap_line::dy#0 = abs_u16::return#1 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { }  ) always clobbers reg byte a 
Statement [672] if(bitmap_line::dx#0!=0) goto bitmap_line::@1 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { }  ) always clobbers reg byte a 
Statement [673] if(bitmap_line::dy#0==0) goto bitmap_line::@4 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { }  ) always clobbers reg byte a 
Statement [674] sgn_u16::w#0 = bitmap_line::x2#0 - bitmap_line::x1#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] { { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [676] sgn_u16::return#0 = sgn_u16::return#4 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] { { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [677] bitmap_line::sx#0 = sgn_u16::return#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] { { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [678] sgn_u16::w#1 = bitmap_line::y2#0 - bitmap_line::y1#0 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::w#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::w#1 ] { { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [680] sgn_u16::return#1 = sgn_u16::return#4 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] { { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [681] bitmap_line::sy#0 = sgn_u16::return#1 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { }  ) always clobbers reg byte a 
Statement [682] if(bitmap_line::dx#0>bitmap_line::dy#0) goto bitmap_line::@2 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { }  ) always clobbers reg byte a 
Statement [683] bitmap_line::e#0 = bitmap_line::dx#0 >> 1 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] { }  ) always clobbers reg byte a 
Statement [685] bitmap_plot::x#1 = bitmap_line::x#13 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [686] bitmap_plot::y#1 = (byte)bitmap_line::y#4 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [688] bitmap_line::y#1 = bitmap_line::y#4 + bitmap_line::sy#0 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] { }  ) always clobbers reg byte a 
Statement [689] bitmap_line::e#1 = bitmap_line::e#3 + bitmap_line::dx#0 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { }  ) always clobbers reg byte a 
Statement [690] if(bitmap_line::dy#0>=bitmap_line::e#1) goto bitmap_line::@7 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { }  ) always clobbers reg byte a 
Statement [691] bitmap_line::x#1 = bitmap_line::x#13 + bitmap_line::sx#0 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] { }  ) always clobbers reg byte a 
Statement [692] bitmap_line::e#2 = bitmap_line::e#1 - bitmap_line::dy#0 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] { }  ) always clobbers reg byte a 
Statement [694] if(bitmap_line::y#1!=bitmap_line::y2#0) goto bitmap_line::@6 [ bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] { }  ) always clobbers reg byte a 
Statement [696] bitmap_plot::x#2 = bitmap_line::x#6 [ bitmap_line::y#7 bitmap_plot::x#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y#7 bitmap_plot::x#2 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [697] bitmap_plot::y#2 = (byte)bitmap_line::y#7 [ bitmap_plot::x#2 bitmap_plot::y#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#2 bitmap_plot::y#2 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [700] bitmap_line::e1#0 = bitmap_line::dy#0 >> 1 [ bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] { }  ) always clobbers reg byte a 
Statement [702] bitmap_plot::x#3 = bitmap_line::x#7 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [703] bitmap_plot::y#3 = (byte)bitmap_line::y#15 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [705] bitmap_line::x#15 = bitmap_line::x#7 + bitmap_line::sx#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] { }  ) always clobbers reg byte a 
Statement [706] bitmap_line::e1#1 = bitmap_line::e1#3 + bitmap_line::dy#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { }  ) always clobbers reg byte a 
Statement [707] if(bitmap_line::dx#0>=bitmap_line::e1#1) goto bitmap_line::@10 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { }  ) always clobbers reg byte a 
Statement [708] bitmap_line::y#2 = bitmap_line::y#15 + bitmap_line::sy#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] { }  ) always clobbers reg byte a 
Statement [709] bitmap_line::e1#2 = bitmap_line::e1#1 - bitmap_line::dx#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] { }  ) always clobbers reg byte a 
Statement [711] if(bitmap_line::x#15!=bitmap_line::x2#0) goto bitmap_line::@9 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] { }  ) always clobbers reg byte a 
Statement [712] bitmap_plot::x#0 = bitmap_line::x1#0 [ bitmap_line::y1#0 bitmap_plot::x#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y1#0 bitmap_plot::x#0 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [713] bitmap_plot::y#0 = (byte)bitmap_line::y1#0 [ bitmap_plot::x#0 bitmap_plot::y#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#0 bitmap_plot::y#0 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [720] gfx_init_plane_fill::$0 = gfx_init_plane_fill::plane_addr#3 << 2 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  ) always clobbers reg byte a 
Statement [721] gfx_init_plane_fill::$1 = > gfx_init_plane_fill::$0 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  ) always clobbers reg byte a 
Statement [725] gfx_init_plane_fill::$4 = < gfx_init_plane_fill::plane_addr#3 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  ) always clobbers reg byte a 
Statement [726] gfx_init_plane_fill::$5 = gfx_init_plane_fill::$4 & $3fff [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  ) always clobbers reg byte a 
Statement [727] gfx_init_plane_fill::gfxb#0 = $4000 + gfx_init_plane_fill::$5 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  ) always clobbers reg byte a 
Statement [728] gfx_init_plane_fill::gfxb#6 = (byte*)gfx_init_plane_fill::gfxb#0 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  ) always clobbers reg byte a 
Statement [731] *gfx_init_plane_fill::gfxb#2 = gfx_init_plane_fill::fill#6 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ( gfx_init:6::gfx_init_plane_vertical2:40::gfx_init_plane_fill:418 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  gfx_init:6::gfx_init_plane_blank:42::gfx_init_plane_fill:421 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  gfx_init:6::gfx_init_plane_full:44::gfx_init_plane_fill:424 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [741] if(memset::num#3<=0) goto memset::@return [ memset::num#3 memset::str#4 memset::c#5 ] ( form_mode:9::print_cls:49::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::num#3 memset::str#4 memset::c#5 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::num#3 memset::str#4 memset::c#5 ] { { memset::str#0 = memset::str#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:660 [ memset::num#3 memset::str#4 memset::c#5 ] { }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:662 [ memset::num#3 memset::str#4 memset::c#5 ] { }  ) always clobbers reg byte a 
Statement [742] memset::end#0 = (byte*)memset::str#4 + memset::num#3 [ memset::str#4 memset::c#5 memset::end#0 ] ( form_mode:9::print_cls:49::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::str#4 memset::c#5 memset::end#0 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::str#4 memset::c#5 memset::end#0 ] { { memset::str#0 = memset::str#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:660 [ memset::str#4 memset::c#5 memset::end#0 ] { }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:662 [ memset::str#4 memset::c#5 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [743] memset::dst#4 = (byte*)memset::str#4 [ memset::c#5 memset::end#0 memset::dst#4 ] ( form_mode:9::print_cls:49::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#4 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#4 ] { { memset::str#0 = memset::str#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:660 [ memset::c#5 memset::end#0 memset::dst#4 ] { }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:662 [ memset::c#5 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [745] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#5 memset::end#0 memset::dst#2 ] ( form_mode:9::print_cls:49::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#2 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#2 ] { { memset::str#0 = memset::str#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:660 [ memset::c#5 memset::end#0 memset::dst#2 ] { }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:662 [ memset::c#5 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [747] *memset::dst#2 = memset::c#5 [ memset::c#5 memset::end#0 memset::dst#2 ] ( form_mode:9::print_cls:49::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#2 ] { { memset::str#0 = memset::str#4 } }  form_mode:9::print_cls:55::memset:430 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_screen#0 memset::c#5 memset::end#0 memset::dst#2 ] { { memset::str#0 = memset::str#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:660 [ memset::c#5 memset::end#0 memset::dst#2 ] { }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_clear:316::memset:662 [ memset::c#5 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [749] *print_char_cursor#43 = print_char::ch#0 [ print_char_cursor#43 ] ( form_mode:9::print_str_lines:51::print_char:442 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_line_cursor#1 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#43 ] { { print_char::ch#0 = print_str_lines::ch#0 } }  form_mode:9::print_str_lines:57::print_char:442 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_line_cursor#1 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#43 ] { { print_char::ch#0 = print_str_lines::ch#0 } }  ) always clobbers reg byte y 
Statement [754] print_line_cursor#2 = print_line_cursor#22 + $28 [ print_line_cursor#2 print_char_cursor#44 ] ( form_mode:9::print_str_lines:51::print_ln:446 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_line_cursor#2 print_char_cursor#44 ] { }  form_mode:9::print_str_lines:57::print_ln:446 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_line_cursor#2 print_char_cursor#44 ] { }  ) always clobbers reg byte a 
Statement [755] if(print_line_cursor#2<print_char_cursor#44) goto print_ln::@1 [ print_line_cursor#2 print_char_cursor#44 ] ( form_mode:9::print_str_lines:51::print_ln:446 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_line_cursor#2 print_char_cursor#44 ] { }  form_mode:9::print_str_lines:57::print_ln:446 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_lines::str#0 print_line_cursor#2 print_char_cursor#44 ] { }  ) always clobbers reg byte a 
Statement [759] form_field_ptr::line#0 = form_line_hi[form_field_ptr::y#0] w= form_line_lo[form_field_ptr::y#0] [ form_field_ptr::line#0 form_field_ptr::field_idx#2 ] ( form_mode:9::form_render_values:61::form_field_ptr:463 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  form_mode:9::form_render_values:95::form_field_ptr:463 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  form_mode:9::form_control:86::form_field_ptr:484 [ form_mode::preset_current#6 form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#30 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [761] form_field_ptr::return#0 = (byte*)form_field_ptr::line#0 + form_field_ptr::x#0 [ form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] ( form_mode:9::form_render_values:61::form_field_ptr:463 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  form_mode:9::form_render_values:95::form_field_ptr:463 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  form_mode:9::form_control:86::form_field_ptr:484 [ form_mode::preset_current#6 form_cursor_count#23 keyboard_events_size#49 form_field_idx#30 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#30 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [765] if(0!=*print_str_at::str#2) goto print_str_at::@2 [ print_str_at::str#2 print_str_at::at#2 ] ( form_mode:9::render_preset_name:63::print_str_at:481 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  form_mode:9::render_preset_name:97::print_str_at:481 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a reg byte y 
Statement [767] *print_str_at::at#2 = *print_str_at::str#2 [ print_str_at::str#2 print_str_at::at#2 ] ( form_mode:9::render_preset_name:63::print_str_at:481 [ form_cursor_count#1 keyboard_events_size#28 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  form_mode:9::render_preset_name:97::print_str_at:481 [ form_cursor_count#17 keyboard_events_size#25 form_field_idx#19 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a reg byte y 
Statement [770] *((byte*)CIA1) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0] [ ] ( gfx_mode:11::keyboard_event_scan:225::keyboard_matrix_read:581 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#107 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_matrix_read:581 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#107 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [771] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( gfx_mode:11::keyboard_event_scan:225::keyboard_matrix_read:581 [ form_cursor_count#17 form_field_idx#19 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#107 keyboard_matrix_read::return#0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_matrix_read:581 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#107 keyboard_matrix_read::return#0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [774] keyboard_event_pressed::$0 = keyboard_event_pressed::keycode#4 >> 3 [ keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ( gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:590 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:590 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:596 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:596 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:602 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:602 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:608 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:608 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Statement [776] keyboard_event_pressed::$1 = keyboard_event_pressed::keycode#4 & 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:590 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:590 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:596 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:596 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:602 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:602 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:608 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:608 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Statement [777] keyboard_event_pressed::return#10 = keyboard_event_pressed::row_bits#0 & keyboard_matrix_col_bitmask[keyboard_event_pressed::$1] [ keyboard_event_pressed::return#10 ] ( gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:590 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_event_pressed::return#10 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:590 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:596 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:596 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:602 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:602 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  gfx_mode:11::keyboard_event_scan:225::keyboard_event_pressed:608 [ form_cursor_count#17 form_field_idx#19 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::return#10 ] { { keyboard_events_size#25 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  form_mode:9::form_control:86::keyboard_event_scan:495::keyboard_event_pressed:608 [ form_mode::preset_current#6 form_field_idx#30 form_control::field#0 form_cursor_count#16 keyboard_events_size#100 keyboard_modifiers#21 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#49 = keyboard_events_size#98 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Statement [783] abs_u16::return#2 = - abs_u16::w#2 [ abs_u16::return#2 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::abs_u16:665 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 abs_u16::return#2 ] { { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::abs_u16:669 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 bitmap_line::dx#0 abs_u16::return#2 ] { { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [794] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:687 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:698 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:704 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:714 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [795] bitmap_plot::$0 = bitmap_plot::x#4 & $fff8 [ bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:687 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:698 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:704 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:714 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [796] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$0 [ bitmap_plot::x#4 bitmap_plot::plotter#1 ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:687 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:698 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:704 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:714 [ gfx_init_VICII_bitmap::l#2 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [798] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1] [ ] ( gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:687 [ gfx_init_VICII_bitmap::l#2 bitmap_line::y2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 ] { { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:698 [ gfx_init_VICII_bitmap::l#2 ] { { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:704 [ gfx_init_VICII_bitmap::l#2 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 ] { { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  gfx_init:6::gfx_init_VICII_bitmap:28::bitmap_line:324::bitmap_plot:714 [ gfx_init_VICII_bitmap::l#2 ] { { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x1#0 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ form_mode::i#2 form_mode::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:5 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[1]:6 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ gfx_mode::VICII_control#4 gfx_mode::VICII_control#2 gfx_mode::VICII_control#5 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ gfx_mode::VICII_control2#2 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ gfx_mode::cy#4 gfx_mode::cy#1 ] : zp[1]:9 , reg byte x , 
Potential registers zp[2]:10 [ gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] : zp[2]:12 , 
Potential registers zp[1]:14 [ gfx_mode::cx#2 gfx_mode::cx#1 ] : zp[1]:14 , reg byte x , 
Potential registers zp[1]:15 [ gfx_mode::j#2 gfx_mode::j#1 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ gfx_mode::i#2 gfx_mode::i#1 ] : zp[1]:16 , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] : zp[1]:17 , reg byte x , 
Potential registers zp[1]:18 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] : zp[1]:18 , reg byte x , 
Potential registers zp[2]:19 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] : zp[2]:19 , 
Potential registers zp[1]:21 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] : zp[1]:21 , reg byte x , 
Potential registers zp[1]:22 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] : zp[1]:22 , reg byte x , 
Potential registers zp[2]:23 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] : zp[1]:25 , reg byte x , 
Potential registers zp[1]:26 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] : zp[1]:26 , reg byte x , 
Potential registers zp[2]:27 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] : zp[2]:27 , 
Potential registers zp[1]:29 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] : zp[1]:29 , reg byte x , 
Potential registers zp[1]:30 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] : zp[1]:30 , reg byte x , 
Potential registers zp[2]:31 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] : zp[2]:31 , 
Potential registers zp[1]:33 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] : zp[1]:33 , reg byte x , 
Potential registers zp[2]:34 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] : zp[2]:34 , 
Potential registers zp[1]:36 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] : zp[1]:36 , reg byte x , 
Potential registers zp[1]:37 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] : zp[1]:37 , reg byte x , 
Potential registers zp[2]:38 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] : zp[2]:40 , 
Potential registers zp[1]:42 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] : zp[1]:42 , reg byte x , 
Potential registers zp[1]:43 [ gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ] : zp[1]:43 , reg byte x , 
Potential registers zp[1]:44 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] : zp[1]:44 , reg byte x , 
Potential registers zp[2]:45 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] : zp[2]:45 , 
Potential registers zp[1]:47 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] : zp[1]:47 , reg byte x , 
Potential registers zp[2]:48 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] : zp[2]:48 , 
Potential registers zp[1]:50 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] : zp[1]:50 , reg byte x , 
Potential registers zp[2]:51 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] : zp[2]:51 , 
Potential registers zp[1]:53 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] : zp[1]:53 , reg byte x , 
Potential registers zp[1]:54 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] : zp[1]:54 , reg byte a , reg byte x , 
Potential registers zp[2]:55 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] : zp[2]:55 , 
Potential registers zp[1]:57 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] : zp[1]:57 , reg byte x , 
Potential registers zp[1]:58 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] : zp[1]:58 , reg byte a , reg byte x , 
Potential registers zp[1]:59 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] : zp[1]:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:60 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] : zp[1]:60 , reg byte x , 
Potential registers zp[2]:61 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] : zp[2]:61 , 
Potential registers zp[1]:63 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] : zp[1]:63 , reg byte x , 
Potential registers zp[1]:64 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] : zp[1]:64 , reg byte x , 
Potential registers zp[2]:65 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] : zp[2]:65 , 
Potential registers zp[1]:67 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] : zp[1]:67 , reg byte x , 
Potential registers zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] : zp[1]:68 , reg byte x , 
Potential registers zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] : zp[2]:69 , 
Potential registers zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] : zp[1]:71 , reg byte x , 
Potential registers zp[2]:72 [ print_set_screen::screen#2 ] : zp[2]:72 , 
Potential registers zp[2]:74 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] : zp[2]:74 , 
Potential registers zp[2]:76 [ print_char_cursor#43 print_char_cursor#2 print_char_cursor#72 print_char_cursor#73 print_char_cursor#44 print_char_cursor#29 ] : zp[2]:76 , 
Potential registers zp[2]:78 [ form_set_screen::line#2 form_set_screen::line#1 ] : zp[2]:78 , 
Potential registers zp[1]:80 [ form_set_screen::y#2 form_set_screen::y#1 ] : zp[1]:80 , reg byte x , reg byte y , 
Potential registers zp[1]:81 [ form_render_values::idx#2 form_render_values::idx#1 ] : zp[1]:81 , reg byte x , reg byte y , 
Potential registers zp[1]:82 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] : zp[1]:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:83 [ render_preset_name::name#13 ] : zp[2]:83 , 
Potential registers zp[1]:85 [ form_control::return#2 ] : zp[1]:85 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:86 [ apply_preset::preset#15 ] : zp[2]:86 , 
Potential registers zp[1]:88 [ apply_preset::i#2 apply_preset::i#1 ] : zp[1]:88 , reg byte x , reg byte y , 
Potential registers zp[1]:89 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:90 [ get_plane::return#14 ] : zp[4]:90 , 
Potential registers zp[1]:94 [ get_VICII_screen::idx#2 get_VICII_screen::idx#0 get_VICII_screen::idx#1 ] : zp[1]:94 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:95 [ get_VICII_screen::return#5 ] : zp[2]:95 , 
Potential registers zp[2]:97 [ get_VICII_charset::return#2 ] : zp[2]:97 , 
Potential registers zp[1]:99 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] : zp[1]:99 , reg byte x , reg byte y , 
Potential registers zp[1]:100 [ keyboard_modifiers#22 keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#2 keyboard_modifiers#3 keyboard_modifiers#4 ] : zp[1]:100 , reg byte x , 
Potential registers zp[1]:101 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] : zp[1]:101 , reg byte x , reg byte y , 
Potential registers zp[1]:102 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] : zp[1]:102 , reg byte x , reg byte y , 
Potential registers zp[1]:103 [ keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ] : zp[1]:103 , reg byte x , 
Potential registers zp[1]:104 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] : zp[1]:104 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:105 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp[1]:105 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:106 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp[1]:106 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:107 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp[1]:107 , reg byte x , reg byte y , 
Potential registers zp[2]:108 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp[2]:108 , 
Potential registers zp[2]:110 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] : zp[2]:110 , 
Potential registers zp[2]:112 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ] : zp[2]:112 , 
Potential registers zp[2]:114 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ] : zp[2]:114 , 
Potential registers zp[2]:116 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] : zp[2]:116 , 
Potential registers zp[1]:118 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] : zp[1]:118 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:119 [ gfx_init_plane_fill::plane_addr#3 ] : zp[4]:119 , 
Potential registers zp[1]:123 [ gfx_init_plane_fill::fill#6 ] : zp[1]:123 , reg byte x , 
Potential registers zp[1]:124 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] : zp[1]:124 , reg byte x , 
Potential registers zp[2]:125 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] : zp[2]:125 , 
Potential registers zp[1]:127 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] : zp[1]:127 , reg byte x , 
Potential registers zp[2]:128 [ memset::num#3 ] : zp[2]:128 , 
Potential registers zp[2]:130 [ memset::str#4 memset::str#0 ] : zp[2]:130 , 
Potential registers zp[1]:132 [ memset::c#5 ] : zp[1]:132 , reg byte x , 
Potential registers zp[2]:133 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:133 , 
Potential registers zp[2]:135 [ print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ] : zp[2]:135 , 
Potential registers zp[1]:137 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] : zp[1]:137 , reg byte x , reg byte y , 
Potential registers zp[2]:138 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] : zp[2]:138 , 
Potential registers zp[2]:140 [ print_str_at::at#2 print_str_at::at#0 ] : zp[2]:140 , 
Potential registers zp[1]:142 [ keyboard_event_pressed::keycode#4 ] : zp[1]:142 , reg byte x , reg byte y , 
Potential registers zp[2]:143 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ] : zp[2]:143 , 
Potential registers zp[2]:145 [ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ] : zp[2]:145 , 
Potential registers zp[2]:147 [ sgn_u16::return#4 ] : zp[2]:147 , 
Potential registers zp[1]:149 [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ] : zp[1]:149 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:150 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] : zp[2]:150 , 
Potential registers zp[1]:152 [ form_control::return#0 ] : zp[1]:152 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:153 [ form_mode::$11 ] : zp[1]:153 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:154 [ apply_preset::idx#0 ] : zp[1]:154 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:155 [ gfx_mode::$18 ] : zp[1]:155 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:156 [ gfx_mode::plane_a_offs#0 ] : zp[1]:156 , reg byte x , reg byte y , 
Potential registers zp[4]:157 [ get_plane::return#16 ] : zp[4]:157 , 
Potential registers zp[4]:161 [ gfx_mode::$20 ] : zp[4]:161 , 
Potential registers zp[4]:165 [ gfx_mode::plane_a#0 ] : zp[4]:165 , 
Potential registers zp[2]:169 [ gfx_mode::$22 ] : zp[2]:169 , 
Potential registers zp[1]:171 [ gfx_mode::$23 ] : zp[1]:171 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:172 [ gfx_mode::$24 ] : zp[2]:172 , 
Potential registers zp[1]:174 [ gfx_mode::$25 ] : zp[1]:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:175 [ gfx_mode::$26 ] : zp[2]:175 , 
Potential registers zp[1]:177 [ gfx_mode::$27 ] : zp[1]:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:178 [ gfx_mode::$28 ] : zp[1]:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:179 [ gfx_mode::$29 ] : zp[1]:179 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:180 [ gfx_mode::$30 ] : zp[1]:180 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:181 [ gfx_mode::$31 ] : zp[1]:181 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:182 [ gfx_mode::$32 ] : zp[1]:182 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:183 [ gfx_mode::plane_b_offs#0 ] : zp[1]:183 , reg byte x , reg byte y , 
Potential registers zp[4]:184 [ get_plane::return#17 ] : zp[4]:184 , 
Potential registers zp[4]:188 [ gfx_mode::$34 ] : zp[4]:188 , 
Potential registers zp[4]:192 [ gfx_mode::plane_b#0 ] : zp[4]:192 , 
Potential registers zp[2]:196 [ gfx_mode::$36 ] : zp[2]:196 , 
Potential registers zp[1]:198 [ gfx_mode::$37 ] : zp[1]:198 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:199 [ gfx_mode::$38 ] : zp[2]:199 , 
Potential registers zp[1]:201 [ gfx_mode::$39 ] : zp[1]:201 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:202 [ gfx_mode::$40 ] : zp[2]:202 , 
Potential registers zp[1]:204 [ gfx_mode::$41 ] : zp[1]:204 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:205 [ gfx_mode::$42 ] : zp[1]:205 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:206 [ gfx_mode::$43 ] : zp[1]:206 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:207 [ gfx_mode::$44 ] : zp[1]:207 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:208 [ gfx_mode::$45 ] : zp[1]:208 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:209 [ get_VICII_screen::return#10 ] : zp[2]:209 , 
Potential registers zp[2]:211 [ gfx_mode::$82 ] : zp[2]:211 , 
Potential registers zp[2]:213 [ gfx_mode::$47 ] : zp[2]:213 , 
Potential registers zp[2]:215 [ gfx_mode::$48 ] : zp[2]:215 , 
Potential registers zp[1]:217 [ get_VICII_charset::idx#0 ] : zp[1]:217 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:218 [ get_VICII_charset::return#4 ] : zp[2]:218 , 
Potential registers zp[2]:220 [ gfx_mode::$83 ] : zp[2]:220 , 
Potential registers zp[2]:222 [ gfx_mode::$50 ] : zp[2]:222 , 
Potential registers zp[1]:224 [ gfx_mode::$51 ] : zp[1]:224 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:225 [ gfx_mode::$52 ] : zp[1]:225 , reg byte x , reg byte y , 
Potential registers zp[1]:226 [ gfx_mode::$84 ] : zp[1]:226 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:227 [ gfx_mode::$53 ] : zp[1]:227 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:228 [ get_VICII_screen::return#11 ] : zp[2]:228 , 
Potential registers zp[1]:230 [ gfx_mode::$55 ] : zp[1]:230 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:231 [ gfx_mode::$56 ] : zp[1]:231 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:232 [ gfx_mode::$57 ] : zp[1]:232 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:233 [ gfx_mode::$58 ] : zp[1]:233 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:234 [ gfx_mode::$59 ] : zp[1]:234 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:235 [ gfx_mode::$60 ] : zp[1]:235 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:236 [ gfx_mode::$61 ] : zp[1]:236 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:237 [ gfx_mode::$62 ] : zp[1]:237 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:238 [ keyboard_event_get::return#3 ] : zp[1]:238 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:239 [ gfx_mode::keyboard_event#0 ] : zp[1]:239 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:240 [ gfx_init_screen0::$0 ] : zp[1]:240 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:241 [ gfx_init_screen0::$1 ] : zp[1]:241 , reg byte x , reg byte y , 
Potential registers zp[1]:242 [ gfx_init_screen0::$2 ] : zp[1]:242 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:243 [ gfx_init_screen0::$3 ] : zp[1]:243 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:244 [ gfx_init_screen1::$0 ] : zp[1]:244 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:245 [ gfx_init_screen1::$1 ] : zp[1]:245 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:246 [ gfx_init_screen2::$0 ] : zp[1]:246 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:247 [ gfx_init_screen2::col#0 ] : zp[1]:247 , reg byte x , reg byte y , 
Potential registers zp[1]:248 [ gfx_init_screen2::col2#0 ] : zp[1]:248 , reg byte x , reg byte y , 
Potential registers zp[1]:249 [ gfx_init_screen2::$3 ] : zp[1]:249 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:250 [ gfx_init_screen2::$4 ] : zp[1]:250 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:251 [ gfx_init_screen3::$0 ] : zp[1]:251 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:252 [ gfx_init_screen3::$1 ] : zp[1]:252 , reg byte x , reg byte y , 
Potential registers zp[1]:253 [ gfx_init_screen3::$2 ] : zp[1]:253 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:254 [ gfx_init_screen3::$3 ] : zp[1]:254 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:255 [ bitmap_line::x2#0 ] : zp[2]:255 , 
Potential registers zp[2]:257 [ bitmap_line::y2#0 ] : zp[2]:257 , 
Potential registers zp[2]:259 [ gfx_init_plane_8bppchunky::$5 ] : zp[2]:259 , 
Potential registers zp[1]:261 [ gfx_init_plane_8bppchunky::c#0 ] : zp[1]:261 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:262 [ gfx_init_plane_charset8::$2 ] : zp[1]:262 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:263 [ gfx_init_plane_horisontal::$2 ] : zp[1]:263 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:264 [ gfx_init_plane_horisontal2::$2 ] : zp[1]:264 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:265 [ gfx_init_plane_horisontal2::row#0 ] : zp[1]:265 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:266 [ print_str_lines::ch#0 ] : zp[1]:266 , reg byte a , reg byte x , 
Potential registers zp[1]:267 [ print_char::ch#0 ] : zp[1]:267 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:268 [ form_set_screen::$0 ] : zp[1]:268 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:269 [ form_set_screen::$1 ] : zp[1]:269 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:270 [ form_field_ptr::return#3 ] : zp[2]:270 , 
Potential registers zp[2]:272 [ form_control::field#0 ] : zp[2]:272 , 
Potential registers zp[1]:274 [ form_control::$12 ] : zp[1]:274 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:275 [ keyboard_event_get::return#4 ] : zp[1]:275 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:276 [ form_control::key_event#0 ] : zp[1]:276 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:277 [ form_control::$14 ] : zp[1]:277 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:278 [ form_control::$15 ] : zp[1]:278 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:279 [ form_control::$22 ] : zp[1]:279 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:280 [ form_control::$13 ] : zp[1]:280 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:281 [ keyboard_matrix_read::rowid#0 ] : zp[1]:281 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:282 [ keyboard_matrix_read::return#2 ] : zp[1]:282 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:283 [ keyboard_event_scan::row_scan#0 ] : zp[1]:283 , reg byte x , reg byte y , 
Potential registers zp[1]:284 [ keyboard_event_pressed::return#0 ] : zp[1]:284 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:285 [ keyboard_event_scan::$0 ] : zp[1]:285 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:286 [ keyboard_event_pressed::return#1 ] : zp[1]:286 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:287 [ keyboard_event_scan::$3 ] : zp[1]:287 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:288 [ keyboard_event_pressed::return#2 ] : zp[1]:288 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:289 [ keyboard_event_scan::$6 ] : zp[1]:289 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:290 [ keyboard_event_pressed::return#3 ] : zp[1]:290 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:291 [ keyboard_event_scan::$9 ] : zp[1]:291 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:292 [ keyboard_event_scan::$15 ] : zp[1]:292 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:293 [ keyboard_event_scan::$16 ] : zp[1]:293 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:294 [ keyboard_event_scan::event_type#0 ] : zp[1]:294 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:295 [ keyboard_event_scan::$23 ] : zp[1]:295 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:296 [ bitmap_init::$7 ] : zp[1]:296 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:297 [ bitmap_init::$4 ] : zp[1]:297 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:298 [ bitmap_init::$5 ] : zp[1]:298 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:299 [ bitmap_init::$6 ] : zp[1]:299 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:300 [ abs_u16::return#0 ] : zp[2]:300 , 
Potential registers zp[2]:302 [ bitmap_line::dx#0 ] : zp[2]:302 , 
Potential registers zp[2]:304 [ abs_u16::return#1 ] : zp[2]:304 , 
Potential registers zp[2]:306 [ bitmap_line::dy#0 ] : zp[2]:306 , 
Potential registers zp[2]:308 [ sgn_u16::return#0 ] : zp[2]:308 , 
Potential registers zp[2]:310 [ bitmap_line::sx#0 ] : zp[2]:310 , 
Potential registers zp[2]:312 [ sgn_u16::return#1 ] : zp[2]:312 , 
Potential registers zp[2]:314 [ bitmap_line::sy#0 ] : zp[2]:314 , 
Potential registers zp[4]:316 [ gfx_init_plane_fill::$0 ] : zp[4]:316 , 
Potential registers zp[2]:320 [ gfx_init_plane_fill::$1 ] : zp[2]:320 , 
Potential registers zp[1]:322 [ gfx_init_plane_fill::gfxbCpuBank#0 ] : zp[1]:322 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:323 [ gfx_init_plane_fill::$4 ] : zp[2]:323 , 
Potential registers zp[2]:325 [ gfx_init_plane_fill::$5 ] : zp[2]:325 , 
Potential registers zp[2]:327 [ gfx_init_plane_fill::gfxb#0 ] : zp[2]:327 , 
Potential registers zp[2]:329 [ memset::end#0 ] : zp[2]:329 , 
Potential registers zp[1]:331 [ form_field_ptr::y#0 ] : zp[1]:331 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:332 [ form_field_ptr::line#0 ] : zp[2]:332 , 
Potential registers zp[1]:334 [ form_field_ptr::x#0 ] : zp[1]:334 , reg byte x , reg byte y , 
Potential registers zp[2]:335 [ form_field_ptr::return#0 ] : zp[2]:335 , 
Potential registers zp[1]:337 [ keyboard_matrix_read::return#0 ] : zp[1]:337 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:338 [ keyboard_event_pressed::$0 ] : zp[1]:338 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:339 [ keyboard_event_pressed::row_bits#0 ] : zp[1]:339 , reg byte x , reg byte y , 
Potential registers zp[1]:340 [ keyboard_event_pressed::$1 ] : zp[1]:340 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:341 [ keyboard_event_pressed::return#10 ] : zp[1]:341 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:342 [ abs_u16::$0 ] : zp[1]:342 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:343 [ abs_u16::$1 ] : zp[1]:343 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:344 [ sgn_u16::$0 ] : zp[1]:344 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:345 [ sgn_u16::$1 ] : zp[1]:345 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:346 [ bitmap_plot::plotter#0 ] : zp[2]:346 , 
Potential registers zp[2]:348 [ bitmap_plot::$0 ] : zp[2]:348 , 
Potential registers zp[2]:350 [ bitmap_plot::plotter#1 ] : zp[2]:350 , 
Potential registers zp[1]:352 [ bitmap_plot::$1 ] : zp[1]:352 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [keyboard_event_scan] 2,000,000,000,002: zp[1]:292 [ keyboard_event_scan::$15 ] 2,000,000,000,002: zp[1]:293 [ keyboard_event_scan::$16 ] 2,000,000,000,002: zp[1]:294 [ keyboard_event_scan::event_type#0 ] 2,000,000,000,002: zp[1]:295 [ keyboard_event_scan::$23 ] 1,785,714,285,716.07: zp[1]:101 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 1,190,384,615,389.25: zp[1]:102 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] 210,000,000,001.74: zp[1]:99 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 127,777,777,778.06: zp[1]:283 [ keyboard_event_scan::row_scan#0 ] 20,000,002: zp[1]:285 [ keyboard_event_scan::$0 ] 20,000,002: zp[1]:287 [ keyboard_event_scan::$3 ] 20,000,002: zp[1]:289 [ keyboard_event_scan::$6 ] 20,000,002: zp[1]:291 [ keyboard_event_scan::$9 ] 
Uplift Scope [] 5,881,709,169,057.27: zp[1]:103 [ keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ] 2,601,131,954.45: zp[2]:135 [ print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ] 150,938,221.86: zp[2]:76 [ print_char_cursor#43 print_char_cursor#2 print_char_cursor#72 print_char_cursor#73 print_char_cursor#44 print_char_cursor#29 ] 82,000,008.36: zp[1]:100 [ keyboard_modifiers#22 keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#2 keyboard_modifiers#3 keyboard_modifiers#4 ] 5,680,494.6: zp[1]:4 [ form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ] 1,541,532.48: zp[1]:3 [ form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ] 
Uplift Scope [keyboard_matrix_read] 1,100,000,000,002: zp[1]:281 [ keyboard_matrix_read::rowid#0 ] 366,666,666,667.33: zp[1]:337 [ keyboard_matrix_read::return#0 ] 200,000,000,002: zp[1]:282 [ keyboard_matrix_read::return#2 ] 
Uplift Scope [print_str_at] 3,000,800,004.25: zp[2]:138 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] 2,000,000,002: zp[2]:140 [ print_str_at::at#2 print_str_at::at#0 ] 
Uplift Scope [form_field_ptr] 3,000,000,003: zp[1]:331 [ form_field_ptr::y#0 ] 902,333,338.67: zp[1]:137 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] 525,000,000.75: zp[1]:334 [ form_field_ptr::x#0 ] 333,666,667.33: zp[2]:335 [ form_field_ptr::return#0 ] 200,000,000.2: zp[2]:332 [ form_field_ptr::line#0 ] 2,000,002: zp[2]:270 [ form_field_ptr::return#3 ] 
Uplift Scope [keyboard_event_pressed] 200,000,002: zp[1]:338 [ keyboard_event_pressed::$0 ] 200,000,002: zp[1]:340 [ keyboard_event_pressed::$1 ] 100,000,001: zp[1]:339 [ keyboard_event_pressed::row_bits#0 ] 66,666,667.33: zp[1]:142 [ keyboard_event_pressed::keycode#4 ] 23,333,334.17: zp[1]:341 [ keyboard_event_pressed::return#10 ] 20,000,002: zp[1]:284 [ keyboard_event_pressed::return#0 ] 20,000,002: zp[1]:286 [ keyboard_event_pressed::return#1 ] 20,000,002: zp[1]:288 [ keyboard_event_pressed::return#2 ] 20,000,002: zp[1]:290 [ keyboard_event_pressed::return#3 ] 
Uplift Scope [apply_preset] 366,666,670.33: zp[1]:88 [ apply_preset::i#2 apply_preset::i#1 ] 20,000,000.2: zp[2]:86 [ apply_preset::preset#15 ] 100,910.18: zp[1]:154 [ apply_preset::idx#0 ] 
Uplift Scope [form_render_values] 300,000,003: zp[1]:81 [ form_render_values::idx#2 form_render_values::idx#1 ] 
Uplift Scope [bitmap_plot] 26,060,014: zp[1]:149 [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ] 20,000,002: zp[2]:348 [ bitmap_plot::$0 ] 20,000,002: zp[1]:352 [ bitmap_plot::$1 ] 15,000,001.5: zp[2]:350 [ bitmap_plot::plotter#1 ] 7,525,005.5: zp[2]:150 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] 5,000,000.5: zp[2]:346 [ bitmap_plot::plotter#0 ] 
Uplift Scope [keyboard_event_get] 22,752,502.75: zp[1]:104 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] 2,000,002: zp[1]:275 [ keyboard_event_get::return#4 ] 20,002: zp[1]:238 [ keyboard_event_get::return#3 ] 
Uplift Scope [bitmap_line] 6,908,834.24: zp[2]:112 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ] 5,505,574.66: zp[2]:114 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ] 5,255,340.77: zp[2]:110 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] 5,255,340.77: zp[2]:116 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] 84,444.64: zp[2]:306 [ bitmap_line::dy#0 ] 77,307.81: zp[2]:314 [ bitmap_line::sy#0 ] 76,000.18: zp[2]:302 [ bitmap_line::dx#0 ] 67,000.1: zp[2]:310 [ bitmap_line::sx#0 ] 31,906.38: zp[2]:257 [ bitmap_line::y2#0 ] 30,939.52: zp[2]:255 [ bitmap_line::x2#0 ] 
Uplift Scope [form_control] 2,000,002: zp[1]:274 [ form_control::$12 ] 2,000,002: zp[1]:277 [ form_control::$14 ] 2,000,002: zp[1]:278 [ form_control::$15 ] 2,000,002: zp[1]:279 [ form_control::$22 ] 2,000,002: zp[1]:280 [ form_control::$13 ] 1,333,334.67: zp[1]:276 [ form_control::key_event#0 ] 296,296.59: zp[2]:272 [ form_control::field#0 ] 200,002: zp[1]:152 [ form_control::return#0 ] 33,333.67: zp[1]:85 [ form_control::return#2 ] 
Uplift Scope [print_char] 11,000,002: zp[1]:267 [ print_char::ch#0 ] 
Uplift Scope [memset] 3,356,672.33: zp[2]:133 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 168,333.67: zp[2]:329 [ memset::end#0 ] 125,000.12: zp[1]:132 [ memset::c#5 ] 10,001: zp[2]:128 [ memset::num#3 ] 2,335.67: zp[2]:130 [ memset::str#4 memset::str#0 ] 
Uplift Scope [print_str_lines] 1,934,338.17: zp[2]:74 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] 666,667.33: zp[1]:266 [ print_str_lines::ch#0 ] 
Uplift Scope [gfx_init_plane_charset8] 400,004: zp[1]:59 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] 200,002: zp[1]:262 [ gfx_init_plane_charset8::$2 ] 172,223.94: zp[1]:58 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] 104,287.79: zp[1]:54 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] 84,115.22: zp[2]:55 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] 77,896.93: zp[1]:57 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] 18,816.69: zp[2]:51 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] 16,430.21: zp[1]:53 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] 1,619.26: zp[1]:50 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Uplift Scope [abs_u16] 375,008.25: zp[2]:143 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ] 200,002: zp[1]:342 [ abs_u16::$0 ] 200,002: zp[1]:343 [ abs_u16::$1 ] 20,002: zp[2]:300 [ abs_u16::return#0 ] 20,002: zp[2]:304 [ abs_u16::return#1 ] 
Uplift Scope [form_set_screen] 216,668.83: zp[1]:80 [ form_set_screen::y#2 form_set_screen::y#1 ] 200,002: zp[1]:268 [ form_set_screen::$0 ] 200,002: zp[1]:269 [ form_set_screen::$1 ] 146,668.13: zp[2]:78 [ form_set_screen::line#2 form_set_screen::line#1 ] 
Uplift Scope [gfx_mode] 210,004.5: zp[2]:12 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] 200,002: zp[1]:14 [ gfx_mode::cx#2 gfx_mode::cx#1 ] 165,640.27: zp[2]:10 [ gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 ] 35,003.5: zp[1]:15 [ gfx_mode::j#2 gfx_mode::j#1 ] 35,003.5: zp[1]:16 [ gfx_mode::i#2 gfx_mode::i#1 ] 20,002: zp[1]:239 [ gfx_mode::keyboard_event#0 ] 17,858.93: zp[1]:9 [ gfx_mode::cy#4 gfx_mode::cy#1 ] 2,222: zp[1]:6 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] 606: zp[1]:7 [ gfx_mode::VICII_control#4 gfx_mode::VICII_control#2 gfx_mode::VICII_control#5 ] 202: zp[1]:155 [ gfx_mode::$18 ] 202: zp[4]:161 [ gfx_mode::$20 ] 202: zp[2]:169 [ gfx_mode::$22 ] 202: zp[1]:171 [ gfx_mode::$23 ] 202: zp[2]:172 [ gfx_mode::$24 ] 202: zp[1]:174 [ gfx_mode::$25 ] 202: zp[2]:175 [ gfx_mode::$26 ] 202: zp[1]:177 [ gfx_mode::$27 ] 202: zp[1]:178 [ gfx_mode::$28 ] 202: zp[1]:179 [ gfx_mode::$29 ] 202: zp[1]:180 [ gfx_mode::$30 ] 202: zp[1]:181 [ gfx_mode::$31 ] 202: zp[1]:182 [ gfx_mode::$32 ] 202: zp[4]:188 [ gfx_mode::$34 ] 202: zp[2]:196 [ gfx_mode::$36 ] 202: zp[1]:198 [ gfx_mode::$37 ] 202: zp[2]:199 [ gfx_mode::$38 ] 202: zp[1]:201 [ gfx_mode::$39 ] 202: zp[2]:202 [ gfx_mode::$40 ] 202: zp[1]:204 [ gfx_mode::$41 ] 202: zp[1]:205 [ gfx_mode::$42 ] 202: zp[1]:206 [ gfx_mode::$43 ] 202: zp[1]:207 [ gfx_mode::$44 ] 202: zp[1]:208 [ gfx_mode::$45 ] 202: zp[2]:213 [ gfx_mode::$47 ] 202: zp[2]:222 [ gfx_mode::$50 ] 202: zp[1]:224 [ gfx_mode::$51 ] 202: zp[1]:226 [ gfx_mode::$84 ] 202: zp[1]:227 [ gfx_mode::$53 ] 202: zp[1]:230 [ gfx_mode::$55 ] 202: zp[1]:231 [ gfx_mode::$56 ] 202: zp[1]:232 [ gfx_mode::$57 ] 202: zp[1]:233 [ gfx_mode::$58 ] 202: zp[1]:234 [ gfx_mode::$59 ] 202: zp[1]:235 [ gfx_mode::$60 ] 202: zp[1]:236 [ gfx_mode::$61 ] 202: zp[1]:237 [ gfx_mode::$62 ] 101: zp[1]:8 [ gfx_mode::VICII_control2#2 ] 101: zp[2]:211 [ gfx_mode::$82 ] 101: zp[2]:220 [ gfx_mode::$83 ] 101: zp[1]:225 [ gfx_mode::$52 ] 57.71: zp[4]:165 [ gfx_mode::plane_a#0 ] 57.71: zp[4]:192 [ gfx_mode::plane_b#0 ] 40.4: zp[1]:156 [ gfx_mode::plane_a_offs#0 ] 40.4: zp[1]:183 [ gfx_mode::plane_b_offs#0 ] 12.62: zp[2]:215 [ gfx_mode::$48 ] 
Uplift Scope [sgn_u16] 200,002: zp[1]:344 [ sgn_u16::$0 ] 200,002: zp[1]:345 [ sgn_u16::$1 ] 160,007: zp[2]:145 [ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ] 20,002: zp[2]:308 [ sgn_u16::return#0 ] 20,002: zp[2]:312 [ sgn_u16::return#1 ] 5,000.5: zp[2]:147 [ sgn_u16::return#4 ] 
Uplift Scope [gfx_init_plane_fill] 220,007.6: zp[2]:125 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] 216,668.83: zp[1]:127 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] 18,335.17: zp[1]:124 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] 5,555.61: zp[1]:123 [ gfx_init_plane_fill::fill#6 ] 2,002: zp[4]:316 [ gfx_init_plane_fill::$0 ] 2,002: zp[2]:320 [ gfx_init_plane_fill::$1 ] 2,002: zp[1]:322 [ gfx_init_plane_fill::gfxbCpuBank#0 ] 2,002: zp[2]:323 [ gfx_init_plane_fill::$4 ] 2,002: zp[2]:325 [ gfx_init_plane_fill::$5 ] 1,001: zp[2]:327 [ gfx_init_plane_fill::gfxb#0 ] 333.67: zp[4]:119 [ gfx_init_plane_fill::plane_addr#3 ] 
Uplift Scope [form_mode] 200,002: zp[1]:153 [ form_mode::$11 ] 43,965.62: zp[1]:5 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] 35,003.5: zp[1]:2 [ form_mode::i#2 form_mode::i#1 ] 
Uplift Scope [render_preset_name] 121,123.36: zp[1]:82 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] 100,001: zp[2]:83 [ render_preset_name::name#13 ] 
Uplift Scope [bitmap_init] 36,253.62: zp[2]:108 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 31,669.83: zp[1]:105 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 20,002: zp[1]:106 [ bitmap_init::x#2 bitmap_init::x#1 ] 20,002: zp[1]:107 [ bitmap_init::y#2 bitmap_init::y#1 ] 20,002: zp[1]:297 [ bitmap_init::$4 ] 20,002: zp[1]:298 [ bitmap_init::$5 ] 20,002: zp[1]:299 [ bitmap_init::$6 ] 5,000.5: zp[1]:296 [ bitmap_init::$7 ] 
Uplift Scope [dtvSetCpuBankSegment1] 133,007: zp[1]:118 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] 
Uplift Scope [gfx_init_screen2] 20,002: zp[1]:246 [ gfx_init_screen2::$0 ] 20,002: zp[1]:249 [ gfx_init_screen2::$3 ] 20,002: zp[1]:250 [ gfx_init_screen2::$4 ] 18,751.88: zp[1]:26 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] 15,001.5: zp[1]:247 [ gfx_init_screen2::col#0 ] 10,631.74: zp[2]:27 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] 10,001: zp[1]:248 [ gfx_init_screen2::col2#0 ] 2,592.68: zp[1]:25 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Uplift Scope [gfx_init_plane_8bppchunky] 35,700.14: zp[1]:47 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] 29,205.35: zp[2]:48 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] 20,002: zp[1]:261 [ gfx_init_plane_8bppchunky::c#0 ] 18,001.8: zp[2]:45 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] 10,001: zp[2]:259 [ gfx_init_plane_8bppchunky::$5 ] 2,424.81: zp[1]:44 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Uplift Scope [gfx_init_screen0] 20,002: zp[1]:240 [ gfx_init_screen0::$0 ] 20,002: zp[1]:242 [ gfx_init_screen0::$2 ] 20,002: zp[1]:243 [ gfx_init_screen0::$3 ] 19,287.64: zp[1]:18 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] 11,369.93: zp[2]:19 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] 10,001: zp[1]:241 [ gfx_init_screen0::$1 ] 2,701.8: zp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Uplift Scope [gfx_init_screen3] 20,002: zp[1]:251 [ gfx_init_screen3::$0 ] 20,002: zp[1]:253 [ gfx_init_screen3::$2 ] 20,002: zp[1]:254 [ gfx_init_screen3::$3 ] 19,287.64: zp[1]:30 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] 11,369.93: zp[2]:31 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] 10,001: zp[1]:252 [ gfx_init_screen3::$1 ] 2,701.8: zp[1]:29 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Uplift Scope [gfx_init_plane_horisontal] 58,408: zp[2]:61 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] 20,002: zp[1]:263 [ gfx_init_plane_horisontal::$2 ] 17,501.75: zp[1]:63 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] 2,592.68: zp[1]:60 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Uplift Scope [gfx_init_screen1] 21,002.1: zp[1]:22 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] 20,002: zp[1]:244 [ gfx_init_screen1::$0 ] 20,002: zp[1]:245 [ gfx_init_screen1::$1 ] 13,953.6: zp[2]:23 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] 3,001.88: zp[1]:21 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Uplift Scope [gfx_init_plane_horisontal2] 20,002: zp[1]:264 [ gfx_init_plane_horisontal2::$2 ] 20,002: zp[1]:265 [ gfx_init_plane_horisontal2::row#0 ] 19,001.9: zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] 13,953.6: zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] 3,001.88: zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Uplift Scope [gfx_init_charset] 21,004.5: zp[2]:40 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] 20,002: zp[1]:42 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] 16,537.27: zp[2]:38 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] 1,787.5: zp[1]:37 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Uplift Scope [gfx_init_screen4] 21,704.6: zp[2]:34 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] 21,668.83: zp[1]:36 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] 1,835.17: zp[1]:33 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Uplift Scope [gfx_init_plane_vertical] 21,704.6: zp[2]:65 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] 21,668.83: zp[1]:67 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] 1,835.17: zp[1]:64 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Uplift Scope [gfx_init_VICII_bitmap] 3,003: zp[1]:43 [ gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ] 
Uplift Scope [get_VICII_screen] 1,445.4: zp[1]:94 [ get_VICII_screen::idx#2 get_VICII_screen::idx#0 get_VICII_screen::idx#1 ] 202: zp[2]:209 [ get_VICII_screen::return#10 ] 202: zp[2]:228 [ get_VICII_screen::return#11 ] 50.5: zp[2]:95 [ get_VICII_screen::return#5 ] 
Uplift Scope [get_plane] 1,419.43: zp[1]:89 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] 202: zp[4]:157 [ get_plane::return#16 ] 202: zp[4]:184 [ get_plane::return#17 ] 50.5: zp[4]:90 [ get_plane::return#14 ] 
Uplift Scope [get_VICII_charset] 1,051.5: zp[1]:217 [ get_VICII_charset::idx#0 ] 202: zp[2]:218 [ get_VICII_charset::return#4 ] 33.67: zp[2]:97 [ get_VICII_charset::return#2 ] 
Uplift Scope [print_set_screen] 1,001: zp[2]:72 [ print_set_screen::screen#2 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [keyboard_init] 
Uplift Scope [bitmap_clear] 
Uplift Scope [main] 
Uplift Scope [gfx_init] 
Uplift Scope [gfx_init_plane_vertical2] 
Uplift Scope [gfx_init_plane_blank] 
Uplift Scope [gfx_init_plane_full] 

Uplifting [keyboard_event_scan] best 15252590 combination reg byte a [ keyboard_event_scan::$15 ] reg byte a [ keyboard_event_scan::$16 ] zp[1]:294 [ keyboard_event_scan::event_type#0 ] zp[1]:295 [ keyboard_event_scan::$23 ] zp[1]:101 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] zp[1]:102 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] zp[1]:99 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] zp[1]:283 [ keyboard_event_scan::row_scan#0 ] zp[1]:285 [ keyboard_event_scan::$0 ] zp[1]:287 [ keyboard_event_scan::$3 ] zp[1]:289 [ keyboard_event_scan::$6 ] zp[1]:291 [ keyboard_event_scan::$9 ] 
Limited combination testing to 10 combinations of 5308416 possible.
Uplifting [] best 15252572 combination zp[1]:103 [ keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ] zp[2]:135 [ print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ] zp[2]:76 [ print_char_cursor#43 print_char_cursor#2 print_char_cursor#72 print_char_cursor#73 print_char_cursor#44 print_char_cursor#29 ] reg byte x [ keyboard_modifiers#22 keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#2 keyboard_modifiers#3 keyboard_modifiers#4 ] zp[1]:4 [ form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ] zp[1]:3 [ form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [keyboard_matrix_read] best 15192566 combination reg byte x [ keyboard_matrix_read::rowid#0 ] reg byte a [ keyboard_matrix_read::return#0 ] zp[1]:282 [ keyboard_matrix_read::return#2 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [print_str_at] best 15192566 combination zp[2]:138 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] zp[2]:140 [ print_str_at::at#2 print_str_at::at#0 ] 
Uplifting [form_field_ptr] best 15189551 combination reg byte y [ form_field_ptr::y#0 ] reg byte x [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] zp[1]:334 [ form_field_ptr::x#0 ] zp[2]:335 [ form_field_ptr::return#0 ] zp[2]:332 [ form_field_ptr::line#0 ] zp[2]:270 [ form_field_ptr::return#3 ] 
Limited combination testing to 10 combinations of 36 possible.
Uplifting [keyboard_event_pressed] best 15189543 combination reg byte a [ keyboard_event_pressed::$0 ] reg byte a [ keyboard_event_pressed::$1 ] zp[1]:339 [ keyboard_event_pressed::row_bits#0 ] zp[1]:142 [ keyboard_event_pressed::keycode#4 ] zp[1]:341 [ keyboard_event_pressed::return#10 ] zp[1]:284 [ keyboard_event_pressed::return#0 ] zp[1]:286 [ keyboard_event_pressed::return#1 ] zp[1]:288 [ keyboard_event_pressed::return#2 ] zp[1]:290 [ keyboard_event_pressed::return#3 ] 
Limited combination testing to 10 combinations of 147456 possible.
Uplifting [apply_preset] best 15177212 combination reg byte y [ apply_preset::i#2 apply_preset::i#1 ] zp[2]:86 [ apply_preset::preset#15 ] reg byte a [ apply_preset::idx#0 ] 
Limited combination testing to 10 combinations of 12 possible.
Uplifting [form_render_values] best 15162212 combination reg byte x [ form_render_values::idx#2 form_render_values::idx#1 ] 
Uplifting [bitmap_plot] best 15161599 combination reg byte a [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ] zp[2]:348 [ bitmap_plot::$0 ] reg byte x [ bitmap_plot::$1 ] zp[2]:350 [ bitmap_plot::plotter#1 ] zp[2]:150 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] zp[2]:346 [ bitmap_plot::plotter#0 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [keyboard_event_get] best 15161284 combination reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] reg byte a [ keyboard_event_get::return#4 ] zp[1]:238 [ keyboard_event_get::return#3 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [bitmap_line] best 15161284 combination zp[2]:112 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ] zp[2]:114 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ] zp[2]:110 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] zp[2]:116 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] zp[2]:306 [ bitmap_line::dy#0 ] zp[2]:314 [ bitmap_line::sy#0 ] zp[2]:302 [ bitmap_line::dx#0 ] zp[2]:310 [ bitmap_line::sx#0 ] zp[2]:257 [ bitmap_line::y2#0 ] zp[2]:255 [ bitmap_line::x2#0 ] 
Uplifting [form_control] best 15161272 combination reg byte a [ form_control::$12 ] reg byte a [ form_control::$14 ] zp[1]:278 [ form_control::$15 ] zp[1]:279 [ form_control::$22 ] zp[1]:280 [ form_control::$13 ] zp[1]:276 [ form_control::key_event#0 ] zp[2]:272 [ form_control::field#0 ] zp[1]:152 [ form_control::return#0 ] zp[1]:85 [ form_control::return#2 ] 
Limited combination testing to 10 combinations of 65536 possible.
Uplifting [print_char] best 15158269 combination reg byte a [ print_char::ch#0 ] 
Uplifting [memset] best 15158160 combination zp[2]:133 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:329 [ memset::end#0 ] reg byte x [ memset::c#5 ] zp[2]:128 [ memset::num#3 ] zp[2]:130 [ memset::str#4 memset::str#0 ] 
Uplifting [print_str_lines] best 15150160 combination zp[2]:74 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] reg byte a [ print_str_lines::ch#0 ] 
Uplifting [gfx_init_plane_charset8] best 15137160 combination reg byte a [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] reg byte a [ gfx_init_plane_charset8::$2 ] zp[1]:58 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] zp[1]:54 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] zp[2]:55 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] zp[1]:57 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] zp[2]:51 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] zp[1]:53 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] zp[1]:50 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Limited combination testing to 10 combinations of 1152 possible.
Uplifting [abs_u16] best 15137150 combination zp[2]:143 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ] reg byte a [ abs_u16::$0 ] reg byte a [ abs_u16::$1 ] zp[2]:300 [ abs_u16::return#0 ] zp[2]:304 [ abs_u16::return#1 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [form_set_screen] best 15135050 combination reg byte x [ form_set_screen::y#2 form_set_screen::y#1 ] reg byte a [ form_set_screen::$0 ] zp[1]:269 [ form_set_screen::$1 ] zp[2]:78 [ form_set_screen::line#2 form_set_screen::line#1 ] 
Limited combination testing to 10 combinations of 48 possible.
Uplifting [sgn_u16] best 15135040 combination reg byte a [ sgn_u16::$0 ] reg byte a [ sgn_u16::$1 ] zp[2]:145 [ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ] zp[2]:308 [ sgn_u16::return#0 ] zp[2]:312 [ sgn_u16::return#1 ] zp[2]:147 [ sgn_u16::return#4 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [gfx_init_plane_fill] best 15134134 combination zp[2]:125 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] reg byte x [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] zp[1]:124 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] zp[1]:123 [ gfx_init_plane_fill::fill#6 ] zp[4]:316 [ gfx_init_plane_fill::$0 ] zp[2]:320 [ gfx_init_plane_fill::$1 ] reg byte a [ gfx_init_plane_fill::gfxbCpuBank#0 ] zp[2]:323 [ gfx_init_plane_fill::$4 ] zp[2]:325 [ gfx_init_plane_fill::$5 ] zp[2]:327 [ gfx_init_plane_fill::gfxb#0 ] zp[4]:119 [ gfx_init_plane_fill::plane_addr#3 ] 
Limited combination testing to 10 combinations of 32 possible.
Uplifting [form_mode] best 15128934 combination reg byte a [ form_mode::$11 ] zp[1]:5 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] reg byte x [ form_mode::i#2 form_mode::i#1 ] 
Limited combination testing to 10 combinations of 24 possible.
Uplifting [render_preset_name] best 15128600 combination reg byte a [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] zp[2]:83 [ render_preset_name::name#13 ] 
Uplifting [bitmap_init] best 15128370 combination zp[2]:108 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] zp[1]:107 [ bitmap_init::y#2 bitmap_init::y#1 ] zp[1]:297 [ bitmap_init::$4 ] zp[1]:298 [ bitmap_init::$5 ] zp[1]:299 [ bitmap_init::$6 ] zp[1]:296 [ bitmap_init::$7 ] 
Limited combination testing to 10 combinations of 15360 possible.
Uplifting [dtvSetCpuBankSegment1] best 15128031 combination reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] 
Uplifting [gfx_init_screen2] best 15126831 combination reg byte a [ gfx_init_screen2::$0 ] reg byte a [ gfx_init_screen2::$3 ] zp[1]:250 [ gfx_init_screen2::$4 ] zp[1]:26 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] zp[1]:247 [ gfx_init_screen2::col#0 ] zp[2]:27 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] zp[1]:248 [ gfx_init_screen2::col2#0 ] zp[1]:25 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Limited combination testing to 10 combinations of 2304 possible.
Uplifting [gfx_init_plane_8bppchunky] best 15125801 combination reg byte x [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] zp[2]:48 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] reg byte a [ gfx_init_plane_8bppchunky::c#0 ] zp[2]:45 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] zp[2]:259 [ gfx_init_plane_8bppchunky::$5 ] zp[1]:44 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [gfx_init_screen0] best 15124601 combination reg byte a [ gfx_init_screen0::$0 ] reg byte a [ gfx_init_screen0::$2 ] zp[1]:243 [ gfx_init_screen0::$3 ] zp[1]:18 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] zp[2]:19 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] zp[1]:241 [ gfx_init_screen0::$1 ] zp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Limited combination testing to 10 combinations of 768 possible.
Uplifting [gfx_init_screen3] best 15123401 combination reg byte a [ gfx_init_screen3::$0 ] reg byte a [ gfx_init_screen3::$2 ] zp[1]:254 [ gfx_init_screen3::$3 ] zp[1]:30 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] zp[2]:31 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] zp[1]:252 [ gfx_init_screen3::$1 ] zp[1]:29 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Limited combination testing to 10 combinations of 768 possible.
Uplifting [gfx_init_plane_horisontal] best 15122101 combination zp[2]:61 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] reg byte a [ gfx_init_plane_horisontal::$2 ] reg byte x [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] zp[1]:60 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [gfx_init_screen1] best 15120501 combination reg byte x [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] reg byte a [ gfx_init_screen1::$0 ] zp[1]:245 [ gfx_init_screen1::$1 ] zp[2]:23 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] zp[1]:21 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [gfx_init_plane_horisontal2] best 15119501 combination reg byte a [ gfx_init_plane_horisontal2::$2 ] reg byte a [ gfx_init_plane_horisontal2::row#0 ] zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [gfx_init_charset] best 15118601 combination zp[2]:40 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] reg byte x [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] zp[2]:38 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] zp[1]:37 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Uplifting [gfx_init_screen4] best 15117701 combination zp[2]:34 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] reg byte x [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] zp[1]:33 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Uplifting [gfx_init_plane_vertical] best 15116801 combination zp[2]:65 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] reg byte x [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] zp[1]:64 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Uplifting [gfx_init_VICII_bitmap] best 15116801 combination zp[1]:43 [ gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ] 
Uplifting [get_VICII_screen] best 15116782 combination reg byte a [ get_VICII_screen::idx#2 get_VICII_screen::idx#0 get_VICII_screen::idx#1 ] zp[2]:209 [ get_VICII_screen::return#10 ] zp[2]:228 [ get_VICII_screen::return#11 ] zp[2]:95 [ get_VICII_screen::return#5 ] 
Uplifting [get_plane] best 15116736 combination reg byte a [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] zp[4]:157 [ get_plane::return#16 ] zp[4]:184 [ get_plane::return#17 ] zp[4]:90 [ get_plane::return#14 ] 
Uplifting [get_VICII_charset] best 15116729 combination reg byte a [ get_VICII_charset::idx#0 ] zp[2]:218 [ get_VICII_charset::return#4 ] zp[2]:97 [ get_VICII_charset::return#2 ] 
Uplifting [print_set_screen] best 15116729 combination zp[2]:72 [ print_set_screen::screen#2 ] 
Uplifting [MOS6526_CIA] best 15116729 combination 
Uplifting [MOS6569_VICII] best 15116729 combination 
Uplifting [MOS6581_SID] best 15116729 combination 
Uplifting [RADIX] best 15116729 combination 
Uplifting [print_ln] best 15116729 combination 
Uplifting [print_cls] best 15116729 combination 
Uplifting [keyboard_init] best 15116729 combination 
Uplifting [bitmap_clear] best 15116729 combination 
Uplifting [main] best 15116729 combination 
Uplifting [gfx_init] best 15116729 combination 
Uplifting [gfx_init_plane_vertical2] best 15116729 combination 
Uplifting [gfx_init_plane_blank] best 15116729 combination 
Uplifting [gfx_init_plane_full] best 15116729 combination 
Attempting to uplift remaining variables inzp[1]:103 [ keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ]
Uplifting [] best 15116729 combination zp[1]:103 [ keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ] 
Attempting to uplift remaining variables inzp[1]:294 [ keyboard_event_scan::event_type#0 ]
Uplifting [keyboard_event_scan] best 14716729 combination reg byte a [ keyboard_event_scan::event_type#0 ] 
Attempting to uplift remaining variables inzp[1]:295 [ keyboard_event_scan::$23 ]
Uplifting [keyboard_event_scan] best 14116729 combination reg byte a [ keyboard_event_scan::$23 ] 
Attempting to uplift remaining variables inzp[1]:101 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Uplifting [keyboard_event_scan] best 12616729 combination reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 
Attempting to uplift remaining variables inzp[1]:102 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Uplifting [keyboard_event_scan] best 12616729 combination zp[1]:102 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] 
Attempting to uplift remaining variables inzp[1]:99 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Uplifting [keyboard_event_scan] best 12616729 combination zp[1]:99 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 
Attempting to uplift remaining variables inzp[1]:282 [ keyboard_matrix_read::return#2 ]
Uplifting [keyboard_matrix_read] best 12556729 combination reg byte a [ keyboard_matrix_read::return#2 ] 
Attempting to uplift remaining variables inzp[1]:283 [ keyboard_event_scan::row_scan#0 ]
Uplifting [keyboard_event_scan] best 12556729 combination zp[1]:283 [ keyboard_event_scan::row_scan#0 ] 
Attempting to uplift remaining variables inzp[1]:334 [ form_field_ptr::x#0 ]
Uplifting [form_field_ptr] best 12556729 combination zp[1]:334 [ form_field_ptr::x#0 ] 
Attempting to uplift remaining variables inzp[1]:339 [ keyboard_event_pressed::row_bits#0 ]
Uplifting [keyboard_event_pressed] best 12556729 combination zp[1]:339 [ keyboard_event_pressed::row_bits#0 ] 
Attempting to uplift remaining variables inzp[1]:142 [ keyboard_event_pressed::keycode#4 ]
Uplifting [keyboard_event_pressed] best 12556729 combination zp[1]:142 [ keyboard_event_pressed::keycode#4 ] 
Attempting to uplift remaining variables inzp[1]:341 [ keyboard_event_pressed::return#10 ]
Uplifting [keyboard_event_pressed] best 12556714 combination reg byte a [ keyboard_event_pressed::return#10 ] 
Attempting to uplift remaining variables inzp[1]:284 [ keyboard_event_pressed::return#0 ]
Uplifting [keyboard_event_pressed] best 12556708 combination reg byte a [ keyboard_event_pressed::return#0 ] 
Attempting to uplift remaining variables inzp[1]:285 [ keyboard_event_scan::$0 ]
Uplifting [keyboard_event_scan] best 12556704 combination reg byte a [ keyboard_event_scan::$0 ] 
Attempting to uplift remaining variables inzp[1]:286 [ keyboard_event_pressed::return#1 ]
Uplifting [keyboard_event_pressed] best 12556698 combination reg byte a [ keyboard_event_pressed::return#1 ] 
Attempting to uplift remaining variables inzp[1]:287 [ keyboard_event_scan::$3 ]
Uplifting [keyboard_event_scan] best 12556694 combination reg byte a [ keyboard_event_scan::$3 ] 
Attempting to uplift remaining variables inzp[1]:288 [ keyboard_event_pressed::return#2 ]
Uplifting [keyboard_event_pressed] best 12556688 combination reg byte a [ keyboard_event_pressed::return#2 ] 
Attempting to uplift remaining variables inzp[1]:289 [ keyboard_event_scan::$6 ]
Uplifting [keyboard_event_scan] best 12556684 combination reg byte a [ keyboard_event_scan::$6 ] 
Attempting to uplift remaining variables inzp[1]:290 [ keyboard_event_pressed::return#3 ]
Uplifting [keyboard_event_pressed] best 12556678 combination reg byte a [ keyboard_event_pressed::return#3 ] 
Attempting to uplift remaining variables inzp[1]:291 [ keyboard_event_scan::$9 ]
Uplifting [keyboard_event_scan] best 12556674 combination reg byte a [ keyboard_event_scan::$9 ] 
Attempting to uplift remaining variables inzp[1]:4 [ form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ]
Uplifting [] best 12556674 combination zp[1]:4 [ form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ] 
Attempting to uplift remaining variables inzp[1]:278 [ form_control::$15 ]
Uplifting [form_control] best 12556672 combination reg byte a [ form_control::$15 ] 
Attempting to uplift remaining variables inzp[1]:279 [ form_control::$22 ]
Uplifting [form_control] best 12556670 combination reg byte a [ form_control::$22 ] 
Attempting to uplift remaining variables inzp[1]:280 [ form_control::$13 ]
Uplifting [form_control] best 12556664 combination reg byte a [ form_control::$13 ] 
Attempting to uplift remaining variables inzp[1]:3 [ form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ]
Uplifting [] best 12556664 combination zp[1]:3 [ form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ] 
Attempting to uplift remaining variables inzp[1]:276 [ form_control::key_event#0 ]
Uplifting [form_control] best 12556652 combination reg byte a [ form_control::key_event#0 ] 
Attempting to uplift remaining variables inzp[1]:14 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Uplifting [gfx_mode] best 12547652 combination reg byte x [ gfx_mode::cx#2 gfx_mode::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:152 [ form_control::return#0 ]
Uplifting [form_control] best 12541652 combination reg byte a [ form_control::return#0 ] 
Attempting to uplift remaining variables inzp[1]:269 [ form_set_screen::$1 ]
Uplifting [form_set_screen] best 12541052 combination reg byte a [ form_set_screen::$1 ] 
Attempting to uplift remaining variables inzp[1]:58 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Uplifting [gfx_init_plane_charset8] best 12532052 combination reg byte x [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] 
Attempting to uplift remaining variables inzp[1]:54 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Uplifting [gfx_init_plane_charset8] best 12532052 combination zp[1]:54 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] 
Attempting to uplift remaining variables inzp[1]:57 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Uplifting [gfx_init_plane_charset8] best 12532052 combination zp[1]:57 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] 
Attempting to uplift remaining variables inzp[1]:5 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Uplifting [form_mode] best 12532052 combination zp[1]:5 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] 
Attempting to uplift remaining variables inzp[1]:15 [ gfx_mode::j#2 gfx_mode::j#1 ]
Uplifting [gfx_mode] best 12530852 combination reg byte x [ gfx_mode::j#2 gfx_mode::j#1 ] 
Attempting to uplift remaining variables inzp[1]:16 [ gfx_mode::i#2 gfx_mode::i#1 ]
Uplifting [gfx_mode] best 12529652 combination reg byte x [ gfx_mode::i#2 gfx_mode::i#1 ] 
Attempting to uplift remaining variables inzp[1]:85 [ form_control::return#2 ]
Uplifting [form_control] best 12528643 combination reg byte x [ form_control::return#2 ] 
Attempting to uplift remaining variables inzp[1]:107 [ bitmap_init::y#2 bitmap_init::y#1 ]
Uplifting [bitmap_init] best 12528483 combination reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] 
Attempting to uplift remaining variables inzp[1]:238 [ keyboard_event_get::return#3 ]
Uplifting [keyboard_event_get] best 12527883 combination reg byte a [ keyboard_event_get::return#3 ] 
Attempting to uplift remaining variables inzp[1]:239 [ gfx_mode::keyboard_event#0 ]
Uplifting [gfx_mode] best 12527283 combination reg byte a [ gfx_mode::keyboard_event#0 ] 
Attempting to uplift remaining variables inzp[1]:243 [ gfx_init_screen0::$3 ]
Uplifting [gfx_init_screen0] best 12526683 combination reg byte a [ gfx_init_screen0::$3 ] 
Attempting to uplift remaining variables inzp[1]:245 [ gfx_init_screen1::$1 ]
Uplifting [gfx_init_screen1] best 12526083 combination reg byte a [ gfx_init_screen1::$1 ] 
Attempting to uplift remaining variables inzp[1]:250 [ gfx_init_screen2::$4 ]
Uplifting [gfx_init_screen2] best 12525483 combination reg byte a [ gfx_init_screen2::$4 ] 
Attempting to uplift remaining variables inzp[1]:254 [ gfx_init_screen3::$3 ]
Uplifting [gfx_init_screen3] best 12524883 combination reg byte a [ gfx_init_screen3::$3 ] 
Attempting to uplift remaining variables inzp[1]:297 [ bitmap_init::$4 ]
Uplifting [bitmap_init] best 12524823 combination reg byte a [ bitmap_init::$4 ] 
Attempting to uplift remaining variables inzp[1]:298 [ bitmap_init::$5 ]
Uplifting [bitmap_init] best 12524763 combination reg byte a [ bitmap_init::$5 ] 
Attempting to uplift remaining variables inzp[1]:299 [ bitmap_init::$6 ]
Uplifting [bitmap_init] best 12524703 combination reg byte a [ bitmap_init::$6 ] 
Attempting to uplift remaining variables inzp[1]:18 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Uplifting [gfx_init_screen0] best 12523703 combination reg byte x [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:30 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Uplifting [gfx_init_screen3] best 12522703 combination reg byte x [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Uplifting [gfx_init_plane_horisontal2] best 12521803 combination reg byte x [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] 
Attempting to uplift remaining variables inzp[1]:26 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Uplifting [gfx_init_screen2] best 12520803 combination reg byte x [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:124 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Uplifting [gfx_init_plane_fill] best 12520803 combination zp[1]:124 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] 
Attempting to uplift remaining variables inzp[1]:9 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Uplifting [gfx_mode] best 12520803 combination zp[1]:9 [ gfx_mode::cy#4 gfx_mode::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:53 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Uplifting [gfx_init_plane_charset8] best 12520803 combination zp[1]:53 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] 
Attempting to uplift remaining variables inzp[1]:247 [ gfx_init_screen2::col#0 ]
Uplifting [gfx_init_screen2] best 12520703 combination reg byte y [ gfx_init_screen2::col#0 ] 
Attempting to uplift remaining variables inzp[1]:241 [ gfx_init_screen0::$1 ]
Uplifting [gfx_init_screen0] best 12520703 combination zp[1]:241 [ gfx_init_screen0::$1 ] 
Attempting to uplift remaining variables inzp[1]:248 [ gfx_init_screen2::col2#0 ]
Uplifting [gfx_init_screen2] best 12520703 combination zp[1]:248 [ gfx_init_screen2::col2#0 ] 
Attempting to uplift remaining variables inzp[1]:252 [ gfx_init_screen3::$1 ]
Uplifting [gfx_init_screen3] best 12520703 combination zp[1]:252 [ gfx_init_screen3::$1 ] 
Attempting to uplift remaining variables inzp[1]:123 [ gfx_init_plane_fill::fill#6 ]
Uplifting [gfx_init_plane_fill] best 12520703 combination zp[1]:123 [ gfx_init_plane_fill::fill#6 ] 
Attempting to uplift remaining variables inzp[1]:296 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 12520703 combination zp[1]:296 [ bitmap_init::$7 ] 
Attempting to uplift remaining variables inzp[1]:43 [ gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ]
Uplifting [gfx_init_VICII_bitmap] best 12520703 combination zp[1]:43 [ gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ] 
Attempting to uplift remaining variables inzp[1]:21 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Uplifting [gfx_init_screen1] best 12520703 combination zp[1]:21 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Uplifting [gfx_init_plane_horisontal2] best 12520703 combination zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Attempting to uplift remaining variables inzp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Uplifting [gfx_init_screen0] best 12520703 combination zp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:29 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Uplifting [gfx_init_screen3] best 12520703 combination zp[1]:29 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:25 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Uplifting [gfx_init_screen2] best 12520703 combination zp[1]:25 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:60 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Uplifting [gfx_init_plane_horisontal] best 12520703 combination zp[1]:60 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Attempting to uplift remaining variables inzp[1]:44 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Uplifting [gfx_init_plane_8bppchunky] best 12520703 combination zp[1]:44 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Attempting to uplift remaining variables inzp[1]:6 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Uplifting [gfx_mode] best 12520684 combination reg byte x [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] 
Attempting to uplift remaining variables inzp[1]:33 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Uplifting [gfx_init_screen4] best 12520684 combination zp[1]:33 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:64 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Uplifting [gfx_init_plane_vertical] best 12520684 combination zp[1]:64 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Attempting to uplift remaining variables inzp[1]:37 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Uplifting [gfx_init_charset] best 12520684 combination zp[1]:37 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Attempting to uplift remaining variables inzp[1]:50 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Uplifting [gfx_init_plane_charset8] best 12520684 combination zp[1]:50 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Attempting to uplift remaining variables inzp[1]:7 [ gfx_mode::VICII_control#4 gfx_mode::VICII_control#2 gfx_mode::VICII_control#5 ]
Uplifting [gfx_mode] best 12520673 combination reg byte x [ gfx_mode::VICII_control#4 gfx_mode::VICII_control#2 gfx_mode::VICII_control#5 ] 
Attempting to uplift remaining variables inzp[1]:155 [ gfx_mode::$18 ]
Uplifting [gfx_mode] best 12520667 combination reg byte a [ gfx_mode::$18 ] 
Attempting to uplift remaining variables inzp[1]:171 [ gfx_mode::$23 ]
Uplifting [gfx_mode] best 12520661 combination reg byte a [ gfx_mode::$23 ] 
Attempting to uplift remaining variables inzp[1]:174 [ gfx_mode::$25 ]
Uplifting [gfx_mode] best 12520655 combination reg byte a [ gfx_mode::$25 ] 
Attempting to uplift remaining variables inzp[1]:177 [ gfx_mode::$27 ]
Uplifting [gfx_mode] best 12520649 combination reg byte a [ gfx_mode::$27 ] 
Attempting to uplift remaining variables inzp[1]:178 [ gfx_mode::$28 ]
Uplifting [gfx_mode] best 12520643 combination reg byte a [ gfx_mode::$28 ] 
Attempting to uplift remaining variables inzp[1]:179 [ gfx_mode::$29 ]
Uplifting [gfx_mode] best 12520637 combination reg byte a [ gfx_mode::$29 ] 
Attempting to uplift remaining variables inzp[1]:180 [ gfx_mode::$30 ]
Uplifting [gfx_mode] best 12520631 combination reg byte a [ gfx_mode::$30 ] 
Attempting to uplift remaining variables inzp[1]:181 [ gfx_mode::$31 ]
Uplifting [gfx_mode] best 12520625 combination reg byte a [ gfx_mode::$31 ] 
Attempting to uplift remaining variables inzp[1]:182 [ gfx_mode::$32 ]
Uplifting [gfx_mode] best 12520619 combination reg byte a [ gfx_mode::$32 ] 
Attempting to uplift remaining variables inzp[1]:198 [ gfx_mode::$37 ]
Uplifting [gfx_mode] best 12520613 combination reg byte a [ gfx_mode::$37 ] 
Attempting to uplift remaining variables inzp[1]:201 [ gfx_mode::$39 ]
Uplifting [gfx_mode] best 12520607 combination reg byte a [ gfx_mode::$39 ] 
Attempting to uplift remaining variables inzp[1]:204 [ gfx_mode::$41 ]
Uplifting [gfx_mode] best 12520601 combination reg byte a [ gfx_mode::$41 ] 
Attempting to uplift remaining variables inzp[1]:205 [ gfx_mode::$42 ]
Uplifting [gfx_mode] best 12520595 combination reg byte a [ gfx_mode::$42 ] 
Attempting to uplift remaining variables inzp[1]:206 [ gfx_mode::$43 ]
Uplifting [gfx_mode] best 12520589 combination reg byte a [ gfx_mode::$43 ] 
Attempting to uplift remaining variables inzp[1]:207 [ gfx_mode::$44 ]
Uplifting [gfx_mode] best 12520583 combination reg byte a [ gfx_mode::$44 ] 
Attempting to uplift remaining variables inzp[1]:208 [ gfx_mode::$45 ]
Uplifting [gfx_mode] best 12520577 combination reg byte a [ gfx_mode::$45 ] 
Attempting to uplift remaining variables inzp[1]:224 [ gfx_mode::$51 ]
Uplifting [gfx_mode] best 12520571 combination reg byte a [ gfx_mode::$51 ] 
Attempting to uplift remaining variables inzp[1]:226 [ gfx_mode::$84 ]
Uplifting [gfx_mode] best 12520565 combination reg byte a [ gfx_mode::$84 ] 
Attempting to uplift remaining variables inzp[1]:227 [ gfx_mode::$53 ]
Uplifting [gfx_mode] best 12520559 combination reg byte a [ gfx_mode::$53 ] 
Attempting to uplift remaining variables inzp[1]:230 [ gfx_mode::$55 ]
Uplifting [gfx_mode] best 12520553 combination reg byte a [ gfx_mode::$55 ] 
Attempting to uplift remaining variables inzp[1]:231 [ gfx_mode::$56 ]
Uplifting [gfx_mode] best 12520547 combination reg byte a [ gfx_mode::$56 ] 
Attempting to uplift remaining variables inzp[1]:232 [ gfx_mode::$57 ]
Uplifting [gfx_mode] best 12520541 combination reg byte a [ gfx_mode::$57 ] 
Attempting to uplift remaining variables inzp[1]:233 [ gfx_mode::$58 ]
Uplifting [gfx_mode] best 12520535 combination reg byte a [ gfx_mode::$58 ] 
Attempting to uplift remaining variables inzp[1]:234 [ gfx_mode::$59 ]
Uplifting [gfx_mode] best 12520529 combination reg byte a [ gfx_mode::$59 ] 
Attempting to uplift remaining variables inzp[1]:235 [ gfx_mode::$60 ]
Uplifting [gfx_mode] best 12520523 combination reg byte a [ gfx_mode::$60 ] 
Attempting to uplift remaining variables inzp[1]:236 [ gfx_mode::$61 ]
Uplifting [gfx_mode] best 12520517 combination reg byte a [ gfx_mode::$61 ] 
Attempting to uplift remaining variables inzp[1]:237 [ gfx_mode::$62 ]
Uplifting [gfx_mode] best 12520511 combination reg byte a [ gfx_mode::$62 ] 
Attempting to uplift remaining variables inzp[1]:8 [ gfx_mode::VICII_control2#2 ]
Uplifting [gfx_mode] best 12520502 combination reg byte a [ gfx_mode::VICII_control2#2 ] 
Attempting to uplift remaining variables inzp[1]:225 [ gfx_mode::$52 ]
Uplifting [gfx_mode] best 12520502 combination zp[1]:225 [ gfx_mode::$52 ] 
Attempting to uplift remaining variables inzp[1]:156 [ gfx_mode::plane_a_offs#0 ]
Uplifting [gfx_mode] best 12520500 combination reg byte x [ gfx_mode::plane_a_offs#0 ] 
Attempting to uplift remaining variables inzp[1]:183 [ gfx_mode::plane_b_offs#0 ]
Uplifting [gfx_mode] best 12520498 combination reg byte x [ gfx_mode::plane_b_offs#0 ] 
Coalescing zero page register [ zp[2]:112 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ] ] with [ zp[2]:150 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] ] - score: 4
Coalescing zero page register [ zp[2]:10 [ gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 ] ] with [ zp[2]:228 [ get_VICII_screen::return#11 ] ] - score: 1
Coalescing zero page register [ zp[2]:72 [ print_set_screen::screen#2 ] ] with [ zp[2]:135 [ print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:83 [ render_preset_name::name#13 ] ] with [ zp[2]:138 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:90 [ get_plane::return#14 ] ] with [ zp[4]:157 [ get_plane::return#16 ] ] - score: 1
Coalescing zero page register [ zp[4]:90 [ get_plane::return#14 get_plane::return#16 ] ] with [ zp[4]:184 [ get_plane::return#17 ] ] - score: 1
Coalescing zero page register [ zp[2]:95 [ get_VICII_screen::return#5 ] ] with [ zp[2]:209 [ get_VICII_screen::return#10 ] ] - score: 1
Coalescing zero page register [ zp[2]:97 [ get_VICII_charset::return#2 ] ] with [ zp[2]:218 [ get_VICII_charset::return#4 ] ] - score: 1
Coalescing zero page register [ zp[2]:125 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] ] with [ zp[2]:327 [ gfx_init_plane_fill::gfxb#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:128 [ memset::num#3 ] ] with [ zp[2]:329 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:130 [ memset::str#4 memset::str#0 ] ] with [ zp[2]:133 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:143 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ] ] with [ zp[2]:300 [ abs_u16::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:143 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 ] ] with [ zp[2]:304 [ abs_u16::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:147 [ sgn_u16::return#4 ] ] with [ zp[2]:308 [ sgn_u16::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:147 [ sgn_u16::return#4 sgn_u16::return#0 ] ] with [ zp[2]:312 [ sgn_u16::return#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:161 [ gfx_mode::$20 ] ] with [ zp[4]:165 [ gfx_mode::plane_a#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:188 [ gfx_mode::$34 ] ] with [ zp[4]:192 [ gfx_mode::plane_b#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:211 [ gfx_mode::$82 ] ] with [ zp[2]:213 [ gfx_mode::$47 ] ] - score: 1
Coalescing zero page register [ zp[2]:220 [ gfx_mode::$83 ] ] with [ zp[2]:222 [ gfx_mode::$50 ] ] - score: 1
Coalescing zero page register [ zp[2]:270 [ form_field_ptr::return#3 ] ] with [ zp[2]:272 [ form_control::field#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:270 [ form_field_ptr::return#3 form_control::field#0 ] ] with [ zp[2]:335 [ form_field_ptr::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:323 [ gfx_init_plane_fill::$4 ] ] with [ zp[2]:325 [ gfx_init_plane_fill::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:346 [ bitmap_plot::plotter#0 ] ] with [ zp[2]:350 [ bitmap_plot::plotter#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 get_VICII_screen::return#11 ] ] with [ zp[2]:95 [ get_VICII_screen::return#5 get_VICII_screen::return#10 ] ] - score: 1
Coalescing zero page register [ zp[4]:90 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 ] ] with [ zp[4]:161 [ gfx_mode::$20 gfx_mode::plane_a#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:90 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$20 gfx_mode::plane_a#0 ] ] with [ zp[4]:188 [ gfx_mode::$34 gfx_mode::plane_b#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:97 [ get_VICII_charset::return#2 get_VICII_charset::return#4 ] ] with [ zp[2]:220 [ gfx_mode::$83 gfx_mode::$50 ] ] - score: 1
Coalescing zero page register [ zp[2]:125 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 ] ] with [ zp[2]:323 [ gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:143 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 abs_u16::return#1 ] ] with [ zp[2]:306 [ bitmap_line::dy#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:147 [ sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 ] ] with [ zp[2]:314 [ bitmap_line::sy#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:211 [ gfx_mode::$82 gfx_mode::$47 ] ] with [ zp[2]:215 [ gfx_mode::$48 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 get_VICII_screen::return#11 get_VICII_screen::return#5 get_VICII_screen::return#10 ] ] with [ zp[2]:211 [ gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ] ] - score: 1
Coalescing zero page register [ zp[1]:9 [ gfx_mode::cy#4 gfx_mode::cy#1 ] ] with [ zp[1]:5 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] ]
Coalescing zero page register [ zp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] ] with [ zp[1]:3 [ form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ] ]
Coalescing zero page register [ zp[2]:19 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] ] with [ zp[2]:10 [ gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 get_VICII_screen::return#11 get_VICII_screen::return#5 get_VICII_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ] ]
Coalescing zero page register [ zp[1]:21 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] ] with [ zp[1]:4 [ form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ] ]
Coalescing zero page register [ zp[2]:23 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] ] with [ zp[2]:12 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] ]
Coalescing zero page register [ zp[1]:29 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] ] with [ zp[1]:25 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] ]
Coalescing zero page register [ zp[2]:31 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] ] with [ zp[2]:27 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] ]
Coalescing zero page register [ zp[1]:37 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] ] with [ zp[1]:33 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] ]
Coalescing zero page register [ zp[2]:38 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] ] with [ zp[2]:34 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] ]
Coalescing zero page register [ zp[1]:44 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] ] with [ zp[1]:43 [ gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ] ]
Coalescing zero page register [ zp[2]:45 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] ] with [ zp[2]:40 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] ]
Coalescing zero page register [ zp[2]:51 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] ] with [ zp[2]:48 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] ]
Coalescing zero page register [ zp[1]:60 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] ] with [ zp[1]:50 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] ]
Coalescing zero page register [ zp[2]:61 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] ] with [ zp[2]:55 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] ]
Coalescing zero page register [ zp[1]:64 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] ] with [ zp[1]:53 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] ]
Coalescing zero page register [ zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] ] with [ zp[1]:54 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] ]
Coalescing zero page register [ zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] ] with [ zp[2]:65 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] ]
Coalescing zero page register [ zp[2]:78 [ form_set_screen::line#2 form_set_screen::line#1 ] ] with [ zp[2]:72 [ print_set_screen::screen#2 print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ] ]
Coalescing zero page register [ zp[2]:83 [ render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] ] with [ zp[2]:74 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] ]
Coalescing zero page register [ zp[2]:86 [ apply_preset::preset#15 ] ] with [ zp[2]:76 [ print_char_cursor#43 print_char_cursor#2 print_char_cursor#72 print_char_cursor#73 print_char_cursor#44 print_char_cursor#29 ] ]
Coalescing zero page register [ zp[1]:99 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ] with [ zp[1]:57 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] ]
Coalescing zero page register [ zp[2]:108 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ] with [ zp[2]:97 [ get_VICII_charset::return#2 get_VICII_charset::return#4 gfx_mode::$83 gfx_mode::$50 ] ]
Coalescing zero page register [ zp[4]:119 [ gfx_init_plane_fill::plane_addr#3 ] ] with [ zp[4]:90 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$20 gfx_mode::plane_a#0 gfx_mode::$34 gfx_mode::plane_b#0 ] ]
Coalescing zero page register [ zp[1]:123 [ gfx_init_plane_fill::fill#6 ] ] with [ zp[1]:102 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] ]
Coalescing zero page register [ zp[1]:124 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] ] with [ zp[1]:103 [ keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ] ]
Coalescing zero page register [ zp[2]:125 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 ] ] with [ zp[2]:110 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] ]
Coalescing zero page register [ zp[2]:128 [ memset::num#3 memset::end#0 ] ] with [ zp[2]:112 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] ]
Coalescing zero page register [ zp[2]:130 [ memset::str#4 memset::str#0 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:114 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ] ]
Coalescing zero page register [ zp[2]:140 [ print_str_at::at#2 print_str_at::at#0 ] ] with [ zp[2]:116 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] ]
Coalescing zero page register [ zp[2]:169 [ gfx_mode::$22 ] ] with [ zp[2]:143 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 abs_u16::return#1 bitmap_line::dy#0 ] ]
Coalescing zero page register [ zp[2]:172 [ gfx_mode::$24 ] ] with [ zp[2]:145 [ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ] ]
Coalescing zero page register [ zp[2]:175 [ gfx_mode::$26 ] ] with [ zp[2]:147 [ sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 bitmap_line::sy#0 ] ]
Coalescing zero page register [ zp[1]:225 [ gfx_mode::$52 ] ] with [ zp[1]:142 [ keyboard_event_pressed::keycode#4 ] ]
Coalescing zero page register [ zp[1]:248 [ gfx_init_screen2::col2#0 ] ] with [ zp[1]:241 [ gfx_init_screen0::$1 ] ]
Coalescing zero page register [ zp[2]:255 [ bitmap_line::x2#0 ] ] with [ zp[2]:196 [ gfx_mode::$36 ] ]
Coalescing zero page register [ zp[2]:257 [ bitmap_line::y2#0 ] ] with [ zp[2]:199 [ gfx_mode::$38 ] ]
Coalescing zero page register [ zp[2]:259 [ gfx_init_plane_8bppchunky::$5 ] ] with [ zp[2]:202 [ gfx_mode::$40 ] ]
Coalescing zero page register [ zp[1]:283 [ keyboard_event_scan::row_scan#0 ] ] with [ zp[1]:252 [ gfx_init_screen3::$1 ] ]
Coalescing zero page register [ zp[2]:302 [ bitmap_line::dx#0 ] ] with [ zp[2]:270 [ form_field_ptr::return#3 form_control::field#0 form_field_ptr::return#0 ] ]
Coalescing zero page register [ zp[2]:320 [ gfx_init_plane_fill::$1 ] ] with [ zp[2]:310 [ bitmap_line::sx#0 ] ]
Coalescing zero page register [ zp[1]:334 [ form_field_ptr::x#0 ] ] with [ zp[1]:296 [ bitmap_init::$7 ] ]
Coalescing zero page register [ zp[2]:346 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 ] ] with [ zp[2]:332 [ form_field_ptr::line#0 ] ]
Coalescing zero page register [ zp[1]:29 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] ] with [ zp[1]:9 [ gfx_mode::cy#4 gfx_mode::cy#1 form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] ]
Coalescing zero page register [ zp[2]:31 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] ] with [ zp[2]:19 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 get_VICII_screen::return#11 get_VICII_screen::return#5 get_VICII_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ] ]
Coalescing zero page register [ zp[1]:37 [ gfx_init_charset::c#4 gfx_init_charset::c#1 gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] ] with [ zp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ] ]
Coalescing zero page register [ zp[2]:38 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] ] with [ zp[2]:23 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] ]
Coalescing zero page register [ zp[1]:44 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 ] ] with [ zp[1]:21 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ] ]
Coalescing zero page register [ zp[2]:61 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] ] with [ zp[2]:45 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] ]
Coalescing zero page register [ zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] ] with [ zp[2]:51 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] ]
Coalescing zero page register [ zp[2]:108 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 get_VICII_charset::return#2 get_VICII_charset::return#4 gfx_mode::$83 gfx_mode::$50 ] ] with [ zp[2]:78 [ form_set_screen::line#2 form_set_screen::line#1 print_set_screen::screen#2 print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ] ]
Coalescing zero page register [ zp[1]:123 [ gfx_init_plane_fill::fill#6 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] ] with [ zp[1]:60 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] ]
Coalescing zero page register [ zp[1]:124 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 ] ] with [ zp[1]:64 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] ]
Coalescing zero page register [ zp[2]:125 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] ] with [ zp[2]:83 [ render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] ]
Coalescing zero page register [ zp[2]:128 [ memset::num#3 memset::end#0 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] ] with [ zp[2]:86 [ apply_preset::preset#15 print_char_cursor#43 print_char_cursor#2 print_char_cursor#72 print_char_cursor#73 print_char_cursor#44 print_char_cursor#29 ] ]
Coalescing zero page register [ zp[1]:225 [ gfx_mode::$52 keyboard_event_pressed::keycode#4 ] ] with [ zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] ]
Coalescing zero page register [ zp[1]:248 [ gfx_init_screen2::col2#0 gfx_init_screen0::$1 ] ] with [ zp[1]:99 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] ]
Coalescing zero page register [ zp[2]:259 [ gfx_init_plane_8bppchunky::$5 gfx_mode::$40 ] ] with [ zp[2]:130 [ memset::str#4 memset::str#0 memset::dst#2 memset::dst#4 memset::dst#1 bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ] ]
Coalescing zero page register [ zp[1]:334 [ form_field_ptr::x#0 bitmap_init::$7 ] ] with [ zp[1]:283 [ keyboard_event_scan::row_scan#0 gfx_init_screen3::$1 ] ]
Coalescing zero page register [ zp[2]:346 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 form_field_ptr::line#0 ] ] with [ zp[2]:172 [ gfx_mode::$24 sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ] ]
Coalescing zero page register [ zp[2]:61 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] ] with [ zp[2]:31 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 get_VICII_screen::return#11 get_VICII_screen::return#5 get_VICII_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ] ]
Coalescing zero page register [ zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] ] with [ zp[2]:38 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] ]
Coalescing zero page register [ zp[2]:140 [ print_str_at::at#2 print_str_at::at#0 bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] ] with [ zp[2]:108 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 get_VICII_charset::return#2 get_VICII_charset::return#4 gfx_mode::$83 gfx_mode::$50 form_set_screen::line#2 form_set_screen::line#1 print_set_screen::screen#2 print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ] ]
Coalescing zero page register [ zp[2]:125 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] ] with [ zp[2]:61 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 get_VICII_screen::return#11 get_VICII_screen::return#5 get_VICII_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ] ]
Coalescing zero page register [ zp[2]:128 [ memset::num#3 memset::end#0 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 apply_preset::preset#15 print_char_cursor#43 print_char_cursor#2 print_char_cursor#72 print_char_cursor#73 print_char_cursor#44 print_char_cursor#29 ] ] with [ zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] ]
Allocated (was zp[1]:29) zp[1]:2 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 gfx_mode::cy#4 gfx_mode::cy#1 form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Allocated (was zp[1]:37) zp[1]:3 [ gfx_init_charset::c#4 gfx_init_charset::c#1 gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ]
Allocated (was zp[1]:44) zp[1]:4 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ]
Allocated (was zp[4]:119) zp[4]:5 [ gfx_init_plane_fill::plane_addr#3 get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$20 gfx_mode::plane_a#0 gfx_mode::$34 gfx_mode::plane_b#0 ]
Allocated (was zp[1]:123) zp[1]:9 [ gfx_init_plane_fill::fill#6 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Allocated (was zp[1]:124) zp[1]:10 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Allocated (was zp[2]:125) zp[2]:11 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 get_VICII_screen::return#11 get_VICII_screen::return#5 get_VICII_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ]
Allocated (was zp[2]:128) zp[2]:13 [ memset::num#3 memset::end#0 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 apply_preset::preset#15 print_char_cursor#43 print_char_cursor#2 print_char_cursor#72 print_char_cursor#73 print_char_cursor#44 print_char_cursor#29 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
Allocated (was zp[2]:140) zp[2]:15 [ print_str_at::at#2 print_str_at::at#0 bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 get_VICII_charset::return#2 get_VICII_charset::return#4 gfx_mode::$83 gfx_mode::$50 form_set_screen::line#2 form_set_screen::line#1 print_set_screen::screen#2 print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ]
Allocated (was zp[2]:169) zp[2]:17 [ gfx_mode::$22 abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 abs_u16::return#1 bitmap_line::dy#0 ]
Allocated (was zp[2]:175) zp[2]:19 [ gfx_mode::$26 sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 bitmap_line::sy#0 ]
Allocated (was zp[1]:225) zp[1]:21 [ gfx_mode::$52 keyboard_event_pressed::keycode#4 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Allocated (was zp[1]:248) zp[1]:22 [ gfx_init_screen2::col2#0 gfx_init_screen0::$1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Allocated (was zp[2]:255) zp[2]:23 [ bitmap_line::x2#0 gfx_mode::$36 ]
Allocated (was zp[2]:257) zp[2]:25 [ bitmap_line::y2#0 gfx_mode::$38 ]
Allocated (was zp[2]:259) zp[2]:27 [ gfx_init_plane_8bppchunky::$5 gfx_mode::$40 memset::str#4 memset::str#0 memset::dst#2 memset::dst#4 memset::dst#1 bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ]
Allocated (was zp[2]:302) zp[2]:29 [ bitmap_line::dx#0 form_field_ptr::return#3 form_control::field#0 form_field_ptr::return#0 ]
Allocated (was zp[4]:316) zp[4]:31 [ gfx_init_plane_fill::$0 ]
Allocated (was zp[2]:320) zp[2]:35 [ gfx_init_plane_fill::$1 bitmap_line::sx#0 ]
Allocated (was zp[1]:334) zp[1]:37 [ form_field_ptr::x#0 bitmap_init::$7 keyboard_event_scan::row_scan#0 gfx_init_screen3::$1 ]
Allocated (was zp[1]:339) zp[1]:38 [ keyboard_event_pressed::row_bits#0 ]
Allocated (was zp[2]:346) zp[2]:39 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 form_field_ptr::line#0 gfx_mode::$24 sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]
Allocated (was zp[2]:348) zp[2]:41 [ bitmap_plot::$0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Interactive Explorer for C64DTV Screen Modes
// C64 DTV version 2 Registers and Constants
//
// Sources
// (J) https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide
// (H) http://dtvhacking.cbm8bit.com/dtv_wiki/images/d/d9/Dtv_registers_full.txt
  // Upstart
  // Commodore 64 PRG executable file
.file [name="c64dtv-gfxexplorer.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const VICII_ECM = $40
  .const VICII_BMM = $20
  .const VICII_DEN = $10
  .const VICII_RSEL = 8
  .const VICII_MCM = $10
  .const VICII_CSEL = 8
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  .const WHITE = 1
  .const DTV_FEATURE_ENABLE = 1
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  .const KEY_CRSR_RIGHT = 2
  .const KEY_CRSR_DOWN = 7
  .const KEY_LSHIFT = $f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Left shift is pressed
  .const KEY_MODIFIER_LSHIFT = 1
  // Right shift is pressed
  .const KEY_MODIFIER_RSHIFT = 2
  // CTRL is pressed
  .const KEY_MODIFIER_CTRL = 4
  // Commodore is pressed
  .const KEY_MODIFIER_COMMODORE = 8
  // Any shift is pressed
  .const KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
  // 8BPP Chunky Bitmap (contains 8bpp pixels)
  .const PLANE_8BPP_CHUNKY = $20000
  // Plane with horisontal stripes
  .const PLANE_HORISONTAL = $30000
  // Plane with vertical stripes
  .const PLANE_VERTICAL = $32000
  // Plane with horisontal stripes every 2 pixels
  .const PLANE_HORISONTAL2 = $34000
  // Plane with vertical stripes every 2 pixels
  .const PLANE_VERTICAL2 = $36000
  // Plane with blank pixels
  .const PLANE_BLANK = $38000
  // Plane with all pixels
  .const PLANE_FULL = $3a000
  // Plane with all pixels
  .const PLANE_CHARSET8 = $3c000
  // The number of frames to use for a full blink cycle
  .const FORM_CURSOR_BLINK = $28
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR = 3
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1 = $22
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2 = $23
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3 = $24
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  // Number of form fields
  .const form_fields_cnt = $24
  .label VICII_CONTROL1 = $d011
  .label VICII_CONTROL2 = $d016
  .label VICII_MEMORY = $d018
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  // VIC Screens
  .label VICII_SCREEN0 = $4000
  .label VICII_SCREEN1 = $4400
  .label VICII_SCREEN2 = $4800
  .label VICII_SCREEN3 = $4c00
  .label VICII_SCREEN4 = $5000
  // VIC Charset from ROM
  .label VICII_CHARSET_ROM = $5800
  // VIC Bitmap
  .label VICII_BITMAP = $6000
  // Screen containing the FORM
  .label FORM_SCREEN = $400
  // Charset used for the FORM
  .label FORM_CHARSET = $1800
  .label form_ctrl_bmm = form_fields_val+1
  .label form_ctrl_mcm = form_fields_val+2
  .label form_ctrl_ecm = form_fields_val+3
  .label form_ctrl_hicol = form_fields_val+4
  .label form_ctrl_line = form_fields_val+5
  .label form_ctrl_colof = form_fields_val+6
  .label form_ctrl_chunk = form_fields_val+7
  .label form_ctrl_borof = form_fields_val+8
  .label form_ctrl_overs = form_fields_val+9
  .label form_a_pattern = form_fields_val+$a
  .label form_a_start_hi = form_fields_val+$b
  .label form_a_start_lo = form_fields_val+$c
  .label form_a_step_hi = form_fields_val+$d
  .label form_a_step_lo = form_fields_val+$e
  .label form_a_mod_hi = form_fields_val+$f
  .label form_a_mod_lo = form_fields_val+$10
  .label form_b_pattern = form_fields_val+$11
  .label form_b_start_hi = form_fields_val+$12
  .label form_b_start_lo = form_fields_val+$13
  .label form_b_step_hi = form_fields_val+$14
  .label form_b_step_lo = form_fields_val+$15
  .label form_b_mod_hi = form_fields_val+$16
  .label form_b_mod_lo = form_fields_val+$17
  .label form_VICII_screen = form_fields_val+$18
  .label form_VICII_gfx = form_fields_val+$19
  .label form_VICII_cols = form_fields_val+$1a
  .label form_dtv_palet = form_fields_val+$1b
  .label form_VICII_bg0_hi = form_fields_val+$1c
  .label form_VICII_bg0_lo = form_fields_val+$1d
  .label form_VICII_bg1_hi = form_fields_val+$1e
  .label form_VICII_bg1_lo = form_fields_val+$1f
  .label form_VICII_bg2_hi = form_fields_val+$20
  .label form_VICII_bg2_lo = form_fields_val+$21
  .label form_VICII_bg3_hi = form_fields_val+$22
  .label form_VICII_bg3_lo = form_fields_val+$23
  .label print_char_cursor = $d
  .label print_line_cursor = $f
  .label print_screen = $f
  // Keyboard event buffer size. The number of events currently in the event buffer
  .label keyboard_events_size = $a
  // Counts down to blink for form cursor (it is inversed in the lower half)
  // Always blink cursor in new field
  .label form_cursor_count = 3
  // Current selected field in the form
  .label form_field_idx = 4
.segment Code
  // main
main: {
    // asm { sei  }
    sei
    // [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [2] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [3] *DTV_FEATURE = DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // [4] call keyboard_init 
    jsr keyboard_init
    // [5] phi from main to main::@3 [phi:main->main::@3]
  __b3_from_main:
    jmp __b3
    // main::@3
  __b3:
    // [6] call gfx_init 
    // [15] phi from main::@3 to gfx_init [phi:main::@3->gfx_init]
  gfx_init_from___b3:
    jsr gfx_init
    // [7] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [7] phi form_field_idx#1 = 0 [phi:main::@3->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    // [7] phi keyboard_events_size#28 = 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keyboard_events_size
    // [7] phi form_cursor_count#1 = FORM_CURSOR_BLINK/2 [phi:main::@3->main::@1#2] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    jmp __b1
    // main::@1
  __b1:
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call form_mode 
  // Let the user change the GFX configuration
    // [46] phi from main::@2 to form_mode [phi:main::@2->form_mode]
  form_mode_from___b2:
    jsr form_mode
    // [10] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    jmp __b4
    // main::@4
  __b4:
    // [11] call gfx_mode 
    // Show the GFX configuration
    jsr gfx_mode
    // [7] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [7] phi form_field_idx#1 = form_field_idx#19 [phi:main::@4->main::@1#0] -- register_copy 
    // [7] phi keyboard_events_size#28 = keyboard_events_size#25 [phi:main::@4->main::@1#1] -- register_copy 
    // [7] phi form_cursor_count#1 = form_cursor_count#17 [phi:main::@4->main::@1#2] -- register_copy 
    jmp __b1
}
  // keyboard_init
// Initialize keyboard reading by setting CIA#1 Data Direction Registers
keyboard_init: {
    // [12] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = $ff -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Write Mode
    lda #$ff
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [13] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) = 0 -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Read Mode
    lda #0
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR
    jmp __breturn
    // keyboard_init::@return
  __breturn:
    // [14] return 
    rts
}
  // gfx_init
// Initialize the different graphics in the memory
gfx_init: {
    // [16] call gfx_init_screen0 
    // [236] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
  gfx_init_screen0_from_gfx_init:
    jsr gfx_init_screen0
    // [17] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
  __b1_from_gfx_init:
    jmp __b1
    // gfx_init::@1
  __b1:
    // [18] call gfx_init_screen1 
    // [250] phi from gfx_init::@1 to gfx_init_screen1 [phi:gfx_init::@1->gfx_init_screen1]
  gfx_init_screen1_from___b1:
    jsr gfx_init_screen1
    // [19] phi from gfx_init::@1 to gfx_init::@2 [phi:gfx_init::@1->gfx_init::@2]
  __b2_from___b1:
    jmp __b2
    // gfx_init::@2
  __b2:
    // [20] call gfx_init_screen2 
    // [262] phi from gfx_init::@2 to gfx_init_screen2 [phi:gfx_init::@2->gfx_init_screen2]
  gfx_init_screen2_from___b2:
    jsr gfx_init_screen2
    // [21] phi from gfx_init::@2 to gfx_init::@3 [phi:gfx_init::@2->gfx_init::@3]
  __b3_from___b2:
    jmp __b3
    // gfx_init::@3
  __b3:
    // [22] call gfx_init_screen3 
    // [277] phi from gfx_init::@3 to gfx_init_screen3 [phi:gfx_init::@3->gfx_init_screen3]
  gfx_init_screen3_from___b3:
    jsr gfx_init_screen3
    // [23] phi from gfx_init::@3 to gfx_init::@4 [phi:gfx_init::@3->gfx_init::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init::@4
  __b4:
    // [24] call gfx_init_screen4 
    // [291] phi from gfx_init::@4 to gfx_init_screen4 [phi:gfx_init::@4->gfx_init_screen4]
  gfx_init_screen4_from___b4:
    jsr gfx_init_screen4
    // [25] phi from gfx_init::@4 to gfx_init::@5 [phi:gfx_init::@4->gfx_init::@5]
  __b5_from___b4:
    jmp __b5
    // gfx_init::@5
  __b5:
    // [26] call gfx_init_charset 
    jsr gfx_init_charset
    // [27] phi from gfx_init::@5 to gfx_init::@6 [phi:gfx_init::@5->gfx_init::@6]
  __b6_from___b5:
    jmp __b6
    // gfx_init::@6
  __b6:
    // [28] call gfx_init_VICII_bitmap 
    // [313] phi from gfx_init::@6 to gfx_init_VICII_bitmap [phi:gfx_init::@6->gfx_init_VICII_bitmap]
  gfx_init_VICII_bitmap_from___b6:
    jsr gfx_init_VICII_bitmap
    // [29] phi from gfx_init::@6 to gfx_init::@7 [phi:gfx_init::@6->gfx_init::@7]
  __b7_from___b6:
    jmp __b7
    // gfx_init::@7
  __b7:
    // [30] call gfx_init_plane_8bppchunky 
    // [326] phi from gfx_init::@7 to gfx_init_plane_8bppchunky [phi:gfx_init::@7->gfx_init_plane_8bppchunky]
  gfx_init_plane_8bppchunky_from___b7:
    jsr gfx_init_plane_8bppchunky
    // [31] phi from gfx_init::@7 to gfx_init::@8 [phi:gfx_init::@7->gfx_init::@8]
  __b8_from___b7:
    jmp __b8
    // gfx_init::@8
  __b8:
    // [32] call gfx_init_plane_charset8 
    // [346] phi from gfx_init::@8 to gfx_init_plane_charset8 [phi:gfx_init::@8->gfx_init_plane_charset8]
  gfx_init_plane_charset8_from___b8:
    jsr gfx_init_plane_charset8
    // [33] phi from gfx_init::@8 to gfx_init::@9 [phi:gfx_init::@8->gfx_init::@9]
  __b9_from___b8:
    jmp __b9
    // gfx_init::@9
  __b9:
    // [34] call gfx_init_plane_horisontal 
    // [371] phi from gfx_init::@9 to gfx_init_plane_horisontal [phi:gfx_init::@9->gfx_init_plane_horisontal]
  gfx_init_plane_horisontal_from___b9:
    jsr gfx_init_plane_horisontal
    // [35] phi from gfx_init::@9 to gfx_init::@10 [phi:gfx_init::@9->gfx_init::@10]
  __b10_from___b9:
    jmp __b10
    // gfx_init::@10
  __b10:
    // [36] call gfx_init_plane_vertical 
    // [389] phi from gfx_init::@10 to gfx_init_plane_vertical [phi:gfx_init::@10->gfx_init_plane_vertical]
  gfx_init_plane_vertical_from___b10:
    jsr gfx_init_plane_vertical
    // [37] phi from gfx_init::@10 to gfx_init::@11 [phi:gfx_init::@10->gfx_init::@11]
  __b11_from___b10:
    jmp __b11
    // gfx_init::@11
  __b11:
    // [38] call gfx_init_plane_horisontal2 
    // [402] phi from gfx_init::@11 to gfx_init_plane_horisontal2 [phi:gfx_init::@11->gfx_init_plane_horisontal2]
  gfx_init_plane_horisontal2_from___b11:
    jsr gfx_init_plane_horisontal2
    // [39] phi from gfx_init::@11 to gfx_init::@12 [phi:gfx_init::@11->gfx_init::@12]
  __b12_from___b11:
    jmp __b12
    // gfx_init::@12
  __b12:
    // [40] call gfx_init_plane_vertical2 
    // [417] phi from gfx_init::@12 to gfx_init_plane_vertical2 [phi:gfx_init::@12->gfx_init_plane_vertical2]
  gfx_init_plane_vertical2_from___b12:
    jsr gfx_init_plane_vertical2
    // [41] phi from gfx_init::@12 to gfx_init::@13 [phi:gfx_init::@12->gfx_init::@13]
  __b13_from___b12:
    jmp __b13
    // gfx_init::@13
  __b13:
    // [42] call gfx_init_plane_blank 
    // [420] phi from gfx_init::@13 to gfx_init_plane_blank [phi:gfx_init::@13->gfx_init_plane_blank]
  gfx_init_plane_blank_from___b13:
    jsr gfx_init_plane_blank
    // [43] phi from gfx_init::@13 to gfx_init::@14 [phi:gfx_init::@13->gfx_init::@14]
  __b14_from___b13:
    jmp __b14
    // gfx_init::@14
  __b14:
    // [44] call gfx_init_plane_full 
    // [423] phi from gfx_init::@14 to gfx_init_plane_full [phi:gfx_init::@14->gfx_init_plane_full]
  gfx_init_plane_full_from___b14:
    jsr gfx_init_plane_full
    jmp __breturn
    // gfx_init::@return
  __breturn:
    // [45] return 
    rts
}
  // form_mode
// Show the form - and let the user change values
form_mode: {
    .label preset_current = 2
    // [47] call print_set_screen 
  // Form Colors
    // [426] phi from form_mode to print_set_screen [phi:form_mode->print_set_screen]
  print_set_screen_from_form_mode:
    // [426] phi print_set_screen::screen#2 = COLS [phi:form_mode->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z print_set_screen.screen
    lda #>COLS
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [48] phi from form_mode to form_mode::@8 [phi:form_mode->form_mode::@8]
  __b8_from_form_mode:
    jmp __b8
    // form_mode::@8
  __b8:
    // [49] call print_cls 
    jsr print_cls
    // [50] phi from form_mode::@8 to form_mode::@9 [phi:form_mode::@8->form_mode::@9]
  __b9_from___b8:
    jmp __b9
    // form_mode::@9
  __b9:
    // [51] call print_str_lines 
    // [432] phi from form_mode::@9 to print_str_lines [phi:form_mode::@9->print_str_lines]
  print_str_lines_from___b9:
    // [432] phi print_str_lines::str#5 = FORM_COLS [phi:form_mode::@9->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_COLS
    sta.z print_str_lines.str
    lda #>FORM_COLS
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [52] phi from form_mode::@9 to form_mode::@10 [phi:form_mode::@9->form_mode::@10]
  __b10_from___b9:
    jmp __b10
    // form_mode::@10
  __b10:
    // [53] call print_set_screen 
  // Form Text
    // [426] phi from form_mode::@10 to print_set_screen [phi:form_mode::@10->print_set_screen]
  print_set_screen_from___b10:
    // [426] phi print_set_screen::screen#2 = FORM_SCREEN [phi:form_mode::@10->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z print_set_screen.screen
    lda #>FORM_SCREEN
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [54] phi from form_mode::@10 to form_mode::@11 [phi:form_mode::@10->form_mode::@11]
  __b11_from___b10:
    jmp __b11
    // form_mode::@11
  __b11:
    // [55] call print_cls 
    jsr print_cls
    // [56] phi from form_mode::@11 to form_mode::@12 [phi:form_mode::@11->form_mode::@12]
  __b12_from___b11:
    jmp __b12
    // form_mode::@12
  __b12:
    // [57] call print_str_lines 
    // [432] phi from form_mode::@12 to print_str_lines [phi:form_mode::@12->print_str_lines]
  print_str_lines_from___b12:
    // [432] phi print_str_lines::str#5 = FORM_TEXT [phi:form_mode::@12->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_TEXT
    sta.z print_str_lines.str
    lda #>FORM_TEXT
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [58] phi from form_mode::@12 to form_mode::@13 [phi:form_mode::@12->form_mode::@13]
  __b13_from___b12:
    jmp __b13
    // form_mode::@13
  __b13:
    // [59] call form_set_screen 
  // Form Fields
    // [448] phi from form_mode::@13 to form_set_screen [phi:form_mode::@13->form_set_screen]
  form_set_screen_from___b13:
    jsr form_set_screen
    // [60] phi from form_mode::@13 to form_mode::@14 [phi:form_mode::@13->form_mode::@14]
  __b14_from___b13:
    jmp __b14
    // form_mode::@14
  __b14:
    // [61] call form_render_values 
    // [458] phi from form_mode::@14 to form_render_values [phi:form_mode::@14->form_render_values]
  form_render_values_from___b14:
    jsr form_render_values
    jmp __b15
    // form_mode::@15
  __b15:
    // [62] render_preset_name::idx#0 = *form_fields_val -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [63] call render_preset_name 
    // [466] phi from form_mode::@15 to render_preset_name [phi:form_mode::@15->render_preset_name]
  render_preset_name_from___b15:
    // [466] phi render_preset_name::idx#10 = render_preset_name::idx#0 [phi:form_mode::@15->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b16
    // form_mode::@16
  __b16:
    // [64] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [65] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // [66] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [67] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [68] *((byte*)CIA2) = 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3
    sta CIA2
    // [69] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
    // [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = VICII_DEN|VICII_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VICII_DEN|VICII_RSEL|3
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // [71] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = VICII_CSEL -- _deref_pbuc1=vbuc2 
    lda #VICII_CSEL
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    // [72] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = (byte)(word)FORM_SCREEN&$3fff/$40|(word)FORM_CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(FORM_SCREEN&$3fff)/$40|(FORM_CHARSET&$3fff)/$400
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // [73] *DTV_PLANEA_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // DTV Plane A to FORM_SCREEN also
    lda #0
    sta DTV_PLANEA_START_LO
    // [74] *DTV_PLANEA_START_MI = >FORM_SCREEN -- _deref_pbuc1=vbuc2 
    lda #>FORM_SCREEN
    sta DTV_PLANEA_START_MI
    // [75] *DTV_PLANEA_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [76] phi from form_mode::@16 to form_mode::@1 [phi:form_mode::@16->form_mode::@1]
  __b1_from___b16:
    // [76] phi form_mode::i#2 = 0 [phi:form_mode::@16->form_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - default
    // [76] phi from form_mode::@1 to form_mode::@1 [phi:form_mode::@1->form_mode::@1]
  __b1_from___b1:
    // [76] phi form_mode::i#2 = form_mode::i#1 [phi:form_mode::@1->form_mode::@1#0] -- register_copy 
    jmp __b1
    // form_mode::@1
  __b1:
    // [77] DTV_PALETTE[form_mode::i#2] = DTV_PALETTE_DEFAULT[form_mode::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // [78] form_mode::i#1 = ++ form_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [79] if(form_mode::i#1!=$10) goto form_mode::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // form_mode::@2
  __b2:
    // [80] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [81] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [82] form_mode::preset_current#0 = *form_fields_val -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [83] phi from form_mode::@19 form_mode::@2 form_mode::@6 to form_mode::@3 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3]
  __b3_from___b19:
  __b3_from___b2:
  __b3_from___b6:
    // [83] phi form_mode::preset_current#6 = form_mode::preset_current#1 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#0] -- register_copy 
    // [83] phi form_field_idx#30 = form_field_idx#19 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#1] -- register_copy 
    // [83] phi keyboard_events_size#49 = keyboard_events_size#25 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#2] -- register_copy 
    // [83] phi form_cursor_count#23 = form_cursor_count#17 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#3] -- register_copy 
    jmp __b3
  // Let the user change values in the form
    // form_mode::@3
  __b3:
    jmp __b4
    // form_mode::@4
  __b4:
    // [84] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto form_mode::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b4
    // [85] phi from form_mode::@4 to form_mode::@5 [phi:form_mode::@4->form_mode::@5]
  __b5_from___b4:
    jmp __b5
    // form_mode::@5
  __b5:
    // [86] call form_control 
    jsr form_control
    // [87] form_control::return#0 = form_control::return#2 -- vbuaa=vbuxx 
    txa
    jmp __b17
    // form_mode::@17
  __b17:
    // [88] form_mode::$11 = form_control::return#0
    // [89] if(form_mode::$11==0) goto form_mode::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b6
    jmp __breturn
    // form_mode::@return
  __breturn:
    // [90] return 
    rts
    // form_mode::@6
  __b6:
    // [91] if(form_mode::preset_current#6==*form_fields_val) goto form_mode::@3 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda form_fields_val
    cmp.z preset_current
    beq __b3_from___b6
    jmp __b7
    // form_mode::@7
  __b7:
    // [92] apply_preset::idx#0 = *form_fields_val -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [93] call apply_preset 
    // Preset changed - update field values and render
    jsr apply_preset
    jmp __b18
    // form_mode::@18
  __b18:
    // [94] form_mode::preset_current#1 = *form_fields_val -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [95] call form_render_values 
    // [458] phi from form_mode::@18 to form_render_values [phi:form_mode::@18->form_render_values]
  form_render_values_from___b18:
    jsr form_render_values
    jmp __b19
    // form_mode::@19
  __b19:
    // [96] render_preset_name::idx#1 = *form_fields_val -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [97] call render_preset_name 
    // [466] phi from form_mode::@19 to render_preset_name [phi:form_mode::@19->render_preset_name]
  render_preset_name_from___b19:
    // [466] phi render_preset_name::idx#10 = render_preset_name::idx#1 [phi:form_mode::@19->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b3_from___b19
}
  // gfx_mode
// Change graphics mode to show the selected graphics mode
gfx_mode: {
    .label __20 = 5
    .label __22 = $11
    .label __24 = $27
    .label __26 = $13
    .label __34 = 5
    .label __36 = $17
    .label __38 = $19
    .label __40 = $1b
    .label __47 = $b
    .label __48 = $b
    .label __50 = $f
    .label __52 = $15
    .label __82 = $b
    .label __83 = $f
    .label plane_a = 5
    .label plane_b = 5
    .label VICII_colors = $b
    .label col = $d
    .label cy = 2
    // [98] if(*form_ctrl_line==0) goto gfx_mode::@1 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_line
    cmp #0
    beq __b1_from_gfx_mode
    // [99] phi from gfx_mode to gfx_mode::@10 [phi:gfx_mode->gfx_mode::@10]
  __b10_from_gfx_mode:
    jmp __b10
    // gfx_mode::@10
  __b10:
    // [100] phi from gfx_mode::@10 to gfx_mode::@1 [phi:gfx_mode::@10->gfx_mode::@1]
  __b1_from___b10:
    // [100] phi gfx_mode::dtv_control#14 = DTV_LINEAR [phi:gfx_mode::@10->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #DTV_LINEAR
    jmp __b1
    // [100] phi from gfx_mode to gfx_mode::@1 [phi:gfx_mode->gfx_mode::@1]
  __b1_from_gfx_mode:
    // [100] phi gfx_mode::dtv_control#14 = 0 [phi:gfx_mode->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // gfx_mode::@1
  __b1:
    // [101] if(*form_ctrl_borof==0) goto gfx_mode::@2 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_borof
    cmp #0
    beq __b2_from___b1
    jmp __b11
    // gfx_mode::@11
  __b11:
    // [102] gfx_mode::dtv_control#2 = gfx_mode::dtv_control#14 | DTV_BORDER_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_BORDER_OFF
    tax
    // [103] phi from gfx_mode::@1 gfx_mode::@11 to gfx_mode::@2 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2]
  __b2_from___b1:
  __b2_from___b11:
    // [103] phi gfx_mode::dtv_control#15 = gfx_mode::dtv_control#14 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2#0] -- register_copy 
    jmp __b2
    // gfx_mode::@2
  __b2:
    // [104] if(*form_ctrl_hicol==0) goto gfx_mode::@3 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_hicol
    cmp #0
    beq __b3_from___b2
    jmp __b12
    // gfx_mode::@12
  __b12:
    // [105] gfx_mode::dtv_control#3 = gfx_mode::dtv_control#15 | DTV_HIGHCOLOR -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_HIGHCOLOR
    tax
    // [106] phi from gfx_mode::@12 gfx_mode::@2 to gfx_mode::@3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3]
  __b3_from___b12:
  __b3_from___b2:
    // [106] phi gfx_mode::dtv_control#10 = gfx_mode::dtv_control#3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3#0] -- register_copy 
    jmp __b3
    // gfx_mode::@3
  __b3:
    // [107] if(*form_ctrl_overs==0) goto gfx_mode::@4 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_overs
    cmp #0
    beq __b4_from___b3
    jmp __b13
    // gfx_mode::@13
  __b13:
    // [108] gfx_mode::dtv_control#4 = gfx_mode::dtv_control#10 | DTV_OVERSCAN -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_OVERSCAN
    tax
    // [109] phi from gfx_mode::@13 gfx_mode::@3 to gfx_mode::@4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4]
  __b4_from___b13:
  __b4_from___b3:
    // [109] phi gfx_mode::dtv_control#11 = gfx_mode::dtv_control#4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4#0] -- register_copy 
    jmp __b4
    // gfx_mode::@4
  __b4:
    // [110] if(*form_ctrl_colof==0) goto gfx_mode::@5 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_colof
    cmp #0
    beq __b5_from___b4
    jmp __b14
    // gfx_mode::@14
  __b14:
    // [111] gfx_mode::dtv_control#5 = gfx_mode::dtv_control#11 | DTV_COLORRAM_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_COLORRAM_OFF
    tax
    // [112] phi from gfx_mode::@14 gfx_mode::@4 to gfx_mode::@5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5]
  __b5_from___b14:
  __b5_from___b4:
    // [112] phi gfx_mode::dtv_control#13 = gfx_mode::dtv_control#5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5#0] -- register_copy 
    jmp __b5
    // gfx_mode::@5
  __b5:
    // [113] if(*form_ctrl_chunk==0) goto gfx_mode::@6 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_chunk
    cmp #0
    beq __b6_from___b5
    jmp __b15
    // gfx_mode::@15
  __b15:
    // [114] gfx_mode::dtv_control#6 = gfx_mode::dtv_control#13 | DTV_CHUNKY -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_CHUNKY
    tax
    // [115] phi from gfx_mode::@15 gfx_mode::@5 to gfx_mode::@6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6]
  __b6_from___b15:
  __b6_from___b5:
    // [115] phi gfx_mode::dtv_control#12 = gfx_mode::dtv_control#6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6#0] -- register_copy 
    jmp __b6
    // gfx_mode::@6
  __b6:
    // [116] *DTV_CONTROL = gfx_mode::dtv_control#12 -- _deref_pbuc1=vbuxx 
    stx DTV_CONTROL
    // [117] if(*form_ctrl_ecm==0) goto gfx_mode::@7 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_ecm
    cmp #0
    beq __b7_from___b6
    // [118] phi from gfx_mode::@6 to gfx_mode::@16 [phi:gfx_mode::@6->gfx_mode::@16]
  __b16_from___b6:
    jmp __b16
    // gfx_mode::@16
  __b16:
    // [119] phi from gfx_mode::@16 to gfx_mode::@7 [phi:gfx_mode::@16->gfx_mode::@7]
  __b7_from___b16:
    // [119] phi gfx_mode::VICII_control#5 = VICII_DEN|VICII_RSEL|3|VICII_ECM [phi:gfx_mode::@16->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VICII_DEN|VICII_RSEL|3|VICII_ECM
    jmp __b7
    // [119] phi from gfx_mode::@6 to gfx_mode::@7 [phi:gfx_mode::@6->gfx_mode::@7]
  __b7_from___b6:
    // [119] phi gfx_mode::VICII_control#5 = VICII_DEN|VICII_RSEL|3 [phi:gfx_mode::@6->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VICII_DEN|VICII_RSEL|3
    jmp __b7
    // gfx_mode::@7
  __b7:
    // [120] if(*form_ctrl_bmm==0) goto gfx_mode::@8 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_bmm
    cmp #0
    beq __b8_from___b7
    jmp __b17
    // gfx_mode::@17
  __b17:
    // [121] gfx_mode::VICII_control#2 = gfx_mode::VICII_control#5 | VICII_BMM -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #VICII_BMM
    tax
    // [122] phi from gfx_mode::@17 gfx_mode::@7 to gfx_mode::@8 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8]
  __b8_from___b17:
  __b8_from___b7:
    // [122] phi gfx_mode::VICII_control#4 = gfx_mode::VICII_control#2 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8#0] -- register_copy 
    jmp __b8
    // gfx_mode::@8
  __b8:
    // [123] *VICII_CONTROL1 = gfx_mode::VICII_control#4 -- _deref_pbuc1=vbuxx 
    stx VICII_CONTROL1
    // [124] if(*form_ctrl_mcm==0) goto gfx_mode::@9 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_mcm
    cmp #0
    beq __b9_from___b8
    // [125] phi from gfx_mode::@8 to gfx_mode::@18 [phi:gfx_mode::@8->gfx_mode::@18]
  __b18_from___b8:
    jmp __b18
    // gfx_mode::@18
  __b18:
    // [126] phi from gfx_mode::@18 to gfx_mode::@9 [phi:gfx_mode::@18->gfx_mode::@9]
  __b9_from___b18:
    // [126] phi gfx_mode::VICII_control2#2 = VICII_CSEL|VICII_MCM [phi:gfx_mode::@18->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VICII_CSEL|VICII_MCM
    jmp __b9
    // [126] phi from gfx_mode::@8 to gfx_mode::@9 [phi:gfx_mode::@8->gfx_mode::@9]
  __b9_from___b8:
    // [126] phi gfx_mode::VICII_control2#2 = VICII_CSEL [phi:gfx_mode::@8->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VICII_CSEL
    jmp __b9
    // gfx_mode::@9
  __b9:
    // [127] *VICII_CONTROL2 = gfx_mode::VICII_control2#2 -- _deref_pbuc1=vbuaa 
    sta VICII_CONTROL2
    // [128] gfx_mode::$18 = *form_a_start_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_start_hi
    asl
    asl
    asl
    asl
    // [129] gfx_mode::plane_a_offs#0 = gfx_mode::$18 | *form_a_start_lo -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_a_start_lo
    tax
    // [130] get_plane::idx#0 = *form_a_pattern -- vbuaa=_deref_pbuc1 
    lda form_a_pattern
    // [131] call get_plane 
    // [546] phi from gfx_mode::@9 to get_plane [phi:gfx_mode::@9->get_plane]
  get_plane_from___b9:
    // [546] phi get_plane::idx#10 = get_plane::idx#0 [phi:gfx_mode::@9->get_plane#0] -- register_copy 
    jsr get_plane
    // [132] get_plane::return#16 = get_plane::return#14
    jmp __b27
    // gfx_mode::@27
  __b27:
    // [133] gfx_mode::$20 = get_plane::return#16
    // [134] gfx_mode::plane_a#0 = gfx_mode::$20 + gfx_mode::plane_a_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_a
    sta.z plane_a
    lda.z plane_a+1
    adc #0
    sta.z plane_a+1
    lda.z plane_a+2
    adc #0
    sta.z plane_a+2
    lda.z plane_a+3
    adc #0
    sta.z plane_a+3
    // [135] gfx_mode::$22 = < gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda.z plane_a
    sta.z __22
    lda.z plane_a+1
    sta.z __22+1
    // [136] gfx_mode::$23 = < gfx_mode::$22 -- vbuaa=_lo_vwuz1 
    lda.z __22
    // [137] *DTV_PLANEA_START_LO = gfx_mode::$23 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_LO
    // [138] gfx_mode::$24 = < gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda.z plane_a
    sta.z __24
    lda.z plane_a+1
    sta.z __24+1
    // [139] gfx_mode::$25 = > gfx_mode::$24 -- vbuaa=_hi_vwuz1 
    lda.z __24+1
    // [140] *DTV_PLANEA_START_MI = gfx_mode::$25 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_MI
    // [141] gfx_mode::$26 = > gfx_mode::plane_a#0 -- vwuz1=_hi_vduz2 
    lda.z plane_a+2
    sta.z __26
    lda.z plane_a+3
    sta.z __26+1
    // [142] gfx_mode::$27 = < gfx_mode::$26 -- vbuaa=_lo_vwuz1 
    lda.z __26
    // [143] *DTV_PLANEA_START_HI = gfx_mode::$27 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_HI
    // [144] gfx_mode::$28 = *form_a_step_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_step_hi
    asl
    asl
    asl
    asl
    // [145] gfx_mode::$29 = gfx_mode::$28 | *form_a_step_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_step_lo
    // [146] *DTV_PLANEA_STEP = gfx_mode::$29 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_STEP
    // [147] gfx_mode::$30 = *form_a_mod_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_mod_hi
    asl
    asl
    asl
    asl
    // [148] gfx_mode::$31 = gfx_mode::$30 | *form_a_mod_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_mod_lo
    // [149] *DTV_PLANEA_MODULO_LO = gfx_mode::$31 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_MODULO_LO
    // [150] *DTV_PLANEA_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // [151] gfx_mode::$32 = *form_b_start_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_start_hi
    asl
    asl
    asl
    asl
    // [152] gfx_mode::plane_b_offs#0 = gfx_mode::$32 | *form_b_start_lo -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_b_start_lo
    tax
    // [153] get_plane::idx#1 = *form_b_pattern -- vbuaa=_deref_pbuc1 
    lda form_b_pattern
    // [154] call get_plane 
    // [546] phi from gfx_mode::@27 to get_plane [phi:gfx_mode::@27->get_plane]
  get_plane_from___b27:
    // [546] phi get_plane::idx#10 = get_plane::idx#1 [phi:gfx_mode::@27->get_plane#0] -- register_copy 
    jsr get_plane
    // [155] get_plane::return#17 = get_plane::return#14
    jmp __b28
    // gfx_mode::@28
  __b28:
    // [156] gfx_mode::$34 = get_plane::return#17
    // [157] gfx_mode::plane_b#0 = gfx_mode::$34 + gfx_mode::plane_b_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_b
    sta.z plane_b
    lda.z plane_b+1
    adc #0
    sta.z plane_b+1
    lda.z plane_b+2
    adc #0
    sta.z plane_b+2
    lda.z plane_b+3
    adc #0
    sta.z plane_b+3
    // [158] gfx_mode::$36 = < gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda.z plane_b
    sta.z __36
    lda.z plane_b+1
    sta.z __36+1
    // [159] gfx_mode::$37 = < gfx_mode::$36 -- vbuaa=_lo_vwuz1 
    lda.z __36
    // [160] *DTV_PLANEB_START_LO = gfx_mode::$37 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_LO
    // [161] gfx_mode::$38 = < gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda.z plane_b
    sta.z __38
    lda.z plane_b+1
    sta.z __38+1
    // [162] gfx_mode::$39 = > gfx_mode::$38 -- vbuaa=_hi_vwuz1 
    lda.z __38+1
    // [163] *DTV_PLANEB_START_MI = gfx_mode::$39 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_MI
    // [164] gfx_mode::$40 = > gfx_mode::plane_b#0 -- vwuz1=_hi_vduz2 
    lda.z plane_b+2
    sta.z __40
    lda.z plane_b+3
    sta.z __40+1
    // [165] gfx_mode::$41 = < gfx_mode::$40 -- vbuaa=_lo_vwuz1 
    lda.z __40
    // [166] *DTV_PLANEB_START_HI = gfx_mode::$41 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_HI
    // [167] gfx_mode::$42 = *form_b_step_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_step_hi
    asl
    asl
    asl
    asl
    // [168] gfx_mode::$43 = gfx_mode::$42 | *form_b_step_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_step_lo
    // [169] *DTV_PLANEB_STEP = gfx_mode::$43 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_STEP
    // [170] gfx_mode::$44 = *form_b_mod_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_mod_hi
    asl
    asl
    asl
    asl
    // [171] gfx_mode::$45 = gfx_mode::$44 | *form_b_mod_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_mod_lo
    // [172] *DTV_PLANEB_MODULO_LO = gfx_mode::$45 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_MODULO_LO
    // [173] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // [174] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [175] *((byte*)CIA2) = 3^(byte)(word)VICII_SCREEN0/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^VICII_SCREEN0/$4000
    sta CIA2
    // [176] get_VICII_screen::idx#0 = *form_VICII_screen -- vbuaa=_deref_pbuc1 
    lda form_VICII_screen
    // [177] call get_VICII_screen 
    // [564] phi from gfx_mode::@28 to get_VICII_screen [phi:gfx_mode::@28->get_VICII_screen]
  get_VICII_screen_from___b28:
    // [564] phi get_VICII_screen::idx#2 = get_VICII_screen::idx#0 [phi:gfx_mode::@28->get_VICII_screen#0] -- register_copy 
    jsr get_VICII_screen
    // [178] get_VICII_screen::return#10 = get_VICII_screen::return#5
    jmp __b29
    // gfx_mode::@29
  __b29:
    // [179] gfx_mode::$82 = get_VICII_screen::return#10
    // [180] gfx_mode::$47 = (word)gfx_mode::$82 & $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __47
    and #<$3fff
    sta.z __47
    lda.z __47+1
    and #>$3fff
    sta.z __47+1
    // [181] gfx_mode::$48 = gfx_mode::$47 >> 6 -- vwuz1=vwuz1_ror_6 
    lda.z __48
    asl
    sta.z $ff
    lda.z __48+1
    rol
    sta.z __48
    lda #0
    rol
    sta.z __48+1
    asl.z $ff
    rol.z __48
    rol.z __48+1
    // [182] get_VICII_charset::idx#0 = *form_VICII_gfx -- vbuaa=_deref_pbuc1 
    lda form_VICII_gfx
    // [183] call get_VICII_charset 
    jsr get_VICII_charset
    // [184] get_VICII_charset::return#4 = get_VICII_charset::return#2
    jmp __b30
    // gfx_mode::@30
  __b30:
    // [185] gfx_mode::$83 = get_VICII_charset::return#4
    // [186] gfx_mode::$50 = (word)gfx_mode::$83 & $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __50
    and #<$3fff
    sta.z __50
    lda.z __50+1
    and #>$3fff
    sta.z __50+1
    // [187] gfx_mode::$51 = > gfx_mode::$50 -- vbuaa=_hi_vwuz1 
    lda.z __50+1
    // [188] gfx_mode::$52 = gfx_mode::$51 >> 2 -- vbuz1=vbuaa_ror_2 
    lsr
    lsr
    sta.z __52
    // [189] gfx_mode::$84 = (byte)gfx_mode::$48 -- vbuaa=_byte_vwuz1 
    lda.z __48
    // [190] gfx_mode::$53 = gfx_mode::$84 | gfx_mode::$52 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z __52
    // [191] *VICII_MEMORY = gfx_mode::$53 -- _deref_pbuc1=vbuaa 
    // Set VIC Bank
    // VIC memory
    sta VICII_MEMORY
    // [192] get_VICII_screen::idx#1 = *form_VICII_cols -- vbuaa=_deref_pbuc1 
    lda form_VICII_cols
    // [193] call get_VICII_screen 
    // [564] phi from gfx_mode::@30 to get_VICII_screen [phi:gfx_mode::@30->get_VICII_screen]
  get_VICII_screen_from___b30:
    // [564] phi get_VICII_screen::idx#2 = get_VICII_screen::idx#1 [phi:gfx_mode::@30->get_VICII_screen#0] -- register_copy 
    jsr get_VICII_screen
    // [194] get_VICII_screen::return#11 = get_VICII_screen::return#5
    jmp __b31
    // gfx_mode::@31
  __b31:
    // [195] gfx_mode::VICII_colors#0 = get_VICII_screen::return#11
    // [196] phi from gfx_mode::@31 to gfx_mode::@19 [phi:gfx_mode::@31->gfx_mode::@19]
  __b19_from___b31:
    // [196] phi gfx_mode::cy#4 = 0 [phi:gfx_mode::@31->gfx_mode::@19#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [196] phi gfx_mode::col#3 = COLS [phi:gfx_mode::@31->gfx_mode::@19#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z col
    lda #>COLS
    sta.z col+1
    // [196] phi gfx_mode::VICII_colors#3 = gfx_mode::VICII_colors#0 [phi:gfx_mode::@31->gfx_mode::@19#2] -- register_copy 
    jmp __b19
    // [196] phi from gfx_mode::@21 to gfx_mode::@19 [phi:gfx_mode::@21->gfx_mode::@19]
  __b19_from___b21:
    // [196] phi gfx_mode::cy#4 = gfx_mode::cy#1 [phi:gfx_mode::@21->gfx_mode::@19#0] -- register_copy 
    // [196] phi gfx_mode::col#3 = gfx_mode::col#1 [phi:gfx_mode::@21->gfx_mode::@19#1] -- register_copy 
    // [196] phi gfx_mode::VICII_colors#3 = gfx_mode::VICII_colors#1 [phi:gfx_mode::@21->gfx_mode::@19#2] -- register_copy 
    jmp __b19
    // gfx_mode::@19
  __b19:
    // [197] phi from gfx_mode::@19 to gfx_mode::@20 [phi:gfx_mode::@19->gfx_mode::@20]
  __b20_from___b19:
    // [197] phi gfx_mode::cx#2 = 0 [phi:gfx_mode::@19->gfx_mode::@20#0] -- vbuxx=vbuc1 
    ldx #0
    // [197] phi gfx_mode::col#2 = gfx_mode::col#3 [phi:gfx_mode::@19->gfx_mode::@20#1] -- register_copy 
    // [197] phi gfx_mode::VICII_colors#2 = gfx_mode::VICII_colors#3 [phi:gfx_mode::@19->gfx_mode::@20#2] -- register_copy 
    jmp __b20
    // [197] phi from gfx_mode::@20 to gfx_mode::@20 [phi:gfx_mode::@20->gfx_mode::@20]
  __b20_from___b20:
    // [197] phi gfx_mode::cx#2 = gfx_mode::cx#1 [phi:gfx_mode::@20->gfx_mode::@20#0] -- register_copy 
    // [197] phi gfx_mode::col#2 = gfx_mode::col#1 [phi:gfx_mode::@20->gfx_mode::@20#1] -- register_copy 
    // [197] phi gfx_mode::VICII_colors#2 = gfx_mode::VICII_colors#1 [phi:gfx_mode::@20->gfx_mode::@20#2] -- register_copy 
    jmp __b20
    // gfx_mode::@20
  __b20:
    // [198] *gfx_mode::col#2 = *gfx_mode::VICII_colors#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (VICII_colors),y
    ldy #0
    sta (col),y
    // [199] gfx_mode::col#1 = ++ gfx_mode::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [200] gfx_mode::VICII_colors#1 = ++ gfx_mode::VICII_colors#2 -- pbuz1=_inc_pbuz1 
    inc.z VICII_colors
    bne !+
    inc.z VICII_colors+1
  !:
    // [201] gfx_mode::cx#1 = ++ gfx_mode::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [202] if(gfx_mode::cx#1!=$28) goto gfx_mode::@20 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b20_from___b20
    jmp __b21
    // gfx_mode::@21
  __b21:
    // [203] gfx_mode::cy#1 = ++ gfx_mode::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [204] if(gfx_mode::cy#1!=$19) goto gfx_mode::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b19_from___b21
    jmp __b22
    // gfx_mode::@22
  __b22:
    // [205] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 -- _deref_pbuc1=vbuc2 
    // Background colors
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [206] gfx_mode::$55 = *form_VICII_bg0_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_VICII_bg0_hi
    asl
    asl
    asl
    asl
    // [207] gfx_mode::$56 = gfx_mode::$55 | *form_VICII_bg0_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_VICII_bg0_lo
    // [208] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = gfx_mode::$56 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [209] gfx_mode::$57 = *form_VICII_bg1_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_VICII_bg1_hi
    asl
    asl
    asl
    asl
    // [210] gfx_mode::$58 = gfx_mode::$57 | *form_VICII_bg1_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_VICII_bg1_lo
    // [211] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1) = gfx_mode::$58 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1
    // [212] gfx_mode::$59 = *form_VICII_bg2_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_VICII_bg2_hi
    asl
    asl
    asl
    asl
    // [213] gfx_mode::$60 = gfx_mode::$59 | *form_VICII_bg2_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_VICII_bg2_lo
    // [214] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2) = gfx_mode::$60 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2
    // [215] gfx_mode::$61 = *form_VICII_bg3_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_VICII_bg3_hi
    asl
    asl
    asl
    asl
    // [216] gfx_mode::$62 = gfx_mode::$61 | *form_VICII_bg3_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_VICII_bg3_lo
    // [217] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3) = gfx_mode::$62 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3
    // [218] if(*form_dtv_palet==0) goto gfx_mode::@24 -- _deref_pbuc1_eq_0_then_la1 
    // DTV Palette
    lda form_dtv_palet
    cmp #0
    beq __b24_from___b22
    // [219] phi from gfx_mode::@22 to gfx_mode::@23 [phi:gfx_mode::@22->gfx_mode::@23]
  __b23_from___b22:
    // [219] phi gfx_mode::j#2 = 0 [phi:gfx_mode::@22->gfx_mode::@23#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b23
  // DTV Palette - Grey Tones
    // [219] phi from gfx_mode::@23 to gfx_mode::@23 [phi:gfx_mode::@23->gfx_mode::@23]
  __b23_from___b23:
    // [219] phi gfx_mode::j#2 = gfx_mode::j#1 [phi:gfx_mode::@23->gfx_mode::@23#0] -- register_copy 
    jmp __b23
    // gfx_mode::@23
  __b23:
    // [220] DTV_PALETTE[gfx_mode::j#2] = gfx_mode::j#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // [221] gfx_mode::j#1 = ++ gfx_mode::j#2 -- vbuxx=_inc_vbuxx 
    inx
    // [222] if(gfx_mode::j#1!=$10) goto gfx_mode::@23 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b23_from___b23
    jmp __b25
    // gfx_mode::@25
  __b25:
    // [223] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto gfx_mode::@25 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b25
    // [224] phi from gfx_mode::@25 to gfx_mode::@26 [phi:gfx_mode::@25->gfx_mode::@26]
  __b26_from___b25:
    jmp __b26
    // gfx_mode::@26
  __b26:
    // [225] call keyboard_event_scan 
    // [578] phi from gfx_mode::@26 to keyboard_event_scan [phi:gfx_mode::@26->keyboard_event_scan]
  keyboard_event_scan_from___b26:
    // [578] phi keyboard_events_size#98 = keyboard_events_size#25 [phi:gfx_mode::@26->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [226] phi from gfx_mode::@26 to gfx_mode::@32 [phi:gfx_mode::@26->gfx_mode::@32]
  __b32_from___b26:
    jmp __b32
    // gfx_mode::@32
  __b32:
    // [227] call keyboard_event_get 
    jsr keyboard_event_get
    // [228] keyboard_event_get::return#3 = keyboard_event_get::return#2
    jmp __b33
    // gfx_mode::@33
  __b33:
    // [229] gfx_mode::keyboard_event#0 = keyboard_event_get::return#3
    // [230] if(gfx_mode::keyboard_event#0==KEY_SPACE) goto gfx_mode::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_SPACE
    beq __breturn
    jmp __b25
    // gfx_mode::@return
  __breturn:
    // [231] return 
    rts
  // DTV Palette - default
    // [232] phi from gfx_mode::@22 to gfx_mode::@24 [phi:gfx_mode::@22->gfx_mode::@24]
  __b24_from___b22:
    // [232] phi gfx_mode::i#2 = 0 [phi:gfx_mode::@22->gfx_mode::@24#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b24
    // [232] phi from gfx_mode::@24 to gfx_mode::@24 [phi:gfx_mode::@24->gfx_mode::@24]
  __b24_from___b24:
    // [232] phi gfx_mode::i#2 = gfx_mode::i#1 [phi:gfx_mode::@24->gfx_mode::@24#0] -- register_copy 
    jmp __b24
    // gfx_mode::@24
  __b24:
    // [233] DTV_PALETTE[gfx_mode::i#2] = DTV_PALETTE_DEFAULT[gfx_mode::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // [234] gfx_mode::i#1 = ++ gfx_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [235] if(gfx_mode::i#1!=$10) goto gfx_mode::@24 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b24_from___b24
    jmp __b25
}
  // gfx_init_screen0
// Initialize VIC screen 0 ( value is %yyyyxxxx where yyyy is ypos and xxxx is xpos)
gfx_init_screen0: {
    .label __1 = $16
    .label ch = $b
    .label cy = 3
    // [237] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
  __b1_from_gfx_init_screen0:
    // [237] phi gfx_init_screen0::ch#3 = VICII_SCREEN0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN0
    sta.z ch
    lda #>VICII_SCREEN0
    sta.z ch+1
    // [237] phi gfx_init_screen0::cy#4 = 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [237] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
  __b1_from___b3:
    // [237] phi gfx_init_screen0::ch#3 = gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
    // [237] phi gfx_init_screen0::cy#4 = gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen0::@1
  __b1:
    // [238] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
  __b2_from___b1:
    // [238] phi gfx_init_screen0::ch#2 = gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
    // [238] phi gfx_init_screen0::cx#2 = 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [238] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
  __b2_from___b2:
    // [238] phi gfx_init_screen0::ch#2 = gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
    // [238] phi gfx_init_screen0::cx#2 = gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen0::@2
  __b2:
    // [239] gfx_init_screen0::$0 = gfx_init_screen0::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // [240] gfx_init_screen0::$1 = gfx_init_screen0::$0 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // [241] gfx_init_screen0::$2 = gfx_init_screen0::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [242] gfx_init_screen0::$3 = gfx_init_screen0::$1 | gfx_init_screen0::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // [243] *gfx_init_screen0::ch#2 = gfx_init_screen0::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [244] gfx_init_screen0::ch#1 = ++ gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [245] gfx_init_screen0::cx#1 = ++ gfx_init_screen0::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [246] if(gfx_init_screen0::cx#1!=$28) goto gfx_init_screen0::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen0::@3
  __b3:
    // [247] gfx_init_screen0::cy#1 = ++ gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [248] if(gfx_init_screen0::cy#1!=$19) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen0::@return
  __breturn:
    // [249] return 
    rts
}
  // gfx_init_screen1
// Initialize VIC screen 1 ( value is %0000cccc where cccc is (x+y mod $f))
gfx_init_screen1: {
    .label ch = $d
    .label cy = 4
    // [251] phi from gfx_init_screen1 to gfx_init_screen1::@1 [phi:gfx_init_screen1->gfx_init_screen1::@1]
  __b1_from_gfx_init_screen1:
    // [251] phi gfx_init_screen1::ch#3 = VICII_SCREEN1 [phi:gfx_init_screen1->gfx_init_screen1::@1#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN1
    sta.z ch
    lda #>VICII_SCREEN1
    sta.z ch+1
    // [251] phi gfx_init_screen1::cy#4 = 0 [phi:gfx_init_screen1->gfx_init_screen1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [251] phi from gfx_init_screen1::@3 to gfx_init_screen1::@1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1]
  __b1_from___b3:
    // [251] phi gfx_init_screen1::ch#3 = gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#0] -- register_copy 
    // [251] phi gfx_init_screen1::cy#4 = gfx_init_screen1::cy#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen1::@1
  __b1:
    // [252] phi from gfx_init_screen1::@1 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2]
  __b2_from___b1:
    // [252] phi gfx_init_screen1::ch#2 = gfx_init_screen1::ch#3 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#0] -- register_copy 
    // [252] phi gfx_init_screen1::cx#2 = 0 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [252] phi from gfx_init_screen1::@2 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2]
  __b2_from___b2:
    // [252] phi gfx_init_screen1::ch#2 = gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#0] -- register_copy 
    // [252] phi gfx_init_screen1::cx#2 = gfx_init_screen1::cx#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen1::@2
  __b2:
    // [253] gfx_init_screen1::$0 = gfx_init_screen1::cx#2 + gfx_init_screen1::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // [254] gfx_init_screen1::$1 = gfx_init_screen1::$0 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [255] *gfx_init_screen1::ch#2 = gfx_init_screen1::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [256] gfx_init_screen1::ch#1 = ++ gfx_init_screen1::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [257] gfx_init_screen1::cx#1 = ++ gfx_init_screen1::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [258] if(gfx_init_screen1::cx#1!=$28) goto gfx_init_screen1::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen1::@3
  __b3:
    // [259] gfx_init_screen1::cy#1 = ++ gfx_init_screen1::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [260] if(gfx_init_screen1::cy#1!=$19) goto gfx_init_screen1::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen1::@return
  __breturn:
    // [261] return 
    rts
}
  // gfx_init_screen2
// Initialize VIC screen 2 ( value is %ccccrrrr where cccc is (x+y mod $f) and rrrr is %1111-%cccc)
gfx_init_screen2: {
    .label col2 = $16
    .label ch = $b
    .label cy = 2
    // [263] phi from gfx_init_screen2 to gfx_init_screen2::@1 [phi:gfx_init_screen2->gfx_init_screen2::@1]
  __b1_from_gfx_init_screen2:
    // [263] phi gfx_init_screen2::ch#3 = VICII_SCREEN2 [phi:gfx_init_screen2->gfx_init_screen2::@1#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN2
    sta.z ch
    lda #>VICII_SCREEN2
    sta.z ch+1
    // [263] phi gfx_init_screen2::cy#4 = 0 [phi:gfx_init_screen2->gfx_init_screen2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [263] phi from gfx_init_screen2::@3 to gfx_init_screen2::@1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1]
  __b1_from___b3:
    // [263] phi gfx_init_screen2::ch#3 = gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#0] -- register_copy 
    // [263] phi gfx_init_screen2::cy#4 = gfx_init_screen2::cy#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen2::@1
  __b1:
    // [264] phi from gfx_init_screen2::@1 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2]
  __b2_from___b1:
    // [264] phi gfx_init_screen2::ch#2 = gfx_init_screen2::ch#3 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#0] -- register_copy 
    // [264] phi gfx_init_screen2::cx#2 = 0 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [264] phi from gfx_init_screen2::@2 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2]
  __b2_from___b2:
    // [264] phi gfx_init_screen2::ch#2 = gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#0] -- register_copy 
    // [264] phi gfx_init_screen2::cx#2 = gfx_init_screen2::cx#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen2::@2
  __b2:
    // [265] gfx_init_screen2::$0 = gfx_init_screen2::cx#2 + gfx_init_screen2::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // [266] gfx_init_screen2::col#0 = gfx_init_screen2::$0 & $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
    // [267] gfx_init_screen2::col2#0 = $f - gfx_init_screen2::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc #$f
    sta.z col2
    // [268] gfx_init_screen2::$3 = gfx_init_screen2::col#0 << 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
    // [269] gfx_init_screen2::$4 = gfx_init_screen2::$3 | gfx_init_screen2::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z col2
    // [270] *gfx_init_screen2::ch#2 = gfx_init_screen2::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [271] gfx_init_screen2::ch#1 = ++ gfx_init_screen2::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [272] gfx_init_screen2::cx#1 = ++ gfx_init_screen2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [273] if(gfx_init_screen2::cx#1!=$28) goto gfx_init_screen2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen2::@3
  __b3:
    // [274] gfx_init_screen2::cy#1 = ++ gfx_init_screen2::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [275] if(gfx_init_screen2::cy#1!=$19) goto gfx_init_screen2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen2::@return
  __breturn:
    // [276] return 
    rts
}
  // gfx_init_screen3
// Initialize VIC screen 3 ( value is %00xx00yy where xx is xpos and yy is ypos
gfx_init_screen3: {
    .label __1 = $25
    .label ch = $b
    .label cy = 2
    // [278] phi from gfx_init_screen3 to gfx_init_screen3::@1 [phi:gfx_init_screen3->gfx_init_screen3::@1]
  __b1_from_gfx_init_screen3:
    // [278] phi gfx_init_screen3::ch#3 = VICII_SCREEN3 [phi:gfx_init_screen3->gfx_init_screen3::@1#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN3
    sta.z ch
    lda #>VICII_SCREEN3
    sta.z ch+1
    // [278] phi gfx_init_screen3::cy#4 = 0 [phi:gfx_init_screen3->gfx_init_screen3::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [278] phi from gfx_init_screen3::@3 to gfx_init_screen3::@1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1]
  __b1_from___b3:
    // [278] phi gfx_init_screen3::ch#3 = gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#0] -- register_copy 
    // [278] phi gfx_init_screen3::cy#4 = gfx_init_screen3::cy#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen3::@1
  __b1:
    // [279] phi from gfx_init_screen3::@1 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2]
  __b2_from___b1:
    // [279] phi gfx_init_screen3::ch#2 = gfx_init_screen3::ch#3 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#0] -- register_copy 
    // [279] phi gfx_init_screen3::cx#2 = 0 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [279] phi from gfx_init_screen3::@2 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2]
  __b2_from___b2:
    // [279] phi gfx_init_screen3::ch#2 = gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#0] -- register_copy 
    // [279] phi gfx_init_screen3::cx#2 = gfx_init_screen3::cx#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen3::@2
  __b2:
    // [280] gfx_init_screen3::$0 = gfx_init_screen3::cx#2 & 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
    // [281] gfx_init_screen3::$1 = gfx_init_screen3::$0 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // [282] gfx_init_screen3::$2 = gfx_init_screen3::cy#4 & 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and.z cy
    // [283] gfx_init_screen3::$3 = gfx_init_screen3::$1 | gfx_init_screen3::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // [284] *gfx_init_screen3::ch#2 = gfx_init_screen3::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [285] gfx_init_screen3::ch#1 = ++ gfx_init_screen3::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [286] gfx_init_screen3::cx#1 = ++ gfx_init_screen3::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [287] if(gfx_init_screen3::cx#1!=$28) goto gfx_init_screen3::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen3::@3
  __b3:
    // [288] gfx_init_screen3::cy#1 = ++ gfx_init_screen3::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [289] if(gfx_init_screen3::cy#1!=$19) goto gfx_init_screen3::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen3::@return
  __breturn:
    // [290] return 
    rts
}
  // gfx_init_screen4
// Initialize VIC screen 4 - all chars are 00
gfx_init_screen4: {
    .label ch = $d
    .label cy = 3
    // [292] phi from gfx_init_screen4 to gfx_init_screen4::@1 [phi:gfx_init_screen4->gfx_init_screen4::@1]
  __b1_from_gfx_init_screen4:
    // [292] phi gfx_init_screen4::cy#4 = 0 [phi:gfx_init_screen4->gfx_init_screen4::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [292] phi gfx_init_screen4::ch#3 = VICII_SCREEN4 [phi:gfx_init_screen4->gfx_init_screen4::@1#1] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN4
    sta.z ch
    lda #>VICII_SCREEN4
    sta.z ch+1
    jmp __b1
    // [292] phi from gfx_init_screen4::@3 to gfx_init_screen4::@1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1]
  __b1_from___b3:
    // [292] phi gfx_init_screen4::cy#4 = gfx_init_screen4::cy#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#0] -- register_copy 
    // [292] phi gfx_init_screen4::ch#3 = gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen4::@1
  __b1:
    // [293] phi from gfx_init_screen4::@1 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2]
  __b2_from___b1:
    // [293] phi gfx_init_screen4::cx#2 = 0 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [293] phi gfx_init_screen4::ch#2 = gfx_init_screen4::ch#3 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#1] -- register_copy 
    jmp __b2
    // [293] phi from gfx_init_screen4::@2 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2]
  __b2_from___b2:
    // [293] phi gfx_init_screen4::cx#2 = gfx_init_screen4::cx#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#0] -- register_copy 
    // [293] phi gfx_init_screen4::ch#2 = gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen4::@2
  __b2:
    // [294] *gfx_init_screen4::ch#2 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (ch),y
    // [295] gfx_init_screen4::ch#1 = ++ gfx_init_screen4::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [296] gfx_init_screen4::cx#1 = ++ gfx_init_screen4::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [297] if(gfx_init_screen4::cx#1!=$28) goto gfx_init_screen4::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen4::@3
  __b3:
    // [298] gfx_init_screen4::cy#1 = ++ gfx_init_screen4::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [299] if(gfx_init_screen4::cy#1!=$19) goto gfx_init_screen4::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen4::@return
  __breturn:
    // [300] return 
    rts
}
  // gfx_init_charset
gfx_init_charset: {
    .label charset = $b
    .label chargen = $d
    .label c = 3
    // [301] *PROCPORT = $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
    // [302] phi from gfx_init_charset to gfx_init_charset::@1 [phi:gfx_init_charset->gfx_init_charset::@1]
  __b1_from_gfx_init_charset:
    // [302] phi gfx_init_charset::c#4 = 0 [phi:gfx_init_charset->gfx_init_charset::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [302] phi gfx_init_charset::charset#3 = VICII_CHARSET_ROM [phi:gfx_init_charset->gfx_init_charset::@1#1] -- pbuz1=pbuc1 
    lda #<VICII_CHARSET_ROM
    sta.z charset
    lda #>VICII_CHARSET_ROM
    sta.z charset+1
    // [302] phi gfx_init_charset::chargen#3 = CHARGEN [phi:gfx_init_charset->gfx_init_charset::@1#2] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    jmp __b1
    // [302] phi from gfx_init_charset::@3 to gfx_init_charset::@1 [phi:gfx_init_charset::@3->gfx_init_charset::@1]
  __b1_from___b3:
    // [302] phi gfx_init_charset::c#4 = gfx_init_charset::c#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#0] -- register_copy 
    // [302] phi gfx_init_charset::charset#3 = gfx_init_charset::charset#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#1] -- register_copy 
    // [302] phi gfx_init_charset::chargen#3 = gfx_init_charset::chargen#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#2] -- register_copy 
    jmp __b1
    // gfx_init_charset::@1
  __b1:
    // [303] phi from gfx_init_charset::@1 to gfx_init_charset::@2 [phi:gfx_init_charset::@1->gfx_init_charset::@2]
  __b2_from___b1:
    // [303] phi gfx_init_charset::l#2 = 0 [phi:gfx_init_charset::@1->gfx_init_charset::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [303] phi gfx_init_charset::charset#2 = gfx_init_charset::charset#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#1] -- register_copy 
    // [303] phi gfx_init_charset::chargen#2 = gfx_init_charset::chargen#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#2] -- register_copy 
    jmp __b2
    // [303] phi from gfx_init_charset::@2 to gfx_init_charset::@2 [phi:gfx_init_charset::@2->gfx_init_charset::@2]
  __b2_from___b2:
    // [303] phi gfx_init_charset::l#2 = gfx_init_charset::l#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#0] -- register_copy 
    // [303] phi gfx_init_charset::charset#2 = gfx_init_charset::charset#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#1] -- register_copy 
    // [303] phi gfx_init_charset::chargen#2 = gfx_init_charset::chargen#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#2] -- register_copy 
    jmp __b2
    // gfx_init_charset::@2
  __b2:
    // [304] *gfx_init_charset::charset#2 = *gfx_init_charset::chargen#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    ldy #0
    sta (charset),y
    // [305] gfx_init_charset::charset#1 = ++ gfx_init_charset::charset#2 -- pbuz1=_inc_pbuz1 
    inc.z charset
    bne !+
    inc.z charset+1
  !:
    // [306] gfx_init_charset::chargen#1 = ++ gfx_init_charset::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [307] gfx_init_charset::l#1 = ++ gfx_init_charset::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [308] if(gfx_init_charset::l#1!=8) goto gfx_init_charset::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b2_from___b2
    jmp __b3
    // gfx_init_charset::@3
  __b3:
    // [309] gfx_init_charset::c#1 = ++ gfx_init_charset::c#4 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [310] if(gfx_init_charset::c#1!=0) goto gfx_init_charset::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    bne __b1_from___b3
    jmp __b4
    // gfx_init_charset::@4
  __b4:
    // [311] *PROCPORT = $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    jmp __breturn
    // gfx_init_charset::@return
  __breturn:
    // [312] return 
    rts
}
  // gfx_init_VICII_bitmap
// Initialize VIC bitmap
gfx_init_VICII_bitmap: {
    .const lines_cnt = 9
    .label l = 4
    // [314] call bitmap_init 
  // Draw some lines on the bitmap
    // [637] phi from gfx_init_VICII_bitmap to bitmap_init [phi:gfx_init_VICII_bitmap->bitmap_init]
  bitmap_init_from_gfx_init_VICII_bitmap:
    jsr bitmap_init
    // [315] phi from gfx_init_VICII_bitmap to gfx_init_VICII_bitmap::@3 [phi:gfx_init_VICII_bitmap->gfx_init_VICII_bitmap::@3]
  __b3_from_gfx_init_VICII_bitmap:
    jmp __b3
    // gfx_init_VICII_bitmap::@3
  __b3:
    // [316] call bitmap_clear 
    // [659] phi from gfx_init_VICII_bitmap::@3 to bitmap_clear [phi:gfx_init_VICII_bitmap::@3->bitmap_clear]
  bitmap_clear_from___b3:
    jsr bitmap_clear
    // [317] phi from gfx_init_VICII_bitmap::@3 to gfx_init_VICII_bitmap::@1 [phi:gfx_init_VICII_bitmap::@3->gfx_init_VICII_bitmap::@1]
  __b1_from___b3:
    // [317] phi gfx_init_VICII_bitmap::l#2 = 0 [phi:gfx_init_VICII_bitmap::@3->gfx_init_VICII_bitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // gfx_init_VICII_bitmap::@1
  __b1:
    // [318] if(gfx_init_VICII_bitmap::l#2<gfx_init_VICII_bitmap::lines_cnt) goto gfx_init_VICII_bitmap::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b2
    jmp __breturn
    // gfx_init_VICII_bitmap::@return
  __breturn:
    // [319] return 
    rts
    // gfx_init_VICII_bitmap::@2
  __b2:
    // [320] bitmap_line::x1#0 = gfx_init_VICII_bitmap::lines_x[gfx_init_VICII_bitmap::l#2] -- vwuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x1
    lda #0
    sta.z bitmap_line.x1+1
    // [321] bitmap_line::y1#0 = gfx_init_VICII_bitmap::lines_y[gfx_init_VICII_bitmap::l#2] -- vwuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_y,y
    sta.z bitmap_line.y1
    lda #0
    sta.z bitmap_line.y1+1
    // [322] bitmap_line::x2#0 = (gfx_init_VICII_bitmap::lines_x+1)[gfx_init_VICII_bitmap::l#2] -- vwuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x+1,y
    sta.z bitmap_line.x2
    lda #0
    sta.z bitmap_line.x2+1
    // [323] bitmap_line::y2#0 = (gfx_init_VICII_bitmap::lines_y+1)[gfx_init_VICII_bitmap::l#2] -- vwuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_y+1,y
    sta.z bitmap_line.y2
    lda #0
    sta.z bitmap_line.y2+1
    // [324] call bitmap_line 
    jsr bitmap_line
    jmp __b4
    // gfx_init_VICII_bitmap::@4
  __b4:
    // [325] gfx_init_VICII_bitmap::l#1 = ++ gfx_init_VICII_bitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [317] phi from gfx_init_VICII_bitmap::@4 to gfx_init_VICII_bitmap::@1 [phi:gfx_init_VICII_bitmap::@4->gfx_init_VICII_bitmap::@1]
  __b1_from___b4:
    // [317] phi gfx_init_VICII_bitmap::l#2 = gfx_init_VICII_bitmap::l#1 [phi:gfx_init_VICII_bitmap::@4->gfx_init_VICII_bitmap::@1#0] -- register_copy 
    jmp __b1
  .segment Data
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
.segment Code
  // gfx_init_plane_8bppchunky
// Initialize 8BPP Chunky Bitmap (contains 8bpp pixels)
gfx_init_plane_8bppchunky: {
    .label __5 = $1b
    .label gfxb = $d
    .label x = $b
    .label y = 4
    // [327] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_8bppchunky to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_8bppchunky:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)PLANE_8BPP_CHUNKY/$4000 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000
    jsr dtvSetCpuBankSegment1
    // [328] phi from gfx_init_plane_8bppchunky to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1]
  __b1_from_gfx_init_plane_8bppchunky:
    // [328] phi gfx_init_plane_8bppchunky::gfxbCpuBank#7 = ++(byte)PLANE_8BPP_CHUNKY/$4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#0] -- vbuxx=vbuc1 
    ldx #PLANE_8BPP_CHUNKY/$4000+1
    // [328] phi gfx_init_plane_8bppchunky::y#6 = 0 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [328] phi gfx_init_plane_8bppchunky::gfxb#5 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b1
    // [328] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1]
  __b1_from___b5:
    // [328] phi gfx_init_plane_8bppchunky::gfxbCpuBank#7 = gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#0] -- register_copy 
    // [328] phi gfx_init_plane_8bppchunky::y#6 = gfx_init_plane_8bppchunky::y#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#1] -- register_copy 
    // [328] phi gfx_init_plane_8bppchunky::gfxb#5 = gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#2] -- register_copy 
    jmp __b1
    // gfx_init_plane_8bppchunky::@1
  __b1:
    // [329] phi from gfx_init_plane_8bppchunky::@1 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2]
  __b2_from___b1:
    // [329] phi gfx_init_plane_8bppchunky::gfxbCpuBank#4 = gfx_init_plane_8bppchunky::gfxbCpuBank#7 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [329] phi gfx_init_plane_8bppchunky::x#2 = 0 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [329] phi gfx_init_plane_8bppchunky::gfxb#3 = gfx_init_plane_8bppchunky::gfxb#5 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp __b2
    // [329] phi from gfx_init_plane_8bppchunky::@3 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2]
  __b2_from___b3:
    // [329] phi gfx_init_plane_8bppchunky::gfxbCpuBank#4 = gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [329] phi gfx_init_plane_8bppchunky::x#2 = gfx_init_plane_8bppchunky::x#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#1] -- register_copy 
    // [329] phi gfx_init_plane_8bppchunky::gfxb#3 = gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp __b2
    // gfx_init_plane_8bppchunky::@2
  __b2:
    // [330] if(gfx_init_plane_8bppchunky::gfxb#3!=$8000) goto gfx_init_plane_8bppchunky::@3 -- pbuz1_neq_vwuc1_then_la1 
    lda.z gfxb+1
    cmp #>$8000
    bne __b3_from___b2
    lda.z gfxb
    cmp #<$8000
    bne __b3_from___b2
    jmp __b4
    // gfx_init_plane_8bppchunky::@4
  __b4:
    // [331] dtvSetCpuBankSegment1::cpuBankIdx#1 = gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
    // [332] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_8bppchunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp __b7
    // gfx_init_plane_8bppchunky::@7
  __b7:
    // [333] gfx_init_plane_8bppchunky::gfxbCpuBank#2 = ++ gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
    // [334] phi from gfx_init_plane_8bppchunky::@7 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3]
  __b3_from___b7:
    // [334] phi gfx_init_plane_8bppchunky::gfxbCpuBank#8 = gfx_init_plane_8bppchunky::gfxbCpuBank#2 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [334] phi gfx_init_plane_8bppchunky::gfxb#4 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b3
    // [334] phi from gfx_init_plane_8bppchunky::@2 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3]
  __b3_from___b2:
    // [334] phi gfx_init_plane_8bppchunky::gfxbCpuBank#8 = gfx_init_plane_8bppchunky::gfxbCpuBank#4 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [334] phi gfx_init_plane_8bppchunky::gfxb#4 = gfx_init_plane_8bppchunky::gfxb#3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#1] -- register_copy 
    jmp __b3
    // gfx_init_plane_8bppchunky::@3
  __b3:
    // [335] gfx_init_plane_8bppchunky::$5 = gfx_init_plane_8bppchunky::x#2 + gfx_init_plane_8bppchunky::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z y
    clc
    adc.z x
    sta.z __5
    lda #0
    adc.z x+1
    sta.z __5+1
    // [336] gfx_init_plane_8bppchunky::c#0 = (byte)gfx_init_plane_8bppchunky::$5 -- vbuaa=_byte_vwuz1 
    lda.z __5
    // [337] *gfx_init_plane_8bppchunky::gfxb#4 = gfx_init_plane_8bppchunky::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
    // [338] gfx_init_plane_8bppchunky::gfxb#1 = ++ gfx_init_plane_8bppchunky::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [339] gfx_init_plane_8bppchunky::x#1 = ++ gfx_init_plane_8bppchunky::x#2 -- vwuz1=_inc_vwuz1 
    inc.z x
    bne !+
    inc.z x+1
  !:
    // [340] if(gfx_init_plane_8bppchunky::x#1!=$140) goto gfx_init_plane_8bppchunky::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda.z x+1
    cmp #>$140
    bne __b2_from___b3
    lda.z x
    cmp #<$140
    bne __b2_from___b3
    jmp __b5
    // gfx_init_plane_8bppchunky::@5
  __b5:
    // [341] gfx_init_plane_8bppchunky::y#1 = ++ gfx_init_plane_8bppchunky::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [342] if(gfx_init_plane_8bppchunky::y#1!=$c8) goto gfx_init_plane_8bppchunky::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z y
    bne __b1_from___b5
    // [343] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@6 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@6]
  __b6_from___b5:
    jmp __b6
    // gfx_init_plane_8bppchunky::@6
  __b6:
    // [344] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_8bppchunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b6:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_8bppchunky::@return
  __breturn:
    // [345] return 
    rts
}
  // gfx_init_plane_charset8
// Initialize Plane with 8bpp charset
gfx_init_plane_charset8: {
    // 8bpp cells for Plane B (charset) - ROM charset with 256 colors
    .const gfxbCpuBank = PLANE_CHARSET8/$4000
    .label bits = $15
    .label chargen = $d
    .label gfxa = $b
    .label col = $16
    .label cr = $a
    .label ch = 9
    // [347] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    jmp __b9
    // gfx_init_plane_charset8::@9
  __b9:
    // [348] *PROCPORT = PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [349] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
  __b1_from___b9:
    // [349] phi gfx_init_plane_charset8::ch#8 = 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ch
    // [349] phi gfx_init_plane_charset8::col#6 = 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z col
    // [349] phi gfx_init_plane_charset8::gfxa#6 = (byte*)$4000 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [349] phi gfx_init_plane_charset8::chargen#3 = CHARGEN [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    jmp __b1
    // [349] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
  __b1_from___b7:
    // [349] phi gfx_init_plane_charset8::ch#8 = gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
    // [349] phi gfx_init_plane_charset8::col#6 = gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
    // [349] phi gfx_init_plane_charset8::gfxa#6 = gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
    // [349] phi gfx_init_plane_charset8::chargen#3 = gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    jmp __b1
    // gfx_init_plane_charset8::@1
  __b1:
    // [350] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
  __b2_from___b1:
    // [350] phi gfx_init_plane_charset8::cr#6 = 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cr
    // [350] phi gfx_init_plane_charset8::col#5 = gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [350] phi gfx_init_plane_charset8::gfxa#5 = gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [350] phi gfx_init_plane_charset8::chargen#2 = gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp __b2
    // [350] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
  __b2_from___b6:
    // [350] phi gfx_init_plane_charset8::cr#6 = gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
    // [350] phi gfx_init_plane_charset8::col#5 = gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [350] phi gfx_init_plane_charset8::gfxa#5 = gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [350] phi gfx_init_plane_charset8::chargen#2 = gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp __b2
    // gfx_init_plane_charset8::@2
  __b2:
    // [351] gfx_init_plane_charset8::bits#0 = *gfx_init_plane_charset8::chargen#2 -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta.z bits
    // [352] gfx_init_plane_charset8::chargen#1 = ++ gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [353] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
  __b3_from___b2:
    // [353] phi gfx_init_plane_charset8::cp#2 = 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [353] phi gfx_init_plane_charset8::col#2 = gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [353] phi gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [353] phi gfx_init_plane_charset8::bits#2 = gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp __b3
    // [353] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
  __b3_from___b4:
    // [353] phi gfx_init_plane_charset8::cp#2 = gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
    // [353] phi gfx_init_plane_charset8::col#2 = gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [353] phi gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [353] phi gfx_init_plane_charset8::bits#2 = gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp __b3
    // gfx_init_plane_charset8::@3
  __b3:
    // [354] gfx_init_plane_charset8::$2 = gfx_init_plane_charset8::bits#2 & $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z bits
    // [355] if(gfx_init_plane_charset8::$2==0) goto gfx_init_plane_charset8::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b4_from___b3
    jmp __b5
    // gfx_init_plane_charset8::@5
  __b5:
    // [356] gfx_init_plane_charset8::c#3 = gfx_init_plane_charset8::col#2 -- vbuaa=vbuz1 
    lda.z col
    // [357] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
  __b4_from___b5:
    // [357] phi gfx_init_plane_charset8::c#2 = gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp __b4
    // [357] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  __b4_from___b3:
    // [357] phi gfx_init_plane_charset8::c#2 = 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b4
    // gfx_init_plane_charset8::@4
  __b4:
    // [358] *gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
    // [359] gfx_init_plane_charset8::gfxa#1 = ++ gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [360] gfx_init_plane_charset8::bits#1 = gfx_init_plane_charset8::bits#2 << 1 -- vbuz1=vbuz1_rol_1 
    asl.z bits
    // [361] gfx_init_plane_charset8::col#1 = ++ gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // [362] gfx_init_plane_charset8::cp#1 = ++ gfx_init_plane_charset8::cp#2 -- vbuxx=_inc_vbuxx 
    inx
    // [363] if(gfx_init_plane_charset8::cp#1!=8) goto gfx_init_plane_charset8::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b3_from___b4
    jmp __b6
    // gfx_init_plane_charset8::@6
  __b6:
    // [364] gfx_init_plane_charset8::cr#1 = ++ gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc.z cr
    // [365] if(gfx_init_plane_charset8::cr#1!=8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cr
    bne __b2_from___b6
    jmp __b7
    // gfx_init_plane_charset8::@7
  __b7:
    // [366] gfx_init_plane_charset8::ch#1 = ++ gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc.z ch
    // [367] if(gfx_init_plane_charset8::ch#1!=0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda.z ch
    bne __b1_from___b7
    jmp __b8
    // gfx_init_plane_charset8::@8
  __b8:
    // [368] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [369] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b8:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_charset8::@return
  __breturn:
    // [370] return 
    rts
}
  // gfx_init_plane_horisontal
// Initialize Plane with Horizontal Stripes
gfx_init_plane_horisontal: {
    .const gfxbCpuBank = PLANE_HORISONTAL/$4000
    .label gfxa = $b
    .label ay = 9
    // [372] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_horisontal to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = gfx_init_plane_horisontal::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [373] phi from gfx_init_plane_horisontal to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1]
  __b1_from_gfx_init_plane_horisontal:
    // [373] phi gfx_init_plane_horisontal::gfxa#6 = (byte*)$4000 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [373] phi gfx_init_plane_horisontal::ay#4 = 0 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b1
    // [373] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1]
  __b1_from___b6:
    // [373] phi gfx_init_plane_horisontal::gfxa#6 = gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#0] -- register_copy 
    // [373] phi gfx_init_plane_horisontal::ay#4 = gfx_init_plane_horisontal::ay#1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_horisontal::@1
  __b1:
    // [374] phi from gfx_init_plane_horisontal::@1 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2]
  __b2_from___b1:
    // [374] phi gfx_init_plane_horisontal::ax#2 = 0 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [374] phi gfx_init_plane_horisontal::gfxa#3 = gfx_init_plane_horisontal::gfxa#6 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp __b2
    // [374] phi from gfx_init_plane_horisontal::@4 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2]
  __b2_from___b4:
    // [374] phi gfx_init_plane_horisontal::ax#2 = gfx_init_plane_horisontal::ax#1 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#0] -- register_copy 
    // [374] phi gfx_init_plane_horisontal::gfxa#3 = gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_horisontal::@2
  __b2:
    // [375] gfx_init_plane_horisontal::$2 = gfx_init_plane_horisontal::ay#4 & 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and.z ay
    // [376] if(gfx_init_plane_horisontal::$2==0) goto gfx_init_plane_horisontal::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    jmp __b5
    // gfx_init_plane_horisontal::@5
  __b5:
    // [377] *gfx_init_plane_horisontal::gfxa#3 = $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
    // [378] gfx_init_plane_horisontal::gfxa#2 = ++ gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [379] phi from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5 to gfx_init_plane_horisontal::@4 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [379] phi gfx_init_plane_horisontal::gfxa#7 = gfx_init_plane_horisontal::gfxa#1 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4#0] -- register_copy 
    jmp __b4
    // gfx_init_plane_horisontal::@4
  __b4:
    // [380] gfx_init_plane_horisontal::ax#1 = ++ gfx_init_plane_horisontal::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [381] if(gfx_init_plane_horisontal::ax#1!=$28) goto gfx_init_plane_horisontal::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b4
    jmp __b6
    // gfx_init_plane_horisontal::@6
  __b6:
    // [382] gfx_init_plane_horisontal::ay#1 = ++ gfx_init_plane_horisontal::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [383] if(gfx_init_plane_horisontal::ay#1!=$c8) goto gfx_init_plane_horisontal::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1_from___b6
    // [384] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@7]
  __b7_from___b6:
    jmp __b7
    // gfx_init_plane_horisontal::@7
  __b7:
    // [385] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_horisontal::@7 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b7:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_horisontal::@return
  __breturn:
    // [386] return 
    rts
    // gfx_init_plane_horisontal::@3
  __b3:
    // [387] *gfx_init_plane_horisontal::gfxa#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
    // [388] gfx_init_plane_horisontal::gfxa#1 = ++ gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    jmp __b4_from___b3
}
  // gfx_init_plane_vertical
// Initialize Plane with Vertical Stripes
gfx_init_plane_vertical: {
    .const gfxbCpuBank = PLANE_VERTICAL/$4000
    .label gfxb = $d
    .label by = $a
    // [390] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_vertical to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_vertical:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = gfx_init_plane_vertical::gfxbCpuBank#0 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [391] phi from gfx_init_plane_vertical to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1]
  __b1_from_gfx_init_plane_vertical:
    // [391] phi gfx_init_plane_vertical::by#4 = 0 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [391] phi gfx_init_plane_vertical::gfxb#3 = (byte*)$4000+PLANE_VERTICAL&$3fff [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#1] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb
    lda #>$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb+1
    jmp __b1
    // [391] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1]
  __b1_from___b3:
    // [391] phi gfx_init_plane_vertical::by#4 = gfx_init_plane_vertical::by#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#0] -- register_copy 
    // [391] phi gfx_init_plane_vertical::gfxb#3 = gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_vertical::@1
  __b1:
    // [392] phi from gfx_init_plane_vertical::@1 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2]
  __b2_from___b1:
    // [392] phi gfx_init_plane_vertical::bx#2 = 0 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [392] phi gfx_init_plane_vertical::gfxb#2 = gfx_init_plane_vertical::gfxb#3 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp __b2
    // [392] phi from gfx_init_plane_vertical::@2 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2]
  __b2_from___b2:
    // [392] phi gfx_init_plane_vertical::bx#2 = gfx_init_plane_vertical::bx#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#0] -- register_copy 
    // [392] phi gfx_init_plane_vertical::gfxb#2 = gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_vertical::@2
  __b2:
    // [393] *gfx_init_plane_vertical::gfxb#2 = $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
    // [394] gfx_init_plane_vertical::gfxb#1 = ++ gfx_init_plane_vertical::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [395] gfx_init_plane_vertical::bx#1 = ++ gfx_init_plane_vertical::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [396] if(gfx_init_plane_vertical::bx#1!=$28) goto gfx_init_plane_vertical::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_vertical::@3
  __b3:
    // [397] gfx_init_plane_vertical::by#1 = ++ gfx_init_plane_vertical::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [398] if(gfx_init_plane_vertical::by#1!=$c8) goto gfx_init_plane_vertical::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1_from___b3
    // [399] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@4 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_vertical::@4
  __b4:
    // [400] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_vertical::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_vertical::@return
  __breturn:
    // [401] return 
    rts
}
  // gfx_init_plane_horisontal2
// Initialize Plane with Horizontal Stripes every 2 pixels
gfx_init_plane_horisontal2: {
    .const gfxbCpuBank = PLANE_HORISONTAL2/$4000
    .label gfxa = $d
    .label ay = $15
    // [403] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_horisontal2 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal2:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = gfx_init_plane_horisontal2::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [404] phi from gfx_init_plane_horisontal2 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1]
  __b1_from_gfx_init_plane_horisontal2:
    // [404] phi gfx_init_plane_horisontal2::gfxa#3 = (byte*)$4000 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [404] phi gfx_init_plane_horisontal2::ay#4 = 0 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b1
    // [404] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1]
  __b1_from___b3:
    // [404] phi gfx_init_plane_horisontal2::gfxa#3 = gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#0] -- register_copy 
    // [404] phi gfx_init_plane_horisontal2::ay#4 = gfx_init_plane_horisontal2::ay#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_horisontal2::@1
  __b1:
    // [405] phi from gfx_init_plane_horisontal2::@1 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2]
  __b2_from___b1:
    // [405] phi gfx_init_plane_horisontal2::ax#2 = 0 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [405] phi gfx_init_plane_horisontal2::gfxa#2 = gfx_init_plane_horisontal2::gfxa#3 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp __b2
    // [405] phi from gfx_init_plane_horisontal2::@2 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2]
  __b2_from___b2:
    // [405] phi gfx_init_plane_horisontal2::ax#2 = gfx_init_plane_horisontal2::ax#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#0] -- register_copy 
    // [405] phi gfx_init_plane_horisontal2::gfxa#2 = gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_horisontal2::@2
  __b2:
    // [406] gfx_init_plane_horisontal2::$2 = gfx_init_plane_horisontal2::ay#4 >> 1 -- vbuaa=vbuz1_ror_1 
    lda.z ay
    lsr
    // [407] gfx_init_plane_horisontal2::row#0 = gfx_init_plane_horisontal2::$2 & 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
    // [408] *gfx_init_plane_horisontal2::gfxa#2 = gfx_init_plane_horisontal2::row_bitmask[gfx_init_plane_horisontal2::row#0] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // [409] gfx_init_plane_horisontal2::gfxa#1 = ++ gfx_init_plane_horisontal2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [410] gfx_init_plane_horisontal2::ax#1 = ++ gfx_init_plane_horisontal2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [411] if(gfx_init_plane_horisontal2::ax#1!=$28) goto gfx_init_plane_horisontal2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_horisontal2::@3
  __b3:
    // [412] gfx_init_plane_horisontal2::ay#1 = ++ gfx_init_plane_horisontal2::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [413] if(gfx_init_plane_horisontal2::ay#1!=$c8) goto gfx_init_plane_horisontal2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1_from___b3
    // [414] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@4 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_horisontal2::@4
  __b4:
    // [415] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_horisontal2::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_horisontal2::@return
  __breturn:
    // [416] return 
    rts
  .segment Data
    row_bitmask: .byte 0, $55, $aa, $ff
}
.segment Code
  // gfx_init_plane_vertical2
// Initialize Plane with Vertical Stripes every 2 pixels
gfx_init_plane_vertical2: {
    // [418] call gfx_init_plane_fill 
    // [719] phi from gfx_init_plane_vertical2 to gfx_init_plane_fill [phi:gfx_init_plane_vertical2->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_vertical2:
    // [719] phi gfx_init_plane_fill::fill#6 = $1b [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$1b
    sta.z gfx_init_plane_fill.fill
    // [719] phi gfx_init_plane_fill::plane_addr#3 = PLANE_VERTICAL2 [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_vertical2::@return
  __breturn:
    // [419] return 
    rts
}
  // gfx_init_plane_blank
// Initialize Plane with blank pixels
gfx_init_plane_blank: {
    // [421] call gfx_init_plane_fill 
    // [719] phi from gfx_init_plane_blank to gfx_init_plane_fill [phi:gfx_init_plane_blank->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_blank:
    // [719] phi gfx_init_plane_fill::fill#6 = 0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z gfx_init_plane_fill.fill
    // [719] phi gfx_init_plane_fill::plane_addr#3 = PLANE_BLANK [phi:gfx_init_plane_blank->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_blank::@return
  __breturn:
    // [422] return 
    rts
}
  // gfx_init_plane_full
// Initialize Plane with all pixels
gfx_init_plane_full: {
    // [424] call gfx_init_plane_fill 
    // [719] phi from gfx_init_plane_full to gfx_init_plane_fill [phi:gfx_init_plane_full->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_full:
    // [719] phi gfx_init_plane_fill::fill#6 = $ff [phi:gfx_init_plane_full->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z gfx_init_plane_fill.fill
    // [719] phi gfx_init_plane_fill::plane_addr#3 = PLANE_FULL [phi:gfx_init_plane_full->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_full::@return
  __breturn:
    // [425] return 
    rts
}
  // print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
// print_set_screen(byte* zp($f) screen)
print_set_screen: {
    .label screen = $f
    // [427] print_screen#0 = print_set_screen::screen#2
    jmp __breturn
    // print_set_screen::@return
  __breturn:
    // [428] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [429] memset::str#0 = (void*)print_screen#0 -- pvoz1=pvoz2 
    lda.z print_screen
    sta.z memset.str
    lda.z print_screen+1
    sta.z memset.str+1
    // [430] call memset 
    // [740] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    // [740] phi memset::c#5 = ' ' [phi:print_cls->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [740] phi memset::str#4 = memset::str#0 [phi:print_cls->memset#1] -- register_copy 
    // [740] phi memset::num#3 = $3e8 [phi:print_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [431] return 
    rts
}
  // print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zp($b) str)
print_str_lines: {
    .label str = $b
    // [433] print_char_cursor#72 = print_screen#0 -- pbuz1=pbuz2 
    lda.z print_screen
    sta.z print_char_cursor
    lda.z print_screen+1
    sta.z print_char_cursor+1
    // [434] phi from print_str_lines print_str_lines::@6 to print_str_lines::@1 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1]
  __b1_from_print_str_lines:
  __b1_from___b6:
    // [434] phi print_line_cursor#1 = print_screen#0 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#0] -- register_copy 
    // [434] phi print_char_cursor#2 = print_char_cursor#72 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#1] -- register_copy 
    // [434] phi print_str_lines::str#3 = print_str_lines::str#5 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#2] -- register_copy 
    jmp __b1
    // print_str_lines::@1
  __b1:
    // [435] if(0!=*print_str_lines::str#3) goto print_str_lines::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2_from___b1
    jmp __breturn
    // print_str_lines::@return
  __breturn:
    // [436] return 
    rts
    // [437] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [437] phi print_char_cursor#43 = print_char_cursor#2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
    // [437] phi print_str_lines::str#4 = print_str_lines::str#3 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    jmp __b2
    // print_str_lines::@2
  __b2:
    // [438] print_str_lines::ch#0 = *print_str_lines::str#4 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [439] print_str_lines::str#0 = ++ print_str_lines::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [440] if(0==print_str_lines::ch#0) goto print_str_lines::@3 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // print_str_lines::@4
  __b4:
    // [441] print_char::ch#0 = print_str_lines::ch#0
    // [442] call print_char 
    jsr print_char
    // [443] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [443] phi print_char_cursor#44 = print_char_cursor#43 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    jmp __b3
    // print_str_lines::@3
  __b3:
    // [444] if(0!=print_str_lines::ch#0) goto print_str_lines::@2 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b2_from___b3
    // [445] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
  __b5_from___b3:
    jmp __b5
    // print_str_lines::@5
  __b5:
    // [446] call print_ln 
    // [752] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b6
    // print_str_lines::@6
  __b6:
    // [447] print_char_cursor#73 = print_line_cursor#2 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    jmp __b1_from___b6
}
  // form_set_screen
// Set the screen to use for the form.
// screen is the start address of the screen to use
form_set_screen: {
    .label line = $f
    // [449] phi from form_set_screen to form_set_screen::@1 [phi:form_set_screen->form_set_screen::@1]
  __b1_from_form_set_screen:
    // [449] phi form_set_screen::y#2 = 0 [phi:form_set_screen->form_set_screen::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [449] phi form_set_screen::line#2 = FORM_SCREEN [phi:form_set_screen->form_set_screen::@1#1] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z line
    lda #>FORM_SCREEN
    sta.z line+1
    jmp __b1
    // [449] phi from form_set_screen::@1 to form_set_screen::@1 [phi:form_set_screen::@1->form_set_screen::@1]
  __b1_from___b1:
    // [449] phi form_set_screen::y#2 = form_set_screen::y#1 [phi:form_set_screen::@1->form_set_screen::@1#0] -- register_copy 
    // [449] phi form_set_screen::line#2 = form_set_screen::line#1 [phi:form_set_screen::@1->form_set_screen::@1#1] -- register_copy 
    jmp __b1
    // form_set_screen::@1
  __b1:
    // [450] form_set_screen::$0 = < form_set_screen::line#2 -- vbuaa=_lo_pbuz1 
    lda.z line
    // [451] form_line_lo[form_set_screen::y#2] = form_set_screen::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_lo,x
    // [452] form_set_screen::$1 = > form_set_screen::line#2 -- vbuaa=_hi_pbuz1 
    lda.z line+1
    // [453] form_line_hi[form_set_screen::y#2] = form_set_screen::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_hi,x
    // [454] form_set_screen::line#1 = form_set_screen::line#2 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [455] form_set_screen::y#1 = ++ form_set_screen::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [456] if(form_set_screen::y#1!=$19) goto form_set_screen::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne __b1_from___b1
    jmp __breturn
    // form_set_screen::@return
  __breturn:
    // [457] return 
    rts
}
  // form_render_values
// Render all form values from the form_fields_val array
form_render_values: {
    // [459] phi from form_render_values to form_render_values::@1 [phi:form_render_values->form_render_values::@1]
  __b1_from_form_render_values:
    // [459] phi form_render_values::idx#2 = 0 [phi:form_render_values->form_render_values::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // form_render_values::@1
  __b1:
    // [460] if(form_render_values::idx#2<form_fields_cnt) goto form_render_values::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #form_fields_cnt
    bcc __b2
    jmp __breturn
    // form_render_values::@return
  __breturn:
    // [461] return 
    rts
    // form_render_values::@2
  __b2:
    // [462] form_field_ptr::field_idx#0 = form_render_values::idx#2
    // [463] call form_field_ptr 
    // [757] phi from form_render_values::@2 to form_field_ptr [phi:form_render_values::@2->form_field_ptr]
  form_field_ptr_from___b2:
    // [757] phi form_field_ptr::field_idx#2 = form_field_ptr::field_idx#0 [phi:form_render_values::@2->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    jmp __b3
    // form_render_values::@3
  __b3:
    // [464] ((byte*)form_field_ptr::line#0)[form_field_ptr::x#0] = print_hextab[form_fields_val[form_render_values::idx#2]] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuxx) 
    ldy form_fields_val,x
    lda print_hextab,y
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [465] form_render_values::idx#1 = ++ form_render_values::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [459] phi from form_render_values::@3 to form_render_values::@1 [phi:form_render_values::@3->form_render_values::@1]
  __b1_from___b3:
    // [459] phi form_render_values::idx#2 = form_render_values::idx#1 [phi:form_render_values::@3->form_render_values::@1#0] -- register_copy 
    jmp __b1
}
  // render_preset_name
// Render form preset name in the form
// idx is the ID of the preset
// render_preset_name(byte register(A) idx)
render_preset_name: {
    .label name = $b
    // [467] if(render_preset_name::idx#10==0) goto render_preset_name::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from_render_preset_name
    jmp __b3
    // render_preset_name::@3
  __b3:
    // [468] if(render_preset_name::idx#10==1) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b2_from___b3
    jmp __b4
    // render_preset_name::@4
  __b4:
    // [469] if(render_preset_name::idx#10==2) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b2_from___b4
    jmp __b5
    // render_preset_name::@5
  __b5:
    // [470] if(render_preset_name::idx#10==3) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b2_from___b5
    jmp __b6
    // render_preset_name::@6
  __b6:
    // [471] if(render_preset_name::idx#10==4) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b2_from___b6
    jmp __b7
    // render_preset_name::@7
  __b7:
    // [472] if(render_preset_name::idx#10==5) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __b2_from___b7
    jmp __b8
    // render_preset_name::@8
  __b8:
    // [473] if(render_preset_name::idx#10==6) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __b2_from___b8
    jmp __b9
    // render_preset_name::@9
  __b9:
    // [474] if(render_preset_name::idx#10==7) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __b2_from___b9
    jmp __b10
    // render_preset_name::@10
  __b10:
    // [475] if(render_preset_name::idx#10==8) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __b2_from___b10
    jmp __b11
    // render_preset_name::@11
  __b11:
    // [476] if(render_preset_name::idx#10==9) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b2_from___b11
    jmp __b12
    // render_preset_name::@12
  __b12:
    // [477] if(render_preset_name::idx#10==$a) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1_from___b12
    // [479] phi from render_preset_name render_preset_name::@12 to render_preset_name::@2 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2]
  __b2_from_render_preset_name:
  __b2_from___b12:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_1
    sta.z name
    lda #>name_1
    sta.z name+1
    jmp __b2
    // [478] phi from render_preset_name::@12 to render_preset_name::@1 [phi:render_preset_name::@12->render_preset_name::@1]
  __b1_from___b12:
    jmp __b1
    // render_preset_name::@1
  __b1:
    // [479] phi from render_preset_name::@1 to render_preset_name::@2 [phi:render_preset_name::@1->render_preset_name::@2]
  __b2_from___b1:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#11 [phi:render_preset_name::@1->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_11
    sta.z name
    lda #>name_11
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@10 to render_preset_name::@2 [phi:render_preset_name::@10->render_preset_name::@2]
  __b2_from___b10:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#9 [phi:render_preset_name::@10->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_9
    sta.z name
    lda #>name_9
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@11 to render_preset_name::@2 [phi:render_preset_name::@11->render_preset_name::@2]
  __b2_from___b11:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#10 [phi:render_preset_name::@11->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_10
    sta.z name
    lda #>name_10
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@3 to render_preset_name::@2 [phi:render_preset_name::@3->render_preset_name::@2]
  __b2_from___b3:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#2 [phi:render_preset_name::@3->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_2
    sta.z name
    lda #>name_2
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@4 to render_preset_name::@2 [phi:render_preset_name::@4->render_preset_name::@2]
  __b2_from___b4:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#3 [phi:render_preset_name::@4->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_3
    sta.z name
    lda #>name_3
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@5 to render_preset_name::@2 [phi:render_preset_name::@5->render_preset_name::@2]
  __b2_from___b5:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#4 [phi:render_preset_name::@5->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_4
    sta.z name
    lda #>name_4
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@6 to render_preset_name::@2 [phi:render_preset_name::@6->render_preset_name::@2]
  __b2_from___b6:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#5 [phi:render_preset_name::@6->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_5
    sta.z name
    lda #>name_5
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@7 to render_preset_name::@2 [phi:render_preset_name::@7->render_preset_name::@2]
  __b2_from___b7:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#6 [phi:render_preset_name::@7->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_6
    sta.z name
    lda #>name_6
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@8 to render_preset_name::@2 [phi:render_preset_name::@8->render_preset_name::@2]
  __b2_from___b8:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#7 [phi:render_preset_name::@8->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_7
    sta.z name
    lda #>name_7
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@9 to render_preset_name::@2 [phi:render_preset_name::@9->render_preset_name::@2]
  __b2_from___b9:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#8 [phi:render_preset_name::@9->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_8
    sta.z name
    lda #>name_8
    sta.z name+1
    jmp __b2
    // render_preset_name::@2
  __b2:
    // [480] print_str_at::str#1 = render_preset_name::name#13
    // [481] call print_str_at 
  // Render it
    // [763] phi from render_preset_name::@2 to print_str_at [phi:render_preset_name::@2->print_str_at]
  print_str_at_from___b2:
    jsr print_str_at
    jmp __breturn
    // render_preset_name::@return
  __breturn:
    // [482] return 
    rts
  .segment Data
    name_1: .text "Standard Charset              "
    .byte 0
    name_2: .text "Extended Color Charset        "
    .byte 0
    name_3: .text "Standard Bitmap               "
    .byte 0
    name_4: .text "Multicolor Bitmap             "
    .byte 0
    name_5: .text "Hicolor Charset               "
    .byte 0
    name_6: .text "Hicolor Extended Color Charset"
    .byte 0
    name_7: .text "Twoplane Bitmap               "
    .byte 0
    name_8: .text "Chunky 8bpp                   "
    .byte 0
    name_9: .text "Sixs Fred                     "
    .byte 0
    name_10: .text "Sixs Fred 2                   "
    .byte 0
    name_11: .text "8bpp Pixel Cell               "
    .byte 0
}
.segment Code
  // form_control
// Reads keyboard and allows the user to navigate and change the fields of the form
// Returns 0 if space is not pressed, non-0 if space is pressed
form_control: {
    .label field = $1d
    // [483] form_field_ptr::field_idx#1 = form_field_idx#30 -- vbuxx=vbuz1 
    ldx.z form_field_idx
    // [484] call form_field_ptr 
    // [757] phi from form_control to form_field_ptr [phi:form_control->form_field_ptr]
  form_field_ptr_from_form_control:
    // [757] phi form_field_ptr::field_idx#2 = form_field_ptr::field_idx#1 [phi:form_control->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    // [485] form_field_ptr::return#3 = form_field_ptr::return#0
    jmp __b18
    // form_control::@18
  __b18:
    // [486] form_control::field#0 = form_field_ptr::return#3
    // [487] form_cursor_count#4 = -- form_cursor_count#23 -- vbsz1=_dec_vbsz1 
    dec.z form_cursor_count
    // [488] if(form_cursor_count#4>=0) goto form_control::@21 -- vbsz1_ge_0_then_la1 
    lda.z form_cursor_count
    cmp #0
    bpl __b21_from___b18
    // [490] phi from form_control::@18 to form_control::@1 [phi:form_control::@18->form_control::@1]
  __b1_from___b18:
    // [490] phi form_cursor_count#16 = FORM_CURSOR_BLINK [phi:form_control::@18->form_control::@1#0] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK
    sta.z form_cursor_count
    jmp __b1
    // [489] phi from form_control::@18 to form_control::@21 [phi:form_control::@18->form_control::@21]
  __b21_from___b18:
    jmp __b21
    // form_control::@21
  __b21:
    // [490] phi from form_control::@21 to form_control::@1 [phi:form_control::@21->form_control::@1]
  __b1_from___b21:
    // [490] phi form_cursor_count#16 = form_cursor_count#4 [phi:form_control::@21->form_control::@1#0] -- register_copy 
    jmp __b1
    // form_control::@1
  __b1:
    // [491] if(form_cursor_count#16<FORM_CURSOR_BLINK/2) goto form_control::@2 -- vbsz1_lt_vbsc1_then_la1 
    lda.z form_cursor_count
    sec
    sbc #FORM_CURSOR_BLINK/2
    bvc !+
    eor #$80
  !:
    bmi __b2
    jmp __b7
    // form_control::@7
  __b7:
    // [492] form_control::$12 = *form_control::field#0 & $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    // [493] *form_control::field#0 = form_control::$12 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (field),y
    // [494] phi from form_control::@2 form_control::@7 to form_control::@3 [phi:form_control::@2/form_control::@7->form_control::@3]
  __b3_from___b2:
  __b3_from___b7:
    jmp __b3
    // form_control::@3
  __b3:
    // [495] call keyboard_event_scan 
  // Scan the keyboard
    // [578] phi from form_control::@3 to keyboard_event_scan [phi:form_control::@3->keyboard_event_scan]
  keyboard_event_scan_from___b3:
    // [578] phi keyboard_events_size#98 = keyboard_events_size#49 [phi:form_control::@3->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [496] phi from form_control::@3 to form_control::@19 [phi:form_control::@3->form_control::@19]
  __b19_from___b3:
    jmp __b19
    // form_control::@19
  __b19:
    // [497] call keyboard_event_get 
    jsr keyboard_event_get
    // [498] keyboard_event_get::return#4 = keyboard_event_get::return#2
    jmp __b20
    // form_control::@20
  __b20:
    // [499] form_control::key_event#0 = keyboard_event_get::return#4
    // [500] if(form_control::key_event#0!=KEY_CRSR_DOWN) goto form_control::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_DOWN
    bne __b4
    jmp __b8
    // form_control::@8
  __b8:
    // [501] form_control::$14 = *form_control::field#0 & $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    // [502] *form_control::field#0 = form_control::$14 -- _deref_pbuz1=vbuaa 
    // Unblink the cursor
    ldy #0
    sta (field),y
    // [503] form_control::$15 = keyboard_modifiers#22 & KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // [504] if(form_control::$15==0) goto form_control::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b13
    jmp __b9
    // form_control::@9
  __b9:
    // [505] form_field_idx#5 = -- form_field_idx#30 -- vbuz1=_dec_vbuz1 
    dec.z form_field_idx
    // [506] if(form_field_idx#5!=$ff) goto form_control::@22 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z form_field_idx
    bne __b22_from___b9
    // [508] phi from form_control::@9 to form_control::@14 [phi:form_control::@9->form_control::@14]
  __b14_from___b9:
    // [508] phi form_field_idx#33 = form_fields_cnt-1 [phi:form_control::@9->form_control::@14#0] -- vbuz1=vbuc1 
    lda #form_fields_cnt-1
    sta.z form_field_idx
    jmp __b14
    // [507] phi from form_control::@9 to form_control::@22 [phi:form_control::@9->form_control::@22]
  __b22_from___b9:
    jmp __b22
    // form_control::@22
  __b22:
    // [508] phi from form_control::@22 form_control::@23 to form_control::@14 [phi:form_control::@22/form_control::@23->form_control::@14]
  __b14_from___b22:
  __b14_from___b23:
    // [508] phi form_field_idx#33 = form_field_idx#5 [phi:form_control::@22/form_control::@23->form_control::@14#0] -- register_copy 
    jmp __b14
    // form_control::@14
  __b14:
    // [509] phi from form_control::@14 to form_control::@return [phi:form_control::@14->form_control::@return]
  __breturn_from___b14:
    // [509] phi form_field_idx#19 = form_field_idx#33 [phi:form_control::@14->form_control::@return#0] -- register_copy 
    // [509] phi form_cursor_count#17 = FORM_CURSOR_BLINK/2 [phi:form_control::@14->form_control::@return#1] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    // [509] phi form_control::return#2 = 0 [phi:form_control::@14->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __breturn
    // form_control::@return
  __breturn:
    // [510] return 
    rts
    // form_control::@13
  __b13:
    // [511] form_field_idx#4 = ++ form_field_idx#30 -- vbuz1=_inc_vbuz1 
    inc.z form_field_idx
    // [512] if(form_field_idx#4!=form_fields_cnt) goto form_control::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp.z form_field_idx
    bne __b23_from___b13
    // [508] phi from form_control::@13 to form_control::@14 [phi:form_control::@13->form_control::@14]
  __b14_from___b13:
    // [508] phi form_field_idx#33 = 0 [phi:form_control::@13->form_control::@14#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    jmp __b14
    // [513] phi from form_control::@13 to form_control::@23 [phi:form_control::@13->form_control::@23]
  __b23_from___b13:
    jmp __b23
    // form_control::@23
  __b23:
    jmp __b14_from___b23
    // form_control::@4
  __b4:
    // [514] if(form_control::key_event#0!=KEY_CRSR_RIGHT) goto form_control::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_RIGHT
    bne __b5
    jmp __b10
    // form_control::@10
  __b10:
    // [515] form_control::$22 = keyboard_modifiers#22 & KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // [516] if(form_control::$22==0) goto form_control::@15 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b15
    jmp __b11
    // form_control::@11
  __b11:
    // [517] form_fields_val[form_field_idx#30] = -- form_fields_val[form_field_idx#30] -- pbuc1_derefidx_vbuz1=_dec_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    dec form_fields_val,x
    // [518] if(form_fields_val[form_field_idx#30]!=$ff) goto form_control::@16 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #$ff
    ldy.z form_field_idx
    cmp form_fields_val,y
    bne __b16
    jmp __b12
    // form_control::@12
  __b12:
    // [519] form_fields_val[form_field_idx#30] = form_fields_max[form_field_idx#30] -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z form_field_idx
    lda form_fields_max,y
    sta form_fields_val,y
    jmp __b16
    // form_control::@16
  __b16:
    // [520] *form_control::field#0 = print_hextab[form_fields_val[form_field_idx#30]] -- _deref_pbuz1=pbuc1_derefidx_(pbuc2_derefidx_vbuz2) 
    // Render field value
    ldx.z form_field_idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy #0
    sta (field),y
    // [509] phi from form_control::@16 form_control::@6 to form_control::@return [phi:form_control::@16/form_control::@6->form_control::@return]
  __breturn_from___b16:
  __breturn_from___b6:
    // [509] phi form_field_idx#19 = form_field_idx#30 [phi:form_control::@16/form_control::@6->form_control::@return#0] -- register_copy 
    // [509] phi form_cursor_count#17 = form_cursor_count#16 [phi:form_control::@16/form_control::@6->form_control::@return#1] -- register_copy 
    // [509] phi form_control::return#2 = 0 [phi:form_control::@16/form_control::@6->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __breturn
    // form_control::@15
  __b15:
    // [521] form_fields_val[form_field_idx#30] = ++ form_fields_val[form_field_idx#30] -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    inc form_fields_val,x
    // [522] if(form_fields_val[form_field_idx#30]<=form_fields_max[form_field_idx#30]) goto form_control::@16 -- pbuc1_derefidx_vbuz1_le_pbuc2_derefidx_vbuz1_then_la1 
    ldy.z form_field_idx
    lda form_fields_max,y
    cmp form_fields_val,y
    bcs __b16
    jmp __b17
    // form_control::@17
  __b17:
    // [523] form_fields_val[form_field_idx#30] = 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z form_field_idx
    sta form_fields_val,y
    jmp __b16
    // form_control::@5
  __b5:
    // [524] if(form_control::key_event#0!=KEY_SPACE) goto form_control::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne __b6_from___b5
    // [509] phi from form_control::@5 to form_control::@return [phi:form_control::@5->form_control::@return]
  __breturn_from___b5:
    // [509] phi form_field_idx#19 = form_field_idx#30 [phi:form_control::@5->form_control::@return#0] -- register_copy 
    // [509] phi form_cursor_count#17 = form_cursor_count#16 [phi:form_control::@5->form_control::@return#1] -- register_copy 
    // [509] phi form_control::return#2 = $ff [phi:form_control::@5->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #$ff
    jmp __breturn
    // [525] phi from form_control::@5 to form_control::@6 [phi:form_control::@5->form_control::@6]
  __b6_from___b5:
    jmp __b6
    // form_control::@6
  __b6:
    jmp __breturn_from___b6
    // form_control::@2
  __b2:
    // [526] form_control::$13 = *form_control::field#0 | $80 -- vbuaa=_deref_pbuz1_bor_vbuc1 
    lda #$80
    ldy #0
    ora (field),y
    // [527] *form_control::field#0 = form_control::$13 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (field),y
    jmp __b3_from___b2
}
  // apply_preset
// Apply a form value preset to the form values
// idx is the ID of the preset
// apply_preset(byte register(A) idx)
apply_preset: {
    .label preset = $d
    // [528] if(apply_preset::idx#0==0) goto apply_preset::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from_apply_preset
    jmp __b3
    // apply_preset::@3
  __b3:
    // [529] if(apply_preset::idx#0==1) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b2_from___b3
    jmp __b4
    // apply_preset::@4
  __b4:
    // [530] if(apply_preset::idx#0==2) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b2_from___b4
    jmp __b5
    // apply_preset::@5
  __b5:
    // [531] if(apply_preset::idx#0==3) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b2_from___b5
    jmp __b6
    // apply_preset::@6
  __b6:
    // [532] if(apply_preset::idx#0==4) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b2_from___b6
    jmp __b7
    // apply_preset::@7
  __b7:
    // [533] if(apply_preset::idx#0==5) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __b2_from___b7
    jmp __b8
    // apply_preset::@8
  __b8:
    // [534] if(apply_preset::idx#0==6) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __b2_from___b8
    jmp __b9
    // apply_preset::@9
  __b9:
    // [535] if(apply_preset::idx#0==7) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __b2_from___b9
    jmp __b10
    // apply_preset::@10
  __b10:
    // [536] if(apply_preset::idx#0==8) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __b2_from___b10
    jmp __b11
    // apply_preset::@11
  __b11:
    // [537] if(apply_preset::idx#0==9) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b2_from___b11
    jmp __b12
    // apply_preset::@12
  __b12:
    // [538] if(apply_preset::idx#0==$a) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1_from___b12
    // [540] phi from apply_preset apply_preset::@12 to apply_preset::@2 [phi:apply_preset/apply_preset::@12->apply_preset::@2]
  __b2_from_apply_preset:
  __b2_from___b12:
    // [540] phi apply_preset::preset#15 = preset_stdchar [phi:apply_preset/apply_preset::@12->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdchar
    sta.z preset
    lda #>preset_stdchar
    sta.z preset+1
    jmp __b2
    // [539] phi from apply_preset::@12 to apply_preset::@1 [phi:apply_preset::@12->apply_preset::@1]
  __b1_from___b12:
    jmp __b1
    // apply_preset::@1
  __b1:
    // [540] phi from apply_preset::@1 to apply_preset::@2 [phi:apply_preset::@1->apply_preset::@2]
  __b2_from___b1:
    // [540] phi apply_preset::preset#15 = preset_8bpppixelcell [phi:apply_preset::@1->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_8bpppixelcell
    sta.z preset
    lda #>preset_8bpppixelcell
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@10 to apply_preset::@2 [phi:apply_preset::@10->apply_preset::@2]
  __b2_from___b10:
    // [540] phi apply_preset::preset#15 = preset_sixsfred [phi:apply_preset::@10->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred
    sta.z preset
    lda #>preset_sixsfred
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@11 to apply_preset::@2 [phi:apply_preset::@11->apply_preset::@2]
  __b2_from___b11:
    // [540] phi apply_preset::preset#15 = preset_sixsfred2 [phi:apply_preset::@11->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred2
    sta.z preset
    lda #>preset_sixsfred2
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@3 to apply_preset::@2 [phi:apply_preset::@3->apply_preset::@2]
  __b2_from___b3:
    // [540] phi apply_preset::preset#15 = preset_ecmchar [phi:apply_preset::@3->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_ecmchar
    sta.z preset
    lda #>preset_ecmchar
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@4 to apply_preset::@2 [phi:apply_preset::@4->apply_preset::@2]
  __b2_from___b4:
    // [540] phi apply_preset::preset#15 = preset_stdbm [phi:apply_preset::@4->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdbm
    sta.z preset
    lda #>preset_stdbm
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@5 to apply_preset::@2 [phi:apply_preset::@5->apply_preset::@2]
  __b2_from___b5:
    // [540] phi apply_preset::preset#15 = preset_mcbm [phi:apply_preset::@5->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_mcbm
    sta.z preset
    lda #>preset_mcbm
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@6 to apply_preset::@2 [phi:apply_preset::@6->apply_preset::@2]
  __b2_from___b6:
    // [540] phi apply_preset::preset#15 = preset_hi_stdchar [phi:apply_preset::@6->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_stdchar
    sta.z preset
    lda #>preset_hi_stdchar
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@7 to apply_preset::@2 [phi:apply_preset::@7->apply_preset::@2]
  __b2_from___b7:
    // [540] phi apply_preset::preset#15 = preset_hi_ecmchar [phi:apply_preset::@7->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_ecmchar
    sta.z preset
    lda #>preset_hi_ecmchar
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@8 to apply_preset::@2 [phi:apply_preset::@8->apply_preset::@2]
  __b2_from___b8:
    // [540] phi apply_preset::preset#15 = preset_twoplane [phi:apply_preset::@8->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_twoplane
    sta.z preset
    lda #>preset_twoplane
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@9 to apply_preset::@2 [phi:apply_preset::@9->apply_preset::@2]
  __b2_from___b9:
    // [540] phi apply_preset::preset#15 = preset_chunky [phi:apply_preset::@9->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_chunky
    sta.z preset
    lda #>preset_chunky
    sta.z preset+1
    jmp __b2
    // apply_preset::@2
  __b2:
    // [541] phi from apply_preset::@2 to apply_preset::@13 [phi:apply_preset::@2->apply_preset::@13]
  __b13_from___b2:
    // [541] phi apply_preset::i#2 = 0 [phi:apply_preset::@2->apply_preset::@13#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b13
  // Copy preset values into the fields
    // apply_preset::@13
  __b13:
    // [542] if(apply_preset::i#2!=form_fields_cnt) goto apply_preset::@14 -- vbuyy_neq_vbuc1_then_la1 
    cpy #form_fields_cnt
    bne __b14
    jmp __breturn
    // apply_preset::@return
  __breturn:
    // [543] return 
    rts
    // apply_preset::@14
  __b14:
    // [544] form_fields_val[apply_preset::i#2] = apply_preset::preset#15[apply_preset::i#2] -- pbuc1_derefidx_vbuyy=pbuz1_derefidx_vbuyy 
    lda (preset),y
    sta form_fields_val,y
    // [545] apply_preset::i#1 = ++ apply_preset::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [541] phi from apply_preset::@14 to apply_preset::@13 [phi:apply_preset::@14->apply_preset::@13]
  __b13_from___b14:
    // [541] phi apply_preset::i#2 = apply_preset::i#1 [phi:apply_preset::@14->apply_preset::@13#0] -- register_copy 
    jmp __b13
}
  // get_plane
// Get plane address from a plane index (from the form)
// get_plane(byte register(A) idx)
get_plane: {
    .label return = 5
    // [547] if(get_plane::idx#10==0) goto get_plane::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from_get_plane
    jmp __b2
    // get_plane::@2
  __b2:
    // [548] if(get_plane::idx#10==1) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __breturn_from___b2
    jmp __b3
    // get_plane::@3
  __b3:
    // [549] if(get_plane::idx#10==2) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __breturn_from___b3
    jmp __b4
    // get_plane::@4
  __b4:
    // [550] if(get_plane::idx#10==3) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __breturn_from___b4
    jmp __b5
    // get_plane::@5
  __b5:
    // [551] if(get_plane::idx#10==4) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __breturn_from___b5
    jmp __b6
    // get_plane::@6
  __b6:
    // [552] if(get_plane::idx#10==5) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __breturn_from___b6
    jmp __b7
    // get_plane::@7
  __b7:
    // [553] if(get_plane::idx#10==6) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __breturn_from___b7
    jmp __b8
    // get_plane::@8
  __b8:
    // [554] if(get_plane::idx#10==7) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __breturn_from___b8
    jmp __b9
    // get_plane::@9
  __b9:
    // [555] if(get_plane::idx#10==8) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __breturn_from___b9
    jmp __b10
    // get_plane::@10
  __b10:
    // [556] if(get_plane::idx#10==9) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __breturn_from___b10
    jmp __b11
    // get_plane::@11
  __b11:
    // [557] if(get_plane::idx#10==$a) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __breturn_from___b11
    jmp __b12
    // get_plane::@12
  __b12:
    // [558] if(get_plane::idx#10==$b) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$b
    beq __breturn_from___b12
    jmp __b13
    // get_plane::@13
  __b13:
    // [559] if(get_plane::idx#10==$c) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$c
    beq __breturn_from___b13
    jmp __b14
    // get_plane::@14
  __b14:
    // [560] if(get_plane::idx#10!=$d) goto get_plane::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$d
    bne __b1_from___b14
    // [562] phi from get_plane::@14 to get_plane::@return [phi:get_plane::@14->get_plane::@return]
  __breturn_from___b14:
    // [562] phi get_plane::return#14 = PLANE_FULL [phi:get_plane::@14->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z return
    lda #>PLANE_FULL
    sta.z return+1
    lda #<PLANE_FULL>>$10
    sta.z return+2
    lda #>PLANE_FULL>>$10
    sta.z return+3
    jmp __breturn
    // [561] phi from get_plane::@14 to get_plane::@1 [phi:get_plane::@14->get_plane::@1]
  __b1_from___b14:
    jmp __b1
    // get_plane::@1
  __b1:
    // [562] phi from get_plane get_plane::@1 to get_plane::@return [phi:get_plane/get_plane::@1->get_plane::@return]
  __breturn_from_get_plane:
  __breturn_from___b1:
    // [562] phi get_plane::return#14 = (dword)VICII_SCREEN0 [phi:get_plane/get_plane::@1->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_SCREEN0
    sta.z return
    lda #>VICII_SCREEN0
    sta.z return+1
    lda #<VICII_SCREEN0>>$10
    sta.z return+2
    lda #>VICII_SCREEN0>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@10 to get_plane::@return [phi:get_plane::@10->get_plane::@return]
  __breturn_from___b10:
    // [562] phi get_plane::return#14 = PLANE_HORISONTAL2 [phi:get_plane::@10->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL2
    sta.z return
    lda #>PLANE_HORISONTAL2
    sta.z return+1
    lda #<PLANE_HORISONTAL2>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL2>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@11 to get_plane::@return [phi:get_plane::@11->get_plane::@return]
  __breturn_from___b11:
    // [562] phi get_plane::return#14 = PLANE_VERTICAL2 [phi:get_plane::@11->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z return
    lda #>PLANE_VERTICAL2
    sta.z return+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@12 to get_plane::@return [phi:get_plane::@12->get_plane::@return]
  __breturn_from___b12:
    // [562] phi get_plane::return#14 = PLANE_CHARSET8 [phi:get_plane::@12->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_CHARSET8
    sta.z return
    lda #>PLANE_CHARSET8
    sta.z return+1
    lda #<PLANE_CHARSET8>>$10
    sta.z return+2
    lda #>PLANE_CHARSET8>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@13 to get_plane::@return [phi:get_plane::@13->get_plane::@return]
  __breturn_from___b13:
    // [562] phi get_plane::return#14 = PLANE_BLANK [phi:get_plane::@13->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z return
    lda #>PLANE_BLANK
    sta.z return+1
    lda #<PLANE_BLANK>>$10
    sta.z return+2
    lda #>PLANE_BLANK>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@2 to get_plane::@return [phi:get_plane::@2->get_plane::@return]
  __breturn_from___b2:
    // [562] phi get_plane::return#14 = (dword)VICII_SCREEN1 [phi:get_plane::@2->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_SCREEN1
    sta.z return
    lda #>VICII_SCREEN1
    sta.z return+1
    lda #<VICII_SCREEN1>>$10
    sta.z return+2
    lda #>VICII_SCREEN1>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@3 to get_plane::@return [phi:get_plane::@3->get_plane::@return]
  __breturn_from___b3:
    // [562] phi get_plane::return#14 = (dword)VICII_SCREEN2 [phi:get_plane::@3->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_SCREEN2
    sta.z return
    lda #>VICII_SCREEN2
    sta.z return+1
    lda #<VICII_SCREEN2>>$10
    sta.z return+2
    lda #>VICII_SCREEN2>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@4 to get_plane::@return [phi:get_plane::@4->get_plane::@return]
  __breturn_from___b4:
    // [562] phi get_plane::return#14 = (dword)VICII_SCREEN3 [phi:get_plane::@4->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_SCREEN3
    sta.z return
    lda #>VICII_SCREEN3
    sta.z return+1
    lda #<VICII_SCREEN3>>$10
    sta.z return+2
    lda #>VICII_SCREEN3>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@5 to get_plane::@return [phi:get_plane::@5->get_plane::@return]
  __breturn_from___b5:
    // [562] phi get_plane::return#14 = (dword)VICII_BITMAP [phi:get_plane::@5->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_BITMAP
    sta.z return
    lda #>VICII_BITMAP
    sta.z return+1
    lda #<VICII_BITMAP>>$10
    sta.z return+2
    lda #>VICII_BITMAP>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@6 to get_plane::@return [phi:get_plane::@6->get_plane::@return]
  __breturn_from___b6:
    // [562] phi get_plane::return#14 = (dword)VICII_CHARSET_ROM [phi:get_plane::@6->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_CHARSET_ROM
    sta.z return
    lda #>VICII_CHARSET_ROM
    sta.z return+1
    lda #<VICII_CHARSET_ROM>>$10
    sta.z return+2
    lda #>VICII_CHARSET_ROM>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@7 to get_plane::@return [phi:get_plane::@7->get_plane::@return]
  __breturn_from___b7:
    // [562] phi get_plane::return#14 = PLANE_8BPP_CHUNKY [phi:get_plane::@7->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_8BPP_CHUNKY
    sta.z return
    lda #>PLANE_8BPP_CHUNKY
    sta.z return+1
    lda #<PLANE_8BPP_CHUNKY>>$10
    sta.z return+2
    lda #>PLANE_8BPP_CHUNKY>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@8 to get_plane::@return [phi:get_plane::@8->get_plane::@return]
  __breturn_from___b8:
    // [562] phi get_plane::return#14 = PLANE_HORISONTAL [phi:get_plane::@8->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL
    sta.z return
    lda #>PLANE_HORISONTAL
    sta.z return+1
    lda #<PLANE_HORISONTAL>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL>>$10
    sta.z return+3
    jmp __breturn
    // [562] phi from get_plane::@9 to get_plane::@return [phi:get_plane::@9->get_plane::@return]
  __breturn_from___b9:
    // [562] phi get_plane::return#14 = PLANE_VERTICAL [phi:get_plane::@9->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL
    sta.z return
    lda #>PLANE_VERTICAL
    sta.z return+1
    lda #<PLANE_VERTICAL>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL>>$10
    sta.z return+3
    jmp __breturn
    // get_plane::@return
  __breturn:
    // [563] return 
    rts
}
  // get_VICII_screen
// Get the VIC screen address from the screen index
// get_VICII_screen(byte register(A) idx)
get_VICII_screen: {
    .label return = $b
    // [565] if(get_VICII_screen::idx#2==0) goto get_VICII_screen::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from_get_VICII_screen
    jmp __b2
    // get_VICII_screen::@2
  __b2:
    // [566] if(get_VICII_screen::idx#2==1) goto get_VICII_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __breturn_from___b2
    jmp __b3
    // get_VICII_screen::@3
  __b3:
    // [567] if(get_VICII_screen::idx#2==2) goto get_VICII_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __breturn_from___b3
    jmp __b4
    // get_VICII_screen::@4
  __b4:
    // [568] if(get_VICII_screen::idx#2==3) goto get_VICII_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __breturn_from___b4
    jmp __b5
    // get_VICII_screen::@5
  __b5:
    // [569] if(get_VICII_screen::idx#2!=4) goto get_VICII_screen::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
    bne __b1_from___b5
    // [571] phi from get_VICII_screen::@5 to get_VICII_screen::@return [phi:get_VICII_screen::@5->get_VICII_screen::@return]
  __breturn_from___b5:
    // [571] phi get_VICII_screen::return#5 = VICII_SCREEN4 [phi:get_VICII_screen::@5->get_VICII_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN4
    sta.z return
    lda #>VICII_SCREEN4
    sta.z return+1
    jmp __breturn
    // [570] phi from get_VICII_screen::@5 to get_VICII_screen::@1 [phi:get_VICII_screen::@5->get_VICII_screen::@1]
  __b1_from___b5:
    jmp __b1
    // get_VICII_screen::@1
  __b1:
    // [571] phi from get_VICII_screen get_VICII_screen::@1 to get_VICII_screen::@return [phi:get_VICII_screen/get_VICII_screen::@1->get_VICII_screen::@return]
  __breturn_from_get_VICII_screen:
  __breturn_from___b1:
    // [571] phi get_VICII_screen::return#5 = VICII_SCREEN0 [phi:get_VICII_screen/get_VICII_screen::@1->get_VICII_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN0
    sta.z return
    lda #>VICII_SCREEN0
    sta.z return+1
    jmp __breturn
    // [571] phi from get_VICII_screen::@2 to get_VICII_screen::@return [phi:get_VICII_screen::@2->get_VICII_screen::@return]
  __breturn_from___b2:
    // [571] phi get_VICII_screen::return#5 = VICII_SCREEN1 [phi:get_VICII_screen::@2->get_VICII_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN1
    sta.z return
    lda #>VICII_SCREEN1
    sta.z return+1
    jmp __breturn
    // [571] phi from get_VICII_screen::@3 to get_VICII_screen::@return [phi:get_VICII_screen::@3->get_VICII_screen::@return]
  __breturn_from___b3:
    // [571] phi get_VICII_screen::return#5 = VICII_SCREEN2 [phi:get_VICII_screen::@3->get_VICII_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN2
    sta.z return
    lda #>VICII_SCREEN2
    sta.z return+1
    jmp __breturn
    // [571] phi from get_VICII_screen::@4 to get_VICII_screen::@return [phi:get_VICII_screen::@4->get_VICII_screen::@return]
  __breturn_from___b4:
    // [571] phi get_VICII_screen::return#5 = VICII_SCREEN3 [phi:get_VICII_screen::@4->get_VICII_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN3
    sta.z return
    lda #>VICII_SCREEN3
    sta.z return+1
    jmp __breturn
    // get_VICII_screen::@return
  __breturn:
    // [572] return 
    rts
}
  // get_VICII_charset
// Get the VIC charset/bitmap address from the index
// get_VICII_charset(byte register(A) idx)
get_VICII_charset: {
    .label return = $f
    // [573] if(get_VICII_charset::idx#0==0) goto get_VICII_charset::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from_get_VICII_charset
    jmp __b2
    // get_VICII_charset::@2
  __b2:
    // [574] if(get_VICII_charset::idx#0!=1) goto get_VICII_charset::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne __b1_from___b2
    // [576] phi from get_VICII_charset::@2 to get_VICII_charset::@return [phi:get_VICII_charset::@2->get_VICII_charset::@return]
  __breturn_from___b2:
    // [576] phi get_VICII_charset::return#2 = VICII_BITMAP [phi:get_VICII_charset::@2->get_VICII_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_BITMAP
    sta.z return
    lda #>VICII_BITMAP
    sta.z return+1
    jmp __breturn
    // [575] phi from get_VICII_charset::@2 to get_VICII_charset::@1 [phi:get_VICII_charset::@2->get_VICII_charset::@1]
  __b1_from___b2:
    jmp __b1
    // get_VICII_charset::@1
  __b1:
    // [576] phi from get_VICII_charset get_VICII_charset::@1 to get_VICII_charset::@return [phi:get_VICII_charset/get_VICII_charset::@1->get_VICII_charset::@return]
  __breturn_from_get_VICII_charset:
  __breturn_from___b1:
    // [576] phi get_VICII_charset::return#2 = VICII_CHARSET_ROM [phi:get_VICII_charset/get_VICII_charset::@1->get_VICII_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_CHARSET_ROM
    sta.z return
    lda #>VICII_CHARSET_ROM
    sta.z return+1
    jmp __breturn
    // get_VICII_charset::@return
  __breturn:
    // [577] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $25
    .label keycode = 9
    .label row = $16
    // [579] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  __b7_from_keyboard_event_scan:
    // [579] phi keyboard_events_size#107 = keyboard_events_size#98 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [579] phi keyboard_event_scan::keycode#11 = 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [579] phi keyboard_event_scan::row#2 = 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    jmp __b7
    // [579] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  __b7_from___b8:
    // [579] phi keyboard_events_size#107 = keyboard_events_size#100 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [579] phi keyboard_event_scan::keycode#11 = keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [579] phi keyboard_event_scan::row#2 = keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    jmp __b7
    // keyboard_event_scan::@7
  __b7:
    // [580] keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx.z row
    // [581] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [582] keyboard_matrix_read::return#2 = keyboard_matrix_read::return#0
    jmp __b19
    // keyboard_event_scan::@19
  __b19:
    // [583] keyboard_event_scan::row_scan#0 = keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta.z row_scan
    // [584] if(keyboard_event_scan::row_scan#0!=keyboard_scan_values[keyboard_event_scan::row#2]) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z row_scan
    ldy.z row
    cmp keyboard_scan_values,y
    bne __b9_from___b19
    jmp __b16
    // keyboard_event_scan::@16
  __b16:
    // [585] keyboard_event_scan::keycode#1 = keyboard_event_scan::keycode#11 + 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [586] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  __b8_from___b15:
  __b8_from___b16:
    // [586] phi keyboard_events_size#100 = keyboard_events_size#106 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [586] phi keyboard_event_scan::keycode#13 = keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    jmp __b8
    // keyboard_event_scan::@8
  __b8:
    // [587] keyboard_event_scan::row#1 = ++ keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [588] if(keyboard_event_scan::row#1!=8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b7_from___b8
    // [589] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  __b17_from___b8:
    jmp __b17
    // keyboard_event_scan::@17
  __b17:
    // [590] call keyboard_event_pressed 
    // [773] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  keyboard_event_pressed_from___b17:
    // [773] phi keyboard_event_pressed::keycode#4 = KEY_LSHIFT [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [591] keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10
    jmp __b20
    // keyboard_event_scan::@20
  __b20:
    // [592] keyboard_event_scan::$0 = keyboard_event_pressed::return#0
    // [593] if(keyboard_event_scan::$0==0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1_from___b20
    // [594] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  __b18_from___b20:
    jmp __b18
    // keyboard_event_scan::@18
  __b18:
    // [595] phi from keyboard_event_scan::@18 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1]
  __b1_from___b18:
    // [595] phi keyboard_modifiers#19 = KEY_MODIFIER_LSHIFT [phi:keyboard_event_scan::@18->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #KEY_MODIFIER_LSHIFT
    jmp __b1
    // [595] phi from keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1]
  __b1_from___b20:
    // [595] phi keyboard_modifiers#19 = 0 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // keyboard_event_scan::@1
  __b1:
    // [596] call keyboard_event_pressed 
    // [773] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  keyboard_event_pressed_from___b1:
    // [773] phi keyboard_event_pressed::keycode#4 = KEY_RSHIFT [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [597] keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10
    jmp __b21
    // keyboard_event_scan::@21
  __b21:
    // [598] keyboard_event_scan::$3 = keyboard_event_pressed::return#1
    // [599] if(keyboard_event_scan::$3==0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b21
    jmp __b4
    // keyboard_event_scan::@4
  __b4:
    // [600] keyboard_modifiers#2 = keyboard_modifiers#19 | KEY_MODIFIER_RSHIFT -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_RSHIFT
    tax
    // [601] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  __b2_from___b21:
  __b2_from___b4:
    // [601] phi keyboard_modifiers#20 = keyboard_modifiers#19 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2#0] -- register_copy 
    jmp __b2
    // keyboard_event_scan::@2
  __b2:
    // [602] call keyboard_event_pressed 
    // [773] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  keyboard_event_pressed_from___b2:
    // [773] phi keyboard_event_pressed::keycode#4 = KEY_CTRL [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [603] keyboard_event_pressed::return#2 = keyboard_event_pressed::return#10
    jmp __b22
    // keyboard_event_scan::@22
  __b22:
    // [604] keyboard_event_scan::$6 = keyboard_event_pressed::return#2
    // [605] if(keyboard_event_scan::$6==0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b22
    jmp __b5
    // keyboard_event_scan::@5
  __b5:
    // [606] keyboard_modifiers#3 = keyboard_modifiers#20 | KEY_MODIFIER_CTRL -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_CTRL
    tax
    // [607] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  __b3_from___b22:
  __b3_from___b5:
    // [607] phi keyboard_modifiers#21 = keyboard_modifiers#20 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3#0] -- register_copy 
    jmp __b3
    // keyboard_event_scan::@3
  __b3:
    // [608] call keyboard_event_pressed 
    // [773] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  keyboard_event_pressed_from___b3:
    // [773] phi keyboard_event_pressed::keycode#4 = KEY_COMMODORE [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [609] keyboard_event_pressed::return#3 = keyboard_event_pressed::return#10
    jmp __b23
    // keyboard_event_scan::@23
  __b23:
    // [610] keyboard_event_scan::$9 = keyboard_event_pressed::return#3
    // [611] if(keyboard_event_scan::$9==0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from___b23
    jmp __b6
    // keyboard_event_scan::@6
  __b6:
    // [612] keyboard_modifiers#4 = keyboard_modifiers#21 | KEY_MODIFIER_COMMODORE -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_COMMODORE
    tax
    // [613] phi from keyboard_event_scan::@23 keyboard_event_scan::@6 to keyboard_event_scan::@return [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return]
  __breturn_from___b23:
  __breturn_from___b6:
    // [613] phi keyboard_modifiers#22 = keyboard_modifiers#21 [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return#0] -- register_copy 
    jmp __breturn
    // keyboard_event_scan::@return
  __breturn:
    // [614] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [615] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  __b9_from___b10:
    // [615] phi keyboard_events_size#19 = keyboard_events_size#106 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [615] phi keyboard_event_scan::keycode#10 = keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [615] phi keyboard_event_scan::col#2 = keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    jmp __b9
    // [615] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  __b9_from___b19:
    // [615] phi keyboard_events_size#19 = keyboard_events_size#107 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [615] phi keyboard_event_scan::keycode#10 = keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [615] phi keyboard_event_scan::col#2 = 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b9
    // keyboard_event_scan::@9
  __b9:
    // [616] keyboard_event_scan::$15 = keyboard_event_scan::row_scan#0 ^ keyboard_scan_values[keyboard_event_scan::row#2] -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    // [617] keyboard_event_scan::$16 = keyboard_event_scan::$15 & keyboard_matrix_col_bitmask[keyboard_event_scan::col#2] -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
    // [618] if(keyboard_event_scan::$16==0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10_from___b9
    jmp __b12
    // keyboard_event_scan::@12
  __b12:
    // [619] if(keyboard_events_size#19==8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq __b10_from___b12
    jmp __b13
    // keyboard_event_scan::@13
  __b13:
    // [620] keyboard_event_scan::event_type#0 = keyboard_event_scan::row_scan#0 & keyboard_matrix_col_bitmask[keyboard_event_scan::col#2] -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and.z row_scan
    // [621] if(keyboard_event_scan::event_type#0==0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b11
    jmp __b14
    // keyboard_event_scan::@14
  __b14:
    // [622] keyboard_events[keyboard_events_size#19] = keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [623] keyboard_events_size#1 = ++ keyboard_events_size#19 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [624] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  __b10_from___b11:
  __b10_from___b12:
  __b10_from___b14:
  __b10_from___b9:
    // [624] phi keyboard_events_size#106 = keyboard_events_size#0 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    jmp __b10
    // keyboard_event_scan::@10
  __b10:
    // [625] keyboard_event_scan::keycode#14 = ++ keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // [626] keyboard_event_scan::col#1 = ++ keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
    // [627] if(keyboard_event_scan::col#1!=8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b9_from___b10
    jmp __b15
    // keyboard_event_scan::@15
  __b15:
    // [628] keyboard_scan_values[keyboard_event_scan::row#2] = keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp __b8_from___b15
    // keyboard_event_scan::@11
  __b11:
    // [629] keyboard_event_scan::$23 = keyboard_event_scan::keycode#10 | $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora.z keycode
    // [630] keyboard_events[keyboard_events_size#19] = keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [631] keyboard_events_size#0 = ++ keyboard_events_size#19 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp __b10_from___b11
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    // [632] if(keyboard_events_size#100==0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    beq __breturn_from_keyboard_event_get
    jmp __b1
    // keyboard_event_get::@1
  __b1:
    // [633] keyboard_events_size#3 = -- keyboard_events_size#100 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [634] keyboard_event_get::return#1 = keyboard_events[keyboard_events_size#3] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    // [635] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  __breturn_from___b1:
    // [635] phi keyboard_events_size#25 = keyboard_events_size#3 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [635] phi keyboard_event_get::return#2 = keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    jmp __breturn
    // [635] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  __breturn_from_keyboard_event_get:
    // [635] phi keyboard_events_size#25 = keyboard_events_size#100 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [635] phi keyboard_event_get::return#2 = $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
    jmp __breturn
    // keyboard_event_get::@return
  __breturn:
    // [636] return 
    rts
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label __7 = $25
    .label yoffs = $f
    // [638] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [638] phi bitmap_init::x#2 = 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [638] phi bitmap_init::bits#3 = $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    jmp __b1
    // [638] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [638] phi bitmap_init::x#2 = bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [638] phi bitmap_init::bits#3 = bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [639] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // [640] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // [641] if(bitmap_init::bits#1!=0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b6_from___b1
    // [643] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [643] phi bitmap_init::bits#4 = $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    jmp __b2
    // [642] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [643] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [643] phi bitmap_init::bits#4 = bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [644] bitmap_init::x#1 = ++ bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [645] if(bitmap_init::x#1!=0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    // [646] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [646] phi bitmap_init::yoffs#2 = VICII_BITMAP [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<VICII_BITMAP
    sta.z yoffs
    lda #>VICII_BITMAP
    sta.z yoffs+1
    // [646] phi bitmap_init::y#2 = 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [646] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [646] phi bitmap_init::yoffs#2 = bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [646] phi bitmap_init::y#2 = bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [647] bitmap_init::$7 = bitmap_init::y#2 & 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __7
    // [648] bitmap_init::$4 = < bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // [649] bitmap_init::$5 = bitmap_init::$7 | bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __7
    // [650] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // [651] bitmap_init::$6 = > bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // [652] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // [653] if(bitmap_init::$7!=7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [654] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [655] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [655] phi bitmap_init::yoffs#4 = bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [656] bitmap_init::y#1 = ++ bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [657] if(bitmap_init::y#1!=0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [658] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE*$10
    // [660] call memset 
    // [740] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
  memset_from_bitmap_clear:
    // [740] phi memset::c#5 = bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [740] phi memset::str#4 = (void*)VICII_SCREEN0 [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<VICII_SCREEN0
    sta.z memset.str
    lda #>VICII_SCREEN0
    sta.z memset.str+1
    // [740] phi memset::num#3 = $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [661] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [662] call memset 
    // [740] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
  memset_from___b1:
    // [740] phi memset::c#5 = 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [740] phi memset::str#4 = (void*)VICII_BITMAP [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<VICII_BITMAP
    sta.z memset.str
    lda #>VICII_BITMAP
    sta.z memset.str+1
    // [740] phi memset::num#3 = $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [663] return 
    rts
}
  // bitmap_line
// Draw a line on the bitmap using bresenhams algorithm
// bitmap_line(word zp($d) x1, word zp($1b) y1, word zp($17) x2, word zp($19) y2)
bitmap_line: {
    .label dx = $1d
    .label dy = $11
    .label sx = $23
    .label sy = $13
    .label e1 = $f
    .label e = $b
    .label y = $1b
    .label x = $d
    .label x1 = $d
    .label y1 = $1b
    .label x2 = $17
    .label y2 = $19
    // [664] abs_u16::w#0 = bitmap_line::x2#0 - bitmap_line::x1#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x2
    sec
    sbc.z x1
    sta.z abs_u16.w
    lda.z x2+1
    sbc.z x1+1
    sta.z abs_u16.w+1
    // [665] call abs_u16 
    // [779] phi from bitmap_line to abs_u16 [phi:bitmap_line->abs_u16]
  abs_u16_from_bitmap_line:
    // [779] phi abs_u16::w#2 = abs_u16::w#0 [phi:bitmap_line->abs_u16#0] -- register_copy 
    jsr abs_u16
    // [666] abs_u16::return#0 = abs_u16::return#4
    jmp __b12
    // bitmap_line::@12
  __b12:
    // [667] bitmap_line::dx#0 = abs_u16::return#0 -- vwuz1=vwuz2 
    lda.z abs_u16.return
    sta.z dx
    lda.z abs_u16.return+1
    sta.z dx+1
    // [668] abs_u16::w#1 = bitmap_line::y2#0 - bitmap_line::y1#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z y2
    sec
    sbc.z y1
    sta.z abs_u16.w
    lda.z y2+1
    sbc.z y1+1
    sta.z abs_u16.w+1
    // [669] call abs_u16 
    // [779] phi from bitmap_line::@12 to abs_u16 [phi:bitmap_line::@12->abs_u16]
  abs_u16_from___b12:
    // [779] phi abs_u16::w#2 = abs_u16::w#1 [phi:bitmap_line::@12->abs_u16#0] -- register_copy 
    jsr abs_u16
    // [670] abs_u16::return#1 = abs_u16::return#4
    jmp __b13
    // bitmap_line::@13
  __b13:
    // [671] bitmap_line::dy#0 = abs_u16::return#1
    // [672] if(bitmap_line::dx#0!=0) goto bitmap_line::@1 -- vwuz1_neq_0_then_la1 
    lda.z dx
    ora.z dx+1
    bne __b1
    jmp __b18
    // bitmap_line::@18
  __b18:
    // [673] if(bitmap_line::dy#0==0) goto bitmap_line::@4 -- vwuz1_eq_0_then_la1 
    lda.z dy
    ora.z dy+1
    beq __b4
    jmp __b1
    // bitmap_line::@1
  __b1:
    // [674] sgn_u16::w#0 = bitmap_line::x2#0 - bitmap_line::x1#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x2
    sec
    sbc.z x1
    sta.z sgn_u16.w
    lda.z x2+1
    sbc.z x1+1
    sta.z sgn_u16.w+1
    // [675] call sgn_u16 
    // [786] phi from bitmap_line::@1 to sgn_u16 [phi:bitmap_line::@1->sgn_u16]
  sgn_u16_from___b1:
    // [786] phi sgn_u16::w#2 = sgn_u16::w#0 [phi:bitmap_line::@1->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // [676] sgn_u16::return#0 = sgn_u16::return#4
    jmp __b14
    // bitmap_line::@14
  __b14:
    // [677] bitmap_line::sx#0 = sgn_u16::return#0 -- vwuz1=vwuz2 
    lda.z sgn_u16.return
    sta.z sx
    lda.z sgn_u16.return+1
    sta.z sx+1
    // [678] sgn_u16::w#1 = bitmap_line::y2#0 - bitmap_line::y1#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z y2
    sec
    sbc.z y1
    sta.z sgn_u16.w
    lda.z y2+1
    sbc.z y1+1
    sta.z sgn_u16.w+1
    // [679] call sgn_u16 
    // [786] phi from bitmap_line::@14 to sgn_u16 [phi:bitmap_line::@14->sgn_u16]
  sgn_u16_from___b14:
    // [786] phi sgn_u16::w#2 = sgn_u16::w#1 [phi:bitmap_line::@14->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // [680] sgn_u16::return#1 = sgn_u16::return#4
    jmp __b15
    // bitmap_line::@15
  __b15:
    // [681] bitmap_line::sy#0 = sgn_u16::return#1
    // [682] if(bitmap_line::dx#0>bitmap_line::dy#0) goto bitmap_line::@2 -- vwuz1_gt_vwuz2_then_la1 
    lda.z dy+1
    cmp.z dx+1
    bcc __b2
    bne !+
    lda.z dy
    cmp.z dx
    bcc __b2
  !:
    jmp __b5
    // bitmap_line::@5
  __b5:
    // [683] bitmap_line::e#0 = bitmap_line::dx#0 >> 1 -- vwuz1=vwuz2_ror_1 
    lda.z dx+1
    lsr
    sta.z e+1
    lda.z dx
    ror
    sta.z e
    // [684] phi from bitmap_line::@5 bitmap_line::@7 to bitmap_line::@6 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6]
  __b6_from___b5:
  __b6_from___b7:
    // [684] phi bitmap_line::e#3 = bitmap_line::e#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#0] -- register_copy 
    // [684] phi bitmap_line::y#4 = bitmap_line::y1#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#1] -- register_copy 
    // [684] phi bitmap_line::x#13 = bitmap_line::x1#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#2] -- register_copy 
    jmp __b6
    // bitmap_line::@6
  __b6:
    // [685] bitmap_plot::x#1 = bitmap_line::x#13
    // [686] bitmap_plot::y#1 = (byte)bitmap_line::y#4 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [687] call bitmap_plot 
    // [793] phi from bitmap_line::@6 to bitmap_plot [phi:bitmap_line::@6->bitmap_plot]
  bitmap_plot_from___b6:
    // [793] phi bitmap_plot::x#4 = bitmap_plot::x#1 [phi:bitmap_line::@6->bitmap_plot#0] -- register_copy 
    // [793] phi bitmap_plot::y#4 = bitmap_plot::y#1 [phi:bitmap_line::@6->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b16
    // bitmap_line::@16
  __b16:
    // [688] bitmap_line::y#1 = bitmap_line::y#4 + bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // [689] bitmap_line::e#1 = bitmap_line::e#3 + bitmap_line::dx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e
    clc
    adc.z dx
    sta.z e
    lda.z e+1
    adc.z dx+1
    sta.z e+1
    // [690] if(bitmap_line::dy#0>=bitmap_line::e#1) goto bitmap_line::@7 -- vwuz1_ge_vwuz2_then_la1 
    lda.z e+1
    cmp.z dy+1
    bne !+
    lda.z e
    cmp.z dy
    beq __b7_from___b16
  !:
    bcc __b7_from___b16
    jmp __b8
    // bitmap_line::@8
  __b8:
    // [691] bitmap_line::x#1 = bitmap_line::x#13 + bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // [692] bitmap_line::e#2 = bitmap_line::e#1 - bitmap_line::dy#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e
    sec
    sbc.z dy
    sta.z e
    lda.z e+1
    sbc.z dy+1
    sta.z e+1
    // [693] phi from bitmap_line::@16 bitmap_line::@8 to bitmap_line::@7 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7]
  __b7_from___b16:
  __b7_from___b8:
    // [693] phi bitmap_line::e#6 = bitmap_line::e#1 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#0] -- register_copy 
    // [693] phi bitmap_line::x#12 = bitmap_line::x#13 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#1] -- register_copy 
    jmp __b7
    // bitmap_line::@7
  __b7:
    // [694] if(bitmap_line::y#1!=bitmap_line::y2#0) goto bitmap_line::@6 -- vwuz1_neq_vwuz2_then_la1 
    lda.z y+1
    cmp.z y2+1
    bne __b6_from___b7
    lda.z y
    cmp.z y2
    bne __b6_from___b7
    // [695] phi from bitmap_line::@10 bitmap_line::@7 to bitmap_line::@3 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3]
  __b3_from___b10:
  __b3_from___b7:
    // [695] phi bitmap_line::y#7 = bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#0] -- register_copy 
    // [695] phi bitmap_line::x#6 = bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#1] -- register_copy 
    jmp __b3
    // bitmap_line::@3
  __b3:
    // [696] bitmap_plot::x#2 = bitmap_line::x#6
    // [697] bitmap_plot::y#2 = (byte)bitmap_line::y#7 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [698] call bitmap_plot 
    // [793] phi from bitmap_line::@3 to bitmap_plot [phi:bitmap_line::@3->bitmap_plot]
  bitmap_plot_from___b3:
    // [793] phi bitmap_plot::x#4 = bitmap_plot::x#2 [phi:bitmap_line::@3->bitmap_plot#0] -- register_copy 
    // [793] phi bitmap_plot::y#4 = bitmap_plot::y#2 [phi:bitmap_line::@3->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __breturn
    // bitmap_line::@return
  __breturn:
    // [699] return 
    rts
    // bitmap_line::@2
  __b2:
    // [700] bitmap_line::e1#0 = bitmap_line::dy#0 >> 1 -- vwuz1=vwuz2_ror_1 
    lda.z dy+1
    lsr
    sta.z e1+1
    lda.z dy
    ror
    sta.z e1
    // [701] phi from bitmap_line::@10 bitmap_line::@2 to bitmap_line::@9 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9]
  __b9_from___b10:
  __b9_from___b2:
    // [701] phi bitmap_line::e1#3 = bitmap_line::e1#6 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#0] -- register_copy 
    // [701] phi bitmap_line::y#15 = bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#1] -- register_copy 
    // [701] phi bitmap_line::x#7 = bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#2] -- register_copy 
    jmp __b9
    // bitmap_line::@9
  __b9:
    // [702] bitmap_plot::x#3 = bitmap_line::x#7
    // [703] bitmap_plot::y#3 = (byte)bitmap_line::y#15 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [704] call bitmap_plot 
    // [793] phi from bitmap_line::@9 to bitmap_plot [phi:bitmap_line::@9->bitmap_plot]
  bitmap_plot_from___b9:
    // [793] phi bitmap_plot::x#4 = bitmap_plot::x#3 [phi:bitmap_line::@9->bitmap_plot#0] -- register_copy 
    // [793] phi bitmap_plot::y#4 = bitmap_plot::y#3 [phi:bitmap_line::@9->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b17
    // bitmap_line::@17
  __b17:
    // [705] bitmap_line::x#15 = bitmap_line::x#7 + bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // [706] bitmap_line::e1#1 = bitmap_line::e1#3 + bitmap_line::dy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e1
    clc
    adc.z dy
    sta.z e1
    lda.z e1+1
    adc.z dy+1
    sta.z e1+1
    // [707] if(bitmap_line::dx#0>=bitmap_line::e1#1) goto bitmap_line::@10 -- vwuz1_ge_vwuz2_then_la1 
    lda.z e1+1
    cmp.z dx+1
    bne !+
    lda.z e1
    cmp.z dx
    beq __b10_from___b17
  !:
    bcc __b10_from___b17
    jmp __b11
    // bitmap_line::@11
  __b11:
    // [708] bitmap_line::y#2 = bitmap_line::y#15 + bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // [709] bitmap_line::e1#2 = bitmap_line::e1#1 - bitmap_line::dx#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e1
    sec
    sbc.z dx
    sta.z e1
    lda.z e1+1
    sbc.z dx+1
    sta.z e1+1
    // [710] phi from bitmap_line::@11 bitmap_line::@17 to bitmap_line::@10 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10]
  __b10_from___b11:
  __b10_from___b17:
    // [710] phi bitmap_line::e1#6 = bitmap_line::e1#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#0] -- register_copy 
    // [710] phi bitmap_line::y#13 = bitmap_line::y#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#1] -- register_copy 
    jmp __b10
    // bitmap_line::@10
  __b10:
    // [711] if(bitmap_line::x#15!=bitmap_line::x2#0) goto bitmap_line::@9 -- vwuz1_neq_vwuz2_then_la1 
    lda.z x+1
    cmp.z x2+1
    bne __b9_from___b10
    lda.z x
    cmp.z x2
    bne __b9_from___b10
    jmp __b3_from___b10
    // bitmap_line::@4
  __b4:
    // [712] bitmap_plot::x#0 = bitmap_line::x1#0
    // [713] bitmap_plot::y#0 = (byte)bitmap_line::y1#0 -- vbuaa=_byte_vwuz1 
    lda.z y1
    // [714] call bitmap_plot 
    // [793] phi from bitmap_line::@4 to bitmap_plot [phi:bitmap_line::@4->bitmap_plot]
  bitmap_plot_from___b4:
    // [793] phi bitmap_plot::x#4 = bitmap_plot::x#0 [phi:bitmap_line::@4->bitmap_plot#0] -- register_copy 
    // [793] phi bitmap_plot::y#4 = bitmap_plot::y#0 [phi:bitmap_line::@4->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __breturn
}
  // dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    // [716] *dtvSetCpuBankSegment1::cpuBank = dtvSetCpuBankSegment1::cpuBankIdx#13 -- _deref_pbuc1=vbuaa 
    sta cpuBank
    // asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda.z $ff
    .byte $32, $00
    jmp __breturn
    // dtvSetCpuBankSegment1::@return
  __breturn:
    // [718] return 
    rts
}
  // gfx_init_plane_fill
// Initialize 320*200 1bpp pixel ($2000) plane with identical bytes
// gfx_init_plane_fill(dword zp(5) plane_addr, byte zp(9) fill)
gfx_init_plane_fill: {
    .label __0 = $1f
    .label __1 = $23
    .label __4 = $b
    .label __5 = $b
    .label gfxb = $b
    .label by = $a
    .label plane_addr = 5
    .label fill = 9
    // [720] gfx_init_plane_fill::$0 = gfx_init_plane_fill::plane_addr#3 << 2 -- vduz1=vduz2_rol_2 
    lda.z plane_addr
    asl
    sta.z __0
    lda.z plane_addr+1
    rol
    sta.z __0+1
    lda.z plane_addr+2
    rol
    sta.z __0+2
    lda.z plane_addr+3
    rol
    sta.z __0+3
    asl.z __0
    rol.z __0+1
    rol.z __0+2
    rol.z __0+3
    // [721] gfx_init_plane_fill::$1 = > gfx_init_plane_fill::$0 -- vwuz1=_hi_vduz2 
    lda.z __0+2
    sta.z __1
    lda.z __0+3
    sta.z __1+1
    // [722] gfx_init_plane_fill::gfxbCpuBank#0 = < gfx_init_plane_fill::$1 -- vbuaa=_lo_vwuz1 
    lda.z __1
    // [723] dtvSetCpuBankSegment1::cpuBankIdx#11 = gfx_init_plane_fill::gfxbCpuBank#0
    // [724] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_fill to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_fill:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = dtvSetCpuBankSegment1::cpuBankIdx#11 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp __b5
    // gfx_init_plane_fill::@5
  __b5:
    // [725] gfx_init_plane_fill::$4 = < gfx_init_plane_fill::plane_addr#3 -- vwuz1=_lo_vduz2 
    lda.z plane_addr
    sta.z __4
    lda.z plane_addr+1
    sta.z __4+1
    // [726] gfx_init_plane_fill::$5 = gfx_init_plane_fill::$4 & $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __5
    and #<$3fff
    sta.z __5
    lda.z __5+1
    and #>$3fff
    sta.z __5+1
    // [727] gfx_init_plane_fill::gfxb#0 = $4000 + gfx_init_plane_fill::$5 -- vwuz1=vwuc1_plus_vwuz1 
    clc
    lda.z gfxb
    adc #<$4000
    sta.z gfxb
    lda.z gfxb+1
    adc #>$4000
    sta.z gfxb+1
    // [728] gfx_init_plane_fill::gfxb#6 = (byte*)gfx_init_plane_fill::gfxb#0
    // [729] phi from gfx_init_plane_fill::@5 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1]
  __b1_from___b5:
    // [729] phi gfx_init_plane_fill::by#4 = 0 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [729] phi gfx_init_plane_fill::gfxb#3 = gfx_init_plane_fill::gfxb#6 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp __b1
    // [729] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1]
  __b1_from___b3:
    // [729] phi gfx_init_plane_fill::by#4 = gfx_init_plane_fill::by#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#0] -- register_copy 
    // [729] phi gfx_init_plane_fill::gfxb#3 = gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_fill::@1
  __b1:
    // [730] phi from gfx_init_plane_fill::@1 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2]
  __b2_from___b1:
    // [730] phi gfx_init_plane_fill::bx#2 = 0 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [730] phi gfx_init_plane_fill::gfxb#2 = gfx_init_plane_fill::gfxb#3 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp __b2
    // [730] phi from gfx_init_plane_fill::@2 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2]
  __b2_from___b2:
    // [730] phi gfx_init_plane_fill::bx#2 = gfx_init_plane_fill::bx#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#0] -- register_copy 
    // [730] phi gfx_init_plane_fill::gfxb#2 = gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_fill::@2
  __b2:
    // [731] *gfx_init_plane_fill::gfxb#2 = gfx_init_plane_fill::fill#6 -- _deref_pbuz1=vbuz2 
    lda.z fill
    ldy #0
    sta (gfxb),y
    // [732] gfx_init_plane_fill::gfxb#1 = ++ gfx_init_plane_fill::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [733] gfx_init_plane_fill::bx#1 = ++ gfx_init_plane_fill::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [734] if(gfx_init_plane_fill::bx#1!=$28) goto gfx_init_plane_fill::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_fill::@3
  __b3:
    // [735] gfx_init_plane_fill::by#1 = ++ gfx_init_plane_fill::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [736] if(gfx_init_plane_fill::by#1!=$c8) goto gfx_init_plane_fill::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1_from___b3
    // [737] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@4 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_fill::@4
  __b4:
    // [738] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_fill::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_fill::@return
  __breturn:
    // [739] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($1b) str, byte register(X) c, word zp($d) num)
memset: {
    .label end = $d
    .label dst = $1b
    .label str = $1b
    .label num = $d
    // [741] if(memset::num#3<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [742] memset::end#0 = (byte*)memset::str#4 + memset::num#3 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [743] memset::dst#4 = (byte*)memset::str#4
    // [744] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [744] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [745] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [746] return 
    rts
    // memset::@3
  __b3:
    // [747] *memset::dst#2 = memset::c#5 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [748] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [749] *print_char_cursor#43 = print_char::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [750] print_char_cursor#29 = ++ print_char_cursor#43 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [751] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [753] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [753] phi print_line_cursor#22 = print_line_cursor#1 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [754] print_line_cursor#2 = print_line_cursor#22 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [755] if(print_line_cursor#2<print_char_cursor#44) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [756] return 
    rts
}
  // form_field_ptr
// Get the screen address of a form field
// field_idx is the index of the field to get the screen address for
// form_field_ptr(byte register(X) field_idx)
form_field_ptr: {
    .label line = $27
    .label x = $25
    .label return = $1d
    // [758] form_field_ptr::y#0 = form_fields_y[form_field_ptr::field_idx#2] -- vbuyy=pbuc1_derefidx_vbuxx 
    ldy form_fields_y,x
    // [759] form_field_ptr::line#0 = form_line_hi[form_field_ptr::y#0] w= form_line_lo[form_field_ptr::y#0] -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda form_line_hi,y
    sta.z line+1
    lda form_line_lo,y
    sta.z line
    // [760] form_field_ptr::x#0 = form_fields_x[form_field_ptr::field_idx#2] -- vbuz1=pbuc1_derefidx_vbuxx 
    lda form_fields_x,x
    sta.z x
    // [761] form_field_ptr::return#0 = (byte*)form_field_ptr::line#0 + form_field_ptr::x#0 -- pbuz1=pbuz2_plus_vbuz3 
    lda.z x
    clc
    adc.z line
    sta.z return
    lda #0
    adc.z line+1
    sta.z return+1
    jmp __breturn
    // form_field_ptr::@return
  __breturn:
    // [762] return 
    rts
}
  // print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zp($b) str, byte* zp($f) at)
print_str_at: {
    .label at = $f
    .label str = $b
    // [764] phi from print_str_at to print_str_at::@1 [phi:print_str_at->print_str_at::@1]
  __b1_from_print_str_at:
    // [764] phi print_str_at::at#2 = FORM_SCREEN+$28*2+$a [phi:print_str_at->print_str_at::@1#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN+$28*2+$a
    sta.z at
    lda #>FORM_SCREEN+$28*2+$a
    sta.z at+1
    // [764] phi print_str_at::str#2 = print_str_at::str#1 [phi:print_str_at->print_str_at::@1#1] -- register_copy 
    jmp __b1
    // print_str_at::@1
  __b1:
    // [765] if(0!=*print_str_at::str#2) goto print_str_at::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str_at::@return
  __breturn:
    // [766] return 
    rts
    // print_str_at::@2
  __b2:
    // [767] *print_str_at::at#2 = *print_str_at::str#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (at),y
    // [768] print_str_at::at#0 = ++ print_str_at::at#2 -- pbuz1=_inc_pbuz1 
    inc.z at
    bne !+
    inc.z at+1
  !:
    // [769] print_str_at::str#0 = ++ print_str_at::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [764] phi from print_str_at::@2 to print_str_at::@1 [phi:print_str_at::@2->print_str_at::@1]
  __b1_from___b2:
    // [764] phi print_str_at::at#2 = print_str_at::at#0 [phi:print_str_at::@2->print_str_at::@1#0] -- register_copy 
    // [764] phi print_str_at::str#2 = print_str_at::str#0 [phi:print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp __b1
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
    // [770] *((byte*)CIA1) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0] -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1
    // [771] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    jmp __breturn
    // keyboard_matrix_read::@return
  __breturn:
    // [772] return 
    rts
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zp($15) keycode)
keyboard_event_pressed: {
    .label row_bits = $26
    .label keycode = $15
    // [774] keyboard_event_pressed::$0 = keyboard_event_pressed::keycode#4 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    // [775] keyboard_event_pressed::row_bits#0 = keyboard_scan_values[keyboard_event_pressed::$0] -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta.z row_bits
    // [776] keyboard_event_pressed::$1 = keyboard_event_pressed::keycode#4 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z keycode
    // [777] keyboard_event_pressed::return#10 = keyboard_event_pressed::row_bits#0 & keyboard_matrix_col_bitmask[keyboard_event_pressed::$1] -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and.z row_bits
    jmp __breturn
    // keyboard_event_pressed::@return
  __breturn:
    // [778] return 
    rts
}
  // abs_u16
// Get the absolute value of a 16-bit unsigned number treated as a signed number.
// abs_u16(word zp($11) w)
abs_u16: {
    .label w = $11
    .label return = $11
    // [780] abs_u16::$0 = > abs_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // [781] abs_u16::$1 = abs_u16::$0 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [782] if(0!=abs_u16::$1) goto abs_u16::@1 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // [784] phi from abs_u16 abs_u16::@1 to abs_u16::@return [phi:abs_u16/abs_u16::@1->abs_u16::@return]
  __breturn_from_abs_u16:
  __breturn_from___b1:
    // [784] phi abs_u16::return#4 = abs_u16::w#2 [phi:abs_u16/abs_u16::@1->abs_u16::@return#0] -- register_copy 
    jmp __breturn
    // abs_u16::@1
  __b1:
    // [783] abs_u16::return#2 = - abs_u16::w#2 -- vwuz1=_neg_vwuz1 
    sec
    lda #0
    sbc.z return
    sta.z return
    lda #0
    sbc.z return+1
    sta.z return+1
    jmp __breturn_from___b1
    // abs_u16::@return
  __breturn:
    // [785] return 
    rts
}
  // sgn_u16
// Get the sign of a 16-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is
// sgn_u16(word zp($27) w)
sgn_u16: {
    .label w = $27
    .label return = $13
    // [787] sgn_u16::$0 = > sgn_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // [788] sgn_u16::$1 = sgn_u16::$0 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [789] if(0!=sgn_u16::$1) goto sgn_u16::@1 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b1_from_sgn_u16
    // [791] phi from sgn_u16 to sgn_u16::@return [phi:sgn_u16->sgn_u16::@return]
  __breturn_from_sgn_u16:
    // [791] phi sgn_u16::return#4 = 1 [phi:sgn_u16->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<1
    sta.z return
    lda #>1
    sta.z return+1
    jmp __breturn
    // [790] phi from sgn_u16 to sgn_u16::@1 [phi:sgn_u16->sgn_u16::@1]
  __b1_from_sgn_u16:
    jmp __b1
    // sgn_u16::@1
  __b1:
    // [791] phi from sgn_u16::@1 to sgn_u16::@return [phi:sgn_u16::@1->sgn_u16::@return]
  __breturn_from___b1:
    // [791] phi sgn_u16::return#4 = -1 [phi:sgn_u16::@1->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z return
    lda #>-1
    sta.z return+1
    jmp __breturn
    // sgn_u16::@return
  __breturn:
    // [792] return 
    rts
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zp($d) x, byte register(A) y)
bitmap_plot: {
    .label __0 = $29
    .label plotter = $27
    .label x = $d
    // [794] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] -- vwuz1=pbuc1_derefidx_vbuaa_word_pbuc2_derefidx_vbuaa 
    tay
    lda bitmap_plot_yhi,y
    sta.z plotter+1
    lda bitmap_plot_ylo,y
    sta.z plotter
    // [795] bitmap_plot::$0 = bitmap_plot::x#4 & $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __0
    lda.z x+1
    and #>$fff8
    sta.z __0+1
    // [796] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z __0
    sta.z plotter
    lda.z plotter+1
    adc.z __0+1
    sta.z plotter+1
    // [797] bitmap_plot::$1 = < bitmap_plot::x#4 -- vbuxx=_lo_vwuz1 
    ldx.z x
    // [798] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1] -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    ldy #0
    sta (plotter),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [799] return 
    rts
}
  // File Data
.segment Data
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  print_hextab: .text "0123456789abcdef"
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // Charset ROM
  FORM_TEXT: .text " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
  .byte 0
  FORM_COLS: .text "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
  .byte 0
  // Form fields x/y-positions
  form_fields_x: .byte 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25
  form_fields_y: .byte 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e
  // Form field max values (all values are in the interval 0..max)
  form_fields_max: .byte $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f
  // Form fields values
  form_fields_val: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Standard Char Mode
  preset_stdchar: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Extended Color Char Mode
  preset_ecmchar: .byte 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6
  // Preset: Standard Bitmap
  preset_stdbm: .byte 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: MC Bitmap
  preset_mcbm: .byte 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Standard Char Mode
  preset_hi_stdchar: .byte 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Extended Color Char Mode
  preset_hi_ecmchar: .byte 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c
  // Preset: Two plane mode
  preset_twoplane: .byte 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0
  // Preset: Chunky 8bpp
  preset_chunky: .byte 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs mode
  preset_sixsfred: .byte 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs 2 mode
  preset_sixsfred2: .byte 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: 8bpp Pixel Cell
  preset_8bpppixelcell: .byte $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Table with addresses of the y-lines of the form. The first line contains the address of the form screen.
  form_line_lo: .fill $19, 0
  form_line_hi: .fill $19, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b17
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b18
Removing instruction jmp __b19
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b11
Removing instruction jmp __b2
Removing instruction jmp __b12
Removing instruction jmp __b3
Removing instruction jmp __b13
Removing instruction jmp __b4
Removing instruction jmp __b14
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b6
Removing instruction jmp __b16
Removing instruction jmp __b7
Removing instruction jmp __b17
Removing instruction jmp __b8
Removing instruction jmp __b18
Removing instruction jmp __b9
Removing instruction jmp __b27
Removing instruction jmp __b28
Removing instruction jmp __b29
Removing instruction jmp __b30
Removing instruction jmp __b31
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b21
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp __b25
Removing instruction jmp __b26
Removing instruction jmp __b32
Removing instruction jmp __b33
Removing instruction jmp __b24
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b18
Removing instruction jmp __b21
Removing instruction jmp __b1
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b22
Removing instruction jmp __b14
Removing instruction jmp __breturn
Removing instruction jmp __b23
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b6
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b13
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b19
Removing instruction jmp __b16
Removing instruction jmp __b8
Removing instruction jmp __b17
Removing instruction jmp __b20
Removing instruction jmp __b18
Removing instruction jmp __b1
Removing instruction jmp __b21
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b22
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b23
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b10
Removing instruction jmp __b15
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b18
Removing instruction jmp __b1
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b16
Removing instruction jmp __b8
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b17
Removing instruction jmp __b11
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #3
Removing instruction lda #0
Removing instruction lda.z __24+1
Removing instruction lda.z __38+1
Removing instruction lda.z __50+1
Removing instruction ldy #0
Replacing instruction ldy #0 with TAY
Removing instruction ldy #0
Removing instruction ldy.z l
Removing instruction ldy.z l
Removing instruction ldy.z l
Removing instruction lda #>0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda.z row_scan
Removing instruction lda.z e+1
Removing instruction lda.z e1+1
Removing instruction lda.z x
Removing instruction ldy #0
Removing instruction lda #>-1
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1 with __b2
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from___b19 with __b3_from___b6
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b4_from___b3 with __b4
Replacing label __b5_from___b4 with __b5
Replacing label __b6_from___b5 with __b6
Replacing label __b8_from___b7 with __b8
Replacing label __b20_from___b20 with __b20
Replacing label __b19_from___b21 with __b19
Replacing label __b23_from___b23 with __b23
Replacing label __b24_from___b24 with __b24
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b3 with __b2
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b5 with __b1
Replacing label __b3_from___b4 with __b3
Replacing label __b2_from___b6 with __b2
Replacing label __b1_from___b7 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b6 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b6 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from_render_preset_name with __b2_from___b12
Replacing label __b1_from___b12 with __b1
Replacing label __b21_from___b18 with __b1
Replacing label __b22_from___b9 with __b14
Replacing label __b23_from___b13 with __b23
Replacing label __b14_from___b23 with __b14
Replacing label __b6_from___b5 with __b6
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from_apply_preset with __b2_from___b12
Replacing label __b1_from___b12 with __b1
Replacing label __breturn_from_get_plane with __b1
Replacing label __b1_from___b14 with __b1
Replacing label __breturn_from_get_VICII_screen with __b1
Replacing label __b1_from___b5 with __b1
Replacing label __breturn_from_get_VICII_charset with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __b7_from___b8 with __b7
Replacing label __b2_from___b21 with __b2
Replacing label __b3_from___b22 with __b3
Replacing label __breturn_from___b23 with __breturn
Replacing label __b10_from___b9 with __b10
Replacing label __b10_from___b12 with __b10
Replacing label __b8_from___b15 with __b8
Replacing label __b10_from___b11 with __b10
Replacing label __b6_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b7_from___b16 with __b7
Replacing label __b7_from___b16 with __b7
Replacing label __b6_from___b7 with __b6
Replacing label __b6_from___b7 with __b6
Replacing label __b10_from___b17 with __b10
Replacing label __b10_from___b17 with __b10
Replacing label __b9_from___b10 with __b9
Replacing label __b9_from___b10 with __b9
Replacing label __b3_from___b10 with __b3
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from_sgn_u16 with __b1
Removing instruction __b3_from_main:
Removing instruction gfx_init_from___b3:
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction __b4_from___b2:
Removing instruction __b1_from_gfx_init:
Removing instruction gfx_init_screen1_from___b1:
Removing instruction __b2_from___b1:
Removing instruction gfx_init_screen2_from___b2:
Removing instruction __b3_from___b2:
Removing instruction gfx_init_screen3_from___b3:
Removing instruction __b4_from___b3:
Removing instruction gfx_init_screen4_from___b4:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b5:
Removing instruction gfx_init_VICII_bitmap_from___b6:
Removing instruction __b7_from___b6:
Removing instruction gfx_init_plane_8bppchunky_from___b7:
Removing instruction __b8_from___b7:
Removing instruction gfx_init_plane_charset8_from___b8:
Removing instruction __b9_from___b8:
Removing instruction gfx_init_plane_horisontal_from___b9:
Removing instruction __b10_from___b9:
Removing instruction gfx_init_plane_vertical_from___b10:
Removing instruction __b11_from___b10:
Removing instruction gfx_init_plane_horisontal2_from___b11:
Removing instruction __b12_from___b11:
Removing instruction gfx_init_plane_vertical2_from___b12:
Removing instruction __b13_from___b12:
Removing instruction gfx_init_plane_blank_from___b13:
Removing instruction __b14_from___b13:
Removing instruction gfx_init_plane_full_from___b14:
Removing instruction __b8_from_form_mode:
Removing instruction __b9_from___b8:
Removing instruction print_str_lines_from___b9:
Removing instruction __b10_from___b9:
Removing instruction __b11_from___b10:
Removing instruction __b12_from___b11:
Removing instruction print_str_lines_from___b12:
Removing instruction __b13_from___b12:
Removing instruction __b14_from___b13:
Removing instruction form_render_values_from___b14:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b19:
Removing instruction __b3_from___b2:
Removing instruction __b3:
Removing instruction __b5_from___b4:
Removing instruction __b10_from_gfx_mode:
Removing instruction __b1_from___b10:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b11:
Removing instruction __b3_from___b12:
Removing instruction __b3_from___b2:
Removing instruction __b4_from___b13:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b14:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b15:
Removing instruction __b6_from___b5:
Removing instruction __b16_from___b6:
Removing instruction __b7_from___b16:
Removing instruction __b8_from___b17:
Removing instruction __b8_from___b7:
Removing instruction __b18_from___b8:
Removing instruction __b9_from___b18:
Removing instruction __b19_from___b31:
Removing instruction __b19_from___b21:
Removing instruction __b20_from___b19:
Removing instruction __b20_from___b20:
Removing instruction __b23_from___b23:
Removing instruction __b26_from___b25:
Removing instruction keyboard_event_scan_from___b26:
Removing instruction __b32_from___b26:
Removing instruction __b24_from___b24:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b3_from_gfx_init_VICII_bitmap:
Removing instruction bitmap_clear_from___b3:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b3_from___b2:
Removing instruction __b6_from___b5:
Removing instruction __b1_from___b7:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b6:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b7_from___b6:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b4_from___b3:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b4_from___b3:
Removing instruction __b1_from_print_str_lines:
Removing instruction __b1_from___b6:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b5_from___b3:
Removing instruction print_ln_from___b5:
Removing instruction __b1_from___b1:
Removing instruction form_field_ptr_from___b2:
Removing instruction __b2_from_render_preset_name:
Removing instruction __b1_from___b12:
Removing instruction __b2_from___b1:
Removing instruction __b21_from___b18:
Removing instruction __b21:
Removing instruction __b1_from___b21:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b7:
Removing instruction __b19_from___b3:
Removing instruction __b22_from___b9:
Removing instruction __b22:
Removing instruction __b14_from___b22:
Removing instruction __b14_from___b23:
Removing instruction __breturn_from___b14:
Removing instruction __b23_from___b13:
Removing instruction __breturn_from___b16:
Removing instruction __b6_from___b5:
Removing instruction __b2_from_apply_preset:
Removing instruction __b1_from___b12:
Removing instruction __b2_from___b1:
Removing instruction __b13_from___b2:
Removing instruction __b1_from___b14:
Removing instruction __breturn_from_get_plane:
Removing instruction __breturn_from___b1:
Removing instruction __b1_from___b5:
Removing instruction __breturn_from_get_VICII_screen:
Removing instruction __breturn_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __breturn_from_get_VICII_charset:
Removing instruction __breturn_from___b1:
Removing instruction __b7_from___b8:
Removing instruction __b8_from___b15:
Removing instruction __b8_from___b16:
Removing instruction __b17_from___b8:
Removing instruction keyboard_event_pressed_from___b17:
Removing instruction __b18_from___b20:
Removing instruction __b1_from___b18:
Removing instruction keyboard_event_pressed_from___b1:
Removing instruction __b2_from___b21:
Removing instruction __b2_from___b4:
Removing instruction keyboard_event_pressed_from___b2:
Removing instruction __b3_from___b22:
Removing instruction __b3_from___b5:
Removing instruction keyboard_event_pressed_from___b3:
Removing instruction __breturn_from___b23:
Removing instruction __breturn_from___b6:
Removing instruction __b10_from___b11:
Removing instruction __b10_from___b12:
Removing instruction __b10_from___b14:
Removing instruction __b10_from___b9:
Removing instruction __b1_from___b2:
Removing instruction __b6_from___b1:
Removing instruction __b6:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b1_from_bitmap_clear:
Removing instruction memset_from___b1:
Removing instruction __b6_from___b5:
Removing instruction __b6_from___b7:
Removing instruction __b7_from___b16:
Removing instruction __b7_from___b8:
Removing instruction __b3_from___b10:
Removing instruction __b3_from___b7:
Removing instruction __b9_from___b10:
Removing instruction __b9_from___b2:
Removing instruction __b10_from___b11:
Removing instruction __b10_from___b17:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b4_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __breturn_from_abs_u16:
Removing instruction __b1_from_sgn_u16:
Removing instruction __breturn_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction form_mode_from___b2:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __breturn:
Removing instruction gfx_init_screen0_from_gfx_init:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __breturn:
Removing instruction print_set_screen_from_form_mode:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction print_set_screen_from___b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction form_set_screen_from___b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction render_preset_name_from___b15:
Removing instruction __b16:
Removing instruction __b1_from___b16:
Removing instruction __b2:
Removing instruction __b5:
Removing instruction __b17:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b18:
Removing instruction form_render_values_from___b18:
Removing instruction __b19:
Removing instruction render_preset_name_from___b19:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction get_plane_from___b9:
Removing instruction __b27:
Removing instruction get_plane_from___b27:
Removing instruction __b28:
Removing instruction get_VICII_screen_from___b28:
Removing instruction __b29:
Removing instruction __b30:
Removing instruction get_VICII_screen_from___b30:
Removing instruction __b31:
Removing instruction __b21:
Removing instruction __b22:
Removing instruction __b23_from___b22:
Removing instruction __b26:
Removing instruction __b32:
Removing instruction __b33:
Removing instruction __b1_from_gfx_init_screen0:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen3:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_charset:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction bitmap_init_from_gfx_init_VICII_bitmap:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_8bppchunky:
Removing instruction __b1_from_gfx_init_plane_8bppchunky:
Removing instruction __b4:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __b7:
Removing instruction __b3_from___b7:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction dtvSetCpuBankSegment1_from___b6:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
Removing instruction __b9:
Removing instruction __b1_from___b9:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b4_from___b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction dtvSetCpuBankSegment1_from___b8:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal:
Removing instruction __b1_from_gfx_init_plane_horisontal:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction dtvSetCpuBankSegment1_from___b7:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_vertical:
Removing instruction __b1_from_gfx_init_plane_vertical:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal2:
Removing instruction __b1_from_gfx_init_plane_horisontal2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_vertical2:
Removing instruction __breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_blank:
Removing instruction __breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_full:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b1_from_form_set_screen:
Removing instruction __breturn:
Removing instruction __b1_from_form_render_values:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction print_str_at_from___b2:
Removing instruction __breturn:
Removing instruction form_field_ptr_from_form_control:
Removing instruction __b18:
Removing instruction __b1_from___b18:
Removing instruction __b7:
Removing instruction keyboard_event_scan_from___b3:
Removing instruction __b19:
Removing instruction __b20:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b14_from___b9:
Removing instruction __b14_from___b13:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b17:
Removing instruction __breturn_from___b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __breturn:
Removing instruction __b13_from___b14:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __breturn_from___b14:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn_from___b5:
Removing instruction __b2:
Removing instruction __breturn_from___b2:
Removing instruction __b7_from_keyboard_event_scan:
Removing instruction __b19:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction __b20:
Removing instruction __b18:
Removing instruction __b21:
Removing instruction __b4:
Removing instruction __b22:
Removing instruction __b5:
Removing instruction __b23:
Removing instruction __b6:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b1:
Removing instruction __breturn_from___b1:
Removing instruction __b1_from_bitmap_init:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction memset_from_bitmap_clear:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction abs_u16_from_bitmap_line:
Removing instruction __b12:
Removing instruction abs_u16_from___b12:
Removing instruction __b13:
Removing instruction __b18:
Removing instruction sgn_u16_from___b1:
Removing instruction __b14:
Removing instruction sgn_u16_from___b14:
Removing instruction __b15:
Removing instruction __b5:
Removing instruction bitmap_plot_from___b6:
Removing instruction __b16:
Removing instruction __b8:
Removing instruction bitmap_plot_from___b3:
Removing instruction bitmap_plot_from___b9:
Removing instruction __b17:
Removing instruction __b11:
Removing instruction bitmap_plot_from___b4:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_fill:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_print_str_at:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn_from_sgn_u16:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __b14 in bne __b23
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn_from___b6 in bne __b6
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __b9 in bne __b9_from___b10
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b1
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b3_from___b6 to __b2
Relabelling long label __b1_from_gfx_mode to __b10
Relabelling long label __b7_from___b6 to __b11
Relabelling long label __b9_from___b8 to __b12
Relabelling long label __b24_from___b22 to __b13
Relabelling long label __b4_from___b3 to __b5
Relabelling long label __b2_from___b12 to __b3
Relabelling long label __b2_from___b10 to __b4
Relabelling long label __b2_from___b11 to __b5
Relabelling long label __b2_from___b3 to __b6
Relabelling long label __b2_from___b4 to __b7
Relabelling long label __b2_from___b5 to __b8
Relabelling long label __b2_from___b6 to __b9
Relabelling long label __b2_from___b7 to __b10
Relabelling long label __b2_from___b8 to __b11
Relabelling long label __b2_from___b9 to __b12
Relabelling long label __breturn_from___b6 to __b7
Relabelling long label __b2_from___b12 to __b3
Relabelling long label __b2_from___b10 to __b4
Relabelling long label __b2_from___b11 to __b5
Relabelling long label __b2_from___b3 to __b6
Relabelling long label __b2_from___b4 to __b7
Relabelling long label __b2_from___b5 to __b8
Relabelling long label __b2_from___b6 to __b9
Relabelling long label __b2_from___b7 to __b10
Relabelling long label __b2_from___b8 to __b11
Relabelling long label __b2_from___b9 to __b12
Relabelling long label __breturn_from___b10 to __b2
Relabelling long label __breturn_from___b11 to __b3
Relabelling long label __breturn_from___b12 to __b4
Relabelling long label __breturn_from___b13 to __b5
Relabelling long label __breturn_from___b2 to __b6
Relabelling long label __breturn_from___b3 to __b7
Relabelling long label __breturn_from___b4 to __b8
Relabelling long label __breturn_from___b5 to __b9
Relabelling long label __breturn_from___b6 to __b10
Relabelling long label __breturn_from___b7 to __b11
Relabelling long label __breturn_from___b8 to __b12
Relabelling long label __breturn_from___b9 to __b13
Relabelling long label __breturn_from___b2 to __b2
Relabelling long label __breturn_from___b3 to __b3
Relabelling long label __breturn_from___b4 to __b4
Relabelling long label __b1_from___b20 to __b4
Relabelling long label __b9_from___b10 to __b5
Relabelling long label __b9_from___b19 to __b6
Relabelling long label __breturn_from_keyboard_event_get to __b1
Relabelling long label __breturn_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b23
Removing instruction jmp __b24
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b14
Removing instruction jmp __b7
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Removing instruction lda form_fields_val
Removing instruction ldy.z form_field_idx
Removing instruction ldy.z form_field_idx
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Removing instruction __b23:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp __b14
Removing unreachable instruction jmp __b7
Removing unreachable instruction jmp __b9
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [1491] bmi __b2 to bpl
Fixing long branch [1691] beq __b6 to bne
Fixing long branch [1695] beq __b7 to bne
Fixing long branch [1699] beq __b8 to bne
Fixing long branch [1703] beq __b9 to bne
Fixing long branch [1707] beq __b10 to bne
Fixing long branch [1711] beq __b11 to bne
Fixing long branch [1715] beq __b12 to bne
Fixing long branch [1719] beq __b13 to bne
Fixing long branch [2167] beq __b4 to bne

FINAL SYMBOL TABLE
const nomodify byte* CHARGEN = (byte*) 53248
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*) 56320
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*) 56576
const nomodify byte* COLS = (byte*) 55296
const nomodify byte DTV_BORDER_OFF = 2
const nomodify byte DTV_CHUNKY = $40
const nomodify byte DTV_COLORRAM_OFF = $10
const nomodify dword DTV_COLOR_BANK_DEFAULT = $1d800
const nomodify byte* DTV_COLOR_BANK_HI = (byte*) 53303
const nomodify byte* DTV_COLOR_BANK_LO = (byte*) 53302
const nomodify byte* DTV_CONTROL = (byte*) 53308
const nomodify byte* DTV_FEATURE = (byte*) 53311
const nomodify byte DTV_FEATURE_ENABLE = 1
const nomodify byte* DTV_GRAPHICS_VIC_BANK = (byte*) 53309
const nomodify byte DTV_HIGHCOLOR = 4
const nomodify byte DTV_LINEAR = 1
const nomodify byte DTV_OVERSCAN = 8
const nomodify byte* DTV_PALETTE = (byte*) 53760
const byte* DTV_PALETTE_DEFAULT[$10]  = { 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a }
const nomodify byte* DTV_PLANEA_MODULO_HI = (byte*) 53305
const nomodify byte* DTV_PLANEA_MODULO_LO = (byte*) 53304
const nomodify byte* DTV_PLANEA_START_HI = (byte*) 53317
const nomodify byte* DTV_PLANEA_START_LO = (byte*) 53306
const nomodify byte* DTV_PLANEA_START_MI = (byte*) 53307
const nomodify byte* DTV_PLANEA_STEP = (byte*) 53318
const nomodify byte* DTV_PLANEB_MODULO_HI = (byte*) 53320
const nomodify byte* DTV_PLANEB_MODULO_LO = (byte*) 53319
const nomodify byte* DTV_PLANEB_START_HI = (byte*) 53323
const nomodify byte* DTV_PLANEB_START_LO = (byte*) 53321
const nomodify byte* DTV_PLANEB_START_MI = (byte*) 53322
const nomodify byte* DTV_PLANEB_STEP = (byte*) 53324
const nomodify byte* FORM_CHARSET = (byte*) 6144
const byte* FORM_COLS[]  = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
const nomodify signed byte FORM_CURSOR_BLINK = $28
const nomodify byte* FORM_SCREEN = (byte*) 1024
const byte* FORM_TEXT[]  = " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
const nomodify byte KEY_COMMODORE = $3d
const nomodify byte KEY_CRSR_DOWN = 7
const nomodify byte KEY_CRSR_RIGHT = 2
const nomodify byte KEY_CTRL = $3a
const nomodify byte KEY_LSHIFT = $f
const nomodify byte KEY_MODIFIER_COMMODORE = 8
const nomodify byte KEY_MODIFIER_CTRL = 4
const nomodify byte KEY_MODIFIER_LSHIFT = 1
const nomodify byte KEY_MODIFIER_RSHIFT = 2
const nomodify byte KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
const nomodify byte KEY_RSHIFT = $34
const nomodify byte KEY_SPACE = $3c
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR = 3
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1 = $22
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2 = $23
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3 = $24
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
const byte OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const nomodify dword PLANE_8BPP_CHUNKY = $20000
const nomodify dword PLANE_BLANK = $38000
const nomodify dword PLANE_CHARSET8 = $3c000
const nomodify dword PLANE_FULL = $3a000
const nomodify dword PLANE_HORISONTAL = $30000
const nomodify dword PLANE_HORISONTAL2 = $34000
const nomodify dword PLANE_VERTICAL = $32000
const nomodify dword PLANE_VERTICAL2 = $36000
const nomodify byte* PROCPORT = (byte*) 1
const nomodify byte* PROCPORT_DDR = (byte*) 0
const nomodify byte PROCPORT_DDR_MEMORY_MASK = 7
const nomodify byte PROCPORT_RAM_CHARROM = 1
const nomodify byte PROCPORT_RAM_IO = 5
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
const nomodify byte* VICII_BITMAP = (byte*) 24576
const nomodify byte VICII_BMM = $20
const nomodify byte* VICII_CHARSET_ROM = (byte*) 22528
const nomodify byte* VICII_CONTROL1 = (byte*) 53265
const nomodify byte* VICII_CONTROL2 = (byte*) 53270
const nomodify byte VICII_CSEL = 8
const nomodify byte VICII_DEN = $10
const nomodify byte VICII_ECM = $40
const nomodify byte VICII_MCM = $10
const nomodify byte* VICII_MEMORY = (byte*) 53272
const nomodify byte VICII_RSEL = 8
const nomodify byte* VICII_SCREEN0 = (byte*) 16384
const nomodify byte* VICII_SCREEN1 = (byte*) 17408
const nomodify byte* VICII_SCREEN2 = (byte*) 18432
const nomodify byte* VICII_SCREEN3 = (byte*) 19456
const nomodify byte* VICII_SCREEN4 = (byte*) 20480
const nomodify byte WHITE = 1
word abs_u16(word abs_u16::w)
byte~ abs_u16::$0 reg byte a 200002.0
byte~ abs_u16::$1 reg byte a 200002.0
word abs_u16::return
word abs_u16::return#0 return zp[2]:17 20002.0
word abs_u16::return#1 return zp[2]:17 20002.0
word abs_u16::return#2 return zp[2]:17 200002.0
word abs_u16::return#4 return zp[2]:17 55001.0
word abs_u16::w
word abs_u16::w#0 w zp[2]:17 20002.0
word abs_u16::w#1 w zp[2]:17 20002.0
word abs_u16::w#2 w zp[2]:17 80001.25
void apply_preset(byte apply_preset::idx)
byte apply_preset::i
byte apply_preset::i#1 reg byte y 2.00000002E8
byte apply_preset::i#2 reg byte y 1.6666666833333334E8
byte apply_preset::idx
byte apply_preset::idx#0 reg byte a 100910.18181818182
byte* apply_preset::preset
byte* apply_preset::preset#15 preset zp[2]:13 2.00000002E7
void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
byte bitmap_clear::bgcol
byte bitmap_clear::col
const byte bitmap_clear::col#0 col = WHITE*$10
byte bitmap_clear::fgcol
byte* bitmap_gfx
void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
byte~ bitmap_init::$4 reg byte a 20002.0
byte~ bitmap_init::$5 reg byte a 20002.0
byte~ bitmap_init::$6 reg byte a 20002.0
byte~ bitmap_init::$7 zp[1]:37 5000.5
byte bitmap_init::bits
byte bitmap_init::bits#1 reg byte a 10001.0
byte bitmap_init::bits#3 reg byte a 15001.5
byte bitmap_init::bits#4 reg byte a 6667.333333333333
byte* bitmap_init::gfx
byte* bitmap_init::screen
byte bitmap_init::x
byte bitmap_init::x#1 reg byte x 15001.5
byte bitmap_init::x#2 reg byte x 5000.5
byte bitmap_init::y
byte bitmap_init::y#1 reg byte x 15001.5
byte bitmap_init::y#2 reg byte x 5000.5
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#1 yoffs zp[2]:15 20002.0
byte* bitmap_init::yoffs#2 yoffs zp[2]:15 6250.625
byte* bitmap_init::yoffs#4 yoffs zp[2]:15 10001.0
void bitmap_line(word bitmap_line::x1 , word bitmap_line::y1 , word bitmap_line::x2 , word bitmap_line::y2)
word bitmap_line::dx
word bitmap_line::dx#0 dx zp[2]:29 76000.175
word bitmap_line::dy
word bitmap_line::dy#0 dy zp[2]:17 84444.63888888889
word bitmap_line::e
word bitmap_line::e#0 e zp[2]:11 20002.0
word bitmap_line::e#1 e zp[2]:11 1333334.6666666667
word bitmap_line::e#2 e zp[2]:11 2000002.0
word bitmap_line::e#3 e zp[2]:11 402000.60000000003
word bitmap_line::e#6 e zp[2]:11 1500001.5
word bitmap_line::e1
word bitmap_line::e1#0 e1 zp[2]:15 20002.0
word bitmap_line::e1#1 e1 zp[2]:15 1333334.6666666667
word bitmap_line::e1#2 e1 zp[2]:15 2000002.0
word bitmap_line::e1#3 e1 zp[2]:15 402000.60000000003
word bitmap_line::e1#6 e1 zp[2]:15 1500001.5
word bitmap_line::sx
word bitmap_line::sx#0 sx zp[2]:35 67000.1
word bitmap_line::sy
word bitmap_line::sy#0 sy zp[2]:19 77307.80769230769
word bitmap_line::x
word bitmap_line::x#1 x zp[2]:13 1000001.0
word bitmap_line::x#12 x zp[2]:13 2000002.0
word bitmap_line::x#13 x zp[2]:13 572857.857142857
word bitmap_line::x#15 x zp[2]:13 571429.1428571428
word bitmap_line::x#6 x zp[2]:13 2010003.0
word bitmap_line::x#7 x zp[2]:13 752501.0
word bitmap_line::x1
word bitmap_line::x1#0 x1 zp[2]:13 2040.24
word bitmap_line::x2
word bitmap_line::x2#0 x2 zp[2]:23 30939.515151515152
word bitmap_line::y
word bitmap_line::y#1 y zp[2]:27 571429.1428571428
word bitmap_line::y#13 y zp[2]:27 2000002.0
word bitmap_line::y#15 y zp[2]:27 430000.57142857136
word bitmap_line::y#2 y zp[2]:27 1000001.0
word bitmap_line::y#4 y zp[2]:27 502500.75
word bitmap_line::y#7 y zp[2]:27 1000001.0
word bitmap_line::y1
word bitmap_line::y1#0 y1 zp[2]:27 1640.2
word bitmap_line::y2
word bitmap_line::y2#0 y2 zp[2]:25 31906.375
void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
word~ bitmap_plot::$0 zp[2]:41 2.0000002E7
byte~ bitmap_plot::$1 reg byte x 2.0000002E7
byte* bitmap_plot::plotter
word bitmap_plot::plotter#0 plotter zp[2]:39 5000000.5
byte* bitmap_plot::plotter#1 plotter zp[2]:39 1.50000015E7
word bitmap_plot::x
word bitmap_plot::x#0 x zp[2]:13 10001.0
word bitmap_plot::x#1 x zp[2]:13 1000001.0
word bitmap_plot::x#2 x zp[2]:13 10001.0
word bitmap_plot::x#3 x zp[2]:13 1000001.0
word bitmap_plot::x#4 x zp[2]:13 5505001.5
byte bitmap_plot::y
byte bitmap_plot::y#0 reg byte a 20002.0
byte bitmap_plot::y#1 reg byte a 2000002.0
byte bitmap_plot::y#2 reg byte a 20002.0
byte bitmap_plot::y#3 reg byte a 2000002.0
byte bitmap_plot::y#4 reg byte a 2.2020006E7
const to_nomodify byte* bitmap_plot_bit[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_yhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_ylo[$100]  = { fill( $100, 0) }
byte* bitmap_screen
void dtvSetCpuBankSegment1(byte dtvSetCpuBankSegment1::cpuBankIdx)
const byte* dtvSetCpuBankSegment1::cpuBank = (byte*) 255
byte dtvSetCpuBankSegment1::cpuBankIdx
byte dtvSetCpuBankSegment1::cpuBankIdx#1 reg byte a 20002.0
byte dtvSetCpuBankSegment1::cpuBankIdx#11 reg byte a 2002.0
byte dtvSetCpuBankSegment1::cpuBankIdx#13 reg byte a 111003.0
const nomodify byte* form_VICII_bg0_hi = form_fields_val+$1c
const nomodify byte* form_VICII_bg0_lo = form_fields_val+$1d
const nomodify byte* form_VICII_bg1_hi = form_fields_val+$1e
const nomodify byte* form_VICII_bg1_lo = form_fields_val+$1f
const nomodify byte* form_VICII_bg2_hi = form_fields_val+$20
const nomodify byte* form_VICII_bg2_lo = form_fields_val+$21
const nomodify byte* form_VICII_bg3_hi = form_fields_val+$22
const nomodify byte* form_VICII_bg3_lo = form_fields_val+$23
const nomodify byte* form_VICII_cols = form_fields_val+$1a
const nomodify byte* form_VICII_gfx = form_fields_val+$19
const nomodify byte* form_VICII_screen = form_fields_val+$18
const nomodify byte* form_a_mod_hi = form_fields_val+$f
const nomodify byte* form_a_mod_lo = form_fields_val+$10
const nomodify byte* form_a_pattern = form_fields_val+$a
const nomodify byte* form_a_start_hi = form_fields_val+$b
const nomodify byte* form_a_start_lo = form_fields_val+$c
const nomodify byte* form_a_step_hi = form_fields_val+$d
const nomodify byte* form_a_step_lo = form_fields_val+$e
const nomodify byte* form_b_mod_hi = form_fields_val+$16
const nomodify byte* form_b_mod_lo = form_fields_val+$17
const nomodify byte* form_b_pattern = form_fields_val+$11
const nomodify byte* form_b_start_hi = form_fields_val+$12
const nomodify byte* form_b_start_lo = form_fields_val+$13
const nomodify byte* form_b_step_hi = form_fields_val+$14
const nomodify byte* form_b_step_lo = form_fields_val+$15
byte form_control()
byte~ form_control::$12 reg byte a 2000002.0
byte~ form_control::$13 reg byte a 2000002.0
byte~ form_control::$14 reg byte a 2000002.0
byte~ form_control::$15 reg byte a 2000002.0
byte~ form_control::$22 reg byte a 2000002.0
byte* form_control::field
byte* form_control::field#0 field zp[2]:29 296296.5925925926
byte form_control::key_event
byte form_control::key_event#0 reg byte a 1333334.6666666667
byte form_control::return
byte form_control::return#0 reg byte a 200002.0
byte form_control::return#2 reg byte x 33333.666666666664
const nomodify byte* form_ctrl_bmm = form_fields_val+1
const nomodify byte* form_ctrl_borof = form_fields_val+8
const nomodify byte* form_ctrl_chunk = form_fields_val+7
const nomodify byte* form_ctrl_colof = form_fields_val+6
const nomodify byte* form_ctrl_ecm = form_fields_val+3
const nomodify byte* form_ctrl_hicol = form_fields_val+4
const nomodify byte* form_ctrl_line = form_fields_val+5
const nomodify byte* form_ctrl_mcm = form_fields_val+2
const nomodify byte* form_ctrl_overs = form_fields_val+9
signed byte form_cursor_count
signed byte form_cursor_count#1 form_cursor_count zp[1]:3 2.871794871794872
signed byte form_cursor_count#16 form_cursor_count zp[1]:3 200000.2
signed byte form_cursor_count#17 form_cursor_count zp[1]:3 182942.11764705883
signed byte form_cursor_count#23 form_cursor_count zp[1]:3 158586.2857142857
signed byte form_cursor_count#4 form_cursor_count zp[1]:3 1000001.0
const nomodify byte* form_dtv_palet = form_fields_val+$1b
byte form_field_idx
byte form_field_idx#1 form_field_idx zp[1]:4 2.871794871794872
byte form_field_idx#19 form_field_idx zp[1]:4 241765.70588235295
byte form_field_idx#30 form_field_idx zp[1]:4 438721.0256410255
byte form_field_idx#33 form_field_idx zp[1]:4 3000003.0
byte form_field_idx#4 form_field_idx zp[1]:4 1000001.0
byte form_field_idx#5 form_field_idx zp[1]:4 1000001.0
byte* form_field_ptr(byte form_field_ptr::field_idx)
byte* form_field_ptr::field
byte form_field_ptr::field_idx
byte form_field_ptr::field_idx#0 reg byte x 2.00000002E8
byte form_field_ptr::field_idx#1 reg byte x 2000002.0
byte form_field_ptr::field_idx#2 reg byte x 7.003333346666667E8
byte* form_field_ptr::line
word form_field_ptr::line#0 line zp[2]:39 2.000000002E8
byte* form_field_ptr::return
byte* form_field_ptr::return#0 return zp[2]:29 3.336666673333334E8
byte* form_field_ptr::return#3 return zp[2]:29 2000002.0
byte form_field_ptr::x
byte form_field_ptr::x#0 x zp[1]:37 5.2500000075E8
byte form_field_ptr::y
byte form_field_ptr::y#0 reg byte y 3.000000003E9
const byte form_fields_cnt = $24
const byte* form_fields_max[]  = { $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f }
const byte* form_fields_val[]  = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* form_fields_x[]  = { 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25 }
const byte* form_fields_y[]  = { 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e }
const byte* form_line_hi[$19]  = { fill( $19, 0) }
const byte* form_line_lo[$19]  = { fill( $19, 0) }
void form_mode()
byte~ form_mode::$11 reg byte a 200002.0
byte form_mode::i
byte form_mode::i#1 reg byte x 15001.5
byte form_mode::i#2 reg byte x 20002.0
byte form_mode::preset_current
byte form_mode::preset_current#0 preset_current zp[1]:2 202.0
byte form_mode::preset_current#1 preset_current zp[1]:2 5000.5
byte form_mode::preset_current#6 preset_current zp[1]:2 38763.125
void form_render_values()
byte* form_render_values::field
byte form_render_values::idx
byte form_render_values::idx#1 reg byte x 2.00000002E8
byte form_render_values::idx#2 reg byte x 1.00000001E8
void form_set_screen(byte* form_set_screen::screen)
byte~ form_set_screen::$0 reg byte a 200002.0
byte~ form_set_screen::$1 reg byte a 200002.0
byte* form_set_screen::line
byte* form_set_screen::line#1 line zp[2]:15 66667.33333333333
byte* form_set_screen::line#2 line zp[2]:15 80000.8
byte* form_set_screen::screen
byte form_set_screen::y
byte form_set_screen::y#1 reg byte x 150001.5
byte form_set_screen::y#2 reg byte x 66667.33333333333
byte* get_VICII_charset(byte get_VICII_charset::idx)
byte get_VICII_charset::idx
byte get_VICII_charset::idx#0 reg byte a 1051.5
byte* get_VICII_charset::return
byte* get_VICII_charset::return#2 return zp[2]:15 33.666666666666664
byte* get_VICII_charset::return#4 return zp[2]:15 202.0
byte* get_VICII_screen(byte get_VICII_screen::idx)
byte get_VICII_screen::idx
byte get_VICII_screen::idx#0 reg byte a 202.0
byte get_VICII_screen::idx#1 reg byte a 202.0
byte get_VICII_screen::idx#2 reg byte a 1041.4
byte* get_VICII_screen::return
byte* get_VICII_screen::return#10 return zp[2]:11 202.0
byte* get_VICII_screen::return#11 return zp[2]:11 202.0
byte* get_VICII_screen::return#5 return zp[2]:11 50.5
dword get_plane(byte get_plane::idx)
byte get_plane::idx
byte get_plane::idx#0 reg byte a 202.0
byte get_plane::idx#1 reg byte a 202.0
byte get_plane::idx#10 reg byte a 1015.4285714285714
dword get_plane::return
dword get_plane::return#14 return zp[4]:5 50.5
dword get_plane::return#16 return zp[4]:5 202.0
dword get_plane::return#17 return zp[4]:5 202.0
void gfx_init()
void gfx_init_VICII_bitmap()
byte gfx_init_VICII_bitmap::l
byte gfx_init_VICII_bitmap::l#1 l zp[1]:4 2002.0
byte gfx_init_VICII_bitmap::l#2 l zp[1]:4 1001.0
const byte gfx_init_VICII_bitmap::lines_cnt = 9
const byte* gfx_init_VICII_bitmap::lines_x[]  = { 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80 }
const byte* gfx_init_VICII_bitmap::lines_y[]  = { 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0 }
void gfx_init_charset()
byte gfx_init_charset::c
byte gfx_init_charset::c#1 c zp[1]:3 1501.5
byte gfx_init_charset::c#4 c zp[1]:3 286.0
byte* gfx_init_charset::chargen
byte* gfx_init_charset::chargen#1 chargen zp[2]:13 4200.6
byte* gfx_init_charset::chargen#2 chargen zp[2]:13 10334.666666666666
byte* gfx_init_charset::chargen#3 chargen zp[2]:13 2002.0
byte* gfx_init_charset::charset
byte* gfx_init_charset::charset#1 charset zp[2]:11 3500.5
byte* gfx_init_charset::charset#2 charset zp[2]:11 15502.0
byte* gfx_init_charset::charset#3 charset zp[2]:11 2002.0
byte gfx_init_charset::l
byte gfx_init_charset::l#1 reg byte x 15001.5
byte gfx_init_charset::l#2 reg byte x 5000.5
void gfx_init_plane_8bppchunky()
word~ gfx_init_plane_8bppchunky::$5 zp[2]:27 10001.0
byte gfx_init_plane_8bppchunky::c
byte gfx_init_plane_8bppchunky::c#0 reg byte a 20002.0
byte* gfx_init_plane_8bppchunky::gfxb
byte* gfx_init_plane_8bppchunky::gfxb#1 gfxb zp[2]:13 4200.6
byte* gfx_init_plane_8bppchunky::gfxb#3 gfxb zp[2]:13 15502.0
byte* gfx_init_plane_8bppchunky::gfxb#4 gfxb zp[2]:13 7500.75
byte* gfx_init_plane_8bppchunky::gfxb#5 gfxb zp[2]:13 2002.0
byte gfx_init_plane_8bppchunky::gfxbCpuBank
byte gfx_init_plane_8bppchunky::gfxbCpuBank#2 reg byte x 20002.0
byte gfx_init_plane_8bppchunky::gfxbCpuBank#4 reg byte x 10251.25
byte gfx_init_plane_8bppchunky::gfxbCpuBank#7 reg byte x 2002.0
byte gfx_init_plane_8bppchunky::gfxbCpuBank#8 reg byte x 3444.8888888888887
word gfx_init_plane_8bppchunky::x
word gfx_init_plane_8bppchunky::x#1 x zp[2]:11 15001.5
word gfx_init_plane_8bppchunky::x#2 x zp[2]:11 3000.3
byte gfx_init_plane_8bppchunky::y
byte gfx_init_plane_8bppchunky::y#1 y zp[1]:4 1501.5
byte gfx_init_plane_8bppchunky::y#6 y zp[1]:4 923.3076923076923
void gfx_init_plane_blank()
void gfx_init_plane_charset8()
byte~ gfx_init_plane_charset8::$2 reg byte a 200002.0
byte gfx_init_plane_charset8::bits
byte gfx_init_plane_charset8::bits#0 bits zp[1]:21 10001.0
byte gfx_init_plane_charset8::bits#1 bits zp[1]:21 50000.5
byte gfx_init_plane_charset8::bits#2 bits zp[1]:21 44286.28571428572
byte gfx_init_plane_charset8::c
byte gfx_init_plane_charset8::c#2 reg byte a 200002.0
byte gfx_init_plane_charset8::c#3 reg byte a 200002.0
byte gfx_init_plane_charset8::ch
byte gfx_init_plane_charset8::ch#1 ch zp[1]:9 1501.5
byte gfx_init_plane_charset8::ch#8 ch zp[1]:9 117.76470588235294
byte* gfx_init_plane_charset8::chargen
byte* gfx_init_plane_charset8::chargen#1 chargen zp[2]:13 1312.6875
byte* gfx_init_plane_charset8::chargen#2 chargen zp[2]:13 15502.0
byte* gfx_init_plane_charset8::chargen#3 chargen zp[2]:13 2002.0
byte gfx_init_plane_charset8::col
byte gfx_init_plane_charset8::col#1 col zp[1]:22 30143.428571428572
byte gfx_init_plane_charset8::col#2 col zp[1]:22 38750.5
byte gfx_init_plane_charset8::col#5 col zp[1]:22 7001.0
byte gfx_init_plane_charset8::col#6 col zp[1]:22 2002.0
byte gfx_init_plane_charset8::cp
byte gfx_init_plane_charset8::cp#1 reg byte x 150001.5
byte gfx_init_plane_charset8::cp#2 reg byte x 22222.444444444445
byte gfx_init_plane_charset8::cr
byte gfx_init_plane_charset8::cr#1 cr zp[1]:10 15001.5
byte gfx_init_plane_charset8::cr#6 cr zp[1]:10 1428.7142857142858
byte* gfx_init_plane_charset8::gfxa
byte* gfx_init_plane_charset8::gfxa#1 gfxa zp[2]:11 23444.88888888889
byte* gfx_init_plane_charset8::gfxa#2 gfxa zp[2]:11 51667.33333333333
byte* gfx_init_plane_charset8::gfxa#5 gfxa zp[2]:11 7001.0
byte* gfx_init_plane_charset8::gfxa#6 gfxa zp[2]:11 2002.0
byte gfx_init_plane_charset8::gfxbCpuBank
const byte gfx_init_plane_charset8::gfxbCpuBank#0 gfxbCpuBank = (byte)PLANE_CHARSET8/$4000
void gfx_init_plane_fill(dword gfx_init_plane_fill::plane_addr , byte gfx_init_plane_fill::fill)
dword~ gfx_init_plane_fill::$0 zp[4]:31 2002.0
word~ gfx_init_plane_fill::$1 zp[2]:35 2002.0
word~ gfx_init_plane_fill::$4 zp[2]:11 2002.0
word~ gfx_init_plane_fill::$5 zp[2]:11 2002.0
byte gfx_init_plane_fill::bx
byte gfx_init_plane_fill::bx#1 reg byte x 150001.5
byte gfx_init_plane_fill::bx#2 reg byte x 66667.33333333333
byte gfx_init_plane_fill::by
byte gfx_init_plane_fill::by#1 by zp[1]:10 15001.5
byte gfx_init_plane_fill::by#4 by zp[1]:10 3333.6666666666665
byte gfx_init_plane_fill::fill
byte gfx_init_plane_fill::fill#6 fill zp[1]:9 5555.611111111111
byte* gfx_init_plane_fill::gfxb
word gfx_init_plane_fill::gfxb#0 gfxb zp[2]:11 1001.0
byte* gfx_init_plane_fill::gfxb#1 gfxb zp[2]:11 42000.600000000006
byte* gfx_init_plane_fill::gfxb#2 gfxb zp[2]:11 155002.0
byte* gfx_init_plane_fill::gfxb#3 gfxb zp[2]:11 21003.0
byte* gfx_init_plane_fill::gfxb#6 gfxb zp[2]:11 2002.0
byte gfx_init_plane_fill::gfxbCpuBank
byte gfx_init_plane_fill::gfxbCpuBank#0 reg byte a 2002.0
dword gfx_init_plane_fill::plane_addr
dword gfx_init_plane_fill::plane_addr#3 plane_addr zp[4]:5 333.6666666666667
void gfx_init_plane_full()
void gfx_init_plane_horisontal()
byte~ gfx_init_plane_horisontal::$2 reg byte a 20002.0
byte gfx_init_plane_horisontal::ax
byte gfx_init_plane_horisontal::ax#1 reg byte x 15001.5
byte gfx_init_plane_horisontal::ax#2 reg byte x 2500.25
byte gfx_init_plane_horisontal::ay
byte gfx_init_plane_horisontal::ay#1 ay zp[1]:9 1501.5
byte gfx_init_plane_horisontal::ay#4 ay zp[1]:9 1091.181818181818
byte* gfx_init_plane_horisontal::gfxa
byte* gfx_init_plane_horisontal::gfxa#1 gfxa zp[2]:11 20002.0
byte* gfx_init_plane_horisontal::gfxa#2 gfxa zp[2]:11 20002.0
byte* gfx_init_plane_horisontal::gfxa#3 gfxa zp[2]:11 10201.2
byte* gfx_init_plane_horisontal::gfxa#6 gfxa zp[2]:11 2002.0
byte* gfx_init_plane_horisontal::gfxa#7 gfxa zp[2]:11 6200.8
byte gfx_init_plane_horisontal::gfxbCpuBank
const byte gfx_init_plane_horisontal::gfxbCpuBank#0 gfxbCpuBank = (byte)PLANE_HORISONTAL/$4000
void gfx_init_plane_horisontal2()
byte~ gfx_init_plane_horisontal2::$2 reg byte a 20002.0
byte gfx_init_plane_horisontal2::ax
byte gfx_init_plane_horisontal2::ax#1 reg byte x 15001.5
byte gfx_init_plane_horisontal2::ax#2 reg byte x 4000.4
byte gfx_init_plane_horisontal2::ay
byte gfx_init_plane_horisontal2::ay#1 ay zp[1]:21 1501.5
byte gfx_init_plane_horisontal2::ay#4 ay zp[1]:21 1500.375
byte* gfx_init_plane_horisontal2::gfxa
byte* gfx_init_plane_horisontal2::gfxa#1 gfxa zp[2]:13 4200.6
byte* gfx_init_plane_horisontal2::gfxa#2 gfxa zp[2]:13 7751.0
byte* gfx_init_plane_horisontal2::gfxa#3 gfxa zp[2]:13 2002.0
byte gfx_init_plane_horisontal2::gfxbCpuBank
const byte gfx_init_plane_horisontal2::gfxbCpuBank#0 gfxbCpuBank = (byte)PLANE_HORISONTAL2/$4000
byte gfx_init_plane_horisontal2::row
byte gfx_init_plane_horisontal2::row#0 reg byte a 20002.0
const byte* gfx_init_plane_horisontal2::row_bitmask[]  = { 0, $55, $aa, $ff }
void gfx_init_plane_vertical()
byte gfx_init_plane_vertical::bx
byte gfx_init_plane_vertical::bx#1 reg byte x 15001.5
byte gfx_init_plane_vertical::bx#2 reg byte x 6667.333333333333
byte gfx_init_plane_vertical::by
byte gfx_init_plane_vertical::by#1 by zp[1]:10 1501.5
byte gfx_init_plane_vertical::by#4 by zp[1]:10 333.6666666666667
byte* gfx_init_plane_vertical::gfxb
byte* gfx_init_plane_vertical::gfxb#1 gfxb zp[2]:13 4200.6
byte* gfx_init_plane_vertical::gfxb#2 gfxb zp[2]:13 15502.0
byte* gfx_init_plane_vertical::gfxb#3 gfxb zp[2]:13 2002.0
byte gfx_init_plane_vertical::gfxbCpuBank
const byte gfx_init_plane_vertical::gfxbCpuBank#0 gfxbCpuBank = (byte)PLANE_VERTICAL/$4000
void gfx_init_plane_vertical2()
void gfx_init_screen0()
byte~ gfx_init_screen0::$0 reg byte a 20002.0
byte~ gfx_init_screen0::$1 zp[1]:22 10001.0
byte~ gfx_init_screen0::$2 reg byte a 20002.0
byte~ gfx_init_screen0::$3 reg byte a 20002.0
byte* gfx_init_screen0::ch
byte* gfx_init_screen0::ch#1 ch zp[2]:11 4200.6
byte* gfx_init_screen0::ch#2 ch zp[2]:11 5167.333333333333
byte* gfx_init_screen0::ch#3 ch zp[2]:11 2002.0
byte gfx_init_screen0::cx
byte gfx_init_screen0::cx#1 reg byte x 15001.5
byte gfx_init_screen0::cx#2 reg byte x 4286.142857142857
byte gfx_init_screen0::cy
byte gfx_init_screen0::cy#1 cy zp[1]:3 1501.5
byte gfx_init_screen0::cy#4 cy zp[1]:3 1200.3
void gfx_init_screen1()
byte~ gfx_init_screen1::$0 reg byte a 20002.0
byte~ gfx_init_screen1::$1 reg byte a 20002.0
byte* gfx_init_screen1::ch
byte* gfx_init_screen1::ch#1 ch zp[2]:13 4200.6
byte* gfx_init_screen1::ch#2 ch zp[2]:13 7751.0
byte* gfx_init_screen1::ch#3 ch zp[2]:13 2002.0
byte gfx_init_screen1::cx
byte gfx_init_screen1::cx#1 reg byte x 15001.5
byte gfx_init_screen1::cx#2 reg byte x 6000.6
byte gfx_init_screen1::cy
byte gfx_init_screen1::cy#1 cy zp[1]:4 1501.5
byte gfx_init_screen1::cy#4 cy zp[1]:4 1500.375
void gfx_init_screen2()
byte~ gfx_init_screen2::$0 reg byte a 20002.0
byte~ gfx_init_screen2::$3 reg byte a 20002.0
byte~ gfx_init_screen2::$4 reg byte a 20002.0
byte* gfx_init_screen2::ch
byte* gfx_init_screen2::ch#1 ch zp[2]:11 4200.6
byte* gfx_init_screen2::ch#2 ch zp[2]:11 4429.142857142857
byte* gfx_init_screen2::ch#3 ch zp[2]:11 2002.0
byte gfx_init_screen2::col
byte gfx_init_screen2::col#0 reg byte y 15001.5
byte gfx_init_screen2::col2
byte gfx_init_screen2::col2#0 col2 zp[1]:22 10001.0
byte gfx_init_screen2::cx
byte gfx_init_screen2::cx#1 reg byte x 15001.5
byte gfx_init_screen2::cx#2 reg byte x 3750.375
byte gfx_init_screen2::cy
byte gfx_init_screen2::cy#1 cy zp[1]:2 1501.5
byte gfx_init_screen2::cy#4 cy zp[1]:2 1091.181818181818
void gfx_init_screen3()
byte~ gfx_init_screen3::$0 reg byte a 20002.0
byte~ gfx_init_screen3::$1 zp[1]:37 10001.0
byte~ gfx_init_screen3::$2 reg byte a 20002.0
byte~ gfx_init_screen3::$3 reg byte a 20002.0
byte* gfx_init_screen3::ch
byte* gfx_init_screen3::ch#1 ch zp[2]:11 4200.6
byte* gfx_init_screen3::ch#2 ch zp[2]:11 5167.333333333333
byte* gfx_init_screen3::ch#3 ch zp[2]:11 2002.0
byte gfx_init_screen3::cx
byte gfx_init_screen3::cx#1 reg byte x 15001.5
byte gfx_init_screen3::cx#2 reg byte x 4286.142857142857
byte gfx_init_screen3::cy
byte gfx_init_screen3::cy#1 cy zp[1]:2 1501.5
byte gfx_init_screen3::cy#4 cy zp[1]:2 1200.3
void gfx_init_screen4()
byte* gfx_init_screen4::ch
byte* gfx_init_screen4::ch#1 ch zp[2]:13 4200.6
byte* gfx_init_screen4::ch#2 ch zp[2]:13 15502.0
byte* gfx_init_screen4::ch#3 ch zp[2]:13 2002.0
byte gfx_init_screen4::cx
byte gfx_init_screen4::cx#1 reg byte x 15001.5
byte gfx_init_screen4::cx#2 reg byte x 6667.333333333333
byte gfx_init_screen4::cy
byte gfx_init_screen4::cy#1 cy zp[1]:3 1501.5
byte gfx_init_screen4::cy#4 cy zp[1]:3 333.6666666666667
void gfx_mode()
byte~ gfx_mode::$18 reg byte a 202.0
dword~ gfx_mode::$20 zp[4]:5 202.0
word~ gfx_mode::$22 zp[2]:17 202.0
byte~ gfx_mode::$23 reg byte a 202.0
word~ gfx_mode::$24 zp[2]:39 202.0
byte~ gfx_mode::$25 reg byte a 202.0
word~ gfx_mode::$26 zp[2]:19 202.0
byte~ gfx_mode::$27 reg byte a 202.0
byte~ gfx_mode::$28 reg byte a 202.0
byte~ gfx_mode::$29 reg byte a 202.0
byte~ gfx_mode::$30 reg byte a 202.0
byte~ gfx_mode::$31 reg byte a 202.0
byte~ gfx_mode::$32 reg byte a 202.0
dword~ gfx_mode::$34 zp[4]:5 202.0
word~ gfx_mode::$36 zp[2]:23 202.0
byte~ gfx_mode::$37 reg byte a 202.0
word~ gfx_mode::$38 zp[2]:25 202.0
byte~ gfx_mode::$39 reg byte a 202.0
word~ gfx_mode::$40 zp[2]:27 202.0
byte~ gfx_mode::$41 reg byte a 202.0
byte~ gfx_mode::$42 reg byte a 202.0
byte~ gfx_mode::$43 reg byte a 202.0
byte~ gfx_mode::$44 reg byte a 202.0
byte~ gfx_mode::$45 reg byte a 202.0
word~ gfx_mode::$47 zp[2]:11 202.0
word~ gfx_mode::$48 zp[2]:11 12.625
word~ gfx_mode::$50 zp[2]:15 202.0
byte~ gfx_mode::$51 reg byte a 202.0
byte~ gfx_mode::$52 zp[1]:21 101.0
byte~ gfx_mode::$53 reg byte a 202.0
byte~ gfx_mode::$55 reg byte a 202.0
byte~ gfx_mode::$56 reg byte a 202.0
byte~ gfx_mode::$57 reg byte a 202.0
byte~ gfx_mode::$58 reg byte a 202.0
byte~ gfx_mode::$59 reg byte a 202.0
byte~ gfx_mode::$60 reg byte a 202.0
byte~ gfx_mode::$61 reg byte a 202.0
byte~ gfx_mode::$62 reg byte a 202.0
byte*~ gfx_mode::$82 zp[2]:11 101.0
byte*~ gfx_mode::$83 zp[2]:15 101.0
byte~ gfx_mode::$84 reg byte a 202.0
byte* gfx_mode::VICII_colors
byte* gfx_mode::VICII_colors#0 VICII_colors zp[2]:11 202.0
byte* gfx_mode::VICII_colors#1 VICII_colors zp[2]:11 42000.600000000006
byte* gfx_mode::VICII_colors#2 VICII_colors zp[2]:11 103334.66666666666
byte* gfx_mode::VICII_colors#3 VICII_colors zp[2]:11 20103.0
byte gfx_mode::VICII_control
byte gfx_mode::VICII_control#2 reg byte x 202.0
byte gfx_mode::VICII_control#4 reg byte x 303.0
byte gfx_mode::VICII_control#5 reg byte x 101.0
byte gfx_mode::VICII_control2
byte gfx_mode::VICII_control2#2 reg byte a 101.0
byte* gfx_mode::col
byte* gfx_mode::col#1 col zp[2]:13 35000.5
byte* gfx_mode::col#2 col zp[2]:13 155002.0
byte* gfx_mode::col#3 col zp[2]:13 20002.0
byte gfx_mode::cx
byte gfx_mode::cx#1 reg byte x 150001.5
byte gfx_mode::cx#2 reg byte x 50000.5
byte gfx_mode::cy
byte gfx_mode::cy#1 cy zp[1]:2 15001.5
byte gfx_mode::cy#4 cy zp[1]:2 2857.4285714285716
byte gfx_mode::dtv_control
byte gfx_mode::dtv_control#10 reg byte x 202.0
byte gfx_mode::dtv_control#11 reg byte x 202.0
byte gfx_mode::dtv_control#12 reg byte x 303.0
byte gfx_mode::dtv_control#13 reg byte x 202.0
byte gfx_mode::dtv_control#14 reg byte x 101.0
byte gfx_mode::dtv_control#15 reg byte x 202.0
byte gfx_mode::dtv_control#2 reg byte x 202.0
byte gfx_mode::dtv_control#3 reg byte x 202.0
byte gfx_mode::dtv_control#4 reg byte x 202.0
byte gfx_mode::dtv_control#5 reg byte x 202.0
byte gfx_mode::dtv_control#6 reg byte x 202.0
byte gfx_mode::i
byte gfx_mode::i#1 reg byte x 15001.5
byte gfx_mode::i#2 reg byte x 20002.0
byte gfx_mode::j
byte gfx_mode::j#1 reg byte x 15001.5
byte gfx_mode::j#2 reg byte x 20002.0
byte gfx_mode::keyboard_event
byte gfx_mode::keyboard_event#0 reg byte a 20002.0
dword gfx_mode::plane_a
dword gfx_mode::plane_a#0 plane_a zp[4]:5 57.714285714285715
byte gfx_mode::plane_a_offs
byte gfx_mode::plane_a_offs#0 reg byte x 40.4
dword gfx_mode::plane_b
dword gfx_mode::plane_b#0 plane_b zp[4]:5 57.714285714285715
byte gfx_mode::plane_b_offs
byte gfx_mode::plane_b_offs#0 reg byte x 40.4
byte keyboard_event_get()
byte keyboard_event_get::return
byte keyboard_event_get::return#1 reg byte a 2.0000002E7
byte keyboard_event_get::return#2 reg byte a 2752500.75
byte keyboard_event_get::return#3 reg byte a 20002.0
byte keyboard_event_get::return#4 reg byte a 2000002.0
byte keyboard_event_pressed(byte keyboard_event_pressed::keycode)
byte~ keyboard_event_pressed::$0 reg byte a 2.00000002E8
byte~ keyboard_event_pressed::$1 reg byte a 2.00000002E8
byte keyboard_event_pressed::keycode
byte keyboard_event_pressed::keycode#4 keycode zp[1]:21 6.6666667333333336E7
byte keyboard_event_pressed::return
byte keyboard_event_pressed::return#0 reg byte a 2.0000002E7
byte keyboard_event_pressed::return#1 reg byte a 2.0000002E7
byte keyboard_event_pressed::return#10 reg byte a 2.3333334166666668E7
byte keyboard_event_pressed::return#2 reg byte a 2.0000002E7
byte keyboard_event_pressed::return#3 reg byte a 2.0000002E7
byte keyboard_event_pressed::row_bits
byte keyboard_event_pressed::row_bits#0 row_bits zp[1]:38 1.00000001E8
void keyboard_event_scan()
byte~ keyboard_event_scan::$0 reg byte a 2.0000002E7
byte~ keyboard_event_scan::$15 reg byte a 2.000000000002E12
byte~ keyboard_event_scan::$16 reg byte a 2.000000000002E12
byte~ keyboard_event_scan::$23 reg byte a 2.000000000002E12
byte~ keyboard_event_scan::$3 reg byte a 2.0000002E7
byte~ keyboard_event_scan::$6 reg byte a 2.0000002E7
byte~ keyboard_event_scan::$9 reg byte a 2.0000002E7
byte keyboard_event_scan::col
byte keyboard_event_scan::col#1 reg byte x 1.5000000000015E12
byte keyboard_event_scan::col#2 reg byte x 2.857142857145714E11
byte keyboard_event_scan::event_type
byte keyboard_event_scan::event_type#0 reg byte a 2.000000000002E12
byte keyboard_event_scan::keycode
byte keyboard_event_scan::keycode#1 keycode zp[1]:9 2.00000000002E11
byte keyboard_event_scan::keycode#10 keycode zp[1]:9 3.15384615385E11
byte keyboard_event_scan::keycode#11 keycode zp[1]:9 5.00000000005E10
byte keyboard_event_scan::keycode#13 keycode zp[1]:9 1.00000000001E11
byte keyboard_event_scan::keycode#14 keycode zp[1]:9 5.2500000000075E11
byte keyboard_event_scan::row
byte keyboard_event_scan::row#1 row zp[1]:22 1.500000000015E11
byte keyboard_event_scan::row#2 row zp[1]:22 6.000000000024E10
byte keyboard_event_scan::row_scan
byte keyboard_event_scan::row_scan#0 row_scan zp[1]:37 1.2777777777805557E11
const byte* keyboard_events[8]  = { fill( 8, 0) }
byte keyboard_events_size
byte keyboard_events_size#0 keyboard_events_size zp[1]:10 2.000000000002E12
byte keyboard_events_size#1 keyboard_events_size zp[1]:10 2.000000000002E12
byte keyboard_events_size#100 keyboard_events_size zp[1]:10 8.82441176488235E9
byte keyboard_events_size#106 keyboard_events_size zp[1]:10 1.0200000000012E12
byte keyboard_events_size#107 keyboard_events_size zp[1]:10 4.285857142914285E10
byte keyboard_events_size#19 keyboard_events_size zp[1]:10 8.100000000008999E11
byte keyboard_events_size#25 keyboard_events_size zp[1]:10 110549.53846153847
byte keyboard_events_size#28 keyboard_events_size zp[1]:10 2.871794871794872
byte keyboard_events_size#3 keyboard_events_size zp[1]:10 1.50000015E7
byte keyboard_events_size#49 keyboard_events_size zp[1]:10 65300.23529411765
byte keyboard_events_size#98 keyboard_events_size zp[1]:10 1.1010003E7
void keyboard_init()
const byte* keyboard_matrix_col_bitmask[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0 reg byte a 3.666666666673334E11
byte keyboard_matrix_read::return#2 reg byte a 2.00000000002E11
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::rowid
byte keyboard_matrix_read::rowid#0 reg byte x 1.100000000002E12
const byte* keyboard_matrix_row_bitmask[8]  = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
byte keyboard_modifiers
byte keyboard_modifiers#19 reg byte x 4000000.4
byte keyboard_modifiers#2 reg byte x 2.0000002E7
byte keyboard_modifiers#20 reg byte x 8000000.8
byte keyboard_modifiers#21 reg byte x 8000000.8
byte keyboard_modifiers#22 reg byte x 2000000.3636363638
byte keyboard_modifiers#3 reg byte x 2.0000002E7
byte keyboard_modifiers#4 reg byte x 2.0000002E7
const byte* keyboard_scan_values[8]  = { fill( 8, 0) }
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#5 reg byte x 125000.125
byte* memset::dst
byte* memset::dst#1 dst zp[2]:27 2000002.0
byte* memset::dst#2 dst zp[2]:27 1336668.3333333335
byte* memset::dst#4 dst zp[2]:27 20002.0
byte* memset::end
byte* memset::end#0 end zp[2]:13 168333.6666666667
word memset::num
word memset::num#3 num zp[2]:13 10001.0
void* memset::return
void* memset::str
void* memset::str#0 str zp[2]:27 2002.0
void* memset::str#4 str zp[2]:27 333.6666666666667
const byte* preset_8bpppixelcell[]  = { $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_chunky[]  = { 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_ecmchar[]  = { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6 }
const byte* preset_hi_ecmchar[]  = { 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c }
const byte* preset_hi_stdchar[]  = { 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_mcbm[]  = { 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0 }
const byte* preset_sixsfred[]  = { 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_sixsfred2[]  = { 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_stdbm[]  = { 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_stdchar[]  = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
const byte* preset_twoplane[]  = { 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0 }
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 1.1000002E7
byte* print_char_cursor
byte* print_char_cursor#2 print_char_cursor zp[2]:13 100501.5
byte* print_char_cursor#29 print_char_cursor zp[2]:13 3666667.333333333
byte* print_char_cursor#43 print_char_cursor zp[2]:13 3683334.1666666665
byte* print_char_cursor#44 print_char_cursor zp[2]:13 1.4328571485714287E8
byte* print_char_cursor#72 print_char_cursor zp[2]:13 2002.0
byte* print_char_cursor#73 print_char_cursor zp[2]:13 200002.0
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#1 print_line_cursor zp[2]:15 91750.25
byte* print_line_cursor#2 print_line_cursor zp[2]:15 6.00040001E8
byte* print_line_cursor#22 print_line_cursor zp[2]:15 2.001000003E9
void print_ln()
byte* print_screen
byte* print_screen#0 print_screen zp[2]:15 200.2
void print_set_screen(byte* print_set_screen::screen)
byte* print_set_screen::screen
byte* print_set_screen::screen#2 screen zp[2]:15 1001.0
void print_str_at(byte* print_str_at::str , byte* print_str_at::at)
byte* print_str_at::at
byte* print_str_at::at#0 at zp[2]:15 1.000000001E9
byte* print_str_at::at#2 at zp[2]:15 1.000000001E9
byte* print_str_at::str
byte* print_str_at::str#0 str zp[2]:11 2.000000002E9
byte* print_str_at::str#1 str zp[2]:11 550001.0
byte* print_str_at::str#2 str zp[2]:11 1.00025000125E9
void print_str_lines(byte* print_str_lines::str)
byte print_str_lines::ch
byte print_str_lines::ch#0 reg byte a 666667.3333333334
byte* print_str_lines::str
byte* print_str_lines::str#0 str zp[2]:11 233333.66666666666
byte* print_str_lines::str#3 str zp[2]:11 150502.0
byte* print_str_lines::str#4 str zp[2]:11 1550002.0
byte* print_str_lines::str#5 str zp[2]:11 500.5
void render_preset_name(byte render_preset_name::idx)
byte render_preset_name::idx
byte render_preset_name::idx#0 reg byte a 202.0
byte render_preset_name::idx#1 reg byte a 20002.0
byte render_preset_name::idx#10 reg byte a 100919.36363636363
byte* render_preset_name::name
const byte* render_preset_name::name#1 name_1 = "Standard Charset              "
const byte* render_preset_name::name#10 name_10 = "Sixs Fred 2                   "
const byte* render_preset_name::name#11 name_11 = "8bpp Pixel Cell               "
byte* render_preset_name::name#13 name zp[2]:11 100001.0
const byte* render_preset_name::name#2 name_2 = "Extended Color Charset        "
const byte* render_preset_name::name#3 name_3 = "Standard Bitmap               "
const byte* render_preset_name::name#4 name_4 = "Multicolor Bitmap             "
const byte* render_preset_name::name#5 name_5 = "Hicolor Charset               "
const byte* render_preset_name::name#6 name_6 = "Hicolor Extended Color Charset"
const byte* render_preset_name::name#7 name_7 = "Twoplane Bitmap               "
const byte* render_preset_name::name#8 name_8 = "Chunky 8bpp                   "
const byte* render_preset_name::name#9 name_9 = "Sixs Fred                     "
word sgn_u16(word sgn_u16::w)
byte~ sgn_u16::$0 reg byte a 200002.0
byte~ sgn_u16::$1 reg byte a 200002.0
word sgn_u16::return
word sgn_u16::return#0 return zp[2]:19 20002.0
word sgn_u16::return#1 return zp[2]:19 20002.0
word sgn_u16::return#4 return zp[2]:19 5000.5
word sgn_u16::w
word sgn_u16::w#0 w zp[2]:39 20002.0
word sgn_u16::w#1 w zp[2]:39 20002.0
word sgn_u16::w#2 w zp[2]:39 120003.0

reg byte x [ form_mode::i#2 form_mode::i#1 ]
reg byte x [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
reg byte x [ gfx_mode::VICII_control#4 gfx_mode::VICII_control#2 gfx_mode::VICII_control#5 ]
reg byte a [ gfx_mode::VICII_control2#2 ]
reg byte x [ gfx_mode::cx#2 gfx_mode::cx#1 ]
reg byte x [ gfx_mode::j#2 gfx_mode::j#1 ]
reg byte x [ gfx_mode::i#2 gfx_mode::i#1 ]
reg byte x [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
reg byte x [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
reg byte x [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
zp[1]:2 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 gfx_mode::cy#4 gfx_mode::cy#1 form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
reg byte x [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
reg byte x [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
zp[1]:3 [ gfx_init_charset::c#4 gfx_init_charset::c#1 gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 form_cursor_count#23 form_cursor_count#1 form_cursor_count#17 form_cursor_count#16 form_cursor_count#4 ]
reg byte x [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
zp[1]:4 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_VICII_bitmap::l#2 gfx_init_VICII_bitmap::l#1 gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 form_field_idx#30 form_field_idx#1 form_field_idx#19 form_field_idx#33 form_field_idx#5 form_field_idx#4 ]
reg byte x [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
reg byte x [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
reg byte a [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
reg byte x [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
reg byte x [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
reg byte x [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
reg byte x [ form_set_screen::y#2 form_set_screen::y#1 ]
reg byte x [ form_render_values::idx#2 form_render_values::idx#1 ]
reg byte a [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
reg byte x [ form_control::return#2 ]
reg byte y [ apply_preset::i#2 apply_preset::i#1 ]
reg byte a [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
reg byte a [ get_VICII_screen::idx#2 get_VICII_screen::idx#0 get_VICII_screen::idx#1 ]
reg byte x [ keyboard_modifiers#22 keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#2 keyboard_modifiers#3 keyboard_modifiers#4 ]
reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
zp[4]:5 [ gfx_init_plane_fill::plane_addr#3 get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$20 gfx_mode::plane_a#0 gfx_mode::$34 gfx_mode::plane_b#0 ]
zp[1]:9 [ gfx_init_plane_fill::fill#6 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
zp[1]:10 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 keyboard_events_size#19 keyboard_events_size#107 keyboard_events_size#98 keyboard_events_size#49 keyboard_events_size#28 keyboard_events_size#25 keyboard_events_size#100 keyboard_events_size#106 keyboard_events_size#0 keyboard_events_size#1 keyboard_events_size#3 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
zp[2]:11 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::VICII_colors#2 gfx_mode::VICII_colors#3 gfx_mode::VICII_colors#1 gfx_mode::VICII_colors#0 get_VICII_screen::return#11 get_VICII_screen::return#5 get_VICII_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ]
reg byte x [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
zp[2]:13 [ memset::num#3 memset::end#0 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 apply_preset::preset#15 print_char_cursor#43 print_char_cursor#2 print_char_cursor#72 print_char_cursor#73 print_char_cursor#44 print_char_cursor#29 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
reg byte x [ memset::c#5 ]
reg byte x [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
zp[2]:15 [ print_str_at::at#2 print_str_at::at#0 bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 get_VICII_charset::return#2 get_VICII_charset::return#4 gfx_mode::$83 gfx_mode::$50 form_set_screen::line#2 form_set_screen::line#1 print_set_screen::screen#2 print_line_cursor#22 print_line_cursor#1 print_screen#0 print_line_cursor#2 ]
reg byte a [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ]
reg byte a [ form_control::return#0 ]
reg byte a [ form_mode::$11 ]
reg byte a [ apply_preset::idx#0 ]
reg byte a [ gfx_mode::$18 ]
reg byte x [ gfx_mode::plane_a_offs#0 ]
zp[2]:17 [ gfx_mode::$22 abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 abs_u16::return#1 bitmap_line::dy#0 ]
reg byte a [ gfx_mode::$23 ]
reg byte a [ gfx_mode::$25 ]
zp[2]:19 [ gfx_mode::$26 sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 bitmap_line::sy#0 ]
reg byte a [ gfx_mode::$27 ]
reg byte a [ gfx_mode::$28 ]
reg byte a [ gfx_mode::$29 ]
reg byte a [ gfx_mode::$30 ]
reg byte a [ gfx_mode::$31 ]
reg byte a [ gfx_mode::$32 ]
reg byte x [ gfx_mode::plane_b_offs#0 ]
reg byte a [ gfx_mode::$37 ]
reg byte a [ gfx_mode::$39 ]
reg byte a [ gfx_mode::$41 ]
reg byte a [ gfx_mode::$42 ]
reg byte a [ gfx_mode::$43 ]
reg byte a [ gfx_mode::$44 ]
reg byte a [ gfx_mode::$45 ]
reg byte a [ get_VICII_charset::idx#0 ]
reg byte a [ gfx_mode::$51 ]
zp[1]:21 [ gfx_mode::$52 keyboard_event_pressed::keycode#4 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
reg byte a [ gfx_mode::$84 ]
reg byte a [ gfx_mode::$53 ]
reg byte a [ gfx_mode::$55 ]
reg byte a [ gfx_mode::$56 ]
reg byte a [ gfx_mode::$57 ]
reg byte a [ gfx_mode::$58 ]
reg byte a [ gfx_mode::$59 ]
reg byte a [ gfx_mode::$60 ]
reg byte a [ gfx_mode::$61 ]
reg byte a [ gfx_mode::$62 ]
reg byte a [ keyboard_event_get::return#3 ]
reg byte a [ gfx_mode::keyboard_event#0 ]
reg byte a [ gfx_init_screen0::$0 ]
reg byte a [ gfx_init_screen0::$2 ]
reg byte a [ gfx_init_screen0::$3 ]
reg byte a [ gfx_init_screen1::$0 ]
reg byte a [ gfx_init_screen1::$1 ]
reg byte a [ gfx_init_screen2::$0 ]
reg byte y [ gfx_init_screen2::col#0 ]
zp[1]:22 [ gfx_init_screen2::col2#0 gfx_init_screen0::$1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
reg byte a [ gfx_init_screen2::$3 ]
reg byte a [ gfx_init_screen2::$4 ]
reg byte a [ gfx_init_screen3::$0 ]
reg byte a [ gfx_init_screen3::$2 ]
reg byte a [ gfx_init_screen3::$3 ]
zp[2]:23 [ bitmap_line::x2#0 gfx_mode::$36 ]
zp[2]:25 [ bitmap_line::y2#0 gfx_mode::$38 ]
zp[2]:27 [ gfx_init_plane_8bppchunky::$5 gfx_mode::$40 memset::str#4 memset::str#0 memset::dst#2 memset::dst#4 memset::dst#1 bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ]
reg byte a [ gfx_init_plane_8bppchunky::c#0 ]
reg byte a [ gfx_init_plane_charset8::$2 ]
reg byte a [ gfx_init_plane_horisontal::$2 ]
reg byte a [ gfx_init_plane_horisontal2::$2 ]
reg byte a [ gfx_init_plane_horisontal2::row#0 ]
reg byte a [ print_str_lines::ch#0 ]
reg byte a [ print_char::ch#0 ]
reg byte a [ form_set_screen::$0 ]
reg byte a [ form_set_screen::$1 ]
reg byte a [ form_control::$12 ]
reg byte a [ keyboard_event_get::return#4 ]
reg byte a [ form_control::key_event#0 ]
reg byte a [ form_control::$14 ]
reg byte a [ form_control::$15 ]
reg byte a [ form_control::$22 ]
reg byte a [ form_control::$13 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_event_pressed::return#0 ]
reg byte a [ keyboard_event_scan::$0 ]
reg byte a [ keyboard_event_pressed::return#1 ]
reg byte a [ keyboard_event_scan::$3 ]
reg byte a [ keyboard_event_pressed::return#2 ]
reg byte a [ keyboard_event_scan::$6 ]
reg byte a [ keyboard_event_pressed::return#3 ]
reg byte a [ keyboard_event_scan::$9 ]
reg byte a [ keyboard_event_scan::$15 ]
reg byte a [ keyboard_event_scan::$16 ]
reg byte a [ keyboard_event_scan::event_type#0 ]
reg byte a [ keyboard_event_scan::$23 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
zp[2]:29 [ bitmap_line::dx#0 form_field_ptr::return#3 form_control::field#0 form_field_ptr::return#0 ]
zp[4]:31 [ gfx_init_plane_fill::$0 ]
zp[2]:35 [ gfx_init_plane_fill::$1 bitmap_line::sx#0 ]
reg byte a [ gfx_init_plane_fill::gfxbCpuBank#0 ]
reg byte y [ form_field_ptr::y#0 ]
zp[1]:37 [ form_field_ptr::x#0 bitmap_init::$7 keyboard_event_scan::row_scan#0 gfx_init_screen3::$1 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ keyboard_event_pressed::$0 ]
zp[1]:38 [ keyboard_event_pressed::row_bits#0 ]
reg byte a [ keyboard_event_pressed::$1 ]
reg byte a [ keyboard_event_pressed::return#10 ]
reg byte a [ abs_u16::$0 ]
reg byte a [ abs_u16::$1 ]
reg byte a [ sgn_u16::$0 ]
reg byte a [ sgn_u16::$1 ]
zp[2]:39 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 form_field_ptr::line#0 gfx_mode::$24 sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]
zp[2]:41 [ bitmap_plot::$0 ]
reg byte x [ bitmap_plot::$1 ]


FINAL ASSEMBLER
Score: 10117259

  // File Comments
// Interactive Explorer for C64DTV Screen Modes
// C64 DTV version 2 Registers and Constants
//
// Sources
// (J) https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide
// (H) http://dtvhacking.cbm8bit.com/dtv_wiki/images/d/d9/Dtv_registers_full.txt
  // Upstart
  // Commodore 64 PRG executable file
.file [name="c64dtv-gfxexplorer.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const VICII_ECM = $40
  .const VICII_BMM = $20
  .const VICII_DEN = $10
  .const VICII_RSEL = 8
  .const VICII_MCM = $10
  .const VICII_CSEL = 8
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  .const WHITE = 1
  .const DTV_FEATURE_ENABLE = 1
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  .const KEY_CRSR_RIGHT = 2
  .const KEY_CRSR_DOWN = 7
  .const KEY_LSHIFT = $f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Left shift is pressed
  .const KEY_MODIFIER_LSHIFT = 1
  // Right shift is pressed
  .const KEY_MODIFIER_RSHIFT = 2
  // CTRL is pressed
  .const KEY_MODIFIER_CTRL = 4
  // Commodore is pressed
  .const KEY_MODIFIER_COMMODORE = 8
  // Any shift is pressed
  .const KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
  // 8BPP Chunky Bitmap (contains 8bpp pixels)
  .const PLANE_8BPP_CHUNKY = $20000
  // Plane with horisontal stripes
  .const PLANE_HORISONTAL = $30000
  // Plane with vertical stripes
  .const PLANE_VERTICAL = $32000
  // Plane with horisontal stripes every 2 pixels
  .const PLANE_HORISONTAL2 = $34000
  // Plane with vertical stripes every 2 pixels
  .const PLANE_VERTICAL2 = $36000
  // Plane with blank pixels
  .const PLANE_BLANK = $38000
  // Plane with all pixels
  .const PLANE_FULL = $3a000
  // Plane with all pixels
  .const PLANE_CHARSET8 = $3c000
  // The number of frames to use for a full blink cycle
  .const FORM_CURSOR_BLINK = $28
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR = 3
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1 = $22
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2 = $23
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3 = $24
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  // Number of form fields
  .const form_fields_cnt = $24
  .label VICII_CONTROL1 = $d011
  .label VICII_CONTROL2 = $d016
  .label VICII_MEMORY = $d018
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  // VIC Screens
  .label VICII_SCREEN0 = $4000
  .label VICII_SCREEN1 = $4400
  .label VICII_SCREEN2 = $4800
  .label VICII_SCREEN3 = $4c00
  .label VICII_SCREEN4 = $5000
  // VIC Charset from ROM
  .label VICII_CHARSET_ROM = $5800
  // VIC Bitmap
  .label VICII_BITMAP = $6000
  // Screen containing the FORM
  .label FORM_SCREEN = $400
  // Charset used for the FORM
  .label FORM_CHARSET = $1800
  .label form_ctrl_bmm = form_fields_val+1
  .label form_ctrl_mcm = form_fields_val+2
  .label form_ctrl_ecm = form_fields_val+3
  .label form_ctrl_hicol = form_fields_val+4
  .label form_ctrl_line = form_fields_val+5
  .label form_ctrl_colof = form_fields_val+6
  .label form_ctrl_chunk = form_fields_val+7
  .label form_ctrl_borof = form_fields_val+8
  .label form_ctrl_overs = form_fields_val+9
  .label form_a_pattern = form_fields_val+$a
  .label form_a_start_hi = form_fields_val+$b
  .label form_a_start_lo = form_fields_val+$c
  .label form_a_step_hi = form_fields_val+$d
  .label form_a_step_lo = form_fields_val+$e
  .label form_a_mod_hi = form_fields_val+$f
  .label form_a_mod_lo = form_fields_val+$10
  .label form_b_pattern = form_fields_val+$11
  .label form_b_start_hi = form_fields_val+$12
  .label form_b_start_lo = form_fields_val+$13
  .label form_b_step_hi = form_fields_val+$14
  .label form_b_step_lo = form_fields_val+$15
  .label form_b_mod_hi = form_fields_val+$16
  .label form_b_mod_lo = form_fields_val+$17
  .label form_VICII_screen = form_fields_val+$18
  .label form_VICII_gfx = form_fields_val+$19
  .label form_VICII_cols = form_fields_val+$1a
  .label form_dtv_palet = form_fields_val+$1b
  .label form_VICII_bg0_hi = form_fields_val+$1c
  .label form_VICII_bg0_lo = form_fields_val+$1d
  .label form_VICII_bg1_hi = form_fields_val+$1e
  .label form_VICII_bg1_lo = form_fields_val+$1f
  .label form_VICII_bg2_hi = form_fields_val+$20
  .label form_VICII_bg2_lo = form_fields_val+$21
  .label form_VICII_bg3_hi = form_fields_val+$22
  .label form_VICII_bg3_lo = form_fields_val+$23
  .label print_char_cursor = $d
  .label print_line_cursor = $f
  .label print_screen = $f
  // Keyboard event buffer size. The number of events currently in the event buffer
  .label keyboard_events_size = $a
  // Counts down to blink for form cursor (it is inversed in the lower half)
  // Always blink cursor in new field
  .label form_cursor_count = 3
  // Current selected field in the form
  .label form_field_idx = 4
.segment Code
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [2] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // *DTV_FEATURE = DTV_FEATURE_ENABLE
    // [3] *DTV_FEATURE = DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // keyboard_init()
    // [4] call keyboard_init 
    jsr keyboard_init
    // [5] phi from main to main::@3 [phi:main->main::@3]
    // main::@3
    // gfx_init()
    // [6] call gfx_init 
    // [15] phi from main::@3 to gfx_init [phi:main::@3->gfx_init]
    jsr gfx_init
    // [7] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [7] phi form_field_idx#1 = 0 [phi:main::@3->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    // [7] phi keyboard_events_size#28 = 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    sta.z keyboard_events_size
    // [7] phi form_cursor_count#1 = FORM_CURSOR_BLINK/2 [phi:main::@3->main::@1#2] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    // main::@1
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
  __b2:
    // form_mode()
    // [9] call form_mode 
  // Let the user change the GFX configuration
    // [46] phi from main::@2 to form_mode [phi:main::@2->form_mode]
    jsr form_mode
    // [10] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // main::@4
    // gfx_mode()
    // [11] call gfx_mode 
    // Show the GFX configuration
    jsr gfx_mode
    // [7] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [7] phi form_field_idx#1 = form_field_idx#19 [phi:main::@4->main::@1#0] -- register_copy 
    // [7] phi keyboard_events_size#28 = keyboard_events_size#25 [phi:main::@4->main::@1#1] -- register_copy 
    // [7] phi form_cursor_count#1 = form_cursor_count#17 [phi:main::@4->main::@1#2] -- register_copy 
    jmp __b2
}
  // keyboard_init
// Initialize keyboard reading by setting CIA#1 Data Direction Registers
keyboard_init: {
    // CIA1->PORT_A_DDR = $ff
    // [12] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = $ff -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Write Mode
    lda #$ff
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA1->PORT_B_DDR = $00
    // [13] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) = 0 -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Read Mode
    lda #0
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR
    // keyboard_init::@return
    // }
    // [14] return 
    rts
}
  // gfx_init
// Initialize the different graphics in the memory
gfx_init: {
    // gfx_init_screen0()
    // [16] call gfx_init_screen0 
    // [236] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
    jsr gfx_init_screen0
    // [17] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
    // gfx_init::@1
    // gfx_init_screen1()
    // [18] call gfx_init_screen1 
    // [250] phi from gfx_init::@1 to gfx_init_screen1 [phi:gfx_init::@1->gfx_init_screen1]
    jsr gfx_init_screen1
    // [19] phi from gfx_init::@1 to gfx_init::@2 [phi:gfx_init::@1->gfx_init::@2]
    // gfx_init::@2
    // gfx_init_screen2()
    // [20] call gfx_init_screen2 
    // [262] phi from gfx_init::@2 to gfx_init_screen2 [phi:gfx_init::@2->gfx_init_screen2]
    jsr gfx_init_screen2
    // [21] phi from gfx_init::@2 to gfx_init::@3 [phi:gfx_init::@2->gfx_init::@3]
    // gfx_init::@3
    // gfx_init_screen3()
    // [22] call gfx_init_screen3 
    // [277] phi from gfx_init::@3 to gfx_init_screen3 [phi:gfx_init::@3->gfx_init_screen3]
    jsr gfx_init_screen3
    // [23] phi from gfx_init::@3 to gfx_init::@4 [phi:gfx_init::@3->gfx_init::@4]
    // gfx_init::@4
    // gfx_init_screen4()
    // [24] call gfx_init_screen4 
    // [291] phi from gfx_init::@4 to gfx_init_screen4 [phi:gfx_init::@4->gfx_init_screen4]
    jsr gfx_init_screen4
    // [25] phi from gfx_init::@4 to gfx_init::@5 [phi:gfx_init::@4->gfx_init::@5]
    // gfx_init::@5
    // gfx_init_charset()
    // [26] call gfx_init_charset 
    jsr gfx_init_charset
    // [27] phi from gfx_init::@5 to gfx_init::@6 [phi:gfx_init::@5->gfx_init::@6]
    // gfx_init::@6
    // gfx_init_VICII_bitmap()
    // [28] call gfx_init_VICII_bitmap 
    // [313] phi from gfx_init::@6 to gfx_init_VICII_bitmap [phi:gfx_init::@6->gfx_init_VICII_bitmap]
    jsr gfx_init_VICII_bitmap
    // [29] phi from gfx_init::@6 to gfx_init::@7 [phi:gfx_init::@6->gfx_init::@7]
    // gfx_init::@7
    // gfx_init_plane_8bppchunky()
    // [30] call gfx_init_plane_8bppchunky 
    // [326] phi from gfx_init::@7 to gfx_init_plane_8bppchunky [phi:gfx_init::@7->gfx_init_plane_8bppchunky]
    jsr gfx_init_plane_8bppchunky
    // [31] phi from gfx_init::@7 to gfx_init::@8 [phi:gfx_init::@7->gfx_init::@8]
    // gfx_init::@8
    // gfx_init_plane_charset8()
    // [32] call gfx_init_plane_charset8 
    // [346] phi from gfx_init::@8 to gfx_init_plane_charset8 [phi:gfx_init::@8->gfx_init_plane_charset8]
    jsr gfx_init_plane_charset8
    // [33] phi from gfx_init::@8 to gfx_init::@9 [phi:gfx_init::@8->gfx_init::@9]
    // gfx_init::@9
    // gfx_init_plane_horisontal()
    // [34] call gfx_init_plane_horisontal 
    // [371] phi from gfx_init::@9 to gfx_init_plane_horisontal [phi:gfx_init::@9->gfx_init_plane_horisontal]
    jsr gfx_init_plane_horisontal
    // [35] phi from gfx_init::@9 to gfx_init::@10 [phi:gfx_init::@9->gfx_init::@10]
    // gfx_init::@10
    // gfx_init_plane_vertical()
    // [36] call gfx_init_plane_vertical 
    // [389] phi from gfx_init::@10 to gfx_init_plane_vertical [phi:gfx_init::@10->gfx_init_plane_vertical]
    jsr gfx_init_plane_vertical
    // [37] phi from gfx_init::@10 to gfx_init::@11 [phi:gfx_init::@10->gfx_init::@11]
    // gfx_init::@11
    // gfx_init_plane_horisontal2()
    // [38] call gfx_init_plane_horisontal2 
    // [402] phi from gfx_init::@11 to gfx_init_plane_horisontal2 [phi:gfx_init::@11->gfx_init_plane_horisontal2]
    jsr gfx_init_plane_horisontal2
    // [39] phi from gfx_init::@11 to gfx_init::@12 [phi:gfx_init::@11->gfx_init::@12]
    // gfx_init::@12
    // gfx_init_plane_vertical2()
    // [40] call gfx_init_plane_vertical2 
    // [417] phi from gfx_init::@12 to gfx_init_plane_vertical2 [phi:gfx_init::@12->gfx_init_plane_vertical2]
    jsr gfx_init_plane_vertical2
    // [41] phi from gfx_init::@12 to gfx_init::@13 [phi:gfx_init::@12->gfx_init::@13]
    // gfx_init::@13
    // gfx_init_plane_blank()
    // [42] call gfx_init_plane_blank 
    // [420] phi from gfx_init::@13 to gfx_init_plane_blank [phi:gfx_init::@13->gfx_init_plane_blank]
    jsr gfx_init_plane_blank
    // [43] phi from gfx_init::@13 to gfx_init::@14 [phi:gfx_init::@13->gfx_init::@14]
    // gfx_init::@14
    // gfx_init_plane_full()
    // [44] call gfx_init_plane_full 
    // [423] phi from gfx_init::@14 to gfx_init_plane_full [phi:gfx_init::@14->gfx_init_plane_full]
    jsr gfx_init_plane_full
    // gfx_init::@return
    // }
    // [45] return 
    rts
}
  // form_mode
// Show the form - and let the user change values
form_mode: {
    .label preset_current = 2
    // print_set_screen(COLS)
    // [47] call print_set_screen 
  // Form Colors
    // [426] phi from form_mode to print_set_screen [phi:form_mode->print_set_screen]
    // [426] phi print_set_screen::screen#2 = COLS [phi:form_mode->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z print_set_screen.screen
    lda #>COLS
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [48] phi from form_mode to form_mode::@8 [phi:form_mode->form_mode::@8]
    // form_mode::@8
    // print_cls()
    // [49] call print_cls 
    jsr print_cls
    // [50] phi from form_mode::@8 to form_mode::@9 [phi:form_mode::@8->form_mode::@9]
    // form_mode::@9
    // print_str_lines(FORM_COLS)
    // [51] call print_str_lines 
    // [432] phi from form_mode::@9 to print_str_lines [phi:form_mode::@9->print_str_lines]
    // [432] phi print_str_lines::str#5 = FORM_COLS [phi:form_mode::@9->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_COLS
    sta.z print_str_lines.str
    lda #>FORM_COLS
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [52] phi from form_mode::@9 to form_mode::@10 [phi:form_mode::@9->form_mode::@10]
    // form_mode::@10
    // print_set_screen(FORM_SCREEN)
    // [53] call print_set_screen 
  // Form Text
    // [426] phi from form_mode::@10 to print_set_screen [phi:form_mode::@10->print_set_screen]
    // [426] phi print_set_screen::screen#2 = FORM_SCREEN [phi:form_mode::@10->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z print_set_screen.screen
    lda #>FORM_SCREEN
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [54] phi from form_mode::@10 to form_mode::@11 [phi:form_mode::@10->form_mode::@11]
    // form_mode::@11
    // print_cls()
    // [55] call print_cls 
    jsr print_cls
    // [56] phi from form_mode::@11 to form_mode::@12 [phi:form_mode::@11->form_mode::@12]
    // form_mode::@12
    // print_str_lines(FORM_TEXT)
    // [57] call print_str_lines 
    // [432] phi from form_mode::@12 to print_str_lines [phi:form_mode::@12->print_str_lines]
    // [432] phi print_str_lines::str#5 = FORM_TEXT [phi:form_mode::@12->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_TEXT
    sta.z print_str_lines.str
    lda #>FORM_TEXT
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [58] phi from form_mode::@12 to form_mode::@13 [phi:form_mode::@12->form_mode::@13]
    // form_mode::@13
    // form_set_screen(FORM_SCREEN)
    // [59] call form_set_screen 
  // Form Fields
    // [448] phi from form_mode::@13 to form_set_screen [phi:form_mode::@13->form_set_screen]
    jsr form_set_screen
    // [60] phi from form_mode::@13 to form_mode::@14 [phi:form_mode::@13->form_mode::@14]
    // form_mode::@14
    // form_render_values()
    // [61] call form_render_values 
    // [458] phi from form_mode::@14 to form_render_values [phi:form_mode::@14->form_render_values]
    jsr form_render_values
    // form_mode::@15
    // render_preset_name(*form_preset)
    // [62] render_preset_name::idx#0 = *form_fields_val -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [63] call render_preset_name 
    // [466] phi from form_mode::@15 to render_preset_name [phi:form_mode::@15->render_preset_name]
    // [466] phi render_preset_name::idx#10 = render_preset_name::idx#0 [phi:form_mode::@15->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    // form_mode::@16
    // *DTV_GRAPHICS_VIC_BANK = (byte)((dword)FORM_CHARSET/$10000)
    // [64] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // *DTV_COLOR_BANK_LO = <((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [65] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [66] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // CIA2->PORT_A_DDR = %00000011
    // [67] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)FORM_CHARSET/$4000)
    // [68] *((byte*)CIA2) = 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    sta CIA2
    // *DTV_CONTROL = 0
    // [69] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
    // VICII->CONTROL1 = VICII_DEN|VICII_RSEL|3
    // [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = VICII_DEN|VICII_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VICII_DEN|VICII_RSEL|3
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // VICII->CONTROL2 = VICII_CSEL
    // [71] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = VICII_CSEL -- _deref_pbuc1=vbuc2 
    lda #VICII_CSEL
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    // VICII->MEMORY =  (byte)((((word)FORM_SCREEN&$3fff)/$40)|(((word)FORM_CHARSET&$3fff)/$400))
    // [72] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = (byte)(word)FORM_SCREEN&$3fff/$40|(word)FORM_CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(FORM_SCREEN&$3fff)/$40|(FORM_CHARSET&$3fff)/$400
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // *DTV_PLANEA_START_LO = < FORM_SCREEN
    // [73] *DTV_PLANEA_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // DTV Plane A to FORM_SCREEN also
    lda #0
    sta DTV_PLANEA_START_LO
    // *DTV_PLANEA_START_MI = > FORM_SCREEN
    // [74] *DTV_PLANEA_START_MI = >FORM_SCREEN -- _deref_pbuc1=vbuc2 
    lda #>FORM_SCREEN
    sta DTV_PLANEA_START_MI
    // *DTV_PLANEA_START_HI = 0
    // [75] *DTV_PLANEA_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [76] phi from form_mode::@16 to form_mode::@1 [phi:form_mode::@16->form_mode::@1]
    // [76] phi form_mode::i#2 = 0 [phi:form_mode::@16->form_mode::@1#0] -- vbuxx=vbuc1 
    tax
  // DTV Palette - default
    // [76] phi from form_mode::@1 to form_mode::@1 [phi:form_mode::@1->form_mode::@1]
    // [76] phi form_mode::i#2 = form_mode::i#1 [phi:form_mode::@1->form_mode::@1#0] -- register_copy 
    // form_mode::@1
  __b1:
    // DTV_PALETTE[i] = DTV_PALETTE_DEFAULT[i]
    // [77] DTV_PALETTE[form_mode::i#2] = DTV_PALETTE_DEFAULT[form_mode::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [78] form_mode::i#1 = ++ form_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [79] if(form_mode::i#1!=$10) goto form_mode::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // form_mode::@2
    // VICII->BG_COLOR = 0
    // [80] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // VICII->BORDER_COLOR = 0
    // [81] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 -- _deref_pbuc1=vbuc2 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // preset_current = *form_preset
    // [82] form_mode::preset_current#0 = *form_fields_val -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [83] phi from form_mode::@19 form_mode::@2 form_mode::@6 to form_mode::@3 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3]
  __b2:
    // [83] phi form_mode::preset_current#6 = form_mode::preset_current#1 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#0] -- register_copy 
    // [83] phi form_field_idx#30 = form_field_idx#19 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#1] -- register_copy 
    // [83] phi keyboard_events_size#49 = keyboard_events_size#25 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#2] -- register_copy 
    // [83] phi form_cursor_count#23 = form_cursor_count#17 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#3] -- register_copy 
  // Let the user change values in the form
    // form_mode::@3
    // form_mode::@4
  __b4:
    // while(VICII->RASTER!=$ff)
    // [84] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto form_mode::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b4
    // [85] phi from form_mode::@4 to form_mode::@5 [phi:form_mode::@4->form_mode::@5]
    // form_mode::@5
    // form_control()
    // [86] call form_control 
    jsr form_control
    // [87] form_control::return#0 = form_control::return#2 -- vbuaa=vbuxx 
    txa
    // form_mode::@17
    // [88] form_mode::$11 = form_control::return#0
    // if(form_control()!=0)
    // [89] if(form_mode::$11==0) goto form_mode::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b6
    // form_mode::@return
    // }
    // [90] return 
    rts
    // form_mode::@6
  __b6:
    // if(preset_current!=*form_preset)
    // [91] if(form_mode::preset_current#6==*form_fields_val) goto form_mode::@3 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda form_fields_val
    cmp.z preset_current
    beq __b2
    // form_mode::@7
    // apply_preset(*form_preset)
    // [92] apply_preset::idx#0 = *form_fields_val -- vbuaa=_deref_pbuc1 
    // [93] call apply_preset 
    // Preset changed - update field values and render
    jsr apply_preset
    // form_mode::@18
    // preset_current = *form_preset
    // [94] form_mode::preset_current#1 = *form_fields_val -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // form_render_values()
    // [95] call form_render_values 
    // [458] phi from form_mode::@18 to form_render_values [phi:form_mode::@18->form_render_values]
    jsr form_render_values
    // form_mode::@19
    // render_preset_name(*form_preset)
    // [96] render_preset_name::idx#1 = *form_fields_val -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [97] call render_preset_name 
    // [466] phi from form_mode::@19 to render_preset_name [phi:form_mode::@19->render_preset_name]
    // [466] phi render_preset_name::idx#10 = render_preset_name::idx#1 [phi:form_mode::@19->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b2
}
  // gfx_mode
// Change graphics mode to show the selected graphics mode
gfx_mode: {
    .label __20 = 5
    .label __22 = $11
    .label __24 = $27
    .label __26 = $13
    .label __34 = 5
    .label __36 = $17
    .label __38 = $19
    .label __40 = $1b
    .label __47 = $b
    .label __48 = $b
    .label __50 = $f
    .label __52 = $15
    .label __82 = $b
    .label __83 = $f
    .label plane_a = 5
    .label plane_b = 5
    .label VICII_colors = $b
    .label col = $d
    .label cy = 2
    // if(*form_ctrl_line!=0)
    // [98] if(*form_ctrl_line==0) goto gfx_mode::@1 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_line
    cmp #0
    beq __b10
    // [99] phi from gfx_mode to gfx_mode::@10 [phi:gfx_mode->gfx_mode::@10]
    // gfx_mode::@10
    // [100] phi from gfx_mode::@10 to gfx_mode::@1 [phi:gfx_mode::@10->gfx_mode::@1]
    // [100] phi gfx_mode::dtv_control#14 = DTV_LINEAR [phi:gfx_mode::@10->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #DTV_LINEAR
    jmp __b1
    // [100] phi from gfx_mode to gfx_mode::@1 [phi:gfx_mode->gfx_mode::@1]
  __b10:
    // [100] phi gfx_mode::dtv_control#14 = 0 [phi:gfx_mode->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // gfx_mode::@1
  __b1:
    // if(*form_ctrl_borof!=0)
    // [101] if(*form_ctrl_borof==0) goto gfx_mode::@2 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_borof
    cmp #0
    beq __b2
    // gfx_mode::@11
    // dtv_control = dtv_control | DTV_BORDER_OFF
    // [102] gfx_mode::dtv_control#2 = gfx_mode::dtv_control#14 | DTV_BORDER_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_BORDER_OFF
    tax
    // [103] phi from gfx_mode::@1 gfx_mode::@11 to gfx_mode::@2 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2]
    // [103] phi gfx_mode::dtv_control#15 = gfx_mode::dtv_control#14 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2#0] -- register_copy 
    // gfx_mode::@2
  __b2:
    // if(*form_ctrl_hicol!=0)
    // [104] if(*form_ctrl_hicol==0) goto gfx_mode::@3 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_hicol
    cmp #0
    beq __b3
    // gfx_mode::@12
    // dtv_control = dtv_control | DTV_HIGHCOLOR
    // [105] gfx_mode::dtv_control#3 = gfx_mode::dtv_control#15 | DTV_HIGHCOLOR -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_HIGHCOLOR
    tax
    // [106] phi from gfx_mode::@12 gfx_mode::@2 to gfx_mode::@3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3]
    // [106] phi gfx_mode::dtv_control#10 = gfx_mode::dtv_control#3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3#0] -- register_copy 
    // gfx_mode::@3
  __b3:
    // if(*form_ctrl_overs!=0)
    // [107] if(*form_ctrl_overs==0) goto gfx_mode::@4 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_overs
    cmp #0
    beq __b4
    // gfx_mode::@13
    // dtv_control = dtv_control | DTV_OVERSCAN
    // [108] gfx_mode::dtv_control#4 = gfx_mode::dtv_control#10 | DTV_OVERSCAN -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_OVERSCAN
    tax
    // [109] phi from gfx_mode::@13 gfx_mode::@3 to gfx_mode::@4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4]
    // [109] phi gfx_mode::dtv_control#11 = gfx_mode::dtv_control#4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4#0] -- register_copy 
    // gfx_mode::@4
  __b4:
    // if(*form_ctrl_colof!=0)
    // [110] if(*form_ctrl_colof==0) goto gfx_mode::@5 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_colof
    cmp #0
    beq __b5
    // gfx_mode::@14
    // dtv_control = dtv_control | DTV_COLORRAM_OFF
    // [111] gfx_mode::dtv_control#5 = gfx_mode::dtv_control#11 | DTV_COLORRAM_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_COLORRAM_OFF
    tax
    // [112] phi from gfx_mode::@14 gfx_mode::@4 to gfx_mode::@5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5]
    // [112] phi gfx_mode::dtv_control#13 = gfx_mode::dtv_control#5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5#0] -- register_copy 
    // gfx_mode::@5
  __b5:
    // if(*form_ctrl_chunk!=0)
    // [113] if(*form_ctrl_chunk==0) goto gfx_mode::@6 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_chunk
    cmp #0
    beq __b6
    // gfx_mode::@15
    // dtv_control = dtv_control | DTV_CHUNKY
    // [114] gfx_mode::dtv_control#6 = gfx_mode::dtv_control#13 | DTV_CHUNKY -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_CHUNKY
    tax
    // [115] phi from gfx_mode::@15 gfx_mode::@5 to gfx_mode::@6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6]
    // [115] phi gfx_mode::dtv_control#12 = gfx_mode::dtv_control#6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6#0] -- register_copy 
    // gfx_mode::@6
  __b6:
    // *DTV_CONTROL = dtv_control
    // [116] *DTV_CONTROL = gfx_mode::dtv_control#12 -- _deref_pbuc1=vbuxx 
    stx DTV_CONTROL
    // if(*form_ctrl_ecm!=0)
    // [117] if(*form_ctrl_ecm==0) goto gfx_mode::@7 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_ecm
    cmp #0
    beq __b11
    // [118] phi from gfx_mode::@6 to gfx_mode::@16 [phi:gfx_mode::@6->gfx_mode::@16]
    // gfx_mode::@16
    // [119] phi from gfx_mode::@16 to gfx_mode::@7 [phi:gfx_mode::@16->gfx_mode::@7]
    // [119] phi gfx_mode::VICII_control#5 = VICII_DEN|VICII_RSEL|3|VICII_ECM [phi:gfx_mode::@16->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VICII_DEN|VICII_RSEL|3|VICII_ECM
    jmp __b7
    // [119] phi from gfx_mode::@6 to gfx_mode::@7 [phi:gfx_mode::@6->gfx_mode::@7]
  __b11:
    // [119] phi gfx_mode::VICII_control#5 = VICII_DEN|VICII_RSEL|3 [phi:gfx_mode::@6->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VICII_DEN|VICII_RSEL|3
    // gfx_mode::@7
  __b7:
    // if(*form_ctrl_bmm!=0)
    // [120] if(*form_ctrl_bmm==0) goto gfx_mode::@8 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_bmm
    cmp #0
    beq __b8
    // gfx_mode::@17
    // VICII_control = VICII_control | VICII_BMM
    // [121] gfx_mode::VICII_control#2 = gfx_mode::VICII_control#5 | VICII_BMM -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #VICII_BMM
    tax
    // [122] phi from gfx_mode::@17 gfx_mode::@7 to gfx_mode::@8 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8]
    // [122] phi gfx_mode::VICII_control#4 = gfx_mode::VICII_control#2 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8#0] -- register_copy 
    // gfx_mode::@8
  __b8:
    // *VICII_CONTROL1 = VICII_control
    // [123] *VICII_CONTROL1 = gfx_mode::VICII_control#4 -- _deref_pbuc1=vbuxx 
    stx VICII_CONTROL1
    // if(*form_ctrl_mcm!=0)
    // [124] if(*form_ctrl_mcm==0) goto gfx_mode::@9 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_mcm
    cmp #0
    beq __b12
    // [125] phi from gfx_mode::@8 to gfx_mode::@18 [phi:gfx_mode::@8->gfx_mode::@18]
    // gfx_mode::@18
    // [126] phi from gfx_mode::@18 to gfx_mode::@9 [phi:gfx_mode::@18->gfx_mode::@9]
    // [126] phi gfx_mode::VICII_control2#2 = VICII_CSEL|VICII_MCM [phi:gfx_mode::@18->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VICII_CSEL|VICII_MCM
    jmp __b9
    // [126] phi from gfx_mode::@8 to gfx_mode::@9 [phi:gfx_mode::@8->gfx_mode::@9]
  __b12:
    // [126] phi gfx_mode::VICII_control2#2 = VICII_CSEL [phi:gfx_mode::@8->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VICII_CSEL
    // gfx_mode::@9
  __b9:
    // *VICII_CONTROL2 = VICII_control2
    // [127] *VICII_CONTROL2 = gfx_mode::VICII_control2#2 -- _deref_pbuc1=vbuaa 
    sta VICII_CONTROL2
    // *form_a_start_hi*$10
    // [128] gfx_mode::$18 = *form_a_start_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_start_hi
    asl
    asl
    asl
    asl
    // plane_a_offs = *form_a_start_hi*$10|*form_a_start_lo
    // [129] gfx_mode::plane_a_offs#0 = gfx_mode::$18 | *form_a_start_lo -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_a_start_lo
    tax
    // get_plane(*form_a_pattern)
    // [130] get_plane::idx#0 = *form_a_pattern -- vbuaa=_deref_pbuc1 
    lda form_a_pattern
    // [131] call get_plane 
    // [546] phi from gfx_mode::@9 to get_plane [phi:gfx_mode::@9->get_plane]
    // [546] phi get_plane::idx#10 = get_plane::idx#0 [phi:gfx_mode::@9->get_plane#0] -- register_copy 
    jsr get_plane
    // get_plane(*form_a_pattern)
    // [132] get_plane::return#16 = get_plane::return#14
    // gfx_mode::@27
    // [133] gfx_mode::$20 = get_plane::return#16
    // plane_a = get_plane(*form_a_pattern) + plane_a_offs
    // [134] gfx_mode::plane_a#0 = gfx_mode::$20 + gfx_mode::plane_a_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_a
    sta.z plane_a
    lda.z plane_a+1
    adc #0
    sta.z plane_a+1
    lda.z plane_a+2
    adc #0
    sta.z plane_a+2
    lda.z plane_a+3
    adc #0
    sta.z plane_a+3
    // < plane_a
    // [135] gfx_mode::$22 = < gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda.z plane_a
    sta.z __22
    lda.z plane_a+1
    sta.z __22+1
    // < < plane_a
    // [136] gfx_mode::$23 = < gfx_mode::$22 -- vbuaa=_lo_vwuz1 
    lda.z __22
    // *DTV_PLANEA_START_LO = < < plane_a
    // [137] *DTV_PLANEA_START_LO = gfx_mode::$23 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_LO
    // < plane_a
    // [138] gfx_mode::$24 = < gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda.z plane_a
    sta.z __24
    lda.z plane_a+1
    sta.z __24+1
    // > < plane_a
    // [139] gfx_mode::$25 = > gfx_mode::$24 -- vbuaa=_hi_vwuz1 
    // *DTV_PLANEA_START_MI = > < plane_a
    // [140] *DTV_PLANEA_START_MI = gfx_mode::$25 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_MI
    // > plane_a
    // [141] gfx_mode::$26 = > gfx_mode::plane_a#0 -- vwuz1=_hi_vduz2 
    lda.z plane_a+2
    sta.z __26
    lda.z plane_a+3
    sta.z __26+1
    // < > plane_a
    // [142] gfx_mode::$27 = < gfx_mode::$26 -- vbuaa=_lo_vwuz1 
    lda.z __26
    // *DTV_PLANEA_START_HI = < > plane_a
    // [143] *DTV_PLANEA_START_HI = gfx_mode::$27 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_HI
    // *form_a_step_hi*$10
    // [144] gfx_mode::$28 = *form_a_step_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_step_hi
    asl
    asl
    asl
    asl
    // *form_a_step_hi*$10|*form_a_step_lo
    // [145] gfx_mode::$29 = gfx_mode::$28 | *form_a_step_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_step_lo
    // *DTV_PLANEA_STEP = *form_a_step_hi*$10|*form_a_step_lo
    // [146] *DTV_PLANEA_STEP = gfx_mode::$29 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_STEP
    // *form_a_mod_hi*$10
    // [147] gfx_mode::$30 = *form_a_mod_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_mod_hi
    asl
    asl
    asl
    asl
    // *form_a_mod_hi*$10|*form_a_mod_lo
    // [148] gfx_mode::$31 = gfx_mode::$30 | *form_a_mod_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_mod_lo
    // *DTV_PLANEA_MODULO_LO = *form_a_mod_hi*$10|*form_a_mod_lo
    // [149] *DTV_PLANEA_MODULO_LO = gfx_mode::$31 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_MODULO_LO
    // *DTV_PLANEA_MODULO_HI = 0
    // [150] *DTV_PLANEA_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // *form_b_start_hi*$10
    // [151] gfx_mode::$32 = *form_b_start_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_start_hi
    asl
    asl
    asl
    asl
    // plane_b_offs = *form_b_start_hi*$10|*form_b_start_lo
    // [152] gfx_mode::plane_b_offs#0 = gfx_mode::$32 | *form_b_start_lo -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_b_start_lo
    tax
    // get_plane(*form_b_pattern)
    // [153] get_plane::idx#1 = *form_b_pattern -- vbuaa=_deref_pbuc1 
    lda form_b_pattern
    // [154] call get_plane 
    // [546] phi from gfx_mode::@27 to get_plane [phi:gfx_mode::@27->get_plane]
    // [546] phi get_plane::idx#10 = get_plane::idx#1 [phi:gfx_mode::@27->get_plane#0] -- register_copy 
    jsr get_plane
    // get_plane(*form_b_pattern)
    // [155] get_plane::return#17 = get_plane::return#14
    // gfx_mode::@28
    // [156] gfx_mode::$34 = get_plane::return#17
    // plane_b = get_plane(*form_b_pattern) + plane_b_offs
    // [157] gfx_mode::plane_b#0 = gfx_mode::$34 + gfx_mode::plane_b_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_b
    sta.z plane_b
    lda.z plane_b+1
    adc #0
    sta.z plane_b+1
    lda.z plane_b+2
    adc #0
    sta.z plane_b+2
    lda.z plane_b+3
    adc #0
    sta.z plane_b+3
    // < plane_b
    // [158] gfx_mode::$36 = < gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda.z plane_b
    sta.z __36
    lda.z plane_b+1
    sta.z __36+1
    // < < plane_b
    // [159] gfx_mode::$37 = < gfx_mode::$36 -- vbuaa=_lo_vwuz1 
    lda.z __36
    // *DTV_PLANEB_START_LO = < < plane_b
    // [160] *DTV_PLANEB_START_LO = gfx_mode::$37 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_LO
    // < plane_b
    // [161] gfx_mode::$38 = < gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda.z plane_b
    sta.z __38
    lda.z plane_b+1
    sta.z __38+1
    // > < plane_b
    // [162] gfx_mode::$39 = > gfx_mode::$38 -- vbuaa=_hi_vwuz1 
    // *DTV_PLANEB_START_MI = > < plane_b
    // [163] *DTV_PLANEB_START_MI = gfx_mode::$39 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_MI
    // > plane_b
    // [164] gfx_mode::$40 = > gfx_mode::plane_b#0 -- vwuz1=_hi_vduz2 
    lda.z plane_b+2
    sta.z __40
    lda.z plane_b+3
    sta.z __40+1
    // < > plane_b
    // [165] gfx_mode::$41 = < gfx_mode::$40 -- vbuaa=_lo_vwuz1 
    lda.z __40
    // *DTV_PLANEB_START_HI = < > plane_b
    // [166] *DTV_PLANEB_START_HI = gfx_mode::$41 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_HI
    // *form_b_step_hi*$10
    // [167] gfx_mode::$42 = *form_b_step_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_step_hi
    asl
    asl
    asl
    asl
    // *form_b_step_hi*$10|*form_b_step_lo
    // [168] gfx_mode::$43 = gfx_mode::$42 | *form_b_step_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_step_lo
    // *DTV_PLANEB_STEP = *form_b_step_hi*$10|*form_b_step_lo
    // [169] *DTV_PLANEB_STEP = gfx_mode::$43 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_STEP
    // *form_b_mod_hi*$10
    // [170] gfx_mode::$44 = *form_b_mod_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_mod_hi
    asl
    asl
    asl
    asl
    // *form_b_mod_hi*$10|*form_b_mod_lo
    // [171] gfx_mode::$45 = gfx_mode::$44 | *form_b_mod_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_mod_lo
    // *DTV_PLANEB_MODULO_LO = *form_b_mod_hi*$10|*form_b_mod_lo
    // [172] *DTV_PLANEB_MODULO_LO = gfx_mode::$45 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_MODULO_LO
    // *DTV_PLANEB_MODULO_HI = 0
    // [173] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // CIA2->PORT_A_DDR = %00000011
    // [174] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)VICII_SCREEN0/$4000)
    // [175] *((byte*)CIA2) = 3^(byte)(word)VICII_SCREEN0/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^VICII_SCREEN0/$4000
    sta CIA2
    // get_VICII_screen(*form_VICII_screen)
    // [176] get_VICII_screen::idx#0 = *form_VICII_screen -- vbuaa=_deref_pbuc1 
    lda form_VICII_screen
    // [177] call get_VICII_screen 
    // [564] phi from gfx_mode::@28 to get_VICII_screen [phi:gfx_mode::@28->get_VICII_screen]
    // [564] phi get_VICII_screen::idx#2 = get_VICII_screen::idx#0 [phi:gfx_mode::@28->get_VICII_screen#0] -- register_copy 
    jsr get_VICII_screen
    // get_VICII_screen(*form_VICII_screen)
    // [178] get_VICII_screen::return#10 = get_VICII_screen::return#5
    // gfx_mode::@29
    // [179] gfx_mode::$82 = get_VICII_screen::return#10
    // (word)get_VICII_screen(*form_VICII_screen)&$3fff
    // [180] gfx_mode::$47 = (word)gfx_mode::$82 & $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __47
    and #<$3fff
    sta.z __47
    lda.z __47+1
    and #>$3fff
    sta.z __47+1
    // ((word)get_VICII_screen(*form_VICII_screen)&$3fff)/$40
    // [181] gfx_mode::$48 = gfx_mode::$47 >> 6 -- vwuz1=vwuz1_ror_6 
    lda.z __48
    asl
    sta.z $ff
    lda.z __48+1
    rol
    sta.z __48
    lda #0
    rol
    sta.z __48+1
    asl.z $ff
    rol.z __48
    rol.z __48+1
    // get_VICII_charset(*form_VICII_gfx)
    // [182] get_VICII_charset::idx#0 = *form_VICII_gfx -- vbuaa=_deref_pbuc1 
    lda form_VICII_gfx
    // [183] call get_VICII_charset 
    jsr get_VICII_charset
    // [184] get_VICII_charset::return#4 = get_VICII_charset::return#2
    // gfx_mode::@30
    // [185] gfx_mode::$83 = get_VICII_charset::return#4
    // (word)get_VICII_charset(*form_VICII_gfx)&$3fff
    // [186] gfx_mode::$50 = (word)gfx_mode::$83 & $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __50
    and #<$3fff
    sta.z __50
    lda.z __50+1
    and #>$3fff
    sta.z __50+1
    // >((word)get_VICII_charset(*form_VICII_gfx)&$3fff)
    // [187] gfx_mode::$51 = > gfx_mode::$50 -- vbuaa=_hi_vwuz1 
    // (>((word)get_VICII_charset(*form_VICII_gfx)&$3fff))/4
    // [188] gfx_mode::$52 = gfx_mode::$51 >> 2 -- vbuz1=vbuaa_ror_2 
    lsr
    lsr
    sta.z __52
    // (byte)(((word)get_VICII_screen(*form_VICII_screen)&$3fff)/$40)  |   ((>((word)get_VICII_charset(*form_VICII_gfx)&$3fff))/4)
    // [189] gfx_mode::$84 = (byte)gfx_mode::$48 -- vbuaa=_byte_vwuz1 
    lda.z __48
    // [190] gfx_mode::$53 = gfx_mode::$84 | gfx_mode::$52 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z __52
    // *VICII_MEMORY = (byte)(((word)get_VICII_screen(*form_VICII_screen)&$3fff)/$40)  |   ((>((word)get_VICII_charset(*form_VICII_gfx)&$3fff))/4)
    // [191] *VICII_MEMORY = gfx_mode::$53 -- _deref_pbuc1=vbuaa 
    // Set VIC Bank
    // VIC memory
    sta VICII_MEMORY
    // get_VICII_screen(*form_VICII_cols)
    // [192] get_VICII_screen::idx#1 = *form_VICII_cols -- vbuaa=_deref_pbuc1 
    lda form_VICII_cols
    // [193] call get_VICII_screen 
    // [564] phi from gfx_mode::@30 to get_VICII_screen [phi:gfx_mode::@30->get_VICII_screen]
    // [564] phi get_VICII_screen::idx#2 = get_VICII_screen::idx#1 [phi:gfx_mode::@30->get_VICII_screen#0] -- register_copy 
    jsr get_VICII_screen
    // get_VICII_screen(*form_VICII_cols)
    // [194] get_VICII_screen::return#11 = get_VICII_screen::return#5
    // gfx_mode::@31
    // VICII_colors = get_VICII_screen(*form_VICII_cols)
    // [195] gfx_mode::VICII_colors#0 = get_VICII_screen::return#11
    // [196] phi from gfx_mode::@31 to gfx_mode::@19 [phi:gfx_mode::@31->gfx_mode::@19]
    // [196] phi gfx_mode::cy#4 = 0 [phi:gfx_mode::@31->gfx_mode::@19#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [196] phi gfx_mode::col#3 = COLS [phi:gfx_mode::@31->gfx_mode::@19#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z col
    lda #>COLS
    sta.z col+1
    // [196] phi gfx_mode::VICII_colors#3 = gfx_mode::VICII_colors#0 [phi:gfx_mode::@31->gfx_mode::@19#2] -- register_copy 
    // [196] phi from gfx_mode::@21 to gfx_mode::@19 [phi:gfx_mode::@21->gfx_mode::@19]
    // [196] phi gfx_mode::cy#4 = gfx_mode::cy#1 [phi:gfx_mode::@21->gfx_mode::@19#0] -- register_copy 
    // [196] phi gfx_mode::col#3 = gfx_mode::col#1 [phi:gfx_mode::@21->gfx_mode::@19#1] -- register_copy 
    // [196] phi gfx_mode::VICII_colors#3 = gfx_mode::VICII_colors#1 [phi:gfx_mode::@21->gfx_mode::@19#2] -- register_copy 
    // gfx_mode::@19
  __b19:
    // [197] phi from gfx_mode::@19 to gfx_mode::@20 [phi:gfx_mode::@19->gfx_mode::@20]
    // [197] phi gfx_mode::cx#2 = 0 [phi:gfx_mode::@19->gfx_mode::@20#0] -- vbuxx=vbuc1 
    ldx #0
    // [197] phi gfx_mode::col#2 = gfx_mode::col#3 [phi:gfx_mode::@19->gfx_mode::@20#1] -- register_copy 
    // [197] phi gfx_mode::VICII_colors#2 = gfx_mode::VICII_colors#3 [phi:gfx_mode::@19->gfx_mode::@20#2] -- register_copy 
    // [197] phi from gfx_mode::@20 to gfx_mode::@20 [phi:gfx_mode::@20->gfx_mode::@20]
    // [197] phi gfx_mode::cx#2 = gfx_mode::cx#1 [phi:gfx_mode::@20->gfx_mode::@20#0] -- register_copy 
    // [197] phi gfx_mode::col#2 = gfx_mode::col#1 [phi:gfx_mode::@20->gfx_mode::@20#1] -- register_copy 
    // [197] phi gfx_mode::VICII_colors#2 = gfx_mode::VICII_colors#1 [phi:gfx_mode::@20->gfx_mode::@20#2] -- register_copy 
    // gfx_mode::@20
  __b20:
    // *col++ = *VICII_colors++
    // [198] *gfx_mode::col#2 = *gfx_mode::VICII_colors#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (VICII_colors),y
    sta (col),y
    // *col++ = *VICII_colors++;
    // [199] gfx_mode::col#1 = ++ gfx_mode::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [200] gfx_mode::VICII_colors#1 = ++ gfx_mode::VICII_colors#2 -- pbuz1=_inc_pbuz1 
    inc.z VICII_colors
    bne !+
    inc.z VICII_colors+1
  !:
    // for(byte cx: 0..39)
    // [201] gfx_mode::cx#1 = ++ gfx_mode::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [202] if(gfx_mode::cx#1!=$28) goto gfx_mode::@20 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b20
    // gfx_mode::@21
    // for(byte cy: 0..24 )
    // [203] gfx_mode::cy#1 = ++ gfx_mode::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [204] if(gfx_mode::cy#1!=$19) goto gfx_mode::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b19
    // gfx_mode::@22
    // VICII->BORDER_COLOR = 0
    // [205] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 -- _deref_pbuc1=vbuc2 
    // Background colors
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // *form_VICII_bg0_hi*$10
    // [206] gfx_mode::$55 = *form_VICII_bg0_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_VICII_bg0_hi
    asl
    asl
    asl
    asl
    // *form_VICII_bg0_hi*$10|*form_VICII_bg0_lo
    // [207] gfx_mode::$56 = gfx_mode::$55 | *form_VICII_bg0_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_VICII_bg0_lo
    // VICII->BG_COLOR = *form_VICII_bg0_hi*$10|*form_VICII_bg0_lo
    // [208] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = gfx_mode::$56 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // *form_VICII_bg1_hi*$10
    // [209] gfx_mode::$57 = *form_VICII_bg1_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_VICII_bg1_hi
    asl
    asl
    asl
    asl
    // *form_VICII_bg1_hi*$10|*form_VICII_bg1_lo
    // [210] gfx_mode::$58 = gfx_mode::$57 | *form_VICII_bg1_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_VICII_bg1_lo
    // VICII->BG_COLOR1 = *form_VICII_bg1_hi*$10|*form_VICII_bg1_lo
    // [211] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1) = gfx_mode::$58 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1
    // *form_VICII_bg2_hi*$10
    // [212] gfx_mode::$59 = *form_VICII_bg2_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_VICII_bg2_hi
    asl
    asl
    asl
    asl
    // *form_VICII_bg2_hi*$10|*form_VICII_bg2_lo
    // [213] gfx_mode::$60 = gfx_mode::$59 | *form_VICII_bg2_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_VICII_bg2_lo
    // VICII->BG_COLOR2 = *form_VICII_bg2_hi*$10|*form_VICII_bg2_lo
    // [214] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2) = gfx_mode::$60 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2
    // *form_VICII_bg3_hi*$10
    // [215] gfx_mode::$61 = *form_VICII_bg3_hi << 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_VICII_bg3_hi
    asl
    asl
    asl
    asl
    // *form_VICII_bg3_hi*$10|*form_VICII_bg3_lo
    // [216] gfx_mode::$62 = gfx_mode::$61 | *form_VICII_bg3_lo -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_VICII_bg3_lo
    // VICII->BG_COLOR3 = *form_VICII_bg3_hi*$10|*form_VICII_bg3_lo
    // [217] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3) = gfx_mode::$62 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3
    // if(*form_dtv_palet==0)
    // [218] if(*form_dtv_palet==0) goto gfx_mode::@24 -- _deref_pbuc1_eq_0_then_la1 
    // DTV Palette
    lda form_dtv_palet
    cmp #0
    beq __b13
    // [219] phi from gfx_mode::@22 to gfx_mode::@23 [phi:gfx_mode::@22->gfx_mode::@23]
    // [219] phi gfx_mode::j#2 = 0 [phi:gfx_mode::@22->gfx_mode::@23#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
    // [219] phi from gfx_mode::@23 to gfx_mode::@23 [phi:gfx_mode::@23->gfx_mode::@23]
    // [219] phi gfx_mode::j#2 = gfx_mode::j#1 [phi:gfx_mode::@23->gfx_mode::@23#0] -- register_copy 
    // gfx_mode::@23
  __b23:
    // DTV_PALETTE[j] = j
    // [220] DTV_PALETTE[gfx_mode::j#2] = gfx_mode::j#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // for(byte j : 0..$f)
    // [221] gfx_mode::j#1 = ++ gfx_mode::j#2 -- vbuxx=_inc_vbuxx 
    inx
    // [222] if(gfx_mode::j#1!=$10) goto gfx_mode::@23 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b23
    // gfx_mode::@25
  __b25:
    // while(VICII->RASTER!=$ff)
    // [223] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto gfx_mode::@25 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b25
    // [224] phi from gfx_mode::@25 to gfx_mode::@26 [phi:gfx_mode::@25->gfx_mode::@26]
    // gfx_mode::@26
    // keyboard_event_scan()
    // [225] call keyboard_event_scan 
    // [578] phi from gfx_mode::@26 to keyboard_event_scan [phi:gfx_mode::@26->keyboard_event_scan]
    // [578] phi keyboard_events_size#98 = keyboard_events_size#25 [phi:gfx_mode::@26->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [226] phi from gfx_mode::@26 to gfx_mode::@32 [phi:gfx_mode::@26->gfx_mode::@32]
    // gfx_mode::@32
    // keyboard_event_get()
    // [227] call keyboard_event_get 
    jsr keyboard_event_get
    // [228] keyboard_event_get::return#3 = keyboard_event_get::return#2
    // gfx_mode::@33
    // keyboard_event = keyboard_event_get()
    // [229] gfx_mode::keyboard_event#0 = keyboard_event_get::return#3
    // if(keyboard_event==KEY_SPACE)
    // [230] if(gfx_mode::keyboard_event#0==KEY_SPACE) goto gfx_mode::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_SPACE
    beq __breturn
    jmp __b25
    // gfx_mode::@return
  __breturn:
    // }
    // [231] return 
    rts
  // DTV Palette - default
    // [232] phi from gfx_mode::@22 to gfx_mode::@24 [phi:gfx_mode::@22->gfx_mode::@24]
  __b13:
    // [232] phi gfx_mode::i#2 = 0 [phi:gfx_mode::@22->gfx_mode::@24#0] -- vbuxx=vbuc1 
    ldx #0
    // [232] phi from gfx_mode::@24 to gfx_mode::@24 [phi:gfx_mode::@24->gfx_mode::@24]
    // [232] phi gfx_mode::i#2 = gfx_mode::i#1 [phi:gfx_mode::@24->gfx_mode::@24#0] -- register_copy 
    // gfx_mode::@24
  __b24:
    // DTV_PALETTE[i] = DTV_PALETTE_DEFAULT[i]
    // [233] DTV_PALETTE[gfx_mode::i#2] = DTV_PALETTE_DEFAULT[gfx_mode::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [234] gfx_mode::i#1 = ++ gfx_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [235] if(gfx_mode::i#1!=$10) goto gfx_mode::@24 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b24
    jmp __b25
}
  // gfx_init_screen0
// Initialize VIC screen 0 ( value is %yyyyxxxx where yyyy is ypos and xxxx is xpos)
gfx_init_screen0: {
    .label __1 = $16
    .label ch = $b
    .label cy = 3
    // [237] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
    // [237] phi gfx_init_screen0::ch#3 = VICII_SCREEN0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN0
    sta.z ch
    lda #>VICII_SCREEN0
    sta.z ch+1
    // [237] phi gfx_init_screen0::cy#4 = 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [237] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
    // [237] phi gfx_init_screen0::ch#3 = gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
    // [237] phi gfx_init_screen0::cy#4 = gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    // gfx_init_screen0::@1
  __b1:
    // [238] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
    // [238] phi gfx_init_screen0::ch#2 = gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
    // [238] phi gfx_init_screen0::cx#2 = 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [238] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
    // [238] phi gfx_init_screen0::ch#2 = gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
    // [238] phi gfx_init_screen0::cx#2 = gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    // gfx_init_screen0::@2
  __b2:
    // cy&$f
    // [239] gfx_init_screen0::$0 = gfx_init_screen0::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // (cy&$f)*$10
    // [240] gfx_init_screen0::$1 = gfx_init_screen0::$0 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // cx&$f
    // [241] gfx_init_screen0::$2 = gfx_init_screen0::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // (cy&$f)*$10|(cx&$f)
    // [242] gfx_init_screen0::$3 = gfx_init_screen0::$1 | gfx_init_screen0::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // *ch++ = (cy&$f)*$10|(cx&$f)
    // [243] *gfx_init_screen0::ch#2 = gfx_init_screen0::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cy&$f)*$10|(cx&$f);
    // [244] gfx_init_screen0::ch#1 = ++ gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [245] gfx_init_screen0::cx#1 = ++ gfx_init_screen0::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [246] if(gfx_init_screen0::cx#1!=$28) goto gfx_init_screen0::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen0::@3
    // for(byte cy: 0..24 )
    // [247] gfx_init_screen0::cy#1 = ++ gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [248] if(gfx_init_screen0::cy#1!=$19) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen0::@return
    // }
    // [249] return 
    rts
}
  // gfx_init_screen1
// Initialize VIC screen 1 ( value is %0000cccc where cccc is (x+y mod $f))
gfx_init_screen1: {
    .label ch = $d
    .label cy = 4
    // [251] phi from gfx_init_screen1 to gfx_init_screen1::@1 [phi:gfx_init_screen1->gfx_init_screen1::@1]
    // [251] phi gfx_init_screen1::ch#3 = VICII_SCREEN1 [phi:gfx_init_screen1->gfx_init_screen1::@1#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN1
    sta.z ch
    lda #>VICII_SCREEN1
    sta.z ch+1
    // [251] phi gfx_init_screen1::cy#4 = 0 [phi:gfx_init_screen1->gfx_init_screen1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [251] phi from gfx_init_screen1::@3 to gfx_init_screen1::@1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1]
    // [251] phi gfx_init_screen1::ch#3 = gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#0] -- register_copy 
    // [251] phi gfx_init_screen1::cy#4 = gfx_init_screen1::cy#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#1] -- register_copy 
    // gfx_init_screen1::@1
  __b1:
    // [252] phi from gfx_init_screen1::@1 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2]
    // [252] phi gfx_init_screen1::ch#2 = gfx_init_screen1::ch#3 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#0] -- register_copy 
    // [252] phi gfx_init_screen1::cx#2 = 0 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [252] phi from gfx_init_screen1::@2 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2]
    // [252] phi gfx_init_screen1::ch#2 = gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#0] -- register_copy 
    // [252] phi gfx_init_screen1::cx#2 = gfx_init_screen1::cx#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#1] -- register_copy 
    // gfx_init_screen1::@2
  __b2:
    // cx+cy
    // [253] gfx_init_screen1::$0 = gfx_init_screen1::cx#2 + gfx_init_screen1::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // (cx+cy)&$f
    // [254] gfx_init_screen1::$1 = gfx_init_screen1::$0 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // *ch++ = (cx+cy)&$f
    // [255] *gfx_init_screen1::ch#2 = gfx_init_screen1::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cx+cy)&$f;
    // [256] gfx_init_screen1::ch#1 = ++ gfx_init_screen1::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [257] gfx_init_screen1::cx#1 = ++ gfx_init_screen1::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [258] if(gfx_init_screen1::cx#1!=$28) goto gfx_init_screen1::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen1::@3
    // for(byte cy: 0..24 )
    // [259] gfx_init_screen1::cy#1 = ++ gfx_init_screen1::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [260] if(gfx_init_screen1::cy#1!=$19) goto gfx_init_screen1::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen1::@return
    // }
    // [261] return 
    rts
}
  // gfx_init_screen2
// Initialize VIC screen 2 ( value is %ccccrrrr where cccc is (x+y mod $f) and rrrr is %1111-%cccc)
gfx_init_screen2: {
    .label col2 = $16
    .label ch = $b
    .label cy = 2
    // [263] phi from gfx_init_screen2 to gfx_init_screen2::@1 [phi:gfx_init_screen2->gfx_init_screen2::@1]
    // [263] phi gfx_init_screen2::ch#3 = VICII_SCREEN2 [phi:gfx_init_screen2->gfx_init_screen2::@1#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN2
    sta.z ch
    lda #>VICII_SCREEN2
    sta.z ch+1
    // [263] phi gfx_init_screen2::cy#4 = 0 [phi:gfx_init_screen2->gfx_init_screen2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [263] phi from gfx_init_screen2::@3 to gfx_init_screen2::@1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1]
    // [263] phi gfx_init_screen2::ch#3 = gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#0] -- register_copy 
    // [263] phi gfx_init_screen2::cy#4 = gfx_init_screen2::cy#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#1] -- register_copy 
    // gfx_init_screen2::@1
  __b1:
    // [264] phi from gfx_init_screen2::@1 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2]
    // [264] phi gfx_init_screen2::ch#2 = gfx_init_screen2::ch#3 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#0] -- register_copy 
    // [264] phi gfx_init_screen2::cx#2 = 0 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [264] phi from gfx_init_screen2::@2 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2]
    // [264] phi gfx_init_screen2::ch#2 = gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#0] -- register_copy 
    // [264] phi gfx_init_screen2::cx#2 = gfx_init_screen2::cx#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#1] -- register_copy 
    // gfx_init_screen2::@2
  __b2:
    // cx+cy
    // [265] gfx_init_screen2::$0 = gfx_init_screen2::cx#2 + gfx_init_screen2::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // col = (cx+cy)&$f
    // [266] gfx_init_screen2::col#0 = gfx_init_screen2::$0 & $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
    // col2 = ($f-col)
    // [267] gfx_init_screen2::col2#0 = $f - gfx_init_screen2::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc #$f
    sta.z col2
    // col*$10
    // [268] gfx_init_screen2::$3 = gfx_init_screen2::col#0 << 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
    // col*$10 | col2
    // [269] gfx_init_screen2::$4 = gfx_init_screen2::$3 | gfx_init_screen2::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z col2
    // *ch++ = col*$10 | col2
    // [270] *gfx_init_screen2::ch#2 = gfx_init_screen2::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = col*$10 | col2;
    // [271] gfx_init_screen2::ch#1 = ++ gfx_init_screen2::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [272] gfx_init_screen2::cx#1 = ++ gfx_init_screen2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [273] if(gfx_init_screen2::cx#1!=$28) goto gfx_init_screen2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen2::@3
    // for(byte cy: 0..24 )
    // [274] gfx_init_screen2::cy#1 = ++ gfx_init_screen2::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [275] if(gfx_init_screen2::cy#1!=$19) goto gfx_init_screen2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen2::@return
    // }
    // [276] return 
    rts
}
  // gfx_init_screen3
// Initialize VIC screen 3 ( value is %00xx00yy where xx is xpos and yy is ypos
gfx_init_screen3: {
    .label __1 = $25
    .label ch = $b
    .label cy = 2
    // [278] phi from gfx_init_screen3 to gfx_init_screen3::@1 [phi:gfx_init_screen3->gfx_init_screen3::@1]
    // [278] phi gfx_init_screen3::ch#3 = VICII_SCREEN3 [phi:gfx_init_screen3->gfx_init_screen3::@1#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN3
    sta.z ch
    lda #>VICII_SCREEN3
    sta.z ch+1
    // [278] phi gfx_init_screen3::cy#4 = 0 [phi:gfx_init_screen3->gfx_init_screen3::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [278] phi from gfx_init_screen3::@3 to gfx_init_screen3::@1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1]
    // [278] phi gfx_init_screen3::ch#3 = gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#0] -- register_copy 
    // [278] phi gfx_init_screen3::cy#4 = gfx_init_screen3::cy#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#1] -- register_copy 
    // gfx_init_screen3::@1
  __b1:
    // [279] phi from gfx_init_screen3::@1 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2]
    // [279] phi gfx_init_screen3::ch#2 = gfx_init_screen3::ch#3 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#0] -- register_copy 
    // [279] phi gfx_init_screen3::cx#2 = 0 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [279] phi from gfx_init_screen3::@2 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2]
    // [279] phi gfx_init_screen3::ch#2 = gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#0] -- register_copy 
    // [279] phi gfx_init_screen3::cx#2 = gfx_init_screen3::cx#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#1] -- register_copy 
    // gfx_init_screen3::@2
  __b2:
    // cx&3
    // [280] gfx_init_screen3::$0 = gfx_init_screen3::cx#2 & 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
    // (cx&3)*$10
    // [281] gfx_init_screen3::$1 = gfx_init_screen3::$0 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // cy&3
    // [282] gfx_init_screen3::$2 = gfx_init_screen3::cy#4 & 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and.z cy
    // (cx&3)*$10|(cy&3)
    // [283] gfx_init_screen3::$3 = gfx_init_screen3::$1 | gfx_init_screen3::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // *ch++ = (cx&3)*$10|(cy&3)
    // [284] *gfx_init_screen3::ch#2 = gfx_init_screen3::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cx&3)*$10|(cy&3);
    // [285] gfx_init_screen3::ch#1 = ++ gfx_init_screen3::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [286] gfx_init_screen3::cx#1 = ++ gfx_init_screen3::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [287] if(gfx_init_screen3::cx#1!=$28) goto gfx_init_screen3::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen3::@3
    // for(byte cy: 0..24 )
    // [288] gfx_init_screen3::cy#1 = ++ gfx_init_screen3::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [289] if(gfx_init_screen3::cy#1!=$19) goto gfx_init_screen3::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen3::@return
    // }
    // [290] return 
    rts
}
  // gfx_init_screen4
// Initialize VIC screen 4 - all chars are 00
gfx_init_screen4: {
    .label ch = $d
    .label cy = 3
    // [292] phi from gfx_init_screen4 to gfx_init_screen4::@1 [phi:gfx_init_screen4->gfx_init_screen4::@1]
    // [292] phi gfx_init_screen4::cy#4 = 0 [phi:gfx_init_screen4->gfx_init_screen4::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [292] phi gfx_init_screen4::ch#3 = VICII_SCREEN4 [phi:gfx_init_screen4->gfx_init_screen4::@1#1] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN4
    sta.z ch
    lda #>VICII_SCREEN4
    sta.z ch+1
    // [292] phi from gfx_init_screen4::@3 to gfx_init_screen4::@1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1]
    // [292] phi gfx_init_screen4::cy#4 = gfx_init_screen4::cy#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#0] -- register_copy 
    // [292] phi gfx_init_screen4::ch#3 = gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#1] -- register_copy 
    // gfx_init_screen4::@1
  __b1:
    // [293] phi from gfx_init_screen4::@1 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2]
    // [293] phi gfx_init_screen4::cx#2 = 0 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [293] phi gfx_init_screen4::ch#2 = gfx_init_screen4::ch#3 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#1] -- register_copy 
    // [293] phi from gfx_init_screen4::@2 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2]
    // [293] phi gfx_init_screen4::cx#2 = gfx_init_screen4::cx#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#0] -- register_copy 
    // [293] phi gfx_init_screen4::ch#2 = gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#1] -- register_copy 
    // gfx_init_screen4::@2
  __b2:
    // *ch++ = 0
    // [294] *gfx_init_screen4::ch#2 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (ch),y
    // *ch++ = 0;
    // [295] gfx_init_screen4::ch#1 = ++ gfx_init_screen4::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [296] gfx_init_screen4::cx#1 = ++ gfx_init_screen4::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [297] if(gfx_init_screen4::cx#1!=$28) goto gfx_init_screen4::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen4::@3
    // for(byte cy: 0..24 )
    // [298] gfx_init_screen4::cy#1 = ++ gfx_init_screen4::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [299] if(gfx_init_screen4::cy#1!=$19) goto gfx_init_screen4::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen4::@return
    // }
    // [300] return 
    rts
}
  // gfx_init_charset
gfx_init_charset: {
    .label charset = $b
    .label chargen = $d
    .label c = 3
    // *PROCPORT = $32
    // [301] *PROCPORT = $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
    // [302] phi from gfx_init_charset to gfx_init_charset::@1 [phi:gfx_init_charset->gfx_init_charset::@1]
    // [302] phi gfx_init_charset::c#4 = 0 [phi:gfx_init_charset->gfx_init_charset::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [302] phi gfx_init_charset::charset#3 = VICII_CHARSET_ROM [phi:gfx_init_charset->gfx_init_charset::@1#1] -- pbuz1=pbuc1 
    lda #<VICII_CHARSET_ROM
    sta.z charset
    lda #>VICII_CHARSET_ROM
    sta.z charset+1
    // [302] phi gfx_init_charset::chargen#3 = CHARGEN [phi:gfx_init_charset->gfx_init_charset::@1#2] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    // [302] phi from gfx_init_charset::@3 to gfx_init_charset::@1 [phi:gfx_init_charset::@3->gfx_init_charset::@1]
    // [302] phi gfx_init_charset::c#4 = gfx_init_charset::c#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#0] -- register_copy 
    // [302] phi gfx_init_charset::charset#3 = gfx_init_charset::charset#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#1] -- register_copy 
    // [302] phi gfx_init_charset::chargen#3 = gfx_init_charset::chargen#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#2] -- register_copy 
    // gfx_init_charset::@1
  __b1:
    // [303] phi from gfx_init_charset::@1 to gfx_init_charset::@2 [phi:gfx_init_charset::@1->gfx_init_charset::@2]
    // [303] phi gfx_init_charset::l#2 = 0 [phi:gfx_init_charset::@1->gfx_init_charset::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [303] phi gfx_init_charset::charset#2 = gfx_init_charset::charset#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#1] -- register_copy 
    // [303] phi gfx_init_charset::chargen#2 = gfx_init_charset::chargen#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#2] -- register_copy 
    // [303] phi from gfx_init_charset::@2 to gfx_init_charset::@2 [phi:gfx_init_charset::@2->gfx_init_charset::@2]
    // [303] phi gfx_init_charset::l#2 = gfx_init_charset::l#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#0] -- register_copy 
    // [303] phi gfx_init_charset::charset#2 = gfx_init_charset::charset#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#1] -- register_copy 
    // [303] phi gfx_init_charset::chargen#2 = gfx_init_charset::chargen#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#2] -- register_copy 
    // gfx_init_charset::@2
  __b2:
    // *charset++ = *chargen++
    // [304] *gfx_init_charset::charset#2 = *gfx_init_charset::chargen#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta (charset),y
    // *charset++ = *chargen++;
    // [305] gfx_init_charset::charset#1 = ++ gfx_init_charset::charset#2 -- pbuz1=_inc_pbuz1 
    inc.z charset
    bne !+
    inc.z charset+1
  !:
    // [306] gfx_init_charset::chargen#1 = ++ gfx_init_charset::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // for( byte l: 0..7)
    // [307] gfx_init_charset::l#1 = ++ gfx_init_charset::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [308] if(gfx_init_charset::l#1!=8) goto gfx_init_charset::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b2
    // gfx_init_charset::@3
    // for(byte c: 0..$ff)
    // [309] gfx_init_charset::c#1 = ++ gfx_init_charset::c#4 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [310] if(gfx_init_charset::c#1!=0) goto gfx_init_charset::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    bne __b1
    // gfx_init_charset::@4
    // *PROCPORT = $37
    // [311] *PROCPORT = $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    // gfx_init_charset::@return
    // }
    // [312] return 
    rts
}
  // gfx_init_VICII_bitmap
// Initialize VIC bitmap
gfx_init_VICII_bitmap: {
    .const lines_cnt = 9
    .label l = 4
    // bitmap_init(VICII_BITMAP, VICII_SCREEN0)
    // [314] call bitmap_init 
  // Draw some lines on the bitmap
    // [637] phi from gfx_init_VICII_bitmap to bitmap_init [phi:gfx_init_VICII_bitmap->bitmap_init]
    jsr bitmap_init
    // [315] phi from gfx_init_VICII_bitmap to gfx_init_VICII_bitmap::@3 [phi:gfx_init_VICII_bitmap->gfx_init_VICII_bitmap::@3]
    // gfx_init_VICII_bitmap::@3
    // bitmap_clear(BLACK, WHITE)
    // [316] call bitmap_clear 
    // [659] phi from gfx_init_VICII_bitmap::@3 to bitmap_clear [phi:gfx_init_VICII_bitmap::@3->bitmap_clear]
    jsr bitmap_clear
    // [317] phi from gfx_init_VICII_bitmap::@3 to gfx_init_VICII_bitmap::@1 [phi:gfx_init_VICII_bitmap::@3->gfx_init_VICII_bitmap::@1]
    // [317] phi gfx_init_VICII_bitmap::l#2 = 0 [phi:gfx_init_VICII_bitmap::@3->gfx_init_VICII_bitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // gfx_init_VICII_bitmap::@1
  __b1:
    // for(byte l=0; l<lines_cnt;l++)
    // [318] if(gfx_init_VICII_bitmap::l#2<gfx_init_VICII_bitmap::lines_cnt) goto gfx_init_VICII_bitmap::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b2
    // gfx_init_VICII_bitmap::@return
    // }
    // [319] return 
    rts
    // gfx_init_VICII_bitmap::@2
  __b2:
    // bitmap_line(lines_x[l], lines_y[l], lines_x[l+1], lines_y[l+1])
    // [320] bitmap_line::x1#0 = gfx_init_VICII_bitmap::lines_x[gfx_init_VICII_bitmap::l#2] -- vwuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x1
    lda #0
    sta.z bitmap_line.x1+1
    // [321] bitmap_line::y1#0 = gfx_init_VICII_bitmap::lines_y[gfx_init_VICII_bitmap::l#2] -- vwuz1=pbuc1_derefidx_vbuz2 
    lda lines_y,y
    sta.z bitmap_line.y1
    lda #0
    sta.z bitmap_line.y1+1
    // [322] bitmap_line::x2#0 = (gfx_init_VICII_bitmap::lines_x+1)[gfx_init_VICII_bitmap::l#2] -- vwuz1=pbuc1_derefidx_vbuz2 
    lda lines_x+1,y
    sta.z bitmap_line.x2
    lda #0
    sta.z bitmap_line.x2+1
    // [323] bitmap_line::y2#0 = (gfx_init_VICII_bitmap::lines_y+1)[gfx_init_VICII_bitmap::l#2] -- vwuz1=pbuc1_derefidx_vbuz2 
    lda lines_y+1,y
    sta.z bitmap_line.y2
    lda #0
    sta.z bitmap_line.y2+1
    // [324] call bitmap_line 
    jsr bitmap_line
    // gfx_init_VICII_bitmap::@4
    // for(byte l=0; l<lines_cnt;l++)
    // [325] gfx_init_VICII_bitmap::l#1 = ++ gfx_init_VICII_bitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [317] phi from gfx_init_VICII_bitmap::@4 to gfx_init_VICII_bitmap::@1 [phi:gfx_init_VICII_bitmap::@4->gfx_init_VICII_bitmap::@1]
    // [317] phi gfx_init_VICII_bitmap::l#2 = gfx_init_VICII_bitmap::l#1 [phi:gfx_init_VICII_bitmap::@4->gfx_init_VICII_bitmap::@1#0] -- register_copy 
    jmp __b1
  .segment Data
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
.segment Code
  // gfx_init_plane_8bppchunky
// Initialize 8BPP Chunky Bitmap (contains 8bpp pixels)
gfx_init_plane_8bppchunky: {
    .label __5 = $1b
    .label gfxb = $d
    .label x = $b
    .label y = 4
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [327] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_8bppchunky to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)PLANE_8BPP_CHUNKY/$4000 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000
    jsr dtvSetCpuBankSegment1
    // [328] phi from gfx_init_plane_8bppchunky to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1]
    // [328] phi gfx_init_plane_8bppchunky::gfxbCpuBank#7 = ++(byte)PLANE_8BPP_CHUNKY/$4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#0] -- vbuxx=vbuc1 
    ldx #PLANE_8BPP_CHUNKY/$4000+1
    // [328] phi gfx_init_plane_8bppchunky::y#6 = 0 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [328] phi gfx_init_plane_8bppchunky::gfxb#5 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    // [328] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1]
    // [328] phi gfx_init_plane_8bppchunky::gfxbCpuBank#7 = gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#0] -- register_copy 
    // [328] phi gfx_init_plane_8bppchunky::y#6 = gfx_init_plane_8bppchunky::y#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#1] -- register_copy 
    // [328] phi gfx_init_plane_8bppchunky::gfxb#5 = gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#2] -- register_copy 
    // gfx_init_plane_8bppchunky::@1
  __b1:
    // [329] phi from gfx_init_plane_8bppchunky::@1 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2]
    // [329] phi gfx_init_plane_8bppchunky::gfxbCpuBank#4 = gfx_init_plane_8bppchunky::gfxbCpuBank#7 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [329] phi gfx_init_plane_8bppchunky::x#2 = 0 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    sta.z x+1
    // [329] phi gfx_init_plane_8bppchunky::gfxb#3 = gfx_init_plane_8bppchunky::gfxb#5 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    // [329] phi from gfx_init_plane_8bppchunky::@3 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2]
    // [329] phi gfx_init_plane_8bppchunky::gfxbCpuBank#4 = gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [329] phi gfx_init_plane_8bppchunky::x#2 = gfx_init_plane_8bppchunky::x#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#1] -- register_copy 
    // [329] phi gfx_init_plane_8bppchunky::gfxb#3 = gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    // gfx_init_plane_8bppchunky::@2
  __b2:
    // if(gfxb==$8000)
    // [330] if(gfx_init_plane_8bppchunky::gfxb#3!=$8000) goto gfx_init_plane_8bppchunky::@3 -- pbuz1_neq_vwuc1_then_la1 
    lda.z gfxb+1
    cmp #>$8000
    bne __b3
    lda.z gfxb
    cmp #<$8000
    bne __b3
    // gfx_init_plane_8bppchunky::@4
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [331] dtvSetCpuBankSegment1::cpuBankIdx#1 = gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
    // [332] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_8bppchunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_8bppchunky::@7
    // dtvSetCpuBankSegment1(gfxbCpuBank++);
    // [333] gfx_init_plane_8bppchunky::gfxbCpuBank#2 = ++ gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
    // [334] phi from gfx_init_plane_8bppchunky::@7 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3]
    // [334] phi gfx_init_plane_8bppchunky::gfxbCpuBank#8 = gfx_init_plane_8bppchunky::gfxbCpuBank#2 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [334] phi gfx_init_plane_8bppchunky::gfxb#4 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    // [334] phi from gfx_init_plane_8bppchunky::@2 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3]
    // [334] phi gfx_init_plane_8bppchunky::gfxbCpuBank#8 = gfx_init_plane_8bppchunky::gfxbCpuBank#4 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [334] phi gfx_init_plane_8bppchunky::gfxb#4 = gfx_init_plane_8bppchunky::gfxb#3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#1] -- register_copy 
    // gfx_init_plane_8bppchunky::@3
  __b3:
    // x+y
    // [335] gfx_init_plane_8bppchunky::$5 = gfx_init_plane_8bppchunky::x#2 + gfx_init_plane_8bppchunky::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z y
    clc
    adc.z x
    sta.z __5
    lda #0
    adc.z x+1
    sta.z __5+1
    // c = (byte)(x+y)
    // [336] gfx_init_plane_8bppchunky::c#0 = (byte)gfx_init_plane_8bppchunky::$5 -- vbuaa=_byte_vwuz1 
    lda.z __5
    // *gfxb++ = c
    // [337] *gfx_init_plane_8bppchunky::gfxb#4 = gfx_init_plane_8bppchunky::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
    // *gfxb++ = c;
    // [338] gfx_init_plane_8bppchunky::gfxb#1 = ++ gfx_init_plane_8bppchunky::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for (word x : 0..319)
    // [339] gfx_init_plane_8bppchunky::x#1 = ++ gfx_init_plane_8bppchunky::x#2 -- vwuz1=_inc_vwuz1 
    inc.z x
    bne !+
    inc.z x+1
  !:
    // [340] if(gfx_init_plane_8bppchunky::x#1!=$140) goto gfx_init_plane_8bppchunky::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda.z x+1
    cmp #>$140
    bne __b2
    lda.z x
    cmp #<$140
    bne __b2
    // gfx_init_plane_8bppchunky::@5
    // for(byte y : 0..199)
    // [341] gfx_init_plane_8bppchunky::y#1 = ++ gfx_init_plane_8bppchunky::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [342] if(gfx_init_plane_8bppchunky::y#1!=$c8) goto gfx_init_plane_8bppchunky::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z y
    bne __b1
    // [343] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@6 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@6]
    // gfx_init_plane_8bppchunky::@6
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [344] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_8bppchunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_8bppchunky::@return
    // }
    // [345] return 
    rts
}
  // gfx_init_plane_charset8
// Initialize Plane with 8bpp charset
gfx_init_plane_charset8: {
    // 8bpp cells for Plane B (charset) - ROM charset with 256 colors
    .const gfxbCpuBank = PLANE_CHARSET8/$4000
    .label bits = $15
    .label chargen = $d
    .label gfxa = $b
    .label col = $16
    .label cr = $a
    .label ch = 9
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [347] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_charset8::@9
    // *PROCPORT = PROCPORT_RAM_CHARROM
    // [348] *PROCPORT = PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [349] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
    // [349] phi gfx_init_plane_charset8::ch#8 = 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ch
    // [349] phi gfx_init_plane_charset8::col#6 = 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    sta.z col
    // [349] phi gfx_init_plane_charset8::gfxa#6 = (byte*)$4000 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [349] phi gfx_init_plane_charset8::chargen#3 = CHARGEN [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    // [349] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
    // [349] phi gfx_init_plane_charset8::ch#8 = gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
    // [349] phi gfx_init_plane_charset8::col#6 = gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
    // [349] phi gfx_init_plane_charset8::gfxa#6 = gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
    // [349] phi gfx_init_plane_charset8::chargen#3 = gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    // gfx_init_plane_charset8::@1
  __b1:
    // [350] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
    // [350] phi gfx_init_plane_charset8::cr#6 = 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cr
    // [350] phi gfx_init_plane_charset8::col#5 = gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [350] phi gfx_init_plane_charset8::gfxa#5 = gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [350] phi gfx_init_plane_charset8::chargen#2 = gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    // [350] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
    // [350] phi gfx_init_plane_charset8::cr#6 = gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
    // [350] phi gfx_init_plane_charset8::col#5 = gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [350] phi gfx_init_plane_charset8::gfxa#5 = gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [350] phi gfx_init_plane_charset8::chargen#2 = gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    // gfx_init_plane_charset8::@2
  __b2:
    // bits = *chargen++
    // [351] gfx_init_plane_charset8::bits#0 = *gfx_init_plane_charset8::chargen#2 -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta.z bits
    // [352] gfx_init_plane_charset8::chargen#1 = ++ gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [353] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
    // [353] phi gfx_init_plane_charset8::cp#2 = 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [353] phi gfx_init_plane_charset8::col#2 = gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [353] phi gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [353] phi gfx_init_plane_charset8::bits#2 = gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    // [353] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
    // [353] phi gfx_init_plane_charset8::cp#2 = gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
    // [353] phi gfx_init_plane_charset8::col#2 = gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [353] phi gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [353] phi gfx_init_plane_charset8::bits#2 = gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    // gfx_init_plane_charset8::@3
  __b3:
    // bits & $80
    // [354] gfx_init_plane_charset8::$2 = gfx_init_plane_charset8::bits#2 & $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z bits
    // if((bits & $80) != 0)
    // [355] if(gfx_init_plane_charset8::$2==0) goto gfx_init_plane_charset8::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b5
    // gfx_init_plane_charset8::@5
    // [356] gfx_init_plane_charset8::c#3 = gfx_init_plane_charset8::col#2 -- vbuaa=vbuz1 
    lda.z col
    // [357] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
    // [357] phi gfx_init_plane_charset8::c#2 = gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp __b4
    // [357] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  __b5:
    // [357] phi gfx_init_plane_charset8::c#2 = 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuaa=vbuc1 
    lda #0
    // gfx_init_plane_charset8::@4
  __b4:
    // *gfxa++ = c
    // [358] *gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
    // *gfxa++ = c;
    // [359] gfx_init_plane_charset8::gfxa#1 = ++ gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // bits = bits*2
    // [360] gfx_init_plane_charset8::bits#1 = gfx_init_plane_charset8::bits#2 << 1 -- vbuz1=vbuz1_rol_1 
    asl.z bits
    // col++;
    // [361] gfx_init_plane_charset8::col#1 = ++ gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // for ( byte cp : 0..7)
    // [362] gfx_init_plane_charset8::cp#1 = ++ gfx_init_plane_charset8::cp#2 -- vbuxx=_inc_vbuxx 
    inx
    // [363] if(gfx_init_plane_charset8::cp#1!=8) goto gfx_init_plane_charset8::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b3
    // gfx_init_plane_charset8::@6
    // for ( byte cr : 0..7)
    // [364] gfx_init_plane_charset8::cr#1 = ++ gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc.z cr
    // [365] if(gfx_init_plane_charset8::cr#1!=8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cr
    bne __b2
    // gfx_init_plane_charset8::@7
    // for(byte ch : $00..$ff)
    // [366] gfx_init_plane_charset8::ch#1 = ++ gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc.z ch
    // [367] if(gfx_init_plane_charset8::ch#1!=0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda.z ch
    bne __b1
    // gfx_init_plane_charset8::@8
    // *PROCPORT = PROCPORT_RAM_IO
    // [368] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [369] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_charset8::@return
    // }
    // [370] return 
    rts
}
  // gfx_init_plane_horisontal
// Initialize Plane with Horizontal Stripes
gfx_init_plane_horisontal: {
    .const gfxbCpuBank = PLANE_HORISONTAL/$4000
    .label gfxa = $b
    .label ay = 9
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [372] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_horisontal to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = gfx_init_plane_horisontal::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [373] phi from gfx_init_plane_horisontal to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1]
    // [373] phi gfx_init_plane_horisontal::gfxa#6 = (byte*)$4000 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [373] phi gfx_init_plane_horisontal::ay#4 = 0 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    // [373] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1]
    // [373] phi gfx_init_plane_horisontal::gfxa#6 = gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#0] -- register_copy 
    // [373] phi gfx_init_plane_horisontal::ay#4 = gfx_init_plane_horisontal::ay#1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#1] -- register_copy 
    // gfx_init_plane_horisontal::@1
  __b1:
    // [374] phi from gfx_init_plane_horisontal::@1 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2]
    // [374] phi gfx_init_plane_horisontal::ax#2 = 0 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [374] phi gfx_init_plane_horisontal::gfxa#3 = gfx_init_plane_horisontal::gfxa#6 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#1] -- register_copy 
    // [374] phi from gfx_init_plane_horisontal::@4 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2]
    // [374] phi gfx_init_plane_horisontal::ax#2 = gfx_init_plane_horisontal::ax#1 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#0] -- register_copy 
    // [374] phi gfx_init_plane_horisontal::gfxa#3 = gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#1] -- register_copy 
    // gfx_init_plane_horisontal::@2
  __b2:
    // ay&4
    // [375] gfx_init_plane_horisontal::$2 = gfx_init_plane_horisontal::ay#4 & 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and.z ay
    // if((ay&4)==0)
    // [376] if(gfx_init_plane_horisontal::$2==0) goto gfx_init_plane_horisontal::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // gfx_init_plane_horisontal::@5
    // *gfxa++ = %11111111
    // [377] *gfx_init_plane_horisontal::gfxa#3 = $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
    // *gfxa++ = %11111111;
    // [378] gfx_init_plane_horisontal::gfxa#2 = ++ gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [379] phi from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5 to gfx_init_plane_horisontal::@4 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4]
    // [379] phi gfx_init_plane_horisontal::gfxa#7 = gfx_init_plane_horisontal::gfxa#1 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4#0] -- register_copy 
    // gfx_init_plane_horisontal::@4
  __b4:
    // for (byte ax : 0..39)
    // [380] gfx_init_plane_horisontal::ax#1 = ++ gfx_init_plane_horisontal::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [381] if(gfx_init_plane_horisontal::ax#1!=$28) goto gfx_init_plane_horisontal::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_horisontal::@6
    // for(byte ay : 0..199)
    // [382] gfx_init_plane_horisontal::ay#1 = ++ gfx_init_plane_horisontal::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [383] if(gfx_init_plane_horisontal::ay#1!=$c8) goto gfx_init_plane_horisontal::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1
    // [384] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@7]
    // gfx_init_plane_horisontal::@7
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [385] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_horisontal::@7 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_horisontal::@return
    // }
    // [386] return 
    rts
    // gfx_init_plane_horisontal::@3
  __b3:
    // *gfxa++ = %00000000
    // [387] *gfx_init_plane_horisontal::gfxa#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (gfxa),y
    // *gfxa++ = %00000000;
    // [388] gfx_init_plane_horisontal::gfxa#1 = ++ gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    jmp __b4
}
  // gfx_init_plane_vertical
// Initialize Plane with Vertical Stripes
gfx_init_plane_vertical: {
    .const gfxbCpuBank = PLANE_VERTICAL/$4000
    .label gfxb = $d
    .label by = $a
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [390] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_vertical to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = gfx_init_plane_vertical::gfxbCpuBank#0 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [391] phi from gfx_init_plane_vertical to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1]
    // [391] phi gfx_init_plane_vertical::by#4 = 0 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [391] phi gfx_init_plane_vertical::gfxb#3 = (byte*)$4000+PLANE_VERTICAL&$3fff [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#1] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb
    lda #>$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb+1
    // [391] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1]
    // [391] phi gfx_init_plane_vertical::by#4 = gfx_init_plane_vertical::by#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#0] -- register_copy 
    // [391] phi gfx_init_plane_vertical::gfxb#3 = gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#1] -- register_copy 
    // gfx_init_plane_vertical::@1
  __b1:
    // [392] phi from gfx_init_plane_vertical::@1 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2]
    // [392] phi gfx_init_plane_vertical::bx#2 = 0 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [392] phi gfx_init_plane_vertical::gfxb#2 = gfx_init_plane_vertical::gfxb#3 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#1] -- register_copy 
    // [392] phi from gfx_init_plane_vertical::@2 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2]
    // [392] phi gfx_init_plane_vertical::bx#2 = gfx_init_plane_vertical::bx#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#0] -- register_copy 
    // [392] phi gfx_init_plane_vertical::gfxb#2 = gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#1] -- register_copy 
    // gfx_init_plane_vertical::@2
  __b2:
    // *gfxb++ = %00001111
    // [393] *gfx_init_plane_vertical::gfxb#2 = $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
    // *gfxb++ = %00001111;
    // [394] gfx_init_plane_vertical::gfxb#1 = ++ gfx_init_plane_vertical::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for ( byte bx : 0..39)
    // [395] gfx_init_plane_vertical::bx#1 = ++ gfx_init_plane_vertical::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [396] if(gfx_init_plane_vertical::bx#1!=$28) goto gfx_init_plane_vertical::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_vertical::@3
    // for(byte by : 0..199)
    // [397] gfx_init_plane_vertical::by#1 = ++ gfx_init_plane_vertical::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [398] if(gfx_init_plane_vertical::by#1!=$c8) goto gfx_init_plane_vertical::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1
    // [399] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@4 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@4]
    // gfx_init_plane_vertical::@4
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [400] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_vertical::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_vertical::@return
    // }
    // [401] return 
    rts
}
  // gfx_init_plane_horisontal2
// Initialize Plane with Horizontal Stripes every 2 pixels
gfx_init_plane_horisontal2: {
    .const gfxbCpuBank = PLANE_HORISONTAL2/$4000
    .label gfxa = $d
    .label ay = $15
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [403] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_horisontal2 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = gfx_init_plane_horisontal2::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [404] phi from gfx_init_plane_horisontal2 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1]
    // [404] phi gfx_init_plane_horisontal2::gfxa#3 = (byte*)$4000 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [404] phi gfx_init_plane_horisontal2::ay#4 = 0 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    // [404] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1]
    // [404] phi gfx_init_plane_horisontal2::gfxa#3 = gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#0] -- register_copy 
    // [404] phi gfx_init_plane_horisontal2::ay#4 = gfx_init_plane_horisontal2::ay#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#1] -- register_copy 
    // gfx_init_plane_horisontal2::@1
  __b1:
    // [405] phi from gfx_init_plane_horisontal2::@1 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2]
    // [405] phi gfx_init_plane_horisontal2::ax#2 = 0 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [405] phi gfx_init_plane_horisontal2::gfxa#2 = gfx_init_plane_horisontal2::gfxa#3 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    // [405] phi from gfx_init_plane_horisontal2::@2 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2]
    // [405] phi gfx_init_plane_horisontal2::ax#2 = gfx_init_plane_horisontal2::ax#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#0] -- register_copy 
    // [405] phi gfx_init_plane_horisontal2::gfxa#2 = gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    // gfx_init_plane_horisontal2::@2
  __b2:
    // ay/2
    // [406] gfx_init_plane_horisontal2::$2 = gfx_init_plane_horisontal2::ay#4 >> 1 -- vbuaa=vbuz1_ror_1 
    lda.z ay
    lsr
    // row = (ay/2) & 3
    // [407] gfx_init_plane_horisontal2::row#0 = gfx_init_plane_horisontal2::$2 & 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
    // *gfxa++ = row_bitmask[row]
    // [408] *gfx_init_plane_horisontal2::gfxa#2 = gfx_init_plane_horisontal2::row_bitmask[gfx_init_plane_horisontal2::row#0] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // *gfxa++ = row_bitmask[row];
    // [409] gfx_init_plane_horisontal2::gfxa#1 = ++ gfx_init_plane_horisontal2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // for (byte ax : 0..39)
    // [410] gfx_init_plane_horisontal2::ax#1 = ++ gfx_init_plane_horisontal2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [411] if(gfx_init_plane_horisontal2::ax#1!=$28) goto gfx_init_plane_horisontal2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_horisontal2::@3
    // for(byte ay : 0..199)
    // [412] gfx_init_plane_horisontal2::ay#1 = ++ gfx_init_plane_horisontal2::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [413] if(gfx_init_plane_horisontal2::ay#1!=$c8) goto gfx_init_plane_horisontal2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1
    // [414] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@4 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@4]
    // gfx_init_plane_horisontal2::@4
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [415] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_horisontal2::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_horisontal2::@return
    // }
    // [416] return 
    rts
  .segment Data
    row_bitmask: .byte 0, $55, $aa, $ff
}
.segment Code
  // gfx_init_plane_vertical2
// Initialize Plane with Vertical Stripes every 2 pixels
gfx_init_plane_vertical2: {
    // gfx_init_plane_fill(PLANE_VERTICAL2, %00011011)
    // [418] call gfx_init_plane_fill 
    // [719] phi from gfx_init_plane_vertical2 to gfx_init_plane_fill [phi:gfx_init_plane_vertical2->gfx_init_plane_fill]
    // [719] phi gfx_init_plane_fill::fill#6 = $1b [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$1b
    sta.z gfx_init_plane_fill.fill
    // [719] phi gfx_init_plane_fill::plane_addr#3 = PLANE_VERTICAL2 [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    // gfx_init_plane_vertical2::@return
    // }
    // [419] return 
    rts
}
  // gfx_init_plane_blank
// Initialize Plane with blank pixels
gfx_init_plane_blank: {
    // gfx_init_plane_fill(PLANE_BLANK, 0)
    // [421] call gfx_init_plane_fill 
    // [719] phi from gfx_init_plane_blank to gfx_init_plane_fill [phi:gfx_init_plane_blank->gfx_init_plane_fill]
    // [719] phi gfx_init_plane_fill::fill#6 = 0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z gfx_init_plane_fill.fill
    // [719] phi gfx_init_plane_fill::plane_addr#3 = PLANE_BLANK [phi:gfx_init_plane_blank->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    // gfx_init_plane_blank::@return
    // }
    // [422] return 
    rts
}
  // gfx_init_plane_full
// Initialize Plane with all pixels
gfx_init_plane_full: {
    // gfx_init_plane_fill(PLANE_FULL, $ff)
    // [424] call gfx_init_plane_fill 
    // [719] phi from gfx_init_plane_full to gfx_init_plane_fill [phi:gfx_init_plane_full->gfx_init_plane_fill]
    // [719] phi gfx_init_plane_fill::fill#6 = $ff [phi:gfx_init_plane_full->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z gfx_init_plane_fill.fill
    // [719] phi gfx_init_plane_fill::plane_addr#3 = PLANE_FULL [phi:gfx_init_plane_full->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    // gfx_init_plane_full::@return
    // }
    // [425] return 
    rts
}
  // print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
// print_set_screen(byte* zp($f) screen)
print_set_screen: {
    .label screen = $f
    // print_screen = screen
    // [427] print_screen#0 = print_set_screen::screen#2
    // print_set_screen::@return
    // }
    // [428] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [429] memset::str#0 = (void*)print_screen#0 -- pvoz1=pvoz2 
    lda.z print_screen
    sta.z memset.str
    lda.z print_screen+1
    sta.z memset.str+1
    // [430] call memset 
    // [740] phi from print_cls to memset [phi:print_cls->memset]
    // [740] phi memset::c#5 = ' ' [phi:print_cls->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [740] phi memset::str#4 = memset::str#0 [phi:print_cls->memset#1] -- register_copy 
    // [740] phi memset::num#3 = $3e8 [phi:print_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // print_cls::@return
    // }
    // [431] return 
    rts
}
  // print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zp($b) str)
print_str_lines: {
    .label str = $b
    // [433] print_char_cursor#72 = print_screen#0 -- pbuz1=pbuz2 
    lda.z print_screen
    sta.z print_char_cursor
    lda.z print_screen+1
    sta.z print_char_cursor+1
    // [434] phi from print_str_lines print_str_lines::@6 to print_str_lines::@1 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1]
    // [434] phi print_line_cursor#1 = print_screen#0 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#0] -- register_copy 
    // [434] phi print_char_cursor#2 = print_char_cursor#72 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#1] -- register_copy 
    // [434] phi print_str_lines::str#3 = print_str_lines::str#5 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#2] -- register_copy 
    // print_str_lines::@1
  __b1:
    // while(*str)
    // [435] if(0!=*print_str_lines::str#3) goto print_str_lines::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str_lines::@return
    // }
    // [436] return 
    rts
    // [437] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
    // [437] phi print_char_cursor#43 = print_char_cursor#2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
    // [437] phi print_str_lines::str#4 = print_str_lines::str#3 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    // print_str_lines::@2
  __b2:
    // ch = *(str++)
    // [438] print_str_lines::ch#0 = *print_str_lines::str#4 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [439] print_str_lines::str#0 = ++ print_str_lines::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // if(ch)
    // [440] if(0==print_str_lines::ch#0) goto print_str_lines::@3 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b3
    // print_str_lines::@4
    // print_char(ch)
    // [441] print_char::ch#0 = print_str_lines::ch#0
    // [442] call print_char 
    jsr print_char
    // [443] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
    // [443] phi print_char_cursor#44 = print_char_cursor#43 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    // print_str_lines::@3
  __b3:
    // while (ch)
    // [444] if(0!=print_str_lines::ch#0) goto print_str_lines::@2 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // [445] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
    // print_str_lines::@5
    // print_ln()
    // [446] call print_ln 
    // [752] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
    jsr print_ln
    // print_str_lines::@6
    // [447] print_char_cursor#73 = print_line_cursor#2 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    jmp __b1
}
  // form_set_screen
// Set the screen to use for the form.
// screen is the start address of the screen to use
form_set_screen: {
    .label line = $f
    // [449] phi from form_set_screen to form_set_screen::@1 [phi:form_set_screen->form_set_screen::@1]
    // [449] phi form_set_screen::y#2 = 0 [phi:form_set_screen->form_set_screen::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [449] phi form_set_screen::line#2 = FORM_SCREEN [phi:form_set_screen->form_set_screen::@1#1] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z line
    lda #>FORM_SCREEN
    sta.z line+1
    // [449] phi from form_set_screen::@1 to form_set_screen::@1 [phi:form_set_screen::@1->form_set_screen::@1]
    // [449] phi form_set_screen::y#2 = form_set_screen::y#1 [phi:form_set_screen::@1->form_set_screen::@1#0] -- register_copy 
    // [449] phi form_set_screen::line#2 = form_set_screen::line#1 [phi:form_set_screen::@1->form_set_screen::@1#1] -- register_copy 
    // form_set_screen::@1
  __b1:
    // <line
    // [450] form_set_screen::$0 = < form_set_screen::line#2 -- vbuaa=_lo_pbuz1 
    lda.z line
    // form_line_lo[y] = <line
    // [451] form_line_lo[form_set_screen::y#2] = form_set_screen::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_lo,x
    // >line
    // [452] form_set_screen::$1 = > form_set_screen::line#2 -- vbuaa=_hi_pbuz1 
    lda.z line+1
    // form_line_hi[y] = >line
    // [453] form_line_hi[form_set_screen::y#2] = form_set_screen::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_hi,x
    // line = line + 40
    // [454] form_set_screen::line#1 = form_set_screen::line#2 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // for(byte y: 0..24)
    // [455] form_set_screen::y#1 = ++ form_set_screen::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [456] if(form_set_screen::y#1!=$19) goto form_set_screen::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne __b1
    // form_set_screen::@return
    // }
    // [457] return 
    rts
}
  // form_render_values
// Render all form values from the form_fields_val array
form_render_values: {
    // [459] phi from form_render_values to form_render_values::@1 [phi:form_render_values->form_render_values::@1]
    // [459] phi form_render_values::idx#2 = 0 [phi:form_render_values->form_render_values::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // form_render_values::@1
  __b1:
    // for( byte idx=0; idx<form_fields_cnt; idx++)
    // [460] if(form_render_values::idx#2<form_fields_cnt) goto form_render_values::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #form_fields_cnt
    bcc __b2
    // form_render_values::@return
    // }
    // [461] return 
    rts
    // form_render_values::@2
  __b2:
    // form_field_ptr(idx)
    // [462] form_field_ptr::field_idx#0 = form_render_values::idx#2
    // [463] call form_field_ptr 
    // [757] phi from form_render_values::@2 to form_field_ptr [phi:form_render_values::@2->form_field_ptr]
    // [757] phi form_field_ptr::field_idx#2 = form_field_ptr::field_idx#0 [phi:form_render_values::@2->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    // form_render_values::@3
    // *field = print_hextab[form_fields_val[idx]]
    // [464] ((byte*)form_field_ptr::line#0)[form_field_ptr::x#0] = print_hextab[form_fields_val[form_render_values::idx#2]] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuxx) 
    ldy form_fields_val,x
    lda print_hextab,y
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // for( byte idx=0; idx<form_fields_cnt; idx++)
    // [465] form_render_values::idx#1 = ++ form_render_values::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [459] phi from form_render_values::@3 to form_render_values::@1 [phi:form_render_values::@3->form_render_values::@1]
    // [459] phi form_render_values::idx#2 = form_render_values::idx#1 [phi:form_render_values::@3->form_render_values::@1#0] -- register_copy 
    jmp __b1
}
  // render_preset_name
// Render form preset name in the form
// idx is the ID of the preset
// render_preset_name(byte register(A) idx)
render_preset_name: {
    .label name = $b
    // if(idx==0)
    // [467] if(render_preset_name::idx#10==0) goto render_preset_name::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // render_preset_name::@3
    // if(idx==1)
    // [468] if(render_preset_name::idx#10==1) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b6
    // render_preset_name::@4
    // if(idx==2)
    // [469] if(render_preset_name::idx#10==2) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b7
    // render_preset_name::@5
    // if(idx==3)
    // [470] if(render_preset_name::idx#10==3) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b8
    // render_preset_name::@6
    // if(idx==4)
    // [471] if(render_preset_name::idx#10==4) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b9
    // render_preset_name::@7
    // if(idx==5)
    // [472] if(render_preset_name::idx#10==5) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __b10
    // render_preset_name::@8
    // if(idx==6)
    // [473] if(render_preset_name::idx#10==6) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __b11
    // render_preset_name::@9
    // if(idx==7)
    // [474] if(render_preset_name::idx#10==7) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __b12
    // render_preset_name::@10
    // if(idx==8)
    // [475] if(render_preset_name::idx#10==8) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __b4
    // render_preset_name::@11
    // if(idx==9)
    // [476] if(render_preset_name::idx#10==9) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b5
    // render_preset_name::@12
    // if(idx==10)
    // [477] if(render_preset_name::idx#10==$a) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1
    // [479] phi from render_preset_name render_preset_name::@12 to render_preset_name::@2 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2]
  __b3:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_1
    sta.z name
    lda #>name_1
    sta.z name+1
    jmp __b2
    // [478] phi from render_preset_name::@12 to render_preset_name::@1 [phi:render_preset_name::@12->render_preset_name::@1]
    // render_preset_name::@1
  __b1:
    // [479] phi from render_preset_name::@1 to render_preset_name::@2 [phi:render_preset_name::@1->render_preset_name::@2]
    // [479] phi render_preset_name::name#13 = render_preset_name::name#11 [phi:render_preset_name::@1->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_11
    sta.z name
    lda #>name_11
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@10 to render_preset_name::@2 [phi:render_preset_name::@10->render_preset_name::@2]
  __b4:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#9 [phi:render_preset_name::@10->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_9
    sta.z name
    lda #>name_9
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@11 to render_preset_name::@2 [phi:render_preset_name::@11->render_preset_name::@2]
  __b5:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#10 [phi:render_preset_name::@11->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_10
    sta.z name
    lda #>name_10
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@3 to render_preset_name::@2 [phi:render_preset_name::@3->render_preset_name::@2]
  __b6:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#2 [phi:render_preset_name::@3->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_2
    sta.z name
    lda #>name_2
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@4 to render_preset_name::@2 [phi:render_preset_name::@4->render_preset_name::@2]
  __b7:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#3 [phi:render_preset_name::@4->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_3
    sta.z name
    lda #>name_3
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@5 to render_preset_name::@2 [phi:render_preset_name::@5->render_preset_name::@2]
  __b8:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#4 [phi:render_preset_name::@5->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_4
    sta.z name
    lda #>name_4
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@6 to render_preset_name::@2 [phi:render_preset_name::@6->render_preset_name::@2]
  __b9:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#5 [phi:render_preset_name::@6->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_5
    sta.z name
    lda #>name_5
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@7 to render_preset_name::@2 [phi:render_preset_name::@7->render_preset_name::@2]
  __b10:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#6 [phi:render_preset_name::@7->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_6
    sta.z name
    lda #>name_6
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@8 to render_preset_name::@2 [phi:render_preset_name::@8->render_preset_name::@2]
  __b11:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#7 [phi:render_preset_name::@8->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_7
    sta.z name
    lda #>name_7
    sta.z name+1
    jmp __b2
    // [479] phi from render_preset_name::@9 to render_preset_name::@2 [phi:render_preset_name::@9->render_preset_name::@2]
  __b12:
    // [479] phi render_preset_name::name#13 = render_preset_name::name#8 [phi:render_preset_name::@9->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_8
    sta.z name
    lda #>name_8
    sta.z name+1
    // render_preset_name::@2
  __b2:
    // print_str_at(name, FORM_SCREEN+40*2+10)
    // [480] print_str_at::str#1 = render_preset_name::name#13
    // [481] call print_str_at 
  // Render it
    // [763] phi from render_preset_name::@2 to print_str_at [phi:render_preset_name::@2->print_str_at]
    jsr print_str_at
    // render_preset_name::@return
    // }
    // [482] return 
    rts
  .segment Data
    name_1: .text "Standard Charset              "
    .byte 0
    name_2: .text "Extended Color Charset        "
    .byte 0
    name_3: .text "Standard Bitmap               "
    .byte 0
    name_4: .text "Multicolor Bitmap             "
    .byte 0
    name_5: .text "Hicolor Charset               "
    .byte 0
    name_6: .text "Hicolor Extended Color Charset"
    .byte 0
    name_7: .text "Twoplane Bitmap               "
    .byte 0
    name_8: .text "Chunky 8bpp                   "
    .byte 0
    name_9: .text "Sixs Fred                     "
    .byte 0
    name_10: .text "Sixs Fred 2                   "
    .byte 0
    name_11: .text "8bpp Pixel Cell               "
    .byte 0
}
.segment Code
  // form_control
// Reads keyboard and allows the user to navigate and change the fields of the form
// Returns 0 if space is not pressed, non-0 if space is pressed
form_control: {
    .label field = $1d
    // form_field_ptr(form_field_idx)
    // [483] form_field_ptr::field_idx#1 = form_field_idx#30 -- vbuxx=vbuz1 
    ldx.z form_field_idx
    // [484] call form_field_ptr 
    // [757] phi from form_control to form_field_ptr [phi:form_control->form_field_ptr]
    // [757] phi form_field_ptr::field_idx#2 = form_field_ptr::field_idx#1 [phi:form_control->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    // form_field_ptr(form_field_idx)
    // [485] form_field_ptr::return#3 = form_field_ptr::return#0
    // form_control::@18
    // field = form_field_ptr(form_field_idx)
    // [486] form_control::field#0 = form_field_ptr::return#3
    // if(--form_cursor_count < 0)
    // [487] form_cursor_count#4 = -- form_cursor_count#23 -- vbsz1=_dec_vbsz1 
    dec.z form_cursor_count
    // [488] if(form_cursor_count#4>=0) goto form_control::@21 -- vbsz1_ge_0_then_la1 
    lda.z form_cursor_count
    cmp #0
    bpl __b1
    // [490] phi from form_control::@18 to form_control::@1 [phi:form_control::@18->form_control::@1]
    // [490] phi form_cursor_count#16 = FORM_CURSOR_BLINK [phi:form_control::@18->form_control::@1#0] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK
    sta.z form_cursor_count
    // [489] phi from form_control::@18 to form_control::@21 [phi:form_control::@18->form_control::@21]
    // form_control::@21
    // [490] phi from form_control::@21 to form_control::@1 [phi:form_control::@21->form_control::@1]
    // [490] phi form_cursor_count#16 = form_cursor_count#4 [phi:form_control::@21->form_control::@1#0] -- register_copy 
    // form_control::@1
  __b1:
    // if(form_cursor_count<FORM_CURSOR_BLINK/2)
    // [491] if(form_cursor_count#16<FORM_CURSOR_BLINK/2) goto form_control::@2 -- vbsz1_lt_vbsc1_then_la1 
    lda.z form_cursor_count
    sec
    sbc #FORM_CURSOR_BLINK/2
    bvc !+
    eor #$80
  !:
    bpl !__b2+
    jmp __b2
  !__b2:
    // form_control::@7
    // *field & $7f
    // [492] form_control::$12 = *form_control::field#0 & $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    // *field = *field & $7f
    // [493] *form_control::field#0 = form_control::$12 -- _deref_pbuz1=vbuaa 
    sta (field),y
    // [494] phi from form_control::@2 form_control::@7 to form_control::@3 [phi:form_control::@2/form_control::@7->form_control::@3]
    // form_control::@3
  __b3:
    // keyboard_event_scan()
    // [495] call keyboard_event_scan 
  // Scan the keyboard
    // [578] phi from form_control::@3 to keyboard_event_scan [phi:form_control::@3->keyboard_event_scan]
    // [578] phi keyboard_events_size#98 = keyboard_events_size#49 [phi:form_control::@3->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [496] phi from form_control::@3 to form_control::@19 [phi:form_control::@3->form_control::@19]
    // form_control::@19
    // keyboard_event_get()
    // [497] call keyboard_event_get 
    jsr keyboard_event_get
    // [498] keyboard_event_get::return#4 = keyboard_event_get::return#2
    // form_control::@20
    // key_event = keyboard_event_get()
    // [499] form_control::key_event#0 = keyboard_event_get::return#4
    // if(key_event==KEY_CRSR_DOWN)
    // [500] if(form_control::key_event#0!=KEY_CRSR_DOWN) goto form_control::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_DOWN
    bne __b4
    // form_control::@8
    // *field & $7f
    // [501] form_control::$14 = *form_control::field#0 & $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    // *field = *field & $7f
    // [502] *form_control::field#0 = form_control::$14 -- _deref_pbuz1=vbuaa 
    // Unblink the cursor
    sta (field),y
    // keyboard_modifiers&KEY_MODIFIER_SHIFT
    // [503] form_control::$15 = keyboard_modifiers#22 & KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // if((keyboard_modifiers&KEY_MODIFIER_SHIFT)==0)
    // [504] if(form_control::$15==0) goto form_control::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b13
    // form_control::@9
    // if(--form_field_idx==$ff)
    // [505] form_field_idx#5 = -- form_field_idx#30 -- vbuz1=_dec_vbuz1 
    dec.z form_field_idx
    // [506] if(form_field_idx#5!=$ff) goto form_control::@22 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z form_field_idx
    bne __b14
    // [508] phi from form_control::@9 to form_control::@14 [phi:form_control::@9->form_control::@14]
    // [508] phi form_field_idx#33 = form_fields_cnt-1 [phi:form_control::@9->form_control::@14#0] -- vbuz1=vbuc1 
    lda #form_fields_cnt-1
    sta.z form_field_idx
    // [507] phi from form_control::@9 to form_control::@22 [phi:form_control::@9->form_control::@22]
    // form_control::@22
    // [508] phi from form_control::@22 form_control::@23 to form_control::@14 [phi:form_control::@22/form_control::@23->form_control::@14]
    // [508] phi form_field_idx#33 = form_field_idx#5 [phi:form_control::@22/form_control::@23->form_control::@14#0] -- register_copy 
    // form_control::@14
  __b14:
    // [509] phi from form_control::@14 to form_control::@return [phi:form_control::@14->form_control::@return]
    // [509] phi form_field_idx#19 = form_field_idx#33 [phi:form_control::@14->form_control::@return#0] -- register_copy 
    // [509] phi form_cursor_count#17 = FORM_CURSOR_BLINK/2 [phi:form_control::@14->form_control::@return#1] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    // [509] phi form_control::return#2 = 0 [phi:form_control::@14->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    // form_control::@return
    // }
    // [510] return 
    rts
    // form_control::@13
  __b13:
    // if(++form_field_idx==form_fields_cnt)
    // [511] form_field_idx#4 = ++ form_field_idx#30 -- vbuz1=_inc_vbuz1 
    inc.z form_field_idx
    // [512] if(form_field_idx#4!=form_fields_cnt) goto form_control::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp.z form_field_idx
    bne __b14
    // [508] phi from form_control::@13 to form_control::@14 [phi:form_control::@13->form_control::@14]
    // [508] phi form_field_idx#33 = 0 [phi:form_control::@13->form_control::@14#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    jmp __b14
    // [513] phi from form_control::@13 to form_control::@23 [phi:form_control::@13->form_control::@23]
    // form_control::@23
    // form_control::@4
  __b4:
    // if(key_event==KEY_CRSR_RIGHT)
    // [514] if(form_control::key_event#0!=KEY_CRSR_RIGHT) goto form_control::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_RIGHT
    bne __b5
    // form_control::@10
    // keyboard_modifiers&KEY_MODIFIER_SHIFT
    // [515] form_control::$22 = keyboard_modifiers#22 & KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // if((keyboard_modifiers&KEY_MODIFIER_SHIFT)==0)
    // [516] if(form_control::$22==0) goto form_control::@15 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b15
    // form_control::@11
    // if(--form_fields_val[form_field_idx]==$ff)
    // [517] form_fields_val[form_field_idx#30] = -- form_fields_val[form_field_idx#30] -- pbuc1_derefidx_vbuz1=_dec_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    dec form_fields_val,x
    // [518] if(form_fields_val[form_field_idx#30]!=$ff) goto form_control::@16 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #$ff
    ldy.z form_field_idx
    cmp form_fields_val,y
    bne __b16
    // form_control::@12
    // form_fields_val[form_field_idx] = form_fields_max[form_field_idx]
    // [519] form_fields_val[form_field_idx#30] = form_fields_max[form_field_idx#30] -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    lda form_fields_max,y
    sta form_fields_val,y
    // form_control::@16
  __b16:
    // *field = print_hextab[form_fields_val[form_field_idx]]
    // [520] *form_control::field#0 = print_hextab[form_fields_val[form_field_idx#30]] -- _deref_pbuz1=pbuc1_derefidx_(pbuc2_derefidx_vbuz2) 
    // Render field value
    ldx.z form_field_idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy #0
    sta (field),y
    // [509] phi from form_control::@16 form_control::@6 to form_control::@return [phi:form_control::@16/form_control::@6->form_control::@return]
  __b7:
    // [509] phi form_field_idx#19 = form_field_idx#30 [phi:form_control::@16/form_control::@6->form_control::@return#0] -- register_copy 
    // [509] phi form_cursor_count#17 = form_cursor_count#16 [phi:form_control::@16/form_control::@6->form_control::@return#1] -- register_copy 
    // [509] phi form_control::return#2 = 0 [phi:form_control::@16/form_control::@6->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    rts
    // form_control::@15
  __b15:
    // if(++form_fields_val[form_field_idx]>form_fields_max[form_field_idx])
    // [521] form_fields_val[form_field_idx#30] = ++ form_fields_val[form_field_idx#30] -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    inc form_fields_val,x
    // [522] if(form_fields_val[form_field_idx#30]<=form_fields_max[form_field_idx#30]) goto form_control::@16 -- pbuc1_derefidx_vbuz1_le_pbuc2_derefidx_vbuz1_then_la1 
    ldy.z form_field_idx
    lda form_fields_max,y
    cmp form_fields_val,y
    bcs __b16
    // form_control::@17
    // form_fields_val[form_field_idx] = 0
    // [523] form_fields_val[form_field_idx#30] = 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    sta form_fields_val,y
    jmp __b16
    // form_control::@5
  __b5:
    // if(key_event==KEY_SPACE)
    // [524] if(form_control::key_event#0!=KEY_SPACE) goto form_control::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne __b7
    // [509] phi from form_control::@5 to form_control::@return [phi:form_control::@5->form_control::@return]
    // [509] phi form_field_idx#19 = form_field_idx#30 [phi:form_control::@5->form_control::@return#0] -- register_copy 
    // [509] phi form_cursor_count#17 = form_cursor_count#16 [phi:form_control::@5->form_control::@return#1] -- register_copy 
    // [509] phi form_control::return#2 = $ff [phi:form_control::@5->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #$ff
    rts
    // [525] phi from form_control::@5 to form_control::@6 [phi:form_control::@5->form_control::@6]
    // form_control::@6
    // form_control::@2
  __b2:
    // *field | $80
    // [526] form_control::$13 = *form_control::field#0 | $80 -- vbuaa=_deref_pbuz1_bor_vbuc1 
    lda #$80
    ldy #0
    ora (field),y
    // *field = *field | $80
    // [527] *form_control::field#0 = form_control::$13 -- _deref_pbuz1=vbuaa 
    sta (field),y
    jmp __b3
}
  // apply_preset
// Apply a form value preset to the form values
// idx is the ID of the preset
// apply_preset(byte register(A) idx)
apply_preset: {
    .label preset = $d
    // if(idx==0)
    // [528] if(apply_preset::idx#0==0) goto apply_preset::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // apply_preset::@3
    // if(idx==1)
    // [529] if(apply_preset::idx#0==1) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b6
    // apply_preset::@4
    // if(idx==2)
    // [530] if(apply_preset::idx#0==2) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b7
    // apply_preset::@5
    // if(idx==3)
    // [531] if(apply_preset::idx#0==3) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b8
    // apply_preset::@6
    // if(idx==4)
    // [532] if(apply_preset::idx#0==4) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b9
    // apply_preset::@7
    // if(idx==5)
    // [533] if(apply_preset::idx#0==5) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __b10
    // apply_preset::@8
    // if(idx==6)
    // [534] if(apply_preset::idx#0==6) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __b11
    // apply_preset::@9
    // if(idx==7)
    // [535] if(apply_preset::idx#0==7) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __b12
    // apply_preset::@10
    // if(idx==8)
    // [536] if(apply_preset::idx#0==8) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __b4
    // apply_preset::@11
    // if(idx==9)
    // [537] if(apply_preset::idx#0==9) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b5
    // apply_preset::@12
    // if(idx==10)
    // [538] if(apply_preset::idx#0==$a) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1
    // [540] phi from apply_preset apply_preset::@12 to apply_preset::@2 [phi:apply_preset/apply_preset::@12->apply_preset::@2]
  __b3:
    // [540] phi apply_preset::preset#15 = preset_stdchar [phi:apply_preset/apply_preset::@12->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdchar
    sta.z preset
    lda #>preset_stdchar
    sta.z preset+1
    jmp __b2
    // [539] phi from apply_preset::@12 to apply_preset::@1 [phi:apply_preset::@12->apply_preset::@1]
    // apply_preset::@1
  __b1:
    // [540] phi from apply_preset::@1 to apply_preset::@2 [phi:apply_preset::@1->apply_preset::@2]
    // [540] phi apply_preset::preset#15 = preset_8bpppixelcell [phi:apply_preset::@1->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_8bpppixelcell
    sta.z preset
    lda #>preset_8bpppixelcell
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@10 to apply_preset::@2 [phi:apply_preset::@10->apply_preset::@2]
  __b4:
    // [540] phi apply_preset::preset#15 = preset_sixsfred [phi:apply_preset::@10->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred
    sta.z preset
    lda #>preset_sixsfred
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@11 to apply_preset::@2 [phi:apply_preset::@11->apply_preset::@2]
  __b5:
    // [540] phi apply_preset::preset#15 = preset_sixsfred2 [phi:apply_preset::@11->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred2
    sta.z preset
    lda #>preset_sixsfred2
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@3 to apply_preset::@2 [phi:apply_preset::@3->apply_preset::@2]
  __b6:
    // [540] phi apply_preset::preset#15 = preset_ecmchar [phi:apply_preset::@3->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_ecmchar
    sta.z preset
    lda #>preset_ecmchar
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@4 to apply_preset::@2 [phi:apply_preset::@4->apply_preset::@2]
  __b7:
    // [540] phi apply_preset::preset#15 = preset_stdbm [phi:apply_preset::@4->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdbm
    sta.z preset
    lda #>preset_stdbm
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@5 to apply_preset::@2 [phi:apply_preset::@5->apply_preset::@2]
  __b8:
    // [540] phi apply_preset::preset#15 = preset_mcbm [phi:apply_preset::@5->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_mcbm
    sta.z preset
    lda #>preset_mcbm
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@6 to apply_preset::@2 [phi:apply_preset::@6->apply_preset::@2]
  __b9:
    // [540] phi apply_preset::preset#15 = preset_hi_stdchar [phi:apply_preset::@6->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_stdchar
    sta.z preset
    lda #>preset_hi_stdchar
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@7 to apply_preset::@2 [phi:apply_preset::@7->apply_preset::@2]
  __b10:
    // [540] phi apply_preset::preset#15 = preset_hi_ecmchar [phi:apply_preset::@7->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_ecmchar
    sta.z preset
    lda #>preset_hi_ecmchar
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@8 to apply_preset::@2 [phi:apply_preset::@8->apply_preset::@2]
  __b11:
    // [540] phi apply_preset::preset#15 = preset_twoplane [phi:apply_preset::@8->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_twoplane
    sta.z preset
    lda #>preset_twoplane
    sta.z preset+1
    jmp __b2
    // [540] phi from apply_preset::@9 to apply_preset::@2 [phi:apply_preset::@9->apply_preset::@2]
  __b12:
    // [540] phi apply_preset::preset#15 = preset_chunky [phi:apply_preset::@9->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_chunky
    sta.z preset
    lda #>preset_chunky
    sta.z preset+1
    // apply_preset::@2
  __b2:
    // [541] phi from apply_preset::@2 to apply_preset::@13 [phi:apply_preset::@2->apply_preset::@13]
    // [541] phi apply_preset::i#2 = 0 [phi:apply_preset::@2->apply_preset::@13#0] -- vbuyy=vbuc1 
    ldy #0
  // Copy preset values into the fields
    // apply_preset::@13
  __b13:
    // for( byte i=0; i != form_fields_cnt; i++)
    // [542] if(apply_preset::i#2!=form_fields_cnt) goto apply_preset::@14 -- vbuyy_neq_vbuc1_then_la1 
    cpy #form_fields_cnt
    bne __b14
    // apply_preset::@return
    // }
    // [543] return 
    rts
    // apply_preset::@14
  __b14:
    // form_fields_val[i] = preset[i]
    // [544] form_fields_val[apply_preset::i#2] = apply_preset::preset#15[apply_preset::i#2] -- pbuc1_derefidx_vbuyy=pbuz1_derefidx_vbuyy 
    lda (preset),y
    sta form_fields_val,y
    // for( byte i=0; i != form_fields_cnt; i++)
    // [545] apply_preset::i#1 = ++ apply_preset::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [541] phi from apply_preset::@14 to apply_preset::@13 [phi:apply_preset::@14->apply_preset::@13]
    // [541] phi apply_preset::i#2 = apply_preset::i#1 [phi:apply_preset::@14->apply_preset::@13#0] -- register_copy 
    jmp __b13
}
  // get_plane
// Get plane address from a plane index (from the form)
// get_plane(byte register(A) idx)
get_plane: {
    .label return = 5
    // if(idx==0)
    // [547] if(get_plane::idx#10==0) goto get_plane::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // get_plane::@2
    // if(idx==1)
    // [548] if(get_plane::idx#10==1) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    bne !__b6+
    jmp __b6
  !__b6:
    // get_plane::@3
    // if(idx==2)
    // [549] if(get_plane::idx#10==2) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    bne !__b7+
    jmp __b7
  !__b7:
    // get_plane::@4
    // if(idx==3)
    // [550] if(get_plane::idx#10==3) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    bne !__b8+
    jmp __b8
  !__b8:
    // get_plane::@5
    // if(idx==4)
    // [551] if(get_plane::idx#10==4) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    bne !__b9+
    jmp __b9
  !__b9:
    // get_plane::@6
    // if(idx==5)
    // [552] if(get_plane::idx#10==5) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    bne !__b10+
    jmp __b10
  !__b10:
    // get_plane::@7
    // if(idx==6)
    // [553] if(get_plane::idx#10==6) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    bne !__b11+
    jmp __b11
  !__b11:
    // get_plane::@8
    // if(idx==7)
    // [554] if(get_plane::idx#10==7) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    bne !__b12+
    jmp __b12
  !__b12:
    // get_plane::@9
    // if(idx==8)
    // [555] if(get_plane::idx#10==8) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    bne !__b13+
    jmp __b13
  !__b13:
    // get_plane::@10
    // if(idx==9)
    // [556] if(get_plane::idx#10==9) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b2
    // get_plane::@11
    // if(idx==10)
    // [557] if(get_plane::idx#10==$a) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b3
    // get_plane::@12
    // if(idx==11)
    // [558] if(get_plane::idx#10==$b) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$b
    beq __b4
    // get_plane::@13
    // if(idx==12)
    // [559] if(get_plane::idx#10==$c) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$c
    beq __b5
    // get_plane::@14
    // if(idx==13)
    // [560] if(get_plane::idx#10!=$d) goto get_plane::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$d
    bne __b1
    // [562] phi from get_plane::@14 to get_plane::@return [phi:get_plane::@14->get_plane::@return]
    // [562] phi get_plane::return#14 = PLANE_FULL [phi:get_plane::@14->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z return
    lda #>PLANE_FULL
    sta.z return+1
    lda #<PLANE_FULL>>$10
    sta.z return+2
    lda #>PLANE_FULL>>$10
    sta.z return+3
    rts
    // [561] phi from get_plane::@14 to get_plane::@1 [phi:get_plane::@14->get_plane::@1]
    // get_plane::@1
  __b1:
    // [562] phi from get_plane get_plane::@1 to get_plane::@return [phi:get_plane/get_plane::@1->get_plane::@return]
    // [562] phi get_plane::return#14 = (dword)VICII_SCREEN0 [phi:get_plane/get_plane::@1->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_SCREEN0
    sta.z return
    lda #>VICII_SCREEN0
    sta.z return+1
    lda #<VICII_SCREEN0>>$10
    sta.z return+2
    lda #>VICII_SCREEN0>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@10 to get_plane::@return [phi:get_plane::@10->get_plane::@return]
  __b2:
    // [562] phi get_plane::return#14 = PLANE_HORISONTAL2 [phi:get_plane::@10->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL2
    sta.z return
    lda #>PLANE_HORISONTAL2
    sta.z return+1
    lda #<PLANE_HORISONTAL2>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL2>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@11 to get_plane::@return [phi:get_plane::@11->get_plane::@return]
  __b3:
    // [562] phi get_plane::return#14 = PLANE_VERTICAL2 [phi:get_plane::@11->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z return
    lda #>PLANE_VERTICAL2
    sta.z return+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@12 to get_plane::@return [phi:get_plane::@12->get_plane::@return]
  __b4:
    // [562] phi get_plane::return#14 = PLANE_CHARSET8 [phi:get_plane::@12->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_CHARSET8
    sta.z return
    lda #>PLANE_CHARSET8
    sta.z return+1
    lda #<PLANE_CHARSET8>>$10
    sta.z return+2
    lda #>PLANE_CHARSET8>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@13 to get_plane::@return [phi:get_plane::@13->get_plane::@return]
  __b5:
    // [562] phi get_plane::return#14 = PLANE_BLANK [phi:get_plane::@13->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z return
    lda #>PLANE_BLANK
    sta.z return+1
    lda #<PLANE_BLANK>>$10
    sta.z return+2
    lda #>PLANE_BLANK>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@2 to get_plane::@return [phi:get_plane::@2->get_plane::@return]
  __b6:
    // [562] phi get_plane::return#14 = (dword)VICII_SCREEN1 [phi:get_plane::@2->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_SCREEN1
    sta.z return
    lda #>VICII_SCREEN1
    sta.z return+1
    lda #<VICII_SCREEN1>>$10
    sta.z return+2
    lda #>VICII_SCREEN1>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@3 to get_plane::@return [phi:get_plane::@3->get_plane::@return]
  __b7:
    // [562] phi get_plane::return#14 = (dword)VICII_SCREEN2 [phi:get_plane::@3->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_SCREEN2
    sta.z return
    lda #>VICII_SCREEN2
    sta.z return+1
    lda #<VICII_SCREEN2>>$10
    sta.z return+2
    lda #>VICII_SCREEN2>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@4 to get_plane::@return [phi:get_plane::@4->get_plane::@return]
  __b8:
    // [562] phi get_plane::return#14 = (dword)VICII_SCREEN3 [phi:get_plane::@4->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_SCREEN3
    sta.z return
    lda #>VICII_SCREEN3
    sta.z return+1
    lda #<VICII_SCREEN3>>$10
    sta.z return+2
    lda #>VICII_SCREEN3>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@5 to get_plane::@return [phi:get_plane::@5->get_plane::@return]
  __b9:
    // [562] phi get_plane::return#14 = (dword)VICII_BITMAP [phi:get_plane::@5->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_BITMAP
    sta.z return
    lda #>VICII_BITMAP
    sta.z return+1
    lda #<VICII_BITMAP>>$10
    sta.z return+2
    lda #>VICII_BITMAP>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@6 to get_plane::@return [phi:get_plane::@6->get_plane::@return]
  __b10:
    // [562] phi get_plane::return#14 = (dword)VICII_CHARSET_ROM [phi:get_plane::@6->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VICII_CHARSET_ROM
    sta.z return
    lda #>VICII_CHARSET_ROM
    sta.z return+1
    lda #<VICII_CHARSET_ROM>>$10
    sta.z return+2
    lda #>VICII_CHARSET_ROM>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@7 to get_plane::@return [phi:get_plane::@7->get_plane::@return]
  __b11:
    // [562] phi get_plane::return#14 = PLANE_8BPP_CHUNKY [phi:get_plane::@7->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_8BPP_CHUNKY
    sta.z return
    lda #>PLANE_8BPP_CHUNKY
    sta.z return+1
    lda #<PLANE_8BPP_CHUNKY>>$10
    sta.z return+2
    lda #>PLANE_8BPP_CHUNKY>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@8 to get_plane::@return [phi:get_plane::@8->get_plane::@return]
  __b12:
    // [562] phi get_plane::return#14 = PLANE_HORISONTAL [phi:get_plane::@8->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL
    sta.z return
    lda #>PLANE_HORISONTAL
    sta.z return+1
    lda #<PLANE_HORISONTAL>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL>>$10
    sta.z return+3
    rts
    // [562] phi from get_plane::@9 to get_plane::@return [phi:get_plane::@9->get_plane::@return]
  __b13:
    // [562] phi get_plane::return#14 = PLANE_VERTICAL [phi:get_plane::@9->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL
    sta.z return
    lda #>PLANE_VERTICAL
    sta.z return+1
    lda #<PLANE_VERTICAL>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL>>$10
    sta.z return+3
    // get_plane::@return
    // }
    // [563] return 
    rts
}
  // get_VICII_screen
// Get the VIC screen address from the screen index
// get_VICII_screen(byte register(A) idx)
get_VICII_screen: {
    .label return = $b
    // if(idx==0)
    // [565] if(get_VICII_screen::idx#2==0) goto get_VICII_screen::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // get_VICII_screen::@2
    // if(idx==1)
    // [566] if(get_VICII_screen::idx#2==1) goto get_VICII_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b2
    // get_VICII_screen::@3
    // if(idx==2)
    // [567] if(get_VICII_screen::idx#2==2) goto get_VICII_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b3
    // get_VICII_screen::@4
    // if(idx==3)
    // [568] if(get_VICII_screen::idx#2==3) goto get_VICII_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b4
    // get_VICII_screen::@5
    // if(idx==4)
    // [569] if(get_VICII_screen::idx#2!=4) goto get_VICII_screen::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
    bne __b1
    // [571] phi from get_VICII_screen::@5 to get_VICII_screen::@return [phi:get_VICII_screen::@5->get_VICII_screen::@return]
    // [571] phi get_VICII_screen::return#5 = VICII_SCREEN4 [phi:get_VICII_screen::@5->get_VICII_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN4
    sta.z return
    lda #>VICII_SCREEN4
    sta.z return+1
    rts
    // [570] phi from get_VICII_screen::@5 to get_VICII_screen::@1 [phi:get_VICII_screen::@5->get_VICII_screen::@1]
    // get_VICII_screen::@1
  __b1:
    // [571] phi from get_VICII_screen get_VICII_screen::@1 to get_VICII_screen::@return [phi:get_VICII_screen/get_VICII_screen::@1->get_VICII_screen::@return]
    // [571] phi get_VICII_screen::return#5 = VICII_SCREEN0 [phi:get_VICII_screen/get_VICII_screen::@1->get_VICII_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN0
    sta.z return
    lda #>VICII_SCREEN0
    sta.z return+1
    rts
    // [571] phi from get_VICII_screen::@2 to get_VICII_screen::@return [phi:get_VICII_screen::@2->get_VICII_screen::@return]
  __b2:
    // [571] phi get_VICII_screen::return#5 = VICII_SCREEN1 [phi:get_VICII_screen::@2->get_VICII_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN1
    sta.z return
    lda #>VICII_SCREEN1
    sta.z return+1
    rts
    // [571] phi from get_VICII_screen::@3 to get_VICII_screen::@return [phi:get_VICII_screen::@3->get_VICII_screen::@return]
  __b3:
    // [571] phi get_VICII_screen::return#5 = VICII_SCREEN2 [phi:get_VICII_screen::@3->get_VICII_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN2
    sta.z return
    lda #>VICII_SCREEN2
    sta.z return+1
    rts
    // [571] phi from get_VICII_screen::@4 to get_VICII_screen::@return [phi:get_VICII_screen::@4->get_VICII_screen::@return]
  __b4:
    // [571] phi get_VICII_screen::return#5 = VICII_SCREEN3 [phi:get_VICII_screen::@4->get_VICII_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_SCREEN3
    sta.z return
    lda #>VICII_SCREEN3
    sta.z return+1
    // get_VICII_screen::@return
    // }
    // [572] return 
    rts
}
  // get_VICII_charset
// Get the VIC charset/bitmap address from the index
// get_VICII_charset(byte register(A) idx)
get_VICII_charset: {
    .label return = $f
    // if(idx==0)
    // [573] if(get_VICII_charset::idx#0==0) goto get_VICII_charset::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // get_VICII_charset::@2
    // if(idx==1)
    // [574] if(get_VICII_charset::idx#0!=1) goto get_VICII_charset::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne __b1
    // [576] phi from get_VICII_charset::@2 to get_VICII_charset::@return [phi:get_VICII_charset::@2->get_VICII_charset::@return]
    // [576] phi get_VICII_charset::return#2 = VICII_BITMAP [phi:get_VICII_charset::@2->get_VICII_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_BITMAP
    sta.z return
    lda #>VICII_BITMAP
    sta.z return+1
    rts
    // [575] phi from get_VICII_charset::@2 to get_VICII_charset::@1 [phi:get_VICII_charset::@2->get_VICII_charset::@1]
    // get_VICII_charset::@1
  __b1:
    // [576] phi from get_VICII_charset get_VICII_charset::@1 to get_VICII_charset::@return [phi:get_VICII_charset/get_VICII_charset::@1->get_VICII_charset::@return]
    // [576] phi get_VICII_charset::return#2 = VICII_CHARSET_ROM [phi:get_VICII_charset/get_VICII_charset::@1->get_VICII_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VICII_CHARSET_ROM
    sta.z return
    lda #>VICII_CHARSET_ROM
    sta.z return+1
    // get_VICII_charset::@return
    // }
    // [577] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $25
    .label keycode = 9
    .label row = $16
    // [579] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
    // [579] phi keyboard_events_size#107 = keyboard_events_size#98 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [579] phi keyboard_event_scan::keycode#11 = 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [579] phi keyboard_event_scan::row#2 = 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    sta.z row
    // [579] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
    // [579] phi keyboard_events_size#107 = keyboard_events_size#100 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [579] phi keyboard_event_scan::keycode#11 = keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [579] phi keyboard_event_scan::row#2 = keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    // keyboard_event_scan::@7
  __b7:
    // keyboard_matrix_read(row)
    // [580] keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx.z row
    // [581] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [582] keyboard_matrix_read::return#2 = keyboard_matrix_read::return#0
    // keyboard_event_scan::@19
    // row_scan = keyboard_matrix_read(row)
    // [583] keyboard_event_scan::row_scan#0 = keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta.z row_scan
    // if(row_scan!=keyboard_scan_values[row])
    // [584] if(keyboard_event_scan::row_scan#0!=keyboard_scan_values[keyboard_event_scan::row#2]) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    ldy.z row
    cmp keyboard_scan_values,y
    bne __b6
    // keyboard_event_scan::@16
    // keycode = keycode + 8
    // [585] keyboard_event_scan::keycode#1 = keyboard_event_scan::keycode#11 + 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [586] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
    // [586] phi keyboard_events_size#100 = keyboard_events_size#106 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [586] phi keyboard_event_scan::keycode#13 = keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    // keyboard_event_scan::@8
  __b8:
    // for(char row : 0..7)
    // [587] keyboard_event_scan::row#1 = ++ keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [588] if(keyboard_event_scan::row#1!=8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b7
    // [589] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
    // keyboard_event_scan::@17
    // keyboard_event_pressed(KEY_LSHIFT)
    // [590] call keyboard_event_pressed 
    // [773] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
    // [773] phi keyboard_event_pressed::keycode#4 = KEY_LSHIFT [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_LSHIFT)
    // [591] keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10
    // keyboard_event_scan::@20
    // [592] keyboard_event_scan::$0 = keyboard_event_pressed::return#0
    // if(keyboard_event_pressed(KEY_LSHIFT)!= 0)
    // [593] if(keyboard_event_scan::$0==0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b4
    // [594] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
    // keyboard_event_scan::@18
    // [595] phi from keyboard_event_scan::@18 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1]
    // [595] phi keyboard_modifiers#19 = KEY_MODIFIER_LSHIFT [phi:keyboard_event_scan::@18->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #KEY_MODIFIER_LSHIFT
    jmp __b1
    // [595] phi from keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1]
  __b4:
    // [595] phi keyboard_modifiers#19 = 0 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // keyboard_event_scan::@1
  __b1:
    // keyboard_event_pressed(KEY_RSHIFT)
    // [596] call keyboard_event_pressed 
    // [773] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
    // [773] phi keyboard_event_pressed::keycode#4 = KEY_RSHIFT [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_RSHIFT)
    // [597] keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10
    // keyboard_event_scan::@21
    // [598] keyboard_event_scan::$3 = keyboard_event_pressed::return#1
    // if(keyboard_event_pressed(KEY_RSHIFT)!= 0)
    // [599] if(keyboard_event_scan::$3==0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // keyboard_event_scan::@4
    // keyboard_modifiers = keyboard_modifiers | KEY_MODIFIER_RSHIFT
    // [600] keyboard_modifiers#2 = keyboard_modifiers#19 | KEY_MODIFIER_RSHIFT -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_RSHIFT
    tax
    // [601] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
    // [601] phi keyboard_modifiers#20 = keyboard_modifiers#19 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2#0] -- register_copy 
    // keyboard_event_scan::@2
  __b2:
    // keyboard_event_pressed(KEY_CTRL)
    // [602] call keyboard_event_pressed 
    // [773] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
    // [773] phi keyboard_event_pressed::keycode#4 = KEY_CTRL [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_CTRL)
    // [603] keyboard_event_pressed::return#2 = keyboard_event_pressed::return#10
    // keyboard_event_scan::@22
    // [604] keyboard_event_scan::$6 = keyboard_event_pressed::return#2
    // if(keyboard_event_pressed(KEY_CTRL)!= 0)
    // [605] if(keyboard_event_scan::$6==0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // keyboard_event_scan::@5
    // keyboard_modifiers = keyboard_modifiers | KEY_MODIFIER_CTRL
    // [606] keyboard_modifiers#3 = keyboard_modifiers#20 | KEY_MODIFIER_CTRL -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_CTRL
    tax
    // [607] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
    // [607] phi keyboard_modifiers#21 = keyboard_modifiers#20 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3#0] -- register_copy 
    // keyboard_event_scan::@3
  __b3:
    // keyboard_event_pressed(KEY_COMMODORE)
    // [608] call keyboard_event_pressed 
    // [773] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
    // [773] phi keyboard_event_pressed::keycode#4 = KEY_COMMODORE [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_COMMODORE)
    // [609] keyboard_event_pressed::return#3 = keyboard_event_pressed::return#10
    // keyboard_event_scan::@23
    // [610] keyboard_event_scan::$9 = keyboard_event_pressed::return#3
    // if(keyboard_event_pressed(KEY_COMMODORE)!= 0)
    // [611] if(keyboard_event_scan::$9==0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn
    // keyboard_event_scan::@6
    // keyboard_modifiers = keyboard_modifiers | KEY_MODIFIER_COMMODORE
    // [612] keyboard_modifiers#4 = keyboard_modifiers#21 | KEY_MODIFIER_COMMODORE -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_COMMODORE
    tax
    // [613] phi from keyboard_event_scan::@23 keyboard_event_scan::@6 to keyboard_event_scan::@return [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return]
    // [613] phi keyboard_modifiers#22 = keyboard_modifiers#21 [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return#0] -- register_copy 
    // keyboard_event_scan::@return
  __breturn:
    // }
    // [614] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [615] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
    // [615] phi keyboard_events_size#19 = keyboard_events_size#106 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [615] phi keyboard_event_scan::keycode#10 = keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [615] phi keyboard_event_scan::col#2 = keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    // [615] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  __b6:
    // [615] phi keyboard_events_size#19 = keyboard_events_size#107 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [615] phi keyboard_event_scan::keycode#10 = keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [615] phi keyboard_event_scan::col#2 = 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
    // keyboard_event_scan::@9
  __b9:
    // row_scan^keyboard_scan_values[row]
    // [616] keyboard_event_scan::$15 = keyboard_event_scan::row_scan#0 ^ keyboard_scan_values[keyboard_event_scan::row#2] -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    // (row_scan^keyboard_scan_values[row])&keyboard_matrix_col_bitmask[col]
    // [617] keyboard_event_scan::$16 = keyboard_event_scan::$15 & keyboard_matrix_col_bitmask[keyboard_event_scan::col#2] -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
    // if(((row_scan^keyboard_scan_values[row])&keyboard_matrix_col_bitmask[col])!=0)
    // [618] if(keyboard_event_scan::$16==0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10
    // keyboard_event_scan::@12
    // if(keyboard_events_size!=8)
    // [619] if(keyboard_events_size#19==8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq __b10
    // keyboard_event_scan::@13
    // event_type = row_scan&keyboard_matrix_col_bitmask[col]
    // [620] keyboard_event_scan::event_type#0 = keyboard_event_scan::row_scan#0 & keyboard_matrix_col_bitmask[keyboard_event_scan::col#2] -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and.z row_scan
    // if(event_type==0)
    // [621] if(keyboard_event_scan::event_type#0==0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b11
    // keyboard_event_scan::@14
    // keyboard_events[keyboard_events_size++] = keycode
    // [622] keyboard_events[keyboard_events_size#19] = keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // keyboard_events[keyboard_events_size++] = keycode;
    // [623] keyboard_events_size#1 = ++ keyboard_events_size#19 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [624] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
    // [624] phi keyboard_events_size#106 = keyboard_events_size#0 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    // keyboard_event_scan::@10
  __b10:
    // keycode++;
    // [625] keyboard_event_scan::keycode#14 = ++ keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // for(char col : 0..7)
    // [626] keyboard_event_scan::col#1 = ++ keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
    // [627] if(keyboard_event_scan::col#1!=8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b9
    // keyboard_event_scan::@15
    // keyboard_scan_values[row] = row_scan
    // [628] keyboard_scan_values[keyboard_event_scan::row#2] = keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp __b8
    // keyboard_event_scan::@11
  __b11:
    // keycode|$40
    // [629] keyboard_event_scan::$23 = keyboard_event_scan::keycode#10 | $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora.z keycode
    // keyboard_events[keyboard_events_size++] = keycode|$40
    // [630] keyboard_events[keyboard_events_size#19] = keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // keyboard_events[keyboard_events_size++] = keycode|$40;
    // [631] keyboard_events_size#0 = ++ keyboard_events_size#19 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp __b10
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    // if(keyboard_events_size==0)
    // [632] if(keyboard_events_size#100==0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    beq __b1
    // keyboard_event_get::@1
    // return keyboard_events[--keyboard_events_size];
    // [633] keyboard_events_size#3 = -- keyboard_events_size#100 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [634] keyboard_event_get::return#1 = keyboard_events[keyboard_events_size#3] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    // [635] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
    // [635] phi keyboard_events_size#25 = keyboard_events_size#3 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [635] phi keyboard_event_get::return#2 = keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    rts
    // [635] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  __b1:
    // [635] phi keyboard_events_size#25 = keyboard_events_size#100 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [635] phi keyboard_event_get::return#2 = $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
    // keyboard_event_get::@return
    // }
    // [636] return 
    rts
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label __7 = $25
    .label yoffs = $f
    // [638] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
    // [638] phi bitmap_init::x#2 = 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [638] phi bitmap_init::bits#3 = $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    // [638] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
    // [638] phi bitmap_init::x#2 = bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [638] phi bitmap_init::bits#3 = bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    // bitmap_init::@1
  __b1:
    // bitmap_plot_bit[x] = bits
    // [639] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // bits >>= 1
    // [640] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // if(bits==0)
    // [641] if(bitmap_init::bits#1!=0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b2
    // [643] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
    // [643] phi bitmap_init::bits#4 = $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    // [642] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
    // bitmap_init::@6
    // [643] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
    // [643] phi bitmap_init::bits#4 = bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    // bitmap_init::@2
  __b2:
    // for(char x : 0..255)
    // [644] bitmap_init::x#1 = ++ bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [645] if(bitmap_init::x#1!=0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [646] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
    // [646] phi bitmap_init::yoffs#2 = VICII_BITMAP [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<VICII_BITMAP
    sta.z yoffs
    lda #>VICII_BITMAP
    sta.z yoffs+1
    // [646] phi bitmap_init::y#2 = 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    // [646] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
    // [646] phi bitmap_init::yoffs#2 = bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [646] phi bitmap_init::y#2 = bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    // bitmap_init::@3
  __b3:
    // y&$7
    // [647] bitmap_init::$7 = bitmap_init::y#2 & 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __7
    // <yoffs
    // [648] bitmap_init::$4 = < bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // y&$7 | <yoffs
    // [649] bitmap_init::$5 = bitmap_init::$7 | bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __7
    // bitmap_plot_ylo[y] = y&$7 | <yoffs
    // [650] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // >yoffs
    // [651] bitmap_init::$6 = > bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // bitmap_plot_yhi[y] = >yoffs
    // [652] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // if((y&$7)==7)
    // [653] if(bitmap_init::$7!=7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4
    // bitmap_init::@5
    // yoffs = yoffs + 40*8
    // [654] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [655] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
    // [655] phi bitmap_init::yoffs#4 = bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    // bitmap_init::@4
  __b4:
    // for(char y : 0..255)
    // [656] bitmap_init::y#1 = ++ bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [657] if(bitmap_init::y#1!=0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // bitmap_init::@return
    // }
    // [658] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE*$10
    // memset(bitmap_screen, col, 1000uw)
    // [660] call memset 
    // [740] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
    // [740] phi memset::c#5 = bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [740] phi memset::str#4 = (void*)VICII_SCREEN0 [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<VICII_SCREEN0
    sta.z memset.str
    lda #>VICII_SCREEN0
    sta.z memset.str+1
    // [740] phi memset::num#3 = $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [661] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
    // bitmap_clear::@1
    // memset(bitmap_gfx, 0, 8000uw)
    // [662] call memset 
    // [740] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
    // [740] phi memset::c#5 = 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [740] phi memset::str#4 = (void*)VICII_BITMAP [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<VICII_BITMAP
    sta.z memset.str
    lda #>VICII_BITMAP
    sta.z memset.str+1
    // [740] phi memset::num#3 = $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    // bitmap_clear::@return
    // }
    // [663] return 
    rts
}
  // bitmap_line
// Draw a line on the bitmap using bresenhams algorithm
// bitmap_line(word zp($d) x1, word zp($1b) y1, word zp($17) x2, word zp($19) y2)
bitmap_line: {
    .label dx = $1d
    .label dy = $11
    .label sx = $23
    .label sy = $13
    .label e1 = $f
    .label e = $b
    .label y = $1b
    .label x = $d
    .label x1 = $d
    .label y1 = $1b
    .label x2 = $17
    .label y2 = $19
    // abs_u16(x2-x1)
    // [664] abs_u16::w#0 = bitmap_line::x2#0 - bitmap_line::x1#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x2
    sec
    sbc.z x1
    sta.z abs_u16.w
    lda.z x2+1
    sbc.z x1+1
    sta.z abs_u16.w+1
    // [665] call abs_u16 
    // [779] phi from bitmap_line to abs_u16 [phi:bitmap_line->abs_u16]
    // [779] phi abs_u16::w#2 = abs_u16::w#0 [phi:bitmap_line->abs_u16#0] -- register_copy 
    jsr abs_u16
    // abs_u16(x2-x1)
    // [666] abs_u16::return#0 = abs_u16::return#4
    // bitmap_line::@12
    // dx = abs_u16(x2-x1)
    // [667] bitmap_line::dx#0 = abs_u16::return#0 -- vwuz1=vwuz2 
    lda.z abs_u16.return
    sta.z dx
    lda.z abs_u16.return+1
    sta.z dx+1
    // abs_u16(y2-y1)
    // [668] abs_u16::w#1 = bitmap_line::y2#0 - bitmap_line::y1#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z y2
    sec
    sbc.z y1
    sta.z abs_u16.w
    lda.z y2+1
    sbc.z y1+1
    sta.z abs_u16.w+1
    // [669] call abs_u16 
    // [779] phi from bitmap_line::@12 to abs_u16 [phi:bitmap_line::@12->abs_u16]
    // [779] phi abs_u16::w#2 = abs_u16::w#1 [phi:bitmap_line::@12->abs_u16#0] -- register_copy 
    jsr abs_u16
    // abs_u16(y2-y1)
    // [670] abs_u16::return#1 = abs_u16::return#4
    // bitmap_line::@13
    // dy = abs_u16(y2-y1)
    // [671] bitmap_line::dy#0 = abs_u16::return#1
    // if(dx==0 && dy==0)
    // [672] if(bitmap_line::dx#0!=0) goto bitmap_line::@1 -- vwuz1_neq_0_then_la1 
    lda.z dx
    ora.z dx+1
    bne __b1
    // bitmap_line::@18
    // [673] if(bitmap_line::dy#0==0) goto bitmap_line::@4 -- vwuz1_eq_0_then_la1 
    lda.z dy
    ora.z dy+1
    bne !__b4+
    jmp __b4
  !__b4:
    // bitmap_line::@1
  __b1:
    // sgn_u16(x2-x1)
    // [674] sgn_u16::w#0 = bitmap_line::x2#0 - bitmap_line::x1#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x2
    sec
    sbc.z x1
    sta.z sgn_u16.w
    lda.z x2+1
    sbc.z x1+1
    sta.z sgn_u16.w+1
    // [675] call sgn_u16 
    // [786] phi from bitmap_line::@1 to sgn_u16 [phi:bitmap_line::@1->sgn_u16]
    // [786] phi sgn_u16::w#2 = sgn_u16::w#0 [phi:bitmap_line::@1->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // sgn_u16(x2-x1)
    // [676] sgn_u16::return#0 = sgn_u16::return#4
    // bitmap_line::@14
    // sx = sgn_u16(x2-x1)
    // [677] bitmap_line::sx#0 = sgn_u16::return#0 -- vwuz1=vwuz2 
    lda.z sgn_u16.return
    sta.z sx
    lda.z sgn_u16.return+1
    sta.z sx+1
    // sgn_u16(y2-y1)
    // [678] sgn_u16::w#1 = bitmap_line::y2#0 - bitmap_line::y1#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z y2
    sec
    sbc.z y1
    sta.z sgn_u16.w
    lda.z y2+1
    sbc.z y1+1
    sta.z sgn_u16.w+1
    // [679] call sgn_u16 
    // [786] phi from bitmap_line::@14 to sgn_u16 [phi:bitmap_line::@14->sgn_u16]
    // [786] phi sgn_u16::w#2 = sgn_u16::w#1 [phi:bitmap_line::@14->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // sgn_u16(y2-y1)
    // [680] sgn_u16::return#1 = sgn_u16::return#4
    // bitmap_line::@15
    // sy = sgn_u16(y2-y1)
    // [681] bitmap_line::sy#0 = sgn_u16::return#1
    // if(dx > dy)
    // [682] if(bitmap_line::dx#0>bitmap_line::dy#0) goto bitmap_line::@2 -- vwuz1_gt_vwuz2_then_la1 
    lda.z dy+1
    cmp.z dx+1
    bcc __b2
    bne !+
    lda.z dy
    cmp.z dx
    bcc __b2
  !:
    // bitmap_line::@5
    // e = dx/2
    // [683] bitmap_line::e#0 = bitmap_line::dx#0 >> 1 -- vwuz1=vwuz2_ror_1 
    lda.z dx+1
    lsr
    sta.z e+1
    lda.z dx
    ror
    sta.z e
    // [684] phi from bitmap_line::@5 bitmap_line::@7 to bitmap_line::@6 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6]
    // [684] phi bitmap_line::e#3 = bitmap_line::e#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#0] -- register_copy 
    // [684] phi bitmap_line::y#4 = bitmap_line::y1#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#1] -- register_copy 
    // [684] phi bitmap_line::x#13 = bitmap_line::x1#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#2] -- register_copy 
    // bitmap_line::@6
  __b6:
    // bitmap_plot(x,(char)y)
    // [685] bitmap_plot::x#1 = bitmap_line::x#13
    // [686] bitmap_plot::y#1 = (byte)bitmap_line::y#4 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [687] call bitmap_plot 
    // [793] phi from bitmap_line::@6 to bitmap_plot [phi:bitmap_line::@6->bitmap_plot]
    // [793] phi bitmap_plot::x#4 = bitmap_plot::x#1 [phi:bitmap_line::@6->bitmap_plot#0] -- register_copy 
    // [793] phi bitmap_plot::y#4 = bitmap_plot::y#1 [phi:bitmap_line::@6->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line::@16
    // y += sy
    // [688] bitmap_line::y#1 = bitmap_line::y#4 + bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // e += dx
    // [689] bitmap_line::e#1 = bitmap_line::e#3 + bitmap_line::dx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e
    clc
    adc.z dx
    sta.z e
    lda.z e+1
    adc.z dx+1
    sta.z e+1
    // if(dy<e)
    // [690] if(bitmap_line::dy#0>=bitmap_line::e#1) goto bitmap_line::@7 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z dy+1
    bne !+
    lda.z e
    cmp.z dy
    beq __b7
  !:
    bcc __b7
    // bitmap_line::@8
    // x += sx
    // [691] bitmap_line::x#1 = bitmap_line::x#13 + bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // e -= dy
    // [692] bitmap_line::e#2 = bitmap_line::e#1 - bitmap_line::dy#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e
    sec
    sbc.z dy
    sta.z e
    lda.z e+1
    sbc.z dy+1
    sta.z e+1
    // [693] phi from bitmap_line::@16 bitmap_line::@8 to bitmap_line::@7 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7]
    // [693] phi bitmap_line::e#6 = bitmap_line::e#1 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#0] -- register_copy 
    // [693] phi bitmap_line::x#12 = bitmap_line::x#13 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#1] -- register_copy 
    // bitmap_line::@7
  __b7:
    // while (y != y2)
    // [694] if(bitmap_line::y#1!=bitmap_line::y2#0) goto bitmap_line::@6 -- vwuz1_neq_vwuz2_then_la1 
    lda.z y+1
    cmp.z y2+1
    bne __b6
    lda.z y
    cmp.z y2
    bne __b6
    // [695] phi from bitmap_line::@10 bitmap_line::@7 to bitmap_line::@3 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3]
    // [695] phi bitmap_line::y#7 = bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#0] -- register_copy 
    // [695] phi bitmap_line::x#6 = bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#1] -- register_copy 
    // bitmap_line::@3
  __b3:
    // bitmap_plot(x,(char)y)
    // [696] bitmap_plot::x#2 = bitmap_line::x#6
    // [697] bitmap_plot::y#2 = (byte)bitmap_line::y#7 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [698] call bitmap_plot 
    // [793] phi from bitmap_line::@3 to bitmap_plot [phi:bitmap_line::@3->bitmap_plot]
    // [793] phi bitmap_plot::x#4 = bitmap_plot::x#2 [phi:bitmap_line::@3->bitmap_plot#0] -- register_copy 
    // [793] phi bitmap_plot::y#4 = bitmap_plot::y#2 [phi:bitmap_line::@3->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line::@return
    // }
    // [699] return 
    rts
    // bitmap_line::@2
  __b2:
    // e = dy/2
    // [700] bitmap_line::e1#0 = bitmap_line::dy#0 >> 1 -- vwuz1=vwuz2_ror_1 
    lda.z dy+1
    lsr
    sta.z e1+1
    lda.z dy
    ror
    sta.z e1
    // [701] phi from bitmap_line::@10 bitmap_line::@2 to bitmap_line::@9 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9]
    // [701] phi bitmap_line::e1#3 = bitmap_line::e1#6 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#0] -- register_copy 
    // [701] phi bitmap_line::y#15 = bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#1] -- register_copy 
    // [701] phi bitmap_line::x#7 = bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#2] -- register_copy 
    // bitmap_line::@9
  __b9:
    // bitmap_plot(x,(char)y)
    // [702] bitmap_plot::x#3 = bitmap_line::x#7
    // [703] bitmap_plot::y#3 = (byte)bitmap_line::y#15 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [704] call bitmap_plot 
    // [793] phi from bitmap_line::@9 to bitmap_plot [phi:bitmap_line::@9->bitmap_plot]
    // [793] phi bitmap_plot::x#4 = bitmap_plot::x#3 [phi:bitmap_line::@9->bitmap_plot#0] -- register_copy 
    // [793] phi bitmap_plot::y#4 = bitmap_plot::y#3 [phi:bitmap_line::@9->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line::@17
    // x += sx
    // [705] bitmap_line::x#15 = bitmap_line::x#7 + bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // e += dy
    // [706] bitmap_line::e1#1 = bitmap_line::e1#3 + bitmap_line::dy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e1
    clc
    adc.z dy
    sta.z e1
    lda.z e1+1
    adc.z dy+1
    sta.z e1+1
    // if(dx < e)
    // [707] if(bitmap_line::dx#0>=bitmap_line::e1#1) goto bitmap_line::@10 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z dx+1
    bne !+
    lda.z e1
    cmp.z dx
    beq __b10
  !:
    bcc __b10
    // bitmap_line::@11
    // y += sy
    // [708] bitmap_line::y#2 = bitmap_line::y#15 + bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // e -= dx
    // [709] bitmap_line::e1#2 = bitmap_line::e1#1 - bitmap_line::dx#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e1
    sec
    sbc.z dx
    sta.z e1
    lda.z e1+1
    sbc.z dx+1
    sta.z e1+1
    // [710] phi from bitmap_line::@11 bitmap_line::@17 to bitmap_line::@10 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10]
    // [710] phi bitmap_line::e1#6 = bitmap_line::e1#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#0] -- register_copy 
    // [710] phi bitmap_line::y#13 = bitmap_line::y#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#1] -- register_copy 
    // bitmap_line::@10
  __b10:
    // while (x != x2)
    // [711] if(bitmap_line::x#15!=bitmap_line::x2#0) goto bitmap_line::@9 -- vwuz1_neq_vwuz2_then_la1 
    lda.z x+1
    cmp.z x2+1
    bne __b9
    lda.z x
    cmp.z x2
    bne __b9
    jmp __b3
    // bitmap_line::@4
  __b4:
    // bitmap_plot(x,(char)y)
    // [712] bitmap_plot::x#0 = bitmap_line::x1#0
    // [713] bitmap_plot::y#0 = (byte)bitmap_line::y1#0 -- vbuaa=_byte_vwuz1 
    lda.z y1
    // [714] call bitmap_plot 
    // [793] phi from bitmap_line::@4 to bitmap_plot [phi:bitmap_line::@4->bitmap_plot]
    // [793] phi bitmap_plot::x#4 = bitmap_plot::x#0 [phi:bitmap_line::@4->bitmap_plot#0] -- register_copy 
    // [793] phi bitmap_plot::y#4 = bitmap_plot::y#0 [phi:bitmap_line::@4->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    rts
}
  // dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    // *cpuBank = cpuBankIdx
    // [716] *dtvSetCpuBankSegment1::cpuBank = dtvSetCpuBankSegment1::cpuBankIdx#13 -- _deref_pbuc1=vbuaa 
    sta cpuBank
    // asm
    // asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda.z $ff
    .byte $32, $00
    // dtvSetCpuBankSegment1::@return
    // }
    // [718] return 
    rts
}
  // gfx_init_plane_fill
// Initialize 320*200 1bpp pixel ($2000) plane with identical bytes
// gfx_init_plane_fill(dword zp(5) plane_addr, byte zp(9) fill)
gfx_init_plane_fill: {
    .label __0 = $1f
    .label __1 = $23
    .label __4 = $b
    .label __5 = $b
    .label gfxb = $b
    .label by = $a
    .label plane_addr = 5
    .label fill = 9
    // plane_addr*4
    // [720] gfx_init_plane_fill::$0 = gfx_init_plane_fill::plane_addr#3 << 2 -- vduz1=vduz2_rol_2 
    lda.z plane_addr
    asl
    sta.z __0
    lda.z plane_addr+1
    rol
    sta.z __0+1
    lda.z plane_addr+2
    rol
    sta.z __0+2
    lda.z plane_addr+3
    rol
    sta.z __0+3
    asl.z __0
    rol.z __0+1
    rol.z __0+2
    rol.z __0+3
    // >(plane_addr*4)
    // [721] gfx_init_plane_fill::$1 = > gfx_init_plane_fill::$0 -- vwuz1=_hi_vduz2 
    lda.z __0+2
    sta.z __1
    lda.z __0+3
    sta.z __1+1
    // gfxbCpuBank = < >(plane_addr*4)
    // [722] gfx_init_plane_fill::gfxbCpuBank#0 = < gfx_init_plane_fill::$1 -- vbuaa=_lo_vwuz1 
    lda.z __1
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [723] dtvSetCpuBankSegment1::cpuBankIdx#11 = gfx_init_plane_fill::gfxbCpuBank#0
    // [724] call dtvSetCpuBankSegment1 
    // [715] phi from gfx_init_plane_fill to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = dtvSetCpuBankSegment1::cpuBankIdx#11 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_fill::@5
    // <plane_addr
    // [725] gfx_init_plane_fill::$4 = < gfx_init_plane_fill::plane_addr#3 -- vwuz1=_lo_vduz2 
    lda.z plane_addr
    sta.z __4
    lda.z plane_addr+1
    sta.z __4+1
    // <plane_addr & $3fff
    // [726] gfx_init_plane_fill::$5 = gfx_init_plane_fill::$4 & $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __5
    and #<$3fff
    sta.z __5
    lda.z __5+1
    and #>$3fff
    sta.z __5+1
    // $4000 + (<plane_addr & $3fff)
    // [727] gfx_init_plane_fill::gfxb#0 = $4000 + gfx_init_plane_fill::$5 -- vwuz1=vwuc1_plus_vwuz1 
    clc
    lda.z gfxb
    adc #<$4000
    sta.z gfxb
    lda.z gfxb+1
    adc #>$4000
    sta.z gfxb+1
    // [728] gfx_init_plane_fill::gfxb#6 = (byte*)gfx_init_plane_fill::gfxb#0
    // [729] phi from gfx_init_plane_fill::@5 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1]
    // [729] phi gfx_init_plane_fill::by#4 = 0 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [729] phi gfx_init_plane_fill::gfxb#3 = gfx_init_plane_fill::gfxb#6 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#1] -- register_copy 
    // [729] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1]
    // [729] phi gfx_init_plane_fill::by#4 = gfx_init_plane_fill::by#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#0] -- register_copy 
    // [729] phi gfx_init_plane_fill::gfxb#3 = gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#1] -- register_copy 
    // gfx_init_plane_fill::@1
  __b1:
    // [730] phi from gfx_init_plane_fill::@1 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2]
    // [730] phi gfx_init_plane_fill::bx#2 = 0 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [730] phi gfx_init_plane_fill::gfxb#2 = gfx_init_plane_fill::gfxb#3 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#1] -- register_copy 
    // [730] phi from gfx_init_plane_fill::@2 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2]
    // [730] phi gfx_init_plane_fill::bx#2 = gfx_init_plane_fill::bx#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#0] -- register_copy 
    // [730] phi gfx_init_plane_fill::gfxb#2 = gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#1] -- register_copy 
    // gfx_init_plane_fill::@2
  __b2:
    // *gfxb++ = fill
    // [731] *gfx_init_plane_fill::gfxb#2 = gfx_init_plane_fill::fill#6 -- _deref_pbuz1=vbuz2 
    lda.z fill
    ldy #0
    sta (gfxb),y
    // *gfxb++ = fill;
    // [732] gfx_init_plane_fill::gfxb#1 = ++ gfx_init_plane_fill::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for ( byte bx : 0..39)
    // [733] gfx_init_plane_fill::bx#1 = ++ gfx_init_plane_fill::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [734] if(gfx_init_plane_fill::bx#1!=$28) goto gfx_init_plane_fill::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_fill::@3
    // for(byte by : 0..199)
    // [735] gfx_init_plane_fill::by#1 = ++ gfx_init_plane_fill::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [736] if(gfx_init_plane_fill::by#1!=$c8) goto gfx_init_plane_fill::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1
    // [737] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@4 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@4]
    // gfx_init_plane_fill::@4
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [738] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [715] phi from gfx_init_plane_fill::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1]
    // [715] phi dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)$4000/$4000 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_fill::@return
    // }
    // [739] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($1b) str, byte register(X) c, word zp($d) num)
memset: {
    .label end = $d
    .label dst = $1b
    .label str = $1b
    .label num = $d
    // if(num>0)
    // [741] if(memset::num#3<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // end = (char*)str + num
    // [742] memset::end#0 = (byte*)memset::str#4 + memset::num#3 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [743] memset::dst#4 = (byte*)memset::str#4
    // [744] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [744] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [745] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [746] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [747] *memset::dst#2 = memset::c#5 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [748] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [749] *print_char_cursor#43 = print_char::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [750] print_char_cursor#29 = ++ print_char_cursor#43 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [751] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [753] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [753] phi print_line_cursor#22 = print_line_cursor#1 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [754] print_line_cursor#2 = print_line_cursor#22 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [755] if(print_line_cursor#2<print_char_cursor#44) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [756] return 
    rts
}
  // form_field_ptr
// Get the screen address of a form field
// field_idx is the index of the field to get the screen address for
// form_field_ptr(byte register(X) field_idx)
form_field_ptr: {
    .label line = $27
    .label x = $25
    .label return = $1d
    // y = form_fields_y[field_idx]
    // [758] form_field_ptr::y#0 = form_fields_y[form_field_ptr::field_idx#2] -- vbuyy=pbuc1_derefidx_vbuxx 
    ldy form_fields_y,x
    // line = (byte*) { form_line_hi[y], form_line_lo[y] }
    // [759] form_field_ptr::line#0 = form_line_hi[form_field_ptr::y#0] w= form_line_lo[form_field_ptr::y#0] -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda form_line_hi,y
    sta.z line+1
    lda form_line_lo,y
    sta.z line
    // x = form_fields_x[field_idx]
    // [760] form_field_ptr::x#0 = form_fields_x[form_field_ptr::field_idx#2] -- vbuz1=pbuc1_derefidx_vbuxx 
    lda form_fields_x,x
    sta.z x
    // line+x
    // [761] form_field_ptr::return#0 = (byte*)form_field_ptr::line#0 + form_field_ptr::x#0 -- pbuz1=pbuz2_plus_vbuz3 
    clc
    adc.z line
    sta.z return
    lda #0
    adc.z line+1
    sta.z return+1
    // form_field_ptr::@return
    // }
    // [762] return 
    rts
}
  // print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zp($b) str, byte* zp($f) at)
print_str_at: {
    .label at = $f
    .label str = $b
    // [764] phi from print_str_at to print_str_at::@1 [phi:print_str_at->print_str_at::@1]
    // [764] phi print_str_at::at#2 = FORM_SCREEN+$28*2+$a [phi:print_str_at->print_str_at::@1#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN+$28*2+$a
    sta.z at
    lda #>FORM_SCREEN+$28*2+$a
    sta.z at+1
    // [764] phi print_str_at::str#2 = print_str_at::str#1 [phi:print_str_at->print_str_at::@1#1] -- register_copy 
    // print_str_at::@1
  __b1:
    // while(*str)
    // [765] if(0!=*print_str_at::str#2) goto print_str_at::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str_at::@return
    // }
    // [766] return 
    rts
    // print_str_at::@2
  __b2:
    // *(at++) = *(str++)
    // [767] *print_str_at::at#2 = *print_str_at::str#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (at),y
    // *(at++) = *(str++);
    // [768] print_str_at::at#0 = ++ print_str_at::at#2 -- pbuz1=_inc_pbuz1 
    inc.z at
    bne !+
    inc.z at+1
  !:
    // [769] print_str_at::str#0 = ++ print_str_at::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [764] phi from print_str_at::@2 to print_str_at::@1 [phi:print_str_at::@2->print_str_at::@1]
    // [764] phi print_str_at::at#2 = print_str_at::at#0 [phi:print_str_at::@2->print_str_at::@1#0] -- register_copy 
    // [764] phi print_str_at::str#2 = print_str_at::str#0 [phi:print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp __b1
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
    // CIA1->PORT_A = keyboard_matrix_row_bitmask[rowid]
    // [770] *((byte*)CIA1) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0] -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1
    // ~CIA1->PORT_B
    // [771] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    // keyboard_matrix_read::@return
    // }
    // [772] return 
    rts
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zp($15) keycode)
keyboard_event_pressed: {
    .label row_bits = $26
    .label keycode = $15
    // keycode>>3
    // [774] keyboard_event_pressed::$0 = keyboard_event_pressed::keycode#4 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    // row_bits = keyboard_scan_values[keycode>>3]
    // [775] keyboard_event_pressed::row_bits#0 = keyboard_scan_values[keyboard_event_pressed::$0] -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta.z row_bits
    // keycode&7
    // [776] keyboard_event_pressed::$1 = keyboard_event_pressed::keycode#4 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z keycode
    // row_bits & keyboard_matrix_col_bitmask[keycode&7]
    // [777] keyboard_event_pressed::return#10 = keyboard_event_pressed::row_bits#0 & keyboard_matrix_col_bitmask[keyboard_event_pressed::$1] -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and.z row_bits
    // keyboard_event_pressed::@return
    // }
    // [778] return 
    rts
}
  // abs_u16
// Get the absolute value of a 16-bit unsigned number treated as a signed number.
// abs_u16(word zp($11) w)
abs_u16: {
    .label w = $11
    .label return = $11
    // >w
    // [780] abs_u16::$0 = > abs_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // >w&0x80
    // [781] abs_u16::$1 = abs_u16::$0 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if(>w&0x80)
    // [782] if(0!=abs_u16::$1) goto abs_u16::@1 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // [784] phi from abs_u16 abs_u16::@1 to abs_u16::@return [phi:abs_u16/abs_u16::@1->abs_u16::@return]
    // [784] phi abs_u16::return#4 = abs_u16::w#2 [phi:abs_u16/abs_u16::@1->abs_u16::@return#0] -- register_copy 
    rts
    // abs_u16::@1
  __b1:
    // return -w;
    // [783] abs_u16::return#2 = - abs_u16::w#2 -- vwuz1=_neg_vwuz1 
    sec
    lda #0
    sbc.z return
    sta.z return
    lda #0
    sbc.z return+1
    sta.z return+1
    // abs_u16::@return
    // }
    // [785] return 
    rts
}
  // sgn_u16
// Get the sign of a 16-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is
// sgn_u16(word zp($27) w)
sgn_u16: {
    .label w = $27
    .label return = $13
    // >w
    // [787] sgn_u16::$0 = > sgn_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // >w&0x80
    // [788] sgn_u16::$1 = sgn_u16::$0 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if(>w&0x80)
    // [789] if(0!=sgn_u16::$1) goto sgn_u16::@1 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // [791] phi from sgn_u16 to sgn_u16::@return [phi:sgn_u16->sgn_u16::@return]
    // [791] phi sgn_u16::return#4 = 1 [phi:sgn_u16->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<1
    sta.z return
    lda #>1
    sta.z return+1
    rts
    // [790] phi from sgn_u16 to sgn_u16::@1 [phi:sgn_u16->sgn_u16::@1]
    // sgn_u16::@1
  __b1:
    // [791] phi from sgn_u16::@1 to sgn_u16::@return [phi:sgn_u16::@1->sgn_u16::@return]
    // [791] phi sgn_u16::return#4 = -1 [phi:sgn_u16::@1->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z return
    sta.z return+1
    // sgn_u16::@return
    // }
    // [792] return 
    rts
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zp($d) x, byte register(A) y)
bitmap_plot: {
    .label __0 = $29
    .label plotter = $27
    .label x = $d
    // plotter = (char*) { bitmap_plot_yhi[y], bitmap_plot_ylo[y] }
    // [794] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] -- vwuz1=pbuc1_derefidx_vbuaa_word_pbuc2_derefidx_vbuaa 
    tay
    lda bitmap_plot_yhi,y
    sta.z plotter+1
    lda bitmap_plot_ylo,y
    sta.z plotter
    // x & $fff8
    // [795] bitmap_plot::$0 = bitmap_plot::x#4 & $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __0
    lda.z x+1
    and #>$fff8
    sta.z __0+1
    // plotter += ( x & $fff8 )
    // [796] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z __0
    sta.z plotter
    lda.z plotter+1
    adc.z __0+1
    sta.z plotter+1
    // <x
    // [797] bitmap_plot::$1 = < bitmap_plot::x#4 -- vbuxx=_lo_vwuz1 
    ldx.z x
    // *plotter |= bitmap_plot_bit[<x]
    // [798] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1] -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    sta (plotter),y
    // bitmap_plot::@return
    // }
    // [799] return 
    rts
}
  // File Data
.segment Data
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  print_hextab: .text "0123456789abcdef"
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // Charset ROM
  FORM_TEXT: .text " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
  .byte 0
  FORM_COLS: .text "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
  .byte 0
  // Form fields x/y-positions
  form_fields_x: .byte 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25
  form_fields_y: .byte 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e
  // Form field max values (all values are in the interval 0..max)
  form_fields_max: .byte $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f
  // Form fields values
  form_fields_val: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Standard Char Mode
  preset_stdchar: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Extended Color Char Mode
  preset_ecmchar: .byte 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6
  // Preset: Standard Bitmap
  preset_stdbm: .byte 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: MC Bitmap
  preset_mcbm: .byte 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Standard Char Mode
  preset_hi_stdchar: .byte 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Extended Color Char Mode
  preset_hi_ecmchar: .byte 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c
  // Preset: Two plane mode
  preset_twoplane: .byte 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0
  // Preset: Chunky 8bpp
  preset_chunky: .byte 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs mode
  preset_sixsfred: .byte 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs 2 mode
  preset_sixsfred2: .byte 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: 8bpp Pixel Cell
  preset_8bpppixelcell: .byte $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Table with addresses of the y-lines of the form. The first line contains the address of the form screen.
  form_line_lo: .fill $19, 0
  form_line_hi: .fill $19, 0

