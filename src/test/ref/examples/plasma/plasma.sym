(label) @1
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = (byte*) 53281
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte) 0
(byte) BLUE
(const byte) BLUE#0 BLUE = (byte) 6
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = (byte*) 53280
(byte*) CHARSET
(const byte*) CHARSET#0 CHARSET = (byte*) 8192
(byte*) COLS
(const byte*) COLS#0 COLS = (byte*) 55296
(byte*) D018
(const byte*) D018#0 D018 = (byte*) 53272
(const byte) RADIX::BINARY BINARY = (number) 2
(const byte) RADIX::DECIMAL DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL OCTAL = (number) 8
(byte*) SCREEN1
(const byte*) SCREEN1#0 SCREEN1 = (byte*) 10240
(byte*) SCREEN2
(const byte*) SCREEN2#0 SCREEN2 = (byte*) 11264
(byte) SID_CONTROL_NOISE
(const byte) SID_CONTROL_NOISE#0 SID_CONTROL_NOISE = (byte) $80
(byte*) SID_VOICE3_CONTROL
(const byte*) SID_VOICE3_CONTROL#0 SID_VOICE3_CONTROL = (byte*) 54290
(word*) SID_VOICE3_FREQ
(const word*) SID_VOICE3_FREQ#0 SID_VOICE3_FREQ = (word*) 54286
(byte*) SID_VOICE3_OSC
(const byte*) SID_VOICE3_OSC#0 SID_VOICE3_OSC = (byte*) 54299
(byte[$100]) SINTABLE
(const byte[$100]) SINTABLE#0 SINTABLE = kickasm {{ .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(2*PI*i/256))
 }}
(byte) c1A
(byte) c1A#10 c1A zp ZP_BYTE:11 2.6000000000000005
(byte) c1A#14 c1A zp ZP_BYTE:11 11.0
(byte) c1A#4 c1A zp ZP_BYTE:11 0.8275862068965517
(byte) c1B
(byte) c1B#10 c1B zp ZP_BYTE:14 2.3636363636363633
(byte) c1B#14 c1B zp ZP_BYTE:14 11.0
(byte) c1B#4 c1B zp ZP_BYTE:14 0.8571428571428571
(byte) c2A
(byte) c2A#14 c2A zp ZP_BYTE:15 11.0
(byte) c2A#24 c2A zp ZP_BYTE:15 1.2380952380952381
(byte) c2A#4 c2A zp ZP_BYTE:15 1.3333333333333335
(byte) c2B
(byte) c2B#14 c2B zp ZP_BYTE:2 11.0
(byte) c2B#24 c2B zp ZP_BYTE:2 1.1818181818181817
(byte) c2B#4 c2B zp ZP_BYTE:2 1.411764705882353
(void()) doplasma((byte*) doplasma::screen)
(byte~) doplasma::$1 reg byte a 202.0
(byte~) doplasma::$3 reg byte a 202.0
(byte~) doplasma::$6 reg byte a 2002.0
(label) doplasma::@1
(label) doplasma::@10
(label) doplasma::@11
(label) doplasma::@2
(label) doplasma::@3
(label) doplasma::@4
(label) doplasma::@5
(label) doplasma::@6
(label) doplasma::@7
(label) doplasma::@8
(label) doplasma::@9
(label) doplasma::@return
(byte) doplasma::c1a
(byte) doplasma::c1a#0 c1a zp ZP_BYTE:4 2.0
(byte) doplasma::c1a#1 c1a zp ZP_BYTE:4 50.5
(byte) doplasma::c1a#4 c1a zp ZP_BYTE:4 101.66666666666666
(byte) doplasma::c1b
(byte) doplasma::c1b#0 c1b zp ZP_BYTE:5 4.0
(byte) doplasma::c1b#1 c1b zp ZP_BYTE:5 67.33333333333333
(byte) doplasma::c1b#4 c1b zp ZP_BYTE:5 76.25
(byte) doplasma::c2a
(byte) doplasma::c2a#0 c2a zp ZP_BYTE:7 2.0
(byte) doplasma::c2a#1 c2a zp ZP_BYTE:7 50.5
(byte) doplasma::c2a#4 c2a zp ZP_BYTE:7 101.66666666666666
(byte) doplasma::c2b
(byte) doplasma::c2b#0 c2b zp ZP_BYTE:8 4.0
(byte) doplasma::c2b#1 c2b zp ZP_BYTE:8 67.33333333333333
(byte) doplasma::c2b#4 c2b zp ZP_BYTE:8 76.25
(byte) doplasma::i
(byte) doplasma::i#1 i zp ZP_BYTE:3 151.5
(byte) doplasma::i#4 i zp ZP_BYTE:3 60.599999999999994
(byte) doplasma::i1
(byte) doplasma::i1#1 i1 zp ZP_BYTE:6 151.5
(byte) doplasma::i1#4 i1 zp ZP_BYTE:6 60.599999999999994
(byte) doplasma::i2
(byte) doplasma::i2#1 reg byte y 1501.5
(byte) doplasma::i2#4 reg byte y 1334.6666666666667
(byte) doplasma::ii
(byte) doplasma::ii#1 reg byte x 151.5
(byte) doplasma::ii#10 reg byte x 171.85714285714283
(byte*) doplasma::screen
(byte*) doplasma::screen#13 screen zp ZP_WORD:9 0.08695652173913043
(byte*) doplasma::screen#18 screen zp ZP_WORD:9 200.83333333333334
(byte*) doplasma::screen#2 screen zp ZP_WORD:9 67.33333333333333
(byte[$28]) doplasma::xbuf
(const byte[$28]) doplasma::xbuf#0 xbuf = { fill( $28, 0) }
(byte[$19]) doplasma::ybuf
(const byte[$19]) doplasma::ybuf#0 ybuf = { fill( $19, 0) }
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(byte*) main::col
(byte*) main::col#1 col zp ZP_WORD:9 16.5
(byte*) main::col#2 col zp ZP_WORD:9 16.5
(label) main::toD0181
(word~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(number~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(number~) main::toD0181_$6
(number~) main::toD0181_$7
(number~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const byte*) SCREEN1#0&(word) $3fff*(byte) 4|>(word)(const byte*) CHARSET#0/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(label) main::toD0182
(word~) main::toD0182_$0
(number~) main::toD0182_$1
(number~) main::toD0182_$2
(number~) main::toD0182_$3
(word~) main::toD0182_$4
(byte~) main::toD0182_$5
(number~) main::toD0182_$6
(number~) main::toD0182_$7
(number~) main::toD0182_$8
(byte*) main::toD0182_gfx
(byte) main::toD0182_return
(const byte) main::toD0182_return#0 toD0182_return = >(word)(const byte*) SCREEN2#0&(word) $3fff*(byte) 4|>(word)(const byte*) CHARSET#0/(byte) 4&(byte) $f
(byte*) main::toD0182_screen
(void()) makecharset((byte*) makecharset::charset)
(word~) makecharset::$10 $10 zp ZP_WORD:16 202.0
(word~) makecharset::$11 $11 zp ZP_WORD:16 202.0
(byte~) makecharset::$12 reg byte a 22.0
(byte*~) makecharset::$16 $16 zp ZP_WORD:16 202.0
(byte~) makecharset::$3 reg byte a 22.0
(byte~) makecharset::$6 reg byte a 2002.0
(byte~) makecharset::$7 $7 zp ZP_BYTE:15 2002.0
(label) makecharset::@1
(label) makecharset::@10
(label) makecharset::@11
(label) makecharset::@12
(label) makecharset::@13
(label) makecharset::@14
(label) makecharset::@2
(label) makecharset::@3
(label) makecharset::@4
(label) makecharset::@5
(label) makecharset::@6
(label) makecharset::@7
(label) makecharset::@8
(label) makecharset::@9
(label) makecharset::@return
(byte) makecharset::b
(byte) makecharset::b#1 reg byte y 2002.0
(byte) makecharset::b#10 reg byte y 500.5
(byte) makecharset::b#2 reg byte y 517.3333333333334
(byte[8]) makecharset::bittab
(const byte[8]) makecharset::bittab#0 bittab = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(word) makecharset::c
(word) makecharset::c#1 c zp ZP_WORD:12 16.5
(word) makecharset::c#16 c zp ZP_WORD:12 5.800000000000001
(byte*) makecharset::charset
(byte) makecharset::i
(byte) makecharset::i#1 i zp ZP_BYTE:11 151.5
(byte) makecharset::i#13 i zp ZP_BYTE:11 20.2
(byte) makecharset::ii
(byte) makecharset::ii#1 reg byte x 1501.5
(byte) makecharset::ii#10 reg byte x 375.375
(byte) makecharset::s
(byte) makecharset::s#0 s zp ZP_BYTE:14 56.22222222222223
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp ZP_WORD:12 16.5
(byte*) memset::dst#4 dst zp ZP_WORD:12 16.5
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_line_cursor#0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(const byte) print_char::ch#0 ch = (byte) '.'
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:9 4.333333333333333
(byte*) print_char_cursor#18 print_char_cursor zp ZP_WORD:9 11.0
(byte*) print_char_cursor#56 print_char_cursor zp ZP_WORD:9 1.0833333333333333
(void()) print_cls()
(label) print_cls::@return
(byte*) print_line_cursor
(const byte*) print_line_cursor#0 print_line_cursor = (byte*) 1024
(byte*) print_screen
(byte()) sid_rnd()
(label) sid_rnd::@return
(byte) sid_rnd::return
(byte) sid_rnd::return#0 reg byte a 334.33333333333337
(byte) sid_rnd::return#2 reg byte a 2002.0
(void()) sid_rnd_init()
(label) sid_rnd_init::@return

zp ZP_BYTE:2 [ c2B#24 c2B#14 c2B#4 ]
zp ZP_BYTE:3 [ doplasma::i#4 doplasma::i#1 ]
zp ZP_BYTE:4 [ doplasma::c1a#4 doplasma::c1a#1 doplasma::c1a#0 ]
zp ZP_BYTE:5 [ doplasma::c1b#4 doplasma::c1b#1 doplasma::c1b#0 ]
zp ZP_BYTE:6 [ doplasma::i1#4 doplasma::i1#1 ]
zp ZP_BYTE:7 [ doplasma::c2a#4 doplasma::c2a#1 doplasma::c2a#0 ]
zp ZP_BYTE:8 [ doplasma::c2b#4 doplasma::c2b#1 doplasma::c2b#0 ]
reg byte x [ doplasma::ii#10 doplasma::ii#1 ]
reg byte y [ doplasma::i2#4 doplasma::i2#1 ]
zp ZP_WORD:9 [ print_char_cursor#56 print_char_cursor#18 print_char_cursor#1 doplasma::screen#18 doplasma::screen#2 doplasma::screen#13 main::col#2 main::col#1 ]
zp ZP_BYTE:11 [ makecharset::i#13 makecharset::i#1 c1A#10 c1A#14 c1A#4 ]
reg byte x [ makecharset::ii#10 makecharset::ii#1 ]
reg byte y [ makecharset::b#10 makecharset::b#2 makecharset::b#1 ]
zp ZP_WORD:12 [ memset::dst#4 memset::dst#1 makecharset::c#16 makecharset::c#1 ]
reg byte a [ doplasma::$1 ]
reg byte a [ doplasma::$3 ]
reg byte a [ doplasma::$6 ]
reg byte a [ makecharset::$3 ]
zp ZP_BYTE:14 [ makecharset::s#0 c1B#10 c1B#14 c1B#4 ]
reg byte a [ sid_rnd::return#2 ]
reg byte a [ makecharset::$6 ]
zp ZP_BYTE:15 [ makecharset::$7 c2A#24 c2A#14 c2A#4 ]
zp ZP_WORD:16 [ makecharset::$10 makecharset::$11 makecharset::$16 ]
reg byte a [ makecharset::$12 ]
reg byte a [ sid_rnd::return#0 ]
