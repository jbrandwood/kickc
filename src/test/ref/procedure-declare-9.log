
CONTROL FLOW GRAPH SSA

__interrupt(rom_min_c64) void irq()
irq: scope:[irq]  from
  SCREEN[0] = ++ SCREEN[0]
  to:irq::@return
irq::@return: scope:[irq]  from irq
  return 
  to:@return

void main()
main: scope:[main]  from __start
  *IRQ = &irq
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant void()** const IRQ = (void()**)$314
constant byte* const SCREEN = (byte*)$400
void __start()
__interrupt(rom_min_c64) void irq()
void main()

Adding number conversion cast (unumber) 0 in SCREEN[0] = ++ SCREEN[0]
Adding number conversion cast (unumber) 0 in SCREEN[0] = ++ SCREEN[(unumber)0]
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (void()**) 788
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero SCREEN in [0] SCREEN[0] = ++ SCREEN[0]
Simplifying expression containing zero SCREEN in [0] SCREEN[0] = ++ *SCREEN
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *IRQ = &irq
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return

__interrupt(rom_min_c64) void irq()
irq: scope:[irq]  from
  [2] *SCREEN = ++ *SCREEN
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
__interrupt(rom_min_c64) void irq()
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *IRQ = &irq [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [irq] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [irq] best 60 combination 
Uplifting [main] best 60 combination 
Uplifting [] best 60 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Pointer to pointer to procedure - using typedef
  // Upstart
  // Commodore 64 PRG executable file
.file [name="procedure-declare-9.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  // Use typedef to define const pointer to pointer to no-arg-noreturn procedure
  .label IRQ = $314
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [0] *IRQ = &irq -- _deref_qprc1=pprc2 
    lda #<irq
    sta IRQ
    lda #>irq
    sta IRQ+1
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // irq
irq: {
    // interrupt(isr_rom_min_c64_entry) -- isr_rom_min_c64_entry 
    // [2] *SCREEN = ++ *SCREEN -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN
    jmp __breturn
    // irq::@return
  __breturn:
    // [3] return 
    // interrupt(isr_rom_min_c64_exit) -- isr_rom_min_c64_exit 
    jmp $ea81
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant void()** const IRQ = (void()**) 788
constant byte* const SCREEN = (byte*) 1024
__interrupt(rom_min_c64) void irq()
void main()



FINAL ASSEMBLER
Score: 54

  // File Comments
// Pointer to pointer to procedure - using typedef
  // Upstart
  // Commodore 64 PRG executable file
.file [name="procedure-declare-9.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  // Use typedef to define const pointer to pointer to no-arg-noreturn procedure
  .label IRQ = $314
  .label SCREEN = $400
.segment Code
  // main
main: {
    // *IRQ = &irq
    // [0] *IRQ = &irq -- _deref_qprc1=pprc2 
    lda #<irq
    sta IRQ
    lda #>irq
    sta IRQ+1
    // main::@return
    // }
    // [1] return 
    rts
}
  // irq
irq: {
    // interrupt(isr_rom_min_c64_entry) -- isr_rom_min_c64_entry 
    // SCREEN[0]++;
    // [2] *SCREEN = ++ *SCREEN -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN
    // irq::@return
    // }
    // [3] return 
    // interrupt(isr_rom_min_c64_exit) -- isr_rom_min_c64_exit 
    jmp $ea81
}
  // File Data

