
void main()
main: scope:[main]  from
  [0] phi()
  [1] call cputs 
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call strlen 
  [4] strlen::return#3 = strlen::len#2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [5] md5::initial_len#0 = strlen::return#3
  [6] call md5 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@3
  [7] phi()
  to:main::@1

void cputs(const byte* cputs::s)
cputs: scope:[cputs]  from main md5::@10 md5::@16 md5::@20 md5::@37 md5::@39 md5::@50 md5::@52 printf_number_buffer::@4
  [8] cputs::s#11 = phi( main/main::s, md5::@10/md5::s1, md5::@16/md5::s4, md5::@20/md5::s, md5::@37/md5::s2, md5::@39/md5::s3, md5::@50/md5::s5, md5::@52/md5::s6, printf_number_buffer::@4/printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [9] cputs::s#10 = phi( cputs/cputs::s#11, cputs::@2/cputs::s#0 )
  [10] cputs::c#1 = *cputs::s#10
  [11] cputs::s#0 = ++ cputs::s#10
  [12] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [13] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [14] cputc::c = cputs::c#1
  [15] call cputc 
  to:cputs::@1

word strlen(byte* strlen::str)
strlen: scope:[strlen]  from main::@2 printf_number_buffer::@5
  [16] strlen::str#5 = phi( main::@2/main::message, printf_number_buffer::@5/printf_number_buffer::buffer_digits#0 )
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [17] strlen::len#2 = phi( strlen/0, strlen::@2/strlen::len#1 )
  [17] strlen::str#3 = phi( strlen/strlen::str#5, strlen::@2/strlen::str#0 )
  [18] if(0!=*strlen::str#3) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [19] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [20] strlen::len#1 = ++ strlen::len#2
  [21] strlen::str#0 = ++ strlen::str#3
  to:strlen::@1

void md5(byte* md5::initial_msg , word md5::initial_len)
md5: scope:[md5]  from main::@3
  [22] md5::$0 = md5::initial_len#0 + 8
  [23] md5::$1 = md5::$0 >> 6
  [24] md5::$2 = md5::$1 + 1
  [25] md5::$3 = md5::$2 << 6
  [26] md5::new_len#0 = md5::$3 - 8
  [27] calloc::nitems#0 = md5::new_len#0 + $40
  [28] call calloc 
  [29] calloc::return#2 = calloc::return#0
  to:md5::@18
md5::@18: scope:[md5]  from md5
  [30] md5::msg#1 = calloc::return#2
  [31] memcpy::destination#1 = (void*)(byte*)md5::msg#1
  [32] memcpy::num#1 = md5::initial_len#0
  [33] call memcpy 
  to:md5::@19
md5::@19: scope:[md5]  from md5::@18
  [34] md5::$74 = (byte*)md5::msg#1 + md5::initial_len#0
  [35] *md5::$74 = $80
  [36] md5::bits_len = md5::initial_len#0 << 3
  [37] memcpy::destination#2 = (byte*)md5::msg#1 + md5::new_len#0
  [38] memcpy::destination#8 = (void*)memcpy::destination#2
  [39] call memcpy 
  to:md5::@1
md5::@1: scope:[md5]  from md5::@19 md5::@5
  [40] h3#10 = phi( md5::@19/$10325476, md5::@5/h3#3 )
  [40] h2#10 = phi( md5::@19/$98badcfe, md5::@5/h2#3 )
  [40] h1#10 = phi( md5::@19/$efcdab89, md5::@5/h1#3 )
  [40] h0#10 = phi( md5::@19/$67452301, md5::@5/h0#3 )
  [40] md5::offset#2 = phi( md5::@19/0, md5::@5/md5::offset#1 )
  [41] if(md5::offset#2<md5::new_len#0) goto md5::@2
  to:md5::@return
md5::@return: scope:[md5]  from md5::@1
  [42] return 
  to:@return
md5::@2: scope:[md5]  from md5::@1
  [43] md5::w#0 = (byte*)md5::msg#1 + md5::offset#2
  [44] md5::a#0 = h0#10
  [45] md5::b#0 = h1#10
  [46] md5::c#0 = h2#10
  [47] md5::d#0 = h3#10
  to:md5::@3
md5::@3: scope:[md5]  from md5::@11 md5::@2
  [48] md5::temp#0 = phi( md5::@11/md5::temp#16, md5::@2/md5::d#0 )
  [48] md5::c#10 = phi( md5::@11/md5::c#57, md5::@2/md5::c#0 )
  [48] md5::b#10 = phi( md5::@11/md5::b#57, md5::@2/md5::b#0 )
  [48] md5::a#11 = phi( md5::@11/md5::a#56, md5::@2/md5::a#0 )
  [48] md5::i#10 = phi( md5::@11/md5::i#1, md5::@2/0 )
  [49] if(md5::i#10<$40) goto md5::@4
  to:md5::@5
md5::@5: scope:[md5]  from md5::@3
  [50] h0#3 = h0#10 + md5::a#11
  [51] h1#3 = h1#10 + md5::b#10
  [52] h2#3 = h2#10 + md5::c#10
  [53] h3#3 = h3#10 + md5::temp#0
  [54] md5::offset#1 = md5::offset#2 + (signed byte)$200/8
  to:md5::@1
md5::@4: scope:[md5]  from md5::@3
  [55] printf_uchar::uvalue#4 = md5::i#10
  [56] call printf_uchar 
  to:md5::@20
md5::@20: scope:[md5]  from md5::@4
  [57] phi()
  [58] call cputs 
  to:md5::@21
md5::@21: scope:[md5]  from md5::@20
  [59] print32::l = md5::a#11
  [60] call print32 
  to:md5::@22
md5::@22: scope:[md5]  from md5::@21
  [61] cputc::c = ' 'at
  [62] call cputc 
  to:md5::@23
md5::@23: scope:[md5]  from md5::@22
  [63] print32::l = md5::b#10
  [64] call print32 
  to:md5::@24
md5::@24: scope:[md5]  from md5::@23
  [65] cputc::c = ' 'at
  [66] call cputc 
  to:md5::@25
md5::@25: scope:[md5]  from md5::@24
  [67] print32::l = md5::c#10
  [68] call print32 
  to:md5::@26
md5::@26: scope:[md5]  from md5::@25
  [69] cputc::c = ' 'at
  [70] call cputc 
  to:md5::@27
md5::@27: scope:[md5]  from md5::@26
  [71] print32::l = md5::temp#0
  [72] call print32 
  to:md5::@28
md5::@28: scope:[md5]  from md5::@27
  [73] phi()
  [74] call cputln 
  to:md5::BREAK1
md5::BREAK1: scope:[md5]  from md5::@28
  kickasm() {{ .break  }}
  to:md5::@15
md5::@15: scope:[md5]  from md5::BREAK1
  [76] md5::$24 = md5::i#10 >> 4
  [77] md5::$25 = md5::$24 & 3
  [78] if(md5::$25==0) goto md5::@6
  to:md5::@12
md5::@12: scope:[md5]  from md5::@15
  [79] if(md5::$25==1) goto md5::@7
  to:md5::@13
md5::@13: scope:[md5]  from md5::@12
  [80] if(md5::$25==2) goto md5::@8
  to:md5::@14
md5::@14: scope:[md5]  from md5::@13
  [81] if(md5::$25==3) goto md5::@9
  to:md5::@10
md5::@10: scope:[md5]  from md5::@14 md5::@30 md5::@32 md5::@34 md5::@6
  [82] md5::g#10 = phi( md5::@14/0, md5::@30/md5::g#2, md5::@32/md5::g#3, md5::@34/md5::g#4, md5::@6/md5::g#36 )
  [82] md5::f#10 = phi( md5::@14/0, md5::@30/md5::f#12, md5::@32/md5::f#13, md5::@34/md5::f#14, md5::@6/md5::f#1 )
  [83] call cputs 
  to:md5::@35
md5::@35: scope:[md5]  from md5::@10
  [84] print32::l = md5::f#10
  [85] call print32 
  to:md5::@36
md5::@36: scope:[md5]  from md5::@35
  [86] cputc::c = ' 'at
  [87] call cputc 
  to:md5::@37
md5::@37: scope:[md5]  from md5::@36
  [88] phi()
  [89] call cputs 
  to:md5::@38
md5::@38: scope:[md5]  from md5::@37
  [90] printf_uchar::uvalue#5 = md5::g#10
  [91] call printf_uchar 
  to:md5::@39
md5::@39: scope:[md5]  from md5::@38
  [92] phi()
  [93] call cputs 
  to:md5::@40
md5::@40: scope:[md5]  from md5::@39
  [94] md5::$71 = md5::g#10 << 2
  [95] print32::l = ((dword*)md5::w#0)[md5::$71]
  [96] call print32 
  to:md5::@41
md5::@41: scope:[md5]  from md5::@40
  [97] phi()
  [98] call cputln 
  to:md5::BREAK2
md5::BREAK2: scope:[md5]  from md5::@41
  kickasm() {{ .break  }}
  to:md5::@16
md5::@16: scope:[md5]  from md5::BREAK2
  [100] phi()
  [101] call cputs 
  to:md5::@42
md5::@42: scope:[md5]  from md5::@16
  [102] print32::l = md5::a#11
  [103] call print32 
  to:md5::@43
md5::@43: scope:[md5]  from md5::@42
  [104] cputc::c = ' 'at
  [105] call cputc 
  to:md5::@44
md5::@44: scope:[md5]  from md5::@43
  [106] print32::l = md5::f#10
  [107] call print32 
  to:md5::@45
md5::@45: scope:[md5]  from md5::@44
  [108] cputc::c = ' 'at
  [109] call cputc 
  to:md5::@46
md5::@46: scope:[md5]  from md5::@45
  [110] md5::$72 = md5::i#10 << 2
  [111] print32::l = md5::k[md5::$72]
  [112] call print32 
  to:md5::@47
md5::@47: scope:[md5]  from md5::@46
  [113] cputc::c = ' 'at
  [114] call cputc 
  to:md5::@48
md5::@48: scope:[md5]  from md5::@47
  [115] print32::l = ((dword*)md5::w#0)[md5::$71]
  [116] call print32 
  to:md5::@49
md5::@49: scope:[md5]  from md5::@48
  [117] cputc::c = ' 'at
  [118] call cputc 
  to:md5::@50
md5::@50: scope:[md5]  from md5::@49
  [119] phi()
  [120] call cputs 
  to:md5::@51
md5::@51: scope:[md5]  from md5::@50
  [121] printf_uchar::uvalue#6 = md5::r[md5::i#10]
  [122] call printf_uchar 
  to:md5::@52
md5::@52: scope:[md5]  from md5::@51
  [123] phi()
  [124] call cputs 
  to:md5::BREAK3
md5::BREAK3: scope:[md5]  from md5::@52
  kickasm() {{ .break  }}
  to:md5::@17
md5::@17: scope:[md5]  from md5::BREAK3
  [126] md5::$65 = md5::a#11 + md5::f#10
  [127] md5::$66 = md5::$65 + md5::k[md5::$72]
  [128] md5::$67 = md5::$66 + ((dword*)md5::w#0)[md5::$71]
  [129] leftRotate::a = md5::$67
  [130] leftRotate::r#0 = md5::r[md5::i#10]
  [131] call leftRotate 
  [132] leftRotate::return#2 = leftRotate::return#0
  to:md5::@53
md5::@53: scope:[md5]  from md5::@17
  [133] md5::lr#0 = leftRotate::return#2
  [134] md5::b#1 = md5::b#10 + md5::lr#0
  to:md5::@11
md5::@11: scope:[md5]  from md5::@53
  [135] md5::i#1 = ++ md5::i#10
  [136] md5::a#56 = md5::temp#0
  [137] md5::b#57 = md5::b#1
  [138] md5::c#57 = md5::b#10
  [139] md5::temp#16 = md5::c#10
  to:md5::@3
md5::@9: scope:[md5]  from md5::@14
  [140] md5::$42 = ~ md5::temp#0
  [141] md5::$43 = md5::b#10 | md5::$42
  [142] md5::f#14 = md5::c#10 ^ md5::$43
  [143] mul7::a#0 = md5::i#10
  [144] call mul7 
  [145] mul7::return#2 = mul7::return#0
  to:md5::@33
md5::@33: scope:[md5]  from md5::@9
  [146] mod16::a#2 = mul7::return#2
  [147] call mod16 
  [148] mod16::return#4 = mod16::return#0
  to:md5::@34
md5::@34: scope:[md5]  from md5::@33
  [149] md5::g#4 = mod16::return#4
  to:md5::@10
md5::@8: scope:[md5]  from md5::@13
  [150] md5::$37 = md5::b#10 ^ md5::c#10
  [151] md5::f#13 = md5::$37 ^ md5::temp#0
  [152] mul3::a#0 = md5::i#10
  [153] call mul3 
  [154] mul3::return#2 = mul3::return#0
  to:md5::@31
md5::@31: scope:[md5]  from md5::@8
  [155] md5::$39 = mul3::return#2
  [156] mod16::a#1 = md5::$39 + 5
  [157] call mod16 
  [158] mod16::return#3 = mod16::return#0
  to:md5::@32
md5::@32: scope:[md5]  from md5::@31
  [159] md5::g#3 = mod16::return#3
  to:md5::@10
md5::@7: scope:[md5]  from md5::@12
  [160] md5::$30 = md5::temp#0 & md5::b#10
  [161] md5::$31 = ~ md5::temp#0
  [162] md5::$32 = md5::$31 & md5::c#10
  [163] md5::f#12 = md5::$30 | md5::$32
  [164] mul5::a#0 = md5::i#10
  [165] call mul5 
  [166] mul5::return#2 = mul5::return#0
  to:md5::@29
md5::@29: scope:[md5]  from md5::@7
  [167] md5::$34 = mul5::return#2
  [168] mod16::a#0 = md5::$34 + 1
  [169] call mod16 
  [170] mod16::return#2 = mod16::return#0
  to:md5::@30
md5::@30: scope:[md5]  from md5::@29
  [171] md5::g#2 = mod16::return#2
  to:md5::@10
md5::@6: scope:[md5]  from md5::@15
  [172] md5::$26 = md5::b#10 & md5::c#10
  [173] md5::$27 = ~ md5::b#10
  [174] md5::$28 = md5::$27 & md5::temp#0
  [175] md5::f#1 = md5::$26 | md5::$28
  [176] md5::g#36 = md5::i#10
  to:md5::@10

void cputc(volatile byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 md5::@22 md5::@24 md5::@26 md5::@36 md5::@43 md5::@45 md5::@47 md5::@49 printf_number_buffer::@8 printf_padding::@2
  [177] if(cputc::c==''at) goto cputc::@1
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc
  [178] if(cputc::c=='
'at) goto cputc::@2
  to:cputc::@8
cputc::@8: scope:[cputc]  from cputc::@3
  [179] if(cputc::c==$9b) goto cputc::@2
  to:cputc::convertToScreenCode1
cputc::convertToScreenCode1: scope:[cputc]  from cputc::@8
  [180] cputc::convertToScreenCode1_return#0 = rawmap[*cputc::convertToScreenCode1_v#0]
  to:cputc::@6
cputc::@6: scope:[cputc]  from cputc::convertToScreenCode1
  [181] phi()
  [182] call putchar 
  to:cputc::@7
cputc::@7: scope:[cputc]  from cputc::@6
  [183] *COLCRS = ++ *COLCRS
  [184] if(*COLCRS==$28) goto cputc::@5
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@7
  [185] phi()
  [186] call setcursor 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@4 cputc::@5
  [187] return 
  to:@return
cputc::@5: scope:[cputc]  from cputc::@7
  [188] *COLCRS = 0
  [189] call newline 
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc::@3 cputc::@8
  [190] *COLCRS = 0
  [191] call newline 
  to:cputc::@return
cputc::@1: scope:[cputc]  from cputc
  [192] *COLCRS = 0
  [193] call setcursor 
  to:cputc::@return

void* calloc(word calloc::nitems , word calloc::size)
calloc: scope:[calloc]  from md5
  [194] malloc::size#0 = calloc::nitems#0
  [195] call malloc 
  to:calloc::@1
calloc::@1: scope:[calloc]  from calloc
  [196] calloc::return#0 = (void*)malloc::mem#0
  [197] memset::num#0 = calloc::nitems#0
  [198] memset::str#0 = calloc::return#0
  [199] call memset 
  to:calloc::@return
calloc::@return: scope:[calloc]  from calloc::@1
  [200] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from md5::@18 md5::@19 newline::@2
  [201] memcpy::num#3 = phi( md5::@18/memcpy::num#1, md5::@19/4, newline::@2/(word)$28*$17 )
  [201] memcpy::destination#3 = phi( md5::@18/memcpy::destination#1, md5::@19/memcpy::destination#8, newline::@2/memcpy::destination#0 )
  [201] memcpy::source#3 = phi( md5::@18/(void*)main::message, md5::@19/(void*)&md5::bits_len, newline::@2/memcpy::source#4 )
  [202] memcpy::src_end#0 = (byte*)memcpy::source#3 + memcpy::num#3
  [203] memcpy::src#4 = (byte*)memcpy::source#3
  [204] memcpy::dst#4 = (byte*)memcpy::destination#3
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [205] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [205] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [206] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [207] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [208] *memcpy::dst#2 = *memcpy::src#2
  [209] memcpy::dst#1 = ++ memcpy::dst#2
  [210] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from md5::@38 md5::@4 md5::@51 print32 print32::@1 print32::@2 print32::@3
  [211] printf_uchar::format_zero_padding#10 = phi( md5::@4/0, md5::@38/0, md5::@51/0, print32/1, print32::@1/1, print32::@2/1, print32::@3/1 )
  [211] printf_uchar::uvalue#10 = phi( md5::@4/printf_uchar::uvalue#4, md5::@38/printf_uchar::uvalue#5, md5::@51/printf_uchar::uvalue#6, print32/printf_uchar::uvalue#0, print32::@1/printf_uchar::uvalue#1, print32::@2/printf_uchar::uvalue#2, print32::@3/printf_uchar::uvalue#3 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [212] *((byte*)&printf_buffer) = 0
  [213] uctoa::value#1 = printf_uchar::uvalue#10
  [214] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [215] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [216] printf_number_buffer::format_zero_padding#0 = printf_uchar::format_zero_padding#10
  [217] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [218] return 
  to:@return

void print32(volatile dword print32::l)
print32: scope:[print32]  from md5::@21 md5::@23 md5::@25 md5::@27 md5::@35 md5::@40 md5::@42 md5::@44 md5::@46 md5::@48
  [219] printf_uchar::uvalue#0 = *print32::dp#1
  [220] call printf_uchar 
  to:print32::@1
print32::@1: scope:[print32]  from print32
  [221] printf_uchar::uvalue#1 = *(print32::dp#1+1)
  [222] call printf_uchar 
  to:print32::@2
print32::@2: scope:[print32]  from print32::@1
  [223] printf_uchar::uvalue#2 = *(print32::dp#1+2)
  [224] call printf_uchar 
  to:print32::@3
print32::@3: scope:[print32]  from print32::@2
  [225] printf_uchar::uvalue#3 = *(print32::dp#1+3)
  [226] call printf_uchar 
  to:print32::@return
print32::@return: scope:[print32]  from print32::@3
  [227] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from md5::@28 md5::@41
  [228] *COLCRS = 0
  [229] call newline 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [230] return 
  to:@return

dword leftRotate(volatile dword leftRotate::a , byte leftRotate::r)
leftRotate: scope:[leftRotate]  from md5::@17
  [231] if(leftRotate::r#0<8) goto leftRotate::@1
  to:leftRotate::@6
leftRotate::@6: scope:[leftRotate]  from leftRotate
  [232] if(leftRotate::r#0==8) goto leftRotate::@2
  to:leftRotate::@7
leftRotate::@7: scope:[leftRotate]  from leftRotate::@6
  [233] if(leftRotate::r#0<$10) goto leftRotate::@3
  to:leftRotate::@8
leftRotate::@8: scope:[leftRotate]  from leftRotate::@7
  [234] if(leftRotate::r#0==$10) goto leftRotate::@4
  to:leftRotate::@9
leftRotate::@9: scope:[leftRotate]  from leftRotate::@8
  [235] phi()
  [236] call move16Left 
  to:leftRotate::@11
leftRotate::@11: scope:[leftRotate]  from leftRotate::@9
  [237] leftRotate::$5 = leftRotate::r#0 - $10
  [238] rotateLeft::p = leftRotate::p#1
  [239] rotateLeft::r = leftRotate::$5
  [240] call rotateLeft 
  to:leftRotate::@5
leftRotate::@5: scope:[leftRotate]  from leftRotate::@1 leftRotate::@10 leftRotate::@11 leftRotate::@2 leftRotate::@4
  [241] leftRotate::return#0 = *leftRotate::result#0
  to:leftRotate::@return
leftRotate::@return: scope:[leftRotate]  from leftRotate::@5
  [242] return 
  to:@return
leftRotate::@4: scope:[leftRotate]  from leftRotate::@8
  [243] phi()
  [244] call move16Left 
  to:leftRotate::@5
leftRotate::@3: scope:[leftRotate]  from leftRotate::@7
  [245] phi()
  [246] call move8Left 
  to:leftRotate::@10
leftRotate::@10: scope:[leftRotate]  from leftRotate::@3
  [247] leftRotate::$9 = leftRotate::r#0 - 8
  [248] rotateLeft::p = leftRotate::p#1
  [249] rotateLeft::r = leftRotate::$9
  [250] call rotateLeft 
  to:leftRotate::@5
leftRotate::@2: scope:[leftRotate]  from leftRotate::@6
  [251] phi()
  [252] call move8Left 
  to:leftRotate::@5
leftRotate::@1: scope:[leftRotate]  from leftRotate
  [253] rotateLeft::p = leftRotate::p#1
  [254] rotateLeft::r = leftRotate::r#0
  [255] call rotateLeft 
  to:leftRotate::@5

word mul7(byte mul7::a)
mul7: scope:[mul7]  from md5::@9
  [256] mul7::$1 = (word)mul7::a#0
  [257] mul7::$2 = mul7::$1 << 1
  [258] mul7::$3 = mul7::$2 + mul7::$1
  [259] mul7::$4 = mul7::$3 << 1
  [260] mul7::return#0 = mul7::$4 + mul7::$1
  to:mul7::@return
mul7::@return: scope:[mul7]  from mul7
  [261] return 
  to:@return

byte mod16(word mod16::a)
mod16: scope:[mod16]  from md5::@29 md5::@31 md5::@33
  [262] mod16::a#3 = phi( md5::@29/mod16::a#0, md5::@31/mod16::a#1, md5::@33/mod16::a#2 )
  [263] mod16::t#0 = mod16::a#3 & $10-1
  [264] mod16::return#0 = mod16::t#0 & $ff
  to:mod16::@return
mod16::@return: scope:[mod16]  from mod16
  [265] return 
  to:@return

word mul3(byte mul3::a)
mul3: scope:[mul3]  from md5::@8
  [266] mul3::$1 = (word)mul3::a#0
  [267] mul3::$2 = mul3::$1 << 1
  [268] mul3::return#0 = mul3::$2 + mul3::$1
  to:mul3::@return
mul3::@return: scope:[mul3]  from mul3
  [269] return 
  to:@return

word mul5(byte mul5::a)
mul5: scope:[mul5]  from md5::@7
  [270] mul5::$1 = (word)mul5::a#0
  [271] mul5::$2 = mul5::$1 << 2
  [272] mul5::return#0 = mul5::$2 + mul5::$1
  to:mul5::@return
mul5::@return: scope:[mul5]  from mul5
  [273] return 
  to:@return

void putchar(byte putchar::code)
putchar: scope:[putchar]  from cputc::@6
  [274] *(*OLDADR) = *OLDCHR
  [275] call cursorLocation 
  [276] cursorLocation::return#0 = cursorLocation::return#1
  to:putchar::@1
putchar::@1: scope:[putchar]  from putchar
  [277] putchar::loc#0 = cursorLocation::return#0
  [278] putchar::newChar#0 = cputc::convertToScreenCode1_return#0
  [279] *putchar::loc#0 = putchar::newChar#0
  [280] *OLDCHR = putchar::newChar#0
  [281] call setcursor 
  to:putchar::@return
putchar::@return: scope:[putchar]  from putchar::@1
  [282] return 
  to:@return

void setcursor()
setcursor: scope:[setcursor]  from cputc::@1 cputc::@4 newline::@1 putchar::@1
  [283] *(*OLDADR) = *OLDCHR
  [284] call cursorLocation 
  [285] cursorLocation::return#3 = cursorLocation::return#1
  to:setcursor::@3
setcursor::@3: scope:[setcursor]  from setcursor
  [286] setcursor::loc#0 = cursorLocation::return#3
  [287] setcursor::c#0 = *setcursor::loc#0
  [288] *OLDCHR = setcursor::c#0
  [289] *OLDADR = setcursor::loc#0
  to:setcursor::@2
setcursor::@2: scope:[setcursor]  from setcursor::@3
  [290] *CRSINH = 0
  [291] setcursor::c#1 = setcursor::c#0 ^ $80
  to:setcursor::@1
setcursor::@1: scope:[setcursor]  from setcursor::@2
  [292] *(*OLDADR) = setcursor::c#1
  to:setcursor::@return
setcursor::@return: scope:[setcursor]  from setcursor::@1
  [293] return 
  to:@return

void newline()
newline: scope:[newline]  from cputc::@2 cputc::@5 cputln
  [294] *ROWCRS = ++ *ROWCRS
  [295] if(*ROWCRS!=$18) goto newline::@1
  to:newline::@3
newline::@3: scope:[newline]  from newline
  [296] *(*OLDADR) = *(*OLDADR) ^ $80
  to:newline::@2
newline::@2: scope:[newline]  from newline::@3
  [297] newline::start#0 = *SAVMSC
  [298] memcpy::source#0 = newline::start#0 + $28
  [299] memcpy::destination#0 = (void*)newline::start#0
  [300] memcpy::source#4 = (void*)memcpy::source#0
  [301] call memcpy 
  to:newline::@4
newline::@4: scope:[newline]  from newline::@2
  [302] memset::str#1 = newline::start#0 + (word)$28*$17
  [303] memset::str#8 = (void*)memset::str#1
  [304] call memset 
  to:newline::@5
newline::@5: scope:[newline]  from newline::@4
  [305] *ROWCRS = $18-1
  to:newline::@1
newline::@1: scope:[newline]  from newline newline::@5
  [306] phi()
  [307] call setcursor 
  to:newline::@return
newline::@return: scope:[newline]  from newline::@1
  [308] return 
  to:@return

void* malloc(word malloc::size)
malloc: scope:[malloc]  from calloc
  [309] malloc::mem#0 = HEAP_TOP - malloc::size#0
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  [310] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from calloc::@1 newline::@4
  [311] memset::str#3 = phi( calloc::@1/memset::str#0, newline::@4/memset::str#8 )
  [311] memset::num#2 = phi( calloc::@1/memset::num#0, newline::@4/$28 )
  [312] if(memset::num#2<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [313] memset::end#0 = (byte*)memset::str#3 + memset::num#2
  [314] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [315] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [316] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [317] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [318] *memset::dst#2 = 0
  [319] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [320] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [321] uctoa::buffer#11 = phi( uctoa::@4/uctoa::buffer#14, uctoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [321] uctoa::started#2 = phi( uctoa::@4/uctoa::started#4, uctoa/0 )
  [321] uctoa::value#2 = phi( uctoa::@4/uctoa::value#6, uctoa/uctoa::value#1 )
  [321] uctoa::digit#2 = phi( uctoa::@4/uctoa::digit#1, uctoa/0 )
  [322] if(uctoa::digit#2<2-1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [323] *uctoa::buffer#11 = DIGITS[uctoa::value#2]
  [324] uctoa::buffer#3 = ++ uctoa::buffer#11
  [325] *uctoa::buffer#3 = 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [326] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [327] uctoa::digit_value#0 = RADIX_HEXADECIMAL_VALUES_CHAR[uctoa::digit#2]
  [328] if(0!=uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [329] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [330] uctoa::buffer#14 = phi( uctoa::@7/uctoa::buffer#11, uctoa::@6/uctoa::buffer#4 )
  [330] uctoa::started#4 = phi( uctoa::@7/uctoa::started#2, uctoa::@6/1 )
  [330] uctoa::value#6 = phi( uctoa::@7/uctoa::value#2, uctoa::@6/uctoa::value#0 )
  [331] uctoa::digit#1 = ++ uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [332] uctoa_append::buffer#0 = uctoa::buffer#11
  [333] uctoa_append::value#0 = uctoa::value#2
  [334] uctoa_append::sub#0 = uctoa::digit_value#0
  [335] call uctoa_append 
  [336] uctoa_append::return#0 = uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [337] uctoa::value#0 = uctoa_append::return#0
  [338] uctoa::buffer#4 = ++ uctoa::buffer#11
  to:uctoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2
  [339] phi()
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer
  [340] phi()
  [341] call strlen 
  [342] strlen::return#2 = strlen::len#2
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [343] printf_number_buffer::$19 = strlen::return#2
  [344] printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19
  [345] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@10
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer::@11
  [346] printf_number_buffer::len#1 = ++ printf_number_buffer::len#0
  to:printf_number_buffer::@10
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@6
  [347] printf_number_buffer::len#2 = phi( printf_number_buffer::@11/printf_number_buffer::len#0, printf_number_buffer::@6/printf_number_buffer::len#1 )
  [348] printf_number_buffer::padding#1 = (signed byte)printf_number_buffer::format_min_length#0 - printf_number_buffer::len#2
  [349] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@15
  to:printf_number_buffer::@1
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@10
  [350] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@15
  [351] printf_number_buffer::padding#10 = phi( printf_number_buffer::@15/printf_number_buffer::padding#1, printf_number_buffer::@10/0 )
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [352] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@12
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [353] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@7
  to:printf_number_buffer::@2
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@12
  [354] printf_padding::length#0 = (byte)printf_number_buffer::padding#10
  [355] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@13 printf_number_buffer::@7
  [356] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@3
  to:printf_number_buffer::@8
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [357] cputc::c = printf_number_buffer::buffer_sign#0
  [358] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@8
  [359] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [360] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@9
  to:printf_number_buffer::@4
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [361] printf_padding::length#1 = (byte)printf_number_buffer::padding#10
  [362] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@3 printf_number_buffer::@9
  [363] phi()
  [364] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [365] return 
  to:@return

void move16Left(byte* move16Left::p)
move16Left: scope:[move16Left]  from leftRotate::@4 leftRotate::@9
  [366] move16Left::s#0 = *leftRotate::p#1
  [367] move16Left::t#0 = *(leftRotate::p#1+1)
  [368] *leftRotate::p#1 = *(leftRotate::p#1+2)
  [369] *(leftRotate::p#1+1) = *(leftRotate::p#1+3)
  [370] *(leftRotate::p#1+2) = move16Left::s#0
  [371] *(leftRotate::p#1+3) = move16Left::t#0
  to:move16Left::@return
move16Left::@return: scope:[move16Left]  from move16Left
  [372] return 
  to:@return

void rotateLeft(byte* volatile const rotateLeft::p , volatile byte rotateLeft::r)
rotateLeft: scope:[rotateLeft]  from leftRotate::@1 leftRotate::@10 leftRotate::@11
  kickasm( uses rotateLeft::p uses rotateLeft::r) {{ ldx #r
		!s:
			asl p+3
			rol p+2
			rol p+1
			rol p
			bcc !+
			lda p+3
			adc #0
		!:
			dex
			bne !s-
	 }}
  to:rotateLeft::@return
rotateLeft::@return: scope:[rotateLeft]  from rotateLeft
  [374] return 
  to:@return

void move8Left(byte* move8Left::p)
move8Left: scope:[move8Left]  from leftRotate::@2 leftRotate::@3
  [375] move8Left::t#0 = *leftRotate::p#1
  [376] *leftRotate::p#1 = *(leftRotate::p#1+1)
  [377] *(leftRotate::p#1+1) = *(leftRotate::p#1+2)
  [378] *(leftRotate::p#1+2) = *(leftRotate::p#1+3)
  [379] *(leftRotate::p#1+3) = move8Left::t#0
  to:move8Left::@return
move8Left::@return: scope:[move8Left]  from move8Left
  [380] return 
  to:@return

byte* cursorLocation()
cursorLocation: scope:[cursorLocation]  from putchar setcursor
  [381] cursorLocation::$3 = (word)*ROWCRS
  [382] cursorLocation::$4 = cursorLocation::$3 << 2
  [383] cursorLocation::$5 = cursorLocation::$4 + cursorLocation::$3
  [384] cursorLocation::$0 = cursorLocation::$5 << 3
  [385] cursorLocation::$1 = *SAVMSC + cursorLocation::$0
  [386] cursorLocation::return#1 = cursorLocation::$1 + *COLCRS
  to:cursorLocation::@return
cursorLocation::@return: scope:[cursorLocation]  from cursorLocation
  [387] return 
  to:@return

byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [388] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [389] uctoa_append::digit#2 = phi( uctoa_append/0, uctoa_append::@2/uctoa_append::digit#1 )
  [389] uctoa_append::value#2 = phi( uctoa_append/uctoa_append::value#0, uctoa_append::@2/uctoa_append::value#1 )
  [390] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [391] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2]
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [392] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [393] uctoa_append::digit#1 = ++ uctoa_append::digit#2
  [394] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0
  to:uctoa_append::@1

void printf_padding(byte printf_padding::pad , byte printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@7 printf_number_buffer::@9
  [395] printf_padding::pad#5 = phi( printf_number_buffer::@9/'0'at, printf_number_buffer::@7/' 'at )
  [395] printf_padding::length#4 = phi( printf_number_buffer::@9/printf_padding::length#1, printf_number_buffer::@7/printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [396] printf_padding::i#2 = phi( printf_padding/0, printf_padding::@3/printf_padding::i#1 )
  [397] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [398] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [399] cputc::c = printf_padding::pad#5
  [400] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [401] printf_padding::i#1 = ++ printf_padding::i#2
  to:printf_padding::@1
