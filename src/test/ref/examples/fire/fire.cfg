
(void()) main()
main: scope:[main]  from
  asm { sei  }
  [1] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  [2] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLACK
  [3] call fillscreen 
  to:main::@5
main::@5: scope:[main]  from main
  [4] phi()
  [5] call fillscreen 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [6] phi()
  [7] call fillscreen 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [8] phi()
  [9] call fillscreen 
  to:main::sid_rnd_init1
main::sid_rnd_init1: scope:[main]  from main::@7
  [10] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff
  [11] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE
  to:main::@2
main::@2: scope:[main]  from main::sid_rnd_init1
  [12] phi()
  [13] call makecharset 
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@4
  [14] phi()
  [15] call fire 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@1
  [16] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [17] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [18] call fire 
  to:main::toD0182
main::toD0182: scope:[main]  from main::@3
  [19] phi()
  to:main::@4
main::@4: scope:[main]  from main::toD0182
  [20] *((const nomodify byte*) D018) ← (const byte) main::toD0182_return#0
  to:main::@1

(void()) fire((byte*) fire::screenbase)
fire: scope:[fire]  from main::@1 main::@3
  [21] (byte*) fire::screen#0 ← phi( main::@1/(const byte*) SCREEN1 main::@3/(const byte*) SCREEN2 )
  [22] (byte*) fire::screen#12 ← (byte*) fire::screen#0
  to:fire::@1
fire::@1: scope:[fire]  from fire fire::@4
  [23] (byte*) fire::screen#4 ← phi( fire/(byte*) fire::screen#12 fire::@4/(byte*) fire::screen#2 )
  [23] (byte*) fire::buffer#4 ← phi( fire/(const byte*) BUFFER fire::@4/(byte*) fire::buffer#2 )
  [24] if((byte*) fire::buffer#4!=(const byte*) BUFFER+(word)(number) $18*(number) $28) goto fire::@2
  to:fire::@3
fire::@3: scope:[fire]  from fire::@1
  [25] (byte*) fire::screen#1 ← (byte*) fire::screen#0 + (word)(number) $18*(number) $28
  to:fire::@6
fire::@6: scope:[fire]  from fire::@3 fire::@7
  [26] (byte*) fire::screen#10 ← phi( fire::@3/(byte*) fire::screen#1 fire::@7/(byte*) fire::screen#3 )
  [26] (byte*) fire::buffer#10 ← phi( fire::@3/(const byte*) BUFFER+(word)(number) $18*(number) $28 fire::@7/(byte*) fire::buffer#3 )
  [27] if((byte*) fire::buffer#10!=(const byte*) BUFFER+(word)(number) $19*(number) $28) goto fire::sid_rnd1
  to:fire::@return
fire::@return: scope:[fire]  from fire::@6
  [28] return 
  to:@return
fire::sid_rnd1: scope:[fire]  from fire::@6
  [29] (byte) fire::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:fire::@7
fire::@7: scope:[fire]  from fire::sid_rnd1
  [30] (byte~) fire::$13 ← (byte) fire::sid_rnd1_return#0 >> (byte) 4
  [31] (byte~) fire::$14 ← (byte) $30 + (byte~) fire::$13
  [32] *((byte*) fire::buffer#10) ← (byte~) fire::$14
  [33] *((byte*) fire::screen#10) ← *((byte*) fire::buffer#10)
  [34] (byte*) fire::screen#3 ← ++ (byte*) fire::screen#10
  [35] (byte*) fire::buffer#3 ← ++ (byte*) fire::buffer#10
  to:fire::@6
fire::@2: scope:[fire]  from fire::@1
  [36] (byte~) fire::$4 ← *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) + *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1)
  [37] (byte~) fire::$5 ← (byte~) fire::$4 + *((byte*) fire::buffer#4 + (byte) $28)
  [38] (byte~) fire::$6 ← (byte~) fire::$5 + *((byte*) fire::buffer#4 + (byte) $29)
  [39] (byte) fire::c#0 ← (byte~) fire::$6 >> (byte) 2
  [40] if((byte) fire::c#0<(byte) 2+(byte) 1) goto fire::@4
  to:fire::@5
fire::@5: scope:[fire]  from fire::@2
  [41] (byte) fire::c#1 ← (byte) fire::c#0 - (byte) 3
  to:fire::@4
fire::@4: scope:[fire]  from fire::@2 fire::@5
  [42] (byte) fire::c#2 ← phi( fire::@2/(byte) fire::c#0 fire::@5/(byte) fire::c#1 )
  [43] *((byte*) fire::buffer#4) ← (byte) fire::c#2
  [44] *((byte*) fire::screen#4) ← *((byte*) fire::buffer#4)
  [45] (byte*) fire::screen#2 ← ++ (byte*) fire::screen#4
  [46] (byte*) fire::buffer#2 ← ++ (byte*) fire::buffer#4
  to:fire::@1

(void()) makecharset((byte*) makecharset::charset)
makecharset: scope:[makecharset]  from main::@2
  [47] phi()
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset makecharset::@2
  [48] (byte*) makecharset::font#2 ← phi( makecharset/(const byte*) CHARSET makecharset::@2/(byte*) makecharset::font#1 )
  [49] if((byte*) makecharset::font#2!=(const byte*) CHARSET+(byte)(number) 1*(number) 8) goto makecharset::@2
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@1 makecharset::@4
  [50] (byte*) makecharset::font1#2 ← phi( makecharset::@1/(const byte*) CHARSET+(word)(number) $40*(number) 8 makecharset::@4/(byte*) makecharset::font1#1 )
  [51] if((byte*) makecharset::font1#2!=(const byte*) CHARSET+(word)(number) $100*(number) 8) goto makecharset::@4
  to:makecharset::@5
makecharset::@5: scope:[makecharset]  from makecharset::@3 makecharset::@7
  [52] (byte) makecharset::c#2 ← phi( makecharset::@7/(byte) makecharset::c#1 makecharset::@3/(byte) 0 )
  [53] if((byte) makecharset::c#2<(byte) $40) goto makecharset::@6
  to:makecharset::@return
makecharset::@return: scope:[makecharset]  from makecharset::@5
  [54] return 
  to:@return
makecharset::@6: scope:[makecharset]  from makecharset::@10 makecharset::@5
  [55] (byte) makecharset::bc#6 ← phi( makecharset::@10/(byte) makecharset::bc#3 makecharset::@5/(byte) 0 )
  [55] (byte) makecharset::i#2 ← phi( makecharset::@10/(byte) makecharset::i#1 makecharset::@5/(byte) 0 )
  [56] if((byte) makecharset::i#2<(byte) 8) goto makecharset::@8
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@6
  [57] (byte) makecharset::c#1 ← ++ (byte) makecharset::c#2
  to:makecharset::@5
makecharset::@8: scope:[makecharset]  from makecharset::@11 makecharset::@6
  [58] (byte) makecharset::b#2 ← phi( makecharset::@6/(byte) 0 makecharset::@11/(byte) makecharset::b#6 )
  [58] (byte) makecharset::bc#3 ← phi( makecharset::@6/(byte) makecharset::bc#6 makecharset::@11/(byte) makecharset::bc#7 )
  [58] (byte) makecharset::ii#2 ← phi( makecharset::@6/(byte) 0 makecharset::@11/(byte) makecharset::ii#1 )
  [59] if((byte) makecharset::ii#2<(byte) 8) goto makecharset::@9
  to:makecharset::@10
makecharset::@10: scope:[makecharset]  from makecharset::@8
  [60] (word~) makecharset::$17 ← (word)(byte) makecharset::c#2
  [61] (word~) makecharset::$15 ← (word~) makecharset::$17 << (byte) 3
  [62] (word~) makecharset::$16 ← (word~) makecharset::$15 + (byte) makecharset::i#2
  [63] (byte*~) makecharset::$18 ← (const byte*) CHARSET+(byte)(number) 1*(number) 8 + (word~) makecharset::$16
  [64] *((byte*~) makecharset::$18) ← (byte) makecharset::b#2
  [65] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#2
  to:makecharset::@6
makecharset::@9: scope:[makecharset]  from makecharset::@8
  [66] (byte) makecharset::bc#1 ← (byte) makecharset::bc#3 + (byte) makecharset::c#2
  [67] if((byte) makecharset::bc#1<(byte) $3f+(byte) 1) goto makecharset::@11
  to:makecharset::@12
makecharset::@12: scope:[makecharset]  from makecharset::@9
  [68] (byte) makecharset::bc#2 ← (byte) makecharset::bc#1 - (byte) $40
  [69] (byte~) makecharset::$11 ← (byte) makecharset::i#2 & (byte) 1
  [70] (byte~) makecharset::$12 ← (byte) makecharset::ii#2 + (byte~) makecharset::$11
  [71] (byte~) makecharset::$13 ← (byte~) makecharset::$12 & (byte) 7
  [72] (byte) makecharset::b#1 ← (byte) makecharset::b#2 + *((const to_nomodify byte*) makecharset::bittab + (byte~) makecharset::$13)
  to:makecharset::@11
makecharset::@11: scope:[makecharset]  from makecharset::@12 makecharset::@9
  [73] (byte) makecharset::b#6 ← phi( makecharset::@9/(byte) makecharset::b#2 makecharset::@12/(byte) makecharset::b#1 )
  [73] (byte) makecharset::bc#7 ← phi( makecharset::@9/(byte) makecharset::bc#1 makecharset::@12/(byte) makecharset::bc#2 )
  [74] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2
  to:makecharset::@8
makecharset::@4: scope:[makecharset]  from makecharset::@3
  [75] *((byte*) makecharset::font1#2) ← (byte) $ff
  [76] (byte*) makecharset::font1#1 ← ++ (byte*) makecharset::font1#2
  to:makecharset::@3
makecharset::@2: scope:[makecharset]  from makecharset::@1
  [77] *((byte*) makecharset::font#2) ← (byte) 0
  [78] (byte*) makecharset::font#1 ← ++ (byte*) makecharset::font#2
  to:makecharset::@1

(void()) fillscreen((byte*) fillscreen::screen , (byte) fillscreen::fill)
fillscreen: scope:[fillscreen]  from main main::@5 main::@6 main::@7
  [79] (byte*) fillscreen::screen#6 ← phi( main/(const byte*) BUFFER main::@5/(const byte*) SCREEN1 main::@6/(const byte*) SCREEN2 main::@7/(const nomodify byte*) COLS )
  [79] (byte) fillscreen::fill#5 ← phi( main/(byte) 0 main::@5/(byte) 0 main::@6/(byte) 0 main::@7/(const nomodify byte) YELLOW )
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen fillscreen::@1
  [80] (word) fillscreen::i#2 ← phi( fillscreen/(word) 0 fillscreen::@1/(word) fillscreen::i#1 )
  [80] (byte*) fillscreen::screen#5 ← phi( fillscreen/(byte*) fillscreen::screen#6 fillscreen::@1/(byte*) fillscreen::screen#4 )
  [81] *((byte*) fillscreen::screen#5) ← (byte) fillscreen::fill#5
  [82] (byte*) fillscreen::screen#4 ← ++ (byte*) fillscreen::screen#5
  [83] (word) fillscreen::i#1 ← ++ (word) fillscreen::i#2
  [84] if((word) fillscreen::i#1!=(word) $3e8) goto fillscreen::@1
  to:fillscreen::@return
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  [85] return 
  to:@return
