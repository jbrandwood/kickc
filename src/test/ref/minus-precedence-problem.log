
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  *((char *)$400) = matrixSizeMask
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
__constant const char matrixSize = 8
__constant const char matrixSizeMask = (char)$ff-matrixSize-1

Adding number conversion cast (unumber) 1 in 
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) $ff in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $ff
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Simplifying constant integer cast $ff-matrixSize-1
Successful SSA optimization PassNCastSimplification
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *((char *) 1024) = matrixSizeMask
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((char *) 1024) = matrixSizeMask [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="minus-precedence-problem.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const matrixSize = 8
  .const matrixSizeMask = $ff-(matrixSize-1)
.segment Code
  // main
main: {
    // [0] *((char *) 1024) = matrixSizeMask -- _deref_pbuc1=vbuc2 
    lda #matrixSizeMask
    sta $400
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
__constant const char matrixSize = 8
__constant const char matrixSizeMask = $ff-matrixSize-1



FINAL ASSEMBLER
Score: 12

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="minus-precedence-problem.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const matrixSize = 8
  .const matrixSizeMask = $ff-(matrixSize-1)
.segment Code
  // main
main: {
    // *((unsigned char *)0x400) = matrixSizeMask
    // [0] *((char *) 1024) = matrixSizeMask -- _deref_pbuc1=vbuc2 
    lda #matrixSizeMask
    sta $400
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

