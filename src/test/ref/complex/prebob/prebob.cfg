@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call prepareBobs 
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  [6] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [7] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [8] *((const byte*) CIA2_PORT_A) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::vicSelectGfxBank1_@1
  [9] phi()
  to:main::@10
main::@10: scope:[main]  from main::toD0181
  [10] *((const byte*) D018) ← (const byte) main::toD0181_return#0
  [11] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@3
  [12] (byte) main::x#4 ← phi( main::@3/(byte) main::x#1 main::@10/(byte) 0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@12
  [13] (byte) main::y#2 ← phi( main::@1/(byte) 0 main::@12/(byte) main::y#1 )
  [14] (byte~) main::$30 ← (byte) main::x#4 << (byte) 1
  [15] (byte~) main::$31 ← (byte~) main::$30 + (byte) main::x#4
  [16] (byte~) main::$7 ← (byte~) main::$31 << (byte) 2
  [17] (byte) renderBob::xpos#0 ← (byte~) main::$7 + (byte) main::y#2
  [18] (byte~) main::$33 ← (byte) main::y#2 << (byte) 1
  [19] (byte~) main::$34 ← (byte~) main::$33 + (byte) main::y#2
  [20] (byte~) main::$9 ← (byte~) main::$34 << (byte) 3
  [21] (byte) renderBob::ypos#0 ← (byte~) main::$9 + (byte) main::x#4
  [22] call renderBob 
  to:main::@12
main::@12: scope:[main]  from main::@2
  [23] (byte) main::y#1 ← ++ (byte) main::y#2
  [24] if((byte) main::y#1!=(byte) 4) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@12
  [25] (byte) main::x#1 ← ++ (byte) main::x#4
  [26] if((byte) main::x#1!=(byte) 8) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@13 main::@3
  [27] phi()
  [28] call keyboard_key_pressed 
  [29] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0
  to:main::@13
main::@13: scope:[main]  from main::@4
  [30] (byte~) main::$14 ← (byte) keyboard_key_pressed::return#2
  [31] if((byte) 0==(byte~) main::$14) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@13 main::@14
  [32] phi()
  [33] call keyboard_key_pressed 
  [34] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0
  to:main::@14
main::@14: scope:[main]  from main::@5
  [35] (byte~) main::$16 ← (byte) keyboard_key_pressed::return#3
  [36] if((byte) 0!=(byte~) main::$16) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@14
  [37] phi()
  [38] call memset 
  to:main::@7
main::@7: scope:[main]  from main::@20 main::@6
  [39] (byte) main::sin_y_idx#9 ← phi( main::@6/(byte) $49 main::@20/(byte) main::sin_y_idx#1 )
  [39] (byte) main::sin_x_idx#9 ← phi( main::@6/(byte) 0 main::@20/(byte) main::sin_x_idx#1 )
  to:main::@8
main::@8: scope:[main]  from main::@7 main::@8
  [40] if(*((const byte*) RASTER)<(byte) $f8) goto main::@8
  to:main::@9
main::@9: scope:[main]  from main::@8
  [41] *((const byte*) BORDERCOL) ← ++ *((const byte*) BORDERCOL)
  [42] (byte) renderBob::xpos#1 ← *((const byte*) SIN_X_TAB+(byte)(number) $15*(number) 4 + (byte) main::sin_x_idx#9)
  [43] (byte) renderBob::ypos#1 ← *((const byte*) SIN_Y_TAB + (byte) main::sin_y_idx#9)
  [44] call renderBob 
  to:main::@15
main::@15: scope:[main]  from main::@9
  [45] (byte) renderBob::xpos#2 ← *((const byte*) SIN_X_TAB+(byte)(number) $13*(number) 3 + (byte) main::sin_x_idx#9)
  [46] (byte) renderBob::ypos#2 ← *((const byte*) SIN_Y_TAB+(byte)(number) $f*(number) 1 + (byte) main::sin_y_idx#9)
  [47] call renderBob 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [48] (byte) renderBob::xpos#3 ← *((const byte*) SIN_X_TAB+(byte)(number) $11*(number) 2 + (byte) main::sin_x_idx#9)
  [49] (byte) renderBob::ypos#3 ← *((const byte*) SIN_Y_TAB+(byte)(number) $11*(number) 2 + (byte) main::sin_y_idx#9)
  [50] call renderBob 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [51] (byte) renderBob::xpos#4 ← *((const byte*) SIN_X_TAB+(byte)(number) $f*(number) 1 + (byte) main::sin_x_idx#9)
  [52] (byte) renderBob::ypos#4 ← *((const byte*) SIN_Y_TAB+(byte)(number) $13*(number) 3 + (byte) main::sin_y_idx#9)
  [53] call renderBob 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [54] (byte) renderBob::xpos#5 ← *((const byte*) SIN_X_TAB + (byte) main::sin_x_idx#9)
  [55] (byte) renderBob::ypos#5 ← *((const byte*) SIN_Y_TAB+(byte)(number) $15*(number) 4 + (byte) main::sin_y_idx#9)
  [56] call renderBob 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [57] (byte) main::sin_x_idx#1 ← ++ (byte) main::sin_x_idx#9
  [58] (byte) main::sin_y_idx#1 ← ++ (byte) main::sin_y_idx#9
  [59] *((const byte*) BORDERCOL) ← -- *((const byte*) BORDERCOL)
  [60] call keyboard_key_pressed 
  [61] (byte) keyboard_key_pressed::return#4 ← (byte) keyboard_key_pressed::return#0
  to:main::@20
main::@20: scope:[main]  from main::@19
  [62] (byte~) main::$25 ← (byte) keyboard_key_pressed::return#4
  [63] if((byte) 0!=(byte~) main::$25) goto main::vicSelectGfxBank2
  to:main::@7
main::vicSelectGfxBank2: scope:[main]  from main::@20
  [64] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  to:main::vicSelectGfxBank2_toDd001
main::vicSelectGfxBank2_toDd001: scope:[main]  from main::vicSelectGfxBank2
  [65] phi()
  to:main::vicSelectGfxBank2_@1
main::vicSelectGfxBank2_@1: scope:[main]  from main::vicSelectGfxBank2_toDd001
  [66] *((const byte*) CIA2_PORT_A) ← (const byte) main::vicSelectGfxBank2_toDd001_return#0
  to:main::toD0182
main::toD0182: scope:[main]  from main::vicSelectGfxBank2_@1
  [67] phi()
  to:main::@11
main::@11: scope:[main]  from main::toD0182
  [68] *((const byte*) D018) ← (const byte) main::toD0182_return#0
  to:main::@return
main::@return: scope:[main]  from main::@11
  [69] return 
  to:@return

(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
keyboard_key_pressed: scope:[keyboard_key_pressed]  from main::@19 main::@4 main::@5
  [70] phi()
  [71] call keyboard_matrix_read 
  [72] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_key_pressed::@1
keyboard_key_pressed::@1: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  [73] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2
  [74] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte*) keyboard_matrix_col_bitmask+(const byte) keyboard_key_pressed::colidx#0)
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@1
  [75] return 
  to:@return

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  [76] *((const byte*) CIA1_PORT_A) ← *((const byte*) keyboard_matrix_row_bitmask+(const byte) keyboard_key_pressed::rowidx#0)
  [77] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [78] return 
  to:@return

(void()) renderBob((byte) renderBob::xpos , (byte) renderBob::ypos)
renderBob: scope:[renderBob]  from main::@15 main::@16 main::@17 main::@18 main::@2 main::@9
  [79] (byte) renderBob::ypos#6 ← phi( main::@2/(byte) renderBob::ypos#0 main::@9/(byte) renderBob::ypos#1 main::@15/(byte) renderBob::ypos#2 main::@16/(byte) renderBob::ypos#3 main::@17/(byte) renderBob::ypos#4 main::@18/(byte) renderBob::ypos#5 )
  [79] (byte) renderBob::xpos#6 ← phi( main::@2/(byte) renderBob::xpos#0 main::@9/(byte) renderBob::xpos#1 main::@15/(byte) renderBob::xpos#2 main::@16/(byte) renderBob::xpos#3 main::@17/(byte) renderBob::xpos#4 main::@18/(byte) renderBob::xpos#5 )
  [80] (byte) renderBob::x_char_offset#0 ← (byte) renderBob::xpos#6 >> (byte) 2
  [81] (byte) renderBob::y_char_offset#0 ← (byte) renderBob::ypos#6 >> (byte) 3
  [82] (word~) renderBob::$2 ← (word)(byte) renderBob::y_char_offset#0
  [83] (word~) renderBob::$10 ← (word~) renderBob::$2 << (byte) 2
  [84] (word~) renderBob::$11 ← (word~) renderBob::$10 + (word~) renderBob::$2
  [85] (word) renderBob::y_offset#0 ← (word~) renderBob::$11 << (byte) 3
  [86] (byte*~) renderBob::$4 ← (const byte*) BOB_SCREEN + (word) renderBob::y_offset#0
  [87] (byte*) renderBob::screen#0 ← (byte*~) renderBob::$4 + (byte) renderBob::x_char_offset#0
  [88] (byte~) renderBob::$6 ← (byte) renderBob::ypos#6 & (byte) 7
  [89] (byte~) renderBob::$7 ← (byte~) renderBob::$6 << (byte) 2
  [90] (byte~) renderBob::$8 ← (byte) renderBob::xpos#6 & (byte) 3
  [91] (byte) renderBob::bob_table_idx#0 ← (byte~) renderBob::$7 + (byte~) renderBob::$8
  [92] *((byte*) renderBob::screen#0) ← *((const byte*) BOB_TABLES + (byte) renderBob::bob_table_idx#0)
  [93] *((byte*) renderBob::screen#0 + (byte) $28) ← *((const byte*) BOB_TABLES+(byte) 1*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [94] *((byte*) renderBob::screen#0 + (byte) $50) ← *((const byte*) BOB_TABLES+(byte) 2*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [95] *((byte*) renderBob::screen#0 + (byte) 1) ← *((const byte*) BOB_TABLES+(byte) 3*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [96] *((byte*) renderBob::screen#0 + (byte) $29) ← *((const byte*) BOB_TABLES+(byte) 4*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [97] *((byte*) renderBob::screen#0 + (byte) $51) ← *((const byte*) BOB_TABLES+(byte) 5*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [98] *((byte*) renderBob::screen#0 + (byte) 2) ← *((const byte*) BOB_TABLES+(byte) 6*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [99] *((byte*) renderBob::screen#0 + (byte) $2a) ← *((const byte*) BOB_TABLES+(byte) 7*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [100] *((byte*) renderBob::screen#0 + (byte) $52) ← *((const byte*) BOB_TABLES+(byte) 8*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  to:renderBob::@return
renderBob::@return: scope:[renderBob]  from renderBob
  [101] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main::@10 main::@6
  [102] (void*) memset::str#3 ← phi( main::@6/(void*)(const byte*) BOB_SCREEN main::@10/(void*)(const byte*) BOB_SCREEN )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [103] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8
  [104] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [105] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [106] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [107] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [108] *((byte*) memset::dst#2) ← (byte) 0
  [109] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void()) prepareBobs()
prepareBobs: scope:[prepareBobs]  from main
  [110] phi()
  [111] call bobCharsetFindOrAddGlyph 
  to:prepareBobs::@1
prepareBobs::@1: scope:[prepareBobs]  from prepareBobs prepareBobs::@8
  [112] (byte) prepareBobs::bob_table_idx#6 ← phi( prepareBobs/(byte) 0 prepareBobs::@8/(byte) prepareBobs::bob_table_idx#12 )
  [112] (byte) bob_charset_next_id#14 ← phi( prepareBobs/(byte) bob_charset_next_id#16 prepareBobs::@8/(byte) bob_charset_next_id#29 )
  [112] (byte) prepareBobs::shift_y#2 ← phi( prepareBobs/(byte) 0 prepareBobs::@8/(byte) prepareBobs::shift_y#1 )
  [113] if((byte) prepareBobs::shift_y#2<(const byte) BOB_SHIFTS_Y) goto prepareBobs::@2
  to:prepareBobs::@return
prepareBobs::@return: scope:[prepareBobs]  from prepareBobs::@1
  [114] return 
  to:@return
prepareBobs::@2: scope:[prepareBobs]  from prepareBobs::@1 prepareBobs::@11
  [115] (byte) bob_charset_next_id#29 ← phi( prepareBobs::@1/(byte) bob_charset_next_id#14 prepareBobs::@11/(byte) bob_charset_next_id#21 )
  [115] (byte) prepareBobs::bob_table_idx#12 ← phi( prepareBobs::@1/(byte) prepareBobs::bob_table_idx#6 prepareBobs::@11/(byte) prepareBobs::bob_table_idx#1 )
  [115] (byte) prepareBobs::shift_x#2 ← phi( prepareBobs::@1/(byte) 0 prepareBobs::@11/(byte) prepareBobs::shift_x#1 )
  [116] if((byte) prepareBobs::shift_x#2<(const byte) BOB_SHIFTS_X) goto prepareBobs::@3
  to:prepareBobs::@4
prepareBobs::@4: scope:[prepareBobs]  from prepareBobs::@2
  [117] phi()
  [118] call shiftProtoBobDown 
  to:prepareBobs::@8
prepareBobs::@8: scope:[prepareBobs]  from prepareBobs::@4
  [119] (byte) prepareBobs::shift_y#1 ← ++ (byte) prepareBobs::shift_y#2
  to:prepareBobs::@1
prepareBobs::@3: scope:[prepareBobs]  from prepareBobs::@2
  [120] (byte*) prepareBobs::bob_table#0 ← (const byte*) BOB_TABLES + (byte) prepareBobs::bob_table_idx#12
  to:prepareBobs::@5
prepareBobs::@5: scope:[prepareBobs]  from prepareBobs::@3 prepareBobs::@9
  [121] (byte*) prepareBobs::bob_table#2 ← phi( prepareBobs::@9/(byte*) prepareBobs::bob_table#1 prepareBobs::@3/(byte*) prepareBobs::bob_table#0 )
  [121] (byte) bob_charset_next_id#21 ← phi( prepareBobs::@9/(byte) bob_charset_next_id#16 prepareBobs::@3/(byte) bob_charset_next_id#29 )
  [121] (byte*) prepareBobs::bob_glyph#2 ← phi( prepareBobs::@9/(byte*) prepareBobs::bob_glyph#1 prepareBobs::@3/(const byte*) PROTO_BOB )
  [121] (byte) prepareBobs::cell#2 ← phi( prepareBobs::@9/(byte) prepareBobs::cell#1 prepareBobs::@3/(byte) 0 )
  [122] if((byte) prepareBobs::cell#2<(byte) 9) goto prepareBobs::@6
  to:prepareBobs::@7
prepareBobs::@7: scope:[prepareBobs]  from prepareBobs::@5
  [123] (byte) prepareBobs::bob_table_idx#1 ← ++ (byte) prepareBobs::bob_table_idx#12
  [124] call shiftProtoBobRight 
  to:prepareBobs::@10
prepareBobs::@10: scope:[prepareBobs]  from prepareBobs::@7
  [125] phi()
  [126] call shiftProtoBobRight 
  to:prepareBobs::@11
prepareBobs::@11: scope:[prepareBobs]  from prepareBobs::@10
  [127] (byte) prepareBobs::shift_x#1 ← ++ (byte) prepareBobs::shift_x#2
  to:prepareBobs::@2
prepareBobs::@6: scope:[prepareBobs]  from prepareBobs::@5
  [128] (byte*) bobCharsetFindOrAddGlyph::bob_glyph#1 ← (byte*) prepareBobs::bob_glyph#2
  [129] call bobCharsetFindOrAddGlyph 
  [130] (byte) bobCharsetFindOrAddGlyph::return#1 ← (byte) bobCharsetFindOrAddGlyph::glyph_id#11
  to:prepareBobs::@9
prepareBobs::@9: scope:[prepareBobs]  from prepareBobs::@6
  [131] (byte~) prepareBobs::$5 ← (byte) bobCharsetFindOrAddGlyph::return#1
  [132] *((byte*) prepareBobs::bob_table#2) ← (byte~) prepareBobs::$5
  [133] (byte*) prepareBobs::bob_glyph#1 ← (byte*) prepareBobs::bob_glyph#2 + (byte) 8
  [134] (byte*) prepareBobs::bob_table#1 ← (byte*) prepareBobs::bob_table#2 + (const byte) BOB_SHIFTS_X*(const byte) BOB_SHIFTS_Y
  [135] (byte) prepareBobs::cell#1 ← ++ (byte) prepareBobs::cell#2
  to:prepareBobs::@5

(byte()) bobCharsetFindOrAddGlyph((byte*) bobCharsetFindOrAddGlyph::bob_glyph)
bobCharsetFindOrAddGlyph: scope:[bobCharsetFindOrAddGlyph]  from prepareBobs prepareBobs::@6
  [136] (byte*) bobCharsetFindOrAddGlyph::bob_glyph#10 ← phi( prepareBobs/(const byte*) PROTO_BOB+(byte) $30 prepareBobs::@6/(byte*) bobCharsetFindOrAddGlyph::bob_glyph#1 )
  [136] (byte) bob_charset_next_id#23 ← phi( prepareBobs/(byte) 0 prepareBobs::@6/(byte) bob_charset_next_id#21 )
  to:bobCharsetFindOrAddGlyph::@1
bobCharsetFindOrAddGlyph::@1: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph bobCharsetFindOrAddGlyph::@6
  [137] (byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 ← phi( bobCharsetFindOrAddGlyph/(const byte*) BOB_CHARSET bobCharsetFindOrAddGlyph::@6/(byte*) bobCharsetFindOrAddGlyph::glyph_cursor#1 )
  [137] (byte) bobCharsetFindOrAddGlyph::glyph_id#11 ← phi( bobCharsetFindOrAddGlyph/(byte) 0 bobCharsetFindOrAddGlyph::@6/(byte) bobCharsetFindOrAddGlyph::glyph_id#1 )
  [138] if((byte) bobCharsetFindOrAddGlyph::glyph_id#11!=(byte) bob_charset_next_id#23) goto bobCharsetFindOrAddGlyph::@2
  to:bobCharsetFindOrAddGlyph::@7
bobCharsetFindOrAddGlyph::@7: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@1 bobCharsetFindOrAddGlyph::@8
  [139] (byte) bobCharsetFindOrAddGlyph::i1#2 ← phi( bobCharsetFindOrAddGlyph::@8/(byte) bobCharsetFindOrAddGlyph::i1#1 bobCharsetFindOrAddGlyph::@1/(byte) 0 )
  [140] if((byte) bobCharsetFindOrAddGlyph::i1#2<(byte) 8) goto bobCharsetFindOrAddGlyph::@8
  to:bobCharsetFindOrAddGlyph::@9
bobCharsetFindOrAddGlyph::@9: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@7
  [141] (byte) bob_charset_next_id#8 ← ++ (byte) bob_charset_next_id#23
  to:bobCharsetFindOrAddGlyph::@return
bobCharsetFindOrAddGlyph::@return: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@5 bobCharsetFindOrAddGlyph::@9
  [142] (byte) bob_charset_next_id#16 ← phi( bobCharsetFindOrAddGlyph::@5/(byte) bob_charset_next_id#23 bobCharsetFindOrAddGlyph::@9/(byte) bob_charset_next_id#8 )
  [143] return 
  to:@return
bobCharsetFindOrAddGlyph::@8: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@7
  [144] *((byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 + (byte) bobCharsetFindOrAddGlyph::i1#2) ← *((byte*) bobCharsetFindOrAddGlyph::bob_glyph#10 + (byte) bobCharsetFindOrAddGlyph::i1#2)
  [145] (byte) bobCharsetFindOrAddGlyph::i1#1 ← ++ (byte) bobCharsetFindOrAddGlyph::i1#2
  to:bobCharsetFindOrAddGlyph::@7
bobCharsetFindOrAddGlyph::@2: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@1 bobCharsetFindOrAddGlyph::@4
  [146] (byte) bobCharsetFindOrAddGlyph::i#2 ← phi( bobCharsetFindOrAddGlyph::@1/(byte) 0 bobCharsetFindOrAddGlyph::@4/(byte) bobCharsetFindOrAddGlyph::i#1 )
  [147] if((byte) bobCharsetFindOrAddGlyph::i#2<(byte) 8) goto bobCharsetFindOrAddGlyph::@3
  to:bobCharsetFindOrAddGlyph::@5
bobCharsetFindOrAddGlyph::@3: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@2
  [148] if(*((byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 + (byte) bobCharsetFindOrAddGlyph::i#2)==*((byte*) bobCharsetFindOrAddGlyph::bob_glyph#10 + (byte) bobCharsetFindOrAddGlyph::i#2)) goto bobCharsetFindOrAddGlyph::@4
  to:bobCharsetFindOrAddGlyph::@5
bobCharsetFindOrAddGlyph::@5: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@2 bobCharsetFindOrAddGlyph::@3
  [149] (byte) bobCharsetFindOrAddGlyph::found#2 ← phi( bobCharsetFindOrAddGlyph::@3/(byte) 0 bobCharsetFindOrAddGlyph::@2/(byte) 1 )
  [150] if((byte) 0==(byte) bobCharsetFindOrAddGlyph::found#2) goto bobCharsetFindOrAddGlyph::@6
  to:bobCharsetFindOrAddGlyph::@return
bobCharsetFindOrAddGlyph::@6: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@5
  [151] (byte) bobCharsetFindOrAddGlyph::glyph_id#1 ← ++ (byte) bobCharsetFindOrAddGlyph::glyph_id#11
  [152] (byte*) bobCharsetFindOrAddGlyph::glyph_cursor#1 ← (byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 + (byte) 8
  to:bobCharsetFindOrAddGlyph::@1
bobCharsetFindOrAddGlyph::@4: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@3
  [153] (byte) bobCharsetFindOrAddGlyph::i#1 ← ++ (byte) bobCharsetFindOrAddGlyph::i#2
  to:bobCharsetFindOrAddGlyph::@2

(void()) shiftProtoBobRight()
shiftProtoBobRight: scope:[shiftProtoBobRight]  from prepareBobs::@10 prepareBobs::@7
  [154] phi()
  to:shiftProtoBobRight::@1
shiftProtoBobRight::@1: scope:[shiftProtoBobRight]  from shiftProtoBobRight shiftProtoBobRight::@6
  [155] (byte) shiftProtoBobRight::carry#2 ← phi( shiftProtoBobRight/(byte) 0 shiftProtoBobRight::@6/(byte) shiftProtoBobRight::carry#10 )
  [155] (byte) shiftProtoBobRight::j#3 ← phi( shiftProtoBobRight/(byte) 0 shiftProtoBobRight::@6/(byte) shiftProtoBobRight::j#10 )
  [155] (byte) shiftProtoBobRight::i#2 ← phi( shiftProtoBobRight/(byte) 0 shiftProtoBobRight::@6/(byte) shiftProtoBobRight::i#1 )
  [156] if((byte) shiftProtoBobRight::i#2<(byte)(number) 3*(number) 3*(number) 8) goto shiftProtoBobRight::@2
  to:shiftProtoBobRight::@return
shiftProtoBobRight::@return: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@1
  [157] return 
  to:@return
shiftProtoBobRight::@2: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@1
  [158] (byte~) shiftProtoBobRight::$1 ← *((const byte*) PROTO_BOB + (byte) shiftProtoBobRight::j#3) & (byte) 1
  [159] if((byte) 0!=(byte~) shiftProtoBobRight::$1) goto shiftProtoBobRight::@3
  to:shiftProtoBobRight::@4
shiftProtoBobRight::@3: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@2
  [160] phi()
  to:shiftProtoBobRight::@4
shiftProtoBobRight::@4: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@2 shiftProtoBobRight::@3
  [161] (byte) shiftProtoBobRight::carry#1 ← phi( shiftProtoBobRight::@3/(byte) $80 shiftProtoBobRight::@2/(byte) 0 )
  [162] (byte~) shiftProtoBobRight::$5 ← *((const byte*) PROTO_BOB + (byte) shiftProtoBobRight::j#3) >> (byte) 1
  [163] (byte~) shiftProtoBobRight::$6 ← (byte~) shiftProtoBobRight::$5 | (byte) shiftProtoBobRight::carry#2
  [164] *((const byte*) PROTO_BOB + (byte) shiftProtoBobRight::j#3) ← (byte~) shiftProtoBobRight::$6
  [165] if((byte) shiftProtoBobRight::j#3>=(byte) $30) goto shiftProtoBobRight::@5
  to:shiftProtoBobRight::@7
shiftProtoBobRight::@7: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@4
  [166] (byte) shiftProtoBobRight::j#2 ← (byte) shiftProtoBobRight::j#3 + (byte) $18
  to:shiftProtoBobRight::@6
shiftProtoBobRight::@6: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@5 shiftProtoBobRight::@7
  [167] (byte) shiftProtoBobRight::j#10 ← phi( shiftProtoBobRight::@7/(byte) shiftProtoBobRight::j#2 shiftProtoBobRight::@5/(byte) shiftProtoBobRight::j#1 )
  [168] (byte) shiftProtoBobRight::i#1 ← ++ (byte) shiftProtoBobRight::i#2
  [169] (byte) shiftProtoBobRight::carry#10 ← (byte) shiftProtoBobRight::carry#1
  to:shiftProtoBobRight::@1
shiftProtoBobRight::@5: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@4
  [170] (byte) shiftProtoBobRight::j#1 ← (byte) shiftProtoBobRight::j#3 - (byte) $2f
  to:shiftProtoBobRight::@6

(void()) shiftProtoBobDown()
shiftProtoBobDown: scope:[shiftProtoBobDown]  from prepareBobs::@4
  [171] phi()
  to:shiftProtoBobDown::@1
shiftProtoBobDown::@1: scope:[shiftProtoBobDown]  from shiftProtoBobDown shiftProtoBobDown::@2
  [172] (byte) shiftProtoBobDown::i#2 ← phi( shiftProtoBobDown/(byte) $17 shiftProtoBobDown::@2/(byte) shiftProtoBobDown::i#1 )
  [173] if((byte) shiftProtoBobDown::i#2>(byte) 0) goto shiftProtoBobDown::@2
  to:shiftProtoBobDown::@3
shiftProtoBobDown::@3: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@1
  [174] *((const byte*) PROTO_BOB) ← (byte) 0
  [175] *((const byte*) PROTO_BOB+(byte) $18) ← (byte) 0
  [176] *((const byte*) PROTO_BOB+(byte) $30) ← (byte) 0
  to:shiftProtoBobDown::@return
shiftProtoBobDown::@return: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@3
  [177] return 
  to:@return
shiftProtoBobDown::@2: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@1
  [178] *((const byte*) PROTO_BOB + (byte) shiftProtoBobDown::i#2) ← *((const byte*) PROTO_BOB+(byte) $17 + (byte) shiftProtoBobDown::i#2)
  [179] *((const byte*) PROTO_BOB+(byte) $18 + (byte) shiftProtoBobDown::i#2) ← *((const byte*) PROTO_BOB+(byte) $2f + (byte) shiftProtoBobDown::i#2)
  [180] *((const byte*) PROTO_BOB+(byte) $30 + (byte) shiftProtoBobDown::i#2) ← (byte) 0
  [181] (byte) shiftProtoBobDown::i#1 ← -- (byte) shiftProtoBobDown::i#2
  to:shiftProtoBobDown::@1
