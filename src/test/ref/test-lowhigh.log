Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) strlen::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_lines::str)
Warning! Adding boolean cast to non-boolean condition (byte) print_str_lines::ch
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_at::str)
Warning! Adding boolean cast to non-boolean sub-expression (byte) print_str_lines::ch
Identified constant variable (byte*) HEAP_TOP
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) memset::@7
Culled Empty Block (label) memset::@6
Culled Empty Block (label) memset::@8
Culled Empty Block (label) memset::@9
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @32
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) @37
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@13

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@4/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#2
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@5
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@5/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@5/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@5/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@5/(byte*) memset::dst#1 )
  (bool~) memset::$4 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@5
  to:memset::@1
memset::@5: scope:[memset]  from memset::@4
  (void*) memset::str#5 ← phi( memset::@4/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@4/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@4
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@13: scope:[]  from @begin
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@38

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@20
  (byte*) print_char_cursor#64 ← phi( main::@20/(byte*) print_char_cursor#29 )
  (byte*) print_line_cursor#17 ← phi( main::@20/(byte*) print_line_cursor#19 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#33 ← phi( print_ln/(byte*) print_char_cursor#64 print_ln::@1/(byte*) print_char_cursor#33 )
  (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#33
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#10 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#1 ← (byte*) print_line_cursor#10
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#34 ← phi( print_ln::@2/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#11 ← phi( print_ln::@2/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#34
  return 
  to:@return

(void()) print_word((word) print_word::w)
print_word: scope:[print_word]  from main::@11 main::@9 print_dword print_dword::@1
  (byte*) print_char_cursor#65 ← phi( main::@11/(byte*) print_char_cursor#20 main::@9/(byte*) print_char_cursor#18 print_dword/(byte*) print_char_cursor#66 print_dword::@1/(byte*) print_char_cursor#6 )
  (word) print_word::w#4 ← phi( main::@11/(word) print_word::w#3 main::@9/(word) print_word::w#2 print_dword/(word) print_word::w#0 print_dword::@1/(word) print_word::w#1 )
  (byte~) print_word::$0 ← > (word) print_word::w#4
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#5 ← phi( print_word/(word) print_word::w#4 )
  (byte*) print_char_cursor#35 ← phi( print_word/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#35
  (byte~) print_word::$2 ← < (word) print_word::w#5
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#36 ← phi( print_word::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#36
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#37 ← phi( print_word::@2/(byte*) print_char_cursor#4 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#37
  return 
  to:@return

(void()) print_dword((dword) print_dword::dw)
print_dword: scope:[print_dword]  from main::@2
  (byte*) print_char_cursor#66 ← phi( main::@2/(byte*) print_char_cursor#69 )
  (dword) print_dword::dw#1 ← phi( main::@2/(dword) print_dword::dw#0 )
  (word~) print_dword::$0 ← > (dword) print_dword::dw#1
  (word) print_word::w#0 ← (word~) print_dword::$0
  call print_word 
  to:print_dword::@1
print_dword::@1: scope:[print_dword]  from print_dword
  (dword) print_dword::dw#2 ← phi( print_dword/(dword) print_dword::dw#1 )
  (byte*) print_char_cursor#38 ← phi( print_dword/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#38
  (word~) print_dword::$2 ← < (dword) print_dword::dw#2
  (word) print_word::w#1 ← (word~) print_dword::$2
  call print_word 
  to:print_dword::@2
print_dword::@2: scope:[print_dword]  from print_dword::@1
  (byte*) print_char_cursor#39 ← phi( print_dword::@1/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#39
  to:print_dword::@return
print_dword::@return: scope:[print_dword]  from print_dword::@2
  (byte*) print_char_cursor#40 ← phi( print_dword::@2/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#40
  return 
  to:@return

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from main::@13 main::@15 main::@17 main::@19 print_word print_word::@1
  (byte*) print_char_cursor#67 ← phi( main::@13/(byte*) print_char_cursor#22 main::@15/(byte*) print_char_cursor#24 main::@17/(byte*) print_char_cursor#26 main::@19/(byte*) print_char_cursor#28 print_word/(byte*) print_char_cursor#65 print_word::@1/(byte*) print_char_cursor#3 )
  (byte) print_byte::b#6 ← phi( main::@13/(byte) print_byte::b#2 main::@15/(byte) print_byte::b#3 main::@17/(byte) print_byte::b#4 main::@19/(byte) print_byte::b#5 print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (number) 4
  (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#7 ← phi( print_byte/(byte) print_byte::b#6 )
  (byte*) print_char_cursor#41 ← phi( print_byte/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#41
  (number~) print_byte::$2 ← (byte) print_byte::b#7 & (number) $f
  (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#42 ← phi( print_byte::@1/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#42
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#43 ← phi( print_byte::@2/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#43
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@10 main::@12 main::@14 main::@16 main::@18 main::@8 print_byte print_byte::@1
  (byte*) print_char_cursor#44 ← phi( main::@10/(byte*) print_char_cursor#19 main::@12/(byte*) print_char_cursor#21 main::@14/(byte*) print_char_cursor#23 main::@16/(byte*) print_char_cursor#25 main::@18/(byte*) print_char_cursor#27 main::@8/(byte*) print_char_cursor#17 print_byte/(byte*) print_char_cursor#67 print_byte::@1/(byte*) print_char_cursor#9 )
  (byte) print_char::ch#8 ← phi( main::@10/(byte) print_char::ch#3 main::@12/(byte) print_char::ch#4 main::@14/(byte) print_char::ch#5 main::@16/(byte) print_char::ch#6 main::@18/(byte) print_char::ch#7 main::@8/(byte) print_char::ch#2 print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8
  (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#44
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#45 ← phi( print_char/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#45
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#3 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#1
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#2
  (byte*) print_char_cursor#14 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#46 ← phi( print_cls::@1/(byte*) print_char_cursor#14 )
  (byte*) print_line_cursor#12 ← phi( print_cls::@1/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#46
  return 
  to:@return

(void()) main()
main: scope:[main]  from @38
  (byte*) print_char_cursor#68 ← phi( @38/(byte*) print_char_cursor#71 )
  (byte*) print_line_cursor#18 ← phi( @38/(byte*) print_line_cursor#21 )
  (byte*) print_screen#3 ← phi( @38/(byte*) print_screen#4 )
  call print_cls 
  to:main::@7
main::@7: scope:[main]  from main
  (byte*) print_char_cursor#47 ← phi( main/(byte*) print_char_cursor#15 )
  (byte*) print_line_cursor#13 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#47
  (dword) main::dw#0 ← (dword) $12345678
  to:main::@1
main::@1: scope:[main]  from main::@21 main::@7
  (byte*) print_char_cursor#70 ← phi( main::@21/(byte*) print_char_cursor#30 main::@7/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#20 ← phi( main::@21/(byte*) print_line_cursor#6 main::@7/(byte*) print_line_cursor#5 )
  (dword) main::dw#2 ← phi( main::@21/(dword) main::dw#1 main::@7/(dword) main::dw#0 )
  (bool~) main::$1 ← (dword) main::dw#2 != (number) $12345690
  if((bool~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte*) print_line_cursor#34 ← phi( main::@1/(byte*) print_line_cursor#20 )
  (byte*) print_char_cursor#69 ← phi( main::@1/(byte*) print_char_cursor#70 )
  (dword) main::dw#3 ← phi( main::@1/(dword) main::dw#2 )
  (dword) main::dw2#0 ← (dword) main::dw#3
  (word~) main::$3 ← > (dword) main::dw#3
  (number~) main::$4 ← (word~) main::$3 + (number) $1111
  (number~) main::$32 ← (number~) main::$4
  (dword) main::dw2#1 ← (dword) main::dw2#0 hi= (number~) main::$32
  (word~) main::$6 ← < (dword) main::dw#3
  (number~) main::$7 ← (word~) main::$6 + (number) $1111
  (number~) main::$33 ← (number~) main::$7
  (dword) main::dw2#2 ← (dword) main::dw2#1 lo= (number~) main::$33
  (dword) print_dword::dw#0 ← (dword) main::dw2#2
  call print_dword 
  to:main::@8
main::@8: scope:[main]  from main::@2
  (dword) main::dw#17 ← phi( main::@2/(dword) main::dw#3 )
  (byte*) print_line_cursor#33 ← phi( main::@2/(byte*) print_line_cursor#34 )
  (dword) main::dw2#9 ← phi( main::@2/(dword) main::dw2#2 )
  (byte*) print_char_cursor#48 ← phi( main::@2/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#48
  (byte) print_char::ch#2 ← (byte) ' '
  call print_char 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (dword) main::dw#16 ← phi( main::@8/(dword) main::dw#17 )
  (byte*) print_line_cursor#32 ← phi( main::@8/(byte*) print_line_cursor#33 )
  (dword) main::dw2#3 ← phi( main::@8/(dword) main::dw2#9 )
  (byte*) print_char_cursor#49 ← phi( main::@8/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#49
  (word~) main::$10 ← > (dword) main::dw2#3
  (word) print_word::w#2 ← (word~) main::$10
  call print_word 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (dword) main::dw#15 ← phi( main::@9/(dword) main::dw#16 )
  (byte*) print_line_cursor#31 ← phi( main::@9/(byte*) print_line_cursor#32 )
  (dword) main::dw2#10 ← phi( main::@9/(dword) main::dw2#3 )
  (byte*) print_char_cursor#50 ← phi( main::@9/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#50
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (dword) main::dw#14 ← phi( main::@10/(dword) main::dw#15 )
  (byte*) print_line_cursor#30 ← phi( main::@10/(byte*) print_line_cursor#31 )
  (dword) main::dw2#4 ← phi( main::@10/(dword) main::dw2#10 )
  (byte*) print_char_cursor#51 ← phi( main::@10/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#51
  (word~) main::$13 ← < (dword) main::dw2#4
  (word) print_word::w#3 ← (word~) main::$13
  call print_word 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (dword) main::dw#13 ← phi( main::@11/(dword) main::dw#14 )
  (byte*) print_line_cursor#29 ← phi( main::@11/(byte*) print_line_cursor#30 )
  (dword) main::dw2#11 ← phi( main::@11/(dword) main::dw2#4 )
  (byte*) print_char_cursor#52 ← phi( main::@11/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#52
  (byte) print_char::ch#4 ← (byte) ' '
  call print_char 
  to:main::@13
main::@13: scope:[main]  from main::@12
  (dword) main::dw#12 ← phi( main::@12/(dword) main::dw#13 )
  (byte*) print_line_cursor#28 ← phi( main::@12/(byte*) print_line_cursor#29 )
  (dword) main::dw2#5 ← phi( main::@12/(dword) main::dw2#11 )
  (byte*) print_char_cursor#53 ← phi( main::@12/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#53
  (word~) main::$16 ← > (dword) main::dw2#5
  (byte~) main::$17 ← > (word~) main::$16
  (byte) print_byte::b#2 ← (byte~) main::$17
  call print_byte 
  to:main::@14
main::@14: scope:[main]  from main::@13
  (dword) main::dw#11 ← phi( main::@13/(dword) main::dw#12 )
  (byte*) print_line_cursor#27 ← phi( main::@13/(byte*) print_line_cursor#28 )
  (dword) main::dw2#12 ← phi( main::@13/(dword) main::dw2#5 )
  (byte*) print_char_cursor#54 ← phi( main::@13/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#54
  (byte) print_char::ch#5 ← (byte) ' '
  call print_char 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (dword) main::dw#10 ← phi( main::@14/(dword) main::dw#11 )
  (byte*) print_line_cursor#26 ← phi( main::@14/(byte*) print_line_cursor#27 )
  (dword) main::dw2#6 ← phi( main::@14/(dword) main::dw2#12 )
  (byte*) print_char_cursor#55 ← phi( main::@14/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#55
  (word~) main::$20 ← > (dword) main::dw2#6
  (byte~) main::$21 ← < (word~) main::$20
  (byte) print_byte::b#3 ← (byte~) main::$21
  call print_byte 
  to:main::@16
main::@16: scope:[main]  from main::@15
  (dword) main::dw#9 ← phi( main::@15/(dword) main::dw#10 )
  (byte*) print_line_cursor#25 ← phi( main::@15/(byte*) print_line_cursor#26 )
  (dword) main::dw2#13 ← phi( main::@15/(dword) main::dw2#6 )
  (byte*) print_char_cursor#56 ← phi( main::@15/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#56
  (byte) print_char::ch#6 ← (byte) ' '
  call print_char 
  to:main::@17
main::@17: scope:[main]  from main::@16
  (dword) main::dw#8 ← phi( main::@16/(dword) main::dw#9 )
  (byte*) print_line_cursor#24 ← phi( main::@16/(byte*) print_line_cursor#25 )
  (dword) main::dw2#7 ← phi( main::@16/(dword) main::dw2#13 )
  (byte*) print_char_cursor#57 ← phi( main::@16/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#57
  (word~) main::$24 ← < (dword) main::dw2#7
  (byte~) main::$25 ← > (word~) main::$24
  (byte) print_byte::b#4 ← (byte~) main::$25
  call print_byte 
  to:main::@18
main::@18: scope:[main]  from main::@17
  (dword) main::dw#7 ← phi( main::@17/(dword) main::dw#8 )
  (byte*) print_line_cursor#23 ← phi( main::@17/(byte*) print_line_cursor#24 )
  (dword) main::dw2#14 ← phi( main::@17/(dword) main::dw2#7 )
  (byte*) print_char_cursor#58 ← phi( main::@17/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#58
  (byte) print_char::ch#7 ← (byte) ' '
  call print_char 
  to:main::@19
main::@19: scope:[main]  from main::@18
  (dword) main::dw#6 ← phi( main::@18/(dword) main::dw#7 )
  (byte*) print_line_cursor#22 ← phi( main::@18/(byte*) print_line_cursor#23 )
  (dword) main::dw2#8 ← phi( main::@18/(dword) main::dw2#14 )
  (byte*) print_char_cursor#59 ← phi( main::@18/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#59
  (word~) main::$28 ← < (dword) main::dw2#8
  (byte~) main::$29 ← < (word~) main::$28
  (byte) print_byte::b#5 ← (byte~) main::$29
  call print_byte 
  to:main::@20
main::@20: scope:[main]  from main::@19
  (dword) main::dw#5 ← phi( main::@19/(dword) main::dw#6 )
  (byte*) print_line_cursor#19 ← phi( main::@19/(byte*) print_line_cursor#22 )
  (byte*) print_char_cursor#60 ← phi( main::@19/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#60
  call print_ln 
  to:main::@21
main::@21: scope:[main]  from main::@20
  (dword) main::dw#4 ← phi( main::@20/(dword) main::dw#5 )
  (byte*) print_char_cursor#61 ← phi( main::@20/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#14 ← phi( main::@20/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#61
  (dword) main::dw#1 ← ++ (dword) main::dw#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte*) print_char_cursor#62 ← phi( main::@1/(byte*) print_char_cursor#70 )
  (byte*) print_line_cursor#15 ← phi( main::@1/(byte*) print_line_cursor#20 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#62
  return 
  to:@return
@38: scope:[]  from @13
  (byte*) print_screen#4 ← phi( @13/(byte*) print_screen#0 )
  (byte*) print_char_cursor#71 ← phi( @13/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#21 ← phi( @13/(byte*) print_line_cursor#0 )
  call main 
  to:@39
@39: scope:[]  from @38
  (byte*) print_char_cursor#63 ← phi( @38/(byte*) print_char_cursor#31 )
  (byte*) print_line_cursor#16 ← phi( @38/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#63
  to:@end
@end: scope:[]  from @39

SYMBOL TABLE SSA
(label) @13
(label) @38
(label) @39
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(bool~) main::$1
(word~) main::$10
(word~) main::$13
(word~) main::$16
(byte~) main::$17
(word~) main::$20
(byte~) main::$21
(word~) main::$24
(byte~) main::$25
(word~) main::$28
(byte~) main::$29
(word~) main::$3
(number~) main::$32
(number~) main::$33
(number~) main::$4
(word~) main::$6
(number~) main::$7
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(dword) main::dw
(dword) main::dw#0
(dword) main::dw#1
(dword) main::dw#10
(dword) main::dw#11
(dword) main::dw#12
(dword) main::dw#13
(dword) main::dw#14
(dword) main::dw#15
(dword) main::dw#16
(dword) main::dw#17
(dword) main::dw#2
(dword) main::dw#3
(dword) main::dw#4
(dword) main::dw#5
(dword) main::dw#6
(dword) main::dw#7
(dword) main::dw#8
(dword) main::dw#9
(dword) main::dw2
(dword) main::dw2#0
(dword) main::dw2#1
(dword) main::dw2#10
(dword) main::dw2#11
(dword) main::dw2#12
(dword) main::dw2#13
(dword) main::dw2#14
(dword) main::dw2#2
(dword) main::dw2#3
(dword) main::dw2#4
(dword) main::dw2#5
(dword) main::dw2#6
(dword) main::dw2#7
(dword) main::dw2#8
(dword) main::dw2#9
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@5
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(byte) print_byte::b#5
(byte) print_byte::b#6
(byte) print_byte::b#7
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte) print_char::ch#6
(byte) print_char::ch#7
(byte) print_char::ch#8
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(void()) print_dword((dword) print_dword::dw)
(word~) print_dword::$0
(word~) print_dword::$2
(label) print_dword::@1
(label) print_dword::@2
(label) print_dword::@return
(dword) print_dword::dw
(dword) print_dword::dw#0
(dword) print_dword::dw#1
(dword) print_dword::dw#2
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3
(word) print_word::w#4
(word) print_word::w#5

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#7 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#7 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) $12345690 in (bool~) main::$1 ← (dword) main::dw#2 != (number) $12345690
Adding number conversion cast (unumber) $1111 in (number~) main::$4 ← (word~) main::$3 + (number) $1111
Adding number conversion cast (unumber) main::$4 in (number~) main::$4 ← (word~) main::$3 + (unumber)(number) $1111
Adding number conversion cast (unumber) main::$32 in (number~) main::$32 ← (unumber~) main::$4
Adding number conversion cast (unumber) $1111 in (number~) main::$7 ← (word~) main::$6 + (number) $1111
Adding number conversion cast (unumber) main::$7 in (number~) main::$7 ← (word~) main::$6 + (unumber)(number) $1111
Adding number conversion cast (unumber) main::$33 in (number~) main::$33 ← (unumber~) main::$7
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $12345690
Simplifying constant integer cast $1111
Simplifying constant integer cast $1111
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (dword) $12345690
Finalized unsigned number type (word) $1111
Finalized unsigned number type (word) $1111
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#7 & (byte) $f
Inferred type updated to word in (unumber~) main::$4 ← (word~) main::$3 + (word) $1111
Inferred type updated to word in (unumber~) main::$32 ← (word~) main::$4
Inferred type updated to word in (unumber~) main::$7 ← (word~) main::$6 + (word) $1111
Inferred type updated to word in (unumber~) main::$33 ← (word~) main::$7
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$3 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_line_cursor#0 = print_screen#0 print_char_cursor#0 print_line_cursor#21 print_char_cursor#71 print_screen#4 
Alias print_line_cursor#1 = print_ln::$0 print_line_cursor#10 print_char_cursor#1 print_line_cursor#11 print_char_cursor#34 print_line_cursor#2 print_char_cursor#2 
Alias print_byte::b#0 = print_word::$0 
Alias print_word::w#4 = print_word::w#5 
Alias print_char_cursor#3 = print_char_cursor#35 
Alias print_byte::b#1 = print_word::$2 
Alias print_char_cursor#36 = print_char_cursor#4 print_char_cursor#37 print_char_cursor#5 
Alias print_word::w#0 = print_dword::$0 
Alias print_dword::dw#1 = print_dword::dw#2 
Alias print_char_cursor#38 = print_char_cursor#6 
Alias print_word::w#1 = print_dword::$2 
Alias print_char_cursor#39 = print_char_cursor#7 print_char_cursor#40 print_char_cursor#8 
Alias print_byte::b#6 = print_byte::b#7 
Alias print_char_cursor#41 = print_char_cursor#9 
Alias print_char_cursor#10 = print_char_cursor#42 print_char_cursor#43 print_char_cursor#11 
Alias print_char_cursor#12 = print_char_cursor#45 print_char_cursor#13 
Alias print_line_cursor#12 = print_screen#2 print_screen#1 print_line_cursor#3 print_char_cursor#14 print_char_cursor#46 print_line_cursor#4 print_char_cursor#15 
Alias print_line_cursor#13 = print_line_cursor#5 
Alias print_char_cursor#16 = print_char_cursor#47 
Alias main::dw#10 = main::dw#3 main::dw#2 main::dw2#0 main::dw#17 main::dw#16 main::dw#15 main::dw#14 main::dw#13 main::dw#12 main::dw#11 main::dw#9 main::dw#8 main::dw#7 main::dw#6 main::dw#5 main::dw#4 
Alias print_char_cursor#31 = print_char_cursor#69 print_char_cursor#70 print_char_cursor#62 
Alias print_line_cursor#15 = print_line_cursor#34 print_line_cursor#20 print_line_cursor#33 print_line_cursor#32 print_line_cursor#31 print_line_cursor#30 print_line_cursor#29 print_line_cursor#28 print_line_cursor#27 print_line_cursor#26 print_line_cursor#25 print_line_cursor#24 print_line_cursor#23 print_line_cursor#22 print_line_cursor#19 print_line_cursor#7 
Alias main::$32 = main::$4 
Alias main::$33 = main::$7 
Alias main::dw2#10 = main::dw2#9 main::dw2#2 main::dw2#3 main::dw2#4 main::dw2#11 main::dw2#5 main::dw2#12 main::dw2#6 main::dw2#13 main::dw2#7 main::dw2#14 main::dw2#8 
Alias print_char_cursor#17 = print_char_cursor#48 
Alias print_char_cursor#18 = print_char_cursor#49 
Alias print_word::w#2 = main::$10 
Alias print_char_cursor#19 = print_char_cursor#50 
Alias print_char_cursor#20 = print_char_cursor#51 
Alias print_word::w#3 = main::$13 
Alias print_char_cursor#21 = print_char_cursor#52 
Alias print_char_cursor#22 = print_char_cursor#53 
Alias print_byte::b#2 = main::$17 
Alias print_char_cursor#23 = print_char_cursor#54 
Alias print_char_cursor#24 = print_char_cursor#55 
Alias print_byte::b#3 = main::$21 
Alias print_char_cursor#25 = print_char_cursor#56 
Alias print_char_cursor#26 = print_char_cursor#57 
Alias print_byte::b#4 = main::$25 
Alias print_char_cursor#27 = print_char_cursor#58 
Alias print_char_cursor#28 = print_char_cursor#59 
Alias print_byte::b#5 = main::$29 
Alias print_char_cursor#29 = print_char_cursor#60 
Alias print_line_cursor#14 = print_line_cursor#6 
Alias print_char_cursor#30 = print_char_cursor#61 
Alias print_line_cursor#16 = print_line_cursor#8 
Alias print_char_cursor#32 = print_char_cursor#63 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#64 (byte*) print_char_cursor#29
Identical Phi Values (byte*) print_char_cursor#33 (byte*) print_char_cursor#64
Identical Phi Values (byte*) print_char_cursor#3 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#36 (byte*) print_char_cursor#10
Identical Phi Values (dword) print_dword::dw#1 (dword) print_dword::dw#0
Identical Phi Values (byte*) print_char_cursor#66 (byte*) print_char_cursor#31
Identical Phi Values (byte*) print_char_cursor#38 (byte*) print_char_cursor#36
Identical Phi Values (byte*) print_char_cursor#39 (byte*) print_char_cursor#36
Identical Phi Values (byte*) print_char_cursor#41 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_screen#3
Identical Phi Values (byte*) print_screen#3 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#68 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#39
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#36
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#36
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#31
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@5
Simple Condition (bool~) print_ln::$1 [18] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1
Simple Condition (bool~) main::$1 [63] if((dword) main::dw#10!=(dword) $12345690) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const dword) main::dw#0 = $12345678
Constant (const byte) print_char::ch#2 = ' '
Constant (const byte) print_char::ch#3 = ' '
Constant (const byte) print_char::ch#4 = ' '
Constant (const byte) print_char::ch#5 = ' '
Constant (const byte) print_char::ch#6 = ' '
Constant (const byte) print_char::ch#7 = ' '
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$2 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const void*) memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$2 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$2+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const byte) print_char::ch#5
Inlining constant with var siblings (const byte) print_char::ch#6
Inlining constant with var siblings (const byte) print_char::ch#7
Inlining constant with var siblings (const dword) main::dw#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined print_char::ch#2 = (byte) ' '
Constant inlined memset::$2 = (byte*)(const void*) memset::str#0
Constant inlined print_char::ch#5 = (byte) ' '
Constant inlined print_char::ch#4 = (byte) ' '
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined print_char::ch#7 = (byte) ' '
Constant inlined main::dw#0 = (dword) $12345678
Constant inlined print_char::ch#6 = (byte) ' '
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @13
Adding NOP phi() at start of @38
Adding NOP phi() at start of @39
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_dword::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print_cls:7 print_dword:19 print_char:21 print_word:25 print_char:27 print_word:31 print_char:33 print_byte:38 print_char:40 print_byte:45 print_char:47 print_byte:52 print_char:54 print_byte:59 print_ln:61 
Calls in [print_byte] to print_char:78 print_char:83 
Calls in [print_word] to print_byte:94 print_byte:98 
Calls in [print_dword] to print_word:104 print_word:108 
Calls in [print_cls] to memset:112 

Created 11 initial phi equivalence classes
Coalesced [20] print_char_cursor#87 ← print_char_cursor#12
Coalesced [23] print_word::w#7 ← print_word::w#2
Coalesced [24] print_char_cursor#73 ← print_char_cursor#12
Coalesced (already) [26] print_char_cursor#82 ← print_char_cursor#12
Coalesced [29] print_word::w#6 ← print_word::w#3
Coalesced (already) [30] print_char_cursor#72 ← print_char_cursor#12
Coalesced (already) [32] print_char_cursor#83 ← print_char_cursor#12
Coalesced [36] print_byte::b#8 ← print_byte::b#2
Coalesced [37] print_char_cursor#76 ← print_char_cursor#12
Coalesced (already) [39] print_char_cursor#84 ← print_char_cursor#12
Coalesced [43] print_byte::b#9 ← print_byte::b#3
Coalesced (already) [44] print_char_cursor#77 ← print_char_cursor#12
Coalesced (already) [46] print_char_cursor#85 ← print_char_cursor#12
Coalesced [50] print_byte::b#10 ← print_byte::b#4
Coalesced (already) [51] print_char_cursor#78 ← print_char_cursor#12
Coalesced (already) [53] print_char_cursor#86 ← print_char_cursor#12
Coalesced [57] print_byte::b#11 ← print_byte::b#5
Coalesced (already) [58] print_char_cursor#79 ← print_char_cursor#12
Coalesced [63] main::dw#18 ← main::dw#1
Not coalescing [64] print_line_cursor#37 ← print_line_cursor#1
Coalesced [65] print_char_cursor#90 ← print_line_cursor#1
Coalesced [66] print_line_cursor#35 ← print_line_cursor#15
Not coalescing [72] print_line_cursor#36 ← print_line_cursor#1
Coalesced [76] print_char::ch#9 ← print_char::ch#0
Coalesced (already) [77] print_char_cursor#88 ← print_char_cursor#67
Coalesced [81] print_char::ch#10 ← print_char::ch#1
Coalesced (already) [82] print_char_cursor#89 ← print_char_cursor#12
Coalesced [92] print_byte::b#12 ← print_byte::b#0
Coalesced (already) [93] print_char_cursor#80 ← print_char_cursor#65
Coalesced [96] print_byte::b#13 ← print_byte::b#1
Coalesced (already) [97] print_char_cursor#81 ← print_char_cursor#12
Coalesced [102] print_word::w#8 ← print_word::w#0
Not coalescing [103] print_char_cursor#74 ← print_char_cursor#31
Coalesced [106] print_word::w#9 ← print_word::w#1
Coalesced (already) [107] print_char_cursor#75 ← print_char_cursor#12
Coalesced [123] memset::dst#4 ← memset::dst#1
Coalesced down to 8 phi equivalence classes
Culled Empty Block (label) @13
Culled Empty Block (label) @39
Culled Empty Block (label) main::@7
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_dword::@2
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block @38 to @1
Renumbering block memset::@4 to memset::@1
Renumbering block memset::@5 to memset::@2
Renumbering block print_ln::@3 to print_ln::@2
Renumbering block main::@8 to main::@3
Renumbering block main::@9 to main::@4
Renumbering block main::@10 to main::@5
Renumbering block main::@11 to main::@6
Renumbering block main::@12 to main::@7
Renumbering block main::@13 to main::@8
Renumbering block main::@14 to main::@9
Renumbering block main::@15 to main::@10
Renumbering block main::@16 to main::@11
Renumbering block main::@17 to main::@12
Renumbering block main::@18 to main::@13
Renumbering block main::@19 to main::@14
Renumbering block main::@20 to main::@15
Renumbering block main::@21 to main::@16
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@16
  [6] (byte*) print_char_cursor#31 ← phi( main::@16/(byte*) print_line_cursor#1 main/(byte*) 1024 )
  [6] (byte*) print_line_cursor#15 ← phi( main::@16/(byte*) print_line_cursor#37 main/(byte*) 1024 )
  [6] (dword) main::dw#10 ← phi( main::@16/(dword) main::dw#1 main/(dword) $12345678 )
  [7] if((dword) main::dw#10!=(dword) $12345690) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [9] (word~) main::$3 ← > (dword) main::dw#10
  [10] (word~) main::$32 ← (word~) main::$3 + (word) $1111
  [11] (dword) main::dw2#1 ← (dword) main::dw#10 hi= (word~) main::$32
  [12] (word~) main::$6 ← < (dword) main::dw#10
  [13] (word~) main::$33 ← (word~) main::$6 + (word) $1111
  [14] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33
  [15] (dword) print_dword::dw#0 ← (dword) main::dw2#10
  [16] call print_dword 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [17] phi()
  [18] call print_char 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [19] (word) print_word::w#2 ← > (dword) main::dw2#10
  [20] call print_word 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [21] phi()
  [22] call print_char 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [23] (word) print_word::w#3 ← < (dword) main::dw2#10
  [24] call print_word 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [25] phi()
  [26] call print_char 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [27] (word~) main::$16 ← > (dword) main::dw2#10
  [28] (byte) print_byte::b#2 ← > (word~) main::$16
  [29] call print_byte 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [30] phi()
  [31] call print_char 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [32] (word~) main::$20 ← > (dword) main::dw2#10
  [33] (byte) print_byte::b#3 ← < (word~) main::$20
  [34] call print_byte 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [35] phi()
  [36] call print_char 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [37] (word~) main::$24 ← < (dword) main::dw2#10
  [38] (byte) print_byte::b#4 ← > (word~) main::$24
  [39] call print_byte 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [40] phi()
  [41] call print_char 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [42] (word~) main::$28 ← < (dword) main::dw2#10
  [43] (byte) print_byte::b#5 ← < (word~) main::$28
  [44] call print_byte 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [45] phi()
  [46] call print_ln 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [47] (dword) main::dw#1 ← ++ (dword) main::dw#10
  [48] (byte*) print_line_cursor#37 ← (byte*) print_line_cursor#1
  to:main::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@15
  [49] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@2
  [50] (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#15 print_ln::@2/(byte*) print_line_cursor#36 )
  [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28
  [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [53] return 
  to:@return
print_ln::@2: scope:[print_ln]  from print_ln::@1
  [54] (byte*) print_line_cursor#36 ← (byte*) print_line_cursor#1
  to:print_ln::@1

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from main::@10 main::@12 main::@14 main::@8 print_word print_word::@1
  [55] (byte*) print_char_cursor#67 ← phi( main::@8/(byte*) print_char_cursor#12 main::@10/(byte*) print_char_cursor#12 main::@12/(byte*) print_char_cursor#12 main::@14/(byte*) print_char_cursor#12 print_word/(byte*) print_char_cursor#65 print_word::@1/(byte*) print_char_cursor#12 )
  [55] (byte) print_byte::b#6 ← phi( main::@8/(byte) print_byte::b#2 main::@10/(byte) print_byte::b#3 main::@12/(byte) print_byte::b#4 main::@14/(byte) print_byte::b#5 print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4
  [57] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_byte::$0)
  [58] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f
  [60] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_byte::$2)
  [61] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [62] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@11 main::@13 main::@3 main::@5 main::@7 main::@9 print_byte print_byte::@1
  [63] (byte*) print_char_cursor#44 ← phi( main::@5/(byte*) print_char_cursor#12 main::@7/(byte*) print_char_cursor#12 main::@9/(byte*) print_char_cursor#12 main::@11/(byte*) print_char_cursor#12 main::@13/(byte*) print_char_cursor#12 main::@3/(byte*) print_char_cursor#12 print_byte/(byte*) print_char_cursor#67 print_byte::@1/(byte*) print_char_cursor#12 )
  [63] (byte) print_char::ch#8 ← phi( main::@5/(byte) ' ' main::@7/(byte) ' ' main::@9/(byte) ' ' main::@11/(byte) ' ' main::@13/(byte) ' ' main::@3/(byte) ' ' print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8
  [65] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#44
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [66] return 
  to:@return

(void()) print_word((word) print_word::w)
print_word: scope:[print_word]  from main::@4 main::@6 print_dword print_dword::@1
  [67] (byte*) print_char_cursor#65 ← phi( main::@6/(byte*) print_char_cursor#12 main::@4/(byte*) print_char_cursor#12 print_dword/(byte*) print_char_cursor#74 print_dword::@1/(byte*) print_char_cursor#12 )
  [67] (word) print_word::w#4 ← phi( main::@6/(word) print_word::w#3 main::@4/(word) print_word::w#2 print_dword/(word) print_word::w#0 print_dword::@1/(word) print_word::w#1 )
  [68] (byte) print_byte::b#0 ← > (word) print_word::w#4
  [69] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [70] (byte) print_byte::b#1 ← < (word) print_word::w#4
  [71] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [72] return 
  to:@return

(void()) print_dword((dword) print_dword::dw)
print_dword: scope:[print_dword]  from main::@2
  [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0
  [74] (byte*) print_char_cursor#74 ← (byte*) print_char_cursor#31
  [75] call print_word 
  to:print_dword::@1
print_dword::@1: scope:[print_dword]  from print_dword
  [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0
  [77] call print_word 
  to:print_dword::@return
print_dword::@return: scope:[print_dword]  from print_dword::@1
  [78] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [79] phi()
  [80] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [81] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [82] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [83] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [84] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [85] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [86] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [87] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(word~) main::$16 202.0
(word~) main::$20 202.0
(word~) main::$24 202.0
(word~) main::$28 202.0
(word~) main::$3 202.0
(word~) main::$32 202.0
(word~) main::$33 202.0
(word~) main::$6 202.0
(dword) main::dw
(dword) main::dw#1 101.0
(dword) main::dw#10 15.15
(dword) main::dw2
(dword) main::dw2#1 67.33333333333333
(dword) main::dw2#10 28.857142857142858
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 20002.0
(byte*) memset::dst#2 13334.666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 200002.0
(byte~) print_byte::$2 200002.0
(byte) print_byte::b
(byte) print_byte::b#0 20002.0
(byte) print_byte::b#1 20002.0
(byte) print_byte::b#2 202.0
(byte) print_byte::b#3 202.0
(byte) print_byte::b#4 202.0
(byte) print_byte::b#5 202.0
(byte) print_byte::b#6 55102.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 200002.0
(byte) print_char::ch#1 200002.0
(byte) print_char::ch#8 1200003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 24244.34
(byte*) print_char_cursor#31 110.19999999999999
(byte*) print_char_cursor#44 1100305.0
(byte*) print_char_cursor#65 6102.5
(byte*) print_char_cursor#67 40135.666666666664
(byte*) print_char_cursor#74 2002.0
(void()) print_cls()
(void()) print_dword((dword) print_dword::dw)
(dword) print_dword::dw
(dword) print_dword::dw#0 525.75
(byte*) print_line_cursor
(byte*) print_line_cursor#1 50034.16666666666
(byte*) print_line_cursor#15 27.549999999999997
(byte*) print_line_cursor#36 200002.0
(byte*) print_line_cursor#37 202.0
(byte*) print_line_cursor#9 201003.0
(void()) print_ln()
(byte*) print_screen
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#0 1001.0
(word) print_word::w#1 2002.0
(word) print_word::w#2 202.0
(word) print_word::w#3 202.0
(word) print_word::w#4 7402.0

Initial phi equivalence classes
[ main::dw#10 main::dw#1 ]
[ print_char_cursor#31 print_line_cursor#1 ]
[ print_line_cursor#9 print_line_cursor#15 print_line_cursor#37 print_line_cursor#36 ]
[ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#8 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#74 ]
[ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ]
[ memset::dst#2 memset::dst#1 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable main::$32 to live range equivalence class [ main::$32 ]
Added variable main::dw2#1 to live range equivalence class [ main::dw2#1 ]
Added variable main::$6 to live range equivalence class [ main::$6 ]
Added variable main::$33 to live range equivalence class [ main::$33 ]
Added variable main::dw2#10 to live range equivalence class [ main::dw2#10 ]
Added variable print_dword::dw#0 to live range equivalence class [ print_dword::dw#0 ]
Added variable main::$16 to live range equivalence class [ main::$16 ]
Added variable main::$20 to live range equivalence class [ main::$20 ]
Added variable main::$24 to live range equivalence class [ main::$24 ]
Added variable main::$28 to live range equivalence class [ main::$28 ]
Added variable print_byte::$0 to live range equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to live range equivalence class [ print_byte::$2 ]
Complete equivalence classes
[ main::dw#10 main::dw#1 ]
[ print_char_cursor#31 print_line_cursor#1 ]
[ print_line_cursor#9 print_line_cursor#15 print_line_cursor#37 print_line_cursor#36 ]
[ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#8 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#74 ]
[ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ]
[ memset::dst#2 memset::dst#1 ]
[ main::$3 ]
[ main::$32 ]
[ main::dw2#1 ]
[ main::$6 ]
[ main::$33 ]
[ main::dw2#10 ]
[ print_dword::dw#0 ]
[ main::$16 ]
[ main::$20 ]
[ main::$24 ]
[ main::$28 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
Allocated zp[4]:2 [ main::dw#10 main::dw#1 ]
Allocated zp[2]:6 [ print_char_cursor#31 print_line_cursor#1 ]
Allocated zp[2]:8 [ print_line_cursor#9 print_line_cursor#15 print_line_cursor#37 print_line_cursor#36 ]
Allocated zp[1]:10 [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
Allocated zp[1]:11 [ print_char::ch#8 print_char::ch#0 print_char::ch#1 ]
Allocated zp[2]:12 [ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#74 ]
Allocated zp[2]:14 [ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ]
Allocated zp[2]:16 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:18 [ main::$3 ]
Allocated zp[2]:20 [ main::$32 ]
Allocated zp[4]:22 [ main::dw2#1 ]
Allocated zp[2]:26 [ main::$6 ]
Allocated zp[2]:28 [ main::$33 ]
Allocated zp[4]:30 [ main::dw2#10 ]
Allocated zp[4]:34 [ print_dword::dw#0 ]
Allocated zp[2]:38 [ main::$16 ]
Allocated zp[2]:40 [ main::$20 ]
Allocated zp[2]:42 [ main::$24 ]
Allocated zp[2]:44 [ main::$28 ]
Allocated zp[1]:46 [ print_byte::$0 ]
Allocated zp[1]:47 [ print_byte::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 6
  .label print_char_cursor = $c
  .label print_char_cursor_1 = 6
  .label print_line_cursor_1 = 8
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __3 = $12
    .label __6 = $1a
    .label __16 = $26
    .label __20 = $28
    .label __24 = $2a
    .label __28 = $2c
    .label __32 = $14
    .label __33 = $1c
    .label dw2 = $16
    .label dw = 2
    .label dw2_1 = $1e
    // [5] call print_cls 
    // [79] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte*) print_char_cursor#31 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor_1
    lda #>$400
    sta.z print_char_cursor_1+1
    // [6] phi (byte*) print_line_cursor#15 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor_1
    lda #>$400
    sta.z print_line_cursor_1+1
    // [6] phi (dword) main::dw#10 = (dword) $12345678 [phi:main->main::@1#2] -- vduz1=vduc1 
    lda #<$12345678
    sta.z dw
    lda #>$12345678
    sta.z dw+1
    lda #<$12345678>>$10
    sta.z dw+2
    lda #>$12345678>>$10
    sta.z dw+3
    jmp __b1
    // main::@1
  __b1:
    // [7] if((dword) main::dw#10!=(dword) $12345690) goto main::@2 -- vduz1_neq_vduc1_then_la1 
    lda.z dw+3
    cmp #>$12345690>>$10
    bne __b2
    lda.z dw+2
    cmp #<$12345690>>$10
    bne __b2
    lda.z dw+1
    cmp #>$12345690
    bne __b2
    lda.z dw
    cmp #<$12345690
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    // main::@2
  __b2:
    // [9] (word~) main::$3 ← > (dword) main::dw#10 -- vwuz1=_hi_vduz2 
    lda.z dw+2
    sta.z __3
    lda.z dw+3
    sta.z __3+1
    // [10] (word~) main::$32 ← (word~) main::$3 + (word) $1111 -- vwuz1=vwuz2_plus_vwuc1 
    lda.z __3
    clc
    adc #<$1111
    sta.z __32
    lda.z __3+1
    adc #>$1111
    sta.z __32+1
    // [11] (dword) main::dw2#1 ← (dword) main::dw#10 hi= (word~) main::$32 -- vduz1=vduz2_sethi_vwuz3 
    lda.z dw
    sta.z dw2
    lda.z dw+1
    sta.z dw2+1
    lda.z __32
    sta.z dw2+2
    lda.z __32+1
    sta.z dw2+3
    // [12] (word~) main::$6 ← < (dword) main::dw#10 -- vwuz1=_lo_vduz2 
    lda.z dw
    sta.z __6
    lda.z dw+1
    sta.z __6+1
    // [13] (word~) main::$33 ← (word~) main::$6 + (word) $1111 -- vwuz1=vwuz2_plus_vwuc1 
    lda.z __6
    clc
    adc #<$1111
    sta.z __33
    lda.z __6+1
    adc #>$1111
    sta.z __33+1
    // [14] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33 -- vduz1=vduz2_setlo_vwuz3 
    lda.z __33
    sta.z dw2_1
    lda.z __33+1
    sta.z dw2_1+1
    lda.z dw2+2
    sta.z dw2_1+2
    lda.z dw2+3
    sta.z dw2_1+3
    // [15] (dword) print_dword::dw#0 ← (dword) main::dw2#10 -- vduz1=vduz2 
    lda.z dw2_1
    sta.z print_dword.dw
    lda.z dw2_1+1
    sta.z print_dword.dw+1
    lda.z dw2_1+2
    sta.z print_dword.dw+2
    lda.z dw2_1+3
    sta.z print_dword.dw+3
    // [16] call print_dword 
    // Test set/get low word of dword
    jsr print_dword
    // [17] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [18] call print_char 
    // [63] phi from main::@3 to print_char [phi:main::@3->print_char]
  print_char_from___b3:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@3->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // main::@4
  __b4:
    // [19] (word) print_word::w#2 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda.z dw2_1+2
    sta.z print_word.w
    lda.z dw2_1+3
    sta.z print_word.w+1
    // [20] call print_word 
    // [67] phi from main::@4 to print_word [phi:main::@4->print_word]
  print_word_from___b4:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@4->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#2 [phi:main::@4->print_word#1] -- register_copy 
    jsr print_word
    // [21] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [22] call print_char 
  // Test get high word of dword
    // [63] phi from main::@5 to print_char [phi:main::@5->print_char]
  print_char_from___b5:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@5->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@5->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b6
    // main::@6
  __b6:
    // [23] (word) print_word::w#3 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda.z dw2_1
    sta.z print_word.w
    lda.z dw2_1+1
    sta.z print_word.w+1
    // [24] call print_word 
    // [67] phi from main::@6 to print_word [phi:main::@6->print_word]
  print_word_from___b6:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@6->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#3 [phi:main::@6->print_word#1] -- register_copy 
    jsr print_word
    // [25] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [26] call print_char 
  // Test get low word of dword
    // [63] phi from main::@7 to print_char [phi:main::@7->print_char]
  print_char_from___b7:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@7->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@7->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b8
    // main::@8
  __b8:
    // [27] (word~) main::$16 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda.z dw2_1+2
    sta.z __16
    lda.z dw2_1+3
    sta.z __16+1
    // [28] (byte) print_byte::b#2 ← > (word~) main::$16 -- vbuz1=_hi_vwuz2 
    lda.z __16+1
    sta.z print_byte.b
    // [29] call print_byte 
    // [55] phi from main::@8 to print_byte [phi:main::@8->print_byte]
  print_byte_from___b8:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@8->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#2 [phi:main::@8->print_byte#1] -- register_copy 
    jsr print_byte
    // [30] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [31] call print_char 
  // Test get high high byte of dword
    // [63] phi from main::@9 to print_char [phi:main::@9->print_char]
  print_char_from___b9:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@9->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@9->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b10
    // main::@10
  __b10:
    // [32] (word~) main::$20 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda.z dw2_1+2
    sta.z __20
    lda.z dw2_1+3
    sta.z __20+1
    // [33] (byte) print_byte::b#3 ← < (word~) main::$20 -- vbuz1=_lo_vwuz2 
    lda.z __20
    sta.z print_byte.b
    // [34] call print_byte 
    // [55] phi from main::@10 to print_byte [phi:main::@10->print_byte]
  print_byte_from___b10:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@10->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#3 [phi:main::@10->print_byte#1] -- register_copy 
    jsr print_byte
    // [35] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [36] call print_char 
  // Test get low high byte of dword
    // [63] phi from main::@11 to print_char [phi:main::@11->print_char]
  print_char_from___b11:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@11->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@11->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b12
    // main::@12
  __b12:
    // [37] (word~) main::$24 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda.z dw2_1
    sta.z __24
    lda.z dw2_1+1
    sta.z __24+1
    // [38] (byte) print_byte::b#4 ← > (word~) main::$24 -- vbuz1=_hi_vwuz2 
    lda.z __24+1
    sta.z print_byte.b
    // [39] call print_byte 
    // [55] phi from main::@12 to print_byte [phi:main::@12->print_byte]
  print_byte_from___b12:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@12->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#4 [phi:main::@12->print_byte#1] -- register_copy 
    jsr print_byte
    // [40] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [41] call print_char 
  // Test get high low byte of dword
    // [63] phi from main::@13 to print_char [phi:main::@13->print_char]
  print_char_from___b13:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@13->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@13->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b14
    // main::@14
  __b14:
    // [42] (word~) main::$28 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda.z dw2_1
    sta.z __28
    lda.z dw2_1+1
    sta.z __28+1
    // [43] (byte) print_byte::b#5 ← < (word~) main::$28 -- vbuz1=_lo_vwuz2 
    lda.z __28
    sta.z print_byte.b
    // [44] call print_byte 
    // [55] phi from main::@14 to print_byte [phi:main::@14->print_byte]
  print_byte_from___b14:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@14->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#5 [phi:main::@14->print_byte#1] -- register_copy 
    jsr print_byte
    // [45] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
  __b15_from___b14:
    jmp __b15
    // main::@15
  __b15:
    // [46] call print_ln 
  // Test get low low byte of dword
    // [49] phi from main::@15 to print_ln [phi:main::@15->print_ln]
  print_ln_from___b15:
    jsr print_ln
    jmp __b16
    // main::@16
  __b16:
    // [47] (dword) main::dw#1 ← ++ (dword) main::dw#10 -- vduz1=_inc_vduz1 
    inc.z dw
    bne !+
    inc.z dw+1
    bne !+
    inc.z dw+2
    bne !+
    inc.z dw+3
  !:
    // [48] (byte*) print_line_cursor#37 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_line_cursor_1
    lda.z print_line_cursor+1
    sta.z print_line_cursor_1+1
    // [6] phi from main::@16 to main::@1 [phi:main::@16->main::@1]
  __b1_from___b16:
    // [6] phi (byte*) print_char_cursor#31 = (byte*) print_line_cursor#1 [phi:main::@16->main::@1#0] -- register_copy 
    // [6] phi (byte*) print_line_cursor#15 = (byte*) print_line_cursor#37 [phi:main::@16->main::@1#1] -- register_copy 
    // [6] phi (dword) main::dw#10 = (dword) main::dw#1 [phi:main::@16->main::@1#2] -- register_copy 
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [50] phi from print_ln print_ln::@2 to print_ln::@1 [phi:print_ln/print_ln::@2->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b2:
    // [50] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#15 [phi:print_ln/print_ln::@2->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor_1
    sta.z print_line_cursor
    lda #0
    adc.z print_line_cursor_1+1
    sta.z print_line_cursor+1
    // [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b2
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b2
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [53] return 
    rts
    // print_ln::@2
  __b2:
    // [54] (byte*) print_line_cursor#36 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_line_cursor_1
    lda.z print_line_cursor+1
    sta.z print_line_cursor_1+1
    jmp __b1_from___b2
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zp($a) b)
print_byte: {
    .label __0 = $2e
    .label __2 = $2f
    .label b = $a
    // [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [57] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [58] call print_char 
  // Table of hexadecimal digits
    // [63] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#67 [phi:print_byte->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_byte::@1
  __b1:
    // [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [60] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [61] call print_char 
    // [63] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from___b1:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_byte::@return
  __breturn:
    // [62] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zp($b) ch)
print_char: {
    .label ch = $b
    // [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [65] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#44 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [66] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zp($e) w)
print_word: {
    .label w = $e
    // [68] (byte) print_byte::b#0 ← > (word) print_word::w#4 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_byte.b
    // [69] call print_byte 
    // [55] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#65 [phi:print_word->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp __b1
    // print_word::@1
  __b1:
    // [70] (byte) print_byte::b#1 ← < (word) print_word::w#4 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_byte.b
    // [71] call print_byte 
    // [55] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from___b1:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp __breturn
    // print_word::@return
  __breturn:
    // [72] return 
    rts
}
  // print_dword
// Print a dword as HEX
// print_dword(dword zp($22) dw)
print_dword: {
    .label dw = $22
    // [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0 -- vwuz1=_hi_vduz2 
    lda.z dw+2
    sta.z print_word.w
    lda.z dw+3
    sta.z print_word.w+1
    // [74] (byte*) print_char_cursor#74 ← (byte*) print_char_cursor#31 -- pbuz1=pbuz2 
    lda.z print_char_cursor_1
    sta.z print_char_cursor
    lda.z print_char_cursor_1+1
    sta.z print_char_cursor+1
    // [75] call print_word 
    // [67] phi from print_dword to print_word [phi:print_dword->print_word]
  print_word_from_print_dword:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#74 [phi:print_dword->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#0 [phi:print_dword->print_word#1] -- register_copy 
    jsr print_word
    jmp __b1
    // print_dword::@1
  __b1:
    // [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0 -- vwuz1=_lo_vduz2 
    lda.z dw
    sta.z print_word.w
    lda.z dw+1
    sta.z print_word.w+1
    // [77] call print_word 
    // [67] phi from print_dword::@1 to print_word [phi:print_dword::@1->print_word]
  print_word_from___b1:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:print_dword::@1->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#1 [phi:print_dword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp __breturn
    // print_dword::@return
  __breturn:
    // [78] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [80] call memset 
    // [82] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [81] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $10
    // [83] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [83] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [84] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [85] return 
    rts
    // memset::@2
  __b2:
    // [86] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [87] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [83] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [83] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[2]:18 [ main::$3 ] has ALU potential.
Equivalence Class zp[2]:26 [ main::$6 ] has ALU potential.
Statement [7] if((dword) main::dw#10!=(dword) $12345690) goto main::@2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 ] { }  ) always clobbers reg byte a 
Statement [10] (word~) main::$32 ← (word~) main::$3 + (word) $1111 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::$32 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::$32 ] { { print_dword::dw#0 = main::dw2#10 } }  ) always clobbers reg byte a 
Statement [11] (dword) main::dw2#1 ← (dword) main::dw#10 hi= (word~) main::$32 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#1 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#1 ] { { print_dword::dw#0 = main::dw2#10 } }  ) always clobbers reg byte a 
Statement [13] (word~) main::$33 ← (word~) main::$6 + (word) $1111 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#1 main::$33 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#1 main::$33 ] { { print_dword::dw#0 = main::dw2#10 } }  ) always clobbers reg byte a 
Statement [14] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#10 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#10 ] { { print_dword::dw#0 = main::dw2#10 } }  ) always clobbers reg byte a 
Statement [15] (dword) print_dword::dw#0 ← (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#10 print_dword::dw#0 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#10 print_dword::dw#0 ] { { print_dword::dw#0 = main::dw2#10 } }  ) always clobbers reg byte a 
Statement [19] (word) print_word::w#2 ← > (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#2 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#2 print_char_cursor#12 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 } }  ) always clobbers reg byte a 
Statement [23] (word) print_word::w#3 ← < (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#3 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#3 print_char_cursor#12 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 } }  ) always clobbers reg byte a 
Statement [27] (word~) main::$16 ← > (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$16 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$16 print_char_cursor#12 ] { { print_byte::b#2 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 } }  ) always clobbers reg byte a 
Statement [32] (word~) main::$20 ← > (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$20 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$20 print_char_cursor#12 ] { { print_byte::b#3 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 } }  ) always clobbers reg byte a 
Statement [37] (word~) main::$24 ← < (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$24 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$24 print_char_cursor#12 ] { { print_byte::b#4 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 } }  ) always clobbers reg byte a 
Statement [42] (word~) main::$28 ← < (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::$28 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::$28 print_char_cursor#12 ] { { print_byte::b#5 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 } }  ) always clobbers reg byte a 
Statement [48] (byte*) print_line_cursor#37 ← (byte*) print_line_cursor#1 [ main::dw#1 print_line_cursor#37 print_line_cursor#1 ] ( main:2 [ main::dw#1 print_line_cursor#37 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:46 [ main::dw#10 print_line_cursor#1 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:46 [ main::dw#10 print_line_cursor#1 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [54] (byte*) print_line_cursor#36 ← (byte*) print_line_cursor#1 [ print_line_cursor#36 print_char_cursor#12 ] ( main:2::print_ln:46 [ main::dw#10 print_line_cursor#36 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4 [ print_byte::b#6 print_char_cursor#67 print_byte::$0 ] ( main:2::print_byte:29 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_byte::b#2 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:34 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_byte::b#3 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:39 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_byte::b#4 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:44 [ main::dw#10 print_line_cursor#15 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_byte::b#5 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:20::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:24::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#44 = print_char_cursor#65 print_char_cursor#74 print_char_cursor#67 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:20::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:24::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } { print_byte::b#1 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
Statement [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_byte:29 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_byte::b#2 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:34 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_byte::b#3 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:39 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_byte::b#4 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:44 [ main::dw#10 print_line_cursor#15 print_char_cursor#12 print_byte::$2 ] { { print_byte::b#5 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:20::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:24::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_word::w#4 print_char_cursor#12 print_byte::$2 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 print_char_cursor#67 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_dword:16::print_word:77::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:20::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:24::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_char_cursor#12 print_byte::$2 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } { print_byte::b#1 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  ) always clobbers reg byte a 
Statement [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8 [ print_char_cursor#44 ] ( main:2::print_char:18 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_char:22 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_char:26 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_char:31 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_char:36 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_char:41 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_byte:29::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_byte::b#2 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:34::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_byte::b#3 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:39::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_byte::b#4 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:44::print_char:58 [ main::dw#10 print_line_cursor#15 print_byte::b#6 print_char_cursor#44 ] { { print_byte::b#5 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:20::print_byte:69::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:24::print_byte:69::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:69::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#44 = print_char_cursor#65 print_char_cursor#74 print_char_cursor#67 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:69::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:20::print_byte:71::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:24::print_byte:71::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:71::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_byte::b#6 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } { print_byte::b#1 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:71::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:29::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_byte::b#2 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:34::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_byte::b#3 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:39::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_byte::b#4 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:44::print_char:61 [ main::dw#10 print_line_cursor#15 print_char_cursor#44 ] { { print_byte::b#5 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:20::print_byte:69::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#44 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:24::print_byte:69::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#44 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:69::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_word::w#4 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 print_char_cursor#67 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_dword:16::print_word:77::print_byte:69::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:20::print_byte:71::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:24::print_byte:71::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:71::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } { print_byte::b#1 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:71::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:10 [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
Statement [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0 [ print_char_cursor#31 print_dword::dw#0 print_word::w#0 ] ( main:2::print_dword:16 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#31 print_dword::dw#0 print_word::w#0 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } }  ) always clobbers reg byte a 
Statement [74] (byte*) print_char_cursor#74 ← (byte*) print_char_cursor#31 [ print_dword::dw#0 print_word::w#0 print_char_cursor#74 ] ( main:2::print_dword:16 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_word::w#0 print_char_cursor#74 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } }  ) always clobbers reg byte a 
Statement [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0 [ print_char_cursor#12 print_word::w#1 ] ( main:2::print_dword:16 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_word::w#1 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 } }  ) always clobbers reg byte a 
Statement [84] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:80 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [86] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:80 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [7] if((dword) main::dw#10!=(dword) $12345690) goto main::@2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 ] { }  ) always clobbers reg byte a 
Statement [10] (word~) main::$32 ← (word~) main::$3 + (word) $1111 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::$32 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::$32 ] { { print_dword::dw#0 = main::dw2#10 } }  ) always clobbers reg byte a 
Statement [11] (dword) main::dw2#1 ← (dword) main::dw#10 hi= (word~) main::$32 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#1 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#1 ] { { print_dword::dw#0 = main::dw2#10 } }  ) always clobbers reg byte a 
Statement [13] (word~) main::$33 ← (word~) main::$6 + (word) $1111 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#1 main::$33 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#1 main::$33 ] { { print_dword::dw#0 = main::dw2#10 } }  ) always clobbers reg byte a 
Statement [14] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#10 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#10 ] { { print_dword::dw#0 = main::dw2#10 } }  ) always clobbers reg byte a 
Statement [15] (dword) print_dword::dw#0 ← (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#10 print_dword::dw#0 ] ( main:2 [ main::dw#10 print_line_cursor#15 print_char_cursor#31 main::dw2#10 print_dword::dw#0 ] { { print_dword::dw#0 = main::dw2#10 } }  ) always clobbers reg byte a 
Statement [19] (word) print_word::w#2 ← > (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#2 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#2 print_char_cursor#12 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 } }  ) always clobbers reg byte a 
Statement [23] (word) print_word::w#3 ← < (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#3 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#3 print_char_cursor#12 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 } }  ) always clobbers reg byte a 
Statement [27] (word~) main::$16 ← > (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$16 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$16 print_char_cursor#12 ] { { print_byte::b#2 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 } }  ) always clobbers reg byte a 
Statement [32] (word~) main::$20 ← > (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$20 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$20 print_char_cursor#12 ] { { print_byte::b#3 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 } }  ) always clobbers reg byte a 
Statement [37] (word~) main::$24 ← < (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$24 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::dw2#10 main::$24 print_char_cursor#12 ] { { print_byte::b#4 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 } }  ) always clobbers reg byte a 
Statement [42] (word~) main::$28 ← < (dword) main::dw2#10 [ main::dw#10 print_line_cursor#15 main::$28 print_char_cursor#12 ] ( main:2 [ main::dw#10 print_line_cursor#15 main::$28 print_char_cursor#12 ] { { print_byte::b#5 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 } }  ) always clobbers reg byte a 
Statement [48] (byte*) print_line_cursor#37 ← (byte*) print_line_cursor#1 [ main::dw#1 print_line_cursor#37 print_line_cursor#1 ] ( main:2 [ main::dw#1 print_line_cursor#37 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:46 [ main::dw#10 print_line_cursor#1 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:46 [ main::dw#10 print_line_cursor#1 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [54] (byte*) print_line_cursor#36 ← (byte*) print_line_cursor#1 [ print_line_cursor#36 print_char_cursor#12 ] ( main:2::print_ln:46 [ main::dw#10 print_line_cursor#36 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4 [ print_byte::b#6 print_char_cursor#67 print_byte::$0 ] ( main:2::print_byte:29 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_byte::b#2 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:34 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_byte::b#3 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:39 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_byte::b#4 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:44 [ main::dw#10 print_line_cursor#15 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_byte::b#5 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:20::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:24::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#44 = print_char_cursor#65 print_char_cursor#74 print_char_cursor#67 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:20::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:24::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } { print_byte::b#1 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  ) always clobbers reg byte a 
Statement [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_byte:29 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_byte::b#2 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:34 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_byte::b#3 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:39 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_byte::b#4 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:44 [ main::dw#10 print_line_cursor#15 print_char_cursor#12 print_byte::$2 ] { { print_byte::b#5 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:20::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:24::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_word::w#4 print_char_cursor#12 print_byte::$2 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 print_char_cursor#67 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_dword:16::print_word:77::print_byte:69 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:20::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:24::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_char_cursor#12 print_byte::$2 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } { print_byte::b#1 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:71 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_byte::$2 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  ) always clobbers reg byte a 
Statement [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8 [ print_char_cursor#44 ] ( main:2::print_char:18 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_char:22 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_char:26 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_char:31 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_char:36 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_char:41 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_byte:29::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_byte::b#2 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:34::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_byte::b#3 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:39::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_byte::b#4 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:44::print_char:58 [ main::dw#10 print_line_cursor#15 print_byte::b#6 print_char_cursor#44 ] { { print_byte::b#5 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:20::print_byte:69::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:24::print_byte:69::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:69::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#44 = print_char_cursor#65 print_char_cursor#74 print_char_cursor#67 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:69::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:20::print_byte:71::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_word:24::print_byte:71::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:71::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_byte::b#6 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } { print_byte::b#1 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:71::print_char:58 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#0 = print_char::ch#8 } }  main:2::print_byte:29::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_byte::b#2 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:34::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_byte::b#3 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:39::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_byte::b#4 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_byte:44::print_char:61 [ main::dw#10 print_line_cursor#15 print_char_cursor#44 ] { { print_byte::b#5 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:20::print_byte:69::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#44 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:24::print_byte:69::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#44 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:69::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_word::w#4 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 print_char_cursor#67 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } { print_char_cursor#12 = print_char_cursor#44 } }  main:2::print_dword:16::print_word:77::print_byte:69::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_word::w#4 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#0 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:20::print_byte:71::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_word::w#2 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_word:24::print_byte:71::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_word::w#3 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:75::print_byte:71::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } { print_byte::b#1 = print_byte::b#6 } { print_char_cursor#12 = print_char_cursor#67 print_char_cursor#44 } { print_char::ch#1 = print_char::ch#8 } }  main:2::print_dword:16::print_word:77::print_byte:71::print_char:61 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#44 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 print_char_cursor#67 print_char_cursor#44 } { print_byte::b#1 = print_byte::b#6 } { print_char::ch#1 = print_char::ch#8 } }  ) always clobbers reg byte y 
Statement [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0 [ print_char_cursor#31 print_dword::dw#0 print_word::w#0 ] ( main:2::print_dword:16 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#31 print_dword::dw#0 print_word::w#0 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } }  ) always clobbers reg byte a 
Statement [74] (byte*) print_char_cursor#74 ← (byte*) print_char_cursor#31 [ print_dword::dw#0 print_word::w#0 print_char_cursor#74 ] ( main:2::print_dword:16 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_dword::dw#0 print_word::w#0 print_char_cursor#74 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#0 = print_word::w#4 } { print_char_cursor#65 = print_char_cursor#74 } }  ) always clobbers reg byte a 
Statement [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0 [ print_char_cursor#12 print_word::w#1 ] ( main:2::print_dword:16 [ main::dw#10 print_line_cursor#15 main::dw2#10 print_char_cursor#12 print_word::w#1 ] { { print_dword::dw#0 = main::dw2#10 } { print_word::w#1 = print_word::w#4 } { print_char_cursor#12 = print_char_cursor#65 } }  ) always clobbers reg byte a 
Statement [84] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:80 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [86] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:80 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[4]:2 [ main::dw#10 main::dw#1 ] : zp[4]:2 , 
Potential registers zp[2]:6 [ print_char_cursor#31 print_line_cursor#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ print_line_cursor#9 print_line_cursor#15 print_line_cursor#37 print_line_cursor#36 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ] : zp[1]:10 , reg byte x , 
Potential registers zp[1]:11 [ print_char::ch#8 print_char::ch#0 print_char::ch#1 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:12 [ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#74 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ memset::dst#2 memset::dst#1 ] : zp[2]:16 , 
Potential registers zp[2]:18 [ main::$3 ] : zp[2]:18 , reg byte alu , 
Potential registers zp[2]:20 [ main::$32 ] : zp[2]:20 , 
Potential registers zp[4]:22 [ main::dw2#1 ] : zp[4]:22 , 
Potential registers zp[2]:26 [ main::$6 ] : zp[2]:26 , reg byte alu , 
Potential registers zp[2]:28 [ main::$33 ] : zp[2]:28 , 
Potential registers zp[4]:30 [ main::dw2#10 ] : zp[4]:30 , 
Potential registers zp[4]:34 [ print_dword::dw#0 ] : zp[4]:34 , 
Potential registers zp[2]:38 [ main::$16 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ main::$20 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ main::$24 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ main::$28 ] : zp[2]:44 , 
Potential registers zp[1]:46 [ print_byte::$0 ] : zp[1]:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ print_byte::$2 ] : zp[1]:47 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 1,172,789.51: zp[2]:12 [ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#74 ] 401,234.55: zp[2]:8 [ print_line_cursor#9 print_line_cursor#15 print_line_cursor#37 print_line_cursor#36 ] 50,144.37: zp[2]:6 [ print_char_cursor#31 print_line_cursor#1 ] 
Uplift Scope [print_char] 1,600,007: zp[1]:11 [ print_char::ch#8 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [print_byte] 200,002: zp[1]:46 [ print_byte::$0 ] 200,002: zp[1]:47 [ print_byte::$2 ] 95,914: zp[1]:10 [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ] 
Uplift Scope [memset] 33,336.67: zp[2]:16 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [print_word] 10,809: zp[2]:14 [ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ] 
Uplift Scope [main] 202: zp[2]:18 [ main::$3 ] 202: zp[2]:20 [ main::$32 ] 202: zp[2]:26 [ main::$6 ] 202: zp[2]:28 [ main::$33 ] 202: zp[2]:38 [ main::$16 ] 202: zp[2]:40 [ main::$20 ] 202: zp[2]:42 [ main::$24 ] 202: zp[2]:44 [ main::$28 ] 116.15: zp[4]:2 [ main::dw#10 main::dw#1 ] 67.33: zp[4]:22 [ main::dw2#1 ] 28.86: zp[4]:30 [ main::dw2#10 ] 
Uplift Scope [print_dword] 525.75: zp[4]:34 [ print_dword::dw#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 

Uplifting [] best 10524 combination zp[2]:12 [ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#74 ] zp[2]:8 [ print_line_cursor#9 print_line_cursor#15 print_line_cursor#37 print_line_cursor#36 ] zp[2]:6 [ print_char_cursor#31 print_line_cursor#1 ] 
Uplifting [print_char] best 10497 combination reg byte a [ print_char::ch#8 print_char::ch#0 print_char::ch#1 ] 
Uplifting [print_byte] best 10359 combination reg byte a [ print_byte::$0 ] reg byte x [ print_byte::$2 ] reg byte x [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ] 
Uplifting [memset] best 10359 combination zp[2]:16 [ memset::dst#2 memset::dst#1 ] 
Uplifting [print_word] best 10359 combination zp[2]:14 [ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ] 
Uplifting [main] best 10359 combination zp[2]:18 [ main::$3 ] zp[2]:20 [ main::$32 ] zp[2]:26 [ main::$6 ] zp[2]:28 [ main::$33 ] zp[2]:38 [ main::$16 ] zp[2]:40 [ main::$20 ] zp[2]:42 [ main::$24 ] zp[2]:44 [ main::$28 ] zp[4]:2 [ main::dw#10 main::dw#1 ] zp[4]:22 [ main::dw2#1 ] zp[4]:30 [ main::dw2#10 ] 
Uplifting [print_dword] best 10359 combination zp[4]:34 [ print_dword::dw#0 ] 
Uplifting [RADIX] best 10359 combination 
Uplifting [print_ln] best 10359 combination 
Uplifting [print_cls] best 10359 combination 
Coalescing zero page register [ zp[2]:18 [ main::$3 ] ] with [ zp[2]:20 [ main::$32 ] ] - score: 1
Coalescing zero page register [ zp[4]:22 [ main::dw2#1 ] ] with [ zp[4]:30 [ main::dw2#10 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ main::$6 ] ] with [ zp[2]:28 [ main::$33 ] ] - score: 1
Coalescing zero page register [ zp[4]:22 [ main::dw2#1 main::dw2#10 ] ] with [ zp[4]:34 [ print_dword::dw#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:14 [ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ] ]
Coalescing zero page register [ zp[2]:18 [ main::$3 main::$32 ] ] with [ zp[2]:16 [ memset::dst#2 memset::dst#1 print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ] ]
Allocated (was zp[2]:12) zp[2]:10 [ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#74 ]
Allocated (was zp[2]:18) zp[2]:12 [ main::$3 main::$32 memset::dst#2 memset::dst#1 print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ]
Allocated (was zp[4]:22) zp[4]:14 [ main::dw2#1 main::dw2#10 print_dword::dw#0 ]
Allocated (was zp[2]:26) zp[2]:18 [ main::$6 main::$33 ]
Allocated (was zp[2]:38) zp[2]:20 [ main::$16 ]
Allocated (was zp[2]:40) zp[2]:22 [ main::$20 ]
Allocated (was zp[2]:42) zp[2]:24 [ main::$24 ]
Allocated (was zp[2]:44) zp[2]:26 [ main::$28 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 6
  .label print_char_cursor = $a
  .label print_char_cursor_1 = 6
  .label print_line_cursor_1 = 8
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __3 = $c
    .label __6 = $12
    .label __16 = $14
    .label __20 = $16
    .label __24 = $18
    .label __28 = $1a
    .label __32 = $c
    .label __33 = $12
    .label dw2 = $e
    .label dw = 2
    // [5] call print_cls 
    // [79] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte*) print_char_cursor#31 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor_1
    lda #>$400
    sta.z print_char_cursor_1+1
    // [6] phi (byte*) print_line_cursor#15 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor_1
    lda #>$400
    sta.z print_line_cursor_1+1
    // [6] phi (dword) main::dw#10 = (dword) $12345678 [phi:main->main::@1#2] -- vduz1=vduc1 
    lda #<$12345678
    sta.z dw
    lda #>$12345678
    sta.z dw+1
    lda #<$12345678>>$10
    sta.z dw+2
    lda #>$12345678>>$10
    sta.z dw+3
    jmp __b1
    // main::@1
  __b1:
    // [7] if((dword) main::dw#10!=(dword) $12345690) goto main::@2 -- vduz1_neq_vduc1_then_la1 
    lda.z dw+3
    cmp #>$12345690>>$10
    bne __b2
    lda.z dw+2
    cmp #<$12345690>>$10
    bne __b2
    lda.z dw+1
    cmp #>$12345690
    bne __b2
    lda.z dw
    cmp #<$12345690
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    // main::@2
  __b2:
    // [9] (word~) main::$3 ← > (dword) main::dw#10 -- vwuz1=_hi_vduz2 
    lda.z dw+2
    sta.z __3
    lda.z dw+3
    sta.z __3+1
    // [10] (word~) main::$32 ← (word~) main::$3 + (word) $1111 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda.z __32
    adc #<$1111
    sta.z __32
    lda.z __32+1
    adc #>$1111
    sta.z __32+1
    // [11] (dword) main::dw2#1 ← (dword) main::dw#10 hi= (word~) main::$32 -- vduz1=vduz2_sethi_vwuz3 
    lda.z dw
    sta.z dw2
    lda.z dw+1
    sta.z dw2+1
    lda.z __32
    sta.z dw2+2
    lda.z __32+1
    sta.z dw2+3
    // [12] (word~) main::$6 ← < (dword) main::dw#10 -- vwuz1=_lo_vduz2 
    lda.z dw
    sta.z __6
    lda.z dw+1
    sta.z __6+1
    // [13] (word~) main::$33 ← (word~) main::$6 + (word) $1111 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda.z __33
    adc #<$1111
    sta.z __33
    lda.z __33+1
    adc #>$1111
    sta.z __33+1
    // [14] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33 -- vduz1=vduz1_setlo_vwuz2 
    lda.z __33
    sta.z dw2
    lda.z __33+1
    sta.z dw2+1
    // [15] (dword) print_dword::dw#0 ← (dword) main::dw2#10
    // [16] call print_dword 
    // Test set/get low word of dword
    jsr print_dword
    // [17] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [18] call print_char 
    // [63] phi from main::@3 to print_char [phi:main::@3->print_char]
  print_char_from___b3:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@3->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b4
    // main::@4
  __b4:
    // [19] (word) print_word::w#2 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda.z dw2+2
    sta.z print_word.w
    lda.z dw2+3
    sta.z print_word.w+1
    // [20] call print_word 
    // [67] phi from main::@4 to print_word [phi:main::@4->print_word]
  print_word_from___b4:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@4->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#2 [phi:main::@4->print_word#1] -- register_copy 
    jsr print_word
    // [21] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [22] call print_char 
  // Test get high word of dword
    // [63] phi from main::@5 to print_char [phi:main::@5->print_char]
  print_char_from___b5:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@5->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@5->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b6
    // main::@6
  __b6:
    // [23] (word) print_word::w#3 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda.z dw2
    sta.z print_word.w
    lda.z dw2+1
    sta.z print_word.w+1
    // [24] call print_word 
    // [67] phi from main::@6 to print_word [phi:main::@6->print_word]
  print_word_from___b6:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@6->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#3 [phi:main::@6->print_word#1] -- register_copy 
    jsr print_word
    // [25] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [26] call print_char 
  // Test get low word of dword
    // [63] phi from main::@7 to print_char [phi:main::@7->print_char]
  print_char_from___b7:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@7->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@7->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b8
    // main::@8
  __b8:
    // [27] (word~) main::$16 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda.z dw2+2
    sta.z __16
    lda.z dw2+3
    sta.z __16+1
    // [28] (byte) print_byte::b#2 ← > (word~) main::$16 -- vbuxx=_hi_vwuz1 
    ldx.z __16+1
    // [29] call print_byte 
    // [55] phi from main::@8 to print_byte [phi:main::@8->print_byte]
  print_byte_from___b8:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@8->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#2 [phi:main::@8->print_byte#1] -- register_copy 
    jsr print_byte
    // [30] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [31] call print_char 
  // Test get high high byte of dword
    // [63] phi from main::@9 to print_char [phi:main::@9->print_char]
  print_char_from___b9:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@9->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@9->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b10
    // main::@10
  __b10:
    // [32] (word~) main::$20 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda.z dw2+2
    sta.z __20
    lda.z dw2+3
    sta.z __20+1
    // [33] (byte) print_byte::b#3 ← < (word~) main::$20 -- vbuxx=_lo_vwuz1 
    ldx.z __20
    // [34] call print_byte 
    // [55] phi from main::@10 to print_byte [phi:main::@10->print_byte]
  print_byte_from___b10:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@10->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#3 [phi:main::@10->print_byte#1] -- register_copy 
    jsr print_byte
    // [35] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [36] call print_char 
  // Test get low high byte of dword
    // [63] phi from main::@11 to print_char [phi:main::@11->print_char]
  print_char_from___b11:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@11->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@11->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b12
    // main::@12
  __b12:
    // [37] (word~) main::$24 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda.z dw2
    sta.z __24
    lda.z dw2+1
    sta.z __24+1
    // [38] (byte) print_byte::b#4 ← > (word~) main::$24 -- vbuxx=_hi_vwuz1 
    ldx.z __24+1
    // [39] call print_byte 
    // [55] phi from main::@12 to print_byte [phi:main::@12->print_byte]
  print_byte_from___b12:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@12->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#4 [phi:main::@12->print_byte#1] -- register_copy 
    jsr print_byte
    // [40] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [41] call print_char 
  // Test get high low byte of dword
    // [63] phi from main::@13 to print_char [phi:main::@13->print_char]
  print_char_from___b13:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@13->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@13->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b14
    // main::@14
  __b14:
    // [42] (word~) main::$28 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda.z dw2
    sta.z __28
    lda.z dw2+1
    sta.z __28+1
    // [43] (byte) print_byte::b#5 ← < (word~) main::$28 -- vbuxx=_lo_vwuz1 
    ldx.z __28
    // [44] call print_byte 
    // [55] phi from main::@14 to print_byte [phi:main::@14->print_byte]
  print_byte_from___b14:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@14->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#5 [phi:main::@14->print_byte#1] -- register_copy 
    jsr print_byte
    // [45] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
  __b15_from___b14:
    jmp __b15
    // main::@15
  __b15:
    // [46] call print_ln 
  // Test get low low byte of dword
    // [49] phi from main::@15 to print_ln [phi:main::@15->print_ln]
  print_ln_from___b15:
    jsr print_ln
    jmp __b16
    // main::@16
  __b16:
    // [47] (dword) main::dw#1 ← ++ (dword) main::dw#10 -- vduz1=_inc_vduz1 
    inc.z dw
    bne !+
    inc.z dw+1
    bne !+
    inc.z dw+2
    bne !+
    inc.z dw+3
  !:
    // [48] (byte*) print_line_cursor#37 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_line_cursor_1
    lda.z print_line_cursor+1
    sta.z print_line_cursor_1+1
    // [6] phi from main::@16 to main::@1 [phi:main::@16->main::@1]
  __b1_from___b16:
    // [6] phi (byte*) print_char_cursor#31 = (byte*) print_line_cursor#1 [phi:main::@16->main::@1#0] -- register_copy 
    // [6] phi (byte*) print_line_cursor#15 = (byte*) print_line_cursor#37 [phi:main::@16->main::@1#1] -- register_copy 
    // [6] phi (dword) main::dw#10 = (dword) main::dw#1 [phi:main::@16->main::@1#2] -- register_copy 
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [50] phi from print_ln print_ln::@2 to print_ln::@1 [phi:print_ln/print_ln::@2->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b2:
    // [50] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#15 [phi:print_ln/print_ln::@2->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor_1
    sta.z print_line_cursor
    lda #0
    adc.z print_line_cursor_1+1
    sta.z print_line_cursor+1
    // [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b2
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b2
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [53] return 
    rts
    // print_ln::@2
  __b2:
    // [54] (byte*) print_line_cursor#36 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_line_cursor_1
    lda.z print_line_cursor+1
    sta.z print_line_cursor_1+1
    jmp __b1_from___b2
}
  // print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
    // [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [57] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [58] call print_char 
  // Table of hexadecimal digits
    // [63] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#67 [phi:print_byte->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_byte::@1
  __b1:
    // [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [60] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [61] call print_char 
    // [63] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from___b1:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_byte::@return
  __breturn:
    // [62] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [65] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#44 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [66] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zp($c) w)
print_word: {
    .label w = $c
    // [68] (byte) print_byte::b#0 ← > (word) print_word::w#4 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [69] call print_byte 
    // [55] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#65 [phi:print_word->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp __b1
    // print_word::@1
  __b1:
    // [70] (byte) print_byte::b#1 ← < (word) print_word::w#4 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [71] call print_byte 
    // [55] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from___b1:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp __breturn
    // print_word::@return
  __breturn:
    // [72] return 
    rts
}
  // print_dword
// Print a dword as HEX
// print_dword(dword zp($e) dw)
print_dword: {
    .label dw = $e
    // [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0 -- vwuz1=_hi_vduz2 
    lda.z dw+2
    sta.z print_word.w
    lda.z dw+3
    sta.z print_word.w+1
    // [74] (byte*) print_char_cursor#74 ← (byte*) print_char_cursor#31 -- pbuz1=pbuz2 
    lda.z print_char_cursor_1
    sta.z print_char_cursor
    lda.z print_char_cursor_1+1
    sta.z print_char_cursor+1
    // [75] call print_word 
    // [67] phi from print_dword to print_word [phi:print_dword->print_word]
  print_word_from_print_dword:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#74 [phi:print_dword->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#0 [phi:print_dword->print_word#1] -- register_copy 
    jsr print_word
    jmp __b1
    // print_dword::@1
  __b1:
    // [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0 -- vwuz1=_lo_vduz2 
    lda.z dw
    sta.z print_word.w
    lda.z dw+1
    sta.z print_word.w+1
    // [77] call print_word 
    // [67] phi from print_dword::@1 to print_word [phi:print_dword::@1->print_word]
  print_word_from___b1:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:print_dword::@1->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#1 [phi:print_dword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp __breturn
    // print_dword::@return
  __breturn:
    // [78] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [80] call memset 
    // [82] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [81] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $c
    // [83] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [83] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [84] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [85] return 
    rts
    // memset::@2
  __b2:
    // [86] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [87] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [83] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [83] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx.z __16+1 with TAX
Replacing instruction ldx.z __24+1 with TAX
Removing instruction lda.z print_line_cursor+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b3_from___b2:
Removing instruction print_char_from___b3:
Removing instruction __b5_from___b4:
Removing instruction __b7_from___b6:
Removing instruction __b9_from___b8:
Removing instruction __b11_from___b10:
Removing instruction __b13_from___b12:
Removing instruction __b15_from___b14:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction print_cls_from_main:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction print_word_from___b4:
Removing instruction __b5:
Removing instruction print_char_from___b5:
Removing instruction __b6:
Removing instruction print_word_from___b6:
Removing instruction __b7:
Removing instruction print_char_from___b7:
Removing instruction __b8:
Removing instruction print_byte_from___b8:
Removing instruction __b9:
Removing instruction print_char_from___b9:
Removing instruction __b10:
Removing instruction print_byte_from___b10:
Removing instruction __b11:
Removing instruction print_char_from___b11:
Removing instruction __b12:
Removing instruction print_byte_from___b12:
Removing instruction __b13:
Removing instruction print_char_from___b13:
Removing instruction __b14:
Removing instruction print_byte_from___b14:
Removing instruction __b15:
Removing instruction print_ln_from___b15:
Removing instruction __b16:
Removing instruction __b1_from___b16:
Removing instruction __breturn:
Removing instruction print_char_from_print_byte:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_byte_from_print_word:
Removing instruction __b1:
Removing instruction print_byte_from___b1:
Removing instruction __breturn:
Removing instruction print_word_from_print_dword:
Removing instruction __b1:
Removing instruction print_word_from___b1:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(word~) main::$16 zp[2]:20 202.0
(word~) main::$20 zp[2]:22 202.0
(word~) main::$24 zp[2]:24 202.0
(word~) main::$28 zp[2]:26 202.0
(word~) main::$3 zp[2]:12 202.0
(word~) main::$32 zp[2]:12 202.0
(word~) main::$33 zp[2]:18 202.0
(word~) main::$6 zp[2]:18 202.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(dword) main::dw
(dword) main::dw#1 dw zp[4]:2 101.0
(dword) main::dw#10 dw zp[4]:2 15.15
(dword) main::dw2
(dword) main::dw2#1 dw2 zp[4]:14 67.33333333333333
(dword) main::dw2#10 dw2 zp[4]:14 28.857142857142858
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:12 20002.0
(byte*) memset::dst#2 dst zp[2]:12 13334.666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 200002.0
(byte~) print_byte::$2 reg byte x 200002.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 20002.0
(byte) print_byte::b#1 reg byte x 20002.0
(byte) print_byte::b#2 reg byte x 202.0
(byte) print_byte::b#3 reg byte x 202.0
(byte) print_byte::b#4 reg byte x 202.0
(byte) print_byte::b#5 reg byte x 202.0
(byte) print_byte::b#6 reg byte x 55102.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 200002.0
(byte) print_char::ch#1 reg byte a 200002.0
(byte) print_char::ch#8 reg byte a 1200003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 print_char_cursor zp[2]:10 24244.34
(byte*) print_char_cursor#31 print_char_cursor_1 zp[2]:6 110.19999999999999
(byte*) print_char_cursor#44 print_char_cursor zp[2]:10 1100305.0
(byte*) print_char_cursor#65 print_char_cursor zp[2]:10 6102.5
(byte*) print_char_cursor#67 print_char_cursor zp[2]:10 40135.666666666664
(byte*) print_char_cursor#74 print_char_cursor zp[2]:10 2002.0
(void()) print_cls()
(label) print_cls::@return
(void()) print_dword((dword) print_dword::dw)
(label) print_dword::@1
(label) print_dword::@return
(dword) print_dword::dw
(dword) print_dword::dw#0 dw zp[4]:14 525.75
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:6 50034.16666666666
(byte*) print_line_cursor#15 print_line_cursor_1 zp[2]:8 27.549999999999997
(byte*) print_line_cursor#36 print_line_cursor_1 zp[2]:8 200002.0
(byte*) print_line_cursor#37 print_line_cursor_1 zp[2]:8 202.0
(byte*) print_line_cursor#9 print_line_cursor_1 zp[2]:8 201003.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp[2]:12 1001.0
(word) print_word::w#1 w zp[2]:12 2002.0
(word) print_word::w#2 w zp[2]:12 202.0
(word) print_word::w#3 w zp[2]:12 202.0
(word) print_word::w#4 w zp[2]:12 7402.0

zp[4]:2 [ main::dw#10 main::dw#1 ]
zp[2]:6 [ print_char_cursor#31 print_line_cursor#1 ]
zp[2]:8 [ print_line_cursor#9 print_line_cursor#15 print_line_cursor#37 print_line_cursor#36 ]
reg byte x [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
reg byte a [ print_char::ch#8 print_char::ch#0 print_char::ch#1 ]
zp[2]:10 [ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#74 ]
zp[2]:12 [ main::$3 main::$32 memset::dst#2 memset::dst#1 print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ]
zp[4]:14 [ main::dw2#1 main::dw2#10 print_dword::dw#0 ]
zp[2]:18 [ main::$6 main::$33 ]
zp[2]:20 [ main::$16 ]
zp[2]:22 [ main::$20 ]
zp[2]:24 [ main::$24 ]
zp[2]:26 [ main::$28 ]
reg byte a [ print_byte::$0 ]
reg byte x [ print_byte::$2 ]


FINAL ASSEMBLER
Score: 8692

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 6
  .label print_char_cursor = $a
  .label print_char_cursor_1 = 6
  .label print_line_cursor_1 = 8
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label __3 = $c
    .label __6 = $12
    .label __16 = $14
    .label __20 = $16
    .label __24 = $18
    .label __28 = $1a
    .label __32 = $c
    .label __33 = $12
    .label dw2 = $e
    .label dw = 2
    // print_cls()
    // [5] call print_cls 
    // [79] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // [6] phi (byte*) print_char_cursor#31 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor_1
    lda #>$400
    sta.z print_char_cursor_1+1
    // [6] phi (byte*) print_line_cursor#15 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor_1
    lda #>$400
    sta.z print_line_cursor_1+1
    // [6] phi (dword) main::dw#10 = (dword) $12345678 [phi:main->main::@1#2] -- vduz1=vduc1 
    lda #<$12345678
    sta.z dw
    lda #>$12345678
    sta.z dw+1
    lda #<$12345678>>$10
    sta.z dw+2
    lda #>$12345678>>$10
    sta.z dw+3
    // main::@1
  __b1:
    // for( dword dw = $12345678; dw != $12345690; dw++ )
    // [7] if((dword) main::dw#10!=(dword) $12345690) goto main::@2 -- vduz1_neq_vduc1_then_la1 
    lda.z dw+3
    cmp #>$12345690>>$10
    bne __b2
    lda.z dw+2
    cmp #<$12345690>>$10
    bne __b2
    lda.z dw+1
    cmp #>$12345690
    bne __b2
    lda.z dw
    cmp #<$12345690
    bne __b2
    // main::@return
    // }
    // [8] return 
    rts
    // main::@2
  __b2:
    // >dw
    // [9] (word~) main::$3 ← > (dword) main::dw#10 -- vwuz1=_hi_vduz2 
    lda.z dw+2
    sta.z __3
    lda.z dw+3
    sta.z __3+1
    // >dw2 = (>dw) + $1111
    // [10] (word~) main::$32 ← (word~) main::$3 + (word) $1111 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda.z __32
    adc #<$1111
    sta.z __32
    lda.z __32+1
    adc #>$1111
    sta.z __32+1
    // [11] (dword) main::dw2#1 ← (dword) main::dw#10 hi= (word~) main::$32 -- vduz1=vduz2_sethi_vwuz3 
    lda.z dw
    sta.z dw2
    lda.z dw+1
    sta.z dw2+1
    lda.z __32
    sta.z dw2+2
    lda.z __32+1
    sta.z dw2+3
    // <dw
    // [12] (word~) main::$6 ← < (dword) main::dw#10 -- vwuz1=_lo_vduz2 
    lda.z dw
    sta.z __6
    lda.z dw+1
    sta.z __6+1
    // <dw2 = (<dw) + $1111
    // [13] (word~) main::$33 ← (word~) main::$6 + (word) $1111 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda.z __33
    adc #<$1111
    sta.z __33
    lda.z __33+1
    adc #>$1111
    sta.z __33+1
    // [14] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33 -- vduz1=vduz1_setlo_vwuz2 
    lda.z __33
    sta.z dw2
    lda.z __33+1
    sta.z dw2+1
    // print_dword(dw2)
    // [15] (dword) print_dword::dw#0 ← (dword) main::dw2#10
    // [16] call print_dword 
    // Test set/get low word of dword
    jsr print_dword
    // [17] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // print_char(' ')
    // [18] call print_char 
    // [63] phi from main::@3 to print_char [phi:main::@3->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@3->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@4
    // print_word(>dw2)
    // [19] (word) print_word::w#2 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda.z dw2+2
    sta.z print_word.w
    lda.z dw2+3
    sta.z print_word.w+1
    // [20] call print_word 
    // [67] phi from main::@4 to print_word [phi:main::@4->print_word]
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@4->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#2 [phi:main::@4->print_word#1] -- register_copy 
    jsr print_word
    // [21] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // print_char(' ')
    // [22] call print_char 
  // Test get high word of dword
    // [63] phi from main::@5 to print_char [phi:main::@5->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@5->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@5->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@6
    // print_word(<dw2)
    // [23] (word) print_word::w#3 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda.z dw2
    sta.z print_word.w
    lda.z dw2+1
    sta.z print_word.w+1
    // [24] call print_word 
    // [67] phi from main::@6 to print_word [phi:main::@6->print_word]
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@6->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#3 [phi:main::@6->print_word#1] -- register_copy 
    jsr print_word
    // [25] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // print_char(' ')
    // [26] call print_char 
  // Test get low word of dword
    // [63] phi from main::@7 to print_char [phi:main::@7->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@7->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@7->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@8
    // >dw2
    // [27] (word~) main::$16 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda.z dw2+2
    sta.z __16
    lda.z dw2+3
    sta.z __16+1
    // print_byte(> >dw2)
    // [28] (byte) print_byte::b#2 ← > (word~) main::$16 -- vbuxx=_hi_vwuz1 
    tax
    // [29] call print_byte 
    // [55] phi from main::@8 to print_byte [phi:main::@8->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@8->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#2 [phi:main::@8->print_byte#1] -- register_copy 
    jsr print_byte
    // [30] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // print_char(' ')
    // [31] call print_char 
  // Test get high high byte of dword
    // [63] phi from main::@9 to print_char [phi:main::@9->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@9->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@9->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@10
    // >dw2
    // [32] (word~) main::$20 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda.z dw2+2
    sta.z __20
    lda.z dw2+3
    sta.z __20+1
    // print_byte(< >dw2)
    // [33] (byte) print_byte::b#3 ← < (word~) main::$20 -- vbuxx=_lo_vwuz1 
    ldx.z __20
    // [34] call print_byte 
    // [55] phi from main::@10 to print_byte [phi:main::@10->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@10->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#3 [phi:main::@10->print_byte#1] -- register_copy 
    jsr print_byte
    // [35] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
    // main::@11
    // print_char(' ')
    // [36] call print_char 
  // Test get low high byte of dword
    // [63] phi from main::@11 to print_char [phi:main::@11->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@11->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@11->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@12
    // <dw2
    // [37] (word~) main::$24 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda.z dw2
    sta.z __24
    lda.z dw2+1
    sta.z __24+1
    // print_byte(> <dw2)
    // [38] (byte) print_byte::b#4 ← > (word~) main::$24 -- vbuxx=_hi_vwuz1 
    tax
    // [39] call print_byte 
    // [55] phi from main::@12 to print_byte [phi:main::@12->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@12->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#4 [phi:main::@12->print_byte#1] -- register_copy 
    jsr print_byte
    // [40] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
    // main::@13
    // print_char(' ')
    // [41] call print_char 
  // Test get high low byte of dword
    // [63] phi from main::@13 to print_char [phi:main::@13->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@13->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@13->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@14
    // <dw2
    // [42] (word~) main::$28 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda.z dw2
    sta.z __28
    lda.z dw2+1
    sta.z __28+1
    // print_byte(< <dw2)
    // [43] (byte) print_byte::b#5 ← < (word~) main::$28 -- vbuxx=_lo_vwuz1 
    ldx.z __28
    // [44] call print_byte 
    // [55] phi from main::@14 to print_byte [phi:main::@14->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@14->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#5 [phi:main::@14->print_byte#1] -- register_copy 
    jsr print_byte
    // [45] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
    // main::@15
    // print_ln()
    // [46] call print_ln 
  // Test get low low byte of dword
    // [49] phi from main::@15 to print_ln [phi:main::@15->print_ln]
    jsr print_ln
    // main::@16
    // for( dword dw = $12345678; dw != $12345690; dw++ )
    // [47] (dword) main::dw#1 ← ++ (dword) main::dw#10 -- vduz1=_inc_vduz1 
    inc.z dw
    bne !+
    inc.z dw+1
    bne !+
    inc.z dw+2
    bne !+
    inc.z dw+3
  !:
    // [48] (byte*) print_line_cursor#37 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_line_cursor_1
    lda.z print_line_cursor+1
    sta.z print_line_cursor_1+1
    // [6] phi from main::@16 to main::@1 [phi:main::@16->main::@1]
    // [6] phi (byte*) print_char_cursor#31 = (byte*) print_line_cursor#1 [phi:main::@16->main::@1#0] -- register_copy 
    // [6] phi (byte*) print_line_cursor#15 = (byte*) print_line_cursor#37 [phi:main::@16->main::@1#1] -- register_copy 
    // [6] phi (dword) main::dw#10 = (dword) main::dw#1 [phi:main::@16->main::@1#2] -- register_copy 
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [50] phi from print_ln print_ln::@2 to print_ln::@1 [phi:print_ln/print_ln::@2->print_ln::@1]
    // [50] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#15 [phi:print_ln/print_ln::@2->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor_1
    sta.z print_line_cursor
    lda #0
    adc.z print_line_cursor_1+1
    sta.z print_line_cursor+1
    // while (print_line_cursor<print_char_cursor)
    // [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2 -- pbuz1_lt_pbuz2_then_la1 
    cmp.z print_char_cursor+1
    bcc __b2
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b2
  !:
    // print_ln::@return
    // }
    // [53] return 
    rts
    // print_ln::@2
  __b2:
    // [54] (byte*) print_line_cursor#36 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_line_cursor_1
    lda.z print_line_cursor+1
    sta.z print_line_cursor_1+1
    jmp __b1
}
  // print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
    // b>>4
    // [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [57] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [58] call print_char 
  // Table of hexadecimal digits
    // [63] phi from print_byte to print_char [phi:print_byte->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#67 [phi:print_byte->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@1
    // b&$f
    // [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [60] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [61] call print_char 
    // [63] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@return
    // }
    // [62] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [65] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#44 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [66] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zp($c) w)
print_word: {
    .label w = $c
    // print_byte(>w)
    // [68] (byte) print_byte::b#0 ← > (word) print_word::w#4 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [69] call print_byte 
    // [55] phi from print_word to print_byte [phi:print_word->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#65 [phi:print_word->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    // print_word::@1
    // print_byte(<w)
    // [70] (byte) print_byte::b#1 ← < (word) print_word::w#4 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [71] call print_byte 
    // [55] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    // print_word::@return
    // }
    // [72] return 
    rts
}
  // print_dword
// Print a dword as HEX
// print_dword(dword zp($e) dw)
print_dword: {
    .label dw = $e
    // print_word(>dw)
    // [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0 -- vwuz1=_hi_vduz2 
    lda.z dw+2
    sta.z print_word.w
    lda.z dw+3
    sta.z print_word.w+1
    // [74] (byte*) print_char_cursor#74 ← (byte*) print_char_cursor#31 -- pbuz1=pbuz2 
    lda.z print_char_cursor_1
    sta.z print_char_cursor
    lda.z print_char_cursor_1+1
    sta.z print_char_cursor+1
    // print_word(>dw)
    // [75] call print_word 
    // [67] phi from print_dword to print_word [phi:print_dword->print_word]
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#74 [phi:print_dword->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#0 [phi:print_dword->print_word#1] -- register_copy 
    jsr print_word
    // print_dword::@1
    // print_word(<dw)
    // [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0 -- vwuz1=_lo_vduz2 
    lda.z dw
    sta.z print_word.w
    lda.z dw+1
    sta.z print_word.w+1
    // [77] call print_word 
    // [67] phi from print_dword::@1 to print_word [phi:print_dword::@1->print_word]
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:print_dword::@1->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#1 [phi:print_dword::@1->print_word#1] -- register_copy 
    jsr print_word
    // print_dword::@return
    // }
    // [78] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [80] call memset 
    // [82] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [81] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $c
    // [83] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [83] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [84] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [85] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [86] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [87] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [83] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [83] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

