
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::bu = 7
  main::bs = 7
  main::wu = $4e20
  main::ws = -$b1
  main::du = $1e8480
  main::ds = -$39a4f1
  main::ptr = (char *)0
  main::i#0 = 0
  main::SCREEN[main::i#0] = byte2 $11
  main::i#1 = ++ main::i#0
  main::SCREEN[main::i#1] = byte2 $179
  main::i#2 = ++ main::i#1
  main::SCREEN[main::i#2] = byte2 $5c3b1
  main::i#3 = ++ main::i#2
  main::$0 = byte2  main::bu
  main::SCREEN[main::i#3] = main::$0
  main::i#4 = ++ main::i#3
  main::$1 = byte2  main::bs
  main::SCREEN[main::i#4] = main::$1
  main::i#5 = ++ main::i#4
  main::$2 = byte2  main::wu
  main::SCREEN[main::i#5] = main::$2
  main::i#6 = ++ main::i#5
  main::$3 = byte2  main::ws
  main::SCREEN[main::i#6] = main::$3
  main::i#7 = ++ main::i#6
  main::$4 = byte2  main::du
  main::SCREEN[main::i#7] = main::$4
  main::i#8 = ++ main::i#7
  main::$5 = byte2  main::ds
  main::SCREEN[main::i#8] = main::$5
  main::i#9 = ++ main::i#8
  main::$6 = byte2  main::ptr
  main::SCREEN[main::i#9] = main::$6
  main::i#10 = ++ main::i#9
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
char main::$0
char main::$1
char main::$2
char main::$3
char main::$4
char main::$5
char main::$6
__constant char * const main::SCREEN = (char *)$400
__loadstore volatile signed char main::bs
__loadstore volatile char main::bu
__loadstore volatile long main::ds
__loadstore volatile unsigned long main::du
char main::i
char main::i#0
char main::i#1
char main::i#10
char main::i#2
char main::i#3
char main::i#4
char main::i#5
char main::i#6
char main::i#7
char main::i#8
char main::i#9
__loadstore char * volatile main::ptr
__loadstore volatile int main::ws
__loadstore volatile unsigned int main::wu

Simplifying constant pointer cast (char *) 1024
Simplifying constant pointer cast (char *) 0
Successful SSA optimization PassNCastSimplification
Constant right-side identified [14] main::$0 = byte2  main::bu
Constant right-side identified [17] main::$1 = byte2  main::bs
Constant right-side identified [20] main::$2 = byte2  main::wu
Constant right-side identified [23] main::$3 = byte2  main::ws
Constant right-side identified [32] main::$6 = byte2  main::ptr
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#0 = 0
Constant main::$0 = 0
Constant main::$1 = 0
Constant main::$2 = 0
Constant main::$3 = 0
Constant main::$6 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero byte2 $11 in [8] main::SCREEN[main::i#0] = byte2 $11
Simplifying constant evaluating to zero byte2 $179 in [10] main::SCREEN[main::i#1] = byte2 $179
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in [8] main::SCREEN[main::i#0] = 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable main::bu and assignment [0] main::bu = 7
Eliminating unused variable main::bs and assignment [1] main::bs = 7
Eliminating unused variable main::wu and assignment [2] main::wu = $4e20
Eliminating unused variable main::ws and assignment [3] main::ws = -$b1
Eliminating unused variable main::ptr and assignment [6] main::ptr = (char *) 0
Eliminating unused variable main::i#10 and assignment [28] main::i#10 = ++ main::i#9
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [3] main::i#1 = ++ main::i#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#1 = ++main::i#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [4] main::i#2 = ++ main::i#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#2 = ++main::i#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [5] main::i#3 = ++ main::i#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#3 = ++main::i#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [6] main::i#4 = ++ main::i#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#4 = ++main::i#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] main::i#5 = ++ main::i#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#5 = ++main::i#4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [8] main::i#6 = ++ main::i#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#6 = ++main::i#5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [9] main::i#7 = ++ main::i#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#7 = ++main::i#6
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] main::i#8 = ++ main::i#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#8 = ++main::i#7
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [13] main::i#9 = ++ main::i#8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#9 = ++main::i#8
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings main::i#0
Inlining constant with different constant siblings main::i#1
Inlining constant with different constant siblings main::i#2
Inlining constant with different constant siblings main::i#3
Inlining constant with different constant siblings main::i#4
Inlining constant with different constant siblings main::i#5
Inlining constant with different constant siblings main::i#6
Inlining constant with different constant siblings main::i#7
Inlining constant with different constant siblings main::i#8
Inlining constant with different constant siblings main::i#9
Constant inlined main::i#8 = ++++++++++++++++0
Constant inlined main::i#7 = ++++++++++++++0
Constant inlined main::i#9 = ++++++++++++++++++0
Constant inlined main::i#4 = ++++++++0
Constant inlined main::i#3 = ++++++0
Constant inlined main::i#6 = ++++++++++++0
Constant inlined main::i#5 = ++++++++++0
Constant inlined main::$1 = 0
Constant inlined main::$2 = 0
Constant inlined main::$0 = 0
Constant inlined main::i#0 = 0
Constant inlined main::$6 = 0
Constant inlined main::$3 = 0
Constant inlined main::i#2 = ++++0
Constant inlined main::i#1 = ++0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+++0)
Consolidated array index constant in *(main::SCREEN+++++0)
Consolidated array index constant in *(main::SCREEN+++++++0)
Consolidated array index constant in *(main::SCREEN+++++++++0)
Consolidated array index constant in *(main::SCREEN+++++++++++0)
Consolidated array index constant in *(main::SCREEN+++++++++++++0)
Consolidated array index constant in *(main::SCREEN+++++++++++++++0)
Consolidated array index constant in *(main::SCREEN+++++++++++++++++0)
Consolidated array index constant in *(main::SCREEN+++++++++++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Successful SSA optimization Pass2ConstantSimplification
Finalized unsigned number type (unsigned long) $5c3b1
Successful SSA optimization PassNFinalizeNumberTypeConversions
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::du = $1e8480
  [1] main::ds = -$39a4f1
  [2] *main::SCREEN = 0
  [3] *(main::SCREEN+1) = 0
  [4] *(main::SCREEN+2) = byte2 $5c3b1
  [5] *(main::SCREEN+3) = 0
  [6] *(main::SCREEN+4) = 0
  [7] *(main::SCREEN+5) = 0
  [8] *(main::SCREEN+6) = 0
  [9] main::$4 = byte2  main::du
  [10] *(main::SCREEN+7) = main::$4
  [11] main::$5 = byte2  main::ds
  [12] *(main::SCREEN+8) = main::$5
  [13] *(main::SCREEN+9) = 0
  to:main::@return
main::@return: scope:[main]  from main
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::$4 // 4.0
char main::$5 // 4.0
__loadstore volatile long main::ds // 0.4
__loadstore volatile unsigned long main::du // 0.4444444444444444
char main::i

Initial phi equivalence classes
Added variable main::du to live range equivalence class [ main::du ]
Added variable main::ds to live range equivalence class [ main::ds ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Complete equivalence classes
[ main::du ]
[ main::ds ]
[ main::$4 ]
[ main::$5 ]
Allocated zp[4]:2 [ main::du ]
Allocated zp[4]:6 [ main::ds ]
Allocated zp[1]:10 [ main::$4 ]
Allocated zp[1]:11 [ main::$5 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::du = $1e8480 [ main::du ] (  [ main::du ] { }  ) always clobbers reg byte a 
Statement [1] main::ds = -$39a4f1 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [2] *main::SCREEN = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [3] *(main::SCREEN+1) = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [4] *(main::SCREEN+2) = byte2 $5c3b1 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [5] *(main::SCREEN+3) = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [6] *(main::SCREEN+4) = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [7] *(main::SCREEN+5) = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [8] *(main::SCREEN+6) = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [13] *(main::SCREEN+9) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[4]:2 [ main::du ] : zp[4]:2 , 
Potential registers zp[4]:6 [ main::ds ] : zp[4]:6 , 
Potential registers zp[1]:10 [ main::$4 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ main::$5 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 4: zp[1]:10 [ main::$4 ] 4: zp[1]:11 [ main::$5 ] 0.44: zp[4]:2 [ main::du ] 0.4: zp[4]:6 [ main::ds ] 
Uplift Scope [] 

Uplifting [main] best 111 combination reg byte a [ main::$4 ] reg byte a [ main::$5 ] zp[4]:2 [ main::du ] zp[4]:6 [ main::ds ] 
Uplifting [] best 111 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test operator BYTE2()
  // Upstart
  // Commodore 64 PRG executable file
.file [name="operator-byte2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label du = 2
    .label ds = 6
    // [0] main::du = $1e8480 -- vduz1=vduc1 
    lda #<$1e8480
    sta.z du
    lda #>$1e8480
    sta.z du+1
    lda #<$1e8480>>$10
    sta.z du+2
    lda #>$1e8480>>$10
    sta.z du+3
    // [1] main::ds = -$39a4f1 -- vdsz1=vdsc1 
    lda #<-$39a4f1
    sta.z ds
    lda #>-$39a4f1
    sta.z ds+1
    lda #<-$39a4f1>>$10
    sta.z ds+2
    lda #>-$39a4f1>>$10
    sta.z ds+3
    // [2] *main::SCREEN = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN
    // [3] *(main::SCREEN+1) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+1
    // [4] *(main::SCREEN+2) = byte2 $5c3b1 -- _deref_pbuc1=vbuc2 
    lda #<$5c3b1>>$10
    sta SCREEN+2
    // [5] *(main::SCREEN+3) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+3
    // [6] *(main::SCREEN+4) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+4
    // [7] *(main::SCREEN+5) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+5
    // [8] *(main::SCREEN+6) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+6
    // [9] main::$4 = byte2  main::du -- vbuaa=_byte2_vduz1 
    lda.z du+2
    // [10] *(main::SCREEN+7) = main::$4 -- _deref_pbuc1=vbuaa 
    sta SCREEN+7
    // [11] main::$5 = byte2  main::ds -- vbuaa=_byte2_vdsz1 
    lda.z ds+2
    // [12] *(main::SCREEN+8) = main::$5 -- _deref_pbuc1=vbuaa 
    sta SCREEN+8
    // [13] *(main::SCREEN+9) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+9
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
char main::$4 // reg byte a 4.0
char main::$5 // reg byte a 4.0
__constant char * const main::SCREEN = (char *) 1024
__loadstore volatile long main::ds // zp[4]:6 0.4
__loadstore volatile unsigned long main::du // zp[4]:2 0.4444444444444444
char main::i

zp[4]:2 [ main::du ]
zp[4]:6 [ main::ds ]
reg byte a [ main::$4 ]
reg byte a [ main::$5 ]


FINAL ASSEMBLER
Score: 100

  // File Comments
// Test operator BYTE2()
  // Upstart
  // Commodore 64 PRG executable file
.file [name="operator-byte2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label du = 2
    .label ds = 6
    // volatile unsigned long du = 2000000
    // [0] main::du = $1e8480 -- vduz1=vduc1 
    lda #<$1e8480
    sta.z du
    lda #>$1e8480
    sta.z du+1
    lda #<$1e8480>>$10
    sta.z du+2
    lda #>$1e8480>>$10
    sta.z du+3
    // volatile signed long ds = -3777777
    // [1] main::ds = -$39a4f1 -- vdsz1=vdsc1 
    lda #<-$39a4f1
    sta.z ds
    lda #>-$39a4f1
    sta.z ds+1
    lda #<-$39a4f1>>$10
    sta.z ds+2
    lda #>-$39a4f1>>$10
    sta.z ds+3
    // SCREEN[i++] = BYTE2(17)
    // [2] *main::SCREEN = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN
    // SCREEN[i++] = BYTE2(377)
    // [3] *(main::SCREEN+1) = 0 -- _deref_pbuc1=vbuc2 
    sta SCREEN+1
    // SCREEN[i++] = BYTE2(377777)
    // [4] *(main::SCREEN+2) = byte2 $5c3b1 -- _deref_pbuc1=vbuc2 
    lda #<$5c3b1>>$10
    sta SCREEN+2
    // SCREEN[i++] = BYTE2(bu)
    // [5] *(main::SCREEN+3) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+3
    // SCREEN[i++] = BYTE2(bs)
    // [6] *(main::SCREEN+4) = 0 -- _deref_pbuc1=vbuc2 
    sta SCREEN+4
    // SCREEN[i++] = BYTE2(wu)
    // [7] *(main::SCREEN+5) = 0 -- _deref_pbuc1=vbuc2 
    sta SCREEN+5
    // SCREEN[i++] = BYTE2(ws)
    // [8] *(main::SCREEN+6) = 0 -- _deref_pbuc1=vbuc2 
    sta SCREEN+6
    // BYTE2(du)
    // [9] main::$4 = byte2  main::du -- vbuaa=_byte2_vduz1 
    lda.z du+2
    // SCREEN[i++] = BYTE2(du)
    // [10] *(main::SCREEN+7) = main::$4 -- _deref_pbuc1=vbuaa 
    sta SCREEN+7
    // BYTE2(ds)
    // [11] main::$5 = byte2  main::ds -- vbuaa=_byte2_vdsz1 
    lda.z ds+2
    // SCREEN[i++] = BYTE2(ds)
    // [12] *(main::SCREEN+8) = main::$5 -- _deref_pbuc1=vbuaa 
    sta SCREEN+8
    // SCREEN[i++] = BYTE2(ptr)
    // [13] *(main::SCREEN+9) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+9
    // main::@return
    // }
    // [14] return 
    rts
}
  // File Data

