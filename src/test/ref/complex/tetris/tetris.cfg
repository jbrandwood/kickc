@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) render_screen_showing#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  kickasm(location (const byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"
 }}
  kickasm(location (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ // Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )
 }}
  kickasm(location (const byte*) PLAYFIELD_COLORS_ORIGINAL#0) {{ .import binary "playfield-screen.col"
 }}
  to:@2
@2: scope:[]  from @1
  kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  to:@3
@3: scope:[]  from @2
  [6] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0
  [7] (byte) irq_sprite_ypos#0 ← (const byte) SPRITES_FIRST_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) $15
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @3
  [8] phi()
  to:@5
@5: scope:[]  from toSpritePtr1
  [9] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0+(byte/signed byte/word/signed word/dword/signed dword) 3
  [10] (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@4
@4: scope:[]  from @5
  [11] phi()
  [12] call main 
  to:@end
@end: scope:[]  from @4
  [13] phi()
main: scope:[main]  from @4
  [14] phi()
  [15] call sid_rnd_init 
  to:main::@8
main::@8: scope:[main]  from main
  asm { sei  }
  [17] call render_init 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [18] phi()
  [19] call sprites_init 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [20] phi()
  [21] call sprites_irq_init 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [22] phi()
  [23] call play_init 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [24] phi()
  [25] call play_spawn_current 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [26] phi()
  [27] call play_spawn_current 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [28] phi()
  [29] call render_playfield 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [30] (byte~) current_ypos#106 ← (byte) current_ypos#6
  [31] (byte~) current_xpos#130 ← (byte) current_xpos#103
  [32] (byte*~) current_piece_gfx#120 ← (byte*) current_piece_gfx#74
  [33] (byte~) current_piece_char#108 ← (byte) current_piece_char#5
  [34] call render_moving 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [35] (byte~) next_piece_idx#84 ← (byte) play_spawn_current::piece_idx#2
  [36] call render_next 
  [37] (byte*~) current_piece#98 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$0)
  to:main::@1
main::@1: scope:[main]  from main::@16 main::@24 main::@6
  [38] (byte) level_bcd#11 ← phi( main::@6/(byte) level_bcd#17 main::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@24/(byte) level_bcd#17 )
  [38] (byte) level#10 ← phi( main::@6/(byte) level#17 main::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@24/(byte) level#17 )
  [38] (dword) score_bcd#18 ← phi( main::@6/(dword) score_bcd#14 main::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@24/(dword) score_bcd#14 )
  [38] (word) lines_bcd#19 ← phi( main::@6/(word) lines_bcd#15 main::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@24/(word) lines_bcd#15 )
  [38] (byte) current_movedown_counter#16 ← phi( main::@6/(byte) current_movedown_counter#14 main::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@24/(byte) current_movedown_counter#14 )
  [38] (byte) keyboard_events_size#19 ← phi( main::@6/(byte) keyboard_events_size#16 main::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@24/(byte) keyboard_events_size#16 )
  [38] (byte) next_piece_idx#10 ← phi( main::@6/(byte) next_piece_idx#16 main::@16/(byte) play_spawn_current::piece_idx#2 main::@24/(byte) next_piece_idx#16 )
  [38] (byte) game_over#10 ← phi( main::@6/(byte) game_over#15 main::@16/(byte) game_over#52 main::@24/(byte) game_over#15 )
  [38] (byte) current_ypos#100 ← phi( main::@6/(byte) current_ypos#19 main::@16/(byte) current_ypos#6 main::@24/(byte) current_ypos#19 )
  [38] (byte) current_xpos#124 ← phi( main::@6/(byte) current_xpos#19 main::@16/(byte) current_xpos#103 main::@24/(byte) current_xpos#19 )
  [38] (byte*) current_piece_gfx#114 ← phi( main::@6/(byte*) current_piece_gfx#18 main::@16/(byte*) current_piece_gfx#74 main::@24/(byte*) current_piece_gfx#18 )
  [38] (byte) current_orientation#13 ← phi( main::@6/(byte) current_orientation#17 main::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@24/(byte) current_orientation#17 )
  [38] (byte) current_piece_char#10 ← phi( main::@6/(byte) current_piece_char#16 main::@16/(byte) current_piece_char#5 main::@24/(byte) current_piece_char#16 )
  [38] (byte*) current_piece#10 ← phi( main::@6/(byte*) current_piece#15 main::@16/(byte*~) current_piece#98 main::@24/(byte*) current_piece#15 )
  [38] (byte) current_movedown_slow#14 ← phi( main::@6/(byte) current_movedown_slow#21 main::@16/(byte) current_movedown_slow#1 main::@24/(byte) current_movedown_slow#21 )
  [38] (byte) render_screen_render#18 ← phi( main::@16/(byte/signed byte/word/signed word/dword/signed dword) $40 main::@24/(byte) render_screen_render#11 )
  [38] (byte) render_screen_show#16 ← phi( main::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@24/(byte) render_screen_show#13 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [39] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [40] phi()
  [41] call render_show 
  to:main::@17
main::@17: scope:[main]  from main::@3
  [42] phi()
  [43] call keyboard_event_scan 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [44] phi()
  [45] call keyboard_event_get 
  [46] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@19
main::@19: scope:[main]  from main::@18
  [47] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3
  [48] if((byte) game_over#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@19 main::@5
  [49] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  to:main::@5
main::@4: scope:[main]  from main::@19
  [50] (byte) play_movement::key_event#0 ← (byte) main::key_event#0
  [51] call play_movement 
  [52] (byte) play_movement::return#3 ← (byte) play_movement::return#2
  to:main::@20
main::@20: scope:[main]  from main::@4
  [53] (byte) main::render#1 ← (byte) play_movement::return#3
  to:main::@6
main::@6: scope:[main]  from main::@20
  [54] if((byte) main::render#1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1
  to:main::@7
main::@7: scope:[main]  from main::@6
  [55] (byte~) render_screen_render#70 ← (byte) render_screen_render#18
  [56] call render_playfield 
  to:main::@21
main::@21: scope:[main]  from main::@7
  [57] (byte~) current_ypos#107 ← (byte) current_ypos#19
  [58] (byte~) render_screen_render#69 ← (byte) render_screen_render#18
  [59] (byte~) current_xpos#131 ← (byte) current_xpos#19
  [60] (byte*~) current_piece_gfx#121 ← (byte*) current_piece_gfx#18
  [61] (byte~) current_piece_char#109 ← (byte) current_piece_char#16
  [62] call render_moving 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [63] (byte~) render_screen_render#68 ← (byte) render_screen_render#18
  [64] (byte~) next_piece_idx#85 ← (byte) next_piece_idx#16
  [65] call render_next 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [66] phi()
  [67] call render_score 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [68] phi()
  [69] call render_screen_swap 
  to:main::@1
render_screen_swap: scope:[render_screen_swap]  from main::@24
  [70] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte/signed byte/word/signed word/dword/signed dword) $40
  [71] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte/signed byte/word/signed word/dword/signed dword) $40
  to:render_screen_swap::@return
render_screen_swap::@return: scope:[render_screen_swap]  from render_screen_swap
  [72] return 
  to:@return
render_score: scope:[render_score]  from main::@23
  [73] if((byte) render_screen_render#18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_score::@1
  to:render_score::@2
render_score::@2: scope:[render_score]  from render_score
  [74] phi()
  to:render_score::@1
render_score::@1: scope:[render_score]  from render_score render_score::@2
  [75] (byte*) render_score::screen#3 ← phi( render_score/(const byte*) PLAYFIELD_SCREEN_1#0 render_score::@2/(const byte*) PLAYFIELD_SCREEN_2#0 )
  [76] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3
  [77] (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes#0+(byte/signed byte/word/signed word/dword/signed dword) 2)
  [78] call render_bcd 
  to:render_score::@3
render_score::@3: scope:[render_score]  from render_score::@1
  [79] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3
  [80] (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes#0+(byte/signed byte/word/signed word/dword/signed dword) 1)
  [81] call render_bcd 
  to:render_score::@4
render_score::@4: scope:[render_score]  from render_score::@3
  [82] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3
  [83] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes#0)
  [84] call render_bcd 
  to:render_score::@5
render_score::@5: scope:[render_score]  from render_score::@4
  [85] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15
  [86] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3
  [87] call render_bcd 
  to:render_score::@6
render_score::@6: scope:[render_score]  from render_score::@5
  [88] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15
  [89] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3
  [90] call render_bcd 
  to:render_score::@7
render_score::@7: scope:[render_score]  from render_score::@6
  [91] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3
  [92] (byte) render_bcd::bcd#5 ← (byte) level_bcd#17
  [93] call render_bcd 
  to:render_score::@return
render_score::@return: scope:[render_score]  from render_score::@7
  [94] return 
  to:@return
render_bcd: scope:[render_bcd]  from render_score::@1 render_score::@3 render_score::@4 render_score::@5 render_score::@6 render_score::@7
  [95] (byte) render_bcd::bcd#6 ← phi( render_score::@1/(byte) render_bcd::bcd#0 render_score::@3/(byte) render_bcd::bcd#1 render_score::@4/(byte) render_bcd::bcd#2 render_score::@5/(byte) render_bcd::bcd#3 render_score::@6/(byte) render_bcd::bcd#4 render_score::@7/(byte) render_bcd::bcd#5 )
  [95] (byte) render_bcd::only_low#6 ← phi( render_score::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_score::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 render_score::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 render_score::@5/(byte/signed byte/word/signed word/dword/signed dword) 1 render_score::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 render_score::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [95] (word) render_bcd::offset#6 ← phi( render_score::@1/(const word) render_score::score_offset#0 render_score::@3/(const word) render_score::score_offset#0+(byte/signed byte/word/signed word/dword/signed dword) 2 render_score::@4/(const word) render_score::score_offset#0+(byte/signed byte/word/signed word/dword/signed dword) 4 render_score::@5/(const word) render_score::lines_offset#0 render_score::@6/(const word) render_score::lines_offset#0+(byte/signed byte/word/signed word/dword/signed dword) 1 render_score::@7/(const word) render_score::level_offset#0 )
  [95] (byte*) render_bcd::screen#6 ← phi( render_score::@1/(byte*) render_bcd::screen#0 render_score::@3/(byte*) render_bcd::screen#1 render_score::@4/(byte*) render_bcd::screen#2 render_score::@5/(byte*) render_bcd::screen#3 render_score::@6/(byte*) render_bcd::screen#4 render_score::@7/(byte*) render_bcd::screen#5 )
  [96] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6
  [97] if((byte) render_bcd::only_low#6!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_bcd::@1
  to:render_bcd::@2
render_bcd::@2: scope:[render_bcd]  from render_bcd
  [98] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [99] (byte~) render_bcd::$6 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$5
  [100] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6
  [101] (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#0
  to:render_bcd::@1
render_bcd::@1: scope:[render_bcd]  from render_bcd render_bcd::@2
  [102] (byte*) render_bcd::screen_pos#3 ← phi( render_bcd/(byte*) render_bcd::screen_pos#0 render_bcd::@2/(byte*) render_bcd::screen_pos#2 )
  [103] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [104] (byte~) render_bcd::$4 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$3
  [105] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4
  [106] (byte*) render_bcd::screen_pos#1 ← ++ (byte*) render_bcd::screen_pos#3
  to:render_bcd::@return
render_bcd::@return: scope:[render_bcd]  from render_bcd::@1
  [107] return 
  to:@return
render_next: scope:[render_next]  from main::@16 main::@22
  [108] (byte) next_piece_idx#12 ← phi( main::@16/(byte~) next_piece_idx#84 main::@22/(byte~) next_piece_idx#85 )
  [108] (byte) render_screen_render#15 ← phi( main::@16/(byte/signed byte/word/signed word/dword/signed dword) $40 main::@22/(byte~) render_screen_render#68 )
  [109] if((byte) render_screen_render#15==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_next::@1
  to:render_next::@2
render_next::@2: scope:[render_next]  from render_next
  [110] phi()
  to:render_next::@1
render_next::@1: scope:[render_next]  from render_next render_next::@2
  [111] (byte*) render_next::screen_next_area#11 ← phi( render_next/(const byte*) PLAYFIELD_SCREEN_1#0+(const word) render_next::next_area_offset#0 render_next::@2/(const byte*) PLAYFIELD_SCREEN_2#0+(const word) render_next::next_area_offset#0 )
  [112] (byte~) render_next::$4 ← (byte) next_piece_idx#12 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [113] (byte) render_next::next_piece_char#0 ← *((const byte[]) PIECES_NEXT_CHARS#0 + (byte) next_piece_idx#12)
  [114] (byte*~) render_next::next_piece_gfx#9 ← (byte*)*((const word[]) PIECES#0 + (byte~) render_next::$4)
  to:render_next::@3
render_next::@3: scope:[render_next]  from render_next::@1 render_next::@8
  [115] (byte) render_next::l#7 ← phi( render_next::@8/(byte) render_next::l#1 render_next::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [115] (byte*) render_next::screen_next_area#10 ← phi( render_next::@8/(byte*) render_next::screen_next_area#4 render_next::@1/(byte*) render_next::screen_next_area#11 )
  [115] (byte*) render_next::next_piece_gfx#3 ← phi( render_next::@8/(byte*) render_next::next_piece_gfx#1 render_next::@1/(byte*~) render_next::next_piece_gfx#9 )
  to:render_next::@4
render_next::@4: scope:[render_next]  from render_next::@3 render_next::@6
  [116] (byte) render_next::c#2 ← phi( render_next::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 render_next::@6/(byte) render_next::c#1 )
  [116] (byte*) render_next::screen_next_area#5 ← phi( render_next::@3/(byte*) render_next::screen_next_area#10 render_next::@6/(byte*) render_next::screen_next_area#3 )
  [116] (byte*) render_next::next_piece_gfx#2 ← phi( render_next::@3/(byte*) render_next::next_piece_gfx#3 render_next::@6/(byte*) render_next::next_piece_gfx#1 )
  [117] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2)
  [118] (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2
  [119] if((byte) render_next::cell#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_next::@5
  to:render_next::@7
render_next::@7: scope:[render_next]  from render_next::@4
  [120] *((byte*) render_next::screen_next_area#5) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_next::@6
render_next::@6: scope:[render_next]  from render_next::@5 render_next::@7
  [121] (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#5
  [122] (byte) render_next::c#1 ← ++ (byte) render_next::c#2
  [123] if((byte) render_next::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_next::@4
  to:render_next::@8
render_next::@8: scope:[render_next]  from render_next::@6
  [124] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte/signed byte/word/signed word/dword/signed dword) $24
  [125] (byte) render_next::l#1 ← ++ (byte) render_next::l#7
  [126] if((byte) render_next::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_next::@3
  to:render_next::@return
render_next::@return: scope:[render_next]  from render_next::@8
  [127] return 
  to:@return
render_next::@5: scope:[render_next]  from render_next::@4
  [128] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0
  to:render_next::@6
render_moving: scope:[render_moving]  from main::@15 main::@21
  [129] (byte) current_piece_char#68 ← phi( main::@15/(byte~) current_piece_char#108 main::@21/(byte~) current_piece_char#109 )
  [129] (byte*) current_piece_gfx#64 ← phi( main::@15/(byte*~) current_piece_gfx#120 main::@21/(byte*~) current_piece_gfx#121 )
  [129] (byte) current_xpos#59 ← phi( main::@15/(byte~) current_xpos#130 main::@21/(byte~) current_xpos#131 )
  [129] (byte) render_screen_render#33 ← phi( main::@15/(byte/signed byte/word/signed word/dword/signed dword) $40 main::@21/(byte~) render_screen_render#69 )
  [129] (byte) current_ypos#13 ← phi( main::@15/(byte~) current_ypos#106 main::@21/(byte~) current_ypos#107 )
  [130] (byte) render_moving::ypos2#0 ← (byte) current_ypos#13 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:render_moving::@1
render_moving::@1: scope:[render_moving]  from render_moving render_moving::@3
  [131] (byte) render_moving::l#4 ← phi( render_moving/(byte/signed byte/word/signed word/dword/signed dword) 0 render_moving::@3/(byte) render_moving::l#1 )
  [131] (byte) render_moving::i#3 ← phi( render_moving/(byte/signed byte/word/signed word/dword/signed dword) 0 render_moving::@3/(byte) render_moving::i#8 )
  [131] (byte) render_moving::ypos2#2 ← phi( render_moving/(byte) render_moving::ypos2#0 render_moving::@3/(byte) render_moving::ypos2#1 )
  [132] if((byte) render_moving::ypos2#2>(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_moving::@2
  to:render_moving::@7
render_moving::@7: scope:[render_moving]  from render_moving::@1
  [133] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 4
  to:render_moving::@3
render_moving::@3: scope:[render_moving]  from render_moving::@5 render_moving::@7
  [134] (byte) render_moving::i#8 ← phi( render_moving::@5/(byte) render_moving::i#2 render_moving::@7/(byte) render_moving::i#1 )
  [135] (byte) render_moving::ypos2#1 ← (byte) render_moving::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [136] (byte) render_moving::l#1 ← ++ (byte) render_moving::l#4
  [137] if((byte) render_moving::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_moving::@1
  to:render_moving::@return
render_moving::@return: scope:[render_moving]  from render_moving::@3
  [138] return 
  to:@return
render_moving::@2: scope:[render_moving]  from render_moving::@1
  [139] (byte~) render_moving::$2 ← (byte) render_screen_render#33 + (byte) render_moving::ypos2#2
  [140] (byte*) render_moving::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_moving::$2)
  [141] (byte) render_moving::xpos#0 ← (byte) current_xpos#59
  to:render_moving::@4
render_moving::@4: scope:[render_moving]  from render_moving::@2 render_moving::@5
  [142] (byte) render_moving::c#2 ← phi( render_moving::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 render_moving::@5/(byte) render_moving::c#1 )
  [142] (byte) render_moving::xpos#2 ← phi( render_moving::@2/(byte) render_moving::xpos#0 render_moving::@5/(byte) render_moving::xpos#1 )
  [142] (byte) render_moving::i#4 ← phi( render_moving::@2/(byte) render_moving::i#3 render_moving::@5/(byte) render_moving::i#2 )
  [143] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4)
  [144] (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4
  [145] if((byte) render_moving::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_moving::@5
  to:render_moving::@6
render_moving::@6: scope:[render_moving]  from render_moving::@4
  [146] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68
  to:render_moving::@5
render_moving::@5: scope:[render_moving]  from render_moving::@4 render_moving::@6
  [147] (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2
  [148] (byte) render_moving::c#1 ← ++ (byte) render_moving::c#2
  [149] if((byte) render_moving::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_moving::@4
  to:render_moving::@3
render_playfield: scope:[render_playfield]  from main::@14 main::@7
  [150] (byte) render_screen_render#22 ← phi( main::@7/(byte~) render_screen_render#70 main::@14/(byte/signed byte/word/signed word/dword/signed dword) $40 )
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  [151] (byte) render_playfield::i#3 ← phi( render_playfield/(const byte) PLAYFIELD_COLS#0*(byte/signed byte/word/signed word/dword/signed dword) 2 render_playfield::@3/(byte) render_playfield::i#1 )
  [151] (byte) render_playfield::l#2 ← phi( render_playfield/(byte/signed byte/word/signed word/dword/signed dword) 2 render_playfield::@3/(byte) render_playfield::l#1 )
  [152] (byte~) render_playfield::$2 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [153] (byte~) render_playfield::$3 ← (byte) render_screen_render#22 + (byte~) render_playfield::$2
  [154] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$3)
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  [155] (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@2/(byte) render_playfield::c#1 )
  [155] (byte*) render_playfield::screen_line#2 ← phi( render_playfield::@1/(byte*) render_playfield::screen_line#0 render_playfield::@2/(byte*) render_playfield::screen_line#1 )
  [155] (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  [156] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2)
  [157] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2
  [158] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  [159] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2
  [160] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  [161] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2
  [162] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  [163] return 
  to:@return
play_movement: scope:[play_movement]  from main::@4
  [164] (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#0
  [165] call play_move_down 
  [166] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3
  to:play_movement::@2
play_movement::@2: scope:[play_movement]  from play_movement
  [167] (byte~) play_movement::$0 ← (byte) play_move_down::return#0
  [168] (byte) play_movement::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) play_movement::$0
  [169] if((byte) game_over#15==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_movement::@1
  to:play_movement::@return
play_movement::@return: scope:[play_movement]  from play_movement::@2 play_movement::@4
  [170] (byte) current_xpos#19 ← phi( play_movement::@2/(byte) current_xpos#22 play_movement::@4/(byte) current_xpos#26 )
  [170] (byte*) current_piece_gfx#18 ← phi( play_movement::@2/(byte*) current_piece_gfx#20 play_movement::@4/(byte*) current_piece_gfx#21 )
  [170] (byte) current_orientation#17 ← phi( play_movement::@2/(byte) current_orientation#20 play_movement::@4/(byte) current_orientation#25 )
  [170] (byte) play_movement::return#2 ← phi( play_movement::@2/(byte) play_movement::render#1 play_movement::@4/(byte) play_movement::return#0 )
  [171] return 
  to:@return
play_movement::@1: scope:[play_movement]  from play_movement::@2
  [172] (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#0
  [173] call play_move_leftright 
  [174] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
  to:play_movement::@3
play_movement::@3: scope:[play_movement]  from play_movement::@1
  [175] (byte~) play_movement::$3 ← (byte) play_move_leftright::return#0
  [176] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3
  [177] (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#0
  [178] call play_move_rotate 
  [179] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
  to:play_movement::@4
play_movement::@4: scope:[play_movement]  from play_movement::@3
  [180] (byte~) play_movement::$4 ← (byte) play_move_rotate::return#0
  [181] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4
  to:play_movement::@return
play_move_rotate: scope:[play_move_rotate]  from play_movement::@3
  [182] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1
  to:play_move_rotate::@4
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate
  [183] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@4 play_move_rotate::@5 play_move_rotate::@6
  [184] (byte*) current_piece_gfx#21 ← phi( play_move_rotate::@5/(byte*) current_piece_gfx#7 play_move_rotate::@6/(byte*) current_piece_gfx#20 play_move_rotate::@4/(byte*) current_piece_gfx#20 )
  [184] (byte) current_orientation#25 ← phi( play_move_rotate::@5/(byte) current_orientation#7 play_move_rotate::@6/(byte) current_orientation#20 play_move_rotate::@4/(byte) current_orientation#20 )
  [184] (byte) play_move_rotate::return#2 ← phi( play_move_rotate::@5/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_rotate::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_rotate::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [185] return 
  to:@return
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@4
  [186] (byte/signed word/word/dword/signed dword~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte/signed byte/word/signed word/dword/signed dword) $10
  [187] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$5 & (byte/signed byte/word/signed word/dword/signed dword) $3f
  to:play_move_rotate::@3
play_move_rotate::@3: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  [188] (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  [189] (byte) play_collision::xpos#3 ← (byte) current_xpos#26
  [190] (byte) play_collision::ypos#3 ← (byte) current_ypos#19
  [191] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  [192] (byte*~) current_piece#103 ← (byte*) current_piece#15
  [193] call play_collision 
  [194] (byte) play_collision::return#14 ← (byte) play_collision::return#15
  to:play_move_rotate::@6
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate::@3
  [195] (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14
  [196] if((byte~) play_move_rotate::$2!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return
  to:play_move_rotate::@5
play_move_rotate::@5: scope:[play_move_rotate]  from play_move_rotate::@6
  [197] (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#3
  [198] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7
  to:play_move_rotate::@return
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  [199] (byte/signed word/word/dword/signed dword~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte/signed byte/word/signed word/dword/signed dword) $10
  [200] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$7 & (byte/signed byte/word/signed word/dword/signed dword) $3f
  to:play_move_rotate::@3
play_collision: scope:[play_collision]  from play_move_down::@8 play_move_leftright::@1 play_move_leftright::@3 play_move_rotate::@3 play_spawn_current
  [201] (byte) play_collision::xpos#6 ← phi( play_move_down::@8/(byte) play_collision::xpos#0 play_move_leftright::@1/(byte) play_collision::xpos#1 play_move_leftright::@3/(byte) play_collision::xpos#2 play_move_rotate::@3/(byte) play_collision::xpos#3 play_spawn_current/(byte) play_collision::xpos#4 )
  [201] (byte) play_collision::ypos#5 ← phi( play_move_down::@8/(byte) play_collision::ypos#0 play_move_leftright::@1/(byte) play_collision::ypos#1 play_move_leftright::@3/(byte) play_collision::ypos#2 play_move_rotate::@3/(byte) play_collision::ypos#3 play_spawn_current/(byte) play_collision::ypos#4 )
  [201] (byte) play_collision::orientation#5 ← phi( play_move_down::@8/(byte) play_collision::orientation#0 play_move_leftright::@1/(byte) play_collision::orientation#1 play_move_leftright::@3/(byte) play_collision::orientation#2 play_move_rotate::@3/(byte) play_collision::orientation#3 play_spawn_current/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [201] (byte*) current_piece#17 ← phi( play_move_down::@8/(byte*~) current_piece#100 play_move_leftright::@1/(byte*~) current_piece#101 play_move_leftright::@3/(byte*~) current_piece#102 play_move_rotate::@3/(byte*~) current_piece#103 play_spawn_current/(byte*~) current_piece#104 )
  [202] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5
  [203] (byte) play_collision::ypos2#0 ← (byte) play_collision::ypos#5 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_collision::@1
play_collision::@1: scope:[play_collision]  from play_collision play_collision::@9
  [204] (byte) play_collision::l#6 ← phi( play_collision/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@9/(byte) play_collision::l#1 )
  [204] (byte) play_collision::i#3 ← phi( play_collision/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@9/(byte~) play_collision::i#11 )
  [204] (byte) play_collision::ypos2#2 ← phi( play_collision/(byte) play_collision::ypos2#0 play_collision::@9/(byte) play_collision::ypos2#1 )
  [205] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_collision::ypos2#2)
  [206] (byte~) play_collision::col#9 ← (byte) play_collision::xpos#6
  to:play_collision::@2
play_collision::@2: scope:[play_collision]  from play_collision::@1 play_collision::@10
  [207] (byte) play_collision::c#2 ← phi( play_collision::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@10/(byte) play_collision::c#1 )
  [207] (byte) play_collision::col#2 ← phi( play_collision::@1/(byte~) play_collision::col#9 play_collision::@10/(byte) play_collision::col#1 )
  [207] (byte) play_collision::i#2 ← phi( play_collision::@1/(byte) play_collision::i#3 play_collision::@10/(byte~) play_collision::i#13 )
  [208] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2
  [209] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3
  to:play_collision::@7
play_collision::@7: scope:[play_collision]  from play_collision::@2
  [210] if((byte) play_collision::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto play_collision::@4
  to:play_collision::@return
play_collision::@return: scope:[play_collision]  from play_collision::@4 play_collision::@5 play_collision::@6 play_collision::@7 play_collision::@8
  [211] (byte) play_collision::return#15 ← phi( play_collision::@5/(const byte) COLLISION_RIGHT#0 play_collision::@6/(const byte) COLLISION_PLAYFIELD#0 play_collision::@7/(const byte) COLLISION_BOTTOM#0 play_collision::@8/(const byte) COLLISION_NONE#0 play_collision::@4/(const byte) COLLISION_LEFT#0 )
  [212] return 
  to:@return
play_collision::@4: scope:[play_collision]  from play_collision::@7
  [213] (byte~) play_collision::$7 ← (byte) play_collision::col#2 & (byte/word/signed word/dword/signed dword) $80
  [214] if((byte~) play_collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@5
  to:play_collision::@return
play_collision::@5: scope:[play_collision]  from play_collision::@4
  [215] if((byte) play_collision::col#2<(const byte) PLAYFIELD_COLS#0) goto play_collision::@6
  to:play_collision::@return
play_collision::@6: scope:[play_collision]  from play_collision::@5
  [216] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3
  to:play_collision::@return
play_collision::@3: scope:[play_collision]  from play_collision::@2 play_collision::@6
  [217] (byte) play_collision::col#1 ← ++ (byte) play_collision::col#2
  [218] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2
  [219] if((byte) play_collision::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@10
  to:play_collision::@8
play_collision::@8: scope:[play_collision]  from play_collision::@3
  [220] (byte) play_collision::ypos2#1 ← (byte) play_collision::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [221] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6
  [222] if((byte) play_collision::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@9
  to:play_collision::@return
play_collision::@9: scope:[play_collision]  from play_collision::@8
  [223] (byte~) play_collision::i#11 ← (byte) play_collision::i#1
  to:play_collision::@1
play_collision::@10: scope:[play_collision]  from play_collision::@3
  [224] (byte~) play_collision::i#13 ← (byte) play_collision::i#1
  to:play_collision::@2
play_move_leftright: scope:[play_move_leftright]  from play_movement::@1
  [225] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1
  to:play_move_leftright::@2
play_move_leftright::@2: scope:[play_move_leftright]  from play_move_leftright
  [226] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return
  to:play_move_leftright::@3
play_move_leftright::@3: scope:[play_move_leftright]  from play_move_leftright::@2
  [227] (byte) play_collision::xpos#2 ← (byte) current_xpos#22 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [228] (byte) play_collision::ypos#2 ← (byte) current_ypos#19
  [229] (byte) play_collision::orientation#2 ← (byte) current_orientation#20
  [230] (byte*~) current_piece#102 ← (byte*) current_piece#15
  [231] call play_collision 
  [232] (byte) play_collision::return#13 ← (byte) play_collision::return#15
  to:play_move_leftright::@7
play_move_leftright::@7: scope:[play_move_leftright]  from play_move_leftright::@3
  [233] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13
  [234] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@4
play_move_leftright::@4: scope:[play_move_leftright]  from play_move_leftright::@7
  [235] (byte) current_xpos#6 ← ++ (byte) current_xpos#22
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@2 play_move_leftright::@4 play_move_leftright::@5 play_move_leftright::@6 play_move_leftright::@7
  [236] (byte) current_xpos#26 ← phi( play_move_leftright::@6/(byte) current_xpos#22 play_move_leftright::@4/(byte) current_xpos#6 play_move_leftright::@5/(byte) current_xpos#8 play_move_leftright::@7/(byte) current_xpos#22 play_move_leftright::@2/(byte) current_xpos#22 )
  [236] (byte) play_move_leftright::return#2 ← phi( play_move_leftright::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_leftright::@4/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_leftright::@5/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_leftright::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_leftright::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [237] return 
  to:@return
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  [238] (byte) play_collision::xpos#1 ← (byte) current_xpos#22 - (byte/signed byte/word/signed word/dword/signed dword) 1
  [239] (byte) play_collision::ypos#1 ← (byte) current_ypos#19
  [240] (byte) play_collision::orientation#1 ← (byte) current_orientation#20
  [241] (byte*~) current_piece#101 ← (byte*) current_piece#15
  [242] call play_collision 
  [243] (byte) play_collision::return#1 ← (byte) play_collision::return#15
  to:play_move_leftright::@6
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright::@1
  [244] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
  [245] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@5
play_move_leftright::@5: scope:[play_move_leftright]  from play_move_leftright::@6
  [246] (byte) current_xpos#8 ← -- (byte) current_xpos#22
  to:play_move_leftright::@return
play_move_down: scope:[play_move_down]  from play_movement
  [247] (byte) current_movedown_counter#12 ← ++ (byte) current_movedown_counter#16
  [248] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1
  to:play_move_down::@4
play_move_down::@4: scope:[play_move_down]  from play_move_down
  [249] phi()
  to:play_move_down::@1
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@4
  [250] (byte) play_move_down::movedown#10 ← phi( play_move_down/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@4/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [251] call keyboard_event_pressed 
  [252] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
  to:play_move_down::@12
play_move_down::@12: scope:[play_move_down]  from play_move_down::@1
  [253] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  [254] if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2
  to:play_move_down::@5
play_move_down::@5: scope:[play_move_down]  from play_move_down::@12
  [255] if((byte) current_movedown_counter#12<(const byte) current_movedown_fast#0) goto play_move_down::@2
  to:play_move_down::@6
play_move_down::@6: scope:[play_move_down]  from play_move_down::@5
  [256] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10
  to:play_move_down::@2
play_move_down::@2: scope:[play_move_down]  from play_move_down::@12 play_move_down::@5 play_move_down::@6
  [257] (byte) play_move_down::movedown#7 ← phi( play_move_down::@5/(byte) play_move_down::movedown#10 play_move_down::@12/(byte) play_move_down::movedown#10 play_move_down::@6/(byte) play_move_down::movedown#2 )
  [258] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@2
  [259] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@3
play_move_down::@3: scope:[play_move_down]  from play_move_down::@2 play_move_down::@7
  [260] (byte) play_move_down::movedown#6 ← phi( play_move_down::@2/(byte) play_move_down::movedown#7 play_move_down::@7/(byte) play_move_down::movedown#3 )
  [261] if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@return
  to:play_move_down::@8
play_move_down::@8: scope:[play_move_down]  from play_move_down::@3
  [262] (byte) play_collision::ypos#0 ← (byte) current_ypos#100 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [263] (byte) play_collision::xpos#0 ← (byte) current_xpos#124
  [264] (byte) play_collision::orientation#0 ← (byte) current_orientation#13
  [265] (byte*~) current_piece#100 ← (byte*) current_piece#10
  [266] call play_collision 
  [267] (byte) play_collision::return#0 ← (byte) play_collision::return#15
  to:play_move_down::@13
play_move_down::@13: scope:[play_move_down]  from play_move_down::@8
  [268] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
  [269] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@10
  to:play_move_down::@9
play_move_down::@9: scope:[play_move_down]  from play_move_down::@13
  [270] phi()
  [271] call play_lock_current 
  to:play_move_down::@14
play_move_down::@14: scope:[play_move_down]  from play_move_down::@9
  [272] phi()
  [273] call play_remove_lines 
  [274] (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::removed#8
  to:play_move_down::@15
play_move_down::@15: scope:[play_move_down]  from play_move_down::@14
  [275] (byte) play_move_down::removed#0 ← (byte) play_remove_lines::return#0
  [276] (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0
  [277] call play_update_score 
  to:play_move_down::@16
play_move_down::@16: scope:[play_move_down]  from play_move_down::@15
  [278] phi()
  [279] call play_spawn_current 
  [280] (byte*~) current_piece#106 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$0)
  to:play_move_down::@11
play_move_down::@11: scope:[play_move_down]  from play_move_down::@10 play_move_down::@16
  [281] (byte) next_piece_idx#30 ← phi( play_move_down::@10/(byte) next_piece_idx#10 play_move_down::@16/(byte) play_spawn_current::piece_idx#2 )
  [281] (byte) game_over#27 ← phi( play_move_down::@10/(byte) game_over#10 play_move_down::@16/(byte) game_over#52 )
  [281] (byte) current_xpos#43 ← phi( play_move_down::@10/(byte) current_xpos#124 play_move_down::@16/(byte) current_xpos#103 )
  [281] (byte*) current_piece_gfx#35 ← phi( play_move_down::@10/(byte*) current_piece_gfx#114 play_move_down::@16/(byte*) current_piece_gfx#74 )
  [281] (byte) current_orientation#37 ← phi( play_move_down::@10/(byte) current_orientation#13 play_move_down::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [281] (byte) current_piece_char#29 ← phi( play_move_down::@10/(byte) current_piece_char#10 play_move_down::@16/(byte) current_piece_char#5 )
  [281] (byte*) current_piece#28 ← phi( play_move_down::@10/(byte*) current_piece#10 play_move_down::@16/(byte*~) current_piece#106 )
  [281] (byte) level_bcd#31 ← phi( play_move_down::@10/(byte) level_bcd#11 play_move_down::@16/(byte) level_bcd#19 )
  [281] (byte) current_movedown_slow#37 ← phi( play_move_down::@10/(byte) current_movedown_slow#14 play_move_down::@16/(byte) current_movedown_slow#23 )
  [281] (byte) level#33 ← phi( play_move_down::@10/(byte) level#10 play_move_down::@16/(byte) level#19 )
  [281] (dword) score_bcd#26 ← phi( play_move_down::@10/(dword) score_bcd#18 play_move_down::@16/(dword) score_bcd#16 )
  [281] (word) lines_bcd#26 ← phi( play_move_down::@10/(word) lines_bcd#19 play_move_down::@16/(word) lines_bcd#17 )
  [281] (byte) current_ypos#38 ← phi( play_move_down::@10/(byte) current_ypos#3 play_move_down::@16/(byte) current_ypos#6 )
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@11 play_move_down::@3
  [282] (byte) next_piece_idx#16 ← phi( play_move_down::@11/(byte) next_piece_idx#30 play_move_down::@3/(byte) next_piece_idx#10 )
  [282] (byte) game_over#15 ← phi( play_move_down::@11/(byte) game_over#27 play_move_down::@3/(byte) game_over#10 )
  [282] (byte) current_xpos#22 ← phi( play_move_down::@11/(byte) current_xpos#43 play_move_down::@3/(byte) current_xpos#124 )
  [282] (byte*) current_piece_gfx#20 ← phi( play_move_down::@11/(byte*) current_piece_gfx#35 play_move_down::@3/(byte*) current_piece_gfx#114 )
  [282] (byte) current_orientation#20 ← phi( play_move_down::@11/(byte) current_orientation#37 play_move_down::@3/(byte) current_orientation#13 )
  [282] (byte) current_piece_char#16 ← phi( play_move_down::@11/(byte) current_piece_char#29 play_move_down::@3/(byte) current_piece_char#10 )
  [282] (byte*) current_piece#15 ← phi( play_move_down::@11/(byte*) current_piece#28 play_move_down::@3/(byte*) current_piece#10 )
  [282] (byte) level_bcd#17 ← phi( play_move_down::@11/(byte) level_bcd#31 play_move_down::@3/(byte) level_bcd#11 )
  [282] (byte) current_movedown_slow#21 ← phi( play_move_down::@11/(byte) current_movedown_slow#37 play_move_down::@3/(byte) current_movedown_slow#14 )
  [282] (byte) level#17 ← phi( play_move_down::@11/(byte) level#33 play_move_down::@3/(byte) level#10 )
  [282] (dword) score_bcd#14 ← phi( play_move_down::@11/(dword) score_bcd#26 play_move_down::@3/(dword) score_bcd#18 )
  [282] (word) lines_bcd#15 ← phi( play_move_down::@11/(word) lines_bcd#26 play_move_down::@3/(word) lines_bcd#19 )
  [282] (byte) current_ypos#19 ← phi( play_move_down::@11/(byte) current_ypos#38 play_move_down::@3/(byte) current_ypos#100 )
  [282] (byte) current_movedown_counter#14 ← phi( play_move_down::@11/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@3/(byte) current_movedown_counter#12 )
  [282] (byte) play_move_down::return#3 ← phi( play_move_down::@11/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_down::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [283] return 
  to:@return
play_move_down::@10: scope:[play_move_down]  from play_move_down::@13
  [284] (byte) current_ypos#3 ← ++ (byte) current_ypos#100
  to:play_move_down::@11
play_spawn_current: scope:[play_spawn_current]  from main::@12 main::@13 play_move_down::@16
  [285] (byte) game_over#65 ← phi( main::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@13/(byte) game_over#52 play_move_down::@16/(byte) game_over#10 )
  [285] (byte) next_piece_idx#17 ← phi( main::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@13/(byte) play_spawn_current::piece_idx#2 play_move_down::@16/(byte) next_piece_idx#10 )
  [286] (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#17
  [287] (byte~) play_spawn_current::$0 ← (byte) play_spawn_current::current_piece_idx#0 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [288] (byte) current_piece_char#5 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::current_piece_idx#0)
  [289] (byte*) current_piece_gfx#74 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$0) + (byte/signed byte/word/signed word/dword/signed dword) 0
  [290] (byte) current_xpos#103 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::current_piece_idx#0)
  [291] (byte) current_ypos#6 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::current_piece_idx#0)
  [292] (byte) play_collision::xpos#4 ← (byte) current_xpos#103
  [293] (byte) play_collision::ypos#4 ← (byte) current_ypos#6
  [294] (byte*~) current_piece#104 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$0)
  [295] call play_collision 
  [296] (byte) play_collision::return#10 ← (byte) play_collision::return#15
  to:play_spawn_current::@4
play_spawn_current::@4: scope:[play_spawn_current]  from play_spawn_current
  [297] (byte~) play_spawn_current::$2 ← (byte) play_collision::return#10
  [298] if((byte~) play_spawn_current::$2!=(const byte) COLLISION_PLAYFIELD#0) goto play_spawn_current::@5
  to:play_spawn_current::@1
play_spawn_current::@1: scope:[play_spawn_current]  from play_spawn_current::@4 play_spawn_current::@5
  [299] (byte) game_over#52 ← phi( play_spawn_current::@5/(byte) game_over#65 play_spawn_current::@4/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  to:play_spawn_current::@2
play_spawn_current::@2: scope:[play_spawn_current]  from play_spawn_current::@1 play_spawn_current::@3
  [300] (byte) play_spawn_current::piece_idx#2 ← phi( play_spawn_current::@1/(byte/signed byte/word/signed word/dword/signed dword) 7 play_spawn_current::@3/(byte) play_spawn_current::piece_idx#1 )
  [301] if((byte) play_spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto play_spawn_current::sid_rnd1
  to:play_spawn_current::@return
play_spawn_current::@return: scope:[play_spawn_current]  from play_spawn_current::@2
  [302] return 
  to:@return
play_spawn_current::sid_rnd1: scope:[play_spawn_current]  from play_spawn_current::@2
  [303] (byte) play_spawn_current::sid_rnd1_return#0 ← *((const byte*) SID_VOICE3_OSC#0)
  to:play_spawn_current::@3
play_spawn_current::@3: scope:[play_spawn_current]  from play_spawn_current::sid_rnd1
  [304] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte/signed byte/word/signed word/dword/signed dword) 7
  to:play_spawn_current::@2
play_spawn_current::@5: scope:[play_spawn_current]  from play_spawn_current::@4
  [305] phi()
  to:play_spawn_current::@1
play_update_score: scope:[play_update_score]  from play_move_down::@15
  [306] if((byte) play_update_score::removed#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_update_score::@return
  to:play_update_score::@1
play_update_score::@1: scope:[play_update_score]  from play_update_score
  [307] (byte~) play_update_score::$2 ← < (word) lines_bcd#19
  [308] (byte) play_update_score::lines_before#0 ← (byte~) play_update_score::$2 & (byte/word/signed word/dword/signed dword) $f0
  [309] (byte~) play_update_score::$4 ← (byte) play_update_score::removed#0 << (byte/signed byte/word/signed word/dword/signed dword) 2
  [310] (dword) play_update_score::add_bcd#0 ← *((const dword[5]) score_add_bcd#0 + (byte~) play_update_score::$4)
  asm { sed  }
  [312] (word) lines_bcd#30 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0
  [313] (dword) score_bcd#30 ← (dword) score_bcd#18 + (dword) play_update_score::add_bcd#0
  asm { cld  }
  [315] (byte~) play_update_score::$5 ← < (word) lines_bcd#30
  [316] (byte) play_update_score::lines_after#0 ← (byte~) play_update_score::$5 & (byte/word/signed word/dword/signed dword) $f0
  [317] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return
  to:play_update_score::@2
play_update_score::@2: scope:[play_update_score]  from play_update_score::@1
  [318] phi()
  [319] call play_increase_level 
  to:play_update_score::@return
play_update_score::@return: scope:[play_update_score]  from play_update_score play_update_score::@1 play_update_score::@2
  [320] (byte) level_bcd#19 ← phi( play_update_score/(byte) level_bcd#11 play_update_score::@1/(byte) level_bcd#11 play_update_score::@2/(byte) level_bcd#64 )
  [320] (byte) current_movedown_slow#23 ← phi( play_update_score/(byte) current_movedown_slow#14 play_update_score::@1/(byte) current_movedown_slow#14 play_update_score::@2/(byte) current_movedown_slow#69 )
  [320] (byte) level#19 ← phi( play_update_score/(byte) level#10 play_update_score::@1/(byte) level#10 play_update_score::@2/(byte) level#21 )
  [320] (dword) score_bcd#16 ← phi( play_update_score/(dword) score_bcd#18 play_update_score::@1/(dword) score_bcd#30 play_update_score::@2/(dword) score_bcd#30 )
  [320] (word) lines_bcd#17 ← phi( play_update_score/(word) lines_bcd#19 play_update_score::@1/(word) lines_bcd#30 play_update_score::@2/(word) lines_bcd#30 )
  [321] return 
  to:@return
play_increase_level: scope:[play_increase_level]  from play_update_score::@2
  [322] (byte) level#21 ← ++ (byte) level#10
  [323] if((byte) level#21>(byte/signed byte/word/signed word/dword/signed dword) $1d) goto play_increase_level::@1
  to:play_increase_level::@3
play_increase_level::@3: scope:[play_increase_level]  from play_increase_level
  [324] (byte) current_movedown_slow#10 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0 + (byte) level#21)
  to:play_increase_level::@1
play_increase_level::@1: scope:[play_increase_level]  from play_increase_level play_increase_level::@3
  [325] (byte) current_movedown_slow#69 ← phi( play_increase_level/(byte/signed byte/word/signed word/dword/signed dword) 1 play_increase_level::@3/(byte) current_movedown_slow#10 )
  [326] (byte) level_bcd#21 ← ++ (byte) level_bcd#11
  [327] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [328] if((byte~) play_increase_level::$1!=(byte/signed byte/word/signed word/dword/signed dword) $a) goto play_increase_level::@2
  to:play_increase_level::@4
play_increase_level::@4: scope:[play_increase_level]  from play_increase_level::@1
  [329] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte/signed byte/word/signed word/dword/signed dword) 6
  to:play_increase_level::@2
play_increase_level::@2: scope:[play_increase_level]  from play_increase_level::@1 play_increase_level::@4
  [330] (byte) level_bcd#64 ← phi( play_increase_level::@1/(byte) level_bcd#21 play_increase_level::@4/(byte) level_bcd#8 )
  asm { sed  }
  to:play_increase_level::@5
play_increase_level::@5: scope:[play_increase_level]  from play_increase_level::@2 play_increase_level::@5
  [332] (byte) play_increase_level::b#2 ← phi( play_increase_level::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 play_increase_level::@5/(byte) play_increase_level::b#1 )
  [333] (byte) play_increase_level::b4#0 ← (byte) play_increase_level::b#2 << (byte/signed byte/word/signed word/dword/signed dword) 2
  [334] *((const dword[5]) score_add_bcd#0 + (byte) play_increase_level::b4#0) ← *((const dword[5]) score_add_bcd#0 + (byte) play_increase_level::b4#0) + *((const dword[]) SCORE_BASE_BCD#0 + (byte) play_increase_level::b4#0)
  [335] (byte) play_increase_level::b#1 ← ++ (byte) play_increase_level::b#2
  [336] if((byte) play_increase_level::b#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto play_increase_level::@5
  to:play_increase_level::@6
play_increase_level::@6: scope:[play_increase_level]  from play_increase_level::@5
  asm { cld  }
  to:play_increase_level::@return
play_increase_level::@return: scope:[play_increase_level]  from play_increase_level::@6
  [338] return 
  to:@return
play_remove_lines: scope:[play_remove_lines]  from play_move_down::@14
  [339] phi()
  to:play_remove_lines::@1
play_remove_lines::@1: scope:[play_remove_lines]  from play_remove_lines play_remove_lines::@6
  [340] (byte) play_remove_lines::removed#11 ← phi( play_remove_lines/(byte/signed byte/word/signed word/dword/signed dword) 0 play_remove_lines::@6/(byte) play_remove_lines::removed#8 )
  [340] (byte) play_remove_lines::y#8 ← phi( play_remove_lines/(byte/signed byte/word/signed word/dword/signed dword) 0 play_remove_lines::@6/(byte) play_remove_lines::y#1 )
  [340] (byte) play_remove_lines::w#12 ← phi( play_remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@6/(byte) play_remove_lines::w#11 )
  [340] (byte) play_remove_lines::r#3 ← phi( play_remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@6/(byte) play_remove_lines::r#1 )
  to:play_remove_lines::@2
play_remove_lines::@2: scope:[play_remove_lines]  from play_remove_lines::@1 play_remove_lines::@3
  [341] (byte) play_remove_lines::full#4 ← phi( play_remove_lines::@1/(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@3/(byte) play_remove_lines::full#2 )
  [341] (byte) play_remove_lines::x#2 ← phi( play_remove_lines::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_remove_lines::@3/(byte) play_remove_lines::x#1 )
  [341] (byte) play_remove_lines::w#4 ← phi( play_remove_lines::@1/(byte) play_remove_lines::w#12 play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  [341] (byte) play_remove_lines::r#2 ← phi( play_remove_lines::@1/(byte) play_remove_lines::r#3 play_remove_lines::@3/(byte) play_remove_lines::r#1 )
  [342] (byte) play_remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::r#2)
  [343] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2
  [344] if((byte) play_remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_remove_lines::@9
  to:play_remove_lines::@3
play_remove_lines::@3: scope:[play_remove_lines]  from play_remove_lines::@2 play_remove_lines::@9
  [345] (byte) play_remove_lines::full#2 ← phi( play_remove_lines::@9/(byte) play_remove_lines::full#4 play_remove_lines::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [346] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0
  [347] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4
  [348] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2
  [349] if((byte) play_remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@2
  to:play_remove_lines::@4
play_remove_lines::@4: scope:[play_remove_lines]  from play_remove_lines::@3
  [350] if((byte) play_remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@6
  to:play_remove_lines::@5
play_remove_lines::@5: scope:[play_remove_lines]  from play_remove_lines::@4
  [351] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0
  [352] (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#11
  to:play_remove_lines::@6
play_remove_lines::@6: scope:[play_remove_lines]  from play_remove_lines::@4 play_remove_lines::@5
  [353] (byte) play_remove_lines::removed#8 ← phi( play_remove_lines::@4/(byte) play_remove_lines::removed#11 play_remove_lines::@5/(byte) play_remove_lines::removed#1 )
  [353] (byte) play_remove_lines::w#11 ← phi( play_remove_lines::@4/(byte) play_remove_lines::w#1 play_remove_lines::@5/(byte) play_remove_lines::w#2 )
  [354] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8
  [355] if((byte) play_remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@1
  to:play_remove_lines::@7
play_remove_lines::@7: scope:[play_remove_lines]  from play_remove_lines::@6 play_remove_lines::@8
  [356] (byte) play_remove_lines::w#6 ← phi( play_remove_lines::@8/(byte) play_remove_lines::w#3 play_remove_lines::@6/(byte) play_remove_lines::w#11 )
  [357] if((byte) play_remove_lines::w#6!=(byte/word/signed word/dword/signed dword) $ff) goto play_remove_lines::@8
  to:play_remove_lines::@return
play_remove_lines::@return: scope:[play_remove_lines]  from play_remove_lines::@7
  [358] return 
  to:@return
play_remove_lines::@8: scope:[play_remove_lines]  from play_remove_lines::@7
  [359] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [360] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6
  to:play_remove_lines::@7
play_remove_lines::@9: scope:[play_remove_lines]  from play_remove_lines::@2
  [361] phi()
  to:play_remove_lines::@3
play_lock_current: scope:[play_lock_current]  from play_move_down::@9
  [362] (byte) play_lock_current::ypos2#0 ← (byte) current_ypos#100 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_lock_current::@1
play_lock_current::@1: scope:[play_lock_current]  from play_lock_current play_lock_current::@6
  [363] (byte) play_lock_current::l#6 ← phi( play_lock_current/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@6/(byte) play_lock_current::l#1 )
  [363] (byte) play_lock_current::i#3 ← phi( play_lock_current/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@6/(byte~) play_lock_current::i#7 )
  [363] (byte) play_lock_current::ypos2#2 ← phi( play_lock_current/(byte) play_lock_current::ypos2#0 play_lock_current::@6/(byte) play_lock_current::ypos2#1 )
  [364] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_lock_current::ypos2#2)
  [365] (byte) play_lock_current::col#0 ← (byte) current_xpos#124
  to:play_lock_current::@2
play_lock_current::@2: scope:[play_lock_current]  from play_lock_current::@1 play_lock_current::@7
  [366] (byte) play_lock_current::c#2 ← phi( play_lock_current::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@7/(byte) play_lock_current::c#1 )
  [366] (byte) play_lock_current::col#2 ← phi( play_lock_current::@1/(byte) play_lock_current::col#0 play_lock_current::@7/(byte) play_lock_current::col#1 )
  [366] (byte) play_lock_current::i#2 ← phi( play_lock_current::@1/(byte) play_lock_current::i#3 play_lock_current::@7/(byte~) play_lock_current::i#9 )
  [367] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2
  [368] if(*((byte*) current_piece_gfx#114 + (byte) play_lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_lock_current::@3
  to:play_lock_current::@4
play_lock_current::@4: scope:[play_lock_current]  from play_lock_current::@2
  [369] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::col#2) ← (byte) current_piece_char#10
  to:play_lock_current::@3
play_lock_current::@3: scope:[play_lock_current]  from play_lock_current::@2 play_lock_current::@4
  [370] (byte) play_lock_current::col#1 ← ++ (byte) play_lock_current::col#2
  [371] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2
  [372] if((byte) play_lock_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@7
  to:play_lock_current::@5
play_lock_current::@5: scope:[play_lock_current]  from play_lock_current::@3
  [373] (byte) play_lock_current::ypos2#1 ← (byte) play_lock_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [374] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6
  [375] if((byte) play_lock_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@6
  to:play_lock_current::@return
play_lock_current::@return: scope:[play_lock_current]  from play_lock_current::@5
  [376] return 
  to:@return
play_lock_current::@6: scope:[play_lock_current]  from play_lock_current::@5
  [377] (byte~) play_lock_current::i#7 ← (byte) play_lock_current::i#1
  to:play_lock_current::@1
play_lock_current::@7: scope:[play_lock_current]  from play_lock_current::@3
  [378] (byte~) play_lock_current::i#9 ← (byte) play_lock_current::i#1
  to:play_lock_current::@2
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@17 keyboard_event_scan::@2 keyboard_event_scan::@3 play_move_down::@1
  [379] (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@1/(const byte) KEY_RSHIFT#0 keyboard_event_scan::@2/(const byte) KEY_CTRL#0 keyboard_event_scan::@17/(const byte) KEY_LSHIFT#0 keyboard_event_scan::@3/(const byte) KEY_COMMODORE#0 play_move_down::@1/(const byte) KEY_SPACE#0 )
  [380] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  [381] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0)
  [382] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [383] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1)
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [384] return 
  to:@return
keyboard_event_get: scope:[keyboard_event_get]  from main::@18
  [385] if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return
  to:keyboard_event_get::@1
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  [386] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13
  [387] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@1
  [388] (byte) keyboard_events_size#16 ← phi( keyboard_event_get/(byte) keyboard_events_size#13 keyboard_event_get::@1/(byte) keyboard_events_size#4 )
  [388] (byte) keyboard_event_get::return#2 ← phi( keyboard_event_get/(byte/word/signed word/dword/signed dword) $ff keyboard_event_get::@1/(byte) keyboard_event_get::return#1 )
  [389] return 
  to:@return
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@17
  [390] phi()
  to:keyboard_event_scan::@7
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@8
  [391] (byte) keyboard_events_size#30 ← phi( keyboard_event_scan/(byte) keyboard_events_size#19 keyboard_event_scan::@8/(byte) keyboard_events_size#13 )
  [391] (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#14 )
  [391] (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::row#1 )
  [392] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  [393] call keyboard_matrix_read 
  [394] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@7
  [395] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2
  [396] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@19
  [397] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8
  to:keyboard_event_scan::@8
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@16
  [398] (byte) keyboard_events_size#13 ← phi( keyboard_event_scan::@15/(byte) keyboard_events_size#29 keyboard_event_scan::@16/(byte) keyboard_events_size#30 )
  [398] (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#15 keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#1 )
  [399] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2
  [400] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@8
  [401] phi()
  [402] call keyboard_event_pressed 
  [403] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  [404] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
  [405] if((byte~) keyboard_event_scan::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@18
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [406] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@18 keyboard_event_scan::@20
  [407] (byte) keyboard_modifiers#11 ← phi( keyboard_event_scan::@18/(byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0 keyboard_event_scan::@20/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [408] call keyboard_event_pressed 
  [409] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [410] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
  [411] if((byte~) keyboard_event_scan::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@4
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@21
  [412] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#11 | (const byte) KEY_MODIFIER_RSHIFT#0
  to:keyboard_event_scan::@2
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@4
  [413] (byte) keyboard_modifiers#12 ← phi( keyboard_event_scan::@21/(byte) keyboard_modifiers#11 keyboard_event_scan::@4/(byte) keyboard_modifiers#3 )
  [414] call keyboard_event_pressed 
  [415] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  [416] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
  [417] if((byte~) keyboard_event_scan::$6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@22
  [418] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#12 | (const byte) KEY_MODIFIER_CTRL#0
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@5
  [419] (byte) keyboard_modifiers#13 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#12 keyboard_event_scan::@5/(byte) keyboard_modifiers#4 )
  [420] call keyboard_event_pressed 
  [421] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [422] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10
  [423] if((byte~) keyboard_event_scan::$9==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@6
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  [424] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#13 | (const byte) KEY_MODIFIER_COMMODORE#0
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@6
  [425] return 
  to:@return
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@10 keyboard_event_scan::@19
  [426] (byte) keyboard_events_size#10 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#29 keyboard_event_scan::@19/(byte) keyboard_events_size#30 )
  [426] (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#15 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#11 )
  [426] (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@19/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [427] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)
  [428] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [429] if((byte~) keyboard_event_scan::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@12
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [430] if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@12
  [431] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [432] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@14
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [433] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10
  [434] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9
  [435] (byte) keyboard_events_size#29 ← phi( keyboard_event_scan::@9/(byte) keyboard_events_size#10 keyboard_event_scan::@12/(byte) keyboard_events_size#10 keyboard_event_scan::@11/(byte) keyboard_events_size#1 keyboard_event_scan::@14/(byte) keyboard_events_size#2 )
  [436] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10
  [437] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2
  [438] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [439] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@8
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [440] (byte/word/dword~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) $40
  [441] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte/word/dword~) keyboard_event_scan::$23
  [442] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@10
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@7
  [443] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0)
  [444] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [445] return 
  to:@return
render_show: scope:[render_show]  from main::@3
  [446] if((byte) render_screen_show#16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_show::toD0181
  to:render_show::toD0182
render_show::toD0182: scope:[render_show]  from render_show
  [447] phi()
  to:render_show::@1
render_show::@1: scope:[render_show]  from render_show::toD0181 render_show::toD0182
  [448] (byte) render_show::d018val#3 ← phi( render_show::toD0181/(const byte) render_show::toD0181_return#0 render_show::toD0182/(const byte) render_show::toD0182_return#0 )
  [449] *((const byte*) D018#0) ← (byte) render_show::d018val#3
  [450] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0 + (byte) level#10)
  [451] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0 + (byte) level#10)
  [452] (byte) render_screen_showing#1 ← (byte) render_screen_show#16
  to:render_show::@return
render_show::@return: scope:[render_show]  from render_show::@1
  [453] return 
  to:@return
render_show::toD0181: scope:[render_show]  from render_show
  [454] phi()
  to:render_show::@1
play_init: scope:[play_init]  from main::@11
  [455] phi()
  to:play_init::@1
play_init::@1: scope:[play_init]  from play_init play_init::@1
  [456] (byte) play_init::idx#2 ← phi( play_init/(byte/signed byte/word/signed word/dword/signed dword) 0 play_init::@1/(byte) play_init::idx#1 )
  [456] (byte*) play_init::pli#2 ← phi( play_init/(const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 play_init::@1/(byte*) play_init::pli#1 )
  [456] (byte) play_init::j#2 ← phi( play_init/(byte/signed byte/word/signed word/dword/signed dword) 0 play_init::@1/(byte) play_init::j#1 )
  [457] (byte~) play_init::$2 ← (byte) play_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [458] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$2) ← (byte*) play_init::pli#2
  [459] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2
  [460] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0
  [461] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0
  [462] (byte) play_init::j#1 ← ++ (byte) play_init::j#2
  [463] if((byte) play_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_init::@1
  to:play_init::@2
play_init::@2: scope:[play_init]  from play_init::@1
  [464] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0
  [465] (byte) current_movedown_slow#1 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0)
  to:play_init::@3
play_init::@3: scope:[play_init]  from play_init::@2 play_init::@3
  [466] (byte) play_init::b#2 ← phi( play_init::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 play_init::@3/(byte) play_init::b#1 )
  [467] (byte) play_init::b4#0 ← (byte) play_init::b#2 << (byte/signed byte/word/signed word/dword/signed dword) 2
  [468] *((const dword[5]) score_add_bcd#0 + (byte) play_init::b4#0) ← *((const dword[]) SCORE_BASE_BCD#0 + (byte) play_init::b4#0)
  [469] (byte) play_init::b#1 ← ++ (byte) play_init::b#2
  [470] if((byte) play_init::b#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto play_init::@3
  to:play_init::@return
play_init::@return: scope:[play_init]  from play_init::@3
  [471] return 
  to:@return
sprites_irq_init: scope:[sprites_irq_init]  from main::@10
  asm { sei  }
  [473] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  asm { ldaCIA1_INTERRUPT  }
  [475] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [476] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [477] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  [478] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f
  [479] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0
  [480] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [481] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  [483] return 
  to:@return
sprites_init: scope:[sprites_init]  from main::@9
  [484] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) $f
  [485] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [486] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0)
  [487] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0)
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [488] (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) $18+(byte/signed byte/word/signed word/dword/signed dword) $f*(byte/signed byte/word/signed word/dword/signed dword) 8 sprites_init::@1/(byte) sprites_init::xpos#1 )
  [488] (byte) sprites_init::s#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) 0 sprites_init::@1/(byte) sprites_init::s#1 )
  [489] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [490] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  [491] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0
  [492] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) $18
  [493] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2
  [494] if((byte) sprites_init::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [495] return 
  to:@return
render_init: scope:[render_init]  from main::@8
  [496] phi()
  to:render_init::vicSelectGfxBank1
render_init::vicSelectGfxBank1: scope:[render_init]  from render_init
  [497] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  to:render_init::vicSelectGfxBank1_toDd001
render_init::vicSelectGfxBank1_toDd001: scope:[render_init]  from render_init::vicSelectGfxBank1
  [498] phi()
  to:render_init::vicSelectGfxBank1_@1
render_init::vicSelectGfxBank1_@1: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001
  [499] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0
  to:render_init::@2
render_init::@2: scope:[render_init]  from render_init::vicSelectGfxBank1_@1
  [500] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [501] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0
  [502] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0
  [503] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0)
  [504] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0)
  [505] *((const byte*) BGCOL4#0) ← (const byte) GREY#0
  [506] call render_screen_original 
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::@2
  [507] phi()
  [508] call render_screen_original 
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@1 render_init::@3
  [509] (byte*) render_init::li_2#2 ← phi( render_init::@1/(byte*) render_init::li_2#1 render_init::@3/(const byte*) PLAYFIELD_SCREEN_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) $28+(byte/signed byte/word/signed word/dword/signed dword) $10 )
  [509] (byte*) render_init::li_1#2 ← phi( render_init::@1/(byte*) render_init::li_1#1 render_init::@3/(const byte*) PLAYFIELD_SCREEN_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) $28+(byte/signed byte/word/signed word/dword/signed dword) $10 )
  [509] (byte) render_init::i#2 ← phi( render_init::@1/(byte) render_init::i#1 render_init::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [510] (byte~) render_init::$13 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [511] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$13) ← (byte*) render_init::li_1#2
  [512] (byte~) render_init::$14 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [513] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$14) ← (byte*) render_init::li_2#2
  [514] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [515] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [516] (byte) render_init::i#1 ← ++ (byte) render_init::i#2
  [517] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@1
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@1
  [518] return 
  to:@return
render_screen_original: scope:[render_screen_original]  from render_init::@2 render_init::@3
  [519] (byte*) render_screen_original::screen#9 ← phi( render_init::@2/(const byte*) PLAYFIELD_SCREEN_1#0 render_init::@3/(const byte*) PLAYFIELD_SCREEN_2#0 )
  to:render_screen_original::@1
render_screen_original::@1: scope:[render_screen_original]  from render_screen_original render_screen_original::@5
  [520] (byte) render_screen_original::y#6 ← phi( render_screen_original/(byte/signed byte/word/signed word/dword/signed dword) 0 render_screen_original::@5/(byte) render_screen_original::y#1 )
  [520] (byte*) render_screen_original::ocols#4 ← phi( render_screen_original/(const byte*) PLAYFIELD_COLORS_ORIGINAL#0+(byte/signed byte/word/signed word/dword/signed dword) $20*(byte/signed byte/word/signed word/dword/signed dword) 2 render_screen_original::@5/(byte*) render_screen_original::ocols#1 )
  [520] (byte*) render_screen_original::oscr#4 ← phi( render_screen_original/(const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte/signed byte/word/signed word/dword/signed dword) $20*(byte/signed byte/word/signed word/dword/signed dword) 2 render_screen_original::@5/(byte*) render_screen_original::oscr#1 )
  [520] (byte*) render_screen_original::cols#7 ← phi( render_screen_original/(const byte*) COLS#0 render_screen_original::@5/(byte*) render_screen_original::cols#3 )
  [520] (byte*) render_screen_original::screen#8 ← phi( render_screen_original/(byte*) render_screen_original::screen#9 render_screen_original::@5/(byte*) render_screen_original::screen#10 )
  to:render_screen_original::@2
render_screen_original::@2: scope:[render_screen_original]  from render_screen_original::@1 render_screen_original::@2
  [521] (byte) render_screen_original::x#4 ← phi( render_screen_original::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_screen_original::@2/(byte) render_screen_original::x#1 )
  [521] (byte*) render_screen_original::cols#4 ← phi( render_screen_original::@1/(byte*) render_screen_original::cols#7 render_screen_original::@2/(byte*) render_screen_original::cols#1 )
  [521] (byte*) render_screen_original::screen#5 ← phi( render_screen_original::@1/(byte*) render_screen_original::screen#8 render_screen_original::@2/(byte*) render_screen_original::screen#2 )
  [522] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0
  [523] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5
  [524] *((byte*) render_screen_original::cols#4) ← (const byte) BLACK#0
  [525] (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4
  [526] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4
  [527] if((byte) render_screen_original::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_screen_original::@2
  to:render_screen_original::@3
render_screen_original::@3: scope:[render_screen_original]  from render_screen_original::@2 render_screen_original::@3
  [528] (byte) render_screen_original::x#5 ← phi( render_screen_original::@2/(byte) render_screen_original::x#1 render_screen_original::@3/(byte) render_screen_original::x#2 )
  [528] (byte*) render_screen_original::cols#5 ← phi( render_screen_original::@2/(byte*) render_screen_original::cols#1 render_screen_original::@3/(byte*) render_screen_original::cols#2 )
  [528] (byte*) render_screen_original::ocols#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::ocols#4 render_screen_original::@3/(byte*) render_screen_original::ocols#1 )
  [528] (byte*) render_screen_original::screen#6 ← phi( render_screen_original::@2/(byte*) render_screen_original::screen#2 render_screen_original::@3/(byte*) render_screen_original::screen#3 )
  [528] (byte*) render_screen_original::oscr#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::oscr#4 render_screen_original::@3/(byte*) render_screen_original::oscr#1 )
  [529] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2)
  [530] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6
  [531] (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2
  [532] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2)
  [533] (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5
  [534] (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2
  [535] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5
  [536] if((byte) render_screen_original::x#2!=(byte/signed byte/word/signed word/dword/signed dword) $24) goto render_screen_original::@3
  to:render_screen_original::@4
render_screen_original::@4: scope:[render_screen_original]  from render_screen_original::@3 render_screen_original::@4
  [537] (byte) render_screen_original::x#6 ← phi( render_screen_original::@3/(byte) render_screen_original::x#2 render_screen_original::@4/(byte) render_screen_original::x#3 )
  [537] (byte*) render_screen_original::cols#6 ← phi( render_screen_original::@3/(byte*) render_screen_original::cols#2 render_screen_original::@4/(byte*) render_screen_original::cols#3 )
  [537] (byte*) render_screen_original::screen#7 ← phi( render_screen_original::@3/(byte*) render_screen_original::screen#3 render_screen_original::@4/(byte*) render_screen_original::screen#10 )
  [538] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0
  [539] (byte*) render_screen_original::screen#10 ← ++ (byte*) render_screen_original::screen#7
  [540] *((byte*) render_screen_original::cols#6) ← (const byte) BLACK#0
  [541] (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6
  [542] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6
  [543] if((byte) render_screen_original::x#3!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto render_screen_original::@4
  to:render_screen_original::@5
render_screen_original::@5: scope:[render_screen_original]  from render_screen_original::@4
  [544] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#6
  [545] if((byte) render_screen_original::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto render_screen_original::@1
  to:render_screen_original::@return
render_screen_original::@return: scope:[render_screen_original]  from render_screen_original::@5
  [546] return 
  to:@return
sid_rnd_init: scope:[sid_rnd_init]  from main
  [547] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) $ffff
  [548] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  [549] return 
  to:@return
sprites_irq: scope:[sprites_irq]  from
  asm { cld  }
  [551] (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#0
  [552] *((const byte*) SPRITES_YPOS#0) ← (byte) sprites_irq::ypos#0
  [553] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ypos#0
  [554] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) sprites_irq::ypos#0
  [555] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) sprites_irq::ypos#0
  [556] (byte/signed word/word/dword/signed dword~) sprites_irq::$0 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [557] (byte) sprites_irq::raster_sprite_gfx_modify#0 ← (byte/signed word/word/dword/signed dword~) sprites_irq::$0
  to:sprites_irq::@8
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq sprites_irq::@8
  [558] if(*((const byte*) RASTER#0)<(byte) sprites_irq::raster_sprite_gfx_modify#0) goto sprites_irq::@8
  to:sprites_irq::@9
sprites_irq::@9: scope:[sprites_irq]  from sprites_irq::@8
  [559] (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#0
  [560] if((byte) render_screen_showing#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sprites_irq::@1
  to:sprites_irq::@10
sprites_irq::@10: scope:[sprites_irq]  from sprites_irq::@9
  [561] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) sprites_irq::ptr#0
  [562] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0
  [563] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#3
  [564] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#3
  [565] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3
  [566] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#4
  to:sprites_irq::@2
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@1 sprites_irq::@10
  [567] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0
  [568] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 9) goto sprites_irq::@3
  to:sprites_irq::@6
sprites_irq::@6: scope:[sprites_irq]  from sprites_irq::@2
  [569] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) $a) goto sprites_irq::@4
  to:sprites_irq::@7
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@6
  [570] (byte) irq_raster_next#3 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) $14
  [571] (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) $15
  [572] (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3
  to:sprites_irq::@5
sprites_irq::@5: scope:[sprites_irq]  from sprites_irq::@11 sprites_irq::@4 sprites_irq::@7
  [573] (byte) irq_raster_next#4 ← phi( sprites_irq::@11/(byte) irq_raster_next#1 sprites_irq::@4/(byte) irq_raster_next#2 sprites_irq::@7/(byte) irq_raster_next#3 )
  [574] *((const byte*) RASTER#0) ← (byte) irq_raster_next#4
  [575] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:sprites_irq::@return
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@5
  [576] return 
  to:@return
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@6
  [577] (byte) irq_cnt#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [578] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0
  [579] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) $15
  [580] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3
  to:sprites_irq::@5
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2
  [581] (byte) irq_raster_next#1 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) $15
  [582] (byte) irq_sprite_ypos#1 ← (const byte) SPRITES_FIRST_YPOS#0
  to:sprites_irq::toSpritePtr2
sprites_irq::toSpritePtr2: scope:[sprites_irq]  from sprites_irq::@3
  [583] phi()
  to:sprites_irq::@11
sprites_irq::@11: scope:[sprites_irq]  from sprites_irq::toSpritePtr2
  [584] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0
  to:sprites_irq::@5
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq::@9
  [585] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) sprites_irq::ptr#0
  [586] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0
  [587] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#1
  [588] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#1
  [589] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1
  [590] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#2
  to:sprites_irq::@2
