Resolved forward reference MEGA_LOGO to (const byte*) MEGA_LOGO
Resolved forward reference MEGA_LOGO to (const byte*) MEGA_LOGO
Resolved forward reference PAL_RED to (const byte*) PAL_RED
Resolved forward reference PAL_GREEN to (const byte*) PAL_GREEN
Resolved forward reference PAL_BLUE to (const byte*) PAL_BLUE
Resolved forward reference irq1 to interrupt(HARDWARE_STACK)(void()) irq1()
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main
  (byte) memset::c#4 ← phi( main/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( main/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( main/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@3/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#5 ← phi( memset::@3/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@3/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (number) $47
  *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (number) $53
  *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | (number) $40
  *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | (number) $40
  (void*) memset::str#0 ← (void*)(const nomodify byte*) SCREEN
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28*(number) $19
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:main::@7
main::@7: scope:[main]  from main
  asm { lda#0  }
  call *((const void()*) songInit) 
  (byte) main::i1#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@7
  (byte) main::i1#2 ← phi( main::@2/(byte) main::i1#1 main::@7/(byte) main::i1#0 )
  (byte~) main::$2 ← sizeof  (const byte*) MEGA_LOGO
  (bool~) main::$3 ← (byte) main::i1#2 < (byte~) main::$2
  if((bool~) main::$3) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (byte) main::i1#3 ← phi( main::@1/(byte) main::i1#2 )
  *((const nomodify byte*) SCREEN+(number) 3*(number) $28 + (byte) main::i1#3) ← *((const byte*) MEGA_LOGO + (byte) main::i1#3)
  (byte) main::i1#1 ← ++ (byte) main::i1#3
  to:main::@1
main::@3: scope:[main]  from main::@1
  (byte) main::i#0 ← (byte) 0
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte) main::i#2 ← phi( main::@3/(byte) main::i#0 main::@4/(byte) main::i#1 )
  *((const nomodify byte*) PALETTE_RED + (byte) main::i#2) ← *((const byte*) PAL_RED + (byte) main::i#2)
  *((const nomodify byte*) PALETTE_GREEN + (byte) main::i#2) ← *((const byte*) PAL_GREEN + (byte) main::i#2)
  *((const nomodify byte*) PALETTE_BLUE + (byte) main::i#2) ← *((const byte*) PAL_BLUE + (byte) main::i#2)
  (byte) main::i#1 ← ++ (byte) main::i#2
  (bool~) main::$4 ← (byte) main::i#1 != (number) 0
  if((bool~) main::$4) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@4
  asm { sei  }
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (number) $16
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (number) $7f
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_STACK)(void()) irq1()
  *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) ← (number) 1
  asm { cli  }
  to:main::@6
main::@6: scope:[main]  from main::@5 main::@6
  to:main::@6
main::@return: scope:[main]  from
  return 
  to:@return

interrupt(HARDWARE_STACK)(void()) irq1()
irq1: scope:[irq1]  from
  *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) | (number) $80
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (number) 0
  (volatile byte) sinpos ← ++ (volatile byte) sinpos
  (byte) irq1::wobblepos#0 ← (volatile byte) sinpos
  (byte) irq1::line#0 ← (byte) 0
  to:irq1::@1
irq1::@1: scope:[irq1]  from irq1 irq1::@9
  (byte) irq1::wobblepos#4 ← phi( irq1/(byte) irq1::wobblepos#0 irq1::@9/(byte) irq1::wobblepos#5 )
  (byte) irq1::line#2 ← phi( irq1/(byte) irq1::line#0 irq1::@9/(byte) irq1::line#1 )
  (bool~) irq1::$1 ← (byte) irq1::line#2 != (const nomodify byte) NUMBERL
  if((bool~) irq1::$1) goto irq1::@2
  to:irq1::@3
irq1::@2: scope:[irq1]  from irq1::@1
  (byte) irq1::wobblepos#3 ← phi( irq1::@1/(byte) irq1::wobblepos#4 )
  (byte) irq1::line#3 ← phi( irq1::@1/(byte) irq1::line#2 )
  (byte) irq1::col#0 ← *((const byte*) rasters + (byte) irq1::line#3)
  *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR) ← (byte) irq1::col#0
  *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR) ← (byte) irq1::col#0
  (bool~) irq1::$2 ← (byte) irq1::line#3 < (const nomodify byte) irq1::scrollypos
  if((bool~) irq1::$2) goto irq1::@4
  to:irq1::@10
irq1::@3: scope:[irq1]  from irq1::@1
  (byte) irq1::l#0 ← (byte) 0
  to:irq1::@16
irq1::@4: scope:[irq1]  from irq1::@2
  (byte) irq1::line#13 ← phi( irq1::@2/(byte) irq1::line#3 )
  (byte) irq1::wobblepos#2 ← phi( irq1::@2/(byte) irq1::wobblepos#3 )
  (number~) irq1::$12 ← (number) $28 + *((const byte*) SINUS + (byte) irq1::wobblepos#2)
  *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (number~) irq1::$12
  (byte) irq1::wobblepos#1 ← ++ (byte) irq1::wobblepos#2
  *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (number) $66
  to:irq1::@7
irq1::@10: scope:[irq1]  from irq1::@2
  (byte) irq1::wobblepos#14 ← phi( irq1::@2/(byte) irq1::wobblepos#3 )
  (byte) irq1::line#4 ← phi( irq1::@2/(byte) irq1::line#3 )
  (bool~) irq1::$3 ← (byte) irq1::line#4 == (const nomodify byte) irq1::scrollypos
  if((bool~) irq1::$3) goto irq1::@5
  to:irq1::@11
irq1::@5: scope:[irq1]  from irq1::@10
  (byte) irq1::wobblepos#12 ← phi( irq1::@10/(byte) irq1::wobblepos#14 )
  (byte) irq1::line#14 ← phi( irq1::@10/(byte) irq1::line#4 )
  *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (number) $50
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (volatile byte) xpos
  to:irq1::@7
irq1::@11: scope:[irq1]  from irq1::@10
  (byte) irq1::wobblepos#15 ← phi( irq1::@10/(byte) irq1::wobblepos#14 )
  (byte) irq1::line#5 ← phi( irq1::@10/(byte) irq1::line#4 )
  (bool~) irq1::$4 ← (byte) irq1::line#5 == (const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar
  if((bool~) irq1::$4) goto irq1::@6
  to:irq1::@12
irq1::@6: scope:[irq1]  from irq1::@11
  (byte) irq1::wobblepos#13 ← phi( irq1::@11/(byte) irq1::wobblepos#15 )
  (byte) irq1::line#15 ← phi( irq1::@11/(byte) irq1::line#5 )
  *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (number) $50
  to:irq1::@7
irq1::@12: scope:[irq1]  from irq1::@11
  (byte) irq1::wobblepos#8 ← phi( irq1::@11/(byte) irq1::wobblepos#15 )
  (byte) irq1::line#6 ← phi( irq1::@11/(byte) irq1::line#5 )
  (bool~) irq1::$5 ← (byte) irq1::line#6 == (const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar+(number) 1
  (bool~) irq1::$6 ← ! (bool~) irq1::$5
  if((bool~) irq1::$6) goto irq1::@7
  to:irq1::@13
irq1::@13: scope:[irq1]  from irq1::@12
  (byte) irq1::wobblepos#9 ← phi( irq1::@12/(byte) irq1::wobblepos#8 )
  (byte) irq1::line#10 ← phi( irq1::@12/(byte) irq1::line#6 )
  (byte) irq1::zoomval#0 ← *((const byte*) SINUS + (volatile byte) zoomx)
  (volatile byte) zoomx ← ++ (volatile byte) zoomx
  *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) irq1::zoomval#0
  (number~) irq1::$7 ← (byte) irq1::zoomval#0 + (number) 1
  *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (number~) irq1::$7
  (bool~) irq1::$8 ← (volatile byte) zoomx == (number) 0
  (bool~) irq1::$9 ← ! (bool~) irq1::$8
  if((bool~) irq1::$9) goto irq1::@7
  to:irq1::@14
irq1::@14: scope:[irq1]  from irq1::@13
  (byte) irq1::wobblepos#10 ← phi( irq1::@13/(byte) irq1::wobblepos#9 )
  (byte) irq1::line#11 ← phi( irq1::@13/(byte) irq1::line#10 )
  (volatile byte) greetnm ← ++ (volatile byte) greetnm
  (bool~) irq1::$10 ← (volatile byte) greetnm == (const nomodify byte) GREETCOUNT
  (bool~) irq1::$11 ← ! (bool~) irq1::$10
  if((bool~) irq1::$11) goto irq1::@7
  to:irq1::@15
irq1::@15: scope:[irq1]  from irq1::@14
  (byte) irq1::wobblepos#11 ← phi( irq1::@14/(byte) irq1::wobblepos#10 )
  (byte) irq1::line#12 ← phi( irq1::@14/(byte) irq1::line#11 )
  (volatile byte) greetnm ← (number) 0
  to:irq1::@7
irq1::@7: scope:[irq1]  from irq1::@12 irq1::@13 irq1::@14 irq1::@15 irq1::@4 irq1::@5 irq1::@6
  (byte) irq1::wobblepos#7 ← phi( irq1::@12/(byte) irq1::wobblepos#8 irq1::@13/(byte) irq1::wobblepos#9 irq1::@14/(byte) irq1::wobblepos#10 irq1::@15/(byte) irq1::wobblepos#11 irq1::@4/(byte) irq1::wobblepos#1 irq1::@5/(byte) irq1::wobblepos#12 irq1::@6/(byte) irq1::wobblepos#13 )
  (byte) irq1::line#9 ← phi( irq1::@12/(byte) irq1::line#6 irq1::@13/(byte) irq1::line#10 irq1::@14/(byte) irq1::line#11 irq1::@15/(byte) irq1::line#12 irq1::@4/(byte) irq1::line#13 irq1::@5/(byte) irq1::line#14 irq1::@6/(byte) irq1::line#15 )
  (byte) irq1::raster#0 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)
  to:irq1::@8
irq1::@8: scope:[irq1]  from irq1::@7 irq1::@8
  (byte) irq1::wobblepos#6 ← phi( irq1::@7/(byte) irq1::wobblepos#7 irq1::@8/(byte) irq1::wobblepos#6 )
  (byte) irq1::line#8 ← phi( irq1::@7/(byte) irq1::line#9 irq1::@8/(byte) irq1::line#8 )
  (byte) irq1::raster#1 ← phi( irq1::@7/(byte) irq1::raster#0 irq1::@8/(byte) irq1::raster#1 )
  (bool~) irq1::$13 ← (byte) irq1::raster#1 == *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)
  if((bool~) irq1::$13) goto irq1::@8
  to:irq1::@9
irq1::@9: scope:[irq1]  from irq1::@8
  (byte) irq1::wobblepos#5 ← phi( irq1::@8/(byte) irq1::wobblepos#6 )
  (byte) irq1::line#7 ← phi( irq1::@8/(byte) irq1::line#8 )
  (byte) irq1::line#1 ← ++ (byte) irq1::line#7
  to:irq1::@1
irq1::@16: scope:[irq1]  from irq1::@17 irq1::@3
  (byte) irq1::l#2 ← phi( irq1::@17/(byte) irq1::l#1 irq1::@3/(byte) irq1::l#0 )
  (bool~) irq1::$14 ← (byte) irq1::l#2 != (const nomodify byte) NUMBERL
  if((bool~) irq1::$14) goto irq1::@17
  to:irq1::@18
irq1::@17: scope:[irq1]  from irq1::@16
  (byte) irq1::l#3 ← phi( irq1::@16/(byte) irq1::l#2 )
  *((const byte*) rasters + (byte) irq1::l#3) ← (number) 0
  (byte) irq1::l#1 ← ++ (byte) irq1::l#3
  to:irq1::@16
irq1::@18: scope:[irq1]  from irq1::@16
  call *((const void()*) songPlay) 
  (byte) irq1::barsin#0 ← (volatile byte) sinpos
  (byte) irq1::barcnt#0 ← (byte) 0
  to:irq1::@19
irq1::@19: scope:[irq1]  from irq1::@18 irq1::@27
  (byte) irq1::barsin#4 ← phi( irq1::@18/(byte) irq1::barsin#0 irq1::@27/(byte) irq1::barsin#1 )
  (byte) irq1::barcnt#2 ← phi( irq1::@18/(byte) irq1::barcnt#0 irq1::@27/(byte) irq1::barcnt#1 )
  (bool~) irq1::$15 ← (byte) irq1::barcnt#2 < (number) $10
  if((bool~) irq1::$15) goto irq1::@20
  to:irq1::@21
irq1::@20: scope:[irq1]  from irq1::@19
  (byte) irq1::barcnt#3 ← phi( irq1::@19/(byte) irq1::barcnt#2 )
  (byte) irq1::barsin#2 ← phi( irq1::@19/(byte) irq1::barsin#4 )
  (byte) irq1::idx#0 ← *((const byte*) SINUS + (byte) irq1::barsin#2)
  (number~) irq1::$16 ← (byte) irq1::barcnt#3 * (number) $10
  (byte) irq1::barcol#0 ← (number~) irq1::$16
  (byte) irq1::i#0 ← (byte) 0
  to:irq1::@22
irq1::@21: scope:[irq1]  from irq1::@19
  (byte) irq1::i2#0 ← (byte) 0
  to:irq1::@28
irq1::@22: scope:[irq1]  from irq1::@20 irq1::@23
  (byte) irq1::barcnt#8 ← phi( irq1::@20/(byte) irq1::barcnt#3 irq1::@23/(byte) irq1::barcnt#9 )
  (byte) irq1::barsin#8 ← phi( irq1::@20/(byte) irq1::barsin#2 irq1::@23/(byte) irq1::barsin#9 )
  (byte) irq1::idx#5 ← phi( irq1::@20/(byte) irq1::idx#0 irq1::@23/(byte) irq1::idx#1 )
  (byte) irq1::barcol#5 ← phi( irq1::@20/(byte) irq1::barcol#0 irq1::@23/(byte) irq1::barcol#1 )
  (byte) irq1::i#2 ← phi( irq1::@20/(byte) irq1::i#0 irq1::@23/(byte) irq1::i#1 )
  (bool~) irq1::$17 ← (byte) irq1::i#2 < (number) $10
  if((bool~) irq1::$17) goto irq1::@23
  to:irq1::@24
irq1::@23: scope:[irq1]  from irq1::@22
  (byte) irq1::barcnt#9 ← phi( irq1::@22/(byte) irq1::barcnt#8 )
  (byte) irq1::barsin#9 ← phi( irq1::@22/(byte) irq1::barsin#8 )
  (byte) irq1::i#3 ← phi( irq1::@22/(byte) irq1::i#2 )
  (byte) irq1::idx#3 ← phi( irq1::@22/(byte) irq1::idx#5 )
  (byte) irq1::barcol#3 ← phi( irq1::@22/(byte) irq1::barcol#5 )
  *((const byte*) rasters + (byte) irq1::idx#3) ← (byte) irq1::barcol#3
  (byte) irq1::idx#1 ← ++ (byte) irq1::idx#3
  (byte) irq1::barcol#1 ← ++ (byte) irq1::barcol#3
  (byte) irq1::i#1 ← ++ (byte) irq1::i#3
  to:irq1::@22
irq1::@24: scope:[irq1]  from irq1::@22
  (byte) irq1::barcnt#6 ← phi( irq1::@22/(byte) irq1::barcnt#8 )
  (byte) irq1::barsin#6 ← phi( irq1::@22/(byte) irq1::barsin#8 )
  (byte) irq1::idx#7 ← phi( irq1::@22/(byte) irq1::idx#5 )
  (byte) irq1::barcol#7 ← phi( irq1::@22/(byte) irq1::barcol#5 )
  (byte) irq1::i1#0 ← (byte) 0
  to:irq1::@25
irq1::@25: scope:[irq1]  from irq1::@24 irq1::@26
  (byte) irq1::barcnt#5 ← phi( irq1::@24/(byte) irq1::barcnt#6 irq1::@26/(byte) irq1::barcnt#7 )
  (byte) irq1::barsin#5 ← phi( irq1::@24/(byte) irq1::barsin#6 irq1::@26/(byte) irq1::barsin#7 )
  (byte) irq1::idx#6 ← phi( irq1::@24/(byte) irq1::idx#7 irq1::@26/(byte) irq1::idx#2 )
  (byte) irq1::barcol#6 ← phi( irq1::@24/(byte) irq1::barcol#7 irq1::@26/(byte) irq1::barcol#2 )
  (byte) irq1::i1#2 ← phi( irq1::@24/(byte) irq1::i1#0 irq1::@26/(byte) irq1::i1#1 )
  (bool~) irq1::$18 ← (byte) irq1::i1#2 < (number) $f
  if((bool~) irq1::$18) goto irq1::@26
  to:irq1::@27
irq1::@26: scope:[irq1]  from irq1::@25
  (byte) irq1::barcnt#7 ← phi( irq1::@25/(byte) irq1::barcnt#5 )
  (byte) irq1::barsin#7 ← phi( irq1::@25/(byte) irq1::barsin#5 )
  (byte) irq1::i1#3 ← phi( irq1::@25/(byte) irq1::i1#2 )
  (byte) irq1::idx#4 ← phi( irq1::@25/(byte) irq1::idx#6 )
  (byte) irq1::barcol#4 ← phi( irq1::@25/(byte) irq1::barcol#6 )
  (byte) irq1::barcol#2 ← -- (byte) irq1::barcol#4
  *((const byte*) rasters + (byte) irq1::idx#4) ← (byte) irq1::barcol#2
  (byte) irq1::idx#2 ← ++ (byte) irq1::idx#4
  (byte) irq1::i1#1 ← ++ (byte) irq1::i1#3
  to:irq1::@25
irq1::@27: scope:[irq1]  from irq1::@25
  (byte) irq1::barcnt#4 ← phi( irq1::@25/(byte) irq1::barcnt#5 )
  (byte) irq1::barsin#3 ← phi( irq1::@25/(byte) irq1::barsin#5 )
  (byte) irq1::barsin#1 ← (byte) irq1::barsin#3 + (number) $a
  (byte) irq1::barcnt#1 ← ++ (byte) irq1::barcnt#4
  to:irq1::@19
irq1::@28: scope:[irq1]  from irq1::@21 irq1::@29
  (byte) irq1::i2#2 ← phi( irq1::@21/(byte) irq1::i2#0 irq1::@29/(byte) irq1::i2#1 )
  (bool~) irq1::$19 ← (byte) irq1::i2#2 < (number) $13
  if((bool~) irq1::$19) goto irq1::@29
  to:irq1::@return
irq1::@29: scope:[irq1]  from irq1::@28
  (byte) irq1::i2#3 ← phi( irq1::@28/(byte) irq1::i2#2 )
  (byte~) irq1::$20 ← (const nomodify byte) irq1::scrollypos + (byte) irq1::i2#3
  (byte~) irq1::$21 ← (const nomodify byte) irq1::scrollypos + (byte) irq1::i2#3
  (number~) irq1::$22 ← *((const byte*) rasters + (byte~) irq1::$21) / (number) 2
  (number~) irq1::$23 ← (number~) irq1::$22 & (number) 7
  *((const byte*) rasters + (byte~) irq1::$20) ← (number~) irq1::$23
  (byte) irq1::i2#1 ← ++ (byte) irq1::i2#3
  to:irq1::@28
irq1::@return: scope:[irq1]  from irq1::@28
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (volatile byte) sinpos ← (byte) 0
  (volatile byte) zoomx ← (byte) 0
  (volatile byte) xpos ← (byte) 7
  (volatile byte) greetnm ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*)(number) $dc00
(const nomodify byte) CIA_INTERRUPT_CLEAR = (byte) $7f
(const nomodify byte) GREETCOUNT = (byte) $10
(const nomodify void()**) HARDWARE_IRQ = (void()**)(number) $fffe
(const nomodify byte) IRQ_RASTER = (byte) 1
(byte) MEGA65_VICIV::ALPHADELAY
(byte) MEGA65_VICIV::B0PIX
(byte) MEGA65_VICIV::B0_ADDR
(byte) MEGA65_VICIV::B1PIX
(byte) MEGA65_VICIV::B1_ADDR
(byte) MEGA65_VICIV::B2PIX
(byte) MEGA65_VICIV::B2_ADDR
(byte) MEGA65_VICIV::B3PIX
(byte) MEGA65_VICIV::B3_ADDR
(byte) MEGA65_VICIV::B4PIX
(byte) MEGA65_VICIV::B4_ADDR
(byte) MEGA65_VICIV::B5PIX
(byte) MEGA65_VICIV::B5_ADDR
(byte) MEGA65_VICIV::B6PIX
(byte) MEGA65_VICIV::B6_ADDR
(byte) MEGA65_VICIV::B7PIX
(byte) MEGA65_VICIV::B7_ADDR
(byte) MEGA65_VICIV::BBDRPOS_HI
(byte) MEGA65_VICIV::BBDRPOS_LO
(byte) MEGA65_VICIV::BG_COLOR
(byte) MEGA65_VICIV::BG_COLOR1
(byte) MEGA65_VICIV::BG_COLOR2
(byte) MEGA65_VICIV::BG_COLOR3
(byte) MEGA65_VICIV::BORDER_COLOR
(byte) MEGA65_VICIV::BP16ENS
(byte) MEGA65_VICIV::BPCOMP
(byte) MEGA65_VICIV::BPX
(byte) MEGA65_VICIV::BPY
(byte) MEGA65_VICIV::CHARPTR_HILO
(byte) MEGA65_VICIV::CHARPTR_LOHI
(byte) MEGA65_VICIV::CHARPTR_LOLO
(byte) MEGA65_VICIV::CHARSTEP_HI
(byte) MEGA65_VICIV::CHARSTEP_LO
(byte) MEGA65_VICIV::CHRCOUNT
(byte) MEGA65_VICIV::CHRXSCL
(byte) MEGA65_VICIV::CHRYSCL
(byte) MEGA65_VICIV::COLPTR_HI
(byte) MEGA65_VICIV::COLPTR_LO
(byte) MEGA65_VICIV::CONTROL1
(byte) MEGA65_VICIV::CONTROL2
(byte) MEGA65_VICIV::CONTROLA
(byte) MEGA65_VICIV::CONTROLB
(byte) MEGA65_VICIV::CONTROLC
(byte) MEGA65_VICIV::DEBUG1
(byte) MEGA65_VICIV::DEBUGX
(byte) MEGA65_VICIV::DEBUGXY
(byte) MEGA65_VICIV::DEBUGY
(byte) MEGA65_VICIV::FNRASTER_HI
(byte) MEGA65_VICIV::FNRASTER_LO
(byte) MEGA65_VICIV::HPOS
(byte) MEGA65_VICIV::IRQ_ENABLE
(byte) MEGA65_VICIV::IRQ_STATUS
(byte) MEGA65_VICIV::KEY
(byte) MEGA65_VICIV::LIGHTPEN_X
(byte) MEGA65_VICIV::LIGHTPEN_Y
(byte) MEGA65_VICIV::MEMORY
(byte) MEGA65_VICIV::PALSEL
(byte) MEGA65_VICIV::RASLINE0
(byte) MEGA65_VICIV::RASTER
(byte) MEGA65_VICIV::ROWCOUNT
(byte) MEGA65_VICIV::RSTCMP
(byte) MEGA65_VICIV::RSTCOMP
(byte) MEGA65_VICIV::SBPDEBUG
(byte) MEGA65_VICIV::SCRNPTR_HIHI
(byte) MEGA65_VICIV::SCRNPTR_HILO
(byte) MEGA65_VICIV::SCRNPTR_LOHI
(byte) MEGA65_VICIV::SCRNPTR_LOLO
(byte) MEGA65_VICIV::SIDBDRWD_HI
(byte) MEGA65_VICIV::SIDBDRWD_LO
(byte) MEGA65_VICIV::SPR16EN
(byte) MEGA65_VICIV::SPRALPHAVAL
(byte) MEGA65_VICIV::SPRENALPHA
(byte) MEGA65_VICIV::SPRENV400
(byte) MEGA65_VICIV::SPRHGHT
(byte) MEGA65_VICIV::SPRHGTEN
(byte) MEGA65_VICIV::SPRITE0_COLOR
(byte) MEGA65_VICIV::SPRITE0_X
(byte) MEGA65_VICIV::SPRITE0_Y
(byte) MEGA65_VICIV::SPRITE1_COLOR
(byte) MEGA65_VICIV::SPRITE1_X
(byte) MEGA65_VICIV::SPRITE1_Y
(byte) MEGA65_VICIV::SPRITE2_COLOR
(byte) MEGA65_VICIV::SPRITE2_X
(byte) MEGA65_VICIV::SPRITE2_Y
(byte) MEGA65_VICIV::SPRITE3_COLOR
(byte) MEGA65_VICIV::SPRITE3_X
(byte) MEGA65_VICIV::SPRITE3_Y
(byte) MEGA65_VICIV::SPRITE4_COLOR
(byte) MEGA65_VICIV::SPRITE4_X
(byte) MEGA65_VICIV::SPRITE4_Y
(byte) MEGA65_VICIV::SPRITE5_COLOR
(byte) MEGA65_VICIV::SPRITE5_X
(byte) MEGA65_VICIV::SPRITE5_Y
(byte) MEGA65_VICIV::SPRITE6_COLOR
(byte) MEGA65_VICIV::SPRITE6_X
(byte) MEGA65_VICIV::SPRITE6_Y
(byte) MEGA65_VICIV::SPRITE7_COLOR
(byte) MEGA65_VICIV::SPRITE7_X
(byte) MEGA65_VICIV::SPRITE7_Y
(byte) MEGA65_VICIV::SPRITES_BG_COLLISION
(byte) MEGA65_VICIV::SPRITES_COLLISION
(byte) MEGA65_VICIV::SPRITES_ENABLE
(byte) MEGA65_VICIV::SPRITES_EXPAND_X
(byte) MEGA65_VICIV::SPRITES_EXPAND_Y
(byte) MEGA65_VICIV::SPRITES_MC
(byte) MEGA65_VICIV::SPRITES_MCOLOR1
(byte) MEGA65_VICIV::SPRITES_MCOLOR2
(byte) MEGA65_VICIV::SPRITES_PRIORITY
(byte) MEGA65_VICIV::SPRITES_XMSB
(byte) MEGA65_VICIV::SPRPTRADR_HILO
(byte) MEGA65_VICIV::SPRPTRADR_LOHI
(byte) MEGA65_VICIV::SPRPTRADR_LOLO
(byte) MEGA65_VICIV::SPRX64EN
(byte) MEGA65_VICIV::SPRXSMSBS
(byte) MEGA65_VICIV::SPRYSMSBSM
(byte) MEGA65_VICIV::SRPYMSBS
(byte) MEGA65_VICIV::SYNCPOL
(byte) MEGA65_VICIV::TBDRPOS_HI
(byte) MEGA65_VICIV::TBDRPOS_LO
(byte) MEGA65_VICIV::TEXTXPOS_HI
(byte) MEGA65_VICIV::TEXTXPOS_LO
(byte) MEGA65_VICIV::TEXTYPOS_HI
(byte) MEGA65_VICIV::TEXTYPOS_LO
(byte) MEGA65_VICIV::UNUSED
(byte) MEGA65_VICIV::VPOS
(byte) MEGA65_VICIV::VSYNDEL
(byte) MEGA65_VICIV::XPOS_HI
(byte) MEGA65_VICIV::XPOS_LO
(const byte*) MEGA_LOGO[]  = { (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf }
(byte) MOS4569_VICIII::B0PIX
(byte) MOS4569_VICIII::B0_ADDR
(byte) MOS4569_VICIII::B1PIX
(byte) MOS4569_VICIII::B1_ADDR
(byte) MOS4569_VICIII::B2PIX
(byte) MOS4569_VICIII::B2_ADDR
(byte) MOS4569_VICIII::B3PIX
(byte) MOS4569_VICIII::B3_ADDR
(byte) MOS4569_VICIII::B4PIX
(byte) MOS4569_VICIII::B4_ADDR
(byte) MOS4569_VICIII::B5PIX
(byte) MOS4569_VICIII::B5_ADDR
(byte) MOS4569_VICIII::B6PIX
(byte) MOS4569_VICIII::B6_ADDR
(byte) MOS4569_VICIII::B7PIX
(byte) MOS4569_VICIII::B7_ADDR
(byte) MOS4569_VICIII::BG_COLOR
(byte) MOS4569_VICIII::BG_COLOR1
(byte) MOS4569_VICIII::BG_COLOR2
(byte) MOS4569_VICIII::BG_COLOR3
(byte) MOS4569_VICIII::BORDER_COLOR
(byte) MOS4569_VICIII::BPCOMP
(byte) MOS4569_VICIII::BPX
(byte) MOS4569_VICIII::BPY
(byte) MOS4569_VICIII::CONTROL1
(byte) MOS4569_VICIII::CONTROL2
(byte) MOS4569_VICIII::CONTROLA
(byte) MOS4569_VICIII::CONTROLB
(byte) MOS4569_VICIII::HPOS
(byte) MOS4569_VICIII::IRQ_ENABLE
(byte) MOS4569_VICIII::IRQ_STATUS
(byte) MOS4569_VICIII::KEY
(byte) MOS4569_VICIII::LIGHTPEN_X
(byte) MOS4569_VICIII::LIGHTPEN_Y
(byte) MOS4569_VICIII::MEMORY
(byte) MOS4569_VICIII::RASTER
(byte) MOS4569_VICIII::SPRITE0_COLOR
(byte) MOS4569_VICIII::SPRITE0_X
(byte) MOS4569_VICIII::SPRITE0_Y
(byte) MOS4569_VICIII::SPRITE1_COLOR
(byte) MOS4569_VICIII::SPRITE1_X
(byte) MOS4569_VICIII::SPRITE1_Y
(byte) MOS4569_VICIII::SPRITE2_COLOR
(byte) MOS4569_VICIII::SPRITE2_X
(byte) MOS4569_VICIII::SPRITE2_Y
(byte) MOS4569_VICIII::SPRITE3_COLOR
(byte) MOS4569_VICIII::SPRITE3_X
(byte) MOS4569_VICIII::SPRITE3_Y
(byte) MOS4569_VICIII::SPRITE4_COLOR
(byte) MOS4569_VICIII::SPRITE4_X
(byte) MOS4569_VICIII::SPRITE4_Y
(byte) MOS4569_VICIII::SPRITE5_COLOR
(byte) MOS4569_VICIII::SPRITE5_X
(byte) MOS4569_VICIII::SPRITE5_Y
(byte) MOS4569_VICIII::SPRITE6_COLOR
(byte) MOS4569_VICIII::SPRITE6_X
(byte) MOS4569_VICIII::SPRITE6_Y
(byte) MOS4569_VICIII::SPRITE7_COLOR
(byte) MOS4569_VICIII::SPRITE7_X
(byte) MOS4569_VICIII::SPRITE7_Y
(byte) MOS4569_VICIII::SPRITES_BG_COLLISION
(byte) MOS4569_VICIII::SPRITES_COLLISION
(byte) MOS4569_VICIII::SPRITES_ENABLE
(byte) MOS4569_VICIII::SPRITES_EXPAND_X
(byte) MOS4569_VICIII::SPRITES_EXPAND_Y
(byte) MOS4569_VICIII::SPRITES_MC
(byte) MOS4569_VICIII::SPRITES_MCOLOR1
(byte) MOS4569_VICIII::SPRITES_MCOLOR2
(byte) MOS4569_VICIII::SPRITES_PRIORITY
(byte) MOS4569_VICIII::SPRITES_XMSB
(byte) MOS4569_VICIII::UNUSED
(byte) MOS4569_VICIII::VPOS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const nomodify byte) NUMBERL = (byte) $e0
(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL = (byte) $5a
(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB = (byte) $31
(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC = (byte) $54
(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0 = (byte) $6f
(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO = (byte) $5c
(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO = (byte) $4c
(const byte) OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR = (byte) $21
(const byte) OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR = (byte) $20
(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY = (byte) $2f
(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = (byte) $d
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = (byte) $11
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = (byte) $16
(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = (byte) $1a
(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = (byte) $19
(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER = (byte) $12
(const nomodify byte*) PALETTE_BLUE = (byte*)(number) $d300
(const nomodify byte*) PALETTE_GREEN = (byte*)(number) $d200
(const nomodify byte*) PALETTE_RED = (byte*)(number) $d100
(const byte*) PAL_BLUE[]  = { (byte) 0, (byte) $f3, (byte) $d4, (byte) $b5, (byte) $a6, (byte) $97, (byte) $88, (byte) $79, (byte) $1a, (byte) $fa, (byte) $eb, (byte) $ec, (byte) $bd, (byte) $be, (byte) $af, (byte) $ff, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $c0, (byte) $b1, (byte) $a2, (byte) $a3, (byte) $34, (byte) $35, (byte) $26, (byte) $27, (byte) $f7, (byte) $f8, (byte) $f9, (byte) $ea, (byte) 0, (byte) 0, (byte) $30, (byte) $11, (byte) $22, (byte) $13, (byte) $14, (byte) 5, (byte) $b5, (byte) $96, (byte) $97, (byte) $98, (byte) $79, (byte) $6a, (byte) $5b, (byte) $4c, (byte) $81, (byte) $42, (byte) $43, (byte) $34, (byte) 5, (byte) 6, (byte) $f6, (byte) $f7, (byte) $78, (byte) $69, (byte) $5a, (byte) $5b, (byte) $4c, (byte) $3d, (byte) $1e, (byte) $f, (byte) $17, (byte) $c7, (byte) $a8, (byte) $89, (byte) $5a, (byte) $5b, (byte) $3c, (byte) $1d, (byte) $ad, (byte) $9e, (byte) $7f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $78, (byte) 9, (byte) $e9, (byte) $ca, (byte) $ab, (byte) $7c, (byte) $5d, (byte) $5e, (byte) $de, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $59, (byte) $a, (byte) $ca, (byte) $bb, (byte) $8c, (byte) $6d, (byte) $3e, (byte) $2f, (byte) $bf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $49, (byte) $f9, (byte) $da, (byte) $ab, (byte) $7c, (byte) $5d, (byte) $2e, (byte) $2f, (byte) $af, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $48, (byte) $d8, (byte) $b9, (byte) $aa, (byte) $7b, (byte) $5c, (byte) $2d, (byte) $2e, (byte) $be, (byte) $9f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) 7, (byte) $97, (byte) $88, (byte) $69, (byte) $4a, (byte) $2b, (byte) $1c, (byte) $2d, (byte) $9d, (byte) $7e, (byte) $6f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $81, (byte) $62, (byte) $53, (byte) $44, (byte) 5, (byte) 6, (byte) $f6, (byte) $e7, (byte) $78, (byte) $69, (byte) $5a, (byte) $5b, (byte) $3c, (byte) $2d, (byte) $2e, (byte) $1f, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $b0, (byte) $b1, (byte) $a2, (byte) $b3, (byte) $44, (byte) $35, (byte) $36, (byte) $37, (byte) 8, (byte) $f8, (byte) $a, (byte) $b, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $70, (byte) $61, (byte) $62, (byte) $f2, (byte) $e3, (byte) $d4, (byte) $c5, (byte) $b6, (byte) $b7, (byte) $b8, (byte) $99, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $f0, (byte) $f1, (byte) $82, (byte) $83, (byte) $84, (byte) $85, (byte) $66, (byte) $57, (byte) $58, (byte) $59, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $70, (byte) $61, (byte) $62, (byte) $e2, (byte) $e3, (byte) $d4, (byte) $d5, (byte) $b6, (byte) $a7, (byte) $b8, (byte) $a9, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $a0, (byte) $b1, (byte) $a2, (byte) $a3, (byte) $44, (byte) $35, (byte) $26, (byte) $37, (byte) $f7, (byte) $19, (byte) $f9, (byte) $fa }
(const byte*) PAL_GREEN[]  = { (byte) 0, (byte) $e3, (byte) $c4, (byte) $b5, (byte) $96, (byte) $87, (byte) $78, (byte) $79, (byte) $a, (byte) $fa, (byte) $eb, (byte) $dc, (byte) $bd, (byte) $ae, (byte) $af, (byte) $ff, (byte) $e2, (byte) $b3, (byte) $a4, (byte) $85, (byte) $76, (byte) $67, (byte) $48, (byte) $49, (byte) $d9, (byte) $da, (byte) $bb, (byte) $bc, (byte) $8d, (byte) $8e, (byte) $7f, (byte) $ff, (byte) $42, (byte) 3, (byte) 4, (byte) $e4, (byte) $d5, (byte) $c6, (byte) $b7, (byte) $a8, (byte) $39, (byte) $3a, (byte) $1b, (byte) $2c, (byte) $fc, (byte) $fd, (byte) $de, (byte) $df, (byte) $61, (byte) $32, (byte) $13, (byte) 4, (byte) $e4, (byte) $e5, (byte) $d6, (byte) $d7, (byte) $78, (byte) $59, (byte) $4a, (byte) $4b, (byte) $2c, (byte) $1d, (byte) $e, (byte) $fe, (byte) $e0, (byte) $b1, (byte) $a2, (byte) $93, (byte) $74, (byte) $75, (byte) $56, (byte) $57, (byte) $e7, (byte) $d8, (byte) $79, (byte) $ca, (byte) $ab, (byte) $9c, (byte) $9d, (byte) $8e, (byte) $f0, (byte) $d1, (byte) $c2, (byte) $a3, (byte) $84, (byte) $85, (byte) $76, (byte) $77, (byte) 8, (byte) 9, (byte) $f9, (byte) $fa, (byte) $db, (byte) $cc, (byte) $bd, (byte) $ae, (byte) $61, (byte) $22, (byte) $23, (byte) $14, (byte) $f4, (byte) $e5, (byte) $d6, (byte) $c7, (byte) $58, (byte) $59, (byte) $3a, (byte) $3b, (byte) $1c, (byte) $d, (byte) $fd, (byte) $fe, (byte) $92, (byte) $53, (byte) $44, (byte) $35, (byte) $16, (byte) $f6, (byte) $e7, (byte) $e8, (byte) $79, (byte) $6a, (byte) $5b, (byte) $4c, (byte) $2d, (byte) $3e, (byte) $1f, (byte) $ef, (byte) $53, (byte) $14, (byte) 5, (byte) $e5, (byte) $c6, (byte) $b7, (byte) $a8, (byte) $99, (byte) $2a, (byte) $2b, (byte) $c, (byte) $d, (byte) $dd, (byte) $ce, (byte) $cf, (byte) $ff, (byte) $f3, (byte) $b4, (byte) $95, (byte) $86, (byte) $57, (byte) $38, (byte) $29, (byte) $1a, (byte) $ba, (byte) $ab, (byte) $9c, (byte) $8d, (byte) $6e, (byte) $5f, (byte) $ff, (byte) $ff, (byte) $95, (byte) $56, (byte) $27, (byte) $18, (byte) $e8, (byte) $d9, (byte) $ca, (byte) $bb, (byte) $4c, (byte) $3d, (byte) $2e, (byte) $1f, (byte) $ef, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $c5, (byte) $86, (byte) $57, (byte) $38, (byte) $19, (byte) $a, (byte) $ea, (byte) $db, (byte) $6c, (byte) $5d, (byte) $3e, (byte) $3f, (byte) $ef, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $65, (byte) $26, (byte) 7, (byte) $e7, (byte) $c8, (byte) $b9, (byte) $9a, (byte) $9b, (byte) $2c, (byte) $1d, (byte) $fd, (byte) $fe, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $b4, (byte) $75, (byte) $56, (byte) $37, (byte) $28, (byte) $19, (byte) $e9, (byte) $ea, (byte) $7b, (byte) $6c, (byte) $5d, (byte) $4e, (byte) $2f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $c3, (byte) $94, (byte) $75, (byte) $56, (byte) $47, (byte) $38, (byte) $19, (byte) $1a, (byte) $aa, (byte) $ab, (byte) $7c, (byte) $7d, (byte) $5e, (byte) $4f, (byte) $ff, (byte) $ff, (byte) $e2, (byte) $a3, (byte) $94, (byte) $85, (byte) $76, (byte) $67, (byte) $38, (byte) $49, (byte) $d9, (byte) $ca, (byte) $ab, (byte) $bc, (byte) $7d, (byte) $7e, (byte) $6f, (byte) $ff }
(const byte*) PAL_RED[]  = { (byte) 0, (byte) $f3, (byte) $d4, (byte) $b5, (byte) $a6, (byte) $97, (byte) $88, (byte) $79, (byte) $1a, (byte) $fa, (byte) $eb, (byte) $ec, (byte) $bd, (byte) $be, (byte) $af, (byte) $ff, (byte) $16, (byte) $c6, (byte) $a7, (byte) $88, (byte) $49, (byte) $5a, (byte) $2b, (byte) $1c, (byte) $ac, (byte) $ad, (byte) $8e, (byte) $8f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $c6, (byte) $77, (byte) $48, (byte) $29, (byte) $e9, (byte) $fa, (byte) $cb, (byte) $cc, (byte) $5d, (byte) $4e, (byte) $2f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $57, (byte) $18, (byte) $f8, (byte) $d9, (byte) $aa, (byte) $8b, (byte) $6c, (byte) $5d, (byte) $ed, (byte) $de, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $26, (byte) $e6, (byte) $b7, (byte) $a8, (byte) $69, (byte) $5a, (byte) $3b, (byte) $3c, (byte) $dc, (byte) $cd, (byte) $ae, (byte) $9f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $65, (byte) $16, (byte) $17, (byte) $f7, (byte) $d8, (byte) $b9, (byte) $9a, (byte) $8b, (byte) $2c, (byte) $d, (byte) $fd, (byte) $ee, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $64, (byte) $15, (byte) 6, (byte) $e6, (byte) $c7, (byte) $a8, (byte) $99, (byte) $8a, (byte) $1b, (byte) $c, (byte) $fc, (byte) $fd, (byte) $ee, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $12, (byte) $d2, (byte) $d3, (byte) $b4, (byte) $95, (byte) $86, (byte) $77, (byte) $78, (byte) 9, (byte) $69, (byte) $ea, (byte) $fb, (byte) $dc, (byte) $ad, (byte) $ae, (byte) $af, (byte) $f0, (byte) $c1, (byte) $c2, (byte) $a3, (byte) $84, (byte) $85, (byte) $76, (byte) $67, (byte) 8, (byte) $f8, (byte) $e9, (byte) $da, (byte) $db, (byte) $bc, (byte) $bd, (byte) $ae, (byte) $40, (byte) $11, (byte) $12, (byte) $f2, (byte) $e3, (byte) $d4, (byte) $c5, (byte) $c6, (byte) $47, (byte) $38, (byte) $39, (byte) $2a, (byte) $1b, (byte) $c, (byte) $d, (byte) $ed, (byte) 0, (byte) 0, (byte) $f0, (byte) $d1, (byte) $c2, (byte) $b3, (byte) $a4, (byte) $95, (byte) $36, (byte) $27, (byte) $28, (byte) $29, (byte) $f9, (byte) $ea, (byte) $eb, (byte) $ec, (byte) $70, (byte) $41, (byte) $22, (byte) $23, (byte) $f3, (byte) $f4, (byte) $e5, (byte) $e6, (byte) $77, (byte) $78, (byte) $69, (byte) $7a, (byte) $3b, (byte) $3c, (byte) $3d, (byte) $3e, (byte) $a1, (byte) $82, (byte) $63, (byte) $54, (byte) $35, (byte) $26, (byte) 7, (byte) 8, (byte) $98, (byte) $99, (byte) $8a, (byte) $7b, (byte) $5c, (byte) $5d, (byte) $3e, (byte) $3f, (byte) $33, (byte) 4, (byte) $d4, (byte) $d5, (byte) $a6, (byte) $a7, (byte) $88, (byte) $89, (byte) $1a, (byte) $ab, (byte) $fb, (byte) $ec, (byte) $cd, (byte) $be, (byte) $af, (byte) $ff, (byte) $b4, (byte) $85, (byte) $56, (byte) $47, (byte) $18, (byte) 9, (byte) $f9, (byte) $ea, (byte) $7b, (byte) $7c, (byte) $5d, (byte) $5e, (byte) $2f, (byte) $ef, (byte) $ff, (byte) $ff, (byte) 6, (byte) $d6, (byte) $a7, (byte) $98, (byte) $59, (byte) $4a, (byte) $2b, (byte) $2c, (byte) $bc, (byte) $ad, (byte) $8e, (byte) $8f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff }
(const nomodify byte*) PROCPORT = (byte*)(number) 1
(const nomodify byte*) PROCPORT_DDR = (byte*)(number) 0
(const nomodify byte) PROCPORT_DDR_MEMORY_MASK = (byte) 7
(const nomodify byte) PROCPORT_RAM_IO = (byte) 5
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const byte*) SINUS[(number) $100]  = kickasm {{ .fill 256, 91.5 + 91.5*sin(i*2*PI/256)
 }}
(const byte*) SONG[]  = kickasm {{ .import c64 "DiscoZak_2SID_patched.prg"
 }}
(const nomodify struct MOS6569_VICII*) VICII = (struct MOS6569_VICII*)(number) $d000
(const nomodify struct MOS4569_VICIII*) VICIII = (struct MOS4569_VICIII*)(number) $d000
(const nomodify struct MEGA65_VICIV*) VICIV = (struct MEGA65_VICIV*)(number) $d000
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(volatile byte) greetnm loadstore
interrupt(HARDWARE_STACK)(void()) irq1()
(bool~) irq1::$1
(bool~) irq1::$10
(bool~) irq1::$11
(number~) irq1::$12
(bool~) irq1::$13
(bool~) irq1::$14
(bool~) irq1::$15
(number~) irq1::$16
(bool~) irq1::$17
(bool~) irq1::$18
(bool~) irq1::$19
(bool~) irq1::$2
(byte~) irq1::$20
(byte~) irq1::$21
(number~) irq1::$22
(number~) irq1::$23
(bool~) irq1::$3
(bool~) irq1::$4
(bool~) irq1::$5
(bool~) irq1::$6
(number~) irq1::$7
(bool~) irq1::$8
(bool~) irq1::$9
(label) irq1::@1
(label) irq1::@10
(label) irq1::@11
(label) irq1::@12
(label) irq1::@13
(label) irq1::@14
(label) irq1::@15
(label) irq1::@16
(label) irq1::@17
(label) irq1::@18
(label) irq1::@19
(label) irq1::@2
(label) irq1::@20
(label) irq1::@21
(label) irq1::@22
(label) irq1::@23
(label) irq1::@24
(label) irq1::@25
(label) irq1::@26
(label) irq1::@27
(label) irq1::@28
(label) irq1::@29
(label) irq1::@3
(label) irq1::@4
(label) irq1::@5
(label) irq1::@6
(label) irq1::@7
(label) irq1::@8
(label) irq1::@9
(label) irq1::@return
(byte) irq1::barcnt
(byte) irq1::barcnt#0
(byte) irq1::barcnt#1
(byte) irq1::barcnt#2
(byte) irq1::barcnt#3
(byte) irq1::barcnt#4
(byte) irq1::barcnt#5
(byte) irq1::barcnt#6
(byte) irq1::barcnt#7
(byte) irq1::barcnt#8
(byte) irq1::barcnt#9
(byte) irq1::barcol
(byte) irq1::barcol#0
(byte) irq1::barcol#1
(byte) irq1::barcol#2
(byte) irq1::barcol#3
(byte) irq1::barcol#4
(byte) irq1::barcol#5
(byte) irq1::barcol#6
(byte) irq1::barcol#7
(byte) irq1::barsin
(byte) irq1::barsin#0
(byte) irq1::barsin#1
(byte) irq1::barsin#2
(byte) irq1::barsin#3
(byte) irq1::barsin#4
(byte) irq1::barsin#5
(byte) irq1::barsin#6
(byte) irq1::barsin#7
(byte) irq1::barsin#8
(byte) irq1::barsin#9
(const nomodify byte) irq1::blackbar = (byte) $13
(byte) irq1::col
(byte) irq1::col#0
(byte) irq1::i
(byte) irq1::i#0
(byte) irq1::i#1
(byte) irq1::i#2
(byte) irq1::i#3
(byte) irq1::i1
(byte) irq1::i1#0
(byte) irq1::i1#1
(byte) irq1::i1#2
(byte) irq1::i1#3
(byte) irq1::i2
(byte) irq1::i2#0
(byte) irq1::i2#1
(byte) irq1::i2#2
(byte) irq1::i2#3
(byte) irq1::idx
(byte) irq1::idx#0
(byte) irq1::idx#1
(byte) irq1::idx#2
(byte) irq1::idx#3
(byte) irq1::idx#4
(byte) irq1::idx#5
(byte) irq1::idx#6
(byte) irq1::idx#7
(byte) irq1::l
(byte) irq1::l#0
(byte) irq1::l#1
(byte) irq1::l#2
(byte) irq1::l#3
(byte) irq1::line
(byte) irq1::line#0
(byte) irq1::line#1
(byte) irq1::line#10
(byte) irq1::line#11
(byte) irq1::line#12
(byte) irq1::line#13
(byte) irq1::line#14
(byte) irq1::line#15
(byte) irq1::line#2
(byte) irq1::line#3
(byte) irq1::line#4
(byte) irq1::line#5
(byte) irq1::line#6
(byte) irq1::line#7
(byte) irq1::line#8
(byte) irq1::line#9
(byte) irq1::raster
(byte) irq1::raster#0
(byte) irq1::raster#1
(const nomodify byte) irq1::scrollypos = (byte) $66
(byte) irq1::wobblepos
(byte) irq1::wobblepos#0
(byte) irq1::wobblepos#1
(byte) irq1::wobblepos#10
(byte) irq1::wobblepos#11
(byte) irq1::wobblepos#12
(byte) irq1::wobblepos#13
(byte) irq1::wobblepos#14
(byte) irq1::wobblepos#15
(byte) irq1::wobblepos#2
(byte) irq1::wobblepos#3
(byte) irq1::wobblepos#4
(byte) irq1::wobblepos#5
(byte) irq1::wobblepos#6
(byte) irq1::wobblepos#7
(byte) irq1::wobblepos#8
(byte) irq1::wobblepos#9
(byte) irq1::zoomval
(byte) irq1::zoomval#0
(void()) main()
(byte~) main::$2
(bool~) main::$3
(bool~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i1
(byte) main::i1#0
(byte) main::i1#1
(byte) main::i1#2
(byte) main::i1#3
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(const byte*) rasters[(number) $100]  = { fill( $100, 0) }
(volatile byte) sinpos loadstore
(const void()*) songInit = (void()*)(const byte*) SONG
(const void()*) songPlay = (void()*)(const byte*) SONG+(number) 3
(volatile byte) xpos loadstore
(volatile byte) zoomx loadstore

Adding number conversion cast (unumber) 3 in 
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) $47 in *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (number) $47
Adding number conversion cast (unumber) $53 in *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (number) $53
Adding number conversion cast (unumber) $40 in *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | (number) $40
Adding number conversion cast (unumber) $40 in *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | (number) $40
Adding number conversion cast (unumber) $28*$19 in (word) memset::num#0 ← (number) $28*(number) $19
Adding number conversion cast (unumber) 3*$28 in *((const nomodify byte*) SCREEN+(number) 3*(number) $28 + (byte) main::i1#3) ← *((const byte*) MEGA_LOGO + (byte) main::i1#3)
Adding number conversion cast (unumber) 0 in (bool~) main::$4 ← (byte) main::i#1 != (number) 0
Adding number conversion cast (unumber) $16 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (number) $16
Adding number conversion cast (unumber) $7f in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (number) $7f
Adding number conversion cast (unumber) 1 in *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) ← (number) 1
Adding number conversion cast (unumber) $80 in *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) | (number) $80
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) irq1::$12 ← (number) $28 + *((const byte*) SINUS + (byte) irq1::wobblepos#2)
Adding number conversion cast (unumber) irq1::$12 in (number~) irq1::$12 ← (unumber)(number) $28 + *((const byte*) SINUS + (byte) irq1::wobblepos#2)
Adding number conversion cast (unumber) $66 in *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (number) $66
Adding number conversion cast (unumber) $50 in *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (number) $50
Adding number conversion cast (unumber) $50 in *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (number) $50
Adding number conversion cast (unumber) irq1::scrollypos+irq1::blackbar+1 in (bool~) irq1::$5 ← (byte) irq1::line#6 == (const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar+(number) 1
Adding number conversion cast (unumber) 1 in (bool~) irq1::$5 ← (byte) irq1::line#6 == (unumber)(const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar+(number) 1
Adding number conversion cast (unumber) 1 in (number~) irq1::$7 ← (byte) irq1::zoomval#0 + (number) 1
Adding number conversion cast (unumber) irq1::$7 in (number~) irq1::$7 ← (byte) irq1::zoomval#0 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) irq1::$8 ← (volatile byte) zoomx == (number) 0
Adding number conversion cast (unumber) 0 in (volatile byte) greetnm ← (number) 0
Adding number conversion cast (unumber) 0 in *((const byte*) rasters + (byte) irq1::l#3) ← (number) 0
Adding number conversion cast (unumber) $10 in (bool~) irq1::$15 ← (byte) irq1::barcnt#2 < (number) $10
Adding number conversion cast (unumber) $10 in (number~) irq1::$16 ← (byte) irq1::barcnt#3 * (number) $10
Adding number conversion cast (unumber) irq1::$16 in (number~) irq1::$16 ← (byte) irq1::barcnt#3 * (unumber)(number) $10
Adding number conversion cast (unumber) $10 in (bool~) irq1::$17 ← (byte) irq1::i#2 < (number) $10
Adding number conversion cast (unumber) $f in (bool~) irq1::$18 ← (byte) irq1::i1#2 < (number) $f
Adding number conversion cast (unumber) $a in (byte) irq1::barsin#1 ← (byte) irq1::barsin#3 + (number) $a
Adding number conversion cast (unumber) $13 in (bool~) irq1::$19 ← (byte) irq1::i2#2 < (number) $13
Adding number conversion cast (unumber) 2 in (number~) irq1::$22 ← *((const byte*) rasters + (byte~) irq1::$21) / (number) 2
Adding number conversion cast (unumber) irq1::$22 in (number~) irq1::$22 ← *((const byte*) rasters + (byte~) irq1::$21) / (unumber)(number) 2
Adding number conversion cast (unumber) 7 in (number~) irq1::$23 ← (unumber~) irq1::$22 & (number) 7
Adding number conversion cast (unumber) irq1::$23 in (number~) irq1::$23 ← (unumber~) irq1::$22 & (unumber)(number) 7
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (unumber)(number) $47
Inlining cast *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (unumber)(number) $53
Inlining cast (word) memset::num#0 ← (unumber)(number) $28*(number) $19
Inlining cast *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (unumber)(number) $16
Inlining cast *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) ← (unumber)(number) 1
Inlining cast *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (unumber)(number) $66
Inlining cast *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (unumber)(number) $50
Inlining cast *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (unumber)(number) $50
Inlining cast (volatile byte) greetnm ← (unumber)(number) 0
Inlining cast *((const byte*) rasters + (byte) irq1::l#3) ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (struct MOS4569_VICIII*) 53248
Simplifying constant pointer cast (struct MEGA65_VICIV*) 53248
Simplifying constant pointer cast (byte*) 53504
Simplifying constant pointer cast (byte*) 53760
Simplifying constant pointer cast (byte*) 54016
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant pointer cast (void()**) 65534
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast $47
Simplifying constant integer cast $53
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast $16
Simplifying constant integer cast $7f
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $66
Simplifying constant integer cast $50
Simplifying constant integer cast $50
Simplifying constant integer cast (const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $a
Simplifying constant integer cast $13
Simplifying constant integer cast 2
Simplifying constant integer cast 7
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $47
Finalized unsigned number type (byte) $53
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $16
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $66
Finalized unsigned number type (byte) $50
Finalized unsigned number type (byte) $50
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $13
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 7
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) irq1::$12 ← (byte) $28 + *((const byte*) SINUS + (byte) irq1::wobblepos#2)
Inferred type updated to byte in (unumber~) irq1::$7 ← (byte) irq1::zoomval#0 + (byte) 1
Inferred type updated to byte in (unumber~) irq1::$16 ← (byte) irq1::barcnt#3 * (byte) $10
Inferred type updated to byte in (unumber~) irq1::$22 ← *((const byte*) rasters + (byte~) irq1::$21) / (byte) 2
Inferred type updated to byte in (unumber~) irq1::$23 ← (byte~) irq1::$22 & (byte) 7
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Inversing boolean not [92] (bool~) irq1::$6 ← (byte) irq1::line#6 != (const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar+(byte) 1 from [91] (bool~) irq1::$5 ← (byte) irq1::line#6 == (const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar+(byte) 1
Inversing boolean not [101] (bool~) irq1::$9 ← (volatile byte) zoomx != (byte) 0 from [100] (bool~) irq1::$8 ← (volatile byte) zoomx == (byte) 0
Inversing boolean not [106] (bool~) irq1::$11 ← (volatile byte) greetnm != (const nomodify byte) GREETCOUNT from [105] (bool~) irq1::$10 ← (volatile byte) greetnm == (const nomodify byte) GREETCOUNT
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias main::i1#2 = main::i1#3 
Alias irq1::line#10 = irq1::line#3 irq1::line#2 irq1::line#13 irq1::line#4 irq1::line#14 irq1::line#5 irq1::line#15 irq1::line#6 irq1::line#11 irq1::line#12 
Alias irq1::wobblepos#10 = irq1::wobblepos#3 irq1::wobblepos#4 irq1::wobblepos#2 irq1::wobblepos#14 irq1::wobblepos#12 irq1::wobblepos#15 irq1::wobblepos#13 irq1::wobblepos#8 irq1::wobblepos#9 irq1::wobblepos#11 
Alias irq1::line#7 = irq1::line#8 
Alias irq1::wobblepos#5 = irq1::wobblepos#6 
Alias irq1::l#2 = irq1::l#3 
Alias irq1::barsin#2 = irq1::barsin#4 
Alias irq1::barcnt#2 = irq1::barcnt#3 
Alias irq1::barcol#0 = irq1::$16 
Alias irq1::barcol#3 = irq1::barcol#5 irq1::barcol#7 
Alias irq1::idx#3 = irq1::idx#5 irq1::idx#7 
Alias irq1::i#2 = irq1::i#3 
Alias irq1::barsin#6 = irq1::barsin#9 irq1::barsin#8 
Alias irq1::barcnt#6 = irq1::barcnt#9 irq1::barcnt#8 
Alias irq1::barcol#4 = irq1::barcol#6 
Alias irq1::idx#4 = irq1::idx#6 
Alias irq1::i1#2 = irq1::i1#3 
Alias irq1::barsin#3 = irq1::barsin#7 irq1::barsin#5 
Alias irq1::barcnt#4 = irq1::barcnt#7 irq1::barcnt#5 
Alias irq1::i2#2 = irq1::i2#3 
Successful SSA optimization Pass2AliasElimination
Alias irq1::line#10 = irq1::line#9 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte) irq1::raster#1 (byte) irq1::raster#0
Identical Phi Values (byte) irq1::line#7 (byte) irq1::line#10
Identical Phi Values (byte) irq1::wobblepos#5 (byte) irq1::wobblepos#7
Identical Phi Values (byte) irq1::barsin#6 (byte) irq1::barsin#2
Identical Phi Values (byte) irq1::barcnt#6 (byte) irq1::barcnt#2
Identical Phi Values (byte) irq1::barsin#3 (byte) irq1::barsin#6
Identical Phi Values (byte) irq1::barcnt#4 (byte) irq1::barcnt#6
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) main::$3 [28] if((byte) main::i1#2<(byte~) main::$2) goto main::@2
Simple Condition (bool~) main::$4 [38] if((byte) main::i#1!=(byte) 0) goto main::@4
Simple Condition (bool~) irq1::$1 [58] if((byte) irq1::line#10!=(const nomodify byte) NUMBERL) goto irq1::@2
Simple Condition (bool~) irq1::$2 [63] if((byte) irq1::line#10<(const nomodify byte) irq1::scrollypos) goto irq1::@4
Simple Condition (bool~) irq1::$3 [70] if((byte) irq1::line#10==(const nomodify byte) irq1::scrollypos) goto irq1::@5
Simple Condition (bool~) irq1::$4 [74] if((byte) irq1::line#10==(const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar) goto irq1::@6
Simple Condition (bool~) irq1::$6 [77] if((byte) irq1::line#10!=(const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar+(byte) 1) goto irq1::@7
Simple Condition (bool~) irq1::$9 [84] if((volatile byte) zoomx!=(byte) 0) goto irq1::@7
Simple Condition (bool~) irq1::$11 [87] if((volatile byte) greetnm!=(const nomodify byte) GREETCOUNT) goto irq1::@7
Simple Condition (bool~) irq1::$13 [93] if((byte) irq1::raster#0==*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)) goto irq1::@8
Simple Condition (bool~) irq1::$14 [97] if((byte) irq1::l#2!=(const nomodify byte) NUMBERL) goto irq1::@17
Simple Condition (bool~) irq1::$15 [105] if((byte) irq1::barcnt#2<(byte) $10) goto irq1::@20
Simple Condition (bool~) irq1::$17 [112] if((byte) irq1::i#2<(byte) $10) goto irq1::@23
Simple Condition (bool~) irq1::$18 [120] if((byte) irq1::i1#2<(byte) $f) goto irq1::@26
Simple Condition (bool~) irq1::$19 [129] if((byte) irq1::i2#2<(byte) $13) goto irq1::@29
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [19] (word) memset::num#0 ← (unumber)(number) $28*(number) $19
Constant right-side identified [26] (byte~) main::$2 ← sizeof  (const byte*) MEGA_LOGO
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const void*) memset::str#0 = (void*)SCREEN
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = (unumber)$28*$19
Constant (const byte) main::i1#0 = 0
Constant (const byte) main::$2 = sizeof MEGA_LOGO
Constant (const byte) main::i#0 = 0
Constant (const byte) irq1::line#0 = 0
Constant (const byte) irq1::l#0 = 0
Constant (const byte) irq1::barcnt#0 = 0
Constant (const byte) irq1::i#0 = 0
Constant (const byte) irq1::i2#0 = 0
Constant (const byte) irq1::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$4 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const void*) memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolving array sizeof() sizeof (const byte*) MEGA_LOGO
Successful SSA optimization PassNSizeOfSimplification
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$4 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$4+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Adding number conversion cast (unumber) $bc in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $bc
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $bc
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [75] (byte) irq1::barcol#0 ← (byte) irq1::barcnt#2 * (byte) $10
Rewriting division to use shift [94] (byte~) irq1::$22 ← *((const byte*) rasters + (byte~) irq1::$21) / (byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte) main::i1#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) irq1::line#0
Inlining constant with var siblings (const byte) irq1::l#0
Inlining constant with var siblings (const byte) irq1::barcnt#0
Inlining constant with var siblings (const byte) irq1::i#0
Inlining constant with var siblings (const byte) irq1::i2#0
Inlining constant with var siblings (const byte) irq1::i1#0
Constant inlined irq1::l#0 = (byte) 0
Constant inlined memset::$4 = (byte*)(const void*) memset::str#0
Constant inlined main::$2 = (byte) $bc*(const byte) SIZEOF_BYTE
Constant inlined irq1::line#0 = (byte) 0
Constant inlined irq1::i2#0 = (byte) 0
Constant inlined irq1::i1#0 = (byte) 0
Constant inlined main::i1#0 = (byte) 0
Constant inlined main::i#0 = (byte) 0
Constant inlined irq1::barcnt#0 = (byte) 0
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined irq1::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in assignment *(rasters+irq1::scrollypos + irq1::$21)
Consolidated array index constant in assignment *(rasters+irq1::scrollypos + irq1::$20)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias irq1::i2#2 = irq1::$20 irq1::$21 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting main::@8(between main::@4 and main::@4)
Added new block during phi lifting irq1::@30(between irq1::@12 and irq1::@7)
Added new block during phi lifting irq1::@31(between irq1::@13 and irq1::@7)
Added new block during phi lifting irq1::@32(between irq1::@14 and irq1::@7)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of irq1::@3
Adding NOP phi() at start of irq1::@21
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [__start] to main:6 
Calls in [main] to memset:105 

Created 16 initial phi equivalence classes
Coalesced [14] irq1::wobblepos#16 ← irq1::wobblepos#0
Coalesced [22] irq1::barsin#10 ← irq1::barsin#0
Coalesced [33] irq1::i2#4 ← irq1::i2#1
Coalesced [36] irq1::barcol#8 ← irq1::barcol#0
Coalesced [37] irq1::idx#8 ← irq1::idx#0
Coalesced [40] irq1::barcol#10 ← irq1::barcol#3
Coalesced [41] irq1::idx#10 ← irq1::idx#3
Coalesced [46] irq1::barcnt#10 ← irq1::barcnt#1
Coalesced [47] irq1::barsin#11 ← irq1::barsin#1
Coalesced [52] irq1::i1#4 ← irq1::i1#1
Coalesced [53] irq1::barcol#11 ← irq1::barcol#2
Coalesced [54] irq1::idx#11 ← irq1::idx#2
Coalesced [59] irq1::i#4 ← irq1::i#1
Coalesced [60] irq1::barcol#9 ← irq1::barcol#1
Coalesced [61] irq1::idx#9 ← irq1::idx#1
Coalesced [64] irq1::l#4 ← irq1::l#1
Coalesced [81] irq1::wobblepos#21 ← irq1::wobblepos#10
Coalesced [86] irq1::line#16 ← irq1::line#1
Coalesced (already) [87] irq1::wobblepos#17 ← irq1::wobblepos#7
Coalesced (already) [88] irq1::wobblepos#20 ← irq1::wobblepos#10
Coalesced (already) [89] irq1::wobblepos#19 ← irq1::wobblepos#10
Coalesced (already) [90] irq1::wobblepos#18 ← irq1::wobblepos#10
Coalesced (already) [92] irq1::wobblepos#24 ← irq1::wobblepos#10
Coalesced (already) [95] irq1::wobblepos#23 ← irq1::wobblepos#10
Coalesced [100] irq1::wobblepos#22 ← irq1::wobblepos#1
Coalesced [128] main::i#3 ← main::i#1
Coalesced [131] main::i1#4 ← main::i1#1
Coalesced [140] memset::dst#4 ← memset::dst#1
Coalesced down to 13 phi equivalence classes
Culled Empty Block (label) __start::@2
Culled Empty Block (label) irq1::@3
Culled Empty Block (label) irq1::@21
Culled Empty Block (label) irq1::@24
Culled Empty Block (label) irq1::@32
Culled Empty Block (label) irq1::@31
Culled Empty Block (label) irq1::@30
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@8
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block irq1::@4 to irq1::@3
Renumbering block irq1::@5 to irq1::@4
Renumbering block irq1::@6 to irq1::@5
Renumbering block irq1::@7 to irq1::@6
Renumbering block irq1::@8 to irq1::@7
Renumbering block irq1::@9 to irq1::@8
Renumbering block irq1::@10 to irq1::@9
Renumbering block irq1::@11 to irq1::@10
Renumbering block irq1::@12 to irq1::@11
Renumbering block irq1::@13 to irq1::@12
Renumbering block irq1::@14 to irq1::@13
Renumbering block irq1::@15 to irq1::@14
Renumbering block irq1::@16 to irq1::@15
Renumbering block irq1::@17 to irq1::@16
Renumbering block irq1::@18 to irq1::@17
Renumbering block irq1::@19 to irq1::@18
Renumbering block irq1::@20 to irq1::@19
Renumbering block irq1::@22 to irq1::@20
Renumbering block irq1::@23 to irq1::@21
Renumbering block irq1::@25 to irq1::@22
Renumbering block irq1::@26 to irq1::@23
Renumbering block irq1::@27 to irq1::@24
Renumbering block irq1::@28 to irq1::@25
Renumbering block irq1::@29 to irq1::@26
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH

(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (volatile byte) sinpos ← (byte) 0
  [2] (volatile byte) zoomx ← (byte) 0
  [3] (volatile byte) xpos ← (byte) 7
  [4] (volatile byte) greetnm ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

interrupt(HARDWARE_STACK)(void()) irq1()
irq1: scope:[irq1]  from
  [8] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) | (byte) $80
  [9] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [10] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (byte) 0
  [11] (volatile byte) sinpos ← ++ (volatile byte) sinpos
  [12] (byte) irq1::wobblepos#0 ← (volatile byte) sinpos
  to:irq1::@1
irq1::@1: scope:[irq1]  from irq1 irq1::@8
  [13] (byte) irq1::wobblepos#10 ← phi( irq1/(byte) irq1::wobblepos#0 irq1::@8/(byte) irq1::wobblepos#7 )
  [13] (byte) irq1::line#10 ← phi( irq1/(byte) 0 irq1::@8/(byte) irq1::line#1 )
  [14] if((byte) irq1::line#10!=(const nomodify byte) NUMBERL) goto irq1::@2
  to:irq1::@15
irq1::@15: scope:[irq1]  from irq1::@1 irq1::@16
  [15] (byte) irq1::l#2 ← phi( irq1::@16/(byte) irq1::l#1 irq1::@1/(byte) 0 )
  [16] if((byte) irq1::l#2!=(const nomodify byte) NUMBERL) goto irq1::@16
  to:irq1::@17
irq1::@17: scope:[irq1]  from irq1::@15
  [17] call *((const void()*) songPlay) 
  [18] (byte) irq1::barsin#0 ← (volatile byte) sinpos
  to:irq1::@18
irq1::@18: scope:[irq1]  from irq1::@17 irq1::@24
  [19] (byte) irq1::barsin#2 ← phi( irq1::@17/(byte) irq1::barsin#0 irq1::@24/(byte) irq1::barsin#1 )
  [19] (byte) irq1::barcnt#2 ← phi( irq1::@17/(byte) 0 irq1::@24/(byte) irq1::barcnt#1 )
  [20] if((byte) irq1::barcnt#2<(byte) $10) goto irq1::@19
  to:irq1::@25
irq1::@25: scope:[irq1]  from irq1::@18 irq1::@26
  [21] (byte) irq1::i2#2 ← phi( irq1::@18/(byte) 0 irq1::@26/(byte) irq1::i2#1 )
  [22] if((byte) irq1::i2#2<(byte) $13) goto irq1::@26
  to:irq1::@return
irq1::@return: scope:[irq1]  from irq1::@25
  [23] return 
  to:@return
irq1::@26: scope:[irq1]  from irq1::@25
  [24] (byte~) irq1::$22 ← *((const byte*) rasters+(const nomodify byte) irq1::scrollypos + (byte) irq1::i2#2) >> (byte) 1
  [25] (byte~) irq1::$23 ← (byte~) irq1::$22 & (byte) 7
  [26] *((const byte*) rasters+(const nomodify byte) irq1::scrollypos + (byte) irq1::i2#2) ← (byte~) irq1::$23
  [27] (byte) irq1::i2#1 ← ++ (byte) irq1::i2#2
  to:irq1::@25
irq1::@19: scope:[irq1]  from irq1::@18
  [28] (byte) irq1::idx#0 ← *((const byte*) SINUS + (byte) irq1::barsin#2)
  [29] (byte) irq1::barcol#0 ← (byte) irq1::barcnt#2 << (byte) 4
  to:irq1::@20
irq1::@20: scope:[irq1]  from irq1::@19 irq1::@21
  [30] (byte) irq1::idx#3 ← phi( irq1::@19/(byte) irq1::idx#0 irq1::@21/(byte) irq1::idx#1 )
  [30] (byte) irq1::barcol#3 ← phi( irq1::@19/(byte) irq1::barcol#0 irq1::@21/(byte) irq1::barcol#1 )
  [30] (byte) irq1::i#2 ← phi( irq1::@19/(byte) 0 irq1::@21/(byte) irq1::i#1 )
  [31] if((byte) irq1::i#2<(byte) $10) goto irq1::@21
  to:irq1::@22
irq1::@22: scope:[irq1]  from irq1::@20 irq1::@23
  [32] (byte) irq1::idx#4 ← phi( irq1::@20/(byte) irq1::idx#3 irq1::@23/(byte) irq1::idx#2 )
  [32] (byte) irq1::barcol#4 ← phi( irq1::@20/(byte) irq1::barcol#3 irq1::@23/(byte) irq1::barcol#2 )
  [32] (byte) irq1::i1#2 ← phi( irq1::@20/(byte) 0 irq1::@23/(byte) irq1::i1#1 )
  [33] if((byte) irq1::i1#2<(byte) $f) goto irq1::@23
  to:irq1::@24
irq1::@24: scope:[irq1]  from irq1::@22
  [34] (byte) irq1::barsin#1 ← (byte) irq1::barsin#2 + (byte) $a
  [35] (byte) irq1::barcnt#1 ← ++ (byte) irq1::barcnt#2
  to:irq1::@18
irq1::@23: scope:[irq1]  from irq1::@22
  [36] (byte) irq1::barcol#2 ← -- (byte) irq1::barcol#4
  [37] *((const byte*) rasters + (byte) irq1::idx#4) ← (byte) irq1::barcol#2
  [38] (byte) irq1::idx#2 ← ++ (byte) irq1::idx#4
  [39] (byte) irq1::i1#1 ← ++ (byte) irq1::i1#2
  to:irq1::@22
irq1::@21: scope:[irq1]  from irq1::@20
  [40] *((const byte*) rasters + (byte) irq1::idx#3) ← (byte) irq1::barcol#3
  [41] (byte) irq1::idx#1 ← ++ (byte) irq1::idx#3
  [42] (byte) irq1::barcol#1 ← ++ (byte) irq1::barcol#3
  [43] (byte) irq1::i#1 ← ++ (byte) irq1::i#2
  to:irq1::@20
irq1::@16: scope:[irq1]  from irq1::@15
  [44] *((const byte*) rasters + (byte) irq1::l#2) ← (byte) 0
  [45] (byte) irq1::l#1 ← ++ (byte) irq1::l#2
  to:irq1::@15
irq1::@2: scope:[irq1]  from irq1::@1
  [46] (byte) irq1::col#0 ← *((const byte*) rasters + (byte) irq1::line#10)
  [47] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR) ← (byte) irq1::col#0
  [48] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR) ← (byte) irq1::col#0
  [49] if((byte) irq1::line#10<(const nomodify byte) irq1::scrollypos) goto irq1::@3
  to:irq1::@9
irq1::@9: scope:[irq1]  from irq1::@2
  [50] if((byte) irq1::line#10==(const nomodify byte) irq1::scrollypos) goto irq1::@4
  to:irq1::@10
irq1::@10: scope:[irq1]  from irq1::@9
  [51] if((byte) irq1::line#10==(const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar) goto irq1::@5
  to:irq1::@11
irq1::@11: scope:[irq1]  from irq1::@10
  [52] if((byte) irq1::line#10!=(const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar+(byte) 1) goto irq1::@6
  to:irq1::@12
irq1::@12: scope:[irq1]  from irq1::@11
  [53] (byte) irq1::zoomval#0 ← *((const byte*) SINUS + (volatile byte) zoomx)
  [54] (volatile byte) zoomx ← ++ (volatile byte) zoomx
  [55] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) irq1::zoomval#0
  [56] (byte~) irq1::$7 ← (byte) irq1::zoomval#0 + (byte) 1
  [57] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte~) irq1::$7
  [58] if((volatile byte) zoomx!=(byte) 0) goto irq1::@6
  to:irq1::@13
irq1::@13: scope:[irq1]  from irq1::@12
  [59] (volatile byte) greetnm ← ++ (volatile byte) greetnm
  [60] if((volatile byte) greetnm!=(const nomodify byte) GREETCOUNT) goto irq1::@6
  to:irq1::@14
irq1::@14: scope:[irq1]  from irq1::@13
  [61] (volatile byte) greetnm ← (byte) 0
  to:irq1::@6
irq1::@6: scope:[irq1]  from irq1::@11 irq1::@12 irq1::@13 irq1::@14 irq1::@3 irq1::@4 irq1::@5
  [62] (byte) irq1::wobblepos#7 ← phi( irq1::@11/(byte) irq1::wobblepos#10 irq1::@12/(byte) irq1::wobblepos#10 irq1::@13/(byte) irq1::wobblepos#10 irq1::@14/(byte) irq1::wobblepos#10 irq1::@3/(byte) irq1::wobblepos#1 irq1::@4/(byte) irq1::wobblepos#10 irq1::@5/(byte) irq1::wobblepos#10 )
  [63] (byte) irq1::raster#0 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)
  to:irq1::@7
irq1::@7: scope:[irq1]  from irq1::@6 irq1::@7
  [64] if((byte) irq1::raster#0==*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)) goto irq1::@7
  to:irq1::@8
irq1::@8: scope:[irq1]  from irq1::@7
  [65] (byte) irq1::line#1 ← ++ (byte) irq1::line#10
  to:irq1::@1
irq1::@5: scope:[irq1]  from irq1::@10
  [66] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50
  to:irq1::@6
irq1::@4: scope:[irq1]  from irq1::@9
  [67] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50
  [68] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (volatile byte) xpos
  to:irq1::@6
irq1::@3: scope:[irq1]  from irq1::@2
  [69] (byte~) irq1::$12 ← (byte) $28 + *((const byte*) SINUS + (byte) irq1::wobblepos#10)
  [70] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte~) irq1::$12
  [71] (byte) irq1::wobblepos#1 ← ++ (byte) irq1::wobblepos#10
  [72] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) $66
  to:irq1::@6

(void()) main()
main: scope:[main]  from __start::@1
  [73] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $47
  [74] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $53
  [75] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | (byte) $40
  [76] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | (byte) $40
  [77] call memset 
  to:main::@6
main::@6: scope:[main]  from main
  asm { lda#0  }
  [79] call *((const void()*) songInit) 
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@6
  [80] (byte) main::i1#2 ← phi( main::@2/(byte) main::i1#1 main::@6/(byte) 0 )
  [81] if((byte) main::i1#2<(byte) $bc*(const byte) SIZEOF_BYTE) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3
  [82] (byte) main::i#2 ← phi( main::@1/(byte) 0 main::@3/(byte) main::i#1 )
  [83] *((const nomodify byte*) PALETTE_RED + (byte) main::i#2) ← *((const byte*) PAL_RED + (byte) main::i#2)
  [84] *((const nomodify byte*) PALETTE_GREEN + (byte) main::i#2) ← *((const byte*) PAL_GREEN + (byte) main::i#2)
  [85] *((const nomodify byte*) PALETTE_BLUE + (byte) main::i#2) ← *((const byte*) PAL_BLUE + (byte) main::i#2)
  [86] (byte) main::i#1 ← ++ (byte) main::i#2
  [87] if((byte) main::i#1!=(byte) 0) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  asm { sei  }
  [89] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [90] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (byte) $16
  [91] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f
  [92] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [93] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_STACK)(void()) irq1()
  [94] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  [95] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  [96] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) ← (byte) 1
  asm { cli  }
  to:main::@5
main::@5: scope:[main]  from main::@4 main::@5
  [98] phi()
  to:main::@5
main::@2: scope:[main]  from main::@1
  [99] *((const nomodify byte*) SCREEN+(byte)(number) 3*(number) $28 + (byte) main::i1#2) ← *((const byte*) MEGA_LOGO + (byte) main::i1#2)
  [100] (byte) main::i1#1 ← ++ (byte) main::i1#2
  to:main::@1

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main
  [101] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [102] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [103] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [104] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [105] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [106] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(byte) MEGA65_VICIV::ALPHADELAY
(byte) MEGA65_VICIV::B0PIX
(byte) MEGA65_VICIV::B0_ADDR
(byte) MEGA65_VICIV::B1PIX
(byte) MEGA65_VICIV::B1_ADDR
(byte) MEGA65_VICIV::B2PIX
(byte) MEGA65_VICIV::B2_ADDR
(byte) MEGA65_VICIV::B3PIX
(byte) MEGA65_VICIV::B3_ADDR
(byte) MEGA65_VICIV::B4PIX
(byte) MEGA65_VICIV::B4_ADDR
(byte) MEGA65_VICIV::B5PIX
(byte) MEGA65_VICIV::B5_ADDR
(byte) MEGA65_VICIV::B6PIX
(byte) MEGA65_VICIV::B6_ADDR
(byte) MEGA65_VICIV::B7PIX
(byte) MEGA65_VICIV::B7_ADDR
(byte) MEGA65_VICIV::BBDRPOS_HI
(byte) MEGA65_VICIV::BBDRPOS_LO
(byte) MEGA65_VICIV::BG_COLOR
(byte) MEGA65_VICIV::BG_COLOR1
(byte) MEGA65_VICIV::BG_COLOR2
(byte) MEGA65_VICIV::BG_COLOR3
(byte) MEGA65_VICIV::BORDER_COLOR
(byte) MEGA65_VICIV::BP16ENS
(byte) MEGA65_VICIV::BPCOMP
(byte) MEGA65_VICIV::BPX
(byte) MEGA65_VICIV::BPY
(byte) MEGA65_VICIV::CHARPTR_HILO
(byte) MEGA65_VICIV::CHARPTR_LOHI
(byte) MEGA65_VICIV::CHARPTR_LOLO
(byte) MEGA65_VICIV::CHARSTEP_HI
(byte) MEGA65_VICIV::CHARSTEP_LO
(byte) MEGA65_VICIV::CHRCOUNT
(byte) MEGA65_VICIV::CHRXSCL
(byte) MEGA65_VICIV::CHRYSCL
(byte) MEGA65_VICIV::COLPTR_HI
(byte) MEGA65_VICIV::COLPTR_LO
(byte) MEGA65_VICIV::CONTROL1
(byte) MEGA65_VICIV::CONTROL2
(byte) MEGA65_VICIV::CONTROLA
(byte) MEGA65_VICIV::CONTROLB
(byte) MEGA65_VICIV::CONTROLC
(byte) MEGA65_VICIV::DEBUG1
(byte) MEGA65_VICIV::DEBUGX
(byte) MEGA65_VICIV::DEBUGXY
(byte) MEGA65_VICIV::DEBUGY
(byte) MEGA65_VICIV::FNRASTER_HI
(byte) MEGA65_VICIV::FNRASTER_LO
(byte) MEGA65_VICIV::HPOS
(byte) MEGA65_VICIV::IRQ_ENABLE
(byte) MEGA65_VICIV::IRQ_STATUS
(byte) MEGA65_VICIV::KEY
(byte) MEGA65_VICIV::LIGHTPEN_X
(byte) MEGA65_VICIV::LIGHTPEN_Y
(byte) MEGA65_VICIV::MEMORY
(byte) MEGA65_VICIV::PALSEL
(byte) MEGA65_VICIV::RASLINE0
(byte) MEGA65_VICIV::RASTER
(byte) MEGA65_VICIV::ROWCOUNT
(byte) MEGA65_VICIV::RSTCMP
(byte) MEGA65_VICIV::RSTCOMP
(byte) MEGA65_VICIV::SBPDEBUG
(byte) MEGA65_VICIV::SCRNPTR_HIHI
(byte) MEGA65_VICIV::SCRNPTR_HILO
(byte) MEGA65_VICIV::SCRNPTR_LOHI
(byte) MEGA65_VICIV::SCRNPTR_LOLO
(byte) MEGA65_VICIV::SIDBDRWD_HI
(byte) MEGA65_VICIV::SIDBDRWD_LO
(byte) MEGA65_VICIV::SPR16EN
(byte) MEGA65_VICIV::SPRALPHAVAL
(byte) MEGA65_VICIV::SPRENALPHA
(byte) MEGA65_VICIV::SPRENV400
(byte) MEGA65_VICIV::SPRHGHT
(byte) MEGA65_VICIV::SPRHGTEN
(byte) MEGA65_VICIV::SPRITE0_COLOR
(byte) MEGA65_VICIV::SPRITE0_X
(byte) MEGA65_VICIV::SPRITE0_Y
(byte) MEGA65_VICIV::SPRITE1_COLOR
(byte) MEGA65_VICIV::SPRITE1_X
(byte) MEGA65_VICIV::SPRITE1_Y
(byte) MEGA65_VICIV::SPRITE2_COLOR
(byte) MEGA65_VICIV::SPRITE2_X
(byte) MEGA65_VICIV::SPRITE2_Y
(byte) MEGA65_VICIV::SPRITE3_COLOR
(byte) MEGA65_VICIV::SPRITE3_X
(byte) MEGA65_VICIV::SPRITE3_Y
(byte) MEGA65_VICIV::SPRITE4_COLOR
(byte) MEGA65_VICIV::SPRITE4_X
(byte) MEGA65_VICIV::SPRITE4_Y
(byte) MEGA65_VICIV::SPRITE5_COLOR
(byte) MEGA65_VICIV::SPRITE5_X
(byte) MEGA65_VICIV::SPRITE5_Y
(byte) MEGA65_VICIV::SPRITE6_COLOR
(byte) MEGA65_VICIV::SPRITE6_X
(byte) MEGA65_VICIV::SPRITE6_Y
(byte) MEGA65_VICIV::SPRITE7_COLOR
(byte) MEGA65_VICIV::SPRITE7_X
(byte) MEGA65_VICIV::SPRITE7_Y
(byte) MEGA65_VICIV::SPRITES_BG_COLLISION
(byte) MEGA65_VICIV::SPRITES_COLLISION
(byte) MEGA65_VICIV::SPRITES_ENABLE
(byte) MEGA65_VICIV::SPRITES_EXPAND_X
(byte) MEGA65_VICIV::SPRITES_EXPAND_Y
(byte) MEGA65_VICIV::SPRITES_MC
(byte) MEGA65_VICIV::SPRITES_MCOLOR1
(byte) MEGA65_VICIV::SPRITES_MCOLOR2
(byte) MEGA65_VICIV::SPRITES_PRIORITY
(byte) MEGA65_VICIV::SPRITES_XMSB
(byte) MEGA65_VICIV::SPRPTRADR_HILO
(byte) MEGA65_VICIV::SPRPTRADR_LOHI
(byte) MEGA65_VICIV::SPRPTRADR_LOLO
(byte) MEGA65_VICIV::SPRX64EN
(byte) MEGA65_VICIV::SPRXSMSBS
(byte) MEGA65_VICIV::SPRYSMSBSM
(byte) MEGA65_VICIV::SRPYMSBS
(byte) MEGA65_VICIV::SYNCPOL
(byte) MEGA65_VICIV::TBDRPOS_HI
(byte) MEGA65_VICIV::TBDRPOS_LO
(byte) MEGA65_VICIV::TEXTXPOS_HI
(byte) MEGA65_VICIV::TEXTXPOS_LO
(byte) MEGA65_VICIV::TEXTYPOS_HI
(byte) MEGA65_VICIV::TEXTYPOS_LO
(byte) MEGA65_VICIV::UNUSED
(byte) MEGA65_VICIV::VPOS
(byte) MEGA65_VICIV::VSYNDEL
(byte) MEGA65_VICIV::XPOS_HI
(byte) MEGA65_VICIV::XPOS_LO
(byte) MOS4569_VICIII::B0PIX
(byte) MOS4569_VICIII::B0_ADDR
(byte) MOS4569_VICIII::B1PIX
(byte) MOS4569_VICIII::B1_ADDR
(byte) MOS4569_VICIII::B2PIX
(byte) MOS4569_VICIII::B2_ADDR
(byte) MOS4569_VICIII::B3PIX
(byte) MOS4569_VICIII::B3_ADDR
(byte) MOS4569_VICIII::B4PIX
(byte) MOS4569_VICIII::B4_ADDR
(byte) MOS4569_VICIII::B5PIX
(byte) MOS4569_VICIII::B5_ADDR
(byte) MOS4569_VICIII::B6PIX
(byte) MOS4569_VICIII::B6_ADDR
(byte) MOS4569_VICIII::B7PIX
(byte) MOS4569_VICIII::B7_ADDR
(byte) MOS4569_VICIII::BG_COLOR
(byte) MOS4569_VICIII::BG_COLOR1
(byte) MOS4569_VICIII::BG_COLOR2
(byte) MOS4569_VICIII::BG_COLOR3
(byte) MOS4569_VICIII::BORDER_COLOR
(byte) MOS4569_VICIII::BPCOMP
(byte) MOS4569_VICIII::BPX
(byte) MOS4569_VICIII::BPY
(byte) MOS4569_VICIII::CONTROL1
(byte) MOS4569_VICIII::CONTROL2
(byte) MOS4569_VICIII::CONTROLA
(byte) MOS4569_VICIII::CONTROLB
(byte) MOS4569_VICIII::HPOS
(byte) MOS4569_VICIII::IRQ_ENABLE
(byte) MOS4569_VICIII::IRQ_STATUS
(byte) MOS4569_VICIII::KEY
(byte) MOS4569_VICIII::LIGHTPEN_X
(byte) MOS4569_VICIII::LIGHTPEN_Y
(byte) MOS4569_VICIII::MEMORY
(byte) MOS4569_VICIII::RASTER
(byte) MOS4569_VICIII::SPRITE0_COLOR
(byte) MOS4569_VICIII::SPRITE0_X
(byte) MOS4569_VICIII::SPRITE0_Y
(byte) MOS4569_VICIII::SPRITE1_COLOR
(byte) MOS4569_VICIII::SPRITE1_X
(byte) MOS4569_VICIII::SPRITE1_Y
(byte) MOS4569_VICIII::SPRITE2_COLOR
(byte) MOS4569_VICIII::SPRITE2_X
(byte) MOS4569_VICIII::SPRITE2_Y
(byte) MOS4569_VICIII::SPRITE3_COLOR
(byte) MOS4569_VICIII::SPRITE3_X
(byte) MOS4569_VICIII::SPRITE3_Y
(byte) MOS4569_VICIII::SPRITE4_COLOR
(byte) MOS4569_VICIII::SPRITE4_X
(byte) MOS4569_VICIII::SPRITE4_Y
(byte) MOS4569_VICIII::SPRITE5_COLOR
(byte) MOS4569_VICIII::SPRITE5_X
(byte) MOS4569_VICIII::SPRITE5_Y
(byte) MOS4569_VICIII::SPRITE6_COLOR
(byte) MOS4569_VICIII::SPRITE6_X
(byte) MOS4569_VICIII::SPRITE6_Y
(byte) MOS4569_VICIII::SPRITE7_COLOR
(byte) MOS4569_VICIII::SPRITE7_X
(byte) MOS4569_VICIII::SPRITE7_Y
(byte) MOS4569_VICIII::SPRITES_BG_COLLISION
(byte) MOS4569_VICIII::SPRITES_COLLISION
(byte) MOS4569_VICIII::SPRITES_ENABLE
(byte) MOS4569_VICIII::SPRITES_EXPAND_X
(byte) MOS4569_VICIII::SPRITES_EXPAND_Y
(byte) MOS4569_VICIII::SPRITES_MC
(byte) MOS4569_VICIII::SPRITES_MCOLOR1
(byte) MOS4569_VICIII::SPRITES_MCOLOR2
(byte) MOS4569_VICIII::SPRITES_PRIORITY
(byte) MOS4569_VICIII::SPRITES_XMSB
(byte) MOS4569_VICIII::UNUSED
(byte) MOS4569_VICIII::VPOS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) __start()
(volatile byte) greetnm loadstore 1.3529411764705883
interrupt(HARDWARE_STACK)(void()) irq1()
(byte~) irq1::$12 22.0
(byte~) irq1::$22 22.0
(byte~) irq1::$23 22.0
(byte~) irq1::$7 22.0
(byte) irq1::barcnt
(byte) irq1::barcnt#1 22.0
(byte) irq1::barcnt#2 2.588235294117647
(byte) irq1::barcol
(byte) irq1::barcol#0 22.0
(byte) irq1::barcol#1 101.0
(byte) irq1::barcol#2 75.75
(byte) irq1::barcol#3 103.75
(byte) irq1::barcol#4 151.5
(byte) irq1::barsin
(byte) irq1::barsin#0 4.0
(byte) irq1::barsin#1 11.0
(byte) irq1::barsin#2 2.1875
(byte) irq1::col
(byte) irq1::col#0 16.5
(byte) irq1::i
(byte) irq1::i#1 202.0
(byte) irq1::i#2 60.599999999999994
(byte) irq1::i1
(byte) irq1::i1#1 202.0
(byte) irq1::i1#2 60.599999999999994
(byte) irq1::i2
(byte) irq1::i2#1 22.0
(byte) irq1::i2#2 11.0
(byte) irq1::idx
(byte) irq1::idx#0 11.0
(byte) irq1::idx#1 67.33333333333333
(byte) irq1::idx#2 101.0
(byte) irq1::idx#3 138.33333333333331
(byte) irq1::idx#4 101.0
(byte) irq1::l
(byte) irq1::l#1 22.0
(byte) irq1::l#2 14.666666666666666
(byte) irq1::line
(byte) irq1::line#1 22.0
(byte) irq1::line#10 3.142857142857143
(byte) irq1::raster
(byte) irq1::raster#0 56.0
(byte) irq1::wobblepos
(byte) irq1::wobblepos#0 4.0
(byte) irq1::wobblepos#1 11.0
(byte) irq1::wobblepos#10 4.391304347826087
(byte) irq1::wobblepos#7 22.0
(byte) irq1::zoomval
(byte) irq1::zoomval#0 11.0
(void()) main()
(byte) main::i
(byte) main::i#1 151.5
(byte) main::i#2 202.0
(byte) main::i1
(byte) main::i1#1 202.0
(byte) main::i1#2 168.33333333333331
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 2002.0
(byte*) memset::dst#2 1334.6666666666667
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(volatile byte) sinpos loadstore 0.2564102564102564
(volatile byte) xpos loadstore 0.3823529411764706
(volatile byte) zoomx loadstore 1.3529411764705883

Initial phi equivalence classes
[ irq1::line#10 irq1::line#1 ]
[ irq1::wobblepos#10 irq1::wobblepos#0 irq1::wobblepos#7 irq1::wobblepos#1 ]
[ irq1::l#2 irq1::l#1 ]
[ irq1::barcnt#2 irq1::barcnt#1 ]
[ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ]
[ irq1::i2#2 irq1::i2#1 ]
[ irq1::i#2 irq1::i#1 ]
[ irq1::i1#2 irq1::i1#1 ]
[ irq1::barcol#4 irq1::barcol#3 irq1::barcol#0 irq1::barcol#1 irq1::barcol#2 ]
[ irq1::idx#4 irq1::idx#3 irq1::idx#0 irq1::idx#1 irq1::idx#2 ]
[ main::i1#2 main::i1#1 ]
[ main::i#2 main::i#1 ]
[ memset::dst#2 memset::dst#1 ]
Added variable sinpos to live range equivalence class [ sinpos ]
Added variable zoomx to live range equivalence class [ zoomx ]
Added variable xpos to live range equivalence class [ xpos ]
Added variable greetnm to live range equivalence class [ greetnm ]
Added variable irq1::$22 to live range equivalence class [ irq1::$22 ]
Added variable irq1::$23 to live range equivalence class [ irq1::$23 ]
Added variable irq1::col#0 to live range equivalence class [ irq1::col#0 ]
Added variable irq1::zoomval#0 to live range equivalence class [ irq1::zoomval#0 ]
Added variable irq1::$7 to live range equivalence class [ irq1::$7 ]
Added variable irq1::raster#0 to live range equivalence class [ irq1::raster#0 ]
Added variable irq1::$12 to live range equivalence class [ irq1::$12 ]
Complete equivalence classes
[ irq1::line#10 irq1::line#1 ]
[ irq1::wobblepos#10 irq1::wobblepos#0 irq1::wobblepos#7 irq1::wobblepos#1 ]
[ irq1::l#2 irq1::l#1 ]
[ irq1::barcnt#2 irq1::barcnt#1 ]
[ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ]
[ irq1::i2#2 irq1::i2#1 ]
[ irq1::i#2 irq1::i#1 ]
[ irq1::i1#2 irq1::i1#1 ]
[ irq1::barcol#4 irq1::barcol#3 irq1::barcol#0 irq1::barcol#1 irq1::barcol#2 ]
[ irq1::idx#4 irq1::idx#3 irq1::idx#0 irq1::idx#1 irq1::idx#2 ]
[ main::i1#2 main::i1#1 ]
[ main::i#2 main::i#1 ]
[ memset::dst#2 memset::dst#1 ]
[ sinpos ]
[ zoomx ]
[ xpos ]
[ greetnm ]
[ irq1::$22 ]
[ irq1::$23 ]
[ irq1::col#0 ]
[ irq1::zoomval#0 ]
[ irq1::$7 ]
[ irq1::raster#0 ]
[ irq1::$12 ]
Allocated zp[1]:2 [ irq1::line#10 irq1::line#1 ]
Allocated zp[1]:3 [ irq1::wobblepos#10 irq1::wobblepos#0 irq1::wobblepos#7 irq1::wobblepos#1 ]
Allocated zp[1]:4 [ irq1::l#2 irq1::l#1 ]
Allocated zp[1]:5 [ irq1::barcnt#2 irq1::barcnt#1 ]
Allocated zp[1]:6 [ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ]
Allocated zp[1]:7 [ irq1::i2#2 irq1::i2#1 ]
Allocated zp[1]:8 [ irq1::i#2 irq1::i#1 ]
Allocated zp[1]:9 [ irq1::i1#2 irq1::i1#1 ]
Allocated zp[1]:10 [ irq1::barcol#4 irq1::barcol#3 irq1::barcol#0 irq1::barcol#1 irq1::barcol#2 ]
Allocated zp[1]:11 [ irq1::idx#4 irq1::idx#3 irq1::idx#0 irq1::idx#1 irq1::idx#2 ]
Allocated zp[1]:12 [ main::i1#2 main::i1#1 ]
Allocated zp[1]:13 [ main::i#2 main::i#1 ]
Allocated zp[2]:14 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:16 [ sinpos ]
Allocated zp[1]:17 [ zoomx ]
Allocated zp[1]:18 [ xpos ]
Allocated zp[1]:19 [ greetnm ]
Allocated zp[1]:20 [ irq1::$22 ]
Allocated zp[1]:21 [ irq1::$23 ]
Allocated zp[1]:22 [ irq1::col#0 ]
Allocated zp[1]:23 [ irq1::zoomval#0 ]
Allocated zp[1]:24 [ irq1::$7 ]
Allocated zp[1]:25 [ irq1::raster#0 ]
Allocated zp[1]:26 [ irq1::$12 ]

INITIAL ASM
Target platform is mega65_c64 / MEGA45GS02
  // File Comments
// Raster65 Demo Implementation in C 
// Based on RASTER65 assembler demo
// https://mega.scryptos.com/sharefolder/MEGA/MEGA65+filehost
// https://www.forum64.de/index.php?thread/104591-xemu-vic-iv-implementation-update/&postID=1560511#post1560511
  // Upstart
.cpu _45gs02
  // MEGA65 platform executable starting in C64 mode.
.file [name="raster65.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$080d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
.segment Code


  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // The number of greetings
  .const GREETCOUNT = $10
  // The number of raster lines
  .const NUMBERL = $e0
  .const OFFSET_STRUCT_MOS4569_VICIII_KEY = $2f
  .const OFFSET_STRUCT_MEGA65_VICIV_CONTROLB = $31
  .const OFFSET_STRUCT_MEGA65_VICIV_CONTROLC = $54
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = $1a
  .const OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO = $5c
  .const OFFSET_STRUCT_MEGA65_VICIV_RASLINE0 = $6f
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = $19
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
  .const OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR = $21
  .const OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO = $4c
  .const OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL = $5a
  .const SIZEOF_BYTE = 1
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // The VIC III MOS 4567/4569
  .label VICIII = $d000
  // The VIC IV
  .label VICIV = $d000
  // Palette RED
  .label PALETTE_RED = $d100
  // Palette GREEN
  .label PALETTE_GREEN = $d200
  // Palette BLUE
  .label PALETTE_BLUE = $d300
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  .label SCREEN = $400
  // Pointer to the song init routine
  .label songInit = SONG
  // Pointer to the song play routine
  .label songPlay = SONG+3
  // Sinus Position
  .label sinpos = $10
  // Zoom Position
  .label zoomx = $11
  // soft scroll position of text scrolly (0-7)
  .label xpos = $12
  // The greeting currently being shown
  .label greetnm = $13
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (volatile byte) sinpos ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z sinpos
    // [2] (volatile byte) zoomx ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z zoomx
    // [3] (volatile byte) xpos ← (byte) 7 -- vbuz1=vbuc1 
    lda #7
    sta.z xpos
    // [4] (volatile byte) greetnm ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z greetnm
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [6] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [7] return 
    rts
}
  // irq1
// BIG INTERRUPT LOOP
irq1: {
    // y rasterline where scrolly starts
    .const scrollypos = $66
    // size of raster behind scrolly
    .const blackbar = $13
    .label __7 = $18
    .label __12 = $1a
    .label __22 = $14
    .label __23 = $15
    .label wobblepos = 3
    .label col = $16
    .label zoomval = $17
    .label raster = $19
    .label line = 2
    .label l = 4
    .label barsin = 6
    .label idx = $b
    .label barcol = $a
    .label i = 8
    .label i1 = 9
    .label barcnt = 5
    .label i2 = 7
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // [8] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // force NTSC every frame (hehe)
    lda #$80
    ora VICIV+OFFSET_STRUCT_MEGA65_VICIV_RASLINE0
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_RASLINE0
    // [9] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // [10] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // reset x scroll
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    // [11] (volatile byte) sinpos ← ++ (volatile byte) sinpos -- vbuz1=_inc_vbuz1 
    inc.z sinpos
    // [12] (byte) irq1::wobblepos#0 ← (volatile byte) sinpos -- vbuz1=vbuz2 
    // Generate Raster Bars and more
    lda.z sinpos
    sta.z wobblepos
    // [13] phi from irq1 to irq1::@1 [phi:irq1->irq1::@1]
  __b1_from_irq1:
    // [13] phi (byte) irq1::wobblepos#10 = (byte) irq1::wobblepos#0 [phi:irq1->irq1::@1#0] -- register_copy 
    // [13] phi (byte) irq1::line#10 = (byte) 0 [phi:irq1->irq1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z line
    jmp __b1
    // irq1::@1
  __b1:
    // [14] if((byte) irq1::line#10!=(const nomodify byte) NUMBERL) goto irq1::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUMBERL
    cmp.z line
    bne __b2
    // [15] phi from irq1::@1 to irq1::@15 [phi:irq1::@1->irq1::@15]
  __b15_from___b1:
    // [15] phi (byte) irq1::l#2 = (byte) 0 [phi:irq1::@1->irq1::@15#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b15
  // Set all raster bars to black
    // irq1::@15
  __b15:
    // [16] if((byte) irq1::l#2!=(const nomodify byte) NUMBERL) goto irq1::@16 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUMBERL
    cmp.z l
    bne __b16
    jmp __b17
    // irq1::@17
  __b17:
    // [17] call *((const void()*) songPlay) 
    // play music
    jsr songPlay
    // [18] (byte) irq1::barsin#0 ← (volatile byte) sinpos -- vbuz1=vbuz2 
    // Big block of bars (16)
    lda.z sinpos
    sta.z barsin
    // [19] phi from irq1::@17 to irq1::@18 [phi:irq1::@17->irq1::@18]
  __b18_from___b17:
    // [19] phi (byte) irq1::barsin#2 = (byte) irq1::barsin#0 [phi:irq1::@17->irq1::@18#0] -- register_copy 
    // [19] phi (byte) irq1::barcnt#2 = (byte) 0 [phi:irq1::@17->irq1::@18#1] -- vbuz1=vbuc1 
    lda #0
    sta.z barcnt
    jmp __b18
    // irq1::@18
  __b18:
    // [20] if((byte) irq1::barcnt#2<(byte) $10) goto irq1::@19 -- vbuz1_lt_vbuc1_then_la1 
    lda.z barcnt
    cmp #$10
    bcc __b19
    // [21] phi from irq1::@18 to irq1::@25 [phi:irq1::@18->irq1::@25]
  __b25_from___b18:
    // [21] phi (byte) irq1::i2#2 = (byte) 0 [phi:irq1::@18->irq1::@25#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i2
    jmp __b25
  // Produce dark area behind text
    // irq1::@25
  __b25:
    // [22] if((byte) irq1::i2#2<(byte) $13) goto irq1::@26 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i2
    cmp #$13
    bcc __b26
    jmp __breturn
    // irq1::@return
  __breturn:
    // [23] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
    // irq1::@26
  __b26:
    // [24] (byte~) irq1::$22 ← *((const byte*) rasters+(const nomodify byte) irq1::scrollypos + (byte) irq1::i2#2) >> (byte) 1 -- vbuz1=pbuc1_derefidx_vbuz2_ror_1 
    ldy.z i2
    lda rasters+scrollypos,y
    lsr
    sta.z __22
    // [25] (byte~) irq1::$23 ← (byte~) irq1::$22 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z __22
    sta.z __23
    // [26] *((const byte*) rasters+(const nomodify byte) irq1::scrollypos + (byte) irq1::i2#2) ← (byte~) irq1::$23 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __23
    ldy.z i2
    sta rasters+scrollypos,y
    // [27] (byte) irq1::i2#1 ← ++ (byte) irq1::i2#2 -- vbuz1=_inc_vbuz1 
    inc.z i2
    // [21] phi from irq1::@26 to irq1::@25 [phi:irq1::@26->irq1::@25]
  __b25_from___b26:
    // [21] phi (byte) irq1::i2#2 = (byte) irq1::i2#1 [phi:irq1::@26->irq1::@25#0] -- register_copy 
    jmp __b25
    // irq1::@19
  __b19:
    // [28] (byte) irq1::idx#0 ← *((const byte*) SINUS + (byte) irq1::barsin#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z barsin
    lda SINUS,y
    sta.z idx
    // [29] (byte) irq1::barcol#0 ← (byte) irq1::barcnt#2 << (byte) 4 -- vbuz1=vbuz2_rol_4 
    lda.z barcnt
    asl
    asl
    asl
    asl
    sta.z barcol
    // [30] phi from irq1::@19 to irq1::@20 [phi:irq1::@19->irq1::@20]
  __b20_from___b19:
    // [30] phi (byte) irq1::idx#3 = (byte) irq1::idx#0 [phi:irq1::@19->irq1::@20#0] -- register_copy 
    // [30] phi (byte) irq1::barcol#3 = (byte) irq1::barcol#0 [phi:irq1::@19->irq1::@20#1] -- register_copy 
    // [30] phi (byte) irq1::i#2 = (byte) 0 [phi:irq1::@19->irq1::@20#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b20
    // irq1::@20
  __b20:
    // [31] if((byte) irq1::i#2<(byte) $10) goto irq1::@21 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$10
    bcc __b21
    // [32] phi from irq1::@20 to irq1::@22 [phi:irq1::@20->irq1::@22]
  __b22_from___b20:
    // [32] phi (byte) irq1::idx#4 = (byte) irq1::idx#3 [phi:irq1::@20->irq1::@22#0] -- register_copy 
    // [32] phi (byte) irq1::barcol#4 = (byte) irq1::barcol#3 [phi:irq1::@20->irq1::@22#1] -- register_copy 
    // [32] phi (byte) irq1::i1#2 = (byte) 0 [phi:irq1::@20->irq1::@22#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    jmp __b22
    // irq1::@22
  __b22:
    // [33] if((byte) irq1::i1#2<(byte) $f) goto irq1::@23 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #$f
    bcc __b23
    jmp __b24
    // irq1::@24
  __b24:
    // [34] (byte) irq1::barsin#1 ← (byte) irq1::barsin#2 + (byte) $a -- vbuz1=vbuz1_plus_vbuc1 
    lda #$a
    clc
    adc.z barsin
    sta.z barsin
    // [35] (byte) irq1::barcnt#1 ← ++ (byte) irq1::barcnt#2 -- vbuz1=_inc_vbuz1 
    inc.z barcnt
    // [19] phi from irq1::@24 to irq1::@18 [phi:irq1::@24->irq1::@18]
  __b18_from___b24:
    // [19] phi (byte) irq1::barsin#2 = (byte) irq1::barsin#1 [phi:irq1::@24->irq1::@18#0] -- register_copy 
    // [19] phi (byte) irq1::barcnt#2 = (byte) irq1::barcnt#1 [phi:irq1::@24->irq1::@18#1] -- register_copy 
    jmp __b18
    // irq1::@23
  __b23:
    // [36] (byte) irq1::barcol#2 ← -- (byte) irq1::barcol#4 -- vbuz1=_dec_vbuz1 
    dec.z barcol
    // [37] *((const byte*) rasters + (byte) irq1::idx#4) ← (byte) irq1::barcol#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z barcol
    ldy.z idx
    sta rasters,y
    // [38] (byte) irq1::idx#2 ← ++ (byte) irq1::idx#4 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [39] (byte) irq1::i1#1 ← ++ (byte) irq1::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [32] phi from irq1::@23 to irq1::@22 [phi:irq1::@23->irq1::@22]
  __b22_from___b23:
    // [32] phi (byte) irq1::idx#4 = (byte) irq1::idx#2 [phi:irq1::@23->irq1::@22#0] -- register_copy 
    // [32] phi (byte) irq1::barcol#4 = (byte) irq1::barcol#2 [phi:irq1::@23->irq1::@22#1] -- register_copy 
    // [32] phi (byte) irq1::i1#2 = (byte) irq1::i1#1 [phi:irq1::@23->irq1::@22#2] -- register_copy 
    jmp __b22
    // irq1::@21
  __b21:
    // [40] *((const byte*) rasters + (byte) irq1::idx#3) ← (byte) irq1::barcol#3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z barcol
    ldy.z idx
    sta rasters,y
    // [41] (byte) irq1::idx#1 ← ++ (byte) irq1::idx#3 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [42] (byte) irq1::barcol#1 ← ++ (byte) irq1::barcol#3 -- vbuz1=_inc_vbuz1 
    inc.z barcol
    // [43] (byte) irq1::i#1 ← ++ (byte) irq1::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [30] phi from irq1::@21 to irq1::@20 [phi:irq1::@21->irq1::@20]
  __b20_from___b21:
    // [30] phi (byte) irq1::idx#3 = (byte) irq1::idx#1 [phi:irq1::@21->irq1::@20#0] -- register_copy 
    // [30] phi (byte) irq1::barcol#3 = (byte) irq1::barcol#1 [phi:irq1::@21->irq1::@20#1] -- register_copy 
    // [30] phi (byte) irq1::i#2 = (byte) irq1::i#1 [phi:irq1::@21->irq1::@20#2] -- register_copy 
    jmp __b20
    // irq1::@16
  __b16:
    // [44] *((const byte*) rasters + (byte) irq1::l#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z l
    sta rasters,y
    // [45] (byte) irq1::l#1 ← ++ (byte) irq1::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [15] phi from irq1::@16 to irq1::@15 [phi:irq1::@16->irq1::@15]
  __b15_from___b16:
    // [15] phi (byte) irq1::l#2 = (byte) irq1::l#1 [phi:irq1::@16->irq1::@15#0] -- register_copy 
    jmp __b15
    // irq1::@2
  __b2:
    // [46] (byte) irq1::col#0 ← *((const byte*) rasters + (byte) irq1::line#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z line
    lda rasters,y
    sta.z col
    // [47] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR) ← (byte) irq1::col#0 -- _deref_pbuc1=vbuz1 
    lda.z col
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR
    // [48] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR) ← (byte) irq1::col#0 -- _deref_pbuc1=vbuz1 
    lda.z col
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR
    // [49] if((byte) irq1::line#10<(const nomodify byte) irq1::scrollypos) goto irq1::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z line
    cmp #scrollypos
    bcc __b3
    jmp __b9
    // irq1::@9
  __b9:
    // [50] if((byte) irq1::line#10==(const nomodify byte) irq1::scrollypos) goto irq1::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #scrollypos
    cmp.z line
    beq __b4
    jmp __b10
    // irq1::@10
  __b10:
    // [51] if((byte) irq1::line#10==(const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar) goto irq1::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda #scrollypos+blackbar
    cmp.z line
    beq __b5
    jmp __b11
    // irq1::@11
  __b11:
    // [52] if((byte) irq1::line#10!=(const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar+(byte) 1) goto irq1::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #scrollypos+blackbar+1
    cmp.z line
    bne __b6_from___b11
    jmp __b12
    // irq1::@12
  __b12:
    // [53] (byte) irq1::zoomval#0 ← *((const byte*) SINUS + (volatile byte) zoomx) -- vbuz1=pbuc1_derefidx_vbuz2 
    // if raster position > scrolly pos do zoom
    ldy.z zoomx
    lda SINUS,y
    sta.z zoomval
    // [54] (volatile byte) zoomx ← ++ (volatile byte) zoomx -- vbuz1=_inc_vbuz1 
    inc.z zoomx
    // [55] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) irq1::zoomval#0 -- _deref_pbuc1=vbuz1 
    lda.z zoomval
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL
    // [56] (byte~) irq1::$7 ← (byte) irq1::zoomval#0 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    lda.z zoomval
    inc
    sta.z __7
    // [57] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte~) irq1::$7 -- _deref_pbuc1=vbuz1 
    lda.z __7
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    // [58] if((volatile byte) zoomx!=(byte) 0) goto irq1::@6 -- vbuz1_neq_0_then_la1 
    lda.z zoomx
    cmp #0
    bne __b6_from___b12
    jmp __b13
    // irq1::@13
  __b13:
    // [59] (volatile byte) greetnm ← ++ (volatile byte) greetnm -- vbuz1=_inc_vbuz1 
    inc.z greetnm
    // [60] if((volatile byte) greetnm!=(const nomodify byte) GREETCOUNT) goto irq1::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #GREETCOUNT
    cmp.z greetnm
    bne __b6_from___b13
    jmp __b14
    // irq1::@14
  __b14:
    // [61] (volatile byte) greetnm ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z greetnm
    // [62] phi from irq1::@11 irq1::@12 irq1::@13 irq1::@14 irq1::@3 irq1::@4 irq1::@5 to irq1::@6 [phi:irq1::@11/irq1::@12/irq1::@13/irq1::@14/irq1::@3/irq1::@4/irq1::@5->irq1::@6]
  __b6_from___b11:
  __b6_from___b12:
  __b6_from___b13:
  __b6_from___b14:
  __b6_from___b3:
  __b6_from___b4:
  __b6_from___b5:
    // [62] phi (byte) irq1::wobblepos#7 = (byte) irq1::wobblepos#10 [phi:irq1::@11/irq1::@12/irq1::@13/irq1::@14/irq1::@3/irq1::@4/irq1::@5->irq1::@6#0] -- register_copy 
    jmp __b6
    // irq1::@6
  __b6:
    // [63] (byte) irq1::raster#0 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) -- vbuz1=_deref_pbuc1 
    // Wait for the next raster line
    lda VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    sta.z raster
    jmp __b7
    // irq1::@7
  __b7:
    // [64] if((byte) irq1::raster#0==*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)) goto irq1::@7 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    cmp.z raster
    beq __b7
    jmp __b8
    // irq1::@8
  __b8:
    // [65] (byte) irq1::line#1 ← ++ (byte) irq1::line#10 -- vbuz1=_inc_vbuz1 
    inc.z line
    // [13] phi from irq1::@8 to irq1::@1 [phi:irq1::@8->irq1::@1]
  __b1_from___b8:
    // [13] phi (byte) irq1::wobblepos#10 = (byte) irq1::wobblepos#7 [phi:irq1::@8->irq1::@1#0] -- register_copy 
    // [13] phi (byte) irq1::line#10 = (byte) irq1::line#1 [phi:irq1::@8->irq1::@1#1] -- register_copy 
    jmp __b1
    // irq1::@5
  __b5:
    // [66] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50 -- _deref_pbuc1=vbuc2 
    // if raster position > scrolly pos do nozoom
    // default value
    lda #$50
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    jmp __b6_from___b5
    // irq1::@4
  __b4:
    // [67] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50 -- _deref_pbuc1=vbuc2 
    // if raster position = scrolly pos do scrolly
    // no wobbling from this point
    lda #$50
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    // [68] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (volatile byte) xpos -- _deref_pbuc1=vbuz1 
    // set softscroll
    lda.z xpos
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    jmp __b6_from___b4
    // irq1::@3
  __b3:
    // [69] (byte~) irq1::$12 ← (byte) $28 + *((const byte*) SINUS + (byte) irq1::wobblepos#10) -- vbuz1=vbuc1_plus_pbuc2_derefidx_vbuz2 
    lda #$28
    ldy.z wobblepos
    clc
    adc SINUS,y
    sta.z __12
    // [70] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte~) irq1::$12 -- _deref_pbuc1=vbuz1 
    // if raster position < scrolly pos do wobble Logo!
    lda.z __12
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    // [71] (byte) irq1::wobblepos#1 ← ++ (byte) irq1::wobblepos#10 -- vbuz1=_inc_vbuz1 
    inc.z wobblepos
    // [72] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) $66 -- _deref_pbuc1=vbuc2 
    // No zooming
    lda #$66
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL
    jmp __b6_from___b3
}
  // main
main: {
    .label i1 = $c
    // Set up 256 color palette
    .label i = $d
    // [73] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $47 -- _deref_pbuc1=vbuc2 
    // Enable MEGA65 features
    lda #$47
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_KEY
    // [74] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $53 -- _deref_pbuc1=vbuc2 
    lda #$53
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_KEY
    // [75] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | (byte) $40 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Enable 48MHz fast mode
    lda #$40
    ora VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB
    // [76] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | (byte) $40 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    lda #$40
    ora VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC
    // [77] call memset 
  // Clear screen 
    // [101] phi from main to memset [phi:main->memset]
  memset_from_main:
    jsr memset
    jmp __b6
    // main::@6
  __b6:
    // asm { lda#0  }
    // Initialize music
    lda #0
    // [79] call *((const void()*) songInit) 
    jsr songInit
    // [80] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [80] phi (byte) main::i1#2 = (byte) 0 [phi:main::@6->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    jmp __b1
  // Put MEGA logo on screen
    // main::@1
  __b1:
    // [81] if((byte) main::i1#2<(byte) $bc*(const byte) SIZEOF_BYTE) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #$bc*SIZEOF_BYTE
    bcc __b2
    // [82] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [82] phi (byte) main::i#2 = (byte) 0 [phi:main::@1->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b3
    // [82] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  __b3_from___b3:
    // [82] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [83] *((const nomodify byte*) PALETTE_RED + (byte) main::i#2) ← *((const byte*) PAL_RED + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda PAL_RED,y
    sta PALETTE_RED,y
    // [84] *((const nomodify byte*) PALETTE_GREEN + (byte) main::i#2) ← *((const byte*) PAL_GREEN + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda PAL_GREEN,y
    sta PALETTE_GREEN,y
    // [85] *((const nomodify byte*) PALETTE_BLUE + (byte) main::i#2) ← *((const byte*) PAL_BLUE + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda PAL_BLUE,y
    sta PALETTE_BLUE,y
    // [86] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [87] if((byte) main::i#1!=(byte) 0) goto main::@3 -- vbuz1_neq_0_then_la1 
    lda.z i
    cmp #0
    bne __b3_from___b3
    jmp __b4
    // main::@4
  __b4:
    // asm { sei  }
    // Set up raster interrupts C64 style
    sei
    // [89] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [90] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (byte) $16 -- _deref_pbuc1=vbuc2 
    // Set raster line to 0x16
    lda #$16
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // [91] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda #$7f
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // [92] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE
    // [93] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_STACK)(void()) irq1() -- _deref_qprc1=pprc2 
    // Set the IRQ routine
    lda #<irq1
    sta HARDWARE_IRQ
    lda #>irq1
    sta HARDWARE_IRQ+1
    // [94] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // no kernal or BASIC rom visible
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [95] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [96] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // open sideborder
    lda #1
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO
    // asm { cli  }
    // Enable IRQ
    cli
    // [98] phi from main::@4 main::@5 to main::@5 [phi:main::@4/main::@5->main::@5]
  __b5_from___b4:
  __b5_from___b5:
    jmp __b5
    // main::@5
  __b5:
    jmp __b5_from___b5
    // main::@2
  __b2:
    // [99] *((const nomodify byte*) SCREEN+(byte)(number) 3*(number) $28 + (byte) main::i1#2) ← *((const byte*) MEGA_LOGO + (byte) main::i1#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i1
    lda MEGA_LOGO,y
    sta SCREEN+3*$28,y
    // [100] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [80] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [80] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $28*$19
    .label str = SCREEN
    .label end = str+num
    .label dst = $e
    // [102] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [102] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [103] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [104] return 
    rts
    // memset::@2
  __b2:
    // [105] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [106] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inw.z dst
    // [102] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [102] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // Sinus Values 0-183
SINUS:
.fill 256, 91.5 + 91.5*sin(i*2*PI/256)

  // Moving Raster Bars
  rasters: .fill $100, 0
  // A MEGA logo
  MEGA_LOGO: .byte $20, $20, $20, $20, $20, $cf, $cf, $cf, $20, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $20, $cf, $cf, $20, $cf, $20, $cf, $20, $20, $20, $cf, $cf, $20, $20, $20, $20, $cf, $cf, $20, $20, $20, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $20, $20, $cf, $20, $cf, $cf, $cf, $cf, $cf, $20, $cf, $cf, $20, $cf, $cf, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $20, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $cf, $cf, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $20, $20, $20, $20, $cf, $cf, $20, $cf, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $cf, $20, $20, $20, $cf
  PAL_RED: .byte 0, $f3, $d4, $b5, $a6, $97, $88, $79, $1a, $fa, $eb, $ec, $bd, $be, $af, $ff, $16, $c6, $a7, $88, $49, $5a, $2b, $1c, $ac, $ad, $8e, $8f, $ff, $ff, $ff, $ff, $c6, $77, $48, $29, $e9, $fa, $cb, $cc, $5d, $4e, $2f, $ff, $ff, $ff, $ff, $ff, $57, $18, $f8, $d9, $aa, $8b, $6c, $5d, $ed, $de, $cf, $ff, $ff, $ff, $ff, $ff, $26, $e6, $b7, $a8, $69, $5a, $3b, $3c, $dc, $cd, $ae, $9f, $ff, $ff, $ff, $ff, $65, $16, $17, $f7, $d8, $b9, $9a, $8b, $2c, $d, $fd, $ee, $cf, $ff, $ff, $ff, $64, $15, 6, $e6, $c7, $a8, $99, $8a, $1b, $c, $fc, $fd, $ee, $cf, $ff, $ff, $12, $d2, $d3, $b4, $95, $86, $77, $78, 9, $69, $ea, $fb, $dc, $ad, $ae, $af, $f0, $c1, $c2, $a3, $84, $85, $76, $67, 8, $f8, $e9, $da, $db, $bc, $bd, $ae, $40, $11, $12, $f2, $e3, $d4, $c5, $c6, $47, $38, $39, $2a, $1b, $c, $d, $ed, 0, 0, $f0, $d1, $c2, $b3, $a4, $95, $36, $27, $28, $29, $f9, $ea, $eb, $ec, $70, $41, $22, $23, $f3, $f4, $e5, $e6, $77, $78, $69, $7a, $3b, $3c, $3d, $3e, $a1, $82, $63, $54, $35, $26, 7, 8, $98, $99, $8a, $7b, $5c, $5d, $3e, $3f, $33, 4, $d4, $d5, $a6, $a7, $88, $89, $1a, $ab, $fb, $ec, $cd, $be, $af, $ff, $b4, $85, $56, $47, $18, 9, $f9, $ea, $7b, $7c, $5d, $5e, $2f, $ef, $ff, $ff, 6, $d6, $a7, $98, $59, $4a, $2b, $2c, $bc, $ad, $8e, $8f, $ff, $ff, $ff, $ff
  PAL_GREEN: .byte 0, $e3, $c4, $b5, $96, $87, $78, $79, $a, $fa, $eb, $dc, $bd, $ae, $af, $ff, $e2, $b3, $a4, $85, $76, $67, $48, $49, $d9, $da, $bb, $bc, $8d, $8e, $7f, $ff, $42, 3, 4, $e4, $d5, $c6, $b7, $a8, $39, $3a, $1b, $2c, $fc, $fd, $de, $df, $61, $32, $13, 4, $e4, $e5, $d6, $d7, $78, $59, $4a, $4b, $2c, $1d, $e, $fe, $e0, $b1, $a2, $93, $74, $75, $56, $57, $e7, $d8, $79, $ca, $ab, $9c, $9d, $8e, $f0, $d1, $c2, $a3, $84, $85, $76, $77, 8, 9, $f9, $fa, $db, $cc, $bd, $ae, $61, $22, $23, $14, $f4, $e5, $d6, $c7, $58, $59, $3a, $3b, $1c, $d, $fd, $fe, $92, $53, $44, $35, $16, $f6, $e7, $e8, $79, $6a, $5b, $4c, $2d, $3e, $1f, $ef, $53, $14, 5, $e5, $c6, $b7, $a8, $99, $2a, $2b, $c, $d, $dd, $ce, $cf, $ff, $f3, $b4, $95, $86, $57, $38, $29, $1a, $ba, $ab, $9c, $8d, $6e, $5f, $ff, $ff, $95, $56, $27, $18, $e8, $d9, $ca, $bb, $4c, $3d, $2e, $1f, $ef, $ff, $ff, $ff, $c5, $86, $57, $38, $19, $a, $ea, $db, $6c, $5d, $3e, $3f, $ef, $ff, $ff, $ff, $65, $26, 7, $e7, $c8, $b9, $9a, $9b, $2c, $1d, $fd, $fe, $cf, $ff, $ff, $ff, $b4, $75, $56, $37, $28, $19, $e9, $ea, $7b, $6c, $5d, $4e, $2f, $ff, $ff, $ff, $c3, $94, $75, $56, $47, $38, $19, $1a, $aa, $ab, $7c, $7d, $5e, $4f, $ff, $ff, $e2, $a3, $94, $85, $76, $67, $38, $49, $d9, $ca, $ab, $bc, $7d, $7e, $6f, $ff
  PAL_BLUE: .byte 0, $f3, $d4, $b5, $a6, $97, $88, $79, $1a, $fa, $eb, $ec, $bd, $be, $af, $ff, 0, 0, 0, 0, $c0, $b1, $a2, $a3, $34, $35, $26, $27, $f7, $f8, $f9, $ea, 0, 0, $30, $11, $22, $13, $14, 5, $b5, $96, $97, $98, $79, $6a, $5b, $4c, $81, $42, $43, $34, 5, 6, $f6, $f7, $78, $69, $5a, $5b, $4c, $3d, $1e, $f, $17, $c7, $a8, $89, $5a, $5b, $3c, $1d, $ad, $9e, $7f, $ff, $ff, $ff, $ff, $ff, $78, 9, $e9, $ca, $ab, $7c, $5d, $5e, $de, $cf, $ff, $ff, $ff, $ff, $ff, $ff, $59, $a, $ca, $bb, $8c, $6d, $3e, $2f, $bf, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $49, $f9, $da, $ab, $7c, $5d, $2e, $2f, $af, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $48, $d8, $b9, $aa, $7b, $5c, $2d, $2e, $be, $9f, $ff, $ff, $ff, $ff, $ff, $ff, 7, $97, $88, $69, $4a, $2b, $1c, $2d, $9d, $7e, $6f, $ff, $ff, $ff, $ff, $ff, $81, $62, $53, $44, 5, 6, $f6, $e7, $78, $69, $5a, $5b, $3c, $2d, $2e, $1f, 0, 0, 0, 0, $b0, $b1, $a2, $b3, $44, $35, $36, $37, 8, $f8, $a, $b, 0, 0, 0, 0, 0, $70, $61, $62, $f2, $e3, $d4, $c5, $b6, $b7, $b8, $99, 0, 0, 0, 0, 0, 0, $f0, $f1, $82, $83, $84, $85, $66, $57, $58, $59, 0, 0, 0, 0, 0, $70, $61, $62, $e2, $e3, $d4, $d5, $b6, $a7, $b8, $a9, 0, 0, 0, 0, $a0, $b1, $a2, $a3, $44, $35, $26, $37, $f7, $19, $f9, $fa
.pc = $fc0 "SONG"
// Music at an absolute address
SONG:
.import c64 "DiscoZak_2SID_patched.prg"


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile byte) sinpos ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) zoomx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (volatile byte) xpos ← (byte) 7 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] (volatile byte) greetnm ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) | (byte) $80 [ sinpos zoomx xpos greetnm ] (  [ sinpos zoomx xpos greetnm ] { }  ) always clobbers reg byte a 
Statement [9] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ sinpos zoomx xpos greetnm ] (  [ sinpos zoomx xpos greetnm ] { }  ) always clobbers reg byte a 
Statement [10] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (byte) 0 [ sinpos zoomx xpos greetnm ] (  [ sinpos zoomx xpos greetnm ] { }  ) always clobbers reg byte a 
Statement [17] call *((const void()*) songPlay)  [ sinpos ] (  [ sinpos ] { }  ) always clobbers reg byte a reg byte x reg byte y reg byte z 
Statement [23] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [24] (byte~) irq1::$22 ← *((const byte*) rasters+(const nomodify byte) irq1::scrollypos + (byte) irq1::i2#2) >> (byte) 1 [ irq1::i2#2 irq1::$22 ] (  [ irq1::i2#2 irq1::$22 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ irq1::i2#2 irq1::i2#1 ]
Statement [25] (byte~) irq1::$23 ← (byte~) irq1::$22 & (byte) 7 [ irq1::i2#2 irq1::$23 ] (  [ irq1::i2#2 irq1::$23 ] { }  ) always clobbers reg byte a 
Statement [29] (byte) irq1::barcol#0 ← (byte) irq1::barcnt#2 << (byte) 4 [ irq1::barcnt#2 irq1::barsin#2 irq1::idx#0 irq1::barcol#0 ] (  [ irq1::barcnt#2 irq1::barsin#2 irq1::idx#0 irq1::barcol#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ irq1::barcnt#2 irq1::barcnt#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:6 [ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:11 [ irq1::idx#4 irq1::idx#3 irq1::idx#0 irq1::idx#1 irq1::idx#2 ]
Statement [34] (byte) irq1::barsin#1 ← (byte) irq1::barsin#2 + (byte) $a [ irq1::barcnt#2 irq1::barsin#1 ] (  [ irq1::barcnt#2 irq1::barsin#1 ] { }  ) always clobbers reg byte a 
Statement [44] *((const byte*) rasters + (byte) irq1::l#2) ← (byte) 0 [ sinpos irq1::l#2 ] (  [ sinpos irq1::l#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ irq1::l#2 irq1::l#1 ]
Statement [58] if((volatile byte) zoomx!=(byte) 0) goto irq1::@6 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ irq1::line#10 irq1::line#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ irq1::wobblepos#10 irq1::wobblepos#0 irq1::wobblepos#7 irq1::wobblepos#1 ]
Statement [60] if((volatile byte) greetnm!=(const nomodify byte) GREETCOUNT) goto irq1::@6 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Statement [61] (volatile byte) greetnm ← (byte) 0 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Statement [66] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Statement [67] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (volatile byte) xpos [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Statement [69] (byte~) irq1::$12 ← (byte) $28 + *((const byte*) SINUS + (byte) irq1::wobblepos#10) [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 irq1::$12 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 irq1::$12 ] { }  ) always clobbers reg byte a 
Statement [72] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) $66 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#1 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#1 ] { }  ) always clobbers reg byte a 
Statement [73] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $47 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [74] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $53 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [75] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | (byte) $40 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [76] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | (byte) $40 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement asm { lda#0  } always clobbers reg byte a 
Statement [79] call *((const void()*) songInit)  [ ] ( main:6 [ ] { }  ) always clobbers reg byte a reg byte x reg byte y reg byte z 
Statement [83] *((const nomodify byte*) PALETTE_RED + (byte) main::i#2) ← *((const byte*) PAL_RED + (byte) main::i#2) [ main::i#2 ] ( main:6 [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ main::i#2 main::i#1 ]
Statement [84] *((const nomodify byte*) PALETTE_GREEN + (byte) main::i#2) ← *((const byte*) PAL_GREEN + (byte) main::i#2) [ main::i#2 ] ( main:6 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [85] *((const nomodify byte*) PALETTE_BLUE + (byte) main::i#2) ← *((const byte*) PAL_BLUE + (byte) main::i#2) [ main::i#2 ] ( main:6 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [89] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [90] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (byte) $16 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [91] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [92] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [93] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_STACK)(void()) irq1() [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [94] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [95] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [96] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) ← (byte) 1 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [99] *((const nomodify byte*) SCREEN+(byte)(number) 3*(number) $28 + (byte) main::i1#2) ← *((const byte*) MEGA_LOGO + (byte) main::i1#2) [ main::i1#2 ] ( main:6 [ main::i1#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ main::i1#2 main::i1#1 ]
Statement [103] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:6::memset:77 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [105] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:6::memset:77 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [1] (volatile byte) sinpos ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) zoomx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (volatile byte) xpos ← (byte) 7 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] (volatile byte) greetnm ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) | (byte) $80 [ sinpos zoomx xpos greetnm ] (  [ sinpos zoomx xpos greetnm ] { }  ) always clobbers reg byte a 
Statement [9] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ sinpos zoomx xpos greetnm ] (  [ sinpos zoomx xpos greetnm ] { }  ) always clobbers reg byte a 
Statement [10] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (byte) 0 [ sinpos zoomx xpos greetnm ] (  [ sinpos zoomx xpos greetnm ] { }  ) always clobbers reg byte a 
Statement [17] call *((const void()*) songPlay)  [ sinpos ] (  [ sinpos ] { }  ) always clobbers reg byte a reg byte x reg byte y reg byte z 
Statement [23] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [24] (byte~) irq1::$22 ← *((const byte*) rasters+(const nomodify byte) irq1::scrollypos + (byte) irq1::i2#2) >> (byte) 1 [ irq1::i2#2 irq1::$22 ] (  [ irq1::i2#2 irq1::$22 ] { }  ) always clobbers reg byte a 
Statement [25] (byte~) irq1::$23 ← (byte~) irq1::$22 & (byte) 7 [ irq1::i2#2 irq1::$23 ] (  [ irq1::i2#2 irq1::$23 ] { }  ) always clobbers reg byte a 
Statement [29] (byte) irq1::barcol#0 ← (byte) irq1::barcnt#2 << (byte) 4 [ irq1::barcnt#2 irq1::barsin#2 irq1::idx#0 irq1::barcol#0 ] (  [ irq1::barcnt#2 irq1::barsin#2 irq1::idx#0 irq1::barcol#0 ] { }  ) always clobbers reg byte a 
Statement [34] (byte) irq1::barsin#1 ← (byte) irq1::barsin#2 + (byte) $a [ irq1::barcnt#2 irq1::barsin#1 ] (  [ irq1::barcnt#2 irq1::barsin#1 ] { }  ) always clobbers reg byte a 
Statement [44] *((const byte*) rasters + (byte) irq1::l#2) ← (byte) 0 [ sinpos irq1::l#2 ] (  [ sinpos irq1::l#2 ] { }  ) always clobbers reg byte a 
Statement [58] if((volatile byte) zoomx!=(byte) 0) goto irq1::@6 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Statement [60] if((volatile byte) greetnm!=(const nomodify byte) GREETCOUNT) goto irq1::@6 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Statement [61] (volatile byte) greetnm ← (byte) 0 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Statement [66] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Statement [67] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (volatile byte) xpos [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 ] { }  ) always clobbers reg byte a 
Statement [69] (byte~) irq1::$12 ← (byte) $28 + *((const byte*) SINUS + (byte) irq1::wobblepos#10) [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 irq1::$12 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#10 irq1::$12 ] { }  ) always clobbers reg byte a 
Statement [72] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) $66 [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#1 ] (  [ sinpos zoomx xpos greetnm irq1::line#10 irq1::wobblepos#1 ] { }  ) always clobbers reg byte a 
Statement [73] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $47 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [74] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $53 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [75] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | (byte) $40 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [76] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | (byte) $40 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement asm { lda#0  } always clobbers reg byte a 
Statement [79] call *((const void()*) songInit)  [ ] ( main:6 [ ] { }  ) always clobbers reg byte a reg byte x reg byte y reg byte z 
Statement [83] *((const nomodify byte*) PALETTE_RED + (byte) main::i#2) ← *((const byte*) PAL_RED + (byte) main::i#2) [ main::i#2 ] ( main:6 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [84] *((const nomodify byte*) PALETTE_GREEN + (byte) main::i#2) ← *((const byte*) PAL_GREEN + (byte) main::i#2) [ main::i#2 ] ( main:6 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [85] *((const nomodify byte*) PALETTE_BLUE + (byte) main::i#2) ← *((const byte*) PAL_BLUE + (byte) main::i#2) [ main::i#2 ] ( main:6 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [89] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [90] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (byte) $16 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [91] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [92] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [93] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_STACK)(void()) irq1() [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [94] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [95] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [96] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) ← (byte) 1 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [99] *((const nomodify byte*) SCREEN+(byte)(number) 3*(number) $28 + (byte) main::i1#2) ← *((const byte*) MEGA_LOGO + (byte) main::i1#2) [ main::i1#2 ] ( main:6 [ main::i1#2 ] { }  ) always clobbers reg byte a 
Statement [103] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:6::memset:77 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [105] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:6::memset:77 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ irq1::line#10 irq1::line#1 ] : zp[1]:2 , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:3 [ irq1::wobblepos#10 irq1::wobblepos#0 irq1::wobblepos#7 irq1::wobblepos#1 ] : zp[1]:3 , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:4 [ irq1::l#2 irq1::l#1 ] : zp[1]:4 , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:5 [ irq1::barcnt#2 irq1::barcnt#1 ] : zp[1]:5 , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:6 [ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ] : zp[1]:6 , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:7 [ irq1::i2#2 irq1::i2#1 ] : zp[1]:7 , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:8 [ irq1::i#2 irq1::i#1 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:9 [ irq1::i1#2 irq1::i1#1 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:10 [ irq1::barcol#4 irq1::barcol#3 irq1::barcol#0 irq1::barcol#1 irq1::barcol#2 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:11 [ irq1::idx#4 irq1::idx#3 irq1::idx#0 irq1::idx#1 irq1::idx#2 ] : zp[1]:11 , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:12 [ main::i1#2 main::i1#1 ] : zp[1]:12 , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:13 [ main::i#2 main::i#1 ] : zp[1]:13 , reg byte x , reg byte y , reg byte z , 
Potential registers zp[2]:14 [ memset::dst#2 memset::dst#1 ] : zp[2]:14 , 
Potential registers zp[1]:16 [ sinpos ] : zp[1]:16 , 
Potential registers zp[1]:17 [ zoomx ] : zp[1]:17 , 
Potential registers zp[1]:18 [ xpos ] : zp[1]:18 , 
Potential registers zp[1]:19 [ greetnm ] : zp[1]:19 , 
Potential registers zp[1]:20 [ irq1::$22 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:21 [ irq1::$23 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:22 [ irq1::col#0 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:23 [ irq1::zoomval#0 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:24 [ irq1::$7 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:25 [ irq1::raster#0 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , reg byte z , 
Potential registers zp[1]:26 [ irq1::$12 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , reg byte z , 

REGISTER UPLIFT SCOPES
Uplift Scope [memset] 3,336.67: zp[2]:14 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [irq1] 454: zp[1]:10 [ irq1::barcol#4 irq1::barcol#3 irq1::barcol#0 irq1::barcol#1 irq1::barcol#2 ] 418.67: zp[1]:11 [ irq1::idx#4 irq1::idx#3 irq1::idx#0 irq1::idx#1 irq1::idx#2 ] 262.6: zp[1]:8 [ irq1::i#2 irq1::i#1 ] 262.6: zp[1]:9 [ irq1::i1#2 irq1::i1#1 ] 56: zp[1]:25 [ irq1::raster#0 ] 41.39: zp[1]:3 [ irq1::wobblepos#10 irq1::wobblepos#0 irq1::wobblepos#7 irq1::wobblepos#1 ] 36.67: zp[1]:4 [ irq1::l#2 irq1::l#1 ] 33: zp[1]:7 [ irq1::i2#2 irq1::i2#1 ] 25.14: zp[1]:2 [ irq1::line#10 irq1::line#1 ] 24.59: zp[1]:5 [ irq1::barcnt#2 irq1::barcnt#1 ] 22: zp[1]:20 [ irq1::$22 ] 22: zp[1]:21 [ irq1::$23 ] 22: zp[1]:24 [ irq1::$7 ] 22: zp[1]:26 [ irq1::$12 ] 17.19: zp[1]:6 [ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ] 16.5: zp[1]:22 [ irq1::col#0 ] 11: zp[1]:23 [ irq1::zoomval#0 ] 
Uplift Scope [main] 370.33: zp[1]:12 [ main::i1#2 main::i1#1 ] 353.5: zp[1]:13 [ main::i#2 main::i#1 ] 
Uplift Scope [] 1.35: zp[1]:17 [ zoomx ] 1.35: zp[1]:19 [ greetnm ] 0.38: zp[1]:18 [ xpos ] 0.26: zp[1]:16 [ sinpos ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [MOS4569_VICIII] 
Uplift Scope [MEGA65_VICIV] 
Uplift Scope [__start] 

Uplifting [memset] best 16227 combination zp[2]:14 [ memset::dst#2 memset::dst#1 ] 
Uplifting [irq1] best 12877 combination reg byte z [ irq1::barcol#4 irq1::barcol#3 irq1::barcol#0 irq1::barcol#1 irq1::barcol#2 ] reg byte y [ irq1::idx#4 irq1::idx#3 irq1::idx#0 irq1::idx#1 irq1::idx#2 ] reg byte x [ irq1::i#2 irq1::i#1 ] zp[1]:9 [ irq1::i1#2 irq1::i1#1 ] zp[1]:25 [ irq1::raster#0 ] zp[1]:3 [ irq1::wobblepos#10 irq1::wobblepos#0 irq1::wobblepos#7 irq1::wobblepos#1 ] zp[1]:4 [ irq1::l#2 irq1::l#1 ] zp[1]:7 [ irq1::i2#2 irq1::i2#1 ] zp[1]:2 [ irq1::line#10 irq1::line#1 ] zp[1]:5 [ irq1::barcnt#2 irq1::barcnt#1 ] zp[1]:20 [ irq1::$22 ] zp[1]:21 [ irq1::$23 ] zp[1]:24 [ irq1::$7 ] zp[1]:26 [ irq1::$12 ] zp[1]:6 [ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ] zp[1]:22 [ irq1::col#0 ] zp[1]:23 [ irq1::zoomval#0 ] 
Limited combination testing to 100 combinations of 1086210048 possible.
Uplifting [main] best 12577 combination reg byte x [ main::i1#2 main::i1#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 12577 combination zp[1]:17 [ zoomx ] zp[1]:19 [ greetnm ] zp[1]:18 [ xpos ] zp[1]:16 [ sinpos ] 
Uplifting [MOS6526_CIA] best 12577 combination 
Uplifting [MOS6569_VICII] best 12577 combination 
Uplifting [MOS6581_SID] best 12577 combination 
Uplifting [MOS4569_VICIII] best 12577 combination 
Uplifting [MEGA65_VICIV] best 12577 combination 
Uplifting [__start] best 12577 combination 
Attempting to uplift remaining variables inzp[1]:9 [ irq1::i1#2 irq1::i1#1 ]
Uplifting [irq1] best 11677 combination reg byte x [ irq1::i1#2 irq1::i1#1 ] 
Attempting to uplift remaining variables inzp[1]:25 [ irq1::raster#0 ]
Uplifting [irq1] best 11347 combination reg byte a [ irq1::raster#0 ] 
Attempting to uplift remaining variables inzp[1]:3 [ irq1::wobblepos#10 irq1::wobblepos#0 irq1::wobblepos#7 irq1::wobblepos#1 ]
Uplifting [irq1] best 11284 combination reg byte x [ irq1::wobblepos#10 irq1::wobblepos#0 irq1::wobblepos#7 irq1::wobblepos#1 ] 
Attempting to uplift remaining variables inzp[1]:4 [ irq1::l#2 irq1::l#1 ]
Uplifting [irq1] best 11164 combination reg byte x [ irq1::l#2 irq1::l#1 ] 
Attempting to uplift remaining variables inzp[1]:7 [ irq1::i2#2 irq1::i2#1 ]
Uplifting [irq1] best 11014 combination reg byte x [ irq1::i2#2 irq1::i2#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ irq1::line#10 irq1::line#1 ]
Uplifting [irq1] best 10794 combination reg byte z [ irq1::line#10 irq1::line#1 ] 
Attempting to uplift remaining variables inzp[1]:5 [ irq1::barcnt#2 irq1::barcnt#1 ]
Uplifting [irq1] best 10794 combination zp[1]:5 [ irq1::barcnt#2 irq1::barcnt#1 ] 
Attempting to uplift remaining variables inzp[1]:20 [ irq1::$22 ]
Uplifting [irq1] best 10734 combination reg byte a [ irq1::$22 ] 
Attempting to uplift remaining variables inzp[1]:21 [ irq1::$23 ]
Uplifting [irq1] best 10674 combination reg byte a [ irq1::$23 ] 
Attempting to uplift remaining variables inzp[1]:24 [ irq1::$7 ]
Uplifting [irq1] best 10614 combination reg byte a [ irq1::$7 ] 
Attempting to uplift remaining variables inzp[1]:26 [ irq1::$12 ]
Uplifting [irq1] best 10554 combination reg byte a [ irq1::$12 ] 
Attempting to uplift remaining variables inzp[1]:6 [ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ]
Uplifting [irq1] best 10554 combination zp[1]:6 [ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ] 
Attempting to uplift remaining variables inzp[1]:22 [ irq1::col#0 ]
Uplifting [irq1] best 10464 combination reg byte a [ irq1::col#0 ] 
Attempting to uplift remaining variables inzp[1]:23 [ irq1::zoomval#0 ]
Uplifting [irq1] best 10374 combination reg byte a [ irq1::zoomval#0 ] 
Attempting to uplift remaining variables inzp[1]:17 [ zoomx ]
Uplifting [] best 10374 combination zp[1]:17 [ zoomx ] 
Attempting to uplift remaining variables inzp[1]:19 [ greetnm ]
Uplifting [] best 10374 combination zp[1]:19 [ greetnm ] 
Attempting to uplift remaining variables inzp[1]:18 [ xpos ]
Uplifting [] best 10374 combination zp[1]:18 [ xpos ] 
Attempting to uplift remaining variables inzp[1]:16 [ sinpos ]
Uplifting [] best 10374 combination zp[1]:16 [ sinpos ] 
Allocated (was zp[1]:5) zp[1]:2 [ irq1::barcnt#2 irq1::barcnt#1 ]
Allocated (was zp[1]:6) zp[1]:3 [ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ]
Allocated (was zp[2]:14) zp[2]:4 [ memset::dst#2 memset::dst#1 ]
Allocated (was zp[1]:16) zp[1]:6 [ sinpos ]
Allocated (was zp[1]:17) zp[1]:7 [ zoomx ]
Allocated (was zp[1]:18) zp[1]:8 [ xpos ]
Allocated (was zp[1]:19) zp[1]:9 [ greetnm ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Raster65 Demo Implementation in C 
// Based on RASTER65 assembler demo
// https://mega.scryptos.com/sharefolder/MEGA/MEGA65+filehost
// https://www.forum64.de/index.php?thread/104591-xemu-vic-iv-implementation-update/&postID=1560511#post1560511
  // Upstart
.cpu _45gs02
  // MEGA65 platform executable starting in C64 mode.
.file [name="raster65.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$080d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
.segment Code


  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // The number of greetings
  .const GREETCOUNT = $10
  // The number of raster lines
  .const NUMBERL = $e0
  .const OFFSET_STRUCT_MOS4569_VICIII_KEY = $2f
  .const OFFSET_STRUCT_MEGA65_VICIV_CONTROLB = $31
  .const OFFSET_STRUCT_MEGA65_VICIV_CONTROLC = $54
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = $1a
  .const OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO = $5c
  .const OFFSET_STRUCT_MEGA65_VICIV_RASLINE0 = $6f
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = $19
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
  .const OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR = $21
  .const OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO = $4c
  .const OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL = $5a
  .const SIZEOF_BYTE = 1
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // The VIC III MOS 4567/4569
  .label VICIII = $d000
  // The VIC IV
  .label VICIV = $d000
  // Palette RED
  .label PALETTE_RED = $d100
  // Palette GREEN
  .label PALETTE_GREEN = $d200
  // Palette BLUE
  .label PALETTE_BLUE = $d300
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  .label SCREEN = $400
  // Pointer to the song init routine
  .label songInit = SONG
  // Pointer to the song play routine
  .label songPlay = SONG+3
  // Sinus Position
  .label sinpos = 6
  // Zoom Position
  .label zoomx = 7
  // soft scroll position of text scrolly (0-7)
  .label xpos = 8
  // The greeting currently being shown
  .label greetnm = 9
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (volatile byte) sinpos ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z sinpos
    // [2] (volatile byte) zoomx ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z zoomx
    // [3] (volatile byte) xpos ← (byte) 7 -- vbuz1=vbuc1 
    lda #7
    sta.z xpos
    // [4] (volatile byte) greetnm ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z greetnm
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [6] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [7] return 
    rts
}
  // irq1
// BIG INTERRUPT LOOP
irq1: {
    // y rasterline where scrolly starts
    .const scrollypos = $66
    // size of raster behind scrolly
    .const blackbar = $13
    .label barsin = 3
    .label barcnt = 2
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // [8] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // force NTSC every frame (hehe)
    lda #$80
    ora VICIV+OFFSET_STRUCT_MEGA65_VICIV_RASLINE0
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_RASLINE0
    // [9] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // [10] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // reset x scroll
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    // [11] (volatile byte) sinpos ← ++ (volatile byte) sinpos -- vbuz1=_inc_vbuz1 
    inc.z sinpos
    // [12] (byte) irq1::wobblepos#0 ← (volatile byte) sinpos -- vbuxx=vbuz1 
    // Generate Raster Bars and more
    ldx.z sinpos
    // [13] phi from irq1 to irq1::@1 [phi:irq1->irq1::@1]
  __b1_from_irq1:
    // [13] phi (byte) irq1::wobblepos#10 = (byte) irq1::wobblepos#0 [phi:irq1->irq1::@1#0] -- register_copy 
    // [13] phi (byte) irq1::line#10 = (byte) 0 [phi:irq1->irq1::@1#1] -- vbuzz=vbuc1 
    ldz #0
    jmp __b1
    // irq1::@1
  __b1:
    // [14] if((byte) irq1::line#10!=(const nomodify byte) NUMBERL) goto irq1::@2 -- vbuzz_neq_vbuc1_then_la1 
    cpz #NUMBERL
    bne __b2
    // [15] phi from irq1::@1 to irq1::@15 [phi:irq1::@1->irq1::@15]
  __b15_from___b1:
    // [15] phi (byte) irq1::l#2 = (byte) 0 [phi:irq1::@1->irq1::@15#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b15
  // Set all raster bars to black
    // irq1::@15
  __b15:
    // [16] if((byte) irq1::l#2!=(const nomodify byte) NUMBERL) goto irq1::@16 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUMBERL
    bne __b16
    jmp __b17
    // irq1::@17
  __b17:
    // [17] call *((const void()*) songPlay) 
    // play music
    jsr songPlay
    // [18] (byte) irq1::barsin#0 ← (volatile byte) sinpos -- vbuz1=vbuz2 
    // Big block of bars (16)
    lda.z sinpos
    sta.z barsin
    // [19] phi from irq1::@17 to irq1::@18 [phi:irq1::@17->irq1::@18]
  __b18_from___b17:
    // [19] phi (byte) irq1::barsin#2 = (byte) irq1::barsin#0 [phi:irq1::@17->irq1::@18#0] -- register_copy 
    // [19] phi (byte) irq1::barcnt#2 = (byte) 0 [phi:irq1::@17->irq1::@18#1] -- vbuz1=vbuc1 
    lda #0
    sta.z barcnt
    jmp __b18
    // irq1::@18
  __b18:
    // [20] if((byte) irq1::barcnt#2<(byte) $10) goto irq1::@19 -- vbuz1_lt_vbuc1_then_la1 
    lda.z barcnt
    cmp #$10
    bcc __b19
    // [21] phi from irq1::@18 to irq1::@25 [phi:irq1::@18->irq1::@25]
  __b25_from___b18:
    // [21] phi (byte) irq1::i2#2 = (byte) 0 [phi:irq1::@18->irq1::@25#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b25
  // Produce dark area behind text
    // irq1::@25
  __b25:
    // [22] if((byte) irq1::i2#2<(byte) $13) goto irq1::@26 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$13
    bcc __b26
    jmp __breturn
    // irq1::@return
  __breturn:
    // [23] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
    // irq1::@26
  __b26:
    // [24] (byte~) irq1::$22 ← *((const byte*) rasters+(const nomodify byte) irq1::scrollypos + (byte) irq1::i2#2) >> (byte) 1 -- vbuaa=pbuc1_derefidx_vbuxx_ror_1 
    lda rasters+scrollypos,x
    lsr
    // [25] (byte~) irq1::$23 ← (byte~) irq1::$22 & (byte) 7 -- vbuaa=vbuaa_band_vbuc1 
    and #7
    // [26] *((const byte*) rasters+(const nomodify byte) irq1::scrollypos + (byte) irq1::i2#2) ← (byte~) irq1::$23 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta rasters+scrollypos,x
    // [27] (byte) irq1::i2#1 ← ++ (byte) irq1::i2#2 -- vbuxx=_inc_vbuxx 
    inx
    // [21] phi from irq1::@26 to irq1::@25 [phi:irq1::@26->irq1::@25]
  __b25_from___b26:
    // [21] phi (byte) irq1::i2#2 = (byte) irq1::i2#1 [phi:irq1::@26->irq1::@25#0] -- register_copy 
    jmp __b25
    // irq1::@19
  __b19:
    // [28] (byte) irq1::idx#0 ← *((const byte*) SINUS + (byte) irq1::barsin#2) -- vbuyy=pbuc1_derefidx_vbuz1 
    ldx.z barsin
    ldy SINUS,x
    // [29] (byte) irq1::barcol#0 ← (byte) irq1::barcnt#2 << (byte) 4 -- vbuzz=vbuz1_rol_4 
    lda.z barcnt
    asl
    asl
    asl
    asl
    taz
    // [30] phi from irq1::@19 to irq1::@20 [phi:irq1::@19->irq1::@20]
  __b20_from___b19:
    // [30] phi (byte) irq1::idx#3 = (byte) irq1::idx#0 [phi:irq1::@19->irq1::@20#0] -- register_copy 
    // [30] phi (byte) irq1::barcol#3 = (byte) irq1::barcol#0 [phi:irq1::@19->irq1::@20#1] -- register_copy 
    // [30] phi (byte) irq1::i#2 = (byte) 0 [phi:irq1::@19->irq1::@20#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b20
    // irq1::@20
  __b20:
    // [31] if((byte) irq1::i#2<(byte) $10) goto irq1::@21 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$10
    bcc __b21
    // [32] phi from irq1::@20 to irq1::@22 [phi:irq1::@20->irq1::@22]
  __b22_from___b20:
    // [32] phi (byte) irq1::idx#4 = (byte) irq1::idx#3 [phi:irq1::@20->irq1::@22#0] -- register_copy 
    // [32] phi (byte) irq1::barcol#4 = (byte) irq1::barcol#3 [phi:irq1::@20->irq1::@22#1] -- register_copy 
    // [32] phi (byte) irq1::i1#2 = (byte) 0 [phi:irq1::@20->irq1::@22#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b22
    // irq1::@22
  __b22:
    // [33] if((byte) irq1::i1#2<(byte) $f) goto irq1::@23 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$f
    bcc __b23
    jmp __b24
    // irq1::@24
  __b24:
    // [34] (byte) irq1::barsin#1 ← (byte) irq1::barsin#2 + (byte) $a -- vbuz1=vbuz1_plus_vbuc1 
    lda #$a
    clc
    adc.z barsin
    sta.z barsin
    // [35] (byte) irq1::barcnt#1 ← ++ (byte) irq1::barcnt#2 -- vbuz1=_inc_vbuz1 
    inc.z barcnt
    // [19] phi from irq1::@24 to irq1::@18 [phi:irq1::@24->irq1::@18]
  __b18_from___b24:
    // [19] phi (byte) irq1::barsin#2 = (byte) irq1::barsin#1 [phi:irq1::@24->irq1::@18#0] -- register_copy 
    // [19] phi (byte) irq1::barcnt#2 = (byte) irq1::barcnt#1 [phi:irq1::@24->irq1::@18#1] -- register_copy 
    jmp __b18
    // irq1::@23
  __b23:
    // [36] (byte) irq1::barcol#2 ← -- (byte) irq1::barcol#4 -- vbuzz=_dec_vbuzz 
    dez
    // [37] *((const byte*) rasters + (byte) irq1::idx#4) ← (byte) irq1::barcol#2 -- pbuc1_derefidx_vbuyy=vbuzz 
    tza
    sta rasters,y
    // [38] (byte) irq1::idx#2 ← ++ (byte) irq1::idx#4 -- vbuyy=_inc_vbuyy 
    iny
    // [39] (byte) irq1::i1#1 ← ++ (byte) irq1::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [32] phi from irq1::@23 to irq1::@22 [phi:irq1::@23->irq1::@22]
  __b22_from___b23:
    // [32] phi (byte) irq1::idx#4 = (byte) irq1::idx#2 [phi:irq1::@23->irq1::@22#0] -- register_copy 
    // [32] phi (byte) irq1::barcol#4 = (byte) irq1::barcol#2 [phi:irq1::@23->irq1::@22#1] -- register_copy 
    // [32] phi (byte) irq1::i1#2 = (byte) irq1::i1#1 [phi:irq1::@23->irq1::@22#2] -- register_copy 
    jmp __b22
    // irq1::@21
  __b21:
    // [40] *((const byte*) rasters + (byte) irq1::idx#3) ← (byte) irq1::barcol#3 -- pbuc1_derefidx_vbuyy=vbuzz 
    tza
    sta rasters,y
    // [41] (byte) irq1::idx#1 ← ++ (byte) irq1::idx#3 -- vbuyy=_inc_vbuyy 
    iny
    // [42] (byte) irq1::barcol#1 ← ++ (byte) irq1::barcol#3 -- vbuzz=_inc_vbuzz 
    inz
    // [43] (byte) irq1::i#1 ← ++ (byte) irq1::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [30] phi from irq1::@21 to irq1::@20 [phi:irq1::@21->irq1::@20]
  __b20_from___b21:
    // [30] phi (byte) irq1::idx#3 = (byte) irq1::idx#1 [phi:irq1::@21->irq1::@20#0] -- register_copy 
    // [30] phi (byte) irq1::barcol#3 = (byte) irq1::barcol#1 [phi:irq1::@21->irq1::@20#1] -- register_copy 
    // [30] phi (byte) irq1::i#2 = (byte) irq1::i#1 [phi:irq1::@21->irq1::@20#2] -- register_copy 
    jmp __b20
    // irq1::@16
  __b16:
    // [44] *((const byte*) rasters + (byte) irq1::l#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta rasters,x
    // [45] (byte) irq1::l#1 ← ++ (byte) irq1::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [15] phi from irq1::@16 to irq1::@15 [phi:irq1::@16->irq1::@15]
  __b15_from___b16:
    // [15] phi (byte) irq1::l#2 = (byte) irq1::l#1 [phi:irq1::@16->irq1::@15#0] -- register_copy 
    jmp __b15
    // irq1::@2
  __b2:
    // [46] (byte) irq1::col#0 ← *((const byte*) rasters + (byte) irq1::line#10) -- vbuaa=pbuc1_derefidx_vbuzz 
    tza
    tay
    lda rasters,y
    // [47] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR) ← (byte) irq1::col#0 -- _deref_pbuc1=vbuaa 
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR
    // [48] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR) ← (byte) irq1::col#0 -- _deref_pbuc1=vbuaa 
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR
    // [49] if((byte) irq1::line#10<(const nomodify byte) irq1::scrollypos) goto irq1::@3 -- vbuzz_lt_vbuc1_then_la1 
    cpz #scrollypos
    bcc __b3
    jmp __b9
    // irq1::@9
  __b9:
    // [50] if((byte) irq1::line#10==(const nomodify byte) irq1::scrollypos) goto irq1::@4 -- vbuzz_eq_vbuc1_then_la1 
    cpz #scrollypos
    beq __b4
    jmp __b10
    // irq1::@10
  __b10:
    // [51] if((byte) irq1::line#10==(const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar) goto irq1::@5 -- vbuzz_eq_vbuc1_then_la1 
    cpz #scrollypos+blackbar
    beq __b5
    jmp __b11
    // irq1::@11
  __b11:
    // [52] if((byte) irq1::line#10!=(const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar+(byte) 1) goto irq1::@6 -- vbuzz_neq_vbuc1_then_la1 
    cpz #scrollypos+blackbar+1
    bne __b6_from___b11
    jmp __b12
    // irq1::@12
  __b12:
    // [53] (byte) irq1::zoomval#0 ← *((const byte*) SINUS + (volatile byte) zoomx) -- vbuaa=pbuc1_derefidx_vbuz1 
    // if raster position > scrolly pos do zoom
    ldy.z zoomx
    lda SINUS,y
    // [54] (volatile byte) zoomx ← ++ (volatile byte) zoomx -- vbuz1=_inc_vbuz1 
    inc.z zoomx
    // [55] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) irq1::zoomval#0 -- _deref_pbuc1=vbuaa 
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL
    // [56] (byte~) irq1::$7 ← (byte) irq1::zoomval#0 + (byte) 1 -- vbuaa=vbuaa_plus_1 
    inc
    // [57] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte~) irq1::$7 -- _deref_pbuc1=vbuaa 
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    // [58] if((volatile byte) zoomx!=(byte) 0) goto irq1::@6 -- vbuz1_neq_0_then_la1 
    lda.z zoomx
    cmp #0
    bne __b6_from___b12
    jmp __b13
    // irq1::@13
  __b13:
    // [59] (volatile byte) greetnm ← ++ (volatile byte) greetnm -- vbuz1=_inc_vbuz1 
    inc.z greetnm
    // [60] if((volatile byte) greetnm!=(const nomodify byte) GREETCOUNT) goto irq1::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #GREETCOUNT
    cmp.z greetnm
    bne __b6_from___b13
    jmp __b14
    // irq1::@14
  __b14:
    // [61] (volatile byte) greetnm ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z greetnm
    // [62] phi from irq1::@11 irq1::@12 irq1::@13 irq1::@14 irq1::@3 irq1::@4 irq1::@5 to irq1::@6 [phi:irq1::@11/irq1::@12/irq1::@13/irq1::@14/irq1::@3/irq1::@4/irq1::@5->irq1::@6]
  __b6_from___b11:
  __b6_from___b12:
  __b6_from___b13:
  __b6_from___b14:
  __b6_from___b3:
  __b6_from___b4:
  __b6_from___b5:
    // [62] phi (byte) irq1::wobblepos#7 = (byte) irq1::wobblepos#10 [phi:irq1::@11/irq1::@12/irq1::@13/irq1::@14/irq1::@3/irq1::@4/irq1::@5->irq1::@6#0] -- register_copy 
    jmp __b6
    // irq1::@6
  __b6:
    // [63] (byte) irq1::raster#0 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) -- vbuaa=_deref_pbuc1 
    // Wait for the next raster line
    lda VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    jmp __b7
    // irq1::@7
  __b7:
    // [64] if((byte) irq1::raster#0==*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)) goto irq1::@7 -- vbuaa_eq__deref_pbuc1_then_la1 
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    beq __b7
    jmp __b8
    // irq1::@8
  __b8:
    // [65] (byte) irq1::line#1 ← ++ (byte) irq1::line#10 -- vbuzz=_inc_vbuzz 
    inz
    // [13] phi from irq1::@8 to irq1::@1 [phi:irq1::@8->irq1::@1]
  __b1_from___b8:
    // [13] phi (byte) irq1::wobblepos#10 = (byte) irq1::wobblepos#7 [phi:irq1::@8->irq1::@1#0] -- register_copy 
    // [13] phi (byte) irq1::line#10 = (byte) irq1::line#1 [phi:irq1::@8->irq1::@1#1] -- register_copy 
    jmp __b1
    // irq1::@5
  __b5:
    // [66] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50 -- _deref_pbuc1=vbuc2 
    // if raster position > scrolly pos do nozoom
    // default value
    lda #$50
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    jmp __b6_from___b5
    // irq1::@4
  __b4:
    // [67] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50 -- _deref_pbuc1=vbuc2 
    // if raster position = scrolly pos do scrolly
    // no wobbling from this point
    lda #$50
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    // [68] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (volatile byte) xpos -- _deref_pbuc1=vbuz1 
    // set softscroll
    lda.z xpos
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    jmp __b6_from___b4
    // irq1::@3
  __b3:
    // [69] (byte~) irq1::$12 ← (byte) $28 + *((const byte*) SINUS + (byte) irq1::wobblepos#10) -- vbuaa=vbuc1_plus_pbuc2_derefidx_vbuxx 
    lda #$28
    clc
    adc SINUS,x
    // [70] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte~) irq1::$12 -- _deref_pbuc1=vbuaa 
    // if raster position < scrolly pos do wobble Logo!
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    // [71] (byte) irq1::wobblepos#1 ← ++ (byte) irq1::wobblepos#10 -- vbuxx=_inc_vbuxx 
    inx
    // [72] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) $66 -- _deref_pbuc1=vbuc2 
    // No zooming
    lda #$66
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL
    jmp __b6_from___b3
}
  // main
main: {
    // [73] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $47 -- _deref_pbuc1=vbuc2 
    // Enable MEGA65 features
    lda #$47
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_KEY
    // [74] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $53 -- _deref_pbuc1=vbuc2 
    lda #$53
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_KEY
    // [75] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | (byte) $40 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Enable 48MHz fast mode
    lda #$40
    ora VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB
    // [76] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | (byte) $40 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    lda #$40
    ora VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC
    // [77] call memset 
  // Clear screen 
    // [101] phi from main to memset [phi:main->memset]
  memset_from_main:
    jsr memset
    jmp __b6
    // main::@6
  __b6:
    // asm { lda#0  }
    // Initialize music
    lda #0
    // [79] call *((const void()*) songInit) 
    jsr songInit
    // [80] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [80] phi (byte) main::i1#2 = (byte) 0 [phi:main::@6->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // Put MEGA logo on screen
    // main::@1
  __b1:
    // [81] if((byte) main::i1#2<(byte) $bc*(const byte) SIZEOF_BYTE) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$bc*SIZEOF_BYTE
    bcc __b2
    // [82] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [82] phi (byte) main::i#2 = (byte) 0 [phi:main::@1->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [82] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  __b3_from___b3:
    // [82] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [83] *((const nomodify byte*) PALETTE_RED + (byte) main::i#2) ← *((const byte*) PAL_RED + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PAL_RED,x
    sta PALETTE_RED,x
    // [84] *((const nomodify byte*) PALETTE_GREEN + (byte) main::i#2) ← *((const byte*) PAL_GREEN + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PAL_GREEN,x
    sta PALETTE_GREEN,x
    // [85] *((const nomodify byte*) PALETTE_BLUE + (byte) main::i#2) ← *((const byte*) PAL_BLUE + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PAL_BLUE,x
    sta PALETTE_BLUE,x
    // [86] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [87] if((byte) main::i#1!=(byte) 0) goto main::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b3
    jmp __b4
    // main::@4
  __b4:
    // asm { sei  }
    // Set up raster interrupts C64 style
    sei
    // [89] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [90] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (byte) $16 -- _deref_pbuc1=vbuc2 
    // Set raster line to 0x16
    lda #$16
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // [91] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda #$7f
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // [92] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE
    // [93] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_STACK)(void()) irq1() -- _deref_qprc1=pprc2 
    // Set the IRQ routine
    lda #<irq1
    sta HARDWARE_IRQ
    lda #>irq1
    sta HARDWARE_IRQ+1
    // [94] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // no kernal or BASIC rom visible
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [95] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [96] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // open sideborder
    lda #1
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO
    // asm { cli  }
    // Enable IRQ
    cli
    // [98] phi from main::@4 main::@5 to main::@5 [phi:main::@4/main::@5->main::@5]
  __b5_from___b4:
  __b5_from___b5:
    jmp __b5
    // main::@5
  __b5:
    jmp __b5_from___b5
    // main::@2
  __b2:
    // [99] *((const nomodify byte*) SCREEN+(byte)(number) 3*(number) $28 + (byte) main::i1#2) ← *((const byte*) MEGA_LOGO + (byte) main::i1#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MEGA_LOGO,x
    sta SCREEN+3*$28,x
    // [100] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [80] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [80] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $28*$19
    .label str = SCREEN
    .label end = str+num
    .label dst = 4
    // [102] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [102] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [103] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [104] return 
    rts
    // memset::@2
  __b2:
    // [105] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [106] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inw.z dst
    // [102] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [102] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // Sinus Values 0-183
SINUS:
.fill 256, 91.5 + 91.5*sin(i*2*PI/256)

  // Moving Raster Bars
  rasters: .fill $100, 0
  // A MEGA logo
  MEGA_LOGO: .byte $20, $20, $20, $20, $20, $cf, $cf, $cf, $20, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $20, $cf, $cf, $20, $cf, $20, $cf, $20, $20, $20, $cf, $cf, $20, $20, $20, $20, $cf, $cf, $20, $20, $20, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $20, $20, $cf, $20, $cf, $cf, $cf, $cf, $cf, $20, $cf, $cf, $20, $cf, $cf, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $20, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $cf, $cf, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $20, $20, $20, $20, $cf, $cf, $20, $cf, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $cf, $20, $20, $20, $cf
  PAL_RED: .byte 0, $f3, $d4, $b5, $a6, $97, $88, $79, $1a, $fa, $eb, $ec, $bd, $be, $af, $ff, $16, $c6, $a7, $88, $49, $5a, $2b, $1c, $ac, $ad, $8e, $8f, $ff, $ff, $ff, $ff, $c6, $77, $48, $29, $e9, $fa, $cb, $cc, $5d, $4e, $2f, $ff, $ff, $ff, $ff, $ff, $57, $18, $f8, $d9, $aa, $8b, $6c, $5d, $ed, $de, $cf, $ff, $ff, $ff, $ff, $ff, $26, $e6, $b7, $a8, $69, $5a, $3b, $3c, $dc, $cd, $ae, $9f, $ff, $ff, $ff, $ff, $65, $16, $17, $f7, $d8, $b9, $9a, $8b, $2c, $d, $fd, $ee, $cf, $ff, $ff, $ff, $64, $15, 6, $e6, $c7, $a8, $99, $8a, $1b, $c, $fc, $fd, $ee, $cf, $ff, $ff, $12, $d2, $d3, $b4, $95, $86, $77, $78, 9, $69, $ea, $fb, $dc, $ad, $ae, $af, $f0, $c1, $c2, $a3, $84, $85, $76, $67, 8, $f8, $e9, $da, $db, $bc, $bd, $ae, $40, $11, $12, $f2, $e3, $d4, $c5, $c6, $47, $38, $39, $2a, $1b, $c, $d, $ed, 0, 0, $f0, $d1, $c2, $b3, $a4, $95, $36, $27, $28, $29, $f9, $ea, $eb, $ec, $70, $41, $22, $23, $f3, $f4, $e5, $e6, $77, $78, $69, $7a, $3b, $3c, $3d, $3e, $a1, $82, $63, $54, $35, $26, 7, 8, $98, $99, $8a, $7b, $5c, $5d, $3e, $3f, $33, 4, $d4, $d5, $a6, $a7, $88, $89, $1a, $ab, $fb, $ec, $cd, $be, $af, $ff, $b4, $85, $56, $47, $18, 9, $f9, $ea, $7b, $7c, $5d, $5e, $2f, $ef, $ff, $ff, 6, $d6, $a7, $98, $59, $4a, $2b, $2c, $bc, $ad, $8e, $8f, $ff, $ff, $ff, $ff
  PAL_GREEN: .byte 0, $e3, $c4, $b5, $96, $87, $78, $79, $a, $fa, $eb, $dc, $bd, $ae, $af, $ff, $e2, $b3, $a4, $85, $76, $67, $48, $49, $d9, $da, $bb, $bc, $8d, $8e, $7f, $ff, $42, 3, 4, $e4, $d5, $c6, $b7, $a8, $39, $3a, $1b, $2c, $fc, $fd, $de, $df, $61, $32, $13, 4, $e4, $e5, $d6, $d7, $78, $59, $4a, $4b, $2c, $1d, $e, $fe, $e0, $b1, $a2, $93, $74, $75, $56, $57, $e7, $d8, $79, $ca, $ab, $9c, $9d, $8e, $f0, $d1, $c2, $a3, $84, $85, $76, $77, 8, 9, $f9, $fa, $db, $cc, $bd, $ae, $61, $22, $23, $14, $f4, $e5, $d6, $c7, $58, $59, $3a, $3b, $1c, $d, $fd, $fe, $92, $53, $44, $35, $16, $f6, $e7, $e8, $79, $6a, $5b, $4c, $2d, $3e, $1f, $ef, $53, $14, 5, $e5, $c6, $b7, $a8, $99, $2a, $2b, $c, $d, $dd, $ce, $cf, $ff, $f3, $b4, $95, $86, $57, $38, $29, $1a, $ba, $ab, $9c, $8d, $6e, $5f, $ff, $ff, $95, $56, $27, $18, $e8, $d9, $ca, $bb, $4c, $3d, $2e, $1f, $ef, $ff, $ff, $ff, $c5, $86, $57, $38, $19, $a, $ea, $db, $6c, $5d, $3e, $3f, $ef, $ff, $ff, $ff, $65, $26, 7, $e7, $c8, $b9, $9a, $9b, $2c, $1d, $fd, $fe, $cf, $ff, $ff, $ff, $b4, $75, $56, $37, $28, $19, $e9, $ea, $7b, $6c, $5d, $4e, $2f, $ff, $ff, $ff, $c3, $94, $75, $56, $47, $38, $19, $1a, $aa, $ab, $7c, $7d, $5e, $4f, $ff, $ff, $e2, $a3, $94, $85, $76, $67, $38, $49, $d9, $ca, $ab, $bc, $7d, $7e, $6f, $ff
  PAL_BLUE: .byte 0, $f3, $d4, $b5, $a6, $97, $88, $79, $1a, $fa, $eb, $ec, $bd, $be, $af, $ff, 0, 0, 0, 0, $c0, $b1, $a2, $a3, $34, $35, $26, $27, $f7, $f8, $f9, $ea, 0, 0, $30, $11, $22, $13, $14, 5, $b5, $96, $97, $98, $79, $6a, $5b, $4c, $81, $42, $43, $34, 5, 6, $f6, $f7, $78, $69, $5a, $5b, $4c, $3d, $1e, $f, $17, $c7, $a8, $89, $5a, $5b, $3c, $1d, $ad, $9e, $7f, $ff, $ff, $ff, $ff, $ff, $78, 9, $e9, $ca, $ab, $7c, $5d, $5e, $de, $cf, $ff, $ff, $ff, $ff, $ff, $ff, $59, $a, $ca, $bb, $8c, $6d, $3e, $2f, $bf, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $49, $f9, $da, $ab, $7c, $5d, $2e, $2f, $af, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $48, $d8, $b9, $aa, $7b, $5c, $2d, $2e, $be, $9f, $ff, $ff, $ff, $ff, $ff, $ff, 7, $97, $88, $69, $4a, $2b, $1c, $2d, $9d, $7e, $6f, $ff, $ff, $ff, $ff, $ff, $81, $62, $53, $44, 5, 6, $f6, $e7, $78, $69, $5a, $5b, $3c, $2d, $2e, $1f, 0, 0, 0, 0, $b0, $b1, $a2, $b3, $44, $35, $36, $37, 8, $f8, $a, $b, 0, 0, 0, 0, 0, $70, $61, $62, $f2, $e3, $d4, $c5, $b6, $b7, $b8, $99, 0, 0, 0, 0, 0, 0, $f0, $f1, $82, $83, $84, $85, $66, $57, $58, $59, 0, 0, 0, 0, 0, $70, $61, $62, $e2, $e3, $d4, $d5, $b6, $a7, $b8, $a9, 0, 0, 0, 0, $a0, $b1, $a2, $a3, $44, $35, $26, $37, $f7, $19, $f9, $fa
.pc = $fc0 "SONG"
// Music at an absolute address
SONG:
.import c64 "DiscoZak_2SID_patched.prg"


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b15
Removing instruction jmp __b17
Removing instruction jmp __b18
Removing instruction jmp __b25
Removing instruction jmp __breturn
Removing instruction jmp __b20
Removing instruction jmp __b22
Removing instruction jmp __b24
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b6_from___b11 with __b6
Replacing label __b6_from___b12 with __b6
Replacing label __b6_from___b13 with __b6
Replacing label __b6_from___b5 with __b6
Replacing label __b6_from___b4 with __b6
Replacing label __b6_from___b3 with __b6
Replacing label __b3_from___b3 with __b3
Replacing label __b5_from___b5 with __b5
Removing instruction __b1_from___init1:
Removing instruction __b6_from___b11:
Removing instruction __b6_from___b12:
Removing instruction __b6_from___b13:
Removing instruction __b6_from___b14:
Removing instruction __b6_from___b3:
Removing instruction __b6_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b3_from___b3:
Removing instruction __b5_from___b4:
Removing instruction __b5_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_irq1:
Removing instruction __b15_from___b1:
Removing instruction __b17:
Removing instruction __b18_from___b17:
Removing instruction __b25_from___b18:
Removing instruction __breturn:
Removing instruction __b25_from___b26:
Removing instruction __b20_from___b19:
Removing instruction __b22_from___b20:
Removing instruction __b24:
Removing instruction __b18_from___b24:
Removing instruction __b22_from___b23:
Removing instruction __b20_from___b21:
Removing instruction __b15_from___b16:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b8:
Removing instruction __b1_from___b8:
Removing instruction memset_from_main:
Removing instruction __b6:
Removing instruction __b1_from___b6:
Removing instruction __b3_from___b1:
Removing instruction __b4:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*) 56320
(const nomodify byte) CIA_INTERRUPT_CLEAR = (byte) $7f
(const nomodify byte) GREETCOUNT = (byte) $10
(const nomodify void()**) HARDWARE_IRQ = (void()**) 65534
(const nomodify byte) IRQ_RASTER = (byte) 1
(byte) MEGA65_VICIV::ALPHADELAY
(byte) MEGA65_VICIV::B0PIX
(byte) MEGA65_VICIV::B0_ADDR
(byte) MEGA65_VICIV::B1PIX
(byte) MEGA65_VICIV::B1_ADDR
(byte) MEGA65_VICIV::B2PIX
(byte) MEGA65_VICIV::B2_ADDR
(byte) MEGA65_VICIV::B3PIX
(byte) MEGA65_VICIV::B3_ADDR
(byte) MEGA65_VICIV::B4PIX
(byte) MEGA65_VICIV::B4_ADDR
(byte) MEGA65_VICIV::B5PIX
(byte) MEGA65_VICIV::B5_ADDR
(byte) MEGA65_VICIV::B6PIX
(byte) MEGA65_VICIV::B6_ADDR
(byte) MEGA65_VICIV::B7PIX
(byte) MEGA65_VICIV::B7_ADDR
(byte) MEGA65_VICIV::BBDRPOS_HI
(byte) MEGA65_VICIV::BBDRPOS_LO
(byte) MEGA65_VICIV::BG_COLOR
(byte) MEGA65_VICIV::BG_COLOR1
(byte) MEGA65_VICIV::BG_COLOR2
(byte) MEGA65_VICIV::BG_COLOR3
(byte) MEGA65_VICIV::BORDER_COLOR
(byte) MEGA65_VICIV::BP16ENS
(byte) MEGA65_VICIV::BPCOMP
(byte) MEGA65_VICIV::BPX
(byte) MEGA65_VICIV::BPY
(byte) MEGA65_VICIV::CHARPTR_HILO
(byte) MEGA65_VICIV::CHARPTR_LOHI
(byte) MEGA65_VICIV::CHARPTR_LOLO
(byte) MEGA65_VICIV::CHARSTEP_HI
(byte) MEGA65_VICIV::CHARSTEP_LO
(byte) MEGA65_VICIV::CHRCOUNT
(byte) MEGA65_VICIV::CHRXSCL
(byte) MEGA65_VICIV::CHRYSCL
(byte) MEGA65_VICIV::COLPTR_HI
(byte) MEGA65_VICIV::COLPTR_LO
(byte) MEGA65_VICIV::CONTROL1
(byte) MEGA65_VICIV::CONTROL2
(byte) MEGA65_VICIV::CONTROLA
(byte) MEGA65_VICIV::CONTROLB
(byte) MEGA65_VICIV::CONTROLC
(byte) MEGA65_VICIV::DEBUG1
(byte) MEGA65_VICIV::DEBUGX
(byte) MEGA65_VICIV::DEBUGXY
(byte) MEGA65_VICIV::DEBUGY
(byte) MEGA65_VICIV::FNRASTER_HI
(byte) MEGA65_VICIV::FNRASTER_LO
(byte) MEGA65_VICIV::HPOS
(byte) MEGA65_VICIV::IRQ_ENABLE
(byte) MEGA65_VICIV::IRQ_STATUS
(byte) MEGA65_VICIV::KEY
(byte) MEGA65_VICIV::LIGHTPEN_X
(byte) MEGA65_VICIV::LIGHTPEN_Y
(byte) MEGA65_VICIV::MEMORY
(byte) MEGA65_VICIV::PALSEL
(byte) MEGA65_VICIV::RASLINE0
(byte) MEGA65_VICIV::RASTER
(byte) MEGA65_VICIV::ROWCOUNT
(byte) MEGA65_VICIV::RSTCMP
(byte) MEGA65_VICIV::RSTCOMP
(byte) MEGA65_VICIV::SBPDEBUG
(byte) MEGA65_VICIV::SCRNPTR_HIHI
(byte) MEGA65_VICIV::SCRNPTR_HILO
(byte) MEGA65_VICIV::SCRNPTR_LOHI
(byte) MEGA65_VICIV::SCRNPTR_LOLO
(byte) MEGA65_VICIV::SIDBDRWD_HI
(byte) MEGA65_VICIV::SIDBDRWD_LO
(byte) MEGA65_VICIV::SPR16EN
(byte) MEGA65_VICIV::SPRALPHAVAL
(byte) MEGA65_VICIV::SPRENALPHA
(byte) MEGA65_VICIV::SPRENV400
(byte) MEGA65_VICIV::SPRHGHT
(byte) MEGA65_VICIV::SPRHGTEN
(byte) MEGA65_VICIV::SPRITE0_COLOR
(byte) MEGA65_VICIV::SPRITE0_X
(byte) MEGA65_VICIV::SPRITE0_Y
(byte) MEGA65_VICIV::SPRITE1_COLOR
(byte) MEGA65_VICIV::SPRITE1_X
(byte) MEGA65_VICIV::SPRITE1_Y
(byte) MEGA65_VICIV::SPRITE2_COLOR
(byte) MEGA65_VICIV::SPRITE2_X
(byte) MEGA65_VICIV::SPRITE2_Y
(byte) MEGA65_VICIV::SPRITE3_COLOR
(byte) MEGA65_VICIV::SPRITE3_X
(byte) MEGA65_VICIV::SPRITE3_Y
(byte) MEGA65_VICIV::SPRITE4_COLOR
(byte) MEGA65_VICIV::SPRITE4_X
(byte) MEGA65_VICIV::SPRITE4_Y
(byte) MEGA65_VICIV::SPRITE5_COLOR
(byte) MEGA65_VICIV::SPRITE5_X
(byte) MEGA65_VICIV::SPRITE5_Y
(byte) MEGA65_VICIV::SPRITE6_COLOR
(byte) MEGA65_VICIV::SPRITE6_X
(byte) MEGA65_VICIV::SPRITE6_Y
(byte) MEGA65_VICIV::SPRITE7_COLOR
(byte) MEGA65_VICIV::SPRITE7_X
(byte) MEGA65_VICIV::SPRITE7_Y
(byte) MEGA65_VICIV::SPRITES_BG_COLLISION
(byte) MEGA65_VICIV::SPRITES_COLLISION
(byte) MEGA65_VICIV::SPRITES_ENABLE
(byte) MEGA65_VICIV::SPRITES_EXPAND_X
(byte) MEGA65_VICIV::SPRITES_EXPAND_Y
(byte) MEGA65_VICIV::SPRITES_MC
(byte) MEGA65_VICIV::SPRITES_MCOLOR1
(byte) MEGA65_VICIV::SPRITES_MCOLOR2
(byte) MEGA65_VICIV::SPRITES_PRIORITY
(byte) MEGA65_VICIV::SPRITES_XMSB
(byte) MEGA65_VICIV::SPRPTRADR_HILO
(byte) MEGA65_VICIV::SPRPTRADR_LOHI
(byte) MEGA65_VICIV::SPRPTRADR_LOLO
(byte) MEGA65_VICIV::SPRX64EN
(byte) MEGA65_VICIV::SPRXSMSBS
(byte) MEGA65_VICIV::SPRYSMSBSM
(byte) MEGA65_VICIV::SRPYMSBS
(byte) MEGA65_VICIV::SYNCPOL
(byte) MEGA65_VICIV::TBDRPOS_HI
(byte) MEGA65_VICIV::TBDRPOS_LO
(byte) MEGA65_VICIV::TEXTXPOS_HI
(byte) MEGA65_VICIV::TEXTXPOS_LO
(byte) MEGA65_VICIV::TEXTYPOS_HI
(byte) MEGA65_VICIV::TEXTYPOS_LO
(byte) MEGA65_VICIV::UNUSED
(byte) MEGA65_VICIV::VPOS
(byte) MEGA65_VICIV::VSYNDEL
(byte) MEGA65_VICIV::XPOS_HI
(byte) MEGA65_VICIV::XPOS_LO
(const byte*) MEGA_LOGO[]  = { (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf }
(byte) MOS4569_VICIII::B0PIX
(byte) MOS4569_VICIII::B0_ADDR
(byte) MOS4569_VICIII::B1PIX
(byte) MOS4569_VICIII::B1_ADDR
(byte) MOS4569_VICIII::B2PIX
(byte) MOS4569_VICIII::B2_ADDR
(byte) MOS4569_VICIII::B3PIX
(byte) MOS4569_VICIII::B3_ADDR
(byte) MOS4569_VICIII::B4PIX
(byte) MOS4569_VICIII::B4_ADDR
(byte) MOS4569_VICIII::B5PIX
(byte) MOS4569_VICIII::B5_ADDR
(byte) MOS4569_VICIII::B6PIX
(byte) MOS4569_VICIII::B6_ADDR
(byte) MOS4569_VICIII::B7PIX
(byte) MOS4569_VICIII::B7_ADDR
(byte) MOS4569_VICIII::BG_COLOR
(byte) MOS4569_VICIII::BG_COLOR1
(byte) MOS4569_VICIII::BG_COLOR2
(byte) MOS4569_VICIII::BG_COLOR3
(byte) MOS4569_VICIII::BORDER_COLOR
(byte) MOS4569_VICIII::BPCOMP
(byte) MOS4569_VICIII::BPX
(byte) MOS4569_VICIII::BPY
(byte) MOS4569_VICIII::CONTROL1
(byte) MOS4569_VICIII::CONTROL2
(byte) MOS4569_VICIII::CONTROLA
(byte) MOS4569_VICIII::CONTROLB
(byte) MOS4569_VICIII::HPOS
(byte) MOS4569_VICIII::IRQ_ENABLE
(byte) MOS4569_VICIII::IRQ_STATUS
(byte) MOS4569_VICIII::KEY
(byte) MOS4569_VICIII::LIGHTPEN_X
(byte) MOS4569_VICIII::LIGHTPEN_Y
(byte) MOS4569_VICIII::MEMORY
(byte) MOS4569_VICIII::RASTER
(byte) MOS4569_VICIII::SPRITE0_COLOR
(byte) MOS4569_VICIII::SPRITE0_X
(byte) MOS4569_VICIII::SPRITE0_Y
(byte) MOS4569_VICIII::SPRITE1_COLOR
(byte) MOS4569_VICIII::SPRITE1_X
(byte) MOS4569_VICIII::SPRITE1_Y
(byte) MOS4569_VICIII::SPRITE2_COLOR
(byte) MOS4569_VICIII::SPRITE2_X
(byte) MOS4569_VICIII::SPRITE2_Y
(byte) MOS4569_VICIII::SPRITE3_COLOR
(byte) MOS4569_VICIII::SPRITE3_X
(byte) MOS4569_VICIII::SPRITE3_Y
(byte) MOS4569_VICIII::SPRITE4_COLOR
(byte) MOS4569_VICIII::SPRITE4_X
(byte) MOS4569_VICIII::SPRITE4_Y
(byte) MOS4569_VICIII::SPRITE5_COLOR
(byte) MOS4569_VICIII::SPRITE5_X
(byte) MOS4569_VICIII::SPRITE5_Y
(byte) MOS4569_VICIII::SPRITE6_COLOR
(byte) MOS4569_VICIII::SPRITE6_X
(byte) MOS4569_VICIII::SPRITE6_Y
(byte) MOS4569_VICIII::SPRITE7_COLOR
(byte) MOS4569_VICIII::SPRITE7_X
(byte) MOS4569_VICIII::SPRITE7_Y
(byte) MOS4569_VICIII::SPRITES_BG_COLLISION
(byte) MOS4569_VICIII::SPRITES_COLLISION
(byte) MOS4569_VICIII::SPRITES_ENABLE
(byte) MOS4569_VICIII::SPRITES_EXPAND_X
(byte) MOS4569_VICIII::SPRITES_EXPAND_Y
(byte) MOS4569_VICIII::SPRITES_MC
(byte) MOS4569_VICIII::SPRITES_MCOLOR1
(byte) MOS4569_VICIII::SPRITES_MCOLOR2
(byte) MOS4569_VICIII::SPRITES_PRIORITY
(byte) MOS4569_VICIII::SPRITES_XMSB
(byte) MOS4569_VICIII::UNUSED
(byte) MOS4569_VICIII::VPOS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const nomodify byte) NUMBERL = (byte) $e0
(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL = (byte) $5a
(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB = (byte) $31
(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC = (byte) $54
(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0 = (byte) $6f
(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO = (byte) $5c
(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO = (byte) $4c
(const byte) OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR = (byte) $21
(const byte) OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR = (byte) $20
(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY = (byte) $2f
(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = (byte) $d
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = (byte) $11
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = (byte) $16
(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = (byte) $1a
(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = (byte) $19
(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER = (byte) $12
(const nomodify byte*) PALETTE_BLUE = (byte*) 54016
(const nomodify byte*) PALETTE_GREEN = (byte*) 53760
(const nomodify byte*) PALETTE_RED = (byte*) 53504
(const byte*) PAL_BLUE[]  = { (byte) 0, (byte) $f3, (byte) $d4, (byte) $b5, (byte) $a6, (byte) $97, (byte) $88, (byte) $79, (byte) $1a, (byte) $fa, (byte) $eb, (byte) $ec, (byte) $bd, (byte) $be, (byte) $af, (byte) $ff, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $c0, (byte) $b1, (byte) $a2, (byte) $a3, (byte) $34, (byte) $35, (byte) $26, (byte) $27, (byte) $f7, (byte) $f8, (byte) $f9, (byte) $ea, (byte) 0, (byte) 0, (byte) $30, (byte) $11, (byte) $22, (byte) $13, (byte) $14, (byte) 5, (byte) $b5, (byte) $96, (byte) $97, (byte) $98, (byte) $79, (byte) $6a, (byte) $5b, (byte) $4c, (byte) $81, (byte) $42, (byte) $43, (byte) $34, (byte) 5, (byte) 6, (byte) $f6, (byte) $f7, (byte) $78, (byte) $69, (byte) $5a, (byte) $5b, (byte) $4c, (byte) $3d, (byte) $1e, (byte) $f, (byte) $17, (byte) $c7, (byte) $a8, (byte) $89, (byte) $5a, (byte) $5b, (byte) $3c, (byte) $1d, (byte) $ad, (byte) $9e, (byte) $7f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $78, (byte) 9, (byte) $e9, (byte) $ca, (byte) $ab, (byte) $7c, (byte) $5d, (byte) $5e, (byte) $de, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $59, (byte) $a, (byte) $ca, (byte) $bb, (byte) $8c, (byte) $6d, (byte) $3e, (byte) $2f, (byte) $bf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $49, (byte) $f9, (byte) $da, (byte) $ab, (byte) $7c, (byte) $5d, (byte) $2e, (byte) $2f, (byte) $af, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $48, (byte) $d8, (byte) $b9, (byte) $aa, (byte) $7b, (byte) $5c, (byte) $2d, (byte) $2e, (byte) $be, (byte) $9f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) 7, (byte) $97, (byte) $88, (byte) $69, (byte) $4a, (byte) $2b, (byte) $1c, (byte) $2d, (byte) $9d, (byte) $7e, (byte) $6f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $81, (byte) $62, (byte) $53, (byte) $44, (byte) 5, (byte) 6, (byte) $f6, (byte) $e7, (byte) $78, (byte) $69, (byte) $5a, (byte) $5b, (byte) $3c, (byte) $2d, (byte) $2e, (byte) $1f, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $b0, (byte) $b1, (byte) $a2, (byte) $b3, (byte) $44, (byte) $35, (byte) $36, (byte) $37, (byte) 8, (byte) $f8, (byte) $a, (byte) $b, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $70, (byte) $61, (byte) $62, (byte) $f2, (byte) $e3, (byte) $d4, (byte) $c5, (byte) $b6, (byte) $b7, (byte) $b8, (byte) $99, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $f0, (byte) $f1, (byte) $82, (byte) $83, (byte) $84, (byte) $85, (byte) $66, (byte) $57, (byte) $58, (byte) $59, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $70, (byte) $61, (byte) $62, (byte) $e2, (byte) $e3, (byte) $d4, (byte) $d5, (byte) $b6, (byte) $a7, (byte) $b8, (byte) $a9, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $a0, (byte) $b1, (byte) $a2, (byte) $a3, (byte) $44, (byte) $35, (byte) $26, (byte) $37, (byte) $f7, (byte) $19, (byte) $f9, (byte) $fa }
(const byte*) PAL_GREEN[]  = { (byte) 0, (byte) $e3, (byte) $c4, (byte) $b5, (byte) $96, (byte) $87, (byte) $78, (byte) $79, (byte) $a, (byte) $fa, (byte) $eb, (byte) $dc, (byte) $bd, (byte) $ae, (byte) $af, (byte) $ff, (byte) $e2, (byte) $b3, (byte) $a4, (byte) $85, (byte) $76, (byte) $67, (byte) $48, (byte) $49, (byte) $d9, (byte) $da, (byte) $bb, (byte) $bc, (byte) $8d, (byte) $8e, (byte) $7f, (byte) $ff, (byte) $42, (byte) 3, (byte) 4, (byte) $e4, (byte) $d5, (byte) $c6, (byte) $b7, (byte) $a8, (byte) $39, (byte) $3a, (byte) $1b, (byte) $2c, (byte) $fc, (byte) $fd, (byte) $de, (byte) $df, (byte) $61, (byte) $32, (byte) $13, (byte) 4, (byte) $e4, (byte) $e5, (byte) $d6, (byte) $d7, (byte) $78, (byte) $59, (byte) $4a, (byte) $4b, (byte) $2c, (byte) $1d, (byte) $e, (byte) $fe, (byte) $e0, (byte) $b1, (byte) $a2, (byte) $93, (byte) $74, (byte) $75, (byte) $56, (byte) $57, (byte) $e7, (byte) $d8, (byte) $79, (byte) $ca, (byte) $ab, (byte) $9c, (byte) $9d, (byte) $8e, (byte) $f0, (byte) $d1, (byte) $c2, (byte) $a3, (byte) $84, (byte) $85, (byte) $76, (byte) $77, (byte) 8, (byte) 9, (byte) $f9, (byte) $fa, (byte) $db, (byte) $cc, (byte) $bd, (byte) $ae, (byte) $61, (byte) $22, (byte) $23, (byte) $14, (byte) $f4, (byte) $e5, (byte) $d6, (byte) $c7, (byte) $58, (byte) $59, (byte) $3a, (byte) $3b, (byte) $1c, (byte) $d, (byte) $fd, (byte) $fe, (byte) $92, (byte) $53, (byte) $44, (byte) $35, (byte) $16, (byte) $f6, (byte) $e7, (byte) $e8, (byte) $79, (byte) $6a, (byte) $5b, (byte) $4c, (byte) $2d, (byte) $3e, (byte) $1f, (byte) $ef, (byte) $53, (byte) $14, (byte) 5, (byte) $e5, (byte) $c6, (byte) $b7, (byte) $a8, (byte) $99, (byte) $2a, (byte) $2b, (byte) $c, (byte) $d, (byte) $dd, (byte) $ce, (byte) $cf, (byte) $ff, (byte) $f3, (byte) $b4, (byte) $95, (byte) $86, (byte) $57, (byte) $38, (byte) $29, (byte) $1a, (byte) $ba, (byte) $ab, (byte) $9c, (byte) $8d, (byte) $6e, (byte) $5f, (byte) $ff, (byte) $ff, (byte) $95, (byte) $56, (byte) $27, (byte) $18, (byte) $e8, (byte) $d9, (byte) $ca, (byte) $bb, (byte) $4c, (byte) $3d, (byte) $2e, (byte) $1f, (byte) $ef, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $c5, (byte) $86, (byte) $57, (byte) $38, (byte) $19, (byte) $a, (byte) $ea, (byte) $db, (byte) $6c, (byte) $5d, (byte) $3e, (byte) $3f, (byte) $ef, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $65, (byte) $26, (byte) 7, (byte) $e7, (byte) $c8, (byte) $b9, (byte) $9a, (byte) $9b, (byte) $2c, (byte) $1d, (byte) $fd, (byte) $fe, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $b4, (byte) $75, (byte) $56, (byte) $37, (byte) $28, (byte) $19, (byte) $e9, (byte) $ea, (byte) $7b, (byte) $6c, (byte) $5d, (byte) $4e, (byte) $2f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $c3, (byte) $94, (byte) $75, (byte) $56, (byte) $47, (byte) $38, (byte) $19, (byte) $1a, (byte) $aa, (byte) $ab, (byte) $7c, (byte) $7d, (byte) $5e, (byte) $4f, (byte) $ff, (byte) $ff, (byte) $e2, (byte) $a3, (byte) $94, (byte) $85, (byte) $76, (byte) $67, (byte) $38, (byte) $49, (byte) $d9, (byte) $ca, (byte) $ab, (byte) $bc, (byte) $7d, (byte) $7e, (byte) $6f, (byte) $ff }
(const byte*) PAL_RED[]  = { (byte) 0, (byte) $f3, (byte) $d4, (byte) $b5, (byte) $a6, (byte) $97, (byte) $88, (byte) $79, (byte) $1a, (byte) $fa, (byte) $eb, (byte) $ec, (byte) $bd, (byte) $be, (byte) $af, (byte) $ff, (byte) $16, (byte) $c6, (byte) $a7, (byte) $88, (byte) $49, (byte) $5a, (byte) $2b, (byte) $1c, (byte) $ac, (byte) $ad, (byte) $8e, (byte) $8f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $c6, (byte) $77, (byte) $48, (byte) $29, (byte) $e9, (byte) $fa, (byte) $cb, (byte) $cc, (byte) $5d, (byte) $4e, (byte) $2f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $57, (byte) $18, (byte) $f8, (byte) $d9, (byte) $aa, (byte) $8b, (byte) $6c, (byte) $5d, (byte) $ed, (byte) $de, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $26, (byte) $e6, (byte) $b7, (byte) $a8, (byte) $69, (byte) $5a, (byte) $3b, (byte) $3c, (byte) $dc, (byte) $cd, (byte) $ae, (byte) $9f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $65, (byte) $16, (byte) $17, (byte) $f7, (byte) $d8, (byte) $b9, (byte) $9a, (byte) $8b, (byte) $2c, (byte) $d, (byte) $fd, (byte) $ee, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $64, (byte) $15, (byte) 6, (byte) $e6, (byte) $c7, (byte) $a8, (byte) $99, (byte) $8a, (byte) $1b, (byte) $c, (byte) $fc, (byte) $fd, (byte) $ee, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $12, (byte) $d2, (byte) $d3, (byte) $b4, (byte) $95, (byte) $86, (byte) $77, (byte) $78, (byte) 9, (byte) $69, (byte) $ea, (byte) $fb, (byte) $dc, (byte) $ad, (byte) $ae, (byte) $af, (byte) $f0, (byte) $c1, (byte) $c2, (byte) $a3, (byte) $84, (byte) $85, (byte) $76, (byte) $67, (byte) 8, (byte) $f8, (byte) $e9, (byte) $da, (byte) $db, (byte) $bc, (byte) $bd, (byte) $ae, (byte) $40, (byte) $11, (byte) $12, (byte) $f2, (byte) $e3, (byte) $d4, (byte) $c5, (byte) $c6, (byte) $47, (byte) $38, (byte) $39, (byte) $2a, (byte) $1b, (byte) $c, (byte) $d, (byte) $ed, (byte) 0, (byte) 0, (byte) $f0, (byte) $d1, (byte) $c2, (byte) $b3, (byte) $a4, (byte) $95, (byte) $36, (byte) $27, (byte) $28, (byte) $29, (byte) $f9, (byte) $ea, (byte) $eb, (byte) $ec, (byte) $70, (byte) $41, (byte) $22, (byte) $23, (byte) $f3, (byte) $f4, (byte) $e5, (byte) $e6, (byte) $77, (byte) $78, (byte) $69, (byte) $7a, (byte) $3b, (byte) $3c, (byte) $3d, (byte) $3e, (byte) $a1, (byte) $82, (byte) $63, (byte) $54, (byte) $35, (byte) $26, (byte) 7, (byte) 8, (byte) $98, (byte) $99, (byte) $8a, (byte) $7b, (byte) $5c, (byte) $5d, (byte) $3e, (byte) $3f, (byte) $33, (byte) 4, (byte) $d4, (byte) $d5, (byte) $a6, (byte) $a7, (byte) $88, (byte) $89, (byte) $1a, (byte) $ab, (byte) $fb, (byte) $ec, (byte) $cd, (byte) $be, (byte) $af, (byte) $ff, (byte) $b4, (byte) $85, (byte) $56, (byte) $47, (byte) $18, (byte) 9, (byte) $f9, (byte) $ea, (byte) $7b, (byte) $7c, (byte) $5d, (byte) $5e, (byte) $2f, (byte) $ef, (byte) $ff, (byte) $ff, (byte) 6, (byte) $d6, (byte) $a7, (byte) $98, (byte) $59, (byte) $4a, (byte) $2b, (byte) $2c, (byte) $bc, (byte) $ad, (byte) $8e, (byte) $8f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff }
(const nomodify byte*) PROCPORT = (byte*) 1
(const nomodify byte*) PROCPORT_DDR = (byte*) 0
(const nomodify byte) PROCPORT_DDR_MEMORY_MASK = (byte) 7
(const nomodify byte) PROCPORT_RAM_IO = (byte) 5
(const nomodify byte*) SCREEN = (byte*) 1024
(const byte*) SINUS[(number) $100]  = kickasm {{ .fill 256, 91.5 + 91.5*sin(i*2*PI/256)
 }}
(const byte) SIZEOF_BYTE = (byte) 1
(const byte*) SONG[]  = kickasm {{ .import c64 "DiscoZak_2SID_patched.prg"
 }}
(const nomodify struct MOS6569_VICII*) VICII = (struct MOS6569_VICII*) 53248
(const nomodify struct MOS4569_VICIII*) VICIII = (struct MOS4569_VICIII*) 53248
(const nomodify struct MEGA65_VICIV*) VICIV = (struct MEGA65_VICIV*) 53248
(void()) __start()
(label) __start::@1
(label) __start::@return
(label) __start::__init1
(volatile byte) greetnm loadstore zp[1]:9 1.3529411764705883
interrupt(HARDWARE_STACK)(void()) irq1()
(byte~) irq1::$12 reg byte a 22.0
(byte~) irq1::$22 reg byte a 22.0
(byte~) irq1::$23 reg byte a 22.0
(byte~) irq1::$7 reg byte a 22.0
(label) irq1::@1
(label) irq1::@10
(label) irq1::@11
(label) irq1::@12
(label) irq1::@13
(label) irq1::@14
(label) irq1::@15
(label) irq1::@16
(label) irq1::@17
(label) irq1::@18
(label) irq1::@19
(label) irq1::@2
(label) irq1::@20
(label) irq1::@21
(label) irq1::@22
(label) irq1::@23
(label) irq1::@24
(label) irq1::@25
(label) irq1::@26
(label) irq1::@3
(label) irq1::@4
(label) irq1::@5
(label) irq1::@6
(label) irq1::@7
(label) irq1::@8
(label) irq1::@9
(label) irq1::@return
(byte) irq1::barcnt
(byte) irq1::barcnt#1 barcnt zp[1]:2 22.0
(byte) irq1::barcnt#2 barcnt zp[1]:2 2.588235294117647
(byte) irq1::barcol
(byte) irq1::barcol#0 reg byte z 22.0
(byte) irq1::barcol#1 reg byte z 101.0
(byte) irq1::barcol#2 reg byte z 75.75
(byte) irq1::barcol#3 reg byte z 103.75
(byte) irq1::barcol#4 reg byte z 151.5
(byte) irq1::barsin
(byte) irq1::barsin#0 barsin zp[1]:3 4.0
(byte) irq1::barsin#1 barsin zp[1]:3 11.0
(byte) irq1::barsin#2 barsin zp[1]:3 2.1875
(const nomodify byte) irq1::blackbar = (byte) $13
(byte) irq1::col
(byte) irq1::col#0 reg byte a 16.5
(byte) irq1::i
(byte) irq1::i#1 reg byte x 202.0
(byte) irq1::i#2 reg byte x 60.599999999999994
(byte) irq1::i1
(byte) irq1::i1#1 reg byte x 202.0
(byte) irq1::i1#2 reg byte x 60.599999999999994
(byte) irq1::i2
(byte) irq1::i2#1 reg byte x 22.0
(byte) irq1::i2#2 reg byte x 11.0
(byte) irq1::idx
(byte) irq1::idx#0 reg byte y 11.0
(byte) irq1::idx#1 reg byte y 67.33333333333333
(byte) irq1::idx#2 reg byte y 101.0
(byte) irq1::idx#3 reg byte y 138.33333333333331
(byte) irq1::idx#4 reg byte y 101.0
(byte) irq1::l
(byte) irq1::l#1 reg byte x 22.0
(byte) irq1::l#2 reg byte x 14.666666666666666
(byte) irq1::line
(byte) irq1::line#1 reg byte z 22.0
(byte) irq1::line#10 reg byte z 3.142857142857143
(byte) irq1::raster
(byte) irq1::raster#0 reg byte a 56.0
(const nomodify byte) irq1::scrollypos = (byte) $66
(byte) irq1::wobblepos
(byte) irq1::wobblepos#0 reg byte x 4.0
(byte) irq1::wobblepos#1 reg byte x 11.0
(byte) irq1::wobblepos#10 reg byte x 4.391304347826087
(byte) irq1::wobblepos#7 reg byte x 22.0
(byte) irq1::zoomval
(byte) irq1::zoomval#0 reg byte a 11.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(byte) main::i
(byte) main::i#1 reg byte x 151.5
(byte) main::i#2 reg byte x 202.0
(byte) main::i1
(byte) main::i1#1 reg byte x 202.0
(byte) main::i1#2 reg byte x 168.33333333333331
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:4 2002.0
(byte*) memset::dst#2 dst zp[2]:4 1334.6666666666667
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word)(number) $28*(number) $19
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const nomodify byte*) SCREEN
(const byte*) rasters[(number) $100]  = { fill( $100, 0) }
(volatile byte) sinpos loadstore zp[1]:6 0.2564102564102564
(const void()*) songInit = (void()*)(const byte*) SONG
(const void()*) songPlay = (void()*)(const byte*) SONG+(byte) 3
(volatile byte) xpos loadstore zp[1]:8 0.3823529411764706
(volatile byte) zoomx loadstore zp[1]:7 1.3529411764705883

reg byte z [ irq1::line#10 irq1::line#1 ]
reg byte x [ irq1::wobblepos#10 irq1::wobblepos#0 irq1::wobblepos#7 irq1::wobblepos#1 ]
reg byte x [ irq1::l#2 irq1::l#1 ]
zp[1]:2 [ irq1::barcnt#2 irq1::barcnt#1 ]
zp[1]:3 [ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ]
reg byte x [ irq1::i2#2 irq1::i2#1 ]
reg byte x [ irq1::i#2 irq1::i#1 ]
reg byte x [ irq1::i1#2 irq1::i1#1 ]
reg byte z [ irq1::barcol#4 irq1::barcol#3 irq1::barcol#0 irq1::barcol#1 irq1::barcol#2 ]
reg byte y [ irq1::idx#4 irq1::idx#3 irq1::idx#0 irq1::idx#1 irq1::idx#2 ]
reg byte x [ main::i1#2 main::i1#1 ]
reg byte x [ main::i#2 main::i#1 ]
zp[2]:4 [ memset::dst#2 memset::dst#1 ]
zp[1]:6 [ sinpos ]
zp[1]:7 [ zoomx ]
zp[1]:8 [ xpos ]
zp[1]:9 [ greetnm ]
reg byte a [ irq1::$22 ]
reg byte a [ irq1::$23 ]
reg byte a [ irq1::col#0 ]
reg byte a [ irq1::zoomval#0 ]
reg byte a [ irq1::$7 ]
reg byte a [ irq1::raster#0 ]
reg byte a [ irq1::$12 ]


FINAL ASSEMBLER
Score: 8503

  // File Comments
// Raster65 Demo Implementation in C 
// Based on RASTER65 assembler demo
// https://mega.scryptos.com/sharefolder/MEGA/MEGA65+filehost
// https://www.forum64.de/index.php?thread/104591-xemu-vic-iv-implementation-update/&postID=1560511#post1560511
  // Upstart
.cpu _45gs02
  // MEGA65 platform executable starting in C64 mode.
.file [name="raster65.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$080d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
.segment Code


  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // The number of greetings
  .const GREETCOUNT = $10
  // The number of raster lines
  .const NUMBERL = $e0
  .const OFFSET_STRUCT_MOS4569_VICIII_KEY = $2f
  .const OFFSET_STRUCT_MEGA65_VICIV_CONTROLB = $31
  .const OFFSET_STRUCT_MEGA65_VICIV_CONTROLC = $54
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = $1a
  .const OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO = $5c
  .const OFFSET_STRUCT_MEGA65_VICIV_RASLINE0 = $6f
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = $19
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
  .const OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR = $21
  .const OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO = $4c
  .const OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL = $5a
  .const SIZEOF_BYTE = 1
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // The VIC III MOS 4567/4569
  .label VICIII = $d000
  // The VIC IV
  .label VICIV = $d000
  // Palette RED
  .label PALETTE_RED = $d100
  // Palette GREEN
  .label PALETTE_GREEN = $d200
  // Palette BLUE
  .label PALETTE_BLUE = $d300
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  .label SCREEN = $400
  // Pointer to the song init routine
  .label songInit = SONG
  // Pointer to the song play routine
  .label songPlay = SONG+3
  // Sinus Position
  .label sinpos = 6
  // Zoom Position
  .label zoomx = 7
  // soft scroll position of text scrolly (0-7)
  .label xpos = 8
  // The greeting currently being shown
  .label greetnm = 9
.segment Code
  // __start
__start: {
    // __start::__init1
    // sinpos
    // [1] (volatile byte) sinpos ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z sinpos
    // zoomx
    // [2] (volatile byte) zoomx ← (byte) 0 -- vbuz1=vbuc1 
    sta.z zoomx
    // xpos = 7
    // [3] (volatile byte) xpos ← (byte) 7 -- vbuz1=vbuc1 
    lda #7
    sta.z xpos
    // greetnm
    // [4] (volatile byte) greetnm ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z greetnm
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [6] call main 
    jsr main
    // __start::@return
    // [7] return 
    rts
}
  // irq1
// BIG INTERRUPT LOOP
irq1: {
    // y rasterline where scrolly starts
    .const scrollypos = $66
    // size of raster behind scrolly
    .const blackbar = $13
    .label barsin = 3
    .label barcnt = 2
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // VICIV->RASLINE0 |= 0x80
    // [8] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // force NTSC every frame (hehe)
    lda #$80
    ora VICIV+OFFSET_STRUCT_MEGA65_VICIV_RASLINE0
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_RASLINE0
    // VICII->IRQ_STATUS = IRQ_RASTER
    // [9] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // VICII->CONTROL2 = 0
    // [10] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // reset x scroll
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    // wobblepos = ++sinpos
    // [11] (volatile byte) sinpos ← ++ (volatile byte) sinpos -- vbuz1=_inc_vbuz1 
    inc.z sinpos
    // [12] (byte) irq1::wobblepos#0 ← (volatile byte) sinpos -- vbuxx=vbuz1 
    // Generate Raster Bars and more
    ldx.z sinpos
    // [13] phi from irq1 to irq1::@1 [phi:irq1->irq1::@1]
    // [13] phi (byte) irq1::wobblepos#10 = (byte) irq1::wobblepos#0 [phi:irq1->irq1::@1#0] -- register_copy 
    // [13] phi (byte) irq1::line#10 = (byte) 0 [phi:irq1->irq1::@1#1] -- vbuzz=vbuc1 
    ldz #0
    // irq1::@1
  __b1:
    // for(char line=0;line!=NUMBERL;line++)
    // [14] if((byte) irq1::line#10!=(const nomodify byte) NUMBERL) goto irq1::@2 -- vbuzz_neq_vbuc1_then_la1 
    cpz #NUMBERL
    bne __b2
    // [15] phi from irq1::@1 to irq1::@15 [phi:irq1::@1->irq1::@15]
    // [15] phi (byte) irq1::l#2 = (byte) 0 [phi:irq1::@1->irq1::@15#0] -- vbuxx=vbuc1 
    ldx #0
  // Set all raster bars to black
    // irq1::@15
  __b15:
    // for(char l=0;l!=NUMBERL;l++)
    // [16] if((byte) irq1::l#2!=(const nomodify byte) NUMBERL) goto irq1::@16 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUMBERL
    bne __b16
    // irq1::@17
    // (*songPlay)()
    // [17] call *((const void()*) songPlay) 
    // play music
    jsr songPlay
    // barsin = sinpos
    // [18] (byte) irq1::barsin#0 ← (volatile byte) sinpos -- vbuz1=vbuz2 
    // Big block of bars (16)
    lda.z sinpos
    sta.z barsin
    // [19] phi from irq1::@17 to irq1::@18 [phi:irq1::@17->irq1::@18]
    // [19] phi (byte) irq1::barsin#2 = (byte) irq1::barsin#0 [phi:irq1::@17->irq1::@18#0] -- register_copy 
    // [19] phi (byte) irq1::barcnt#2 = (byte) 0 [phi:irq1::@17->irq1::@18#1] -- vbuz1=vbuc1 
    lda #0
    sta.z barcnt
    // irq1::@18
  __b18:
    // for(char barcnt=0; barcnt<16; barcnt++)
    // [20] if((byte) irq1::barcnt#2<(byte) $10) goto irq1::@19 -- vbuz1_lt_vbuc1_then_la1 
    lda.z barcnt
    cmp #$10
    bcc __b19
    // [21] phi from irq1::@18 to irq1::@25 [phi:irq1::@18->irq1::@25]
    // [21] phi (byte) irq1::i2#2 = (byte) 0 [phi:irq1::@18->irq1::@25#0] -- vbuxx=vbuc1 
    ldx #0
  // Produce dark area behind text
    // irq1::@25
  __b25:
    // for(char i=0;i<19;i++)
    // [22] if((byte) irq1::i2#2<(byte) $13) goto irq1::@26 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$13
    bcc __b26
    // irq1::@return
    // }
    // [23] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
    // irq1::@26
  __b26:
    // rasters[scrollypos+i] /2
    // [24] (byte~) irq1::$22 ← *((const byte*) rasters+(const nomodify byte) irq1::scrollypos + (byte) irq1::i2#2) >> (byte) 1 -- vbuaa=pbuc1_derefidx_vbuxx_ror_1 
    lda rasters+scrollypos,x
    lsr
    // rasters[scrollypos+i] /2 & 7
    // [25] (byte~) irq1::$23 ← (byte~) irq1::$22 & (byte) 7 -- vbuaa=vbuaa_band_vbuc1 
    and #7
    // rasters[scrollypos+i] = rasters[scrollypos+i] /2 & 7
    // [26] *((const byte*) rasters+(const nomodify byte) irq1::scrollypos + (byte) irq1::i2#2) ← (byte~) irq1::$23 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta rasters+scrollypos,x
    // for(char i=0;i<19;i++)
    // [27] (byte) irq1::i2#1 ← ++ (byte) irq1::i2#2 -- vbuxx=_inc_vbuxx 
    inx
    // [21] phi from irq1::@26 to irq1::@25 [phi:irq1::@26->irq1::@25]
    // [21] phi (byte) irq1::i2#2 = (byte) irq1::i2#1 [phi:irq1::@26->irq1::@25#0] -- register_copy 
    jmp __b25
    // irq1::@19
  __b19:
    // idx = SINUS[barsin]
    // [28] (byte) irq1::idx#0 ← *((const byte*) SINUS + (byte) irq1::barsin#2) -- vbuyy=pbuc1_derefidx_vbuz1 
    ldx.z barsin
    ldy SINUS,x
    // barcol = barcnt*16
    // [29] (byte) irq1::barcol#0 ← (byte) irq1::barcnt#2 << (byte) 4 -- vbuzz=vbuz1_rol_4 
    lda.z barcnt
    asl
    asl
    asl
    asl
    taz
    // [30] phi from irq1::@19 to irq1::@20 [phi:irq1::@19->irq1::@20]
    // [30] phi (byte) irq1::idx#3 = (byte) irq1::idx#0 [phi:irq1::@19->irq1::@20#0] -- register_copy 
    // [30] phi (byte) irq1::barcol#3 = (byte) irq1::barcol#0 [phi:irq1::@19->irq1::@20#1] -- register_copy 
    // [30] phi (byte) irq1::i#2 = (byte) 0 [phi:irq1::@19->irq1::@20#2] -- vbuxx=vbuc1 
    ldx #0
    // irq1::@20
  __b20:
    // for(char i=0;i<16;i++)
    // [31] if((byte) irq1::i#2<(byte) $10) goto irq1::@21 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$10
    bcc __b21
    // [32] phi from irq1::@20 to irq1::@22 [phi:irq1::@20->irq1::@22]
    // [32] phi (byte) irq1::idx#4 = (byte) irq1::idx#3 [phi:irq1::@20->irq1::@22#0] -- register_copy 
    // [32] phi (byte) irq1::barcol#4 = (byte) irq1::barcol#3 [phi:irq1::@20->irq1::@22#1] -- register_copy 
    // [32] phi (byte) irq1::i1#2 = (byte) 0 [phi:irq1::@20->irq1::@22#2] -- vbuxx=vbuc1 
    ldx #0
    // irq1::@22
  __b22:
    // for(char i=0;i<15;i++)
    // [33] if((byte) irq1::i1#2<(byte) $f) goto irq1::@23 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$f
    bcc __b23
    // irq1::@24
    // barsin += 10
    // [34] (byte) irq1::barsin#1 ← (byte) irq1::barsin#2 + (byte) $a -- vbuz1=vbuz1_plus_vbuc1 
    lda #$a
    clc
    adc.z barsin
    sta.z barsin
    // for(char barcnt=0; barcnt<16; barcnt++)
    // [35] (byte) irq1::barcnt#1 ← ++ (byte) irq1::barcnt#2 -- vbuz1=_inc_vbuz1 
    inc.z barcnt
    // [19] phi from irq1::@24 to irq1::@18 [phi:irq1::@24->irq1::@18]
    // [19] phi (byte) irq1::barsin#2 = (byte) irq1::barsin#1 [phi:irq1::@24->irq1::@18#0] -- register_copy 
    // [19] phi (byte) irq1::barcnt#2 = (byte) irq1::barcnt#1 [phi:irq1::@24->irq1::@18#1] -- register_copy 
    jmp __b18
    // irq1::@23
  __b23:
    // rasters[idx++] = --barcol;
    // [36] (byte) irq1::barcol#2 ← -- (byte) irq1::barcol#4 -- vbuzz=_dec_vbuzz 
    dez
    // rasters[idx++] = --barcol
    // [37] *((const byte*) rasters + (byte) irq1::idx#4) ← (byte) irq1::barcol#2 -- pbuc1_derefidx_vbuyy=vbuzz 
    tza
    sta rasters,y
    // rasters[idx++] = --barcol;
    // [38] (byte) irq1::idx#2 ← ++ (byte) irq1::idx#4 -- vbuyy=_inc_vbuyy 
    iny
    // for(char i=0;i<15;i++)
    // [39] (byte) irq1::i1#1 ← ++ (byte) irq1::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [32] phi from irq1::@23 to irq1::@22 [phi:irq1::@23->irq1::@22]
    // [32] phi (byte) irq1::idx#4 = (byte) irq1::idx#2 [phi:irq1::@23->irq1::@22#0] -- register_copy 
    // [32] phi (byte) irq1::barcol#4 = (byte) irq1::barcol#2 [phi:irq1::@23->irq1::@22#1] -- register_copy 
    // [32] phi (byte) irq1::i1#2 = (byte) irq1::i1#1 [phi:irq1::@23->irq1::@22#2] -- register_copy 
    jmp __b22
    // irq1::@21
  __b21:
    // rasters[idx++] = barcol++
    // [40] *((const byte*) rasters + (byte) irq1::idx#3) ← (byte) irq1::barcol#3 -- pbuc1_derefidx_vbuyy=vbuzz 
    tza
    sta rasters,y
    // rasters[idx++] = barcol++;
    // [41] (byte) irq1::idx#1 ← ++ (byte) irq1::idx#3 -- vbuyy=_inc_vbuyy 
    iny
    // [42] (byte) irq1::barcol#1 ← ++ (byte) irq1::barcol#3 -- vbuzz=_inc_vbuzz 
    inz
    // for(char i=0;i<16;i++)
    // [43] (byte) irq1::i#1 ← ++ (byte) irq1::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [30] phi from irq1::@21 to irq1::@20 [phi:irq1::@21->irq1::@20]
    // [30] phi (byte) irq1::idx#3 = (byte) irq1::idx#1 [phi:irq1::@21->irq1::@20#0] -- register_copy 
    // [30] phi (byte) irq1::barcol#3 = (byte) irq1::barcol#1 [phi:irq1::@21->irq1::@20#1] -- register_copy 
    // [30] phi (byte) irq1::i#2 = (byte) irq1::i#1 [phi:irq1::@21->irq1::@20#2] -- register_copy 
    jmp __b20
    // irq1::@16
  __b16:
    // rasters[l] = 0
    // [44] *((const byte*) rasters + (byte) irq1::l#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta rasters,x
    // for(char l=0;l!=NUMBERL;l++)
    // [45] (byte) irq1::l#1 ← ++ (byte) irq1::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [15] phi from irq1::@16 to irq1::@15 [phi:irq1::@16->irq1::@15]
    // [15] phi (byte) irq1::l#2 = (byte) irq1::l#1 [phi:irq1::@16->irq1::@15#0] -- register_copy 
    jmp __b15
    // irq1::@2
  __b2:
    // col = rasters[line]
    // [46] (byte) irq1::col#0 ← *((const byte*) rasters + (byte) irq1::line#10) -- vbuaa=pbuc1_derefidx_vbuzz 
    tza
    tay
    lda rasters,y
    // VICIII->BORDER_COLOR = col
    // [47] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR) ← (byte) irq1::col#0 -- _deref_pbuc1=vbuaa 
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR
    // VICIII->BG_COLOR = col
    // [48] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR) ← (byte) irq1::col#0 -- _deref_pbuc1=vbuaa 
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR
    // if(line < scrollypos)
    // [49] if((byte) irq1::line#10<(const nomodify byte) irq1::scrollypos) goto irq1::@3 -- vbuzz_lt_vbuc1_then_la1 
    cpz #scrollypos
    bcc __b3
    // irq1::@9
    // if(line == scrollypos)
    // [50] if((byte) irq1::line#10==(const nomodify byte) irq1::scrollypos) goto irq1::@4 -- vbuzz_eq_vbuc1_then_la1 
    cpz #scrollypos
    beq __b4
    // irq1::@10
    // if(line == scrollypos+blackbar)
    // [51] if((byte) irq1::line#10==(const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar) goto irq1::@5 -- vbuzz_eq_vbuc1_then_la1 
    cpz #scrollypos+blackbar
    beq __b5
    // irq1::@11
    // if(line == scrollypos+blackbar+1)
    // [52] if((byte) irq1::line#10!=(const nomodify byte) irq1::scrollypos+(const nomodify byte) irq1::blackbar+(byte) 1) goto irq1::@6 -- vbuzz_neq_vbuc1_then_la1 
    cpz #scrollypos+blackbar+1
    bne __b6
    // irq1::@12
    // zoomval = SINUS[zoomx++]
    // [53] (byte) irq1::zoomval#0 ← *((const byte*) SINUS + (volatile byte) zoomx) -- vbuaa=pbuc1_derefidx_vbuz1 
    // if raster position > scrolly pos do zoom
    ldy.z zoomx
    lda SINUS,y
    // [54] (volatile byte) zoomx ← ++ (volatile byte) zoomx -- vbuz1=_inc_vbuz1 
    inc.z zoomx
    // VICIV->CHRXSCL = zoomval
    // [55] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) irq1::zoomval#0 -- _deref_pbuc1=vbuaa 
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL
    // zoomval+1
    // [56] (byte~) irq1::$7 ← (byte) irq1::zoomval#0 + (byte) 1 -- vbuaa=vbuaa_plus_1 
    inc
    // VICIV->TEXTXPOS_LO = zoomval+1
    // [57] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte~) irq1::$7 -- _deref_pbuc1=vbuaa 
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    // if(zoomx==0)
    // [58] if((volatile byte) zoomx!=(byte) 0) goto irq1::@6 -- vbuz1_neq_0_then_la1 
    lda.z zoomx
    cmp #0
    bne __b6
    // irq1::@13
    // if(++greetnm==GREETCOUNT)
    // [59] (volatile byte) greetnm ← ++ (volatile byte) greetnm -- vbuz1=_inc_vbuz1 
    inc.z greetnm
    // [60] if((volatile byte) greetnm!=(const nomodify byte) GREETCOUNT) goto irq1::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #GREETCOUNT
    cmp.z greetnm
    bne __b6
    // irq1::@14
    // greetnm =0
    // [61] (volatile byte) greetnm ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z greetnm
    // [62] phi from irq1::@11 irq1::@12 irq1::@13 irq1::@14 irq1::@3 irq1::@4 irq1::@5 to irq1::@6 [phi:irq1::@11/irq1::@12/irq1::@13/irq1::@14/irq1::@3/irq1::@4/irq1::@5->irq1::@6]
    // [62] phi (byte) irq1::wobblepos#7 = (byte) irq1::wobblepos#10 [phi:irq1::@11/irq1::@12/irq1::@13/irq1::@14/irq1::@3/irq1::@4/irq1::@5->irq1::@6#0] -- register_copy 
    // irq1::@6
  __b6:
    // raster = VICII->RASTER
    // [63] (byte) irq1::raster#0 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) -- vbuaa=_deref_pbuc1 
    // Wait for the next raster line
    lda VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // irq1::@7
  __b7:
    // while(raster == VICII->RASTER)
    // [64] if((byte) irq1::raster#0==*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)) goto irq1::@7 -- vbuaa_eq__deref_pbuc1_then_la1 
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    beq __b7
    // irq1::@8
    // for(char line=0;line!=NUMBERL;line++)
    // [65] (byte) irq1::line#1 ← ++ (byte) irq1::line#10 -- vbuzz=_inc_vbuzz 
    inz
    // [13] phi from irq1::@8 to irq1::@1 [phi:irq1::@8->irq1::@1]
    // [13] phi (byte) irq1::wobblepos#10 = (byte) irq1::wobblepos#7 [phi:irq1::@8->irq1::@1#0] -- register_copy 
    // [13] phi (byte) irq1::line#10 = (byte) irq1::line#1 [phi:irq1::@8->irq1::@1#1] -- register_copy 
    jmp __b1
    // irq1::@5
  __b5:
    // VICIV->TEXTXPOS_LO = 0x50
    // [66] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50 -- _deref_pbuc1=vbuc2 
    // if raster position > scrolly pos do nozoom
    // default value
    lda #$50
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    jmp __b6
    // irq1::@4
  __b4:
    // [67] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50 -- _deref_pbuc1=vbuc2 
    // if raster position = scrolly pos do scrolly
    // no wobbling from this point
    lda #$50
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    // VICII->CONTROL2 = xpos
    // [68] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (volatile byte) xpos -- _deref_pbuc1=vbuz1 
    // set softscroll
    lda.z xpos
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    jmp __b6
    // irq1::@3
  __b3:
    // 0x28 + SINUS[wobblepos++]
    // [69] (byte~) irq1::$12 ← (byte) $28 + *((const byte*) SINUS + (byte) irq1::wobblepos#10) -- vbuaa=vbuc1_plus_pbuc2_derefidx_vbuxx 
    lda #$28
    clc
    adc SINUS,x
    // VICIV->TEXTXPOS_LO = 0x28 + SINUS[wobblepos++]
    // [70] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte~) irq1::$12 -- _deref_pbuc1=vbuaa 
    // if raster position < scrolly pos do wobble Logo!
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO
    // VICIV->TEXTXPOS_LO = 0x28 + SINUS[wobblepos++];
    // [71] (byte) irq1::wobblepos#1 ← ++ (byte) irq1::wobblepos#10 -- vbuxx=_inc_vbuxx 
    inx
    // VICIV->CHRXSCL = 0x66
    // [72] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) $66 -- _deref_pbuc1=vbuc2 
    // No zooming
    lda #$66
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL
    jmp __b6
}
  // main
main: {
    // VICIII->KEY = 0x47
    // [73] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $47 -- _deref_pbuc1=vbuc2 
    // Enable MEGA65 features
    lda #$47
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_KEY
    // VICIII->KEY = 0x53
    // [74] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $53 -- _deref_pbuc1=vbuc2 
    lda #$53
    sta VICIII+OFFSET_STRUCT_MOS4569_VICIII_KEY
    // VICIV->CONTROLB |= 0x40
    // [75] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | (byte) $40 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Enable 48MHz fast mode
    lda #$40
    ora VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB
    // VICIV->CONTROLC |= 0x40
    // [76] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | (byte) $40 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    lda #$40
    ora VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC
    // memset(SCREEN, ' ', 40*25)
    // [77] call memset 
  // Clear screen 
    // [101] phi from main to memset [phi:main->memset]
    jsr memset
    // main::@6
    // asm
    // asm { lda#0  }
    // Initialize music
    lda #0
    // (*songInit)()
    // [79] call *((const void()*) songInit) 
    jsr songInit
    // [80] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [80] phi (byte) main::i1#2 = (byte) 0 [phi:main::@6->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // Put MEGA logo on screen
    // main::@1
  __b1:
    // for( char i=0; i<sizeof(MEGA_LOGO); i++)
    // [81] if((byte) main::i1#2<(byte) $bc*(const byte) SIZEOF_BYTE) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$bc*SIZEOF_BYTE
    bcc __b2
    // [82] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // [82] phi (byte) main::i#2 = (byte) 0 [phi:main::@1->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [82] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
    // [82] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // PALETTE_RED[i] = PAL_RED[i]
    // [83] *((const nomodify byte*) PALETTE_RED + (byte) main::i#2) ← *((const byte*) PAL_RED + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PAL_RED,x
    sta PALETTE_RED,x
    // PALETTE_GREEN[i] = PAL_GREEN[i]
    // [84] *((const nomodify byte*) PALETTE_GREEN + (byte) main::i#2) ← *((const byte*) PAL_GREEN + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PAL_GREEN,x
    sta PALETTE_GREEN,x
    // PALETTE_BLUE[i] = PAL_BLUE[i]
    // [85] *((const nomodify byte*) PALETTE_BLUE + (byte) main::i#2) ← *((const byte*) PAL_BLUE + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PAL_BLUE,x
    sta PALETTE_BLUE,x
    // while(++i!=0)
    // [86] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [87] if((byte) main::i#1!=(byte) 0) goto main::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // main::@4
    // asm
    // asm { sei  }
    // Set up raster interrupts C64 style
    sei
    // CIA1->INTERRUPT = CIA_INTERRUPT_CLEAR
    // [89] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // VICII->RASTER = 0x16
    // [90] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (byte) $16 -- _deref_pbuc1=vbuc2 
    // Set raster line to 0x16
    lda #$16
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // VICII->CONTROL1 &= 0x7f
    // [91] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda #$7f
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // VICII->IRQ_ENABLE = IRQ_RASTER
    // [92] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE
    // *HARDWARE_IRQ = &irq1
    // [93] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_STACK)(void()) irq1() -- _deref_qprc1=pprc2 
    // Set the IRQ routine
    lda #<irq1
    sta HARDWARE_IRQ
    lda #>irq1
    sta HARDWARE_IRQ+1
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [94] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // no kernal or BASIC rom visible
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [95] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // VICIV->SIDBDRWD_LO = 1
    // [96] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // open sideborder
    lda #1
    sta VICIV+OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO
    // asm
    // asm { cli  }
    // Enable IRQ
    cli
    // [98] phi from main::@4 main::@5 to main::@5 [phi:main::@4/main::@5->main::@5]
    // main::@5
  __b5:
    jmp __b5
    // main::@2
  __b2:
    // (SCREEN+3*40)[i] = MEGA_LOGO[i]
    // [99] *((const nomodify byte*) SCREEN+(byte)(number) 3*(number) $28 + (byte) main::i1#2) ← *((const byte*) MEGA_LOGO + (byte) main::i1#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MEGA_LOGO,x
    sta SCREEN+3*$28,x
    // for( char i=0; i<sizeof(MEGA_LOGO); i++)
    // [100] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [80] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [80] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $28*$19
    .label str = SCREEN
    .label end = str+num
    .label dst = 4
    // [102] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [102] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [103] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [104] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [105] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [106] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inw.z dst
    // [102] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [102] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // Sinus Values 0-183
SINUS:
.fill 256, 91.5 + 91.5*sin(i*2*PI/256)

  // Moving Raster Bars
  rasters: .fill $100, 0
  // A MEGA logo
  MEGA_LOGO: .byte $20, $20, $20, $20, $20, $cf, $cf, $cf, $20, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $20, $cf, $cf, $20, $cf, $20, $cf, $20, $20, $20, $cf, $cf, $20, $20, $20, $20, $cf, $cf, $20, $20, $20, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $20, $20, $cf, $20, $cf, $cf, $cf, $cf, $cf, $20, $cf, $cf, $20, $cf, $cf, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $20, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $cf, $cf, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $20, $20, $20, $20, $cf, $cf, $20, $cf, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $cf, $20, $20, $20, $cf
  PAL_RED: .byte 0, $f3, $d4, $b5, $a6, $97, $88, $79, $1a, $fa, $eb, $ec, $bd, $be, $af, $ff, $16, $c6, $a7, $88, $49, $5a, $2b, $1c, $ac, $ad, $8e, $8f, $ff, $ff, $ff, $ff, $c6, $77, $48, $29, $e9, $fa, $cb, $cc, $5d, $4e, $2f, $ff, $ff, $ff, $ff, $ff, $57, $18, $f8, $d9, $aa, $8b, $6c, $5d, $ed, $de, $cf, $ff, $ff, $ff, $ff, $ff, $26, $e6, $b7, $a8, $69, $5a, $3b, $3c, $dc, $cd, $ae, $9f, $ff, $ff, $ff, $ff, $65, $16, $17, $f7, $d8, $b9, $9a, $8b, $2c, $d, $fd, $ee, $cf, $ff, $ff, $ff, $64, $15, 6, $e6, $c7, $a8, $99, $8a, $1b, $c, $fc, $fd, $ee, $cf, $ff, $ff, $12, $d2, $d3, $b4, $95, $86, $77, $78, 9, $69, $ea, $fb, $dc, $ad, $ae, $af, $f0, $c1, $c2, $a3, $84, $85, $76, $67, 8, $f8, $e9, $da, $db, $bc, $bd, $ae, $40, $11, $12, $f2, $e3, $d4, $c5, $c6, $47, $38, $39, $2a, $1b, $c, $d, $ed, 0, 0, $f0, $d1, $c2, $b3, $a4, $95, $36, $27, $28, $29, $f9, $ea, $eb, $ec, $70, $41, $22, $23, $f3, $f4, $e5, $e6, $77, $78, $69, $7a, $3b, $3c, $3d, $3e, $a1, $82, $63, $54, $35, $26, 7, 8, $98, $99, $8a, $7b, $5c, $5d, $3e, $3f, $33, 4, $d4, $d5, $a6, $a7, $88, $89, $1a, $ab, $fb, $ec, $cd, $be, $af, $ff, $b4, $85, $56, $47, $18, 9, $f9, $ea, $7b, $7c, $5d, $5e, $2f, $ef, $ff, $ff, 6, $d6, $a7, $98, $59, $4a, $2b, $2c, $bc, $ad, $8e, $8f, $ff, $ff, $ff, $ff
  PAL_GREEN: .byte 0, $e3, $c4, $b5, $96, $87, $78, $79, $a, $fa, $eb, $dc, $bd, $ae, $af, $ff, $e2, $b3, $a4, $85, $76, $67, $48, $49, $d9, $da, $bb, $bc, $8d, $8e, $7f, $ff, $42, 3, 4, $e4, $d5, $c6, $b7, $a8, $39, $3a, $1b, $2c, $fc, $fd, $de, $df, $61, $32, $13, 4, $e4, $e5, $d6, $d7, $78, $59, $4a, $4b, $2c, $1d, $e, $fe, $e0, $b1, $a2, $93, $74, $75, $56, $57, $e7, $d8, $79, $ca, $ab, $9c, $9d, $8e, $f0, $d1, $c2, $a3, $84, $85, $76, $77, 8, 9, $f9, $fa, $db, $cc, $bd, $ae, $61, $22, $23, $14, $f4, $e5, $d6, $c7, $58, $59, $3a, $3b, $1c, $d, $fd, $fe, $92, $53, $44, $35, $16, $f6, $e7, $e8, $79, $6a, $5b, $4c, $2d, $3e, $1f, $ef, $53, $14, 5, $e5, $c6, $b7, $a8, $99, $2a, $2b, $c, $d, $dd, $ce, $cf, $ff, $f3, $b4, $95, $86, $57, $38, $29, $1a, $ba, $ab, $9c, $8d, $6e, $5f, $ff, $ff, $95, $56, $27, $18, $e8, $d9, $ca, $bb, $4c, $3d, $2e, $1f, $ef, $ff, $ff, $ff, $c5, $86, $57, $38, $19, $a, $ea, $db, $6c, $5d, $3e, $3f, $ef, $ff, $ff, $ff, $65, $26, 7, $e7, $c8, $b9, $9a, $9b, $2c, $1d, $fd, $fe, $cf, $ff, $ff, $ff, $b4, $75, $56, $37, $28, $19, $e9, $ea, $7b, $6c, $5d, $4e, $2f, $ff, $ff, $ff, $c3, $94, $75, $56, $47, $38, $19, $1a, $aa, $ab, $7c, $7d, $5e, $4f, $ff, $ff, $e2, $a3, $94, $85, $76, $67, $38, $49, $d9, $ca, $ab, $bc, $7d, $7e, $6f, $ff
  PAL_BLUE: .byte 0, $f3, $d4, $b5, $a6, $97, $88, $79, $1a, $fa, $eb, $ec, $bd, $be, $af, $ff, 0, 0, 0, 0, $c0, $b1, $a2, $a3, $34, $35, $26, $27, $f7, $f8, $f9, $ea, 0, 0, $30, $11, $22, $13, $14, 5, $b5, $96, $97, $98, $79, $6a, $5b, $4c, $81, $42, $43, $34, 5, 6, $f6, $f7, $78, $69, $5a, $5b, $4c, $3d, $1e, $f, $17, $c7, $a8, $89, $5a, $5b, $3c, $1d, $ad, $9e, $7f, $ff, $ff, $ff, $ff, $ff, $78, 9, $e9, $ca, $ab, $7c, $5d, $5e, $de, $cf, $ff, $ff, $ff, $ff, $ff, $ff, $59, $a, $ca, $bb, $8c, $6d, $3e, $2f, $bf, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $49, $f9, $da, $ab, $7c, $5d, $2e, $2f, $af, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $48, $d8, $b9, $aa, $7b, $5c, $2d, $2e, $be, $9f, $ff, $ff, $ff, $ff, $ff, $ff, 7, $97, $88, $69, $4a, $2b, $1c, $2d, $9d, $7e, $6f, $ff, $ff, $ff, $ff, $ff, $81, $62, $53, $44, 5, 6, $f6, $e7, $78, $69, $5a, $5b, $3c, $2d, $2e, $1f, 0, 0, 0, 0, $b0, $b1, $a2, $b3, $44, $35, $36, $37, 8, $f8, $a, $b, 0, 0, 0, 0, 0, $70, $61, $62, $f2, $e3, $d4, $c5, $b6, $b7, $b8, $99, 0, 0, 0, 0, 0, 0, $f0, $f1, $82, $83, $84, $85, $66, $57, $58, $59, 0, 0, 0, 0, 0, $70, $61, $62, $e2, $e3, $d4, $d5, $b6, $a7, $b8, $a9, 0, 0, 0, 0, $a0, $b1, $a2, $a3, $44, $35, $26, $37, $f7, $19, $f9, $fa
.pc = $fc0 "SONG"
// Music at an absolute address
SONG:
.import c64 "DiscoZak_2SID_patched.prg"


