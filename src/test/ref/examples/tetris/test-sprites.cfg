@begin: scope:[]  from
  [0] phi()
  to:@6
@6: scope:[]  from @begin
  [1] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0
  [2] (byte) irq_sprite_ypos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @6
  [3] phi()
  to:@9
@9: scope:[]  from toSpritePtr1
  [4] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0
  [5] (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@8
@8: scope:[]  from @9
  kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {	    			
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  [7] call main 
  to:@end
@end: scope:[]  from @8
  [8] phi()
main: scope:[main]  from @8
  [9] phi()
  [10] call init_sprites 
  to:main::@7
main::@7: scope:[main]  from main
  [11] phi()
  [12] call init_irq 
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@7
  [13] *((const byte*) PLAYFIELD_SCREEN#0) ← ++ *((const byte*) PLAYFIELD_SCREEN#0)
  to:main::@2
init_irq: scope:[init_irq]  from main::@7
  asm { sei  }
  [15] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  asm { ldaCIA1_INTERRUPT  }
  [17] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [18] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [19] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  [20] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127
  [21] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0
  [22] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [23] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) irq()
  asm { cli  }
  to:init_irq::@return
init_irq::@return: scope:[init_irq]  from init_irq
  [25] return 
  to:@return
init_sprites: scope:[init_sprites]  from main
  [26] phi()
  to:init_sprites::vicSelectGfxBank1
init_sprites::vicSelectGfxBank1: scope:[init_sprites]  from init_sprites
  [27] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  to:init_sprites::vicSelectGfxBank1_toDd001
init_sprites::vicSelectGfxBank1_toDd001: scope:[init_sprites]  from init_sprites::vicSelectGfxBank1
  [28] phi()
  to:init_sprites::vicSelectGfxBank1_@1
init_sprites::vicSelectGfxBank1_@1: scope:[init_sprites]  from init_sprites::vicSelectGfxBank1_toDd001
  [29] *((const byte*) CIA2_PORT_A#0) ← (const byte) init_sprites::vicSelectGfxBank1_toDd001_return#0
  to:init_sprites::toD0181
init_sprites::toD0181: scope:[init_sprites]  from init_sprites::vicSelectGfxBank1_@1
  [30] phi()
  to:init_sprites::@4
init_sprites::@4: scope:[init_sprites]  from init_sprites::toD0181
  [31] *((const byte*) D018#0) ← (const byte) init_sprites::toD0181_return#0
  [32] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15
  [33] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [34] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0)
  [35] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0)
  to:init_sprites::@1
init_sprites::@1: scope:[init_sprites]  from init_sprites::@1 init_sprites::@4
  [36] (byte) init_sprites::xpos#2 ← phi( init_sprites::@1/(byte) init_sprites::xpos#1 init_sprites::@4/(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 14*(byte/signed byte/word/signed word/dword/signed dword) 8 )
  [36] (byte) init_sprites::s#2 ← phi( init_sprites::@1/(byte) init_sprites::s#1 init_sprites::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [37] (byte) init_sprites::s2#0 ← (byte) init_sprites::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [38] *((const byte*) SPRITES_XPOS#0 + (byte) init_sprites::s2#0) ← (byte) init_sprites::xpos#2
  [39] *((const byte*) SPRITES_COLS#0 + (byte) init_sprites::s#2) ← (const byte) BLACK#0
  [40] (byte) init_sprites::xpos#1 ← (byte) init_sprites::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24
  [41] (byte) init_sprites::s#1 ← ++ (byte) init_sprites::s#2
  [42] if((byte) init_sprites::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto init_sprites::@1
  to:init_sprites::@return
init_sprites::@return: scope:[init_sprites]  from init_sprites::@1
  [43] return 
  to:@return
irq: scope:[irq]  from
  [44] *((const byte*) BORDERCOL#0) ← (const byte) DARK_GREY#0
  [45] *((const byte*) SPRITES_YPOS#0) ← (byte) irq_sprite_ypos#0
  [46] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq_sprite_ypos#0
  [47] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) irq_sprite_ypos#0
  [48] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) irq_sprite_ypos#0
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@1
  [49] if(*((const byte*) RASTER#0)!=(byte) irq_sprite_ypos#0) goto irq::@1
  to:irq::@5
irq::@5: scope:[irq]  from irq::@1
  [50] (byte) irq::ptr#0 ← (byte) irq_sprite_ptr#0
  [51] *((const byte*) PLAYFIELD_SPRITE_PTRS#0) ← (byte) irq::ptr#0
  [52] (byte) irq::ptr#1 ← ++ (byte) irq::ptr#0
  [53] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) irq::ptr#1
  [54] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ptr#1
  [55] (byte) irq::ptr#2 ← ++ (byte) irq::ptr#1
  [56] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) irq::ptr#2
  [57] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0
  [58] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 10) goto irq::@2
  to:irq::@6
irq::@6: scope:[irq]  from irq::@5
  [59] (byte) irq_raster_next#2 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [60] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [61] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3
  to:irq::@3
irq::@3: scope:[irq]  from irq::@6 irq::@9
  [62] (byte) irq_raster_next#12 ← phi( irq::@6/(byte) irq_raster_next#2 irq::@9/(byte) irq_raster_next#1 )
  [63] (byte) irq::raster_next#0 ← (byte) irq_raster_next#12
  [64] (byte~) irq::$3 ← (byte) irq::raster_next#0 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [65] if((byte~) irq::$3!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto irq::@4
  to:irq::@8
irq::@8: scope:[irq]  from irq::@3
  [66] (byte) irq::raster_next#1 ← (byte) irq::raster_next#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  to:irq::@4
irq::@4: scope:[irq]  from irq::@3 irq::@8
  [67] (byte) irq::raster_next#2 ← phi( irq::@3/(byte) irq::raster_next#0 irq::@8/(byte) irq::raster_next#1 )
  [68] *((const byte*) RASTER#0) ← (byte) irq::raster_next#2
  [69] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  [70] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0
  to:irq::@return
irq::@return: scope:[irq]  from irq::@4
  [71] return 
  to:@return
irq::@2: scope:[irq]  from irq::@5
  [72] (byte) irq_cnt#13 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [73] (byte) irq_raster_next#1 ← (const byte) IRQ_RASTER_FIRST#0
  [74] (byte) irq_sprite_ypos#1 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:irq::toSpritePtr2
irq::toSpritePtr2: scope:[irq]  from irq::@2
  [75] phi()
  to:irq::@9
irq::@9: scope:[irq]  from irq::toSpritePtr2
  [76] (byte) irq_sprite_ptr#1 ← (const byte) irq::toSpritePtr2_return#0
  to:irq::@3
