
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::idx#0 = 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::idx#5 = phi( main/main::idx#0, main::@3/main::idx#6 )
  main::i#2 = phi( main/main::i#0, main::@3/main::i#1 )
  main::$0 = main::i#2 > 5
  if(main::$0) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1
  main::idx#3 = phi( main::@1/main::idx#5 )
  main::i#3 = phi( main::@1/main::i#2 )
  main::screen[main::idx#3] = main::i#3
  main::idx#1 = ++ main::idx#3
  to:main::@3
main::@4: scope:[main]  from main::@1
  main::idx#4 = phi( main::@1/main::idx#5 )
  main::i#4 = phi( main::@1/main::i#2 )
  main::$1 = main::i#4 - 5
  main::screen[main::idx#4] = main::$1
  main::idx#2 = ++ main::idx#4
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  main::idx#6 = phi( main::@2/main::idx#1, main::@4/main::idx#2 )
  main::i#5 = phi( main::@2/main::i#3, main::@4/main::i#4 )
  main::i#1 = main::i#5 + rangenext(0,$a)
  main::$2 = main::i#1 != rangelast(0,$a)
  if(main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool~ main::$0
number~ main::$1
bool~ main::$2
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
byte main::i#5
byte main::idx
byte main::idx#0
byte main::idx#1
byte main::idx#2
byte main::idx#3
byte main::idx#4
byte main::idx#5
byte main::idx#6
const nomodify byte* main::screen = (byte*)$400

Adding number conversion cast (unumber) 5 in main::$0 = main::i#2 > 5
Adding number conversion cast (unumber) 5 in main::$1 = main::i#4 - 5
Adding number conversion cast (unumber) main::$1 in main::$1 = main::i#4 - (unumber)5
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 5
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 5
Finalized unsigned number type 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$1 = main::i#4 - 5
Alias main::i#2 = main::i#3 main::i#4 
Alias main::idx#3 = main::idx#5 main::idx#4 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#5 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [4] if(main::i#2>5) goto main::@2
Simple Condition main::$2 [13] if(main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::idx#0 = 0
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [11] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [13] if(main::i#1!=rangelast(0,$a)) goto main::@1 to $b
Rewriting conditional comparison [4] if(main::i#2>5) goto main::@2
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 5+1 in [1] if(main::i#2>=5+1) goto main::@2
Adding number conversion cast (unumber) 1 in [1] if(main::i#2>=(unumber)5+1) goto main::@2
Adding number conversion cast (unumber) $b in [9] if(main::i#1!=$b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 5+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Finalized unsigned number type $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::idx#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::idx#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@3 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [6] main::idx#9 = main::idx#2
Coalesced [11] main::i#6 = main::i#1
Coalesced [12] main::idx#7 = main::idx#6
Coalesced [15] main::idx#8 = main::idx#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@5
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::idx#3 = phi( main/0, main::@3/main::idx#6 )
  [1] main::i#2 = phi( main/0, main::@3/main::i#1 )
  [2] if(main::i#2>=5+1) goto main::@2
  to:main::@4
main::@4: scope:[main]  from main::@1
  [3] main::$1 = main::i#2 - 5
  [4] main::screen[main::idx#3] = main::$1
  [5] main::idx#2 = ++ main::idx#3
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [6] main::idx#6 = phi( main::@2/main::idx#1, main::@4/main::idx#2 )
  [7] main::i#1 = ++ main::i#2
  [8] if(main::i#1!=$b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [9] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [10] main::screen[main::idx#3] = main::i#2
  [11] main::idx#1 = ++ main::idx#3
  to:main::@3


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$1 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 6.875
byte main::idx
byte main::idx#1 22.0
byte main::idx#2 22.0
byte main::idx#3 11.0
byte main::idx#6 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ]
[ main::$1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ]
Allocated zp[1]:4 [ main::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 66: zp[1]:3 [ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ] 23.38: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:4 [ main::$1 ] 
Uplift Scope [] 

Uplifting [main] best 556 combination reg byte y [ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ] reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] 
Uplifting [] best 556 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests statement sequence locality of if(cond) { stmt1; } else { stmt2; }
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::idx#3 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::idx#3 = main::idx#6 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i#2>=5+1) goto main::@2 -- vbuxx_ge_vbuc1_then_la1 
    cpx #5+1
    bcs __b2
    jmp __b4
    // main::@4
  __b4:
    // [3] main::$1 = main::i#2 - 5 -- vbuaa=vbuxx_minus_vbuc1 
    txa
    sec
    sbc #5
    // [4] main::screen[main::idx#3] = main::$1 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta screen,y
    // [5] main::idx#2 = ++ main::idx#3 -- vbuyy=_inc_vbuyy 
    iny
    // [6] phi from main::@2 main::@4 to main::@3 [phi:main::@2/main::@4->main::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [6] phi main::idx#6 = main::idx#1 [phi:main::@2/main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [7] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(main::i#1!=$b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
    // main::@2
  __b2:
    // [10] main::screen[main::idx#3] = main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta screen,y
    // [11] main::idx#1 = ++ main::idx#3 -- vbuyy=_inc_vbuyy 
    iny
    jmp __b3_from___b2
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Removing instruction __b1_from___b3:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b4:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte~ main::$1 reg byte a 22.0
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 6.875
byte main::idx
byte main::idx#1 reg byte y 22.0
byte main::idx#2 reg byte y 22.0
byte main::idx#3 reg byte y 11.0
byte main::idx#6 reg byte y 11.0
const nomodify byte* main::screen = (byte*) 1024

reg byte x [ main::i#2 main::i#1 ]
reg byte y [ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 406

  // File Comments
// Tests statement sequence locality of if(cond) { stmt1; } else { stmt2; }
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::idx#3 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::idx#3 = main::idx#6 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // if(i>5)
    // [2] if(main::i#2>=5+1) goto main::@2 -- vbuxx_ge_vbuc1_then_la1 
    cpx #5+1
    bcs __b2
    // main::@4
    // i-5
    // [3] main::$1 = main::i#2 - 5 -- vbuaa=vbuxx_minus_vbuc1 
    txa
    sec
    sbc #5
    // screen[idx++] = i-5
    // [4] main::screen[main::idx#3] = main::$1 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta screen,y
    // screen[idx++] = i-5;
    // [5] main::idx#2 = ++ main::idx#3 -- vbuyy=_inc_vbuyy 
    iny
    // [6] phi from main::@2 main::@4 to main::@3 [phi:main::@2/main::@4->main::@3]
    // [6] phi main::idx#6 = main::idx#1 [phi:main::@2/main::@4->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // for(byte i: 0..10)
    // [7] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(main::i#1!=$b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b1
    // main::@return
    // }
    // [9] return 
    rts
    // main::@2
  __b2:
    // screen[idx++] = i
    // [10] main::screen[main::idx#3] = main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta screen,y
    // screen[idx++] = i;
    // [11] main::idx#1 = ++ main::idx#3 -- vbuyy=_inc_vbuyy 
    iny
    jmp __b3
}
  // File Data

