Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (bool~) main::$0 ← (byte) i < (number) 7
  if((bool~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((const nomodify byte*) SCREEN + (byte) i) ← (byte) i
  (byte) i ← ++ (byte) i
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte) i ← (byte) 3
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(byte) i loadstore !mem[-1]:8192
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@2
(label) main::@return

Adding number conversion cast (unumber) 7 in (bool~) main::$0 ← (byte) i < (number) 7
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 7
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 7
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$0 [1] if((byte) i<(byte) 7) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of _start::@2
Adding NOP phi() at start of main
CALL GRAPH
Calls in [_start] to main:3 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) _start::@2
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (byte) i ← (byte) 3
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [2] phi()
  [3] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [4] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [5] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [6] if((byte) i<(byte) 7) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [8] *((const nomodify byte*) SCREEN + (byte) i) ← (byte) i
  [9] (byte) i ← ++ (byte) i
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) _start()
(byte) i loadstore !mem[-1]:8192 84.49999999999999
(void()) main()

Initial phi equivalence classes
Added variable i to live range equivalence class [ i ]
Complete equivalence classes
[ i ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test that address vars are turned into load/store and located at hardcoded addresses
// Hard-coded mainmem-page address - global variable
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label i = $2000
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (byte) i ← (byte) 3 -- vbum1=vbuc1 
    lda #3
    sta i
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    // [5] phi from _start::@1 to main [phi:_start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) i<(byte) 7) goto main::@2 -- vbum1_lt_vbuc1_then_la1 
    lda i
    cmp #7
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
    // main::@2
  __b2:
    // [8] *((const nomodify byte*) SCREEN + (byte) i) ← (byte) i -- pbuc1_derefidx_vbum1=vbum1 
    ldy i
    tya
    sta SCREEN,y
    // [9] (byte) i ← ++ (byte) i -- vbum1=_inc_vbum1 
    inc i
    jmp __b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) i ← (byte) 3 [ i ] (  [ i ] { }  ) always clobbers reg byte a 
Statement [6] if((byte) i<(byte) 7) goto main::@2 [ i ] ( main:3 [ i ] { }  ) always clobbers reg byte a 
Statement [8] *((const nomodify byte*) SCREEN + (byte) i) ← (byte) i [ i ] ( main:3 [ i ] { }  ) always clobbers reg byte a reg byte y 
Potential registers mem[1]:8192 [ i ] : mem[1]:8192 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 84.5: mem[1]:8192 [ i ] 
Uplift Scope [main] 
Uplift Scope [_start] 

Uplifting [] best 405 combination mem[1]:8192 [ i ] 
Uplifting [main] best 405 combination 
Uplifting [_start] best 405 combination 
Attempting to uplift remaining variables inmem[1]:8192 [ i ]
Uplifting [] best 405 combination mem[1]:8192 [ i ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test that address vars are turned into load/store and located at hardcoded addresses
// Hard-coded mainmem-page address - global variable
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label i = $2000
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (byte) i ← (byte) 3 -- vbum1=vbuc1 
    lda #3
    sta i
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    // [5] phi from _start::@1 to main [phi:_start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) i<(byte) 7) goto main::@2 -- vbum1_lt_vbuc1_then_la1 
    lda i
    cmp #7
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
    // main::@2
  __b2:
    // [8] *((const nomodify byte*) SCREEN + (byte) i) ← (byte) i -- pbuc1_derefidx_vbum1=vbum1 
    ldy i
    tya
    sta SCREEN,y
    // [9] (byte) i ← ++ (byte) i -- vbum1=_inc_vbum1 
    inc i
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp _init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from__init1:
Removing instruction main_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction _init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) _start()
(label) _start::@1
(label) _start::@return
(label) _start::_init1
(byte) i loadstore !mem[-1]:8192 mem[1]:8192 84.49999999999999
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return

mem[1]:8192 [ i ]


FINAL ASSEMBLER
Score: 309

  // File Comments
// Test that address vars are turned into load/store and located at hardcoded addresses
// Hard-coded mainmem-page address - global variable
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label i = $2000
  // _start
_start: {
    // _start::_init1
    // i = 3
    // [1] (byte) i ← (byte) 3 -- vbum1=vbuc1 
    lda #3
    sta i
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
    // _start::@1
    // [3] call main 
    // [5] phi from _start::@1 to main [phi:_start::@1->main]
    jsr main
    // _start::@return
    // [4] return 
    rts
}
  // main
main: {
    // main::@1
  __b1:
    // while(i<7)
    // [6] if((byte) i<(byte) 7) goto main::@2 -- vbum1_lt_vbuc1_then_la1 
    lda i
    cmp #7
    bcc __b2
    // main::@return
    // }
    // [7] return 
    rts
    // main::@2
  __b2:
    // SCREEN[i++] = i
    // [8] *((const nomodify byte*) SCREEN + (byte) i) ← (byte) i -- pbuc1_derefidx_vbum1=vbum1 
    ldy i
    tya
    sta SCREEN,y
    // SCREEN[i++] = i;
    // [9] (byte) i ← ++ (byte) i -- vbum1=_inc_vbum1 
    inc i
    jmp __b1
}
  // File Data

