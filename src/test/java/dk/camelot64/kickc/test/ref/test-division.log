PARSING src/test/java/dk/camelot64/kickc/test/kc/test-division.kc
// Test the binary division library
import "print.kc"
import "division.kc"

void main() {
    print_cls();
    test_8s();
    test_8u();
    test_16u();
}

void test_16u() {
    word[] dividends = { $ffff, $ffff, $ffff, $ffff, $ffff, $ffff};
    word[] divisors = { 5, 7, 11, 13, 17, 19 };
    for( byte i=0;i!=12;i=i+2) {
        word dividend = dividends[i];
        word divisor = divisors[i];
        word res = div16u(dividend, divisor);
        print_word(dividend);
        print_str(" / @");
        print_word(divisor);
        print_str(" = @");
        print_word(res);
        print_str(" @");
        print_word(rem16u);
        print_ln();
    }
}

void test_8u() {
    byte[] dividends = { 255, 255, 255, 255, 255, 255};
    byte[] divisors = { 5, 7, 11, 13, 17, 19 };
    byte rem = 0;
    for( byte i: 0..5 ) {
        byte dividend = dividends[i];
        byte divisor = divisors[i];
        byte res = div8u(dividend, divisor);
        print_byte(dividend);
        print_str(" / @");
        print_byte(divisor);
        print_str(" = @");
        print_byte(res);
        print_str(" @");
        print_byte(rem8u);
        print_ln();
    }
}

void test_8s() {
    signed byte[] dividends = { 127, -127, -127, 127, 127, 127};
    signed byte[] divisors = { 5, 7, -11, -13, 17, 19 };
    for( byte i: 0..5 ) {
        signed byte dividend = dividends[i];
        signed byte divisor = divisors[i];
        signed byte res = div8s(dividend, divisor);
        print_sbyte(dividend);
        print_str(" / @");
        print_sbyte(divisor);
        print_str(" = @");
        print_sbyte(res);
        print_str(" @");
        print_sbyte(rem8s);
        print_ln();
    }
}

Importing print.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/print.kc

const byte* SCREEN = $0400;

byte* line_cursor = SCREEN;
byte* char_cursor = line_cursor;

// Print a zero-terminated string
void print_str(byte* str) {
    while(*str!='@') {
        *(char_cursor++) = *(str++);
    }
}

// Print a newline
void print_ln() {
    do {
        line_cursor = line_cursor + $28;
    } while (line_cursor<char_cursor);
    char_cursor = line_cursor;
}

// Print a signed word as HEX
void print_sword(signed word w) {
    if(w<0) {
        print_char('-');
        w = -w;
    }
    print_word((word)w);
}

// Print a signed byte as HEX
void print_sbyte(signed byte b) {
    if(b<0) {
        print_char('-');
        b = -b;
    }
    print_byte((byte)b);
}

// Print a word as HEX
void print_word(word w) {
    print_byte(>w);
    print_byte(<w);
}

// Print a byte as HEX
void print_byte(byte b) {
    // Table of hexadecimal digits
    const byte[] hextab = "0123456789abcdef";
    print_char(hextab[b>>4]);
    print_char(hextab[b&$f]);
}

// Print a single char
void print_char(byte ch) {
    *(char_cursor++) = ch;
}

// Clear the screen
void print_cls() {
    for(byte* sc=SCREEN; sc!=SCREEN+1000; sc++) {
        *sc = ' ';
    }
    line_cursor = SCREEN;
    char_cursor = line_cursor;
}



Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_str::str ← ++ (byte*) print_str::str
Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
Importing division.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/division.kc
// Binary division implementation

// Remainder after signed 8 bit division
byte rem8u =0;

// Performs division on two 8 bit unsigned bytes
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8u
// Implemented using simple binary division
byte div8u(byte dividend, byte divisor) {
    byte rem = 0;
    byte quotient = 0;
    for( byte i : 0..7) {
        rem = rem << 1;
        if( (dividend & $80) != 0 ) {
            rem++;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    rem8u = rem;
    return quotient;
}

// Remainder after signed 8 bit division
signed byte rem8s = 0;

// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
signed byte div8s(signed byte dividend, signed byte divisor) {
    byte neg = 0;
    byte dividendb = 0;
    if(dividend<0) {
      dividendb = (byte)-dividend;
      neg = 1;
    } else {
      dividendb = (byte)dividend;
    }
    byte divisorb = 0;
    if(divisor<0) {
        divisorb = (byte)-divisor;
        neg = neg ^ 1;
    } else {
        divisorb = (byte)divisor;
    }
    byte resultb = div8u(dividendb, divisorb);
    if(neg==0) {
        rem8s = (signed byte)rem8u;
        return (signed byte)resultb;
    } else {
        rem8s = -(signed byte)rem8u;
        return -(signed byte)resultb;
    }
}

// Remainder after unsigned 16-bit division
word rem16u = 0;

// Performs division on two 16 bit unsigned bytes
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
word div16u(word dividend, word divisor) {
    word rem = 0;
    word quotient = 0;
    for( byte i : 0..15) {
        rem = rem << 1;
        if( (>dividend & $80) != 0 ) {
            rem++;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    rem16u = rem;
    return quotient;
}
Adding pre/post-modifier (byte) div8u::rem ← ++ (byte) div8u::rem
Adding pre/post-modifier (byte) div8u::quotient ← ++ (byte) div8u::quotient
Adding pre/post-modifier (word) div16u::rem ← ++ (word) div16u::rem
Adding pre/post-modifier (word) div16u::quotient ← ++ (word) div16u::quotient

STATEMENTS
  (byte*) SCREEN ← (word/signed word/dword/signed dword) 1024
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
proc (void()) print_str((byte*) print_str::str)
print_str::@1:
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  goto print_str::@3
print_str::@2:
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  goto print_str::@1
print_str::@3:
print_str::@return:
  return 
endproc // print_str()
proc (void()) print_ln()
print_ln::@1:
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
print_ln::@return:
  return 
endproc // print_ln()
proc (void()) print_sword((signed word) print_sword::w)
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
print_sword::@1:
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
print_sword::@return:
  return 
endproc // print_sword()
proc (void()) print_sbyte((signed byte) print_sbyte::b)
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
print_sbyte::@1:
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
print_sbyte::@return:
  return 
endproc // print_sbyte()
proc (void()) print_word((word) print_word::w)
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
print_word::@return:
  return 
endproc // print_word()
proc (void()) print_byte((byte) print_byte::b)
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
print_byte::@return:
  return 
endproc // print_byte()
proc (void()) print_char((byte) print_char::ch)
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
print_char::@return:
  return 
endproc // print_char()
proc (void()) print_cls()
  (byte*) print_cls::sc ← (byte*) SCREEN
print_cls::@1:
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (byte*~) print_cls::$0 ← (byte*) SCREEN + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
print_cls::@return:
  return 
endproc // print_cls()
  (byte) rem8u ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
  (byte) div8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
div8u::@1:
  (byte~) div8u::$0 ← (byte) div8u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::rem ← (byte~) div8u::$0
  (byte~) div8u::$1 ← (byte) div8u::dividend & (byte/word/signed word/dword/signed dword) 128
  (boolean~) div8u::$2 ← (byte~) div8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8u::$3 ← ! (boolean~) div8u::$2
  if((boolean~) div8u::$3) goto div8u::@2
  (byte) div8u::rem ← ++ (byte) div8u::rem
div8u::@2:
  (byte~) div8u::$4 ← (byte) div8u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::dividend ← (byte~) div8u::$4
  (byte~) div8u::$5 ← (byte) div8u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::quotient ← (byte~) div8u::$5
  (boolean~) div8u::$6 ← (byte) div8u::rem >= (byte) div8u::divisor
  (boolean~) div8u::$7 ← ! (boolean~) div8u::$6
  if((boolean~) div8u::$7) goto div8u::@3
  (byte) div8u::quotient ← ++ (byte) div8u::quotient
  (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8 ← (byte) div8u::rem - (byte) div8u::divisor
  (byte) div8u::rem ← (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8
div8u::@3:
  (byte) div8u::i ← ++ (byte) div8u::i
  (boolean~) div8u::$9 ← (byte) div8u::i != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) div8u::$9) goto div8u::@1
  (byte) rem8u ← (byte) div8u::rem
  (byte) div8u::return ← (byte) div8u::quotient
  goto div8u::@return
div8u::@return:
  (byte) div8u::return ← (byte) div8u::return
  return (byte) div8u::return
endproc // div8u()
  (signed byte) rem8s ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8s::dividendb ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$0 ← (signed byte) div8s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$1 ← ! (boolean~) div8s::$0
  if((boolean~) div8s::$1) goto div8s::@1
  (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend
  (byte~) div8s::$3 ← ((byte)) (signed byte~) div8s::$2
  (byte) div8s::dividendb ← (byte~) div8s::$3
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  goto div8s::@2
div8s::@1:
  (byte~) div8s::$4 ← ((byte)) (signed byte) div8s::dividend
  (byte) div8s::dividendb ← (byte~) div8s::$4
div8s::@2:
  (byte) div8s::divisorb ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$5 ← (signed byte) div8s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$6 ← ! (boolean~) div8s::$5
  if((boolean~) div8s::$6) goto div8s::@3
  (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor
  (byte~) div8s::$8 ← ((byte)) (signed byte~) div8s::$7
  (byte) div8s::divisorb ← (byte~) div8s::$8
  (byte~) div8s::$9 ← (byte) div8s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8s::neg ← (byte~) div8s::$9
  goto div8s::@4
div8s::@3:
  (byte~) div8s::$10 ← ((byte)) (signed byte) div8s::divisor
  (byte) div8s::divisorb ← (byte~) div8s::$10
div8s::@4:
  (byte~) div8s::$11 ← call div8u (byte) div8s::dividendb (byte) div8s::divisorb 
  (byte) div8s::resultb ← (byte~) div8s::$11
  (boolean~) div8s::$12 ← (byte) div8s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$13 ← ! (boolean~) div8s::$12
  if((boolean~) div8s::$13) goto div8s::@5
  (signed byte~) div8s::$14 ← ((signed byte)) (byte) rem8u
  (signed byte) rem8s ← (signed byte~) div8s::$14
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) div8s::resultb
  (signed byte) div8s::return ← (signed byte~) div8s::$15
  goto div8s::@return
  goto div8s::@6
div8s::@5:
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) rem8u
  (signed byte~) div8s::$17 ← - (signed byte~) div8s::$16
  (signed byte) rem8s ← (signed byte~) div8s::$17
  (signed byte~) div8s::$18 ← ((signed byte)) (byte) div8s::resultb
  (signed byte~) div8s::$19 ← - (signed byte~) div8s::$18
  (signed byte) div8s::return ← (signed byte~) div8s::$19
  goto div8s::@return
div8s::@6:
div8s::@return:
  (signed byte) div8s::return ← (signed byte) div8s::return
  return (signed byte) div8s::return
endproc // div8s()
  (word) rem16u ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (word()) div16u((word) div16u::dividend , (word) div16u::divisor)
  (word) div16u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) div16u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
div16u::@1:
  (word~) div16u::$0 ← (word) div16u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) div16u::rem ← (word~) div16u::$0
  (byte~) div16u::$1 ← > (word) div16u::dividend
  (byte~) div16u::$2 ← (byte~) div16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) div16u::$3 ← (byte~) div16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16u::$4 ← ! (boolean~) div16u::$3
  if((boolean~) div16u::$4) goto div16u::@2
  (word) div16u::rem ← ++ (word) div16u::rem
div16u::@2:
  (word~) div16u::$5 ← (word) div16u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) div16u::dividend ← (word~) div16u::$5
  (word~) div16u::$6 ← (word) div16u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) div16u::quotient ← (word~) div16u::$6
  (boolean~) div16u::$7 ← (word) div16u::rem >= (word) div16u::divisor
  (boolean~) div16u::$8 ← ! (boolean~) div16u::$7
  if((boolean~) div16u::$8) goto div16u::@3
  (word) div16u::quotient ← ++ (word) div16u::quotient
  (word~) div16u::$9 ← (word) div16u::rem - (word) div16u::divisor
  (word) div16u::rem ← (word~) div16u::$9
div16u::@3:
  (byte) div16u::i ← ++ (byte) div16u::i
  (boolean~) div16u::$10 ← (byte) div16u::i != (byte/signed byte/word/signed word/dword/signed dword) 16
  if((boolean~) div16u::$10) goto div16u::@1
  (word) rem16u ← (word) div16u::rem
  (word) div16u::return ← (word) div16u::quotient
  goto div16u::@return
div16u::@return:
  (word) div16u::return ← (word) div16u::return
  return (word) div16u::return
endproc // div16u()
proc (void()) main()
  (void~) main::$0 ← call print_cls 
  (void~) main::$1 ← call test_8s 
  (void~) main::$2 ← call test_8u 
  (void~) main::$3 ← call test_16u 
main::@return:
  return 
endproc // main()
proc (void()) test_16u()
  (word[]) test_16u::dividends ← { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
  (word[]) test_16u::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
test_16u::@1:
  (word) test_16u::dividend ← *((word[]) test_16u::dividends + (byte) test_16u::i)
  (word) test_16u::divisor ← *((word[]) test_16u::divisors + (byte) test_16u::i)
  (word~) test_16u::$0 ← call div16u (word) test_16u::dividend (word) test_16u::divisor 
  (word) test_16u::res ← (word~) test_16u::$0
  (void~) test_16u::$1 ← call print_word (word) test_16u::dividend 
  (void~) test_16u::$2 ← call print_str (string) " / @" 
  (void~) test_16u::$3 ← call print_word (word) test_16u::divisor 
  (void~) test_16u::$4 ← call print_str (string) " = @" 
  (void~) test_16u::$5 ← call print_word (word) test_16u::res 
  (void~) test_16u::$6 ← call print_str (string) " @" 
  (void~) test_16u::$7 ← call print_word (word) rem16u 
  (void~) test_16u::$8 ← call print_ln 
  (byte/word~) test_16u::$9 ← (byte) test_16u::i + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16u::i ← (byte/word~) test_16u::$9
  (boolean~) test_16u::$10 ← (byte) test_16u::i != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16u::$10) goto test_16u::@1
test_16u::@return:
  return 
endproc // test_16u()
proc (void()) test_8u()
  (byte[]) test_8u::dividends ← { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
  (byte[]) test_8u::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) test_8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
test_8u::@1:
  (byte) test_8u::dividend ← *((byte[]) test_8u::dividends + (byte) test_8u::i)
  (byte) test_8u::divisor ← *((byte[]) test_8u::divisors + (byte) test_8u::i)
  (byte~) test_8u::$0 ← call div8u (byte) test_8u::dividend (byte) test_8u::divisor 
  (byte) test_8u::res ← (byte~) test_8u::$0
  (void~) test_8u::$1 ← call print_byte (byte) test_8u::dividend 
  (void~) test_8u::$2 ← call print_str (string) " / @" 
  (void~) test_8u::$3 ← call print_byte (byte) test_8u::divisor 
  (void~) test_8u::$4 ← call print_str (string) " = @" 
  (void~) test_8u::$5 ← call print_byte (byte) test_8u::res 
  (void~) test_8u::$6 ← call print_str (string) " @" 
  (void~) test_8u::$7 ← call print_byte (byte) rem8u 
  (void~) test_8u::$8 ← call print_ln 
  (byte) test_8u::i ← ++ (byte) test_8u::i
  (boolean~) test_8u::$9 ← (byte) test_8u::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8u::$9) goto test_8u::@1
test_8u::@return:
  return 
endproc // test_8u()
proc (void()) test_8s()
  (signed byte/signed word/signed dword~) test_8s::$0 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte/signed word/signed dword~) test_8s::$1 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte[]) test_8s::dividends ← { (byte/signed byte/word/signed word/dword/signed dword) 127, (signed byte/signed word/signed dword~) test_8s::$0, (signed byte/signed word/signed dword~) test_8s::$1, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (signed byte/signed word/signed dword~) test_8s::$2 ← - (byte/signed byte/word/signed word/dword/signed dword) 11
  (signed byte/signed word/signed dword~) test_8s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte[]) test_8s::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (signed byte/signed word/signed dword~) test_8s::$2, (signed byte/signed word/signed dword~) test_8s::$3, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8s::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
test_8s::@1:
  (signed byte) test_8s::dividend ← *((signed byte[]) test_8s::dividends + (byte) test_8s::i)
  (signed byte) test_8s::divisor ← *((signed byte[]) test_8s::divisors + (byte) test_8s::i)
  (signed byte~) test_8s::$4 ← call div8s (signed byte) test_8s::dividend (signed byte) test_8s::divisor 
  (signed byte) test_8s::res ← (signed byte~) test_8s::$4
  (void~) test_8s::$5 ← call print_sbyte (signed byte) test_8s::dividend 
  (void~) test_8s::$6 ← call print_str (string) " / @" 
  (void~) test_8s::$7 ← call print_sbyte (signed byte) test_8s::divisor 
  (void~) test_8s::$8 ← call print_str (string) " = @" 
  (void~) test_8s::$9 ← call print_sbyte (signed byte) test_8s::res 
  (void~) test_8s::$10 ← call print_str (string) " @" 
  (void~) test_8s::$11 ← call print_sbyte (signed byte) rem8s 
  (void~) test_8s::$12 ← call print_ln 
  (byte) test_8s::i ← ++ (byte) test_8s::i
  (boolean~) test_8s::$13 ← (byte) test_8s::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8s::$13) goto test_8s::@1
test_8s::@return:
  return 
endproc // test_8s()
  call main 

SYMBOLS
(byte*) SCREEN
(byte*) char_cursor
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(byte~) div16u::$1
(boolean~) div16u::$10
(byte~) div16u::$2
(boolean~) div16u::$3
(boolean~) div16u::$4
(word~) div16u::$5
(word~) div16u::$6
(boolean~) div16u::$7
(boolean~) div16u::$8
(word~) div16u::$9
(label) div16u::@1
(label) div16u::@2
(label) div16u::@3
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(byte) div16u::i
(word) div16u::quotient
(word) div16u::rem
(word) div16u::return
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(boolean~) div8s::$0
(boolean~) div8s::$1
(byte~) div8s::$10
(byte~) div8s::$11
(boolean~) div8s::$12
(boolean~) div8s::$13
(signed byte~) div8s::$14
(signed byte~) div8s::$15
(signed byte~) div8s::$16
(signed byte~) div8s::$17
(signed byte~) div8s::$18
(signed byte~) div8s::$19
(signed byte~) div8s::$2
(byte~) div8s::$3
(byte~) div8s::$4
(boolean~) div8s::$5
(boolean~) div8s::$6
(signed byte~) div8s::$7
(byte~) div8s::$8
(byte~) div8s::$9
(label) div8s::@1
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@6
(label) div8s::@return
(signed byte) div8s::dividend
(byte) div8s::dividendb
(signed byte) div8s::divisor
(byte) div8s::divisorb
(byte) div8s::neg
(byte) div8s::resultb
(signed byte) div8s::return
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$0
(byte~) div8u::$1
(boolean~) div8u::$2
(boolean~) div8u::$3
(byte~) div8u::$4
(byte~) div8u::$5
(boolean~) div8u::$6
(boolean~) div8u::$7
(byte/signed byte/word/signed word/dword/signed dword~) div8u::$8
(boolean~) div8u::$9
(label) div8u::@1
(label) div8u::@2
(label) div8u::@3
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::divisor
(byte) div8u::i
(byte) div8u::quotient
(byte) div8u::rem
(byte) div8u::return
(byte*) line_cursor
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$2
(void~) main::$3
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(void~) print_byte::$1
(byte~) print_byte::$2
(void~) print_byte::$3
(label) print_byte::@return
(byte) print_byte::b
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(void~) print_sbyte::$2
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(void~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(void()) print_sword((signed word) print_sword::w)
(boolean~) print_sword::$0
(boolean~) print_sword::$1
(void~) print_sword::$2
(signed word~) print_sword::$3
(word~) print_sword::$4
(void~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@return
(signed word) print_sword::w
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(void~) print_word::$1
(byte~) print_word::$2
(void~) print_word::$3
(label) print_word::@return
(word) print_word::w
(word) rem16u
(signed byte) rem8s
(byte) rem8u
(void()) test_16u()
(word~) test_16u::$0
(void~) test_16u::$1
(boolean~) test_16u::$10
(void~) test_16u::$2
(void~) test_16u::$3
(void~) test_16u::$4
(void~) test_16u::$5
(void~) test_16u::$6
(void~) test_16u::$7
(void~) test_16u::$8
(byte/word~) test_16u::$9
(label) test_16u::@1
(label) test_16u::@return
(word) test_16u::dividend
(word[]) test_16u::dividends
(word) test_16u::divisor
(word[]) test_16u::divisors
(byte) test_16u::i
(word) test_16u::res
(void()) test_8s()
(signed byte/signed word/signed dword~) test_8s::$0
(signed byte/signed word/signed dword~) test_8s::$1
(void~) test_8s::$10
(void~) test_8s::$11
(void~) test_8s::$12
(boolean~) test_8s::$13
(signed byte/signed word/signed dword~) test_8s::$2
(signed byte/signed word/signed dword~) test_8s::$3
(signed byte~) test_8s::$4
(void~) test_8s::$5
(void~) test_8s::$6
(void~) test_8s::$7
(void~) test_8s::$8
(void~) test_8s::$9
(label) test_8s::@1
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte[]) test_8s::dividends
(signed byte) test_8s::divisor
(signed byte[]) test_8s::divisors
(byte) test_8s::i
(signed byte) test_8s::res
(void()) test_8u()
(byte~) test_8u::$0
(void~) test_8u::$1
(void~) test_8u::$2
(void~) test_8u::$3
(void~) test_8u::$4
(void~) test_8u::$5
(void~) test_8u::$6
(void~) test_8u::$7
(void~) test_8u::$8
(boolean~) test_8u::$9
(label) test_8u::@1
(label) test_8u::@return
(byte) test_8u::dividend
(byte[]) test_8u::dividends
(byte) test_8u::divisor
(byte[]) test_8u::divisors
(byte) test_8u::i
(byte) test_8u::rem
(byte) test_8u::res

Promoting word/signed word/dword/signed dword to byte* in SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
  to:@1
print_str: scope:[print_str]  from
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@4
print_str::@2: scope:[print_str]  from print_str::@1 print_str::@5
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  to:print_str::@1
print_str::@4: scope:[print_str]  from print_str::@1
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@4 print_str::@6
  to:print_str::@return
print_str::@5: scope:[print_str]  from
  to:print_str::@2
print_str::@6: scope:[print_str]  from
  to:print_str::@3
print_str::@return: scope:[print_str]  from print_str::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
print_ln: scope:[print_ln]  from
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
print_sword: scope:[print_sword]  from
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@2
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@1
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
print_sbyte: scope:[print_sbyte]  from
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@2
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
print_word: scope:[print_word]  from
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
print_byte: scope:[print_byte]  from
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte
  return 
  to:@return
@6: scope:[]  from @5
  to:@7
print_char: scope:[print_char]  from
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  return 
  to:@return
@7: scope:[]  from @6
  to:@8
print_cls: scope:[print_cls]  from
  (byte*) print_cls::sc ← (byte*) SCREEN
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (byte*~) print_cls::$0 ← (byte*) SCREEN + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  return 
  to:@return
@8: scope:[]  from @7
  (byte) rem8u ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@9
div8u: scope:[div8u]  from
  (byte) div8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u div8u::@3
  (byte~) div8u::$0 ← (byte) div8u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::rem ← (byte~) div8u::$0
  (byte~) div8u::$1 ← (byte) div8u::dividend & (byte/word/signed word/dword/signed dword) 128
  (boolean~) div8u::$2 ← (byte~) div8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8u::$3 ← ! (boolean~) div8u::$2
  if((boolean~) div8u::$3) goto div8u::@2
  to:div8u::@4
div8u::@2: scope:[div8u]  from div8u::@1 div8u::@4
  (byte~) div8u::$4 ← (byte) div8u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::dividend ← (byte~) div8u::$4
  (byte~) div8u::$5 ← (byte) div8u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::quotient ← (byte~) div8u::$5
  (boolean~) div8u::$6 ← (byte) div8u::rem >= (byte) div8u::divisor
  (boolean~) div8u::$7 ← ! (boolean~) div8u::$6
  if((boolean~) div8u::$7) goto div8u::@3
  to:div8u::@5
div8u::@4: scope:[div8u]  from div8u::@1
  (byte) div8u::rem ← ++ (byte) div8u::rem
  to:div8u::@2
div8u::@3: scope:[div8u]  from div8u::@2 div8u::@5
  (byte) div8u::i ← ++ (byte) div8u::i
  (boolean~) div8u::$9 ← (byte) div8u::i != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) div8u::$9) goto div8u::@1
  to:div8u::@6
div8u::@5: scope:[div8u]  from div8u::@2
  (byte) div8u::quotient ← ++ (byte) div8u::quotient
  (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8 ← (byte) div8u::rem - (byte) div8u::divisor
  (byte) div8u::rem ← (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8
  to:div8u::@3
div8u::@6: scope:[div8u]  from div8u::@3
  (byte) rem8u ← (byte) div8u::rem
  (byte) div8u::return ← (byte) div8u::quotient
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@6 div8u::@7
  (byte) div8u::return ← (byte) div8u::return
  return (byte) div8u::return
  to:@return
div8u::@7: scope:[div8u]  from
  to:div8u::@return
@9: scope:[]  from @8
  (signed byte) rem8s ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@10
div8s: scope:[div8s]  from
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8s::dividendb ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$0 ← (signed byte) div8s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$1 ← ! (boolean~) div8s::$0
  if((boolean~) div8s::$1) goto div8s::@1
  to:div8s::@7
div8s::@1: scope:[div8s]  from div8s div8s::@8
  (byte~) div8s::$4 ← ((byte)) (signed byte) div8s::dividend
  (byte) div8s::dividendb ← (byte~) div8s::$4
  to:div8s::@2
div8s::@7: scope:[div8s]  from div8s
  (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend
  (byte~) div8s::$3 ← ((byte)) (signed byte~) div8s::$2
  (byte) div8s::dividendb ← (byte~) div8s::$3
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@7
  (byte) div8s::divisorb ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$5 ← (signed byte) div8s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$6 ← ! (boolean~) div8s::$5
  if((boolean~) div8s::$6) goto div8s::@3
  to:div8s::@9
div8s::@8: scope:[div8s]  from
  to:div8s::@1
div8s::@3: scope:[div8s]  from div8s::@10 div8s::@2
  (byte~) div8s::$10 ← ((byte)) (signed byte) div8s::divisor
  (byte) div8s::divisorb ← (byte~) div8s::$10
  to:div8s::@4
div8s::@9: scope:[div8s]  from div8s::@2
  (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor
  (byte~) div8s::$8 ← ((byte)) (signed byte~) div8s::$7
  (byte) div8s::divisorb ← (byte~) div8s::$8
  (byte~) div8s::$9 ← (byte) div8s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8s::neg ← (byte~) div8s::$9
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@9
  (byte~) div8s::$11 ← call div8u (byte) div8s::dividendb (byte) div8s::divisorb 
  (byte) div8s::resultb ← (byte~) div8s::$11
  (boolean~) div8s::$12 ← (byte) div8s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$13 ← ! (boolean~) div8s::$12
  if((boolean~) div8s::$13) goto div8s::@5
  to:div8s::@11
div8s::@10: scope:[div8s]  from
  to:div8s::@3
div8s::@5: scope:[div8s]  from div8s::@13 div8s::@4
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) rem8u
  (signed byte~) div8s::$17 ← - (signed byte~) div8s::$16
  (signed byte) rem8s ← (signed byte~) div8s::$17
  (signed byte~) div8s::$18 ← ((signed byte)) (byte) div8s::resultb
  (signed byte~) div8s::$19 ← - (signed byte~) div8s::$18
  (signed byte) div8s::return ← (signed byte~) div8s::$19
  to:div8s::@return
div8s::@11: scope:[div8s]  from div8s::@4
  (signed byte~) div8s::$14 ← ((signed byte)) (byte) rem8u
  (signed byte) rem8s ← (signed byte~) div8s::$14
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) div8s::resultb
  (signed byte) div8s::return ← (signed byte~) div8s::$15
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@11 div8s::@5 div8s::@6
  (signed byte) div8s::return ← (signed byte) div8s::return
  return (signed byte) div8s::return
  to:@return
div8s::@12: scope:[div8s]  from
  to:div8s::@6
div8s::@6: scope:[div8s]  from div8s::@12 div8s::@14
  to:div8s::@return
div8s::@13: scope:[div8s]  from
  to:div8s::@5
div8s::@14: scope:[div8s]  from
  to:div8s::@6
@10: scope:[]  from @9
  (word) rem16u ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@11
div16u: scope:[div16u]  from
  (word) div16u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) div16u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u div16u::@3
  (word~) div16u::$0 ← (word) div16u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) div16u::rem ← (word~) div16u::$0
  (byte~) div16u::$1 ← > (word) div16u::dividend
  (byte~) div16u::$2 ← (byte~) div16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) div16u::$3 ← (byte~) div16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16u::$4 ← ! (boolean~) div16u::$3
  if((boolean~) div16u::$4) goto div16u::@2
  to:div16u::@4
div16u::@2: scope:[div16u]  from div16u::@1 div16u::@4
  (word~) div16u::$5 ← (word) div16u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) div16u::dividend ← (word~) div16u::$5
  (word~) div16u::$6 ← (word) div16u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) div16u::quotient ← (word~) div16u::$6
  (boolean~) div16u::$7 ← (word) div16u::rem >= (word) div16u::divisor
  (boolean~) div16u::$8 ← ! (boolean~) div16u::$7
  if((boolean~) div16u::$8) goto div16u::@3
  to:div16u::@5
div16u::@4: scope:[div16u]  from div16u::@1
  (word) div16u::rem ← ++ (word) div16u::rem
  to:div16u::@2
div16u::@3: scope:[div16u]  from div16u::@2 div16u::@5
  (byte) div16u::i ← ++ (byte) div16u::i
  (boolean~) div16u::$10 ← (byte) div16u::i != (byte/signed byte/word/signed word/dword/signed dword) 16
  if((boolean~) div16u::$10) goto div16u::@1
  to:div16u::@6
div16u::@5: scope:[div16u]  from div16u::@2
  (word) div16u::quotient ← ++ (word) div16u::quotient
  (word~) div16u::$9 ← (word) div16u::rem - (word) div16u::divisor
  (word) div16u::rem ← (word~) div16u::$9
  to:div16u::@3
div16u::@6: scope:[div16u]  from div16u::@3
  (word) rem16u ← (word) div16u::rem
  (word) div16u::return ← (word) div16u::quotient
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@6 div16u::@7
  (word) div16u::return ← (word) div16u::return
  return (word) div16u::return
  to:@return
div16u::@7: scope:[div16u]  from
  to:div16u::@return
@11: scope:[]  from @10
  to:@12
main: scope:[main]  from
  (void~) main::$0 ← call print_cls 
  (void~) main::$1 ← call test_8s 
  (void~) main::$2 ← call test_8u 
  (void~) main::$3 ← call test_16u 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@12: scope:[]  from @11
  to:@13
test_16u: scope:[test_16u]  from
  (word[]) test_16u::dividends ← { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
  (word[]) test_16u::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@1
  (word) test_16u::dividend ← *((word[]) test_16u::dividends + (byte) test_16u::i)
  (word) test_16u::divisor ← *((word[]) test_16u::divisors + (byte) test_16u::i)
  (word~) test_16u::$0 ← call div16u (word) test_16u::dividend (word) test_16u::divisor 
  (word) test_16u::res ← (word~) test_16u::$0
  (void~) test_16u::$1 ← call print_word (word) test_16u::dividend 
  (void~) test_16u::$2 ← call print_str (string) " / @" 
  (void~) test_16u::$3 ← call print_word (word) test_16u::divisor 
  (void~) test_16u::$4 ← call print_str (string) " = @" 
  (void~) test_16u::$5 ← call print_word (word) test_16u::res 
  (void~) test_16u::$6 ← call print_str (string) " @" 
  (void~) test_16u::$7 ← call print_word (word) rem16u 
  (void~) test_16u::$8 ← call print_ln 
  (byte/word~) test_16u::$9 ← (byte) test_16u::i + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16u::i ← (byte/word~) test_16u::$9
  (boolean~) test_16u::$10 ← (byte) test_16u::i != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16u::$10) goto test_16u::@1
  to:test_16u::@2
test_16u::@2: scope:[test_16u]  from test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@2
  return 
  to:@return
@13: scope:[]  from @12
  to:@14
test_8u: scope:[test_8u]  from
  (byte[]) test_8u::dividends ← { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
  (byte[]) test_8u::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) test_8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@1
  (byte) test_8u::dividend ← *((byte[]) test_8u::dividends + (byte) test_8u::i)
  (byte) test_8u::divisor ← *((byte[]) test_8u::divisors + (byte) test_8u::i)
  (byte~) test_8u::$0 ← call div8u (byte) test_8u::dividend (byte) test_8u::divisor 
  (byte) test_8u::res ← (byte~) test_8u::$0
  (void~) test_8u::$1 ← call print_byte (byte) test_8u::dividend 
  (void~) test_8u::$2 ← call print_str (string) " / @" 
  (void~) test_8u::$3 ← call print_byte (byte) test_8u::divisor 
  (void~) test_8u::$4 ← call print_str (string) " = @" 
  (void~) test_8u::$5 ← call print_byte (byte) test_8u::res 
  (void~) test_8u::$6 ← call print_str (string) " @" 
  (void~) test_8u::$7 ← call print_byte (byte) rem8u 
  (void~) test_8u::$8 ← call print_ln 
  (byte) test_8u::i ← ++ (byte) test_8u::i
  (boolean~) test_8u::$9 ← (byte) test_8u::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8u::$9) goto test_8u::@1
  to:test_8u::@2
test_8u::@2: scope:[test_8u]  from test_8u::@1
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@2
  return 
  to:@return
@14: scope:[]  from @13
  to:@15
test_8s: scope:[test_8s]  from
  (signed byte/signed word/signed dword~) test_8s::$0 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte/signed word/signed dword~) test_8s::$1 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte[]) test_8s::dividends ← { (byte/signed byte/word/signed word/dword/signed dword) 127, (signed byte/signed word/signed dword~) test_8s::$0, (signed byte/signed word/signed dword~) test_8s::$1, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (signed byte/signed word/signed dword~) test_8s::$2 ← - (byte/signed byte/word/signed word/dword/signed dword) 11
  (signed byte/signed word/signed dword~) test_8s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte[]) test_8s::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (signed byte/signed word/signed dword~) test_8s::$2, (signed byte/signed word/signed dword~) test_8s::$3, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8s::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@1
  (signed byte) test_8s::dividend ← *((signed byte[]) test_8s::dividends + (byte) test_8s::i)
  (signed byte) test_8s::divisor ← *((signed byte[]) test_8s::divisors + (byte) test_8s::i)
  (signed byte~) test_8s::$4 ← call div8s (signed byte) test_8s::dividend (signed byte) test_8s::divisor 
  (signed byte) test_8s::res ← (signed byte~) test_8s::$4
  (void~) test_8s::$5 ← call print_sbyte (signed byte) test_8s::dividend 
  (void~) test_8s::$6 ← call print_str (string) " / @" 
  (void~) test_8s::$7 ← call print_sbyte (signed byte) test_8s::divisor 
  (void~) test_8s::$8 ← call print_str (string) " = @" 
  (void~) test_8s::$9 ← call print_sbyte (signed byte) test_8s::res 
  (void~) test_8s::$10 ← call print_str (string) " @" 
  (void~) test_8s::$11 ← call print_sbyte (signed byte) rem8s 
  (void~) test_8s::$12 ← call print_ln 
  (byte) test_8s::i ← ++ (byte) test_8s::i
  (boolean~) test_8s::$13 ← (byte) test_8s::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8s::$13) goto test_8s::@1
  to:test_8s::@2
test_8s::@2: scope:[test_8s]  from test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@2
  return 
  to:@return
@15: scope:[]  from @14
  call main 
  to:@end
@end: scope:[]  from @15

Removing unused procedure print_sword
Eliminating unused variable - keeping the call (void~) print_sbyte::$5
Eliminating unused variable - keeping the call (void~) print_sbyte::$2
Eliminating unused variable - keeping the call (void~) print_word::$1
Eliminating unused variable - keeping the call (void~) print_word::$3
Eliminating unused variable - keeping the call (void~) print_byte::$1
Eliminating unused variable - keeping the call (void~) print_byte::$3
Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$1
Eliminating unused variable - keeping the call (void~) main::$2
Eliminating unused variable - keeping the call (void~) main::$3
Eliminating unused variable - keeping the call (void~) test_16u::$1
Eliminating unused variable - keeping the call (void~) test_16u::$2
Eliminating unused variable - keeping the call (void~) test_16u::$3
Eliminating unused variable - keeping the call (void~) test_16u::$4
Eliminating unused variable - keeping the call (void~) test_16u::$5
Eliminating unused variable - keeping the call (void~) test_16u::$6
Eliminating unused variable - keeping the call (void~) test_16u::$7
Eliminating unused variable - keeping the call (void~) test_16u::$8
Eliminating unused variable (byte) test_8u::rem and assignment [171] (byte) test_8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable - keeping the call (void~) test_8u::$1
Eliminating unused variable - keeping the call (void~) test_8u::$2
Eliminating unused variable - keeping the call (void~) test_8u::$3
Eliminating unused variable - keeping the call (void~) test_8u::$4
Eliminating unused variable - keeping the call (void~) test_8u::$5
Eliminating unused variable - keeping the call (void~) test_8u::$6
Eliminating unused variable - keeping the call (void~) test_8u::$7
Eliminating unused variable - keeping the call (void~) test_8u::$8
Eliminating unused variable - keeping the call (void~) test_8s::$5
Eliminating unused variable - keeping the call (void~) test_8s::$6
Eliminating unused variable - keeping the call (void~) test_8s::$7
Eliminating unused variable - keeping the call (void~) test_8s::$8
Eliminating unused variable - keeping the call (void~) test_8s::$9
Eliminating unused variable - keeping the call (void~) test_8s::$10
Eliminating unused variable - keeping the call (void~) test_8s::$11
Eliminating unused variable - keeping the call (void~) test_8s::$12
Creating constant string variable for inline (const string) print_byte::$4 "0123456789abcdef"
Creating constant string variable for inline (const string) test_16u::str " / @"
Creating constant string variable for inline (const string) test_16u::str1 " = @"
Creating constant string variable for inline (const string) test_16u::str2 " @"
Creating constant string variable for inline (const string) test_8u::str " / @"
Creating constant string variable for inline (const string) test_8u::str1 " = @"
Creating constant string variable for inline (const string) test_8u::str2 " @"
Creating constant string variable for inline (const string) test_8s::str " / @"
Creating constant string variable for inline (const string) test_8s::str1 " = @"
Creating constant string variable for inline (const string) test_8s::str2 " @"
Removing empty block print_str::@4
Removing empty block print_str::@3
Removing empty block print_str::@5
Removing empty block print_str::@6
Removing empty block @1
Removing empty block @2
Removing empty block @3
Removing empty block @4
Removing empty block @5
Removing empty block @6
Removing empty block @7
Removing empty block div8u::@7
Removing empty block div8s::@8
Removing empty block div8s::@10
Removing empty block div8s::@12
Removing empty block div8s::@6
Removing empty block div8s::@13
Removing empty block div8s::@14
Removing empty block div16u::@7
Removing empty block @11
Removing empty block @12
Removing empty block test_16u::@2
Removing empty block @13
Removing empty block test_8u::@2
Removing empty block @14
Removing empty block test_8s::@2
PROCEDURE MODIFY VARIABLE ANALYSIS
print_str modifies char_cursor
print_ln modifies line_cursor
print_ln modifies char_cursor
print_sbyte modifies char_cursor
print_word modifies char_cursor
print_byte modifies char_cursor
print_char modifies char_cursor
print_cls modifies line_cursor
print_cls modifies char_cursor
div8u modifies rem8u
div8s modifies rem8u
div8s modifies rem8s
div16u modifies rem16u
main modifies line_cursor
main modifies char_cursor
main modifies rem8u
main modifies rem8s
main modifies rem16u
test_16u modifies rem16u
test_16u modifies char_cursor
test_16u modifies line_cursor
test_8u modifies rem8u
test_8u modifies char_cursor
test_8u modifies line_cursor
test_8s modifies rem8u
test_8s modifies rem8s
test_8s modifies char_cursor
test_8s modifies line_cursor

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) line_cursor#0 ← (byte*) SCREEN#0
  (byte*) char_cursor#0 ← (byte*) line_cursor#0
  to:@8
print_str: scope:[print_str]  from test_16u::@4 test_16u::@6 test_16u::@8 test_8s::@4 test_8s::@6 test_8s::@8 test_8u::@4 test_8u::@6 test_8u::@8
  (byte*) char_cursor#111 ← phi( test_16u::@4/(byte*) char_cursor#23 test_16u::@6/(byte*) char_cursor#25 test_16u::@8/(byte*) char_cursor#27 test_8s::@4/(byte*) char_cursor#41 test_8s::@6/(byte*) char_cursor#43 test_8s::@8/(byte*) char_cursor#45 test_8u::@4/(byte*) char_cursor#32 test_8u::@6/(byte*) char_cursor#34 test_8u::@8/(byte*) char_cursor#36 )
  (byte*) print_str::str#12 ← phi( test_16u::@4/(byte*) print_str::str#1 test_16u::@6/(byte*) print_str::str#2 test_16u::@8/(byte*) print_str::str#3 test_8s::@4/(byte*) print_str::str#7 test_8s::@6/(byte*) print_str::str#8 test_8s::@8/(byte*) print_str::str#9 test_8u::@4/(byte*) print_str::str#4 test_8u::@6/(byte*) print_str::str#5 test_8u::@8/(byte*) print_str::str#6 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) char_cursor#100 ← phi( print_str/(byte*) char_cursor#111 print_str::@2/(byte*) char_cursor#1 )
  (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@2/(byte*) print_str::str#0 )
  (boolean~) print_str::$0 ← *((byte*) print_str::str#10) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) char_cursor#51 ← phi( print_str::@1/(byte*) char_cursor#100 )
  (byte*) print_str::str#11 ← phi( print_str::@1/(byte*) print_str::str#10 )
  *((byte*) char_cursor#51) ← *((byte*) print_str::str#11)
  (byte*) char_cursor#1 ← ++ (byte*) char_cursor#51
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#11
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) char_cursor#52 ← phi( print_str::@1/(byte*) char_cursor#100 )
  (byte*) char_cursor#2 ← (byte*) char_cursor#52
  return 
  to:@return
print_ln: scope:[print_ln]  from test_16u::@10 test_8s::@10 test_8u::@10
  (byte*) char_cursor#101 ← phi( test_16u::@10/(byte*) char_cursor#29 test_8s::@10/(byte*) char_cursor#47 test_8u::@10/(byte*) char_cursor#38 )
  (byte*) line_cursor#33 ← phi( test_16u::@10/(byte*) line_cursor#35 test_8s::@10/(byte*) line_cursor#37 test_8u::@10/(byte*) line_cursor#36 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) char_cursor#53 ← phi( print_ln/(byte*) char_cursor#101 print_ln::@1/(byte*) char_cursor#53 )
  (byte*) line_cursor#17 ← phi( print_ln/(byte*) line_cursor#33 print_ln::@1/(byte*) line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) line_cursor#17 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor#1 ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor#1 < (byte*) char_cursor#53
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) line_cursor#18 ← phi( print_ln::@1/(byte*) line_cursor#1 )
  (byte*) char_cursor#3 ← (byte*) line_cursor#18
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) char_cursor#54 ← phi( print_ln::@2/(byte*) char_cursor#3 )
  (byte*) line_cursor#19 ← phi( print_ln::@2/(byte*) line_cursor#18 )
  (byte*) line_cursor#2 ← (byte*) line_cursor#19
  (byte*) char_cursor#4 ← (byte*) char_cursor#54
  return 
  to:@return
print_sbyte: scope:[print_sbyte]  from test_8s::@3 test_8s::@5 test_8s::@7 test_8s::@9
  (byte*) char_cursor#112 ← phi( test_8s::@3/(byte*) char_cursor#109 test_8s::@5/(byte*) char_cursor#42 test_8s::@7/(byte*) char_cursor#44 test_8s::@9/(byte*) char_cursor#46 )
  (signed byte) print_sbyte::b#5 ← phi( test_8s::@3/(signed byte) print_sbyte::b#1 test_8s::@5/(signed byte) print_sbyte::b#2 test_8s::@7/(signed byte) print_sbyte::b#3 test_8s::@9/(signed byte) print_sbyte::b#4 )
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@4
  (byte*) char_cursor#102 ← phi( print_sbyte/(byte*) char_cursor#112 print_sbyte::@4/(byte*) char_cursor#6 )
  (signed byte) print_sbyte::b#6 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 print_sbyte::@4/(signed byte) print_sbyte::b#0 )
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b#6
  (byte) print_byte::b#0 ← (byte~) print_sbyte::$4
  call print_byte param-assignment
  to:print_sbyte::@3
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte::@1
  (byte*) char_cursor#55 ← phi( print_sbyte::@1/(byte*) char_cursor#13 )
  (byte*) char_cursor#5 ← (byte*) char_cursor#55
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#8 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 )
  (byte*) char_cursor#103 ← phi( print_sbyte/(byte*) char_cursor#112 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char param-assignment
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@2
  (signed byte) print_sbyte::b#7 ← phi( print_sbyte::@2/(signed byte) print_sbyte::b#8 )
  (byte*) char_cursor#56 ← phi( print_sbyte::@2/(byte*) char_cursor#15 )
  (byte*) char_cursor#6 ← (byte*) char_cursor#56
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b#7
  (signed byte) print_sbyte::b#0 ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@3
  (byte*) char_cursor#57 ← phi( print_sbyte::@3/(byte*) char_cursor#5 )
  (byte*) char_cursor#7 ← (byte*) char_cursor#57
  return 
  to:@return
print_word: scope:[print_word]  from test_16u::@3 test_16u::@5 test_16u::@7 test_16u::@9
  (byte*) char_cursor#104 ← phi( test_16u::@3/(byte*) char_cursor#107 test_16u::@5/(byte*) char_cursor#24 test_16u::@7/(byte*) char_cursor#26 test_16u::@9/(byte*) char_cursor#28 )
  (word) print_word::w#4 ← phi( test_16u::@3/(word) print_word::w#0 test_16u::@5/(word) print_word::w#1 test_16u::@7/(word) print_word::w#2 test_16u::@9/(word) print_word::w#3 )
  (byte~) print_word::$0 ← > (word) print_word::w#4
  (byte) print_byte::b#1 ← (byte~) print_word::$0
  call print_byte param-assignment
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#5 ← phi( print_word/(word) print_word::w#4 )
  (byte*) char_cursor#58 ← phi( print_word/(byte*) char_cursor#13 )
  (byte*) char_cursor#8 ← (byte*) char_cursor#58
  (byte~) print_word::$2 ← < (word) print_word::w#5
  (byte) print_byte::b#2 ← (byte~) print_word::$2
  call print_byte param-assignment
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) char_cursor#59 ← phi( print_word::@1/(byte*) char_cursor#13 )
  (byte*) char_cursor#9 ← (byte*) char_cursor#59
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) char_cursor#60 ← phi( print_word::@2/(byte*) char_cursor#9 )
  (byte*) char_cursor#10 ← (byte*) char_cursor#60
  return 
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@1 print_word print_word::@1 test_8u::@3 test_8u::@5 test_8u::@7 test_8u::@9
  (byte*) char_cursor#105 ← phi( print_sbyte::@1/(byte*) char_cursor#102 print_word/(byte*) char_cursor#104 print_word::@1/(byte*) char_cursor#8 test_8u::@3/(byte*) char_cursor#108 test_8u::@5/(byte*) char_cursor#33 test_8u::@7/(byte*) char_cursor#35 test_8u::@9/(byte*) char_cursor#37 )
  (byte) print_byte::b#7 ← phi( print_sbyte::@1/(byte) print_byte::b#0 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 test_8u::@3/(byte) print_byte::b#3 test_8u::@5/(byte) print_byte::b#4 test_8u::@7/(byte) print_byte::b#5 test_8u::@9/(byte) print_byte::b#6 )
  (byte[]) print_byte::hextab#0 ← (const string) print_byte::$4
  (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) print_char::ch#1 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$0)
  call print_char param-assignment
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#8 ← phi( print_byte/(byte) print_byte::b#7 )
  (byte*) char_cursor#61 ← phi( print_byte/(byte*) char_cursor#15 )
  (byte*) char_cursor#11 ← (byte*) char_cursor#61
  (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) print_char::ch#2 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$2)
  call print_char param-assignment
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) char_cursor#62 ← phi( print_byte::@1/(byte*) char_cursor#15 )
  (byte*) char_cursor#12 ← (byte*) char_cursor#62
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) char_cursor#63 ← phi( print_byte::@2/(byte*) char_cursor#12 )
  (byte*) char_cursor#13 ← (byte*) char_cursor#63
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@2
  (byte*) char_cursor#64 ← phi( print_byte/(byte*) char_cursor#105 print_byte::@1/(byte*) char_cursor#11 print_sbyte::@2/(byte*) char_cursor#103 )
  (byte) print_char::ch#3 ← phi( print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sbyte::@2/(byte) print_char::ch#0 )
  *((byte*) char_cursor#64) ← (byte) print_char::ch#3
  (byte*) char_cursor#14 ← ++ (byte*) char_cursor#64
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) char_cursor#65 ← phi( print_char/(byte*) char_cursor#14 )
  (byte*) char_cursor#15 ← (byte*) char_cursor#65
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_cls::sc#0 ← (byte*) SCREEN#0
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) SCREEN#0 + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) line_cursor#3 ← (byte*) SCREEN#0
  (byte*) char_cursor#16 ← (byte*) line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) char_cursor#66 ← phi( print_cls::@2/(byte*) char_cursor#16 )
  (byte*) line_cursor#20 ← phi( print_cls::@2/(byte*) line_cursor#3 )
  (byte*) line_cursor#4 ← (byte*) line_cursor#20
  (byte*) char_cursor#17 ← (byte*) char_cursor#66
  return 
  to:@return
@8: scope:[]  from @begin
  (byte*) char_cursor#121 ← phi( @begin/(byte*) char_cursor#0 )
  (byte*) line_cursor#47 ← phi( @begin/(byte*) line_cursor#0 )
  (byte) rem8u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@9
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  (byte) div8u::divisor#6 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 )
  (byte) div8u::dividend#5 ← phi( div8s::@4/(byte) div8u::dividend#1 test_8u::@1/(byte) div8u::dividend#2 )
  (byte) div8u::rem#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::quotient#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u div8u::@3
  (byte) div8u::i#5 ← phi( div8u/(byte) div8u::i#0 div8u::@3/(byte) div8u::i#1 )
  (byte) div8u::divisor#4 ← phi( div8u/(byte) div8u::divisor#6 div8u::@3/(byte) div8u::divisor#7 )
  (byte) div8u::quotient#6 ← phi( div8u/(byte) div8u::quotient#0 div8u::@3/(byte) div8u::quotient#8 )
  (byte) div8u::dividend#3 ← phi( div8u/(byte) div8u::dividend#5 div8u::@3/(byte) div8u::dividend#6 )
  (byte) div8u::rem#4 ← phi( div8u/(byte) div8u::rem#0 div8u::@3/(byte) div8u::rem#9 )
  (byte~) div8u::$0 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::rem#1 ← (byte~) div8u::$0
  (byte~) div8u::$1 ← (byte) div8u::dividend#3 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) div8u::$2 ← (byte~) div8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8u::$3 ← ! (boolean~) div8u::$2
  if((boolean~) div8u::$3) goto div8u::@2
  to:div8u::@4
div8u::@2: scope:[div8u]  from div8u::@1 div8u::@4
  (byte) div8u::i#3 ← phi( div8u::@1/(byte) div8u::i#5 div8u::@4/(byte) div8u::i#6 )
  (byte) div8u::divisor#2 ← phi( div8u::@1/(byte) div8u::divisor#4 div8u::@4/(byte) div8u::divisor#5 )
  (byte) div8u::rem#5 ← phi( div8u::@1/(byte) div8u::rem#1 div8u::@4/(byte) div8u::rem#2 )
  (byte) div8u::quotient#3 ← phi( div8u::@1/(byte) div8u::quotient#6 div8u::@4/(byte) div8u::quotient#7 )
  (byte) div8u::dividend#4 ← phi( div8u::@1/(byte) div8u::dividend#3 div8u::@4/(byte) div8u::dividend#7 )
  (byte~) div8u::$4 ← (byte) div8u::dividend#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::dividend#0 ← (byte~) div8u::$4
  (byte~) div8u::$5 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::quotient#1 ← (byte~) div8u::$5
  (boolean~) div8u::$6 ← (byte) div8u::rem#5 >= (byte) div8u::divisor#2
  (boolean~) div8u::$7 ← ! (boolean~) div8u::$6
  if((boolean~) div8u::$7) goto div8u::@3
  to:div8u::@5
div8u::@4: scope:[div8u]  from div8u::@1
  (byte) div8u::i#6 ← phi( div8u::@1/(byte) div8u::i#5 )
  (byte) div8u::divisor#5 ← phi( div8u::@1/(byte) div8u::divisor#4 )
  (byte) div8u::quotient#7 ← phi( div8u::@1/(byte) div8u::quotient#6 )
  (byte) div8u::dividend#7 ← phi( div8u::@1/(byte) div8u::dividend#3 )
  (byte) div8u::rem#6 ← phi( div8u::@1/(byte) div8u::rem#1 )
  (byte) div8u::rem#2 ← ++ (byte) div8u::rem#6
  to:div8u::@2
div8u::@3: scope:[div8u]  from div8u::@2 div8u::@5
  (byte) div8u::divisor#7 ← phi( div8u::@2/(byte) div8u::divisor#2 div8u::@5/(byte) div8u::divisor#3 )
  (byte) div8u::quotient#8 ← phi( div8u::@2/(byte) div8u::quotient#1 div8u::@5/(byte) div8u::quotient#2 )
  (byte) div8u::dividend#6 ← phi( div8u::@2/(byte) div8u::dividend#0 div8u::@5/(byte) div8u::dividend#8 )
  (byte) div8u::rem#9 ← phi( div8u::@2/(byte) div8u::rem#5 div8u::@5/(byte) div8u::rem#3 )
  (byte) div8u::i#2 ← phi( div8u::@2/(byte) div8u::i#3 div8u::@5/(byte) div8u::i#4 )
  (byte) div8u::i#1 ← ++ (byte) div8u::i#2
  (boolean~) div8u::$9 ← (byte) div8u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) div8u::$9) goto div8u::@1
  to:div8u::@6
div8u::@5: scope:[div8u]  from div8u::@2
  (byte) div8u::dividend#8 ← phi( div8u::@2/(byte) div8u::dividend#0 )
  (byte) div8u::i#4 ← phi( div8u::@2/(byte) div8u::i#3 )
  (byte) div8u::divisor#3 ← phi( div8u::@2/(byte) div8u::divisor#2 )
  (byte) div8u::rem#7 ← phi( div8u::@2/(byte) div8u::rem#5 )
  (byte) div8u::quotient#4 ← phi( div8u::@2/(byte) div8u::quotient#1 )
  (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#4
  (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8 ← (byte) div8u::rem#7 - (byte) div8u::divisor#3
  (byte) div8u::rem#3 ← (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8
  to:div8u::@3
div8u::@6: scope:[div8u]  from div8u::@3
  (byte) div8u::quotient#5 ← phi( div8u::@3/(byte) div8u::quotient#8 )
  (byte) div8u::rem#8 ← phi( div8u::@3/(byte) div8u::rem#9 )
  (byte) rem8u#1 ← (byte) div8u::rem#8
  (byte) div8u::return#0 ← (byte) div8u::quotient#5
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@6
  (byte) rem8u#13 ← phi( div8u::@6/(byte) rem8u#1 )
  (byte) div8u::return#4 ← phi( div8u::@6/(byte) div8u::return#0 )
  (byte) div8u::return#1 ← (byte) div8u::return#4
  (byte) rem8u#2 ← (byte) rem8u#13
  return 
  to:@return
@9: scope:[]  from @8
  (byte) rem8u#46 ← phi( @8/(byte) rem8u#0 )
  (byte*) char_cursor#117 ← phi( @8/(byte*) char_cursor#121 )
  (byte*) line_cursor#43 ← phi( @8/(byte*) line_cursor#47 )
  (signed byte) rem8s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@10
div8s: scope:[div8s]  from test_8s::@1
  (byte) rem8u#53 ← phi( test_8s::@1/(byte) rem8u#33 )
  (signed byte) div8s::divisor#6 ← phi( test_8s::@1/(signed byte) div8s::divisor#0 )
  (signed byte) div8s::dividend#1 ← phi( test_8s::@1/(signed byte) div8s::dividend#0 )
  (byte) div8s::neg#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8s::dividendb#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$0 ← (signed byte) div8s::dividend#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$1 ← ! (boolean~) div8s::$0
  if((boolean~) div8s::$1) goto div8s::@1
  to:div8s::@7
div8s::@1: scope:[div8s]  from div8s
  (byte) rem8u#49 ← phi( div8s/(byte) rem8u#53 )
  (byte) div8s::neg#7 ← phi( div8s/(byte) div8s::neg#0 )
  (signed byte) div8s::divisor#4 ← phi( div8s/(signed byte) div8s::divisor#6 )
  (signed byte) div8s::dividend#2 ← phi( div8s/(signed byte) div8s::dividend#1 )
  (byte~) div8s::$4 ← ((byte)) (signed byte) div8s::dividend#2
  (byte) div8s::dividendb#1 ← (byte~) div8s::$4
  to:div8s::@2
div8s::@7: scope:[div8s]  from div8s
  (byte) rem8u#50 ← phi( div8s/(byte) rem8u#53 )
  (signed byte) div8s::divisor#5 ← phi( div8s/(signed byte) div8s::divisor#6 )
  (signed byte) div8s::dividend#3 ← phi( div8s/(signed byte) div8s::dividend#1 )
  (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#3
  (byte~) div8s::$3 ← ((byte)) (signed byte~) div8s::$2
  (byte) div8s::dividendb#2 ← (byte~) div8s::$3
  (byte) div8s::neg#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@7
  (byte) rem8u#45 ← phi( div8s::@1/(byte) rem8u#49 div8s::@7/(byte) rem8u#50 )
  (byte) div8s::dividendb#6 ← phi( div8s::@1/(byte) div8s::dividendb#1 div8s::@7/(byte) div8s::dividendb#2 )
  (byte) div8s::neg#5 ← phi( div8s::@1/(byte) div8s::neg#7 div8s::@7/(byte) div8s::neg#1 )
  (signed byte) div8s::divisor#1 ← phi( div8s::@1/(signed byte) div8s::divisor#4 div8s::@7/(signed byte) div8s::divisor#5 )
  (byte) div8s::divisorb#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$5 ← (signed byte) div8s::divisor#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$6 ← ! (boolean~) div8s::$5
  if((boolean~) div8s::$6) goto div8s::@3
  to:div8s::@9
div8s::@3: scope:[div8s]  from div8s::@2
  (byte) div8s::neg#8 ← phi( div8s::@2/(byte) div8s::neg#5 )
  (byte) rem8u#36 ← phi( div8s::@2/(byte) rem8u#45 )
  (byte) div8s::dividendb#4 ← phi( div8s::@2/(byte) div8s::dividendb#6 )
  (signed byte) div8s::divisor#2 ← phi( div8s::@2/(signed byte) div8s::divisor#1 )
  (byte~) div8s::$10 ← ((byte)) (signed byte) div8s::divisor#2
  (byte) div8s::divisorb#1 ← (byte~) div8s::$10
  to:div8s::@4
div8s::@9: scope:[div8s]  from div8s::@2
  (byte) rem8u#37 ← phi( div8s::@2/(byte) rem8u#45 )
  (byte) div8s::dividendb#5 ← phi( div8s::@2/(byte) div8s::dividendb#6 )
  (byte) div8s::neg#3 ← phi( div8s::@2/(byte) div8s::neg#5 )
  (signed byte) div8s::divisor#3 ← phi( div8s::@2/(signed byte) div8s::divisor#1 )
  (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#3
  (byte~) div8s::$8 ← ((byte)) (signed byte~) div8s::$7
  (byte) div8s::divisorb#2 ← (byte~) div8s::$8
  (byte~) div8s::$9 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8s::neg#2 ← (byte~) div8s::$9
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@9
  (byte) div8s::neg#6 ← phi( div8s::@3/(byte) div8s::neg#8 div8s::@9/(byte) div8s::neg#2 )
  (byte) rem8u#27 ← phi( div8s::@3/(byte) rem8u#36 div8s::@9/(byte) rem8u#37 )
  (byte) div8s::divisorb#3 ← phi( div8s::@3/(byte) div8s::divisorb#1 div8s::@9/(byte) div8s::divisorb#2 )
  (byte) div8s::dividendb#3 ← phi( div8s::@3/(byte) div8s::dividendb#4 div8s::@9/(byte) div8s::dividendb#5 )
  (byte) div8u::dividend#1 ← (byte) div8s::dividendb#3
  (byte) div8u::divisor#0 ← (byte) div8s::divisorb#3
  call div8u param-assignment
  (byte) div8u::return#2 ← (byte) div8u::return#1
  to:div8s::@15
div8s::@15: scope:[div8s]  from div8s::@4
  (byte) div8s::neg#4 ← phi( div8s::@4/(byte) div8s::neg#6 )
  (byte) rem8u#14 ← phi( div8s::@4/(byte) rem8u#2 )
  (byte) div8u::return#5 ← phi( div8s::@4/(byte) div8u::return#2 )
  (byte~) div8s::$11 ← (byte) div8u::return#5
  (byte) rem8u#3 ← (byte) rem8u#14
  (byte) div8s::resultb#0 ← (byte~) div8s::$11
  (boolean~) div8s::$12 ← (byte) div8s::neg#4 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$13 ← ! (boolean~) div8s::$12
  if((boolean~) div8s::$13) goto div8s::@5
  to:div8s::@11
div8s::@5: scope:[div8s]  from div8s::@15
  (byte) div8s::resultb#1 ← phi( div8s::@15/(byte) div8s::resultb#0 )
  (byte) rem8u#15 ← phi( div8s::@15/(byte) rem8u#3 )
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) rem8u#15
  (signed byte~) div8s::$17 ← - (signed byte~) div8s::$16
  (signed byte) rem8s#1 ← (signed byte~) div8s::$17
  (signed byte~) div8s::$18 ← ((signed byte)) (byte) div8s::resultb#1
  (signed byte~) div8s::$19 ← - (signed byte~) div8s::$18
  (signed byte) div8s::return#0 ← (signed byte~) div8s::$19
  to:div8s::@return
div8s::@11: scope:[div8s]  from div8s::@15
  (byte) div8s::resultb#2 ← phi( div8s::@15/(byte) div8s::resultb#0 )
  (byte) rem8u#16 ← phi( div8s::@15/(byte) rem8u#3 )
  (signed byte~) div8s::$14 ← ((signed byte)) (byte) rem8u#16
  (signed byte) rem8s#2 ← (signed byte~) div8s::$14
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) div8s::resultb#2
  (signed byte) div8s::return#1 ← (signed byte~) div8s::$15
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@11 div8s::@5
  (signed byte) rem8s#9 ← phi( div8s::@11/(signed byte) rem8s#2 div8s::@5/(signed byte) rem8s#1 )
  (byte) rem8u#17 ← phi( div8s::@11/(byte) rem8u#16 div8s::@5/(byte) rem8u#15 )
  (signed byte) div8s::return#4 ← phi( div8s::@11/(signed byte) div8s::return#1 div8s::@5/(signed byte) div8s::return#0 )
  (signed byte) div8s::return#2 ← (signed byte) div8s::return#4
  (byte) rem8u#4 ← (byte) rem8u#17
  (signed byte) rem8s#3 ← (signed byte) rem8s#9
  return 
  to:@return
@10: scope:[]  from @9
  (signed byte) rem8s#27 ← phi( @9/(signed byte) rem8s#0 )
  (byte) rem8u#44 ← phi( @9/(byte) rem8u#46 )
  (byte*) char_cursor#116 ← phi( @9/(byte*) char_cursor#117 )
  (byte*) line_cursor#42 ← phi( @9/(byte*) line_cursor#43 )
  (word) rem16u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@15
div16u: scope:[div16u]  from test_16u::@1
  (word) div16u::divisor#5 ← phi( test_16u::@1/(word) div16u::divisor#0 )
  (word) div16u::dividend#4 ← phi( test_16u::@1/(word) div16u::dividend#1 )
  (word) div16u::rem#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) div16u::quotient#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div16u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u div16u::@3
  (byte) div16u::i#5 ← phi( div16u/(byte) div16u::i#0 div16u::@3/(byte) div16u::i#1 )
  (word) div16u::divisor#3 ← phi( div16u/(word) div16u::divisor#5 div16u::@3/(word) div16u::divisor#6 )
  (word) div16u::quotient#6 ← phi( div16u/(word) div16u::quotient#0 div16u::@3/(word) div16u::quotient#8 )
  (word) div16u::dividend#2 ← phi( div16u/(word) div16u::dividend#4 div16u::@3/(word) div16u::dividend#5 )
  (word) div16u::rem#4 ← phi( div16u/(word) div16u::rem#0 div16u::@3/(word) div16u::rem#9 )
  (word~) div16u::$0 ← (word) div16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) div16u::rem#1 ← (word~) div16u::$0
  (byte~) div16u::$1 ← > (word) div16u::dividend#2
  (byte~) div16u::$2 ← (byte~) div16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) div16u::$3 ← (byte~) div16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16u::$4 ← ! (boolean~) div16u::$3
  if((boolean~) div16u::$4) goto div16u::@2
  to:div16u::@4
div16u::@2: scope:[div16u]  from div16u::@1 div16u::@4
  (byte) div16u::i#3 ← phi( div16u::@1/(byte) div16u::i#5 div16u::@4/(byte) div16u::i#6 )
  (word) div16u::divisor#1 ← phi( div16u::@1/(word) div16u::divisor#3 div16u::@4/(word) div16u::divisor#4 )
  (word) div16u::rem#5 ← phi( div16u::@1/(word) div16u::rem#1 div16u::@4/(word) div16u::rem#2 )
  (word) div16u::quotient#3 ← phi( div16u::@1/(word) div16u::quotient#6 div16u::@4/(word) div16u::quotient#7 )
  (word) div16u::dividend#3 ← phi( div16u::@1/(word) div16u::dividend#2 div16u::@4/(word) div16u::dividend#6 )
  (word~) div16u::$5 ← (word) div16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) div16u::dividend#0 ← (word~) div16u::$5
  (word~) div16u::$6 ← (word) div16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) div16u::quotient#1 ← (word~) div16u::$6
  (boolean~) div16u::$7 ← (word) div16u::rem#5 >= (word) div16u::divisor#1
  (boolean~) div16u::$8 ← ! (boolean~) div16u::$7
  if((boolean~) div16u::$8) goto div16u::@3
  to:div16u::@5
div16u::@4: scope:[div16u]  from div16u::@1
  (byte) div16u::i#6 ← phi( div16u::@1/(byte) div16u::i#5 )
  (word) div16u::divisor#4 ← phi( div16u::@1/(word) div16u::divisor#3 )
  (word) div16u::quotient#7 ← phi( div16u::@1/(word) div16u::quotient#6 )
  (word) div16u::dividend#6 ← phi( div16u::@1/(word) div16u::dividend#2 )
  (word) div16u::rem#6 ← phi( div16u::@1/(word) div16u::rem#1 )
  (word) div16u::rem#2 ← ++ (word) div16u::rem#6
  to:div16u::@2
div16u::@3: scope:[div16u]  from div16u::@2 div16u::@5
  (word) div16u::divisor#6 ← phi( div16u::@2/(word) div16u::divisor#1 div16u::@5/(word) div16u::divisor#2 )
  (word) div16u::quotient#8 ← phi( div16u::@2/(word) div16u::quotient#1 div16u::@5/(word) div16u::quotient#2 )
  (word) div16u::dividend#5 ← phi( div16u::@2/(word) div16u::dividend#0 div16u::@5/(word) div16u::dividend#7 )
  (word) div16u::rem#9 ← phi( div16u::@2/(word) div16u::rem#5 div16u::@5/(word) div16u::rem#3 )
  (byte) div16u::i#2 ← phi( div16u::@2/(byte) div16u::i#3 div16u::@5/(byte) div16u::i#4 )
  (byte) div16u::i#1 ← ++ (byte) div16u::i#2
  (boolean~) div16u::$10 ← (byte) div16u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 16
  if((boolean~) div16u::$10) goto div16u::@1
  to:div16u::@6
div16u::@5: scope:[div16u]  from div16u::@2
  (word) div16u::dividend#7 ← phi( div16u::@2/(word) div16u::dividend#0 )
  (byte) div16u::i#4 ← phi( div16u::@2/(byte) div16u::i#3 )
  (word) div16u::divisor#2 ← phi( div16u::@2/(word) div16u::divisor#1 )
  (word) div16u::rem#7 ← phi( div16u::@2/(word) div16u::rem#5 )
  (word) div16u::quotient#4 ← phi( div16u::@2/(word) div16u::quotient#1 )
  (word) div16u::quotient#2 ← ++ (word) div16u::quotient#4
  (word~) div16u::$9 ← (word) div16u::rem#7 - (word) div16u::divisor#2
  (word) div16u::rem#3 ← (word~) div16u::$9
  to:div16u::@3
div16u::@6: scope:[div16u]  from div16u::@3
  (word) div16u::quotient#5 ← phi( div16u::@3/(word) div16u::quotient#8 )
  (word) div16u::rem#8 ← phi( div16u::@3/(word) div16u::rem#9 )
  (word) rem16u#1 ← (word) div16u::rem#8
  (word) div16u::return#0 ← (word) div16u::quotient#5
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@6
  (word) rem16u#8 ← phi( div16u::@6/(word) rem16u#1 )
  (word) div16u::return#3 ← phi( div16u::@6/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#3
  (word) rem16u#2 ← (word) rem16u#8
  return 
  to:@return
main: scope:[main]  from @15
  (word) rem16u#26 ← phi( @15/(word) rem16u#19 )
  (signed byte) rem8s#22 ← phi( @15/(signed byte) rem8s#21 )
  (byte) rem8u#38 ← phi( @15/(byte) rem8u#35 )
  (byte*) char_cursor#106 ← phi( @15/(byte*) char_cursor#110 )
  (byte*) line_cursor#34 ← phi( @15/(byte*) line_cursor#38 )
  call print_cls param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (word) rem16u#24 ← phi( main/(word) rem16u#26 )
  (signed byte) rem8s#16 ← phi( main/(signed byte) rem8s#22 )
  (byte) rem8u#28 ← phi( main/(byte) rem8u#38 )
  (byte*) char_cursor#67 ← phi( main/(byte*) char_cursor#17 )
  (byte*) line_cursor#21 ← phi( main/(byte*) line_cursor#4 )
  (byte*) line_cursor#5 ← (byte*) line_cursor#21
  (byte*) char_cursor#18 ← (byte*) char_cursor#67
  call test_8s param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (word) rem16u#20 ← phi( main::@1/(word) rem16u#24 )
  (byte*) line_cursor#22 ← phi( main::@1/(byte*) line_cursor#15 )
  (byte*) char_cursor#68 ← phi( main::@1/(byte*) char_cursor#49 )
  (signed byte) rem8s#10 ← phi( main::@1/(signed byte) rem8s#7 )
  (byte) rem8u#18 ← phi( main::@1/(byte) rem8u#11 )
  (byte) rem8u#5 ← (byte) rem8u#18
  (signed byte) rem8s#4 ← (signed byte) rem8s#10
  (byte*) char_cursor#19 ← (byte*) char_cursor#68
  (byte*) line_cursor#6 ← (byte*) line_cursor#22
  call test_8u param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  (signed byte) rem8s#23 ← phi( main::@2/(signed byte) rem8s#4 )
  (word) rem16u#15 ← phi( main::@2/(word) rem16u#20 )
  (byte*) line_cursor#23 ← phi( main::@2/(byte*) line_cursor#13 )
  (byte*) char_cursor#69 ← phi( main::@2/(byte*) char_cursor#40 )
  (byte) rem8u#19 ← phi( main::@2/(byte) rem8u#9 )
  (byte) rem8u#6 ← (byte) rem8u#19
  (byte*) char_cursor#20 ← (byte*) char_cursor#69
  (byte*) line_cursor#7 ← (byte*) line_cursor#23
  call test_16u param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (signed byte) rem8s#17 ← phi( main::@3/(signed byte) rem8s#23 )
  (byte) rem8u#29 ← phi( main::@3/(byte) rem8u#6 )
  (byte*) line_cursor#24 ← phi( main::@3/(byte*) line_cursor#11 )
  (byte*) char_cursor#70 ← phi( main::@3/(byte*) char_cursor#31 )
  (word) rem16u#9 ← phi( main::@3/(word) rem16u#6 )
  (word) rem16u#3 ← (word) rem16u#9
  (byte*) char_cursor#21 ← (byte*) char_cursor#70
  (byte*) line_cursor#8 ← (byte*) line_cursor#24
  to:main::@return
main::@return: scope:[main]  from main::@4
  (word) rem16u#10 ← phi( main::@4/(word) rem16u#3 )
  (signed byte) rem8s#11 ← phi( main::@4/(signed byte) rem8s#17 )
  (byte) rem8u#20 ← phi( main::@4/(byte) rem8u#29 )
  (byte*) char_cursor#71 ← phi( main::@4/(byte*) char_cursor#21 )
  (byte*) line_cursor#25 ← phi( main::@4/(byte*) line_cursor#8 )
  (byte*) line_cursor#9 ← (byte*) line_cursor#25
  (byte*) char_cursor#22 ← (byte*) char_cursor#71
  (byte) rem8u#7 ← (byte) rem8u#20
  (signed byte) rem8s#5 ← (signed byte) rem8s#11
  (word) rem16u#4 ← (word) rem16u#10
  return 
  to:@return
test_16u: scope:[test_16u]  from main::@3
  (byte*) line_cursor#66 ← phi( main::@3/(byte*) line_cursor#7 )
  (byte*) char_cursor#118 ← phi( main::@3/(byte*) char_cursor#20 )
  (word) rem16u#21 ← phi( main::@3/(word) rem16u#15 )
  (word[]) test_16u::dividends#0 ← { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
  (word[]) test_16u::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@11
  (byte*) line_cursor#63 ← phi( test_16u/(byte*) line_cursor#66 test_16u::@11/(byte*) line_cursor#10 )
  (byte*) char_cursor#113 ← phi( test_16u/(byte*) char_cursor#118 test_16u::@11/(byte*) char_cursor#30 )
  (word) rem16u#16 ← phi( test_16u/(word) rem16u#21 test_16u::@11/(word) rem16u#18 )
  (byte) test_16u::i#2 ← phi( test_16u/(byte) test_16u::i#0 test_16u::@11/(byte) test_16u::i#1 )
  (word) test_16u::dividend#0 ← *((word[]) test_16u::dividends#0 + (byte) test_16u::i#2)
  (word) test_16u::divisor#0 ← *((word[]) test_16u::divisors#0 + (byte) test_16u::i#2)
  (word) div16u::dividend#1 ← (word) test_16u::dividend#0
  (word) div16u::divisor#0 ← (word) test_16u::divisor#0
  call div16u param-assignment
  (word) div16u::return#2 ← (word) div16u::return#1
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@1
  (byte) test_16u::i#11 ← phi( test_16u::@1/(byte) test_16u::i#2 )
  (byte*) line_cursor#60 ← phi( test_16u::@1/(byte*) line_cursor#63 )
  (word) test_16u::divisor#3 ← phi( test_16u::@1/(word) test_16u::divisor#0 )
  (byte*) char_cursor#107 ← phi( test_16u::@1/(byte*) char_cursor#113 )
  (word) test_16u::dividend#1 ← phi( test_16u::@1/(word) test_16u::dividend#0 )
  (word) rem16u#11 ← phi( test_16u::@1/(word) rem16u#2 )
  (word) div16u::return#4 ← phi( test_16u::@1/(word) div16u::return#2 )
  (word~) test_16u::$0 ← (word) div16u::return#4
  (word) rem16u#5 ← (word) rem16u#11
  (word) test_16u::res#0 ← (word~) test_16u::$0
  (word) print_word::w#0 ← (word) test_16u::dividend#1
  call print_word param-assignment
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  (byte) test_16u::i#10 ← phi( test_16u::@3/(byte) test_16u::i#11 )
  (byte*) line_cursor#57 ← phi( test_16u::@3/(byte*) line_cursor#60 )
  (word) rem16u#28 ← phi( test_16u::@3/(word) rem16u#5 )
  (word) test_16u::res#4 ← phi( test_16u::@3/(word) test_16u::res#0 )
  (word) test_16u::divisor#2 ← phi( test_16u::@3/(word) test_16u::divisor#3 )
  (byte*) char_cursor#72 ← phi( test_16u::@3/(byte*) char_cursor#10 )
  (byte*) char_cursor#23 ← (byte*) char_cursor#72
  (byte*) print_str::str#1 ← (const string) test_16u::str
  call print_str param-assignment
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  (byte) test_16u::i#9 ← phi( test_16u::@4/(byte) test_16u::i#10 )
  (byte*) line_cursor#54 ← phi( test_16u::@4/(byte*) line_cursor#57 )
  (word) rem16u#27 ← phi( test_16u::@4/(word) rem16u#28 )
  (word) test_16u::res#3 ← phi( test_16u::@4/(word) test_16u::res#4 )
  (word) test_16u::divisor#1 ← phi( test_16u::@4/(word) test_16u::divisor#2 )
  (byte*) char_cursor#73 ← phi( test_16u::@4/(byte*) char_cursor#2 )
  (byte*) char_cursor#24 ← (byte*) char_cursor#73
  (word) print_word::w#1 ← (word) test_16u::divisor#1
  call print_word param-assignment
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  (byte) test_16u::i#8 ← phi( test_16u::@5/(byte) test_16u::i#9 )
  (byte*) line_cursor#51 ← phi( test_16u::@5/(byte*) line_cursor#54 )
  (word) rem16u#25 ← phi( test_16u::@5/(word) rem16u#27 )
  (word) test_16u::res#2 ← phi( test_16u::@5/(word) test_16u::res#3 )
  (byte*) char_cursor#74 ← phi( test_16u::@5/(byte*) char_cursor#10 )
  (byte*) char_cursor#25 ← (byte*) char_cursor#74
  (byte*) print_str::str#2 ← (const string) test_16u::str1
  call print_str param-assignment
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  (byte) test_16u::i#7 ← phi( test_16u::@6/(byte) test_16u::i#8 )
  (byte*) line_cursor#48 ← phi( test_16u::@6/(byte*) line_cursor#51 )
  (word) rem16u#22 ← phi( test_16u::@6/(word) rem16u#25 )
  (word) test_16u::res#1 ← phi( test_16u::@6/(word) test_16u::res#2 )
  (byte*) char_cursor#75 ← phi( test_16u::@6/(byte*) char_cursor#2 )
  (byte*) char_cursor#26 ← (byte*) char_cursor#75
  (word) print_word::w#2 ← (word) test_16u::res#1
  call print_word param-assignment
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  (byte) test_16u::i#6 ← phi( test_16u::@7/(byte) test_16u::i#7 )
  (byte*) line_cursor#44 ← phi( test_16u::@7/(byte*) line_cursor#48 )
  (word) rem16u#17 ← phi( test_16u::@7/(word) rem16u#22 )
  (byte*) char_cursor#76 ← phi( test_16u::@7/(byte*) char_cursor#10 )
  (byte*) char_cursor#27 ← (byte*) char_cursor#76
  (byte*) print_str::str#3 ← (const string) test_16u::str2
  call print_str param-assignment
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  (byte) test_16u::i#5 ← phi( test_16u::@8/(byte) test_16u::i#6 )
  (byte*) line_cursor#39 ← phi( test_16u::@8/(byte*) line_cursor#44 )
  (word) rem16u#12 ← phi( test_16u::@8/(word) rem16u#17 )
  (byte*) char_cursor#77 ← phi( test_16u::@8/(byte*) char_cursor#2 )
  (byte*) char_cursor#28 ← (byte*) char_cursor#77
  (word) print_word::w#3 ← (word) rem16u#12
  call print_word param-assignment
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  (word) rem16u#23 ← phi( test_16u::@9/(word) rem16u#12 )
  (byte) test_16u::i#4 ← phi( test_16u::@9/(byte) test_16u::i#5 )
  (byte*) line_cursor#35 ← phi( test_16u::@9/(byte*) line_cursor#39 )
  (byte*) char_cursor#78 ← phi( test_16u::@9/(byte*) char_cursor#10 )
  (byte*) char_cursor#29 ← (byte*) char_cursor#78
  call print_ln param-assignment
  to:test_16u::@11
test_16u::@11: scope:[test_16u]  from test_16u::@10
  (word) rem16u#18 ← phi( test_16u::@10/(word) rem16u#23 )
  (byte) test_16u::i#3 ← phi( test_16u::@10/(byte) test_16u::i#4 )
  (byte*) char_cursor#79 ← phi( test_16u::@10/(byte*) char_cursor#4 )
  (byte*) line_cursor#26 ← phi( test_16u::@10/(byte*) line_cursor#2 )
  (byte*) line_cursor#10 ← (byte*) line_cursor#26
  (byte*) char_cursor#30 ← (byte*) char_cursor#79
  (byte/word~) test_16u::$9 ← (byte) test_16u::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16u::i#1 ← (byte/word~) test_16u::$9
  (boolean~) test_16u::$10 ← (byte) test_16u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16u::$10) goto test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@11
  (byte*) line_cursor#27 ← phi( test_16u::@11/(byte*) line_cursor#10 )
  (byte*) char_cursor#80 ← phi( test_16u::@11/(byte*) char_cursor#30 )
  (word) rem16u#13 ← phi( test_16u::@11/(word) rem16u#18 )
  (word) rem16u#6 ← (word) rem16u#13
  (byte*) char_cursor#31 ← (byte*) char_cursor#80
  (byte*) line_cursor#11 ← (byte*) line_cursor#27
  return 
  to:@return
test_8u: scope:[test_8u]  from main::@2
  (byte*) line_cursor#67 ← phi( main::@2/(byte*) line_cursor#6 )
  (byte*) char_cursor#119 ← phi( main::@2/(byte*) char_cursor#19 )
  (byte) rem8u#39 ← phi( main::@2/(byte) rem8u#5 )
  (byte[]) test_8u::dividends#0 ← { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
  (byte[]) test_8u::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@11
  (byte*) line_cursor#64 ← phi( test_8u/(byte*) line_cursor#67 test_8u::@11/(byte*) line_cursor#12 )
  (byte*) char_cursor#114 ← phi( test_8u/(byte*) char_cursor#119 test_8u::@11/(byte*) char_cursor#39 )
  (byte) rem8u#30 ← phi( test_8u/(byte) rem8u#39 test_8u::@11/(byte) rem8u#32 )
  (byte) test_8u::i#2 ← phi( test_8u/(byte) test_8u::i#0 test_8u::@11/(byte) test_8u::i#1 )
  (byte) test_8u::dividend#0 ← *((byte[]) test_8u::dividends#0 + (byte) test_8u::i#2)
  (byte) test_8u::divisor#0 ← *((byte[]) test_8u::divisors#0 + (byte) test_8u::i#2)
  (byte) div8u::dividend#2 ← (byte) test_8u::dividend#0
  (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0
  call div8u param-assignment
  (byte) div8u::return#3 ← (byte) div8u::return#1
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@1
  (byte) test_8u::i#11 ← phi( test_8u::@1/(byte) test_8u::i#2 )
  (byte*) line_cursor#61 ← phi( test_8u::@1/(byte*) line_cursor#64 )
  (byte) test_8u::divisor#3 ← phi( test_8u::@1/(byte) test_8u::divisor#0 )
  (byte*) char_cursor#108 ← phi( test_8u::@1/(byte*) char_cursor#114 )
  (byte) test_8u::dividend#1 ← phi( test_8u::@1/(byte) test_8u::dividend#0 )
  (byte) rem8u#21 ← phi( test_8u::@1/(byte) rem8u#2 )
  (byte) div8u::return#6 ← phi( test_8u::@1/(byte) div8u::return#3 )
  (byte~) test_8u::$0 ← (byte) div8u::return#6
  (byte) rem8u#8 ← (byte) rem8u#21
  (byte) test_8u::res#0 ← (byte~) test_8u::$0
  (byte) print_byte::b#3 ← (byte) test_8u::dividend#1
  call print_byte param-assignment
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  (byte) test_8u::i#10 ← phi( test_8u::@3/(byte) test_8u::i#11 )
  (byte*) line_cursor#58 ← phi( test_8u::@3/(byte*) line_cursor#61 )
  (byte) rem8u#54 ← phi( test_8u::@3/(byte) rem8u#8 )
  (byte) test_8u::res#4 ← phi( test_8u::@3/(byte) test_8u::res#0 )
  (byte) test_8u::divisor#2 ← phi( test_8u::@3/(byte) test_8u::divisor#3 )
  (byte*) char_cursor#81 ← phi( test_8u::@3/(byte*) char_cursor#13 )
  (byte*) char_cursor#32 ← (byte*) char_cursor#81
  (byte*) print_str::str#4 ← (const string) test_8u::str
  call print_str param-assignment
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  (byte) test_8u::i#9 ← phi( test_8u::@4/(byte) test_8u::i#10 )
  (byte*) line_cursor#55 ← phi( test_8u::@4/(byte*) line_cursor#58 )
  (byte) rem8u#51 ← phi( test_8u::@4/(byte) rem8u#54 )
  (byte) test_8u::res#3 ← phi( test_8u::@4/(byte) test_8u::res#4 )
  (byte) test_8u::divisor#1 ← phi( test_8u::@4/(byte) test_8u::divisor#2 )
  (byte*) char_cursor#82 ← phi( test_8u::@4/(byte*) char_cursor#2 )
  (byte*) char_cursor#33 ← (byte*) char_cursor#82
  (byte) print_byte::b#4 ← (byte) test_8u::divisor#1
  call print_byte param-assignment
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  (byte) test_8u::i#8 ← phi( test_8u::@5/(byte) test_8u::i#9 )
  (byte*) line_cursor#52 ← phi( test_8u::@5/(byte*) line_cursor#55 )
  (byte) rem8u#47 ← phi( test_8u::@5/(byte) rem8u#51 )
  (byte) test_8u::res#2 ← phi( test_8u::@5/(byte) test_8u::res#3 )
  (byte*) char_cursor#83 ← phi( test_8u::@5/(byte*) char_cursor#13 )
  (byte*) char_cursor#34 ← (byte*) char_cursor#83
  (byte*) print_str::str#5 ← (const string) test_8u::str1
  call print_str param-assignment
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  (byte) test_8u::i#7 ← phi( test_8u::@6/(byte) test_8u::i#8 )
  (byte*) line_cursor#49 ← phi( test_8u::@6/(byte*) line_cursor#52 )
  (byte) rem8u#40 ← phi( test_8u::@6/(byte) rem8u#47 )
  (byte) test_8u::res#1 ← phi( test_8u::@6/(byte) test_8u::res#2 )
  (byte*) char_cursor#84 ← phi( test_8u::@6/(byte*) char_cursor#2 )
  (byte*) char_cursor#35 ← (byte*) char_cursor#84
  (byte) print_byte::b#5 ← (byte) test_8u::res#1
  call print_byte param-assignment
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  (byte) test_8u::i#6 ← phi( test_8u::@7/(byte) test_8u::i#7 )
  (byte*) line_cursor#45 ← phi( test_8u::@7/(byte*) line_cursor#49 )
  (byte) rem8u#31 ← phi( test_8u::@7/(byte) rem8u#40 )
  (byte*) char_cursor#85 ← phi( test_8u::@7/(byte*) char_cursor#13 )
  (byte*) char_cursor#36 ← (byte*) char_cursor#85
  (byte*) print_str::str#6 ← (const string) test_8u::str2
  call print_str param-assignment
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  (byte) test_8u::i#5 ← phi( test_8u::@8/(byte) test_8u::i#6 )
  (byte*) line_cursor#40 ← phi( test_8u::@8/(byte*) line_cursor#45 )
  (byte) rem8u#22 ← phi( test_8u::@8/(byte) rem8u#31 )
  (byte*) char_cursor#86 ← phi( test_8u::@8/(byte*) char_cursor#2 )
  (byte*) char_cursor#37 ← (byte*) char_cursor#86
  (byte) print_byte::b#6 ← (byte) rem8u#22
  call print_byte param-assignment
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  (byte) rem8u#41 ← phi( test_8u::@9/(byte) rem8u#22 )
  (byte) test_8u::i#4 ← phi( test_8u::@9/(byte) test_8u::i#5 )
  (byte*) line_cursor#36 ← phi( test_8u::@9/(byte*) line_cursor#40 )
  (byte*) char_cursor#87 ← phi( test_8u::@9/(byte*) char_cursor#13 )
  (byte*) char_cursor#38 ← (byte*) char_cursor#87
  call print_ln param-assignment
  to:test_8u::@11
test_8u::@11: scope:[test_8u]  from test_8u::@10
  (byte) rem8u#32 ← phi( test_8u::@10/(byte) rem8u#41 )
  (byte) test_8u::i#3 ← phi( test_8u::@10/(byte) test_8u::i#4 )
  (byte*) char_cursor#88 ← phi( test_8u::@10/(byte*) char_cursor#4 )
  (byte*) line_cursor#28 ← phi( test_8u::@10/(byte*) line_cursor#2 )
  (byte*) line_cursor#12 ← (byte*) line_cursor#28
  (byte*) char_cursor#39 ← (byte*) char_cursor#88
  (byte) test_8u::i#1 ← ++ (byte) test_8u::i#3
  (boolean~) test_8u::$9 ← (byte) test_8u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8u::$9) goto test_8u::@1
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@11
  (byte*) line_cursor#29 ← phi( test_8u::@11/(byte*) line_cursor#12 )
  (byte*) char_cursor#89 ← phi( test_8u::@11/(byte*) char_cursor#39 )
  (byte) rem8u#23 ← phi( test_8u::@11/(byte) rem8u#32 )
  (byte) rem8u#9 ← (byte) rem8u#23
  (byte*) char_cursor#40 ← (byte*) char_cursor#89
  (byte*) line_cursor#13 ← (byte*) line_cursor#29
  return 
  to:@return
test_8s: scope:[test_8s]  from main::@1
  (byte*) line_cursor#68 ← phi( main::@1/(byte*) line_cursor#5 )
  (byte*) char_cursor#120 ← phi( main::@1/(byte*) char_cursor#18 )
  (signed byte) rem8s#24 ← phi( main::@1/(signed byte) rem8s#16 )
  (byte) rem8u#42 ← phi( main::@1/(byte) rem8u#28 )
  (signed byte/signed word/signed dword~) test_8s::$0 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte/signed word/signed dword~) test_8s::$1 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte[]) test_8s::dividends#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 127, (signed byte/signed word/signed dword~) test_8s::$0, (signed byte/signed word/signed dword~) test_8s::$1, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (signed byte/signed word/signed dword~) test_8s::$2 ← - (byte/signed byte/word/signed word/dword/signed dword) 11
  (signed byte/signed word/signed dword~) test_8s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte[]) test_8s::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (signed byte/signed word/signed dword~) test_8s::$2, (signed byte/signed word/signed dword~) test_8s::$3, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8s::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@11
  (byte*) line_cursor#65 ← phi( test_8s/(byte*) line_cursor#68 test_8s::@11/(byte*) line_cursor#14 )
  (byte*) char_cursor#115 ← phi( test_8s/(byte*) char_cursor#120 test_8s::@11/(byte*) char_cursor#48 )
  (signed byte) rem8s#18 ← phi( test_8s/(signed byte) rem8s#24 test_8s::@11/(signed byte) rem8s#20 )
  (byte) rem8u#33 ← phi( test_8s/(byte) rem8u#42 test_8s::@11/(byte) rem8u#34 )
  (byte) test_8s::i#2 ← phi( test_8s/(byte) test_8s::i#0 test_8s::@11/(byte) test_8s::i#1 )
  (signed byte) test_8s::dividend#0 ← *((signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#2)
  (signed byte) test_8s::divisor#0 ← *((signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#2)
  (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0
  (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0
  call div8s param-assignment
  (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@1
  (byte) test_8s::i#11 ← phi( test_8s::@1/(byte) test_8s::i#2 )
  (byte*) line_cursor#62 ← phi( test_8s::@1/(byte*) line_cursor#65 )
  (signed byte) test_8s::divisor#3 ← phi( test_8s::@1/(signed byte) test_8s::divisor#0 )
  (byte*) char_cursor#109 ← phi( test_8s::@1/(byte*) char_cursor#115 )
  (signed byte) test_8s::dividend#1 ← phi( test_8s::@1/(signed byte) test_8s::dividend#0 )
  (signed byte) rem8s#12 ← phi( test_8s::@1/(signed byte) rem8s#3 )
  (byte) rem8u#24 ← phi( test_8s::@1/(byte) rem8u#4 )
  (signed byte) div8s::return#5 ← phi( test_8s::@1/(signed byte) div8s::return#3 )
  (signed byte~) test_8s::$4 ← (signed byte) div8s::return#5
  (byte) rem8u#10 ← (byte) rem8u#24
  (signed byte) rem8s#6 ← (signed byte) rem8s#12
  (signed byte) test_8s::res#0 ← (signed byte~) test_8s::$4
  (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#1
  call print_sbyte param-assignment
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  (byte) rem8u#58 ← phi( test_8s::@3/(byte) rem8u#10 )
  (byte) test_8s::i#10 ← phi( test_8s::@3/(byte) test_8s::i#11 )
  (byte*) line_cursor#59 ← phi( test_8s::@3/(byte*) line_cursor#62 )
  (signed byte) rem8s#30 ← phi( test_8s::@3/(signed byte) rem8s#6 )
  (signed byte) test_8s::res#4 ← phi( test_8s::@3/(signed byte) test_8s::res#0 )
  (signed byte) test_8s::divisor#2 ← phi( test_8s::@3/(signed byte) test_8s::divisor#3 )
  (byte*) char_cursor#90 ← phi( test_8s::@3/(byte*) char_cursor#7 )
  (byte*) char_cursor#41 ← (byte*) char_cursor#90
  (byte*) print_str::str#7 ← (const string) test_8s::str
  call print_str param-assignment
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  (byte) rem8u#57 ← phi( test_8s::@4/(byte) rem8u#58 )
  (byte) test_8s::i#9 ← phi( test_8s::@4/(byte) test_8s::i#10 )
  (byte*) line_cursor#56 ← phi( test_8s::@4/(byte*) line_cursor#59 )
  (signed byte) rem8s#29 ← phi( test_8s::@4/(signed byte) rem8s#30 )
  (signed byte) test_8s::res#3 ← phi( test_8s::@4/(signed byte) test_8s::res#4 )
  (signed byte) test_8s::divisor#1 ← phi( test_8s::@4/(signed byte) test_8s::divisor#2 )
  (byte*) char_cursor#91 ← phi( test_8s::@4/(byte*) char_cursor#2 )
  (byte*) char_cursor#42 ← (byte*) char_cursor#91
  (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#1
  call print_sbyte param-assignment
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  (byte) rem8u#56 ← phi( test_8s::@5/(byte) rem8u#57 )
  (byte) test_8s::i#8 ← phi( test_8s::@5/(byte) test_8s::i#9 )
  (byte*) line_cursor#53 ← phi( test_8s::@5/(byte*) line_cursor#56 )
  (signed byte) rem8s#28 ← phi( test_8s::@5/(signed byte) rem8s#29 )
  (signed byte) test_8s::res#2 ← phi( test_8s::@5/(signed byte) test_8s::res#3 )
  (byte*) char_cursor#92 ← phi( test_8s::@5/(byte*) char_cursor#7 )
  (byte*) char_cursor#43 ← (byte*) char_cursor#92
  (byte*) print_str::str#8 ← (const string) test_8s::str1
  call print_str param-assignment
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  (byte) rem8u#55 ← phi( test_8s::@6/(byte) rem8u#56 )
  (byte) test_8s::i#7 ← phi( test_8s::@6/(byte) test_8s::i#8 )
  (byte*) line_cursor#50 ← phi( test_8s::@6/(byte*) line_cursor#53 )
  (signed byte) rem8s#25 ← phi( test_8s::@6/(signed byte) rem8s#28 )
  (signed byte) test_8s::res#1 ← phi( test_8s::@6/(signed byte) test_8s::res#2 )
  (byte*) char_cursor#93 ← phi( test_8s::@6/(byte*) char_cursor#2 )
  (byte*) char_cursor#44 ← (byte*) char_cursor#93
  (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#1
  call print_sbyte param-assignment
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  (byte) rem8u#52 ← phi( test_8s::@7/(byte) rem8u#55 )
  (byte) test_8s::i#6 ← phi( test_8s::@7/(byte) test_8s::i#7 )
  (byte*) line_cursor#46 ← phi( test_8s::@7/(byte*) line_cursor#50 )
  (signed byte) rem8s#19 ← phi( test_8s::@7/(signed byte) rem8s#25 )
  (byte*) char_cursor#94 ← phi( test_8s::@7/(byte*) char_cursor#7 )
  (byte*) char_cursor#45 ← (byte*) char_cursor#94
  (byte*) print_str::str#9 ← (const string) test_8s::str2
  call print_str param-assignment
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  (byte) rem8u#48 ← phi( test_8s::@8/(byte) rem8u#52 )
  (byte) test_8s::i#5 ← phi( test_8s::@8/(byte) test_8s::i#6 )
  (byte*) line_cursor#41 ← phi( test_8s::@8/(byte*) line_cursor#46 )
  (signed byte) rem8s#13 ← phi( test_8s::@8/(signed byte) rem8s#19 )
  (byte*) char_cursor#95 ← phi( test_8s::@8/(byte*) char_cursor#2 )
  (byte*) char_cursor#46 ← (byte*) char_cursor#95
  (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#13
  call print_sbyte param-assignment
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  (signed byte) rem8s#26 ← phi( test_8s::@9/(signed byte) rem8s#13 )
  (byte) rem8u#43 ← phi( test_8s::@9/(byte) rem8u#48 )
  (byte) test_8s::i#4 ← phi( test_8s::@9/(byte) test_8s::i#5 )
  (byte*) line_cursor#37 ← phi( test_8s::@9/(byte*) line_cursor#41 )
  (byte*) char_cursor#96 ← phi( test_8s::@9/(byte*) char_cursor#7 )
  (byte*) char_cursor#47 ← (byte*) char_cursor#96
  call print_ln param-assignment
  to:test_8s::@11
test_8s::@11: scope:[test_8s]  from test_8s::@10
  (signed byte) rem8s#20 ← phi( test_8s::@10/(signed byte) rem8s#26 )
  (byte) rem8u#34 ← phi( test_8s::@10/(byte) rem8u#43 )
  (byte) test_8s::i#3 ← phi( test_8s::@10/(byte) test_8s::i#4 )
  (byte*) char_cursor#97 ← phi( test_8s::@10/(byte*) char_cursor#4 )
  (byte*) line_cursor#30 ← phi( test_8s::@10/(byte*) line_cursor#2 )
  (byte*) line_cursor#14 ← (byte*) line_cursor#30
  (byte*) char_cursor#48 ← (byte*) char_cursor#97
  (byte) test_8s::i#1 ← ++ (byte) test_8s::i#3
  (boolean~) test_8s::$13 ← (byte) test_8s::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8s::$13) goto test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@11
  (byte*) line_cursor#31 ← phi( test_8s::@11/(byte*) line_cursor#14 )
  (byte*) char_cursor#98 ← phi( test_8s::@11/(byte*) char_cursor#48 )
  (signed byte) rem8s#14 ← phi( test_8s::@11/(signed byte) rem8s#20 )
  (byte) rem8u#25 ← phi( test_8s::@11/(byte) rem8u#34 )
  (byte) rem8u#11 ← (byte) rem8u#25
  (signed byte) rem8s#7 ← (signed byte) rem8s#14
  (byte*) char_cursor#49 ← (byte*) char_cursor#98
  (byte*) line_cursor#15 ← (byte*) line_cursor#31
  return 
  to:@return
@15: scope:[]  from @10
  (word) rem16u#19 ← phi( @10/(word) rem16u#0 )
  (signed byte) rem8s#21 ← phi( @10/(signed byte) rem8s#27 )
  (byte) rem8u#35 ← phi( @10/(byte) rem8u#44 )
  (byte*) char_cursor#110 ← phi( @10/(byte*) char_cursor#116 )
  (byte*) line_cursor#38 ← phi( @10/(byte*) line_cursor#42 )
  call main param-assignment
  to:@16
@16: scope:[]  from @15
  (word) rem16u#14 ← phi( @15/(word) rem16u#4 )
  (signed byte) rem8s#15 ← phi( @15/(signed byte) rem8s#5 )
  (byte) rem8u#26 ← phi( @15/(byte) rem8u#7 )
  (byte*) char_cursor#99 ← phi( @15/(byte*) char_cursor#22 )
  (byte*) line_cursor#32 ← phi( @15/(byte*) line_cursor#9 )
  (byte*) line_cursor#16 ← (byte*) line_cursor#32
  (byte*) char_cursor#50 ← (byte*) char_cursor#99
  (byte) rem8u#12 ← (byte) rem8u#26
  (signed byte) rem8s#8 ← (signed byte) rem8s#15
  (word) rem16u#7 ← (word) rem16u#14
  to:@end
@end: scope:[]  from @16

SYMBOL TABLE SSA
(label) @10
(label) @15
(label) @16
(label) @8
(label) @9
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) char_cursor
(byte*) char_cursor#0
(byte*) char_cursor#1
(byte*) char_cursor#10
(byte*) char_cursor#100
(byte*) char_cursor#101
(byte*) char_cursor#102
(byte*) char_cursor#103
(byte*) char_cursor#104
(byte*) char_cursor#105
(byte*) char_cursor#106
(byte*) char_cursor#107
(byte*) char_cursor#108
(byte*) char_cursor#109
(byte*) char_cursor#11
(byte*) char_cursor#110
(byte*) char_cursor#111
(byte*) char_cursor#112
(byte*) char_cursor#113
(byte*) char_cursor#114
(byte*) char_cursor#115
(byte*) char_cursor#116
(byte*) char_cursor#117
(byte*) char_cursor#118
(byte*) char_cursor#119
(byte*) char_cursor#12
(byte*) char_cursor#120
(byte*) char_cursor#121
(byte*) char_cursor#13
(byte*) char_cursor#14
(byte*) char_cursor#15
(byte*) char_cursor#16
(byte*) char_cursor#17
(byte*) char_cursor#18
(byte*) char_cursor#19
(byte*) char_cursor#2
(byte*) char_cursor#20
(byte*) char_cursor#21
(byte*) char_cursor#22
(byte*) char_cursor#23
(byte*) char_cursor#24
(byte*) char_cursor#25
(byte*) char_cursor#26
(byte*) char_cursor#27
(byte*) char_cursor#28
(byte*) char_cursor#29
(byte*) char_cursor#3
(byte*) char_cursor#30
(byte*) char_cursor#31
(byte*) char_cursor#32
(byte*) char_cursor#33
(byte*) char_cursor#34
(byte*) char_cursor#35
(byte*) char_cursor#36
(byte*) char_cursor#37
(byte*) char_cursor#38
(byte*) char_cursor#39
(byte*) char_cursor#4
(byte*) char_cursor#40
(byte*) char_cursor#41
(byte*) char_cursor#42
(byte*) char_cursor#43
(byte*) char_cursor#44
(byte*) char_cursor#45
(byte*) char_cursor#46
(byte*) char_cursor#47
(byte*) char_cursor#48
(byte*) char_cursor#49
(byte*) char_cursor#5
(byte*) char_cursor#50
(byte*) char_cursor#51
(byte*) char_cursor#52
(byte*) char_cursor#53
(byte*) char_cursor#54
(byte*) char_cursor#55
(byte*) char_cursor#56
(byte*) char_cursor#57
(byte*) char_cursor#58
(byte*) char_cursor#59
(byte*) char_cursor#6
(byte*) char_cursor#60
(byte*) char_cursor#61
(byte*) char_cursor#62
(byte*) char_cursor#63
(byte*) char_cursor#64
(byte*) char_cursor#65
(byte*) char_cursor#66
(byte*) char_cursor#67
(byte*) char_cursor#68
(byte*) char_cursor#69
(byte*) char_cursor#7
(byte*) char_cursor#70
(byte*) char_cursor#71
(byte*) char_cursor#72
(byte*) char_cursor#73
(byte*) char_cursor#74
(byte*) char_cursor#75
(byte*) char_cursor#76
(byte*) char_cursor#77
(byte*) char_cursor#78
(byte*) char_cursor#79
(byte*) char_cursor#8
(byte*) char_cursor#80
(byte*) char_cursor#81
(byte*) char_cursor#82
(byte*) char_cursor#83
(byte*) char_cursor#84
(byte*) char_cursor#85
(byte*) char_cursor#86
(byte*) char_cursor#87
(byte*) char_cursor#88
(byte*) char_cursor#89
(byte*) char_cursor#9
(byte*) char_cursor#90
(byte*) char_cursor#91
(byte*) char_cursor#92
(byte*) char_cursor#93
(byte*) char_cursor#94
(byte*) char_cursor#95
(byte*) char_cursor#96
(byte*) char_cursor#97
(byte*) char_cursor#98
(byte*) char_cursor#99
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(byte~) div16u::$1
(boolean~) div16u::$10
(byte~) div16u::$2
(boolean~) div16u::$3
(boolean~) div16u::$4
(word~) div16u::$5
(word~) div16u::$6
(boolean~) div16u::$7
(boolean~) div16u::$8
(word~) div16u::$9
(label) div16u::@1
(label) div16u::@2
(label) div16u::@3
(label) div16u::@4
(label) div16u::@5
(label) div16u::@6
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::dividend#2
(word) div16u::dividend#3
(word) div16u::dividend#4
(word) div16u::dividend#5
(word) div16u::dividend#6
(word) div16u::dividend#7
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::divisor#2
(word) div16u::divisor#3
(word) div16u::divisor#4
(word) div16u::divisor#5
(word) div16u::divisor#6
(byte) div16u::i
(byte) div16u::i#0
(byte) div16u::i#1
(byte) div16u::i#2
(byte) div16u::i#3
(byte) div16u::i#4
(byte) div16u::i#5
(byte) div16u::i#6
(word) div16u::quotient
(word) div16u::quotient#0
(word) div16u::quotient#1
(word) div16u::quotient#2
(word) div16u::quotient#3
(word) div16u::quotient#4
(word) div16u::quotient#5
(word) div16u::quotient#6
(word) div16u::quotient#7
(word) div16u::quotient#8
(word) div16u::rem
(word) div16u::rem#0
(word) div16u::rem#1
(word) div16u::rem#2
(word) div16u::rem#3
(word) div16u::rem#4
(word) div16u::rem#5
(word) div16u::rem#6
(word) div16u::rem#7
(word) div16u::rem#8
(word) div16u::rem#9
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(boolean~) div8s::$0
(boolean~) div8s::$1
(byte~) div8s::$10
(byte~) div8s::$11
(boolean~) div8s::$12
(boolean~) div8s::$13
(signed byte~) div8s::$14
(signed byte~) div8s::$15
(signed byte~) div8s::$16
(signed byte~) div8s::$17
(signed byte~) div8s::$18
(signed byte~) div8s::$19
(signed byte~) div8s::$2
(byte~) div8s::$3
(byte~) div8s::$4
(boolean~) div8s::$5
(boolean~) div8s::$6
(signed byte~) div8s::$7
(byte~) div8s::$8
(byte~) div8s::$9
(label) div8s::@1
(label) div8s::@11
(label) div8s::@15
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@7
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0
(signed byte) div8s::dividend#1
(signed byte) div8s::dividend#2
(signed byte) div8s::dividend#3
(byte) div8s::dividendb
(byte) div8s::dividendb#0
(byte) div8s::dividendb#1
(byte) div8s::dividendb#2
(byte) div8s::dividendb#3
(byte) div8s::dividendb#4
(byte) div8s::dividendb#5
(byte) div8s::dividendb#6
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0
(signed byte) div8s::divisor#1
(signed byte) div8s::divisor#2
(signed byte) div8s::divisor#3
(signed byte) div8s::divisor#4
(signed byte) div8s::divisor#5
(signed byte) div8s::divisor#6
(byte) div8s::divisorb
(byte) div8s::divisorb#0
(byte) div8s::divisorb#1
(byte) div8s::divisorb#2
(byte) div8s::divisorb#3
(byte) div8s::neg
(byte) div8s::neg#0
(byte) div8s::neg#1
(byte) div8s::neg#2
(byte) div8s::neg#3
(byte) div8s::neg#4
(byte) div8s::neg#5
(byte) div8s::neg#6
(byte) div8s::neg#7
(byte) div8s::neg#8
(byte) div8s::resultb
(byte) div8s::resultb#0
(byte) div8s::resultb#1
(byte) div8s::resultb#2
(signed byte) div8s::return
(signed byte) div8s::return#0
(signed byte) div8s::return#1
(signed byte) div8s::return#2
(signed byte) div8s::return#3
(signed byte) div8s::return#4
(signed byte) div8s::return#5
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$0
(byte~) div8u::$1
(boolean~) div8u::$2
(boolean~) div8u::$3
(byte~) div8u::$4
(byte~) div8u::$5
(boolean~) div8u::$6
(boolean~) div8u::$7
(byte/signed byte/word/signed word/dword/signed dword~) div8u::$8
(boolean~) div8u::$9
(label) div8u::@1
(label) div8u::@2
(label) div8u::@3
(label) div8u::@4
(label) div8u::@5
(label) div8u::@6
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0
(byte) div8u::dividend#1
(byte) div8u::dividend#2
(byte) div8u::dividend#3
(byte) div8u::dividend#4
(byte) div8u::dividend#5
(byte) div8u::dividend#6
(byte) div8u::dividend#7
(byte) div8u::dividend#8
(byte) div8u::divisor
(byte) div8u::divisor#0
(byte) div8u::divisor#1
(byte) div8u::divisor#2
(byte) div8u::divisor#3
(byte) div8u::divisor#4
(byte) div8u::divisor#5
(byte) div8u::divisor#6
(byte) div8u::divisor#7
(byte) div8u::i
(byte) div8u::i#0
(byte) div8u::i#1
(byte) div8u::i#2
(byte) div8u::i#3
(byte) div8u::i#4
(byte) div8u::i#5
(byte) div8u::i#6
(byte) div8u::quotient
(byte) div8u::quotient#0
(byte) div8u::quotient#1
(byte) div8u::quotient#2
(byte) div8u::quotient#3
(byte) div8u::quotient#4
(byte) div8u::quotient#5
(byte) div8u::quotient#6
(byte) div8u::quotient#7
(byte) div8u::quotient#8
(byte) div8u::rem
(byte) div8u::rem#0
(byte) div8u::rem#1
(byte) div8u::rem#2
(byte) div8u::rem#3
(byte) div8u::rem#4
(byte) div8u::rem#5
(byte) div8u::rem#6
(byte) div8u::rem#7
(byte) div8u::rem#8
(byte) div8u::rem#9
(byte) div8u::return
(byte) div8u::return#0
(byte) div8u::return#1
(byte) div8u::return#2
(byte) div8u::return#3
(byte) div8u::return#4
(byte) div8u::return#5
(byte) div8u::return#6
(byte*) line_cursor
(byte*) line_cursor#0
(byte*) line_cursor#1
(byte*) line_cursor#10
(byte*) line_cursor#11
(byte*) line_cursor#12
(byte*) line_cursor#13
(byte*) line_cursor#14
(byte*) line_cursor#15
(byte*) line_cursor#16
(byte*) line_cursor#17
(byte*) line_cursor#18
(byte*) line_cursor#19
(byte*) line_cursor#2
(byte*) line_cursor#20
(byte*) line_cursor#21
(byte*) line_cursor#22
(byte*) line_cursor#23
(byte*) line_cursor#24
(byte*) line_cursor#25
(byte*) line_cursor#26
(byte*) line_cursor#27
(byte*) line_cursor#28
(byte*) line_cursor#29
(byte*) line_cursor#3
(byte*) line_cursor#30
(byte*) line_cursor#31
(byte*) line_cursor#32
(byte*) line_cursor#33
(byte*) line_cursor#34
(byte*) line_cursor#35
(byte*) line_cursor#36
(byte*) line_cursor#37
(byte*) line_cursor#38
(byte*) line_cursor#39
(byte*) line_cursor#4
(byte*) line_cursor#40
(byte*) line_cursor#41
(byte*) line_cursor#42
(byte*) line_cursor#43
(byte*) line_cursor#44
(byte*) line_cursor#45
(byte*) line_cursor#46
(byte*) line_cursor#47
(byte*) line_cursor#48
(byte*) line_cursor#49
(byte*) line_cursor#5
(byte*) line_cursor#50
(byte*) line_cursor#51
(byte*) line_cursor#52
(byte*) line_cursor#53
(byte*) line_cursor#54
(byte*) line_cursor#55
(byte*) line_cursor#56
(byte*) line_cursor#57
(byte*) line_cursor#58
(byte*) line_cursor#59
(byte*) line_cursor#6
(byte*) line_cursor#60
(byte*) line_cursor#61
(byte*) line_cursor#62
(byte*) line_cursor#63
(byte*) line_cursor#64
(byte*) line_cursor#65
(byte*) line_cursor#66
(byte*) line_cursor#67
(byte*) line_cursor#68
(byte*) line_cursor#7
(byte*) line_cursor#8
(byte*) line_cursor#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(byte~) print_byte::$2
(const string) print_byte::$4 = (string) "0123456789abcdef"
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(byte) print_byte::b#5
(byte) print_byte::b#6
(byte) print_byte::b#7
(byte) print_byte::b#8
(byte[]) print_byte::hextab
(byte[]) print_byte::hextab#0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0
(signed byte) print_sbyte::b#1
(signed byte) print_sbyte::b#2
(signed byte) print_sbyte::b#3
(signed byte) print_sbyte::b#4
(signed byte) print_sbyte::b#5
(signed byte) print_sbyte::b#6
(signed byte) print_sbyte::b#7
(signed byte) print_sbyte::b#8
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3
(word) print_word::w#4
(word) print_word::w#5
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#3
(word) rem16u#4
(word) rem16u#5
(word) rem16u#6
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed byte) rem8s
(signed byte) rem8s#0
(signed byte) rem8s#1
(signed byte) rem8s#10
(signed byte) rem8s#11
(signed byte) rem8s#12
(signed byte) rem8s#13
(signed byte) rem8s#14
(signed byte) rem8s#15
(signed byte) rem8s#16
(signed byte) rem8s#17
(signed byte) rem8s#18
(signed byte) rem8s#19
(signed byte) rem8s#2
(signed byte) rem8s#20
(signed byte) rem8s#21
(signed byte) rem8s#22
(signed byte) rem8s#23
(signed byte) rem8s#24
(signed byte) rem8s#25
(signed byte) rem8s#26
(signed byte) rem8s#27
(signed byte) rem8s#28
(signed byte) rem8s#29
(signed byte) rem8s#3
(signed byte) rem8s#30
(signed byte) rem8s#4
(signed byte) rem8s#5
(signed byte) rem8s#6
(signed byte) rem8s#7
(signed byte) rem8s#8
(signed byte) rem8s#9
(byte) rem8u
(byte) rem8u#0
(byte) rem8u#1
(byte) rem8u#10
(byte) rem8u#11
(byte) rem8u#12
(byte) rem8u#13
(byte) rem8u#14
(byte) rem8u#15
(byte) rem8u#16
(byte) rem8u#17
(byte) rem8u#18
(byte) rem8u#19
(byte) rem8u#2
(byte) rem8u#20
(byte) rem8u#21
(byte) rem8u#22
(byte) rem8u#23
(byte) rem8u#24
(byte) rem8u#25
(byte) rem8u#26
(byte) rem8u#27
(byte) rem8u#28
(byte) rem8u#29
(byte) rem8u#3
(byte) rem8u#30
(byte) rem8u#31
(byte) rem8u#32
(byte) rem8u#33
(byte) rem8u#34
(byte) rem8u#35
(byte) rem8u#36
(byte) rem8u#37
(byte) rem8u#38
(byte) rem8u#39
(byte) rem8u#4
(byte) rem8u#40
(byte) rem8u#41
(byte) rem8u#42
(byte) rem8u#43
(byte) rem8u#44
(byte) rem8u#45
(byte) rem8u#46
(byte) rem8u#47
(byte) rem8u#48
(byte) rem8u#49
(byte) rem8u#5
(byte) rem8u#50
(byte) rem8u#51
(byte) rem8u#52
(byte) rem8u#53
(byte) rem8u#54
(byte) rem8u#55
(byte) rem8u#56
(byte) rem8u#57
(byte) rem8u#58
(byte) rem8u#6
(byte) rem8u#7
(byte) rem8u#8
(byte) rem8u#9
(void()) test_16u()
(word~) test_16u::$0
(boolean~) test_16u::$10
(byte/word~) test_16u::$9
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@11
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0
(word) test_16u::dividend#1
(word[]) test_16u::dividends
(word[]) test_16u::dividends#0
(word) test_16u::divisor
(word) test_16u::divisor#0
(word) test_16u::divisor#1
(word) test_16u::divisor#2
(word) test_16u::divisor#3
(word[]) test_16u::divisors
(word[]) test_16u::divisors#0
(byte) test_16u::i
(byte) test_16u::i#0
(byte) test_16u::i#1
(byte) test_16u::i#10
(byte) test_16u::i#11
(byte) test_16u::i#2
(byte) test_16u::i#3
(byte) test_16u::i#4
(byte) test_16u::i#5
(byte) test_16u::i#6
(byte) test_16u::i#7
(byte) test_16u::i#8
(byte) test_16u::i#9
(word) test_16u::res
(word) test_16u::res#0
(word) test_16u::res#1
(word) test_16u::res#2
(word) test_16u::res#3
(word) test_16u::res#4
(const string) test_16u::str = (string) " / @"
(const string) test_16u::str1 = (string) " = @"
(const string) test_16u::str2 = (string) " @"
(void()) test_8s()
(signed byte/signed word/signed dword~) test_8s::$0
(signed byte/signed word/signed dword~) test_8s::$1
(boolean~) test_8s::$13
(signed byte/signed word/signed dword~) test_8s::$2
(signed byte/signed word/signed dword~) test_8s::$3
(signed byte~) test_8s::$4
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@11
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0
(signed byte) test_8s::dividend#1
(signed byte[]) test_8s::dividends
(signed byte[]) test_8s::dividends#0
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0
(signed byte) test_8s::divisor#1
(signed byte) test_8s::divisor#2
(signed byte) test_8s::divisor#3
(signed byte[]) test_8s::divisors
(signed byte[]) test_8s::divisors#0
(byte) test_8s::i
(byte) test_8s::i#0
(byte) test_8s::i#1
(byte) test_8s::i#10
(byte) test_8s::i#11
(byte) test_8s::i#2
(byte) test_8s::i#3
(byte) test_8s::i#4
(byte) test_8s::i#5
(byte) test_8s::i#6
(byte) test_8s::i#7
(byte) test_8s::i#8
(byte) test_8s::i#9
(signed byte) test_8s::res
(signed byte) test_8s::res#0
(signed byte) test_8s::res#1
(signed byte) test_8s::res#2
(signed byte) test_8s::res#3
(signed byte) test_8s::res#4
(const string) test_8s::str = (string) " / @"
(const string) test_8s::str1 = (string) " = @"
(const string) test_8s::str2 = (string) " @"
(void()) test_8u()
(byte~) test_8u::$0
(boolean~) test_8u::$9
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0
(byte) test_8u::dividend#1
(byte[]) test_8u::dividends
(byte[]) test_8u::dividends#0
(byte) test_8u::divisor
(byte) test_8u::divisor#0
(byte) test_8u::divisor#1
(byte) test_8u::divisor#2
(byte) test_8u::divisor#3
(byte[]) test_8u::divisors
(byte[]) test_8u::divisors#0
(byte) test_8u::i
(byte) test_8u::i#0
(byte) test_8u::i#1
(byte) test_8u::i#10
(byte) test_8u::i#11
(byte) test_8u::i#2
(byte) test_8u::i#3
(byte) test_8u::i#4
(byte) test_8u::i#5
(byte) test_8u::i#6
(byte) test_8u::i#7
(byte) test_8u::i#8
(byte) test_8u::i#9
(byte) test_8u::res
(byte) test_8u::res#0
(byte) test_8u::res#1
(byte) test_8u::res#2
(byte) test_8u::res#3
(byte) test_8u::res#4
(const string) test_8u::str = (string) " / @"
(const string) test_8u::str1 = (string) " = @"
(const string) test_8u::str2 = (string) " @"

OPTIMIZING CONTROL FLOW GRAPH
Inversing boolean not (boolean~) print_sbyte::$1 ← (signed byte) print_sbyte::b#5 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div8u::$3 ← (byte~) div8u::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div8u::$2 ← (byte~) div8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div8u::$7 ← (byte) div8u::rem#5 < (byte) div8u::divisor#2 from (boolean~) div8u::$6 ← (byte) div8u::rem#5 >= (byte) div8u::divisor#2
Inversing boolean not (boolean~) div8s::$1 ← (signed byte) div8s::dividend#1 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div8s::$0 ← (signed byte) div8s::dividend#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div8s::$6 ← (signed byte) div8s::divisor#1 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div8s::$5 ← (signed byte) div8s::divisor#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div8s::$13 ← (byte) div8s::neg#4 != (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div8s::$12 ← (byte) div8s::neg#4 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div16u::$4 ← (byte~) div16u::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div16u::$3 ← (byte~) div16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div16u::$8 ← (word) div16u::rem#5 < (word) div16u::divisor#1 from (boolean~) div16u::$7 ← (word) div16u::rem#5 >= (word) div16u::divisor#1
Succesful SSA optimization Pass2UnaryNotSimplification
Not aliassing across scopes: print_str::str#12 print_str::str#1
Not aliassing across scopes: char_cursor#111 char_cursor#23
Not aliassing across scopes: line_cursor#33 line_cursor#35
Not aliassing across scopes: char_cursor#101 char_cursor#29
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: char_cursor#112 char_cursor#109
Not aliassing across scopes: char_cursor#55 char_cursor#13
Not aliassing across scopes: char_cursor#56 char_cursor#15
Not aliassing across scopes: print_word::w#4 print_word::w#0
Not aliassing across scopes: char_cursor#104 char_cursor#107
Not aliassing across scopes: char_cursor#58 char_cursor#13
Not aliassing across scopes: char_cursor#59 char_cursor#13
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: char_cursor#105 char_cursor#102
Not aliassing across scopes: char_cursor#61 char_cursor#15
Not aliassing across scopes: char_cursor#62 char_cursor#15
Not aliassing across scopes: print_char::ch#3 print_char::ch#1
Not aliassing across scopes: char_cursor#64 char_cursor#105
Not aliassing across scopes: print_cls::sc#0 SCREEN#0
Not aliassing across scopes: line_cursor#3 SCREEN#0
Not aliassing across scopes: div8u::dividend#5 div8u::dividend#1
Not aliassing across scopes: div8u::divisor#6 div8u::divisor#0
Not aliassing across scopes: rem8u#1 div8u::rem#8
Not aliassing across scopes: div8s::dividend#1 div8s::dividend#0
Not aliassing across scopes: div8s::divisor#6 div8s::divisor#0
Not aliassing across scopes: rem8u#53 rem8u#33
Not aliassing across scopes: div8u::dividend#1 div8s::dividendb#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisorb#3
Not aliassing across scopes: div8u::return#2 div8u::return#1
Not aliassing across scopes: rem8u#14 rem8u#2
Not aliassing across scopes: div8s::$11 div8u::return#5
Not aliassing across scopes: div16u::dividend#4 div16u::dividend#1
Not aliassing across scopes: div16u::divisor#5 div16u::divisor#0
Not aliassing across scopes: rem16u#1 div16u::rem#8
Not aliassing across scopes: line_cursor#34 line_cursor#38
Not aliassing across scopes: char_cursor#106 char_cursor#110
Not aliassing across scopes: rem8u#38 rem8u#35
Not aliassing across scopes: rem8s#22 rem8s#21
Not aliassing across scopes: rem16u#26 rem16u#19
Not aliassing across scopes: line_cursor#21 line_cursor#4
Not aliassing across scopes: char_cursor#67 char_cursor#17
Not aliassing across scopes: rem8u#18 rem8u#11
Not aliassing across scopes: rem8s#10 rem8s#7
Not aliassing across scopes: char_cursor#68 char_cursor#49
Not aliassing across scopes: line_cursor#22 line_cursor#15
Not aliassing across scopes: rem8u#19 rem8u#9
Not aliassing across scopes: char_cursor#69 char_cursor#40
Not aliassing across scopes: line_cursor#23 line_cursor#13
Not aliassing across scopes: rem16u#9 rem16u#6
Not aliassing across scopes: char_cursor#70 char_cursor#31
Not aliassing across scopes: line_cursor#24 line_cursor#11
Not aliassing across scopes: rem16u#21 rem16u#15
Not aliassing across scopes: char_cursor#118 char_cursor#20
Not aliassing across scopes: line_cursor#66 line_cursor#7
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#0 test_16u::divisor#0
Not aliassing across scopes: div16u::return#2 div16u::return#1
Not aliassing across scopes: rem16u#11 rem16u#2
Not aliassing across scopes: test_16u::$0 div16u::return#4
Not aliassing across scopes: print_word::w#0 test_16u::dividend#1
Not aliassing across scopes: char_cursor#72 char_cursor#10
Not aliassing across scopes: char_cursor#73 char_cursor#2
Not aliassing across scopes: print_word::w#1 test_16u::divisor#1
Not aliassing across scopes: char_cursor#74 char_cursor#10
Not aliassing across scopes: char_cursor#75 char_cursor#2
Not aliassing across scopes: print_word::w#2 test_16u::res#1
Not aliassing across scopes: char_cursor#76 char_cursor#10
Not aliassing across scopes: char_cursor#77 char_cursor#2
Not aliassing across scopes: print_word::w#3 rem16u#12
Not aliassing across scopes: char_cursor#78 char_cursor#10
Not aliassing across scopes: line_cursor#26 line_cursor#2
Not aliassing across scopes: char_cursor#79 char_cursor#4
Not aliassing across scopes: rem8u#39 rem8u#5
Not aliassing across scopes: char_cursor#119 char_cursor#19
Not aliassing across scopes: line_cursor#67 line_cursor#6
Not aliassing across scopes: div8u::dividend#2 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#1
Not aliassing across scopes: rem8u#21 rem8u#2
Not aliassing across scopes: test_8u::$0 div8u::return#6
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#1
Not aliassing across scopes: char_cursor#81 char_cursor#13
Not aliassing across scopes: char_cursor#82 char_cursor#2
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#1
Not aliassing across scopes: char_cursor#83 char_cursor#13
Not aliassing across scopes: char_cursor#84 char_cursor#2
Not aliassing across scopes: print_byte::b#5 test_8u::res#1
Not aliassing across scopes: char_cursor#85 char_cursor#13
Not aliassing across scopes: char_cursor#86 char_cursor#2
Not aliassing across scopes: print_byte::b#6 rem8u#22
Not aliassing across scopes: char_cursor#87 char_cursor#13
Not aliassing across scopes: line_cursor#28 line_cursor#2
Not aliassing across scopes: char_cursor#88 char_cursor#4
Not aliassing across scopes: rem8u#42 rem8u#28
Not aliassing across scopes: rem8s#24 rem8s#16
Not aliassing across scopes: char_cursor#120 char_cursor#18
Not aliassing across scopes: line_cursor#68 line_cursor#5
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: rem8u#24 rem8u#4
Not aliassing across scopes: rem8s#12 rem8s#3
Not aliassing across scopes: test_8s::$4 div8s::return#5
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#1
Not aliassing across scopes: char_cursor#90 char_cursor#7
Not aliassing across scopes: char_cursor#91 char_cursor#2
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#1
Not aliassing across scopes: char_cursor#92 char_cursor#7
Not aliassing across scopes: char_cursor#93 char_cursor#2
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#1
Not aliassing across scopes: char_cursor#94 char_cursor#7
Not aliassing across scopes: char_cursor#95 char_cursor#2
Not aliassing across scopes: print_sbyte::b#4 rem8s#13
Not aliassing across scopes: char_cursor#96 char_cursor#7
Not aliassing across scopes: line_cursor#30 line_cursor#2
Not aliassing across scopes: char_cursor#97 char_cursor#4
Not aliassing across scopes: line_cursor#32 line_cursor#9
Not aliassing across scopes: char_cursor#99 char_cursor#22
Not aliassing across scopes: rem8u#26 rem8u#7
Not aliassing across scopes: rem8s#15 rem8s#5
Not aliassing across scopes: rem16u#14 rem16u#4
Alias (byte*) SCREEN#0 = (byte*) line_cursor#0 (byte*) char_cursor#0 (byte*) line_cursor#47 (byte*) char_cursor#121 (byte*) line_cursor#43 (byte*) char_cursor#117 (byte*) line_cursor#42 (byte*) char_cursor#116 (byte*) line_cursor#38 (byte*) char_cursor#110 
Alias (byte*) print_str::str#10 = (byte*) print_str::str#11 
Alias (byte*) char_cursor#100 = (byte*) char_cursor#51 (byte*) char_cursor#52 (byte*) char_cursor#2 
Alias (byte*) line_cursor#1 = (byte*~) print_ln::$0 (byte*) line_cursor#18 (byte*) char_cursor#3 (byte*) line_cursor#19 (byte*) char_cursor#54 (byte*) line_cursor#2 (byte*) char_cursor#4 
Alias (byte) print_byte::b#0 = (byte~) print_sbyte::$4 
Alias (byte*) char_cursor#5 = (byte*) char_cursor#55 (byte*) char_cursor#57 (byte*) char_cursor#7 
Alias (byte*) char_cursor#103 = (byte*) char_cursor#112 
Alias (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#8 (signed byte) print_sbyte::b#7 
Alias (byte*) char_cursor#56 = (byte*) char_cursor#6 
Alias (signed byte) print_sbyte::b#0 = (signed byte~) print_sbyte::$3 
Alias (byte) print_byte::b#1 = (byte~) print_word::$0 
Alias (word) print_word::w#4 = (word) print_word::w#5 
Alias (byte*) char_cursor#58 = (byte*) char_cursor#8 
Alias (byte) print_byte::b#2 = (byte~) print_word::$2 
Alias (byte*) char_cursor#10 = (byte*) char_cursor#9 (byte*) char_cursor#59 (byte*) char_cursor#60 
Alias (byte) print_byte::b#7 = (byte) print_byte::b#8 
Alias (byte*) char_cursor#11 = (byte*) char_cursor#61 
Alias (byte*) char_cursor#12 = (byte*) char_cursor#62 (byte*) char_cursor#63 (byte*) char_cursor#13 
Alias (byte*) char_cursor#14 = (byte*) char_cursor#65 (byte*) char_cursor#15 
Alias (byte*) line_cursor#20 = (byte*) char_cursor#16 (byte*) line_cursor#3 (byte*) char_cursor#66 (byte*) line_cursor#4 (byte*) char_cursor#17 
Alias (byte) div8u::rem#1 = (byte~) div8u::$0 (byte) div8u::rem#6 
Alias (byte) div8u::dividend#0 = (byte~) div8u::$4 (byte) div8u::dividend#8 
Alias (byte) div8u::quotient#1 = (byte~) div8u::$5 (byte) div8u::quotient#4 
Alias (byte) div8u::dividend#3 = (byte) div8u::dividend#7 
Alias (byte) div8u::quotient#6 = (byte) div8u::quotient#7 
Alias (byte) div8u::divisor#4 = (byte) div8u::divisor#5 
Alias (byte) div8u::i#5 = (byte) div8u::i#6 
Alias (byte) div8u::rem#5 = (byte) div8u::rem#7 
Alias (byte) div8u::divisor#2 = (byte) div8u::divisor#3 
Alias (byte) div8u::i#3 = (byte) div8u::i#4 
Alias (byte) div8u::rem#3 = (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8 
Alias (byte) div8u::rem#8 = (byte) div8u::rem#9 
Alias (byte) div8u::return#0 = (byte) div8u::quotient#5 (byte) div8u::quotient#8 (byte) div8u::return#4 (byte) div8u::return#1 
Alias (byte) rem8u#1 = (byte) rem8u#13 (byte) rem8u#2 
Alias (byte) rem8u#0 = (byte) rem8u#46 (byte) rem8u#44 (byte) rem8u#35 
Alias (signed byte) div8s::dividend#1 = (signed byte) div8s::dividend#2 (signed byte) div8s::dividend#3 
Alias (signed byte) div8s::divisor#4 = (signed byte) div8s::divisor#6 (signed byte) div8s::divisor#5 
Alias (byte) div8s::neg#0 = (byte) div8s::neg#7 
Alias (byte) rem8u#49 = (byte) rem8u#53 (byte) rem8u#50 
Alias (byte) div8s::dividendb#1 = (byte~) div8s::$4 
Alias (byte) div8s::dividendb#2 = (byte~) div8s::$3 
Alias (signed byte) div8s::divisor#1 = (signed byte) div8s::divisor#2 (signed byte) div8s::divisor#3 
Alias (byte) div8s::dividendb#4 = (byte) div8s::dividendb#6 (byte) div8s::dividendb#5 
Alias (byte) rem8u#36 = (byte) rem8u#45 (byte) rem8u#37 
Alias (byte) div8s::neg#3 = (byte) div8s::neg#8 (byte) div8s::neg#5 
Alias (byte) div8s::divisorb#1 = (byte~) div8s::$10 
Alias (byte) div8s::divisorb#2 = (byte~) div8s::$8 
Alias (byte) div8s::neg#2 = (byte~) div8s::$9 
Alias (byte) div8u::return#2 = (byte) div8u::return#5 
Alias (byte) div8s::neg#4 = (byte) div8s::neg#6 
Alias (byte) rem8u#14 = (byte) rem8u#3 (byte) rem8u#15 (byte) rem8u#16 
Alias (byte) div8s::resultb#0 = (byte~) div8s::$11 (byte) div8s::resultb#1 (byte) div8s::resultb#2 
Alias (signed byte) rem8s#1 = (signed byte~) div8s::$17 
Alias (signed byte) div8s::return#0 = (signed byte~) div8s::$19 
Alias (signed byte) rem8s#2 = (signed byte~) div8s::$14 
Alias (signed byte) div8s::return#1 = (signed byte~) div8s::$15 
Alias (signed byte) div8s::return#2 = (signed byte) div8s::return#4 
Alias (byte) rem8u#17 = (byte) rem8u#4 
Alias (signed byte) rem8s#3 = (signed byte) rem8s#9 
Alias (signed byte) rem8s#0 = (signed byte) rem8s#27 (signed byte) rem8s#21 
Alias (word) div16u::rem#1 = (word~) div16u::$0 (word) div16u::rem#6 
Alias (word) div16u::dividend#0 = (word~) div16u::$5 (word) div16u::dividend#7 
Alias (word) div16u::quotient#1 = (word~) div16u::$6 (word) div16u::quotient#4 
Alias (word) div16u::dividend#2 = (word) div16u::dividend#6 
Alias (word) div16u::quotient#6 = (word) div16u::quotient#7 
Alias (word) div16u::divisor#3 = (word) div16u::divisor#4 
Alias (byte) div16u::i#5 = (byte) div16u::i#6 
Alias (word) div16u::rem#5 = (word) div16u::rem#7 
Alias (word) div16u::divisor#1 = (word) div16u::divisor#2 
Alias (byte) div16u::i#3 = (byte) div16u::i#4 
Alias (word) div16u::rem#3 = (word~) div16u::$9 
Alias (word) div16u::rem#8 = (word) div16u::rem#9 
Alias (word) div16u::return#0 = (word) div16u::quotient#5 (word) div16u::quotient#8 (word) div16u::return#3 (word) div16u::return#1 
Alias (word) rem16u#1 = (word) rem16u#8 (word) rem16u#2 
Alias (byte) rem8u#28 = (byte) rem8u#38 
Alias (signed byte) rem8s#16 = (signed byte) rem8s#22 
Alias (word) rem16u#15 = (word) rem16u#24 (word) rem16u#26 (word) rem16u#20 
Alias (byte*) line_cursor#21 = (byte*) line_cursor#5 
Alias (byte*) char_cursor#18 = (byte*) char_cursor#67 
Alias (byte) rem8u#18 = (byte) rem8u#5 
Alias (signed byte) rem8s#10 = (signed byte) rem8s#4 (signed byte) rem8s#23 (signed byte) rem8s#17 (signed byte) rem8s#11 (signed byte) rem8s#5 
Alias (byte*) char_cursor#19 = (byte*) char_cursor#68 
Alias (byte*) line_cursor#22 = (byte*) line_cursor#6 
Alias (byte) rem8u#19 = (byte) rem8u#6 (byte) rem8u#29 (byte) rem8u#20 (byte) rem8u#7 
Alias (byte*) char_cursor#20 = (byte*) char_cursor#69 
Alias (byte*) line_cursor#23 = (byte*) line_cursor#7 
Alias (word) rem16u#10 = (word) rem16u#3 (word) rem16u#9 (word) rem16u#4 
Alias (byte*) char_cursor#21 = (byte*) char_cursor#70 (byte*) char_cursor#71 (byte*) char_cursor#22 
Alias (byte*) line_cursor#24 = (byte*) line_cursor#8 (byte*) line_cursor#25 (byte*) line_cursor#9 
Alias (word) div16u::return#2 = (word) div16u::return#4 
Alias (word) test_16u::dividend#0 = (word) test_16u::dividend#1 
Alias (byte*) char_cursor#107 = (byte*) char_cursor#113 
Alias (word) test_16u::divisor#0 = (word) test_16u::divisor#3 (word) test_16u::divisor#2 (word) test_16u::divisor#1 
Alias (byte*) line_cursor#35 = (byte*) line_cursor#60 (byte*) line_cursor#63 (byte*) line_cursor#57 (byte*) line_cursor#54 (byte*) line_cursor#51 (byte*) line_cursor#48 (byte*) line_cursor#44 (byte*) line_cursor#39 
Alias (byte) test_16u::i#10 = (byte) test_16u::i#11 (byte) test_16u::i#2 (byte) test_16u::i#9 (byte) test_16u::i#8 (byte) test_16u::i#7 (byte) test_16u::i#6 (byte) test_16u::i#5 (byte) test_16u::i#4 (byte) test_16u::i#3 
Alias (word) rem16u#11 = (word) rem16u#5 (word) rem16u#28 (word) rem16u#27 (word) rem16u#25 (word) rem16u#22 (word) rem16u#17 (word) rem16u#12 (word) rem16u#23 (word) rem16u#18 (word) rem16u#13 (word) rem16u#6 
Alias (word) test_16u::res#0 = (word~) test_16u::$0 (word) test_16u::res#4 (word) test_16u::res#3 (word) test_16u::res#2 (word) test_16u::res#1 
Alias (byte*) char_cursor#23 = (byte*) char_cursor#72 
Alias (byte*) char_cursor#24 = (byte*) char_cursor#73 
Alias (byte*) char_cursor#25 = (byte*) char_cursor#74 
Alias (byte*) char_cursor#26 = (byte*) char_cursor#75 
Alias (byte*) char_cursor#27 = (byte*) char_cursor#76 
Alias (byte*) char_cursor#28 = (byte*) char_cursor#77 
Alias (byte*) char_cursor#29 = (byte*) char_cursor#78 
Alias (byte*) line_cursor#10 = (byte*) line_cursor#26 (byte*) line_cursor#27 (byte*) line_cursor#11 
Alias (byte*) char_cursor#30 = (byte*) char_cursor#79 (byte*) char_cursor#80 (byte*) char_cursor#31 
Alias (byte) test_16u::i#1 = (byte/word~) test_16u::$9 
Alias (byte) div8u::return#3 = (byte) div8u::return#6 
Alias (byte) test_8u::dividend#0 = (byte) test_8u::dividend#1 
Alias (byte*) char_cursor#108 = (byte*) char_cursor#114 
Alias (byte) test_8u::divisor#0 = (byte) test_8u::divisor#3 (byte) test_8u::divisor#2 (byte) test_8u::divisor#1 
Alias (byte*) line_cursor#36 = (byte*) line_cursor#61 (byte*) line_cursor#64 (byte*) line_cursor#58 (byte*) line_cursor#55 (byte*) line_cursor#52 (byte*) line_cursor#49 (byte*) line_cursor#45 (byte*) line_cursor#40 
Alias (byte) test_8u::i#10 = (byte) test_8u::i#11 (byte) test_8u::i#2 (byte) test_8u::i#9 (byte) test_8u::i#8 (byte) test_8u::i#7 (byte) test_8u::i#6 (byte) test_8u::i#5 (byte) test_8u::i#4 (byte) test_8u::i#3 
Alias (byte) rem8u#21 = (byte) rem8u#8 (byte) rem8u#54 (byte) rem8u#51 (byte) rem8u#47 (byte) rem8u#40 (byte) rem8u#31 (byte) rem8u#22 (byte) rem8u#41 (byte) rem8u#32 (byte) rem8u#23 (byte) rem8u#9 
Alias (byte) test_8u::res#0 = (byte~) test_8u::$0 (byte) test_8u::res#4 (byte) test_8u::res#3 (byte) test_8u::res#2 (byte) test_8u::res#1 
Alias (byte*) char_cursor#32 = (byte*) char_cursor#81 
Alias (byte*) char_cursor#33 = (byte*) char_cursor#82 
Alias (byte*) char_cursor#34 = (byte*) char_cursor#83 
Alias (byte*) char_cursor#35 = (byte*) char_cursor#84 
Alias (byte*) char_cursor#36 = (byte*) char_cursor#85 
Alias (byte*) char_cursor#37 = (byte*) char_cursor#86 
Alias (byte*) char_cursor#38 = (byte*) char_cursor#87 
Alias (byte*) line_cursor#12 = (byte*) line_cursor#28 (byte*) line_cursor#29 (byte*) line_cursor#13 
Alias (byte*) char_cursor#39 = (byte*) char_cursor#88 (byte*) char_cursor#89 (byte*) char_cursor#40 
Alias (signed byte) div8s::return#3 = (signed byte) div8s::return#5 
Alias (signed byte) test_8s::dividend#0 = (signed byte) test_8s::dividend#1 
Alias (byte*) char_cursor#109 = (byte*) char_cursor#115 
Alias (signed byte) test_8s::divisor#0 = (signed byte) test_8s::divisor#3 (signed byte) test_8s::divisor#2 (signed byte) test_8s::divisor#1 
Alias (byte*) line_cursor#37 = (byte*) line_cursor#62 (byte*) line_cursor#65 (byte*) line_cursor#59 (byte*) line_cursor#56 (byte*) line_cursor#53 (byte*) line_cursor#50 (byte*) line_cursor#46 (byte*) line_cursor#41 
Alias (byte) test_8s::i#10 = (byte) test_8s::i#11 (byte) test_8s::i#2 (byte) test_8s::i#9 (byte) test_8s::i#8 (byte) test_8s::i#7 (byte) test_8s::i#6 (byte) test_8s::i#5 (byte) test_8s::i#4 (byte) test_8s::i#3 
Alias (byte) rem8u#10 = (byte) rem8u#24 (byte) rem8u#58 (byte) rem8u#57 (byte) rem8u#56 (byte) rem8u#55 (byte) rem8u#52 (byte) rem8u#48 (byte) rem8u#43 (byte) rem8u#34 (byte) rem8u#25 (byte) rem8u#11 
Alias (signed byte) rem8s#12 = (signed byte) rem8s#6 (signed byte) rem8s#30 (signed byte) rem8s#29 (signed byte) rem8s#28 (signed byte) rem8s#25 (signed byte) rem8s#19 (signed byte) rem8s#13 (signed byte) rem8s#26 (signed byte) rem8s#20 (signed byte) rem8s#14 (signed byte) rem8s#7 
Alias (signed byte) test_8s::res#0 = (signed byte~) test_8s::$4 (signed byte) test_8s::res#4 (signed byte) test_8s::res#3 (signed byte) test_8s::res#2 (signed byte) test_8s::res#1 
Alias (byte*) char_cursor#41 = (byte*) char_cursor#90 
Alias (byte*) char_cursor#42 = (byte*) char_cursor#91 
Alias (byte*) char_cursor#43 = (byte*) char_cursor#92 
Alias (byte*) char_cursor#44 = (byte*) char_cursor#93 
Alias (byte*) char_cursor#45 = (byte*) char_cursor#94 
Alias (byte*) char_cursor#46 = (byte*) char_cursor#95 
Alias (byte*) char_cursor#47 = (byte*) char_cursor#96 
Alias (byte*) line_cursor#14 = (byte*) line_cursor#30 (byte*) line_cursor#31 (byte*) line_cursor#15 
Alias (byte*) char_cursor#48 = (byte*) char_cursor#97 (byte*) char_cursor#98 (byte*) char_cursor#49 
Alias (word) rem16u#0 = (word) rem16u#19 
Alias (byte*) line_cursor#16 = (byte*) line_cursor#32 
Alias (byte*) char_cursor#50 = (byte*) char_cursor#99 
Alias (byte) rem8u#12 = (byte) rem8u#26 
Alias (signed byte) rem8s#15 = (signed byte) rem8s#8 
Alias (word) rem16u#14 = (word) rem16u#7 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: print_str::str#12 print_str::str#1
Not aliassing across scopes: char_cursor#111 char_cursor#23
Not aliassing across scopes: line_cursor#33 line_cursor#35
Not aliassing across scopes: char_cursor#101 char_cursor#29
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: char_cursor#103 char_cursor#109
Not aliassing across scopes: char_cursor#5 char_cursor#12
Not aliassing across scopes: char_cursor#56 char_cursor#14
Not aliassing across scopes: print_word::w#4 print_word::w#0
Not aliassing across scopes: char_cursor#104 char_cursor#107
Not aliassing across scopes: char_cursor#58 char_cursor#12
Not aliassing across scopes: char_cursor#10 char_cursor#12
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: char_cursor#105 char_cursor#102
Not aliassing across scopes: char_cursor#11 char_cursor#14
Not aliassing across scopes: char_cursor#12 char_cursor#14
Not aliassing across scopes: print_char::ch#3 print_char::ch#1
Not aliassing across scopes: char_cursor#64 char_cursor#105
Not aliassing across scopes: print_cls::sc#0 SCREEN#0
Not aliassing across scopes: line_cursor#20 SCREEN#0
Not aliassing across scopes: div8u::dividend#5 div8u::dividend#1
Not aliassing across scopes: div8u::divisor#6 div8u::divisor#0
Not aliassing across scopes: rem8u#1 div8u::rem#8
Not aliassing across scopes: div8s::dividend#1 div8s::dividend#0
Not aliassing across scopes: div8s::divisor#4 div8s::divisor#0
Not aliassing across scopes: rem8u#49 rem8u#33
Not aliassing across scopes: div8u::dividend#1 div8s::dividendb#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisorb#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: rem8u#14 rem8u#1
Not aliassing across scopes: div8s::resultb#0 div8u::return#2
Not aliassing across scopes: div16u::dividend#4 div16u::dividend#1
Not aliassing across scopes: div16u::divisor#5 div16u::divisor#0
Not aliassing across scopes: rem16u#1 div16u::rem#8
Not aliassing across scopes: line_cursor#34 SCREEN#0
Not aliassing across scopes: char_cursor#106 SCREEN#0
Not aliassing across scopes: rem8u#28 rem8u#0
Not aliassing across scopes: rem8s#16 rem8s#0
Not aliassing across scopes: rem16u#15 rem16u#0
Not aliassing across scopes: line_cursor#21 line_cursor#20
Not aliassing across scopes: char_cursor#18 line_cursor#20
Not aliassing across scopes: rem8u#18 rem8u#10
Not aliassing across scopes: rem8s#10 rem8s#12
Not aliassing across scopes: char_cursor#19 char_cursor#48
Not aliassing across scopes: line_cursor#22 line_cursor#14
Not aliassing across scopes: rem8u#19 rem8u#21
Not aliassing across scopes: char_cursor#20 char_cursor#39
Not aliassing across scopes: line_cursor#23 line_cursor#12
Not aliassing across scopes: rem16u#10 rem16u#11
Not aliassing across scopes: char_cursor#21 char_cursor#30
Not aliassing across scopes: line_cursor#24 line_cursor#10
Not aliassing across scopes: rem16u#21 rem16u#15
Not aliassing across scopes: char_cursor#118 char_cursor#20
Not aliassing across scopes: line_cursor#66 line_cursor#23
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#0 test_16u::divisor#0
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: rem16u#11 rem16u#1
Not aliassing across scopes: test_16u::res#0 div16u::return#2
Not aliassing across scopes: print_word::w#0 test_16u::dividend#0
Not aliassing across scopes: char_cursor#23 char_cursor#10
Not aliassing across scopes: char_cursor#24 char_cursor#100
Not aliassing across scopes: print_word::w#1 test_16u::divisor#0
Not aliassing across scopes: char_cursor#25 char_cursor#10
Not aliassing across scopes: char_cursor#26 char_cursor#100
Not aliassing across scopes: print_word::w#2 test_16u::res#0
Not aliassing across scopes: char_cursor#27 char_cursor#10
Not aliassing across scopes: char_cursor#28 char_cursor#100
Not aliassing across scopes: print_word::w#3 rem16u#11
Not aliassing across scopes: char_cursor#29 char_cursor#10
Not aliassing across scopes: line_cursor#10 line_cursor#1
Not aliassing across scopes: char_cursor#30 line_cursor#1
Not aliassing across scopes: rem8u#39 rem8u#18
Not aliassing across scopes: char_cursor#119 char_cursor#19
Not aliassing across scopes: line_cursor#67 line_cursor#22
Not aliassing across scopes: div8u::dividend#2 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: rem8u#21 rem8u#1
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: char_cursor#32 char_cursor#12
Not aliassing across scopes: char_cursor#33 char_cursor#100
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: char_cursor#34 char_cursor#12
Not aliassing across scopes: char_cursor#35 char_cursor#100
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: char_cursor#36 char_cursor#12
Not aliassing across scopes: char_cursor#37 char_cursor#100
Not aliassing across scopes: print_byte::b#6 rem8u#21
Not aliassing across scopes: char_cursor#38 char_cursor#12
Not aliassing across scopes: line_cursor#12 line_cursor#1
Not aliassing across scopes: char_cursor#39 line_cursor#1
Not aliassing across scopes: rem8u#42 rem8u#28
Not aliassing across scopes: rem8s#24 rem8s#16
Not aliassing across scopes: char_cursor#120 char_cursor#18
Not aliassing across scopes: line_cursor#68 line_cursor#21
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: rem8u#10 rem8u#17
Not aliassing across scopes: rem8s#12 rem8s#3
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: char_cursor#41 char_cursor#5
Not aliassing across scopes: char_cursor#42 char_cursor#100
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: char_cursor#43 char_cursor#5
Not aliassing across scopes: char_cursor#44 char_cursor#100
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: char_cursor#45 char_cursor#5
Not aliassing across scopes: char_cursor#46 char_cursor#100
Not aliassing across scopes: print_sbyte::b#4 rem8s#12
Not aliassing across scopes: char_cursor#47 char_cursor#5
Not aliassing across scopes: line_cursor#14 line_cursor#1
Not aliassing across scopes: char_cursor#48 line_cursor#1
Not aliassing across scopes: line_cursor#16 line_cursor#24
Not aliassing across scopes: char_cursor#50 char_cursor#21
Not aliassing across scopes: rem8u#12 rem8u#19
Not aliassing across scopes: rem8s#15 rem8s#10
Not aliassing across scopes: rem16u#14 rem16u#10
Alias (byte) div8u::dividend#3 = (byte) div8u::dividend#4 
Alias (byte) div8u::quotient#3 = (byte) div8u::quotient#6 
Alias (byte) div8u::divisor#2 = (byte) div8u::divisor#4 (byte) div8u::divisor#7 
Alias (byte) div8u::i#2 = (byte) div8u::i#3 (byte) div8u::i#5 
Alias (byte) div8u::dividend#0 = (byte) div8u::dividend#6 
Alias (signed byte) div8s::divisor#1 = (signed byte) div8s::divisor#4 
Alias (byte) rem8u#27 = (byte) rem8u#36 (byte) rem8u#49 
Alias (byte) div8s::dividendb#3 = (byte) div8s::dividendb#4 
Alias (byte) rem8u#14 = (byte) rem8u#17 
Alias (word) div16u::dividend#2 = (word) div16u::dividend#3 
Alias (word) div16u::quotient#3 = (word) div16u::quotient#6 
Alias (word) div16u::divisor#1 = (word) div16u::divisor#3 (word) div16u::divisor#6 
Alias (byte) div16u::i#2 = (byte) div16u::i#3 (byte) div16u::i#5 
Alias (word) div16u::dividend#0 = (word) div16u::dividend#5 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: print_str::str#12 print_str::str#1
Not aliassing across scopes: char_cursor#111 char_cursor#23
Not aliassing across scopes: line_cursor#33 line_cursor#35
Not aliassing across scopes: char_cursor#101 char_cursor#29
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: char_cursor#103 char_cursor#109
Not aliassing across scopes: char_cursor#5 char_cursor#12
Not aliassing across scopes: char_cursor#56 char_cursor#14
Not aliassing across scopes: print_word::w#4 print_word::w#0
Not aliassing across scopes: char_cursor#104 char_cursor#107
Not aliassing across scopes: char_cursor#58 char_cursor#12
Not aliassing across scopes: char_cursor#10 char_cursor#12
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: char_cursor#105 char_cursor#102
Not aliassing across scopes: char_cursor#11 char_cursor#14
Not aliassing across scopes: char_cursor#12 char_cursor#14
Not aliassing across scopes: print_char::ch#3 print_char::ch#1
Not aliassing across scopes: char_cursor#64 char_cursor#105
Not aliassing across scopes: print_cls::sc#0 SCREEN#0
Not aliassing across scopes: line_cursor#20 SCREEN#0
Not aliassing across scopes: div8u::dividend#5 div8u::dividend#1
Not aliassing across scopes: div8u::divisor#6 div8u::divisor#0
Not aliassing across scopes: rem8u#1 div8u::rem#8
Not aliassing across scopes: div8s::dividend#1 div8s::dividend#0
Not aliassing across scopes: div8s::divisor#1 div8s::divisor#0
Not aliassing across scopes: rem8u#27 rem8u#33
Not aliassing across scopes: div8u::dividend#1 div8s::dividendb#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisorb#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: rem8u#14 rem8u#1
Not aliassing across scopes: div8s::resultb#0 div8u::return#2
Not aliassing across scopes: div16u::dividend#4 div16u::dividend#1
Not aliassing across scopes: div16u::divisor#5 div16u::divisor#0
Not aliassing across scopes: rem16u#1 div16u::rem#8
Not aliassing across scopes: line_cursor#34 SCREEN#0
Not aliassing across scopes: char_cursor#106 SCREEN#0
Not aliassing across scopes: rem8u#28 rem8u#0
Not aliassing across scopes: rem8s#16 rem8s#0
Not aliassing across scopes: rem16u#15 rem16u#0
Not aliassing across scopes: line_cursor#21 line_cursor#20
Not aliassing across scopes: char_cursor#18 line_cursor#20
Not aliassing across scopes: rem8u#18 rem8u#10
Not aliassing across scopes: rem8s#10 rem8s#12
Not aliassing across scopes: char_cursor#19 char_cursor#48
Not aliassing across scopes: line_cursor#22 line_cursor#14
Not aliassing across scopes: rem8u#19 rem8u#21
Not aliassing across scopes: char_cursor#20 char_cursor#39
Not aliassing across scopes: line_cursor#23 line_cursor#12
Not aliassing across scopes: rem16u#10 rem16u#11
Not aliassing across scopes: char_cursor#21 char_cursor#30
Not aliassing across scopes: line_cursor#24 line_cursor#10
Not aliassing across scopes: rem16u#21 rem16u#15
Not aliassing across scopes: char_cursor#118 char_cursor#20
Not aliassing across scopes: line_cursor#66 line_cursor#23
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#0 test_16u::divisor#0
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: rem16u#11 rem16u#1
Not aliassing across scopes: test_16u::res#0 div16u::return#2
Not aliassing across scopes: print_word::w#0 test_16u::dividend#0
Not aliassing across scopes: char_cursor#23 char_cursor#10
Not aliassing across scopes: char_cursor#24 char_cursor#100
Not aliassing across scopes: print_word::w#1 test_16u::divisor#0
Not aliassing across scopes: char_cursor#25 char_cursor#10
Not aliassing across scopes: char_cursor#26 char_cursor#100
Not aliassing across scopes: print_word::w#2 test_16u::res#0
Not aliassing across scopes: char_cursor#27 char_cursor#10
Not aliassing across scopes: char_cursor#28 char_cursor#100
Not aliassing across scopes: print_word::w#3 rem16u#11
Not aliassing across scopes: char_cursor#29 char_cursor#10
Not aliassing across scopes: line_cursor#10 line_cursor#1
Not aliassing across scopes: char_cursor#30 line_cursor#1
Not aliassing across scopes: rem8u#39 rem8u#18
Not aliassing across scopes: char_cursor#119 char_cursor#19
Not aliassing across scopes: line_cursor#67 line_cursor#22
Not aliassing across scopes: div8u::dividend#2 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: rem8u#21 rem8u#1
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: char_cursor#32 char_cursor#12
Not aliassing across scopes: char_cursor#33 char_cursor#100
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: char_cursor#34 char_cursor#12
Not aliassing across scopes: char_cursor#35 char_cursor#100
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: char_cursor#36 char_cursor#12
Not aliassing across scopes: char_cursor#37 char_cursor#100
Not aliassing across scopes: print_byte::b#6 rem8u#21
Not aliassing across scopes: char_cursor#38 char_cursor#12
Not aliassing across scopes: line_cursor#12 line_cursor#1
Not aliassing across scopes: char_cursor#39 line_cursor#1
Not aliassing across scopes: rem8u#42 rem8u#28
Not aliassing across scopes: rem8s#24 rem8s#16
Not aliassing across scopes: char_cursor#120 char_cursor#18
Not aliassing across scopes: line_cursor#68 line_cursor#21
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: rem8u#10 rem8u#14
Not aliassing across scopes: rem8s#12 rem8s#3
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: char_cursor#41 char_cursor#5
Not aliassing across scopes: char_cursor#42 char_cursor#100
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: char_cursor#43 char_cursor#5
Not aliassing across scopes: char_cursor#44 char_cursor#100
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: char_cursor#45 char_cursor#5
Not aliassing across scopes: char_cursor#46 char_cursor#100
Not aliassing across scopes: print_sbyte::b#4 rem8s#12
Not aliassing across scopes: char_cursor#47 char_cursor#5
Not aliassing across scopes: line_cursor#14 line_cursor#1
Not aliassing across scopes: char_cursor#48 line_cursor#1
Not aliassing across scopes: line_cursor#16 line_cursor#24
Not aliassing across scopes: char_cursor#50 char_cursor#21
Not aliassing across scopes: rem8u#12 rem8u#19
Not aliassing across scopes: rem8s#15 rem8s#10
Not aliassing across scopes: rem16u#14 rem16u#10
Self Phi Eliminated (byte*) char_cursor#53
Self Phi Eliminated (byte) div8u::divisor#2
Self Phi Eliminated (word) div16u::divisor#1
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) char_cursor#53 (byte*) char_cursor#101
Redundant Phi (byte*) char_cursor#5 (byte*) char_cursor#12
Redundant Phi (byte*) char_cursor#56 (byte*) char_cursor#14
Redundant Phi (byte*) char_cursor#58 (byte*) char_cursor#12
Redundant Phi (byte*) char_cursor#10 (byte*) char_cursor#12
Redundant Phi (byte*) char_cursor#11 (byte*) char_cursor#14
Redundant Phi (byte*) char_cursor#12 (byte*) char_cursor#14
Redundant Phi (byte) div8u::divisor#2 (byte) div8u::divisor#6
Redundant Phi (signed byte) div8s::dividend#1 (signed byte) div8s::dividend#0
Redundant Phi (signed byte) div8s::divisor#1 (signed byte) div8s::divisor#0
Redundant Phi (byte) rem8u#27 (byte) rem8u#33
Redundant Phi (byte) rem8u#14 (byte) rem8u#1
Redundant Phi (word) div16u::dividend#4 (word) div16u::dividend#1
Redundant Phi (word) div16u::divisor#5 (word) div16u::divisor#0
Redundant Phi (word) div16u::divisor#1 (word) div16u::divisor#5
Redundant Phi (byte*) line_cursor#34 (byte*) SCREEN#0
Redundant Phi (byte*) char_cursor#106 (byte*) SCREEN#0
Redundant Phi (byte) rem8u#28 (byte) rem8u#0
Redundant Phi (signed byte) rem8s#16 (signed byte) rem8s#0
Redundant Phi (word) rem16u#15 (word) rem16u#0
Redundant Phi (byte*) line_cursor#21 (byte*) line_cursor#20
Redundant Phi (byte*) char_cursor#18 (byte*) line_cursor#20
Redundant Phi (byte) rem8u#18 (byte) rem8u#10
Redundant Phi (signed byte) rem8s#10 (signed byte) rem8s#12
Redundant Phi (byte*) char_cursor#19 (byte*) char_cursor#48
Redundant Phi (byte*) line_cursor#22 (byte*) line_cursor#14
Redundant Phi (byte) rem8u#19 (byte) rem8u#21
Redundant Phi (byte*) char_cursor#20 (byte*) char_cursor#39
Redundant Phi (byte*) line_cursor#23 (byte*) line_cursor#12
Redundant Phi (word) rem16u#10 (word) rem16u#11
Redundant Phi (byte*) char_cursor#21 (byte*) char_cursor#30
Redundant Phi (byte*) line_cursor#24 (byte*) line_cursor#10
Redundant Phi (word) rem16u#21 (word) rem16u#15
Redundant Phi (byte*) char_cursor#118 (byte*) char_cursor#20
Redundant Phi (byte*) line_cursor#66 (byte*) line_cursor#23
Redundant Phi (word) rem16u#11 (word) rem16u#1
Redundant Phi (byte*) char_cursor#23 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#24 (byte*) char_cursor#100
Redundant Phi (byte*) char_cursor#25 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#26 (byte*) char_cursor#100
Redundant Phi (byte*) char_cursor#27 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#28 (byte*) char_cursor#100
Redundant Phi (byte*) char_cursor#29 (byte*) char_cursor#10
Redundant Phi (byte*) line_cursor#10 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#30 (byte*) line_cursor#1
Redundant Phi (byte) rem8u#39 (byte) rem8u#18
Redundant Phi (byte*) char_cursor#119 (byte*) char_cursor#19
Redundant Phi (byte*) line_cursor#67 (byte*) line_cursor#22
Redundant Phi (byte) rem8u#21 (byte) rem8u#1
Redundant Phi (byte*) char_cursor#32 (byte*) char_cursor#12
Redundant Phi (byte*) char_cursor#33 (byte*) char_cursor#100
Redundant Phi (byte*) char_cursor#34 (byte*) char_cursor#12
Redundant Phi (byte*) char_cursor#35 (byte*) char_cursor#100
Redundant Phi (byte*) char_cursor#36 (byte*) char_cursor#12
Redundant Phi (byte*) char_cursor#37 (byte*) char_cursor#100
Redundant Phi (byte*) char_cursor#38 (byte*) char_cursor#12
Redundant Phi (byte*) line_cursor#12 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#39 (byte*) line_cursor#1
Redundant Phi (byte) rem8u#42 (byte) rem8u#28
Redundant Phi (signed byte) rem8s#24 (signed byte) rem8s#16
Redundant Phi (byte*) char_cursor#120 (byte*) char_cursor#18
Redundant Phi (byte*) line_cursor#68 (byte*) line_cursor#21
Redundant Phi (byte) rem8u#10 (byte) rem8u#14
Redundant Phi (signed byte) rem8s#12 (signed byte) rem8s#3
Redundant Phi (byte*) char_cursor#41 (byte*) char_cursor#5
Redundant Phi (byte*) char_cursor#42 (byte*) char_cursor#100
Redundant Phi (byte*) char_cursor#43 (byte*) char_cursor#5
Redundant Phi (byte*) char_cursor#44 (byte*) char_cursor#100
Redundant Phi (byte*) char_cursor#45 (byte*) char_cursor#5
Redundant Phi (byte*) char_cursor#46 (byte*) char_cursor#100
Redundant Phi (byte*) char_cursor#47 (byte*) char_cursor#5
Redundant Phi (byte*) line_cursor#14 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#48 (byte*) line_cursor#1
Redundant Phi (byte*) line_cursor#16 (byte*) line_cursor#24
Redundant Phi (byte*) char_cursor#50 (byte*) char_cursor#21
Redundant Phi (byte) rem8u#12 (byte) rem8u#19
Redundant Phi (signed byte) rem8s#15 (signed byte) rem8s#10
Redundant Phi (word) rem16u#14 (word) rem16u#10
Succesful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte*) char_cursor#111 (byte*) char_cursor#14
Redundant Phi (byte*) char_cursor#101 (byte*) char_cursor#14
Redundant Phi (byte*) char_cursor#107 (byte*) line_cursor#1
Redundant Phi (byte*) line_cursor#35 (byte*) line_cursor#1
Redundant Phi (byte) rem8u#30 (byte) rem8u#1
Redundant Phi (byte*) char_cursor#108 (byte*) line_cursor#1
Redundant Phi (byte*) line_cursor#36 (byte*) line_cursor#1
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) print_str::$0 if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2
Simple Condition (boolean~) print_ln::$1 if((byte*) line_cursor#1<(byte*) char_cursor#14) goto print_ln::@1
Simple Condition (boolean~) print_sbyte::$1 if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1
Simple Condition (boolean~) print_cls::$1 if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (boolean~) div8u::$3 if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2
Simple Condition (boolean~) div8u::$7 if((byte) div8u::rem#5<(byte) div8u::divisor#6) goto div8u::@3
Simple Condition (boolean~) div8u::$9 if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1
Simple Condition (boolean~) div8s::$1 if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@1
Simple Condition (boolean~) div8s::$6 if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@3
Simple Condition (boolean~) div8s::$13 if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5
Simple Condition (boolean~) div16u::$4 if((byte~) div16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16u::@2
Simple Condition (boolean~) div16u::$8 if((word) div16u::rem#5<(word) div16u::divisor#0) goto div16u::@3
Simple Condition (boolean~) div16u::$10 if((byte) div16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto div16u::@1
Simple Condition (boolean~) test_16u::$10 if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1
Simple Condition (boolean~) test_8u::$9 if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@1
Simple Condition (boolean~) test_8s::$13 if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const string) print_byte::hextab#0 = print_byte::$4
Constant (const byte) rem8u#0 = 0
Constant (const byte) div8u::rem#0 = 0
Constant (const byte) div8u::quotient#0 = 0
Constant (const byte) div8u::i#0 = 0
Constant (const signed byte) rem8s#0 = 0
Constant (const byte) div8s::neg#0 = 0
Constant (const byte) div8s::dividendb#0 = 0
Constant (const byte) div8s::neg#1 = 1
Constant (const byte) div8s::divisorb#0 = 0
Constant (const word) rem16u#0 = 0
Constant (const word) div16u::rem#0 = 0
Constant (const word) div16u::quotient#0 = 0
Constant (const byte) div16u::i#0 = 0
Constant (const word[]) test_16u::dividends#0 = { 65535, 65535, 65535, 65535, 65535, 65535 }
Constant (const word[]) test_16u::divisors#0 = { 5, 7, 11, 13, 17, 19 }
Constant (const byte) test_16u::i#0 = 0
Constant (const string) print_str::str#1 = test_16u::str
Constant (const string) print_str::str#2 = test_16u::str1
Constant (const string) print_str::str#3 = test_16u::str2
Constant (const byte[]) test_8u::dividends#0 = { 255, 255, 255, 255, 255, 255 }
Constant (const byte[]) test_8u::divisors#0 = { 5, 7, 11, 13, 17, 19 }
Constant (const byte) test_8u::i#0 = 0
Constant (const string) print_str::str#4 = test_8u::str
Constant (const string) print_str::str#5 = test_8u::str1
Constant (const string) print_str::str#6 = test_8u::str2
Constant (const signed byte/signed word/signed dword) test_8s::$0 = -127
Constant (const signed byte/signed word/signed dword) test_8s::$1 = -127
Constant (const signed byte/signed word/signed dword) test_8s::$2 = -11
Constant (const signed byte/signed word/signed dword) test_8s::$3 = -13
Constant (const byte) test_8s::i#0 = 0
Constant (const string) print_str::str#7 = test_8s::str
Constant (const string) print_str::str#8 = test_8s::str1
Constant (const string) print_str::str#9 = test_8s::str2
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = SCREEN#0
Constant (const byte*) print_cls::$0 = SCREEN#0+1000
Constant (const byte*) line_cursor#20 = SCREEN#0
Constant (const signed byte[]) test_8s::dividends#0 = { 127, test_8s::$0, test_8s::$1, 127, 127, 127 }
Constant (const signed byte[]) test_8s::divisors#0 = { 5, 7, test_8s::$2, test_8s::$3, 17, 19 }
Succesful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) div8s::dividendb#0
Eliminating unused constant (const byte) div8s::divisorb#0
Succesful SSA optimization PassNEliminateUnusedVars
Eliminating Noop Cast (byte) print_byte::b#0 ← ((byte)) (signed byte) print_sbyte::b#6
Eliminating Noop Cast (byte) div8s::dividendb#1 ← ((byte)) (signed byte) div8s::dividend#0
Eliminating Noop Cast (byte) div8s::dividendb#2 ← ((byte)) (signed byte~) div8s::$2
Eliminating Noop Cast (byte) div8s::divisorb#1 ← ((byte)) (signed byte) div8s::divisor#0
Eliminating Noop Cast (byte) div8s::divisorb#2 ← ((byte)) (signed byte~) div8s::$7
Eliminating Noop Cast (signed byte~) div8s::$16 ← ((signed byte)) (byte) rem8u#1
Eliminating Noop Cast (signed byte~) div8s::$18 ← ((signed byte)) (byte) div8s::resultb#0
Eliminating Noop Cast (signed byte) rem8s#2 ← ((signed byte)) (byte) rem8u#1
Eliminating Noop Cast (signed byte) div8s::return#1 ← ((signed byte)) (byte) div8s::resultb#0
Succesful SSA optimization Pass2NopCastElimination
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_sbyte::@3
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) div8s::@1
Culled Empty Block (label) div8s::@3
Culled Empty Block (label) div8s::@11
Culled Empty Block (label) @10
Culled Empty Block (label) main::@4
Culled Empty Block (label) @16
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: char_cursor#100 char_cursor#14
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: char_cursor#103 char_cursor#109
Not aliassing across scopes: print_word::w#4 print_word::w#0
Not aliassing across scopes: char_cursor#104 line_cursor#1
Not aliassing across scopes: char_cursor#105 char_cursor#102
Not aliassing across scopes: print_char::ch#3 print_char::ch#1
Not aliassing across scopes: char_cursor#64 char_cursor#105
Not aliassing across scopes: div8u::dividend#5 div8u::dividend#1
Not aliassing across scopes: div8u::divisor#6 div8u::divisor#0
Not aliassing across scopes: rem8u#1 div8u::rem#8
Not aliassing across scopes: div8u::dividend#1 div8s::dividendb#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisorb#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: div8s::resultb#0 div8u::return#2
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#1
Not aliassing across scopes: rem16u#1 div16u::rem#8
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#0 test_16u::divisor#0
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: test_16u::res#0 div16u::return#2
Not aliassing across scopes: print_word::w#0 test_16u::dividend#0
Not aliassing across scopes: print_word::w#1 test_16u::divisor#0
Not aliassing across scopes: print_word::w#2 test_16u::res#0
Not aliassing across scopes: print_word::w#3 rem16u#1
Not aliassing across scopes: div8u::dividend#2 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: print_byte::b#6 rem8u#1
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: print_sbyte::b#4 rem8s#3
Not aliassing across scopes: char_cursor#100 char_cursor#14
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: char_cursor#103 char_cursor#109
Not aliassing across scopes: print_word::w#4 print_word::w#0
Not aliassing across scopes: char_cursor#104 line_cursor#1
Not aliassing across scopes: char_cursor#105 char_cursor#102
Not aliassing across scopes: print_char::ch#3 print_char::ch#1
Not aliassing across scopes: char_cursor#64 char_cursor#105
Not aliassing across scopes: div8u::dividend#5 div8u::dividend#1
Not aliassing across scopes: div8u::divisor#6 div8u::divisor#0
Not aliassing across scopes: rem8u#1 div8u::rem#8
Not aliassing across scopes: div8u::dividend#1 div8s::dividendb#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisorb#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: div8s::resultb#0 div8u::return#2
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#1
Not aliassing across scopes: rem16u#1 div16u::rem#8
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#0 test_16u::divisor#0
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: test_16u::res#0 div16u::return#2
Not aliassing across scopes: print_word::w#0 test_16u::dividend#0
Not aliassing across scopes: print_word::w#1 test_16u::divisor#0
Not aliassing across scopes: print_word::w#2 test_16u::res#0
Not aliassing across scopes: print_word::w#3 rem16u#1
Not aliassing across scopes: div8u::dividend#2 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: print_byte::b#6 rem8u#1
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: print_sbyte::b#4 rem8s#3
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const string) print_str::str#8
Inlining constant with var siblings (const string) print_str::str#8
Inlining constant with var siblings (const string) print_str::str#8
Inlining constant with var siblings (const string) print_str::str#9
Inlining constant with var siblings (const string) print_str::str#9
Inlining constant with var siblings (const string) print_str::str#9
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::quotient#0
Inlining constant with var siblings (const byte) div8u::quotient#0
Inlining constant with var siblings (const byte) div8u::quotient#0
Inlining constant with var siblings (const byte) div8u::i#0
Inlining constant with var siblings (const byte) div8u::i#0
Inlining constant with var siblings (const byte) div8s::neg#0
Inlining constant with var siblings (const byte) div8s::neg#0
Inlining constant with var siblings (const byte) div8s::neg#0
Inlining constant with different constant siblings (const byte) div8s::neg#0
Inlining constant with var siblings (const byte) div8s::neg#1
Inlining constant with var siblings (const byte) div8s::neg#1
Inlining constant with var siblings (const byte) div8s::neg#1
Inlining constant with different constant siblings (const byte) div8s::neg#1
Inlining constant with var siblings (const word) div16u::rem#0
Inlining constant with var siblings (const word) div16u::rem#0
Inlining constant with var siblings (const word) div16u::rem#0
Inlining constant with var siblings (const word) div16u::rem#0
Inlining constant with var siblings (const word) div16u::rem#0
Inlining constant with var siblings (const word) div16u::rem#0
Inlining constant with var siblings (const word) div16u::quotient#0
Inlining constant with var siblings (const word) div16u::quotient#0
Inlining constant with var siblings (const word) div16u::quotient#0
Inlining constant with var siblings (const byte) div16u::i#0
Inlining constant with var siblings (const byte) div16u::i#0
Inlining constant with var siblings (const byte) test_16u::i#0
Inlining constant with var siblings (const byte) test_16u::i#0
Inlining constant with var siblings (const byte) test_8u::i#0
Inlining constant with var siblings (const byte) test_8u::i#0
Inlining constant with var siblings (const byte) test_8s::i#0
Inlining constant with var siblings (const byte) test_8s::i#0
Inlining constant with var siblings (const byte) rem8u#0
Inlining constant with var siblings (const byte) rem8u#0
Inlining constant with var siblings (const signed byte) rem8s#0
Inlining constant with var siblings (const signed byte) rem8s#0
Inlining constant with var siblings (const signed byte) rem8s#0
Inlining constant with var siblings (const word) rem16u#0
Inlining constant with var siblings (const word) rem16u#0
Inlining constant with var siblings (const byte*) line_cursor#20
Inlining constant with var siblings (const byte*) line_cursor#20
Inlining constant with var siblings (const byte*) line_cursor#20
Inlining constant with var siblings (const byte*) line_cursor#20
Constant inlined print_cls::$0 = (const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000
Constant inlined test_16u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined line_cursor#20 = (const byte*) SCREEN#0
Constant inlined div8u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_8u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_8s::$3 = -(byte/signed byte/word/signed word/dword/signed dword) 13
Constant inlined test_8s::$2 = -(byte/signed byte/word/signed word/dword/signed dword) 11
Constant inlined test_8s::$1 = -(byte/signed byte/word/signed word/dword/signed dword) 127
Constant inlined test_8s::$0 = -(byte/signed byte/word/signed word/dword/signed dword) 127
Constant inlined div16u::rem#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined div16u::quotient#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined div16u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined rem16u#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::sc#0 = (const byte*) SCREEN#0
Constant inlined print_str::str#9 = (const string) test_8s::str2
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined print_str::str#4 = (const string) test_8u::str
Constant inlined div8u::quotient#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#3 = (const string) test_16u::str2
Constant inlined div8s::neg#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined rem8s#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#2 = (const string) test_16u::str1
Constant inlined div8s::neg#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#1 = (const string) test_16u::str
Constant inlined print_byte::$4 = (const string) print_byte::hextab#0
Constant inlined print_str::str#8 = (const string) test_8s::str1
Constant inlined print_str::str#7 = (const string) test_8s::str
Constant inlined print_str::str#6 = (const string) test_8u::str2
Constant inlined test_8s::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#5 = (const string) test_8u::str1
Constant inlined div8u::rem#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined rem8u#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @15 @end main main::@1 main::@2 main::@3 main::@return test_16u test_16u::@1 test_16u::@3 test_16u::@4 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@9 test_16u::@10 test_16u::@11 test_16u::@return print_ln print_ln::@1 print_ln::@return print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div16u div16u::@1 div16u::@4 div16u::@2 div16u::@5 div16u::@3 div16u::@6 div16u::@return test_8u test_8u::@1 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@return div8u div8u::@1 div8u::@4 div8u::@2 div8u::@5 div8u::@3 div8u::@6 div8u::@return test_8s test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 test_8s::@8 test_8s::@9 test_8s::@10 test_8s::@11 test_8s::@return print_sbyte print_sbyte::@2 print_sbyte::@4 print_sbyte::@1 print_sbyte::@return div8s div8s::@7 div8s::@2 div8s::@9 div8s::@4 div8s::@15 div8s::@return div8s::@5 print_cls print_cls::@1 print_cls::@return 
Added new block during phi lifting test_16u::@12(between test_16u::@11 and test_16u::@1)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting div16u::@8(between div16u::@3 and div16u::@1)
Added new block during phi lifting div16u::@9(between div16u::@1 and div16u::@2)
Added new block during phi lifting div16u::@10(between div16u::@2 and div16u::@3)
Added new block during phi lifting test_8u::@12(between test_8u::@11 and test_8u::@1)
Added new block during phi lifting div8u::@8(between div8u::@3 and div8u::@1)
Added new block during phi lifting div8u::@9(between div8u::@1 and div8u::@2)
Added new block during phi lifting div8u::@10(between div8u::@2 and div8u::@3)
Added new block during phi lifting test_8s::@12(between test_8s::@11 and test_8s::@1)
Added new block during phi lifting print_sbyte::@5(between print_sbyte and print_sbyte::@1)
Added new block during phi lifting div8s::@16(between div8s and div8s::@2)
Fixing phi predecessor for div8s::neg#3 to new block ( div8s -> div8s::@16 ) during phi lifting.
Added new block during phi lifting div8s::@17(between div8s::@2 and div8s::@4)
Added new block during phi lifting div8s::@18(between div8s::@15 and div8s::@return)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Block Sequence Planned @begin @15 @end main main::@1 main::@2 main::@3 main::@return test_16u test_16u::@1 test_16u::@3 test_16u::@4 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@9 test_16u::@10 test_16u::@11 test_16u::@return test_16u::@12 print_ln print_ln::@1 print_ln::@return print_ln::@3 print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div16u div16u::@1 div16u::@4 div16u::@2 div16u::@5 div16u::@3 div16u::@6 div16u::@return div16u::@8 div16u::@10 div16u::@9 test_8u test_8u::@1 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@return test_8u::@12 div8u div8u::@1 div8u::@4 div8u::@2 div8u::@5 div8u::@3 div8u::@6 div8u::@return div8u::@8 div8u::@10 div8u::@9 test_8s test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 test_8s::@8 test_8s::@9 test_8s::@10 test_8s::@11 test_8s::@return test_8s::@12 print_sbyte print_sbyte::@2 print_sbyte::@4 print_sbyte::@1 print_sbyte::@return print_sbyte::@5 div8s div8s::@7 div8s::@2 div8s::@9 div8s::@4 div8s::@15 div8s::@18 div8s::@return div8s::@5 div8s::@17 div8s::@16 print_cls print_cls::@1 print_cls::@return print_cls::@3 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @15
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of test_16u
Adding NOP phi() at start of test_16u::@4
Adding NOP phi() at start of test_16u::@6
Adding NOP phi() at start of test_16u::@8
Adding NOP phi() at start of test_8u
Adding NOP phi() at start of test_8u::@4
Adding NOP phi() at start of test_8u::@6
Adding NOP phi() at start of test_8u::@8
Adding NOP phi() at start of test_8s
Adding NOP phi() at start of test_8s::@4
Adding NOP phi() at start of test_8s::@6
Adding NOP phi() at start of test_8s::@8
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print_cls:5 test_8s:7 test_8u:9 test_16u:11 
Calls in [test_16u] to div16u:19 print_word:25 print_str:27 print_word:31 print_str:33 print_word:37 print_str:39 print_word:43 print_ln:45 
Calls in [print_word] to print_byte:62 print_byte:66 
Calls in [print_byte] to print_char:73 print_char:78 
Calls in [test_8u] to div8u:131 print_byte:137 print_str:139 print_byte:143 print_str:145 print_byte:149 print_str:151 print_byte:155 print_ln:157 
Calls in [test_8s] to div8s:196 print_sbyte:202 print_str:204 print_sbyte:208 print_str:210 print_sbyte:214 print_str:216 print_sbyte:220 print_ln:222 
Calls in [print_sbyte] to print_char:234 print_byte:241 
Calls in [div8s] to div8u:259 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 46 initial phi equivalence classes
Coalesced [23] print_word::w#6 ← print_word::w#0
Not coalescing [24] char_cursor#122 ← line_cursor#1
Coalesced [29] print_word::w#7 ← print_word::w#1
Coalesced [30] char_cursor#123 ← char_cursor#100
Coalesced [35] print_word::w#8 ← print_word::w#2
Coalesced (already) [36] char_cursor#124 ← char_cursor#100
Coalesced [41] print_word::w#9 ← print_word::w#3
Coalesced (already) [42] char_cursor#125 ← char_cursor#100
Coalesced [44] line_cursor#69 ← line_cursor#1
Coalesced [49] test_16u::i#12 ← test_16u::i#1
Coalesced [50] rem16u#29 ← rem16u#1
Coalesced [52] line_cursor#72 ← line_cursor#33
Coalesced (already) [57] line_cursor#73 ← line_cursor#1
Coalesced [60] print_byte::b#10 ← print_byte::b#1
Coalesced [61] char_cursor#127 ← char_cursor#104
Coalesced [64] print_byte::b#11 ← print_byte::b#2
Coalesced [65] char_cursor#128 ← char_cursor#14
Coalesced [71] print_char::ch#4 ← print_char::ch#1
Coalesced [72] char_cursor#133 ← char_cursor#105
Coalesced [76] print_char::ch#5 ← print_char::ch#2
Coalesced (already) [77] char_cursor#134 ← char_cursor#14
Coalesced [85] print_str::str#13 ← print_str::str#12
Coalesced (already) [86] char_cursor#136 ← char_cursor#14
Coalesced [93] print_str::str#14 ← print_str::str#0
Coalesced [94] char_cursor#137 ← char_cursor#1
Coalesced [95] div16u::dividend#8 ← div16u::dividend#1
Coalesced [102] div16u::rem#12 ← div16u::rem#2
Coalesced [109] div16u::rem#14 ← div16u::rem#3
Coalesced [110] div16u::return#6 ← div16u::quotient#2
Coalesced [114] rem16u#1 ← div16u::rem#8
Coalesced [116] div16u::rem#10 ← div16u::rem#8
Coalesced [117] div16u::dividend#9 ← div16u::dividend#0
Coalesced [118] div16u::quotient#9 ← div16u::return#0
Coalesced [119] div16u::i#7 ← div16u::i#1
Coalesced [120] div16u::rem#13 ← div16u::rem#5
Coalesced [121] div16u::return#5 ← div16u::quotient#1
Coalesced [122] div16u::rem#11 ← div16u::rem#1
Coalesced [129] div8u::dividend#10 ← div8u::dividend#2
Coalesced [130] div8u::divisor#9 ← div8u::divisor#1
Coalesced [135] print_byte::b#12 ← print_byte::b#3
Not coalescing [136] char_cursor#129 ← line_cursor#1
Coalesced [141] print_byte::b#13 ← print_byte::b#4
Coalesced (already) [142] char_cursor#130 ← char_cursor#100
Coalesced [147] print_byte::b#14 ← print_byte::b#5
Coalesced (already) [148] char_cursor#131 ← char_cursor#100
Coalesced [153] print_byte::b#15 ← print_byte::b#6
Coalesced (already) [154] char_cursor#132 ← char_cursor#100
Coalesced (already) [156] line_cursor#71 ← line_cursor#1
Coalesced [161] test_8u::i#12 ← test_8u::i#1
Coalesced [163] div8u::dividend#11 ← div8u::dividend#5
Coalesced [169] div8u::rem#12 ← div8u::rem#2
Coalesced [176] div8u::rem#14 ← div8u::rem#3
Coalesced [177] div8u::return#8 ← div8u::quotient#2
Coalesced [183] div8u::rem#10 ← div8u::rem#8
Coalesced [184] div8u::dividend#12 ← div8u::dividend#0
Coalesced [185] div8u::quotient#9 ← div8u::return#0
Coalesced [186] div8u::i#7 ← div8u::i#1
Coalesced [187] div8u::rem#13 ← div8u::rem#5
Coalesced [188] div8u::return#7 ← div8u::quotient#1
Coalesced [189] div8u::rem#11 ← div8u::rem#1
Coalesced [200] print_sbyte::b#9 ← print_sbyte::b#1
Coalesced [201] char_cursor#139 ← char_cursor#109
Coalesced [206] print_sbyte::b#10 ← print_sbyte::b#2
Coalesced [207] char_cursor#140 ← char_cursor#100
Coalesced [212] print_sbyte::b#11 ← print_sbyte::b#3
Coalesced (already) [213] char_cursor#141 ← char_cursor#100
Coalesced [218] print_sbyte::b#12 ← print_sbyte::b#4
Coalesced (already) [219] char_cursor#142 ← char_cursor#100
Coalesced [221] line_cursor#70 ← line_cursor#37
Coalesced [226] test_8s::i#12 ← test_8s::i#1
Coalesced [227] rem8u#59 ← rem8u#1
Coalesced [228] rem8s#31 ← rem8s#3
Not coalescing [229] char_cursor#138 ← line_cursor#1
Coalesced (already) [230] line_cursor#74 ← line_cursor#1
Coalesced (already) [233] char_cursor#135 ← char_cursor#103
Coalesced [236] print_sbyte::b#14 ← print_sbyte::b#0
Coalesced [237] char_cursor#144 ← char_cursor#14
Coalesced (already) [240] char_cursor#126 ← char_cursor#102
Coalesced [243] print_sbyte::b#13 ← print_sbyte::b#5
Coalesced (already) [244] char_cursor#143 ← char_cursor#103
Coalesced [253] div8s::neg#10 ← div8s::neg#2
Coalesced [257] div8u::dividend#9 ← div8u::dividend#1
Coalesced [258] div8u::divisor#8 ← div8u::divisor#0
Coalesced [269] div8s::return#7 ← div8s::return#0
Coalesced [270] rem8s#33 ← rem8s#1
Coalesced [272] div8s::neg#9 ← div8s::neg#3
Coalesced [280] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 26 phi equivalence classes
Culled Empty Block (label) test_16u::@12
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) div16u::@6
Culled Empty Block (label) div16u::@8
Culled Empty Block (label) div16u::@10
Culled Empty Block (label) div16u::@9
Culled Empty Block (label) test_8u::@12
Culled Empty Block (label) div8u::@8
Culled Empty Block (label) div8u::@10
Culled Empty Block (label) div8u::@9
Culled Empty Block (label) print_sbyte::@5
Culled Empty Block (label) print_cls::@3
Block Sequence Planned @begin @15 @end main main::@1 main::@2 main::@3 main::@return test_16u test_16u::@1 test_16u::@3 test_16u::@4 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@9 test_16u::@10 test_16u::@11 test_16u::@return print_ln print_ln::@1 print_ln::@return print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div16u div16u::@1 div16u::@4 div16u::@2 div16u::@5 div16u::@3 div16u::@return test_8u test_8u::@1 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@return div8u div8u::@1 div8u::@4 div8u::@2 div8u::@5 div8u::@3 div8u::@6 div8u::@return test_8s test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 test_8s::@8 test_8s::@9 test_8s::@10 test_8s::@11 test_8s::@return test_8s::@12 print_sbyte print_sbyte::@2 print_sbyte::@4 print_sbyte::@1 print_sbyte::@return div8s div8s::@7 div8s::@2 div8s::@9 div8s::@4 div8s::@15 div8s::@18 div8s::@return div8s::@5 div8s::@17 div8s::@16 print_cls print_cls::@1 print_cls::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @15
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of test_16u
Adding NOP phi() at start of test_16u::@4
Adding NOP phi() at start of test_16u::@6
Adding NOP phi() at start of test_16u::@8
Adding NOP phi() at start of test_16u::@10
Adding NOP phi() at start of div16u
Adding NOP phi() at start of test_8u
Adding NOP phi() at start of test_8u::@4
Adding NOP phi() at start of test_8u::@6
Adding NOP phi() at start of test_8u::@8
Adding NOP phi() at start of test_8u::@10
Adding NOP phi() at start of test_8s
Adding NOP phi() at start of test_8s::@4
Adding NOP phi() at start of test_8s::@6
Adding NOP phi() at start of test_8s::@8
Adding NOP phi() at start of test_8s::@10
Adding NOP phi() at start of print_sbyte::@2
Adding NOP phi() at start of print_cls
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@15
@15: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @15
  [3] phi() [ ] ( )
main: scope:[main]  from @15
  [4] phi() [ ] ( main:2 [ ] )
  [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ] ( main:2 [ ] )
  [7] call test_8s param-assignment [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  [9] call test_8u param-assignment [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi() [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  [11] call test_16u param-assignment [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@3
  [12] return  [ ] ( main:2 [ ] )
  to:@return
test_16u: scope:[test_16u]  from main::@3
  [13] phi() [ line_cursor#1 ] ( main:2::test_16u:11 [ line_cursor#1 ] )
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@11
  [14] (word) rem16u#16 ← phi( test_16u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_16u::@11/(word) div16u::rem#8 ) [ test_16u::i#10 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 line_cursor#1 ] )
  [14] (byte) test_16u::i#10 ← phi( test_16u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_16u::@11/(byte) test_16u::i#1 ) [ test_16u::i#10 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 line_cursor#1 ] )
  [15] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] )
  [16] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] )
  [17] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] )
  [18] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] )
  [19] call div16u param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 line_cursor#1 ] )
  [20] (word) div16u::return#2 ← (word) div16u::return#0 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] )
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@1
  [21] (word) test_16u::res#0 ← (word) div16u::return#2 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] )
  [22] (word) print_word::w#0 ← (word) test_16u::dividend#0 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] )
  [23] (byte*~) char_cursor#122 ← (byte*) line_cursor#1 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] )
  [24] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  [25] phi() [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  [26] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] )
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  [27] (word) print_word::w#1 ← (word) test_16u::divisor#0 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] )
  [28] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  [29] phi() [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  [30] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] )
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  [31] (word) print_word::w#2 ← (word) test_16u::res#0 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] )
  [32] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  [33] phi() [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  [34] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] )
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  [35] (word) print_word::w#3 ← (word) div16u::rem#8 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] )
  [36] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  [37] phi() [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  [38] call print_ln param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] )
  to:test_16u::@11
test_16u::@11: scope:[test_16u]  from test_16u::@10
  [39] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] )
  [40] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] )
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@11
  [41] return  [ ] ( main:2::test_16u:11 [ ] )
  to:@return
print_ln: scope:[print_ln]  from test_16u::@10 test_8s::@10 test_8u::@10
  [42] (byte*) line_cursor#33 ← phi( test_16u::@10/(byte*) line_cursor#1 test_8s::@10/(byte*) line_cursor#37 test_8u::@10/(byte*) line_cursor#1 ) [ line_cursor#33 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#33 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#33 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#33 char_cursor#14 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [43] (byte*) line_cursor#17 ← phi( print_ln/(byte*) line_cursor#33 print_ln::@1/(byte*) line_cursor#1 ) [ line_cursor#17 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#17 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#17 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#17 char_cursor#14 ] )
  [44] (byte*) line_cursor#1 ← (byte*) line_cursor#17 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] )
  [45] if((byte*) line_cursor#1<(byte*) char_cursor#14) goto print_ln::@1 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [46] return  [ line_cursor#1 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 ] )
  to:@return
print_word: scope:[print_word]  from test_16u::@3 test_16u::@5 test_16u::@7 test_16u::@9
  [47] (byte*) char_cursor#104 ← phi( test_16u::@3/(byte*~) char_cursor#122 test_16u::@5/(byte*) char_cursor#100 test_16u::@7/(byte*) char_cursor#100 test_16u::@9/(byte*) char_cursor#100 ) [ print_word::w#4 char_cursor#104 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 ] )
  [47] (word) print_word::w#4 ← phi( test_16u::@3/(word) print_word::w#0 test_16u::@5/(word) print_word::w#1 test_16u::@7/(word) print_word::w#2 test_16u::@9/(word) print_word::w#3 ) [ print_word::w#4 char_cursor#104 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 ] )
  [48] (byte) print_byte::b#1 ← > (word) print_word::w#4 [ print_word::w#4 char_cursor#104 print_byte::b#1 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] )
  [49] call print_byte param-assignment [ char_cursor#14 print_word::w#4 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_word::w#4 ] )
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [50] (byte) print_byte::b#2 ← < (word) print_word::w#4 [ char_cursor#14 print_byte::b#2 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] )
  [51] call print_byte param-assignment [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [52] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@1 print_word print_word::@1 test_8u::@3 test_8u::@5 test_8u::@7 test_8u::@9
  [53] (byte*) char_cursor#105 ← phi( print_sbyte::@1/(byte*) char_cursor#102 print_word/(byte*) char_cursor#104 print_word::@1/(byte*) char_cursor#14 test_8u::@3/(byte*~) char_cursor#129 test_8u::@5/(byte*) char_cursor#100 test_8u::@7/(byte*) char_cursor#100 test_8u::@9/(byte*) char_cursor#100 ) [ print_byte::b#7 char_cursor#105 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 ] )
  [53] (byte) print_byte::b#7 ← phi( print_sbyte::@1/(byte~) print_byte::b#9 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 test_8u::@3/(byte) print_byte::b#3 test_8u::@5/(byte) print_byte::b#4 test_8u::@7/(byte) print_byte::b#5 test_8u::@9/(byte) print_byte::b#6 ) [ print_byte::b#7 char_cursor#105 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 ] )
  [54] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#105 print_byte::$0 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] )
  [55] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#105 print_char::ch#1 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_char::ch#1 ] )
  [56] call print_char param-assignment [ char_cursor#14 print_byte::b#7 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::b#7 ] )
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [57] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#14 print_byte::$2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] )
  [58] (byte) print_char::ch#2 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#14 print_char::ch#2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_char::ch#2 ] )
  [59] call print_char param-assignment [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [60] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@2
  [61] (byte*) char_cursor#64 ← phi( print_byte/(byte*) char_cursor#105 print_byte::@1/(byte*) char_cursor#14 print_sbyte::@2/(byte*) char_cursor#103 ) [ print_char::ch#3 char_cursor#64 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] )
  [61] (byte) print_char::ch#3 ← phi( print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sbyte::@2/(byte) '-' ) [ print_char::ch#3 char_cursor#64 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] )
  [62] *((byte*) char_cursor#64) ← (byte) print_char::ch#3 [ char_cursor#64 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] )
  [63] (byte*) char_cursor#14 ← ++ (byte*) char_cursor#64 [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] )
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [64] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] )
  to:@return
print_str: scope:[print_str]  from test_16u::@4 test_16u::@6 test_16u::@8 test_8s::@4 test_8s::@6 test_8s::@8 test_8u::@4 test_8u::@6 test_8u::@8
  [65] (byte*) print_str::str#12 ← phi( test_16u::@4/(const string) test_16u::str test_16u::@6/(const string) test_16u::str1 test_16u::@8/(const string) test_16u::str2 test_8s::@4/(const string) test_8s::str test_8s::@6/(const string) test_8s::str1 test_8s::@8/(const string) test_8s::str2 test_8u::@4/(const string) test_8u::str test_8u::@6/(const string) test_8u::str1 test_8u::@8/(const string) test_8u::str2 ) [ char_cursor#14 print_str::str#12 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_str::str#12 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_str::str#12 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_str::str#12 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_str::str#12 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_str::str#12 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_str::str#12 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_str::str#12 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_str::str#12 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_str::str#12 ] )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [66] (byte*) char_cursor#100 ← phi( print_str/(byte*) char_cursor#14 print_str::@2/(byte*) char_cursor#1 ) [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] )
  [66] (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@2/(byte*) print_str::str#0 ) [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] )
  [67] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] )
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [68] return  [ char_cursor#100 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 ] )
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [69] *((byte*) char_cursor#100) ← *((byte*) print_str::str#10) [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] )
  [70] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#100 [ print_str::str#10 char_cursor#1 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_str::str#10 char_cursor#1 ] )
  [71] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 [ print_str::str#0 char_cursor#1 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_str::str#0 char_cursor#1 ] )
  to:print_str::@1
div16u: scope:[div16u]  from test_16u::@1
  [72] phi() [ div16u::dividend#1 div16u::divisor#0 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::dividend#1 div16u::divisor#0 ] )
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u div16u::@3
  [73] (byte) div16u::i#2 ← phi( div16u/(byte/signed byte/word/signed word/dword/signed dword) 0 div16u::@3/(byte) div16u::i#1 ) [ div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] )
  [73] (word) div16u::quotient#3 ← phi( div16u/(byte/signed byte/word/signed word/dword/signed dword) 0 div16u::@3/(word) div16u::return#0 ) [ div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] )
  [73] (word) div16u::dividend#2 ← phi( div16u/(word) div16u::dividend#1 div16u::@3/(word) div16u::dividend#0 ) [ div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] )
  [73] (word) div16u::rem#4 ← phi( div16u/(byte/signed byte/word/signed word/dword/signed dword) 0 div16u::@3/(word) div16u::rem#8 ) [ div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] )
  [74] (word) div16u::rem#1 ← (word) div16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] )
  [75] (byte~) div16u::$1 ← > (word) div16u::dividend#2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] )
  [76] (byte~) div16u::$2 ← (byte~) div16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] )
  [77] if((byte~) div16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16u::@2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] )
  to:div16u::@4
div16u::@4: scope:[div16u]  from div16u::@1
  [78] (word) div16u::rem#2 ← ++ (word) div16u::rem#1 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#2 ] )
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u::@1 div16u::@4
  [79] (word) div16u::rem#5 ← phi( div16u::@1/(word) div16u::rem#1 div16u::@4/(word) div16u::rem#2 ) [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#5 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#5 ] )
  [80] (word) div16u::dividend#0 ← (word) div16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::quotient#3 div16u::i#2 div16u::dividend#0 div16u::rem#5 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::quotient#3 div16u::i#2 div16u::dividend#0 div16u::rem#5 ] )
  [81] (word) div16u::quotient#1 ← (word) div16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] )
  [82] if((word) div16u::rem#5<(word) div16u::divisor#0) goto div16u::@3 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] )
  to:div16u::@5
div16u::@5: scope:[div16u]  from div16u::@2
  [83] (word) div16u::quotient#2 ← ++ (word) div16u::quotient#1 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#2 ] )
  [84] (word) div16u::rem#3 ← (word) div16u::rem#5 - (word) div16u::divisor#0 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] )
  to:div16u::@3
div16u::@3: scope:[div16u]  from div16u::@2 div16u::@5
  [85] (word) div16u::return#0 ← phi( div16u::@2/(word) div16u::quotient#1 div16u::@5/(word) div16u::quotient#2 ) [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::i#2 div16u::dividend#0 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::i#2 div16u::dividend#0 ] )
  [85] (word) div16u::rem#8 ← phi( div16u::@2/(word) div16u::rem#5 div16u::@5/(word) div16u::rem#3 ) [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::i#2 div16u::dividend#0 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::i#2 div16u::dividend#0 ] )
  [86] (byte) div16u::i#1 ← ++ (byte) div16u::i#2 [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] )
  [87] if((byte) div16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto div16u::@1 [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] )
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@3
  [88] return  [ div16u::rem#8 div16u::return#0 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::return#0 ] )
  to:@return
test_8u: scope:[test_8u]  from main::@2
  [89] phi() [ line_cursor#1 ] ( main:2::test_8u:9 [ line_cursor#1 ] )
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@11
  [90] (byte) test_8u::i#10 ← phi( test_8u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8u::@11/(byte) test_8u::i#1 ) [ line_cursor#1 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 ] )
  [91] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 ] )
  [92] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  [93] (byte) div8u::dividend#2 ← (byte) test_8u::dividend#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 ] )
  [94] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 ] )
  [95] call div8u param-assignment [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] )
  [96] (byte) div8u::return#3 ← (byte) div8u::return#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 rem8u#1 ] )
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@1
  [97] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  [98] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ line_cursor#1 print_byte::b#3 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  [99] (byte*~) char_cursor#129 ← (byte*) line_cursor#1 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  [100] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  [101] phi() [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  [102] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  [103] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ line_cursor#1 char_cursor#100 print_byte::b#4 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#4 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  [104] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  [105] phi() [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  [106] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  [107] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ line_cursor#1 char_cursor#100 print_byte::b#5 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#5 test_8u::i#10 rem8u#1 ] )
  [108] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] )
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  [109] phi() [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] )
  [110] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 rem8u#1 ] )
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  [111] (byte) print_byte::b#6 ← (byte) rem8u#1 [ line_cursor#1 char_cursor#100 print_byte::b#6 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#6 test_8u::i#10 ] )
  [112] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 ] )
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  [113] phi() [ line_cursor#1 char_cursor#14 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 ] )
  [114] call print_ln param-assignment [ line_cursor#1 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 ] )
  to:test_8u::@11
test_8u::@11: scope:[test_8u]  from test_8u::@10
  [115] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#1 ] )
  [116] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@1 [ line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#1 ] )
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@11
  [117] return  [ line_cursor#1 ] ( main:2::test_8u:9 [ line_cursor#1 ] )
  to:@return
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  [118] (byte) div8u::divisor#6 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 ) [ div8u::dividend#5 div8u::divisor#6 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#5 div8u::divisor#6 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#5 div8u::divisor#6 ] )
  [118] (byte) div8u::dividend#5 ← phi( div8s::@4/(byte) div8u::dividend#1 test_8u::@1/(byte) div8u::dividend#2 ) [ div8u::dividend#5 div8u::divisor#6 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#5 div8u::divisor#6 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#5 div8u::divisor#6 ] )
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u div8u::@3
  [119] (byte) div8u::i#2 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::i#1 ) [ div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] )
  [119] (byte) div8u::quotient#3 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::return#0 ) [ div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] )
  [119] (byte) div8u::dividend#3 ← phi( div8u/(byte) div8u::dividend#5 div8u::@3/(byte) div8u::dividend#0 ) [ div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] )
  [119] (byte) div8u::rem#4 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::rem#8 ) [ div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] )
  [120] (byte) div8u::rem#1 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] )
  [121] (byte~) div8u::$1 ← (byte) div8u::dividend#3 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] )
  [122] if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] )
  to:div8u::@4
div8u::@4: scope:[div8u]  from div8u::@1
  [123] (byte) div8u::rem#2 ← ++ (byte) div8u::rem#1 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] )
  to:div8u::@2
div8u::@2: scope:[div8u]  from div8u::@1 div8u::@4
  [124] (byte) div8u::rem#5 ← phi( div8u::@1/(byte) div8u::rem#1 div8u::@4/(byte) div8u::rem#2 ) [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#5 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#5 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#5 ] )
  [125] (byte) div8u::dividend#0 ← (byte) div8u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] )
  [126] (byte) div8u::quotient#1 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] )
  [127] if((byte) div8u::rem#5<(byte) div8u::divisor#6) goto div8u::@3 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] )
  to:div8u::@5
div8u::@5: scope:[div8u]  from div8u::@2
  [128] (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#1 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] )
  [129] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#6 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] )
  to:div8u::@3
div8u::@3: scope:[div8u]  from div8u::@2 div8u::@5
  [130] (byte) div8u::return#0 ← phi( div8u::@2/(byte) div8u::quotient#1 div8u::@5/(byte) div8u::quotient#2 ) [ div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] )
  [130] (byte) div8u::rem#8 ← phi( div8u::@2/(byte) div8u::rem#5 div8u::@5/(byte) div8u::rem#3 ) [ div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] )
  [131] (byte) div8u::i#1 ← ++ (byte) div8u::i#2 [ div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] )
  [132] if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1 [ div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] )
  to:div8u::@6
div8u::@6: scope:[div8u]  from div8u::@3
  [133] (byte) rem8u#1 ← (byte) div8u::rem#8 [ div8u::return#0 rem8u#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#1 ] )
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@6
  [134] return  [ div8u::return#0 rem8u#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#1 ] )
  to:@return
test_8s: scope:[test_8s]  from main::@1
  [135] phi() [ ] ( main:2::test_8s:7 [ ] )
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@12
  [136] (byte*) line_cursor#37 ← phi( test_8s/(const byte*) SCREEN#0 test_8s::@12/(byte*) line_cursor#1 ) [ line_cursor#37 test_8s::i#10 char_cursor#109 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 ] )
  [136] (byte*) char_cursor#109 ← phi( test_8s/(const byte*) SCREEN#0 test_8s::@12/(byte*~) char_cursor#138 ) [ line_cursor#37 test_8s::i#10 char_cursor#109 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 ] )
  [136] (signed byte) rem8s#18 ← phi( test_8s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8s::@12/(signed byte) rem8s#3 ) [ line_cursor#37 test_8s::i#10 char_cursor#109 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 ] )
  [136] (byte) rem8u#33 ← phi( test_8s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8s::@12/(byte) rem8u#1 ) [ line_cursor#37 test_8s::i#10 char_cursor#109 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 ] )
  [136] (byte) test_8s::i#10 ← phi( test_8s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8s::@12/(byte) test_8s::i#1 ) [ line_cursor#37 test_8s::i#10 char_cursor#109 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 ] )
  [137] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] )
  [138] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] )
  [139] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] )
  [140] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] )
  [141] call div8s param-assignment [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 ] )
  [142] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 ] )
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@1
  [143] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 ] )
  [144] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 ] )
  [145] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  [146] phi() [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  [147] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  [148] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 ] )
  [149] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  [150] phi() [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  [151] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  [152] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#3 ] )
  [153] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  [154] phi() [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  [155] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 ] )
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  [156] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#4 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#4 ] )
  [157] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  [158] phi() [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  [159] call print_ln param-assignment [ line_cursor#1 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#10 rem8s#3 ] )
  to:test_8s::@11
test_8s::@11: scope:[test_8s]  from test_8s::@10
  [160] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] )
  [161] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@12 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] )
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@11
  [162] return  [ line_cursor#1 ] ( main:2::test_8s:7 [ line_cursor#1 ] )
  to:@return
test_8s::@12: scope:[test_8s]  from test_8s::@11
  [163] (byte*~) char_cursor#138 ← (byte*) line_cursor#1 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] )
  to:test_8s::@1
print_sbyte: scope:[print_sbyte]  from test_8s::@3 test_8s::@5 test_8s::@7 test_8s::@9
  [164] (byte*) char_cursor#103 ← phi( test_8s::@3/(byte*) char_cursor#109 test_8s::@5/(byte*) char_cursor#100 test_8s::@7/(byte*) char_cursor#100 test_8s::@9/(byte*) char_cursor#100 ) [ char_cursor#103 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] )
  [164] (signed byte) print_sbyte::b#5 ← phi( test_8s::@3/(signed byte) print_sbyte::b#1 test_8s::@5/(signed byte) print_sbyte::b#2 test_8s::@7/(signed byte) print_sbyte::b#3 test_8s::@9/(signed byte) print_sbyte::b#4 ) [ char_cursor#103 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] )
  [165] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ char_cursor#103 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] )
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  [166] phi() [ char_cursor#103 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] )
  [167] call print_char param-assignment [ char_cursor#14 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#5 ] )
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@2
  [168] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#14 print_sbyte::b#0 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] )
  to:print_sbyte::@1
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@4
  [169] (byte*) char_cursor#102 ← phi( print_sbyte/(byte*) char_cursor#103 print_sbyte::@4/(byte*) char_cursor#14 ) [ char_cursor#102 print_sbyte::b#6 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#102 print_sbyte::b#6 ] )
  [169] (signed byte) print_sbyte::b#6 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 print_sbyte::@4/(signed byte) print_sbyte::b#0 ) [ char_cursor#102 print_sbyte::b#6 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#102 print_sbyte::b#6 ] )
  [170] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 char_cursor#102 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#9 char_cursor#102 ] )
  [171] call print_byte param-assignment [ char_cursor#14 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  [172] return  [ char_cursor#14 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  to:@return
div8s: scope:[div8s]  from test_8s::@1
  [173] if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@16 [ div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] )
  to:div8s::@7
div8s::@7: scope:[div8s]  from div8s
  [174] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] )
  [175] (byte~) div8s::dividendb#8 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendb#8 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendb#8 ] )
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@16 div8s::@7
  [176] (byte) div8s::dividendb#3 ← phi( div8s::@16/(byte~) div8s::dividendb#7 div8s::@7/(byte~) div8s::dividendb#8 ) [ div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] )
  [176] (byte) div8s::neg#3 ← phi( div8s::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 div8s::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 ) [ div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] )
  [177] if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@17 [ div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] )
  to:div8s::@9
div8s::@9: scope:[div8s]  from div8s::@2
  [178] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::$7 ] )
  [179] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::$7 div8s::neg#2 ] )
  [180] (byte~) div8s::divisorb#5 ← (byte)(signed byte~) div8s::$7 [ div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] )
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@17 div8s::@9
  [181] (byte) div8s::neg#4 ← phi( div8s::@17/(byte) div8s::neg#3 div8s::@9/(byte) div8s::neg#2 ) [ div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] )
  [181] (byte) div8s::divisorb#3 ← phi( div8s::@17/(byte~) div8s::divisorb#4 div8s::@9/(byte~) div8s::divisorb#5 ) [ div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] )
  [182] (byte) div8u::dividend#1 ← (byte) div8s::dividendb#3 [ div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 ] )
  [183] (byte) div8u::divisor#0 ← (byte) div8s::divisorb#3 [ div8u::dividend#1 div8u::divisor#0 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::dividend#1 div8u::divisor#0 div8s::neg#4 ] )
  [184] call div8u param-assignment [ div8u::return#0 rem8u#1 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::return#0 rem8u#1 div8s::neg#4 ] )
  [185] (byte) div8u::return#2 ← (byte) div8u::return#0 [ rem8u#1 div8s::neg#4 div8u::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::neg#4 div8u::return#2 ] )
  to:div8s::@15
div8s::@15: scope:[div8s]  from div8s::@4
  [186] (byte) div8s::resultb#0 ← (byte) div8u::return#2 [ rem8u#1 div8s::neg#4 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::neg#4 div8s::resultb#0 ] )
  [187] if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5 [ rem8u#1 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 ] )
  to:div8s::@18
div8s::@18: scope:[div8s]  from div8s::@15
  [188] (signed byte~) div8s::return#6 ← (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#6 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#6 ] )
  [189] (signed byte~) rem8s#32 ← (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::return#6 rem8s#32 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#6 rem8s#32 ] )
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@18 div8s::@5
  [190] (signed byte) rem8s#3 ← phi( div8s::@18/(signed byte~) rem8s#32 div8s::@5/(signed byte) rem8s#1 ) [ rem8u#1 rem8s#3 div8s::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 rem8s#3 div8s::return#2 ] )
  [190] (signed byte) div8s::return#2 ← phi( div8s::@18/(signed byte~) div8s::return#6 div8s::@5/(signed byte) div8s::return#0 ) [ rem8u#1 rem8s#3 div8s::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 rem8s#3 div8s::return#2 ] )
  [191] return  [ rem8u#1 rem8s#3 div8s::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 rem8s#3 div8s::return#2 ] )
  to:@return
div8s::@5: scope:[div8s]  from div8s::@15
  [192] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::resultb#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 rem8s#1 ] )
  [193] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#0 rem8s#1 ] )
  to:div8s::@return
div8s::@17: scope:[div8s]  from div8s::@2
  [194] (byte~) div8s::divisorb#4 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] )
  to:div8s::@4
div8s::@16: scope:[div8s]  from div8s
  [195] (byte~) div8s::dividendb#7 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendb#7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendb#7 ] )
  to:div8s::@2
print_cls: scope:[print_cls]  from main
  [196] phi() [ ] ( main:2::print_cls:5 [ ] )
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [197] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) SCREEN#0 print_cls::@1/(byte*) print_cls::sc#1 ) [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [198] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [199] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  [200] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [201] return  [ ] ( main:2::print_cls:5 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@15 dominated by  @begin @15 
@end dominated by  @end @begin @15 
main dominated by  main @begin @15 
main::@1 dominated by  main main::@1 @begin @15 
main::@2 dominated by  main main::@1 main::@2 @begin @15 
main::@3 dominated by  main main::@1 main::@2 main::@3 @begin @15 
main::@return dominated by  main main::@1 main::@2 main::@3 @begin main::@return @15 
test_16u dominated by  main main::@1 main::@2 main::@3 @begin @15 test_16u 
test_16u::@1 dominated by  main main::@1 main::@2 main::@3 @begin @15 test_16u test_16u::@1 
test_16u::@3 dominated by  main main::@1 main::@2 main::@3 @begin @15 test_16u test_16u::@1 test_16u::@3 
test_16u::@4 dominated by  main main::@1 main::@2 main::@3 @begin @15 test_16u test_16u::@1 test_16u::@3 test_16u::@4 
test_16u::@5 dominated by  main main::@1 main::@2 main::@3 @begin @15 test_16u test_16u::@5 test_16u::@1 test_16u::@3 test_16u::@4 
test_16u::@6 dominated by  main main::@1 main::@2 main::@3 @begin @15 test_16u test_16u::@5 test_16u::@6 test_16u::@1 test_16u::@3 test_16u::@4 
test_16u::@7 dominated by  main main::@1 main::@2 main::@3 @begin @15 test_16u test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@1 test_16u::@3 test_16u::@4 
test_16u::@8 dominated by  main main::@1 main::@2 main::@3 @begin @15 test_16u test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 
test_16u::@9 dominated by  main main::@1 main::@2 main::@3 @begin @15 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 
test_16u::@10 dominated by  main main::@1 main::@2 main::@3 @begin test_16u::@10 @15 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 
test_16u::@11 dominated by  main main::@1 main::@2 main::@3 @begin test_16u::@11 test_16u::@10 @15 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 
test_16u::@return dominated by  main main::@1 main::@2 main::@3 @begin test_16u::@return test_16u::@11 test_16u::@10 @15 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 
print_ln dominated by  main main::@1 @begin print_ln @15 
print_ln::@1 dominated by  print_ln::@1 main main::@1 @begin print_ln @15 
print_ln::@return dominated by  print_ln::@1 main print_ln::@return main::@1 @begin print_ln @15 
print_word dominated by  main print_word main::@1 main::@2 main::@3 @begin @15 test_16u test_16u::@1 test_16u::@3 
print_word::@1 dominated by  main print_word main::@1 main::@2 main::@3 @begin print_word::@1 @15 test_16u test_16u::@1 test_16u::@3 
print_word::@return dominated by  main print_word main::@1 main::@2 main::@3 @begin print_word::@return print_word::@1 @15 test_16u test_16u::@1 test_16u::@3 
print_byte dominated by  main main::@1 @begin @15 print_byte 
print_byte::@1 dominated by  main main::@1 @begin print_byte::@1 @15 print_byte 
print_byte::@return dominated by  main main::@1 @begin print_byte::@return print_byte::@1 @15 print_byte 
print_char dominated by  main print_char main::@1 @begin @15 
print_char::@return dominated by  main print_char main::@1 print_char::@return @begin @15 
print_str dominated by  main main::@1 @begin @15 print_str 
print_str::@1 dominated by  main main::@1 @begin print_str::@1 @15 print_str 
print_str::@return dominated by  main main::@1 @begin print_str::@return print_str::@1 @15 print_str 
print_str::@2 dominated by  main main::@1 @begin print_str::@1 print_str::@2 @15 print_str 
div16u dominated by  main main::@1 main::@2 div16u main::@3 @begin @15 test_16u test_16u::@1 
div16u::@1 dominated by  main main::@1 main::@2 div16u main::@3 @begin div16u::@1 @15 test_16u test_16u::@1 
div16u::@4 dominated by  main main::@1 main::@2 div16u main::@3 @begin div16u::@4 div16u::@1 @15 test_16u test_16u::@1 
div16u::@2 dominated by  main main::@1 main::@2 div16u main::@3 @begin div16u::@2 div16u::@1 @15 test_16u test_16u::@1 
div16u::@5 dominated by  main main::@1 main::@2 div16u main::@3 @begin div16u::@5 div16u::@2 div16u::@1 @15 test_16u test_16u::@1 
div16u::@3 dominated by  main main::@1 main::@2 div16u main::@3 @begin div16u::@3 div16u::@2 div16u::@1 @15 test_16u test_16u::@1 
div16u::@return dominated by  main div16u::@return main::@1 main::@2 div16u main::@3 @begin div16u::@3 div16u::@2 div16u::@1 @15 test_16u test_16u::@1 
test_8u dominated by  main main::@1 main::@2 @begin test_8u @15 
test_8u::@1 dominated by  main main::@1 main::@2 @begin test_8u test_8u::@1 @15 
test_8u::@3 dominated by  main main::@1 main::@2 @begin test_8u test_8u::@3 test_8u::@1 @15 
test_8u::@4 dominated by  main main::@1 main::@2 @begin test_8u test_8u::@3 test_8u::@4 test_8u::@1 @15 
test_8u::@5 dominated by  main main::@1 main::@2 @begin test_8u test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 @15 
test_8u::@6 dominated by  main main::@1 main::@2 @begin test_8u::@6 test_8u test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 @15 
test_8u::@7 dominated by  main main::@1 main::@2 @begin test_8u::@6 test_8u::@7 test_8u test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 @15 
test_8u::@8 dominated by  main main::@1 main::@2 @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 @15 
test_8u::@9 dominated by  main main::@1 main::@2 @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 @15 
test_8u::@10 dominated by  main main::@1 main::@2 @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u test_8u::@10 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 @15 
test_8u::@11 dominated by  main main::@1 main::@2 @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u test_8u::@10 test_8u::@11 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 @15 
test_8u::@return dominated by  main main::@1 main::@2 @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u test_8u::@10 test_8u::@11 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 @15 test_8u::@return 
div8u dominated by  main main::@1 @begin div8u @15 
div8u::@1 dominated by  main main::@1 @begin div8u @15 div8u::@1 
div8u::@4 dominated by  main div8u::@4 main::@1 @begin div8u @15 div8u::@1 
div8u::@2 dominated by  main div8u::@2 main::@1 @begin div8u @15 div8u::@1 
div8u::@5 dominated by  main div8u::@2 div8u::@5 main::@1 @begin div8u @15 div8u::@1 
div8u::@3 dominated by  main div8u::@3 div8u::@2 main::@1 @begin div8u @15 div8u::@1 
div8u::@6 dominated by  main div8u::@3 div8u::@2 div8u::@6 main::@1 @begin div8u @15 div8u::@1 
div8u::@return dominated by  main div8u::@3 div8u::@2 div8u::@6 main::@1 @begin div8u div8u::@return @15 div8u::@1 
test_8s dominated by  main main::@1 @begin test_8s @15 
test_8s::@1 dominated by  main main::@1 @begin test_8s @15 test_8s::@1 
test_8s::@3 dominated by  main main::@1 @begin test_8s @15 test_8s::@1 test_8s::@3 
test_8s::@4 dominated by  main main::@1 @begin test_8s @15 test_8s::@1 test_8s::@3 test_8s::@4 
test_8s::@5 dominated by  main main::@1 @begin test_8s @15 test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 
test_8s::@6 dominated by  main main::@1 @begin test_8s @15 test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 
test_8s::@7 dominated by  main main::@1 @begin test_8s @15 test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@8 dominated by  main test_8s::@8 main::@1 @begin test_8s @15 test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@9 dominated by  main test_8s::@8 test_8s::@9 main::@1 @begin test_8s @15 test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@10 dominated by  main test_8s::@8 test_8s::@9 main::@1 @begin test_8s::@10 test_8s @15 test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@11 dominated by  main test_8s::@8 test_8s::@9 main::@1 @begin test_8s::@10 test_8s::@11 test_8s @15 test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@return dominated by  main test_8s::@8 test_8s::@9 main::@1 @begin test_8s::@10 test_8s::@11 test_8s test_8s::@return @15 test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@12 dominated by  main test_8s::@8 test_8s::@9 main::@1 @begin test_8s::@10 test_8s::@11 test_8s::@12 test_8s @15 test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
print_sbyte dominated by  main main::@1 @begin test_8s @15 test_8s::@1 test_8s::@3 print_sbyte 
print_sbyte::@2 dominated by  main print_sbyte::@2 main::@1 @begin test_8s @15 test_8s::@1 test_8s::@3 print_sbyte 
print_sbyte::@4 dominated by  main print_sbyte::@4 print_sbyte::@2 main::@1 @begin test_8s @15 test_8s::@1 test_8s::@3 print_sbyte 
print_sbyte::@1 dominated by  main print_sbyte::@1 main::@1 @begin test_8s @15 test_8s::@1 test_8s::@3 print_sbyte 
print_sbyte::@return dominated by  main print_sbyte::@1 main::@1 @begin print_sbyte::@return test_8s @15 test_8s::@1 test_8s::@3 print_sbyte 
div8s dominated by  main main::@1 @begin div8s test_8s @15 test_8s::@1 
div8s::@7 dominated by  main main::@1 @begin div8s test_8s @15 test_8s::@1 div8s::@7 
div8s::@2 dominated by  main div8s::@2 main::@1 @begin div8s test_8s @15 test_8s::@1 
div8s::@9 dominated by  main div8s::@2 main::@1 @begin div8s test_8s @15 test_8s::@1 div8s::@9 
div8s::@4 dominated by  main div8s::@2 main::@1 @begin div8s test_8s @15 test_8s::@1 div8s::@4 
div8s::@15 dominated by  main div8s::@2 main::@1 @begin div8s test_8s @15 test_8s::@1 div8s::@15 div8s::@4 
div8s::@18 dominated by  main div8s::@2 main::@1 @begin div8s test_8s @15 div8s::@18 test_8s::@1 div8s::@15 div8s::@4 
div8s::@return dominated by  main div8s::@2 div8s::@return main::@1 @begin div8s test_8s @15 test_8s::@1 div8s::@15 div8s::@4 
div8s::@5 dominated by  main div8s::@2 main::@1 @begin div8s test_8s @15 test_8s::@1 div8s::@15 div8s::@5 div8s::@4 
div8s::@17 dominated by  main div8s::@2 main::@1 @begin div8s test_8s @15 test_8s::@1 div8s::@17 
div8s::@16 dominated by  main main::@1 @begin div8s test_8s @15 test_8s::@1 div8s::@16 
print_cls dominated by  main @begin @15 print_cls 
print_cls::@1 dominated by  main @begin @15 print_cls::@1 print_cls 
print_cls::@return dominated by  main @begin print_cls::@return @15 print_cls::@1 print_cls 

NATURAL LOOPS
Found back edge: Loop head: test_16u::@1 tails: test_16u::@11 blocks: null
Found back edge: Loop head: print_ln::@1 tails: print_ln::@1 blocks: null
Found back edge: Loop head: print_str::@1 tails: print_str::@2 blocks: null
Found back edge: Loop head: div16u::@1 tails: div16u::@3 blocks: null
Found back edge: Loop head: test_8u::@1 tails: test_8u::@11 blocks: null
Found back edge: Loop head: div8u::@1 tails: div8u::@3 blocks: null
Found back edge: Loop head: test_8s::@1 tails: test_8s::@12 blocks: null
Found back edge: Loop head: print_cls::@1 tails: print_cls::@1 blocks: null
Populated: Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1 
Populated: Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Populated: Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Populated: Loop head: div16u::@1 tails: div16u::@3 blocks: div16u::@3 div16u::@2 div16u::@5 div16u::@1 div16u::@4 
Populated: Loop head: test_8u::@1 tails: test_8u::@11 blocks: test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1 
Populated: Loop head: div8u::@1 tails: div8u::@3 blocks: div8u::@3 div8u::@2 div8u::@5 div8u::@1 div8u::@4 
Populated: Loop head: test_8s::@1 tails: test_8s::@12 blocks: test_8s::@12 test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1 
Populated: Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1 
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Loop head: div16u::@1 tails: div16u::@3 blocks: div16u::@3 div16u::@2 div16u::@5 div16u::@1 div16u::@4 
Loop head: test_8u::@1 tails: test_8u::@11 blocks: test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1 
Loop head: div8u::@1 tails: div8u::@3 blocks: div8u::@3 div8u::@2 div8u::@5 div8u::@1 div8u::@4 
Loop head: test_8s::@1 tails: test_8s::@12 blocks: test_8s::@12 test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1 
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 0 loops in scope [main]
Found 1 loops in scope [print_cls]
  Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Found 1 loops in scope [test_8s]
  Loop head: test_8s::@1 tails: test_8s::@12 blocks: test_8s::@12 test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1 
Found 1 loops in scope [test_8u]
  Loop head: test_8u::@1 tails: test_8u::@11 blocks: test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1 
Found 1 loops in scope [test_16u]
  Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1 
Found 0 loops in scope [div8s]
Found 0 loops in scope [print_sbyte]
Found 1 loops in scope [print_str]
  Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Found 1 loops in scope [print_ln]
  Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Found 1 loops in scope [div8u]
  Loop head: div8u::@1 tails: div8u::@3 blocks: div8u::@3 div8u::@2 div8u::@5 div8u::@1 div8u::@4 
Found 0 loops in scope [print_byte]
Found 1 loops in scope [div16u]
  Loop head: div16u::@1 tails: div16u::@3 blocks: div16u::@3 div16u::@2 div16u::@5 div16u::@1 div16u::@4 
Found 0 loops in scope [print_word]
Found 0 loops in scope [print_char]
Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1  depth: 1
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1  depth: 2
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1  depth: 2
Loop head: div16u::@1 tails: div16u::@3 blocks: div16u::@3 div16u::@2 div16u::@5 div16u::@1 div16u::@4  depth: 2
Loop head: test_8u::@1 tails: test_8u::@11 blocks: test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1  depth: 1
Loop head: div8u::@1 tails: div8u::@3 blocks: div8u::@3 div8u::@2 div8u::@5 div8u::@1 div8u::@4  depth: 2
Loop head: test_8s::@1 tails: test_8s::@12 blocks: test_8s::@12 test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1  depth: 1
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte*) char_cursor
(byte*) char_cursor#1 101.0
(byte*) char_cursor#100 18.363636363636363
(byte*) char_cursor#102 3.0
(byte*) char_cursor#103 15.999999999999998
(byte*) char_cursor#104 23.0
(byte*) char_cursor#105 17.333333333333332
(byte*) char_cursor#109 2.4444444444444446
(byte*~) char_cursor#122 22.0
(byte*~) char_cursor#129 22.0
(byte*~) char_cursor#138 22.0
(byte*) char_cursor#14 2.5227272727272725
(byte*) char_cursor#64 5.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(byte~) div16u::$1 202.0
(byte~) div16u::$2 202.0
(word) div16u::dividend
(word) div16u::dividend#0 25.25
(word) div16u::dividend#1 4.333333333333333
(word) div16u::dividend#2 43.57142857142858
(word) div16u::divisor
(word) div16u::divisor#0 12.529411764705884
(byte) div16u::i
(byte) div16u::i#1 151.5
(byte) div16u::i#2 15.538461538461538
(word) div16u::quotient
(word) div16u::quotient#1 151.5
(word) div16u::quotient#2 101.0
(word) div16u::quotient#3 25.25
(word) div16u::rem
(word) div16u::rem#1 75.75
(word) div16u::rem#2 202.0
(word) div16u::rem#3 202.0
(word) div16u::rem#4 202.0
(word) div16u::rem#5 101.0
(word) div16u::rem#8 12.5
(word) div16u::return
(word) div16u::return#0 62.8
(word) div16u::return#2 22.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$2 2.0
(signed byte~) div8s::$7 1.0
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 5.0
(byte) div8s::dividendb
(byte) div8s::dividendb#3 0.8571428571428571
(byte~) div8s::dividendb#7 4.0
(byte~) div8s::dividendb#8 4.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 2.142857142857143
(byte) div8s::divisorb
(byte) div8s::divisorb#3 3.0
(byte~) div8s::divisorb#4 4.0
(byte~) div8s::divisorb#5 4.0
(byte) div8s::neg
(byte) div8s::neg#2 2.0
(byte) div8s::neg#3 1.0
(byte) div8s::neg#4 1.0
(byte) div8s::resultb
(byte) div8s::resultb#0 0.6666666666666666
(signed byte) div8s::return
(signed byte) div8s::return#0 4.0
(signed byte) div8s::return#2 5.0
(signed byte) div8s::return#3 22.0
(signed byte~) div8s::return#6 2.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$1 202.0
(byte) div8u::dividend
(byte) div8u::dividend#0 25.25
(byte) div8u::dividend#1 2.0
(byte) div8u::dividend#2 11.0
(byte) div8u::dividend#3 50.83333333333333
(byte) div8u::dividend#5 15.0
(byte) div8u::divisor
(byte) div8u::divisor#0 4.0
(byte) div8u::divisor#1 22.0
(byte) div8u::divisor#6 14.333333333333332
(byte) div8u::i
(byte) div8u::i#1 151.5
(byte) div8u::i#2 16.833333333333332
(byte) div8u::quotient
(byte) div8u::quotient#1 151.5
(byte) div8u::quotient#2 101.0
(byte) div8u::quotient#3 28.857142857142858
(byte) div8u::rem
(byte) div8u::rem#1 101.0
(byte) div8u::rem#2 202.0
(byte) div8u::rem#3 202.0
(byte) div8u::rem#4 202.0
(byte) div8u::rem#5 101.0
(byte) div8u::rem#8 101.66666666666667
(byte) div8u::return
(byte) div8u::return#0 45.142857142857146
(byte) div8u::return#2 4.0
(byte) div8u::return#3 22.0
(byte*) line_cursor
(byte*) line_cursor#1 5.3478260869565215
(byte*) line_cursor#17 204.0
(byte*) line_cursor#33 35.0
(byte*) line_cursor#37 0.9565217391304348
(void()) main()
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 4.0
(byte) print_byte::b#3 11.0
(byte) print_byte::b#4 22.0
(byte) print_byte::b#5 22.0
(byte) print_byte::b#6 22.0
(byte) print_byte::b#7 13.5
(byte~) print_byte::b#9 4.0
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 4.0
(byte) print_char::ch#3 6.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(void()) print_ln()
(void()) print_sbyte((signed byte) print_sbyte::b)
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 4.0
(signed byte) print_sbyte::b#1 22.0
(signed byte) print_sbyte::b#2 22.0
(signed byte) print_sbyte::b#3 22.0
(signed byte) print_sbyte::b#4 22.0
(signed byte) print_sbyte::b#5 12.5
(signed byte) print_sbyte::b#6 4.0
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#10 101.5
(byte*) print_str::str#12 2.0
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#0 11.0
(word) print_word::w#1 22.0
(word) print_word::w#2 22.0
(word) print_word::w#3 22.0
(word) print_word::w#4 15.999999999999998
(word) rem16u
(word) rem16u#16 110.0
(signed byte) rem8s
(signed byte) rem8s#1 2.0
(signed byte) rem8s#18 110.0
(signed byte) rem8s#3 1.0833333333333333
(signed byte~) rem8s#32 4.0
(byte) rem8u
(byte) rem8u#1 0.48
(byte) rem8u#33 110.0
(void()) test_16u()
(word) test_16u::dividend
(word) test_16u::dividend#0 4.714285714285714
(word[]) test_16u::dividends
(word) test_16u::divisor
(word) test_16u::divisor#0 3.0
(word[]) test_16u::divisors
(byte) test_16u::i
(byte) test_16u::i#1 16.5
(byte) test_16u::i#10 1.76
(word) test_16u::res
(word) test_16u::res#0 2.2
(void()) test_8s()
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 4.714285714285714
(signed byte[]) test_8s::dividends
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 3.3000000000000003
(signed byte[]) test_8s::divisors
(byte) test_8s::i
(byte) test_8s::i#1 11.0
(byte) test_8s::i#10 1.8333333333333333
(signed byte) test_8s::res
(signed byte) test_8s::res#0 2.4444444444444446
(void()) test_8u()
(byte) test_8u::dividend
(byte) test_8u::dividend#0 4.714285714285714
(byte[]) test_8u::dividends
(byte) test_8u::divisor
(byte) test_8u::divisor#0 3.0
(byte[]) test_8u::divisors
(byte) test_8u::i
(byte) test_8u::i#1 16.5
(byte) test_8u::i#10 1.76
(byte) test_8u::res
(byte) test_8u::res#0 2.2

Initial phi equivalence classes
[ test_16u::i#10 test_16u::i#1 ]
[ line_cursor#17 line_cursor#33 line_cursor#1 line_cursor#37 ]
[ print_word::w#4 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 ]
[ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
[ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
[ char_cursor#64 char_cursor#105 char_cursor#102 char_cursor#104 char_cursor#122 char_cursor#100 char_cursor#14 char_cursor#129 char_cursor#103 char_cursor#1 char_cursor#109 char_cursor#138 ]
[ print_str::str#10 print_str::str#12 print_str::str#0 ]
[ div16u::rem#4 rem16u#16 div16u::rem#8 div16u::rem#5 div16u::rem#1 div16u::rem#2 div16u::rem#3 ]
[ div16u::dividend#2 div16u::dividend#1 div16u::dividend#0 ]
[ div16u::quotient#3 div16u::return#0 div16u::quotient#1 div16u::quotient#2 ]
[ div16u::i#2 div16u::i#1 ]
[ test_8u::i#10 test_8u::i#1 ]
[ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 ]
[ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
[ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ]
[ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ]
[ div8u::i#2 div8u::i#1 ]
[ test_8s::i#10 test_8s::i#1 ]
[ rem8u#33 rem8u#1 ]
[ rem8s#18 rem8s#3 rem8s#32 rem8s#1 ]
[ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
[ div8s::dividendb#3 div8s::dividendb#7 div8s::dividendb#8 ]
[ div8s::divisorb#3 div8s::divisorb#4 div8s::divisorb#5 ]
[ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
[ div8s::return#2 div8s::return#6 div8s::return#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable test_16u::dividend#0 to zero page equivalence class [ test_16u::dividend#0 ]
Added variable test_16u::divisor#0 to zero page equivalence class [ test_16u::divisor#0 ]
Added variable div16u::divisor#0 to zero page equivalence class [ div16u::divisor#0 ]
Added variable div16u::return#2 to zero page equivalence class [ div16u::return#2 ]
Added variable test_16u::res#0 to zero page equivalence class [ test_16u::res#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable div16u::$1 to zero page equivalence class [ div16u::$1 ]
Added variable div16u::$2 to zero page equivalence class [ div16u::$2 ]
Added variable test_8u::dividend#0 to zero page equivalence class [ test_8u::dividend#0 ]
Added variable test_8u::divisor#0 to zero page equivalence class [ test_8u::divisor#0 ]
Added variable div8u::return#3 to zero page equivalence class [ div8u::return#3 ]
Added variable test_8u::res#0 to zero page equivalence class [ test_8u::res#0 ]
Added variable div8u::$1 to zero page equivalence class [ div8u::$1 ]
Added variable test_8s::dividend#0 to zero page equivalence class [ test_8s::dividend#0 ]
Added variable test_8s::divisor#0 to zero page equivalence class [ test_8s::divisor#0 ]
Added variable div8s::dividend#0 to zero page equivalence class [ div8s::dividend#0 ]
Added variable div8s::divisor#0 to zero page equivalence class [ div8s::divisor#0 ]
Added variable div8s::return#3 to zero page equivalence class [ div8s::return#3 ]
Added variable test_8s::res#0 to zero page equivalence class [ test_8s::res#0 ]
Added variable div8s::$2 to zero page equivalence class [ div8s::$2 ]
Added variable div8s::$7 to zero page equivalence class [ div8s::$7 ]
Added variable div8u::return#2 to zero page equivalence class [ div8u::return#2 ]
Added variable div8s::resultb#0 to zero page equivalence class [ div8s::resultb#0 ]
Complete equivalence classes
[ test_16u::i#10 test_16u::i#1 ]
[ line_cursor#17 line_cursor#33 line_cursor#1 line_cursor#37 ]
[ print_word::w#4 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 ]
[ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
[ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
[ char_cursor#64 char_cursor#105 char_cursor#102 char_cursor#104 char_cursor#122 char_cursor#100 char_cursor#14 char_cursor#129 char_cursor#103 char_cursor#1 char_cursor#109 char_cursor#138 ]
[ print_str::str#10 print_str::str#12 print_str::str#0 ]
[ div16u::rem#4 rem16u#16 div16u::rem#8 div16u::rem#5 div16u::rem#1 div16u::rem#2 div16u::rem#3 ]
[ div16u::dividend#2 div16u::dividend#1 div16u::dividend#0 ]
[ div16u::quotient#3 div16u::return#0 div16u::quotient#1 div16u::quotient#2 ]
[ div16u::i#2 div16u::i#1 ]
[ test_8u::i#10 test_8u::i#1 ]
[ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 ]
[ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
[ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ]
[ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ]
[ div8u::i#2 div8u::i#1 ]
[ test_8s::i#10 test_8s::i#1 ]
[ rem8u#33 rem8u#1 ]
[ rem8s#18 rem8s#3 rem8s#32 rem8s#1 ]
[ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
[ div8s::dividendb#3 div8s::dividendb#7 div8s::dividendb#8 ]
[ div8s::divisorb#3 div8s::divisorb#4 div8s::divisorb#5 ]
[ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
[ div8s::return#2 div8s::return#6 div8s::return#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ test_16u::dividend#0 ]
[ test_16u::divisor#0 ]
[ div16u::divisor#0 ]
[ div16u::return#2 ]
[ test_16u::res#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ div16u::$1 ]
[ div16u::$2 ]
[ test_8u::dividend#0 ]
[ test_8u::divisor#0 ]
[ div8u::return#3 ]
[ test_8u::res#0 ]
[ div8u::$1 ]
[ test_8s::dividend#0 ]
[ test_8s::divisor#0 ]
[ div8s::dividend#0 ]
[ div8s::divisor#0 ]
[ div8s::return#3 ]
[ test_8s::res#0 ]
[ div8s::$2 ]
[ div8s::$7 ]
[ div8u::return#2 ]
[ div8s::resultb#0 ]
Allocated zp ZP_BYTE:2 [ test_16u::i#10 test_16u::i#1 ]
Allocated zp ZP_WORD:3 [ line_cursor#17 line_cursor#33 line_cursor#1 line_cursor#37 ]
Allocated zp ZP_WORD:5 [ print_word::w#4 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 ]
Allocated zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Allocated zp ZP_BYTE:8 [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
Allocated zp ZP_WORD:9 [ char_cursor#64 char_cursor#105 char_cursor#102 char_cursor#104 char_cursor#122 char_cursor#100 char_cursor#14 char_cursor#129 char_cursor#103 char_cursor#1 char_cursor#109 char_cursor#138 ]
Allocated zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ]
Allocated zp ZP_WORD:13 [ div16u::rem#4 rem16u#16 div16u::rem#8 div16u::rem#5 div16u::rem#1 div16u::rem#2 div16u::rem#3 ]
Allocated zp ZP_WORD:15 [ div16u::dividend#2 div16u::dividend#1 div16u::dividend#0 ]
Allocated zp ZP_WORD:17 [ div16u::quotient#3 div16u::return#0 div16u::quotient#1 div16u::quotient#2 ]
Allocated zp ZP_BYTE:19 [ div16u::i#2 div16u::i#1 ]
Allocated zp ZP_BYTE:20 [ test_8u::i#10 test_8u::i#1 ]
Allocated zp ZP_BYTE:21 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 ]
Allocated zp ZP_BYTE:22 [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
Allocated zp ZP_BYTE:23 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ]
Allocated zp ZP_BYTE:24 [ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ]
Allocated zp ZP_BYTE:25 [ div8u::i#2 div8u::i#1 ]
Allocated zp ZP_BYTE:26 [ test_8s::i#10 test_8s::i#1 ]
Allocated zp ZP_BYTE:27 [ rem8u#33 rem8u#1 ]
Allocated zp ZP_BYTE:28 [ rem8s#18 rem8s#3 rem8s#32 rem8s#1 ]
Allocated zp ZP_BYTE:29 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
Allocated zp ZP_BYTE:30 [ div8s::dividendb#3 div8s::dividendb#7 div8s::dividendb#8 ]
Allocated zp ZP_BYTE:31 [ div8s::divisorb#3 div8s::divisorb#4 div8s::divisorb#5 ]
Allocated zp ZP_BYTE:32 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
Allocated zp ZP_BYTE:33 [ div8s::return#2 div8s::return#6 div8s::return#0 ]
Allocated zp ZP_WORD:34 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_WORD:36 [ test_16u::dividend#0 ]
Allocated zp ZP_WORD:38 [ test_16u::divisor#0 ]
Allocated zp ZP_WORD:40 [ div16u::divisor#0 ]
Allocated zp ZP_WORD:42 [ div16u::return#2 ]
Allocated zp ZP_WORD:44 [ test_16u::res#0 ]
Allocated zp ZP_BYTE:46 [ print_byte::$0 ]
Allocated zp ZP_BYTE:47 [ print_byte::$2 ]
Allocated zp ZP_BYTE:48 [ div16u::$1 ]
Allocated zp ZP_BYTE:49 [ div16u::$2 ]
Allocated zp ZP_BYTE:50 [ test_8u::dividend#0 ]
Allocated zp ZP_BYTE:51 [ test_8u::divisor#0 ]
Allocated zp ZP_BYTE:52 [ div8u::return#3 ]
Allocated zp ZP_BYTE:53 [ test_8u::res#0 ]
Allocated zp ZP_BYTE:54 [ div8u::$1 ]
Allocated zp ZP_BYTE:55 [ test_8s::dividend#0 ]
Allocated zp ZP_BYTE:56 [ test_8s::divisor#0 ]
Allocated zp ZP_BYTE:57 [ div8s::dividend#0 ]
Allocated zp ZP_BYTE:58 [ div8s::divisor#0 ]
Allocated zp ZP_BYTE:59 [ div8s::return#3 ]
Allocated zp ZP_BYTE:60 [ test_8s::res#0 ]
Allocated zp ZP_BYTE:61 [ div8s::$2 ]
Allocated zp ZP_BYTE:62 [ div8s::$7 ]
Allocated zp ZP_BYTE:63 [ div8u::return#2 ]
Allocated zp ZP_BYTE:64 [ div8s::resultb#0 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
  .label char_cursor = 9
  .label line_cursor = 3
  .label rem8u = $1b
  .label rem8s = $1c
  .label rem16u = $d
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @15 [phi:@begin->@15]
b15_from_bbegin:
  jmp b15
//SEG4 @15
b15:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @15 to main [phi:@15->main]
main_from_b15:
  jsr main
//SEG7 [3] phi from @15 to @end [phi:@15->@end]
bend_from_b15:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [196] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call test_8s param-assignment [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  //SEG15 [135] phi from main::@1 to test_8s [phi:main::@1->test_8s]
  test_8s_from_b1:
    jsr test_8s
  //SEG16 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG17 main::@2
  b2:
  //SEG18 [9] call test_8u param-assignment [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  //SEG19 [89] phi from main::@2 to test_8u [phi:main::@2->test_8u]
  test_8u_from_b2:
    jsr test_8u
  //SEG20 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG21 main::@3
  b3:
  //SEG22 [11] call test_16u param-assignment [ ] ( main:2 [ ] )
  //SEG23 [13] phi from main::@3 to test_16u [phi:main::@3->test_16u]
  test_16u_from_b3:
    jsr test_16u
    jmp breturn
  //SEG24 main::@return
  breturn:
  //SEG25 [12] return  [ ] ( main:2 [ ] )
    rts
}
//SEG26 test_16u
test_16u: {
    .label dividend = $24
    .label divisor = $26
    .label res = $2c
    .label i = 2
  //SEG27 [14] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  b1_from_test_16u:
  //SEG28 [14] phi (word) rem16u#16 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta rem16u
    lda #0
    sta rem16u+1
  //SEG29 [14] phi (byte) test_16u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG30 [14] phi from test_16u::@11 to test_16u::@1 [phi:test_16u::@11->test_16u::@1]
  b1_from_b11:
  //SEG31 [14] phi (word) rem16u#16 = (word) div16u::rem#8 [phi:test_16u::@11->test_16u::@1#0] -- register_copy 
  //SEG32 [14] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@11->test_16u::@1#1] -- register_copy 
    jmp b1
  //SEG33 test_16u::@1
  b1:
  //SEG34 [15] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG35 [16] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG36 [17] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta div16u.dividend
    lda dividend+1
    sta div16u.dividend+1
  //SEG37 [18] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta div16u.divisor
    lda divisor+1
    sta div16u.divisor+1
  //SEG38 [19] call div16u param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 line_cursor#1 ] )
  //SEG39 [72] phi from test_16u::@1 to div16u [phi:test_16u::@1->div16u]
  div16u_from_b1:
    jsr div16u
  //SEG40 [20] (word) div16u::return#2 ← (word) div16u::return#0 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] ) -- vwuz1=vwuz2 
    lda div16u.return
    sta div16u.return_2
    lda div16u.return+1
    sta div16u.return_2+1
    jmp b3
  //SEG41 test_16u::@3
  b3:
  //SEG42 [21] (word) test_16u::res#0 ← (word) div16u::return#2 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] ) -- vwuz1=vwuz2 
    lda div16u.return_2
    sta res
    lda div16u.return_2+1
    sta res+1
  //SEG43 [22] (word) print_word::w#0 ← (word) test_16u::dividend#0 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta print_word.w
    lda dividend+1
    sta print_word.w+1
  //SEG44 [23] (byte*~) char_cursor#122 ← (byte*) line_cursor#1 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG45 [24] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  //SEG46 [47] phi from test_16u::@3 to print_word [phi:test_16u::@3->print_word]
  print_word_from_b3:
  //SEG47 [47] phi (byte*) char_cursor#104 = (byte*~) char_cursor#122 [phi:test_16u::@3->print_word#0] -- register_copy 
  //SEG48 [47] phi (word) print_word::w#4 = (word) print_word::w#0 [phi:test_16u::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG49 [25] phi from test_16u::@3 to test_16u::@4 [phi:test_16u::@3->test_16u::@4]
  b4_from_b3:
    jmp b4
  //SEG50 test_16u::@4
  b4:
  //SEG51 [26] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] )
  //SEG52 [65] phi from test_16u::@4 to print_str [phi:test_16u::@4->print_str]
  print_str_from_b4:
  //SEG53 [65] phi (byte*) print_str::str#12 = (const string) test_16u::str [phi:test_16u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG54 test_16u::@5
  b5:
  //SEG55 [27] (word) print_word::w#1 ← (word) test_16u::divisor#0 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG56 [28] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  //SEG57 [47] phi from test_16u::@5 to print_word [phi:test_16u::@5->print_word]
  print_word_from_b5:
  //SEG58 [47] phi (byte*) char_cursor#104 = (byte*) char_cursor#100 [phi:test_16u::@5->print_word#0] -- register_copy 
  //SEG59 [47] phi (word) print_word::w#4 = (word) print_word::w#1 [phi:test_16u::@5->print_word#1] -- register_copy 
    jsr print_word
  //SEG60 [29] phi from test_16u::@5 to test_16u::@6 [phi:test_16u::@5->test_16u::@6]
  b6_from_b5:
    jmp b6
  //SEG61 test_16u::@6
  b6:
  //SEG62 [30] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] )
  //SEG63 [65] phi from test_16u::@6 to print_str [phi:test_16u::@6->print_str]
  print_str_from_b6:
  //SEG64 [65] phi (byte*) print_str::str#12 = (const string) test_16u::str1 [phi:test_16u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG65 test_16u::@7
  b7:
  //SEG66 [31] (word) print_word::w#2 ← (word) test_16u::res#0 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ) -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG67 [32] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  //SEG68 [47] phi from test_16u::@7 to print_word [phi:test_16u::@7->print_word]
  print_word_from_b7:
  //SEG69 [47] phi (byte*) char_cursor#104 = (byte*) char_cursor#100 [phi:test_16u::@7->print_word#0] -- register_copy 
  //SEG70 [47] phi (word) print_word::w#4 = (word) print_word::w#2 [phi:test_16u::@7->print_word#1] -- register_copy 
    jsr print_word
  //SEG71 [33] phi from test_16u::@7 to test_16u::@8 [phi:test_16u::@7->test_16u::@8]
  b8_from_b7:
    jmp b8
  //SEG72 test_16u::@8
  b8:
  //SEG73 [34] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] )
  //SEG74 [65] phi from test_16u::@8 to print_str [phi:test_16u::@8->print_str]
  print_str_from_b8:
  //SEG75 [65] phi (byte*) print_str::str#12 = (const string) test_16u::str2 [phi:test_16u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG76 test_16u::@9
  b9:
  //SEG77 [35] (word) print_word::w#3 ← (word) div16u::rem#8 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ) -- vwuz1=vwuz2 
    lda div16u.rem
    sta print_word.w
    lda div16u.rem+1
    sta print_word.w+1
  //SEG78 [36] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  //SEG79 [47] phi from test_16u::@9 to print_word [phi:test_16u::@9->print_word]
  print_word_from_b9:
  //SEG80 [47] phi (byte*) char_cursor#104 = (byte*) char_cursor#100 [phi:test_16u::@9->print_word#0] -- register_copy 
  //SEG81 [47] phi (word) print_word::w#4 = (word) print_word::w#3 [phi:test_16u::@9->print_word#1] -- register_copy 
    jsr print_word
  //SEG82 [37] phi from test_16u::@9 to test_16u::@10 [phi:test_16u::@9->test_16u::@10]
  b10_from_b9:
    jmp b10
  //SEG83 test_16u::@10
  b10:
  //SEG84 [38] call print_ln param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] )
  //SEG85 [42] phi from test_16u::@10 to print_ln [phi:test_16u::@10->print_ln]
  print_ln_from_b10:
  //SEG86 [42] phi (byte*) line_cursor#33 = (byte*) line_cursor#1 [phi:test_16u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG87 test_16u::@11
  b11:
  //SEG88 [39] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG89 [40] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$c
    bne b1_from_b11
    jmp breturn
  //SEG90 test_16u::@return
  breturn:
  //SEG91 [41] return  [ ] ( main:2::test_16u:11 [ ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG92 print_ln
print_ln: {
  //SEG93 [43] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG94 [43] phi (byte*) line_cursor#17 = (byte*) line_cursor#33 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG95 print_ln::@1
  b1:
  //SEG96 [44] (byte*) line_cursor#1 ← (byte*) line_cursor#17 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG97 [45] if((byte*) line_cursor#1<(byte*) char_cursor#14) goto print_ln::@1 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG98 print_ln::@return
  breturn:
  //SEG99 [46] return  [ line_cursor#1 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 ] )
    rts
}
//SEG100 print_word
print_word: {
    .label w = 5
  //SEG101 [48] (byte) print_byte::b#1 ← > (word) print_word::w#4 [ print_word::w#4 char_cursor#104 print_byte::b#1 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG102 [49] call print_byte param-assignment [ char_cursor#14 print_word::w#4 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_word::w#4 ] )
  //SEG103 [53] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG104 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#104 [phi:print_word->print_byte#0] -- register_copy 
  //SEG105 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG106 print_word::@1
  b1:
  //SEG107 [50] (byte) print_byte::b#2 ← < (word) print_word::w#4 [ char_cursor#14 print_byte::b#2 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG108 [51] call print_byte param-assignment [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  //SEG109 [53] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG110 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#14 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG111 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG112 print_word::@return
  breturn:
  //SEG113 [52] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
    rts
}
//SEG114 print_byte
print_byte: {
    .label _0 = $2e
    .label _2 = $2f
    .label b = 7
  //SEG115 [54] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#105 print_byte::$0 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] ) -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG116 [55] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#105 print_char::ch#1 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_char::ch#1 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda hextab,y
    sta print_char.ch
  //SEG117 [56] call print_char param-assignment [ char_cursor#14 print_byte::b#7 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::b#7 ] )
  //SEG118 [61] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG119 [61] phi (byte*) char_cursor#64 = (byte*) char_cursor#105 [phi:print_byte->print_char#0] -- register_copy 
  //SEG120 [61] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG121 print_byte::@1
  b1:
  //SEG122 [57] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#14 print_byte::$2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG123 [58] (byte) print_char::ch#2 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#14 print_char::ch#2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_char::ch#2 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda hextab,y
    sta print_char.ch
  //SEG124 [59] call print_char param-assignment [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  //SEG125 [61] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG126 [61] phi (byte*) char_cursor#64 = (byte*) char_cursor#14 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG127 [61] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG128 print_byte::@return
  breturn:
  //SEG129 [60] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG130 print_char
print_char: {
    .label ch = 8
  //SEG131 [62] *((byte*) char_cursor#64) ← (byte) print_char::ch#3 [ char_cursor#64 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] ) -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (char_cursor),y
  //SEG132 [63] (byte*) char_cursor#14 ← ++ (byte*) char_cursor#64 [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG133 print_char::@return
  breturn:
  //SEG134 [64] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] )
    rts
}
//SEG135 print_str
print_str: {
    .label str = $b
  //SEG136 [66] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG137 [66] phi (byte*) char_cursor#100 = (byte*) char_cursor#14 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG138 [66] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG139 print_str::@1
  b1:
  //SEG140 [67] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG141 print_str::@return
  breturn:
  //SEG142 [68] return  [ char_cursor#100 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 ] )
    rts
  //SEG143 print_str::@2
  b2:
  //SEG144 [69] *((byte*) char_cursor#100) ← *((byte*) print_str::str#10) [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (char_cursor),y
  //SEG145 [70] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#100 [ print_str::str#10 char_cursor#1 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_str::str#10 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG146 [71] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 [ print_str::str#0 char_cursor#1 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG147 div16u
div16u: {
    .label _1 = $30
    .label _2 = $31
    .label rem = $d
    .label dividend = $f
    .label quotient = $11
    .label i = $13
    .label return = $11
    .label divisor = $28
    .label return_2 = $2a
  //SEG148 [73] phi from div16u to div16u::@1 [phi:div16u->div16u::@1]
  b1_from_div16u:
  //SEG149 [73] phi (byte) div16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16u->div16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG150 [73] phi (word) div16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16u->div16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG151 [73] phi (word) div16u::dividend#2 = (word) div16u::dividend#1 [phi:div16u->div16u::@1#2] -- register_copy 
  //SEG152 [73] phi (word) div16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16u->div16u::@1#3] -- vwuz1=vbuc1 
    lda #0
    sta rem
    lda #0
    sta rem+1
    jmp b1
  //SEG153 [73] phi from div16u::@3 to div16u::@1 [phi:div16u::@3->div16u::@1]
  b1_from_b3:
  //SEG154 [73] phi (byte) div16u::i#2 = (byte) div16u::i#1 [phi:div16u::@3->div16u::@1#0] -- register_copy 
  //SEG155 [73] phi (word) div16u::quotient#3 = (word) div16u::return#0 [phi:div16u::@3->div16u::@1#1] -- register_copy 
  //SEG156 [73] phi (word) div16u::dividend#2 = (word) div16u::dividend#0 [phi:div16u::@3->div16u::@1#2] -- register_copy 
  //SEG157 [73] phi (word) div16u::rem#4 = (word) div16u::rem#8 [phi:div16u::@3->div16u::@1#3] -- register_copy 
    jmp b1
  //SEG158 div16u::@1
  b1:
  //SEG159 [74] (word) div16u::rem#1 ← (word) div16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG160 [75] (byte~) div16u::$1 ← > (word) div16u::dividend#2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ) -- vbuz1=_hi_vwuz2 
    lda dividend+1
    sta _1
  //SEG161 [76] (byte~) div16u::$2 ← (byte~) div16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and _1
    sta _2
  //SEG162 [77] if((byte~) div16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16u::@2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ) -- vbuz1_eq_0_then_la1 
    lda _2
    beq b2_from_b1
    jmp b4
  //SEG163 div16u::@4
  b4:
  //SEG164 [78] (word) div16u::rem#2 ← ++ (word) div16u::rem#1 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#2 ] ) -- vwuz1=_inc_vwuz1 
    inc rem
    bne !+
    inc rem+1
  !:
  //SEG165 [79] phi from div16u::@1 div16u::@4 to div16u::@2 [phi:div16u::@1/div16u::@4->div16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG166 [79] phi (word) div16u::rem#5 = (word) div16u::rem#1 [phi:div16u::@1/div16u::@4->div16u::@2#0] -- register_copy 
    jmp b2
  //SEG167 div16u::@2
  b2:
  //SEG168 [80] (word) div16u::dividend#0 ← (word) div16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::quotient#3 div16u::i#2 div16u::dividend#0 div16u::rem#5 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::quotient#3 div16u::i#2 div16u::dividend#0 div16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG169 [81] (word) div16u::quotient#1 ← (word) div16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG170 [82] if((word) div16u::rem#5<(word) div16u::divisor#0) goto div16u::@3 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ) -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3_from_b2
    bne !+
    lda rem
    cmp divisor
    bcc b3_from_b2
  !:
    jmp b5
  //SEG171 div16u::@5
  b5:
  //SEG172 [83] (word) div16u::quotient#2 ← ++ (word) div16u::quotient#1 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG173 [84] (word) div16u::rem#3 ← (word) div16u::rem#5 - (word) div16u::divisor#0 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ) -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG174 [85] phi from div16u::@2 div16u::@5 to div16u::@3 [phi:div16u::@2/div16u::@5->div16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG175 [85] phi (word) div16u::return#0 = (word) div16u::quotient#1 [phi:div16u::@2/div16u::@5->div16u::@3#0] -- register_copy 
  //SEG176 [85] phi (word) div16u::rem#8 = (word) div16u::rem#5 [phi:div16u::@2/div16u::@5->div16u::@3#1] -- register_copy 
    jmp b3
  //SEG177 div16u::@3
  b3:
  //SEG178 [86] (byte) div16u::i#1 ← ++ (byte) div16u::i#2 [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG179 [87] if((byte) div16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto div16u::@1 [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b3
    jmp breturn
  //SEG180 div16u::@return
  breturn:
  //SEG181 [88] return  [ div16u::rem#8 div16u::return#0 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::return#0 ] )
    rts
}
//SEG182 test_8u
test_8u: {
    .label dividend = $32
    .label divisor = $33
    .label res = $35
    .label i = $14
  //SEG183 [90] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  b1_from_test_8u:
  //SEG184 [90] phi (byte) test_8u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG185 [90] phi from test_8u::@11 to test_8u::@1 [phi:test_8u::@11->test_8u::@1]
  b1_from_b11:
  //SEG186 [90] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@11->test_8u::@1#0] -- register_copy 
    jmp b1
  //SEG187 test_8u::@1
  b1:
  //SEG188 [91] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG189 [92] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG190 [93] (byte) div8u::dividend#2 ← (byte) test_8u::dividend#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta div8u.dividend
  //SEG191 [94] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta div8u.divisor
  //SEG192 [95] call div8u param-assignment [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] )
  //SEG193 [118] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  div8u_from_b1:
  //SEG194 [118] phi (byte) div8u::divisor#6 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG195 [118] phi (byte) div8u::dividend#5 = (byte) div8u::dividend#2 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
  //SEG196 [96] (byte) div8u::return#3 ← (byte) div8u::return#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 rem8u#1 ] ) -- vbuz1=vbuz2 
    lda div8u.return
    sta div8u.return_3
    jmp b3
  //SEG197 test_8u::@3
  b3:
  //SEG198 [97] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ) -- vbuz1=vbuz2 
    lda div8u.return_3
    sta res
  //SEG199 [98] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ line_cursor#1 print_byte::b#3 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta print_byte.b
  //SEG200 [99] (byte*~) char_cursor#129 ← (byte*) line_cursor#1 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG201 [100] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  //SEG202 [53] phi from test_8u::@3 to print_byte [phi:test_8u::@3->print_byte]
  print_byte_from_b3:
  //SEG203 [53] phi (byte*) char_cursor#105 = (byte*~) char_cursor#129 [phi:test_8u::@3->print_byte#0] -- register_copy 
  //SEG204 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG205 [101] phi from test_8u::@3 to test_8u::@4 [phi:test_8u::@3->test_8u::@4]
  b4_from_b3:
    jmp b4
  //SEG206 test_8u::@4
  b4:
  //SEG207 [102] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  //SEG208 [65] phi from test_8u::@4 to print_str [phi:test_8u::@4->print_str]
  print_str_from_b4:
  //SEG209 [65] phi (byte*) print_str::str#12 = (const string) test_8u::str [phi:test_8u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG210 test_8u::@5
  b5:
  //SEG211 [103] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ line_cursor#1 char_cursor#100 print_byte::b#4 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#4 test_8u::i#10 test_8u::res#0 rem8u#1 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG212 [104] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  //SEG213 [53] phi from test_8u::@5 to print_byte [phi:test_8u::@5->print_byte]
  print_byte_from_b5:
  //SEG214 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#100 [phi:test_8u::@5->print_byte#0] -- register_copy 
  //SEG215 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@5->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG216 [105] phi from test_8u::@5 to test_8u::@6 [phi:test_8u::@5->test_8u::@6]
  b6_from_b5:
    jmp b6
  //SEG217 test_8u::@6
  b6:
  //SEG218 [106] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  //SEG219 [65] phi from test_8u::@6 to print_str [phi:test_8u::@6->print_str]
  print_str_from_b6:
  //SEG220 [65] phi (byte*) print_str::str#12 = (const string) test_8u::str1 [phi:test_8u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG221 test_8u::@7
  b7:
  //SEG222 [107] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ line_cursor#1 char_cursor#100 print_byte::b#5 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#5 test_8u::i#10 rem8u#1 ] ) -- vbuz1=vbuz2 
    lda res
    sta print_byte.b
  //SEG223 [108] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] )
  //SEG224 [53] phi from test_8u::@7 to print_byte [phi:test_8u::@7->print_byte]
  print_byte_from_b7:
  //SEG225 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#100 [phi:test_8u::@7->print_byte#0] -- register_copy 
  //SEG226 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@7->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG227 [109] phi from test_8u::@7 to test_8u::@8 [phi:test_8u::@7->test_8u::@8]
  b8_from_b7:
    jmp b8
  //SEG228 test_8u::@8
  b8:
  //SEG229 [110] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 rem8u#1 ] )
  //SEG230 [65] phi from test_8u::@8 to print_str [phi:test_8u::@8->print_str]
  print_str_from_b8:
  //SEG231 [65] phi (byte*) print_str::str#12 = (const string) test_8u::str2 [phi:test_8u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG232 test_8u::@9
  b9:
  //SEG233 [111] (byte) print_byte::b#6 ← (byte) rem8u#1 [ line_cursor#1 char_cursor#100 print_byte::b#6 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#6 test_8u::i#10 ] ) -- vbuz1=vbuz2 
    lda rem8u
    sta print_byte.b
  //SEG234 [112] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 ] )
  //SEG235 [53] phi from test_8u::@9 to print_byte [phi:test_8u::@9->print_byte]
  print_byte_from_b9:
  //SEG236 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#100 [phi:test_8u::@9->print_byte#0] -- register_copy 
  //SEG237 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@9->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG238 [113] phi from test_8u::@9 to test_8u::@10 [phi:test_8u::@9->test_8u::@10]
  b10_from_b9:
    jmp b10
  //SEG239 test_8u::@10
  b10:
  //SEG240 [114] call print_ln param-assignment [ line_cursor#1 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 ] )
  //SEG241 [42] phi from test_8u::@10 to print_ln [phi:test_8u::@10->print_ln]
  print_ln_from_b10:
  //SEG242 [42] phi (byte*) line_cursor#33 = (byte*) line_cursor#1 [phi:test_8u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG243 test_8u::@11
  b11:
  //SEG244 [115] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG245 [116] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@1 [ line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b1_from_b11
    jmp breturn
  //SEG246 test_8u::@return
  breturn:
  //SEG247 [117] return  [ line_cursor#1 ] ( main:2::test_8u:9 [ line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG248 div8u
div8u: {
    .label _1 = $36
    .label rem = $16
    .label dividend = $17
    .label quotient = $18
    .label i = $19
    .label return = $18
    .label divisor = $15
    .label return_2 = $3f
    .label return_3 = $34
  //SEG249 [119] phi from div8u to div8u::@1 [phi:div8u->div8u::@1]
  b1_from_div8u:
  //SEG250 [119] phi (byte) div8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG251 [119] phi (byte) div8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta quotient
  //SEG252 [119] phi (byte) div8u::dividend#3 = (byte) div8u::dividend#5 [phi:div8u->div8u::@1#2] -- register_copy 
  //SEG253 [119] phi (byte) div8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta rem
    jmp b1
  //SEG254 [119] phi from div8u::@3 to div8u::@1 [phi:div8u::@3->div8u::@1]
  b1_from_b3:
  //SEG255 [119] phi (byte) div8u::i#2 = (byte) div8u::i#1 [phi:div8u::@3->div8u::@1#0] -- register_copy 
  //SEG256 [119] phi (byte) div8u::quotient#3 = (byte) div8u::return#0 [phi:div8u::@3->div8u::@1#1] -- register_copy 
  //SEG257 [119] phi (byte) div8u::dividend#3 = (byte) div8u::dividend#0 [phi:div8u::@3->div8u::@1#2] -- register_copy 
  //SEG258 [119] phi (byte) div8u::rem#4 = (byte) div8u::rem#8 [phi:div8u::@3->div8u::@1#3] -- register_copy 
    jmp b1
  //SEG259 div8u::@1
  b1:
  //SEG260 [120] (byte) div8u::rem#1 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl rem
  //SEG261 [121] (byte~) div8u::$1 ← (byte) div8u::dividend#3 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and dividend
    sta _1
  //SEG262 [122] if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuz1_eq_0_then_la1 
    lda _1
    beq b2_from_b1
    jmp b4
  //SEG263 div8u::@4
  b4:
  //SEG264 [123] (byte) div8u::rem#2 ← ++ (byte) div8u::rem#1 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ) -- vbuz1=_inc_vbuz1 
    inc rem
  //SEG265 [124] phi from div8u::@1 div8u::@4 to div8u::@2 [phi:div8u::@1/div8u::@4->div8u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG266 [124] phi (byte) div8u::rem#5 = (byte) div8u::rem#1 [phi:div8u::@1/div8u::@4->div8u::@2#0] -- register_copy 
    jmp b2
  //SEG267 div8u::@2
  b2:
  //SEG268 [125] (byte) div8u::dividend#0 ← (byte) div8u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG269 [126] (byte) div8u::quotient#1 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG270 [127] if((byte) div8u::rem#5<(byte) div8u::divisor#6) goto div8u::@3 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ) -- vbuz1_lt_vbuz2_then_la1 
    lda rem
    cmp divisor
    bcc b3_from_b2
    jmp b5
  //SEG271 div8u::@5
  b5:
  //SEG272 [128] (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#1 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] ) -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG273 [129] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#6 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ) -- vbuz1=vbuz1_minus_vbuz2 
    lda rem
    sec
    sbc divisor
    sta rem
  //SEG274 [130] phi from div8u::@2 div8u::@5 to div8u::@3 [phi:div8u::@2/div8u::@5->div8u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG275 [130] phi (byte) div8u::return#0 = (byte) div8u::quotient#1 [phi:div8u::@2/div8u::@5->div8u::@3#0] -- register_copy 
  //SEG276 [130] phi (byte) div8u::rem#8 = (byte) div8u::rem#5 [phi:div8u::@2/div8u::@5->div8u::@3#1] -- register_copy 
    jmp b3
  //SEG277 div8u::@3
  b3:
  //SEG278 [131] (byte) div8u::i#1 ← ++ (byte) div8u::i#2 [ div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG279 [132] if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1 [ div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b1_from_b3
    jmp b6
  //SEG280 div8u::@6
  b6:
  //SEG281 [133] (byte) rem8u#1 ← (byte) div8u::rem#8 [ div8u::return#0 rem8u#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#1 ] ) -- vbuz1=vbuz2 
    lda rem
    sta rem8u
    jmp breturn
  //SEG282 div8u::@return
  breturn:
  //SEG283 [134] return  [ div8u::return#0 rem8u#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#1 ] )
    rts
}
//SEG284 test_8s
test_8s: {
    .label dividend = $37
    .label divisor = $38
    .label res = $3c
    .label i = $1a
  //SEG285 [136] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  b1_from_test_8s:
  //SEG286 [136] phi (byte*) line_cursor#37 = (const byte*) SCREEN#0 [phi:test_8s->test_8s::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta line_cursor
    lda #>SCREEN
    sta line_cursor+1
  //SEG287 [136] phi (byte*) char_cursor#109 = (const byte*) SCREEN#0 [phi:test_8s->test_8s::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta char_cursor
    lda #>SCREEN
    sta char_cursor+1
  //SEG288 [136] phi (signed byte) rem8s#18 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#2] -- vbsz1=vbuc1 
    lda #0
    sta rem8s
  //SEG289 [136] phi (byte) rem8u#33 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta rem8u
  //SEG290 [136] phi (byte) test_8s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG291 test_8s::@1
  b1:
  //SEG292 [137] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG293 [138] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG294 [139] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ) -- vbsz1=vbsz2 
    lda dividend
    sta div8s.dividend
  //SEG295 [140] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta div8s.divisor
  //SEG296 [141] call div8s param-assignment [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 ] )
    jsr div8s
  //SEG297 [142] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 ] ) -- vbsz1=vbsz2 
    lda div8s.return
    sta div8s.return_3
    jmp b3
  //SEG298 test_8s::@3
  b3:
  //SEG299 [143] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 ] ) -- vbsz1=vbsz2 
    lda div8s.return_3
    sta res
  //SEG300 [144] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 ] ) -- vbsz1=vbsz2 
    lda dividend
    sta print_sbyte.b
  //SEG301 [145] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  //SEG302 [164] phi from test_8s::@3 to print_sbyte [phi:test_8s::@3->print_sbyte]
  print_sbyte_from_b3:
  //SEG303 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#109 [phi:test_8s::@3->print_sbyte#0] -- register_copy 
  //SEG304 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#1 [phi:test_8s::@3->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG305 [146] phi from test_8s::@3 to test_8s::@4 [phi:test_8s::@3->test_8s::@4]
  b4_from_b3:
    jmp b4
  //SEG306 test_8s::@4
  b4:
  //SEG307 [147] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  //SEG308 [65] phi from test_8s::@4 to print_str [phi:test_8s::@4->print_str]
  print_str_from_b4:
  //SEG309 [65] phi (byte*) print_str::str#12 = (const string) test_8s::str [phi:test_8s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG310 test_8s::@5
  b5:
  //SEG311 [148] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG312 [149] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  //SEG313 [164] phi from test_8s::@5 to print_sbyte [phi:test_8s::@5->print_sbyte]
  print_sbyte_from_b5:
  //SEG314 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#100 [phi:test_8s::@5->print_sbyte#0] -- register_copy 
  //SEG315 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#2 [phi:test_8s::@5->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG316 [150] phi from test_8s::@5 to test_8s::@6 [phi:test_8s::@5->test_8s::@6]
  b6_from_b5:
    jmp b6
  //SEG317 test_8s::@6
  b6:
  //SEG318 [151] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  //SEG319 [65] phi from test_8s::@6 to print_str [phi:test_8s::@6->print_str]
  print_str_from_b6:
  //SEG320 [65] phi (byte*) print_str::str#12 = (const string) test_8s::str1 [phi:test_8s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG321 test_8s::@7
  b7:
  //SEG322 [152] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#3 ] ) -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG323 [153] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG324 [164] phi from test_8s::@7 to print_sbyte [phi:test_8s::@7->print_sbyte]
  print_sbyte_from_b7:
  //SEG325 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#100 [phi:test_8s::@7->print_sbyte#0] -- register_copy 
  //SEG326 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#3 [phi:test_8s::@7->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG327 [154] phi from test_8s::@7 to test_8s::@8 [phi:test_8s::@7->test_8s::@8]
  b8_from_b7:
    jmp b8
  //SEG328 test_8s::@8
  b8:
  //SEG329 [155] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG330 [65] phi from test_8s::@8 to print_str [phi:test_8s::@8->print_str]
  print_str_from_b8:
  //SEG331 [65] phi (byte*) print_str::str#12 = (const string) test_8s::str2 [phi:test_8s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG332 test_8s::@9
  b9:
  //SEG333 [156] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#4 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#4 ] ) -- vbsz1=vbsz2 
    lda rem8s
    sta print_sbyte.b
  //SEG334 [157] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG335 [164] phi from test_8s::@9 to print_sbyte [phi:test_8s::@9->print_sbyte]
  print_sbyte_from_b9:
  //SEG336 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#100 [phi:test_8s::@9->print_sbyte#0] -- register_copy 
  //SEG337 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#4 [phi:test_8s::@9->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG338 [158] phi from test_8s::@9 to test_8s::@10 [phi:test_8s::@9->test_8s::@10]
  b10_from_b9:
    jmp b10
  //SEG339 test_8s::@10
  b10:
  //SEG340 [159] call print_ln param-assignment [ line_cursor#1 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG341 [42] phi from test_8s::@10 to print_ln [phi:test_8s::@10->print_ln]
  print_ln_from_b10:
  //SEG342 [42] phi (byte*) line_cursor#33 = (byte*) line_cursor#37 [phi:test_8s::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG343 test_8s::@11
  b11:
  //SEG344 [160] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG345 [161] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@12 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b12
    jmp breturn
  //SEG346 test_8s::@return
  breturn:
  //SEG347 [162] return  [ line_cursor#1 ] ( main:2::test_8s:7 [ line_cursor#1 ] )
    rts
  //SEG348 test_8s::@12
  b12:
  //SEG349 [163] (byte*~) char_cursor#138 ← (byte*) line_cursor#1 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG350 [136] phi from test_8s::@12 to test_8s::@1 [phi:test_8s::@12->test_8s::@1]
  b1_from_b12:
  //SEG351 [136] phi (byte*) line_cursor#37 = (byte*) line_cursor#1 [phi:test_8s::@12->test_8s::@1#0] -- register_copy 
  //SEG352 [136] phi (byte*) char_cursor#109 = (byte*~) char_cursor#138 [phi:test_8s::@12->test_8s::@1#1] -- register_copy 
  //SEG353 [136] phi (signed byte) rem8s#18 = (signed byte) rem8s#3 [phi:test_8s::@12->test_8s::@1#2] -- register_copy 
  //SEG354 [136] phi (byte) rem8u#33 = (byte) rem8u#1 [phi:test_8s::@12->test_8s::@1#3] -- register_copy 
  //SEG355 [136] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@12->test_8s::@1#4] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG356 print_sbyte
print_sbyte: {
    .label b = $1d
  //SEG357 [165] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ char_cursor#103 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1_from_print_sbyte
  //SEG358 [166] phi from print_sbyte to print_sbyte::@2 [phi:print_sbyte->print_sbyte::@2]
  b2_from_print_sbyte:
    jmp b2
  //SEG359 print_sbyte::@2
  b2:
  //SEG360 [167] call print_char param-assignment [ char_cursor#14 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#5 ] )
  //SEG361 [61] phi from print_sbyte::@2 to print_char [phi:print_sbyte::@2->print_char]
  print_char_from_b2:
  //SEG362 [61] phi (byte*) char_cursor#64 = (byte*) char_cursor#103 [phi:print_sbyte::@2->print_char#0] -- register_copy 
  //SEG363 [61] phi (byte) print_char::ch#3 = (byte) '-' [phi:print_sbyte::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG364 print_sbyte::@4
  b4:
  //SEG365 [168] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#14 print_sbyte::b#0 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG366 [169] phi from print_sbyte print_sbyte::@4 to print_sbyte::@1 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1]
  b1_from_print_sbyte:
  b1_from_b4:
  //SEG367 [169] phi (byte*) char_cursor#102 = (byte*) char_cursor#103 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#0] -- register_copy 
  //SEG368 [169] phi (signed byte) print_sbyte::b#6 = (signed byte) print_sbyte::b#5 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#1] -- register_copy 
    jmp b1
  //SEG369 print_sbyte::@1
  b1:
  //SEG370 [170] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 char_cursor#102 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#9 char_cursor#102 ] ) -- vbuz1=vbuz2 
    lda b
    sta print_byte.b
  //SEG371 [171] call print_byte param-assignment [ char_cursor#14 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  //SEG372 [53] phi from print_sbyte::@1 to print_byte [phi:print_sbyte::@1->print_byte]
  print_byte_from_b1:
  //SEG373 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#102 [phi:print_sbyte::@1->print_byte#0] -- register_copy 
  //SEG374 [53] phi (byte) print_byte::b#7 = (byte~) print_byte::b#9 [phi:print_sbyte::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG375 print_sbyte::@return
  breturn:
  //SEG376 [172] return  [ char_cursor#14 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
    rts
}
//SEG377 div8s
div8s: {
    .label _2 = $3d
    .label _7 = $3e
    .label neg = $20
    .label resultb = $40
    .label return = $21
    .label dividend = $39
    .label divisor = $3a
    .label return_3 = $3b
    .label dividendb = $1e
    .label divisorb = $1f
  //SEG378 [173] if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@16 [ div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsz1_ge_0_then_la1 
    lda dividend
    cmp #0
    bpl b16
    jmp b7
  //SEG379 div8s::@7
  b7:
  //SEG380 [174] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] ) -- vbsz1=_neg_vbsz2 
    lda dividend
    eor #$ff
    clc
    adc #1
    sta _2
  //SEG381 [175] (byte~) div8s::dividendb#8 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendb#8 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendb#8 ] ) -- vbuz1=vbuz2 
    lda _2
    sta dividendb
  //SEG382 [176] phi from div8s::@7 to div8s::@2 [phi:div8s::@7->div8s::@2]
  b2_from_b7:
  //SEG383 [176] phi (byte) div8s::dividendb#3 = (byte~) div8s::dividendb#8 [phi:div8s::@7->div8s::@2#0] -- register_copy 
  //SEG384 [176] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div8s::@7->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
  //SEG385 div8s::@2
  b2:
  //SEG386 [177] if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@17 [ div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ) -- vbsz1_ge_0_then_la1 
    lda divisor
    cmp #0
    bpl b17
    jmp b9
  //SEG387 div8s::@9
  b9:
  //SEG388 [178] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ) -- vbsz1=_neg_vbsz2 
    lda divisor
    eor #$ff
    clc
    adc #1
    sta _7
  //SEG389 [179] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ) -- vbuz1=vbuz1_bxor_vbuc1 
    lda neg
    eor #1
    sta neg
  //SEG390 [180] (byte~) div8s::divisorb#5 ← (byte)(signed byte~) div8s::$7 [ div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] ) -- vbuz1=vbuz2 
    lda _7
    sta divisorb
  //SEG391 [181] phi from div8s::@17 div8s::@9 to div8s::@4 [phi:div8s::@17/div8s::@9->div8s::@4]
  b4_from_b17:
  b4_from_b9:
  //SEG392 [181] phi (byte) div8s::neg#4 = (byte) div8s::neg#3 [phi:div8s::@17/div8s::@9->div8s::@4#0] -- register_copy 
  //SEG393 [181] phi (byte) div8s::divisorb#3 = (byte~) div8s::divisorb#4 [phi:div8s::@17/div8s::@9->div8s::@4#1] -- register_copy 
    jmp b4
  //SEG394 div8s::@4
  b4:
  //SEG395 [182] (byte) div8u::dividend#1 ← (byte) div8s::dividendb#3 [ div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 ] ) -- vbuz1=vbuz2 
    lda dividendb
    sta div8u.dividend
  //SEG396 [183] (byte) div8u::divisor#0 ← (byte) div8s::divisorb#3 [ div8u::dividend#1 div8u::divisor#0 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::dividend#1 div8u::divisor#0 div8s::neg#4 ] ) -- vbuz1=vbuz2 
    lda divisorb
    sta div8u.divisor
  //SEG397 [184] call div8u param-assignment [ div8u::return#0 rem8u#1 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::return#0 rem8u#1 div8s::neg#4 ] )
  //SEG398 [118] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  div8u_from_b4:
  //SEG399 [118] phi (byte) div8u::divisor#6 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG400 [118] phi (byte) div8u::dividend#5 = (byte) div8u::dividend#1 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
  //SEG401 [185] (byte) div8u::return#2 ← (byte) div8u::return#0 [ rem8u#1 div8s::neg#4 div8u::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::neg#4 div8u::return#2 ] ) -- vbuz1=vbuz2 
    lda div8u.return
    sta div8u.return_2
    jmp b15
  //SEG402 div8s::@15
  b15:
  //SEG403 [186] (byte) div8s::resultb#0 ← (byte) div8u::return#2 [ rem8u#1 div8s::neg#4 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::neg#4 div8s::resultb#0 ] ) -- vbuz1=vbuz2 
    lda div8u.return_2
    sta resultb
  //SEG404 [187] if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5 [ rem8u#1 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 ] ) -- vbuz1_neq_0_then_la1 
    lda neg
    bne b5
    jmp b18
  //SEG405 div8s::@18
  b18:
  //SEG406 [188] (signed byte~) div8s::return#6 ← (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#6 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#6 ] ) -- vbsz1=vbsz2 
    lda resultb
    sta return
  //SEG407 [189] (signed byte~) rem8s#32 ← (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::return#6 rem8s#32 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#6 rem8s#32 ] ) -- vbsz1=vbsz2 
    lda rem8u
    sta rem8s
  //SEG408 [190] phi from div8s::@18 div8s::@5 to div8s::@return [phi:div8s::@18/div8s::@5->div8s::@return]
  breturn_from_b18:
  breturn_from_b5:
  //SEG409 [190] phi (signed byte) rem8s#3 = (signed byte~) rem8s#32 [phi:div8s::@18/div8s::@5->div8s::@return#0] -- register_copy 
  //SEG410 [190] phi (signed byte) div8s::return#2 = (signed byte~) div8s::return#6 [phi:div8s::@18/div8s::@5->div8s::@return#1] -- register_copy 
    jmp breturn
  //SEG411 div8s::@return
  breturn:
  //SEG412 [191] return  [ rem8u#1 rem8s#3 div8s::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 rem8s#3 div8s::return#2 ] )
    rts
  //SEG413 div8s::@5
  b5:
  //SEG414 [192] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::resultb#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 rem8s#1 ] ) -- vbsz1=_neg_vbsz2 
    lda rem8u
    eor #$ff
    clc
    adc #1
    sta rem8s
  //SEG415 [193] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#0 rem8s#1 ] ) -- vbsz1=_neg_vbsz2 
    lda resultb
    eor #$ff
    clc
    adc #1
    sta return
    jmp breturn_from_b5
  //SEG416 div8s::@17
  b17:
  //SEG417 [194] (byte~) div8s::divisorb#4 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta divisorb
    jmp b4_from_b17
  //SEG418 div8s::@16
  b16:
  //SEG419 [195] (byte~) div8s::dividendb#7 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendb#7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendb#7 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta dividendb
  //SEG420 [176] phi from div8s::@16 to div8s::@2 [phi:div8s::@16->div8s::@2]
  b2_from_b16:
  //SEG421 [176] phi (byte) div8s::dividendb#3 = (byte~) div8s::dividendb#7 [phi:div8s::@16->div8s::@2#0] -- register_copy 
  //SEG422 [176] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8s::@16->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
}
//SEG423 print_cls
print_cls: {
    .label sc = $22
  //SEG424 [197] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG425 [197] phi (byte*) print_cls::sc#2 = (const byte*) SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
    jmp b1
  //SEG426 [197] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG427 [197] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG428 print_cls::@1
  b1:
  //SEG429 [198] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG430 [199] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG431 [200] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bne b1_from_b1
    lda sc
    cmp #<SCREEN+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG432 print_cls::@return
  breturn:
  //SEG433 [201] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [15] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ test_16u::i#10 test_16u::i#1 ]
Statement [16] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ) always clobbers reg byte a 
Statement [17] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [18] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] ) always clobbers reg byte a 
Statement [20] (word) div16u::return#2 ← (word) div16u::return#0 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] ) always clobbers reg byte a 
Statement [21] (word) test_16u::res#0 ← (word) div16u::return#2 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] ) always clobbers reg byte a 
Statement [22] (word) print_word::w#0 ← (word) test_16u::dividend#0 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] ) always clobbers reg byte a 
Statement [23] (byte*~) char_cursor#122 ← (byte*) line_cursor#1 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ) always clobbers reg byte a 
Statement [27] (word) print_word::w#1 ← (word) test_16u::divisor#0 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ) always clobbers reg byte a 
Statement [31] (word) print_word::w#2 ← (word) test_16u::res#0 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ) always clobbers reg byte a 
Statement [35] (word) print_word::w#3 ← (word) div16u::rem#8 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ) always clobbers reg byte a 
Statement [39] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ) always clobbers reg byte a 
Statement [44] (byte*) line_cursor#1 ← (byte*) line_cursor#17 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:20 [ test_8u::i#10 test_8u::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:27 [ rem8u#33 rem8u#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:26 [ test_8s::i#10 test_8s::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:28 [ rem8s#18 rem8s#3 rem8s#32 rem8s#1 ]
Statement [45] if((byte*) line_cursor#1<(byte*) char_cursor#14) goto print_ln::@1 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] ) always clobbers reg byte a 
Statement [48] (byte) print_byte::b#1 ← > (word) print_word::w#4 [ print_word::w#4 char_cursor#104 print_byte::b#1 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [50] (byte) print_byte::b#2 ← < (word) print_word::w#4 [ char_cursor#14 print_byte::b#2 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [57] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#14 print_byte::$2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:51 [ test_8u::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:53 [ test_8u::res#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:56 [ test_8s::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:60 [ test_8s::res#0 ]
Statement [62] *((byte*) char_cursor#64) ← (byte) print_char::ch#3 [ char_cursor#64 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ test_16u::i#10 test_16u::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:20 [ test_8u::i#10 test_8u::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:51 [ test_8u::divisor#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:53 [ test_8u::res#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:27 [ rem8u#33 rem8u#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:26 [ test_8s::i#10 test_8s::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:28 [ rem8s#18 rem8s#3 rem8s#32 rem8s#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:56 [ test_8s::divisor#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:60 [ test_8s::res#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:29 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
Statement [67] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [69] *((byte*) char_cursor#100) ← *((byte*) print_str::str#10) [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [75] (byte~) div16u::$1 ← > (word) div16u::dividend#2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:19 [ div16u::i#2 div16u::i#1 ]
Statement [76] (byte~) div16u::$2 ← (byte~) div16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ) always clobbers reg byte a 
Statement [82] if((word) div16u::rem#5<(word) div16u::divisor#0) goto div16u::@3 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ) always clobbers reg byte a 
Statement [84] (word) div16u::rem#3 ← (word) div16u::rem#5 - (word) div16u::divisor#0 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ) always clobbers reg byte a 
Statement [92] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:50 [ test_8u::dividend#0 ]
Statement [99] (byte*~) char_cursor#129 ← (byte*) line_cursor#1 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Statement [121] (byte~) div8u::$1 ← (byte) div8u::dividend#3 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:23 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:24 [ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ div8u::i#2 div8u::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:22 [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:55 [ test_8s::dividend#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:32 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
Statement [129] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#6 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ) always clobbers reg byte a 
Statement [137] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ) always clobbers reg byte a 
Statement [138] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ) always clobbers reg byte a 
Statement [163] (byte*~) char_cursor#138 ← (byte*) line_cursor#1 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ) always clobbers reg byte a 
Statement [168] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#14 print_sbyte::b#0 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [174] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:58 [ div8s::divisor#0 ]
Statement [178] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:30 [ div8s::dividendb#3 div8s::dividendb#7 div8s::dividendb#8 ]
Statement [179] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:62 [ div8s::$7 ]
Statement [192] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::resultb#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 rem8s#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:64 [ div8s::resultb#0 ]
Statement [193] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#0 rem8s#1 ] ) always clobbers reg byte a 
Statement [198] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [200] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [15] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ) always clobbers reg byte a 
Statement [16] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ) always clobbers reg byte a 
Statement [17] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [18] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] ) always clobbers reg byte a 
Statement [20] (word) div16u::return#2 ← (word) div16u::return#0 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] ) always clobbers reg byte a 
Statement [21] (word) test_16u::res#0 ← (word) div16u::return#2 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] ) always clobbers reg byte a 
Statement [22] (word) print_word::w#0 ← (word) test_16u::dividend#0 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] ) always clobbers reg byte a 
Statement [23] (byte*~) char_cursor#122 ← (byte*) line_cursor#1 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ) always clobbers reg byte a 
Statement [27] (word) print_word::w#1 ← (word) test_16u::divisor#0 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ) always clobbers reg byte a 
Statement [31] (word) print_word::w#2 ← (word) test_16u::res#0 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ) always clobbers reg byte a 
Statement [35] (word) print_word::w#3 ← (word) div16u::rem#8 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ) always clobbers reg byte a 
Statement [39] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ) always clobbers reg byte a 
Statement [44] (byte*) line_cursor#1 ← (byte*) line_cursor#17 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] ) always clobbers reg byte a 
Statement [45] if((byte*) line_cursor#1<(byte*) char_cursor#14) goto print_ln::@1 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] ) always clobbers reg byte a 
Statement [48] (byte) print_byte::b#1 ← > (word) print_word::w#4 [ print_word::w#4 char_cursor#104 print_byte::b#1 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [50] (byte) print_byte::b#2 ← < (word) print_word::w#4 [ char_cursor#14 print_byte::b#2 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [54] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#105 print_byte::$0 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] ) always clobbers reg byte a 
Statement [57] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#14 print_byte::$2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] ) always clobbers reg byte a 
Statement [62] *((byte*) char_cursor#64) ← (byte) print_char::ch#3 [ char_cursor#64 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] ) always clobbers reg byte y 
Statement [67] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [69] *((byte*) char_cursor#100) ← *((byte*) print_str::str#10) [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [75] (byte~) div16u::$1 ← > (word) div16u::dividend#2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ) always clobbers reg byte a 
Statement [76] (byte~) div16u::$2 ← (byte~) div16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ) always clobbers reg byte a 
Statement [82] if((word) div16u::rem#5<(word) div16u::divisor#0) goto div16u::@3 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ) always clobbers reg byte a 
Statement [84] (word) div16u::rem#3 ← (word) div16u::rem#5 - (word) div16u::divisor#0 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ) always clobbers reg byte a 
Statement [92] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) always clobbers reg byte a 
Statement [99] (byte*~) char_cursor#129 ← (byte*) line_cursor#1 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ) always clobbers reg byte a 
Statement [121] (byte~) div8u::$1 ← (byte) div8u::dividend#3 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ) always clobbers reg byte a 
Statement [129] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#6 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ) always clobbers reg byte a 
Statement [137] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ) always clobbers reg byte a 
Statement [138] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ) always clobbers reg byte a 
Statement [163] (byte*~) char_cursor#138 ← (byte*) line_cursor#1 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ) always clobbers reg byte a 
Statement [168] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#14 print_sbyte::b#0 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [174] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] ) always clobbers reg byte a 
Statement [178] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ) always clobbers reg byte a 
Statement [179] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ) always clobbers reg byte a 
Statement [192] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::resultb#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 rem8s#1 ] ) always clobbers reg byte a 
Statement [193] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#0 rem8s#1 ] ) always clobbers reg byte a 
Statement [198] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [200] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ test_16u::i#10 test_16u::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ line_cursor#17 line_cursor#33 line_cursor#1 line_cursor#37 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_WORD:5 [ print_word::w#4 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] : zp ZP_BYTE:7 , reg byte x , 
Potential registers zp ZP_BYTE:8 [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:9 [ char_cursor#64 char_cursor#105 char_cursor#102 char_cursor#104 char_cursor#122 char_cursor#100 char_cursor#14 char_cursor#129 char_cursor#103 char_cursor#1 char_cursor#109 char_cursor#138 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_WORD:13 [ div16u::rem#4 rem16u#16 div16u::rem#8 div16u::rem#5 div16u::rem#1 div16u::rem#2 div16u::rem#3 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ div16u::dividend#2 div16u::dividend#1 div16u::dividend#0 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_WORD:17 [ div16u::quotient#3 div16u::return#0 div16u::quotient#1 div16u::quotient#2 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_BYTE:19 [ div16u::i#2 div16u::i#1 ] : zp ZP_BYTE:19 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ test_8u::i#10 test_8u::i#1 ] : zp ZP_BYTE:20 , reg byte x , 
Potential registers zp ZP_BYTE:21 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 ] : zp ZP_BYTE:21 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ] : zp ZP_BYTE:22 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ] : zp ZP_BYTE:23 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ] : zp ZP_BYTE:24 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ div8u::i#2 div8u::i#1 ] : zp ZP_BYTE:25 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ test_8s::i#10 test_8s::i#1 ] : zp ZP_BYTE:26 , reg byte x , 
Potential registers zp ZP_BYTE:27 [ rem8u#33 rem8u#1 ] : zp ZP_BYTE:27 , reg byte x , 
Potential registers zp ZP_BYTE:28 [ rem8s#18 rem8s#3 rem8s#32 rem8s#1 ] : zp ZP_BYTE:28 , reg byte x , 
Potential registers zp ZP_BYTE:29 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:30 [ div8s::dividendb#3 div8s::dividendb#7 div8s::dividendb#8 ] : zp ZP_BYTE:30 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ div8s::divisorb#3 div8s::divisorb#4 div8s::divisorb#5 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ] : zp ZP_BYTE:32 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ div8s::return#2 div8s::return#6 div8s::return#0 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:34 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:34 , 
Potential registers zp ZP_WORD:36 [ test_16u::dividend#0 ] : zp ZP_WORD:36 , 
Potential registers zp ZP_WORD:38 [ test_16u::divisor#0 ] : zp ZP_WORD:38 , 
Potential registers zp ZP_WORD:40 [ div16u::divisor#0 ] : zp ZP_WORD:40 , 
Potential registers zp ZP_WORD:42 [ div16u::return#2 ] : zp ZP_WORD:42 , 
Potential registers zp ZP_WORD:44 [ test_16u::res#0 ] : zp ZP_WORD:44 , 
Potential registers zp ZP_BYTE:46 [ print_byte::$0 ] : zp ZP_BYTE:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ print_byte::$2 ] : zp ZP_BYTE:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ div16u::$1 ] : zp ZP_BYTE:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:49 [ div16u::$2 ] : zp ZP_BYTE:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:50 [ test_8u::dividend#0 ] : zp ZP_BYTE:50 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:51 [ test_8u::divisor#0 ] : zp ZP_BYTE:51 , reg byte x , 
Potential registers zp ZP_BYTE:52 [ div8u::return#3 ] : zp ZP_BYTE:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:53 [ test_8u::res#0 ] : zp ZP_BYTE:53 , reg byte x , 
Potential registers zp ZP_BYTE:54 [ div8u::$1 ] : zp ZP_BYTE:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:55 [ test_8s::dividend#0 ] : zp ZP_BYTE:55 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:56 [ test_8s::divisor#0 ] : zp ZP_BYTE:56 , reg byte x , 
Potential registers zp ZP_BYTE:57 [ div8s::dividend#0 ] : zp ZP_BYTE:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:58 [ div8s::divisor#0 ] : zp ZP_BYTE:58 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:59 [ div8s::return#3 ] : zp ZP_BYTE:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:60 [ test_8s::res#0 ] : zp ZP_BYTE:60 , reg byte x , 
Potential registers zp ZP_BYTE:61 [ div8s::$2 ] : zp ZP_BYTE:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:62 [ div8s::$7 ] : zp ZP_BYTE:62 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:63 [ div8u::return#2 ] : zp ZP_BYTE:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:64 [ div8s::resultb#0 ] : zp ZP_BYTE:64 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [div16u] 905.25: zp ZP_WORD:13 [ div16u::rem#4 rem16u#16 div16u::rem#8 div16u::rem#5 div16u::rem#1 div16u::rem#2 div16u::rem#3 ] 340.55: zp ZP_WORD:17 [ div16u::quotient#3 div16u::return#0 div16u::quotient#1 div16u::quotient#2 ] 202: zp ZP_BYTE:48 [ div16u::$1 ] 202: zp ZP_BYTE:49 [ div16u::$2 ] 167.04: zp ZP_BYTE:19 [ div16u::i#2 div16u::i#1 ] 73.15: zp ZP_WORD:15 [ div16u::dividend#2 div16u::dividend#1 div16u::dividend#0 ] 22: zp ZP_WORD:42 [ div16u::return#2 ] 12.53: zp ZP_WORD:40 [ div16u::divisor#0 ] 
Uplift Scope [div8u] 909.67: zp ZP_BYTE:22 [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ] 326.5: zp ZP_BYTE:24 [ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ] 202: zp ZP_BYTE:54 [ div8u::$1 ] 168.33: zp ZP_BYTE:25 [ div8u::i#2 div8u::i#1 ] 104.08: zp ZP_BYTE:23 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ] 40.33: zp ZP_BYTE:21 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 ] 22: zp ZP_BYTE:52 [ div8u::return#3 ] 4: zp ZP_BYTE:63 [ div8u::return#2 ] 
Uplift Scope [] 254.66: zp ZP_WORD:9 [ char_cursor#64 char_cursor#105 char_cursor#102 char_cursor#104 char_cursor#122 char_cursor#100 char_cursor#14 char_cursor#129 char_cursor#103 char_cursor#1 char_cursor#109 char_cursor#138 ] 245.3: zp ZP_WORD:3 [ line_cursor#17 line_cursor#33 line_cursor#1 line_cursor#37 ] 117.08: zp ZP_BYTE:28 [ rem8s#18 rem8s#3 rem8s#32 rem8s#1 ] 110.48: zp ZP_BYTE:27 [ rem8u#33 rem8u#1 ] 
Uplift Scope [print_str] 305.5: zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ] 
Uplift Scope [print_byte] 102.5: zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] 4: zp ZP_BYTE:46 [ print_byte::$0 ] 4: zp ZP_BYTE:47 [ print_byte::$2 ] 
Uplift Scope [print_sbyte] 108.5: zp ZP_BYTE:29 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] 
Uplift Scope [print_word] 93: zp ZP_WORD:5 [ print_word::w#4 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 ] 
Uplift Scope [div8s] 22: zp ZP_BYTE:59 [ div8s::return#3 ] 11: zp ZP_BYTE:31 [ div8s::divisorb#3 div8s::divisorb#4 div8s::divisorb#5 ] 11: zp ZP_BYTE:33 [ div8s::return#2 div8s::return#6 div8s::return#0 ] 8.86: zp ZP_BYTE:30 [ div8s::dividendb#3 div8s::dividendb#7 div8s::dividendb#8 ] 5: zp ZP_BYTE:57 [ div8s::dividend#0 ] 4: zp ZP_BYTE:32 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ] 2.14: zp ZP_BYTE:58 [ div8s::divisor#0 ] 2: zp ZP_BYTE:61 [ div8s::$2 ] 1: zp ZP_BYTE:62 [ div8s::$7 ] 0.67: zp ZP_BYTE:64 [ div8s::resultb#0 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:34 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [test_16u] 18.26: zp ZP_BYTE:2 [ test_16u::i#10 test_16u::i#1 ] 4.71: zp ZP_WORD:36 [ test_16u::dividend#0 ] 3: zp ZP_WORD:38 [ test_16u::divisor#0 ] 2.2: zp ZP_WORD:44 [ test_16u::res#0 ] 
Uplift Scope [test_8u] 18.26: zp ZP_BYTE:20 [ test_8u::i#10 test_8u::i#1 ] 4.71: zp ZP_BYTE:50 [ test_8u::dividend#0 ] 3: zp ZP_BYTE:51 [ test_8u::divisor#0 ] 2.2: zp ZP_BYTE:53 [ test_8u::res#0 ] 
Uplift Scope [test_8s] 12.83: zp ZP_BYTE:26 [ test_8s::i#10 test_8s::i#1 ] 4.71: zp ZP_BYTE:55 [ test_8s::dividend#0 ] 3.3: zp ZP_BYTE:56 [ test_8s::divisor#0 ] 2.44: zp ZP_BYTE:60 [ test_8s::res#0 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:8 [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ] 
Uplift Scope [print_ln] 
Uplift Scope [main] 

Uplifting [div16u] best 42604 combination zp ZP_WORD:13 [ div16u::rem#4 rem16u#16 div16u::rem#8 div16u::rem#5 div16u::rem#1 div16u::rem#2 div16u::rem#3 ] zp ZP_WORD:17 [ div16u::quotient#3 div16u::return#0 div16u::quotient#1 div16u::quotient#2 ] reg byte a [ div16u::$1 ] reg byte a [ div16u::$2 ] reg byte x [ div16u::i#2 div16u::i#1 ] zp ZP_WORD:15 [ div16u::dividend#2 div16u::dividend#1 div16u::dividend#0 ] zp ZP_WORD:42 [ div16u::return#2 ] zp ZP_WORD:40 [ div16u::divisor#0 ] 
Uplift attempts [div8u] 10000/15552 (limiting to 10000)
Uplifting [div8u] best 40235 combination reg byte y [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ] zp ZP_BYTE:24 [ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ] reg byte a [ div8u::$1 ] reg byte x [ div8u::i#2 div8u::i#1 ] zp ZP_BYTE:23 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ] zp ZP_BYTE:21 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 ] reg byte a [ div8u::return#3 ] reg byte a [ div8u::return#2 ] 
Limited combination testing to 10000 combinations of 15552 possible.
Uplifting [] best 40172 combination zp ZP_WORD:9 [ char_cursor#64 char_cursor#105 char_cursor#102 char_cursor#104 char_cursor#122 char_cursor#100 char_cursor#14 char_cursor#129 char_cursor#103 char_cursor#1 char_cursor#109 char_cursor#138 ] zp ZP_WORD:3 [ line_cursor#17 line_cursor#33 line_cursor#1 line_cursor#37 ] zp ZP_BYTE:28 [ rem8s#18 rem8s#3 rem8s#32 rem8s#1 ] reg byte x [ rem8u#33 rem8u#1 ] 
Uplifting [print_str] best 40172 combination zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ] 
Uplifting [print_byte] best 40164 combination zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_sbyte] best 40164 combination zp ZP_BYTE:29 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] 
Uplifting [print_word] best 40164 combination zp ZP_WORD:5 [ print_word::w#4 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 ] 
Uplift attempts [div8s] 10000/248832 (limiting to 10000)
Uplifting [div8s] best 39972 combination reg byte a [ div8s::return#3 ] reg byte x [ div8s::divisorb#3 div8s::divisorb#4 div8s::divisorb#5 ] reg byte a [ div8s::return#2 div8s::return#6 div8s::return#0 ] reg byte y [ div8s::dividendb#3 div8s::dividendb#7 div8s::dividendb#8 ] reg byte a [ div8s::dividend#0 ] zp ZP_BYTE:32 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ] reg byte x [ div8s::divisor#0 ] reg byte a [ div8s::$2 ] zp ZP_BYTE:62 [ div8s::$7 ] zp ZP_BYTE:64 [ div8s::resultb#0 ] 
Limited combination testing to 10000 combinations of 248832 possible.
Uplifting [print_cls] best 39972 combination zp ZP_WORD:34 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [test_16u] best 39972 combination zp ZP_BYTE:2 [ test_16u::i#10 test_16u::i#1 ] zp ZP_WORD:36 [ test_16u::dividend#0 ] zp ZP_WORD:38 [ test_16u::divisor#0 ] zp ZP_WORD:44 [ test_16u::res#0 ] 
Uplifting [test_8u] best 39972 combination zp ZP_BYTE:20 [ test_8u::i#10 test_8u::i#1 ] zp ZP_BYTE:50 [ test_8u::dividend#0 ] zp ZP_BYTE:51 [ test_8u::divisor#0 ] zp ZP_BYTE:53 [ test_8u::res#0 ] 
Uplifting [test_8s] best 39972 combination zp ZP_BYTE:26 [ test_8s::i#10 test_8s::i#1 ] zp ZP_BYTE:55 [ test_8s::dividend#0 ] zp ZP_BYTE:56 [ test_8s::divisor#0 ] zp ZP_BYTE:60 [ test_8s::res#0 ] 
Uplifting [print_char] best 39960 combination reg byte a [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ] 
Uplifting [print_ln] best 39960 combination 
Uplifting [main] best 39960 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ]
Uplifting [div8u] best 39960 combination zp ZP_BYTE:24 [ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ rem8s#18 rem8s#3 rem8s#32 rem8s#1 ]
Uplifting [] best 39960 combination zp ZP_BYTE:28 [ rem8s#18 rem8s#3 rem8s#32 rem8s#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
Uplifting [print_sbyte] best 39960 combination zp ZP_BYTE:29 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:23 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ]
Uplifting [div8u] best 39960 combination zp ZP_BYTE:23 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Uplifting [print_byte] best 39960 combination zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 ]
Uplifting [div8u] best 39960 combination zp ZP_BYTE:21 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ test_16u::i#10 test_16u::i#1 ]
Uplifting [test_16u] best 39960 combination zp ZP_BYTE:2 [ test_16u::i#10 test_16u::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ test_8u::i#10 test_8u::i#1 ]
Uplifting [test_8u] best 39960 combination zp ZP_BYTE:20 [ test_8u::i#10 test_8u::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ test_8s::i#10 test_8s::i#1 ]
Uplifting [test_8s] best 39960 combination zp ZP_BYTE:26 [ test_8s::i#10 test_8s::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ test_8u::dividend#0 ]
Uplifting [test_8u] best 39960 combination zp ZP_BYTE:50 [ test_8u::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:55 [ test_8s::dividend#0 ]
Uplifting [test_8s] best 39960 combination zp ZP_BYTE:55 [ test_8s::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
Uplifting [div8s] best 39960 combination zp ZP_BYTE:32 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:56 [ test_8s::divisor#0 ]
Uplifting [test_8s] best 39960 combination zp ZP_BYTE:56 [ test_8s::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:51 [ test_8u::divisor#0 ]
Uplifting [test_8u] best 39960 combination zp ZP_BYTE:51 [ test_8u::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:60 [ test_8s::res#0 ]
Uplifting [test_8s] best 39960 combination zp ZP_BYTE:60 [ test_8s::res#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:53 [ test_8u::res#0 ]
Uplifting [test_8u] best 39960 combination zp ZP_BYTE:53 [ test_8u::res#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:62 [ div8s::$7 ]
Uplifting [div8s] best 39956 combination reg byte x [ div8s::$7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:64 [ div8s::resultb#0 ]
Uplifting [div8s] best 39953 combination reg byte y [ div8s::resultb#0 ] 
Coalescing zero page register [ zp ZP_WORD:5 [ print_word::w#4 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 ] ] with [ zp ZP_WORD:36 [ test_16u::dividend#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] ] with [ zp ZP_BYTE:29 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] ] with [ zp ZP_BYTE:50 [ test_8u::dividend#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 test_8u::dividend#0 ] ] with [ zp ZP_BYTE:55 [ test_8s::dividend#0 ] ]
Coalescing zero page register [ zp ZP_WORD:17 [ div16u::quotient#3 div16u::return#0 div16u::quotient#1 div16u::quotient#2 ] ] with [ zp ZP_WORD:42 [ div16u::return#2 ] ]
Coalescing zero page register [ zp ZP_WORD:17 [ div16u::quotient#3 div16u::return#0 div16u::quotient#1 div16u::quotient#2 div16u::return#2 ] ] with [ zp ZP_WORD:44 [ test_16u::res#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:21 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 ] ] with [ zp ZP_BYTE:51 [ test_8u::divisor#0 ] ]
Coalescing zero page register [ zp ZP_WORD:38 [ test_16u::divisor#0 ] ] with [ zp ZP_WORD:40 [ div16u::divisor#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ test_16u::i#10 test_16u::i#1 ] ] with [ zp ZP_BYTE:20 [ test_8u::i#10 test_8u::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ test_16u::i#10 test_16u::i#1 test_8u::i#10 test_8u::i#1 ] ] with [ zp ZP_BYTE:26 [ test_8s::i#10 test_8s::i#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ line_cursor#17 line_cursor#33 line_cursor#1 line_cursor#37 ] ] with [ zp ZP_WORD:34 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_WORD:5 [ print_word::w#4 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 test_16u::dividend#0 ] ] with [ zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ char_cursor#64 char_cursor#105 char_cursor#102 char_cursor#104 char_cursor#122 char_cursor#100 char_cursor#14 char_cursor#129 char_cursor#103 char_cursor#1 char_cursor#109 char_cursor#138 ] ] with [ zp ZP_WORD:15 [ div16u::dividend#2 div16u::dividend#1 div16u::dividend#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:21 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 test_8u::divisor#0 ] ] with [ zp ZP_BYTE:28 [ rem8s#18 rem8s#3 rem8s#32 rem8s#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:23 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ] ] with [ zp ZP_BYTE:53 [ test_8u::res#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:23 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 test_8u::res#0 ] ] with [ zp ZP_BYTE:60 [ test_8s::res#0 ] ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:8 [ char_cursor#64 char_cursor#105 char_cursor#102 char_cursor#104 char_cursor#122 char_cursor#100 char_cursor#14 char_cursor#129 char_cursor#103 char_cursor#1 char_cursor#109 char_cursor#138 div16u::dividend#2 div16u::dividend#1 div16u::dividend#0 ]
Allocated (was zp ZP_WORD:13) zp ZP_WORD:10 [ div16u::rem#4 rem16u#16 div16u::rem#8 div16u::rem#5 div16u::rem#1 div16u::rem#2 div16u::rem#3 ]
Allocated (was zp ZP_WORD:17) zp ZP_WORD:12 [ div16u::quotient#3 div16u::return#0 div16u::quotient#1 div16u::quotient#2 div16u::return#2 test_16u::res#0 ]
Allocated (was zp ZP_BYTE:21) zp ZP_BYTE:14 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 test_8u::divisor#0 rem8s#18 rem8s#3 rem8s#32 rem8s#1 ]
Allocated (was zp ZP_BYTE:23) zp ZP_BYTE:15 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 test_8u::res#0 test_8s::res#0 ]
Allocated (was zp ZP_BYTE:24) zp ZP_BYTE:16 [ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ]
Allocated (was zp ZP_BYTE:32) zp ZP_BYTE:17 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
Allocated (was zp ZP_WORD:38) zp ZP_WORD:18 [ test_16u::divisor#0 div16u::divisor#0 ]
Allocated (was zp ZP_BYTE:56) zp ZP_BYTE:20 [ test_8s::divisor#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
  .label char_cursor = 8
  .label line_cursor = 3
  .label rem8s = $e
  .label rem16u = $a
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @15 [phi:@begin->@15]
b15_from_bbegin:
  jmp b15
//SEG4 @15
b15:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @15 to main [phi:@15->main]
main_from_b15:
  jsr main
//SEG7 [3] phi from @15 to @end [phi:@15->@end]
bend_from_b15:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [196] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call test_8s param-assignment [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  //SEG15 [135] phi from main::@1 to test_8s [phi:main::@1->test_8s]
  test_8s_from_b1:
    jsr test_8s
  //SEG16 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG17 main::@2
  b2:
  //SEG18 [9] call test_8u param-assignment [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  //SEG19 [89] phi from main::@2 to test_8u [phi:main::@2->test_8u]
  test_8u_from_b2:
    jsr test_8u
  //SEG20 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG21 main::@3
  b3:
  //SEG22 [11] call test_16u param-assignment [ ] ( main:2 [ ] )
  //SEG23 [13] phi from main::@3 to test_16u [phi:main::@3->test_16u]
  test_16u_from_b3:
    jsr test_16u
    jmp breturn
  //SEG24 main::@return
  breturn:
  //SEG25 [12] return  [ ] ( main:2 [ ] )
    rts
}
//SEG26 test_16u
test_16u: {
    .label dividend = 5
    .label divisor = $12
    .label res = $c
    .label i = 2
  //SEG27 [14] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  b1_from_test_16u:
  //SEG28 [14] phi (word) rem16u#16 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta rem16u
    lda #0
    sta rem16u+1
  //SEG29 [14] phi (byte) test_16u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG30 [14] phi from test_16u::@11 to test_16u::@1 [phi:test_16u::@11->test_16u::@1]
  b1_from_b11:
  //SEG31 [14] phi (word) rem16u#16 = (word) div16u::rem#8 [phi:test_16u::@11->test_16u::@1#0] -- register_copy 
  //SEG32 [14] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@11->test_16u::@1#1] -- register_copy 
    jmp b1
  //SEG33 test_16u::@1
  b1:
  //SEG34 [15] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG35 [16] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG36 [17] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta div16u.dividend
    lda dividend+1
    sta div16u.dividend+1
  //SEG37 [18] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] )
    // (word) div16u::divisor#0 = (word) test_16u::divisor#0  // register copy zp ZP_WORD:18
  //SEG38 [19] call div16u param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 line_cursor#1 ] )
  //SEG39 [72] phi from test_16u::@1 to div16u [phi:test_16u::@1->div16u]
  div16u_from_b1:
    jsr div16u
  //SEG40 [20] (word) div16u::return#2 ← (word) div16u::return#0 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] )
    // (word) div16u::return#2 = (word) div16u::return#0  // register copy zp ZP_WORD:12
    jmp b3
  //SEG41 test_16u::@3
  b3:
  //SEG42 [21] (word) test_16u::res#0 ← (word) div16u::return#2 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] )
    // (word) test_16u::res#0 = (word) div16u::return#2  // register copy zp ZP_WORD:12
  //SEG43 [22] (word) print_word::w#0 ← (word) test_16u::dividend#0 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] )
    // (word) print_word::w#0 = (word) test_16u::dividend#0  // register copy zp ZP_WORD:5
  //SEG44 [23] (byte*~) char_cursor#122 ← (byte*) line_cursor#1 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG45 [24] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  //SEG46 [47] phi from test_16u::@3 to print_word [phi:test_16u::@3->print_word]
  print_word_from_b3:
  //SEG47 [47] phi (byte*) char_cursor#104 = (byte*~) char_cursor#122 [phi:test_16u::@3->print_word#0] -- register_copy 
  //SEG48 [47] phi (word) print_word::w#4 = (word) print_word::w#0 [phi:test_16u::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG49 [25] phi from test_16u::@3 to test_16u::@4 [phi:test_16u::@3->test_16u::@4]
  b4_from_b3:
    jmp b4
  //SEG50 test_16u::@4
  b4:
  //SEG51 [26] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] )
  //SEG52 [65] phi from test_16u::@4 to print_str [phi:test_16u::@4->print_str]
  print_str_from_b4:
  //SEG53 [65] phi (byte*) print_str::str#12 = (const string) test_16u::str [phi:test_16u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG54 test_16u::@5
  b5:
  //SEG55 [27] (word) print_word::w#1 ← (word) test_16u::divisor#0 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG56 [28] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  //SEG57 [47] phi from test_16u::@5 to print_word [phi:test_16u::@5->print_word]
  print_word_from_b5:
  //SEG58 [47] phi (byte*) char_cursor#104 = (byte*) char_cursor#100 [phi:test_16u::@5->print_word#0] -- register_copy 
  //SEG59 [47] phi (word) print_word::w#4 = (word) print_word::w#1 [phi:test_16u::@5->print_word#1] -- register_copy 
    jsr print_word
  //SEG60 [29] phi from test_16u::@5 to test_16u::@6 [phi:test_16u::@5->test_16u::@6]
  b6_from_b5:
    jmp b6
  //SEG61 test_16u::@6
  b6:
  //SEG62 [30] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] )
  //SEG63 [65] phi from test_16u::@6 to print_str [phi:test_16u::@6->print_str]
  print_str_from_b6:
  //SEG64 [65] phi (byte*) print_str::str#12 = (const string) test_16u::str1 [phi:test_16u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG65 test_16u::@7
  b7:
  //SEG66 [31] (word) print_word::w#2 ← (word) test_16u::res#0 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ) -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG67 [32] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  //SEG68 [47] phi from test_16u::@7 to print_word [phi:test_16u::@7->print_word]
  print_word_from_b7:
  //SEG69 [47] phi (byte*) char_cursor#104 = (byte*) char_cursor#100 [phi:test_16u::@7->print_word#0] -- register_copy 
  //SEG70 [47] phi (word) print_word::w#4 = (word) print_word::w#2 [phi:test_16u::@7->print_word#1] -- register_copy 
    jsr print_word
  //SEG71 [33] phi from test_16u::@7 to test_16u::@8 [phi:test_16u::@7->test_16u::@8]
  b8_from_b7:
    jmp b8
  //SEG72 test_16u::@8
  b8:
  //SEG73 [34] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] )
  //SEG74 [65] phi from test_16u::@8 to print_str [phi:test_16u::@8->print_str]
  print_str_from_b8:
  //SEG75 [65] phi (byte*) print_str::str#12 = (const string) test_16u::str2 [phi:test_16u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG76 test_16u::@9
  b9:
  //SEG77 [35] (word) print_word::w#3 ← (word) div16u::rem#8 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ) -- vwuz1=vwuz2 
    lda div16u.rem
    sta print_word.w
    lda div16u.rem+1
    sta print_word.w+1
  //SEG78 [36] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  //SEG79 [47] phi from test_16u::@9 to print_word [phi:test_16u::@9->print_word]
  print_word_from_b9:
  //SEG80 [47] phi (byte*) char_cursor#104 = (byte*) char_cursor#100 [phi:test_16u::@9->print_word#0] -- register_copy 
  //SEG81 [47] phi (word) print_word::w#4 = (word) print_word::w#3 [phi:test_16u::@9->print_word#1] -- register_copy 
    jsr print_word
  //SEG82 [37] phi from test_16u::@9 to test_16u::@10 [phi:test_16u::@9->test_16u::@10]
  b10_from_b9:
    jmp b10
  //SEG83 test_16u::@10
  b10:
  //SEG84 [38] call print_ln param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] )
  //SEG85 [42] phi from test_16u::@10 to print_ln [phi:test_16u::@10->print_ln]
  print_ln_from_b10:
  //SEG86 [42] phi (byte*) line_cursor#33 = (byte*) line_cursor#1 [phi:test_16u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG87 test_16u::@11
  b11:
  //SEG88 [39] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG89 [40] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$c
    bne b1_from_b11
    jmp breturn
  //SEG90 test_16u::@return
  breturn:
  //SEG91 [41] return  [ ] ( main:2::test_16u:11 [ ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG92 print_ln
print_ln: {
  //SEG93 [43] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG94 [43] phi (byte*) line_cursor#17 = (byte*) line_cursor#33 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG95 print_ln::@1
  b1:
  //SEG96 [44] (byte*) line_cursor#1 ← (byte*) line_cursor#17 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG97 [45] if((byte*) line_cursor#1<(byte*) char_cursor#14) goto print_ln::@1 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG98 print_ln::@return
  breturn:
  //SEG99 [46] return  [ line_cursor#1 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 ] )
    rts
}
//SEG100 print_word
print_word: {
    .label w = 5
  //SEG101 [48] (byte) print_byte::b#1 ← > (word) print_word::w#4 [ print_word::w#4 char_cursor#104 print_byte::b#1 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG102 [49] call print_byte param-assignment [ char_cursor#14 print_word::w#4 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_word::w#4 ] )
  //SEG103 [53] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG104 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#104 [phi:print_word->print_byte#0] -- register_copy 
  //SEG105 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG106 print_word::@1
  b1:
  //SEG107 [50] (byte) print_byte::b#2 ← < (word) print_word::w#4 [ char_cursor#14 print_byte::b#2 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG108 [51] call print_byte param-assignment [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  //SEG109 [53] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG110 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#14 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG111 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG112 print_word::@return
  breturn:
  //SEG113 [52] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
    rts
}
//SEG114 print_byte
print_byte: {
    .label b = 7
  //SEG115 [54] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#105 print_byte::$0 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] ) -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG116 [55] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#105 print_char::ch#1 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_char::ch#1 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG117 [56] call print_char param-assignment [ char_cursor#14 print_byte::b#7 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::b#7 ] )
  //SEG118 [61] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG119 [61] phi (byte*) char_cursor#64 = (byte*) char_cursor#105 [phi:print_byte->print_char#0] -- register_copy 
  //SEG120 [61] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG121 print_byte::@1
  b1:
  //SEG122 [57] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#14 print_byte::$2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG123 [58] (byte) print_char::ch#2 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#14 print_char::ch#2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_char::ch#2 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG124 [59] call print_char param-assignment [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  //SEG125 [61] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG126 [61] phi (byte*) char_cursor#64 = (byte*) char_cursor#14 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG127 [61] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG128 print_byte::@return
  breturn:
  //SEG129 [60] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG130 print_char
print_char: {
  //SEG131 [62] *((byte*) char_cursor#64) ← (byte) print_char::ch#3 [ char_cursor#64 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG132 [63] (byte*) char_cursor#14 ← ++ (byte*) char_cursor#64 [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG133 print_char::@return
  breturn:
  //SEG134 [64] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] )
    rts
}
//SEG135 print_str
print_str: {
    .label str = 5
  //SEG136 [66] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG137 [66] phi (byte*) char_cursor#100 = (byte*) char_cursor#14 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG138 [66] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG139 print_str::@1
  b1:
  //SEG140 [67] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG141 print_str::@return
  breturn:
  //SEG142 [68] return  [ char_cursor#100 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 ] )
    rts
  //SEG143 print_str::@2
  b2:
  //SEG144 [69] *((byte*) char_cursor#100) ← *((byte*) print_str::str#10) [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (char_cursor),y
  //SEG145 [70] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#100 [ print_str::str#10 char_cursor#1 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_str::str#10 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG146 [71] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 [ print_str::str#0 char_cursor#1 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG147 div16u
div16u: {
    .label rem = $a
    .label dividend = 8
    .label quotient = $c
    .label return = $c
    .label divisor = $12
  //SEG148 [73] phi from div16u to div16u::@1 [phi:div16u->div16u::@1]
  b1_from_div16u:
  //SEG149 [73] phi (byte) div16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16u->div16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG150 [73] phi (word) div16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16u->div16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG151 [73] phi (word) div16u::dividend#2 = (word) div16u::dividend#1 [phi:div16u->div16u::@1#2] -- register_copy 
  //SEG152 [73] phi (word) div16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16u->div16u::@1#3] -- vwuz1=vbuc1 
    lda #0
    sta rem
    lda #0
    sta rem+1
    jmp b1
  //SEG153 [73] phi from div16u::@3 to div16u::@1 [phi:div16u::@3->div16u::@1]
  b1_from_b3:
  //SEG154 [73] phi (byte) div16u::i#2 = (byte) div16u::i#1 [phi:div16u::@3->div16u::@1#0] -- register_copy 
  //SEG155 [73] phi (word) div16u::quotient#3 = (word) div16u::return#0 [phi:div16u::@3->div16u::@1#1] -- register_copy 
  //SEG156 [73] phi (word) div16u::dividend#2 = (word) div16u::dividend#0 [phi:div16u::@3->div16u::@1#2] -- register_copy 
  //SEG157 [73] phi (word) div16u::rem#4 = (word) div16u::rem#8 [phi:div16u::@3->div16u::@1#3] -- register_copy 
    jmp b1
  //SEG158 div16u::@1
  b1:
  //SEG159 [74] (word) div16u::rem#1 ← (word) div16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG160 [75] (byte~) div16u::$1 ← > (word) div16u::dividend#2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ) -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG161 [76] (byte~) div16u::$2 ← (byte~) div16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ) -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG162 [77] if((byte~) div16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16u::@2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG163 div16u::@4
  b4:
  //SEG164 [78] (word) div16u::rem#2 ← ++ (word) div16u::rem#1 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#2 ] ) -- vwuz1=_inc_vwuz1 
    inc rem
    bne !+
    inc rem+1
  !:
  //SEG165 [79] phi from div16u::@1 div16u::@4 to div16u::@2 [phi:div16u::@1/div16u::@4->div16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG166 [79] phi (word) div16u::rem#5 = (word) div16u::rem#1 [phi:div16u::@1/div16u::@4->div16u::@2#0] -- register_copy 
    jmp b2
  //SEG167 div16u::@2
  b2:
  //SEG168 [80] (word) div16u::dividend#0 ← (word) div16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::quotient#3 div16u::i#2 div16u::dividend#0 div16u::rem#5 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::quotient#3 div16u::i#2 div16u::dividend#0 div16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG169 [81] (word) div16u::quotient#1 ← (word) div16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG170 [82] if((word) div16u::rem#5<(word) div16u::divisor#0) goto div16u::@3 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ) -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3_from_b2
    bne !+
    lda rem
    cmp divisor
    bcc b3_from_b2
  !:
    jmp b5
  //SEG171 div16u::@5
  b5:
  //SEG172 [83] (word) div16u::quotient#2 ← ++ (word) div16u::quotient#1 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG173 [84] (word) div16u::rem#3 ← (word) div16u::rem#5 - (word) div16u::divisor#0 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ) -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG174 [85] phi from div16u::@2 div16u::@5 to div16u::@3 [phi:div16u::@2/div16u::@5->div16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG175 [85] phi (word) div16u::return#0 = (word) div16u::quotient#1 [phi:div16u::@2/div16u::@5->div16u::@3#0] -- register_copy 
  //SEG176 [85] phi (word) div16u::rem#8 = (word) div16u::rem#5 [phi:div16u::@2/div16u::@5->div16u::@3#1] -- register_copy 
    jmp b3
  //SEG177 div16u::@3
  b3:
  //SEG178 [86] (byte) div16u::i#1 ← ++ (byte) div16u::i#2 [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG179 [87] if((byte) div16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto div16u::@1 [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp breturn
  //SEG180 div16u::@return
  breturn:
  //SEG181 [88] return  [ div16u::rem#8 div16u::return#0 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::return#0 ] )
    rts
}
//SEG182 test_8u
test_8u: {
    .label dividend = 7
    .label divisor = $e
    .label res = $f
    .label i = 2
  //SEG183 [90] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  b1_from_test_8u:
  //SEG184 [90] phi (byte) test_8u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG185 [90] phi from test_8u::@11 to test_8u::@1 [phi:test_8u::@11->test_8u::@1]
  b1_from_b11:
  //SEG186 [90] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@11->test_8u::@1#0] -- register_copy 
    jmp b1
  //SEG187 test_8u::@1
  b1:
  //SEG188 [91] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG189 [92] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG190 [93] (byte) div8u::dividend#2 ← (byte) test_8u::dividend#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta div8u.dividend
  //SEG191 [94] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 ] )
    // (byte) div8u::divisor#1 = (byte) test_8u::divisor#0  // register copy zp ZP_BYTE:14
  //SEG192 [95] call div8u param-assignment [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] )
  //SEG193 [118] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  div8u_from_b1:
  //SEG194 [118] phi (byte) div8u::divisor#6 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG195 [118] phi (byte) div8u::dividend#5 = (byte) div8u::dividend#2 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
  //SEG196 [96] (byte) div8u::return#3 ← (byte) div8u::return#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 rem8u#1 ] ) -- vbuaa=vbuz1 
    lda div8u.return
    jmp b3
  //SEG197 test_8u::@3
  b3:
  //SEG198 [97] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ) -- vbuz1=vbuaa 
    sta res
  //SEG199 [98] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ line_cursor#1 print_byte::b#3 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
    // (byte) print_byte::b#3 = (byte) test_8u::dividend#0  // register copy zp ZP_BYTE:7
  //SEG200 [99] (byte*~) char_cursor#129 ← (byte*) line_cursor#1 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG201 [100] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  //SEG202 [53] phi from test_8u::@3 to print_byte [phi:test_8u::@3->print_byte]
  print_byte_from_b3:
  //SEG203 [53] phi (byte*) char_cursor#105 = (byte*~) char_cursor#129 [phi:test_8u::@3->print_byte#0] -- register_copy 
  //SEG204 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG205 [101] phi from test_8u::@3 to test_8u::@4 [phi:test_8u::@3->test_8u::@4]
  b4_from_b3:
    jmp b4
  //SEG206 test_8u::@4
  b4:
  //SEG207 [102] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  //SEG208 [65] phi from test_8u::@4 to print_str [phi:test_8u::@4->print_str]
  print_str_from_b4:
  //SEG209 [65] phi (byte*) print_str::str#12 = (const string) test_8u::str [phi:test_8u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG210 test_8u::@5
  b5:
  //SEG211 [103] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ line_cursor#1 char_cursor#100 print_byte::b#4 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#4 test_8u::i#10 test_8u::res#0 rem8u#1 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG212 [104] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  //SEG213 [53] phi from test_8u::@5 to print_byte [phi:test_8u::@5->print_byte]
  print_byte_from_b5:
  //SEG214 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#100 [phi:test_8u::@5->print_byte#0] -- register_copy 
  //SEG215 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@5->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG216 [105] phi from test_8u::@5 to test_8u::@6 [phi:test_8u::@5->test_8u::@6]
  b6_from_b5:
    jmp b6
  //SEG217 test_8u::@6
  b6:
  //SEG218 [106] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  //SEG219 [65] phi from test_8u::@6 to print_str [phi:test_8u::@6->print_str]
  print_str_from_b6:
  //SEG220 [65] phi (byte*) print_str::str#12 = (const string) test_8u::str1 [phi:test_8u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG221 test_8u::@7
  b7:
  //SEG222 [107] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ line_cursor#1 char_cursor#100 print_byte::b#5 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#5 test_8u::i#10 rem8u#1 ] ) -- vbuz1=vbuz2 
    lda res
    sta print_byte.b
  //SEG223 [108] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] )
  //SEG224 [53] phi from test_8u::@7 to print_byte [phi:test_8u::@7->print_byte]
  print_byte_from_b7:
  //SEG225 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#100 [phi:test_8u::@7->print_byte#0] -- register_copy 
  //SEG226 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@7->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG227 [109] phi from test_8u::@7 to test_8u::@8 [phi:test_8u::@7->test_8u::@8]
  b8_from_b7:
    jmp b8
  //SEG228 test_8u::@8
  b8:
  //SEG229 [110] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 rem8u#1 ] )
  //SEG230 [65] phi from test_8u::@8 to print_str [phi:test_8u::@8->print_str]
  print_str_from_b8:
  //SEG231 [65] phi (byte*) print_str::str#12 = (const string) test_8u::str2 [phi:test_8u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG232 test_8u::@9
  b9:
  //SEG233 [111] (byte) print_byte::b#6 ← (byte) rem8u#1 [ line_cursor#1 char_cursor#100 print_byte::b#6 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#6 test_8u::i#10 ] ) -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG234 [112] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 ] )
  //SEG235 [53] phi from test_8u::@9 to print_byte [phi:test_8u::@9->print_byte]
  print_byte_from_b9:
  //SEG236 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#100 [phi:test_8u::@9->print_byte#0] -- register_copy 
  //SEG237 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@9->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG238 [113] phi from test_8u::@9 to test_8u::@10 [phi:test_8u::@9->test_8u::@10]
  b10_from_b9:
    jmp b10
  //SEG239 test_8u::@10
  b10:
  //SEG240 [114] call print_ln param-assignment [ line_cursor#1 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 ] )
  //SEG241 [42] phi from test_8u::@10 to print_ln [phi:test_8u::@10->print_ln]
  print_ln_from_b10:
  //SEG242 [42] phi (byte*) line_cursor#33 = (byte*) line_cursor#1 [phi:test_8u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG243 test_8u::@11
  b11:
  //SEG244 [115] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG245 [116] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@1 [ line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b1_from_b11
    jmp breturn
  //SEG246 test_8u::@return
  breturn:
  //SEG247 [117] return  [ line_cursor#1 ] ( main:2::test_8u:9 [ line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG248 div8u
div8u: {
    .label dividend = $f
    .label quotient = $10
    .label return = $10
    .label divisor = $e
  //SEG249 [119] phi from div8u to div8u::@1 [phi:div8u->div8u::@1]
  b1_from_div8u:
  //SEG250 [119] phi (byte) div8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG251 [119] phi (byte) div8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta quotient
  //SEG252 [119] phi (byte) div8u::dividend#3 = (byte) div8u::dividend#5 [phi:div8u->div8u::@1#2] -- register_copy 
  //SEG253 [119] phi (byte) div8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#3] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  //SEG254 [119] phi from div8u::@3 to div8u::@1 [phi:div8u::@3->div8u::@1]
  b1_from_b3:
  //SEG255 [119] phi (byte) div8u::i#2 = (byte) div8u::i#1 [phi:div8u::@3->div8u::@1#0] -- register_copy 
  //SEG256 [119] phi (byte) div8u::quotient#3 = (byte) div8u::return#0 [phi:div8u::@3->div8u::@1#1] -- register_copy 
  //SEG257 [119] phi (byte) div8u::dividend#3 = (byte) div8u::dividend#0 [phi:div8u::@3->div8u::@1#2] -- register_copy 
  //SEG258 [119] phi (byte) div8u::rem#4 = (byte) div8u::rem#8 [phi:div8u::@3->div8u::@1#3] -- register_copy 
    jmp b1
  //SEG259 div8u::@1
  b1:
  //SEG260 [120] (byte) div8u::rem#1 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
  //SEG261 [121] (byte~) div8u::$1 ← (byte) div8u::dividend#3 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and dividend
  //SEG262 [122] if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG263 div8u::@4
  b4:
  //SEG264 [123] (byte) div8u::rem#2 ← ++ (byte) div8u::rem#1 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG265 [124] phi from div8u::@1 div8u::@4 to div8u::@2 [phi:div8u::@1/div8u::@4->div8u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG266 [124] phi (byte) div8u::rem#5 = (byte) div8u::rem#1 [phi:div8u::@1/div8u::@4->div8u::@2#0] -- register_copy 
    jmp b2
  //SEG267 div8u::@2
  b2:
  //SEG268 [125] (byte) div8u::dividend#0 ← (byte) div8u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG269 [126] (byte) div8u::quotient#1 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG270 [127] if((byte) div8u::rem#5<(byte) div8u::divisor#6) goto div8u::@3 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ) -- vbuyy_lt_vbuz1_then_la1 
    cpy divisor
    bcc b3_from_b2
    jmp b5
  //SEG271 div8u::@5
  b5:
  //SEG272 [128] (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#1 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] ) -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG273 [129] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#6 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ) -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc divisor
    tay
  //SEG274 [130] phi from div8u::@2 div8u::@5 to div8u::@3 [phi:div8u::@2/div8u::@5->div8u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG275 [130] phi (byte) div8u::return#0 = (byte) div8u::quotient#1 [phi:div8u::@2/div8u::@5->div8u::@3#0] -- register_copy 
  //SEG276 [130] phi (byte) div8u::rem#8 = (byte) div8u::rem#5 [phi:div8u::@2/div8u::@5->div8u::@3#1] -- register_copy 
    jmp b3
  //SEG277 div8u::@3
  b3:
  //SEG278 [131] (byte) div8u::i#1 ← ++ (byte) div8u::i#2 [ div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG279 [132] if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1 [ div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1_from_b3
    jmp b6
  //SEG280 div8u::@6
  b6:
  //SEG281 [133] (byte) rem8u#1 ← (byte) div8u::rem#8 [ div8u::return#0 rem8u#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#1 ] ) -- vbuxx=vbuyy 
    tya
    tax
    jmp breturn
  //SEG282 div8u::@return
  breturn:
  //SEG283 [134] return  [ div8u::return#0 rem8u#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#1 ] )
    rts
}
//SEG284 test_8s
test_8s: {
    .label dividend = 7
    .label divisor = $14
    .label res = $f
    .label i = 2
  //SEG285 [136] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  b1_from_test_8s:
  //SEG286 [136] phi (byte*) line_cursor#37 = (const byte*) SCREEN#0 [phi:test_8s->test_8s::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta line_cursor
    lda #>SCREEN
    sta line_cursor+1
  //SEG287 [136] phi (byte*) char_cursor#109 = (const byte*) SCREEN#0 [phi:test_8s->test_8s::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta char_cursor
    lda #>SCREEN
    sta char_cursor+1
  //SEG288 [136] phi (signed byte) rem8s#18 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#2] -- vbsz1=vbuc1 
    lda #0
    sta rem8s
  //SEG289 [136] phi (byte) rem8u#33 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#3] -- vbuxx=vbuc1 
    ldx #0
  //SEG290 [136] phi (byte) test_8s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG291 test_8s::@1
  b1:
  //SEG292 [137] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG293 [138] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG294 [139] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ) -- vbsaa=vbsz1 
    lda dividend
  //SEG295 [140] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsxx=vbsz1 
    ldx divisor
  //SEG296 [141] call div8s param-assignment [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 ] )
    jsr div8s
  //SEG297 [142] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 ] )
    // (signed byte) div8s::return#3 = (signed byte) div8s::return#2  // register copy reg byte a
    jmp b3
  //SEG298 test_8s::@3
  b3:
  //SEG299 [143] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 ] ) -- vbsz1=vbsaa 
    sta res
  //SEG300 [144] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 ] )
    // (signed byte) print_sbyte::b#1 = (signed byte) test_8s::dividend#0  // register copy zp ZP_BYTE:7
  //SEG301 [145] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  //SEG302 [164] phi from test_8s::@3 to print_sbyte [phi:test_8s::@3->print_sbyte]
  print_sbyte_from_b3:
  //SEG303 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#109 [phi:test_8s::@3->print_sbyte#0] -- register_copy 
  //SEG304 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#1 [phi:test_8s::@3->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG305 [146] phi from test_8s::@3 to test_8s::@4 [phi:test_8s::@3->test_8s::@4]
  b4_from_b3:
    jmp b4
  //SEG306 test_8s::@4
  b4:
  //SEG307 [147] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  //SEG308 [65] phi from test_8s::@4 to print_str [phi:test_8s::@4->print_str]
  print_str_from_b4:
  //SEG309 [65] phi (byte*) print_str::str#12 = (const string) test_8s::str [phi:test_8s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG310 test_8s::@5
  b5:
  //SEG311 [148] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG312 [149] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  //SEG313 [164] phi from test_8s::@5 to print_sbyte [phi:test_8s::@5->print_sbyte]
  print_sbyte_from_b5:
  //SEG314 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#100 [phi:test_8s::@5->print_sbyte#0] -- register_copy 
  //SEG315 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#2 [phi:test_8s::@5->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG316 [150] phi from test_8s::@5 to test_8s::@6 [phi:test_8s::@5->test_8s::@6]
  b6_from_b5:
    jmp b6
  //SEG317 test_8s::@6
  b6:
  //SEG318 [151] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  //SEG319 [65] phi from test_8s::@6 to print_str [phi:test_8s::@6->print_str]
  print_str_from_b6:
  //SEG320 [65] phi (byte*) print_str::str#12 = (const string) test_8s::str1 [phi:test_8s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG321 test_8s::@7
  b7:
  //SEG322 [152] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#3 ] ) -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG323 [153] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG324 [164] phi from test_8s::@7 to print_sbyte [phi:test_8s::@7->print_sbyte]
  print_sbyte_from_b7:
  //SEG325 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#100 [phi:test_8s::@7->print_sbyte#0] -- register_copy 
  //SEG326 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#3 [phi:test_8s::@7->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG327 [154] phi from test_8s::@7 to test_8s::@8 [phi:test_8s::@7->test_8s::@8]
  b8_from_b7:
    jmp b8
  //SEG328 test_8s::@8
  b8:
  //SEG329 [155] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG330 [65] phi from test_8s::@8 to print_str [phi:test_8s::@8->print_str]
  print_str_from_b8:
  //SEG331 [65] phi (byte*) print_str::str#12 = (const string) test_8s::str2 [phi:test_8s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG332 test_8s::@9
  b9:
  //SEG333 [156] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#4 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#4 ] ) -- vbsz1=vbsz2 
    lda rem8s
    sta print_sbyte.b
  //SEG334 [157] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG335 [164] phi from test_8s::@9 to print_sbyte [phi:test_8s::@9->print_sbyte]
  print_sbyte_from_b9:
  //SEG336 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#100 [phi:test_8s::@9->print_sbyte#0] -- register_copy 
  //SEG337 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#4 [phi:test_8s::@9->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG338 [158] phi from test_8s::@9 to test_8s::@10 [phi:test_8s::@9->test_8s::@10]
  b10_from_b9:
    jmp b10
  //SEG339 test_8s::@10
  b10:
  //SEG340 [159] call print_ln param-assignment [ line_cursor#1 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG341 [42] phi from test_8s::@10 to print_ln [phi:test_8s::@10->print_ln]
  print_ln_from_b10:
  //SEG342 [42] phi (byte*) line_cursor#33 = (byte*) line_cursor#37 [phi:test_8s::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG343 test_8s::@11
  b11:
  //SEG344 [160] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG345 [161] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@12 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b12
    jmp breturn
  //SEG346 test_8s::@return
  breturn:
  //SEG347 [162] return  [ line_cursor#1 ] ( main:2::test_8s:7 [ line_cursor#1 ] )
    rts
  //SEG348 test_8s::@12
  b12:
  //SEG349 [163] (byte*~) char_cursor#138 ← (byte*) line_cursor#1 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG350 [136] phi from test_8s::@12 to test_8s::@1 [phi:test_8s::@12->test_8s::@1]
  b1_from_b12:
  //SEG351 [136] phi (byte*) line_cursor#37 = (byte*) line_cursor#1 [phi:test_8s::@12->test_8s::@1#0] -- register_copy 
  //SEG352 [136] phi (byte*) char_cursor#109 = (byte*~) char_cursor#138 [phi:test_8s::@12->test_8s::@1#1] -- register_copy 
  //SEG353 [136] phi (signed byte) rem8s#18 = (signed byte) rem8s#3 [phi:test_8s::@12->test_8s::@1#2] -- register_copy 
  //SEG354 [136] phi (byte) rem8u#33 = (byte) rem8u#1 [phi:test_8s::@12->test_8s::@1#3] -- register_copy 
  //SEG355 [136] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@12->test_8s::@1#4] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG356 print_sbyte
print_sbyte: {
    .label b = 7
  //SEG357 [165] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ char_cursor#103 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1_from_print_sbyte
  //SEG358 [166] phi from print_sbyte to print_sbyte::@2 [phi:print_sbyte->print_sbyte::@2]
  b2_from_print_sbyte:
    jmp b2
  //SEG359 print_sbyte::@2
  b2:
  //SEG360 [167] call print_char param-assignment [ char_cursor#14 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#5 ] )
  //SEG361 [61] phi from print_sbyte::@2 to print_char [phi:print_sbyte::@2->print_char]
  print_char_from_b2:
  //SEG362 [61] phi (byte*) char_cursor#64 = (byte*) char_cursor#103 [phi:print_sbyte::@2->print_char#0] -- register_copy 
  //SEG363 [61] phi (byte) print_char::ch#3 = (byte) '-' [phi:print_sbyte::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG364 print_sbyte::@4
  b4:
  //SEG365 [168] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#14 print_sbyte::b#0 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG366 [169] phi from print_sbyte print_sbyte::@4 to print_sbyte::@1 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1]
  b1_from_print_sbyte:
  b1_from_b4:
  //SEG367 [169] phi (byte*) char_cursor#102 = (byte*) char_cursor#103 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#0] -- register_copy 
  //SEG368 [169] phi (signed byte) print_sbyte::b#6 = (signed byte) print_sbyte::b#5 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#1] -- register_copy 
    jmp b1
  //SEG369 print_sbyte::@1
  b1:
  //SEG370 [170] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 char_cursor#102 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#9 char_cursor#102 ] )
    // (byte~) print_byte::b#9 = (byte)(signed byte) print_sbyte::b#6  // register copy zp ZP_BYTE:7
  //SEG371 [171] call print_byte param-assignment [ char_cursor#14 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  //SEG372 [53] phi from print_sbyte::@1 to print_byte [phi:print_sbyte::@1->print_byte]
  print_byte_from_b1:
  //SEG373 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#102 [phi:print_sbyte::@1->print_byte#0] -- register_copy 
  //SEG374 [53] phi (byte) print_byte::b#7 = (byte~) print_byte::b#9 [phi:print_sbyte::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG375 print_sbyte::@return
  breturn:
  //SEG376 [172] return  [ char_cursor#14 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
    rts
}
//SEG377 div8s
div8s: {
    .label neg = $11
  //SEG378 [173] if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@16 [ div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsaa_ge_0_then_la1 
    cmp #0
    bpl b16
    jmp b7
  //SEG379 div8s::@7
  b7:
  //SEG380 [174] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] ) -- vbsaa=_neg_vbsaa 
    eor #$ff
    clc
    adc #1
  //SEG381 [175] (byte~) div8s::dividendb#8 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendb#8 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendb#8 ] ) -- vbuyy=vbuaa 
    tay
  //SEG382 [176] phi from div8s::@7 to div8s::@2 [phi:div8s::@7->div8s::@2]
  b2_from_b7:
  //SEG383 [176] phi (byte) div8s::dividendb#3 = (byte~) div8s::dividendb#8 [phi:div8s::@7->div8s::@2#0] -- register_copy 
  //SEG384 [176] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div8s::@7->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
  //SEG385 div8s::@2
  b2:
  //SEG386 [177] if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@17 [ div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ) -- vbsxx_ge_0_then_la1 
    cpx #0
    bpl b17
    jmp b9
  //SEG387 div8s::@9
  b9:
  //SEG388 [178] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ) -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
  //SEG389 [179] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ) -- vbuz1=vbuz1_bxor_vbuc1 
    lda neg
    eor #1
    sta neg
  //SEG390 [180] (byte~) div8s::divisorb#5 ← (byte)(signed byte~) div8s::$7 [ div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] )
    // (byte~) div8s::divisorb#5 = (byte)(signed byte~) div8s::$7  // register copy reg byte x
  //SEG391 [181] phi from div8s::@17 div8s::@9 to div8s::@4 [phi:div8s::@17/div8s::@9->div8s::@4]
  b4_from_b17:
  b4_from_b9:
  //SEG392 [181] phi (byte) div8s::neg#4 = (byte) div8s::neg#3 [phi:div8s::@17/div8s::@9->div8s::@4#0] -- register_copy 
  //SEG393 [181] phi (byte) div8s::divisorb#3 = (byte~) div8s::divisorb#4 [phi:div8s::@17/div8s::@9->div8s::@4#1] -- register_copy 
    jmp b4
  //SEG394 div8s::@4
  b4:
  //SEG395 [182] (byte) div8u::dividend#1 ← (byte) div8s::dividendb#3 [ div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 ] ) -- vbuz1=vbuyy 
    sty div8u.dividend
  //SEG396 [183] (byte) div8u::divisor#0 ← (byte) div8s::divisorb#3 [ div8u::dividend#1 div8u::divisor#0 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::dividend#1 div8u::divisor#0 div8s::neg#4 ] ) -- vbuz1=vbuxx 
    stx div8u.divisor
  //SEG397 [184] call div8u param-assignment [ div8u::return#0 rem8u#1 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::return#0 rem8u#1 div8s::neg#4 ] )
  //SEG398 [118] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  div8u_from_b4:
  //SEG399 [118] phi (byte) div8u::divisor#6 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG400 [118] phi (byte) div8u::dividend#5 = (byte) div8u::dividend#1 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
  //SEG401 [185] (byte) div8u::return#2 ← (byte) div8u::return#0 [ rem8u#1 div8s::neg#4 div8u::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::neg#4 div8u::return#2 ] ) -- vbuaa=vbuz1 
    lda div8u.return
    jmp b15
  //SEG402 div8s::@15
  b15:
  //SEG403 [186] (byte) div8s::resultb#0 ← (byte) div8u::return#2 [ rem8u#1 div8s::neg#4 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::neg#4 div8s::resultb#0 ] ) -- vbuyy=vbuaa 
    tay
  //SEG404 [187] if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5 [ rem8u#1 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 ] ) -- vbuz1_neq_0_then_la1 
    lda neg
    bne b5
    jmp b18
  //SEG405 div8s::@18
  b18:
  //SEG406 [188] (signed byte~) div8s::return#6 ← (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#6 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#6 ] ) -- vbsaa=vbsyy 
    tya
  //SEG407 [189] (signed byte~) rem8s#32 ← (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::return#6 rem8s#32 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#6 rem8s#32 ] ) -- vbsz1=vbsxx 
    stx rem8s
  //SEG408 [190] phi from div8s::@18 div8s::@5 to div8s::@return [phi:div8s::@18/div8s::@5->div8s::@return]
  breturn_from_b18:
  breturn_from_b5:
  //SEG409 [190] phi (signed byte) rem8s#3 = (signed byte~) rem8s#32 [phi:div8s::@18/div8s::@5->div8s::@return#0] -- register_copy 
  //SEG410 [190] phi (signed byte) div8s::return#2 = (signed byte~) div8s::return#6 [phi:div8s::@18/div8s::@5->div8s::@return#1] -- register_copy 
    jmp breturn
  //SEG411 div8s::@return
  breturn:
  //SEG412 [191] return  [ rem8u#1 rem8s#3 div8s::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 rem8s#3 div8s::return#2 ] )
    rts
  //SEG413 div8s::@5
  b5:
  //SEG414 [192] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::resultb#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 rem8s#1 ] ) -- vbsz1=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    sta rem8s
  //SEG415 [193] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#0 rem8s#1 ] ) -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
    jmp breturn_from_b5
  //SEG416 div8s::@17
  b17:
  //SEG417 [194] (byte~) div8s::divisorb#4 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] )
    // (byte~) div8s::divisorb#4 = (byte)(signed byte) div8s::divisor#0  // register copy reg byte x
    jmp b4_from_b17
  //SEG418 div8s::@16
  b16:
  //SEG419 [195] (byte~) div8s::dividendb#7 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendb#7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendb#7 ] ) -- vbuyy=vbuaa 
    tay
  //SEG420 [176] phi from div8s::@16 to div8s::@2 [phi:div8s::@16->div8s::@2]
  b2_from_b16:
  //SEG421 [176] phi (byte) div8s::dividendb#3 = (byte~) div8s::dividendb#7 [phi:div8s::@16->div8s::@2#0] -- register_copy 
  //SEG422 [176] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8s::@16->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
}
//SEG423 print_cls
print_cls: {
    .label sc = 3
  //SEG424 [197] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG425 [197] phi (byte*) print_cls::sc#2 = (const byte*) SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
    jmp b1
  //SEG426 [197] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG427 [197] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG428 print_cls::@1
  b1:
  //SEG429 [198] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG430 [199] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG431 [200] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bne b1_from_b1
    lda sc
    cmp #<SCREEN+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG432 print_cls::@return
  breturn:
  //SEG433 [201] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b15
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b2
Removing instruction jmp b9
Removing instruction jmp b4
Removing instruction jmp b15
Removing instruction jmp b18
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction ldy i
Removing instruction lda i
Removing instruction ldy #0
Replacing instruction lda #0 with TXA
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction ldy i
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Replacing instruction ldx #0 with TAX
Removing instruction lda #0
Removing instruction ldy i
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b11 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b2 with b1
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b11 with b1
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_print_sbyte with b1
Replacing label breturn_from_b5 with breturn
Replacing label b4_from_b17 with b4
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b15_from_bbegin:
Removing instruction main_from_b15:
Removing instruction bend_from_b15:
Removing instruction b1_from_main:
Removing instruction test_8s_from_b1:
Removing instruction b2_from_b1:
Removing instruction test_8u_from_b2:
Removing instruction b3_from_b2:
Removing instruction test_16u_from_b3:
Removing instruction b1_from_b11:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction b1_from_b11:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b2_from_print_sbyte:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sbyte:
Removing instruction b1_from_b4:
Removing instruction b4_from_b17:
Removing instruction b4_from_b9:
Removing instruction breturn_from_b18:
Removing instruction breturn_from_b5:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b15:
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_test_16u:
Removing instruction div16u_from_b1:
Removing instruction b3:
Removing instruction print_word_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_word_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_word_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_word_from_b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_div16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_test_8u:
Removing instruction div8u_from_b1:
Removing instruction b3:
Removing instruction print_byte_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_byte_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_byte_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_byte_from_b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b1_from_div8u:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_test_8s:
Removing instruction b3:
Removing instruction print_sbyte_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_sbyte_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_sbyte_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_sbyte_from_b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b1_from_b12:
Removing instruction b2:
Removing instruction b4:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b2_from_b7:
Removing instruction b9:
Removing instruction div8u_from_b4:
Removing instruction b15:
Removing instruction b18:
Removing instruction b2_from_b16:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to b4 in bpl b17
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b17:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b4
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [81] bne b1 to beq

FINAL SYMBOL TABLE
(label) @15
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte*) char_cursor
(byte*) char_cursor#1 char_cursor zp ZP_WORD:8 101.0
(byte*) char_cursor#100 char_cursor zp ZP_WORD:8 18.363636363636363
(byte*) char_cursor#102 char_cursor zp ZP_WORD:8 3.0
(byte*) char_cursor#103 char_cursor zp ZP_WORD:8 15.999999999999998
(byte*) char_cursor#104 char_cursor zp ZP_WORD:8 23.0
(byte*) char_cursor#105 char_cursor zp ZP_WORD:8 17.333333333333332
(byte*) char_cursor#109 char_cursor zp ZP_WORD:8 2.4444444444444446
(byte*~) char_cursor#122 char_cursor zp ZP_WORD:8 22.0
(byte*~) char_cursor#129 char_cursor zp ZP_WORD:8 22.0
(byte*~) char_cursor#138 char_cursor zp ZP_WORD:8 22.0
(byte*) char_cursor#14 char_cursor zp ZP_WORD:8 2.5227272727272725
(byte*) char_cursor#64 char_cursor zp ZP_WORD:8 5.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(byte~) div16u::$1 reg byte a 202.0
(byte~) div16u::$2 reg byte a 202.0
(label) div16u::@1
(label) div16u::@2
(label) div16u::@3
(label) div16u::@4
(label) div16u::@5
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0 dividend zp ZP_WORD:8 25.25
(word) div16u::dividend#1 dividend zp ZP_WORD:8 4.333333333333333
(word) div16u::dividend#2 dividend zp ZP_WORD:8 43.57142857142858
(word) div16u::divisor
(word) div16u::divisor#0 divisor zp ZP_WORD:18 12.529411764705884
(byte) div16u::i
(byte) div16u::i#1 reg byte x 151.5
(byte) div16u::i#2 reg byte x 15.538461538461538
(word) div16u::quotient
(word) div16u::quotient#1 quotient zp ZP_WORD:12 151.5
(word) div16u::quotient#2 quotient zp ZP_WORD:12 101.0
(word) div16u::quotient#3 quotient zp ZP_WORD:12 25.25
(word) div16u::rem
(word) div16u::rem#1 rem zp ZP_WORD:10 75.75
(word) div16u::rem#2 rem zp ZP_WORD:10 202.0
(word) div16u::rem#3 rem zp ZP_WORD:10 202.0
(word) div16u::rem#4 rem zp ZP_WORD:10 202.0
(word) div16u::rem#5 rem zp ZP_WORD:10 101.0
(word) div16u::rem#8 rem zp ZP_WORD:10 12.5
(word) div16u::return
(word) div16u::return#0 return zp ZP_WORD:12 62.8
(word) div16u::return#2 return zp ZP_WORD:12 22.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$2 reg byte a 2.0
(signed byte~) div8s::$7 reg byte x 1.0
(label) div8s::@15
(label) div8s::@16
(label) div8s::@17
(label) div8s::@18
(label) div8s::@2
(label) div8s::@4
(label) div8s::@5
(label) div8s::@7
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 reg byte a 5.0
(byte) div8s::dividendb
(byte) div8s::dividendb#3 reg byte y 0.8571428571428571
(byte~) div8s::dividendb#7 reg byte y 4.0
(byte~) div8s::dividendb#8 reg byte y 4.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 reg byte x 2.142857142857143
(byte) div8s::divisorb
(byte) div8s::divisorb#3 reg byte x 3.0
(byte~) div8s::divisorb#4 reg byte x 4.0
(byte~) div8s::divisorb#5 reg byte x 4.0
(byte) div8s::neg
(byte) div8s::neg#2 neg zp ZP_BYTE:17 2.0
(byte) div8s::neg#3 neg zp ZP_BYTE:17 1.0
(byte) div8s::neg#4 neg zp ZP_BYTE:17 1.0
(byte) div8s::resultb
(byte) div8s::resultb#0 reg byte y 0.6666666666666666
(signed byte) div8s::return
(signed byte) div8s::return#0 reg byte a 4.0
(signed byte) div8s::return#2 reg byte a 5.0
(signed byte) div8s::return#3 reg byte a 22.0
(signed byte~) div8s::return#6 reg byte a 2.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$1 reg byte a 202.0
(label) div8u::@1
(label) div8u::@2
(label) div8u::@3
(label) div8u::@4
(label) div8u::@5
(label) div8u::@6
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0 dividend zp ZP_BYTE:15 25.25
(byte) div8u::dividend#1 dividend zp ZP_BYTE:15 2.0
(byte) div8u::dividend#2 dividend zp ZP_BYTE:15 11.0
(byte) div8u::dividend#3 dividend zp ZP_BYTE:15 50.83333333333333
(byte) div8u::dividend#5 dividend zp ZP_BYTE:15 15.0
(byte) div8u::divisor
(byte) div8u::divisor#0 divisor zp ZP_BYTE:14 4.0
(byte) div8u::divisor#1 divisor zp ZP_BYTE:14 22.0
(byte) div8u::divisor#6 divisor zp ZP_BYTE:14 14.333333333333332
(byte) div8u::i
(byte) div8u::i#1 reg byte x 151.5
(byte) div8u::i#2 reg byte x 16.833333333333332
(byte) div8u::quotient
(byte) div8u::quotient#1 quotient zp ZP_BYTE:16 151.5
(byte) div8u::quotient#2 quotient zp ZP_BYTE:16 101.0
(byte) div8u::quotient#3 quotient zp ZP_BYTE:16 28.857142857142858
(byte) div8u::rem
(byte) div8u::rem#1 reg byte y 101.0
(byte) div8u::rem#2 reg byte y 202.0
(byte) div8u::rem#3 reg byte y 202.0
(byte) div8u::rem#4 reg byte y 202.0
(byte) div8u::rem#5 reg byte y 101.0
(byte) div8u::rem#8 reg byte y 101.66666666666667
(byte) div8u::return
(byte) div8u::return#0 return zp ZP_BYTE:16 45.142857142857146
(byte) div8u::return#2 reg byte a 4.0
(byte) div8u::return#3 reg byte a 22.0
(byte*) line_cursor
(byte*) line_cursor#1 line_cursor zp ZP_WORD:3 5.3478260869565215
(byte*) line_cursor#17 line_cursor zp ZP_WORD:3 204.0
(byte*) line_cursor#33 line_cursor zp ZP_WORD:3 35.0
(byte*) line_cursor#37 line_cursor zp ZP_WORD:3 0.9565217391304348
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#1 b zp ZP_BYTE:7 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:7 4.0
(byte) print_byte::b#3 b zp ZP_BYTE:7 11.0
(byte) print_byte::b#4 b zp ZP_BYTE:7 22.0
(byte) print_byte::b#5 b zp ZP_BYTE:7 22.0
(byte) print_byte::b#6 b zp ZP_BYTE:7 22.0
(byte) print_byte::b#7 b zp ZP_BYTE:7 13.5
(byte~) print_byte::b#9 b zp ZP_BYTE:7 4.0
(byte[]) print_byte::hextab
(const string) print_byte::hextab#0 hextab = (string) "0123456789abcdef"
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 6.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:3 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:3 16.5
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp ZP_BYTE:7 4.0
(signed byte) print_sbyte::b#1 b zp ZP_BYTE:7 22.0
(signed byte) print_sbyte::b#2 b zp ZP_BYTE:7 22.0
(signed byte) print_sbyte::b#3 b zp ZP_BYTE:7 22.0
(signed byte) print_sbyte::b#4 b zp ZP_BYTE:7 22.0
(signed byte) print_sbyte::b#5 b zp ZP_BYTE:7 12.5
(signed byte) print_sbyte::b#6 b zp ZP_BYTE:7 4.0
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:5 202.0
(byte*) print_str::str#10 str zp ZP_WORD:5 101.5
(byte*) print_str::str#12 str zp ZP_WORD:5 2.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp ZP_WORD:5 11.0
(word) print_word::w#1 w zp ZP_WORD:5 22.0
(word) print_word::w#2 w zp ZP_WORD:5 22.0
(word) print_word::w#3 w zp ZP_WORD:5 22.0
(word) print_word::w#4 w zp ZP_WORD:5 15.999999999999998
(word) rem16u
(word) rem16u#16 rem16u zp ZP_WORD:10 110.0
(signed byte) rem8s
(signed byte) rem8s#1 rem8s zp ZP_BYTE:14 2.0
(signed byte) rem8s#18 rem8s zp ZP_BYTE:14 110.0
(signed byte) rem8s#3 rem8s zp ZP_BYTE:14 1.0833333333333333
(signed byte~) rem8s#32 rem8s zp ZP_BYTE:14 4.0
(byte) rem8u
(byte) rem8u#1 reg byte x 0.48
(byte) rem8u#33 reg byte x 110.0
(void()) test_16u()
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@11
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0 dividend zp ZP_WORD:5 4.714285714285714
(word[]) test_16u::dividends
(const word[]) test_16u::dividends#0 dividends = { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
(word) test_16u::divisor
(word) test_16u::divisor#0 divisor zp ZP_WORD:18 3.0
(word[]) test_16u::divisors
(const word[]) test_16u::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_16u::i
(byte) test_16u::i#1 i zp ZP_BYTE:2 16.5
(byte) test_16u::i#10 i zp ZP_BYTE:2 1.76
(word) test_16u::res
(word) test_16u::res#0 res zp ZP_WORD:12 2.2
(const string) test_16u::str str = (string) " / @"
(const string) test_16u::str1 str1 = (string) " = @"
(const string) test_16u::str2 str2 = (string) " @"
(void()) test_8s()
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@11
(label) test_8s::@12
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 dividend zp ZP_BYTE:7 4.714285714285714
(signed byte[]) test_8s::dividends
(const signed byte[]) test_8s::dividends#0 dividends = { (byte/signed byte/word/signed word/dword/signed dword) 127, -(byte/signed byte/word/signed word/dword/signed dword) 127, -(byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 divisor zp ZP_BYTE:20 3.3000000000000003
(signed byte[]) test_8s::divisors
(const signed byte[]) test_8s::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, -(byte/signed byte/word/signed word/dword/signed dword) 11, -(byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_8s::i
(byte) test_8s::i#1 i zp ZP_BYTE:2 11.0
(byte) test_8s::i#10 i zp ZP_BYTE:2 1.8333333333333333
(signed byte) test_8s::res
(signed byte) test_8s::res#0 res zp ZP_BYTE:15 2.4444444444444446
(const string) test_8s::str str = (string) " / @"
(const string) test_8s::str1 str1 = (string) " = @"
(const string) test_8s::str2 str2 = (string) " @"
(void()) test_8u()
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0 dividend zp ZP_BYTE:7 4.714285714285714
(byte[]) test_8u::dividends
(const byte[]) test_8u::dividends#0 dividends = { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
(byte) test_8u::divisor
(byte) test_8u::divisor#0 divisor zp ZP_BYTE:14 3.0
(byte[]) test_8u::divisors
(const byte[]) test_8u::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_8u::i
(byte) test_8u::i#1 i zp ZP_BYTE:2 16.5
(byte) test_8u::i#10 i zp ZP_BYTE:2 1.76
(byte) test_8u::res
(byte) test_8u::res#0 res zp ZP_BYTE:15 2.2
(const string) test_8u::str str = (string) " / @"
(const string) test_8u::str1 str1 = (string) " = @"
(const string) test_8u::str2 str2 = (string) " @"

zp ZP_BYTE:2 [ test_16u::i#10 test_16u::i#1 test_8u::i#10 test_8u::i#1 test_8s::i#10 test_8s::i#1 ]
zp ZP_WORD:3 [ line_cursor#17 line_cursor#33 line_cursor#1 line_cursor#37 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:5 [ print_word::w#4 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 test_16u::dividend#0 print_str::str#10 print_str::str#12 print_str::str#0 ]
zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 test_8u::dividend#0 test_8s::dividend#0 ]
reg byte a [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
zp ZP_WORD:8 [ char_cursor#64 char_cursor#105 char_cursor#102 char_cursor#104 char_cursor#122 char_cursor#100 char_cursor#14 char_cursor#129 char_cursor#103 char_cursor#1 char_cursor#109 char_cursor#138 div16u::dividend#2 div16u::dividend#1 div16u::dividend#0 ]
zp ZP_WORD:10 [ div16u::rem#4 rem16u#16 div16u::rem#8 div16u::rem#5 div16u::rem#1 div16u::rem#2 div16u::rem#3 ]
zp ZP_WORD:12 [ div16u::quotient#3 div16u::return#0 div16u::quotient#1 div16u::quotient#2 div16u::return#2 test_16u::res#0 ]
reg byte x [ div16u::i#2 div16u::i#1 ]
zp ZP_BYTE:14 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 test_8u::divisor#0 rem8s#18 rem8s#3 rem8s#32 rem8s#1 ]
reg byte y [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
zp ZP_BYTE:15 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 test_8u::res#0 test_8s::res#0 ]
zp ZP_BYTE:16 [ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ]
reg byte x [ div8u::i#2 div8u::i#1 ]
reg byte x [ rem8u#33 rem8u#1 ]
reg byte y [ div8s::dividendb#3 div8s::dividendb#7 div8s::dividendb#8 ]
reg byte x [ div8s::divisorb#3 div8s::divisorb#4 div8s::divisorb#5 ]
zp ZP_BYTE:17 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
reg byte a [ div8s::return#2 div8s::return#6 div8s::return#0 ]
zp ZP_WORD:18 [ test_16u::divisor#0 div16u::divisor#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ div16u::$1 ]
reg byte a [ div16u::$2 ]
reg byte a [ div8u::return#3 ]
reg byte a [ div8u::$1 ]
zp ZP_BYTE:20 [ test_8s::divisor#0 ]
reg byte a [ div8s::dividend#0 ]
reg byte x [ div8s::divisor#0 ]
reg byte a [ div8s::return#3 ]
reg byte a [ div8s::$2 ]
reg byte x [ div8s::$7 ]
reg byte a [ div8u::return#2 ]
reg byte y [ div8s::resultb#0 ]


FINAL ASSEMBLER
Score: 32049

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
  .label char_cursor = 8
  .label line_cursor = 3
  .label rem8s = $e
  .label rem16u = $a
//SEG2 @begin
//SEG3 [1] phi from @begin to @15 [phi:@begin->@15]
//SEG4 @15
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @15 to main [phi:@15->main]
  jsr main
//SEG7 [3] phi from @15 to @end [phi:@15->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [196] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 main::@1
  //SEG14 [7] call test_8s param-assignment [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  //SEG15 [135] phi from main::@1 to test_8s [phi:main::@1->test_8s]
    jsr test_8s
  //SEG16 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG17 main::@2
  //SEG18 [9] call test_8u param-assignment [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  //SEG19 [89] phi from main::@2 to test_8u [phi:main::@2->test_8u]
    jsr test_8u
  //SEG20 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG21 main::@3
  //SEG22 [11] call test_16u param-assignment [ ] ( main:2 [ ] )
  //SEG23 [13] phi from main::@3 to test_16u [phi:main::@3->test_16u]
    jsr test_16u
  //SEG24 main::@return
  //SEG25 [12] return  [ ] ( main:2 [ ] )
    rts
}
//SEG26 test_16u
test_16u: {
    .label dividend = 5
    .label divisor = $12
    .label res = $c
    .label i = 2
  //SEG27 [14] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  //SEG28 [14] phi (word) rem16u#16 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta rem16u
    sta rem16u+1
  //SEG29 [14] phi (byte) test_16u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#1] -- vbuz1=vbuc1 
    sta i
  //SEG30 [14] phi from test_16u::@11 to test_16u::@1 [phi:test_16u::@11->test_16u::@1]
  //SEG31 [14] phi (word) rem16u#16 = (word) div16u::rem#8 [phi:test_16u::@11->test_16u::@1#0] -- register_copy 
  //SEG32 [14] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@11->test_16u::@1#1] -- register_copy 
  //SEG33 test_16u::@1
  b1:
  //SEG34 [15] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG35 [16] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG36 [17] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta div16u.dividend
    lda dividend+1
    sta div16u.dividend+1
  //SEG37 [18] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] )
    // (word) div16u::divisor#0 = (word) test_16u::divisor#0  // register copy zp ZP_WORD:18
  //SEG38 [19] call div16u param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 line_cursor#1 ] )
  //SEG39 [72] phi from test_16u::@1 to div16u [phi:test_16u::@1->div16u]
    jsr div16u
  //SEG40 [20] (word) div16u::return#2 ← (word) div16u::return#0 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] )
    // (word) div16u::return#2 = (word) div16u::return#0  // register copy zp ZP_WORD:12
  //SEG41 test_16u::@3
  //SEG42 [21] (word) test_16u::res#0 ← (word) div16u::return#2 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] )
    // (word) test_16u::res#0 = (word) div16u::return#2  // register copy zp ZP_WORD:12
  //SEG43 [22] (word) print_word::w#0 ← (word) test_16u::dividend#0 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] )
    // (word) print_word::w#0 = (word) test_16u::dividend#0  // register copy zp ZP_WORD:5
  //SEG44 [23] (byte*~) char_cursor#122 ← (byte*) line_cursor#1 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG45 [24] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  //SEG46 [47] phi from test_16u::@3 to print_word [phi:test_16u::@3->print_word]
  //SEG47 [47] phi (byte*) char_cursor#104 = (byte*~) char_cursor#122 [phi:test_16u::@3->print_word#0] -- register_copy 
  //SEG48 [47] phi (word) print_word::w#4 = (word) print_word::w#0 [phi:test_16u::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG49 [25] phi from test_16u::@3 to test_16u::@4 [phi:test_16u::@3->test_16u::@4]
  //SEG50 test_16u::@4
  //SEG51 [26] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] )
  //SEG52 [65] phi from test_16u::@4 to print_str [phi:test_16u::@4->print_str]
  //SEG53 [65] phi (byte*) print_str::str#12 = (const string) test_16u::str [phi:test_16u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG54 test_16u::@5
  //SEG55 [27] (word) print_word::w#1 ← (word) test_16u::divisor#0 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG56 [28] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  //SEG57 [47] phi from test_16u::@5 to print_word [phi:test_16u::@5->print_word]
  //SEG58 [47] phi (byte*) char_cursor#104 = (byte*) char_cursor#100 [phi:test_16u::@5->print_word#0] -- register_copy 
  //SEG59 [47] phi (word) print_word::w#4 = (word) print_word::w#1 [phi:test_16u::@5->print_word#1] -- register_copy 
    jsr print_word
  //SEG60 [29] phi from test_16u::@5 to test_16u::@6 [phi:test_16u::@5->test_16u::@6]
  //SEG61 test_16u::@6
  //SEG62 [30] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] )
  //SEG63 [65] phi from test_16u::@6 to print_str [phi:test_16u::@6->print_str]
  //SEG64 [65] phi (byte*) print_str::str#12 = (const string) test_16u::str1 [phi:test_16u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG65 test_16u::@7
  //SEG66 [31] (word) print_word::w#2 ← (word) test_16u::res#0 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ) -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG67 [32] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  //SEG68 [47] phi from test_16u::@7 to print_word [phi:test_16u::@7->print_word]
  //SEG69 [47] phi (byte*) char_cursor#104 = (byte*) char_cursor#100 [phi:test_16u::@7->print_word#0] -- register_copy 
  //SEG70 [47] phi (word) print_word::w#4 = (word) print_word::w#2 [phi:test_16u::@7->print_word#1] -- register_copy 
    jsr print_word
  //SEG71 [33] phi from test_16u::@7 to test_16u::@8 [phi:test_16u::@7->test_16u::@8]
  //SEG72 test_16u::@8
  //SEG73 [34] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] )
  //SEG74 [65] phi from test_16u::@8 to print_str [phi:test_16u::@8->print_str]
  //SEG75 [65] phi (byte*) print_str::str#12 = (const string) test_16u::str2 [phi:test_16u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG76 test_16u::@9
  //SEG77 [35] (word) print_word::w#3 ← (word) div16u::rem#8 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ) -- vwuz1=vwuz2 
    lda div16u.rem
    sta print_word.w
    lda div16u.rem+1
    sta print_word.w+1
  //SEG78 [36] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  //SEG79 [47] phi from test_16u::@9 to print_word [phi:test_16u::@9->print_word]
  //SEG80 [47] phi (byte*) char_cursor#104 = (byte*) char_cursor#100 [phi:test_16u::@9->print_word#0] -- register_copy 
  //SEG81 [47] phi (word) print_word::w#4 = (word) print_word::w#3 [phi:test_16u::@9->print_word#1] -- register_copy 
    jsr print_word
  //SEG82 [37] phi from test_16u::@9 to test_16u::@10 [phi:test_16u::@9->test_16u::@10]
  //SEG83 test_16u::@10
  //SEG84 [38] call print_ln param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] )
  //SEG85 [42] phi from test_16u::@10 to print_ln [phi:test_16u::@10->print_ln]
  //SEG86 [42] phi (byte*) line_cursor#33 = (byte*) line_cursor#1 [phi:test_16u::@10->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG87 test_16u::@11
  //SEG88 [39] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG89 [40] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    cmp #$c
    beq !b1+
    jmp b1
  !b1:
  //SEG90 test_16u::@return
  //SEG91 [41] return  [ ] ( main:2::test_16u:11 [ ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG92 print_ln
print_ln: {
  //SEG93 [43] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG94 [43] phi (byte*) line_cursor#17 = (byte*) line_cursor#33 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG95 print_ln::@1
  b1:
  //SEG96 [44] (byte*) line_cursor#1 ← (byte*) line_cursor#17 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG97 [45] if((byte*) line_cursor#1<(byte*) char_cursor#14) goto print_ln::@1 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1
  !:
  //SEG98 print_ln::@return
  //SEG99 [46] return  [ line_cursor#1 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 ] )
    rts
}
//SEG100 print_word
print_word: {
    .label w = 5
  //SEG101 [48] (byte) print_byte::b#1 ← > (word) print_word::w#4 [ print_word::w#4 char_cursor#104 print_byte::b#1 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG102 [49] call print_byte param-assignment [ char_cursor#14 print_word::w#4 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_word::w#4 ] )
  //SEG103 [53] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG104 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#104 [phi:print_word->print_byte#0] -- register_copy 
  //SEG105 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG106 print_word::@1
  //SEG107 [50] (byte) print_byte::b#2 ← < (word) print_word::w#4 [ char_cursor#14 print_byte::b#2 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG108 [51] call print_byte param-assignment [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  //SEG109 [53] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG110 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#14 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG111 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG112 print_word::@return
  //SEG113 [52] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
    rts
}
//SEG114 print_byte
print_byte: {
    .label b = 7
  //SEG115 [54] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#105 print_byte::$0 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] ) -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG116 [55] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#105 print_char::ch#1 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_char::ch#1 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG117 [56] call print_char param-assignment [ char_cursor#14 print_byte::b#7 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::b#7 ] )
  //SEG118 [61] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG119 [61] phi (byte*) char_cursor#64 = (byte*) char_cursor#105 [phi:print_byte->print_char#0] -- register_copy 
  //SEG120 [61] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG121 print_byte::@1
  //SEG122 [57] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#14 print_byte::$2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG123 [58] (byte) print_char::ch#2 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#14 print_char::ch#2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_char::ch#2 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG124 [59] call print_char param-assignment [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  //SEG125 [61] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG126 [61] phi (byte*) char_cursor#64 = (byte*) char_cursor#14 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG127 [61] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG128 print_byte::@return
  //SEG129 [60] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG130 print_char
print_char: {
  //SEG131 [62] *((byte*) char_cursor#64) ← (byte) print_char::ch#3 [ char_cursor#64 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG132 [63] (byte*) char_cursor#14 ← ++ (byte*) char_cursor#64 [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG133 print_char::@return
  //SEG134 [64] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] )
    rts
}
//SEG135 print_str
print_str: {
    .label str = 5
  //SEG136 [66] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG137 [66] phi (byte*) char_cursor#100 = (byte*) char_cursor#14 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG138 [66] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG139 print_str::@1
  b1:
  //SEG140 [67] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG141 print_str::@return
  //SEG142 [68] return  [ char_cursor#100 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 ] )
    rts
  //SEG143 print_str::@2
  b2:
  //SEG144 [69] *((byte*) char_cursor#100) ← *((byte*) print_str::str#10) [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (char_cursor),y
  //SEG145 [70] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#100 [ print_str::str#10 char_cursor#1 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_str::str#10 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG146 [71] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 [ print_str::str#0 char_cursor#1 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG147 div16u
div16u: {
    .label rem = $a
    .label dividend = 8
    .label quotient = $c
    .label return = $c
    .label divisor = $12
  //SEG148 [73] phi from div16u to div16u::@1 [phi:div16u->div16u::@1]
  //SEG149 [73] phi (byte) div16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16u->div16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG150 [73] phi (word) div16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16u->div16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta quotient
    sta quotient+1
  //SEG151 [73] phi (word) div16u::dividend#2 = (word) div16u::dividend#1 [phi:div16u->div16u::@1#2] -- register_copy 
  //SEG152 [73] phi (word) div16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16u->div16u::@1#3] -- vwuz1=vbuc1 
    sta rem
    sta rem+1
  //SEG153 [73] phi from div16u::@3 to div16u::@1 [phi:div16u::@3->div16u::@1]
  //SEG154 [73] phi (byte) div16u::i#2 = (byte) div16u::i#1 [phi:div16u::@3->div16u::@1#0] -- register_copy 
  //SEG155 [73] phi (word) div16u::quotient#3 = (word) div16u::return#0 [phi:div16u::@3->div16u::@1#1] -- register_copy 
  //SEG156 [73] phi (word) div16u::dividend#2 = (word) div16u::dividend#0 [phi:div16u::@3->div16u::@1#2] -- register_copy 
  //SEG157 [73] phi (word) div16u::rem#4 = (word) div16u::rem#8 [phi:div16u::@3->div16u::@1#3] -- register_copy 
  //SEG158 div16u::@1
  b1:
  //SEG159 [74] (word) div16u::rem#1 ← (word) div16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG160 [75] (byte~) div16u::$1 ← > (word) div16u::dividend#2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ) -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG161 [76] (byte~) div16u::$2 ← (byte~) div16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ) -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG162 [77] if((byte~) div16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16u::@2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG163 div16u::@4
  //SEG164 [78] (word) div16u::rem#2 ← ++ (word) div16u::rem#1 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#2 ] ) -- vwuz1=_inc_vwuz1 
    inc rem
    bne !+
    inc rem+1
  !:
  //SEG165 [79] phi from div16u::@1 div16u::@4 to div16u::@2 [phi:div16u::@1/div16u::@4->div16u::@2]
  //SEG166 [79] phi (word) div16u::rem#5 = (word) div16u::rem#1 [phi:div16u::@1/div16u::@4->div16u::@2#0] -- register_copy 
  //SEG167 div16u::@2
  b2:
  //SEG168 [80] (word) div16u::dividend#0 ← (word) div16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::quotient#3 div16u::i#2 div16u::dividend#0 div16u::rem#5 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::quotient#3 div16u::i#2 div16u::dividend#0 div16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG169 [81] (word) div16u::quotient#1 ← (word) div16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG170 [82] if((word) div16u::rem#5<(word) div16u::divisor#0) goto div16u::@3 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ) -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3
    bne !+
    lda rem
    cmp divisor
    bcc b3
  !:
  //SEG171 div16u::@5
  //SEG172 [83] (word) div16u::quotient#2 ← ++ (word) div16u::quotient#1 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG173 [84] (word) div16u::rem#3 ← (word) div16u::rem#5 - (word) div16u::divisor#0 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ) -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG174 [85] phi from div16u::@2 div16u::@5 to div16u::@3 [phi:div16u::@2/div16u::@5->div16u::@3]
  //SEG175 [85] phi (word) div16u::return#0 = (word) div16u::quotient#1 [phi:div16u::@2/div16u::@5->div16u::@3#0] -- register_copy 
  //SEG176 [85] phi (word) div16u::rem#8 = (word) div16u::rem#5 [phi:div16u::@2/div16u::@5->div16u::@3#1] -- register_copy 
  //SEG177 div16u::@3
  b3:
  //SEG178 [86] (byte) div16u::i#1 ← ++ (byte) div16u::i#2 [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG179 [87] if((byte) div16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto div16u::@1 [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG180 div16u::@return
  //SEG181 [88] return  [ div16u::rem#8 div16u::return#0 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::return#0 ] )
    rts
}
//SEG182 test_8u
test_8u: {
    .label dividend = 7
    .label divisor = $e
    .label res = $f
    .label i = 2
  //SEG183 [90] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  //SEG184 [90] phi (byte) test_8u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG185 [90] phi from test_8u::@11 to test_8u::@1 [phi:test_8u::@11->test_8u::@1]
  //SEG186 [90] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@11->test_8u::@1#0] -- register_copy 
  //SEG187 test_8u::@1
  b1:
  //SEG188 [91] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG189 [92] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
  //SEG190 [93] (byte) div8u::dividend#2 ← (byte) test_8u::dividend#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta div8u.dividend
  //SEG191 [94] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 ] )
    // (byte) div8u::divisor#1 = (byte) test_8u::divisor#0  // register copy zp ZP_BYTE:14
  //SEG192 [95] call div8u param-assignment [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] )
  //SEG193 [118] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  //SEG194 [118] phi (byte) div8u::divisor#6 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG195 [118] phi (byte) div8u::dividend#5 = (byte) div8u::dividend#2 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
  //SEG196 [96] (byte) div8u::return#3 ← (byte) div8u::return#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 rem8u#1 ] ) -- vbuaa=vbuz1 
    lda div8u.return
  //SEG197 test_8u::@3
  //SEG198 [97] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ) -- vbuz1=vbuaa 
    sta res
  //SEG199 [98] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ line_cursor#1 print_byte::b#3 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
    // (byte) print_byte::b#3 = (byte) test_8u::dividend#0  // register copy zp ZP_BYTE:7
  //SEG200 [99] (byte*~) char_cursor#129 ← (byte*) line_cursor#1 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG201 [100] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  //SEG202 [53] phi from test_8u::@3 to print_byte [phi:test_8u::@3->print_byte]
  //SEG203 [53] phi (byte*) char_cursor#105 = (byte*~) char_cursor#129 [phi:test_8u::@3->print_byte#0] -- register_copy 
  //SEG204 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG205 [101] phi from test_8u::@3 to test_8u::@4 [phi:test_8u::@3->test_8u::@4]
  //SEG206 test_8u::@4
  //SEG207 [102] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  //SEG208 [65] phi from test_8u::@4 to print_str [phi:test_8u::@4->print_str]
  //SEG209 [65] phi (byte*) print_str::str#12 = (const string) test_8u::str [phi:test_8u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG210 test_8u::@5
  //SEG211 [103] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ line_cursor#1 char_cursor#100 print_byte::b#4 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#4 test_8u::i#10 test_8u::res#0 rem8u#1 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG212 [104] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  //SEG213 [53] phi from test_8u::@5 to print_byte [phi:test_8u::@5->print_byte]
  //SEG214 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#100 [phi:test_8u::@5->print_byte#0] -- register_copy 
  //SEG215 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@5->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG216 [105] phi from test_8u::@5 to test_8u::@6 [phi:test_8u::@5->test_8u::@6]
  //SEG217 test_8u::@6
  //SEG218 [106] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  //SEG219 [65] phi from test_8u::@6 to print_str [phi:test_8u::@6->print_str]
  //SEG220 [65] phi (byte*) print_str::str#12 = (const string) test_8u::str1 [phi:test_8u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG221 test_8u::@7
  //SEG222 [107] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ line_cursor#1 char_cursor#100 print_byte::b#5 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#5 test_8u::i#10 rem8u#1 ] ) -- vbuz1=vbuz2 
    lda res
    sta print_byte.b
  //SEG223 [108] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] )
  //SEG224 [53] phi from test_8u::@7 to print_byte [phi:test_8u::@7->print_byte]
  //SEG225 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#100 [phi:test_8u::@7->print_byte#0] -- register_copy 
  //SEG226 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@7->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG227 [109] phi from test_8u::@7 to test_8u::@8 [phi:test_8u::@7->test_8u::@8]
  //SEG228 test_8u::@8
  //SEG229 [110] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 rem8u#1 ] )
  //SEG230 [65] phi from test_8u::@8 to print_str [phi:test_8u::@8->print_str]
  //SEG231 [65] phi (byte*) print_str::str#12 = (const string) test_8u::str2 [phi:test_8u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG232 test_8u::@9
  //SEG233 [111] (byte) print_byte::b#6 ← (byte) rem8u#1 [ line_cursor#1 char_cursor#100 print_byte::b#6 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#6 test_8u::i#10 ] ) -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG234 [112] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 ] )
  //SEG235 [53] phi from test_8u::@9 to print_byte [phi:test_8u::@9->print_byte]
  //SEG236 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#100 [phi:test_8u::@9->print_byte#0] -- register_copy 
  //SEG237 [53] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@9->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG238 [113] phi from test_8u::@9 to test_8u::@10 [phi:test_8u::@9->test_8u::@10]
  //SEG239 test_8u::@10
  //SEG240 [114] call print_ln param-assignment [ line_cursor#1 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 ] )
  //SEG241 [42] phi from test_8u::@10 to print_ln [phi:test_8u::@10->print_ln]
  //SEG242 [42] phi (byte*) line_cursor#33 = (byte*) line_cursor#1 [phi:test_8u::@10->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG243 test_8u::@11
  //SEG244 [115] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG245 [116] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@1 [ line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b1
  //SEG246 test_8u::@return
  //SEG247 [117] return  [ line_cursor#1 ] ( main:2::test_8u:9 [ line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG248 div8u
div8u: {
    .label dividend = $f
    .label quotient = $10
    .label return = $10
    .label divisor = $e
  //SEG249 [119] phi from div8u to div8u::@1 [phi:div8u->div8u::@1]
  //SEG250 [119] phi (byte) div8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG251 [119] phi (byte) div8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#1] -- vbuz1=vbuc1 
    txa
    sta quotient
  //SEG252 [119] phi (byte) div8u::dividend#3 = (byte) div8u::dividend#5 [phi:div8u->div8u::@1#2] -- register_copy 
  //SEG253 [119] phi (byte) div8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#3] -- vbuyy=vbuc1 
    tay
  //SEG254 [119] phi from div8u::@3 to div8u::@1 [phi:div8u::@3->div8u::@1]
  //SEG255 [119] phi (byte) div8u::i#2 = (byte) div8u::i#1 [phi:div8u::@3->div8u::@1#0] -- register_copy 
  //SEG256 [119] phi (byte) div8u::quotient#3 = (byte) div8u::return#0 [phi:div8u::@3->div8u::@1#1] -- register_copy 
  //SEG257 [119] phi (byte) div8u::dividend#3 = (byte) div8u::dividend#0 [phi:div8u::@3->div8u::@1#2] -- register_copy 
  //SEG258 [119] phi (byte) div8u::rem#4 = (byte) div8u::rem#8 [phi:div8u::@3->div8u::@1#3] -- register_copy 
  //SEG259 div8u::@1
  b1:
  //SEG260 [120] (byte) div8u::rem#1 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
  //SEG261 [121] (byte~) div8u::$1 ← (byte) div8u::dividend#3 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and dividend
  //SEG262 [122] if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG263 div8u::@4
  //SEG264 [123] (byte) div8u::rem#2 ← ++ (byte) div8u::rem#1 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG265 [124] phi from div8u::@1 div8u::@4 to div8u::@2 [phi:div8u::@1/div8u::@4->div8u::@2]
  //SEG266 [124] phi (byte) div8u::rem#5 = (byte) div8u::rem#1 [phi:div8u::@1/div8u::@4->div8u::@2#0] -- register_copy 
  //SEG267 div8u::@2
  b2:
  //SEG268 [125] (byte) div8u::dividend#0 ← (byte) div8u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG269 [126] (byte) div8u::quotient#1 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG270 [127] if((byte) div8u::rem#5<(byte) div8u::divisor#6) goto div8u::@3 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ) -- vbuyy_lt_vbuz1_then_la1 
    cpy divisor
    bcc b3
  //SEG271 div8u::@5
  //SEG272 [128] (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#1 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] ) -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG273 [129] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#6 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ) -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc divisor
    tay
  //SEG274 [130] phi from div8u::@2 div8u::@5 to div8u::@3 [phi:div8u::@2/div8u::@5->div8u::@3]
  //SEG275 [130] phi (byte) div8u::return#0 = (byte) div8u::quotient#1 [phi:div8u::@2/div8u::@5->div8u::@3#0] -- register_copy 
  //SEG276 [130] phi (byte) div8u::rem#8 = (byte) div8u::rem#5 [phi:div8u::@2/div8u::@5->div8u::@3#1] -- register_copy 
  //SEG277 div8u::@3
  b3:
  //SEG278 [131] (byte) div8u::i#1 ← ++ (byte) div8u::i#2 [ div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG279 [132] if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1 [ div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1
  //SEG280 div8u::@6
  //SEG281 [133] (byte) rem8u#1 ← (byte) div8u::rem#8 [ div8u::return#0 rem8u#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#1 ] ) -- vbuxx=vbuyy 
    tya
    tax
  //SEG282 div8u::@return
  //SEG283 [134] return  [ div8u::return#0 rem8u#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#1 ] )
    rts
}
//SEG284 test_8s
test_8s: {
    .label dividend = 7
    .label divisor = $14
    .label res = $f
    .label i = 2
  //SEG285 [136] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  //SEG286 [136] phi (byte*) line_cursor#37 = (const byte*) SCREEN#0 [phi:test_8s->test_8s::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta line_cursor
    lda #>SCREEN
    sta line_cursor+1
  //SEG287 [136] phi (byte*) char_cursor#109 = (const byte*) SCREEN#0 [phi:test_8s->test_8s::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta char_cursor
    lda #>SCREEN
    sta char_cursor+1
  //SEG288 [136] phi (signed byte) rem8s#18 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#2] -- vbsz1=vbuc1 
    lda #0
    sta rem8s
  //SEG289 [136] phi (byte) rem8u#33 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#3] -- vbuxx=vbuc1 
    tax
  //SEG290 [136] phi (byte) test_8s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#4] -- vbuz1=vbuc1 
    sta i
  //SEG291 test_8s::@1
  b1:
  //SEG292 [137] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG293 [138] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
  //SEG294 [139] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ) -- vbsaa=vbsz1 
    lda dividend
  //SEG295 [140] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsxx=vbsz1 
    ldx divisor
  //SEG296 [141] call div8s param-assignment [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 ] )
    jsr div8s
  //SEG297 [142] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 ] )
    // (signed byte) div8s::return#3 = (signed byte) div8s::return#2  // register copy reg byte a
  //SEG298 test_8s::@3
  //SEG299 [143] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 ] ) -- vbsz1=vbsaa 
    sta res
  //SEG300 [144] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 ] )
    // (signed byte) print_sbyte::b#1 = (signed byte) test_8s::dividend#0  // register copy zp ZP_BYTE:7
  //SEG301 [145] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  //SEG302 [164] phi from test_8s::@3 to print_sbyte [phi:test_8s::@3->print_sbyte]
  //SEG303 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#109 [phi:test_8s::@3->print_sbyte#0] -- register_copy 
  //SEG304 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#1 [phi:test_8s::@3->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG305 [146] phi from test_8s::@3 to test_8s::@4 [phi:test_8s::@3->test_8s::@4]
  //SEG306 test_8s::@4
  //SEG307 [147] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  //SEG308 [65] phi from test_8s::@4 to print_str [phi:test_8s::@4->print_str]
  //SEG309 [65] phi (byte*) print_str::str#12 = (const string) test_8s::str [phi:test_8s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG310 test_8s::@5
  //SEG311 [148] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG312 [149] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  //SEG313 [164] phi from test_8s::@5 to print_sbyte [phi:test_8s::@5->print_sbyte]
  //SEG314 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#100 [phi:test_8s::@5->print_sbyte#0] -- register_copy 
  //SEG315 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#2 [phi:test_8s::@5->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG316 [150] phi from test_8s::@5 to test_8s::@6 [phi:test_8s::@5->test_8s::@6]
  //SEG317 test_8s::@6
  //SEG318 [151] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  //SEG319 [65] phi from test_8s::@6 to print_str [phi:test_8s::@6->print_str]
  //SEG320 [65] phi (byte*) print_str::str#12 = (const string) test_8s::str1 [phi:test_8s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG321 test_8s::@7
  //SEG322 [152] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#3 ] ) -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG323 [153] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG324 [164] phi from test_8s::@7 to print_sbyte [phi:test_8s::@7->print_sbyte]
  //SEG325 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#100 [phi:test_8s::@7->print_sbyte#0] -- register_copy 
  //SEG326 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#3 [phi:test_8s::@7->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG327 [154] phi from test_8s::@7 to test_8s::@8 [phi:test_8s::@7->test_8s::@8]
  //SEG328 test_8s::@8
  //SEG329 [155] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG330 [65] phi from test_8s::@8 to print_str [phi:test_8s::@8->print_str]
  //SEG331 [65] phi (byte*) print_str::str#12 = (const string) test_8s::str2 [phi:test_8s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG332 test_8s::@9
  //SEG333 [156] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#4 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#4 ] ) -- vbsz1=vbsz2 
    lda rem8s
    sta print_sbyte.b
  //SEG334 [157] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG335 [164] phi from test_8s::@9 to print_sbyte [phi:test_8s::@9->print_sbyte]
  //SEG336 [164] phi (byte*) char_cursor#103 = (byte*) char_cursor#100 [phi:test_8s::@9->print_sbyte#0] -- register_copy 
  //SEG337 [164] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#4 [phi:test_8s::@9->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG338 [158] phi from test_8s::@9 to test_8s::@10 [phi:test_8s::@9->test_8s::@10]
  //SEG339 test_8s::@10
  //SEG340 [159] call print_ln param-assignment [ line_cursor#1 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#10 rem8s#3 ] )
  //SEG341 [42] phi from test_8s::@10 to print_ln [phi:test_8s::@10->print_ln]
  //SEG342 [42] phi (byte*) line_cursor#33 = (byte*) line_cursor#37 [phi:test_8s::@10->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG343 test_8s::@11
  //SEG344 [160] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG345 [161] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@12 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b12
  //SEG346 test_8s::@return
  //SEG347 [162] return  [ line_cursor#1 ] ( main:2::test_8s:7 [ line_cursor#1 ] )
    rts
  //SEG348 test_8s::@12
  b12:
  //SEG349 [163] (byte*~) char_cursor#138 ← (byte*) line_cursor#1 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG350 [136] phi from test_8s::@12 to test_8s::@1 [phi:test_8s::@12->test_8s::@1]
  //SEG351 [136] phi (byte*) line_cursor#37 = (byte*) line_cursor#1 [phi:test_8s::@12->test_8s::@1#0] -- register_copy 
  //SEG352 [136] phi (byte*) char_cursor#109 = (byte*~) char_cursor#138 [phi:test_8s::@12->test_8s::@1#1] -- register_copy 
  //SEG353 [136] phi (signed byte) rem8s#18 = (signed byte) rem8s#3 [phi:test_8s::@12->test_8s::@1#2] -- register_copy 
  //SEG354 [136] phi (byte) rem8u#33 = (byte) rem8u#1 [phi:test_8s::@12->test_8s::@1#3] -- register_copy 
  //SEG355 [136] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@12->test_8s::@1#4] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG356 print_sbyte
print_sbyte: {
    .label b = 7
  //SEG357 [165] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ char_cursor#103 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1
  //SEG358 [166] phi from print_sbyte to print_sbyte::@2 [phi:print_sbyte->print_sbyte::@2]
  //SEG359 print_sbyte::@2
  //SEG360 [167] call print_char param-assignment [ char_cursor#14 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#5 ] )
  //SEG361 [61] phi from print_sbyte::@2 to print_char [phi:print_sbyte::@2->print_char]
  //SEG362 [61] phi (byte*) char_cursor#64 = (byte*) char_cursor#103 [phi:print_sbyte::@2->print_char#0] -- register_copy 
  //SEG363 [61] phi (byte) print_char::ch#3 = (byte) '-' [phi:print_sbyte::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG364 print_sbyte::@4
  //SEG365 [168] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#14 print_sbyte::b#0 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG366 [169] phi from print_sbyte print_sbyte::@4 to print_sbyte::@1 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1]
  //SEG367 [169] phi (byte*) char_cursor#102 = (byte*) char_cursor#103 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#0] -- register_copy 
  //SEG368 [169] phi (signed byte) print_sbyte::b#6 = (signed byte) print_sbyte::b#5 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#1] -- register_copy 
  //SEG369 print_sbyte::@1
  b1:
  //SEG370 [170] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 char_cursor#102 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#9 char_cursor#102 ] )
    // (byte~) print_byte::b#9 = (byte)(signed byte) print_sbyte::b#6  // register copy zp ZP_BYTE:7
  //SEG371 [171] call print_byte param-assignment [ char_cursor#14 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  //SEG372 [53] phi from print_sbyte::@1 to print_byte [phi:print_sbyte::@1->print_byte]
  //SEG373 [53] phi (byte*) char_cursor#105 = (byte*) char_cursor#102 [phi:print_sbyte::@1->print_byte#0] -- register_copy 
  //SEG374 [53] phi (byte) print_byte::b#7 = (byte~) print_byte::b#9 [phi:print_sbyte::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG375 print_sbyte::@return
  //SEG376 [172] return  [ char_cursor#14 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
    rts
}
//SEG377 div8s
div8s: {
    .label neg = $11
  //SEG378 [173] if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@16 [ div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsaa_ge_0_then_la1 
    cmp #0
    bpl b16
  //SEG379 div8s::@7
  //SEG380 [174] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] ) -- vbsaa=_neg_vbsaa 
    eor #$ff
    clc
    adc #1
  //SEG381 [175] (byte~) div8s::dividendb#8 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendb#8 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendb#8 ] ) -- vbuyy=vbuaa 
    tay
  //SEG382 [176] phi from div8s::@7 to div8s::@2 [phi:div8s::@7->div8s::@2]
  //SEG383 [176] phi (byte) div8s::dividendb#3 = (byte~) div8s::dividendb#8 [phi:div8s::@7->div8s::@2#0] -- register_copy 
  //SEG384 [176] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div8s::@7->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
  //SEG385 div8s::@2
  b2:
  //SEG386 [177] if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@17 [ div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ) -- vbsxx_ge_0_then_la1 
    cpx #0
    bpl b4
  //SEG387 div8s::@9
  //SEG388 [178] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ) -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
  //SEG389 [179] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ) -- vbuz1=vbuz1_bxor_vbuc1 
    lda neg
    eor #1
    sta neg
  //SEG390 [180] (byte~) div8s::divisorb#5 ← (byte)(signed byte~) div8s::$7 [ div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] )
    // (byte~) div8s::divisorb#5 = (byte)(signed byte~) div8s::$7  // register copy reg byte x
  //SEG391 [181] phi from div8s::@17 div8s::@9 to div8s::@4 [phi:div8s::@17/div8s::@9->div8s::@4]
  //SEG392 [181] phi (byte) div8s::neg#4 = (byte) div8s::neg#3 [phi:div8s::@17/div8s::@9->div8s::@4#0] -- register_copy 
  //SEG393 [181] phi (byte) div8s::divisorb#3 = (byte~) div8s::divisorb#4 [phi:div8s::@17/div8s::@9->div8s::@4#1] -- register_copy 
  //SEG394 div8s::@4
  b4:
  //SEG395 [182] (byte) div8u::dividend#1 ← (byte) div8s::dividendb#3 [ div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 ] ) -- vbuz1=vbuyy 
    sty div8u.dividend
  //SEG396 [183] (byte) div8u::divisor#0 ← (byte) div8s::divisorb#3 [ div8u::dividend#1 div8u::divisor#0 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::dividend#1 div8u::divisor#0 div8s::neg#4 ] ) -- vbuz1=vbuxx 
    stx div8u.divisor
  //SEG397 [184] call div8u param-assignment [ div8u::return#0 rem8u#1 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::return#0 rem8u#1 div8s::neg#4 ] )
  //SEG398 [118] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  //SEG399 [118] phi (byte) div8u::divisor#6 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG400 [118] phi (byte) div8u::dividend#5 = (byte) div8u::dividend#1 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
  //SEG401 [185] (byte) div8u::return#2 ← (byte) div8u::return#0 [ rem8u#1 div8s::neg#4 div8u::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::neg#4 div8u::return#2 ] ) -- vbuaa=vbuz1 
    lda div8u.return
  //SEG402 div8s::@15
  //SEG403 [186] (byte) div8s::resultb#0 ← (byte) div8u::return#2 [ rem8u#1 div8s::neg#4 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::neg#4 div8s::resultb#0 ] ) -- vbuyy=vbuaa 
    tay
  //SEG404 [187] if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5 [ rem8u#1 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 ] ) -- vbuz1_neq_0_then_la1 
    lda neg
    bne b5
  //SEG405 div8s::@18
  //SEG406 [188] (signed byte~) div8s::return#6 ← (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#6 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#6 ] ) -- vbsaa=vbsyy 
    tya
  //SEG407 [189] (signed byte~) rem8s#32 ← (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::return#6 rem8s#32 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#6 rem8s#32 ] ) -- vbsz1=vbsxx 
    stx rem8s
  //SEG408 [190] phi from div8s::@18 div8s::@5 to div8s::@return [phi:div8s::@18/div8s::@5->div8s::@return]
  //SEG409 [190] phi (signed byte) rem8s#3 = (signed byte~) rem8s#32 [phi:div8s::@18/div8s::@5->div8s::@return#0] -- register_copy 
  //SEG410 [190] phi (signed byte) div8s::return#2 = (signed byte~) div8s::return#6 [phi:div8s::@18/div8s::@5->div8s::@return#1] -- register_copy 
  //SEG411 div8s::@return
  breturn:
  //SEG412 [191] return  [ rem8u#1 rem8s#3 div8s::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 rem8s#3 div8s::return#2 ] )
    rts
  //SEG413 div8s::@5
  b5:
  //SEG414 [192] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::resultb#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 rem8s#1 ] ) -- vbsz1=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    sta rem8s
  //SEG415 [193] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#0 rem8s#1 ] ) -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
    jmp breturn
  //SEG416 div8s::@17
  //SEG417 [194] (byte~) div8s::divisorb#4 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] )
    // (byte~) div8s::divisorb#4 = (byte)(signed byte) div8s::divisor#0  // register copy reg byte x
  //SEG418 div8s::@16
  b16:
  //SEG419 [195] (byte~) div8s::dividendb#7 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendb#7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendb#7 ] ) -- vbuyy=vbuaa 
    tay
  //SEG420 [176] phi from div8s::@16 to div8s::@2 [phi:div8s::@16->div8s::@2]
  //SEG421 [176] phi (byte) div8s::dividendb#3 = (byte~) div8s::dividendb#7 [phi:div8s::@16->div8s::@2#0] -- register_copy 
  //SEG422 [176] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8s::@16->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
}
//SEG423 print_cls
print_cls: {
    .label sc = 3
  //SEG424 [197] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG425 [197] phi (byte*) print_cls::sc#2 = (const byte*) SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
  //SEG426 [197] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG427 [197] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG428 print_cls::@1
  b1:
  //SEG429 [198] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG430 [199] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG431 [200] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bne b1
    lda sc
    cmp #<SCREEN+$3e8
    bne b1
  //SEG432 print_cls::@return
  //SEG433 [201] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

