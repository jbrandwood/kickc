Constantified RValue points[main::$3] = (struct Point){ (signed byte)main::i, main::$0, (signed byte)main::i }

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$0 = - (signed byte)main::i#2
  main::$3 = main::i#2 * SIZEOF_STRUCT_POINT
  ((signed byte*)points+OFFSET_STRUCT_POINT_X)[main::$3] = (signed byte)main::i#2
  ((signed byte*)points+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$0
  ((signed byte*)points+OFFSET_STRUCT_POINT_Z)[main::$3] = (signed byte)main::i#2
  main::i#1 = main::i#2 + rangenext(0,3)
  main::$1 = main::i#1 != rangelast(0,3)
  if(main::$1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::i1#0 = 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  main::i1#2 = phi( main::@2/main::i1#0, main::@3/main::i1#1 )
  main::$4 = main::i1#2 * SIZEOF_STRUCT_POINT
  main::SCREEN[main::$4] = memcpy(points[main::$4], struct Point, SIZEOF_STRUCT_POINT)
  main::i1#1 = main::i1#2 + rangenext(0,3)
  main::$2 = main::i1#1 != rangelast(0,3)
  if(main::$2) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const byte OFFSET_STRUCT_POINT_X = 0
const byte OFFSET_STRUCT_POINT_Y = 1
const byte OFFSET_STRUCT_POINT_Z = 2
signed byte Point::x
signed byte Point::y
signed byte Point::z
const byte SIZEOF_STRUCT_POINT = 3
void __start()
label __start::@1
label __start::@return
void main()
signed byte~ main::$0
bool~ main::$1
bool~ main::$2
byte~ main::$3
byte~ main::$4
label main::@1
label main::@2
label main::@3
label main::@return
const nomodify struct Point* main::SCREEN = (struct Point*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i1
byte main::i1#0
byte main::i1#1
byte main::i1#2
const struct Point* points[4]  = { fill( 4, 0) }

Simplifying constant pointer cast (struct Point*) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition main::$1 [9] if(main::i#1!=rangelast(0,3)) goto main::@1
Simple Condition main::$2 [16] if(main::i1#1!=rangelast(0,3)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant main::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [7] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [9] if(main::i#1!=rangelast(0,3)) goto main::@1 to 4
Resolved ranged next value [14] main::i1#1 = ++ main::i1#2 to ++
Resolved ranged comparison value [16] if(main::i1#1!=rangelast(0,3)) goto main::@3 to 4
Simplifying expression containing zero (signed byte*)points in [4] ((signed byte*)points+OFFSET_STRUCT_POINT_X)[main::$3] = (signed byte)main::i#2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 4 in [7] if(main::i#1!=4) goto main::@1
Adding number conversion cast (unumber) 4 in [12] if(main::i1#1!=4) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 4
Finalized unsigned number type 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift and addition[2] main::$3 = main::i#2 * SIZEOF_STRUCT_POINT
Rewriting multiplication to use shift and addition[9] main::$4 = main::i1#2 * SIZEOF_STRUCT_POINT
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::i1#0
Constant inlined main::i#0 = 0
Constant inlined main::i1#0 = 0
Successful SSA optimization Pass2ConstantInlining
Alias main::$3 = main::$6 
Alias main::$4 = main::$8 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting main::@4(between main::@1 and main::@1)
Added new block during phi lifting main::@5(between main::@3 and main::@3)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [18] main::i1#3 = main::i1#1
Coalesced [19] main::i#3 = main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@2
Culled Empty Block label main::@5
Culled Empty Block label main::@4
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::$0 = - (signed byte)main::i#2
  [3] main::$5 = main::i#2 << 1
  [4] main::$3 = main::$5 + main::i#2
  [5] ((signed byte*)points)[main::$3] = (signed byte)main::i#2
  [6] ((signed byte*)points+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$0
  [7] ((signed byte*)points+OFFSET_STRUCT_POINT_Z)[main::$3] = (signed byte)main::i#2
  [8] main::i#1 = ++ main::i#2
  [9] if(main::i#1!=4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [10] main::i1#2 = phi( main::@1/0, main::@2/main::i1#1 )
  [11] main::$7 = main::i1#2 << 1
  [12] main::$4 = main::$7 + main::i1#2
  [13] main::SCREEN[main::$4] = memcpy(points[main::$4], struct Point, SIZEOF_STRUCT_POINT)
  [14] main::i1#1 = ++ main::i1#2
  [15] if(main::i1#1!=4) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [16] return 
  to:@return


VARIABLE REGISTER WEIGHTS
signed byte Point::x
signed byte Point::y
signed byte Point::z
void main()
signed byte~ main::$0 5.5
byte~ main::$3 14.666666666666666
byte~ main::$4 22.0
byte~ main::$5 22.0
byte~ main::$7 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 6.285714285714286
byte main::i1
byte main::i1#1 16.5
byte main::i1#2 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable main::$7 to live range equivalence class [ main::$7 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::$0 ]
[ main::$5 ]
[ main::$3 ]
[ main::$7 ]
[ main::$4 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::i1#2 main::i1#1 ]
Allocated zp[1]:4 [ main::$0 ]
Allocated zp[1]:5 [ main::$5 ]
Allocated zp[1]:6 [ main::$3 ]
Allocated zp[1]:7 [ main::$7 ]
Allocated zp[1]:8 [ main::$4 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::$0 = - (signed byte)main::i#2 [ main::i#2 main::$0 ] (  [ main::i#2 main::$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] main::$5 = main::i#2 << 1 [ main::i#2 main::$0 main::$5 ] (  [ main::i#2 main::$0 main::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::$0 ]
Statement [4] main::$3 = main::$5 + main::i#2 [ main::i#2 main::$0 main::$3 ] (  [ main::i#2 main::$0 main::$3 ] { }  ) always clobbers reg byte a 
Statement [5] ((signed byte*)points)[main::$3] = (signed byte)main::i#2 [ main::i#2 main::$0 main::$3 ] (  [ main::i#2 main::$0 main::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::$3 ]
Statement [6] ((signed byte*)points+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$0 [ main::i#2 main::$3 ] (  [ main::i#2 main::$3 ] { }  ) always clobbers reg byte a 
Statement [7] ((signed byte*)points+OFFSET_STRUCT_POINT_Z)[main::$3] = (signed byte)main::i#2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [11] main::$7 = main::i1#2 << 1 [ main::i1#2 main::$7 ] (  [ main::i1#2 main::$7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i1#2 main::i1#1 ]
Statement [12] main::$4 = main::$7 + main::i1#2 [ main::i1#2 main::$4 ] (  [ main::i1#2 main::$4 ] { }  ) always clobbers reg byte a 
Statement [13] main::SCREEN[main::$4] = memcpy(points[main::$4], struct Point, SIZEOF_STRUCT_POINT) [ main::i1#2 ] (  [ main::i1#2 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp[1]:3 [ main::i1#2 main::i1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::i1#2 main::i1#1 ]
Statement [15] if(main::i1#1!=4) goto main::@2 [ main::i1#1 ] (  [ main::i1#1 ] { }  ) always clobbers reg byte a 
Statement [2] main::$0 = - (signed byte)main::i#2 [ main::i#2 main::$0 ] (  [ main::i#2 main::$0 ] { }  ) always clobbers reg byte a 
Statement [3] main::$5 = main::i#2 << 1 [ main::i#2 main::$0 main::$5 ] (  [ main::i#2 main::$0 main::$5 ] { }  ) always clobbers reg byte a 
Statement [4] main::$3 = main::$5 + main::i#2 [ main::i#2 main::$0 main::$3 ] (  [ main::i#2 main::$0 main::$3 ] { }  ) always clobbers reg byte a 
Statement [5] ((signed byte*)points)[main::$3] = (signed byte)main::i#2 [ main::i#2 main::$0 main::$3 ] (  [ main::i#2 main::$0 main::$3 ] { }  ) always clobbers reg byte a 
Statement [6] ((signed byte*)points+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$0 [ main::i#2 main::$3 ] (  [ main::i#2 main::$3 ] { }  ) always clobbers reg byte a 
Statement [7] ((signed byte*)points+OFFSET_STRUCT_POINT_Z)[main::$3] = (signed byte)main::i#2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [11] main::$7 = main::i1#2 << 1 [ main::i1#2 main::$7 ] (  [ main::i1#2 main::$7 ] { }  ) always clobbers reg byte a 
Statement [12] main::$4 = main::$7 + main::i1#2 [ main::i1#2 main::$4 ] (  [ main::i1#2 main::$4 ] { }  ) always clobbers reg byte a 
Statement [13] main::SCREEN[main::$4] = memcpy(points[main::$4], struct Point, SIZEOF_STRUCT_POINT) [ main::i1#2 ] (  [ main::i1#2 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [15] if(main::i1#1!=4) goto main::@2 [ main::i1#1 ] (  [ main::i1#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i1#2 main::i1#1 ] : zp[1]:3 , 
Potential registers zp[1]:4 [ main::$0 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$5 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::$3 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$7 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::$4 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:3 [ main::i1#2 main::i1#1 ] 22.79: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:5 [ main::$5 ] 22: zp[1]:7 [ main::$7 ] 22: zp[1]:8 [ main::$4 ] 14.67: zp[1]:6 [ main::$3 ] 5.5: zp[1]:4 [ main::$0 ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [main] best 1286 combination zp[1]:3 [ main::i1#2 main::i1#1 ] reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$5 ] reg byte a [ main::$7 ] reg byte a [ main::$4 ] zp[1]:6 [ main::$3 ] zp[1]:4 [ main::$0 ] 
Limited combination testing to 100 combinations of 1728 possible.
Uplifting [Point] best 1286 combination 
Uplifting [] best 1286 combination 
Attempting to uplift remaining variables inzp[1]:3 [ main::i1#2 main::i1#1 ]
Uplifting [main] best 1286 combination zp[1]:3 [ main::i1#2 main::i1#1 ] 
Attempting to uplift remaining variables inzp[1]:6 [ main::$3 ]
Uplifting [main] best 1186 combination reg byte y [ main::$3 ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::$0 ]
Uplifting [main] best 1186 combination zp[1]:4 [ main::$0 ] 
Allocated (was zp[1]:3) zp[1]:2 [ main::i1#2 main::i1#1 ]
Allocated (was zp[1]:4) zp[1]:3 [ main::$0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct -  array of 3-byte structs (required *3)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 3
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_POINT_Z = 2
  // main
main: {
    .label SCREEN = $400
    .label __0 = 3
    .label i1 = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$0 = - (signed byte)main::i#2 -- vbsz1=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    sta.z __0
    // [3] main::$5 = main::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [4] main::$3 = main::$5 + main::i#2 -- vbuyy=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    tay
    // [5] ((signed byte*)points)[main::$3] = (signed byte)main::i#2 -- pbsc1_derefidx_vbuyy=vbsxx 
    txa
    sta points,y
    // [6] ((signed byte*)points+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$0 -- pbsc1_derefidx_vbuyy=vbsz1 
    lda.z __0
    sta points+OFFSET_STRUCT_POINT_Y,y
    // [7] ((signed byte*)points+OFFSET_STRUCT_POINT_Z)[main::$3] = (signed byte)main::i#2 -- pbsc1_derefidx_vbuyy=vbsxx 
    txa
    sta points+OFFSET_STRUCT_POINT_Z,y
    // [8] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [9] if(main::i#1!=4) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b1_from___b1
    // [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [10] phi main::i1#2 = 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    jmp __b2
    // [10] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [10] phi main::i1#2 = main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [11] main::$7 = main::i1#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i1
    asl
    // [12] main::$4 = main::$7 + main::i1#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z i1
    // [13] main::SCREEN[main::$4] = memcpy(points[main::$4], struct Point, SIZEOF_STRUCT_POINT) -- pssc1_derefidx_vbuaa=pssc2_derefidx_vbuaa_memcpy_vbuc3 
    ldx #SIZEOF_STRUCT_POINT
    tay
  !:
    lda points,y
    sta SCREEN,y
    iny
    dex
    bne !-
    // [14] main::i1#1 = ++ main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [15] if(main::i1#1!=4) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z i1
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data
  points: .fill 3*4, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const byte OFFSET_STRUCT_POINT_Y = 1
const byte OFFSET_STRUCT_POINT_Z = 2
signed byte Point::x
signed byte Point::y
signed byte Point::z
const byte SIZEOF_STRUCT_POINT = 3
void main()
signed byte~ main::$0 zp[1]:3 5.5
byte~ main::$3 reg byte y 14.666666666666666
byte~ main::$4 reg byte a 22.0
byte~ main::$5 reg byte a 22.0
byte~ main::$7 reg byte a 22.0
label main::@1
label main::@2
label main::@return
const nomodify struct Point* main::SCREEN = (struct Point*) 1024
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 6.285714285714286
byte main::i1
byte main::i1#1 i1 zp[1]:2 16.5
byte main::i1#2 i1 zp[1]:2 11.0
const struct Point* points[4]  = { fill( 4, 0) }

reg byte x [ main::i#2 main::i#1 ]
zp[1]:2 [ main::i1#2 main::i1#1 ]
zp[1]:3 [ main::$0 ]
reg byte a [ main::$5 ]
reg byte y [ main::$3 ]
reg byte a [ main::$7 ]
reg byte a [ main::$4 ]


FINAL ASSEMBLER
Score: 1036

  // File Comments
// Minimal struct -  array of 3-byte structs (required *3)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 3
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_POINT_Z = 2
  // main
main: {
    .label SCREEN = $400
    .label __0 = 3
    .label i1 = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // -(signed byte)i
    // [2] main::$0 = - (signed byte)main::i#2 -- vbsz1=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    sta.z __0
    // points[i] = { (signed byte)i, -(signed byte)i, (signed byte)i }
    // [3] main::$5 = main::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [4] main::$3 = main::$5 + main::i#2 -- vbuyy=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    tay
    // [5] ((signed byte*)points)[main::$3] = (signed byte)main::i#2 -- pbsc1_derefidx_vbuyy=vbsxx 
    txa
    sta points,y
    // [6] ((signed byte*)points+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$0 -- pbsc1_derefidx_vbuyy=vbsz1 
    lda.z __0
    sta points+OFFSET_STRUCT_POINT_Y,y
    // [7] ((signed byte*)points+OFFSET_STRUCT_POINT_Z)[main::$3] = (signed byte)main::i#2 -- pbsc1_derefidx_vbuyy=vbsxx 
    txa
    sta points+OFFSET_STRUCT_POINT_Z,y
    // for( byte i: 0..3)
    // [8] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [9] if(main::i#1!=4) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b1
    // [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [10] phi main::i1#2 = 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    // [10] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [10] phi main::i1#2 = main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // SCREEN[i] = points[i]
    // [11] main::$7 = main::i1#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i1
    asl
    // [12] main::$4 = main::$7 + main::i1#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z i1
    // [13] main::SCREEN[main::$4] = memcpy(points[main::$4], struct Point, SIZEOF_STRUCT_POINT) -- pssc1_derefidx_vbuaa=pssc2_derefidx_vbuaa_memcpy_vbuc3 
    ldx #SIZEOF_STRUCT_POINT
    tay
  !:
    lda points,y
    sta SCREEN,y
    iny
    dex
    bne !-
    // for( byte i: 0..3)
    // [14] main::i1#1 = ++ main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [15] if(main::i1#1!=4) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z i1
    bne __b2
    // main::@return
    // }
    // [16] return 
    rts
}
  // File Data
  points: .fill 3*4, 0

