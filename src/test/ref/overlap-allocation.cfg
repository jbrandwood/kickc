
(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@4/(byte) main::i#1 )
  [2] (byte) plot::x#0 ← (byte) main::i#2
  [3] call plot 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [4] (byte) main::i#1 ← ++ (byte) main::i#2
  [5] if((byte) main::i#1!=(byte) $b) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@5
  [6] (byte) main::j#2 ← phi( main::@4/(byte) 0 main::@5/(byte) main::j#1 )
  [7] (byte) plot::x#1 ← (byte) main::j#2
  [8] call plot 
  to:main::@5
main::@5: scope:[main]  from main::@2
  [9] (byte) main::j#1 ← ++ (byte) main::j#2
  [10] if((byte) main::j#1!=(byte) $b) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5 main::@6
  [11] (byte) main::k#2 ← phi( main::@5/(byte) 0 main::@6/(byte) main::k#1 )
  [12] (byte) plot::x#2 ← (byte) main::k#2
  [13] call plot 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [14] (byte) main::k#1 ← ++ (byte) main::k#2
  [15] if((byte) main::k#1!=(byte) $b) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@6
  [16] return 
  to:@return

(void()) plot((byte) plot::x)
plot: scope:[plot]  from main::@1 main::@2 main::@3
  [17] (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  [18] *((const byte*) SCREEN + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [19] return 
  to:@return
