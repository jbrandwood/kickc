__constant const unsigned int COUNT = $4000
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant const char SQRT_COUNT = $80
__constant char Sieve[COUNT] = { fill( COUNT, 0) }
unsigned int Ticks
unsigned int Ticks#0 // Ticks zp[2]:8 101.0
unsigned int Ticks#1 // Ticks_1 zp[2]:6 202.0
void __start()
void end()
__loadstore volatile unsigned int last_time // zp[2]:10 14.500000000000002
int main()
int main::return
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 20002.0
char print_char::ch#1 // reg byte a 20002.0
char print_char::ch#2 // reg byte a 120003.0
char *print_char_cursor
char *print_char_cursor#26 // print_char_cursor zp[2]:2 110002.0
char *print_char_cursor#27 // print_char_cursor zp[2]:2 7117.882352941177
char *print_char_cursor#37 // print_char_cursor zp[2]:2 3667.333333333333
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_line_cursor#0 // print_line_cursor zp[2]:4 15001.5
char *print_line_cursor#9 // print_line_cursor zp[2]:4 20002.0
void print_ln()
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_uchar(char b)
char print_uchar::$0 // reg byte a 20002.0
char print_uchar::$2 // reg byte x 20002.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 2002.0
char print_uchar::b#1 // reg byte x 2002.0
char print_uchar::b#2 // reg byte x 5501.0
void print_uint(unsigned int w)
unsigned int print_uint::w
unsigned int print_uint::w#0 // w zp[2]:6 701.0
void round()
char round::$4 // reg byte a 2002.0
char round::I
char round::I#2 // reg byte x 2002.0
char round::I#3 // reg byte x 1667.3333333333333
char *round::S
char *round::S#1 // S zp[2]:2 2002.0
char *round::S#2 // S zp[2]:2 20002.0
char *round::S#3 // S zp[2]:2 13668.333333333332
char *round::p
char *round::p#1 // p zp[2]:4 2002.0
char *round::p#2 // p zp[2]:4 1334.6666666666667
void start()
__constant unsigned int * const start::LAST_TIME = &last_time

reg byte x [ round::I#3 round::I#2 ]
zp[2]:4 [ print_line_cursor#9 print_line_cursor#0 round::p#2 round::p#1 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp[2]:2 [ print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 round::S#3 round::S#2 round::S#1 ]
zp[2]:10 [ last_time ]
reg byte a [ round::$4 ]
zp[2]:8 [ Ticks#0 ]
zp[2]:6 [ Ticks#1 print_uint::w#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
