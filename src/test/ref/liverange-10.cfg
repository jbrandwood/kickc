@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte) idx#29 ← phi( main/(byte) 0 main::@3/(byte) idx#12 )
  [5] (signed word) main::sw#2 ← phi( main/(signed word) -$14 main::@3/(signed word) main::sw#1 )
  [6] (signed word) outsw::sw#0 ← (signed word) main::sw#2
  [7] call outsw 
  to:main::@3
main::@3: scope:[main]  from main::@1
  [8] (signed word) main::sw#1 ← ++ (signed word) main::sw#2
  [9] if((signed word) main::sw#1!=(signed byte) $14) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@4
  [10] (word) main::w#2 ← phi( main::@3/(word) 0 main::@4/(word) main::w#1 )
  [11] (word) outw::w#0 ← (word) main::w#2
  [12] call outw 
  to:main::@4
main::@4: scope:[main]  from main::@2
  [13] (word) main::w#1 ← ++ (word) main::w#2
  [14] if((word) main::w#1!=(byte) $28) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@4
  [15] return 
  to:@return

(void()) outw((word) outw::w)
outw: scope:[outw]  from main::@2 outsw::@1
  [16] (byte) idx#33 ← phi( main::@2/(byte) idx#12 outsw::@1/(byte) idx#31 )
  [16] (word) outw::w#2 ← phi( main::@2/(word) outw::w#0 outsw::@1/(word) outw::w#1 )
  [17] (byte~) outw::$0 ← > (word) outw::w#2
  [18] (byte~) outw::$1 ← (byte~) outw::$0 << (byte) 4
  [19] (byte) out::c#1 ← *((const byte*) HEXTAB + (byte~) outw::$1)
  [20] call out 
  to:outw::@1
outw::@1: scope:[outw]  from outw
  [21] (byte~) outw::$3 ← > (word) outw::w#2
  [22] (byte~) outw::$4 ← (byte~) outw::$3 & (byte) $f
  [23] (byte) out::c#2 ← *((const byte*) HEXTAB + (byte~) outw::$4)
  [24] call out 
  to:outw::@2
outw::@2: scope:[outw]  from outw::@1
  [25] (byte~) outw::$6 ← < (word) outw::w#2
  [26] (byte~) outw::$7 ← (byte~) outw::$6 << (byte) 4
  [27] (byte) out::c#3 ← *((const byte*) HEXTAB + (byte~) outw::$7)
  [28] call out 
  to:outw::@3
outw::@3: scope:[outw]  from outw::@2
  [29] (byte~) outw::$9 ← < (word) outw::w#2
  [30] (byte~) outw::$10 ← (byte~) outw::$9 & (byte) $f
  [31] (byte) out::c#4 ← *((const byte*) HEXTAB + (byte~) outw::$10)
  [32] call out 
  to:outw::@return
outw::@return: scope:[outw]  from outw::@3
  [33] return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from outsw::@2 outw outw::@1 outw::@2 outw::@3
  [34] (byte) out::c#5 ← phi( outsw::@2/(byte) '-' outw/(byte) out::c#1 outw::@1/(byte) out::c#2 outw::@2/(byte) out::c#3 outw::@3/(byte) out::c#4 )
  [34] (byte) idx#26 ← phi( outsw::@2/(byte) idx#29 outw/(byte) idx#33 outw::@1/(byte) idx#12 outw::@2/(byte) idx#12 outw::@3/(byte) idx#12 )
  [35] (byte) idx#12 ← ++ (byte) idx#26
  [36] *((const nomodify byte*) SCREEN + (byte) idx#12) ← (byte) out::c#5
  to:out::@return
out::@return: scope:[out]  from out
  [37] return 
  to:@return

(void()) outsw((signed word) outsw::sw)
outsw: scope:[outsw]  from main::@1
  [38] if((signed word) outsw::sw#0>=(signed byte) 0) goto outsw::@1
  to:outsw::@2
outsw::@2: scope:[outsw]  from outsw
  [39] phi()
  [40] call out 
  to:outsw::@3
outsw::@3: scope:[outsw]  from outsw::@2
  [41] (signed word) outsw::sw#1 ← - (signed word) outsw::sw#0
  to:outsw::@1
outsw::@1: scope:[outsw]  from outsw outsw::@3
  [42] (byte) idx#31 ← phi( outsw/(byte) idx#29 outsw::@3/(byte) idx#12 )
  [42] (signed word) outsw::sw#3 ← phi( outsw/(signed word) outsw::sw#0 outsw::@3/(signed word) outsw::sw#1 )
  [43] (word) outw::w#1 ← (word)(signed word) outsw::sw#3
  [44] call outw 
  to:outsw::@return
outsw::@return: scope:[outsw]  from outsw::@1
  [45] return 
  to:@return
