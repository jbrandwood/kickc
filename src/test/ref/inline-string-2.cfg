
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_msg 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print_msg 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

(void()) print_msg((byte) print_msg::idx)
print_msg: scope:[print_msg]  from main main::@1
  [5] (byte*) screen#20 ← phi( main/(byte*) 1024 main::@1/(byte*) screen#15 )
  [5] (byte) print_msg::idx#2 ← phi( main/(byte) 1 main::@1/(byte) 2 )
  [6] if((byte) print_msg::idx#2==(byte) 1) goto print_msg::@1
  to:print_msg::@2
print_msg::@1: scope:[print_msg]  from print_msg
  [7] phi()
  to:print_msg::@2
print_msg::@2: scope:[print_msg]  from print_msg print_msg::@1
  [8] (byte*) print_msg::msg#3 ← phi( print_msg::@1/(const byte*) print_msg::msg#1 print_msg/(const byte*) print_msg::msg#2 )
  [9] (byte*) print::msg#0 ← (byte*) print_msg::msg#3
  [10] call print 
  to:print_msg::@return
print_msg::@return: scope:[print_msg]  from print_msg::@2
  [11] return 
  to:@return

(void()) print((byte*) print::msg)
print: scope:[print]  from print_msg::@2
  [12] phi()
  to:print::@1
print::@1: scope:[print]  from print print::@2
  [13] (byte*) screen#15 ← phi( print/(byte*) screen#20 print::@2/(byte*) screen#5 )
  [13] (byte*) print::msg#2 ← phi( print/(byte*) print::msg#0 print::@2/(byte*) print::msg#1 )
  [14] if((byte) 0!=*((byte*) print::msg#2)) goto print::@2
  to:print::@return
print::@return: scope:[print]  from print::@1
  [15] return 
  to:@return
print::@2: scope:[print]  from print::@1
  [16] *((byte*) screen#15) ← *((byte*) print::msg#2)
  [17] (byte*) screen#5 ← ++ (byte*) screen#15
  [18] (byte*) print::msg#1 ← ++ (byte*) print::msg#2
  to:print::@1
