
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  *((const nomodify byte*) main::SCREEN+(number) $28) ← *((const byte*) table + (number) 0)
  asm { ldx#0 !: ldatable,x staSCREEN+1,x inx cpx#4 bne!-  }
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(const byte*) table[]  = (byte*) "cml!"z

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) main::SCREEN+(number) $28) ← *((const byte*) table + (number) 0)
Adding number conversion cast (unumber) $28 in *((const nomodify byte*) main::SCREEN+(number) $28) ← *((const byte*) table + (unumber)(number) 0)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero table in [0] *((const nomodify byte*) main::SCREEN+(byte) $28) ← *((const byte*) table + (byte) 0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) main::SCREEN+(byte) $28) ← *((const byte*) table)
  asm { ldx#0 !: ldatable,x staSCREEN+1,x inx cpx#4 bne!-  }
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates how inline assembler can reference data from the outside program
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN+(byte) $28) ← *((const byte*) table) -- _deref_pbuc1=_deref_pbuc2 
    lda table
    sta SCREEN+$28
    // asm { ldx#0 !: ldatable,x staSCREEN+1,x inx cpx#4 bne!-  }
    ldx #0
  !:
    lda table,x
    sta SCREEN+1,x
    inx
    cpx #4
    bne !-
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data
  table: .text "cml!"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) main::SCREEN+(byte) $28) ← *((const byte*) table) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement asm { ldx#0 !: ldatable,x staSCREEN+1,x inx cpx#4 bne!-  } always clobbers reg byte a reg byte x 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 35 combination 
Uplifting [] best 35 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates how inline assembler can reference data from the outside program
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN+(byte) $28) ← *((const byte*) table) -- _deref_pbuc1=_deref_pbuc2 
    lda table
    sta SCREEN+$28
    // asm { ldx#0 !: ldatable,x staSCREEN+1,x inx cpx#4 bne!-  }
    ldx #0
  !:
    lda table,x
    sta SCREEN+1,x
    inx
    cpx #4
    bne !-
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data
  table: .text "cml!"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(const byte*) table[]  = (byte*) "cml!"z



FINAL ASSEMBLER
Score: 32

  // File Comments
// Illustrates how inline assembler can reference data from the outside program
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // *(SCREEN+40) = table[0]
    // [0] *((const nomodify byte*) main::SCREEN+(byte) $28) ← *((const byte*) table) -- _deref_pbuc1=_deref_pbuc2 
    lda table
    sta SCREEN+$28
    // asm
    // asm { ldx#0 !: ldatable,x staSCREEN+1,x inx cpx#4 bne!-  }
    ldx #0
  !:
    lda table,x
    sta SCREEN+1,x
    inx
    cpx #4
    bne !-
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data
  table: .text "cml!"

