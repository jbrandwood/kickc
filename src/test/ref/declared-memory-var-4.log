Fixing struct type size struct foo to 14
Fixing struct type size struct foo to 14
Fixing struct type SIZE_OF struct foo to 14
Fixing struct type SIZE_OF struct foo to 14
Setting struct to load/store in variable affected by address-of (struct foo*) main::barp ← &(struct foo) bar

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::i#0 ← (byte) 0
  (byte*~) main::$4 ← (byte*)(const struct foo*) main::barp
  (byte*~) main::$1 ← (byte*~) main::$4 + (const byte) OFFSET_STRUCT_FOO_THING1
  *((const nomodify byte*) main::SCREEN + (byte) main::i#0) ← *((byte*~) main::$1)
  (byte) main::i#1 ← ++ (byte) main::i#0
  (byte*~) main::$5 ← (byte*)(const struct foo*) main::barp
  (byte*~) main::$2 ← (byte*~) main::$5 + (const byte) OFFSET_STRUCT_FOO_THING2
  *((const nomodify byte*) main::SCREEN + (byte) main::i#1) ← *((byte*~) main::$2)
  (byte) main::i#2 ← ++ (byte) main::i#1
  (byte) main::j#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#4 ← phi( main/(byte) main::i#2 main::@1/(byte) main::i#3 )
  (byte) main::j#2 ← phi( main/(byte) main::j#0 main::@1/(byte) main::j#1 )
  (byte*~) main::$6 ← (byte*)(const struct foo*) main::barp
  (byte*~) main::$3 ← (byte*~) main::$6 + (const byte) OFFSET_STRUCT_FOO_THING3
  *((const nomodify byte*) main::SCREEN + (byte) main::i#4) ← *((byte*~) main::$3 + (byte) main::j#2)
  (byte) main::i#3 ← ++ (byte) main::i#4
  (byte) main::j#1 ← (byte) main::j#2 + rangenext(0,$b)
  (bool~) main::$0 ← (byte) main::j#1 != rangelast(0,$b)
  if((bool~) main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) OFFSET_STRUCT_FOO_THING1 = (byte) 0
(const byte) OFFSET_STRUCT_FOO_THING2 = (byte) 1
(const byte) OFFSET_STRUCT_FOO_THING3 = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@return
(struct foo) bar loadstore = { thing1: (byte) 'a', thing2: (byte) 'b', thing3: (byte*) "qwe" }
(byte) foo::thing1
(byte) foo::thing2
(const byte*) foo::thing3[(number) $c]  = { fill( $c, 0) }
(void()) main()
(bool~) main::$0
(byte*~) main::$1
(byte*~) main::$2
(byte*~) main::$3
(byte*~) main::$4
(byte*~) main::$5
(byte*~) main::$6
(label) main::@1
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(const struct foo*) main::barp = &(struct foo) bar
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition (bool~) main::$0 [17] if((byte) main::j#1!=rangelast(0,$b)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [1] (byte*~) main::$4 ← (byte*)(const struct foo*) main::barp
Constant right-side identified [5] (byte*~) main::$5 ← (byte*)(const struct foo*) main::barp
Constant right-side identified [11] (byte*~) main::$6 ← (byte*)(const struct foo*) main::barp
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::i#0 = 0
Constant (const byte*) main::$4 = (byte*)main::barp
Constant (const byte*) main::$5 = (byte*)main::barp
Constant (const byte) main::j#0 = 0
Constant (const byte*) main::$6 = (byte*)main::barp
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [15] main::j#1 ← ++ main::j#2 to ++
Resolved ranged comparison value [17] if(main::j#1!=rangelast(0,$b)) goto main::@1 to (number) $c
Converting *(pointer+n) to pointer[n] [3] *((const nomodify byte*) main::SCREEN + (const byte) main::i#0) ← *((byte*~) main::$1)  -- *(main::$4 + OFFSET_STRUCT_FOO_THING1)
Converting *(pointer+n) to pointer[n] [7] *((const nomodify byte*) main::SCREEN + (byte) main::i#1) ← *((byte*~) main::$2)  -- *(main::$5 + OFFSET_STRUCT_FOO_THING2)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::$4 in [2] (byte*~) main::$1 ← (const byte*) main::$4 + (const byte) OFFSET_STRUCT_FOO_THING1
Simplifying expression containing zero main::$4 in [3] *((const nomodify byte*) main::SCREEN + (const byte) main::i#0) ← *((const byte*) main::$4 + (const byte) OFFSET_STRUCT_FOO_THING1)
Simplifying expression containing zero main::SCREEN in [3] *((const nomodify byte*) main::SCREEN + (const byte) main::i#0) ← *((const byte*) main::$4)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) main::$1 and assignment [0] (byte*~) main::$1 ← (const byte*) main::$4
Eliminating unused variable (byte*~) main::$2 and assignment [3] (byte*~) main::$2 ← (const byte*) main::$5 + (const byte) OFFSET_STRUCT_FOO_THING2
Eliminating unused constant (const byte) OFFSET_STRUCT_FOO_THING1
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $c in [9] if((byte) main::j#1!=(number) $c) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $c
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $c
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [1] (byte) main::i#1 ← ++ (const byte) main::i#0
Constant right-side identified [5] (byte*~) main::$3 ← (const byte*) main::$6 + (const byte) OFFSET_STRUCT_FOO_THING3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::i#1 = ++main::i#0
Constant (const byte*) main::$3 = main::$6+OFFSET_STRUCT_FOO_THING3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [2] (byte) main::i#2 ← ++ (const byte) main::i#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::i#2 = ++main::i#1
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::i#1
Inlining constant with var siblings (const byte) main::i#2
Constant inlined main::$5 = (byte*)(const struct foo*) main::barp
Constant inlined main::i#0 = (byte) 0
Constant inlined main::$6 = (byte*)(const struct foo*) main::barp
Constant inlined main::$3 = (byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING3
Constant inlined main::i#2 = ++++(byte) 0
Constant inlined main::$4 = (byte*)(const struct foo*) main::barp
Constant inlined main::j#0 = (byte) 0
Constant inlined main::i#1 = ++(byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)main::barp+OFFSET_STRUCT_FOO_THING2)
Consolidated array index constant in *(main::SCREEN+++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Successful SSA optimization Pass2ConstantSimplification
Added new block during phi lifting main::@2(between main::@1 and main::@1)
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [8] main::j#3 ← main::j#1
Coalesced [9] main::i#5 ← main::i#3
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@2

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) main::SCREEN) ← *((byte*)(const struct foo*) main::barp)
  [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING2)
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [2] (byte) main::i#4 ← phi( main/(byte) 2 main::@1/(byte) main::i#3 )
  [2] (byte) main::j#2 ← phi( main/(byte) 0 main::@1/(byte) main::j#1 )
  [3] *((const nomodify byte*) main::SCREEN + (byte) main::i#4) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING3 + (byte) main::j#2)
  [4] (byte) main::i#3 ← ++ (byte) main::i#4
  [5] (byte) main::j#1 ← ++ (byte) main::j#2
  [6] if((byte) main::j#1!=(byte) $c) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(struct foo) bar loadstore = { thing1: (byte) 'a', thing2: (byte) 'b', thing3: (byte*) "qwe" }
(byte) foo::thing1
(byte) foo::thing2
(void()) main()
(byte) main::i
(byte) main::i#3 7.333333333333333
(byte) main::i#4 16.5
(byte) main::j
(byte) main::j#1 16.5
(byte) main::j#2 11.0

Initial phi equivalence classes
[ main::j#2 main::j#1 ]
[ main::i#4 main::i#3 ]
Added variable bar to live range equivalence class [ bar ]
Complete equivalence classes
[ main::j#2 main::j#1 ]
[ main::i#4 main::i#3 ]
[ bar ]
Allocated zp[1]:2 [ main::j#2 main::j#1 ]
Allocated zp[1]:3 [ main::i#4 main::i#3 ]
Allocated mem[14] [ bar ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a memory variable struct value - containing a fixed size array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_FOO_THING2 = 1
  .const OFFSET_STRUCT_FOO_THING3 = 2
  // main
main: {
    .label SCREEN = $400
    .label barp = bar
    .label i = 3
    .label j = 2
    // [0] *((const nomodify byte*) main::SCREEN) ← *((byte*)(const struct foo*) main::barp) -- _deref_pbuc1=_deref_pbuc2 
    lda barp
    sta SCREEN
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING2) -- _deref_pbuc1=_deref_pbuc2 
    lda barp+OFFSET_STRUCT_FOO_THING2
    sta SCREEN+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi (byte) main::i#4 = (byte) 2 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #2
    sta.z i
    // [2] phi (byte) main::j#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b1
    // [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [2] phi (byte) main::i#4 = (byte) main::i#3 [phi:main::@1->main::@1#0] -- register_copy 
    // [2] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] *((const nomodify byte*) main::SCREEN + (byte) main::i#4) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING3 + (byte) main::j#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z j
    lda barp+OFFSET_STRUCT_FOO_THING3,y
    ldy.z i
    sta SCREEN,y
    // [4] (byte) main::i#3 ← ++ (byte) main::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [6] if((byte) main::j#1!=(byte) $c) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c
    cmp.z j
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data
  bar: .byte 'a', 'b'
  .text "qwe"
  .byte 0
  .fill 8, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) main::SCREEN) ← *((byte*)(const struct foo*) main::barp) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING2) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) main::SCREEN + (byte) main::i#4) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING3 + (byte) main::j#2) [ main::j#2 main::i#4 ] (  [ main::j#2 main::i#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i#4 main::i#3 ]
Statement [0] *((const nomodify byte*) main::SCREEN) ← *((byte*)(const struct foo*) main::barp) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING2) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) main::SCREEN + (byte) main::i#4) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING3 + (byte) main::j#2) [ main::j#2 main::i#4 ] (  [ main::j#2 main::i#4 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::j#2 main::j#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i#4 main::i#3 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers mem[14] [ bar ] : mem[14] , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:2 [ main::j#2 main::j#1 ] 23.83: zp[1]:3 [ main::i#4 main::i#3 ] 
Uplift Scope [foo] 
Uplift Scope [] 0: mem[14] [ bar ] 

Uplifting [main] best 332 combination reg byte y [ main::j#2 main::j#1 ] reg byte x [ main::i#4 main::i#3 ] 
Uplifting [foo] best 332 combination 
Uplifting [] best 332 combination mem[14] [ bar ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a memory variable struct value - containing a fixed size array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_FOO_THING2 = 1
  .const OFFSET_STRUCT_FOO_THING3 = 2
  // main
main: {
    .label SCREEN = $400
    .label barp = bar
    // [0] *((const nomodify byte*) main::SCREEN) ← *((byte*)(const struct foo*) main::barp) -- _deref_pbuc1=_deref_pbuc2 
    lda barp
    sta SCREEN
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING2) -- _deref_pbuc1=_deref_pbuc2 
    lda barp+OFFSET_STRUCT_FOO_THING2
    sta SCREEN+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi (byte) main::i#4 = (byte) 2 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #2
    // [2] phi (byte) main::j#2 = (byte) 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [2] phi (byte) main::i#4 = (byte) main::i#3 [phi:main::@1->main::@1#0] -- register_copy 
    // [2] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] *((const nomodify byte*) main::SCREEN + (byte) main::i#4) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING3 + (byte) main::j#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda barp+OFFSET_STRUCT_FOO_THING3,y
    sta SCREEN,x
    // [4] (byte) main::i#3 ← ++ (byte) main::i#4 -- vbuxx=_inc_vbuxx 
    inx
    // [5] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] if((byte) main::j#1!=(byte) $c) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$c
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data
  bar: .byte 'a', 'b'
  .text "qwe"
  .byte 0
  .fill 8, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const byte) OFFSET_STRUCT_FOO_THING2 = (byte) 1
(const byte) OFFSET_STRUCT_FOO_THING3 = (byte) 2
(struct foo) bar loadstore mem[14] = { thing1: (byte) 'a', thing2: (byte) 'b', thing3: (byte*) "qwe" }
(byte) foo::thing1
(byte) foo::thing2
(const byte*) foo::thing3[(number) $c]  = { fill( $c, 0) }
(void()) main()
(label) main::@1
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(const struct foo*) main::barp = &(struct foo) bar
(byte) main::i
(byte) main::i#3 reg byte x 7.333333333333333
(byte) main::i#4 reg byte x 16.5
(byte) main::j
(byte) main::j#1 reg byte y 16.5
(byte) main::j#2 reg byte y 11.0

reg byte y [ main::j#2 main::j#1 ]
reg byte x [ main::i#4 main::i#3 ]
mem[14] [ bar ]


FINAL ASSEMBLER
Score: 242

  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a memory variable struct value - containing a fixed size array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_FOO_THING2 = 1
  .const OFFSET_STRUCT_FOO_THING3 = 2
  // main
main: {
    .label SCREEN = $400
    .label barp = bar
    // SCREEN[i++] = barp->thing1
    // [0] *((const nomodify byte*) main::SCREEN) ← *((byte*)(const struct foo*) main::barp) -- _deref_pbuc1=_deref_pbuc2 
    lda barp
    sta SCREEN
    // SCREEN[i++] = barp->thing2
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING2) -- _deref_pbuc1=_deref_pbuc2 
    lda barp+OFFSET_STRUCT_FOO_THING2
    sta SCREEN+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // [2] phi (byte) main::i#4 = (byte) 2 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #2
    // [2] phi (byte) main::j#2 = (byte) 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [2] phi (byte) main::i#4 = (byte) main::i#3 [phi:main::@1->main::@1#0] -- register_copy 
    // [2] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@1->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // SCREEN[i++] = barp->thing3[j]
    // [3] *((const nomodify byte*) main::SCREEN + (byte) main::i#4) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING3 + (byte) main::j#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda barp+OFFSET_STRUCT_FOO_THING3,y
    sta SCREEN,x
    // SCREEN[i++] = barp->thing3[j];
    // [4] (byte) main::i#3 ← ++ (byte) main::i#4 -- vbuxx=_inc_vbuxx 
    inx
    // for( char j: 0..11)
    // [5] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] if((byte) main::j#1!=(byte) $c) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$c
    bne __b1
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data
  bar: .byte 'a', 'b'
  .text "qwe"
  .byte 0
  .fill 8, 0

