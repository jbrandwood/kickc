
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::msg#0 = MESSAGE
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::msg#4 = phi( main/main::msg#0, main::@1/main::msg#1 )
  main::$0 = *main::msg#4
  main::msg#1 = ++ main::msg#4
  main::$1 = 0 != main::$0
  if(main::$1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::msg#5 = phi( main::@1/main::msg#1 )
  main::msg#2 = -- main::msg#5
  *main::msg#2 = 'x'
  main::msg#3 = ++ main::msg#2
  *main::msg#3 = 0
  main::i#0 = 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  main::i#2 = phi( main::@2/main::i#0, main::@4/main::i#1 )
  main::$2 = 0 != MESSAGE[main::i#2]
  if(main::$2) goto main::@4
  to:main::@return
main::@4: scope:[main]  from main::@3
  main::i#3 = phi( main::@3/main::i#2 )
  SCREEN[main::i#3] = MESSAGE[main::i#3]
  main::i#1 = ++ main::i#3
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char MESSAGE[$14] = "camelot"
__constant char * const SCREEN = (char *)$400
void __start()
void main()
char main::$0
bool main::$1
bool main::$2
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char *main::msg
char *main::msg#0
char *main::msg#1
char *main::msg#2
char *main::msg#3
char *main::msg#4
char *main::msg#5

Adding number conversion cast (unumber) 0 in main::$1 = 0 != main::$0
Adding number conversion cast (unumber) 0 in *main::msg#3 = 0
Adding number conversion cast (unumber) 0 in main::$2 = 0 != MESSAGE[main::i#2]
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *main::msg#3 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::msg#1 = main::msg#5 
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [5] if(0!=main::$0) goto main::@1
Simple Condition main::$2 [13] if(0!=MESSAGE[main::i#2]) goto main::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::msg#0 = MESSAGE
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::msg#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::msg#0 = MESSAGE
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (char) $14
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@5(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [14] main::i#4 = main::i#1
Coalesced [15] main::msg#6 = main::msg#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@5
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::msg#4 = phi( main/MESSAGE, main::@1/main::msg#1 )
  [2] main::$0 = *main::msg#4
  [3] main::msg#1 = ++ main::msg#4
  [4] if(0!=main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] main::msg#2 = -- main::msg#1
  [6] *main::msg#2 = 'x'
  [7] main::msg#3 = ++ main::msg#2
  [8] *main::msg#3 = 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [9] main::i#2 = phi( main::@2/0, main::@4/main::i#1 )
  [10] if(0!=MESSAGE[main::i#2]) goto main::@4
  to:main::@return
main::@return: scope:[main]  from main::@3
  [11] return 
  to:@return
main::@4: scope:[main]  from main::@3
  [12] SCREEN[main::i#2] = MESSAGE[main::i#2]
  [13] main::i#1 = ++ main::i#2
  to:main::@3


VARIABLE REGISTER WEIGHTS
void main()
char main::$0 // 11.0
char main::i
char main::i#1 // 22.0
char main::i#2 // 18.333333333333332
char *main::msg
char *main::msg#1 // 12.0
char *main::msg#2 // 3.0
char *main::msg#3 // 4.0
char *main::msg#4 // 16.5

Initial phi equivalence classes
[ main::msg#4 main::msg#1 ]
[ main::i#2 main::i#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::msg#2 to live range equivalence class [ main::msg#2 ]
Added variable main::msg#3 to live range equivalence class [ main::msg#3 ]
Complete equivalence classes
[ main::msg#4 main::msg#1 ]
[ main::i#2 main::i#1 ]
[ main::$0 ]
[ main::msg#2 ]
[ main::msg#3 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ main::msg#4 main::msg#1 ]
Allocated zp[1]:5 [ main::$0 ]
Allocated zp[2]:6 [ main::msg#3 ]
Allocated zp[2]:8 [ main::msg#2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::$0 = *main::msg#4 [ main::msg#4 main::$0 ] (  [ main::msg#4 main::$0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [5] main::msg#2 = -- main::msg#1 [ main::msg#2 ] (  [ main::msg#2 ] { }  ) always clobbers reg byte a 
Statement [6] *main::msg#2 = 'x' [ main::msg#2 ] (  [ main::msg#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [7] main::msg#3 = ++ main::msg#2 [ main::msg#3 ] (  [ main::msg#3 ] { }  ) always clobbers reg byte a 
Statement [8] *main::msg#3 = 0 [ ] (  [ ] { }  ) always clobbers reg byte a reg byte y 
Statement [10] if(0!=MESSAGE[main::i#2]) goto main::@4 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [12] SCREEN[main::i#2] = MESSAGE[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] main::$0 = *main::msg#4 [ main::msg#4 main::$0 ] (  [ main::msg#4 main::$0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [5] main::msg#2 = -- main::msg#1 [ main::msg#2 ] (  [ main::msg#2 ] { }  ) always clobbers reg byte a 
Statement [6] *main::msg#2 = 'x' [ main::msg#2 ] (  [ main::msg#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [7] main::msg#3 = ++ main::msg#2 [ main::msg#3 ] (  [ main::msg#3 ] { }  ) always clobbers reg byte a 
Statement [8] *main::msg#3 = 0 [ ] (  [ ] { }  ) always clobbers reg byte a reg byte y 
Statement [10] if(0!=MESSAGE[main::i#2]) goto main::@4 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [12] SCREEN[main::i#2] = MESSAGE[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:3 [ main::msg#4 main::msg#1 ] : zp[2]:3 , 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:8 [ main::msg#2 ] : zp[2]:8 , 
Potential registers zp[2]:6 [ main::msg#3 ] : zp[2]:6 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 40.33: zp[1]:2 [ main::i#2 main::i#1 ] 28.5: zp[2]:3 [ main::msg#4 main::msg#1 ] 11: zp[1]:5 [ main::$0 ] 4: zp[2]:6 [ main::msg#3 ] 3: zp[2]:8 [ main::msg#2 ] 
Uplift Scope [] 

Uplifting [main] best 812 combination reg byte x [ main::i#2 main::i#1 ] zp[2]:3 [ main::msg#4 main::msg#1 ] reg byte a [ main::$0 ] zp[2]:6 [ main::msg#3 ] zp[2]:8 [ main::msg#2 ] 
Uplifting [] best 812 combination 
Coalescing zero page register [ zp[2]:3 [ main::msg#4 main::msg#1 ] ] with [ zp[2]:8 [ main::msg#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:3 [ main::msg#4 main::msg#1 main::msg#2 ] ] with [ zp[2]:6 [ main::msg#3 ] ] - score: 1
Allocated (was zp[2]:3) zp[2]:2 [ main::msg#4 main::msg#1 main::msg#2 main::msg#3 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates a problem with post-incrementing a pointer used in a loop comparison
  // Upstart
  // Commodore 64 PRG executable file
.file [name="post-increment-problem.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label msg = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::msg#4 = MESSAGE [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<MESSAGE
    sta.z msg
    lda #>MESSAGE
    sta.z msg+1
    jmp __b1
  // Error! The post-increment in the following loop is turned into a pre-increment by the compiler.
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::msg#4 = main::msg#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$0 = *main::msg#4 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (msg),y
    // [3] main::msg#1 = ++ main::msg#4 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    // [4] if(0!=main::$0) goto main::@1 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b1_from___b1
    jmp __b2
    // main::@2
  __b2:
    // [5] main::msg#2 = -- main::msg#1 -- pbuz1=_dec_pbuz1 
    lda.z msg
    bne !+
    dec.z msg+1
  !:
    dec.z msg
    // [6] *main::msg#2 = 'x' -- _deref_pbuz1=vbuc1 
    // Now msg should point right after the zero, since the post increment was executed in the last condition that evaluated to zero.
    lda #'x'
    ldy #0
    sta (msg),y
    // [7] main::msg#3 = ++ main::msg#2 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    // [8] *main::msg#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (msg),y
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [9] phi main::i#2 = 0 [phi:main::@2->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // main::@3
  __b3:
    // [10] if(0!=MESSAGE[main::i#2]) goto main::@4 -- 0_neq_pbuc1_derefidx_vbuxx_then_la1 
    lda MESSAGE,x
    cmp #0
    bne __b4
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
    // main::@4
  __b4:
    // [12] SCREEN[main::i#2] = MESSAGE[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MESSAGE,x
    sta SCREEN,x
    // [13] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [9] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [9] phi main::i#2 = main::i#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
}
  // File Data
.segment Data
  MESSAGE: .text "camelot"
  .byte 0
  .fill $c, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy #0 with TAY
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __breturn:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX

FINAL SYMBOL TABLE
__constant char MESSAGE[$14] = "camelot"
__constant char * const SCREEN = (char *) 1024
void main()
char main::$0 // reg byte a 11.0
char main::i
char main::i#1 // reg byte x 22.0
char main::i#2 // reg byte x 18.333333333333332
char *main::msg
char *main::msg#1 // msg zp[2]:2 12.0
char *main::msg#2 // msg zp[2]:2 3.0
char *main::msg#3 // msg zp[2]:2 4.0
char *main::msg#4 // msg zp[2]:2 16.5

zp[2]:2 [ main::msg#4 main::msg#1 main::msg#2 main::msg#3 ]
reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$0 ]


FINAL ASSEMBLER
Score: 653

  // File Comments
// Illustrates a problem with post-incrementing a pointer used in a loop comparison
  // Upstart
  // Commodore 64 PRG executable file
.file [name="post-increment-problem.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label msg = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::msg#4 = MESSAGE [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<MESSAGE
    sta.z msg
    lda #>MESSAGE
    sta.z msg+1
  // Error! The post-increment in the following loop is turned into a pre-increment by the compiler.
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::msg#4 = main::msg#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // while(*msg++)
    // [2] main::$0 = *main::msg#4 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (msg),y
    // [3] main::msg#1 = ++ main::msg#4 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    // [4] if(0!=main::$0) goto main::@1 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // main::@2
    // *--msg = 'x';
    // [5] main::msg#2 = -- main::msg#1 -- pbuz1=_dec_pbuz1 
    lda.z msg
    bne !+
    dec.z msg+1
  !:
    dec.z msg
    // *--msg = 'x'
    // [6] *main::msg#2 = 'x' -- _deref_pbuz1=vbuc1 
    // Now msg should point right after the zero, since the post increment was executed in the last condition that evaluated to zero.
    lda #'x'
    ldy #0
    sta (msg),y
    // *++msg = 0;
    // [7] main::msg#3 = ++ main::msg#2 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    // *++msg = 0
    // [8] *main::msg#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (msg),y
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [9] phi main::i#2 = 0 [phi:main::@2->main::@3#0] -- vbuxx=vbuc1 
    tax
    // main::@3
  __b3:
    // while(MESSAGE[i])
    // [10] if(0!=MESSAGE[main::i#2]) goto main::@4 -- 0_neq_pbuc1_derefidx_vbuxx_then_la1 
    lda MESSAGE,x
    cmp #0
    bne __b4
    // main::@return
    // }
    // [11] return 
    rts
    // main::@4
  __b4:
    // SCREEN[i] = MESSAGE[i]
    // [12] SCREEN[main::i#2] = MESSAGE[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MESSAGE,x
    sta SCREEN,x
    // i++;
    // [13] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [9] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [9] phi main::i#2 = main::i#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
}
  // File Data
.segment Data
  MESSAGE: .text "camelot"
  .byte 0
  .fill $c, 0

