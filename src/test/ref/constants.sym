const nomodify byte* BG_COLOR = (byte*) 53281
const nomodify byte GREEN = 5
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte RED = 2
void assert_byte(byte* assert_byte::msg , byte assert_byte::b , byte assert_byte::c)
byte assert_byte::b
byte assert_byte::b#3 reg byte x 20.2
byte assert_byte::c
byte assert_byte::c#3 c zp[1]:4 20.2
byte* assert_byte::msg
byte* assert_byte::msg#3 msg zp[2]:2 101.0
void assert_sbyte(byte* assert_sbyte::msg , signed byte assert_sbyte::b , signed byte assert_sbyte::c)
signed byte assert_sbyte::b
signed byte assert_sbyte::b#5 reg byte x 16.833333333333332
signed byte assert_sbyte::c
signed byte assert_sbyte::c#5 c zp[1]:4 16.833333333333332
byte* assert_sbyte::msg
byte* assert_sbyte::msg#5 msg zp[2]:2 101.0
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:2 2002.0
byte* memset::dst#2 dst zp[2]:2 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
const byte* msg[4]  = "0=0"
const byte* msg1[6]  = "0+2=2"
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 110002.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:5 8207.814814814814
byte* print_char_cursor#4 print_char_cursor zp[2]:5 27500.5
byte* print_char_cursor#77 print_char_cursor zp[2]:5 61.5
byte* print_char_cursor#87 print_char_cursor zp[2]:5 1809.0
byte* print_char_cursor#92 print_char_cursor zp[2]:5 202.0
byte* print_char_cursor#98 print_char_cursor zp[2]:5 22.0
byte* print_char_cursor#99 print_char_cursor zp[2]:5 22.0
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:7 840.2499999999999
byte* print_line_cursor#25 print_line_cursor zp[2]:7 21003.0
byte* print_line_cursor#49 print_line_cursor zp[2]:7 1203.0
byte* print_line_cursor#52 print_line_cursor zp[2]:7 11.181818181818182
void print_ln()
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:2 20002.0
byte* print_str::str#1 str zp[2]:2 202.0
byte* print_str::str#10 str zp[2]:2 10251.25
byte* print_str::str#12 str zp[2]:2 1203.0
byte* print_str::str#5 str zp[2]:2 101.0
const byte* str[2]  = " "
const byte* str1[6]  = "fail!"
const byte* str2[3]  = "ok"
void test_bytes()
const byte test_bytes::bb = 0
byte test_bytes::bc
const byte test_bytes::bc#0 bc = 2
byte test_bytes::bd
const byte test_bytes::bd#0 bd = (byte)(signed byte)test_bytes::bc#0-4
const byte* test_bytes::msg2[$a]  = "0+2-4=254"
void test_sbytes()
const signed byte test_sbytes::bb = 0
signed byte test_sbytes::bc
const signed byte test_sbytes::bc#0 bc = 2
signed byte test_sbytes::bd
const signed byte test_sbytes::bd#0 bd = test_sbytes::bc#0-4
signed byte test_sbytes::be
const signed byte test_sbytes::be#0 be = -test_sbytes::bd#0
const signed byte test_sbytes::bf = (signed byte)-$7f-$7f
const byte* test_sbytes::msg2[9]  = "0+2-4=-2"
const byte* test_sbytes::msg3[$b]  = "-(0+2-4)=2"
const byte* test_sbytes::msg4[$b]  = "-127-127=2"

zp[2]:2 [ assert_byte::msg#3 print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 assert_sbyte::msg#5 memset::dst#2 memset::dst#1 ]
reg byte x [ assert_byte::b#3 ]
reg byte x [ assert_sbyte::b#5 ]
zp[1]:4 [ assert_sbyte::c#5 assert_byte::c#3 ]
zp[2]:5 [ print_char_cursor#87 print_char_cursor#77 print_char_cursor#98 print_char_cursor#99 print_char_cursor#1 print_char_cursor#92 print_char_cursor#4 ]
zp[2]:7 [ print_line_cursor#25 print_line_cursor#49 print_line_cursor#52 print_line_cursor#0 ]
reg byte a [ print_char::ch#0 ]
