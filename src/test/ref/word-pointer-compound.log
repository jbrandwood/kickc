
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$7 = main::i#2 * SIZEOF_UNSIGNED_INT
  main::words[main::$7] = main::words[main::$7] + $101
  main::i#1 = main::i#2 + rangenext(0,2)
  main::$6 = main::i#1 != rangelast(0,2)
  if(main::$6) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::$8 = 0 * SIZEOF_UNSIGNED_INT
  main::$0 = byte1  main::words[main::$8]
  main::SCREEN[0] = main::$0
  main::$9 = 0 * SIZEOF_UNSIGNED_INT
  main::$1 = byte0  main::words[main::$9]
  main::SCREEN[1] = main::$1
  main::$10 = 1 * SIZEOF_UNSIGNED_INT
  main::$2 = byte1  main::words[main::$10]
  main::SCREEN[2] = main::$2
  main::$11 = 1 * SIZEOF_UNSIGNED_INT
  main::$3 = byte0  main::words[main::$11]
  main::SCREEN[3] = main::$3
  main::$12 = 2 * SIZEOF_UNSIGNED_INT
  main::$4 = byte1  main::words[main::$12]
  main::SCREEN[4] = main::$4
  main::$13 = 2 * SIZEOF_UNSIGNED_INT
  main::$5 = byte0  main::words[main::$13]
  main::SCREEN[5] = main::$5
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char SIZEOF_UNSIGNED_INT = 2
void __start()
void main()
char main::$0
char main::$1
number main::$10
number main::$11
number main::$12
number main::$13
char main::$2
char main::$3
char main::$4
char main::$5
bool main::$6
char main::$7
number main::$8
number main::$9
__constant char * const main::SCREEN = (char *)$400
char main::i
char main::i#0
char main::i#1
char main::i#2
__constant unsigned int main::words[] = { $3031, $3233, $3435 }

Adding number conversion cast (unumber) $101 in main::words[main::$7] = main::words[main::$7] + $101
Adding number conversion cast (unumber) 0 in main::$8 = 0 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) main::$8 in main::$8 = (unumber)0 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) 0 in main::SCREEN[0] = main::$0
Adding number conversion cast (unumber) 0 in main::$9 = 0 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) main::$9 in main::$9 = (unumber)0 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) 1 in main::SCREEN[1] = main::$1
Adding number conversion cast (unumber) 1 in main::$10 = 1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) main::$10 in main::$10 = (unumber)1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) 2 in main::SCREEN[2] = main::$2
Adding number conversion cast (unumber) 1 in main::$11 = 1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) main::$11 in main::$11 = (unumber)1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) 3 in main::SCREEN[3] = main::$3
Adding number conversion cast (unumber) 2 in main::$12 = 2 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) main::$12 in main::$12 = (unumber)2 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) 4 in main::SCREEN[4] = main::$4
Adding number conversion cast (unumber) 2 in main::$13 = 2 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) main::$13 in main::$13 = (unumber)2 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) 5 in main::SCREEN[5] = main::$5
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $101
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 2
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (unsigned int) $101
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 3
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in main::$8 = 0 * SIZEOF_UNSIGNED_INT
Inferred type updated to char in main::$9 = 0 * SIZEOF_UNSIGNED_INT
Inferred type updated to char in main::$10 = 1 * SIZEOF_UNSIGNED_INT
Inferred type updated to char in main::$11 = 1 * SIZEOF_UNSIGNED_INT
Inferred type updated to char in main::$12 = 2 * SIZEOF_UNSIGNED_INT
Inferred type updated to char in main::$13 = 2 * SIZEOF_UNSIGNED_INT
Simple Condition main::$6 [6] if(main::i#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [7] main::$8 = 0 * SIZEOF_UNSIGNED_INT
Constant right-side identified [10] main::$9 = 0 * SIZEOF_UNSIGNED_INT
Constant right-side identified [13] main::$10 = 1 * SIZEOF_UNSIGNED_INT
Constant right-side identified [16] main::$11 = 1 * SIZEOF_UNSIGNED_INT
Constant right-side identified [19] main::$12 = 2 * SIZEOF_UNSIGNED_INT
Constant right-side identified [22] main::$13 = 2 * SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#0 = 0
Constant main::$8 = 0*SIZEOF_UNSIGNED_INT
Constant main::$9 = 0*SIZEOF_UNSIGNED_INT
Constant main::$10 = 1*SIZEOF_UNSIGNED_INT
Constant main::$11 = 1*SIZEOF_UNSIGNED_INT
Constant main::$12 = 2*SIZEOF_UNSIGNED_INT
Constant main::$13 = 2*SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [4] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [6] if(main::i#1!=rangelast(0,2)) goto main::@1 to 3
Simplifying constant evaluating to zero 0*SIZEOF_UNSIGNED_INT in 
Simplifying constant evaluating to zero 0*SIZEOF_UNSIGNED_INT in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::words in [8] main::$0 = byte1  main::words[main::$8]
Simplifying expression containing zero main::SCREEN in [9] main::SCREEN[0] = main::$0
Simplifying expression containing zero main::words in [11] main::$1 = byte0  main::words[main::$9]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::$8
Eliminating unused constant main::$9
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 3 in [4] if(main::i#1!=3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [1] main::$7 = main::i#2 * SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::i#0
Constant inlined main::$12 = 2*SIZEOF_UNSIGNED_INT
Constant inlined main::i#0 = 0
Constant inlined main::$13 = 2*SIZEOF_UNSIGNED_INT
Constant inlined main::$10 = 1*SIZEOF_UNSIGNED_INT
Constant inlined main::$11 = 1*SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::words+1*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+2)
Consolidated array index constant in *(main::words+1*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+3)
Consolidated array index constant in *(main::words+2*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+4)
Consolidated array index constant in *(main::words+2*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+5)
Successful SSA optimization Pass2ConstantAdditionElimination
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [19] main::i#3 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@3
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::$7 = main::i#2 << 1
  [3] main::words[main::$7] = main::words[main::$7] + $101
  [4] main::i#1 = ++ main::i#2
  [5] if(main::i#1!=3) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] main::$0 = byte1  *main::words
  [7] *main::SCREEN = main::$0
  [8] main::$1 = byte0  *main::words
  [9] *(main::SCREEN+1) = main::$1
  [10] main::$2 = byte1  *(main::words+1*SIZEOF_UNSIGNED_INT)
  [11] *(main::SCREEN+2) = main::$2
  [12] main::$3 = byte0  *(main::words+1*SIZEOF_UNSIGNED_INT)
  [13] *(main::SCREEN+3) = main::$3
  [14] main::$4 = byte1  *(main::words+2*SIZEOF_UNSIGNED_INT)
  [15] *(main::SCREEN+4) = main::$4
  [16] main::$5 = byte0  *(main::words+2*SIZEOF_UNSIGNED_INT)
  [17] *(main::SCREEN+5) = main::$5
  to:main::@return
main::@return: scope:[main]  from main::@2
  [18] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::$0 // 4.0
char main::$1 // 4.0
char main::$2 // 4.0
char main::$3 // 4.0
char main::$4 // 4.0
char main::$5 // 4.0
char main::$7 // 33.0
char main::i
char main::i#1 // 16.5
char main::i#2 // 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$7 to live range equivalence class [ main::$7 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$7 ]
[ main::$0 ]
[ main::$1 ]
[ main::$2 ]
[ main::$3 ]
[ main::$4 ]
[ main::$5 ]
Allocated zp[1]:2 [ main::$7 ]
Allocated zp[1]:3 [ main::i#2 main::i#1 ]
Allocated zp[1]:4 [ main::$0 ]
Allocated zp[1]:5 [ main::$1 ]
Allocated zp[1]:6 [ main::$2 ]
Allocated zp[1]:7 [ main::$3 ]
Allocated zp[1]:8 [ main::$4 ]
Allocated zp[1]:9 [ main::$5 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::$7 = main::i#2 << 1 [ main::i#2 main::$7 ] (  [ main::i#2 main::$7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i#2 main::i#1 ]
Statement [3] main::words[main::$7] = main::words[main::$7] + $101 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] main::$7 = main::i#2 << 1 [ main::i#2 main::$7 ] (  [ main::i#2 main::$7 ] { }  ) always clobbers reg byte a 
Statement [3] main::words[main::$7] = main::words[main::$7] + $101 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:3 [ main::i#2 main::i#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:2 [ main::$7 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::$2 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$3 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::$4 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ main::$5 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 33: zp[1]:2 [ main::$7 ] 27.5: zp[1]:3 [ main::i#2 main::i#1 ] 4: zp[1]:4 [ main::$0 ] 4: zp[1]:5 [ main::$1 ] 4: zp[1]:6 [ main::$2 ] 4: zp[1]:7 [ main::$3 ] 4: zp[1]:8 [ main::$4 ] 4: zp[1]:9 [ main::$5 ] 
Uplift Scope [] 

Uplifting [main] best 566 combination reg byte a [ main::$7 ] reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$0 ] reg byte a [ main::$1 ] zp[1]:6 [ main::$2 ] zp[1]:7 [ main::$3 ] zp[1]:8 [ main::$4 ] zp[1]:9 [ main::$5 ] 
Limited combination testing to 100 combinations of 49152 possible.
Uplifting [] best 566 combination 
Attempting to uplift remaining variables inzp[1]:6 [ main::$2 ]
Uplifting [main] best 560 combination reg byte a [ main::$2 ] 
Attempting to uplift remaining variables inzp[1]:7 [ main::$3 ]
Uplifting [main] best 554 combination reg byte a [ main::$3 ] 
Attempting to uplift remaining variables inzp[1]:8 [ main::$4 ]
Uplifting [main] best 548 combination reg byte a [ main::$4 ] 
Attempting to uplift remaining variables inzp[1]:9 [ main::$5 ]
Uplifting [main] best 542 combination reg byte a [ main::$5 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test word pointer compound assignment
  // Upstart
  // Commodore 64 PRG executable file
.file [name="word-pointer-compound.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_UNSIGNED_INT = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$7 = main::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [3] main::words[main::$7] = main::words[main::$7] + $101 -- pwuc1_derefidx_vbuaa=pwuc1_derefidx_vbuaa_plus_vwuc2 
    tay
    lda words,y
    clc
    adc #<$101
    sta words,y
    lda words+1,y
    adc #>$101
    sta words+1,y
    // [4] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if(main::i#1!=3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne __b1_from___b1
    jmp __b2
    // main::@2
  __b2:
    // [6] main::$0 = byte1  *main::words -- vbuaa=_byte1__deref_pwuc1 
    lda words+1
    // [7] *main::SCREEN = main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [8] main::$1 = byte0  *main::words -- vbuaa=_byte0__deref_pwuc1 
    lda words
    // [9] *(main::SCREEN+1) = main::$1 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
    // [10] main::$2 = byte1  *(main::words+1*SIZEOF_UNSIGNED_INT) -- vbuaa=_byte1__deref_pwuc1 
    lda words+1*SIZEOF_UNSIGNED_INT+1
    // [11] *(main::SCREEN+2) = main::$2 -- _deref_pbuc1=vbuaa 
    sta SCREEN+2
    // [12] main::$3 = byte0  *(main::words+1*SIZEOF_UNSIGNED_INT) -- vbuaa=_byte0__deref_pwuc1 
    lda words+1*SIZEOF_UNSIGNED_INT
    // [13] *(main::SCREEN+3) = main::$3 -- _deref_pbuc1=vbuaa 
    sta SCREEN+3
    // [14] main::$4 = byte1  *(main::words+2*SIZEOF_UNSIGNED_INT) -- vbuaa=_byte1__deref_pwuc1 
    lda words+2*SIZEOF_UNSIGNED_INT+1
    // [15] *(main::SCREEN+4) = main::$4 -- _deref_pbuc1=vbuaa 
    sta SCREEN+4
    // [16] main::$5 = byte0  *(main::words+2*SIZEOF_UNSIGNED_INT) -- vbuaa=_byte0__deref_pwuc1 
    lda words+2*SIZEOF_UNSIGNED_INT
    // [17] *(main::SCREEN+5) = main::$5 -- _deref_pbuc1=vbuaa 
    sta SCREEN+5
    jmp __breturn
    // main::@return
  __breturn:
    // [18] return 
    rts
  .segment Data
    words: .word $3031, $3233, $3435
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char SIZEOF_UNSIGNED_INT = 2
void main()
char main::$0 // reg byte a 4.0
char main::$1 // reg byte a 4.0
char main::$2 // reg byte a 4.0
char main::$3 // reg byte a 4.0
char main::$4 // reg byte a 4.0
char main::$5 // reg byte a 4.0
char main::$7 // reg byte a 33.0
__constant char * const main::SCREEN = (char *) 1024
char main::i
char main::i#1 // reg byte x 16.5
char main::i#2 // reg byte x 11.0
__constant unsigned int main::words[] = { $3031, $3233, $3435 }

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$7 ]
reg byte a [ main::$0 ]
reg byte a [ main::$1 ]
reg byte a [ main::$2 ]
reg byte a [ main::$3 ]
reg byte a [ main::$4 ]
reg byte a [ main::$5 ]


FINAL ASSEMBLER
Score: 449

  // File Comments
// Test word pointer compound assignment
  // Upstart
  // Commodore 64 PRG executable file
.file [name="word-pointer-compound.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_UNSIGNED_INT = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // words[i] += $0101
    // [2] main::$7 = main::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [3] main::words[main::$7] = main::words[main::$7] + $101 -- pwuc1_derefidx_vbuaa=pwuc1_derefidx_vbuaa_plus_vwuc2 
    tay
    lda words,y
    clc
    adc #<$101
    sta words,y
    lda words+1,y
    adc #>$101
    sta words+1,y
    // for( byte i: 0..2)
    // [4] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if(main::i#1!=3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne __b1
    // main::@2
    // BYTE1(words[0])
    // [6] main::$0 = byte1  *main::words -- vbuaa=_byte1__deref_pwuc1 
    lda words+1
    // SCREEN[0] = BYTE1(words[0])
    // [7] *main::SCREEN = main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // BYTE0(words[0])
    // [8] main::$1 = byte0  *main::words -- vbuaa=_byte0__deref_pwuc1 
    lda words
    // SCREEN[1] = BYTE0(words[0])
    // [9] *(main::SCREEN+1) = main::$1 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
    // BYTE1(words[1])
    // [10] main::$2 = byte1  *(main::words+1*SIZEOF_UNSIGNED_INT) -- vbuaa=_byte1__deref_pwuc1 
    lda words+1*SIZEOF_UNSIGNED_INT+1
    // SCREEN[2] = BYTE1(words[1])
    // [11] *(main::SCREEN+2) = main::$2 -- _deref_pbuc1=vbuaa 
    sta SCREEN+2
    // BYTE0(words[1])
    // [12] main::$3 = byte0  *(main::words+1*SIZEOF_UNSIGNED_INT) -- vbuaa=_byte0__deref_pwuc1 
    lda words+1*SIZEOF_UNSIGNED_INT
    // SCREEN[3] = BYTE0(words[1])
    // [13] *(main::SCREEN+3) = main::$3 -- _deref_pbuc1=vbuaa 
    sta SCREEN+3
    // BYTE1(words[2])
    // [14] main::$4 = byte1  *(main::words+2*SIZEOF_UNSIGNED_INT) -- vbuaa=_byte1__deref_pwuc1 
    lda words+2*SIZEOF_UNSIGNED_INT+1
    // SCREEN[4] = BYTE1(words[2])
    // [15] *(main::SCREEN+4) = main::$4 -- _deref_pbuc1=vbuaa 
    sta SCREEN+4
    // BYTE0(words[2])
    // [16] main::$5 = byte0  *(main::words+2*SIZEOF_UNSIGNED_INT) -- vbuaa=_byte0__deref_pwuc1 
    lda words+2*SIZEOF_UNSIGNED_INT
    // SCREEN[5] = BYTE0(words[2])
    // [17] *(main::SCREEN+5) = main::$5 -- _deref_pbuc1=vbuaa 
    sta SCREEN+5
    // main::@return
    // }
    // [18] return 
    rts
  .segment Data
    words: .word $3031, $3233, $3435
}
  // File Data

