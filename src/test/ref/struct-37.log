
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::j#0 ← (byte) 0
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@1/(byte) main::j#2 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$1 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_SEGMENT
  (byte) main::to_x#0 ← *((byte*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) main::$1)
  (byte) main::to_y#0 ← *((byte*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) main::$1)
  *((const nomodify byte*) SCREEN + (byte) main::j#3) ← (byte) main::to_x#0
  (byte) main::j#1 ← ++ (byte) main::j#3
  *((const nomodify byte*) SCREEN + (byte) main::j#1) ← (byte) main::to_y#0
  (byte) main::j#2 ← ++ (byte) main::j#1
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,2)
  (bool~) main::$0 ← (byte) main::i#1 != rangelast(0,2)
  if((bool~) main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) MOVE_TO = (byte) 0
(const byte) OFFSET_STRUCT_SEGMENT_TO = (byte) 1
(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X = (byte) 0
(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y = (byte) 1
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const byte) SIZEOF_STRUCT_SEGMENT = (byte) 5
(const byte) SPLINE_TO = (byte) 1
(const byte) Segment::SegmentType::LINE_TO = (byte) 2
(const byte) Segment::SegmentType::MOVE_TO = (byte) 0
(const byte) Segment::SegmentType::SPLINE_TO = (byte) 1
(struct SplineVector16) Segment::to
(byte) Segment::type
(struct SplineVector16) Segment::via
(byte) SplineVector16::x
(byte) SplineVector16::y
(void()) _start()
(label) _start::@1
(label) _start::@return
(const struct Segment*) letter_c[]  = { { type: (const byte) MOVE_TO, to: { x: (byte) 'a', y: (byte) 'b' }, via: { x: (byte) 0, y: (byte) 0 } }, { type: (const byte) SPLINE_TO, to: { x: (byte) 'c', y: (byte) 'd' }, via: { x: (byte) $67, y: (byte) $a9 } }, { type: (const byte) SPLINE_TO, to: { x: (byte) 'e', y: (byte) 'f' }, via: { x: (byte) $4b, y: (byte) $c3 } } }
(void()) main()
(bool~) main::$0
(byte~) main::$1
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte) main::to_x
(byte) main::to_x#0
(byte) main::to_y
(byte) main::to_y#0

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition (bool~) main::$0 [12] if((byte) main::i#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::j#0 = 0
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [10] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [12] if(main::i#1!=rangelast(0,2)) goto main::@1 to (number) 3
Simplifying expression containing zero (byte*)(struct SplineVector16*)letter_c+OFFSET_STRUCT_SEGMENT_TO in [4] (byte) main::to_x#0 ← *((byte*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) main::$1)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) OFFSET_STRUCT_SPLINEVECTOR16_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 3 in [9] if((byte) main::i#1!=(number) 3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift and addition[1] (byte~) main::$1 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_SEGMENT
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::j#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Alias main::$1 = main::$3 
Successful SSA optimization Pass2AliasElimination
Eliminating unused constant (const byte) SIZEOF_STRUCT_SEGMENT
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [13] main::i#3 ← main::i#1
Coalesced [14] main::j#4 ← main::j#2
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] (byte) main::j#3 ← phi( main/(byte) 0 main::@1/(byte) main::j#2 )
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 2
  [3] (byte~) main::$1 ← (byte~) main::$2 + (byte) main::i#2
  [4] (byte) main::to_x#0 ← *((byte*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO + (byte~) main::$1)
  [5] (byte) main::to_y#0 ← *((byte*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) main::$1)
  [6] *((const nomodify byte*) SCREEN + (byte) main::j#3) ← (byte) main::to_x#0
  [7] (byte) main::j#1 ← ++ (byte) main::j#3
  [8] *((const nomodify byte*) SCREEN + (byte) main::j#1) ← (byte) main::to_y#0
  [9] (byte) main::j#2 ← ++ (byte) main::j#1
  [10] (byte) main::i#1 ← ++ (byte) main::i#2
  [11] if((byte) main::i#1!=(byte) 3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [12] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(struct SplineVector16) Segment::to
(byte) Segment::type
(struct SplineVector16) Segment::via
(byte) SplineVector16::x
(byte) SplineVector16::y
(void()) main()
(byte~) main::$1 16.5
(byte~) main::$2 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 4.888888888888889
(byte) main::j
(byte) main::j#1 16.5
(byte) main::j#2 7.333333333333333
(byte) main::j#3 5.5
(byte) main::to_x
(byte) main::to_x#0 11.0
(byte) main::to_y
(byte) main::to_y#0 7.333333333333333

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#3 main::j#2 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable main::to_x#0 to live range equivalence class [ main::to_x#0 ]
Added variable main::to_y#0 to live range equivalence class [ main::to_y#0 ]
Added variable main::j#1 to live range equivalence class [ main::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#3 main::j#2 ]
[ main::$2 ]
[ main::$1 ]
[ main::to_x#0 ]
[ main::to_y#0 ]
[ main::j#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::j#3 main::j#2 ]
Allocated zp[1]:4 [ main::$2 ]
Allocated zp[1]:5 [ main::$1 ]
Allocated zp[1]:6 [ main::to_x#0 ]
Allocated zp[1]:7 [ main::to_y#0 ]
Allocated zp[1]:8 [ main::j#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Complex C-struct - copying a sub-struct from C-standard layout to Unwound layout
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const MOVE_TO = 0
  .const SPLINE_TO = 1
  .const OFFSET_STRUCT_SEGMENT_TO = 1
  .const OFFSET_STRUCT_SPLINEVECTOR16_Y = 1
  .label SCREEN = $400
  // main
main: {
    .label __1 = 5
    .label to_x = 6
    .label to_y = 7
    .label j = 8
    .label j_1 = 3
    .label i = 2
    .label __2 = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::j#3 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z j_1
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::j#3 = (byte) main::j#2 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z i
    asl
    asl
    sta.z __2
    // [3] (byte~) main::$1 ← (byte~) main::$2 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z __2
    clc
    adc.z i
    sta.z __1
    // [4] (byte) main::to_x#0 ← *((byte*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO + (byte~) main::$1) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __1
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO,y
    sta.z to_x
    // [5] (byte) main::to_y#0 ← *((byte*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) main::$1) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __1
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z to_y
    // [6] *((const nomodify byte*) SCREEN + (byte) main::j#3) ← (byte) main::to_x#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z to_x
    ldy.z j_1
    sta SCREEN,y
    // [7] (byte) main::j#1 ← ++ (byte) main::j#3 -- vbuz1=_inc_vbuz2 
    ldy.z j_1
    iny
    sty.z j
    // [8] *((const nomodify byte*) SCREEN + (byte) main::j#1) ← (byte) main::to_y#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z to_y
    ldy.z j
    sta SCREEN,y
    // [9] (byte) main::j#2 ← ++ (byte) main::j#1 -- vbuz1=_inc_vbuz2 
    ldy.z j
    iny
    sty.z j_1
    // [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [11] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // File Data
  // True type letter c
  letter_c: .byte MOVE_TO, 'a', 'b', 0, 0, SPLINE_TO, 'c', 'd', $67, $a9, SPLINE_TO, 'e', 'f', $4b, $c3

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 2 [ main::i#2 main::j#3 main::$2 ] (  [ main::i#2 main::j#3 main::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::j#3 main::j#2 ]
Statement [3] (byte~) main::$1 ← (byte~) main::$2 + (byte) main::i#2 [ main::i#2 main::j#3 main::$1 ] (  [ main::i#2 main::j#3 main::$1 ] { }  ) always clobbers reg byte a 
Statement [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 2 [ main::i#2 main::j#3 main::$2 ] (  [ main::i#2 main::j#3 main::$2 ] { }  ) always clobbers reg byte a 
Statement [3] (byte~) main::$1 ← (byte~) main::$2 + (byte) main::i#2 [ main::i#2 main::j#3 main::$1 ] (  [ main::i#2 main::j#3 main::$1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::j#3 main::j#2 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$2 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::to_x#0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::to_y#0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::j#1 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22: zp[1]:4 [ main::$2 ] 21.39: zp[1]:2 [ main::i#2 main::i#1 ] 16.5: zp[1]:5 [ main::$1 ] 16.5: zp[1]:8 [ main::j#1 ] 12.83: zp[1]:3 [ main::j#3 main::j#2 ] 11: zp[1]:6 [ main::to_x#0 ] 7.33: zp[1]:7 [ main::to_y#0 ] 
Uplift Scope [SplineVector16] 
Uplift Scope [Segment] 
Uplift Scope [Segment::SegmentType] 
Uplift Scope [] 

Uplifting [main] best 921 combination reg byte a [ main::$2 ] reg byte x [ main::i#2 main::i#1 ] reg byte y [ main::$1 ] zp[1]:8 [ main::j#1 ] zp[1]:3 [ main::j#3 main::j#2 ] zp[1]:6 [ main::to_x#0 ] zp[1]:7 [ main::to_y#0 ] 
Limited combination testing to 100 combinations of 9216 possible.
Uplifting [SplineVector16] best 921 combination 
Uplifting [Segment] best 921 combination 
Uplifting [Segment::SegmentType] best 921 combination 
Uplifting [] best 921 combination 
Attempting to uplift remaining variables inzp[1]:8 [ main::j#1 ]
Uplifting [main] best 831 combination reg byte y [ main::j#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::j#3 main::j#2 ]
Uplifting [main] best 831 combination zp[1]:3 [ main::j#3 main::j#2 ] 
Attempting to uplift remaining variables inzp[1]:6 [ main::to_x#0 ]
Uplifting [main] best 831 combination zp[1]:6 [ main::to_x#0 ] 
Attempting to uplift remaining variables inzp[1]:7 [ main::to_y#0 ]
Uplifting [main] best 831 combination zp[1]:7 [ main::to_y#0 ] 
Allocated (was zp[1]:3) zp[1]:2 [ main::j#3 main::j#2 ]
Allocated (was zp[1]:6) zp[1]:3 [ main::to_x#0 ]
Allocated (was zp[1]:7) zp[1]:4 [ main::to_y#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Complex C-struct - copying a sub-struct from C-standard layout to Unwound layout
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const MOVE_TO = 0
  .const SPLINE_TO = 1
  .const OFFSET_STRUCT_SEGMENT_TO = 1
  .const OFFSET_STRUCT_SPLINEVECTOR16_Y = 1
  .label SCREEN = $400
  // main
main: {
    .label to_x = 3
    .label to_y = 4
    .label j = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::j#3 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::j#3 = (byte) main::j#2 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [3] (byte~) main::$1 ← (byte~) main::$2 + (byte) main::i#2 -- vbuyy=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    tay
    // [4] (byte) main::to_x#0 ← *((byte*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO + (byte~) main::$1) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO,y
    sta.z to_x
    // [5] (byte) main::to_y#0 ← *((byte*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) main::$1) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z to_y
    // [6] *((const nomodify byte*) SCREEN + (byte) main::j#3) ← (byte) main::to_x#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z to_x
    ldy.z j
    sta SCREEN,y
    // [7] (byte) main::j#1 ← ++ (byte) main::j#3 -- vbuyy=_inc_vbuz1 
    ldy.z j
    iny
    // [8] *((const nomodify byte*) SCREEN + (byte) main::j#1) ← (byte) main::to_y#0 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z to_y
    sta SCREEN,y
    // [9] (byte) main::j#2 ← ++ (byte) main::j#1 -- vbuz1=_inc_vbuyy 
    iny
    sty.z j
    // [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [11] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // File Data
  // True type letter c
  letter_c: .byte MOVE_TO, 'a', 'b', 0, 0, SPLINE_TO, 'c', 'd', $67, $a9, SPLINE_TO, 'e', 'f', $4b, $c3

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Removing instruction ldy.z j
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const byte) MOVE_TO = (byte) 0
(const byte) OFFSET_STRUCT_SEGMENT_TO = (byte) 1
(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y = (byte) 1
(const nomodify byte*) SCREEN = (byte*) 1024
(const byte) SPLINE_TO = (byte) 1
(const byte) Segment::SegmentType::LINE_TO = (byte) 2
(const byte) Segment::SegmentType::MOVE_TO = (byte) 0
(const byte) Segment::SegmentType::SPLINE_TO = (byte) 1
(struct SplineVector16) Segment::to
(byte) Segment::type
(struct SplineVector16) Segment::via
(byte) SplineVector16::x
(byte) SplineVector16::y
(const struct Segment*) letter_c[]  = { { type: (const byte) MOVE_TO, to: { x: (byte) 'a', y: (byte) 'b' }, via: { x: (byte) 0, y: (byte) 0 } }, { type: (const byte) SPLINE_TO, to: { x: (byte) 'c', y: (byte) 'd' }, via: { x: (byte) $67, y: (byte) $a9 } }, { type: (const byte) SPLINE_TO, to: { x: (byte) 'e', y: (byte) 'f' }, via: { x: (byte) $4b, y: (byte) $c3 } } }
(void()) main()
(byte~) main::$1 reg byte y 16.5
(byte~) main::$2 reg byte a 22.0
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 4.888888888888889
(byte) main::j
(byte) main::j#1 reg byte y 16.5
(byte) main::j#2 j zp[1]:2 7.333333333333333
(byte) main::j#3 j zp[1]:2 5.5
(byte) main::to_x
(byte) main::to_x#0 to_x zp[1]:3 11.0
(byte) main::to_y
(byte) main::to_y#0 to_y zp[1]:4 7.333333333333333

reg byte x [ main::i#2 main::i#1 ]
zp[1]:2 [ main::j#3 main::j#2 ]
reg byte a [ main::$2 ]
reg byte y [ main::$1 ]
zp[1]:3 [ main::to_x#0 ]
zp[1]:4 [ main::to_y#0 ]
reg byte y [ main::j#1 ]


FINAL ASSEMBLER
Score: 711

  // File Comments
// Complex C-struct - copying a sub-struct from C-standard layout to Unwound layout
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const MOVE_TO = 0
  .const SPLINE_TO = 1
  .const OFFSET_STRUCT_SEGMENT_TO = 1
  .const OFFSET_STRUCT_SPLINEVECTOR16_Y = 1
  .label SCREEN = $400
  // main
main: {
    .label to_x = 3
    .label to_y = 4
    .label j = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::j#3 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    tax
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi (byte) main::j#3 = (byte) main::j#2 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // to = letter_c[i].to
    // [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [3] (byte~) main::$1 ← (byte~) main::$2 + (byte) main::i#2 -- vbuyy=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    tay
    // [4] (byte) main::to_x#0 ← *((byte*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO + (byte~) main::$1) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO,y
    sta.z to_x
    // [5] (byte) main::to_y#0 ← *((byte*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) main::$1) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z to_y
    // SCREEN[j++] = to.x
    // [6] *((const nomodify byte*) SCREEN + (byte) main::j#3) ← (byte) main::to_x#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z to_x
    ldy.z j
    sta SCREEN,y
    // SCREEN[j++] = to.x;
    // [7] (byte) main::j#1 ← ++ (byte) main::j#3 -- vbuyy=_inc_vbuz1 
    iny
    // SCREEN[j++] = to.y
    // [8] *((const nomodify byte*) SCREEN + (byte) main::j#1) ← (byte) main::to_y#0 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z to_y
    sta SCREEN,y
    // SCREEN[j++] = to.y;
    // [9] (byte) main::j#2 ← ++ (byte) main::j#1 -- vbuz1=_inc_vbuyy 
    iny
    sty.z j
    // for( byte i: 0..2)
    // [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [11] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne __b1
    // main::@return
    // }
    // [12] return 
    rts
}
  // File Data
  // True type letter c
  letter_c: .byte MOVE_TO, 'a', 'b', 0, 0, SPLINE_TO, 'c', 'd', $67, $a9, SPLINE_TO, 'e', 'f', $4b, $c3

