Resolved forward reference mulf_sqr1 to (const byte*) mulf_sqr1
Resolved forward reference mulf_sqr2 to (const byte*) mulf_sqr2
Resolved forward reference rotation_matrix to (const signed byte*) rotation_matrix
Resolved forward reference rotation_matrix to (const signed byte*) rotation_matrix
Resolved forward reference rotation_matrix to (const signed byte*) rotation_matrix
Resolved forward reference rotation_matrix to (const signed byte*) rotation_matrix
Resolved forward reference rotation_matrix to (const signed byte*) rotation_matrix
Resolved forward reference rotation_matrix to (const signed byte*) rotation_matrix
Resolved forward reference rotation_matrix to (const signed byte*) rotation_matrix
Resolved forward reference rotation_matrix to (const signed byte*) rotation_matrix
Resolved forward reference rotation_matrix to (const signed byte*) rotation_matrix
Resolved forward reference SPRITE to (const byte*) SPRITE
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference SINH to (const signed byte*) SINH
Resolved forward reference SINH to (const signed byte*) SINH
Resolved forward reference SINH to (const signed byte*) SINH
Resolved forward reference SINH to (const signed byte*) SINH
Resolved forward reference SINH to (const signed byte*) SINH
Resolved forward reference SINH to (const signed byte*) SINH
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference SINQ to (const signed byte*) SINQ
Resolved forward reference SINQ to (const signed byte*) SINQ
Resolved forward reference SINQ to (const signed byte*) SINQ
Resolved forward reference SINQ to (const signed byte*) SINQ
Resolved forward reference SINH to (const signed byte*) SINH
Resolved forward reference SINH to (const signed byte*) SINH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference SINQ to (const signed byte*) SINQ
Resolved forward reference SINQ to (const signed byte*) SINQ
Resolved forward reference SINQ to (const signed byte*) SINQ
Resolved forward reference SINQ to (const signed byte*) SINQ
Resolved forward reference SINH to (const signed byte*) SINH
Resolved forward reference SINH to (const signed byte*) SINH
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference SINH_HI to (const byte*) SINH_HI
Resolved forward reference SINH_LO to (const byte*) SINH_LO
Resolved forward reference SINH_HI to (const byte*) SINH_HI
Resolved forward reference SINH_LO to (const byte*) SINH_LO
Resolved forward reference SINH_HI to (const byte*) SINH_HI
Resolved forward reference SINH_LO to (const byte*) SINH_LO
Resolved forward reference SINH_HI to (const byte*) SINH_HI
Resolved forward reference SINH_LO to (const byte*) SINH_LO
Resolved forward reference SINH_HI to (const byte*) SINH_HI
Resolved forward reference SINH_LO to (const byte*) SINH_LO
Resolved forward reference COSQ_HI to (byte*) COSQ_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSQ_HI to (byte*) COSQ_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSQ_HI to (byte*) COSQ_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSQ_HI to (byte*) COSQ_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference SINQ_HI to (const byte*) SINQ_HI
Resolved forward reference SINH_LO to (const byte*) SINH_LO
Resolved forward reference SINQ_HI to (const byte*) SINQ_HI
Resolved forward reference SINH_LO to (const byte*) SINH_LO
Resolved forward reference SINQ_HI to (const byte*) SINQ_HI
Resolved forward reference SINH_LO to (const byte*) SINH_LO
Resolved forward reference SINQ_HI to (const byte*) SINQ_HI
Resolved forward reference SINH_LO to (const byte*) SINH_LO
Resolved forward reference SINH_HI to (const byte*) SINH_HI
Resolved forward reference SINH_LO to (const byte*) SINH_LO
Resolved forward reference SINH_HI to (const byte*) SINH_HI
Resolved forward reference SINH_LO to (const byte*) SINH_LO
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference mulf_sqr1 to (const byte*) mulf_sqr1
Resolved forward reference mulf_sqr2 to (const byte*) mulf_sqr2
Resolved forward reference PERSP_Z to (const signed byte*) PERSP_Z
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call print_schar_pos (signed byte) sx (number) 0 (number) $25 
Inlined call call print_schar_pos (signed byte) sy (number) 1 (number) $25 
Inlined call call print_schar_pos (const signed byte) sz (number) 2 (number) $25 
Inlined call call print_schar_pos *((const signed byte*) rotation_matrix + (number) 0) (number) 4 (number) $1d 
Inlined call call print_schar_pos *((const signed byte*) rotation_matrix + (number) 1) (number) 4 (number) $21 
Inlined call call print_schar_pos *((const signed byte*) rotation_matrix + (number) 2) (number) 4 (number) $25 
Inlined call call print_schar_pos *((const signed byte*) rotation_matrix + (number) 3) (number) 5 (number) $1d 
Inlined call call print_schar_pos *((const signed byte*) rotation_matrix + (number) 4) (number) 5 (number) $21 
Inlined call call print_schar_pos *((const signed byte*) rotation_matrix + (number) 5) (number) 5 (number) $25 
Inlined call call print_schar_pos *((const signed byte*) rotation_matrix + (number) 6) (number) 6 (number) $1d 
Inlined call call print_schar_pos *((const signed byte*) rotation_matrix + (number) 7) (number) 6 (number) $21 
Inlined call call print_schar_pos *((const signed byte*) rotation_matrix + (number) 8) (number) 6 (number) $25 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@3/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#5 ← phi( memset::@3/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@3/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return

(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
print_str_at: scope:[print_str_at]  from debug_print_init::@10 debug_print_init::@11 debug_print_init::@12 debug_print_init::@13 debug_print_init::@14 debug_print_init::@15 debug_print_init::@4 debug_print_init::@5 debug_print_init::@6 debug_print_init::@7 debug_print_init::@8 debug_print_init::@9
  (byte*) print_str_at::at#15 ← phi( debug_print_init::@10/(byte*) print_str_at::at#7 debug_print_init::@11/(byte*) print_str_at::at#8 debug_print_init::@12/(byte*) print_str_at::at#9 debug_print_init::@13/(byte*) print_str_at::at#10 debug_print_init::@14/(byte*) print_str_at::at#11 debug_print_init::@15/(byte*) print_str_at::at#12 debug_print_init::@4/(byte*) print_str_at::at#1 debug_print_init::@5/(byte*) print_str_at::at#2 debug_print_init::@6/(byte*) print_str_at::at#3 debug_print_init::@7/(byte*) print_str_at::at#4 debug_print_init::@8/(byte*) print_str_at::at#5 debug_print_init::@9/(byte*) print_str_at::at#6 )
  (byte*) print_str_at::str#15 ← phi( debug_print_init::@10/(byte*) print_str_at::str#7 debug_print_init::@11/(byte*) print_str_at::str#8 debug_print_init::@12/(byte*) print_str_at::str#9 debug_print_init::@13/(byte*) print_str_at::str#10 debug_print_init::@14/(byte*) print_str_at::str#11 debug_print_init::@15/(byte*) print_str_at::str#12 debug_print_init::@4/(byte*) print_str_at::str#1 debug_print_init::@5/(byte*) print_str_at::str#2 debug_print_init::@6/(byte*) print_str_at::str#3 debug_print_init::@7/(byte*) print_str_at::str#4 debug_print_init::@8/(byte*) print_str_at::str#5 debug_print_init::@9/(byte*) print_str_at::str#6 )
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  (byte*) print_str_at::at#14 ← phi( print_str_at/(byte*) print_str_at::at#15 print_str_at::@2/(byte*) print_str_at::at#0 )
  (byte*) print_str_at::str#13 ← phi( print_str_at/(byte*) print_str_at::str#15 print_str_at::@2/(byte*) print_str_at::str#0 )
  (bool~) print_str_at::$0 ← (number) 0 != *((byte*) print_str_at::str#13)
  if((bool~) print_str_at::$0) goto print_str_at::@2
  to:print_str_at::@return
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1
  (byte*) print_str_at::at#13 ← phi( print_str_at::@1/(byte*) print_str_at::at#14 )
  (byte*) print_str_at::str#14 ← phi( print_str_at::@1/(byte*) print_str_at::str#13 )
  *((byte*) print_str_at::at#13) ← *((byte*) print_str_at::str#14)
  (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#13
  (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#14
  to:print_str_at::@1
print_str_at::@return: scope:[print_str_at]  from print_str_at::@1
  return 
  to:@return

(void()) print_schar_at((signed byte) print_schar_at::b , (byte*) print_schar_at::at)
print_schar_at: scope:[print_schar_at]  from debug_print::@1 debug_print::@26 debug_print::@27 debug_print::@28 debug_print::@29 debug_print::@30 debug_print::print_schar_pos1 debug_print::print_schar_pos10 debug_print::print_schar_pos11 debug_print::print_schar_pos12 debug_print::print_schar_pos2 debug_print::print_schar_pos3 debug_print::print_schar_pos4 debug_print::print_schar_pos5 debug_print::print_schar_pos6 debug_print::print_schar_pos7 debug_print::print_schar_pos8 debug_print::print_schar_pos9 debug_print_init::@1 debug_print_init::@17 debug_print_init::@18
  (byte*) print_schar_at::at#24 ← phi( debug_print::@1/(byte*) print_schar_at::at#15 debug_print::@26/(byte*) print_schar_at::at#16 debug_print::@27/(byte*) print_schar_at::at#17 debug_print::@28/(byte*) print_schar_at::at#18 debug_print::@29/(byte*) print_schar_at::at#19 debug_print::@30/(byte*) print_schar_at::at#20 debug_print::print_schar_pos1/(byte*) print_schar_at::at#3 debug_print::print_schar_pos10/(byte*) print_schar_at::at#12 debug_print::print_schar_pos11/(byte*) print_schar_at::at#13 debug_print::print_schar_pos12/(byte*) print_schar_at::at#14 debug_print::print_schar_pos2/(byte*) print_schar_at::at#4 debug_print::print_schar_pos3/(byte*) print_schar_at::at#5 debug_print::print_schar_pos4/(byte*) print_schar_at::at#6 debug_print::print_schar_pos5/(byte*) print_schar_at::at#7 debug_print::print_schar_pos6/(byte*) print_schar_at::at#8 debug_print::print_schar_pos7/(byte*) print_schar_at::at#9 debug_print::print_schar_pos8/(byte*) print_schar_at::at#10 debug_print::print_schar_pos9/(byte*) print_schar_at::at#11 debug_print_init::@1/(byte*) print_schar_at::at#0 debug_print_init::@17/(byte*) print_schar_at::at#1 debug_print_init::@18/(byte*) print_schar_at::at#2 )
  (signed byte) print_schar_at::b#22 ← phi( debug_print::@1/(signed byte) print_schar_at::b#16 debug_print::@26/(signed byte) print_schar_at::b#17 debug_print::@27/(signed byte) print_schar_at::b#18 debug_print::@28/(signed byte) print_schar_at::b#19 debug_print::@29/(signed byte) print_schar_at::b#20 debug_print::@30/(signed byte) print_schar_at::b#21 debug_print::print_schar_pos1/(signed byte) print_schar_at::b#4 debug_print::print_schar_pos10/(signed byte) print_schar_at::b#13 debug_print::print_schar_pos11/(signed byte) print_schar_at::b#14 debug_print::print_schar_pos12/(signed byte) print_schar_at::b#15 debug_print::print_schar_pos2/(signed byte) print_schar_at::b#5 debug_print::print_schar_pos3/(signed byte) print_schar_at::b#6 debug_print::print_schar_pos4/(signed byte) print_schar_at::b#7 debug_print::print_schar_pos5/(signed byte) print_schar_at::b#8 debug_print::print_schar_pos6/(signed byte) print_schar_at::b#9 debug_print::print_schar_pos7/(signed byte) print_schar_at::b#10 debug_print::print_schar_pos8/(signed byte) print_schar_at::b#11 debug_print::print_schar_pos9/(signed byte) print_schar_at::b#12 debug_print_init::@1/(signed byte) print_schar_at::b#1 debug_print_init::@17/(signed byte) print_schar_at::b#2 debug_print_init::@18/(signed byte) print_schar_at::b#3 )
  (bool~) print_schar_at::$0 ← (signed byte) print_schar_at::b#22 < (number) 0
  if((bool~) print_schar_at::$0) goto print_schar_at::@1
  to:print_schar_at::@3
print_schar_at::@1: scope:[print_schar_at]  from print_schar_at
  (signed byte) print_schar_at::b#25 ← phi( print_schar_at/(signed byte) print_schar_at::b#22 )
  (byte*) print_schar_at::at#21 ← phi( print_schar_at/(byte*) print_schar_at::at#24 )
  (byte) print_char_at::ch#0 ← (byte) '-'
  (byte*) print_char_at::at#0 ← (byte*) print_schar_at::at#21
  call print_char_at 
  to:print_schar_at::@4
print_schar_at::@4: scope:[print_schar_at]  from print_schar_at::@1
  (byte*) print_schar_at::at#25 ← phi( print_schar_at::@1/(byte*) print_schar_at::at#21 )
  (signed byte) print_schar_at::b#23 ← phi( print_schar_at::@1/(signed byte) print_schar_at::b#25 )
  (signed byte~) print_schar_at::$5 ← - (signed byte) print_schar_at::b#23
  (signed byte) print_schar_at::b#0 ← (signed byte~) print_schar_at::$5
  to:print_schar_at::@2
print_schar_at::@3: scope:[print_schar_at]  from print_schar_at
  (signed byte) print_schar_at::b#27 ← phi( print_schar_at/(signed byte) print_schar_at::b#22 )
  (byte*) print_schar_at::at#22 ← phi( print_schar_at/(byte*) print_schar_at::at#24 )
  (byte) print_char_at::ch#1 ← (byte) ' '
  (byte*) print_char_at::at#1 ← (byte*) print_schar_at::at#22
  call print_char_at 
  to:print_schar_at::@5
print_schar_at::@5: scope:[print_schar_at]  from print_schar_at::@3
  (signed byte) print_schar_at::b#26 ← phi( print_schar_at::@3/(signed byte) print_schar_at::b#27 )
  (byte*) print_schar_at::at#26 ← phi( print_schar_at::@3/(byte*) print_schar_at::at#22 )
  to:print_schar_at::@2
print_schar_at::@2: scope:[print_schar_at]  from print_schar_at::@4 print_schar_at::@5
  (signed byte) print_schar_at::b#24 ← phi( print_schar_at::@4/(signed byte) print_schar_at::b#0 print_schar_at::@5/(signed byte) print_schar_at::b#26 )
  (byte*) print_schar_at::at#23 ← phi( print_schar_at::@4/(byte*) print_schar_at::at#25 print_schar_at::@5/(byte*) print_schar_at::at#26 )
  (byte*~) print_schar_at::$1 ← (byte*) print_schar_at::at#23 + (number) 1
  (byte) print_uchar_at::b#0 ← (byte)(signed byte) print_schar_at::b#24
  (byte*) print_uchar_at::at#0 ← (byte*~) print_schar_at::$1
  call print_uchar_at 
  to:print_schar_at::@6
print_schar_at::@6: scope:[print_schar_at]  from print_schar_at::@2
  to:print_schar_at::@return
print_schar_at::@return: scope:[print_schar_at]  from print_schar_at::@6
  return 
  to:@return

(void()) print_uchar_at((byte) print_uchar_at::b , (byte*) print_uchar_at::at)
print_uchar_at: scope:[print_uchar_at]  from print_schar_at::@2
  (byte*) print_uchar_at::at#1 ← phi( print_schar_at::@2/(byte*) print_uchar_at::at#0 )
  (byte) print_uchar_at::b#1 ← phi( print_schar_at::@2/(byte) print_uchar_at::b#0 )
  (byte~) print_uchar_at::$0 ← (byte) print_uchar_at::b#1 >> (number) 4
  (byte) print_char_at::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$0)
  (byte*) print_char_at::at#2 ← (byte*) print_uchar_at::at#1
  call print_char_at 
  to:print_uchar_at::@1
print_uchar_at::@1: scope:[print_uchar_at]  from print_uchar_at
  (byte*) print_uchar_at::at#2 ← phi( print_uchar_at/(byte*) print_uchar_at::at#1 )
  (byte) print_uchar_at::b#2 ← phi( print_uchar_at/(byte) print_uchar_at::b#1 )
  (number~) print_uchar_at::$2 ← (byte) print_uchar_at::b#2 & (number) $f
  (byte*~) print_uchar_at::$3 ← (byte*) print_uchar_at::at#2 + (number) 1
  (byte) print_char_at::ch#3 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar_at::$2)
  (byte*) print_char_at::at#3 ← (byte*~) print_uchar_at::$3
  call print_char_at 
  to:print_uchar_at::@2
print_uchar_at::@2: scope:[print_uchar_at]  from print_uchar_at::@1
  to:print_uchar_at::@return
print_uchar_at::@return: scope:[print_uchar_at]  from print_uchar_at::@2
  return 
  to:@return

(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
print_char_at: scope:[print_char_at]  from print_schar_at::@1 print_schar_at::@3 print_uchar_at print_uchar_at::@1
  (byte*) print_char_at::at#4 ← phi( print_schar_at::@1/(byte*) print_char_at::at#0 print_schar_at::@3/(byte*) print_char_at::at#1 print_uchar_at/(byte*) print_char_at::at#2 print_uchar_at::@1/(byte*) print_char_at::at#3 )
  (byte) print_char_at::ch#4 ← phi( print_schar_at::@1/(byte) print_char_at::ch#0 print_schar_at::@3/(byte) print_char_at::ch#1 print_uchar_at/(byte) print_char_at::ch#2 print_uchar_at::@1/(byte) print_char_at::ch#3 )
  *((byte*) print_char_at::at#4) ← (byte) print_char_at::ch#4
  to:print_char_at::@return
print_char_at::@return: scope:[print_char_at]  from print_char_at
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from debug_print_init
  (byte*) print_screen#2 ← phi( debug_print_init/(byte*) print_screen#16 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#2
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  (byte*) print_screen#44 ← phi( __start::@1/(byte*) print_screen#43 )
  (signed byte) sy#26 ← phi( __start::@1/(signed byte) sy#20 )
  (signed byte) sx#24 ← phi( __start::@1/(signed byte) sx#19 )
  asm { sei  }
  call sprites_init 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_screen#30 ← phi( main/(byte*) print_screen#44 )
  (signed byte) sy#21 ← phi( main/(signed byte) sy#26 )
  (signed byte) sx#20 ← phi( main/(signed byte) sx#24 )
  *((const word*) psp1) ← (word)(const byte*) mulf_sqr1
  *((const word*) psp2) ← (word)(const byte*) mulf_sqr2
  call debug_print_init 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_screen#56 ← phi( main::@1/(byte*) print_screen#30 )
  (signed byte) sy#15 ← phi( main::@1/(signed byte) sy#21 )
  (signed byte) sx#15 ← phi( main::@1/(signed byte) sx#20 )
  call anim 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (signed byte) sy#7 ← phi( main::@2/(signed byte) sy#3 )
  (signed byte) sx#7 ← phi( main::@2/(signed byte) sx#3 )
  (signed byte) sx#0 ← (signed byte) sx#7
  (signed byte) sy#0 ← (signed byte) sy#7
  to:main::@return
main::@return: scope:[main]  from main::@3
  (signed byte) sy#8 ← phi( main::@3/(signed byte) sy#0 )
  (signed byte) sx#8 ← phi( main::@3/(signed byte) sx#0 )
  (signed byte) sx#1 ← (signed byte) sx#8
  (signed byte) sy#1 ← (signed byte) sy#8
  return 
  to:@return

(void()) anim()
anim: scope:[anim]  from main::@2
  (byte*) print_screen#54 ← phi( main::@2/(byte*) print_screen#56 )
  (signed byte) sy#22 ← phi( main::@2/(signed byte) sy#15 )
  (signed byte) sx#21 ← phi( main::@2/(signed byte) sx#15 )
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@11
  (byte*) print_screen#53 ← phi( anim/(byte*) print_screen#54 anim::@11/(byte*) print_screen#55 )
  (signed byte) sy#18 ← phi( anim/(signed byte) sy#22 anim::@11/(signed byte) sy#2 )
  (signed byte) sx#18 ← phi( anim/(signed byte) sx#21 anim::@11/(signed byte) sx#2 )
  if(true) goto anim::@2
  to:anim::@return
anim::@2: scope:[anim]  from anim::@1 anim::@2
  (byte*) print_screen#52 ← phi( anim::@1/(byte*) print_screen#53 anim::@2/(byte*) print_screen#52 )
  (signed byte) sy#27 ← phi( anim::@1/(signed byte) sy#18 anim::@2/(signed byte) sy#27 )
  (signed byte) sx#25 ← phi( anim::@1/(signed byte) sx#18 anim::@2/(signed byte) sx#25 )
  (bool~) anim::$0 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) != (number) $ff
  if((bool~) anim::$0) goto anim::@2
  to:anim::@3
anim::@3: scope:[anim]  from anim::@2 anim::@3
  (byte*) print_screen#51 ← phi( anim::@2/(byte*) print_screen#52 anim::@3/(byte*) print_screen#51 )
  (signed byte) sy#23 ← phi( anim::@2/(signed byte) sy#27 anim::@3/(signed byte) sy#23 )
  (signed byte) sx#22 ← phi( anim::@2/(signed byte) sx#25 anim::@3/(signed byte) sx#22 )
  (bool~) anim::$1 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) != (number) $fe
  if((bool~) anim::$1) goto anim::@3
  to:anim::@4
anim::@4: scope:[anim]  from anim::@3 anim::@4
  (byte*) print_screen#50 ← phi( anim::@3/(byte*) print_screen#51 anim::@4/(byte*) print_screen#50 )
  (signed byte) sy#16 ← phi( anim::@3/(signed byte) sy#23 anim::@4/(signed byte) sy#16 )
  (signed byte) sx#16 ← phi( anim::@3/(signed byte) sx#22 anim::@4/(signed byte) sx#16 )
  (bool~) anim::$2 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) != (number) $fd
  if((bool~) anim::$2) goto anim::@4
  to:anim::@5
anim::@5: scope:[anim]  from anim::@4
  (byte*) print_screen#49 ← phi( anim::@4/(byte*) print_screen#50 )
  (signed byte) sy#9 ← phi( anim::@4/(signed byte) sy#16 )
  (signed byte) sx#9 ← phi( anim::@4/(signed byte) sx#16 )
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  (signed byte) calculate_matrix::sx#0 ← (signed byte) sx#9
  (signed byte) calculate_matrix::sy#0 ← (signed byte) sy#9
  (signed byte) calculate_matrix::sz#0 ← (const signed byte) sz
  call calculate_matrix 
  to:anim::@8
anim::@8: scope:[anim]  from anim::@5
  (byte*) print_screen#48 ← phi( anim::@5/(byte*) print_screen#49 )
  (signed byte) sy#31 ← phi( anim::@5/(signed byte) sy#9 )
  (signed byte) sx#28 ← phi( anim::@5/(signed byte) sx#9 )
  call store_matrix 
  to:anim::@9
anim::@9: scope:[anim]  from anim::@8
  (byte*) print_screen#47 ← phi( anim::@8/(byte*) print_screen#48 )
  (signed byte) sy#30 ← phi( anim::@8/(signed byte) sy#31 )
  (signed byte) sx#27 ← phi( anim::@8/(signed byte) sx#28 )
  (byte) anim::i#0 ← (byte) 0
  to:anim::@6
anim::@6: scope:[anim]  from anim::@10 anim::@9
  (byte*) print_screen#46 ← phi( anim::@10/(byte*) print_screen#45 anim::@9/(byte*) print_screen#47 )
  (signed byte) sy#28 ← phi( anim::@10/(signed byte) sy#24 anim::@9/(signed byte) sy#30 )
  (signed byte) sx#26 ← phi( anim::@10/(signed byte) sx#23 anim::@9/(signed byte) sx#27 )
  (byte) anim::i#2 ← phi( anim::@10/(byte) anim::i#1 anim::@9/(byte) anim::i#0 )
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  (signed byte) rotate_matrix::x#0 ← *((const signed byte*) xs + (byte) anim::i#2)
  (signed byte) rotate_matrix::y#0 ← *((const signed byte*) ys + (byte) anim::i#2)
  (signed byte) rotate_matrix::z#0 ← *((const signed byte*) zs + (byte) anim::i#2)
  call rotate_matrix 
  to:anim::@10
anim::@10: scope:[anim]  from anim::@6
  (byte*) print_screen#45 ← phi( anim::@6/(byte*) print_screen#46 )
  (signed byte) sy#24 ← phi( anim::@6/(signed byte) sy#28 )
  (signed byte) sx#23 ← phi( anim::@6/(signed byte) sx#26 )
  (byte) anim::i#3 ← phi( anim::@6/(byte) anim::i#2 )
  *((const signed byte*) xrs + (byte) anim::i#3) ← *((const signed byte*) xr)
  *((const signed byte*) yrs + (byte) anim::i#3) ← *((const signed byte*) yr)
  *((const signed byte*) zrs + (byte) anim::i#3) ← *((const signed byte*) zr)
  *((const signed byte*) pps + (byte) anim::i#3) ← *((const signed byte*) pp)
  *((const signed byte*) xps + (byte) anim::i#3) ← *((const signed byte*) xp)
  *((const signed byte*) yps + (byte) anim::i#3) ← *((const signed byte*) yp)
  (number~) anim::$8 ← (byte) anim::i#3 * (number) 2
  (byte) anim::i2#0 ← (number~) anim::$8
  (byte~) anim::$13 ← (byte)*((const signed byte*) xp)
  (number~) anim::$9 ← (number) $80 + (byte~) anim::$13
  *((const nomodify byte*) SPRITES_XPOS + (byte) anim::i2#0) ← (number~) anim::$9
  (byte~) anim::$14 ← (byte)*((const signed byte*) yp)
  (number~) anim::$10 ← (number) $80 + (byte~) anim::$14
  *((const nomodify byte*) SPRITES_YPOS + (byte) anim::i2#0) ← (number~) anim::$10
  (byte) anim::i#1 ← (byte) anim::i#3 + rangenext(0,7)
  (bool~) anim::$11 ← (byte) anim::i#1 != rangelast(0,7)
  if((bool~) anim::$11) goto anim::@6
  to:anim::@7
anim::@7: scope:[anim]  from anim::@10
  (byte*) print_screen#31 ← phi( anim::@10/(byte*) print_screen#45 )
  (signed byte) sy#17 ← phi( anim::@10/(signed byte) sy#24 )
  (signed byte) sx#17 ← phi( anim::@10/(signed byte) sx#23 )
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_GREY
  call debug_print 
  to:anim::@11
anim::@11: scope:[anim]  from anim::@7
  (byte*) print_screen#55 ← phi( anim::@7/(byte*) print_screen#31 )
  (signed byte) sy#10 ← phi( anim::@7/(signed byte) sy#17 )
  (signed byte) sx#10 ← phi( anim::@7/(signed byte) sx#17 )
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_BLUE
  (signed byte) sx#2 ← (signed byte) sx#10 + (number) 2
  (signed byte) sy#2 ← (signed byte) sy#10 - (number) 3
  to:anim::@1
anim::@return: scope:[anim]  from anim::@1
  (signed byte) sy#11 ← phi( anim::@1/(signed byte) sy#18 )
  (signed byte) sx#11 ← phi( anim::@1/(signed byte) sx#18 )
  (signed byte) sx#3 ← (signed byte) sx#11
  (signed byte) sy#3 ← (signed byte) sy#11
  return 
  to:@return

(void()) debug_print_init()
debug_print_init: scope:[debug_print_init]  from main::@1
  (byte*) print_screen#16 ← phi( main::@1/(byte*) print_screen#30 )
  call print_cls 
  to:debug_print_init::@4
debug_print_init::@4: scope:[debug_print_init]  from debug_print_init
  (byte*~) debug_print_init::$1 ← (const byte*) SCREEN + (number) $28*(number) 0
  (byte*~) debug_print_init::$2 ← (byte*~) debug_print_init::$1 + (number) $22
  (byte*) print_str_at::str#1 ← (const byte*) debug_print_init::str
  (byte*) print_str_at::at#1 ← (byte*~) debug_print_init::$2
  call print_str_at 
  to:debug_print_init::@5
debug_print_init::@5: scope:[debug_print_init]  from debug_print_init::@4
  (byte*~) debug_print_init::$4 ← (const byte*) SCREEN + (number) $28*(number) 1
  (byte*~) debug_print_init::$5 ← (byte*~) debug_print_init::$4 + (number) $22
  (byte*) print_str_at::str#2 ← (const byte*) debug_print_init::str1
  (byte*) print_str_at::at#2 ← (byte*~) debug_print_init::$5
  call print_str_at 
  to:debug_print_init::@6
debug_print_init::@6: scope:[debug_print_init]  from debug_print_init::@5
  (byte*~) debug_print_init::$7 ← (const byte*) SCREEN + (number) $28*(number) 2
  (byte*~) debug_print_init::$8 ← (byte*~) debug_print_init::$7 + (number) $22
  (byte*) print_str_at::str#3 ← (const byte*) debug_print_init::str2
  (byte*) print_str_at::at#3 ← (byte*~) debug_print_init::$8
  call print_str_at 
  to:debug_print_init::@7
debug_print_init::@7: scope:[debug_print_init]  from debug_print_init::@6
  (byte*~) debug_print_init::$10 ← (const byte*) SCREEN + (number) $28*(number) $10
  (byte*) print_str_at::str#4 ← (const byte*) debug_print_init::str3
  (byte*) print_str_at::at#4 ← (byte*~) debug_print_init::$10
  call print_str_at 
  to:debug_print_init::@8
debug_print_init::@8: scope:[debug_print_init]  from debug_print_init::@7
  (byte*~) debug_print_init::$12 ← (const byte*) SCREEN + (number) $28*(number) $11
  (byte*) print_str_at::str#5 ← (const byte*) debug_print_init::str4
  (byte*) print_str_at::at#5 ← (byte*~) debug_print_init::$12
  call print_str_at 
  to:debug_print_init::@9
debug_print_init::@9: scope:[debug_print_init]  from debug_print_init::@8
  (byte*~) debug_print_init::$14 ← (const byte*) SCREEN + (number) $28*(number) $12
  (byte*) print_str_at::str#6 ← (const byte*) debug_print_init::str5
  (byte*) print_str_at::at#6 ← (byte*~) debug_print_init::$14
  call print_str_at 
  to:debug_print_init::@10
debug_print_init::@10: scope:[debug_print_init]  from debug_print_init::@9
  (byte*~) debug_print_init::$16 ← (const byte*) SCREEN + (number) $28*(number) $13
  (byte*) print_str_at::str#7 ← (const byte*) debug_print_init::str6
  (byte*) print_str_at::at#7 ← (byte*~) debug_print_init::$16
  call print_str_at 
  to:debug_print_init::@11
debug_print_init::@11: scope:[debug_print_init]  from debug_print_init::@10
  (byte*~) debug_print_init::$18 ← (const byte*) SCREEN + (number) $28*(number) $14
  (byte*) print_str_at::str#8 ← (const byte*) debug_print_init::str7
  (byte*) print_str_at::at#8 ← (byte*~) debug_print_init::$18
  call print_str_at 
  to:debug_print_init::@12
debug_print_init::@12: scope:[debug_print_init]  from debug_print_init::@11
  (byte*~) debug_print_init::$20 ← (const byte*) SCREEN + (number) $28*(number) $15
  (byte*) print_str_at::str#9 ← (const byte*) debug_print_init::str8
  (byte*) print_str_at::at#9 ← (byte*~) debug_print_init::$20
  call print_str_at 
  to:debug_print_init::@13
debug_print_init::@13: scope:[debug_print_init]  from debug_print_init::@12
  (byte*~) debug_print_init::$22 ← (const byte*) SCREEN + (number) $28*(number) $16
  (byte*) print_str_at::str#10 ← (const byte*) debug_print_init::str9
  (byte*) print_str_at::at#10 ← (byte*~) debug_print_init::$22
  call print_str_at 
  to:debug_print_init::@14
debug_print_init::@14: scope:[debug_print_init]  from debug_print_init::@13
  (byte*~) debug_print_init::$24 ← (const byte*) SCREEN + (number) $28*(number) $17
  (byte*) print_str_at::str#11 ← (const byte*) debug_print_init::str10
  (byte*) print_str_at::at#11 ← (byte*~) debug_print_init::$24
  call print_str_at 
  to:debug_print_init::@15
debug_print_init::@15: scope:[debug_print_init]  from debug_print_init::@14
  (byte*~) debug_print_init::$26 ← (const byte*) SCREEN + (number) $28*(number) $18
  (byte*) print_str_at::str#12 ← (const byte*) debug_print_init::str11
  (byte*) print_str_at::at#12 ← (byte*~) debug_print_init::$26
  call print_str_at 
  to:debug_print_init::@16
debug_print_init::@16: scope:[debug_print_init]  from debug_print_init::@15
  (byte*~) debug_print_init::$28 ← (const byte*) SCREEN + (number) $10*(number) $28
  (byte*) debug_print_init::at_line#0 ← (byte*~) debug_print_init::$28
  (byte) debug_print_init::c#0 ← (byte) 4
  (byte*~) debug_print_init::$29 ← (const byte*) debug_print_init::COLS + (number) $10*(number) $28
  (byte*) debug_print_init::at_cols#0 ← (byte*~) debug_print_init::$29
  (byte) debug_print_init::i#0 ← (byte) 0
  to:debug_print_init::@1
debug_print_init::@1: scope:[debug_print_init]  from debug_print_init::@16 debug_print_init::@3
  (byte*) debug_print_init::at_cols#5 ← phi( debug_print_init::@16/(byte*) debug_print_init::at_cols#0 debug_print_init::@3/(byte*) debug_print_init::at_cols#6 )
  (byte) debug_print_init::i#2 ← phi( debug_print_init::@16/(byte) debug_print_init::i#0 debug_print_init::@3/(byte) debug_print_init::i#1 )
  (byte) debug_print_init::c#2 ← phi( debug_print_init::@16/(byte) debug_print_init::c#0 debug_print_init::@3/(byte) debug_print_init::c#1 )
  (byte*) debug_print_init::at_line#1 ← phi( debug_print_init::@16/(byte*) debug_print_init::at_line#0 debug_print_init::@3/(byte*) debug_print_init::at_line#4 )
  (byte*~) debug_print_init::$30 ← (byte*) debug_print_init::at_line#1 + (number) $28*(number) 0
  (byte*~) debug_print_init::$31 ← (byte*~) debug_print_init::$30 + (byte) debug_print_init::c#2
  (signed byte) print_schar_at::b#1 ← *((const signed byte*) xs + (byte) debug_print_init::i#2)
  (byte*) print_schar_at::at#0 ← (byte*~) debug_print_init::$31
  call print_schar_at 
  to:debug_print_init::@17
debug_print_init::@17: scope:[debug_print_init]  from debug_print_init::@1
  (byte*) debug_print_init::at_cols#4 ← phi( debug_print_init::@1/(byte*) debug_print_init::at_cols#5 )
  (byte) debug_print_init::i#3 ← phi( debug_print_init::@1/(byte) debug_print_init::i#2 )
  (byte) debug_print_init::c#3 ← phi( debug_print_init::@1/(byte) debug_print_init::c#2 )
  (byte*) debug_print_init::at_line#2 ← phi( debug_print_init::@1/(byte*) debug_print_init::at_line#1 )
  (byte*~) debug_print_init::$33 ← (byte*) debug_print_init::at_line#2 + (number) $28*(number) 1
  (byte*~) debug_print_init::$34 ← (byte*~) debug_print_init::$33 + (byte) debug_print_init::c#3
  (signed byte) print_schar_at::b#2 ← *((const signed byte*) ys + (byte) debug_print_init::i#3)
  (byte*) print_schar_at::at#1 ← (byte*~) debug_print_init::$34
  call print_schar_at 
  to:debug_print_init::@18
debug_print_init::@18: scope:[debug_print_init]  from debug_print_init::@17
  (byte*) debug_print_init::at_cols#3 ← phi( debug_print_init::@17/(byte*) debug_print_init::at_cols#4 )
  (byte) debug_print_init::i#4 ← phi( debug_print_init::@17/(byte) debug_print_init::i#3 )
  (byte) debug_print_init::c#4 ← phi( debug_print_init::@17/(byte) debug_print_init::c#3 )
  (byte*) debug_print_init::at_line#3 ← phi( debug_print_init::@17/(byte*) debug_print_init::at_line#2 )
  (byte*~) debug_print_init::$36 ← (byte*) debug_print_init::at_line#3 + (number) $28*(number) 2
  (byte*~) debug_print_init::$37 ← (byte*~) debug_print_init::$36 + (byte) debug_print_init::c#4
  (signed byte) print_schar_at::b#3 ← *((const signed byte*) zs + (byte) debug_print_init::i#4)
  (byte*) print_schar_at::at#2 ← (byte*~) debug_print_init::$37
  call print_schar_at 
  to:debug_print_init::@19
debug_print_init::@19: scope:[debug_print_init]  from debug_print_init::@18
  (byte*) debug_print_init::at_line#6 ← phi( debug_print_init::@18/(byte*) debug_print_init::at_line#3 )
  (byte) debug_print_init::c#7 ← phi( debug_print_init::@18/(byte) debug_print_init::c#4 )
  (byte*) debug_print_init::at_cols#2 ← phi( debug_print_init::@18/(byte*) debug_print_init::at_cols#3 )
  (byte) debug_print_init::i#7 ← phi( debug_print_init::@18/(byte) debug_print_init::i#4 )
  (byte) debug_print_init::j#0 ← (byte) 0
  to:debug_print_init::@2
debug_print_init::@2: scope:[debug_print_init]  from debug_print_init::@19 debug_print_init::@2
  (byte*) debug_print_init::at_line#5 ← phi( debug_print_init::@19/(byte*) debug_print_init::at_line#6 debug_print_init::@2/(byte*) debug_print_init::at_line#5 )
  (byte) debug_print_init::j#2 ← phi( debug_print_init::@19/(byte) debug_print_init::j#0 debug_print_init::@2/(byte) debug_print_init::j#1 )
  (byte) debug_print_init::c#5 ← phi( debug_print_init::@19/(byte) debug_print_init::c#7 debug_print_init::@2/(byte) debug_print_init::c#5 )
  (byte*) debug_print_init::at_cols#1 ← phi( debug_print_init::@19/(byte*) debug_print_init::at_cols#2 debug_print_init::@2/(byte*) debug_print_init::at_cols#1 )
  (byte) debug_print_init::i#5 ← phi( debug_print_init::@19/(byte) debug_print_init::i#7 debug_print_init::@2/(byte) debug_print_init::i#5 )
  (number~) debug_print_init::$39 ← (number) 8 + (byte) debug_print_init::i#5
  (byte) debug_print_init::col#0 ← (number~) debug_print_init::$39
  (byte*~) debug_print_init::$40 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 0
  (byte*~) debug_print_init::$41 ← (byte*~) debug_print_init::$40 + (byte) debug_print_init::c#5
  (byte*~) debug_print_init::$42 ← (byte*~) debug_print_init::$41 + (byte) debug_print_init::j#2
  *((byte*~) debug_print_init::$42) ← (byte) debug_print_init::col#0
  (byte*~) debug_print_init::$43 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 1
  (byte*~) debug_print_init::$44 ← (byte*~) debug_print_init::$43 + (byte) debug_print_init::c#5
  (byte*~) debug_print_init::$45 ← (byte*~) debug_print_init::$44 + (byte) debug_print_init::j#2
  *((byte*~) debug_print_init::$45) ← (byte) debug_print_init::col#0
  (byte*~) debug_print_init::$46 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 2
  (byte*~) debug_print_init::$47 ← (byte*~) debug_print_init::$46 + (byte) debug_print_init::c#5
  (byte*~) debug_print_init::$48 ← (byte*~) debug_print_init::$47 + (byte) debug_print_init::j#2
  *((byte*~) debug_print_init::$48) ← (byte) debug_print_init::col#0
  (byte*~) debug_print_init::$49 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 3
  (byte*~) debug_print_init::$50 ← (byte*~) debug_print_init::$49 + (byte) debug_print_init::c#5
  (byte*~) debug_print_init::$51 ← (byte*~) debug_print_init::$50 + (byte) debug_print_init::j#2
  *((byte*~) debug_print_init::$51) ← (byte) debug_print_init::col#0
  (byte*~) debug_print_init::$52 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 4
  (byte*~) debug_print_init::$53 ← (byte*~) debug_print_init::$52 + (byte) debug_print_init::c#5
  (byte*~) debug_print_init::$54 ← (byte*~) debug_print_init::$53 + (byte) debug_print_init::j#2
  *((byte*~) debug_print_init::$54) ← (byte) debug_print_init::col#0
  (byte*~) debug_print_init::$55 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 5
  (byte*~) debug_print_init::$56 ← (byte*~) debug_print_init::$55 + (byte) debug_print_init::c#5
  (byte*~) debug_print_init::$57 ← (byte*~) debug_print_init::$56 + (byte) debug_print_init::j#2
  *((byte*~) debug_print_init::$57) ← (byte) debug_print_init::col#0
  (byte*~) debug_print_init::$58 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 6
  (byte*~) debug_print_init::$59 ← (byte*~) debug_print_init::$58 + (byte) debug_print_init::c#5
  (byte*~) debug_print_init::$60 ← (byte*~) debug_print_init::$59 + (byte) debug_print_init::j#2
  *((byte*~) debug_print_init::$60) ← (byte) debug_print_init::col#0
  (byte*~) debug_print_init::$61 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 7
  (byte*~) debug_print_init::$62 ← (byte*~) debug_print_init::$61 + (byte) debug_print_init::c#5
  (byte*~) debug_print_init::$63 ← (byte*~) debug_print_init::$62 + (byte) debug_print_init::j#2
  *((byte*~) debug_print_init::$63) ← (byte) debug_print_init::col#0
  (byte*~) debug_print_init::$64 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 8
  (byte*~) debug_print_init::$65 ← (byte*~) debug_print_init::$64 + (byte) debug_print_init::c#5
  (byte*~) debug_print_init::$66 ← (byte*~) debug_print_init::$65 + (byte) debug_print_init::j#2
  *((byte*~) debug_print_init::$66) ← (byte) debug_print_init::col#0
  (byte) debug_print_init::j#1 ← (byte) debug_print_init::j#2 + rangenext(0,3)
  (bool~) debug_print_init::$67 ← (byte) debug_print_init::j#1 != rangelast(0,3)
  if((bool~) debug_print_init::$67) goto debug_print_init::@2
  to:debug_print_init::@3
debug_print_init::@3: scope:[debug_print_init]  from debug_print_init::@2
  (byte*) debug_print_init::at_cols#6 ← phi( debug_print_init::@2/(byte*) debug_print_init::at_cols#1 )
  (byte*) debug_print_init::at_line#4 ← phi( debug_print_init::@2/(byte*) debug_print_init::at_line#5 )
  (byte) debug_print_init::i#6 ← phi( debug_print_init::@2/(byte) debug_print_init::i#5 )
  (byte) debug_print_init::c#6 ← phi( debug_print_init::@2/(byte) debug_print_init::c#5 )
  (byte) debug_print_init::c#1 ← (byte) debug_print_init::c#6 + (number) 4
  (byte) debug_print_init::i#1 ← (byte) debug_print_init::i#6 + rangenext(0,7)
  (bool~) debug_print_init::$68 ← (byte) debug_print_init::i#1 != rangelast(0,7)
  if((bool~) debug_print_init::$68) goto debug_print_init::@1
  to:debug_print_init::@return
debug_print_init::@return: scope:[debug_print_init]  from debug_print_init::@3
  return 
  to:@return

(void()) debug_print()
debug_print: scope:[debug_print]  from anim::@7
  (signed byte) sy#29 ← phi( anim::@7/(signed byte) sy#17 )
  (byte*) print_screen#17 ← phi( anim::@7/(byte*) print_screen#31 )
  (signed byte) sx#12 ← phi( anim::@7/(signed byte) sx#17 )
  (signed byte) debug_print::print_schar_pos1_sb#0 ← (signed byte) sx#12
  (byte) debug_print::print_schar_pos1_row#0 ← (number) 0
  (byte) debug_print::print_schar_pos1_col#0 ← (number) $25
  to:debug_print::print_schar_pos1
debug_print::print_schar_pos1: scope:[debug_print]  from debug_print
  (signed byte) sy#25 ← phi( debug_print/(signed byte) sy#29 )
  (signed byte) debug_print::print_schar_pos1_sb#1 ← phi( debug_print/(signed byte) debug_print::print_schar_pos1_sb#0 )
  (byte) debug_print::print_schar_pos1_col#1 ← phi( debug_print/(byte) debug_print::print_schar_pos1_col#0 )
  (byte*) print_screen#3 ← phi( debug_print/(byte*) print_screen#17 )
  (byte) debug_print::print_schar_pos1_row#1 ← phi( debug_print/(byte) debug_print::print_schar_pos1_row#0 )
  (number~) debug_print::print_schar_pos1_$0 ← (byte) debug_print::print_schar_pos1_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos1_$1 ← (byte*) print_screen#3 + (number~) debug_print::print_schar_pos1_$0
  (byte*~) debug_print::print_schar_pos1_$2 ← (byte*~) debug_print::print_schar_pos1_$1 + (byte) debug_print::print_schar_pos1_col#1
  (signed byte) print_schar_at::b#4 ← (signed byte) debug_print::print_schar_pos1_sb#1
  (byte*) print_schar_at::at#3 ← (byte*~) debug_print::print_schar_pos1_$2
  call print_schar_at 
  to:debug_print::@14
debug_print::@14: scope:[debug_print]  from debug_print::print_schar_pos1
  (byte*) print_screen#32 ← phi( debug_print::print_schar_pos1/(byte*) print_screen#3 )
  (signed byte) sy#19 ← phi( debug_print::print_schar_pos1/(signed byte) sy#25 )
  to:debug_print::@2
debug_print::@2: scope:[debug_print]  from debug_print::@14
  (byte*) print_screen#18 ← phi( debug_print::@14/(byte*) print_screen#32 )
  (signed byte) sy#12 ← phi( debug_print::@14/(signed byte) sy#19 )
  (signed byte) debug_print::print_schar_pos2_sb#0 ← (signed byte) sy#12
  (byte) debug_print::print_schar_pos2_row#0 ← (number) 1
  (byte) debug_print::print_schar_pos2_col#0 ← (number) $25
  to:debug_print::print_schar_pos2
debug_print::print_schar_pos2: scope:[debug_print]  from debug_print::@2
  (signed byte) debug_print::print_schar_pos2_sb#1 ← phi( debug_print::@2/(signed byte) debug_print::print_schar_pos2_sb#0 )
  (byte) debug_print::print_schar_pos2_col#1 ← phi( debug_print::@2/(byte) debug_print::print_schar_pos2_col#0 )
  (byte*) print_screen#4 ← phi( debug_print::@2/(byte*) print_screen#18 )
  (byte) debug_print::print_schar_pos2_row#1 ← phi( debug_print::@2/(byte) debug_print::print_schar_pos2_row#0 )
  (number~) debug_print::print_schar_pos2_$0 ← (byte) debug_print::print_schar_pos2_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos2_$1 ← (byte*) print_screen#4 + (number~) debug_print::print_schar_pos2_$0
  (byte*~) debug_print::print_schar_pos2_$2 ← (byte*~) debug_print::print_schar_pos2_$1 + (byte) debug_print::print_schar_pos2_col#1
  (signed byte) print_schar_at::b#5 ← (signed byte) debug_print::print_schar_pos2_sb#1
  (byte*) print_schar_at::at#4 ← (byte*~) debug_print::print_schar_pos2_$2
  call print_schar_at 
  to:debug_print::@15
debug_print::@15: scope:[debug_print]  from debug_print::print_schar_pos2
  (byte*) print_screen#33 ← phi( debug_print::print_schar_pos2/(byte*) print_screen#4 )
  to:debug_print::@3
debug_print::@3: scope:[debug_print]  from debug_print::@15
  (byte*) print_screen#19 ← phi( debug_print::@15/(byte*) print_screen#33 )
  (signed byte) debug_print::print_schar_pos3_sb#0 ← (const signed byte) sz
  (byte) debug_print::print_schar_pos3_row#0 ← (number) 2
  (byte) debug_print::print_schar_pos3_col#0 ← (number) $25
  to:debug_print::print_schar_pos3
debug_print::print_schar_pos3: scope:[debug_print]  from debug_print::@3
  (signed byte) debug_print::print_schar_pos3_sb#1 ← phi( debug_print::@3/(signed byte) debug_print::print_schar_pos3_sb#0 )
  (byte) debug_print::print_schar_pos3_col#1 ← phi( debug_print::@3/(byte) debug_print::print_schar_pos3_col#0 )
  (byte*) print_screen#5 ← phi( debug_print::@3/(byte*) print_screen#19 )
  (byte) debug_print::print_schar_pos3_row#1 ← phi( debug_print::@3/(byte) debug_print::print_schar_pos3_row#0 )
  (number~) debug_print::print_schar_pos3_$0 ← (byte) debug_print::print_schar_pos3_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos3_$1 ← (byte*) print_screen#5 + (number~) debug_print::print_schar_pos3_$0
  (byte*~) debug_print::print_schar_pos3_$2 ← (byte*~) debug_print::print_schar_pos3_$1 + (byte) debug_print::print_schar_pos3_col#1
  (signed byte) print_schar_at::b#6 ← (signed byte) debug_print::print_schar_pos3_sb#1
  (byte*) print_schar_at::at#5 ← (byte*~) debug_print::print_schar_pos3_$2
  call print_schar_at 
  to:debug_print::@16
debug_print::@16: scope:[debug_print]  from debug_print::print_schar_pos3
  (byte*) print_screen#34 ← phi( debug_print::print_schar_pos3/(byte*) print_screen#5 )
  to:debug_print::@4
debug_print::@4: scope:[debug_print]  from debug_print::@16
  (byte*) print_screen#20 ← phi( debug_print::@16/(byte*) print_screen#34 )
  (signed byte) debug_print::print_schar_pos4_sb#0 ← *((const signed byte*) rotation_matrix + (number) 0)
  (byte) debug_print::print_schar_pos4_row#0 ← (number) 4
  (byte) debug_print::print_schar_pos4_col#0 ← (number) $1d
  to:debug_print::print_schar_pos4
debug_print::print_schar_pos4: scope:[debug_print]  from debug_print::@4
  (signed byte) debug_print::print_schar_pos4_sb#1 ← phi( debug_print::@4/(signed byte) debug_print::print_schar_pos4_sb#0 )
  (byte) debug_print::print_schar_pos4_col#1 ← phi( debug_print::@4/(byte) debug_print::print_schar_pos4_col#0 )
  (byte*) print_screen#6 ← phi( debug_print::@4/(byte*) print_screen#20 )
  (byte) debug_print::print_schar_pos4_row#1 ← phi( debug_print::@4/(byte) debug_print::print_schar_pos4_row#0 )
  (number~) debug_print::print_schar_pos4_$0 ← (byte) debug_print::print_schar_pos4_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos4_$1 ← (byte*) print_screen#6 + (number~) debug_print::print_schar_pos4_$0
  (byte*~) debug_print::print_schar_pos4_$2 ← (byte*~) debug_print::print_schar_pos4_$1 + (byte) debug_print::print_schar_pos4_col#1
  (signed byte) print_schar_at::b#7 ← (signed byte) debug_print::print_schar_pos4_sb#1
  (byte*) print_schar_at::at#6 ← (byte*~) debug_print::print_schar_pos4_$2
  call print_schar_at 
  to:debug_print::@17
debug_print::@17: scope:[debug_print]  from debug_print::print_schar_pos4
  (byte*) print_screen#35 ← phi( debug_print::print_schar_pos4/(byte*) print_screen#6 )
  to:debug_print::@5
debug_print::@5: scope:[debug_print]  from debug_print::@17
  (byte*) print_screen#21 ← phi( debug_print::@17/(byte*) print_screen#35 )
  (signed byte) debug_print::print_schar_pos5_sb#0 ← *((const signed byte*) rotation_matrix + (number) 1)
  (byte) debug_print::print_schar_pos5_row#0 ← (number) 4
  (byte) debug_print::print_schar_pos5_col#0 ← (number) $21
  to:debug_print::print_schar_pos5
debug_print::print_schar_pos5: scope:[debug_print]  from debug_print::@5
  (signed byte) debug_print::print_schar_pos5_sb#1 ← phi( debug_print::@5/(signed byte) debug_print::print_schar_pos5_sb#0 )
  (byte) debug_print::print_schar_pos5_col#1 ← phi( debug_print::@5/(byte) debug_print::print_schar_pos5_col#0 )
  (byte*) print_screen#7 ← phi( debug_print::@5/(byte*) print_screen#21 )
  (byte) debug_print::print_schar_pos5_row#1 ← phi( debug_print::@5/(byte) debug_print::print_schar_pos5_row#0 )
  (number~) debug_print::print_schar_pos5_$0 ← (byte) debug_print::print_schar_pos5_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos5_$1 ← (byte*) print_screen#7 + (number~) debug_print::print_schar_pos5_$0
  (byte*~) debug_print::print_schar_pos5_$2 ← (byte*~) debug_print::print_schar_pos5_$1 + (byte) debug_print::print_schar_pos5_col#1
  (signed byte) print_schar_at::b#8 ← (signed byte) debug_print::print_schar_pos5_sb#1
  (byte*) print_schar_at::at#7 ← (byte*~) debug_print::print_schar_pos5_$2
  call print_schar_at 
  to:debug_print::@18
debug_print::@18: scope:[debug_print]  from debug_print::print_schar_pos5
  (byte*) print_screen#36 ← phi( debug_print::print_schar_pos5/(byte*) print_screen#7 )
  to:debug_print::@6
debug_print::@6: scope:[debug_print]  from debug_print::@18
  (byte*) print_screen#22 ← phi( debug_print::@18/(byte*) print_screen#36 )
  (signed byte) debug_print::print_schar_pos6_sb#0 ← *((const signed byte*) rotation_matrix + (number) 2)
  (byte) debug_print::print_schar_pos6_row#0 ← (number) 4
  (byte) debug_print::print_schar_pos6_col#0 ← (number) $25
  to:debug_print::print_schar_pos6
debug_print::print_schar_pos6: scope:[debug_print]  from debug_print::@6
  (signed byte) debug_print::print_schar_pos6_sb#1 ← phi( debug_print::@6/(signed byte) debug_print::print_schar_pos6_sb#0 )
  (byte) debug_print::print_schar_pos6_col#1 ← phi( debug_print::@6/(byte) debug_print::print_schar_pos6_col#0 )
  (byte*) print_screen#8 ← phi( debug_print::@6/(byte*) print_screen#22 )
  (byte) debug_print::print_schar_pos6_row#1 ← phi( debug_print::@6/(byte) debug_print::print_schar_pos6_row#0 )
  (number~) debug_print::print_schar_pos6_$0 ← (byte) debug_print::print_schar_pos6_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos6_$1 ← (byte*) print_screen#8 + (number~) debug_print::print_schar_pos6_$0
  (byte*~) debug_print::print_schar_pos6_$2 ← (byte*~) debug_print::print_schar_pos6_$1 + (byte) debug_print::print_schar_pos6_col#1
  (signed byte) print_schar_at::b#9 ← (signed byte) debug_print::print_schar_pos6_sb#1
  (byte*) print_schar_at::at#8 ← (byte*~) debug_print::print_schar_pos6_$2
  call print_schar_at 
  to:debug_print::@19
debug_print::@19: scope:[debug_print]  from debug_print::print_schar_pos6
  (byte*) print_screen#37 ← phi( debug_print::print_schar_pos6/(byte*) print_screen#8 )
  to:debug_print::@7
debug_print::@7: scope:[debug_print]  from debug_print::@19
  (byte*) print_screen#23 ← phi( debug_print::@19/(byte*) print_screen#37 )
  (signed byte) debug_print::print_schar_pos7_sb#0 ← *((const signed byte*) rotation_matrix + (number) 3)
  (byte) debug_print::print_schar_pos7_row#0 ← (number) 5
  (byte) debug_print::print_schar_pos7_col#0 ← (number) $1d
  to:debug_print::print_schar_pos7
debug_print::print_schar_pos7: scope:[debug_print]  from debug_print::@7
  (signed byte) debug_print::print_schar_pos7_sb#1 ← phi( debug_print::@7/(signed byte) debug_print::print_schar_pos7_sb#0 )
  (byte) debug_print::print_schar_pos7_col#1 ← phi( debug_print::@7/(byte) debug_print::print_schar_pos7_col#0 )
  (byte*) print_screen#9 ← phi( debug_print::@7/(byte*) print_screen#23 )
  (byte) debug_print::print_schar_pos7_row#1 ← phi( debug_print::@7/(byte) debug_print::print_schar_pos7_row#0 )
  (number~) debug_print::print_schar_pos7_$0 ← (byte) debug_print::print_schar_pos7_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos7_$1 ← (byte*) print_screen#9 + (number~) debug_print::print_schar_pos7_$0
  (byte*~) debug_print::print_schar_pos7_$2 ← (byte*~) debug_print::print_schar_pos7_$1 + (byte) debug_print::print_schar_pos7_col#1
  (signed byte) print_schar_at::b#10 ← (signed byte) debug_print::print_schar_pos7_sb#1
  (byte*) print_schar_at::at#9 ← (byte*~) debug_print::print_schar_pos7_$2
  call print_schar_at 
  to:debug_print::@20
debug_print::@20: scope:[debug_print]  from debug_print::print_schar_pos7
  (byte*) print_screen#38 ← phi( debug_print::print_schar_pos7/(byte*) print_screen#9 )
  to:debug_print::@8
debug_print::@8: scope:[debug_print]  from debug_print::@20
  (byte*) print_screen#24 ← phi( debug_print::@20/(byte*) print_screen#38 )
  (signed byte) debug_print::print_schar_pos8_sb#0 ← *((const signed byte*) rotation_matrix + (number) 4)
  (byte) debug_print::print_schar_pos8_row#0 ← (number) 5
  (byte) debug_print::print_schar_pos8_col#0 ← (number) $21
  to:debug_print::print_schar_pos8
debug_print::print_schar_pos8: scope:[debug_print]  from debug_print::@8
  (signed byte) debug_print::print_schar_pos8_sb#1 ← phi( debug_print::@8/(signed byte) debug_print::print_schar_pos8_sb#0 )
  (byte) debug_print::print_schar_pos8_col#1 ← phi( debug_print::@8/(byte) debug_print::print_schar_pos8_col#0 )
  (byte*) print_screen#10 ← phi( debug_print::@8/(byte*) print_screen#24 )
  (byte) debug_print::print_schar_pos8_row#1 ← phi( debug_print::@8/(byte) debug_print::print_schar_pos8_row#0 )
  (number~) debug_print::print_schar_pos8_$0 ← (byte) debug_print::print_schar_pos8_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos8_$1 ← (byte*) print_screen#10 + (number~) debug_print::print_schar_pos8_$0
  (byte*~) debug_print::print_schar_pos8_$2 ← (byte*~) debug_print::print_schar_pos8_$1 + (byte) debug_print::print_schar_pos8_col#1
  (signed byte) print_schar_at::b#11 ← (signed byte) debug_print::print_schar_pos8_sb#1
  (byte*) print_schar_at::at#10 ← (byte*~) debug_print::print_schar_pos8_$2
  call print_schar_at 
  to:debug_print::@21
debug_print::@21: scope:[debug_print]  from debug_print::print_schar_pos8
  (byte*) print_screen#39 ← phi( debug_print::print_schar_pos8/(byte*) print_screen#10 )
  to:debug_print::@9
debug_print::@9: scope:[debug_print]  from debug_print::@21
  (byte*) print_screen#25 ← phi( debug_print::@21/(byte*) print_screen#39 )
  (signed byte) debug_print::print_schar_pos9_sb#0 ← *((const signed byte*) rotation_matrix + (number) 5)
  (byte) debug_print::print_schar_pos9_row#0 ← (number) 5
  (byte) debug_print::print_schar_pos9_col#0 ← (number) $25
  to:debug_print::print_schar_pos9
debug_print::print_schar_pos9: scope:[debug_print]  from debug_print::@9
  (signed byte) debug_print::print_schar_pos9_sb#1 ← phi( debug_print::@9/(signed byte) debug_print::print_schar_pos9_sb#0 )
  (byte) debug_print::print_schar_pos9_col#1 ← phi( debug_print::@9/(byte) debug_print::print_schar_pos9_col#0 )
  (byte*) print_screen#11 ← phi( debug_print::@9/(byte*) print_screen#25 )
  (byte) debug_print::print_schar_pos9_row#1 ← phi( debug_print::@9/(byte) debug_print::print_schar_pos9_row#0 )
  (number~) debug_print::print_schar_pos9_$0 ← (byte) debug_print::print_schar_pos9_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos9_$1 ← (byte*) print_screen#11 + (number~) debug_print::print_schar_pos9_$0
  (byte*~) debug_print::print_schar_pos9_$2 ← (byte*~) debug_print::print_schar_pos9_$1 + (byte) debug_print::print_schar_pos9_col#1
  (signed byte) print_schar_at::b#12 ← (signed byte) debug_print::print_schar_pos9_sb#1
  (byte*) print_schar_at::at#11 ← (byte*~) debug_print::print_schar_pos9_$2
  call print_schar_at 
  to:debug_print::@22
debug_print::@22: scope:[debug_print]  from debug_print::print_schar_pos9
  (byte*) print_screen#40 ← phi( debug_print::print_schar_pos9/(byte*) print_screen#11 )
  to:debug_print::@10
debug_print::@10: scope:[debug_print]  from debug_print::@22
  (byte*) print_screen#26 ← phi( debug_print::@22/(byte*) print_screen#40 )
  (signed byte) debug_print::print_schar_pos10_sb#0 ← *((const signed byte*) rotation_matrix + (number) 6)
  (byte) debug_print::print_schar_pos10_row#0 ← (number) 6
  (byte) debug_print::print_schar_pos10_col#0 ← (number) $1d
  to:debug_print::print_schar_pos10
debug_print::print_schar_pos10: scope:[debug_print]  from debug_print::@10
  (signed byte) debug_print::print_schar_pos10_sb#1 ← phi( debug_print::@10/(signed byte) debug_print::print_schar_pos10_sb#0 )
  (byte) debug_print::print_schar_pos10_col#1 ← phi( debug_print::@10/(byte) debug_print::print_schar_pos10_col#0 )
  (byte*) print_screen#12 ← phi( debug_print::@10/(byte*) print_screen#26 )
  (byte) debug_print::print_schar_pos10_row#1 ← phi( debug_print::@10/(byte) debug_print::print_schar_pos10_row#0 )
  (number~) debug_print::print_schar_pos10_$0 ← (byte) debug_print::print_schar_pos10_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos10_$1 ← (byte*) print_screen#12 + (number~) debug_print::print_schar_pos10_$0
  (byte*~) debug_print::print_schar_pos10_$2 ← (byte*~) debug_print::print_schar_pos10_$1 + (byte) debug_print::print_schar_pos10_col#1
  (signed byte) print_schar_at::b#13 ← (signed byte) debug_print::print_schar_pos10_sb#1
  (byte*) print_schar_at::at#12 ← (byte*~) debug_print::print_schar_pos10_$2
  call print_schar_at 
  to:debug_print::@23
debug_print::@23: scope:[debug_print]  from debug_print::print_schar_pos10
  (byte*) print_screen#41 ← phi( debug_print::print_schar_pos10/(byte*) print_screen#12 )
  to:debug_print::@11
debug_print::@11: scope:[debug_print]  from debug_print::@23
  (byte*) print_screen#27 ← phi( debug_print::@23/(byte*) print_screen#41 )
  (signed byte) debug_print::print_schar_pos11_sb#0 ← *((const signed byte*) rotation_matrix + (number) 7)
  (byte) debug_print::print_schar_pos11_row#0 ← (number) 6
  (byte) debug_print::print_schar_pos11_col#0 ← (number) $21
  to:debug_print::print_schar_pos11
debug_print::print_schar_pos11: scope:[debug_print]  from debug_print::@11
  (signed byte) debug_print::print_schar_pos11_sb#1 ← phi( debug_print::@11/(signed byte) debug_print::print_schar_pos11_sb#0 )
  (byte) debug_print::print_schar_pos11_col#1 ← phi( debug_print::@11/(byte) debug_print::print_schar_pos11_col#0 )
  (byte*) print_screen#13 ← phi( debug_print::@11/(byte*) print_screen#27 )
  (byte) debug_print::print_schar_pos11_row#1 ← phi( debug_print::@11/(byte) debug_print::print_schar_pos11_row#0 )
  (number~) debug_print::print_schar_pos11_$0 ← (byte) debug_print::print_schar_pos11_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos11_$1 ← (byte*) print_screen#13 + (number~) debug_print::print_schar_pos11_$0
  (byte*~) debug_print::print_schar_pos11_$2 ← (byte*~) debug_print::print_schar_pos11_$1 + (byte) debug_print::print_schar_pos11_col#1
  (signed byte) print_schar_at::b#14 ← (signed byte) debug_print::print_schar_pos11_sb#1
  (byte*) print_schar_at::at#13 ← (byte*~) debug_print::print_schar_pos11_$2
  call print_schar_at 
  to:debug_print::@24
debug_print::@24: scope:[debug_print]  from debug_print::print_schar_pos11
  (byte*) print_screen#42 ← phi( debug_print::print_schar_pos11/(byte*) print_screen#13 )
  to:debug_print::@12
debug_print::@12: scope:[debug_print]  from debug_print::@24
  (byte*) print_screen#28 ← phi( debug_print::@24/(byte*) print_screen#42 )
  (signed byte) debug_print::print_schar_pos12_sb#0 ← *((const signed byte*) rotation_matrix + (number) 8)
  (byte) debug_print::print_schar_pos12_row#0 ← (number) 6
  (byte) debug_print::print_schar_pos12_col#0 ← (number) $25
  to:debug_print::print_schar_pos12
debug_print::print_schar_pos12: scope:[debug_print]  from debug_print::@12
  (signed byte) debug_print::print_schar_pos12_sb#1 ← phi( debug_print::@12/(signed byte) debug_print::print_schar_pos12_sb#0 )
  (byte) debug_print::print_schar_pos12_col#1 ← phi( debug_print::@12/(byte) debug_print::print_schar_pos12_col#0 )
  (byte*) print_screen#14 ← phi( debug_print::@12/(byte*) print_screen#28 )
  (byte) debug_print::print_schar_pos12_row#1 ← phi( debug_print::@12/(byte) debug_print::print_schar_pos12_row#0 )
  (number~) debug_print::print_schar_pos12_$0 ← (byte) debug_print::print_schar_pos12_row#1 * (number) $28
  (byte*~) debug_print::print_schar_pos12_$1 ← (byte*) print_screen#14 + (number~) debug_print::print_schar_pos12_$0
  (byte*~) debug_print::print_schar_pos12_$2 ← (byte*~) debug_print::print_schar_pos12_$1 + (byte) debug_print::print_schar_pos12_col#1
  (signed byte) print_schar_at::b#15 ← (signed byte) debug_print::print_schar_pos12_sb#1
  (byte*) print_schar_at::at#14 ← (byte*~) debug_print::print_schar_pos12_$2
  call print_schar_at 
  to:debug_print::@25
debug_print::@25: scope:[debug_print]  from debug_print::print_schar_pos12
  to:debug_print::@13
debug_print::@13: scope:[debug_print]  from debug_print::@25
  (byte*~) debug_print::$12 ← (const byte*) SCREEN + (number) $13*(number) $28
  (byte*) debug_print::at_line#0 ← (byte*~) debug_print::$12
  (byte) debug_print::c#0 ← (byte) 4
  (byte) debug_print::i#0 ← (byte) 0
  to:debug_print::@1
debug_print::@1: scope:[debug_print]  from debug_print::@13 debug_print::@31
  (byte) debug_print::i#2 ← phi( debug_print::@13/(byte) debug_print::i#0 debug_print::@31/(byte) debug_print::i#1 )
  (byte) debug_print::c#2 ← phi( debug_print::@13/(byte) debug_print::c#0 debug_print::@31/(byte) debug_print::c#1 )
  (byte*) debug_print::at_line#1 ← phi( debug_print::@13/(byte*) debug_print::at_line#0 debug_print::@31/(byte*) debug_print::at_line#7 )
  (byte*~) debug_print::$13 ← (byte*) debug_print::at_line#1 + (number) $28*(number) 0
  (byte*~) debug_print::$14 ← (byte*~) debug_print::$13 + (byte) debug_print::c#2
  (signed byte) print_schar_at::b#16 ← *((const signed byte*) xrs + (byte) debug_print::i#2)
  (byte*) print_schar_at::at#15 ← (byte*~) debug_print::$14
  call print_schar_at 
  to:debug_print::@26
debug_print::@26: scope:[debug_print]  from debug_print::@1
  (byte) debug_print::i#3 ← phi( debug_print::@1/(byte) debug_print::i#2 )
  (byte) debug_print::c#3 ← phi( debug_print::@1/(byte) debug_print::c#2 )
  (byte*) debug_print::at_line#2 ← phi( debug_print::@1/(byte*) debug_print::at_line#1 )
  (byte*~) debug_print::$16 ← (byte*) debug_print::at_line#2 + (number) $28*(number) 1
  (byte*~) debug_print::$17 ← (byte*~) debug_print::$16 + (byte) debug_print::c#3
  (signed byte) print_schar_at::b#17 ← *((const signed byte*) yrs + (byte) debug_print::i#3)
  (byte*) print_schar_at::at#16 ← (byte*~) debug_print::$17
  call print_schar_at 
  to:debug_print::@27
debug_print::@27: scope:[debug_print]  from debug_print::@26
  (byte) debug_print::i#4 ← phi( debug_print::@26/(byte) debug_print::i#3 )
  (byte) debug_print::c#4 ← phi( debug_print::@26/(byte) debug_print::c#3 )
  (byte*) debug_print::at_line#3 ← phi( debug_print::@26/(byte*) debug_print::at_line#2 )
  (byte*~) debug_print::$19 ← (byte*) debug_print::at_line#3 + (number) $28*(number) 2
  (byte*~) debug_print::$20 ← (byte*~) debug_print::$19 + (byte) debug_print::c#4
  (signed byte) print_schar_at::b#18 ← *((const signed byte*) zrs + (byte) debug_print::i#4)
  (byte*) print_schar_at::at#17 ← (byte*~) debug_print::$20
  call print_schar_at 
  to:debug_print::@28
debug_print::@28: scope:[debug_print]  from debug_print::@27
  (byte) debug_print::i#5 ← phi( debug_print::@27/(byte) debug_print::i#4 )
  (byte) debug_print::c#5 ← phi( debug_print::@27/(byte) debug_print::c#4 )
  (byte*) debug_print::at_line#4 ← phi( debug_print::@27/(byte*) debug_print::at_line#3 )
  (byte*~) debug_print::$22 ← (byte*) debug_print::at_line#4 + (number) $28*(number) 3
  (byte*~) debug_print::$23 ← (byte*~) debug_print::$22 + (byte) debug_print::c#5
  (signed byte) print_schar_at::b#19 ← *((const signed byte*) pps + (byte) debug_print::i#5)
  (byte*) print_schar_at::at#18 ← (byte*~) debug_print::$23
  call print_schar_at 
  to:debug_print::@29
debug_print::@29: scope:[debug_print]  from debug_print::@28
  (byte) debug_print::i#6 ← phi( debug_print::@28/(byte) debug_print::i#5 )
  (byte) debug_print::c#6 ← phi( debug_print::@28/(byte) debug_print::c#5 )
  (byte*) debug_print::at_line#5 ← phi( debug_print::@28/(byte*) debug_print::at_line#4 )
  (byte*~) debug_print::$25 ← (byte*) debug_print::at_line#5 + (number) $28*(number) 4
  (byte*~) debug_print::$26 ← (byte*~) debug_print::$25 + (byte) debug_print::c#6
  (signed byte) print_schar_at::b#20 ← *((const signed byte*) xps + (byte) debug_print::i#6)
  (byte*) print_schar_at::at#19 ← (byte*~) debug_print::$26
  call print_schar_at 
  to:debug_print::@30
debug_print::@30: scope:[debug_print]  from debug_print::@29
  (byte) debug_print::i#7 ← phi( debug_print::@29/(byte) debug_print::i#6 )
  (byte) debug_print::c#7 ← phi( debug_print::@29/(byte) debug_print::c#6 )
  (byte*) debug_print::at_line#6 ← phi( debug_print::@29/(byte*) debug_print::at_line#5 )
  (byte*~) debug_print::$28 ← (byte*) debug_print::at_line#6 + (number) $28*(number) 5
  (byte*~) debug_print::$29 ← (byte*~) debug_print::$28 + (byte) debug_print::c#7
  (signed byte) print_schar_at::b#21 ← *((const signed byte*) yps + (byte) debug_print::i#7)
  (byte*) print_schar_at::at#20 ← (byte*~) debug_print::$29
  call print_schar_at 
  to:debug_print::@31
debug_print::@31: scope:[debug_print]  from debug_print::@30
  (byte*) debug_print::at_line#7 ← phi( debug_print::@30/(byte*) debug_print::at_line#6 )
  (byte) debug_print::i#8 ← phi( debug_print::@30/(byte) debug_print::i#7 )
  (byte) debug_print::c#8 ← phi( debug_print::@30/(byte) debug_print::c#7 )
  (byte) debug_print::c#1 ← (byte) debug_print::c#8 + (number) 4
  (byte) debug_print::i#1 ← (byte) debug_print::i#8 + rangenext(0,7)
  (bool~) debug_print::$31 ← (byte) debug_print::i#1 != rangelast(0,7)
  if((bool~) debug_print::$31) goto debug_print::@1
  to:debug_print::@return
debug_print::@return: scope:[debug_print]  from debug_print::@31
  return 
  to:@return

(void()) sprites_init()
sprites_init: scope:[sprites_init]  from main
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (number) $ff
  (byte*~) sprites_init::$0 ← (const byte*) sprites_init::SCREEN + (number) $3f8
  (byte*) sprites_init::sprites_ptr#0 ← (byte*~) sprites_init::$0
  (byte) sprites_init::i#0 ← (byte) 0
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  (byte) sprites_init::i#2 ← phi( sprites_init/(byte) sprites_init::i#0 sprites_init::@1/(byte) sprites_init::i#1 )
  (byte*) sprites_init::sprites_ptr#1 ← phi( sprites_init/(byte*) sprites_init::sprites_ptr#0 sprites_init::@1/(byte*) sprites_init::sprites_ptr#1 )
  (byte*~) sprites_init::$1 ← (const byte*) SPRITE / (number) $40
  *((byte*) sprites_init::sprites_ptr#1 + (byte) sprites_init::i#2) ← (byte)(byte*~) sprites_init::$1
  *((const nomodify byte*) SPRITES_COLOR + (byte) sprites_init::i#2) ← (const nomodify byte) GREEN
  (byte) sprites_init::i#1 ← (byte) sprites_init::i#2 + rangenext(0,7)
  (bool~) sprites_init::$2 ← (byte) sprites_init::i#1 != rangelast(0,7)
  if((bool~) sprites_init::$2) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  return 
  to:@return

(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
calculate_matrix: scope:[calculate_matrix]  from anim::@5
  (signed byte) calculate_matrix::sx#1 ← phi( anim::@5/(signed byte) calculate_matrix::sx#0 )
  (signed byte) calculate_matrix::sz#1 ← phi( anim::@5/(signed byte) calculate_matrix::sz#0 )
  (signed byte) calculate_matrix::sy#1 ← phi( anim::@5/(signed byte) calculate_matrix::sy#0 )
  (signed byte~) calculate_matrix::$0 ← (signed byte) calculate_matrix::sy#1 - (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t1#0 ← (signed byte~) calculate_matrix::$0
  (signed byte~) calculate_matrix::$1 ← (signed byte) calculate_matrix::sy#1 + (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t2#0 ← (signed byte~) calculate_matrix::$1
  (signed byte~) calculate_matrix::$2 ← (signed byte) calculate_matrix::sx#1 + (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t3#0 ← (signed byte~) calculate_matrix::$2
  (signed byte~) calculate_matrix::$3 ← (signed byte) calculate_matrix::sx#1 - (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t4#0 ← (signed byte~) calculate_matrix::$3
  (signed byte~) calculate_matrix::$4 ← (signed byte) calculate_matrix::sx#1 + (signed byte) calculate_matrix::t2#0
  (signed byte) calculate_matrix::t5#0 ← (signed byte~) calculate_matrix::$4
  (signed byte~) calculate_matrix::$5 ← (signed byte) calculate_matrix::sx#1 - (signed byte) calculate_matrix::t1#0
  (signed byte) calculate_matrix::t6#0 ← (signed byte~) calculate_matrix::$5
  (signed byte~) calculate_matrix::$6 ← (signed byte) calculate_matrix::sx#1 + (signed byte) calculate_matrix::t1#0
  (signed byte) calculate_matrix::t7#0 ← (signed byte~) calculate_matrix::$6
  (signed byte~) calculate_matrix::$7 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#1
  (signed byte) calculate_matrix::t8#0 ← (signed byte~) calculate_matrix::$7
  (signed byte~) calculate_matrix::$8 ← (signed byte) calculate_matrix::sy#1 - (signed byte) calculate_matrix::sx#1
  (signed byte) calculate_matrix::t9#0 ← (signed byte~) calculate_matrix::$8
  (signed byte~) calculate_matrix::$9 ← (signed byte) calculate_matrix::sy#1 + (signed byte) calculate_matrix::sx#1
  (signed byte) calculate_matrix::t10#0 ← (signed byte~) calculate_matrix::$9
  (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t2#0)
  *((const signed byte*) rotation_matrix + (number) 0) ← (signed byte~) calculate_matrix::$10
  (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t2#0)
  *((const signed byte*) rotation_matrix + (number) 1) ← (signed byte~) calculate_matrix::$11
  (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#1) + *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#1)
  *((const signed byte*) rotation_matrix + (number) 2) ← (signed byte~) calculate_matrix::$12
  (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0)
  (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0)
  (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0)
  *((const signed byte*) rotation_matrix + (number) 3) ← (signed byte~) calculate_matrix::$17
  (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0)
  (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0)
  (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0)
  *((const signed byte*) rotation_matrix + (number) 4) ← (signed byte~) calculate_matrix::$22
  (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t10#0)
  *((const signed byte*) rotation_matrix + (number) 5) ← (signed byte~) calculate_matrix::$23
  (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0)
  (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0)
  (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0)
  *((const signed byte*) rotation_matrix + (number) 6) ← (signed byte~) calculate_matrix::$28
  (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0)
  (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0)
  (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0)
  *((const signed byte*) rotation_matrix + (number) 7) ← (signed byte~) calculate_matrix::$33
  (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t10#0)
  *((const signed byte*) rotation_matrix + (number) 8) ← (signed byte~) calculate_matrix::$34
  to:calculate_matrix::@return
calculate_matrix::@return: scope:[calculate_matrix]  from calculate_matrix
  return 
  to:@return

(void()) store_matrix()
store_matrix: scope:[store_matrix]  from anim::@8
  asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
  to:store_matrix::@return
store_matrix::@return: scope:[store_matrix]  from store_matrix
  return 
  to:@return

(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
rotate_matrix: scope:[rotate_matrix]  from anim::@6
  (signed byte) rotate_matrix::z#1 ← phi( anim::@6/(signed byte) rotate_matrix::z#0 )
  (signed byte) rotate_matrix::y#1 ← phi( anim::@6/(signed byte) rotate_matrix::y#0 )
  (signed byte) rotate_matrix::x#1 ← phi( anim::@6/(signed byte) rotate_matrix::x#0 )
  *((const signed byte*) xr) ← (signed byte) rotate_matrix::x#1
  *((const signed byte*) yr) ← (signed byte) rotate_matrix::y#1
  *((const signed byte*) zr) ← (signed byte) rotate_matrix::z#1
  asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  }
  to:rotate_matrix::@return
rotate_matrix::@return: scope:[rotate_matrix]  from rotate_matrix
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte*) print_screen#0 ← (byte*)(number) $400
  (signed byte) sx#4 ← (signed byte) 0
  (signed byte) sy#4 ← (signed byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte*) print_screen#43 ← phi( __start::__init1/(byte*) print_screen#0 )
  (signed byte) sy#20 ← phi( __start::__init1/(signed byte) sy#4 )
  (signed byte) sx#19 ← phi( __start::__init1/(signed byte) sx#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte*) print_screen#29 ← phi( __start::@1/(byte*) print_screen#43 )
  (signed byte) sy#13 ← phi( __start::@1/(signed byte) sy#1 )
  (signed byte) sx#13 ← phi( __start::@1/(signed byte) sx#1 )
  (signed byte) sx#5 ← (signed byte) sx#13
  (signed byte) sy#5 ← (signed byte) sy#13
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (signed byte) sy#14 ← phi( __start::@2/(signed byte) sy#5 )
  (signed byte) sx#14 ← phi( __start::@2/(signed byte) sx#5 )
  (byte*) print_screen#15 ← phi( __start::@2/(byte*) print_screen#29 )
  (byte*) print_screen#1 ← (byte*) print_screen#15
  (signed byte) sx#6 ← (signed byte) sx#14
  (signed byte) sy#6 ← (signed byte) sy#14
  return 
  to:@return

SYMBOL TABLE SSA
(const signed byte*) COSH = (const signed byte*) SINH+(number) $40
(const signed byte*) COSQ = (const signed byte*) SINQ+(number) $40
(const nomodify byte) GREEN = (byte) 5
(const nomodify byte) LIGHT_BLUE = (byte) $e
(const nomodify byte) LIGHT_GREY = (byte) $f
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = (byte) $20
(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER = (byte) $12
(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = (byte) $15
(const signed byte*) PERSP_Z[(number) $100]  = kickasm {{ {
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte*) SCREEN = (byte*)(number) $400
(const signed byte*) SINH[(number) $140]  = kickasm {{ {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
(const signed byte*) SINQ[(number) $140]  = kickasm {{ {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
(const byte*) SPRITE[]  = kickasm {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
(const nomodify byte*) SPRITES_COLOR = (byte*)(number) $d027
(const nomodify byte*) SPRITES_XPOS = (byte*)(number) $d000
(const nomodify byte*) SPRITES_YPOS = (byte*)(number) $d001
(const nomodify struct MOS6569_VICII*) VICII = (struct MOS6569_VICII*)(number) $d000
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(void()) anim()
(bool~) anim::$0
(bool~) anim::$1
(number~) anim::$10
(bool~) anim::$11
(byte~) anim::$13
(byte~) anim::$14
(bool~) anim::$2
(number~) anim::$8
(number~) anim::$9
(label) anim::@1
(label) anim::@10
(label) anim::@11
(label) anim::@2
(label) anim::@3
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@7
(label) anim::@8
(label) anim::@9
(label) anim::@return
(byte) anim::i
(byte) anim::i#0
(byte) anim::i#1
(byte) anim::i#2
(byte) anim::i#3
(byte) anim::i2
(byte) anim::i2#0
(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
(signed byte~) calculate_matrix::$0
(signed byte~) calculate_matrix::$1
(signed byte~) calculate_matrix::$10
(signed byte~) calculate_matrix::$11
(signed byte~) calculate_matrix::$12
(signed byte~) calculate_matrix::$13
(signed byte~) calculate_matrix::$14
(signed byte~) calculate_matrix::$15
(signed byte~) calculate_matrix::$16
(signed byte~) calculate_matrix::$17
(signed byte~) calculate_matrix::$18
(signed byte~) calculate_matrix::$19
(signed byte~) calculate_matrix::$2
(signed byte~) calculate_matrix::$20
(signed byte~) calculate_matrix::$21
(signed byte~) calculate_matrix::$22
(signed byte~) calculate_matrix::$23
(signed byte~) calculate_matrix::$24
(signed byte~) calculate_matrix::$25
(signed byte~) calculate_matrix::$26
(signed byte~) calculate_matrix::$27
(signed byte~) calculate_matrix::$28
(signed byte~) calculate_matrix::$29
(signed byte~) calculate_matrix::$3
(signed byte~) calculate_matrix::$30
(signed byte~) calculate_matrix::$31
(signed byte~) calculate_matrix::$32
(signed byte~) calculate_matrix::$33
(signed byte~) calculate_matrix::$34
(signed byte~) calculate_matrix::$4
(signed byte~) calculate_matrix::$5
(signed byte~) calculate_matrix::$6
(signed byte~) calculate_matrix::$7
(signed byte~) calculate_matrix::$8
(signed byte~) calculate_matrix::$9
(label) calculate_matrix::@return
(signed byte) calculate_matrix::sx
(signed byte) calculate_matrix::sx#0
(signed byte) calculate_matrix::sx#1
(signed byte) calculate_matrix::sy
(signed byte) calculate_matrix::sy#0
(signed byte) calculate_matrix::sy#1
(signed byte) calculate_matrix::sz
(signed byte) calculate_matrix::sz#0
(signed byte) calculate_matrix::sz#1
(signed byte) calculate_matrix::t1
(signed byte) calculate_matrix::t1#0
(signed byte) calculate_matrix::t10
(signed byte) calculate_matrix::t10#0
(signed byte) calculate_matrix::t2
(signed byte) calculate_matrix::t2#0
(signed byte) calculate_matrix::t3
(signed byte) calculate_matrix::t3#0
(signed byte) calculate_matrix::t4
(signed byte) calculate_matrix::t4#0
(signed byte) calculate_matrix::t5
(signed byte) calculate_matrix::t5#0
(signed byte) calculate_matrix::t6
(signed byte) calculate_matrix::t6#0
(signed byte) calculate_matrix::t7
(signed byte) calculate_matrix::t7#0
(signed byte) calculate_matrix::t8
(signed byte) calculate_matrix::t8#0
(signed byte) calculate_matrix::t9
(signed byte) calculate_matrix::t9#0
(void()) debug_print()
(byte*~) debug_print::$12
(byte*~) debug_print::$13
(byte*~) debug_print::$14
(byte*~) debug_print::$16
(byte*~) debug_print::$17
(byte*~) debug_print::$19
(byte*~) debug_print::$20
(byte*~) debug_print::$22
(byte*~) debug_print::$23
(byte*~) debug_print::$25
(byte*~) debug_print::$26
(byte*~) debug_print::$28
(byte*~) debug_print::$29
(bool~) debug_print::$31
(label) debug_print::@1
(label) debug_print::@10
(label) debug_print::@11
(label) debug_print::@12
(label) debug_print::@13
(label) debug_print::@14
(label) debug_print::@15
(label) debug_print::@16
(label) debug_print::@17
(label) debug_print::@18
(label) debug_print::@19
(label) debug_print::@2
(label) debug_print::@20
(label) debug_print::@21
(label) debug_print::@22
(label) debug_print::@23
(label) debug_print::@24
(label) debug_print::@25
(label) debug_print::@26
(label) debug_print::@27
(label) debug_print::@28
(label) debug_print::@29
(label) debug_print::@3
(label) debug_print::@30
(label) debug_print::@31
(label) debug_print::@4
(label) debug_print::@5
(label) debug_print::@6
(label) debug_print::@7
(label) debug_print::@8
(label) debug_print::@9
(label) debug_print::@return
(byte*) debug_print::at_line
(byte*) debug_print::at_line#0
(byte*) debug_print::at_line#1
(byte*) debug_print::at_line#2
(byte*) debug_print::at_line#3
(byte*) debug_print::at_line#4
(byte*) debug_print::at_line#5
(byte*) debug_print::at_line#6
(byte*) debug_print::at_line#7
(byte) debug_print::c
(byte) debug_print::c#0
(byte) debug_print::c#1
(byte) debug_print::c#2
(byte) debug_print::c#3
(byte) debug_print::c#4
(byte) debug_print::c#5
(byte) debug_print::c#6
(byte) debug_print::c#7
(byte) debug_print::c#8
(byte) debug_print::i
(byte) debug_print::i#0
(byte) debug_print::i#1
(byte) debug_print::i#2
(byte) debug_print::i#3
(byte) debug_print::i#4
(byte) debug_print::i#5
(byte) debug_print::i#6
(byte) debug_print::i#7
(byte) debug_print::i#8
(label) debug_print::print_schar_pos1
(label) debug_print::print_schar_pos10
(number~) debug_print::print_schar_pos10_$0
(byte*~) debug_print::print_schar_pos10_$1
(byte*~) debug_print::print_schar_pos10_$2
(byte) debug_print::print_schar_pos10_col
(byte) debug_print::print_schar_pos10_col#0
(byte) debug_print::print_schar_pos10_col#1
(byte) debug_print::print_schar_pos10_row
(byte) debug_print::print_schar_pos10_row#0
(byte) debug_print::print_schar_pos10_row#1
(signed byte) debug_print::print_schar_pos10_sb
(signed byte) debug_print::print_schar_pos10_sb#0
(signed byte) debug_print::print_schar_pos10_sb#1
(label) debug_print::print_schar_pos11
(number~) debug_print::print_schar_pos11_$0
(byte*~) debug_print::print_schar_pos11_$1
(byte*~) debug_print::print_schar_pos11_$2
(byte) debug_print::print_schar_pos11_col
(byte) debug_print::print_schar_pos11_col#0
(byte) debug_print::print_schar_pos11_col#1
(byte) debug_print::print_schar_pos11_row
(byte) debug_print::print_schar_pos11_row#0
(byte) debug_print::print_schar_pos11_row#1
(signed byte) debug_print::print_schar_pos11_sb
(signed byte) debug_print::print_schar_pos11_sb#0
(signed byte) debug_print::print_schar_pos11_sb#1
(label) debug_print::print_schar_pos12
(number~) debug_print::print_schar_pos12_$0
(byte*~) debug_print::print_schar_pos12_$1
(byte*~) debug_print::print_schar_pos12_$2
(byte) debug_print::print_schar_pos12_col
(byte) debug_print::print_schar_pos12_col#0
(byte) debug_print::print_schar_pos12_col#1
(byte) debug_print::print_schar_pos12_row
(byte) debug_print::print_schar_pos12_row#0
(byte) debug_print::print_schar_pos12_row#1
(signed byte) debug_print::print_schar_pos12_sb
(signed byte) debug_print::print_schar_pos12_sb#0
(signed byte) debug_print::print_schar_pos12_sb#1
(number~) debug_print::print_schar_pos1_$0
(byte*~) debug_print::print_schar_pos1_$1
(byte*~) debug_print::print_schar_pos1_$2
(byte) debug_print::print_schar_pos1_col
(byte) debug_print::print_schar_pos1_col#0
(byte) debug_print::print_schar_pos1_col#1
(byte) debug_print::print_schar_pos1_row
(byte) debug_print::print_schar_pos1_row#0
(byte) debug_print::print_schar_pos1_row#1
(signed byte) debug_print::print_schar_pos1_sb
(signed byte) debug_print::print_schar_pos1_sb#0
(signed byte) debug_print::print_schar_pos1_sb#1
(label) debug_print::print_schar_pos2
(number~) debug_print::print_schar_pos2_$0
(byte*~) debug_print::print_schar_pos2_$1
(byte*~) debug_print::print_schar_pos2_$2
(byte) debug_print::print_schar_pos2_col
(byte) debug_print::print_schar_pos2_col#0
(byte) debug_print::print_schar_pos2_col#1
(byte) debug_print::print_schar_pos2_row
(byte) debug_print::print_schar_pos2_row#0
(byte) debug_print::print_schar_pos2_row#1
(signed byte) debug_print::print_schar_pos2_sb
(signed byte) debug_print::print_schar_pos2_sb#0
(signed byte) debug_print::print_schar_pos2_sb#1
(label) debug_print::print_schar_pos3
(number~) debug_print::print_schar_pos3_$0
(byte*~) debug_print::print_schar_pos3_$1
(byte*~) debug_print::print_schar_pos3_$2
(byte) debug_print::print_schar_pos3_col
(byte) debug_print::print_schar_pos3_col#0
(byte) debug_print::print_schar_pos3_col#1
(byte) debug_print::print_schar_pos3_row
(byte) debug_print::print_schar_pos3_row#0
(byte) debug_print::print_schar_pos3_row#1
(signed byte) debug_print::print_schar_pos3_sb
(signed byte) debug_print::print_schar_pos3_sb#0
(signed byte) debug_print::print_schar_pos3_sb#1
(label) debug_print::print_schar_pos4
(number~) debug_print::print_schar_pos4_$0
(byte*~) debug_print::print_schar_pos4_$1
(byte*~) debug_print::print_schar_pos4_$2
(byte) debug_print::print_schar_pos4_col
(byte) debug_print::print_schar_pos4_col#0
(byte) debug_print::print_schar_pos4_col#1
(byte) debug_print::print_schar_pos4_row
(byte) debug_print::print_schar_pos4_row#0
(byte) debug_print::print_schar_pos4_row#1
(signed byte) debug_print::print_schar_pos4_sb
(signed byte) debug_print::print_schar_pos4_sb#0
(signed byte) debug_print::print_schar_pos4_sb#1
(label) debug_print::print_schar_pos5
(number~) debug_print::print_schar_pos5_$0
(byte*~) debug_print::print_schar_pos5_$1
(byte*~) debug_print::print_schar_pos5_$2
(byte) debug_print::print_schar_pos5_col
(byte) debug_print::print_schar_pos5_col#0
(byte) debug_print::print_schar_pos5_col#1
(byte) debug_print::print_schar_pos5_row
(byte) debug_print::print_schar_pos5_row#0
(byte) debug_print::print_schar_pos5_row#1
(signed byte) debug_print::print_schar_pos5_sb
(signed byte) debug_print::print_schar_pos5_sb#0
(signed byte) debug_print::print_schar_pos5_sb#1
(label) debug_print::print_schar_pos6
(number~) debug_print::print_schar_pos6_$0
(byte*~) debug_print::print_schar_pos6_$1
(byte*~) debug_print::print_schar_pos6_$2
(byte) debug_print::print_schar_pos6_col
(byte) debug_print::print_schar_pos6_col#0
(byte) debug_print::print_schar_pos6_col#1
(byte) debug_print::print_schar_pos6_row
(byte) debug_print::print_schar_pos6_row#0
(byte) debug_print::print_schar_pos6_row#1
(signed byte) debug_print::print_schar_pos6_sb
(signed byte) debug_print::print_schar_pos6_sb#0
(signed byte) debug_print::print_schar_pos6_sb#1
(label) debug_print::print_schar_pos7
(number~) debug_print::print_schar_pos7_$0
(byte*~) debug_print::print_schar_pos7_$1
(byte*~) debug_print::print_schar_pos7_$2
(byte) debug_print::print_schar_pos7_col
(byte) debug_print::print_schar_pos7_col#0
(byte) debug_print::print_schar_pos7_col#1
(byte) debug_print::print_schar_pos7_row
(byte) debug_print::print_schar_pos7_row#0
(byte) debug_print::print_schar_pos7_row#1
(signed byte) debug_print::print_schar_pos7_sb
(signed byte) debug_print::print_schar_pos7_sb#0
(signed byte) debug_print::print_schar_pos7_sb#1
(label) debug_print::print_schar_pos8
(number~) debug_print::print_schar_pos8_$0
(byte*~) debug_print::print_schar_pos8_$1
(byte*~) debug_print::print_schar_pos8_$2
(byte) debug_print::print_schar_pos8_col
(byte) debug_print::print_schar_pos8_col#0
(byte) debug_print::print_schar_pos8_col#1
(byte) debug_print::print_schar_pos8_row
(byte) debug_print::print_schar_pos8_row#0
(byte) debug_print::print_schar_pos8_row#1
(signed byte) debug_print::print_schar_pos8_sb
(signed byte) debug_print::print_schar_pos8_sb#0
(signed byte) debug_print::print_schar_pos8_sb#1
(label) debug_print::print_schar_pos9
(number~) debug_print::print_schar_pos9_$0
(byte*~) debug_print::print_schar_pos9_$1
(byte*~) debug_print::print_schar_pos9_$2
(byte) debug_print::print_schar_pos9_col
(byte) debug_print::print_schar_pos9_col#0
(byte) debug_print::print_schar_pos9_col#1
(byte) debug_print::print_schar_pos9_row
(byte) debug_print::print_schar_pos9_row#0
(byte) debug_print::print_schar_pos9_row#1
(signed byte) debug_print::print_schar_pos9_sb
(signed byte) debug_print::print_schar_pos9_sb#0
(signed byte) debug_print::print_schar_pos9_sb#1
(void()) debug_print_init()
(byte*~) debug_print_init::$1
(byte*~) debug_print_init::$10
(byte*~) debug_print_init::$12
(byte*~) debug_print_init::$14
(byte*~) debug_print_init::$16
(byte*~) debug_print_init::$18
(byte*~) debug_print_init::$2
(byte*~) debug_print_init::$20
(byte*~) debug_print_init::$22
(byte*~) debug_print_init::$24
(byte*~) debug_print_init::$26
(byte*~) debug_print_init::$28
(byte*~) debug_print_init::$29
(byte*~) debug_print_init::$30
(byte*~) debug_print_init::$31
(byte*~) debug_print_init::$33
(byte*~) debug_print_init::$34
(byte*~) debug_print_init::$36
(byte*~) debug_print_init::$37
(number~) debug_print_init::$39
(byte*~) debug_print_init::$4
(byte*~) debug_print_init::$40
(byte*~) debug_print_init::$41
(byte*~) debug_print_init::$42
(byte*~) debug_print_init::$43
(byte*~) debug_print_init::$44
(byte*~) debug_print_init::$45
(byte*~) debug_print_init::$46
(byte*~) debug_print_init::$47
(byte*~) debug_print_init::$48
(byte*~) debug_print_init::$49
(byte*~) debug_print_init::$5
(byte*~) debug_print_init::$50
(byte*~) debug_print_init::$51
(byte*~) debug_print_init::$52
(byte*~) debug_print_init::$53
(byte*~) debug_print_init::$54
(byte*~) debug_print_init::$55
(byte*~) debug_print_init::$56
(byte*~) debug_print_init::$57
(byte*~) debug_print_init::$58
(byte*~) debug_print_init::$59
(byte*~) debug_print_init::$60
(byte*~) debug_print_init::$61
(byte*~) debug_print_init::$62
(byte*~) debug_print_init::$63
(byte*~) debug_print_init::$64
(byte*~) debug_print_init::$65
(byte*~) debug_print_init::$66
(bool~) debug_print_init::$67
(bool~) debug_print_init::$68
(byte*~) debug_print_init::$7
(byte*~) debug_print_init::$8
(label) debug_print_init::@1
(label) debug_print_init::@10
(label) debug_print_init::@11
(label) debug_print_init::@12
(label) debug_print_init::@13
(label) debug_print_init::@14
(label) debug_print_init::@15
(label) debug_print_init::@16
(label) debug_print_init::@17
(label) debug_print_init::@18
(label) debug_print_init::@19
(label) debug_print_init::@2
(label) debug_print_init::@3
(label) debug_print_init::@4
(label) debug_print_init::@5
(label) debug_print_init::@6
(label) debug_print_init::@7
(label) debug_print_init::@8
(label) debug_print_init::@9
(label) debug_print_init::@return
(const byte*) debug_print_init::COLS = (byte*)(number) $d800
(byte*) debug_print_init::at_cols
(byte*) debug_print_init::at_cols#0
(byte*) debug_print_init::at_cols#1
(byte*) debug_print_init::at_cols#2
(byte*) debug_print_init::at_cols#3
(byte*) debug_print_init::at_cols#4
(byte*) debug_print_init::at_cols#5
(byte*) debug_print_init::at_cols#6
(byte*) debug_print_init::at_line
(byte*) debug_print_init::at_line#0
(byte*) debug_print_init::at_line#1
(byte*) debug_print_init::at_line#2
(byte*) debug_print_init::at_line#3
(byte*) debug_print_init::at_line#4
(byte*) debug_print_init::at_line#5
(byte*) debug_print_init::at_line#6
(byte) debug_print_init::c
(byte) debug_print_init::c#0
(byte) debug_print_init::c#1
(byte) debug_print_init::c#2
(byte) debug_print_init::c#3
(byte) debug_print_init::c#4
(byte) debug_print_init::c#5
(byte) debug_print_init::c#6
(byte) debug_print_init::c#7
(byte) debug_print_init::col
(byte) debug_print_init::col#0
(byte) debug_print_init::i
(byte) debug_print_init::i#0
(byte) debug_print_init::i#1
(byte) debug_print_init::i#2
(byte) debug_print_init::i#3
(byte) debug_print_init::i#4
(byte) debug_print_init::i#5
(byte) debug_print_init::i#6
(byte) debug_print_init::i#7
(byte) debug_print_init::j
(byte) debug_print_init::j#0
(byte) debug_print_init::j#1
(byte) debug_print_init::j#2
(const byte*) debug_print_init::str[(byte) 3]  = (byte*) "sx"
(const byte*) debug_print_init::str1[(byte) 3]  = (byte*) "sy"
(const byte*) debug_print_init::str10[(byte) 3]  = (byte*) "xp"
(const byte*) debug_print_init::str11[(byte) 3]  = (byte*) "yp"
(const byte*) debug_print_init::str2[(byte) 3]  = (byte*) "sz"
(const byte*) debug_print_init::str3[(byte) 2]  = (byte*) "x"
(const byte*) debug_print_init::str4[(byte) 2]  = (byte*) "y"
(const byte*) debug_print_init::str5[(byte) 2]  = (byte*) "z"
(const byte*) debug_print_init::str6[(byte) 3]  = (byte*) "xr"
(const byte*) debug_print_init::str7[(byte) 3]  = (byte*) "yr"
(const byte*) debug_print_init::str8[(byte) 3]  = (byte*) "zr"
(const byte*) debug_print_init::str9[(byte) 3]  = (byte*) "pp"
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(const byte*) mulf_sqr1[(number) $200]  = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }
 }}
(const byte*) mulf_sqr2[(number) $200]  = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }
 }}
(const signed byte*) pp = (signed byte*)(number) $f3
(const signed byte*) pps[(number) 8]  = { fill( 8, 0) }
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(label) print_char_at::@return
(byte*) print_char_at::at
(byte*) print_char_at::at#0
(byte*) print_char_at::at#1
(byte*) print_char_at::at#2
(byte*) print_char_at::at#3
(byte*) print_char_at::at#4
(byte) print_char_at::ch
(byte) print_char_at::ch#0
(byte) print_char_at::ch#1
(byte) print_char_at::ch#2
(byte) print_char_at::ch#3
(byte) print_char_at::ch#4
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(void()) print_schar_at((signed byte) print_schar_at::b , (byte*) print_schar_at::at)
(bool~) print_schar_at::$0
(byte*~) print_schar_at::$1
(signed byte~) print_schar_at::$5
(label) print_schar_at::@1
(label) print_schar_at::@2
(label) print_schar_at::@3
(label) print_schar_at::@4
(label) print_schar_at::@5
(label) print_schar_at::@6
(label) print_schar_at::@return
(byte*) print_schar_at::at
(byte*) print_schar_at::at#0
(byte*) print_schar_at::at#1
(byte*) print_schar_at::at#10
(byte*) print_schar_at::at#11
(byte*) print_schar_at::at#12
(byte*) print_schar_at::at#13
(byte*) print_schar_at::at#14
(byte*) print_schar_at::at#15
(byte*) print_schar_at::at#16
(byte*) print_schar_at::at#17
(byte*) print_schar_at::at#18
(byte*) print_schar_at::at#19
(byte*) print_schar_at::at#2
(byte*) print_schar_at::at#20
(byte*) print_schar_at::at#21
(byte*) print_schar_at::at#22
(byte*) print_schar_at::at#23
(byte*) print_schar_at::at#24
(byte*) print_schar_at::at#25
(byte*) print_schar_at::at#26
(byte*) print_schar_at::at#3
(byte*) print_schar_at::at#4
(byte*) print_schar_at::at#5
(byte*) print_schar_at::at#6
(byte*) print_schar_at::at#7
(byte*) print_schar_at::at#8
(byte*) print_schar_at::at#9
(signed byte) print_schar_at::b
(signed byte) print_schar_at::b#0
(signed byte) print_schar_at::b#1
(signed byte) print_schar_at::b#10
(signed byte) print_schar_at::b#11
(signed byte) print_schar_at::b#12
(signed byte) print_schar_at::b#13
(signed byte) print_schar_at::b#14
(signed byte) print_schar_at::b#15
(signed byte) print_schar_at::b#16
(signed byte) print_schar_at::b#17
(signed byte) print_schar_at::b#18
(signed byte) print_schar_at::b#19
(signed byte) print_schar_at::b#2
(signed byte) print_schar_at::b#20
(signed byte) print_schar_at::b#21
(signed byte) print_schar_at::b#22
(signed byte) print_schar_at::b#23
(signed byte) print_schar_at::b#24
(signed byte) print_schar_at::b#25
(signed byte) print_schar_at::b#26
(signed byte) print_schar_at::b#27
(signed byte) print_schar_at::b#3
(signed byte) print_schar_at::b#4
(signed byte) print_schar_at::b#5
(signed byte) print_schar_at::b#6
(signed byte) print_schar_at::b#7
(signed byte) print_schar_at::b#8
(signed byte) print_schar_at::b#9
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#10
(byte*) print_screen#11
(byte*) print_screen#12
(byte*) print_screen#13
(byte*) print_screen#14
(byte*) print_screen#15
(byte*) print_screen#16
(byte*) print_screen#17
(byte*) print_screen#18
(byte*) print_screen#19
(byte*) print_screen#2
(byte*) print_screen#20
(byte*) print_screen#21
(byte*) print_screen#22
(byte*) print_screen#23
(byte*) print_screen#24
(byte*) print_screen#25
(byte*) print_screen#26
(byte*) print_screen#27
(byte*) print_screen#28
(byte*) print_screen#29
(byte*) print_screen#3
(byte*) print_screen#30
(byte*) print_screen#31
(byte*) print_screen#32
(byte*) print_screen#33
(byte*) print_screen#34
(byte*) print_screen#35
(byte*) print_screen#36
(byte*) print_screen#37
(byte*) print_screen#38
(byte*) print_screen#39
(byte*) print_screen#4
(byte*) print_screen#40
(byte*) print_screen#41
(byte*) print_screen#42
(byte*) print_screen#43
(byte*) print_screen#44
(byte*) print_screen#45
(byte*) print_screen#46
(byte*) print_screen#47
(byte*) print_screen#48
(byte*) print_screen#49
(byte*) print_screen#5
(byte*) print_screen#50
(byte*) print_screen#51
(byte*) print_screen#52
(byte*) print_screen#53
(byte*) print_screen#54
(byte*) print_screen#55
(byte*) print_screen#56
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(bool~) print_str_at::$0
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::at#0
(byte*) print_str_at::at#1
(byte*) print_str_at::at#10
(byte*) print_str_at::at#11
(byte*) print_str_at::at#12
(byte*) print_str_at::at#13
(byte*) print_str_at::at#14
(byte*) print_str_at::at#15
(byte*) print_str_at::at#2
(byte*) print_str_at::at#3
(byte*) print_str_at::at#4
(byte*) print_str_at::at#5
(byte*) print_str_at::at#6
(byte*) print_str_at::at#7
(byte*) print_str_at::at#8
(byte*) print_str_at::at#9
(byte*) print_str_at::str
(byte*) print_str_at::str#0
(byte*) print_str_at::str#1
(byte*) print_str_at::str#10
(byte*) print_str_at::str#11
(byte*) print_str_at::str#12
(byte*) print_str_at::str#13
(byte*) print_str_at::str#14
(byte*) print_str_at::str#15
(byte*) print_str_at::str#2
(byte*) print_str_at::str#3
(byte*) print_str_at::str#4
(byte*) print_str_at::str#5
(byte*) print_str_at::str#6
(byte*) print_str_at::str#7
(byte*) print_str_at::str#8
(byte*) print_str_at::str#9
(void()) print_uchar_at((byte) print_uchar_at::b , (byte*) print_uchar_at::at)
(byte~) print_uchar_at::$0
(number~) print_uchar_at::$2
(byte*~) print_uchar_at::$3
(label) print_uchar_at::@1
(label) print_uchar_at::@2
(label) print_uchar_at::@return
(byte*) print_uchar_at::at
(byte*) print_uchar_at::at#0
(byte*) print_uchar_at::at#1
(byte*) print_uchar_at::at#2
(byte) print_uchar_at::b
(byte) print_uchar_at::b#0
(byte) print_uchar_at::b#1
(byte) print_uchar_at::b#2
(const word*) psp1 = (word*)(number) $f6
(const word*) psp2 = (word*)(number) $f8
(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
(label) rotate_matrix::@return
(signed byte) rotate_matrix::x
(signed byte) rotate_matrix::x#0
(signed byte) rotate_matrix::x#1
(signed byte) rotate_matrix::y
(signed byte) rotate_matrix::y#0
(signed byte) rotate_matrix::y#1
(signed byte) rotate_matrix::z
(signed byte) rotate_matrix::z#0
(signed byte) rotate_matrix::z#1
(const signed byte*) rotation_matrix[(number) 9]  = { fill( 9, 0) }
(void()) sprites_init()
(byte*~) sprites_init::$0
(byte*~) sprites_init::$1
(bool~) sprites_init::$2
(label) sprites_init::@1
(label) sprites_init::@return
(const byte*) sprites_init::SCREEN = (byte*)(number) $400
(byte) sprites_init::i
(byte) sprites_init::i#0
(byte) sprites_init::i#1
(byte) sprites_init::i#2
(byte*) sprites_init::sprites_ptr
(byte*) sprites_init::sprites_ptr#0
(byte*) sprites_init::sprites_ptr#1
(void()) store_matrix()
(label) store_matrix::@return
(signed byte) sx
(signed byte) sx#0
(signed byte) sx#1
(signed byte) sx#10
(signed byte) sx#11
(signed byte) sx#12
(signed byte) sx#13
(signed byte) sx#14
(signed byte) sx#15
(signed byte) sx#16
(signed byte) sx#17
(signed byte) sx#18
(signed byte) sx#19
(signed byte) sx#2
(signed byte) sx#20
(signed byte) sx#21
(signed byte) sx#22
(signed byte) sx#23
(signed byte) sx#24
(signed byte) sx#25
(signed byte) sx#26
(signed byte) sx#27
(signed byte) sx#28
(signed byte) sx#3
(signed byte) sx#4
(signed byte) sx#5
(signed byte) sx#6
(signed byte) sx#7
(signed byte) sx#8
(signed byte) sx#9
(signed byte) sy
(signed byte) sy#0
(signed byte) sy#1
(signed byte) sy#10
(signed byte) sy#11
(signed byte) sy#12
(signed byte) sy#13
(signed byte) sy#14
(signed byte) sy#15
(signed byte) sy#16
(signed byte) sy#17
(signed byte) sy#18
(signed byte) sy#19
(signed byte) sy#2
(signed byte) sy#20
(signed byte) sy#21
(signed byte) sy#22
(signed byte) sy#23
(signed byte) sy#24
(signed byte) sy#25
(signed byte) sy#26
(signed byte) sy#27
(signed byte) sy#28
(signed byte) sy#29
(signed byte) sy#3
(signed byte) sy#30
(signed byte) sy#31
(signed byte) sy#4
(signed byte) sy#5
(signed byte) sy#6
(signed byte) sy#7
(signed byte) sy#8
(signed byte) sy#9
(const signed byte) sz = (signed byte) 0
(const signed byte*) xp = (signed byte*)(number) $f4
(const signed byte*) xps[(number) 8]  = { fill( 8, 0) }
(const signed byte*) xr = (signed byte*)(number) $f0
(const signed byte*) xrs[(number) 8]  = { fill( 8, 0) }
(const signed byte*) xs[(number) 8]  = { (signed byte) -$34, (signed byte) -$34, (signed byte) -$34, (signed byte) 0, (signed byte) 0, (signed byte) $34, (signed byte) $34, (signed byte) $34 }
(const signed byte*) yp = (signed byte*)(number) $f5
(const signed byte*) yps[(number) 8]  = { fill( 8, 0) }
(const signed byte*) yr = (signed byte*)(number) $f1
(const signed byte*) yrs[(number) 8]  = { fill( 8, 0) }
(const signed byte*) ys[(number) 8]  = { (signed byte) -$34, (signed byte) 0, (signed byte) $34, (signed byte) -$34, (signed byte) $34, (signed byte) -$34, (signed byte) 0, (signed byte) $34 }
(const signed byte*) zr = (signed byte*)(number) $f2
(const signed byte*) zrs[(number) 8]  = { fill( 8, 0) }
(const signed byte*) zs[(number) 8]  = { (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34 }

Adding number conversion cast (unumber) $40 in 
Adding number conversion cast (unumber) $40 in 
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str_at::$0 ← (number) 0 != *((byte*) print_str_at::str#13)
Adding number conversion cast (snumber) 0 in (bool~) print_schar_at::$0 ← (signed byte) print_schar_at::b#22 < (number) 0
Adding number conversion cast (unumber) 1 in (byte*~) print_schar_at::$1 ← (byte*) print_schar_at::at#23 + (number) 1
Adding number conversion cast (unumber) 4 in (byte~) print_uchar_at::$0 ← (byte) print_uchar_at::b#1 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar_at::$2 ← (byte) print_uchar_at::b#2 & (number) $f
Adding number conversion cast (unumber) print_uchar_at::$2 in (number~) print_uchar_at::$2 ← (byte) print_uchar_at::b#2 & (unumber)(number) $f
Adding number conversion cast (unumber) 1 in (byte*~) print_uchar_at::$3 ← (byte*) print_uchar_at::at#2 + (number) 1
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) $ff in (bool~) anim::$0 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) != (number) $ff
Adding number conversion cast (unumber) $fe in (bool~) anim::$1 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) != (number) $fe
Adding number conversion cast (unumber) $fd in (bool~) anim::$2 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) != (number) $fd
Adding number conversion cast (unumber) 2 in (number~) anim::$8 ← (byte) anim::i#3 * (number) 2
Adding number conversion cast (unumber) anim::$8 in (number~) anim::$8 ← (byte) anim::i#3 * (unumber)(number) 2
Adding number conversion cast (unumber) $80 in (number~) anim::$9 ← (number) $80 + (byte~) anim::$13
Adding number conversion cast (unumber) anim::$9 in (number~) anim::$9 ← (unumber)(number) $80 + (byte~) anim::$13
Adding number conversion cast (unumber) $80 in (number~) anim::$10 ← (number) $80 + (byte~) anim::$14
Adding number conversion cast (unumber) anim::$10 in (number~) anim::$10 ← (unumber)(number) $80 + (byte~) anim::$14
Adding number conversion cast (snumber) 2 in (signed byte) sx#2 ← (signed byte) sx#10 + (number) 2
Adding number conversion cast (snumber) 3 in (signed byte) sy#2 ← (signed byte) sy#10 - (number) 3
Adding number conversion cast (unumber) $28*0 in (byte*~) debug_print_init::$1 ← (const byte*) SCREEN + (number) $28*(number) 0
Adding number conversion cast (unumber) $22 in (byte*~) debug_print_init::$2 ← (byte*~) debug_print_init::$1 + (number) $22
Adding number conversion cast (unumber) $28*1 in (byte*~) debug_print_init::$4 ← (const byte*) SCREEN + (number) $28*(number) 1
Adding number conversion cast (unumber) $22 in (byte*~) debug_print_init::$5 ← (byte*~) debug_print_init::$4 + (number) $22
Adding number conversion cast (unumber) $28*2 in (byte*~) debug_print_init::$7 ← (const byte*) SCREEN + (number) $28*(number) 2
Adding number conversion cast (unumber) $22 in (byte*~) debug_print_init::$8 ← (byte*~) debug_print_init::$7 + (number) $22
Adding number conversion cast (unumber) $28*$10 in (byte*~) debug_print_init::$10 ← (const byte*) SCREEN + (number) $28*(number) $10
Adding number conversion cast (unumber) $28*$11 in (byte*~) debug_print_init::$12 ← (const byte*) SCREEN + (number) $28*(number) $11
Adding number conversion cast (unumber) $28*$12 in (byte*~) debug_print_init::$14 ← (const byte*) SCREEN + (number) $28*(number) $12
Adding number conversion cast (unumber) $28*$13 in (byte*~) debug_print_init::$16 ← (const byte*) SCREEN + (number) $28*(number) $13
Adding number conversion cast (unumber) $28*$14 in (byte*~) debug_print_init::$18 ← (const byte*) SCREEN + (number) $28*(number) $14
Adding number conversion cast (unumber) $28*$15 in (byte*~) debug_print_init::$20 ← (const byte*) SCREEN + (number) $28*(number) $15
Adding number conversion cast (unumber) $28*$16 in (byte*~) debug_print_init::$22 ← (const byte*) SCREEN + (number) $28*(number) $16
Adding number conversion cast (unumber) $28*$17 in (byte*~) debug_print_init::$24 ← (const byte*) SCREEN + (number) $28*(number) $17
Adding number conversion cast (unumber) $28*$18 in (byte*~) debug_print_init::$26 ← (const byte*) SCREEN + (number) $28*(number) $18
Adding number conversion cast (unumber) $10*$28 in (byte*~) debug_print_init::$28 ← (const byte*) SCREEN + (number) $10*(number) $28
Adding number conversion cast (unumber) $10*$28 in (byte*~) debug_print_init::$29 ← (const byte*) debug_print_init::COLS + (number) $10*(number) $28
Adding number conversion cast (unumber) $28*0 in (byte*~) debug_print_init::$30 ← (byte*) debug_print_init::at_line#1 + (number) $28*(number) 0
Adding number conversion cast (unumber) $28*1 in (byte*~) debug_print_init::$33 ← (byte*) debug_print_init::at_line#2 + (number) $28*(number) 1
Adding number conversion cast (unumber) $28*2 in (byte*~) debug_print_init::$36 ← (byte*) debug_print_init::at_line#3 + (number) $28*(number) 2
Adding number conversion cast (unumber) 8 in (number~) debug_print_init::$39 ← (number) 8 + (byte) debug_print_init::i#5
Adding number conversion cast (unumber) debug_print_init::$39 in (number~) debug_print_init::$39 ← (unumber)(number) 8 + (byte) debug_print_init::i#5
Adding number conversion cast (unumber) $28*0 in (byte*~) debug_print_init::$40 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 0
Adding number conversion cast (unumber) $28*1 in (byte*~) debug_print_init::$43 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 1
Adding number conversion cast (unumber) $28*2 in (byte*~) debug_print_init::$46 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 2
Adding number conversion cast (unumber) $28*3 in (byte*~) debug_print_init::$49 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 3
Adding number conversion cast (unumber) $28*4 in (byte*~) debug_print_init::$52 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 4
Adding number conversion cast (unumber) $28*5 in (byte*~) debug_print_init::$55 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 5
Adding number conversion cast (unumber) $28*6 in (byte*~) debug_print_init::$58 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 6
Adding number conversion cast (unumber) $28*7 in (byte*~) debug_print_init::$61 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 7
Adding number conversion cast (unumber) $28*8 in (byte*~) debug_print_init::$64 ← (byte*) debug_print_init::at_cols#1 + (number) $28*(number) 8
Adding number conversion cast (unumber) 4 in (byte) debug_print_init::c#1 ← (byte) debug_print_init::c#6 + (number) 4
Adding number conversion cast (unumber) 0 in (byte) debug_print::print_schar_pos1_row#0 ← (number) 0
Adding number conversion cast (unumber) $25 in (byte) debug_print::print_schar_pos1_col#0 ← (number) $25
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos1_$0 ← (byte) debug_print::print_schar_pos1_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos1_$0 in (number~) debug_print::print_schar_pos1_$0 ← (byte) debug_print::print_schar_pos1_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 1 in (byte) debug_print::print_schar_pos2_row#0 ← (number) 1
Adding number conversion cast (unumber) $25 in (byte) debug_print::print_schar_pos2_col#0 ← (number) $25
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos2_$0 ← (byte) debug_print::print_schar_pos2_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos2_$0 in (number~) debug_print::print_schar_pos2_$0 ← (byte) debug_print::print_schar_pos2_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 2 in (byte) debug_print::print_schar_pos3_row#0 ← (number) 2
Adding number conversion cast (unumber) $25 in (byte) debug_print::print_schar_pos3_col#0 ← (number) $25
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos3_$0 ← (byte) debug_print::print_schar_pos3_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos3_$0 in (number~) debug_print::print_schar_pos3_$0 ← (byte) debug_print::print_schar_pos3_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 0 in (signed byte) debug_print::print_schar_pos4_sb#0 ← *((const signed byte*) rotation_matrix + (number) 0)
Adding number conversion cast (unumber) 4 in (byte) debug_print::print_schar_pos4_row#0 ← (number) 4
Adding number conversion cast (unumber) $1d in (byte) debug_print::print_schar_pos4_col#0 ← (number) $1d
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos4_$0 ← (byte) debug_print::print_schar_pos4_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos4_$0 in (number~) debug_print::print_schar_pos4_$0 ← (byte) debug_print::print_schar_pos4_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 1 in (signed byte) debug_print::print_schar_pos5_sb#0 ← *((const signed byte*) rotation_matrix + (number) 1)
Adding number conversion cast (unumber) 4 in (byte) debug_print::print_schar_pos5_row#0 ← (number) 4
Adding number conversion cast (unumber) $21 in (byte) debug_print::print_schar_pos5_col#0 ← (number) $21
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos5_$0 ← (byte) debug_print::print_schar_pos5_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos5_$0 in (number~) debug_print::print_schar_pos5_$0 ← (byte) debug_print::print_schar_pos5_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 2 in (signed byte) debug_print::print_schar_pos6_sb#0 ← *((const signed byte*) rotation_matrix + (number) 2)
Adding number conversion cast (unumber) 4 in (byte) debug_print::print_schar_pos6_row#0 ← (number) 4
Adding number conversion cast (unumber) $25 in (byte) debug_print::print_schar_pos6_col#0 ← (number) $25
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos6_$0 ← (byte) debug_print::print_schar_pos6_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos6_$0 in (number~) debug_print::print_schar_pos6_$0 ← (byte) debug_print::print_schar_pos6_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 3 in (signed byte) debug_print::print_schar_pos7_sb#0 ← *((const signed byte*) rotation_matrix + (number) 3)
Adding number conversion cast (unumber) 5 in (byte) debug_print::print_schar_pos7_row#0 ← (number) 5
Adding number conversion cast (unumber) $1d in (byte) debug_print::print_schar_pos7_col#0 ← (number) $1d
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos7_$0 ← (byte) debug_print::print_schar_pos7_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos7_$0 in (number~) debug_print::print_schar_pos7_$0 ← (byte) debug_print::print_schar_pos7_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 4 in (signed byte) debug_print::print_schar_pos8_sb#0 ← *((const signed byte*) rotation_matrix + (number) 4)
Adding number conversion cast (unumber) 5 in (byte) debug_print::print_schar_pos8_row#0 ← (number) 5
Adding number conversion cast (unumber) $21 in (byte) debug_print::print_schar_pos8_col#0 ← (number) $21
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos8_$0 ← (byte) debug_print::print_schar_pos8_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos8_$0 in (number~) debug_print::print_schar_pos8_$0 ← (byte) debug_print::print_schar_pos8_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 5 in (signed byte) debug_print::print_schar_pos9_sb#0 ← *((const signed byte*) rotation_matrix + (number) 5)
Adding number conversion cast (unumber) 5 in (byte) debug_print::print_schar_pos9_row#0 ← (number) 5
Adding number conversion cast (unumber) $25 in (byte) debug_print::print_schar_pos9_col#0 ← (number) $25
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos9_$0 ← (byte) debug_print::print_schar_pos9_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos9_$0 in (number~) debug_print::print_schar_pos9_$0 ← (byte) debug_print::print_schar_pos9_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 6 in (signed byte) debug_print::print_schar_pos10_sb#0 ← *((const signed byte*) rotation_matrix + (number) 6)
Adding number conversion cast (unumber) 6 in (byte) debug_print::print_schar_pos10_row#0 ← (number) 6
Adding number conversion cast (unumber) $1d in (byte) debug_print::print_schar_pos10_col#0 ← (number) $1d
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos10_$0 ← (byte) debug_print::print_schar_pos10_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos10_$0 in (number~) debug_print::print_schar_pos10_$0 ← (byte) debug_print::print_schar_pos10_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 7 in (signed byte) debug_print::print_schar_pos11_sb#0 ← *((const signed byte*) rotation_matrix + (number) 7)
Adding number conversion cast (unumber) 6 in (byte) debug_print::print_schar_pos11_row#0 ← (number) 6
Adding number conversion cast (unumber) $21 in (byte) debug_print::print_schar_pos11_col#0 ← (number) $21
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos11_$0 ← (byte) debug_print::print_schar_pos11_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos11_$0 in (number~) debug_print::print_schar_pos11_$0 ← (byte) debug_print::print_schar_pos11_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 8 in (signed byte) debug_print::print_schar_pos12_sb#0 ← *((const signed byte*) rotation_matrix + (number) 8)
Adding number conversion cast (unumber) 6 in (byte) debug_print::print_schar_pos12_row#0 ← (number) 6
Adding number conversion cast (unumber) $25 in (byte) debug_print::print_schar_pos12_col#0 ← (number) $25
Adding number conversion cast (unumber) $28 in (number~) debug_print::print_schar_pos12_$0 ← (byte) debug_print::print_schar_pos12_row#1 * (number) $28
Adding number conversion cast (unumber) debug_print::print_schar_pos12_$0 in (number~) debug_print::print_schar_pos12_$0 ← (byte) debug_print::print_schar_pos12_row#1 * (unumber)(number) $28
Adding number conversion cast (unumber) $13*$28 in (byte*~) debug_print::$12 ← (const byte*) SCREEN + (number) $13*(number) $28
Adding number conversion cast (unumber) $28*0 in (byte*~) debug_print::$13 ← (byte*) debug_print::at_line#1 + (number) $28*(number) 0
Adding number conversion cast (unumber) $28*1 in (byte*~) debug_print::$16 ← (byte*) debug_print::at_line#2 + (number) $28*(number) 1
Adding number conversion cast (unumber) $28*2 in (byte*~) debug_print::$19 ← (byte*) debug_print::at_line#3 + (number) $28*(number) 2
Adding number conversion cast (unumber) $28*3 in (byte*~) debug_print::$22 ← (byte*) debug_print::at_line#4 + (number) $28*(number) 3
Adding number conversion cast (unumber) $28*4 in (byte*~) debug_print::$25 ← (byte*) debug_print::at_line#5 + (number) $28*(number) 4
Adding number conversion cast (unumber) $28*5 in (byte*~) debug_print::$28 ← (byte*) debug_print::at_line#6 + (number) $28*(number) 5
Adding number conversion cast (unumber) 4 in (byte) debug_print::c#1 ← (byte) debug_print::c#8 + (number) 4
Adding number conversion cast (unumber) $ff in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (number) $ff
Adding number conversion cast (unumber) $3f8 in (byte*~) sprites_init::$0 ← (const byte*) sprites_init::SCREEN + (number) $3f8
Adding number conversion cast (unumber) $40 in (byte*~) sprites_init::$1 ← (const byte*) SPRITE / (number) $40
Adding number conversion cast (unumber) 0 in *((const signed byte*) rotation_matrix + (number) 0) ← (signed byte~) calculate_matrix::$10
Adding number conversion cast (unumber) 1 in *((const signed byte*) rotation_matrix + (number) 1) ← (signed byte~) calculate_matrix::$11
Adding number conversion cast (unumber) 2 in *((const signed byte*) rotation_matrix + (number) 2) ← (signed byte~) calculate_matrix::$12
Adding number conversion cast (unumber) 3 in *((const signed byte*) rotation_matrix + (number) 3) ← (signed byte~) calculate_matrix::$17
Adding number conversion cast (unumber) 4 in *((const signed byte*) rotation_matrix + (number) 4) ← (signed byte~) calculate_matrix::$22
Adding number conversion cast (unumber) 5 in *((const signed byte*) rotation_matrix + (number) 5) ← (signed byte~) calculate_matrix::$23
Adding number conversion cast (unumber) 6 in *((const signed byte*) rotation_matrix + (number) 6) ← (signed byte~) calculate_matrix::$28
Adding number conversion cast (unumber) 7 in *((const signed byte*) rotation_matrix + (number) 7) ← (signed byte~) calculate_matrix::$33
Adding number conversion cast (unumber) 8 in *((const signed byte*) rotation_matrix + (number) 8) ← (signed byte~) calculate_matrix::$34
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (byte) debug_print::print_schar_pos1_row#0 ← (unumber)(number) 0
Inlining cast (byte) debug_print::print_schar_pos1_col#0 ← (unumber)(number) $25
Inlining cast (byte) debug_print::print_schar_pos2_row#0 ← (unumber)(number) 1
Inlining cast (byte) debug_print::print_schar_pos2_col#0 ← (unumber)(number) $25
Inlining cast (byte) debug_print::print_schar_pos3_row#0 ← (unumber)(number) 2
Inlining cast (byte) debug_print::print_schar_pos3_col#0 ← (unumber)(number) $25
Inlining cast (byte) debug_print::print_schar_pos4_row#0 ← (unumber)(number) 4
Inlining cast (byte) debug_print::print_schar_pos4_col#0 ← (unumber)(number) $1d
Inlining cast (byte) debug_print::print_schar_pos5_row#0 ← (unumber)(number) 4
Inlining cast (byte) debug_print::print_schar_pos5_col#0 ← (unumber)(number) $21
Inlining cast (byte) debug_print::print_schar_pos6_row#0 ← (unumber)(number) 4
Inlining cast (byte) debug_print::print_schar_pos6_col#0 ← (unumber)(number) $25
Inlining cast (byte) debug_print::print_schar_pos7_row#0 ← (unumber)(number) 5
Inlining cast (byte) debug_print::print_schar_pos7_col#0 ← (unumber)(number) $1d
Inlining cast (byte) debug_print::print_schar_pos8_row#0 ← (unumber)(number) 5
Inlining cast (byte) debug_print::print_schar_pos8_col#0 ← (unumber)(number) $21
Inlining cast (byte) debug_print::print_schar_pos9_row#0 ← (unumber)(number) 5
Inlining cast (byte) debug_print::print_schar_pos9_col#0 ← (unumber)(number) $25
Inlining cast (byte) debug_print::print_schar_pos10_row#0 ← (unumber)(number) 6
Inlining cast (byte) debug_print::print_schar_pos10_col#0 ← (unumber)(number) $1d
Inlining cast (byte) debug_print::print_schar_pos11_row#0 ← (unumber)(number) 6
Inlining cast (byte) debug_print::print_schar_pos11_col#0 ← (unumber)(number) $21
Inlining cast (byte) debug_print::print_schar_pos12_row#0 ← (unumber)(number) 6
Inlining cast (byte) debug_print::print_schar_pos12_col#0 ← (unumber)(number) $25
Inlining cast *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (unumber)(number) $ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53249
Simplifying constant pointer cast (byte*) 53287
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (signed byte*) 240
Simplifying constant pointer cast (signed byte*) 241
Simplifying constant pointer cast (signed byte*) 242
Simplifying constant pointer cast (signed byte*) 243
Simplifying constant pointer cast (signed byte*) 244
Simplifying constant pointer cast (signed byte*) 245
Simplifying constant pointer cast (word*) 246
Simplifying constant pointer cast (word*) 248
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast $3e8
Simplifying constant integer cast $ff
Simplifying constant integer cast $fe
Simplifying constant integer cast $fd
Simplifying constant integer cast 2
Simplifying constant integer cast $80
Simplifying constant integer cast $80
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast $22
Simplifying constant integer cast $22
Simplifying constant integer cast $22
Simplifying constant integer cast 8
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $25
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast $25
Simplifying constant integer cast $28
Simplifying constant integer cast 2
Simplifying constant integer cast $25
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $1d
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast $21
Simplifying constant integer cast $28
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast $25
Simplifying constant integer cast $28
Simplifying constant integer cast 3
Simplifying constant integer cast 5
Simplifying constant integer cast $1d
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast $21
Simplifying constant integer cast $28
Simplifying constant integer cast 5
Simplifying constant integer cast 5
Simplifying constant integer cast $25
Simplifying constant integer cast $28
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Simplifying constant integer cast $1d
Simplifying constant integer cast $28
Simplifying constant integer cast 7
Simplifying constant integer cast 6
Simplifying constant integer cast $21
Simplifying constant integer cast $28
Simplifying constant integer cast 8
Simplifying constant integer cast 6
Simplifying constant integer cast $25
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $ff
Simplifying constant integer cast $3f8
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $fe
Finalized unsigned number type (byte) $fd
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $80
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 3
Finalized unsigned number type (byte) $22
Finalized unsigned number type (byte) $22
Finalized unsigned number type (byte) $22
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $25
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $25
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $25
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $1d
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $21
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $25
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) $1d
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) $21
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) $25
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $1d
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $21
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $25
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (word) $3f8
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_uchar_at::$2 ← (byte) print_uchar_at::b#2 & (byte) $f
Inferred type updated to byte in (unumber~) anim::$8 ← (byte) anim::i#3 * (byte) 2
Inferred type updated to byte in (unumber~) anim::$9 ← (byte) $80 + (byte~) anim::$13
Inferred type updated to byte in (unumber~) anim::$10 ← (byte) $80 + (byte~) anim::$14
Inferred type updated to byte in (unumber~) debug_print_init::$39 ← (byte) 8 + (byte) debug_print_init::i#5
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos1_$0 ← (byte) debug_print::print_schar_pos1_row#1 * (byte) $28
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos2_$0 ← (byte) debug_print::print_schar_pos2_row#1 * (byte) $28
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos3_$0 ← (byte) debug_print::print_schar_pos3_row#1 * (byte) $28
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos4_$0 ← (byte) debug_print::print_schar_pos4_row#1 * (byte) $28
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos5_$0 ← (byte) debug_print::print_schar_pos5_row#1 * (byte) $28
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos6_$0 ← (byte) debug_print::print_schar_pos6_row#1 * (byte) $28
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos7_$0 ← (byte) debug_print::print_schar_pos7_row#1 * (byte) $28
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos8_$0 ← (byte) debug_print::print_schar_pos8_row#1 * (byte) $28
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos9_$0 ← (byte) debug_print::print_schar_pos9_row#1 * (byte) $28
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos10_$0 ← (byte) debug_print::print_schar_pos10_row#1 * (byte) $28
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos11_$0 ← (byte) debug_print::print_schar_pos11_row#1 * (byte) $28
Inferred type updated to byte in (unumber~) debug_print::print_schar_pos12_$0 ← (byte) debug_print::print_schar_pos12_row#1 * (byte) $28
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_str_at::str#13 = print_str_at::str#14 
Alias print_str_at::at#13 = print_str_at::at#14 
Alias print_schar_at::at#21 = print_schar_at::at#24 print_schar_at::at#25 print_schar_at::at#22 print_schar_at::at#26 
Alias print_schar_at::b#22 = print_schar_at::b#25 print_schar_at::b#23 print_schar_at::b#27 print_schar_at::b#26 
Alias print_schar_at::b#0 = print_schar_at::$5 
Alias print_uchar_at::at#0 = print_schar_at::$1 
Alias print_uchar_at::b#1 = print_uchar_at::b#2 
Alias print_uchar_at::at#1 = print_uchar_at::at#2 
Alias print_char_at::at#3 = print_uchar_at::$3 
Alias sx#15 = sx#20 sx#24 
Alias sy#15 = sy#21 sy#26 
Alias print_screen#30 = print_screen#44 print_screen#56 
Alias sx#0 = sx#7 sx#8 sx#1 
Alias sy#0 = sy#7 sy#8 sy#1 
Alias sx#16 = sx#9 sx#28 sx#27 
Alias sy#16 = sy#9 sy#31 sy#30 
Alias print_screen#47 = print_screen#49 print_screen#50 print_screen#48 
Alias anim::i#2 = anim::i#3 
Alias sx#10 = sx#23 sx#26 sx#17 
Alias sy#10 = sy#24 sy#28 sy#17 
Alias print_screen#31 = print_screen#45 print_screen#46 print_screen#55 
Alias anim::i2#0 = anim::$8 
Alias sx#11 = sx#18 sx#3 
Alias sy#11 = sy#18 sy#3 
Alias print_str_at::at#1 = debug_print_init::$2 
Alias print_str_at::at#2 = debug_print_init::$5 
Alias print_str_at::at#3 = debug_print_init::$8 
Alias print_str_at::at#4 = debug_print_init::$10 
Alias print_str_at::at#5 = debug_print_init::$12 
Alias print_str_at::at#6 = debug_print_init::$14 
Alias print_str_at::at#7 = debug_print_init::$16 
Alias print_str_at::at#8 = debug_print_init::$18 
Alias print_str_at::at#9 = debug_print_init::$20 
Alias print_str_at::at#10 = debug_print_init::$22 
Alias print_str_at::at#11 = debug_print_init::$24 
Alias print_str_at::at#12 = debug_print_init::$26 
Alias debug_print_init::at_line#0 = debug_print_init::$28 
Alias debug_print_init::at_cols#0 = debug_print_init::$29 
Alias print_schar_at::at#0 = debug_print_init::$31 
Alias debug_print_init::at_line#1 = debug_print_init::at_line#2 debug_print_init::at_line#3 debug_print_init::at_line#6 
Alias debug_print_init::c#2 = debug_print_init::c#3 debug_print_init::c#4 debug_print_init::c#7 
Alias debug_print_init::i#2 = debug_print_init::i#3 debug_print_init::i#4 debug_print_init::i#7 
Alias debug_print_init::at_cols#2 = debug_print_init::at_cols#4 debug_print_init::at_cols#5 debug_print_init::at_cols#3 
Alias print_schar_at::at#1 = debug_print_init::$34 
Alias print_schar_at::at#2 = debug_print_init::$37 
Alias debug_print_init::col#0 = debug_print_init::$39 
Alias debug_print_init::c#5 = debug_print_init::c#6 
Alias debug_print_init::i#5 = debug_print_init::i#6 
Alias debug_print_init::at_line#4 = debug_print_init::at_line#5 
Alias debug_print_init::at_cols#1 = debug_print_init::at_cols#6 
Alias debug_print::print_schar_pos1_row#0 = debug_print::print_schar_pos1_row#1 
Alias print_screen#10 = print_screen#3 print_screen#17 print_screen#32 print_screen#18 print_screen#4 print_screen#33 print_screen#19 print_screen#5 print_screen#34 print_screen#20 print_screen#6 print_screen#35 print_screen#21 print_screen#7 print_screen#36 print_screen#22 print_screen#8 print_screen#37 print_screen#23 print_screen#9 print_screen#38 print_screen#24 print_screen#39 print_screen#25 print_screen#11 print_screen#40 print_screen#26 print_screen#12 print_screen#41 print_screen#27 print_screen#13 print_screen#42 print_screen#28 print_screen#14 
Alias debug_print::print_schar_pos1_col#0 = debug_print::print_schar_pos1_col#1 
Alias debug_print::print_schar_pos1_sb#0 = debug_print::print_schar_pos1_sb#1 
Alias sy#12 = sy#25 sy#29 sy#19 
Alias print_schar_at::at#3 = debug_print::print_schar_pos1_$2 
Alias debug_print::print_schar_pos2_row#0 = debug_print::print_schar_pos2_row#1 
Alias debug_print::print_schar_pos2_col#0 = debug_print::print_schar_pos2_col#1 
Alias debug_print::print_schar_pos2_sb#0 = debug_print::print_schar_pos2_sb#1 
Alias print_schar_at::at#4 = debug_print::print_schar_pos2_$2 
Alias debug_print::print_schar_pos3_row#0 = debug_print::print_schar_pos3_row#1 
Alias debug_print::print_schar_pos3_col#0 = debug_print::print_schar_pos3_col#1 
Alias debug_print::print_schar_pos3_sb#0 = debug_print::print_schar_pos3_sb#1 
Alias print_schar_at::at#5 = debug_print::print_schar_pos3_$2 
Alias debug_print::print_schar_pos4_row#0 = debug_print::print_schar_pos4_row#1 
Alias debug_print::print_schar_pos4_col#0 = debug_print::print_schar_pos4_col#1 
Alias debug_print::print_schar_pos4_sb#0 = debug_print::print_schar_pos4_sb#1 
Alias print_schar_at::at#6 = debug_print::print_schar_pos4_$2 
Alias debug_print::print_schar_pos5_row#0 = debug_print::print_schar_pos5_row#1 
Alias debug_print::print_schar_pos5_col#0 = debug_print::print_schar_pos5_col#1 
Alias debug_print::print_schar_pos5_sb#0 = debug_print::print_schar_pos5_sb#1 
Alias print_schar_at::at#7 = debug_print::print_schar_pos5_$2 
Alias debug_print::print_schar_pos6_row#0 = debug_print::print_schar_pos6_row#1 
Alias debug_print::print_schar_pos6_col#0 = debug_print::print_schar_pos6_col#1 
Alias debug_print::print_schar_pos6_sb#0 = debug_print::print_schar_pos6_sb#1 
Alias print_schar_at::at#8 = debug_print::print_schar_pos6_$2 
Alias debug_print::print_schar_pos7_row#0 = debug_print::print_schar_pos7_row#1 
Alias debug_print::print_schar_pos7_col#0 = debug_print::print_schar_pos7_col#1 
Alias debug_print::print_schar_pos7_sb#0 = debug_print::print_schar_pos7_sb#1 
Alias print_schar_at::at#9 = debug_print::print_schar_pos7_$2 
Alias debug_print::print_schar_pos8_row#0 = debug_print::print_schar_pos8_row#1 
Alias debug_print::print_schar_pos8_col#0 = debug_print::print_schar_pos8_col#1 
Alias debug_print::print_schar_pos8_sb#0 = debug_print::print_schar_pos8_sb#1 
Alias print_schar_at::at#10 = debug_print::print_schar_pos8_$2 
Alias debug_print::print_schar_pos9_row#0 = debug_print::print_schar_pos9_row#1 
Alias debug_print::print_schar_pos9_col#0 = debug_print::print_schar_pos9_col#1 
Alias debug_print::print_schar_pos9_sb#0 = debug_print::print_schar_pos9_sb#1 
Alias print_schar_at::at#11 = debug_print::print_schar_pos9_$2 
Alias debug_print::print_schar_pos10_row#0 = debug_print::print_schar_pos10_row#1 
Alias debug_print::print_schar_pos10_col#0 = debug_print::print_schar_pos10_col#1 
Alias debug_print::print_schar_pos10_sb#0 = debug_print::print_schar_pos10_sb#1 
Alias print_schar_at::at#12 = debug_print::print_schar_pos10_$2 
Alias debug_print::print_schar_pos11_row#0 = debug_print::print_schar_pos11_row#1 
Alias debug_print::print_schar_pos11_col#0 = debug_print::print_schar_pos11_col#1 
Alias debug_print::print_schar_pos11_sb#0 = debug_print::print_schar_pos11_sb#1 
Alias print_schar_at::at#13 = debug_print::print_schar_pos11_$2 
Alias debug_print::print_schar_pos12_row#0 = debug_print::print_schar_pos12_row#1 
Alias debug_print::print_schar_pos12_col#0 = debug_print::print_schar_pos12_col#1 
Alias debug_print::print_schar_pos12_sb#0 = debug_print::print_schar_pos12_sb#1 
Alias print_schar_at::at#14 = debug_print::print_schar_pos12_$2 
Alias debug_print::at_line#0 = debug_print::$12 
Alias print_schar_at::at#15 = debug_print::$14 
Alias debug_print::at_line#1 = debug_print::at_line#2 debug_print::at_line#3 debug_print::at_line#4 debug_print::at_line#5 debug_print::at_line#6 debug_print::at_line#7 
Alias debug_print::c#2 = debug_print::c#3 debug_print::c#4 debug_print::c#5 debug_print::c#6 debug_print::c#7 debug_print::c#8 
Alias debug_print::i#2 = debug_print::i#3 debug_print::i#4 debug_print::i#5 debug_print::i#6 debug_print::i#7 debug_print::i#8 
Alias print_schar_at::at#16 = debug_print::$17 
Alias print_schar_at::at#17 = debug_print::$20 
Alias print_schar_at::at#18 = debug_print::$23 
Alias print_schar_at::at#19 = debug_print::$26 
Alias print_schar_at::at#20 = debug_print::$29 
Alias sprites_init::sprites_ptr#0 = sprites_init::$0 
Alias calculate_matrix::t1#0 = calculate_matrix::$0 
Alias calculate_matrix::t2#0 = calculate_matrix::$1 
Alias calculate_matrix::t3#0 = calculate_matrix::$2 
Alias calculate_matrix::t4#0 = calculate_matrix::$3 
Alias calculate_matrix::t5#0 = calculate_matrix::$4 
Alias calculate_matrix::t6#0 = calculate_matrix::$5 
Alias calculate_matrix::t7#0 = calculate_matrix::$6 
Alias calculate_matrix::t8#0 = calculate_matrix::$7 
Alias calculate_matrix::t9#0 = calculate_matrix::$8 
Alias calculate_matrix::t10#0 = calculate_matrix::$9 
Alias sx#19 = sx#4 
Alias sy#20 = sy#4 
Alias print_screen#0 = print_screen#43 print_screen#29 print_screen#15 print_screen#1 
Alias sx#13 = sx#5 sx#14 sx#6 
Alias sy#13 = sy#5 sy#14 sy#6 
Successful SSA optimization Pass2AliasElimination
Alias print_schar_at::at#21 = print_schar_at::at#23 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte) print_uchar_at::b#1 (byte) print_uchar_at::b#0
Identical Phi Values (byte*) print_uchar_at::at#1 (byte*) print_uchar_at::at#0
Identical Phi Values (byte*) print_screen#2 (byte*) print_screen#16
Identical Phi Values (signed byte) sx#15 (signed byte) sx#19
Identical Phi Values (signed byte) sy#15 (signed byte) sy#20
Identical Phi Values (byte*) print_screen#30 (byte*) print_screen#0
Identical Phi Values (signed byte) sx#0 (signed byte) sx#11
Identical Phi Values (signed byte) sy#0 (signed byte) sy#11
Identical Phi Values (signed byte) sx#21 (signed byte) sx#15
Identical Phi Values (signed byte) sy#22 (signed byte) sy#15
Identical Phi Values (byte*) print_screen#54 (byte*) print_screen#30
Identical Phi Values (signed byte) sx#25 (signed byte) sx#11
Identical Phi Values (signed byte) sy#27 (signed byte) sy#11
Identical Phi Values (byte*) print_screen#52 (byte*) print_screen#53
Identical Phi Values (signed byte) sx#22 (signed byte) sx#25
Identical Phi Values (signed byte) sy#23 (signed byte) sy#27
Identical Phi Values (byte*) print_screen#51 (byte*) print_screen#52
Identical Phi Values (signed byte) sx#16 (signed byte) sx#22
Identical Phi Values (signed byte) sy#16 (signed byte) sy#23
Identical Phi Values (byte*) print_screen#47 (byte*) print_screen#51
Identical Phi Values (signed byte) sx#10 (signed byte) sx#16
Identical Phi Values (signed byte) sy#10 (signed byte) sy#16
Identical Phi Values (byte*) print_screen#31 (byte*) print_screen#47
Identical Phi Values (byte*) print_screen#16 (byte*) print_screen#30
Identical Phi Values (byte) debug_print_init::i#5 (byte) debug_print_init::i#2
Identical Phi Values (byte*) debug_print_init::at_cols#1 (byte*) debug_print_init::at_cols#2
Identical Phi Values (byte) debug_print_init::c#5 (byte) debug_print_init::c#2
Identical Phi Values (byte*) debug_print_init::at_line#4 (byte*) debug_print_init::at_line#1
Identical Phi Values (signed byte) sx#12 (signed byte) sx#10
Identical Phi Values (byte*) print_screen#10 (byte*) print_screen#31
Identical Phi Values (signed byte) sy#12 (signed byte) sy#10
Identical Phi Values (byte*) debug_print::at_line#1 (byte*) debug_print::at_line#0
Identical Phi Values (byte*) sprites_init::sprites_ptr#1 (byte*) sprites_init::sprites_ptr#0
Identical Phi Values (signed byte) calculate_matrix::sy#1 (signed byte) calculate_matrix::sy#0
Identical Phi Values (signed byte) calculate_matrix::sz#1 (signed byte) calculate_matrix::sz#0
Identical Phi Values (signed byte) calculate_matrix::sx#1 (signed byte) calculate_matrix::sx#0
Identical Phi Values (signed byte) rotate_matrix::x#1 (signed byte) rotate_matrix::x#0
Identical Phi Values (signed byte) rotate_matrix::y#1 (signed byte) rotate_matrix::y#0
Identical Phi Values (signed byte) rotate_matrix::z#1 (signed byte) rotate_matrix::z#0
Identical Phi Values (signed byte) sx#13 (signed byte) sx#0
Identical Phi Values (signed byte) sy#13 (signed byte) sy#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_screen#53 (byte*) print_screen#0
Identical Phi Values (byte*) debug_print_init::at_line#1 (byte*) debug_print_init::at_line#0
Identical Phi Values (byte*) debug_print_init::at_cols#2 (byte*) debug_print_init::at_cols#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) print_str_at::$0 [16] if((byte) 0!=*((byte*) print_str_at::str#13)) goto print_str_at::@2
Simple Condition (bool~) print_schar_at::$0 [23] if((signed byte) print_schar_at::b#22<(signed byte) 0) goto print_schar_at::@1
Simple Condition (bool~) anim::$0 [70] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto anim::@2
Simple Condition (bool~) anim::$1 [73] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fe) goto anim::@3
Simple Condition (bool~) anim::$2 [76] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fd) goto anim::@4
Simple Condition (bool~) anim::$11 [105] if((byte) anim::i#1!=rangelast(0,7)) goto anim::@6
Simple Condition (bool~) debug_print_init::$67 [211] if((byte) debug_print_init::j#1!=rangelast(0,3)) goto debug_print_init::@2
Simple Condition (bool~) debug_print_init::$68 [215] if((byte) debug_print_init::i#1!=rangelast(0,7)) goto debug_print_init::@1
Simple Condition (bool~) debug_print::$31 [345] if((byte) debug_print::i#1!=rangelast(0,7)) goto debug_print::@1
Simple Condition (bool~) sprites_init::$2 [356] if((byte) sprites_init::i#1!=rangelast(0,7)) goto sprites_init::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [59] *((const word*) psp1) ← (word)(const byte*) mulf_sqr1
Constant right-side identified [60] *((const word*) psp2) ← (word)(const byte*) mulf_sqr2
Constant right-side identified [114] (byte*~) debug_print_init::$1 ← (const byte*) SCREEN + (byte)(number) $28*(number) 0
Constant right-side identified [118] (byte*~) debug_print_init::$4 ← (const byte*) SCREEN + (byte)(number) $28*(number) 1
Constant right-side identified [122] (byte*~) debug_print_init::$7 ← (const byte*) SCREEN + (byte)(number) $28*(number) 2
Constant right-side identified [126] (byte*) print_str_at::at#4 ← (const byte*) SCREEN + (word)(number) $28*(number) $10
Constant right-side identified [129] (byte*) print_str_at::at#5 ← (const byte*) SCREEN + (word)(number) $28*(number) $11
Constant right-side identified [132] (byte*) print_str_at::at#6 ← (const byte*) SCREEN + (word)(number) $28*(number) $12
Constant right-side identified [135] (byte*) print_str_at::at#7 ← (const byte*) SCREEN + (word)(number) $28*(number) $13
Constant right-side identified [138] (byte*) print_str_at::at#8 ← (const byte*) SCREEN + (word)(number) $28*(number) $14
Constant right-side identified [141] (byte*) print_str_at::at#9 ← (const byte*) SCREEN + (word)(number) $28*(number) $15
Constant right-side identified [144] (byte*) print_str_at::at#10 ← (const byte*) SCREEN + (word)(number) $28*(number) $16
Constant right-side identified [147] (byte*) print_str_at::at#11 ← (const byte*) SCREEN + (word)(number) $28*(number) $17
Constant right-side identified [150] (byte*) print_str_at::at#12 ← (const byte*) SCREEN + (word)(number) $28*(number) $18
Constant right-side identified [153] (byte*) debug_print_init::at_line#0 ← (const byte*) SCREEN + (word)(number) $10*(number) $28
Constant right-side identified [155] (byte*) debug_print_init::at_cols#0 ← (const byte*) debug_print_init::COLS + (word)(number) $10*(number) $28
Constant right-side identified [314] (byte*) debug_print::at_line#0 ← (const byte*) SCREEN + (word)(number) $13*(number) $28
Constant right-side identified [348] (byte*) sprites_init::sprites_ptr#0 ← (const byte*) sprites_init::SCREEN + (word) $3f8
Constant right-side identified [351] (byte*~) sprites_init::$1 ← (const byte*) SPRITE / (byte) $40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) print_char_at::ch#0 = '-'
Constant (const byte) print_char_at::ch#1 = ' '
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const signed byte) calculate_matrix::sz#0 = sz
Constant (const byte) anim::i#0 = 0
Constant (const byte*) debug_print_init::$1 = SCREEN+(byte)$28*0
Constant (const byte*) print_str_at::str#1 = debug_print_init::str
Constant (const byte*) debug_print_init::$4 = SCREEN+(byte)$28*1
Constant (const byte*) print_str_at::str#2 = debug_print_init::str1
Constant (const byte*) debug_print_init::$7 = SCREEN+(byte)$28*2
Constant (const byte*) print_str_at::str#3 = debug_print_init::str2
Constant (const byte*) print_str_at::at#4 = SCREEN+(word)$28*$10
Constant (const byte*) print_str_at::str#4 = debug_print_init::str3
Constant (const byte*) print_str_at::at#5 = SCREEN+(word)$28*$11
Constant (const byte*) print_str_at::str#5 = debug_print_init::str4
Constant (const byte*) print_str_at::at#6 = SCREEN+(word)$28*$12
Constant (const byte*) print_str_at::str#6 = debug_print_init::str5
Constant (const byte*) print_str_at::at#7 = SCREEN+(word)$28*$13
Constant (const byte*) print_str_at::str#7 = debug_print_init::str6
Constant (const byte*) print_str_at::at#8 = SCREEN+(word)$28*$14
Constant (const byte*) print_str_at::str#8 = debug_print_init::str7
Constant (const byte*) print_str_at::at#9 = SCREEN+(word)$28*$15
Constant (const byte*) print_str_at::str#9 = debug_print_init::str8
Constant (const byte*) print_str_at::at#10 = SCREEN+(word)$28*$16
Constant (const byte*) print_str_at::str#10 = debug_print_init::str9
Constant (const byte*) print_str_at::at#11 = SCREEN+(word)$28*$17
Constant (const byte*) print_str_at::str#11 = debug_print_init::str10
Constant (const byte*) print_str_at::at#12 = SCREEN+(word)$28*$18
Constant (const byte*) print_str_at::str#12 = debug_print_init::str11
Constant (const byte*) debug_print_init::at_line#0 = SCREEN+(word)$10*$28
Constant (const byte) debug_print_init::c#0 = 4
Constant (const byte*) debug_print_init::at_cols#0 = debug_print_init::COLS+(word)$10*$28
Constant (const byte) debug_print_init::i#0 = 0
Constant (const byte) debug_print_init::j#0 = 0
Constant (const byte) debug_print::print_schar_pos1_row#0 = 0
Constant (const byte) debug_print::print_schar_pos1_col#0 = $25
Constant (const byte) debug_print::print_schar_pos2_row#0 = 1
Constant (const byte) debug_print::print_schar_pos2_col#0 = $25
Constant (const signed byte) debug_print::print_schar_pos3_sb#0 = sz
Constant (const byte) debug_print::print_schar_pos3_row#0 = 2
Constant (const byte) debug_print::print_schar_pos3_col#0 = $25
Constant (const byte) debug_print::print_schar_pos4_row#0 = 4
Constant (const byte) debug_print::print_schar_pos4_col#0 = $1d
Constant (const byte) debug_print::print_schar_pos5_row#0 = 4
Constant (const byte) debug_print::print_schar_pos5_col#0 = $21
Constant (const byte) debug_print::print_schar_pos6_row#0 = 4
Constant (const byte) debug_print::print_schar_pos6_col#0 = $25
Constant (const byte) debug_print::print_schar_pos7_row#0 = 5
Constant (const byte) debug_print::print_schar_pos7_col#0 = $1d
Constant (const byte) debug_print::print_schar_pos8_row#0 = 5
Constant (const byte) debug_print::print_schar_pos8_col#0 = $21
Constant (const byte) debug_print::print_schar_pos9_row#0 = 5
Constant (const byte) debug_print::print_schar_pos9_col#0 = $25
Constant (const byte) debug_print::print_schar_pos10_row#0 = 6
Constant (const byte) debug_print::print_schar_pos10_col#0 = $1d
Constant (const byte) debug_print::print_schar_pos11_row#0 = 6
Constant (const byte) debug_print::print_schar_pos11_col#0 = $21
Constant (const byte) debug_print::print_schar_pos12_row#0 = 6
Constant (const byte) debug_print::print_schar_pos12_col#0 = $25
Constant (const byte*) debug_print::at_line#0 = SCREEN+(word)$13*$28
Constant (const byte) debug_print::c#0 = 4
Constant (const byte) debug_print::i#0 = 0
Constant (const byte*) sprites_init::sprites_ptr#0 = sprites_init::SCREEN+$3f8
Constant (const byte) sprites_init::i#0 = 0
Constant (const byte*) sprites_init::$1 = SPRITE/$40
Constant (const byte*) print_screen#0 = (byte*) 1024
Constant (const signed byte) sx#19 = 0
Constant (const signed byte) sy#20 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)print_screen#0
Constant (const signed byte) print_schar_at::b#6 = debug_print::print_schar_pos3_sb#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$4 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)sprites_init::$1 in [352] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← (byte)(const byte*) sprites_init::$1
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
if() condition always true - replacing block destination [67] if(true) goto anim::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [103] anim::i#1 ← ++ anim::i#2 to ++
Resolved ranged comparison value [105] if(anim::i#1!=rangelast(0,7)) goto anim::@6 to (number) 8
Resolved ranged next value [209] debug_print_init::j#1 ← ++ debug_print_init::j#2 to ++
Resolved ranged comparison value [211] if(debug_print_init::j#1!=rangelast(0,3)) goto debug_print_init::@2 to (number) 4
Resolved ranged next value [213] debug_print_init::i#1 ← ++ debug_print_init::i#2 to ++
Resolved ranged comparison value [215] if(debug_print_init::i#1!=rangelast(0,7)) goto debug_print_init::@1 to (number) 8
Resolved ranged next value [343] debug_print::i#1 ← ++ debug_print::i#2 to ++
Resolved ranged comparison value [345] if(debug_print::i#1!=rangelast(0,7)) goto debug_print::@1 to (number) 8
Resolved ranged next value [354] sprites_init::i#1 ← ++ sprites_init::i#2 to ++
Resolved ranged comparison value [356] if(sprites_init::i#1!=rangelast(0,7)) goto sprites_init::@1 to (number) 8
Converting *(pointer+n) to pointer[n] [176] *((byte*~) debug_print_init::$42) ← (byte) debug_print_init::col#0  -- *(debug_print_init::$41 + debug_print_init::j#2)
Converting *(pointer+n) to pointer[n] [180] *((byte*~) debug_print_init::$45) ← (byte) debug_print_init::col#0  -- *(debug_print_init::$44 + debug_print_init::j#2)
Converting *(pointer+n) to pointer[n] [184] *((byte*~) debug_print_init::$48) ← (byte) debug_print_init::col#0  -- *(debug_print_init::$47 + debug_print_init::j#2)
Converting *(pointer+n) to pointer[n] [188] *((byte*~) debug_print_init::$51) ← (byte) debug_print_init::col#0  -- *(debug_print_init::$50 + debug_print_init::j#2)
Converting *(pointer+n) to pointer[n] [192] *((byte*~) debug_print_init::$54) ← (byte) debug_print_init::col#0  -- *(debug_print_init::$53 + debug_print_init::j#2)
Converting *(pointer+n) to pointer[n] [196] *((byte*~) debug_print_init::$57) ← (byte) debug_print_init::col#0  -- *(debug_print_init::$56 + debug_print_init::j#2)
Converting *(pointer+n) to pointer[n] [200] *((byte*~) debug_print_init::$60) ← (byte) debug_print_init::col#0  -- *(debug_print_init::$59 + debug_print_init::j#2)
Converting *(pointer+n) to pointer[n] [204] *((byte*~) debug_print_init::$63) ← (byte) debug_print_init::col#0  -- *(debug_print_init::$62 + debug_print_init::j#2)
Converting *(pointer+n) to pointer[n] [208] *((byte*~) debug_print_init::$66) ← (byte) debug_print_init::col#0  -- *(debug_print_init::$65 + debug_print_init::j#2)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying constant evaluating to zero (byte)(number) $28*(number) 0 in 
Simplifying constant evaluating to zero (byte)(number) $28*(number) 0 in [158] (byte*~) debug_print_init::$30 ← (const byte*) debug_print_init::at_line#0 + (byte)(number) $28*(number) 0
Simplifying constant evaluating to zero (byte)(number) $28*(number) 0 in [173] (byte*~) debug_print_init::$40 ← (const byte*) debug_print_init::at_cols#0 + (byte)(number) $28*(number) 0
Simplifying constant evaluating to zero (byte)(number) $28*(number) 0 in [318] (byte*~) debug_print::$13 ← (const byte*) debug_print::at_line#0 + (byte)(number) $28*(number) 0
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero SCREEN in 
Simplifying expression containing zero debug_print_init::at_line#0 in [158] (byte*~) debug_print_init::$30 ← (const byte*) debug_print_init::at_line#0 + (byte) 0
Simplifying expression containing zero debug_print_init::at_cols#0 in [173] (byte*~) debug_print_init::$40 ← (const byte*) debug_print_init::at_cols#0 + (byte) 0
Simplifying expression containing zero rotation_matrix in [242] (signed byte) debug_print::print_schar_pos4_sb#0 ← *((const signed byte*) rotation_matrix + (byte) 0)
Simplifying expression containing zero debug_print::at_line#0 in [318] (byte*~) debug_print::$13 ← (const byte*) debug_print::at_line#0 + (byte) 0
Simplifying expression containing zero calculate_matrix::sy#0 in [359] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (const signed byte) calculate_matrix::sz#0
Simplifying expression containing zero calculate_matrix::sy#0 in [360] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (const signed byte) calculate_matrix::sz#0
Simplifying expression containing zero calculate_matrix::sx#0 in [361] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 + (const signed byte) calculate_matrix::sz#0
Simplifying expression containing zero calculate_matrix::sx#0 in [362] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 - (const signed byte) calculate_matrix::sz#0
Simplifying expression containing zero rotation_matrix in [370] *((const signed byte*) rotation_matrix + (byte) 0) ← (signed byte~) calculate_matrix::$10
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) debug_print_init::$42 and assignment [115] (byte*~) debug_print_init::$42 ← (byte*~) debug_print_init::$41 + (byte) debug_print_init::j#2
Eliminating unused variable (byte*~) debug_print_init::$45 and assignment [119] (byte*~) debug_print_init::$45 ← (byte*~) debug_print_init::$44 + (byte) debug_print_init::j#2
Eliminating unused variable (byte*~) debug_print_init::$48 and assignment [123] (byte*~) debug_print_init::$48 ← (byte*~) debug_print_init::$47 + (byte) debug_print_init::j#2
Eliminating unused variable (byte*~) debug_print_init::$51 and assignment [127] (byte*~) debug_print_init::$51 ← (byte*~) debug_print_init::$50 + (byte) debug_print_init::j#2
Eliminating unused variable (byte*~) debug_print_init::$54 and assignment [131] (byte*~) debug_print_init::$54 ← (byte*~) debug_print_init::$53 + (byte) debug_print_init::j#2
Eliminating unused variable (byte*~) debug_print_init::$57 and assignment [135] (byte*~) debug_print_init::$57 ← (byte*~) debug_print_init::$56 + (byte) debug_print_init::j#2
Eliminating unused variable (byte*~) debug_print_init::$60 and assignment [139] (byte*~) debug_print_init::$60 ← (byte*~) debug_print_init::$59 + (byte) debug_print_init::j#2
Eliminating unused variable (byte*~) debug_print_init::$63 and assignment [143] (byte*~) debug_print_init::$63 ← (byte*~) debug_print_init::$62 + (byte) debug_print_init::j#2
Eliminating unused variable (byte*~) debug_print_init::$66 and assignment [147] (byte*~) debug_print_init::$66 ← (byte*~) debug_print_init::$65 + (byte) debug_print_init::j#2
Eliminating unused constant (const void*) memset::return#2
Eliminating unused constant (const signed byte) calculate_matrix::sz#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block anim::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [75] if((byte) anim::i#1!=(number) 8) goto anim::@6
Adding number conversion cast (unumber) 4 in [140] if((byte) debug_print_init::j#1!=(number) 4) goto debug_print_init::@2
Adding number conversion cast (unumber) 8 in [143] if((byte) debug_print_init::i#1!=(number) 8) goto debug_print_init::@1
Adding number conversion cast (unumber) 8 in [242] if((byte) debug_print::i#1!=(number) 8) goto debug_print::@1
Adding number conversion cast (unumber) 8 in [249] if((byte) sprites_init::i#1!=(number) 8) goto sprites_init::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$4 + (const word) memset::num#0
Constant right-side identified [82] (byte*) print_str_at::at#1 ← (const byte*) debug_print_init::$1 + (byte) $22
Constant right-side identified [84] (byte*) print_str_at::at#2 ← (const byte*) debug_print_init::$4 + (byte) $22
Constant right-side identified [86] (byte*) print_str_at::at#3 ← (const byte*) debug_print_init::$7 + (byte) $22
Constant right-side identified [102] (byte*~) debug_print_init::$33 ← (const byte*) debug_print_init::at_line#0 + (byte)(number) $28*(number) 1
Constant right-side identified [106] (byte*~) debug_print_init::$36 ← (const byte*) debug_print_init::at_line#0 + (byte)(number) $28*(number) 2
Constant right-side identified [115] (byte*~) debug_print_init::$43 ← (const byte*) debug_print_init::at_cols#0 + (byte)(number) $28*(number) 1
Constant right-side identified [118] (byte*~) debug_print_init::$46 ← (const byte*) debug_print_init::at_cols#0 + (byte)(number) $28*(number) 2
Constant right-side identified [121] (byte*~) debug_print_init::$49 ← (const byte*) debug_print_init::at_cols#0 + (byte)(number) $28*(number) 3
Constant right-side identified [124] (byte*~) debug_print_init::$52 ← (const byte*) debug_print_init::at_cols#0 + (byte)(number) $28*(number) 4
Constant right-side identified [127] (byte*~) debug_print_init::$55 ← (const byte*) debug_print_init::at_cols#0 + (byte)(number) $28*(number) 5
Constant right-side identified [130] (byte*~) debug_print_init::$58 ← (const byte*) debug_print_init::at_cols#0 + (byte)(number) $28*(number) 6
Constant right-side identified [133] (byte*~) debug_print_init::$61 ← (const byte*) debug_print_init::at_cols#0 + (word)(number) $28*(number) 7
Constant right-side identified [136] (byte*~) debug_print_init::$64 ← (const byte*) debug_print_init::at_cols#0 + (word)(number) $28*(number) 8
Constant right-side identified [146] (byte~) debug_print::print_schar_pos1_$0 ← (const byte) debug_print::print_schar_pos1_row#0 * (byte) $28
Constant right-side identified [152] (byte~) debug_print::print_schar_pos2_$0 ← (const byte) debug_print::print_schar_pos2_row#0 * (byte) $28
Constant right-side identified [157] (byte~) debug_print::print_schar_pos3_$0 ← (const byte) debug_print::print_schar_pos3_row#0 * (byte) $28
Constant right-side identified [162] (byte~) debug_print::print_schar_pos4_$0 ← (const byte) debug_print::print_schar_pos4_row#0 * (byte) $28
Constant right-side identified [168] (byte~) debug_print::print_schar_pos5_$0 ← (const byte) debug_print::print_schar_pos5_row#0 * (byte) $28
Constant right-side identified [174] (byte~) debug_print::print_schar_pos6_$0 ← (const byte) debug_print::print_schar_pos6_row#0 * (byte) $28
Constant right-side identified [180] (byte~) debug_print::print_schar_pos7_$0 ← (const byte) debug_print::print_schar_pos7_row#0 * (byte) $28
Constant right-side identified [186] (byte~) debug_print::print_schar_pos8_$0 ← (const byte) debug_print::print_schar_pos8_row#0 * (byte) $28
Constant right-side identified [192] (byte~) debug_print::print_schar_pos9_$0 ← (const byte) debug_print::print_schar_pos9_row#0 * (byte) $28
Constant right-side identified [198] (byte~) debug_print::print_schar_pos10_$0 ← (const byte) debug_print::print_schar_pos10_row#0 * (byte) $28
Constant right-side identified [204] (byte~) debug_print::print_schar_pos11_$0 ← (const byte) debug_print::print_schar_pos11_row#0 * (byte) $28
Constant right-side identified [210] (byte~) debug_print::print_schar_pos12_$0 ← (const byte) debug_print::print_schar_pos12_row#0 * (byte) $28
Constant right-side identified [220] (byte*~) debug_print::$16 ← (const byte*) debug_print::at_line#0 + (byte)(number) $28*(number) 1
Constant right-side identified [224] (byte*~) debug_print::$19 ← (const byte*) debug_print::at_line#0 + (byte)(number) $28*(number) 2
Constant right-side identified [228] (byte*~) debug_print::$22 ← (const byte*) debug_print::at_line#0 + (byte)(number) $28*(number) 3
Constant right-side identified [232] (byte*~) debug_print::$25 ← (const byte*) debug_print::at_line#0 + (byte)(number) $28*(number) 4
Constant right-side identified [236] (byte*~) debug_print::$28 ← (const byte*) debug_print::at_line#0 + (byte)(number) $28*(number) 5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$4+memset::num#0
Constant (const byte*) print_str_at::at#1 = debug_print_init::$1+$22
Constant (const byte*) print_str_at::at#2 = debug_print_init::$4+$22
Constant (const byte*) print_str_at::at#3 = debug_print_init::$7+$22
Constant (const byte*) debug_print_init::$30 = debug_print_init::at_line#0
Constant (const byte*) debug_print_init::$33 = debug_print_init::at_line#0+(byte)$28*1
Constant (const byte*) debug_print_init::$36 = debug_print_init::at_line#0+(byte)$28*2
Constant (const byte*) debug_print_init::$40 = debug_print_init::at_cols#0
Constant (const byte*) debug_print_init::$43 = debug_print_init::at_cols#0+(byte)$28*1
Constant (const byte*) debug_print_init::$46 = debug_print_init::at_cols#0+(byte)$28*2
Constant (const byte*) debug_print_init::$49 = debug_print_init::at_cols#0+(byte)$28*3
Constant (const byte*) debug_print_init::$52 = debug_print_init::at_cols#0+(byte)$28*4
Constant (const byte*) debug_print_init::$55 = debug_print_init::at_cols#0+(byte)$28*5
Constant (const byte*) debug_print_init::$58 = debug_print_init::at_cols#0+(byte)$28*6
Constant (const byte*) debug_print_init::$61 = debug_print_init::at_cols#0+(word)$28*7
Constant (const byte*) debug_print_init::$64 = debug_print_init::at_cols#0+(word)$28*8
Constant (const byte) debug_print::print_schar_pos1_$0 = debug_print::print_schar_pos1_row#0*$28
Constant (const byte) debug_print::print_schar_pos2_$0 = debug_print::print_schar_pos2_row#0*$28
Constant (const byte) debug_print::print_schar_pos3_$0 = debug_print::print_schar_pos3_row#0*$28
Constant (const byte) debug_print::print_schar_pos4_$0 = debug_print::print_schar_pos4_row#0*$28
Constant (const byte) debug_print::print_schar_pos5_$0 = debug_print::print_schar_pos5_row#0*$28
Constant (const byte) debug_print::print_schar_pos6_$0 = debug_print::print_schar_pos6_row#0*$28
Constant (const byte) debug_print::print_schar_pos7_$0 = debug_print::print_schar_pos7_row#0*$28
Constant (const byte) debug_print::print_schar_pos8_$0 = debug_print::print_schar_pos8_row#0*$28
Constant (const byte) debug_print::print_schar_pos9_$0 = debug_print::print_schar_pos9_row#0*$28
Constant (const byte) debug_print::print_schar_pos10_$0 = debug_print::print_schar_pos10_row#0*$28
Constant (const byte) debug_print::print_schar_pos11_$0 = debug_print::print_schar_pos11_row#0*$28
Constant (const byte) debug_print::print_schar_pos12_$0 = debug_print::print_schar_pos12_row#0*$28
Constant (const byte*) debug_print::$13 = debug_print::at_line#0
Constant (const byte*) debug_print::$16 = debug_print::at_line#0+(byte)$28*1
Constant (const byte*) debug_print::$19 = debug_print::at_line#0+(byte)$28*2
Constant (const byte*) debug_print::$22 = debug_print::at_line#0+(byte)$28*3
Constant (const byte*) debug_print::$25 = debug_print::at_line#0+(byte)$28*4
Constant (const byte*) debug_print::$28 = debug_print::at_line#0+(byte)$28*5
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (const byte) debug_print::print_schar_pos1_row#0*(byte) $28 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero print_screen#0 in [147] (byte*~) debug_print::print_schar_pos1_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos1_$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) debug_print::print_schar_pos1_row#0
Eliminating unused constant (const byte) debug_print::print_schar_pos1_$0
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [135] (byte*~) debug_print::print_schar_pos2_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos2_$0
Constant right-side identified [139] (byte*~) debug_print::print_schar_pos3_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos3_$0
Constant right-side identified [143] (byte*~) debug_print::print_schar_pos4_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos4_$0
Constant right-side identified [148] (byte*~) debug_print::print_schar_pos5_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos5_$0
Constant right-side identified [153] (byte*~) debug_print::print_schar_pos6_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos6_$0
Constant right-side identified [158] (byte*~) debug_print::print_schar_pos7_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos7_$0
Constant right-side identified [163] (byte*~) debug_print::print_schar_pos8_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos8_$0
Constant right-side identified [168] (byte*~) debug_print::print_schar_pos9_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos9_$0
Constant right-side identified [173] (byte*~) debug_print::print_schar_pos10_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos10_$0
Constant right-side identified [178] (byte*~) debug_print::print_schar_pos11_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos11_$0
Constant right-side identified [183] (byte*~) debug_print::print_schar_pos12_$1 ← (const byte*) print_screen#0 + (const byte) debug_print::print_schar_pos12_$0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) debug_print::print_schar_pos1_$1 = print_screen#0
Constant (const byte*) debug_print::print_schar_pos2_$1 = print_screen#0+debug_print::print_schar_pos2_$0
Constant (const byte*) debug_print::print_schar_pos3_$1 = print_screen#0+debug_print::print_schar_pos3_$0
Constant (const byte*) debug_print::print_schar_pos4_$1 = print_screen#0+debug_print::print_schar_pos4_$0
Constant (const byte*) debug_print::print_schar_pos5_$1 = print_screen#0+debug_print::print_schar_pos5_$0
Constant (const byte*) debug_print::print_schar_pos6_$1 = print_screen#0+debug_print::print_schar_pos6_$0
Constant (const byte*) debug_print::print_schar_pos7_$1 = print_screen#0+debug_print::print_schar_pos7_$0
Constant (const byte*) debug_print::print_schar_pos8_$1 = print_screen#0+debug_print::print_schar_pos8_$0
Constant (const byte*) debug_print::print_schar_pos9_$1 = print_screen#0+debug_print::print_schar_pos9_$0
Constant (const byte*) debug_print::print_schar_pos10_$1 = print_screen#0+debug_print::print_schar_pos10_$0
Constant (const byte*) debug_print::print_schar_pos11_$1 = print_screen#0+debug_print::print_schar_pos11_$0
Constant (const byte*) debug_print::print_schar_pos12_$1 = print_screen#0+debug_print::print_schar_pos12_$0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [130] (byte*) print_schar_at::at#3 ← (const byte*) debug_print::print_schar_pos1_$1 + (const byte) debug_print::print_schar_pos1_col#0
Constant right-side identified [134] (byte*) print_schar_at::at#4 ← (const byte*) debug_print::print_schar_pos2_$1 + (const byte) debug_print::print_schar_pos2_col#0
Constant right-side identified [137] (byte*) print_schar_at::at#5 ← (const byte*) debug_print::print_schar_pos3_$1 + (const byte) debug_print::print_schar_pos3_col#0
Constant right-side identified [140] (byte*) print_schar_at::at#6 ← (const byte*) debug_print::print_schar_pos4_$1 + (const byte) debug_print::print_schar_pos4_col#0
Constant right-side identified [144] (byte*) print_schar_at::at#7 ← (const byte*) debug_print::print_schar_pos5_$1 + (const byte) debug_print::print_schar_pos5_col#0
Constant right-side identified [148] (byte*) print_schar_at::at#8 ← (const byte*) debug_print::print_schar_pos6_$1 + (const byte) debug_print::print_schar_pos6_col#0
Constant right-side identified [152] (byte*) print_schar_at::at#9 ← (const byte*) debug_print::print_schar_pos7_$1 + (const byte) debug_print::print_schar_pos7_col#0
Constant right-side identified [156] (byte*) print_schar_at::at#10 ← (const byte*) debug_print::print_schar_pos8_$1 + (const byte) debug_print::print_schar_pos8_col#0
Constant right-side identified [160] (byte*) print_schar_at::at#11 ← (const byte*) debug_print::print_schar_pos9_$1 + (const byte) debug_print::print_schar_pos9_col#0
Constant right-side identified [164] (byte*) print_schar_at::at#12 ← (const byte*) debug_print::print_schar_pos10_$1 + (const byte) debug_print::print_schar_pos10_col#0
Constant right-side identified [168] (byte*) print_schar_at::at#13 ← (const byte*) debug_print::print_schar_pos11_$1 + (const byte) debug_print::print_schar_pos11_col#0
Constant right-side identified [172] (byte*) print_schar_at::at#14 ← (const byte*) debug_print::print_schar_pos12_$1 + (const byte) debug_print::print_schar_pos12_col#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_schar_at::at#3 = debug_print::print_schar_pos1_$1+debug_print::print_schar_pos1_col#0
Constant (const byte*) print_schar_at::at#4 = debug_print::print_schar_pos2_$1+debug_print::print_schar_pos2_col#0
Constant (const byte*) print_schar_at::at#5 = debug_print::print_schar_pos3_$1+debug_print::print_schar_pos3_col#0
Constant (const byte*) print_schar_at::at#6 = debug_print::print_schar_pos4_$1+debug_print::print_schar_pos4_col#0
Constant (const byte*) print_schar_at::at#7 = debug_print::print_schar_pos5_$1+debug_print::print_schar_pos5_col#0
Constant (const byte*) print_schar_at::at#8 = debug_print::print_schar_pos6_$1+debug_print::print_schar_pos6_col#0
Constant (const byte*) print_schar_at::at#9 = debug_print::print_schar_pos7_$1+debug_print::print_schar_pos7_col#0
Constant (const byte*) print_schar_at::at#10 = debug_print::print_schar_pos8_$1+debug_print::print_schar_pos8_col#0
Constant (const byte*) print_schar_at::at#11 = debug_print::print_schar_pos9_$1+debug_print::print_schar_pos9_col#0
Constant (const byte*) print_schar_at::at#12 = debug_print::print_schar_pos10_$1+debug_print::print_schar_pos10_col#0
Constant (const byte*) print_schar_at::at#13 = debug_print::print_schar_pos11_$1+debug_print::print_schar_pos11_col#0
Constant (const byte*) print_schar_at::at#14 = debug_print::print_schar_pos12_$1+debug_print::print_schar_pos12_col#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [67] (byte~) anim::$13 ← (byte)*((const signed byte*) xp) keeping *(xp)
Inlining Noop Cast [70] (byte~) anim::$14 ← (byte)*((const signed byte*) yp) keeping *(yp)
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [66] (byte) anim::i2#0 ← (byte) anim::i#2 * (byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte*) print_str_at::str#1
Inlining constant with var siblings (const byte*) print_str_at::str#2
Inlining constant with var siblings (const byte*) print_str_at::str#3
Inlining constant with var siblings (const byte*) print_str_at::at#4
Inlining constant with var siblings (const byte*) print_str_at::str#4
Inlining constant with var siblings (const byte*) print_str_at::at#5
Inlining constant with var siblings (const byte*) print_str_at::str#5
Inlining constant with var siblings (const byte*) print_str_at::at#6
Inlining constant with var siblings (const byte*) print_str_at::str#6
Inlining constant with var siblings (const byte*) print_str_at::at#7
Inlining constant with var siblings (const byte*) print_str_at::str#7
Inlining constant with var siblings (const byte*) print_str_at::at#8
Inlining constant with var siblings (const byte*) print_str_at::str#8
Inlining constant with var siblings (const byte*) print_str_at::at#9
Inlining constant with var siblings (const byte*) print_str_at::str#9
Inlining constant with var siblings (const byte*) print_str_at::at#10
Inlining constant with var siblings (const byte*) print_str_at::str#10
Inlining constant with var siblings (const byte*) print_str_at::at#11
Inlining constant with var siblings (const byte*) print_str_at::str#11
Inlining constant with var siblings (const byte*) print_str_at::at#12
Inlining constant with var siblings (const byte*) print_str_at::str#12
Inlining constant with var siblings (const byte*) print_str_at::at#1
Inlining constant with var siblings (const byte*) print_str_at::at#2
Inlining constant with var siblings (const byte*) print_str_at::at#3
Inlining constant with var siblings (const signed byte) print_schar_at::b#6
Inlining constant with var siblings (const byte*) print_schar_at::at#3
Inlining constant with var siblings (const byte*) print_schar_at::at#4
Inlining constant with var siblings (const byte*) print_schar_at::at#5
Inlining constant with var siblings (const byte*) print_schar_at::at#6
Inlining constant with var siblings (const byte*) print_schar_at::at#7
Inlining constant with var siblings (const byte*) print_schar_at::at#8
Inlining constant with var siblings (const byte*) print_schar_at::at#9
Inlining constant with var siblings (const byte*) print_schar_at::at#10
Inlining constant with var siblings (const byte*) print_schar_at::at#11
Inlining constant with var siblings (const byte*) print_schar_at::at#12
Inlining constant with var siblings (const byte*) print_schar_at::at#13
Inlining constant with var siblings (const byte*) print_schar_at::at#14
Inlining constant with var siblings (const byte) print_char_at::ch#0
Inlining constant with var siblings (const byte) print_char_at::ch#1
Inlining constant with var siblings (const byte) anim::i#0
Inlining constant with var siblings (const byte) debug_print_init::c#0
Inlining constant with var siblings (const byte) debug_print_init::i#0
Inlining constant with var siblings (const byte) debug_print_init::j#0
Inlining constant with var siblings (const byte) debug_print::c#0
Inlining constant with var siblings (const byte) debug_print::i#0
Inlining constant with var siblings (const byte) sprites_init::i#0
Inlining constant with var siblings (const signed byte) sx#19
Inlining constant with var siblings (const signed byte) sy#20
Constant inlined print_str_at::at#4 = (const byte*) SCREEN+(word)(number) $28*(number) $10
Constant inlined print_str_at::at#3 = (const byte*) SCREEN+(byte)(number) $28*(number) 2+(byte) $22
Constant inlined print_str_at::at#2 = (const byte*) SCREEN+(byte)(number) $28*(number) 1+(byte) $22
Constant inlined print_str_at::at#1 = (const byte*) SCREEN+(byte) $22
Constant inlined debug_print::print_schar_pos4_$1 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos4_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos4_$0 = (const byte) debug_print::print_schar_pos4_row#0*(byte) $28
Constant inlined debug_print_init::$7 = (const byte*) SCREEN+(byte)(number) $28*(number) 2
Constant inlined print_str_at::at#9 = (const byte*) SCREEN+(word)(number) $28*(number) $15
Constant inlined print_str_at::at#8 = (const byte*) SCREEN+(word)(number) $28*(number) $14
Constant inlined print_str_at::at#7 = (const byte*) SCREEN+(word)(number) $28*(number) $13
Constant inlined sx#19 = (signed byte) 0
Constant inlined debug_print::print_schar_pos12_$0 = (const byte) debug_print::print_schar_pos12_row#0*(byte) $28
Constant inlined print_str_at::at#6 = (const byte*) SCREEN+(word)(number) $28*(number) $12
Constant inlined anim::i#0 = (byte) 0
Constant inlined print_str_at::at#5 = (const byte*) SCREEN+(word)(number) $28*(number) $11
Constant inlined print_str_at::str#12 = (const byte*) debug_print_init::str11
Constant inlined print_str_at::str#11 = (const byte*) debug_print_init::str10
Constant inlined debug_print::print_schar_pos7_$0 = (const byte) debug_print::print_schar_pos7_row#0*(byte) $28
Constant inlined print_str_at::str#10 = (const byte*) debug_print_init::str9
Constant inlined debug_print_init::$36 = (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 2
Constant inlined print_schar_at::at#9 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos7_row#0*(byte) $28+(const byte) debug_print::print_schar_pos7_col#0
Constant inlined debug_print_init::$33 = (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 1
Constant inlined debug_print_init::$30 = (const byte*) debug_print_init::at_line#0
Constant inlined print_schar_at::at#5 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos3_row#0*(byte) $28+(const byte) debug_print::print_schar_pos3_col#0
Constant inlined print_schar_at::at#6 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos4_row#0*(byte) $28+(const byte) debug_print::print_schar_pos4_col#0
Constant inlined print_schar_at::at#7 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos5_row#0*(byte) $28+(const byte) debug_print::print_schar_pos5_col#0
Constant inlined print_schar_at::at#8 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos6_row#0*(byte) $28+(const byte) debug_print::print_schar_pos6_col#0
Constant inlined print_schar_at::at#3 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos1_col#0
Constant inlined print_schar_at::at#4 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos2_row#0*(byte) $28+(const byte) debug_print::print_schar_pos2_col#0
Constant inlined debug_print::$19 = (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 2
Constant inlined debug_print::$16 = (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 1
Constant inlined sprites_init::i#0 = (byte) 0
Constant inlined debug_print::$13 = (const byte*) debug_print::at_line#0
Constant inlined debug_print::print_schar_pos1_$1 = (const byte*) print_screen#0
Constant inlined debug_print::print_schar_pos5_$0 = (const byte) debug_print::print_schar_pos5_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos5_$1 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos5_row#0*(byte) $28
Constant inlined debug_print_init::$1 = (const byte*) SCREEN
Constant inlined debug_print::print_schar_pos12_$1 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos12_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos8_$1 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos8_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos8_$0 = (const byte) debug_print::print_schar_pos8_row#0*(byte) $28
Constant inlined debug_print_init::$4 = (const byte*) SCREEN+(byte)(number) $28*(number) 1
Constant inlined sprites_init::$1 = (const byte*) SPRITE/(byte) $40
Constant inlined debug_print_init::j#0 = (byte) 0
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined debug_print_init::$64 = (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 8
Constant inlined debug_print_init::$61 = (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 7
Constant inlined print_str_at::str#1 = (const byte*) debug_print_init::str
Constant inlined print_str_at::str#2 = (const byte*) debug_print_init::str1
Constant inlined print_str_at::str#3 = (const byte*) debug_print_init::str2
Constant inlined print_str_at::str#4 = (const byte*) debug_print_init::str3
Constant inlined debug_print::$28 = (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 5
Constant inlined debug_print::$25 = (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 4
Constant inlined debug_print::print_schar_pos6_$0 = (const byte) debug_print::print_schar_pos6_row#0*(byte) $28
Constant inlined debug_print::$22 = (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 3
Constant inlined debug_print::print_schar_pos6_$1 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos6_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos2_$0 = (const byte) debug_print::print_schar_pos2_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos2_$1 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos2_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos11_$0 = (const byte) debug_print::print_schar_pos11_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos9_$1 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos9_row#0*(byte) $28
Constant inlined print_str_at::at#11 = (const byte*) SCREEN+(word)(number) $28*(number) $17
Constant inlined print_schar_at::at#11 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos9_row#0*(byte) $28+(const byte) debug_print::print_schar_pos9_col#0
Constant inlined debug_print::print_schar_pos11_$1 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos11_row#0*(byte) $28
Constant inlined print_str_at::at#10 = (const byte*) SCREEN+(word)(number) $28*(number) $16
Constant inlined print_schar_at::at#10 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos8_row#0*(byte) $28+(const byte) debug_print::print_schar_pos8_col#0
Constant inlined print_schar_at::at#13 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos11_row#0*(byte) $28+(const byte) debug_print::print_schar_pos11_col#0
Constant inlined debug_print::print_schar_pos9_$0 = (const byte) debug_print::print_schar_pos9_row#0*(byte) $28
Constant inlined print_str_at::at#12 = (const byte*) SCREEN+(word)(number) $28*(number) $18
Constant inlined print_schar_at::at#12 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos10_row#0*(byte) $28+(const byte) debug_print::print_schar_pos10_col#0
Constant inlined memset::$4 = (byte*)(const void*) memset::str#0
Constant inlined debug_print_init::$58 = (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 6
Constant inlined print_char_at::ch#0 = (byte) '-'
Constant inlined print_char_at::ch#1 = (byte) ' '
Constant inlined print_str_at::str#9 = (const byte*) debug_print_init::str8
Constant inlined debug_print_init::$55 = (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 5
Constant inlined print_str_at::str#5 = (const byte*) debug_print_init::str4
Constant inlined debug_print_init::$52 = (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 4
Constant inlined print_str_at::str#6 = (const byte*) debug_print_init::str5
Constant inlined print_schar_at::at#14 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos12_row#0*(byte) $28+(const byte) debug_print::print_schar_pos12_col#0
Constant inlined print_str_at::str#7 = (const byte*) debug_print_init::str6
Constant inlined print_str_at::str#8 = (const byte*) debug_print_init::str7
Constant inlined print_schar_at::b#6 = (const signed byte) sz
Constant inlined debug_print::c#0 = (byte) 4
Constant inlined debug_print::print_schar_pos3_$0 = (const byte) debug_print::print_schar_pos3_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos7_$1 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos7_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos3_$1 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos3_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos10_$0 = (const byte) debug_print::print_schar_pos10_row#0*(byte) $28
Constant inlined debug_print::print_schar_pos10_$1 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos10_row#0*(byte) $28
Constant inlined debug_print_init::c#0 = (byte) 4
Constant inlined debug_print::print_schar_pos3_sb#0 = (const signed byte) sz
Constant inlined debug_print_init::$49 = (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 3
Constant inlined debug_print_init::$46 = (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 2
Constant inlined sy#20 = (signed byte) 0
Constant inlined debug_print_init::i#0 = (byte) 0
Constant inlined debug_print_init::$43 = (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 1
Constant inlined debug_print::i#0 = (byte) 0
Constant inlined debug_print_init::$40 = (const byte*) debug_print_init::at_cols#0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(rotation_matrix+1)
Consolidated array index constant in *(rotation_matrix+2)
Consolidated array index constant in *(rotation_matrix+3)
Consolidated array index constant in *(rotation_matrix+4)
Consolidated array index constant in *(rotation_matrix+5)
Consolidated array index constant in *(rotation_matrix+6)
Consolidated array index constant in *(rotation_matrix+7)
Consolidated array index constant in *(rotation_matrix+8)
Consolidated array index constant in *(rotation_matrix+1)
Consolidated array index constant in *(rotation_matrix+2)
Consolidated array index constant in *(rotation_matrix+3)
Consolidated array index constant in *(rotation_matrix+4)
Consolidated array index constant in *(rotation_matrix+5)
Consolidated array index constant in *(rotation_matrix+6)
Consolidated array index constant in *(rotation_matrix+7)
Consolidated array index constant in *(rotation_matrix+8)
Successful SSA optimization Pass2ConstantAdditionElimination
Added new block during phi lifting anim::@12(between anim::@10 and anim::@6)
Added new block during phi lifting debug_print_init::@20(between debug_print_init::@3 and debug_print_init::@1)
Added new block during phi lifting debug_print_init::@21(between debug_print_init::@2 and debug_print_init::@2)
Added new block during phi lifting debug_print::@32(between debug_print::@31 and debug_print::@1)
Added new block during phi lifting sprites_init::@2(between sprites_init::@1 and sprites_init::@1)
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of debug_print_init
Adding NOP phi() at start of debug_print_init::@4
Adding NOP phi() at start of debug_print_init::@5
Adding NOP phi() at start of debug_print_init::@6
Adding NOP phi() at start of debug_print_init::@7
Adding NOP phi() at start of debug_print_init::@8
Adding NOP phi() at start of debug_print_init::@9
Adding NOP phi() at start of debug_print_init::@10
Adding NOP phi() at start of debug_print_init::@11
Adding NOP phi() at start of debug_print_init::@12
Adding NOP phi() at start of debug_print_init::@13
Adding NOP phi() at start of debug_print_init::@14
Adding NOP phi() at start of debug_print_init::@15
Adding NOP phi() at start of debug_print_init::@16
Adding NOP phi() at start of debug_print_init::@19
Adding NOP phi() at start of anim
Adding NOP phi() at start of anim::@8
Adding NOP phi() at start of anim::@9
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of print_schar_at::@6
Adding NOP phi() at start of debug_print::@14
Adding NOP phi() at start of debug_print::@15
Adding NOP phi() at start of debug_print::@3
Adding NOP phi() at start of debug_print::print_schar_pos3
Adding NOP phi() at start of debug_print::@16
Adding NOP phi() at start of debug_print::@17
Adding NOP phi() at start of debug_print::@18
Adding NOP phi() at start of debug_print::@19
Adding NOP phi() at start of debug_print::@20
Adding NOP phi() at start of debug_print::@21
Adding NOP phi() at start of debug_print::@22
Adding NOP phi() at start of debug_print::@23
Adding NOP phi() at start of debug_print::@24
Adding NOP phi() at start of debug_print::@25
Adding NOP phi() at start of debug_print::@13
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of print_uchar_at::@2
CALL GRAPH
Calls in [main] to sprites_init:1 debug_print_init:4 anim:6 
Calls in [debug_print_init] to print_cls:18 print_str_at:20 print_str_at:22 print_str_at:24 print_str_at:26 print_str_at:28 print_str_at:30 print_str_at:32 print_str_at:34 print_str_at:36 print_str_at:38 print_str_at:40 print_str_at:42 print_schar_at:49 print_schar_at:54 print_schar_at:59 
Calls in [anim] to calculate_matrix:98 store_matrix:100 rotate_matrix:107 debug_print:122 
Calls in [print_cls] to memset:130 
Calls in [print_schar_at] to print_char_at:148 print_uchar_at:153 print_char_at:158 
Calls in [debug_print] to print_schar_at:216 print_schar_at:221 print_schar_at:225 print_schar_at:230 print_schar_at:235 print_schar_at:240 print_schar_at:245 print_schar_at:250 print_schar_at:255 print_schar_at:260 print_schar_at:265 print_schar_at:270 print_schar_at:278 print_schar_at:283 print_schar_at:288 print_schar_at:293 print_schar_at:298 print_schar_at:303 
Calls in [print_uchar_at] to print_char_at:327 print_char_at:333 

Created 19 initial phi equivalence classes
Coalesced [16] sprites_init::i#3 ← sprites_init::i#1
Coalesced [47] print_schar_at::b#45 ← print_schar_at::b#1
Coalesced [48] print_schar_at::at#33 ← print_schar_at::at#0
Coalesced [52] print_schar_at::b#46 ← print_schar_at::b#2
Coalesced [53] print_schar_at::at#34 ← print_schar_at::at#1
Coalesced [57] print_schar_at::b#47 ← print_schar_at::b#3
Coalesced [58] print_schar_at::at#35 ← print_schar_at::at#2
Coalesced [87] debug_print_init::c#8 ← debug_print_init::c#1
Coalesced [88] debug_print_init::i#8 ← debug_print_init::i#1
Coalesced [89] debug_print_init::j#3 ← debug_print_init::j#1
Coalesced [126] sx#29 ← sx#2
Coalesced [127] sy#32 ← sy#2
Coalesced [128] anim::i#4 ← anim::i#1
Coalesced [134] print_str_at::str#16 ← print_str_at::str#15
Coalesced [135] print_str_at::at#16 ← print_str_at::at#15
Coalesced [142] print_str_at::str#17 ← print_str_at::str#0
Coalesced [143] print_str_at::at#17 ← print_str_at::at#0
Coalesced [147] print_char_at::at#6 ← print_char_at::at#1
Coalesced [149] print_schar_at::b#49 ← print_schar_at::b#22
Coalesced [157] print_char_at::at#5 ← print_char_at::at#0
Coalesced [160] print_schar_at::b#48 ← print_schar_at::b#0
Coalesced [215] print_schar_at::b#34 ← print_schar_at::b#4
Coalesced [220] print_schar_at::b#38 ← print_schar_at::b#5
Coalesced [229] print_schar_at::b#39 ← print_schar_at::b#7
Coalesced [234] print_schar_at::b#40 ← print_schar_at::b#8
Coalesced [239] print_schar_at::b#41 ← print_schar_at::b#9
Coalesced [244] print_schar_at::b#42 ← print_schar_at::b#10
Coalesced [249] print_schar_at::b#43 ← print_schar_at::b#11
Coalesced [254] print_schar_at::b#44 ← print_schar_at::b#12
Coalesced [259] print_schar_at::b#35 ← print_schar_at::b#13
Coalesced [264] print_schar_at::b#36 ← print_schar_at::b#14
Coalesced [269] print_schar_at::b#37 ← print_schar_at::b#15
Coalesced [276] print_schar_at::b#28 ← print_schar_at::b#16
Coalesced [277] print_schar_at::at#27 ← print_schar_at::at#15
Coalesced [281] print_schar_at::b#29 ← print_schar_at::b#17
Coalesced [282] print_schar_at::at#28 ← print_schar_at::at#16
Coalesced [286] print_schar_at::b#30 ← print_schar_at::b#18
Coalesced [287] print_schar_at::at#29 ← print_schar_at::at#17
Coalesced [291] print_schar_at::b#31 ← print_schar_at::b#19
Coalesced [292] print_schar_at::at#30 ← print_schar_at::at#18
Coalesced [296] print_schar_at::b#32 ← print_schar_at::b#20
Coalesced [297] print_schar_at::at#31 ← print_schar_at::at#19
Coalesced [301] print_schar_at::b#33 ← print_schar_at::b#21
Coalesced [302] print_schar_at::at#32 ← print_schar_at::at#20
Coalesced [308] debug_print::c#9 ← debug_print::c#1
Coalesced [309] debug_print::i#9 ← debug_print::i#1
Coalesced [318] memset::dst#4 ← memset::dst#1
Coalesced [325] print_char_at::ch#5 ← print_char_at::ch#2
Coalesced [326] print_char_at::at#7 ← print_char_at::at#2
Coalesced [331] print_char_at::ch#6 ← print_char_at::ch#3
Coalesced [332] print_char_at::at#8 ← print_char_at::at#3
Coalesced down to 16 phi equivalence classes
Culled Empty Block (label) main::@3
Culled Empty Block (label) sprites_init::@2
Culled Empty Block (label) debug_print_init::@16
Culled Empty Block (label) debug_print_init::@19
Culled Empty Block (label) debug_print_init::@20
Culled Empty Block (label) debug_print_init::@21
Culled Empty Block (label) anim::@9
Culled Empty Block (label) anim::@12
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) print_schar_at::@5
Culled Empty Block (label) print_schar_at::@6
Culled Empty Block (label) debug_print::@14
Culled Empty Block (label) debug_print::@15
Culled Empty Block (label) debug_print::@3
Culled Empty Block (label) debug_print::@16
Culled Empty Block (label) debug_print::@17
Culled Empty Block (label) debug_print::@18
Culled Empty Block (label) debug_print::@19
Culled Empty Block (label) debug_print::@20
Culled Empty Block (label) debug_print::@21
Culled Empty Block (label) debug_print::@22
Culled Empty Block (label) debug_print::@23
Culled Empty Block (label) debug_print::@24
Culled Empty Block (label) debug_print::@25
Culled Empty Block (label) debug_print::@13
Culled Empty Block (label) debug_print::@32
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Culled Empty Block (label) print_uchar_at::@2
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block anim::@10 to anim::@9
Renumbering block anim::@11 to anim::@10
Renumbering block debug_print_init::@17 to debug_print_init::@16
Renumbering block debug_print_init::@18 to debug_print_init::@17
Renumbering block debug_print::@4 to debug_print::@3
Renumbering block debug_print::@5 to debug_print::@4
Renumbering block debug_print::@6 to debug_print::@5
Renumbering block debug_print::@7 to debug_print::@6
Renumbering block debug_print::@8 to debug_print::@7
Renumbering block debug_print::@9 to debug_print::@8
Renumbering block debug_print::@10 to debug_print::@9
Renumbering block debug_print::@11 to debug_print::@10
Renumbering block debug_print::@12 to debug_print::@11
Renumbering block debug_print::@26 to debug_print::@12
Renumbering block debug_print::@27 to debug_print::@13
Renumbering block debug_print::@28 to debug_print::@14
Renumbering block debug_print::@29 to debug_print::@15
Renumbering block debug_print::@30 to debug_print::@16
Renumbering block debug_print::@31 to debug_print::@17
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of debug_print_init
Adding NOP phi() at start of debug_print_init::@4
Adding NOP phi() at start of debug_print_init::@5
Adding NOP phi() at start of debug_print_init::@6
Adding NOP phi() at start of debug_print_init::@7
Adding NOP phi() at start of debug_print_init::@8
Adding NOP phi() at start of debug_print_init::@9
Adding NOP phi() at start of debug_print_init::@10
Adding NOP phi() at start of debug_print_init::@11
Adding NOP phi() at start of debug_print_init::@12
Adding NOP phi() at start of debug_print_init::@13
Adding NOP phi() at start of debug_print_init::@14
Adding NOP phi() at start of debug_print_init::@15
Adding NOP phi() at start of anim
Adding NOP phi() at start of anim::@8
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of debug_print::print_schar_pos3
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  asm { sei  }
  [1] call sprites_init 
  to:main::@1
main::@1: scope:[main]  from main
  [2] *((const word*) psp1) ← (word)(const byte*) mulf_sqr1
  [3] *((const word*) psp2) ← (word)(const byte*) mulf_sqr2
  [4] call debug_print_init 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] phi()
  [6] call anim 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [7] return 
  to:@return

(void()) sprites_init()
sprites_init: scope:[sprites_init]  from main
  [8] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (byte) $ff
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [9] (byte) sprites_init::i#2 ← phi( sprites_init/(byte) 0 sprites_init::@1/(byte) sprites_init::i#1 )
  [10] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← (byte)(const byte*) SPRITE/(byte) $40
  [11] *((const nomodify byte*) SPRITES_COLOR + (byte) sprites_init::i#2) ← (const nomodify byte) GREEN
  [12] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2
  [13] if((byte) sprites_init::i#1!=(byte) 8) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [14] return 
  to:@return

(void()) debug_print_init()
debug_print_init: scope:[debug_print_init]  from main::@1
  [15] phi()
  [16] call print_cls 
  to:debug_print_init::@4
debug_print_init::@4: scope:[debug_print_init]  from debug_print_init
  [17] phi()
  [18] call print_str_at 
  to:debug_print_init::@5
debug_print_init::@5: scope:[debug_print_init]  from debug_print_init::@4
  [19] phi()
  [20] call print_str_at 
  to:debug_print_init::@6
debug_print_init::@6: scope:[debug_print_init]  from debug_print_init::@5
  [21] phi()
  [22] call print_str_at 
  to:debug_print_init::@7
debug_print_init::@7: scope:[debug_print_init]  from debug_print_init::@6
  [23] phi()
  [24] call print_str_at 
  to:debug_print_init::@8
debug_print_init::@8: scope:[debug_print_init]  from debug_print_init::@7
  [25] phi()
  [26] call print_str_at 
  to:debug_print_init::@9
debug_print_init::@9: scope:[debug_print_init]  from debug_print_init::@8
  [27] phi()
  [28] call print_str_at 
  to:debug_print_init::@10
debug_print_init::@10: scope:[debug_print_init]  from debug_print_init::@9
  [29] phi()
  [30] call print_str_at 
  to:debug_print_init::@11
debug_print_init::@11: scope:[debug_print_init]  from debug_print_init::@10
  [31] phi()
  [32] call print_str_at 
  to:debug_print_init::@12
debug_print_init::@12: scope:[debug_print_init]  from debug_print_init::@11
  [33] phi()
  [34] call print_str_at 
  to:debug_print_init::@13
debug_print_init::@13: scope:[debug_print_init]  from debug_print_init::@12
  [35] phi()
  [36] call print_str_at 
  to:debug_print_init::@14
debug_print_init::@14: scope:[debug_print_init]  from debug_print_init::@13
  [37] phi()
  [38] call print_str_at 
  to:debug_print_init::@15
debug_print_init::@15: scope:[debug_print_init]  from debug_print_init::@14
  [39] phi()
  [40] call print_str_at 
  to:debug_print_init::@1
debug_print_init::@1: scope:[debug_print_init]  from debug_print_init::@15 debug_print_init::@3
  [41] (byte) debug_print_init::i#2 ← phi( debug_print_init::@15/(byte) 0 debug_print_init::@3/(byte) debug_print_init::i#1 )
  [41] (byte) debug_print_init::c#2 ← phi( debug_print_init::@15/(byte) 4 debug_print_init::@3/(byte) debug_print_init::c#1 )
  [42] (byte*) print_schar_at::at#0 ← (const byte*) debug_print_init::at_line#0 + (byte) debug_print_init::c#2
  [43] (signed byte) print_schar_at::b#1 ← *((const signed byte*) xs + (byte) debug_print_init::i#2)
  [44] call print_schar_at 
  to:debug_print_init::@16
debug_print_init::@16: scope:[debug_print_init]  from debug_print_init::@1
  [45] (byte*) print_schar_at::at#1 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2
  [46] (signed byte) print_schar_at::b#2 ← *((const signed byte*) ys + (byte) debug_print_init::i#2)
  [47] call print_schar_at 
  to:debug_print_init::@17
debug_print_init::@17: scope:[debug_print_init]  from debug_print_init::@16
  [48] (byte*) print_schar_at::at#2 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2
  [49] (signed byte) print_schar_at::b#3 ← *((const signed byte*) zs + (byte) debug_print_init::i#2)
  [50] call print_schar_at 
  to:debug_print_init::@2
debug_print_init::@2: scope:[debug_print_init]  from debug_print_init::@17 debug_print_init::@2
  [51] (byte) debug_print_init::j#2 ← phi( debug_print_init::@17/(byte) 0 debug_print_init::@2/(byte) debug_print_init::j#1 )
  [52] (byte) debug_print_init::col#0 ← (byte) 8 + (byte) debug_print_init::i#2
  [53] (byte*~) debug_print_init::$41 ← (const byte*) debug_print_init::at_cols#0 + (byte) debug_print_init::c#2
  [54] *((byte*~) debug_print_init::$41 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0
  [55] (byte*~) debug_print_init::$44 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2
  [56] *((byte*~) debug_print_init::$44 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0
  [57] (byte*~) debug_print_init::$47 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2
  [58] *((byte*~) debug_print_init::$47 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0
  [59] (byte*~) debug_print_init::$50 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 3 + (byte) debug_print_init::c#2
  [60] *((byte*~) debug_print_init::$50 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0
  [61] (byte*~) debug_print_init::$53 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 4 + (byte) debug_print_init::c#2
  [62] *((byte*~) debug_print_init::$53 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0
  [63] (byte*~) debug_print_init::$56 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 5 + (byte) debug_print_init::c#2
  [64] *((byte*~) debug_print_init::$56 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0
  [65] (byte*~) debug_print_init::$59 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 6 + (byte) debug_print_init::c#2
  [66] *((byte*~) debug_print_init::$59 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0
  [67] (byte*~) debug_print_init::$62 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 7 + (byte) debug_print_init::c#2
  [68] *((byte*~) debug_print_init::$62 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0
  [69] (byte*~) debug_print_init::$65 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 8 + (byte) debug_print_init::c#2
  [70] *((byte*~) debug_print_init::$65 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0
  [71] (byte) debug_print_init::j#1 ← ++ (byte) debug_print_init::j#2
  [72] if((byte) debug_print_init::j#1!=(byte) 4) goto debug_print_init::@2
  to:debug_print_init::@3
debug_print_init::@3: scope:[debug_print_init]  from debug_print_init::@2
  [73] (byte) debug_print_init::c#1 ← (byte) debug_print_init::c#2 + (byte) 4
  [74] (byte) debug_print_init::i#1 ← ++ (byte) debug_print_init::i#2
  [75] if((byte) debug_print_init::i#1!=(byte) 8) goto debug_print_init::@1
  to:debug_print_init::@return
debug_print_init::@return: scope:[debug_print_init]  from debug_print_init::@3
  [76] return 
  to:@return

(void()) anim()
anim: scope:[anim]  from main::@2
  [77] phi()
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@10
  [78] (signed byte) sy#11 ← phi( anim/(signed byte) 0 anim::@10/(signed byte) sy#2 )
  [78] (signed byte) sx#11 ← phi( anim/(signed byte) 0 anim::@10/(signed byte) sx#2 )
  to:anim::@2
anim::@2: scope:[anim]  from anim::@1 anim::@2
  [79] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto anim::@2
  to:anim::@3
anim::@3: scope:[anim]  from anim::@2 anim::@3
  [80] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fe) goto anim::@3
  to:anim::@4
anim::@4: scope:[anim]  from anim::@3 anim::@4
  [81] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fd) goto anim::@4
  to:anim::@5
anim::@5: scope:[anim]  from anim::@4
  [82] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  [83] (signed byte) calculate_matrix::sx#0 ← (signed byte) sx#11
  [84] (signed byte) calculate_matrix::sy#0 ← (signed byte) sy#11
  [85] call calculate_matrix 
  to:anim::@8
anim::@8: scope:[anim]  from anim::@5
  [86] phi()
  [87] call store_matrix 
  to:anim::@6
anim::@6: scope:[anim]  from anim::@8 anim::@9
  [88] (byte) anim::i#2 ← phi( anim::@9/(byte) anim::i#1 anim::@8/(byte) 0 )
  [89] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  [90] (signed byte) rotate_matrix::x#0 ← *((const signed byte*) xs + (byte) anim::i#2)
  [91] (signed byte) rotate_matrix::y#0 ← *((const signed byte*) ys + (byte) anim::i#2)
  [92] (signed byte) rotate_matrix::z#0 ← *((const signed byte*) zs + (byte) anim::i#2)
  [93] call rotate_matrix 
  to:anim::@9
anim::@9: scope:[anim]  from anim::@6
  [94] *((const signed byte*) xrs + (byte) anim::i#2) ← *((const signed byte*) xr)
  [95] *((const signed byte*) yrs + (byte) anim::i#2) ← *((const signed byte*) yr)
  [96] *((const signed byte*) zrs + (byte) anim::i#2) ← *((const signed byte*) zr)
  [97] *((const signed byte*) pps + (byte) anim::i#2) ← *((const signed byte*) pp)
  [98] *((const signed byte*) xps + (byte) anim::i#2) ← *((const signed byte*) xp)
  [99] *((const signed byte*) yps + (byte) anim::i#2) ← *((const signed byte*) yp)
  [100] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte) 1
  [101] (byte~) anim::$9 ← (byte) $80 + (byte)*((const signed byte*) xp)
  [102] *((const nomodify byte*) SPRITES_XPOS + (byte) anim::i2#0) ← (byte~) anim::$9
  [103] (byte~) anim::$10 ← (byte) $80 + (byte)*((const signed byte*) yp)
  [104] *((const nomodify byte*) SPRITES_YPOS + (byte) anim::i2#0) ← (byte~) anim::$10
  [105] (byte) anim::i#1 ← ++ (byte) anim::i#2
  [106] if((byte) anim::i#1!=(byte) 8) goto anim::@6
  to:anim::@7
anim::@7: scope:[anim]  from anim::@9
  [107] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_GREY
  [108] call debug_print 
  to:anim::@10
anim::@10: scope:[anim]  from anim::@7
  [109] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_BLUE
  [110] (signed byte) sx#2 ← (signed byte) sx#11 + (signed byte) 2
  [111] (signed byte) sy#2 ← (signed byte) sy#11 - (signed byte) 3
  to:anim::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from debug_print_init
  [112] phi()
  [113] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [114] return 
  to:@return

(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
print_str_at: scope:[print_str_at]  from debug_print_init::@10 debug_print_init::@11 debug_print_init::@12 debug_print_init::@13 debug_print_init::@14 debug_print_init::@15 debug_print_init::@4 debug_print_init::@5 debug_print_init::@6 debug_print_init::@7 debug_print_init::@8 debug_print_init::@9
  [115] (byte*) print_str_at::at#15 ← phi( debug_print_init::@10/(const byte*) SCREEN+(word)(number) $28*(number) $13 debug_print_init::@11/(const byte*) SCREEN+(word)(number) $28*(number) $14 debug_print_init::@12/(const byte*) SCREEN+(word)(number) $28*(number) $15 debug_print_init::@13/(const byte*) SCREEN+(word)(number) $28*(number) $16 debug_print_init::@14/(const byte*) SCREEN+(word)(number) $28*(number) $17 debug_print_init::@15/(const byte*) SCREEN+(word)(number) $28*(number) $18 debug_print_init::@4/(const byte*) SCREEN+(byte) $22 debug_print_init::@5/(const byte*) SCREEN+(byte)(number) $28*(number) 1+(byte) $22 debug_print_init::@6/(const byte*) SCREEN+(byte)(number) $28*(number) 2+(byte) $22 debug_print_init::@7/(const byte*) SCREEN+(word)(number) $28*(number) $10 debug_print_init::@8/(const byte*) SCREEN+(word)(number) $28*(number) $11 debug_print_init::@9/(const byte*) SCREEN+(word)(number) $28*(number) $12 )
  [115] (byte*) print_str_at::str#15 ← phi( debug_print_init::@10/(const byte*) debug_print_init::str6 debug_print_init::@11/(const byte*) debug_print_init::str7 debug_print_init::@12/(const byte*) debug_print_init::str8 debug_print_init::@13/(const byte*) debug_print_init::str9 debug_print_init::@14/(const byte*) debug_print_init::str10 debug_print_init::@15/(const byte*) debug_print_init::str11 debug_print_init::@4/(const byte*) debug_print_init::str debug_print_init::@5/(const byte*) debug_print_init::str1 debug_print_init::@6/(const byte*) debug_print_init::str2 debug_print_init::@7/(const byte*) debug_print_init::str3 debug_print_init::@8/(const byte*) debug_print_init::str4 debug_print_init::@9/(const byte*) debug_print_init::str5 )
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  [116] (byte*) print_str_at::at#13 ← phi( print_str_at/(byte*) print_str_at::at#15 print_str_at::@2/(byte*) print_str_at::at#0 )
  [116] (byte*) print_str_at::str#13 ← phi( print_str_at/(byte*) print_str_at::str#15 print_str_at::@2/(byte*) print_str_at::str#0 )
  [117] if((byte) 0!=*((byte*) print_str_at::str#13)) goto print_str_at::@2
  to:print_str_at::@return
print_str_at::@return: scope:[print_str_at]  from print_str_at::@1
  [118] return 
  to:@return
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1
  [119] *((byte*) print_str_at::at#13) ← *((byte*) print_str_at::str#13)
  [120] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#13
  [121] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#13
  to:print_str_at::@1

(void()) print_schar_at((signed byte) print_schar_at::b , (byte*) print_schar_at::at)
print_schar_at: scope:[print_schar_at]  from debug_print::@1 debug_print::@12 debug_print::@13 debug_print::@14 debug_print::@15 debug_print::@16 debug_print::print_schar_pos1 debug_print::print_schar_pos10 debug_print::print_schar_pos11 debug_print::print_schar_pos12 debug_print::print_schar_pos2 debug_print::print_schar_pos3 debug_print::print_schar_pos4 debug_print::print_schar_pos5 debug_print::print_schar_pos6 debug_print::print_schar_pos7 debug_print::print_schar_pos8 debug_print::print_schar_pos9 debug_print_init::@1 debug_print_init::@16 debug_print_init::@17
  [122] (byte*) print_schar_at::at#21 ← phi( debug_print::@1/(byte*) print_schar_at::at#15 debug_print::@12/(byte*) print_schar_at::at#16 debug_print::@13/(byte*) print_schar_at::at#17 debug_print::@14/(byte*) print_schar_at::at#18 debug_print::@15/(byte*) print_schar_at::at#19 debug_print::@16/(byte*) print_schar_at::at#20 debug_print::print_schar_pos1/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos1_col#0 debug_print::print_schar_pos10/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos10_row#0*(byte) $28+(const byte) debug_print::print_schar_pos10_col#0 debug_print::print_schar_pos11/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos11_row#0*(byte) $28+(const byte) debug_print::print_schar_pos11_col#0 debug_print::print_schar_pos12/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos12_row#0*(byte) $28+(const byte) debug_print::print_schar_pos12_col#0 debug_print::print_schar_pos2/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos2_row#0*(byte) $28+(const byte) debug_print::print_schar_pos2_col#0 debug_print::print_schar_pos3/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos3_row#0*(byte) $28+(const byte) debug_print::print_schar_pos3_col#0 debug_print::print_schar_pos4/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos4_row#0*(byte) $28+(const byte) debug_print::print_schar_pos4_col#0 debug_print::print_schar_pos5/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos5_row#0*(byte) $28+(const byte) debug_print::print_schar_pos5_col#0 debug_print::print_schar_pos6/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos6_row#0*(byte) $28+(const byte) debug_print::print_schar_pos6_col#0 debug_print::print_schar_pos7/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos7_row#0*(byte) $28+(const byte) debug_print::print_schar_pos7_col#0 debug_print::print_schar_pos8/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos8_row#0*(byte) $28+(const byte) debug_print::print_schar_pos8_col#0 debug_print::print_schar_pos9/(const byte*) print_screen#0+(const byte) debug_print::print_schar_pos9_row#0*(byte) $28+(const byte) debug_print::print_schar_pos9_col#0 debug_print_init::@1/(byte*) print_schar_at::at#0 debug_print_init::@16/(byte*) print_schar_at::at#1 debug_print_init::@17/(byte*) print_schar_at::at#2 )
  [122] (signed byte) print_schar_at::b#22 ← phi( debug_print::@1/(signed byte) print_schar_at::b#16 debug_print::@12/(signed byte) print_schar_at::b#17 debug_print::@13/(signed byte) print_schar_at::b#18 debug_print::@14/(signed byte) print_schar_at::b#19 debug_print::@15/(signed byte) print_schar_at::b#20 debug_print::@16/(signed byte) print_schar_at::b#21 debug_print::print_schar_pos1/(signed byte) print_schar_at::b#4 debug_print::print_schar_pos10/(signed byte) print_schar_at::b#13 debug_print::print_schar_pos11/(signed byte) print_schar_at::b#14 debug_print::print_schar_pos12/(signed byte) print_schar_at::b#15 debug_print::print_schar_pos2/(signed byte) print_schar_at::b#5 debug_print::print_schar_pos3/(const signed byte) sz debug_print::print_schar_pos4/(signed byte) print_schar_at::b#7 debug_print::print_schar_pos5/(signed byte) print_schar_at::b#8 debug_print::print_schar_pos6/(signed byte) print_schar_at::b#9 debug_print::print_schar_pos7/(signed byte) print_schar_at::b#10 debug_print::print_schar_pos8/(signed byte) print_schar_at::b#11 debug_print::print_schar_pos9/(signed byte) print_schar_at::b#12 debug_print_init::@1/(signed byte) print_schar_at::b#1 debug_print_init::@16/(signed byte) print_schar_at::b#2 debug_print_init::@17/(signed byte) print_schar_at::b#3 )
  [123] if((signed byte) print_schar_at::b#22<(signed byte) 0) goto print_schar_at::@1
  to:print_schar_at::@3
print_schar_at::@3: scope:[print_schar_at]  from print_schar_at
  [124] (byte*) print_char_at::at#1 ← (byte*) print_schar_at::at#21
  [125] call print_char_at 
  to:print_schar_at::@2
print_schar_at::@2: scope:[print_schar_at]  from print_schar_at::@3 print_schar_at::@4
  [126] (signed byte) print_schar_at::b#24 ← phi( print_schar_at::@4/(signed byte) print_schar_at::b#0 print_schar_at::@3/(signed byte) print_schar_at::b#22 )
  [127] (byte*) print_uchar_at::at#0 ← (byte*) print_schar_at::at#21 + (byte) 1
  [128] (byte) print_uchar_at::b#0 ← (byte)(signed byte) print_schar_at::b#24
  [129] call print_uchar_at 
  to:print_schar_at::@return
print_schar_at::@return: scope:[print_schar_at]  from print_schar_at::@2
  [130] return 
  to:@return
print_schar_at::@1: scope:[print_schar_at]  from print_schar_at
  [131] (byte*) print_char_at::at#0 ← (byte*) print_schar_at::at#21
  [132] call print_char_at 
  to:print_schar_at::@4
print_schar_at::@4: scope:[print_schar_at]  from print_schar_at::@1
  [133] (signed byte) print_schar_at::b#0 ← - (signed byte) print_schar_at::b#22
  to:print_schar_at::@2

(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
calculate_matrix: scope:[calculate_matrix]  from anim::@5
  [134] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0
  [135] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0
  [136] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0
  [137] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0
  [138] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0
  [139] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0
  [140] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0
  [141] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0
  [142] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0
  [143] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0
  [144] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t2#0)
  [145] *((const signed byte*) rotation_matrix) ← (signed byte~) calculate_matrix::$10
  [146] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t2#0)
  [147] *((const signed byte*) rotation_matrix+(byte) 1) ← (signed byte~) calculate_matrix::$11
  [148] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0)
  [149] *((const signed byte*) rotation_matrix+(byte) 2) ← (signed byte~) calculate_matrix::$12
  [150] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0)
  [151] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0)
  [152] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0)
  [153] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0)
  [154] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0)
  [155] *((const signed byte*) rotation_matrix+(byte) 3) ← (signed byte~) calculate_matrix::$17
  [156] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0)
  [157] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0)
  [158] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0)
  [159] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0)
  [160] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0)
  [161] *((const signed byte*) rotation_matrix+(byte) 4) ← (signed byte~) calculate_matrix::$22
  [162] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t10#0)
  [163] *((const signed byte*) rotation_matrix+(byte) 5) ← (signed byte~) calculate_matrix::$23
  [164] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0)
  [165] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0)
  [166] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0)
  [167] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0)
  [168] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0)
  [169] *((const signed byte*) rotation_matrix+(byte) 6) ← (signed byte~) calculate_matrix::$28
  [170] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0)
  [171] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0)
  [172] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0)
  [173] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0)
  [174] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0)
  [175] *((const signed byte*) rotation_matrix+(byte) 7) ← (signed byte~) calculate_matrix::$33
  [176] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t10#0)
  [177] *((const signed byte*) rotation_matrix+(byte) 8) ← (signed byte~) calculate_matrix::$34
  to:calculate_matrix::@return
calculate_matrix::@return: scope:[calculate_matrix]  from calculate_matrix
  [178] return 
  to:@return

(void()) store_matrix()
store_matrix: scope:[store_matrix]  from anim::@8
  asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
  to:store_matrix::@return
store_matrix::@return: scope:[store_matrix]  from store_matrix
  [180] return 
  to:@return

(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
rotate_matrix: scope:[rotate_matrix]  from anim::@6
  [181] *((const signed byte*) xr) ← (signed byte) rotate_matrix::x#0
  [182] *((const signed byte*) yr) ← (signed byte) rotate_matrix::y#0
  [183] *((const signed byte*) zr) ← (signed byte) rotate_matrix::z#0
  asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  }
  to:rotate_matrix::@return
rotate_matrix::@return: scope:[rotate_matrix]  from rotate_matrix
  [185] return 
  to:@return

(void()) debug_print()
debug_print: scope:[debug_print]  from anim::@7
  [186] (signed byte) debug_print::print_schar_pos1_sb#0 ← (signed byte) sx#11
  to:debug_print::print_schar_pos1
debug_print::print_schar_pos1: scope:[debug_print]  from debug_print
  [187] (signed byte) print_schar_at::b#4 ← (signed byte) debug_print::print_schar_pos1_sb#0
  [188] call print_schar_at 
  to:debug_print::@2
debug_print::@2: scope:[debug_print]  from debug_print::print_schar_pos1
  [189] (signed byte) debug_print::print_schar_pos2_sb#0 ← (signed byte) sy#11
  to:debug_print::print_schar_pos2
debug_print::print_schar_pos2: scope:[debug_print]  from debug_print::@2
  [190] (signed byte) print_schar_at::b#5 ← (signed byte) debug_print::print_schar_pos2_sb#0
  [191] call print_schar_at 
  to:debug_print::print_schar_pos3
debug_print::print_schar_pos3: scope:[debug_print]  from debug_print::print_schar_pos2
  [192] phi()
  [193] call print_schar_at 
  to:debug_print::@3
debug_print::@3: scope:[debug_print]  from debug_print::print_schar_pos3
  [194] (signed byte) debug_print::print_schar_pos4_sb#0 ← *((const signed byte*) rotation_matrix)
  to:debug_print::print_schar_pos4
debug_print::print_schar_pos4: scope:[debug_print]  from debug_print::@3
  [195] (signed byte) print_schar_at::b#7 ← (signed byte) debug_print::print_schar_pos4_sb#0
  [196] call print_schar_at 
  to:debug_print::@4
debug_print::@4: scope:[debug_print]  from debug_print::print_schar_pos4
  [197] (signed byte) debug_print::print_schar_pos5_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 1)
  to:debug_print::print_schar_pos5
debug_print::print_schar_pos5: scope:[debug_print]  from debug_print::@4
  [198] (signed byte) print_schar_at::b#8 ← (signed byte) debug_print::print_schar_pos5_sb#0
  [199] call print_schar_at 
  to:debug_print::@5
debug_print::@5: scope:[debug_print]  from debug_print::print_schar_pos5
  [200] (signed byte) debug_print::print_schar_pos6_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 2)
  to:debug_print::print_schar_pos6
debug_print::print_schar_pos6: scope:[debug_print]  from debug_print::@5
  [201] (signed byte) print_schar_at::b#9 ← (signed byte) debug_print::print_schar_pos6_sb#0
  [202] call print_schar_at 
  to:debug_print::@6
debug_print::@6: scope:[debug_print]  from debug_print::print_schar_pos6
  [203] (signed byte) debug_print::print_schar_pos7_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 3)
  to:debug_print::print_schar_pos7
debug_print::print_schar_pos7: scope:[debug_print]  from debug_print::@6
  [204] (signed byte) print_schar_at::b#10 ← (signed byte) debug_print::print_schar_pos7_sb#0
  [205] call print_schar_at 
  to:debug_print::@7
debug_print::@7: scope:[debug_print]  from debug_print::print_schar_pos7
  [206] (signed byte) debug_print::print_schar_pos8_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 4)
  to:debug_print::print_schar_pos8
debug_print::print_schar_pos8: scope:[debug_print]  from debug_print::@7
  [207] (signed byte) print_schar_at::b#11 ← (signed byte) debug_print::print_schar_pos8_sb#0
  [208] call print_schar_at 
  to:debug_print::@8
debug_print::@8: scope:[debug_print]  from debug_print::print_schar_pos8
  [209] (signed byte) debug_print::print_schar_pos9_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 5)
  to:debug_print::print_schar_pos9
debug_print::print_schar_pos9: scope:[debug_print]  from debug_print::@8
  [210] (signed byte) print_schar_at::b#12 ← (signed byte) debug_print::print_schar_pos9_sb#0
  [211] call print_schar_at 
  to:debug_print::@9
debug_print::@9: scope:[debug_print]  from debug_print::print_schar_pos9
  [212] (signed byte) debug_print::print_schar_pos10_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 6)
  to:debug_print::print_schar_pos10
debug_print::print_schar_pos10: scope:[debug_print]  from debug_print::@9
  [213] (signed byte) print_schar_at::b#13 ← (signed byte) debug_print::print_schar_pos10_sb#0
  [214] call print_schar_at 
  to:debug_print::@10
debug_print::@10: scope:[debug_print]  from debug_print::print_schar_pos10
  [215] (signed byte) debug_print::print_schar_pos11_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 7)
  to:debug_print::print_schar_pos11
debug_print::print_schar_pos11: scope:[debug_print]  from debug_print::@10
  [216] (signed byte) print_schar_at::b#14 ← (signed byte) debug_print::print_schar_pos11_sb#0
  [217] call print_schar_at 
  to:debug_print::@11
debug_print::@11: scope:[debug_print]  from debug_print::print_schar_pos11
  [218] (signed byte) debug_print::print_schar_pos12_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 8)
  to:debug_print::print_schar_pos12
debug_print::print_schar_pos12: scope:[debug_print]  from debug_print::@11
  [219] (signed byte) print_schar_at::b#15 ← (signed byte) debug_print::print_schar_pos12_sb#0
  [220] call print_schar_at 
  to:debug_print::@1
debug_print::@1: scope:[debug_print]  from debug_print::@17 debug_print::print_schar_pos12
  [221] (byte) debug_print::i#2 ← phi( debug_print::print_schar_pos12/(byte) 0 debug_print::@17/(byte) debug_print::i#1 )
  [221] (byte) debug_print::c#2 ← phi( debug_print::print_schar_pos12/(byte) 4 debug_print::@17/(byte) debug_print::c#1 )
  [222] (byte*) print_schar_at::at#15 ← (const byte*) debug_print::at_line#0 + (byte) debug_print::c#2
  [223] (signed byte) print_schar_at::b#16 ← *((const signed byte*) xrs + (byte) debug_print::i#2)
  [224] call print_schar_at 
  to:debug_print::@12
debug_print::@12: scope:[debug_print]  from debug_print::@1
  [225] (byte*) print_schar_at::at#16 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print::c#2
  [226] (signed byte) print_schar_at::b#17 ← *((const signed byte*) yrs + (byte) debug_print::i#2)
  [227] call print_schar_at 
  to:debug_print::@13
debug_print::@13: scope:[debug_print]  from debug_print::@12
  [228] (byte*) print_schar_at::at#17 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print::c#2
  [229] (signed byte) print_schar_at::b#18 ← *((const signed byte*) zrs + (byte) debug_print::i#2)
  [230] call print_schar_at 
  to:debug_print::@14
debug_print::@14: scope:[debug_print]  from debug_print::@13
  [231] (byte*) print_schar_at::at#18 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 3 + (byte) debug_print::c#2
  [232] (signed byte) print_schar_at::b#19 ← *((const signed byte*) pps + (byte) debug_print::i#2)
  [233] call print_schar_at 
  to:debug_print::@15
debug_print::@15: scope:[debug_print]  from debug_print::@14
  [234] (byte*) print_schar_at::at#19 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 4 + (byte) debug_print::c#2
  [235] (signed byte) print_schar_at::b#20 ← *((const signed byte*) xps + (byte) debug_print::i#2)
  [236] call print_schar_at 
  to:debug_print::@16
debug_print::@16: scope:[debug_print]  from debug_print::@15
  [237] (byte*) print_schar_at::at#20 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 5 + (byte) debug_print::c#2
  [238] (signed byte) print_schar_at::b#21 ← *((const signed byte*) yps + (byte) debug_print::i#2)
  [239] call print_schar_at 
  to:debug_print::@17
debug_print::@17: scope:[debug_print]  from debug_print::@16
  [240] (byte) debug_print::c#1 ← (byte) debug_print::c#2 + (byte) 4
  [241] (byte) debug_print::i#1 ← ++ (byte) debug_print::i#2
  [242] if((byte) debug_print::i#1!=(byte) 8) goto debug_print::@1
  to:debug_print::@return
debug_print::@return: scope:[debug_print]  from debug_print::@17
  [243] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [244] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [245] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [246] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [247] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [248] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [249] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
print_char_at: scope:[print_char_at]  from print_schar_at::@1 print_schar_at::@3 print_uchar_at print_uchar_at::@1
  [250] (byte*) print_char_at::at#4 ← phi( print_schar_at::@1/(byte*) print_char_at::at#0 print_schar_at::@3/(byte*) print_char_at::at#1 print_uchar_at/(byte*) print_char_at::at#2 print_uchar_at::@1/(byte*) print_char_at::at#3 )
  [250] (byte) print_char_at::ch#4 ← phi( print_schar_at::@1/(byte) '-' print_schar_at::@3/(byte) ' ' print_uchar_at/(byte) print_char_at::ch#2 print_uchar_at::@1/(byte) print_char_at::ch#3 )
  [251] *((byte*) print_char_at::at#4) ← (byte) print_char_at::ch#4
  to:print_char_at::@return
print_char_at::@return: scope:[print_char_at]  from print_char_at
  [252] return 
  to:@return

(void()) print_uchar_at((byte) print_uchar_at::b , (byte*) print_uchar_at::at)
print_uchar_at: scope:[print_uchar_at]  from print_schar_at::@2
  [253] (byte~) print_uchar_at::$0 ← (byte) print_uchar_at::b#0 >> (byte) 4
  [254] (byte) print_char_at::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$0)
  [255] (byte*) print_char_at::at#2 ← (byte*) print_uchar_at::at#0
  [256] call print_char_at 
  to:print_uchar_at::@1
print_uchar_at::@1: scope:[print_uchar_at]  from print_uchar_at
  [257] (byte~) print_uchar_at::$2 ← (byte) print_uchar_at::b#0 & (byte) $f
  [258] (byte*) print_char_at::at#3 ← (byte*) print_uchar_at::at#0 + (byte) 1
  [259] (byte) print_char_at::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$2)
  [260] call print_char_at 
  to:print_uchar_at::@return
print_uchar_at::@return: scope:[print_uchar_at]  from print_uchar_at::@1
  [261] return 
  to:@return

null depth in calling loop Loop head: debug_print::@1 tails: debug_print::@17 blocks: debug_print::@17 debug_print::@16 debug_print::@15 debug_print::@14 debug_print::@13 debug_print::@12 debug_print::@1  in scope print_schar_at
null depth in calling loop Loop head: debug_print::@1 tails: debug_print::@17 blocks: debug_print::@17 debug_print::@16 debug_print::@15 debug_print::@14 debug_print::@13 debug_print::@12 debug_print::@1  in scope print_schar_at
null depth in calling loop Loop head: debug_print::@1 tails: debug_print::@17 blocks: debug_print::@17 debug_print::@16 debug_print::@15 debug_print::@14 debug_print::@13 debug_print::@12 debug_print::@1  in scope print_schar_at
null depth in calling loop Loop head: debug_print::@1 tails: debug_print::@17 blocks: debug_print::@17 debug_print::@16 debug_print::@15 debug_print::@14 debug_print::@13 debug_print::@12 debug_print::@1  in scope print_schar_at
null depth in calling loop Loop head: debug_print::@1 tails: debug_print::@17 blocks: debug_print::@17 debug_print::@16 debug_print::@15 debug_print::@14 debug_print::@13 debug_print::@12 debug_print::@1  in scope print_schar_at
null depth in calling loop Loop head: debug_print::@1 tails: debug_print::@17 blocks: debug_print::@17 debug_print::@16 debug_print::@15 debug_print::@14 debug_print::@13 debug_print::@12 debug_print::@1  in scope print_schar_at

VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) anim()
(byte~) anim::$10 2002.0
(byte~) anim::$9 2002.0
(byte) anim::i
(byte) anim::i#1 1501.5
(byte) anim::i#2 706.5882352941177
(byte) anim::i2
(byte) anim::i2#0 750.75
(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
(signed byte~) calculate_matrix::$10 2002.0
(signed byte~) calculate_matrix::$11 2002.0
(signed byte~) calculate_matrix::$12 2002.0
(signed byte~) calculate_matrix::$13 2002.0
(signed byte~) calculate_matrix::$14 2002.0
(signed byte~) calculate_matrix::$15 2002.0
(signed byte~) calculate_matrix::$16 2002.0
(signed byte~) calculate_matrix::$17 2002.0
(signed byte~) calculate_matrix::$18 2002.0
(signed byte~) calculate_matrix::$19 2002.0
(signed byte~) calculate_matrix::$20 2002.0
(signed byte~) calculate_matrix::$21 2002.0
(signed byte~) calculate_matrix::$22 2002.0
(signed byte~) calculate_matrix::$23 2002.0
(signed byte~) calculate_matrix::$24 2002.0
(signed byte~) calculate_matrix::$25 2002.0
(signed byte~) calculate_matrix::$26 2002.0
(signed byte~) calculate_matrix::$27 2002.0
(signed byte~) calculate_matrix::$28 2002.0
(signed byte~) calculate_matrix::$29 2002.0
(signed byte~) calculate_matrix::$30 2002.0
(signed byte~) calculate_matrix::$31 2002.0
(signed byte~) calculate_matrix::$32 2002.0
(signed byte~) calculate_matrix::$33 2002.0
(signed byte~) calculate_matrix::$34 2002.0
(signed byte) calculate_matrix::sx
(signed byte) calculate_matrix::sx#0 737.1818181818182
(signed byte) calculate_matrix::sy
(signed byte) calculate_matrix::sy#0 407.1333333333334
(signed byte) calculate_matrix::sz
(signed byte) calculate_matrix::t1
(signed byte) calculate_matrix::t1#0 417.08333333333337
(signed byte) calculate_matrix::t10
(signed byte) calculate_matrix::t10#0 91.0
(signed byte) calculate_matrix::t2
(signed byte) calculate_matrix::t2#0 455.0
(signed byte) calculate_matrix::t3
(signed byte) calculate_matrix::t3#0 147.2058823529412
(signed byte) calculate_matrix::t4
(signed byte) calculate_matrix::t4#0 151.66666666666666
(signed byte) calculate_matrix::t5
(signed byte) calculate_matrix::t5#0 147.2058823529412
(signed byte) calculate_matrix::t6
(signed byte) calculate_matrix::t6#0 156.40625
(signed byte) calculate_matrix::t7
(signed byte) calculate_matrix::t7#0 151.66666666666666
(signed byte) calculate_matrix::t8
(signed byte) calculate_matrix::t8#0 151.66666666666666
(signed byte) calculate_matrix::t9
(signed byte) calculate_matrix::t9#0 88.32352941176471
(void()) debug_print()
(byte*) debug_print::at_line
(byte) debug_print::c
(byte) debug_print::c#1 66667.33333333333
(byte) debug_print::c#2 42105.68421052631
(byte) debug_print::i
(byte) debug_print::i#1 150001.5
(byte) debug_print::i#2 40000.4
(byte) debug_print::print_schar_pos10_col
(byte) debug_print::print_schar_pos10_row
(signed byte) debug_print::print_schar_pos10_sb
(signed byte) debug_print::print_schar_pos10_sb#0 2002.0
(byte) debug_print::print_schar_pos11_col
(byte) debug_print::print_schar_pos11_row
(signed byte) debug_print::print_schar_pos11_sb
(signed byte) debug_print::print_schar_pos11_sb#0 2002.0
(byte) debug_print::print_schar_pos12_col
(byte) debug_print::print_schar_pos12_row
(signed byte) debug_print::print_schar_pos12_sb
(signed byte) debug_print::print_schar_pos12_sb#0 2002.0
(byte) debug_print::print_schar_pos1_col
(byte) debug_print::print_schar_pos1_row
(signed byte) debug_print::print_schar_pos1_sb
(signed byte) debug_print::print_schar_pos1_sb#0 2002.0
(byte) debug_print::print_schar_pos2_col
(byte) debug_print::print_schar_pos2_row
(signed byte) debug_print::print_schar_pos2_sb
(signed byte) debug_print::print_schar_pos2_sb#0 2002.0
(byte) debug_print::print_schar_pos3_col
(byte) debug_print::print_schar_pos3_row
(signed byte) debug_print::print_schar_pos3_sb
(byte) debug_print::print_schar_pos4_col
(byte) debug_print::print_schar_pos4_row
(signed byte) debug_print::print_schar_pos4_sb
(signed byte) debug_print::print_schar_pos4_sb#0 2002.0
(byte) debug_print::print_schar_pos5_col
(byte) debug_print::print_schar_pos5_row
(signed byte) debug_print::print_schar_pos5_sb
(signed byte) debug_print::print_schar_pos5_sb#0 2002.0
(byte) debug_print::print_schar_pos6_col
(byte) debug_print::print_schar_pos6_row
(signed byte) debug_print::print_schar_pos6_sb
(signed byte) debug_print::print_schar_pos6_sb#0 2002.0
(byte) debug_print::print_schar_pos7_col
(byte) debug_print::print_schar_pos7_row
(signed byte) debug_print::print_schar_pos7_sb
(signed byte) debug_print::print_schar_pos7_sb#0 2002.0
(byte) debug_print::print_schar_pos8_col
(byte) debug_print::print_schar_pos8_row
(signed byte) debug_print::print_schar_pos8_sb
(signed byte) debug_print::print_schar_pos8_sb#0 2002.0
(byte) debug_print::print_schar_pos9_col
(byte) debug_print::print_schar_pos9_row
(signed byte) debug_print::print_schar_pos9_sb
(signed byte) debug_print::print_schar_pos9_sb#0 2002.0
(void()) debug_print_init()
(byte*~) debug_print_init::$41 2002.0
(byte*~) debug_print_init::$44 2002.0
(byte*~) debug_print_init::$47 2002.0
(byte*~) debug_print_init::$50 2002.0
(byte*~) debug_print_init::$53 2002.0
(byte*~) debug_print_init::$56 2002.0
(byte*~) debug_print_init::$59 2002.0
(byte*~) debug_print_init::$62 2002.0
(byte*~) debug_print_init::$65 2002.0
(byte*) debug_print_init::at_cols
(byte*) debug_print_init::at_line
(byte) debug_print_init::c
(byte) debug_print_init::c#1 67.33333333333333
(byte) debug_print_init::c#2 297.3125
(byte) debug_print_init::col
(byte) debug_print_init::col#0 556.111111111111
(byte) debug_print_init::i
(byte) debug_print_init::i#1 151.5
(byte) debug_print_init::i#2 45.63636363636364
(byte) debug_print_init::j
(byte) debug_print_init::j#1 1501.5
(byte) debug_print_init::j#2 550.5500000000001
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 20002.0
(byte*) memset::dst#2 13334.666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(byte*) print_char_at::at
(byte*) print_char_at::at#0 2000002.0
(byte*) print_char_at::at#1 2000002.0
(byte*) print_char_at::at#2 2.0000002E7
(byte*) print_char_at::at#3 1.0000001E7
(byte*) print_char_at::at#4 1.22000005E8
(byte) print_char_at::ch
(byte) print_char_at::ch#2 1.0000001E7
(byte) print_char_at::ch#3 2.0000002E7
(byte) print_char_at::ch#4 1.20000003E8
(void()) print_cls()
(void()) print_schar_at((signed byte) print_schar_at::b , (byte*) print_schar_at::at)
(byte*) print_schar_at::at
(byte*) print_schar_at::at#0 101.0
(byte*) print_schar_at::at#1 101.0
(byte*) print_schar_at::at#15 100001.0
(byte*) print_schar_at::at#16 100001.0
(byte*) print_schar_at::at#17 100001.0
(byte*) print_schar_at::at#18 100001.0
(byte*) print_schar_at::at#19 100001.0
(byte*) print_schar_at::at#2 101.0
(byte*) print_schar_at::at#20 100001.0
(byte*) print_schar_at::at#21 450039.0
(signed byte) print_schar_at::b
(signed byte) print_schar_at::b#0 2000002.0
(signed byte) print_schar_at::b#1 202.0
(signed byte) print_schar_at::b#10 2002.0
(signed byte) print_schar_at::b#11 2002.0
(signed byte) print_schar_at::b#12 2002.0
(signed byte) print_schar_at::b#13 2002.0
(signed byte) print_schar_at::b#14 2002.0
(signed byte) print_schar_at::b#15 2002.0
(signed byte) print_schar_at::b#16 200002.0
(signed byte) print_schar_at::b#17 200002.0
(signed byte) print_schar_at::b#18 200002.0
(signed byte) print_schar_at::b#19 200002.0
(signed byte) print_schar_at::b#2 202.0
(signed byte) print_schar_at::b#20 200002.0
(signed byte) print_schar_at::b#21 200002.0
(signed byte) print_schar_at::b#22 601887.1666666666
(signed byte) print_schar_at::b#24 1000001.0
(signed byte) print_schar_at::b#3 202.0
(signed byte) print_schar_at::b#4 2002.0
(signed byte) print_schar_at::b#5 2002.0
(signed byte) print_schar_at::b#7 2002.0
(signed byte) print_schar_at::b#8 2002.0
(signed byte) print_schar_at::b#9 2002.0
(byte*) print_screen
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(byte*) print_str_at::at
(byte*) print_str_at::at#0 1001.0
(byte*) print_str_at::at#13 1034.6666666666667
(byte*) print_str_at::at#15 101.0
(byte*) print_str_at::str
(byte*) print_str_at::str#0 2002.0
(byte*) print_str_at::str#13 1026.25
(byte*) print_str_at::str#15 101.0
(void()) print_uchar_at((byte) print_uchar_at::b , (byte*) print_uchar_at::at)
(byte~) print_uchar_at::$0 2.0000002E7
(byte~) print_uchar_at::$2 1.0000001E7
(byte*) print_uchar_at::at
(byte*) print_uchar_at::at#0 3000000.428571428
(byte) print_uchar_at::b
(byte) print_uchar_at::b#0 4200000.6
(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
(signed byte) rotate_matrix::x
(signed byte) rotate_matrix::x#0 3667.333333333333
(signed byte) rotate_matrix::y
(signed byte) rotate_matrix::y#0 3667.333333333333
(signed byte) rotate_matrix::z
(signed byte) rotate_matrix::z#0 3667.333333333333
(void()) sprites_init()
(byte) sprites_init::i
(byte) sprites_init::i#1 151.5
(byte) sprites_init::i#2 134.66666666666666
(byte*) sprites_init::sprites_ptr
(void()) store_matrix()
(signed byte) sx
(signed byte) sx#11 14.488888888888889
(signed byte) sx#2 101.0
(signed byte) sy
(signed byte) sy#11 14.32967032967033
(signed byte) sy#2 202.0

Initial phi equivalence classes
[ sprites_init::i#2 sprites_init::i#1 ]
[ debug_print_init::c#2 debug_print_init::c#1 ]
[ debug_print_init::i#2 debug_print_init::i#1 ]
[ debug_print_init::j#2 debug_print_init::j#1 ]
[ sx#11 sx#2 ]
[ sy#11 sy#2 ]
[ anim::i#2 anim::i#1 ]
[ print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ]
[ print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ]
[ print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 ]
[ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 ]
[ debug_print::c#2 debug_print::c#1 ]
[ debug_print::i#2 debug_print::i#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ]
[ print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 ]
Added variable debug_print_init::col#0 to live range equivalence class [ debug_print_init::col#0 ]
Added variable debug_print_init::$41 to live range equivalence class [ debug_print_init::$41 ]
Added variable debug_print_init::$44 to live range equivalence class [ debug_print_init::$44 ]
Added variable debug_print_init::$47 to live range equivalence class [ debug_print_init::$47 ]
Added variable debug_print_init::$50 to live range equivalence class [ debug_print_init::$50 ]
Added variable debug_print_init::$53 to live range equivalence class [ debug_print_init::$53 ]
Added variable debug_print_init::$56 to live range equivalence class [ debug_print_init::$56 ]
Added variable debug_print_init::$59 to live range equivalence class [ debug_print_init::$59 ]
Added variable debug_print_init::$62 to live range equivalence class [ debug_print_init::$62 ]
Added variable debug_print_init::$65 to live range equivalence class [ debug_print_init::$65 ]
Added variable calculate_matrix::sx#0 to live range equivalence class [ calculate_matrix::sx#0 ]
Added variable calculate_matrix::sy#0 to live range equivalence class [ calculate_matrix::sy#0 ]
Added variable rotate_matrix::x#0 to live range equivalence class [ rotate_matrix::x#0 ]
Added variable rotate_matrix::y#0 to live range equivalence class [ rotate_matrix::y#0 ]
Added variable rotate_matrix::z#0 to live range equivalence class [ rotate_matrix::z#0 ]
Added variable anim::i2#0 to live range equivalence class [ anim::i2#0 ]
Added variable anim::$9 to live range equivalence class [ anim::$9 ]
Added variable anim::$10 to live range equivalence class [ anim::$10 ]
Added variable print_uchar_at::at#0 to live range equivalence class [ print_uchar_at::at#0 ]
Added variable print_uchar_at::b#0 to live range equivalence class [ print_uchar_at::b#0 ]
Added variable calculate_matrix::t1#0 to live range equivalence class [ calculate_matrix::t1#0 ]
Added variable calculate_matrix::t2#0 to live range equivalence class [ calculate_matrix::t2#0 ]
Added variable calculate_matrix::t3#0 to live range equivalence class [ calculate_matrix::t3#0 ]
Added variable calculate_matrix::t4#0 to live range equivalence class [ calculate_matrix::t4#0 ]
Added variable calculate_matrix::t5#0 to live range equivalence class [ calculate_matrix::t5#0 ]
Added variable calculate_matrix::t6#0 to live range equivalence class [ calculate_matrix::t6#0 ]
Added variable calculate_matrix::t7#0 to live range equivalence class [ calculate_matrix::t7#0 ]
Added variable calculate_matrix::t8#0 to live range equivalence class [ calculate_matrix::t8#0 ]
Added variable calculate_matrix::t9#0 to live range equivalence class [ calculate_matrix::t9#0 ]
Added variable calculate_matrix::t10#0 to live range equivalence class [ calculate_matrix::t10#0 ]
Added variable calculate_matrix::$10 to live range equivalence class [ calculate_matrix::$10 ]
Added variable calculate_matrix::$11 to live range equivalence class [ calculate_matrix::$11 ]
Added variable calculate_matrix::$12 to live range equivalence class [ calculate_matrix::$12 ]
Added variable calculate_matrix::$13 to live range equivalence class [ calculate_matrix::$13 ]
Added variable calculate_matrix::$14 to live range equivalence class [ calculate_matrix::$14 ]
Added variable calculate_matrix::$15 to live range equivalence class [ calculate_matrix::$15 ]
Added variable calculate_matrix::$16 to live range equivalence class [ calculate_matrix::$16 ]
Added variable calculate_matrix::$17 to live range equivalence class [ calculate_matrix::$17 ]
Added variable calculate_matrix::$18 to live range equivalence class [ calculate_matrix::$18 ]
Added variable calculate_matrix::$19 to live range equivalence class [ calculate_matrix::$19 ]
Added variable calculate_matrix::$20 to live range equivalence class [ calculate_matrix::$20 ]
Added variable calculate_matrix::$21 to live range equivalence class [ calculate_matrix::$21 ]
Added variable calculate_matrix::$22 to live range equivalence class [ calculate_matrix::$22 ]
Added variable calculate_matrix::$23 to live range equivalence class [ calculate_matrix::$23 ]
Added variable calculate_matrix::$24 to live range equivalence class [ calculate_matrix::$24 ]
Added variable calculate_matrix::$25 to live range equivalence class [ calculate_matrix::$25 ]
Added variable calculate_matrix::$26 to live range equivalence class [ calculate_matrix::$26 ]
Added variable calculate_matrix::$27 to live range equivalence class [ calculate_matrix::$27 ]
Added variable calculate_matrix::$28 to live range equivalence class [ calculate_matrix::$28 ]
Added variable calculate_matrix::$29 to live range equivalence class [ calculate_matrix::$29 ]
Added variable calculate_matrix::$30 to live range equivalence class [ calculate_matrix::$30 ]
Added variable calculate_matrix::$31 to live range equivalence class [ calculate_matrix::$31 ]
Added variable calculate_matrix::$32 to live range equivalence class [ calculate_matrix::$32 ]
Added variable calculate_matrix::$33 to live range equivalence class [ calculate_matrix::$33 ]
Added variable calculate_matrix::$34 to live range equivalence class [ calculate_matrix::$34 ]
Added variable debug_print::print_schar_pos1_sb#0 to live range equivalence class [ debug_print::print_schar_pos1_sb#0 ]
Added variable debug_print::print_schar_pos2_sb#0 to live range equivalence class [ debug_print::print_schar_pos2_sb#0 ]
Added variable debug_print::print_schar_pos4_sb#0 to live range equivalence class [ debug_print::print_schar_pos4_sb#0 ]
Added variable debug_print::print_schar_pos5_sb#0 to live range equivalence class [ debug_print::print_schar_pos5_sb#0 ]
Added variable debug_print::print_schar_pos6_sb#0 to live range equivalence class [ debug_print::print_schar_pos6_sb#0 ]
Added variable debug_print::print_schar_pos7_sb#0 to live range equivalence class [ debug_print::print_schar_pos7_sb#0 ]
Added variable debug_print::print_schar_pos8_sb#0 to live range equivalence class [ debug_print::print_schar_pos8_sb#0 ]
Added variable debug_print::print_schar_pos9_sb#0 to live range equivalence class [ debug_print::print_schar_pos9_sb#0 ]
Added variable debug_print::print_schar_pos10_sb#0 to live range equivalence class [ debug_print::print_schar_pos10_sb#0 ]
Added variable debug_print::print_schar_pos11_sb#0 to live range equivalence class [ debug_print::print_schar_pos11_sb#0 ]
Added variable debug_print::print_schar_pos12_sb#0 to live range equivalence class [ debug_print::print_schar_pos12_sb#0 ]
Added variable print_uchar_at::$0 to live range equivalence class [ print_uchar_at::$0 ]
Added variable print_uchar_at::$2 to live range equivalence class [ print_uchar_at::$2 ]
Complete equivalence classes
[ sprites_init::i#2 sprites_init::i#1 ]
[ debug_print_init::c#2 debug_print_init::c#1 ]
[ debug_print_init::i#2 debug_print_init::i#1 ]
[ debug_print_init::j#2 debug_print_init::j#1 ]
[ sx#11 sx#2 ]
[ sy#11 sy#2 ]
[ anim::i#2 anim::i#1 ]
[ print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ]
[ print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ]
[ print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 ]
[ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 ]
[ debug_print::c#2 debug_print::c#1 ]
[ debug_print::i#2 debug_print::i#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ]
[ print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 ]
[ debug_print_init::col#0 ]
[ debug_print_init::$41 ]
[ debug_print_init::$44 ]
[ debug_print_init::$47 ]
[ debug_print_init::$50 ]
[ debug_print_init::$53 ]
[ debug_print_init::$56 ]
[ debug_print_init::$59 ]
[ debug_print_init::$62 ]
[ debug_print_init::$65 ]
[ calculate_matrix::sx#0 ]
[ calculate_matrix::sy#0 ]
[ rotate_matrix::x#0 ]
[ rotate_matrix::y#0 ]
[ rotate_matrix::z#0 ]
[ anim::i2#0 ]
[ anim::$9 ]
[ anim::$10 ]
[ print_uchar_at::at#0 ]
[ print_uchar_at::b#0 ]
[ calculate_matrix::t1#0 ]
[ calculate_matrix::t2#0 ]
[ calculate_matrix::t3#0 ]
[ calculate_matrix::t4#0 ]
[ calculate_matrix::t5#0 ]
[ calculate_matrix::t6#0 ]
[ calculate_matrix::t7#0 ]
[ calculate_matrix::t8#0 ]
[ calculate_matrix::t9#0 ]
[ calculate_matrix::t10#0 ]
[ calculate_matrix::$10 ]
[ calculate_matrix::$11 ]
[ calculate_matrix::$12 ]
[ calculate_matrix::$13 ]
[ calculate_matrix::$14 ]
[ calculate_matrix::$15 ]
[ calculate_matrix::$16 ]
[ calculate_matrix::$17 ]
[ calculate_matrix::$18 ]
[ calculate_matrix::$19 ]
[ calculate_matrix::$20 ]
[ calculate_matrix::$21 ]
[ calculate_matrix::$22 ]
[ calculate_matrix::$23 ]
[ calculate_matrix::$24 ]
[ calculate_matrix::$25 ]
[ calculate_matrix::$26 ]
[ calculate_matrix::$27 ]
[ calculate_matrix::$28 ]
[ calculate_matrix::$29 ]
[ calculate_matrix::$30 ]
[ calculate_matrix::$31 ]
[ calculate_matrix::$32 ]
[ calculate_matrix::$33 ]
[ calculate_matrix::$34 ]
[ debug_print::print_schar_pos1_sb#0 ]
[ debug_print::print_schar_pos2_sb#0 ]
[ debug_print::print_schar_pos4_sb#0 ]
[ debug_print::print_schar_pos5_sb#0 ]
[ debug_print::print_schar_pos6_sb#0 ]
[ debug_print::print_schar_pos7_sb#0 ]
[ debug_print::print_schar_pos8_sb#0 ]
[ debug_print::print_schar_pos9_sb#0 ]
[ debug_print::print_schar_pos10_sb#0 ]
[ debug_print::print_schar_pos11_sb#0 ]
[ debug_print::print_schar_pos12_sb#0 ]
[ print_uchar_at::$0 ]
[ print_uchar_at::$2 ]
Allocated zp[1]:2 [ sprites_init::i#2 sprites_init::i#1 ]
Allocated zp[1]:3 [ debug_print_init::c#2 debug_print_init::c#1 ]
Allocated zp[1]:4 [ debug_print_init::i#2 debug_print_init::i#1 ]
Allocated zp[1]:5 [ debug_print_init::j#2 debug_print_init::j#1 ]
Allocated zp[1]:6 [ sx#11 sx#2 ]
Allocated zp[1]:7 [ sy#11 sy#2 ]
Allocated zp[1]:8 [ anim::i#2 anim::i#1 ]
Allocated zp[2]:9 [ print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ]
Allocated zp[2]:11 [ print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ]
Allocated zp[2]:13 [ print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 ]
Allocated zp[1]:15 [ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 ]
Allocated zp[1]:16 [ debug_print::c#2 debug_print::c#1 ]
Allocated zp[1]:17 [ debug_print::i#2 debug_print::i#1 ]
Allocated zp[2]:18 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:20 [ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ]
Allocated zp[2]:21 [ print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 ]
Allocated zp[1]:23 [ debug_print_init::col#0 ]
Allocated zp[2]:24 [ debug_print_init::$41 ]
Allocated zp[2]:26 [ debug_print_init::$44 ]
Allocated zp[2]:28 [ debug_print_init::$47 ]
Allocated zp[2]:30 [ debug_print_init::$50 ]
Allocated zp[2]:32 [ debug_print_init::$53 ]
Allocated zp[2]:34 [ debug_print_init::$56 ]
Allocated zp[2]:36 [ debug_print_init::$59 ]
Allocated zp[2]:38 [ debug_print_init::$62 ]
Allocated zp[2]:40 [ debug_print_init::$65 ]
Allocated zp[1]:42 [ calculate_matrix::sx#0 ]
Allocated zp[1]:43 [ calculate_matrix::sy#0 ]
Allocated zp[1]:44 [ rotate_matrix::x#0 ]
Allocated zp[1]:45 [ rotate_matrix::y#0 ]
Allocated zp[1]:46 [ rotate_matrix::z#0 ]
Allocated zp[1]:47 [ anim::i2#0 ]
Allocated zp[1]:48 [ anim::$9 ]
Allocated zp[1]:49 [ anim::$10 ]
Allocated zp[2]:50 [ print_uchar_at::at#0 ]
Allocated zp[1]:52 [ print_uchar_at::b#0 ]
Allocated zp[1]:53 [ calculate_matrix::t1#0 ]
Allocated zp[1]:54 [ calculate_matrix::t2#0 ]
Allocated zp[1]:55 [ calculate_matrix::t3#0 ]
Allocated zp[1]:56 [ calculate_matrix::t4#0 ]
Allocated zp[1]:57 [ calculate_matrix::t5#0 ]
Allocated zp[1]:58 [ calculate_matrix::t6#0 ]
Allocated zp[1]:59 [ calculate_matrix::t7#0 ]
Allocated zp[1]:60 [ calculate_matrix::t8#0 ]
Allocated zp[1]:61 [ calculate_matrix::t9#0 ]
Allocated zp[1]:62 [ calculate_matrix::t10#0 ]
Allocated zp[1]:63 [ calculate_matrix::$10 ]
Allocated zp[1]:64 [ calculate_matrix::$11 ]
Allocated zp[1]:65 [ calculate_matrix::$12 ]
Allocated zp[1]:66 [ calculate_matrix::$13 ]
Allocated zp[1]:67 [ calculate_matrix::$14 ]
Allocated zp[1]:68 [ calculate_matrix::$15 ]
Allocated zp[1]:69 [ calculate_matrix::$16 ]
Allocated zp[1]:70 [ calculate_matrix::$17 ]
Allocated zp[1]:71 [ calculate_matrix::$18 ]
Allocated zp[1]:72 [ calculate_matrix::$19 ]
Allocated zp[1]:73 [ calculate_matrix::$20 ]
Allocated zp[1]:74 [ calculate_matrix::$21 ]
Allocated zp[1]:75 [ calculate_matrix::$22 ]
Allocated zp[1]:76 [ calculate_matrix::$23 ]
Allocated zp[1]:77 [ calculate_matrix::$24 ]
Allocated zp[1]:78 [ calculate_matrix::$25 ]
Allocated zp[1]:79 [ calculate_matrix::$26 ]
Allocated zp[1]:80 [ calculate_matrix::$27 ]
Allocated zp[1]:81 [ calculate_matrix::$28 ]
Allocated zp[1]:82 [ calculate_matrix::$29 ]
Allocated zp[1]:83 [ calculate_matrix::$30 ]
Allocated zp[1]:84 [ calculate_matrix::$31 ]
Allocated zp[1]:85 [ calculate_matrix::$32 ]
Allocated zp[1]:86 [ calculate_matrix::$33 ]
Allocated zp[1]:87 [ calculate_matrix::$34 ]
Allocated zp[1]:88 [ debug_print::print_schar_pos1_sb#0 ]
Allocated zp[1]:89 [ debug_print::print_schar_pos2_sb#0 ]
Allocated zp[1]:90 [ debug_print::print_schar_pos4_sb#0 ]
Allocated zp[1]:91 [ debug_print::print_schar_pos5_sb#0 ]
Allocated zp[1]:92 [ debug_print::print_schar_pos6_sb#0 ]
Allocated zp[1]:93 [ debug_print::print_schar_pos7_sb#0 ]
Allocated zp[1]:94 [ debug_print::print_schar_pos8_sb#0 ]
Allocated zp[1]:95 [ debug_print::print_schar_pos9_sb#0 ]
Allocated zp[1]:96 [ debug_print::print_schar_pos10_sb#0 ]
Allocated zp[1]:97 [ debug_print::print_schar_pos11_sb#0 ]
Allocated zp[1]:98 [ debug_print::print_schar_pos12_sb#0 ]
Allocated zp[1]:99 [ print_uchar_at::$0 ]
Allocated zp[1]:100 [ print_uchar_at::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// 3D Rotation using a Rotation Matrix
// Based on: 
// - C= Hacking Magazine Issue 8. http://www.ffd2.com/fridge/chacking/c=hacking8.txt
// - Codebase64 Article http://codebase64.org/doku.php?id=base:3d_rotation  
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .const LIGHT_GREY = $f
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
  .const sz = 0
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_COLOR = $d027
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // The rotated point - updated by calling rotate_matrix()
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  // The rotated point with perspective
  .label pp = $f3
  .label xp = $f4
  .label yp = $f5
  // Pointers used to multiply perspective (d/z0-z) onto x- & y-coordinates. Points into mulf_sqr1 / mulf_sqr2  
  .label psp1 = $f6
  .label psp2 = $f8
  .label SCREEN = $400
  .label COSH = SINH+$40
  .label COSQ = SINQ+$40
  .label print_screen = $400
  .label sx = 6
  .label sy = 7
  // main
main: {
    // asm { sei  }
    sei
    // [1] call sprites_init 
    jsr sprites_init
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const word*) psp1) ← (word)(const byte*) mulf_sqr1 -- _deref_pwuc1=vwuc2 
    //mulf_init();
    lda #<mulf_sqr1
    sta psp1
    lda #>mulf_sqr1
    sta psp1+1
    // [3] *((const word*) psp2) ← (word)(const byte*) mulf_sqr2 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr2
    sta psp2
    lda #>mulf_sqr2
    sta psp2+1
    // [4] call debug_print_init 
    // [15] phi from main::@1 to debug_print_init [phi:main::@1->debug_print_init]
  debug_print_init_from___b1:
    jsr debug_print_init
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [6] call anim 
  //calculate_matrix(1,1,1);
    // [77] phi from main::@2 to anim [phi:main::@2->anim]
  anim_from___b2:
    jsr anim
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // sprites_init
// Initialize sprites
sprites_init: {
    .label SCREEN = $400
    .label sprites_ptr = SCREEN+$3f8
    .label i = 2
    // [8] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE
    // [9] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  __b1_from_sprites_init:
    // [9] phi (byte) sprites_init::i#2 = (byte) 0 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [9] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  __b1_from___b1:
    // [9] phi (byte) sprites_init::i#2 = (byte) sprites_init::i#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    jmp __b1
    // sprites_init::@1
  __b1:
    // [10] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← (byte)(const byte*) SPRITE/(byte) $40 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #$ff&SPRITE/$40
    ldy.z i
    sta sprites_ptr,y
    // [11] *((const nomodify byte*) SPRITES_COLOR + (byte) sprites_init::i#2) ← (const nomodify byte) GREEN -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #GREEN
    ldy.z i
    sta SPRITES_COLOR,y
    // [12] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [13] if((byte) sprites_init::i#1!=(byte) 8) goto sprites_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // sprites_init::@return
  __breturn:
    // [14] return 
    rts
}
  // debug_print_init
debug_print_init: {
    .label COLS = $d800
    .label at_line = SCREEN+$10*$28
    .label at_cols = COLS+$10*$28
    .label __41 = $18
    .label __44 = $1a
    .label __47 = $1c
    .label __50 = $1e
    .label __53 = $20
    .label __56 = $22
    .label __59 = $24
    .label __62 = $26
    .label __65 = $28
    .label col = $17
    .label j = 5
    .label c = 3
    .label i = 4
    // [16] call print_cls 
    // [112] phi from debug_print_init to print_cls [phi:debug_print_init->print_cls]
  print_cls_from_debug_print_init:
    jsr print_cls
    // [17] phi from debug_print_init to debug_print_init::@4 [phi:debug_print_init->debug_print_init::@4]
  __b4_from_debug_print_init:
    jmp __b4
    // debug_print_init::@4
  __b4:
    // [18] call print_str_at 
    // [115] phi from debug_print_init::@4 to print_str_at [phi:debug_print_init::@4->print_str_at]
  print_str_at_from___b4:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(byte) $22 [phi:debug_print_init::@4->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$22
    sta.z print_str_at.at
    lda #>SCREEN+$22
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str [phi:debug_print_init::@4->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str_at.str
    lda #>str
    sta.z print_str_at.str+1
    jsr print_str_at
    // [19] phi from debug_print_init::@4 to debug_print_init::@5 [phi:debug_print_init::@4->debug_print_init::@5]
  __b5_from___b4:
    jmp __b5
    // debug_print_init::@5
  __b5:
    // [20] call print_str_at 
    // [115] phi from debug_print_init::@5 to print_str_at [phi:debug_print_init::@5->print_str_at]
  print_str_at_from___b5:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(byte)(number) $28*(number) 1+(byte) $22 [phi:debug_print_init::@5->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*1+$22
    sta.z print_str_at.at
    lda #>SCREEN+$28*1+$22
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str1 [phi:debug_print_init::@5->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str_at.str
    lda #>str1
    sta.z print_str_at.str+1
    jsr print_str_at
    // [21] phi from debug_print_init::@5 to debug_print_init::@6 [phi:debug_print_init::@5->debug_print_init::@6]
  __b6_from___b5:
    jmp __b6
    // debug_print_init::@6
  __b6:
    // [22] call print_str_at 
    // [115] phi from debug_print_init::@6 to print_str_at [phi:debug_print_init::@6->print_str_at]
  print_str_at_from___b6:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(byte)(number) $28*(number) 2+(byte) $22 [phi:debug_print_init::@6->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*2+$22
    sta.z print_str_at.at
    lda #>SCREEN+$28*2+$22
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str2 [phi:debug_print_init::@6->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str_at.str
    lda #>str2
    sta.z print_str_at.str+1
    jsr print_str_at
    // [23] phi from debug_print_init::@6 to debug_print_init::@7 [phi:debug_print_init::@6->debug_print_init::@7]
  __b7_from___b6:
    jmp __b7
    // debug_print_init::@7
  __b7:
    // [24] call print_str_at 
    // [115] phi from debug_print_init::@7 to print_str_at [phi:debug_print_init::@7->print_str_at]
  print_str_at_from___b7:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $10 [phi:debug_print_init::@7->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$10
    sta.z print_str_at.at
    lda #>SCREEN+$28*$10
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str3 [phi:debug_print_init::@7->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str_at.str
    lda #>str3
    sta.z print_str_at.str+1
    jsr print_str_at
    // [25] phi from debug_print_init::@7 to debug_print_init::@8 [phi:debug_print_init::@7->debug_print_init::@8]
  __b8_from___b7:
    jmp __b8
    // debug_print_init::@8
  __b8:
    // [26] call print_str_at 
    // [115] phi from debug_print_init::@8 to print_str_at [phi:debug_print_init::@8->print_str_at]
  print_str_at_from___b8:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $11 [phi:debug_print_init::@8->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$11
    sta.z print_str_at.at
    lda #>SCREEN+$28*$11
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str4 [phi:debug_print_init::@8->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str_at.str
    lda #>str4
    sta.z print_str_at.str+1
    jsr print_str_at
    // [27] phi from debug_print_init::@8 to debug_print_init::@9 [phi:debug_print_init::@8->debug_print_init::@9]
  __b9_from___b8:
    jmp __b9
    // debug_print_init::@9
  __b9:
    // [28] call print_str_at 
    // [115] phi from debug_print_init::@9 to print_str_at [phi:debug_print_init::@9->print_str_at]
  print_str_at_from___b9:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $12 [phi:debug_print_init::@9->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$12
    sta.z print_str_at.at
    lda #>SCREEN+$28*$12
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str5 [phi:debug_print_init::@9->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str_at.str
    lda #>str5
    sta.z print_str_at.str+1
    jsr print_str_at
    // [29] phi from debug_print_init::@9 to debug_print_init::@10 [phi:debug_print_init::@9->debug_print_init::@10]
  __b10_from___b9:
    jmp __b10
    // debug_print_init::@10
  __b10:
    // [30] call print_str_at 
    // [115] phi from debug_print_init::@10 to print_str_at [phi:debug_print_init::@10->print_str_at]
  print_str_at_from___b10:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $13 [phi:debug_print_init::@10->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$13
    sta.z print_str_at.at
    lda #>SCREEN+$28*$13
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str6 [phi:debug_print_init::@10->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str6
    sta.z print_str_at.str
    lda #>str6
    sta.z print_str_at.str+1
    jsr print_str_at
    // [31] phi from debug_print_init::@10 to debug_print_init::@11 [phi:debug_print_init::@10->debug_print_init::@11]
  __b11_from___b10:
    jmp __b11
    // debug_print_init::@11
  __b11:
    // [32] call print_str_at 
    // [115] phi from debug_print_init::@11 to print_str_at [phi:debug_print_init::@11->print_str_at]
  print_str_at_from___b11:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $14 [phi:debug_print_init::@11->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$14
    sta.z print_str_at.at
    lda #>SCREEN+$28*$14
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str7 [phi:debug_print_init::@11->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str7
    sta.z print_str_at.str
    lda #>str7
    sta.z print_str_at.str+1
    jsr print_str_at
    // [33] phi from debug_print_init::@11 to debug_print_init::@12 [phi:debug_print_init::@11->debug_print_init::@12]
  __b12_from___b11:
    jmp __b12
    // debug_print_init::@12
  __b12:
    // [34] call print_str_at 
    // [115] phi from debug_print_init::@12 to print_str_at [phi:debug_print_init::@12->print_str_at]
  print_str_at_from___b12:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $15 [phi:debug_print_init::@12->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$15
    sta.z print_str_at.at
    lda #>SCREEN+$28*$15
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str8 [phi:debug_print_init::@12->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str8
    sta.z print_str_at.str
    lda #>str8
    sta.z print_str_at.str+1
    jsr print_str_at
    // [35] phi from debug_print_init::@12 to debug_print_init::@13 [phi:debug_print_init::@12->debug_print_init::@13]
  __b13_from___b12:
    jmp __b13
    // debug_print_init::@13
  __b13:
    // [36] call print_str_at 
    // [115] phi from debug_print_init::@13 to print_str_at [phi:debug_print_init::@13->print_str_at]
  print_str_at_from___b13:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $16 [phi:debug_print_init::@13->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$16
    sta.z print_str_at.at
    lda #>SCREEN+$28*$16
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str9 [phi:debug_print_init::@13->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str9
    sta.z print_str_at.str
    lda #>str9
    sta.z print_str_at.str+1
    jsr print_str_at
    // [37] phi from debug_print_init::@13 to debug_print_init::@14 [phi:debug_print_init::@13->debug_print_init::@14]
  __b14_from___b13:
    jmp __b14
    // debug_print_init::@14
  __b14:
    // [38] call print_str_at 
    // [115] phi from debug_print_init::@14 to print_str_at [phi:debug_print_init::@14->print_str_at]
  print_str_at_from___b14:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $17 [phi:debug_print_init::@14->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$17
    sta.z print_str_at.at
    lda #>SCREEN+$28*$17
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str10 [phi:debug_print_init::@14->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str10
    sta.z print_str_at.str
    lda #>str10
    sta.z print_str_at.str+1
    jsr print_str_at
    // [39] phi from debug_print_init::@14 to debug_print_init::@15 [phi:debug_print_init::@14->debug_print_init::@15]
  __b15_from___b14:
    jmp __b15
    // debug_print_init::@15
  __b15:
    // [40] call print_str_at 
    // [115] phi from debug_print_init::@15 to print_str_at [phi:debug_print_init::@15->print_str_at]
  print_str_at_from___b15:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $18 [phi:debug_print_init::@15->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$18
    sta.z print_str_at.at
    lda #>SCREEN+$28*$18
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str11 [phi:debug_print_init::@15->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str11
    sta.z print_str_at.str
    lda #>str11
    sta.z print_str_at.str+1
    jsr print_str_at
    // [41] phi from debug_print_init::@15 to debug_print_init::@1 [phi:debug_print_init::@15->debug_print_init::@1]
  __b1_from___b15:
    // [41] phi (byte) debug_print_init::i#2 = (byte) 0 [phi:debug_print_init::@15->debug_print_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [41] phi (byte) debug_print_init::c#2 = (byte) 4 [phi:debug_print_init::@15->debug_print_init::@1#1] -- vbuz1=vbuc1 
    lda #4
    sta.z c
    jmp __b1
    // [41] phi from debug_print_init::@3 to debug_print_init::@1 [phi:debug_print_init::@3->debug_print_init::@1]
  __b1_from___b3:
    // [41] phi (byte) debug_print_init::i#2 = (byte) debug_print_init::i#1 [phi:debug_print_init::@3->debug_print_init::@1#0] -- register_copy 
    // [41] phi (byte) debug_print_init::c#2 = (byte) debug_print_init::c#1 [phi:debug_print_init::@3->debug_print_init::@1#1] -- register_copy 
    jmp __b1
    // debug_print_init::@1
  __b1:
    // [42] (byte*) print_schar_at::at#0 ← (const byte*) debug_print_init::at_line#0 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line
    sta.z print_schar_at.at
    lda #>at_line
    adc #0
    sta.z print_schar_at.at+1
    // [43] (signed byte) print_schar_at::b#1 ← *((const signed byte*) xs + (byte) debug_print_init::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xs,y
    sta.z print_schar_at.b
    // [44] call print_schar_at 
    // [122] phi from debug_print_init::@1 to print_schar_at [phi:debug_print_init::@1->print_schar_at]
  print_schar_at_from___b1:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#0 [phi:debug_print_init::@1->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#1 [phi:debug_print_init::@1->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b16
    // debug_print_init::@16
  __b16:
    // [45] (byte*) print_schar_at::at#1 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*1
    sta.z print_schar_at.at
    lda #>at_line+$28*1
    adc #0
    sta.z print_schar_at.at+1
    // [46] (signed byte) print_schar_at::b#2 ← *((const signed byte*) ys + (byte) debug_print_init::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda ys,y
    sta.z print_schar_at.b
    // [47] call print_schar_at 
    // [122] phi from debug_print_init::@16 to print_schar_at [phi:debug_print_init::@16->print_schar_at]
  print_schar_at_from___b16:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#1 [phi:debug_print_init::@16->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#2 [phi:debug_print_init::@16->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b17
    // debug_print_init::@17
  __b17:
    // [48] (byte*) print_schar_at::at#2 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*2
    sta.z print_schar_at.at
    lda #>at_line+$28*2
    adc #0
    sta.z print_schar_at.at+1
    // [49] (signed byte) print_schar_at::b#3 ← *((const signed byte*) zs + (byte) debug_print_init::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda zs,y
    sta.z print_schar_at.b
    // [50] call print_schar_at 
    // [122] phi from debug_print_init::@17 to print_schar_at [phi:debug_print_init::@17->print_schar_at]
  print_schar_at_from___b17:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#2 [phi:debug_print_init::@17->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#3 [phi:debug_print_init::@17->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // [51] phi from debug_print_init::@17 to debug_print_init::@2 [phi:debug_print_init::@17->debug_print_init::@2]
  __b2_from___b17:
    // [51] phi (byte) debug_print_init::j#2 = (byte) 0 [phi:debug_print_init::@17->debug_print_init::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b2
    // [51] phi from debug_print_init::@2 to debug_print_init::@2 [phi:debug_print_init::@2->debug_print_init::@2]
  __b2_from___b2:
    // [51] phi (byte) debug_print_init::j#2 = (byte) debug_print_init::j#1 [phi:debug_print_init::@2->debug_print_init::@2#0] -- register_copy 
    jmp __b2
    // debug_print_init::@2
  __b2:
    // [52] (byte) debug_print_init::col#0 ← (byte) 8 + (byte) debug_print_init::i#2 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z i
    axs #-[8]
    stx.z col
    // [53] (byte*~) debug_print_init::$41 ← (const byte*) debug_print_init::at_cols#0 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols
    sta.z __41
    lda #>at_cols
    adc #0
    sta.z __41+1
    // [54] *((byte*~) debug_print_init::$41 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z col
    ldy.z j
    sta (__41),y
    // [55] (byte*~) debug_print_init::$44 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*1
    sta.z __44
    lda #>at_cols+$28*1
    adc #0
    sta.z __44+1
    // [56] *((byte*~) debug_print_init::$44 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z col
    ldy.z j
    sta (__44),y
    // [57] (byte*~) debug_print_init::$47 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*2
    sta.z __47
    lda #>at_cols+$28*2
    adc #0
    sta.z __47+1
    // [58] *((byte*~) debug_print_init::$47 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z col
    ldy.z j
    sta (__47),y
    // [59] (byte*~) debug_print_init::$50 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 3 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*3
    sta.z __50
    lda #>at_cols+$28*3
    adc #0
    sta.z __50+1
    // [60] *((byte*~) debug_print_init::$50 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z col
    ldy.z j
    sta (__50),y
    // [61] (byte*~) debug_print_init::$53 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 4 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*4
    sta.z __53
    lda #>at_cols+$28*4
    adc #0
    sta.z __53+1
    // [62] *((byte*~) debug_print_init::$53 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z col
    ldy.z j
    sta (__53),y
    // [63] (byte*~) debug_print_init::$56 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 5 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*5
    sta.z __56
    lda #>at_cols+$28*5
    adc #0
    sta.z __56+1
    // [64] *((byte*~) debug_print_init::$56 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z col
    ldy.z j
    sta (__56),y
    // [65] (byte*~) debug_print_init::$59 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 6 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*6
    sta.z __59
    lda #>at_cols+$28*6
    adc #0
    sta.z __59+1
    // [66] *((byte*~) debug_print_init::$59 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z col
    ldy.z j
    sta (__59),y
    // [67] (byte*~) debug_print_init::$62 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 7 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*7
    sta.z __62
    lda #>at_cols+$28*7
    adc #0
    sta.z __62+1
    // [68] *((byte*~) debug_print_init::$62 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z col
    ldy.z j
    sta (__62),y
    // [69] (byte*~) debug_print_init::$65 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 8 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*8
    sta.z __65
    lda #>at_cols+$28*8
    adc #0
    sta.z __65+1
    // [70] *((byte*~) debug_print_init::$65 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z col
    ldy.z j
    sta (__65),y
    // [71] (byte) debug_print_init::j#1 ← ++ (byte) debug_print_init::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [72] if((byte) debug_print_init::j#1!=(byte) 4) goto debug_print_init::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z j
    bne __b2_from___b2
    jmp __b3
    // debug_print_init::@3
  __b3:
    // [73] (byte) debug_print_init::c#1 ← (byte) debug_print_init::c#2 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c
    axs #-[4]
    stx.z c
    // [74] (byte) debug_print_init::i#1 ← ++ (byte) debug_print_init::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [75] if((byte) debug_print_init::i#1!=(byte) 8) goto debug_print_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b1_from___b3
    jmp __breturn
    // debug_print_init::@return
  __breturn:
    // [76] return 
    rts
    str: .text "sx"
    .byte 0
    str1: .text "sy"
    .byte 0
    str2: .text "sz"
    .byte 0
    str3: .text "x"
    .byte 0
    str4: .text "y"
    .byte 0
    str5: .text "z"
    .byte 0
    str6: .text "xr"
    .byte 0
    str7: .text "yr"
    .byte 0
    str8: .text "zr"
    .byte 0
    str9: .text "pp"
    .byte 0
    str10: .text "xp"
    .byte 0
    str11: .text "yp"
    .byte 0
}
  // anim
anim: {
    .label __9 = $30
    .label __10 = $31
    .label i2 = $2f
    .label i = 8
    // [78] phi from anim to anim::@1 [phi:anim->anim::@1]
  __b1_from_anim:
    // [78] phi (signed byte) sy#11 = (signed byte) 0 [phi:anim->anim::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z sy
    // [78] phi (signed byte) sx#11 = (signed byte) 0 [phi:anim->anim::@1#1] -- vbsz1=vbsc1 
    lda #0
    sta.z sx
    jmp __b1
    // anim::@1
  __b1:
    jmp __b2
    // anim::@2
  __b2:
    // [79] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto anim::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b2
    jmp __b3
    // anim::@3
  __b3:
    // [80] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fe) goto anim::@3 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fe
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b3
    jmp __b4
    // anim::@4
  __b4:
    // [81] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fd) goto anim::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fd
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b4
    jmp __b5
    // anim::@5
  __b5:
    // [82] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [83] (signed byte) calculate_matrix::sx#0 ← (signed byte) sx#11 -- vbsz1=vbsz2 
    lda.z sx
    sta.z calculate_matrix.sx
    // [84] (signed byte) calculate_matrix::sy#0 ← (signed byte) sy#11 -- vbsz1=vbsz2 
    lda.z sy
    sta.z calculate_matrix.sy
    // [85] call calculate_matrix 
    //calculate_matrix_16(sx,sy,sz);
    jsr calculate_matrix
    // [86] phi from anim::@5 to anim::@8 [phi:anim::@5->anim::@8]
  __b8_from___b5:
    jmp __b8
    // anim::@8
  __b8:
    // [87] call store_matrix 
    jsr store_matrix
    // [88] phi from anim::@8 to anim::@6 [phi:anim::@8->anim::@6]
  __b6_from___b8:
    // [88] phi (byte) anim::i#2 = (byte) 0 [phi:anim::@8->anim::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b6
    // [88] phi from anim::@9 to anim::@6 [phi:anim::@9->anim::@6]
  __b6_from___b9:
    // [88] phi (byte) anim::i#2 = (byte) anim::i#1 [phi:anim::@9->anim::@6#0] -- register_copy 
    jmp __b6
    // anim::@6
  __b6:
    // [89] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [90] (signed byte) rotate_matrix::x#0 ← *((const signed byte*) xs + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xs,y
    sta.z rotate_matrix.x
    // [91] (signed byte) rotate_matrix::y#0 ← *((const signed byte*) ys + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda ys,y
    sta.z rotate_matrix.y
    // [92] (signed byte) rotate_matrix::z#0 ← *((const signed byte*) zs + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda zs,y
    sta.z rotate_matrix.z
    // [93] call rotate_matrix 
    jsr rotate_matrix
    jmp __b9
    // anim::@9
  __b9:
    // [94] *((const signed byte*) xrs + (byte) anim::i#2) ← *((const signed byte*) xr) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda xr
    ldy.z i
    sta xrs,y
    // [95] *((const signed byte*) yrs + (byte) anim::i#2) ← *((const signed byte*) yr) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda yr
    ldy.z i
    sta yrs,y
    // [96] *((const signed byte*) zrs + (byte) anim::i#2) ← *((const signed byte*) zr) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda zr
    ldy.z i
    sta zrs,y
    // [97] *((const signed byte*) pps + (byte) anim::i#2) ← *((const signed byte*) pp) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda pp
    ldy.z i
    sta pps,y
    // [98] *((const signed byte*) xps + (byte) anim::i#2) ← *((const signed byte*) xp) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda xp
    ldy.z i
    sta xps,y
    // [99] *((const signed byte*) yps + (byte) anim::i#2) ← *((const signed byte*) yp) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda yp
    ldy.z i
    sta yps,y
    // [100] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z i2
    // [101] (byte~) anim::$9 ← (byte) $80 + (byte)*((const signed byte*) xp) -- vbuz1=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc xp
    sta.z __9
    // [102] *((const nomodify byte*) SPRITES_XPOS + (byte) anim::i2#0) ← (byte~) anim::$9 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __9
    ldy.z i2
    sta SPRITES_XPOS,y
    // [103] (byte~) anim::$10 ← (byte) $80 + (byte)*((const signed byte*) yp) -- vbuz1=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc yp
    sta.z __10
    // [104] *((const nomodify byte*) SPRITES_YPOS + (byte) anim::i2#0) ← (byte~) anim::$10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __10
    ldy.z i2
    sta SPRITES_YPOS,y
    // [105] (byte) anim::i#1 ← ++ (byte) anim::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [106] if((byte) anim::i#1!=(byte) 8) goto anim::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b6_from___b9
    jmp __b7
    // anim::@7
  __b7:
    // [107] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_GREY -- _deref_pbuc1=vbuc2 
    lda #LIGHT_GREY
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [108] call debug_print 
    jsr debug_print
    jmp __b10
    // anim::@10
  __b10:
    // [109] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_BLUE -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [110] (signed byte) sx#2 ← (signed byte) sx#11 + (signed byte) 2 -- vbsz1=vbsz1_plus_2 
    // Increment angles        
    inc.z sx
    inc.z sx
    // [111] (signed byte) sy#2 ← (signed byte) sy#11 - (signed byte) 3 -- vbsz1=vbsz1_minus_vbsc1 
    lax.z sy
    axs #3
    stx.z sy
    // [78] phi from anim::@10 to anim::@1 [phi:anim::@10->anim::@1]
  __b1_from___b10:
    // [78] phi (signed byte) sy#11 = (signed byte) sy#2 [phi:anim::@10->anim::@1#0] -- register_copy 
    // [78] phi (signed byte) sx#11 = (signed byte) sx#2 [phi:anim::@10->anim::@1#1] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [113] call memset 
    // [244] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [114] return 
    rts
}
  // print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zp(9) str, byte* zp($b) at)
print_str_at: {
    .label at = $b
    .label str = 9
    // [116] phi from print_str_at print_str_at::@2 to print_str_at::@1 [phi:print_str_at/print_str_at::@2->print_str_at::@1]
  __b1_from_print_str_at:
  __b1_from___b2:
    // [116] phi (byte*) print_str_at::at#13 = (byte*) print_str_at::at#15 [phi:print_str_at/print_str_at::@2->print_str_at::@1#0] -- register_copy 
    // [116] phi (byte*) print_str_at::str#13 = (byte*) print_str_at::str#15 [phi:print_str_at/print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp __b1
    // print_str_at::@1
  __b1:
    // [117] if((byte) 0!=*((byte*) print_str_at::str#13)) goto print_str_at::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str_at::@return
  __breturn:
    // [118] return 
    rts
    // print_str_at::@2
  __b2:
    // [119] *((byte*) print_str_at::at#13) ← *((byte*) print_str_at::str#13) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (at),y
    // [120] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#13 -- pbuz1=_inc_pbuz1 
    inc.z at
    bne !+
    inc.z at+1
  !:
    // [121] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#13 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // print_schar_at
// Print a signed char as hex at a specific screen position
// print_schar_at(signed byte zp($f) b, byte* zp($d) at)
print_schar_at: {
    .label b = $f
    .label at = $d
    // [123] if((signed byte) print_schar_at::b#22<(signed byte) 0) goto print_schar_at::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1
    jmp __b3
    // print_schar_at::@3
  __b3:
    // [124] (byte*) print_char_at::at#1 ← (byte*) print_schar_at::at#21 -- pbuz1=pbuz2 
    lda.z at
    sta.z print_char_at.at
    lda.z at+1
    sta.z print_char_at.at+1
    // [125] call print_char_at 
    // [250] phi from print_schar_at::@3 to print_char_at [phi:print_schar_at::@3->print_char_at]
  print_char_at_from___b3:
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#1 [phi:print_schar_at::@3->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) ' ' [phi:print_schar_at::@3->print_char_at#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char_at.ch
    jsr print_char_at
    // [126] phi from print_schar_at::@3 print_schar_at::@4 to print_schar_at::@2 [phi:print_schar_at::@3/print_schar_at::@4->print_schar_at::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [126] phi (signed byte) print_schar_at::b#24 = (signed byte) print_schar_at::b#22 [phi:print_schar_at::@3/print_schar_at::@4->print_schar_at::@2#0] -- register_copy 
    jmp __b2
    // print_schar_at::@2
  __b2:
    // [127] (byte*) print_uchar_at::at#0 ← (byte*) print_schar_at::at#21 + (byte) 1 -- pbuz1=pbuz2_plus_1 
    lda.z at
    clc
    adc #1
    sta.z print_uchar_at.at
    lda.z at+1
    adc #0
    sta.z print_uchar_at.at+1
    // [128] (byte) print_uchar_at::b#0 ← (byte)(signed byte) print_schar_at::b#24 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_uchar_at.b
    // [129] call print_uchar_at 
    jsr print_uchar_at
    jmp __breturn
    // print_schar_at::@return
  __breturn:
    // [130] return 
    rts
    // print_schar_at::@1
  __b1:
    // [131] (byte*) print_char_at::at#0 ← (byte*) print_schar_at::at#21 -- pbuz1=pbuz2 
    lda.z at
    sta.z print_char_at.at
    lda.z at+1
    sta.z print_char_at.at+1
    // [132] call print_char_at 
    // [250] phi from print_schar_at::@1 to print_char_at [phi:print_schar_at::@1->print_char_at]
  print_char_at_from___b1:
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#0 [phi:print_schar_at::@1->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) '-' [phi:print_schar_at::@1->print_char_at#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char_at.ch
    jsr print_char_at
    jmp __b4
    // print_schar_at::@4
  __b4:
    // [133] (signed byte) print_schar_at::b#0 ← - (signed byte) print_schar_at::b#22 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2_from___b4
}
  // calculate_matrix
// Prepare the 3x3 rotation matrix into rotation_matrix[]
// Angles sx, sy, sz are based on 2*PI=$100 
// Method described in C= Hacking Magazine Issue 8. http://www.ffd2.com/fridge/chacking/c=hacking8.txt
// calculate_matrix(signed byte zp($2a) sx, signed byte zp($2b) sy)
calculate_matrix: {
    .label __10 = $3f
    .label __11 = $40
    .label __12 = $41
    .label __13 = $42
    .label __14 = $43
    .label __15 = $44
    .label __16 = $45
    .label __17 = $46
    .label __18 = $47
    .label __19 = $48
    .label __20 = $49
    .label __21 = $4a
    .label __22 = $4b
    .label __23 = $4c
    .label __24 = $4d
    .label __25 = $4e
    .label __26 = $4f
    .label __27 = $50
    .label __28 = $51
    .label __29 = $52
    .label __30 = $53
    .label __31 = $54
    .label __32 = $55
    .label __33 = $56
    .label __34 = $57
    .label sx = $2a
    .label sy = $2b
    .label t1 = $35
    .label t2 = $36
    .label t3 = $37
    .label t4 = $38
    .label t5 = $39
    .label t6 = $3a
    .label t7 = $3b
    .label t8 = $3c
    .label t9 = $3d
    .label t10 = $3e
    // [134] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 -- vbsz1=vbsz2 
    lda.z sy
    sta.z t1
    // [135] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 -- vbsz1=vbsz2 
    lda.z sy
    sta.z t2
    // [136] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2 
    lda.z sx
    sta.z t3
    // [137] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2 
    lda.z sx
    sta.z t4
    // [138] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 -- vbsz1=vbsz2_plus_vbsz3 
    lda.z sx
    clc
    adc.z t2
    sta.z t5
    // [139] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsz2_minus_vbsz3 
    lda.z sx
    sec
    sbc.z t1
    sta.z t6
    // [140] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsz2_plus_vbsz3 
    lda.z sx
    clc
    adc.z t1
    sta.z t7
    // [141] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_minus_vbsz3 
    lda.z t2
    sec
    sbc.z sx
    sta.z t8
    // [142] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_minus_vbsz3 
    lda.z sy
    sec
    sbc.z sx
    sta.z t9
    // [143] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_plus_vbsz3 
    lda.z sy
    clc
    adc.z sx
    sta.z t10
    // [144] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t2#0) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldy.z t1
    lda COSH,y
    ldy.z t2
    clc
    adc COSH,y
    sta.z __10
    // [145] *((const signed byte*) rotation_matrix) ← (signed byte~) calculate_matrix::$10 -- _deref_pbsc1=vbsz1 
    lda.z __10
    sta rotation_matrix
    // [146] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t2#0) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc1_derefidx_vbsz3 
    ldy.z t1
    lda SINH,y
    ldy.z t2
    sec
    sbc SINH,y
    sta.z __11
    // [147] *((const signed byte*) rotation_matrix+(byte) 1) ← (signed byte~) calculate_matrix::$11 -- _deref_pbsc1=vbsz1 
    lda.z __11
    sta rotation_matrix+1
    // [148] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz2 
    ldy.z sy
    clc
    lda SINH,y
    adc SINH,y
    sta.z __12
    // [149] *((const signed byte*) rotation_matrix+(byte) 2) ← (signed byte~) calculate_matrix::$12 -- _deref_pbsc1=vbsz1 
    lda.z __12
    sta rotation_matrix+2
    // [150] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc1_derefidx_vbsz3 
    ldy.z t3
    lda SINH,y
    ldy.z t4
    sec
    sbc SINH,y
    sta.z __13
    // [151] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda.z __13
    ldy.z t6
    clc
    adc COSQ,y
    sta.z __14
    // [152] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda.z __14
    ldy.z t5
    sec
    sbc COSQ,y
    sta.z __15
    // [153] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda.z __15
    ldy.z t8
    clc
    adc COSQ,y
    sta.z __16
    // [154] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda.z __16
    ldy.z t7
    sec
    sbc COSQ,y
    sta.z __17
    // [155] *((const signed byte*) rotation_matrix+(byte) 3) ← (signed byte~) calculate_matrix::$17 -- _deref_pbsc1=vbsz1 
    lda.z __17
    sta rotation_matrix+3
    // [156] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldy.z t3
    lda COSH,y
    ldy.z t4
    clc
    adc COSH,y
    sta.z __18
    // [157] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda.z __18
    ldy.z t5
    clc
    adc SINQ,y
    sta.z __19
    // [158] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda.z __19
    ldy.z t6
    sec
    sbc SINQ,y
    sta.z __20
    // [159] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda.z __20
    ldy.z t7
    sec
    sbc SINQ,y
    sta.z __21
    // [160] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda.z __21
    ldy.z t8
    sec
    sbc SINQ,y
    sta.z __22
    // [161] *((const signed byte*) rotation_matrix+(byte) 4) ← (signed byte~) calculate_matrix::$22 -- _deref_pbsc1=vbsz1 
    lda.z __22
    sta rotation_matrix+4
    // [162] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t10#0) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc1_derefidx_vbsz3 
    ldy.z t9
    lda SINH,y
    ldy.z t10
    sec
    sbc SINH,y
    sta.z __23
    // [163] *((const signed byte*) rotation_matrix+(byte) 5) ← (signed byte~) calculate_matrix::$23 -- _deref_pbsc1=vbsz1 
    lda.z __23
    sta rotation_matrix+5
    // [164] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc1_derefidx_vbsz3 
    ldy.z t4
    lda COSH,y
    ldy.z t3
    sec
    sbc COSH,y
    sta.z __24
    // [165] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda.z __24
    ldy.z t6
    clc
    adc SINQ,y
    sta.z __25
    // [166] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda.z __25
    ldy.z t5
    sec
    sbc SINQ,y
    sta.z __26
    // [167] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda.z __26
    ldy.z t8
    sec
    sbc SINQ,y
    sta.z __27
    // [168] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda.z __27
    ldy.z t7
    sec
    sbc SINQ,y
    sta.z __28
    // [169] *((const signed byte*) rotation_matrix+(byte) 6) ← (signed byte~) calculate_matrix::$28 -- _deref_pbsc1=vbsz1 
    lda.z __28
    sta rotation_matrix+6
    // [170] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldy.z t3
    lda SINH,y
    ldy.z t4
    clc
    adc SINH,y
    sta.z __29
    // [171] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda.z __29
    ldy.z t6
    clc
    adc COSQ,y
    sta.z __30
    // [172] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda.z __30
    ldy.z t5
    sec
    sbc COSQ,y
    sta.z __31
    // [173] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda.z __31
    ldy.z t7
    clc
    adc COSQ,y
    sta.z __32
    // [174] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda.z __32
    ldy.z t8
    sec
    sbc COSQ,y
    sta.z __33
    // [175] *((const signed byte*) rotation_matrix+(byte) 7) ← (signed byte~) calculate_matrix::$33 -- _deref_pbsc1=vbsz1 
    lda.z __33
    sta rotation_matrix+7
    // [176] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t10#0) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldy.z t9
    lda COSH,y
    ldy.z t10
    clc
    adc COSH,y
    sta.z __34
    // [177] *((const signed byte*) rotation_matrix+(byte) 8) ← (signed byte~) calculate_matrix::$34 -- _deref_pbsc1=vbsz1 
    lda.z __34
    sta rotation_matrix+8
    jmp __breturn
    // calculate_matrix::@return
  __breturn:
    // [178] return 
    rts
}
  // store_matrix
// Store the rotation matrix into the rotation routine rotate()
// After this each call to rotate() will rotate a point with the matrix
// Implemented in assembler to utilize seriously fast multiplication 
store_matrix: {
    // asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
    lda rotation_matrix+0
    sta rotate_matrix.A1+1
    eor #$ff
    sta rotate_matrix.A2+1
    lda rotation_matrix+1
    sta rotate_matrix.B1+1
    eor #$ff
    sta rotate_matrix.B2+1
    lda rotation_matrix+2
    sta rotate_matrix.C1+1
    eor #$ff
    sta rotate_matrix.C2+1
    lda rotation_matrix+3
    sta rotate_matrix.D1+1
    eor #$ff
    sta rotate_matrix.D2+1
    lda rotation_matrix+4
    sta rotate_matrix.E1+1
    eor #$ff
    sta rotate_matrix.E2+1
    lda rotation_matrix+5
    sta rotate_matrix.F1+1
    eor #$ff
    sta rotate_matrix.F2+1
    lda rotation_matrix+6
    sta rotate_matrix.G1+1
    eor #$ff
    sta rotate_matrix.G2+1
    lda rotation_matrix+7
    sta rotate_matrix.H1+1
    eor #$ff
    sta rotate_matrix.H2+1
    lda rotation_matrix+8
    sta rotate_matrix.I1+1
    eor #$ff
    sta rotate_matrix.I2+1
    jmp __breturn
    // store_matrix::@return
  __breturn:
    // [180] return 
    rts
}
  // rotate_matrix
// Rotate a 3D point (x,y,z) using the rotation matrix
// The rotation matrix is prepared by calling prepare_matrix() 
// The passed points must be in the interval [-$3f;$3f].
// Implemented in assembler to utilize seriously fast multiplication 
// rotate_matrix(signed byte zp($2c) x, signed byte zp($2d) y, signed byte zp($2e) z)
rotate_matrix: {
    .label x = $2c
    .label y = $2d
    .label z = $2e
    // [181] *((const signed byte*) xr) ← (signed byte) rotate_matrix::x#0 -- _deref_pbsc1=vbsz1 
    lda.z x
    sta xr
    // [182] *((const signed byte*) yr) ← (signed byte) rotate_matrix::y#0 -- _deref_pbsc1=vbsz1 
    lda.z y
    sta yr
    // [183] *((const signed byte*) zr) ← (signed byte) rotate_matrix::z#0 -- _deref_pbsc1=vbsz1 
    lda.z z
    sta zr
    // asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  }
    ldx zr
  C1:
    lda mulf_sqr1,x
    sec
  C2:
    sbc mulf_sqr2,x
    sta C3+1
  F1:
    lda mulf_sqr1,x
    sec
  F2:
    sbc mulf_sqr2,x
    sta F3+1
  I1:
    lda mulf_sqr1,x
    sec
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  I3:
    lda #0
    clc
  G1:
    adc mulf_sqr1,x
    sec
  G2:
    sbc mulf_sqr2,x
    clc
  H1:
    adc mulf_sqr1,y
    sec
  H2:
    sbc mulf_sqr2,y
    sta zr
    sta PP+1
  PP:
    lda PERSP_Z
    sta pp
    sta psp1
    eor #$ff
    sta psp2
  C3:
    lda #0
    clc
  A1:
    adc mulf_sqr1,x
    sec
  A2:
    sbc mulf_sqr2,x
    clc
  B1:
    adc mulf_sqr1,y
    sec
  B2:
    sbc mulf_sqr2,y
    sta xr
    sta XX+1
    clc
  F3:
    lda #0
    clc
  D1:
    adc mulf_sqr1,x
    sec
  D2:
    sbc mulf_sqr2,x
    clc
  E1:
    adc mulf_sqr1,y
    sec
  E2:
    sbc mulf_sqr2,y
    sta yr
    tay
    lda (psp1),y
    sec
    sbc (psp2),y
    sta yp
  XX:
    ldy #0
    lda (psp1),y
    sec
    sbc (psp2),y
    sta xp
    jmp __breturn
    // rotate_matrix::@return
  __breturn:
    // [185] return 
    rts
}
  // debug_print
debug_print: {
    .const print_schar_pos1_col = $25
    .const print_schar_pos2_row = 1
    .const print_schar_pos2_col = $25
    .const print_schar_pos3_row = 2
    .const print_schar_pos3_col = $25
    .const print_schar_pos4_row = 4
    .const print_schar_pos4_col = $1d
    .const print_schar_pos5_row = 4
    .const print_schar_pos5_col = $21
    .const print_schar_pos6_row = 4
    .const print_schar_pos6_col = $25
    .const print_schar_pos7_row = 5
    .const print_schar_pos7_col = $1d
    .const print_schar_pos8_row = 5
    .const print_schar_pos8_col = $21
    .const print_schar_pos9_row = 5
    .const print_schar_pos9_col = $25
    .const print_schar_pos10_row = 6
    .const print_schar_pos10_col = $1d
    .const print_schar_pos11_row = 6
    .const print_schar_pos11_col = $21
    .const print_schar_pos12_row = 6
    .const print_schar_pos12_col = $25
    .label at_line = SCREEN+$13*$28
    .label print_schar_pos1_sb = $58
    .label print_schar_pos2_sb = $59
    .label print_schar_pos4_sb = $5a
    .label print_schar_pos5_sb = $5b
    .label print_schar_pos6_sb = $5c
    .label print_schar_pos7_sb = $5d
    .label print_schar_pos8_sb = $5e
    .label print_schar_pos9_sb = $5f
    .label print_schar_pos10_sb = $60
    .label print_schar_pos11_sb = $61
    .label print_schar_pos12_sb = $62
    .label c = $10
    .label i = $11
    // [186] (signed byte) debug_print::print_schar_pos1_sb#0 ← (signed byte) sx#11 -- vbsz1=vbsz2 
    lda.z sx
    sta.z print_schar_pos1_sb
    jmp print_schar_pos1
    // debug_print::print_schar_pos1
  print_schar_pos1:
    // [187] (signed byte) print_schar_at::b#4 ← (signed byte) debug_print::print_schar_pos1_sb#0 -- vbsz1=vbsz2 
    lda.z print_schar_pos1_sb
    sta.z print_schar_at.b
    // [188] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos1 to print_schar_at [phi:debug_print::print_schar_pos1->print_schar_at]
  print_schar_at_from_print_schar_pos1:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos1_col#0 [phi:debug_print::print_schar_pos1->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos1_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos1_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#4 [phi:debug_print::print_schar_pos1->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b2
    // debug_print::@2
  __b2:
    // [189] (signed byte) debug_print::print_schar_pos2_sb#0 ← (signed byte) sy#11 -- vbsz1=vbsz2 
    lda.z sy
    sta.z print_schar_pos2_sb
    jmp print_schar_pos2
    // debug_print::print_schar_pos2
  print_schar_pos2:
    // [190] (signed byte) print_schar_at::b#5 ← (signed byte) debug_print::print_schar_pos2_sb#0 -- vbsz1=vbsz2 
    lda.z print_schar_pos2_sb
    sta.z print_schar_at.b
    // [191] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos2 to print_schar_at [phi:debug_print::print_schar_pos2->print_schar_at]
  print_schar_at_from_print_schar_pos2:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos2_row#0*(byte) $28+(const byte) debug_print::print_schar_pos2_col#0 [phi:debug_print::print_schar_pos2->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos2_row*$28+print_schar_pos2_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos2_row*$28+print_schar_pos2_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#5 [phi:debug_print::print_schar_pos2->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // [192] phi from debug_print::print_schar_pos2 to debug_print::print_schar_pos3 [phi:debug_print::print_schar_pos2->debug_print::print_schar_pos3]
  print_schar_pos3_from_print_schar_pos2:
    jmp print_schar_pos3
    // debug_print::print_schar_pos3
  print_schar_pos3:
    // [193] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos3 to print_schar_at [phi:debug_print::print_schar_pos3->print_schar_at]
  print_schar_at_from_print_schar_pos3:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos3_row#0*(byte) $28+(const byte) debug_print::print_schar_pos3_col#0 [phi:debug_print::print_schar_pos3->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos3_row*$28+print_schar_pos3_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos3_row*$28+print_schar_pos3_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (const signed byte) sz [phi:debug_print::print_schar_pos3->print_schar_at#1] -- vbsz1=vbsc1 
    lda #sz
    sta.z print_schar_at.b
    jsr print_schar_at
    jmp __b3
    // debug_print::@3
  __b3:
    // [194] (signed byte) debug_print::print_schar_pos4_sb#0 ← *((const signed byte*) rotation_matrix) -- vbsz1=_deref_pbsc1 
    lda rotation_matrix
    sta.z print_schar_pos4_sb
    jmp print_schar_pos4
    // debug_print::print_schar_pos4
  print_schar_pos4:
    // [195] (signed byte) print_schar_at::b#7 ← (signed byte) debug_print::print_schar_pos4_sb#0 -- vbsz1=vbsz2 
    lda.z print_schar_pos4_sb
    sta.z print_schar_at.b
    // [196] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos4 to print_schar_at [phi:debug_print::print_schar_pos4->print_schar_at]
  print_schar_at_from_print_schar_pos4:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos4_row#0*(byte) $28+(const byte) debug_print::print_schar_pos4_col#0 [phi:debug_print::print_schar_pos4->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos4_row*$28+print_schar_pos4_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos4_row*$28+print_schar_pos4_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#7 [phi:debug_print::print_schar_pos4->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b4
    // debug_print::@4
  __b4:
    // [197] (signed byte) debug_print::print_schar_pos5_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 1) -- vbsz1=_deref_pbsc1 
    lda rotation_matrix+1
    sta.z print_schar_pos5_sb
    jmp print_schar_pos5
    // debug_print::print_schar_pos5
  print_schar_pos5:
    // [198] (signed byte) print_schar_at::b#8 ← (signed byte) debug_print::print_schar_pos5_sb#0 -- vbsz1=vbsz2 
    lda.z print_schar_pos5_sb
    sta.z print_schar_at.b
    // [199] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos5 to print_schar_at [phi:debug_print::print_schar_pos5->print_schar_at]
  print_schar_at_from_print_schar_pos5:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos5_row#0*(byte) $28+(const byte) debug_print::print_schar_pos5_col#0 [phi:debug_print::print_schar_pos5->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos5_row*$28+print_schar_pos5_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos5_row*$28+print_schar_pos5_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#8 [phi:debug_print::print_schar_pos5->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b5
    // debug_print::@5
  __b5:
    // [200] (signed byte) debug_print::print_schar_pos6_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 2) -- vbsz1=_deref_pbsc1 
    lda rotation_matrix+2
    sta.z print_schar_pos6_sb
    jmp print_schar_pos6
    // debug_print::print_schar_pos6
  print_schar_pos6:
    // [201] (signed byte) print_schar_at::b#9 ← (signed byte) debug_print::print_schar_pos6_sb#0 -- vbsz1=vbsz2 
    lda.z print_schar_pos6_sb
    sta.z print_schar_at.b
    // [202] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos6 to print_schar_at [phi:debug_print::print_schar_pos6->print_schar_at]
  print_schar_at_from_print_schar_pos6:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos6_row#0*(byte) $28+(const byte) debug_print::print_schar_pos6_col#0 [phi:debug_print::print_schar_pos6->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos6_row*$28+print_schar_pos6_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos6_row*$28+print_schar_pos6_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#9 [phi:debug_print::print_schar_pos6->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b6
    // debug_print::@6
  __b6:
    // [203] (signed byte) debug_print::print_schar_pos7_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 3) -- vbsz1=_deref_pbsc1 
    lda rotation_matrix+3
    sta.z print_schar_pos7_sb
    jmp print_schar_pos7
    // debug_print::print_schar_pos7
  print_schar_pos7:
    // [204] (signed byte) print_schar_at::b#10 ← (signed byte) debug_print::print_schar_pos7_sb#0 -- vbsz1=vbsz2 
    lda.z print_schar_pos7_sb
    sta.z print_schar_at.b
    // [205] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos7 to print_schar_at [phi:debug_print::print_schar_pos7->print_schar_at]
  print_schar_at_from_print_schar_pos7:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos7_row#0*(byte) $28+(const byte) debug_print::print_schar_pos7_col#0 [phi:debug_print::print_schar_pos7->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos7_row*$28+print_schar_pos7_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos7_row*$28+print_schar_pos7_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#10 [phi:debug_print::print_schar_pos7->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b7
    // debug_print::@7
  __b7:
    // [206] (signed byte) debug_print::print_schar_pos8_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 4) -- vbsz1=_deref_pbsc1 
    lda rotation_matrix+4
    sta.z print_schar_pos8_sb
    jmp print_schar_pos8
    // debug_print::print_schar_pos8
  print_schar_pos8:
    // [207] (signed byte) print_schar_at::b#11 ← (signed byte) debug_print::print_schar_pos8_sb#0 -- vbsz1=vbsz2 
    lda.z print_schar_pos8_sb
    sta.z print_schar_at.b
    // [208] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos8 to print_schar_at [phi:debug_print::print_schar_pos8->print_schar_at]
  print_schar_at_from_print_schar_pos8:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos8_row#0*(byte) $28+(const byte) debug_print::print_schar_pos8_col#0 [phi:debug_print::print_schar_pos8->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos8_row*$28+print_schar_pos8_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos8_row*$28+print_schar_pos8_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#11 [phi:debug_print::print_schar_pos8->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b8
    // debug_print::@8
  __b8:
    // [209] (signed byte) debug_print::print_schar_pos9_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 5) -- vbsz1=_deref_pbsc1 
    lda rotation_matrix+5
    sta.z print_schar_pos9_sb
    jmp print_schar_pos9
    // debug_print::print_schar_pos9
  print_schar_pos9:
    // [210] (signed byte) print_schar_at::b#12 ← (signed byte) debug_print::print_schar_pos9_sb#0 -- vbsz1=vbsz2 
    lda.z print_schar_pos9_sb
    sta.z print_schar_at.b
    // [211] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos9 to print_schar_at [phi:debug_print::print_schar_pos9->print_schar_at]
  print_schar_at_from_print_schar_pos9:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos9_row#0*(byte) $28+(const byte) debug_print::print_schar_pos9_col#0 [phi:debug_print::print_schar_pos9->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos9_row*$28+print_schar_pos9_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos9_row*$28+print_schar_pos9_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#12 [phi:debug_print::print_schar_pos9->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b9
    // debug_print::@9
  __b9:
    // [212] (signed byte) debug_print::print_schar_pos10_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 6) -- vbsz1=_deref_pbsc1 
    lda rotation_matrix+6
    sta.z print_schar_pos10_sb
    jmp print_schar_pos10
    // debug_print::print_schar_pos10
  print_schar_pos10:
    // [213] (signed byte) print_schar_at::b#13 ← (signed byte) debug_print::print_schar_pos10_sb#0 -- vbsz1=vbsz2 
    lda.z print_schar_pos10_sb
    sta.z print_schar_at.b
    // [214] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos10 to print_schar_at [phi:debug_print::print_schar_pos10->print_schar_at]
  print_schar_at_from_print_schar_pos10:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos10_row#0*(byte) $28+(const byte) debug_print::print_schar_pos10_col#0 [phi:debug_print::print_schar_pos10->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos10_row*$28+print_schar_pos10_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos10_row*$28+print_schar_pos10_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#13 [phi:debug_print::print_schar_pos10->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b10
    // debug_print::@10
  __b10:
    // [215] (signed byte) debug_print::print_schar_pos11_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 7) -- vbsz1=_deref_pbsc1 
    lda rotation_matrix+7
    sta.z print_schar_pos11_sb
    jmp print_schar_pos11
    // debug_print::print_schar_pos11
  print_schar_pos11:
    // [216] (signed byte) print_schar_at::b#14 ← (signed byte) debug_print::print_schar_pos11_sb#0 -- vbsz1=vbsz2 
    lda.z print_schar_pos11_sb
    sta.z print_schar_at.b
    // [217] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos11 to print_schar_at [phi:debug_print::print_schar_pos11->print_schar_at]
  print_schar_at_from_print_schar_pos11:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos11_row#0*(byte) $28+(const byte) debug_print::print_schar_pos11_col#0 [phi:debug_print::print_schar_pos11->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos11_row*$28+print_schar_pos11_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos11_row*$28+print_schar_pos11_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#14 [phi:debug_print::print_schar_pos11->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b11
    // debug_print::@11
  __b11:
    // [218] (signed byte) debug_print::print_schar_pos12_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 8) -- vbsz1=_deref_pbsc1 
    lda rotation_matrix+8
    sta.z print_schar_pos12_sb
    jmp print_schar_pos12
    // debug_print::print_schar_pos12
  print_schar_pos12:
    // [219] (signed byte) print_schar_at::b#15 ← (signed byte) debug_print::print_schar_pos12_sb#0 -- vbsz1=vbsz2 
    lda.z print_schar_pos12_sb
    sta.z print_schar_at.b
    // [220] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos12 to print_schar_at [phi:debug_print::print_schar_pos12->print_schar_at]
  print_schar_at_from_print_schar_pos12:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos12_row#0*(byte) $28+(const byte) debug_print::print_schar_pos12_col#0 [phi:debug_print::print_schar_pos12->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos12_row*$28+print_schar_pos12_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos12_row*$28+print_schar_pos12_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#15 [phi:debug_print::print_schar_pos12->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // [221] phi from debug_print::print_schar_pos12 to debug_print::@1 [phi:debug_print::print_schar_pos12->debug_print::@1]
  __b1_from_print_schar_pos12:
    // [221] phi (byte) debug_print::i#2 = (byte) 0 [phi:debug_print::print_schar_pos12->debug_print::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [221] phi (byte) debug_print::c#2 = (byte) 4 [phi:debug_print::print_schar_pos12->debug_print::@1#1] -- vbuz1=vbuc1 
    lda #4
    sta.z c
    jmp __b1
    // [221] phi from debug_print::@17 to debug_print::@1 [phi:debug_print::@17->debug_print::@1]
  __b1_from___b17:
    // [221] phi (byte) debug_print::i#2 = (byte) debug_print::i#1 [phi:debug_print::@17->debug_print::@1#0] -- register_copy 
    // [221] phi (byte) debug_print::c#2 = (byte) debug_print::c#1 [phi:debug_print::@17->debug_print::@1#1] -- register_copy 
    jmp __b1
    // debug_print::@1
  __b1:
    // [222] (byte*) print_schar_at::at#15 ← (const byte*) debug_print::at_line#0 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line
    sta.z print_schar_at.at
    lda #>at_line
    adc #0
    sta.z print_schar_at.at+1
    // [223] (signed byte) print_schar_at::b#16 ← *((const signed byte*) xrs + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xrs,y
    sta.z print_schar_at.b
    // [224] call print_schar_at 
    // [122] phi from debug_print::@1 to print_schar_at [phi:debug_print::@1->print_schar_at]
  print_schar_at_from___b1:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#15 [phi:debug_print::@1->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#16 [phi:debug_print::@1->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b12
    // debug_print::@12
  __b12:
    // [225] (byte*) print_schar_at::at#16 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*1
    sta.z print_schar_at.at
    lda #>at_line+$28*1
    adc #0
    sta.z print_schar_at.at+1
    // [226] (signed byte) print_schar_at::b#17 ← *((const signed byte*) yrs + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda yrs,y
    sta.z print_schar_at.b
    // [227] call print_schar_at 
    // [122] phi from debug_print::@12 to print_schar_at [phi:debug_print::@12->print_schar_at]
  print_schar_at_from___b12:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#16 [phi:debug_print::@12->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#17 [phi:debug_print::@12->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b13
    // debug_print::@13
  __b13:
    // [228] (byte*) print_schar_at::at#17 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*2
    sta.z print_schar_at.at
    lda #>at_line+$28*2
    adc #0
    sta.z print_schar_at.at+1
    // [229] (signed byte) print_schar_at::b#18 ← *((const signed byte*) zrs + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda zrs,y
    sta.z print_schar_at.b
    // [230] call print_schar_at 
    // [122] phi from debug_print::@13 to print_schar_at [phi:debug_print::@13->print_schar_at]
  print_schar_at_from___b13:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#17 [phi:debug_print::@13->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#18 [phi:debug_print::@13->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b14
    // debug_print::@14
  __b14:
    // [231] (byte*) print_schar_at::at#18 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 3 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*3
    sta.z print_schar_at.at
    lda #>at_line+$28*3
    adc #0
    sta.z print_schar_at.at+1
    // [232] (signed byte) print_schar_at::b#19 ← *((const signed byte*) pps + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda pps,y
    sta.z print_schar_at.b
    // [233] call print_schar_at 
    // [122] phi from debug_print::@14 to print_schar_at [phi:debug_print::@14->print_schar_at]
  print_schar_at_from___b14:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#18 [phi:debug_print::@14->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#19 [phi:debug_print::@14->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b15
    // debug_print::@15
  __b15:
    // [234] (byte*) print_schar_at::at#19 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 4 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*4
    sta.z print_schar_at.at
    lda #>at_line+$28*4
    adc #0
    sta.z print_schar_at.at+1
    // [235] (signed byte) print_schar_at::b#20 ← *((const signed byte*) xps + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xps,y
    sta.z print_schar_at.b
    // [236] call print_schar_at 
    // [122] phi from debug_print::@15 to print_schar_at [phi:debug_print::@15->print_schar_at]
  print_schar_at_from___b15:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#19 [phi:debug_print::@15->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#20 [phi:debug_print::@15->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b16
    // debug_print::@16
  __b16:
    // [237] (byte*) print_schar_at::at#20 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 5 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*5
    sta.z print_schar_at.at
    lda #>at_line+$28*5
    adc #0
    sta.z print_schar_at.at+1
    // [238] (signed byte) print_schar_at::b#21 ← *((const signed byte*) yps + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda yps,y
    sta.z print_schar_at.b
    // [239] call print_schar_at 
    // [122] phi from debug_print::@16 to print_schar_at [phi:debug_print::@16->print_schar_at]
  print_schar_at_from___b16:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#20 [phi:debug_print::@16->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#21 [phi:debug_print::@16->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b17
    // debug_print::@17
  __b17:
    // [240] (byte) debug_print::c#1 ← (byte) debug_print::c#2 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c
    axs #-[4]
    stx.z c
    // [241] (byte) debug_print::i#1 ← ++ (byte) debug_print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [242] if((byte) debug_print::i#1!=(byte) 8) goto debug_print::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b1_from___b17
    jmp __breturn
    // debug_print::@return
  __breturn:
    // [243] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $12
    // [245] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [245] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [246] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [247] return 
    rts
    // memset::@2
  __b2:
    // [248] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [249] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [245] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [245] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_char_at
// Print a single char
// print_char_at(byte zp($14) ch, byte* zp($15) at)
print_char_at: {
    .label at = $15
    .label ch = $14
    // [251] *((byte*) print_char_at::at#4) ← (byte) print_char_at::ch#4 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (at),y
    jmp __breturn
    // print_char_at::@return
  __breturn:
    // [252] return 
    rts
}
  // print_uchar_at
// Print a char as HEX at a specific position
// print_uchar_at(byte zp($34) b, byte* zp($32) at)
print_uchar_at: {
    .label __0 = $63
    .label __2 = $64
    .label b = $34
    .label at = $32
    // [253] (byte~) print_uchar_at::$0 ← (byte) print_uchar_at::b#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [254] (byte) print_char_at::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char_at.ch
    // [255] (byte*) print_char_at::at#2 ← (byte*) print_uchar_at::at#0 -- pbuz1=pbuz2 
    lda.z at
    sta.z print_char_at.at
    lda.z at+1
    sta.z print_char_at.at+1
    // [256] call print_char_at 
  // Table of hexadecimal digits
    // [250] phi from print_uchar_at to print_char_at [phi:print_uchar_at->print_char_at]
  print_char_at_from_print_uchar_at:
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#2 [phi:print_uchar_at->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) print_char_at::ch#2 [phi:print_uchar_at->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp __b1
    // print_uchar_at::@1
  __b1:
    // [257] (byte~) print_uchar_at::$2 ← (byte) print_uchar_at::b#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [258] (byte*) print_char_at::at#3 ← (byte*) print_uchar_at::at#0 + (byte) 1 -- pbuz1=pbuz2_plus_1 
    lda.z at
    clc
    adc #1
    sta.z print_char_at.at
    lda.z at+1
    adc #0
    sta.z print_char_at.at+1
    // [259] (byte) print_char_at::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char_at.ch
    // [260] call print_char_at 
    // [250] phi from print_uchar_at::@1 to print_char_at [phi:print_uchar_at::@1->print_char_at]
  print_char_at_from___b1:
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#3 [phi:print_uchar_at::@1->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) print_char_at::ch#3 [phi:print_uchar_at::@1->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp __breturn
    // print_uchar_at::@return
  __breturn:
    // [261] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // Positions to rotate
  xs: .byte -$34, -$34, -$34, 0, 0, $34, $34, $34
  ys: .byte -$34, 0, $34, -$34, $34, -$34, 0, $34
  zs: .byte $34, $34, $34, $34, $34, $34, $34, $34
  // Rotated positions
  xrs: .fill 8, 0
  yrs: .fill 8, 0
  zrs: .fill 8, 0
  // Perspective factors (from zrs)
  pps: .fill 8, 0
  // Rotated positions with perspective
  xps: .fill 8, 0
  yps: .fill 8, 0
  // The rotation matrix
  rotation_matrix: .fill 9, 0
  // mulf_sqr tables will contain f(x)=int(x*x) and g(x) = f(1-x).
  // f(x) = >(( x * x ))
  .align $100
mulf_sqr1:
.for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }

  // g(x) =  >((( 1 - x ) * ( 1 - x )))
  .align $100
mulf_sqr2:
.for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }

  // Perspective multiplication table containing (d/(z0-z)[z] for each z-value   
  .align $100
PERSP_Z:
{
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}

  // Sine and Cosine Tables   
  // Angles: $00=0, $80=PI,$100=2*PI
  // Half Sine/Cosine: signed fixed [-$20;20]
  .align $40
SINH:
{
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

  // Quarter Sine/Cosine: signed fixed [-$10,$10]
  .align $40
SINQ:
{
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

.pc = $3000 "SPRITE"
// A single sprite
SPRITE:
.var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] *((const word*) psp1) ← (word)(const byte*) mulf_sqr1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const word*) psp2) ← (word)(const byte*) mulf_sqr2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (byte) $ff [ ] ( sprites_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [10] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← (byte)(const byte*) SPRITE/(byte) $40 [ sprites_init::i#2 ] ( sprites_init:1 [ sprites_init::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ sprites_init::i#2 sprites_init::i#1 ]
Statement [11] *((const nomodify byte*) SPRITES_COLOR + (byte) sprites_init::i#2) ← (const nomodify byte) GREEN [ sprites_init::i#2 ] ( sprites_init:1 [ sprites_init::i#2 ] { }  ) always clobbers reg byte a 
Statement [42] (byte*) print_schar_at::at#0 ← (const byte*) debug_print_init::at_line#0 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ debug_print_init::c#2 debug_print_init::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ debug_print_init::i#2 debug_print_init::i#1 ]
Statement [45] (byte*) print_schar_at::at#1 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#1 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#1 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [48] (byte*) print_schar_at::at#2 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#2 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [52] (byte) debug_print_init::col#0 ← (byte) 8 + (byte) debug_print_init::i#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ debug_print_init::j#2 debug_print_init::j#1 ]
Statement [53] (byte*~) debug_print_init::$41 ← (const byte*) debug_print_init::at_cols#0 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$41 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$41 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ debug_print_init::col#0 ]
Statement [54] *((byte*~) debug_print_init::$41 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [55] (byte*~) debug_print_init::$44 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$44 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$44 ] { }  ) always clobbers reg byte a 
Statement [56] *((byte*~) debug_print_init::$44 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [57] (byte*~) debug_print_init::$47 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$47 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$47 ] { }  ) always clobbers reg byte a 
Statement [58] *((byte*~) debug_print_init::$47 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [59] (byte*~) debug_print_init::$50 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 3 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$50 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$50 ] { }  ) always clobbers reg byte a 
Statement [60] *((byte*~) debug_print_init::$50 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [61] (byte*~) debug_print_init::$53 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 4 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$53 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$53 ] { }  ) always clobbers reg byte a 
Statement [62] *((byte*~) debug_print_init::$53 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [63] (byte*~) debug_print_init::$56 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 5 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$56 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$56 ] { }  ) always clobbers reg byte a 
Statement [64] *((byte*~) debug_print_init::$56 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [65] (byte*~) debug_print_init::$59 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 6 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$59 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$59 ] { }  ) always clobbers reg byte a 
Statement [66] *((byte*~) debug_print_init::$59 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [67] (byte*~) debug_print_init::$62 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 7 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$62 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$62 ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*~) debug_print_init::$62 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [69] (byte*~) debug_print_init::$65 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 8 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$65 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$65 ] { }  ) always clobbers reg byte a 
Statement [70] *((byte*~) debug_print_init::$65 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 ] { }  ) always clobbers reg byte a 
Statement [73] (byte) debug_print_init::c#1 ← (byte) debug_print_init::c#2 + (byte) 4 [ debug_print_init::i#2 debug_print_init::c#1 ] ( debug_print_init:4 [ debug_print_init::i#2 debug_print_init::c#1 ] { }  ) always clobbers reg byte a 
Statement [79] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto anim::@2 [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ sx#11 sx#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ sy#11 sy#2 ]
Statement [80] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fe) goto anim::@3 [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [81] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fd) goto anim::@4 [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [94] *((const signed byte*) xrs + (byte) anim::i#2) ← *((const signed byte*) xr) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ anim::i#2 anim::i#1 ]
Statement [95] *((const signed byte*) yrs + (byte) anim::i#2) ← *((const signed byte*) yr) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a 
Statement [96] *((const signed byte*) zrs + (byte) anim::i#2) ← *((const signed byte*) zr) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a 
Statement [97] *((const signed byte*) pps + (byte) anim::i#2) ← *((const signed byte*) pp) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a 
Statement [98] *((const signed byte*) xps + (byte) anim::i#2) ← *((const signed byte*) xp) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a 
Statement [99] *((const signed byte*) yps + (byte) anim::i#2) ← *((const signed byte*) yp) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a 
Statement [100] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte) 1 [ sx#11 sy#11 anim::i#2 anim::i2#0 ] ( anim:6 [ sx#11 sy#11 anim::i#2 anim::i2#0 ] { }  ) always clobbers reg byte a 
Statement [101] (byte~) anim::$9 ← (byte) $80 + (byte)*((const signed byte*) xp) [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$9 ] ( anim:6 [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$9 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:47 [ anim::i2#0 ]
Statement [103] (byte~) anim::$10 ← (byte) $80 + (byte)*((const signed byte*) yp) [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$10 ] ( anim:6 [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$10 ] { }  ) always clobbers reg byte a 
Statement [107] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_GREY [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [109] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_BLUE [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [111] (signed byte) sy#2 ← (signed byte) sy#11 - (signed byte) 3 [ sx#2 sy#2 ] ( anim:6 [ sx#2 sy#2 ] { }  ) always clobbers reg byte a 
Statement [117] if((byte) 0!=*((byte*) print_str_at::str#13)) goto print_str_at::@2 [ print_str_at::str#13 print_str_at::at#13 ] ( debug_print_init:4::print_str_at:18 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:20 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:22 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:24 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:26 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:28 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:30 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:32 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:34 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:36 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:38 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:40 [ print_str_at::str#13 print_str_at::at#13 ] { }  ) always clobbers reg byte a reg byte y 
Statement [119] *((byte*) print_str_at::at#13) ← *((byte*) print_str_at::str#13) [ print_str_at::str#13 print_str_at::at#13 ] ( debug_print_init:4::print_str_at:18 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:20 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:22 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:24 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:26 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:28 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:30 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:32 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:34 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:36 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:38 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:40 [ print_str_at::str#13 print_str_at::at#13 ] { }  ) always clobbers reg byte a reg byte y 
Statement [124] (byte*) print_char_at::at#1 ← (byte*) print_schar_at::at#21 [ print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:15 [ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:16 [ debug_print::c#2 debug_print::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:17 [ debug_print::i#2 debug_print::i#1 ]
Statement [127] (byte*) print_uchar_at::at#0 ← (byte*) print_schar_at::at#21 + (byte) 1 [ print_schar_at::b#24 print_uchar_at::at#0 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [131] (byte*) print_char_at::at#0 ← (byte*) print_schar_at::at#21 [ print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  ) always clobbers reg byte a 
Statement [133] (signed byte) print_schar_at::b#0 ← - (signed byte) print_schar_at::b#22 [ print_schar_at::at#21 print_schar_at::b#0 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [138] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:42 [ calculate_matrix::sx#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:43 [ calculate_matrix::sy#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:53 [ calculate_matrix::t1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:54 [ calculate_matrix::t2#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:55 [ calculate_matrix::t3#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:56 [ calculate_matrix::t4#0 ]
Statement [139] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:57 [ calculate_matrix::t5#0 ]
Statement [140] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:58 [ calculate_matrix::t6#0 ]
Statement [141] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:59 [ calculate_matrix::t7#0 ]
Statement [142] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:60 [ calculate_matrix::t8#0 ]
Statement [143] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:61 [ calculate_matrix::t9#0 ]
Statement [144] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:62 [ calculate_matrix::t10#0 ]
Statement [146] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [148] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [150] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [151] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [152] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [153] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [154] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [156] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [157] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [158] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [159] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [160] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [162] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [164] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [165] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [166] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [167] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [168] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [170] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [171] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [172] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [173] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [174] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [176] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::$34 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::$34 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  } always clobbers reg byte a 
Statement asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  } always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp[1]:6 [ sx#11 sx#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:6 [ sx#11 sx#2 ]
Removing always clobbered register reg byte x as potential for zp[1]:7 [ sy#11 sy#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:7 [ sy#11 sy#2 ]
Removing always clobbered register reg byte x as potential for zp[1]:8 [ anim::i#2 anim::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:8 [ anim::i#2 anim::i#1 ]
Statement [222] (byte*) print_schar_at::at#15 ← (const byte*) debug_print::at_line#0 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#15 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#15 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [225] (byte*) print_schar_at::at#16 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#16 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#16 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [228] (byte*) print_schar_at::at#17 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#17 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#17 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [231] (byte*) print_schar_at::at#18 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 3 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#18 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#18 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [234] (byte*) print_schar_at::at#19 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 4 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#19 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#19 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [237] (byte*) print_schar_at::at#20 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 5 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#20 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#20 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [240] (byte) debug_print::c#1 ← (byte) debug_print::c#2 + (byte) 4 [ sx#11 sy#11 debug_print::i#2 debug_print::c#1 ] ( anim:6::debug_print:108 [ sx#11 sy#11 debug_print::i#2 debug_print::c#1 ] { }  ) always clobbers reg byte a 
Statement [246] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( debug_print_init:4::print_cls:16::memset:113 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [248] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( debug_print_init:4::print_cls:16::memset:113 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [251] *((byte*) print_char_at::at#4) ← (byte) print_char_at::ch#4 [ ] ( debug_print_init:4::print_schar_at:44::print_char_at:125 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_char_at:125 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50::print_char_at:125 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  debug_print_init:4::print_schar_at:44::print_char_at:132 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_char_at:132 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50::print_char_at:132 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  debug_print_init:4::print_schar_at:44::print_uchar_at:129::print_char_at:256 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129::print_char_at:256 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129::print_char_at:256 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:44::print_uchar_at:129::print_char_at:260 [ debug_print_init::c#2 debug_print_init::i#2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129::print_char_at:260 [ debug_print_init::c#2 debug_print_init::i#2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129::print_char_at:260 [ debug_print_init::c#2 debug_print_init::i#2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:3 [ debug_print_init::c#2 debug_print_init::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ debug_print_init::i#2 debug_print_init::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:15 [ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 ]
Removing always clobbered register reg byte y as potential for zp[1]:16 [ debug_print::c#2 debug_print::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:17 [ debug_print::i#2 debug_print::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:52 [ print_uchar_at::b#0 ]
Statement [253] (byte~) print_uchar_at::$0 ← (byte) print_uchar_at::b#0 >> (byte) 4 [ print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:52 [ print_uchar_at::b#0 ]
Statement [255] (byte*) print_char_at::at#2 ← (byte*) print_uchar_at::at#0 [ print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ]
Statement [257] (byte~) print_uchar_at::$2 ← (byte) print_uchar_at::b#0 & (byte) $f [ print_uchar_at::at#0 print_uchar_at::$2 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  ) always clobbers reg byte a 
Statement [258] (byte*) print_char_at::at#3 ← (byte*) print_uchar_at::at#0 + (byte) 1 [ print_char_at::at#3 print_uchar_at::$2 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:100 [ print_uchar_at::$2 ]
Statement [2] *((const word*) psp1) ← (word)(const byte*) mulf_sqr1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const word*) psp2) ← (word)(const byte*) mulf_sqr2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (byte) $ff [ ] ( sprites_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [10] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← (byte)(const byte*) SPRITE/(byte) $40 [ sprites_init::i#2 ] ( sprites_init:1 [ sprites_init::i#2 ] { }  ) always clobbers reg byte a 
Statement [11] *((const nomodify byte*) SPRITES_COLOR + (byte) sprites_init::i#2) ← (const nomodify byte) GREEN [ sprites_init::i#2 ] ( sprites_init:1 [ sprites_init::i#2 ] { }  ) always clobbers reg byte a 
Statement [42] (byte*) print_schar_at::at#0 ← (const byte*) debug_print_init::at_line#0 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [45] (byte*) print_schar_at::at#1 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#1 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#1 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [48] (byte*) print_schar_at::at#2 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#2 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [52] (byte) debug_print_init::col#0 ← (byte) 8 + (byte) debug_print_init::i#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [53] (byte*~) debug_print_init::$41 ← (const byte*) debug_print_init::at_cols#0 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$41 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$41 ] { }  ) always clobbers reg byte a 
Statement [54] *((byte*~) debug_print_init::$41 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [55] (byte*~) debug_print_init::$44 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$44 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$44 ] { }  ) always clobbers reg byte a 
Statement [56] *((byte*~) debug_print_init::$44 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [57] (byte*~) debug_print_init::$47 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$47 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$47 ] { }  ) always clobbers reg byte a 
Statement [58] *((byte*~) debug_print_init::$47 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [59] (byte*~) debug_print_init::$50 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 3 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$50 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$50 ] { }  ) always clobbers reg byte a 
Statement [60] *((byte*~) debug_print_init::$50 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [61] (byte*~) debug_print_init::$53 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 4 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$53 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$53 ] { }  ) always clobbers reg byte a 
Statement [62] *((byte*~) debug_print_init::$53 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [63] (byte*~) debug_print_init::$56 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 5 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$56 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$56 ] { }  ) always clobbers reg byte a 
Statement [64] *((byte*~) debug_print_init::$56 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [65] (byte*~) debug_print_init::$59 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 6 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$59 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$59 ] { }  ) always clobbers reg byte a 
Statement [66] *((byte*~) debug_print_init::$59 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [67] (byte*~) debug_print_init::$62 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 7 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$62 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$62 ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*~) debug_print_init::$62 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [69] (byte*~) debug_print_init::$65 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 8 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$65 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$65 ] { }  ) always clobbers reg byte a 
Statement [70] *((byte*~) debug_print_init::$65 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 ] { }  ) always clobbers reg byte a 
Statement [73] (byte) debug_print_init::c#1 ← (byte) debug_print_init::c#2 + (byte) 4 [ debug_print_init::i#2 debug_print_init::c#1 ] ( debug_print_init:4 [ debug_print_init::i#2 debug_print_init::c#1 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:4 [ debug_print_init::i#2 debug_print_init::i#1 ]
Statement [75] if((byte) debug_print_init::i#1!=(byte) 8) goto debug_print_init::@1 [ debug_print_init::c#1 debug_print_init::i#1 ] ( debug_print_init:4 [ debug_print_init::c#1 debug_print_init::i#1 ] { }  ) always clobbers reg byte a 
Statement [79] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto anim::@2 [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [80] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fe) goto anim::@3 [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [81] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fd) goto anim::@4 [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [90] (signed byte) rotate_matrix::x#0 ← *((const signed byte*) xs + (byte) anim::i#2) [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 ] ( anim:6 [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 ] { }  ) always clobbers reg byte y 
Statement [91] (signed byte) rotate_matrix::y#0 ← *((const signed byte*) ys + (byte) anim::i#2) [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] ( anim:6 [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:44 [ rotate_matrix::x#0 ]
Statement [92] (signed byte) rotate_matrix::z#0 ← *((const signed byte*) zs + (byte) anim::i#2) [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] ( anim:6 [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:45 [ rotate_matrix::y#0 ]
Statement [94] *((const signed byte*) xrs + (byte) anim::i#2) ← *((const signed byte*) xr) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [95] *((const signed byte*) yrs + (byte) anim::i#2) ← *((const signed byte*) yr) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [96] *((const signed byte*) zrs + (byte) anim::i#2) ← *((const signed byte*) zr) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [97] *((const signed byte*) pps + (byte) anim::i#2) ← *((const signed byte*) pp) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [98] *((const signed byte*) xps + (byte) anim::i#2) ← *((const signed byte*) xp) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [99] *((const signed byte*) yps + (byte) anim::i#2) ← *((const signed byte*) yp) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [100] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte) 1 [ sx#11 sy#11 anim::i#2 anim::i2#0 ] ( anim:6 [ sx#11 sy#11 anim::i#2 anim::i2#0 ] { }  ) always clobbers reg byte a 
Statement [101] (byte~) anim::$9 ← (byte) $80 + (byte)*((const signed byte*) xp) [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$9 ] ( anim:6 [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$9 ] { }  ) always clobbers reg byte a 
Statement [103] (byte~) anim::$10 ← (byte) $80 + (byte)*((const signed byte*) yp) [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$10 ] ( anim:6 [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$10 ] { }  ) always clobbers reg byte a 
Statement [106] if((byte) anim::i#1!=(byte) 8) goto anim::@6 [ sx#11 sy#11 anim::i#1 ] ( anim:6 [ sx#11 sy#11 anim::i#1 ] { }  ) always clobbers reg byte a 
Statement [107] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_GREY [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [109] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_BLUE [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [111] (signed byte) sy#2 ← (signed byte) sy#11 - (signed byte) 3 [ sx#2 sy#2 ] ( anim:6 [ sx#2 sy#2 ] { }  ) always clobbers reg byte a reg byte x 
Statement [117] if((byte) 0!=*((byte*) print_str_at::str#13)) goto print_str_at::@2 [ print_str_at::str#13 print_str_at::at#13 ] ( debug_print_init:4::print_str_at:18 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:20 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:22 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:24 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:26 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:28 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:30 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:32 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:34 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:36 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:38 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:40 [ print_str_at::str#13 print_str_at::at#13 ] { }  ) always clobbers reg byte a reg byte y 
Statement [119] *((byte*) print_str_at::at#13) ← *((byte*) print_str_at::str#13) [ print_str_at::str#13 print_str_at::at#13 ] ( debug_print_init:4::print_str_at:18 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:20 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:22 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:24 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:26 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:28 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:30 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:32 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:34 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:36 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:38 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:40 [ print_str_at::str#13 print_str_at::at#13 ] { }  ) always clobbers reg byte a reg byte y 
Statement [124] (byte*) print_char_at::at#1 ← (byte*) print_schar_at::at#21 [ print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  ) always clobbers reg byte a 
Statement [127] (byte*) print_uchar_at::at#0 ← (byte*) print_schar_at::at#21 + (byte) 1 [ print_schar_at::b#24 print_uchar_at::at#0 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [131] (byte*) print_char_at::at#0 ← (byte*) print_schar_at::at#21 [ print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  ) always clobbers reg byte a 
Statement [133] (signed byte) print_schar_at::b#0 ← - (signed byte) print_schar_at::b#22 [ print_schar_at::at#21 print_schar_at::b#0 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [138] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [139] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [140] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [141] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [142] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [143] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [144] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [146] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [148] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [150] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [151] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [152] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [153] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [154] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [156] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [157] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [158] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [159] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [160] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [162] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [164] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [165] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [166] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [167] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [168] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [170] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [171] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [172] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [173] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [174] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [176] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::$34 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::$34 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  } always clobbers reg byte a 
Statement asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  } always clobbers reg byte a reg byte x reg byte y 
Statement [222] (byte*) print_schar_at::at#15 ← (const byte*) debug_print::at_line#0 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#15 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#15 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [225] (byte*) print_schar_at::at#16 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#16 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#16 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [228] (byte*) print_schar_at::at#17 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#17 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#17 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [231] (byte*) print_schar_at::at#18 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 3 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#18 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#18 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [234] (byte*) print_schar_at::at#19 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 4 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#19 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#19 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [237] (byte*) print_schar_at::at#20 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 5 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#20 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#20 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [240] (byte) debug_print::c#1 ← (byte) debug_print::c#2 + (byte) 4 [ sx#11 sy#11 debug_print::i#2 debug_print::c#1 ] ( anim:6::debug_print:108 [ sx#11 sy#11 debug_print::i#2 debug_print::c#1 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:17 [ debug_print::i#2 debug_print::i#1 ]
Statement [242] if((byte) debug_print::i#1!=(byte) 8) goto debug_print::@1 [ sx#11 sy#11 debug_print::c#1 debug_print::i#1 ] ( anim:6::debug_print:108 [ sx#11 sy#11 debug_print::c#1 debug_print::i#1 ] { }  ) always clobbers reg byte a 
Statement [246] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( debug_print_init:4::print_cls:16::memset:113 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [248] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( debug_print_init:4::print_cls:16::memset:113 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [251] *((byte*) print_char_at::at#4) ← (byte) print_char_at::ch#4 [ ] ( debug_print_init:4::print_schar_at:44::print_char_at:125 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_char_at:125 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50::print_char_at:125 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  debug_print_init:4::print_schar_at:44::print_char_at:132 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_char_at:132 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50::print_char_at:132 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  debug_print_init:4::print_schar_at:44::print_uchar_at:129::print_char_at:256 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129::print_char_at:256 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129::print_char_at:256 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:44::print_uchar_at:129::print_char_at:260 [ debug_print_init::c#2 debug_print_init::i#2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129::print_char_at:260 [ debug_print_init::c#2 debug_print_init::i#2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129::print_char_at:260 [ debug_print_init::c#2 debug_print_init::i#2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  ) always clobbers reg byte a reg byte y 
Statement [253] (byte~) print_uchar_at::$0 ← (byte) print_uchar_at::b#0 >> (byte) 4 [ print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  ) always clobbers reg byte a 
Statement [255] (byte*) print_char_at::at#2 ← (byte*) print_uchar_at::at#0 [ print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  ) always clobbers reg byte a 
Statement [257] (byte~) print_uchar_at::$2 ← (byte) print_uchar_at::b#0 & (byte) $f [ print_uchar_at::at#0 print_uchar_at::$2 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  ) always clobbers reg byte a 
Statement [258] (byte*) print_char_at::at#3 ← (byte*) print_uchar_at::at#0 + (byte) 1 [ print_char_at::at#3 print_uchar_at::$2 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  ) always clobbers reg byte a 
Statement [2] *((const word*) psp1) ← (word)(const byte*) mulf_sqr1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const word*) psp2) ← (word)(const byte*) mulf_sqr2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (byte) $ff [ ] ( sprites_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [10] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← (byte)(const byte*) SPRITE/(byte) $40 [ sprites_init::i#2 ] ( sprites_init:1 [ sprites_init::i#2 ] { }  ) always clobbers reg byte a 
Statement [11] *((const nomodify byte*) SPRITES_COLOR + (byte) sprites_init::i#2) ← (const nomodify byte) GREEN [ sprites_init::i#2 ] ( sprites_init:1 [ sprites_init::i#2 ] { }  ) always clobbers reg byte a 
Statement [42] (byte*) print_schar_at::at#0 ← (const byte*) debug_print_init::at_line#0 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [43] (signed byte) print_schar_at::b#1 ← *((const signed byte*) xs + (byte) debug_print_init::i#2) [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#0 print_schar_at::b#1 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#0 print_schar_at::b#1 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } }  ) always clobbers reg byte y 
Statement [45] (byte*) print_schar_at::at#1 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#1 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#1 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [46] (signed byte) print_schar_at::b#2 ← *((const signed byte*) ys + (byte) debug_print_init::i#2) [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#1 print_schar_at::b#2 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#1 print_schar_at::b#2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } }  ) always clobbers reg byte y 
Statement [48] (byte*) print_schar_at::at#2 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#2 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [49] (signed byte) print_schar_at::b#3 ← *((const signed byte*) zs + (byte) debug_print_init::i#2) [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#2 print_schar_at::b#3 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#2 print_schar_at::b#3 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } }  ) always clobbers reg byte y 
Statement [52] (byte) debug_print_init::col#0 ← (byte) 8 + (byte) debug_print_init::i#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [53] (byte*~) debug_print_init::$41 ← (const byte*) debug_print_init::at_cols#0 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$41 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$41 ] { }  ) always clobbers reg byte a 
Statement [54] *((byte*~) debug_print_init::$41 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [55] (byte*~) debug_print_init::$44 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$44 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$44 ] { }  ) always clobbers reg byte a 
Statement [56] *((byte*~) debug_print_init::$44 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [57] (byte*~) debug_print_init::$47 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$47 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$47 ] { }  ) always clobbers reg byte a 
Statement [58] *((byte*~) debug_print_init::$47 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [59] (byte*~) debug_print_init::$50 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 3 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$50 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$50 ] { }  ) always clobbers reg byte a 
Statement [60] *((byte*~) debug_print_init::$50 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [61] (byte*~) debug_print_init::$53 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 4 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$53 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$53 ] { }  ) always clobbers reg byte a 
Statement [62] *((byte*~) debug_print_init::$53 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [63] (byte*~) debug_print_init::$56 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 5 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$56 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$56 ] { }  ) always clobbers reg byte a 
Statement [64] *((byte*~) debug_print_init::$56 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [65] (byte*~) debug_print_init::$59 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 6 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$59 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$59 ] { }  ) always clobbers reg byte a 
Statement [66] *((byte*~) debug_print_init::$59 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [67] (byte*~) debug_print_init::$62 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 7 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$62 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$62 ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*~) debug_print_init::$62 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 ] { }  ) always clobbers reg byte a 
Statement [69] (byte*~) debug_print_init::$65 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 8 + (byte) debug_print_init::c#2 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$65 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 debug_print_init::col#0 debug_print_init::$65 ] { }  ) always clobbers reg byte a 
Statement [70] *((byte*~) debug_print_init::$65 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 ] ( debug_print_init:4 [ debug_print_init::c#2 debug_print_init::i#2 debug_print_init::j#2 ] { }  ) always clobbers reg byte a 
Statement [73] (byte) debug_print_init::c#1 ← (byte) debug_print_init::c#2 + (byte) 4 [ debug_print_init::i#2 debug_print_init::c#1 ] ( debug_print_init:4 [ debug_print_init::i#2 debug_print_init::c#1 ] { }  ) always clobbers reg byte a reg byte x 
Statement [75] if((byte) debug_print_init::i#1!=(byte) 8) goto debug_print_init::@1 [ debug_print_init::c#1 debug_print_init::i#1 ] ( debug_print_init:4 [ debug_print_init::c#1 debug_print_init::i#1 ] { }  ) always clobbers reg byte a 
Statement [79] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto anim::@2 [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [80] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fe) goto anim::@3 [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [81] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fd) goto anim::@4 [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [90] (signed byte) rotate_matrix::x#0 ← *((const signed byte*) xs + (byte) anim::i#2) [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 ] ( anim:6 [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 ] { }  ) always clobbers reg byte y 
Statement [91] (signed byte) rotate_matrix::y#0 ← *((const signed byte*) ys + (byte) anim::i#2) [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] ( anim:6 [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] { }  ) always clobbers reg byte y 
Statement [92] (signed byte) rotate_matrix::z#0 ← *((const signed byte*) zs + (byte) anim::i#2) [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] ( anim:6 [ sx#11 sy#11 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] { }  ) always clobbers reg byte y 
Statement [94] *((const signed byte*) xrs + (byte) anim::i#2) ← *((const signed byte*) xr) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [95] *((const signed byte*) yrs + (byte) anim::i#2) ← *((const signed byte*) yr) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [96] *((const signed byte*) zrs + (byte) anim::i#2) ← *((const signed byte*) zr) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [97] *((const signed byte*) pps + (byte) anim::i#2) ← *((const signed byte*) pp) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [98] *((const signed byte*) xps + (byte) anim::i#2) ← *((const signed byte*) xp) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [99] *((const signed byte*) yps + (byte) anim::i#2) ← *((const signed byte*) yp) [ sx#11 sy#11 anim::i#2 ] ( anim:6 [ sx#11 sy#11 anim::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [100] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte) 1 [ sx#11 sy#11 anim::i#2 anim::i2#0 ] ( anim:6 [ sx#11 sy#11 anim::i#2 anim::i2#0 ] { }  ) always clobbers reg byte a 
Statement [101] (byte~) anim::$9 ← (byte) $80 + (byte)*((const signed byte*) xp) [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$9 ] ( anim:6 [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$9 ] { }  ) always clobbers reg byte a 
Statement [103] (byte~) anim::$10 ← (byte) $80 + (byte)*((const signed byte*) yp) [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$10 ] ( anim:6 [ sx#11 sy#11 anim::i#2 anim::i2#0 anim::$10 ] { }  ) always clobbers reg byte a 
Statement [106] if((byte) anim::i#1!=(byte) 8) goto anim::@6 [ sx#11 sy#11 anim::i#1 ] ( anim:6 [ sx#11 sy#11 anim::i#1 ] { }  ) always clobbers reg byte a 
Statement [107] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_GREY [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [109] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_BLUE [ sx#11 sy#11 ] ( anim:6 [ sx#11 sy#11 ] { }  ) always clobbers reg byte a 
Statement [111] (signed byte) sy#2 ← (signed byte) sy#11 - (signed byte) 3 [ sx#2 sy#2 ] ( anim:6 [ sx#2 sy#2 ] { }  ) always clobbers reg byte a reg byte x 
Statement [117] if((byte) 0!=*((byte*) print_str_at::str#13)) goto print_str_at::@2 [ print_str_at::str#13 print_str_at::at#13 ] ( debug_print_init:4::print_str_at:18 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:20 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:22 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:24 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:26 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:28 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:30 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:32 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:34 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:36 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:38 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:40 [ print_str_at::str#13 print_str_at::at#13 ] { }  ) always clobbers reg byte a reg byte y 
Statement [119] *((byte*) print_str_at::at#13) ← *((byte*) print_str_at::str#13) [ print_str_at::str#13 print_str_at::at#13 ] ( debug_print_init:4::print_str_at:18 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:20 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:22 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:24 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:26 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:28 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:30 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:32 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:34 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:36 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:38 [ print_str_at::str#13 print_str_at::at#13 ] { }  debug_print_init:4::print_str_at:40 [ print_str_at::str#13 print_str_at::at#13 ] { }  ) always clobbers reg byte a reg byte y 
Statement [124] (byte*) print_char_at::at#1 ← (byte*) print_schar_at::at#21 [ print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#1 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  ) always clobbers reg byte a 
Statement [127] (byte*) print_uchar_at::at#0 ← (byte*) print_schar_at::at#21 + (byte) 1 [ print_schar_at::b#24 print_uchar_at::at#0 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#24 print_uchar_at::at#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [131] (byte*) print_char_at::at#0 ← (byte*) print_schar_at::at#21 [ print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 print_char_at::at#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  ) always clobbers reg byte a 
Statement [133] (signed byte) print_schar_at::b#0 ← - (signed byte) print_schar_at::b#22 [ print_schar_at::at#21 print_schar_at::b#0 ] ( debug_print_init:4::print_schar_at:44 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:47 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } }  debug_print_init:4::print_schar_at:50 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:188 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } }  anim:6::debug_print:108::print_schar_at:191 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } }  anim:6::debug_print:108::print_schar_at:193 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { }  anim:6::debug_print:108::print_schar_at:196 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } }  anim:6::debug_print:108::print_schar_at:199 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } }  anim:6::debug_print:108::print_schar_at:202 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } }  anim:6::debug_print:108::print_schar_at:205 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } }  anim:6::debug_print:108::print_schar_at:208 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } }  anim:6::debug_print:108::print_schar_at:211 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } }  anim:6::debug_print:108::print_schar_at:214 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } }  anim:6::debug_print:108::print_schar_at:217 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } }  anim:6::debug_print:108::print_schar_at:220 [ sx#11 sy#11 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } }  anim:6::debug_print:108::print_schar_at:224 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:227 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:230 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:233 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:236 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:239 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::at#21 print_schar_at::b#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [138] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [139] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [140] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [141] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [142] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [143] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [144] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [146] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [148] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [150] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [151] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [152] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [153] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [154] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [156] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [157] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [158] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [159] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [160] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [162] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [164] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [165] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [166] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [167] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [168] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [170] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [171] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [172] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [173] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [174] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement [176] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::$34 ] ( anim:6::calculate_matrix:85 [ sx#11 sy#11 calculate_matrix::$34 ] { { sx#11 = calculate_matrix::sx#0 } { sy#11 = calculate_matrix::sy#0 } }  ) always clobbers reg byte a 
Statement asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  } always clobbers reg byte a 
Statement asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  } always clobbers reg byte a reg byte x reg byte y 
Statement [222] (byte*) print_schar_at::at#15 ← (const byte*) debug_print::at_line#0 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#15 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#15 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [223] (signed byte) print_schar_at::b#16 ← *((const signed byte*) xrs + (byte) debug_print::i#2) [ sx#11 sy#11 print_schar_at::b#16 print_schar_at::at#15 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::b#16 print_schar_at::at#15 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } }  ) always clobbers reg byte y 
Statement [225] (byte*) print_schar_at::at#16 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#16 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#16 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [226] (signed byte) print_schar_at::b#17 ← *((const signed byte*) yrs + (byte) debug_print::i#2) [ sx#11 sy#11 print_schar_at::b#17 print_schar_at::at#16 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::b#17 print_schar_at::at#16 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } }  ) always clobbers reg byte y 
Statement [228] (byte*) print_schar_at::at#17 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#17 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#17 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [229] (signed byte) print_schar_at::b#18 ← *((const signed byte*) zrs + (byte) debug_print::i#2) [ sx#11 sy#11 print_schar_at::b#18 print_schar_at::at#17 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::b#18 print_schar_at::at#17 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } }  ) always clobbers reg byte y 
Statement [231] (byte*) print_schar_at::at#18 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 3 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#18 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#18 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [232] (signed byte) print_schar_at::b#19 ← *((const signed byte*) pps + (byte) debug_print::i#2) [ sx#11 sy#11 print_schar_at::b#19 print_schar_at::at#18 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::b#19 print_schar_at::at#18 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } }  ) always clobbers reg byte y 
Statement [234] (byte*) print_schar_at::at#19 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 4 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#19 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#19 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [235] (signed byte) print_schar_at::b#20 ← *((const signed byte*) xps + (byte) debug_print::i#2) [ sx#11 sy#11 print_schar_at::b#20 print_schar_at::at#19 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::b#20 print_schar_at::at#19 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } }  ) always clobbers reg byte y 
Statement [237] (byte*) print_schar_at::at#20 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 5 + (byte) debug_print::c#2 [ sx#11 sy#11 print_schar_at::at#20 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::at#20 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } }  ) always clobbers reg byte a 
Statement [238] (signed byte) print_schar_at::b#21 ← *((const signed byte*) yps + (byte) debug_print::i#2) [ sx#11 sy#11 print_schar_at::b#21 print_schar_at::at#20 debug_print::c#2 debug_print::i#2 ] ( anim:6::debug_print:108 [ sx#11 sy#11 print_schar_at::b#21 print_schar_at::at#20 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } }  ) always clobbers reg byte y 
Statement [240] (byte) debug_print::c#1 ← (byte) debug_print::c#2 + (byte) 4 [ sx#11 sy#11 debug_print::i#2 debug_print::c#1 ] ( anim:6::debug_print:108 [ sx#11 sy#11 debug_print::i#2 debug_print::c#1 ] { }  ) always clobbers reg byte a reg byte x 
Statement [242] if((byte) debug_print::i#1!=(byte) 8) goto debug_print::@1 [ sx#11 sy#11 debug_print::c#1 debug_print::i#1 ] ( anim:6::debug_print:108 [ sx#11 sy#11 debug_print::c#1 debug_print::i#1 ] { }  ) always clobbers reg byte a 
Statement [246] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( debug_print_init:4::print_cls:16::memset:113 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [248] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( debug_print_init:4::print_cls:16::memset:113 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [251] *((byte*) print_char_at::at#4) ← (byte) print_char_at::ch#4 [ ] ( debug_print_init:4::print_schar_at:44::print_char_at:125 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_char_at:125 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50::print_char_at:125 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220::print_char_at:125 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239::print_char_at:125 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#1 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  debug_print_init:4::print_schar_at:44::print_char_at:132 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_char_at:132 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#1 } }  debug_print_init:4::print_schar_at:50::print_char_at:132 [ debug_print_init::c#2 debug_print_init::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#2 } }  anim:6::debug_print:108::print_schar_at:188::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:191::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:193::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:196::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:199::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:202::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:205::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:208::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:211::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:214::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:217::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:220::print_char_at:132 [ sx#11 sy#11 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 } }  anim:6::debug_print:108::print_schar_at:224::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#15 } }  anim:6::debug_print:108::print_schar_at:227::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#16 } }  anim:6::debug_print:108::print_schar_at:230::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#17 } }  anim:6::debug_print:108::print_schar_at:233::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#18 } }  anim:6::debug_print:108::print_schar_at:236::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#19 } }  anim:6::debug_print:108::print_schar_at:239::print_char_at:132 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_schar_at::b#22 print_schar_at::at#21 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_char_at::at#0 = print_char_at::at#4 print_schar_at::at#21 print_schar_at::at#20 } }  debug_print_init:4::print_schar_at:44::print_uchar_at:129::print_char_at:256 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129::print_char_at:256 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129::print_char_at:256 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129::print_char_at:256 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:44::print_uchar_at:129::print_char_at:260 [ debug_print_init::c#2 debug_print_init::i#2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129::print_char_at:260 [ debug_print_init::c#2 debug_print_init::i#2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129::print_char_at:260 [ debug_print_init::c#2 debug_print_init::i#2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129::print_char_at:260 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  ) always clobbers reg byte a reg byte y 
Statement [253] (byte~) print_uchar_at::$0 ← (byte) print_uchar_at::b#0 >> (byte) 4 [ print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_uchar_at::$0 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  ) always clobbers reg byte a 
Statement [255] (byte*) print_char_at::at#2 ← (byte*) print_uchar_at::at#0 [ print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::b#0 print_char_at::ch#2 print_char_at::at#2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#2 = print_char_at::ch#4 } { print_char_at::at#2 = print_char_at::at#4 print_uchar_at::at#0 } }  ) always clobbers reg byte a 
Statement [257] (byte~) print_uchar_at::$2 ← (byte) print_uchar_at::b#0 & (byte) $f [ print_uchar_at::at#0 print_uchar_at::$2 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_uchar_at::at#0 print_uchar_at::$2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  ) always clobbers reg byte a 
Statement [258] (byte*) print_char_at::at#3 ← (byte*) print_uchar_at::at#0 + (byte) 1 [ print_char_at::at#3 print_uchar_at::$2 ] ( debug_print_init:4::print_schar_at:44::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#1 = print_schar_at::b#22 } { print_schar_at::at#0 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:47::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#2 = print_schar_at::b#22 } { print_schar_at::at#1 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  debug_print_init:4::print_schar_at:50::print_uchar_at:129 [ debug_print_init::c#2 debug_print_init::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#3 } { print_schar_at::at#2 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:188::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#4 debug_print::print_schar_pos1_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:191::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#5 debug_print::print_schar_pos2_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:193::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:196::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#7 debug_print::print_schar_pos4_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:199::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#8 debug_print::print_schar_pos5_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:202::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#22 = print_schar_at::b#9 debug_print::print_schar_pos6_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:205::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#10 = print_schar_at::b#22 debug_print::print_schar_pos7_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:208::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#11 = print_schar_at::b#22 debug_print::print_schar_pos8_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:211::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#12 = print_schar_at::b#22 debug_print::print_schar_pos9_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:214::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#13 = print_schar_at::b#22 debug_print::print_schar_pos10_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:217::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#14 = print_schar_at::b#22 debug_print::print_schar_pos11_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:220::print_uchar_at:129 [ sx#11 sy#11 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#15 = print_schar_at::b#22 debug_print::print_schar_pos12_sb#0 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:224::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#16 = print_schar_at::b#22 } { print_schar_at::at#15 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:227::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#17 = print_schar_at::b#22 } { print_schar_at::at#16 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:230::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#18 = print_schar_at::b#22 } { print_schar_at::at#17 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:233::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#19 = print_schar_at::b#22 } { print_schar_at::at#18 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:236::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#20 = print_schar_at::b#22 } { print_schar_at::at#19 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  anim:6::debug_print:108::print_schar_at:239::print_uchar_at:129 [ sx#11 sy#11 debug_print::c#2 debug_print::i#2 print_char_at::at#3 print_uchar_at::$2 ] { { print_schar_at::b#21 = print_schar_at::b#22 } { print_schar_at::at#20 = print_schar_at::at#21 } { print_char_at::ch#3 = print_char_at::ch#4 } { print_char_at::at#3 = print_char_at::at#4 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ sprites_init::i#2 sprites_init::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ debug_print_init::c#2 debug_print_init::c#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ debug_print_init::i#2 debug_print_init::i#1 ] : zp[1]:4 , 
Potential registers zp[1]:5 [ debug_print_init::j#2 debug_print_init::j#1 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ sx#11 sx#2 ] : zp[1]:6 , 
Potential registers zp[1]:7 [ sy#11 sy#2 ] : zp[1]:7 , 
Potential registers zp[1]:8 [ anim::i#2 anim::i#1 ] : zp[1]:8 , 
Potential registers zp[2]:9 [ print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ] : zp[2]:11 , 
Potential registers zp[2]:13 [ print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 ] : zp[2]:13 , 
Potential registers zp[1]:15 [ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 ] : zp[1]:15 , reg byte x , 
Potential registers zp[1]:16 [ debug_print::c#2 debug_print::c#1 ] : zp[1]:16 , reg byte x , 
Potential registers zp[1]:17 [ debug_print::i#2 debug_print::i#1 ] : zp[1]:17 , 
Potential registers zp[2]:18 [ memset::dst#2 memset::dst#1 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ debug_print_init::col#0 ] : zp[1]:23 , reg byte x , reg byte y , 
Potential registers zp[2]:24 [ debug_print_init::$41 ] : zp[2]:24 , 
Potential registers zp[2]:26 [ debug_print_init::$44 ] : zp[2]:26 , 
Potential registers zp[2]:28 [ debug_print_init::$47 ] : zp[2]:28 , 
Potential registers zp[2]:30 [ debug_print_init::$50 ] : zp[2]:30 , 
Potential registers zp[2]:32 [ debug_print_init::$53 ] : zp[2]:32 , 
Potential registers zp[2]:34 [ debug_print_init::$56 ] : zp[2]:34 , 
Potential registers zp[2]:36 [ debug_print_init::$59 ] : zp[2]:36 , 
Potential registers zp[2]:38 [ debug_print_init::$62 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ debug_print_init::$65 ] : zp[2]:40 , 
Potential registers zp[1]:42 [ calculate_matrix::sx#0 ] : zp[1]:42 , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ calculate_matrix::sy#0 ] : zp[1]:43 , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ rotate_matrix::x#0 ] : zp[1]:44 , reg byte a , reg byte x , 
Potential registers zp[1]:45 [ rotate_matrix::y#0 ] : zp[1]:45 , reg byte a , reg byte x , 
Potential registers zp[1]:46 [ rotate_matrix::z#0 ] : zp[1]:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ anim::i2#0 ] : zp[1]:47 , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ anim::$9 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ anim::$10 ] : zp[1]:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:50 [ print_uchar_at::at#0 ] : zp[2]:50 , 
Potential registers zp[1]:52 [ print_uchar_at::b#0 ] : zp[1]:52 , reg byte x , 
Potential registers zp[1]:53 [ calculate_matrix::t1#0 ] : zp[1]:53 , reg byte x , reg byte y , 
Potential registers zp[1]:54 [ calculate_matrix::t2#0 ] : zp[1]:54 , reg byte x , reg byte y , 
Potential registers zp[1]:55 [ calculate_matrix::t3#0 ] : zp[1]:55 , reg byte x , reg byte y , 
Potential registers zp[1]:56 [ calculate_matrix::t4#0 ] : zp[1]:56 , reg byte x , reg byte y , 
Potential registers zp[1]:57 [ calculate_matrix::t5#0 ] : zp[1]:57 , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ calculate_matrix::t6#0 ] : zp[1]:58 , reg byte x , reg byte y , 
Potential registers zp[1]:59 [ calculate_matrix::t7#0 ] : zp[1]:59 , reg byte x , reg byte y , 
Potential registers zp[1]:60 [ calculate_matrix::t8#0 ] : zp[1]:60 , reg byte x , reg byte y , 
Potential registers zp[1]:61 [ calculate_matrix::t9#0 ] : zp[1]:61 , reg byte x , reg byte y , 
Potential registers zp[1]:62 [ calculate_matrix::t10#0 ] : zp[1]:62 , reg byte x , reg byte y , 
Potential registers zp[1]:63 [ calculate_matrix::$10 ] : zp[1]:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:64 [ calculate_matrix::$11 ] : zp[1]:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:65 [ calculate_matrix::$12 ] : zp[1]:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:66 [ calculate_matrix::$13 ] : zp[1]:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:67 [ calculate_matrix::$14 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ calculate_matrix::$15 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ calculate_matrix::$16 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:70 [ calculate_matrix::$17 ] : zp[1]:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:71 [ calculate_matrix::$18 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ calculate_matrix::$19 ] : zp[1]:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:73 [ calculate_matrix::$20 ] : zp[1]:73 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:74 [ calculate_matrix::$21 ] : zp[1]:74 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:75 [ calculate_matrix::$22 ] : zp[1]:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:76 [ calculate_matrix::$23 ] : zp[1]:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:77 [ calculate_matrix::$24 ] : zp[1]:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:78 [ calculate_matrix::$25 ] : zp[1]:78 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:79 [ calculate_matrix::$26 ] : zp[1]:79 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:80 [ calculate_matrix::$27 ] : zp[1]:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:81 [ calculate_matrix::$28 ] : zp[1]:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:82 [ calculate_matrix::$29 ] : zp[1]:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:83 [ calculate_matrix::$30 ] : zp[1]:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:84 [ calculate_matrix::$31 ] : zp[1]:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:85 [ calculate_matrix::$32 ] : zp[1]:85 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:86 [ calculate_matrix::$33 ] : zp[1]:86 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:87 [ calculate_matrix::$34 ] : zp[1]:87 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:88 [ debug_print::print_schar_pos1_sb#0 ] : zp[1]:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:89 [ debug_print::print_schar_pos2_sb#0 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:90 [ debug_print::print_schar_pos4_sb#0 ] : zp[1]:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:91 [ debug_print::print_schar_pos5_sb#0 ] : zp[1]:91 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:92 [ debug_print::print_schar_pos6_sb#0 ] : zp[1]:92 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:93 [ debug_print::print_schar_pos7_sb#0 ] : zp[1]:93 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:94 [ debug_print::print_schar_pos8_sb#0 ] : zp[1]:94 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:95 [ debug_print::print_schar_pos9_sb#0 ] : zp[1]:95 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:96 [ debug_print::print_schar_pos10_sb#0 ] : zp[1]:96 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:97 [ debug_print::print_schar_pos11_sb#0 ] : zp[1]:97 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:98 [ debug_print::print_schar_pos12_sb#0 ] : zp[1]:98 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:99 [ print_uchar_at::$0 ] : zp[1]:99 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:100 [ print_uchar_at::$2 ] : zp[1]:100 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char_at] 156,000,012: zp[2]:21 [ print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 ] 150,000,006: zp[1]:20 [ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ] 
Uplift Scope [print_uchar_at] 20,000,002: zp[1]:99 [ print_uchar_at::$0 ] 10,000,001: zp[1]:100 [ print_uchar_at::$2 ] 4,200,000.6: zp[1]:52 [ print_uchar_at::b#0 ] 3,000,000.43: zp[2]:50 [ print_uchar_at::at#0 ] 
Uplift Scope [print_schar_at] 4,824,530.17: zp[1]:15 [ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 ] 1,050,348: zp[2]:13 [ print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 ] 
Uplift Scope [debug_print] 190,001.9: zp[1]:17 [ debug_print::i#2 debug_print::i#1 ] 108,773.02: zp[1]:16 [ debug_print::c#2 debug_print::c#1 ] 2,002: zp[1]:88 [ debug_print::print_schar_pos1_sb#0 ] 2,002: zp[1]:89 [ debug_print::print_schar_pos2_sb#0 ] 2,002: zp[1]:90 [ debug_print::print_schar_pos4_sb#0 ] 2,002: zp[1]:91 [ debug_print::print_schar_pos5_sb#0 ] 2,002: zp[1]:92 [ debug_print::print_schar_pos6_sb#0 ] 2,002: zp[1]:93 [ debug_print::print_schar_pos7_sb#0 ] 2,002: zp[1]:94 [ debug_print::print_schar_pos8_sb#0 ] 2,002: zp[1]:95 [ debug_print::print_schar_pos9_sb#0 ] 2,002: zp[1]:96 [ debug_print::print_schar_pos10_sb#0 ] 2,002: zp[1]:97 [ debug_print::print_schar_pos11_sb#0 ] 2,002: zp[1]:98 [ debug_print::print_schar_pos12_sb#0 ] 
Uplift Scope [calculate_matrix] 2,002: zp[1]:63 [ calculate_matrix::$10 ] 2,002: zp[1]:64 [ calculate_matrix::$11 ] 2,002: zp[1]:65 [ calculate_matrix::$12 ] 2,002: zp[1]:66 [ calculate_matrix::$13 ] 2,002: zp[1]:67 [ calculate_matrix::$14 ] 2,002: zp[1]:68 [ calculate_matrix::$15 ] 2,002: zp[1]:69 [ calculate_matrix::$16 ] 2,002: zp[1]:70 [ calculate_matrix::$17 ] 2,002: zp[1]:71 [ calculate_matrix::$18 ] 2,002: zp[1]:72 [ calculate_matrix::$19 ] 2,002: zp[1]:73 [ calculate_matrix::$20 ] 2,002: zp[1]:74 [ calculate_matrix::$21 ] 2,002: zp[1]:75 [ calculate_matrix::$22 ] 2,002: zp[1]:76 [ calculate_matrix::$23 ] 2,002: zp[1]:77 [ calculate_matrix::$24 ] 2,002: zp[1]:78 [ calculate_matrix::$25 ] 2,002: zp[1]:79 [ calculate_matrix::$26 ] 2,002: zp[1]:80 [ calculate_matrix::$27 ] 2,002: zp[1]:81 [ calculate_matrix::$28 ] 2,002: zp[1]:82 [ calculate_matrix::$29 ] 2,002: zp[1]:83 [ calculate_matrix::$30 ] 2,002: zp[1]:84 [ calculate_matrix::$31 ] 2,002: zp[1]:85 [ calculate_matrix::$32 ] 2,002: zp[1]:86 [ calculate_matrix::$33 ] 2,002: zp[1]:87 [ calculate_matrix::$34 ] 737.18: zp[1]:42 [ calculate_matrix::sx#0 ] 455: zp[1]:54 [ calculate_matrix::t2#0 ] 417.08: zp[1]:53 [ calculate_matrix::t1#0 ] 407.13: zp[1]:43 [ calculate_matrix::sy#0 ] 156.41: zp[1]:58 [ calculate_matrix::t6#0 ] 151.67: zp[1]:56 [ calculate_matrix::t4#0 ] 151.67: zp[1]:59 [ calculate_matrix::t7#0 ] 151.67: zp[1]:60 [ calculate_matrix::t8#0 ] 147.21: zp[1]:55 [ calculate_matrix::t3#0 ] 147.21: zp[1]:57 [ calculate_matrix::t5#0 ] 91: zp[1]:62 [ calculate_matrix::t10#0 ] 88.32: zp[1]:61 [ calculate_matrix::t9#0 ] 
Uplift Scope [memset] 33,336.67: zp[2]:18 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [debug_print_init] 2,052.05: zp[1]:5 [ debug_print_init::j#2 debug_print_init::j#1 ] 2,002: zp[2]:24 [ debug_print_init::$41 ] 2,002: zp[2]:26 [ debug_print_init::$44 ] 2,002: zp[2]:28 [ debug_print_init::$47 ] 2,002: zp[2]:30 [ debug_print_init::$50 ] 2,002: zp[2]:32 [ debug_print_init::$53 ] 2,002: zp[2]:34 [ debug_print_init::$56 ] 2,002: zp[2]:36 [ debug_print_init::$59 ] 2,002: zp[2]:38 [ debug_print_init::$62 ] 2,002: zp[2]:40 [ debug_print_init::$65 ] 556.11: zp[1]:23 [ debug_print_init::col#0 ] 364.65: zp[1]:3 [ debug_print_init::c#2 debug_print_init::c#1 ] 197.14: zp[1]:4 [ debug_print_init::i#2 debug_print_init::i#1 ] 
Uplift Scope [rotate_matrix] 3,667.33: zp[1]:44 [ rotate_matrix::x#0 ] 3,667.33: zp[1]:45 [ rotate_matrix::y#0 ] 3,667.33: zp[1]:46 [ rotate_matrix::z#0 ] 
Uplift Scope [anim] 2,208.09: zp[1]:8 [ anim::i#2 anim::i#1 ] 2,002: zp[1]:48 [ anim::$9 ] 2,002: zp[1]:49 [ anim::$10 ] 750.75: zp[1]:47 [ anim::i2#0 ] 
Uplift Scope [print_str_at] 3,129.25: zp[2]:9 [ print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ] 2,136.67: zp[2]:11 [ print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ] 
Uplift Scope [] 216.33: zp[1]:7 [ sy#11 sy#2 ] 115.49: zp[1]:6 [ sx#11 sx#2 ] 
Uplift Scope [sprites_init] 286.17: zp[1]:2 [ sprites_init::i#2 sprites_init::i#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [RADIX] 
Uplift Scope [print_cls] 
Uplift Scope [main] 
Uplift Scope [store_matrix] 

Uplifting [print_char_at] best 79051 combination zp[2]:21 [ print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 ] reg byte x [ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ] 
Uplifting [print_uchar_at] best 79043 combination reg byte a [ print_uchar_at::$0 ] reg byte y [ print_uchar_at::$2 ] zp[1]:52 [ print_uchar_at::b#0 ] zp[2]:50 [ print_uchar_at::at#0 ] 
Uplifting [print_schar_at] best 79043 combination zp[1]:15 [ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 ] zp[2]:13 [ print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 ] 
Uplifting [debug_print] best 79025 combination zp[1]:17 [ debug_print::i#2 debug_print::i#1 ] zp[1]:16 [ debug_print::c#2 debug_print::c#1 ] reg byte a [ debug_print::print_schar_pos1_sb#0 ] reg byte a [ debug_print::print_schar_pos2_sb#0 ] reg byte a [ debug_print::print_schar_pos4_sb#0 ] zp[1]:91 [ debug_print::print_schar_pos5_sb#0 ] zp[1]:92 [ debug_print::print_schar_pos6_sb#0 ] zp[1]:93 [ debug_print::print_schar_pos7_sb#0 ] zp[1]:94 [ debug_print::print_schar_pos8_sb#0 ] zp[1]:95 [ debug_print::print_schar_pos9_sb#0 ] zp[1]:96 [ debug_print::print_schar_pos10_sb#0 ] zp[1]:97 [ debug_print::print_schar_pos11_sb#0 ] zp[1]:98 [ debug_print::print_schar_pos12_sb#0 ] 
Limited combination testing to 100 combinations of 8388608 possible.
Uplifting [memset] best 79025 combination zp[2]:18 [ memset::dst#2 memset::dst#1 ] 
Uplifting [debug_print_init] best 74225 combination reg byte y [ debug_print_init::j#2 debug_print_init::j#1 ] zp[2]:24 [ debug_print_init::$41 ] zp[2]:26 [ debug_print_init::$44 ] zp[2]:28 [ debug_print_init::$47 ] zp[2]:30 [ debug_print_init::$50 ] zp[2]:32 [ debug_print_init::$53 ] zp[2]:34 [ debug_print_init::$56 ] zp[2]:36 [ debug_print_init::$59 ] zp[2]:38 [ debug_print_init::$62 ] zp[2]:40 [ debug_print_init::$65 ] reg byte x [ debug_print_init::col#0 ] zp[1]:3 [ debug_print_init::c#2 debug_print_init::c#1 ] zp[1]:4 [ debug_print_init::i#2 debug_print_init::i#1 ] 
Uplifting [rotate_matrix] best 73924 combination reg byte x [ rotate_matrix::x#0 ] zp[1]:45 [ rotate_matrix::y#0 ] zp[1]:46 [ rotate_matrix::z#0 ] 
Uplifting [anim] best 72024 combination zp[1]:8 [ anim::i#2 anim::i#1 ] reg byte a [ anim::$9 ] reg byte a [ anim::$10 ] reg byte x [ anim::i2#0 ] 
Uplifting [print_str_at] best 72024 combination zp[2]:9 [ print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ] zp[2]:11 [ print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ] 
Uplifting [] best 72024 combination zp[1]:7 [ sy#11 sy#2 ] zp[1]:6 [ sx#11 sx#2 ] 
Uplifting [sprites_init] best 71874 combination reg byte x [ sprites_init::i#2 sprites_init::i#1 ] 
Uplifting [MOS6526_CIA] best 71874 combination 
Uplifting [MOS6569_VICII] best 71874 combination 
Uplifting [MOS6581_SID] best 71874 combination 
Uplifting [RADIX] best 71874 combination 
Uplifting [print_cls] best 71874 combination 
Uplifting [main] best 71874 combination 
Uplifting [store_matrix] best 71874 combination 
Attempting to uplift remaining variables inzp[1]:15 [ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 ]
Uplifting [print_schar_at] best 71874 combination zp[1]:15 [ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 ] 
Attempting to uplift remaining variables inzp[1]:52 [ print_uchar_at::b#0 ]
Uplifting [print_uchar_at] best 71874 combination zp[1]:52 [ print_uchar_at::b#0 ] 
Attempting to uplift remaining variables inzp[1]:17 [ debug_print::i#2 debug_print::i#1 ]
Uplifting [debug_print] best 71874 combination zp[1]:17 [ debug_print::i#2 debug_print::i#1 ] 
Attempting to uplift remaining variables inzp[1]:16 [ debug_print::c#2 debug_print::c#1 ]
Uplifting [debug_print] best 71874 combination zp[1]:16 [ debug_print::c#2 debug_print::c#1 ] 
Attempting to uplift remaining variables inzp[1]:45 [ rotate_matrix::y#0 ]
Uplifting [rotate_matrix] best 71874 combination zp[1]:45 [ rotate_matrix::y#0 ] 
Attempting to uplift remaining variables inzp[1]:46 [ rotate_matrix::z#0 ]
Uplifting [rotate_matrix] best 71874 combination zp[1]:46 [ rotate_matrix::z#0 ] 
Attempting to uplift remaining variables inzp[1]:8 [ anim::i#2 anim::i#1 ]
Uplifting [anim] best 71874 combination zp[1]:8 [ anim::i#2 anim::i#1 ] 
Attempting to uplift remaining variables inzp[1]:63 [ calculate_matrix::$10 ]
Uplifting [calculate_matrix] best 71868 combination reg byte a [ calculate_matrix::$10 ] 
Attempting to uplift remaining variables inzp[1]:64 [ calculate_matrix::$11 ]
Uplifting [calculate_matrix] best 71862 combination reg byte a [ calculate_matrix::$11 ] 
Attempting to uplift remaining variables inzp[1]:65 [ calculate_matrix::$12 ]
Uplifting [calculate_matrix] best 71856 combination reg byte a [ calculate_matrix::$12 ] 
Attempting to uplift remaining variables inzp[1]:66 [ calculate_matrix::$13 ]
Uplifting [calculate_matrix] best 71850 combination reg byte a [ calculate_matrix::$13 ] 
Attempting to uplift remaining variables inzp[1]:67 [ calculate_matrix::$14 ]
Uplifting [calculate_matrix] best 71844 combination reg byte a [ calculate_matrix::$14 ] 
Attempting to uplift remaining variables inzp[1]:68 [ calculate_matrix::$15 ]
Uplifting [calculate_matrix] best 71838 combination reg byte a [ calculate_matrix::$15 ] 
Attempting to uplift remaining variables inzp[1]:69 [ calculate_matrix::$16 ]
Uplifting [calculate_matrix] best 71832 combination reg byte a [ calculate_matrix::$16 ] 
Attempting to uplift remaining variables inzp[1]:70 [ calculate_matrix::$17 ]
Uplifting [calculate_matrix] best 71826 combination reg byte a [ calculate_matrix::$17 ] 
Attempting to uplift remaining variables inzp[1]:71 [ calculate_matrix::$18 ]
Uplifting [calculate_matrix] best 71820 combination reg byte a [ calculate_matrix::$18 ] 
Attempting to uplift remaining variables inzp[1]:72 [ calculate_matrix::$19 ]
Uplifting [calculate_matrix] best 71814 combination reg byte a [ calculate_matrix::$19 ] 
Attempting to uplift remaining variables inzp[1]:73 [ calculate_matrix::$20 ]
Uplifting [calculate_matrix] best 71808 combination reg byte a [ calculate_matrix::$20 ] 
Attempting to uplift remaining variables inzp[1]:74 [ calculate_matrix::$21 ]
Uplifting [calculate_matrix] best 71802 combination reg byte a [ calculate_matrix::$21 ] 
Attempting to uplift remaining variables inzp[1]:75 [ calculate_matrix::$22 ]
Uplifting [calculate_matrix] best 71796 combination reg byte a [ calculate_matrix::$22 ] 
Attempting to uplift remaining variables inzp[1]:76 [ calculate_matrix::$23 ]
Uplifting [calculate_matrix] best 71790 combination reg byte a [ calculate_matrix::$23 ] 
Attempting to uplift remaining variables inzp[1]:77 [ calculate_matrix::$24 ]
Uplifting [calculate_matrix] best 71784 combination reg byte a [ calculate_matrix::$24 ] 
Attempting to uplift remaining variables inzp[1]:78 [ calculate_matrix::$25 ]
Uplifting [calculate_matrix] best 71778 combination reg byte a [ calculate_matrix::$25 ] 
Attempting to uplift remaining variables inzp[1]:79 [ calculate_matrix::$26 ]
Uplifting [calculate_matrix] best 71772 combination reg byte a [ calculate_matrix::$26 ] 
Attempting to uplift remaining variables inzp[1]:80 [ calculate_matrix::$27 ]
Uplifting [calculate_matrix] best 71766 combination reg byte a [ calculate_matrix::$27 ] 
Attempting to uplift remaining variables inzp[1]:81 [ calculate_matrix::$28 ]
Uplifting [calculate_matrix] best 71760 combination reg byte a [ calculate_matrix::$28 ] 
Attempting to uplift remaining variables inzp[1]:82 [ calculate_matrix::$29 ]
Uplifting [calculate_matrix] best 71754 combination reg byte a [ calculate_matrix::$29 ] 
Attempting to uplift remaining variables inzp[1]:83 [ calculate_matrix::$30 ]
Uplifting [calculate_matrix] best 71748 combination reg byte a [ calculate_matrix::$30 ] 
Attempting to uplift remaining variables inzp[1]:84 [ calculate_matrix::$31 ]
Uplifting [calculate_matrix] best 71742 combination reg byte a [ calculate_matrix::$31 ] 
Attempting to uplift remaining variables inzp[1]:85 [ calculate_matrix::$32 ]
Uplifting [calculate_matrix] best 71736 combination reg byte a [ calculate_matrix::$32 ] 
Attempting to uplift remaining variables inzp[1]:86 [ calculate_matrix::$33 ]
Uplifting [calculate_matrix] best 71730 combination reg byte a [ calculate_matrix::$33 ] 
Attempting to uplift remaining variables inzp[1]:87 [ calculate_matrix::$34 ]
Uplifting [calculate_matrix] best 71724 combination reg byte a [ calculate_matrix::$34 ] 
Attempting to uplift remaining variables inzp[1]:91 [ debug_print::print_schar_pos5_sb#0 ]
Uplifting [debug_print] best 71718 combination reg byte a [ debug_print::print_schar_pos5_sb#0 ] 
Attempting to uplift remaining variables inzp[1]:92 [ debug_print::print_schar_pos6_sb#0 ]
Uplifting [debug_print] best 71712 combination reg byte a [ debug_print::print_schar_pos6_sb#0 ] 
Attempting to uplift remaining variables inzp[1]:93 [ debug_print::print_schar_pos7_sb#0 ]
Uplifting [debug_print] best 71706 combination reg byte a [ debug_print::print_schar_pos7_sb#0 ] 
Attempting to uplift remaining variables inzp[1]:94 [ debug_print::print_schar_pos8_sb#0 ]
Uplifting [debug_print] best 71700 combination reg byte a [ debug_print::print_schar_pos8_sb#0 ] 
Attempting to uplift remaining variables inzp[1]:95 [ debug_print::print_schar_pos9_sb#0 ]
Uplifting [debug_print] best 71694 combination reg byte a [ debug_print::print_schar_pos9_sb#0 ] 
Attempting to uplift remaining variables inzp[1]:96 [ debug_print::print_schar_pos10_sb#0 ]
Uplifting [debug_print] best 71688 combination reg byte a [ debug_print::print_schar_pos10_sb#0 ] 
Attempting to uplift remaining variables inzp[1]:97 [ debug_print::print_schar_pos11_sb#0 ]
Uplifting [debug_print] best 71682 combination reg byte a [ debug_print::print_schar_pos11_sb#0 ] 
Attempting to uplift remaining variables inzp[1]:98 [ debug_print::print_schar_pos12_sb#0 ]
Uplifting [debug_print] best 71676 combination reg byte a [ debug_print::print_schar_pos12_sb#0 ] 
Attempting to uplift remaining variables inzp[1]:42 [ calculate_matrix::sx#0 ]
Uplifting [calculate_matrix] best 71638 combination reg byte x [ calculate_matrix::sx#0 ] 
Attempting to uplift remaining variables inzp[1]:54 [ calculate_matrix::t2#0 ]
Uplifting [calculate_matrix] best 71638 combination zp[1]:54 [ calculate_matrix::t2#0 ] 
Attempting to uplift remaining variables inzp[1]:53 [ calculate_matrix::t1#0 ]
Uplifting [calculate_matrix] best 71638 combination zp[1]:53 [ calculate_matrix::t1#0 ] 
Attempting to uplift remaining variables inzp[1]:43 [ calculate_matrix::sy#0 ]
Uplifting [calculate_matrix] best 71638 combination zp[1]:43 [ calculate_matrix::sy#0 ] 
Attempting to uplift remaining variables inzp[1]:3 [ debug_print_init::c#2 debug_print_init::c#1 ]
Uplifting [debug_print_init] best 71638 combination zp[1]:3 [ debug_print_init::c#2 debug_print_init::c#1 ] 
Attempting to uplift remaining variables inzp[1]:7 [ sy#11 sy#2 ]
Uplifting [] best 71638 combination zp[1]:7 [ sy#11 sy#2 ] 
Attempting to uplift remaining variables inzp[1]:4 [ debug_print_init::i#2 debug_print_init::i#1 ]
Uplifting [debug_print_init] best 71638 combination zp[1]:4 [ debug_print_init::i#2 debug_print_init::i#1 ] 
Attempting to uplift remaining variables inzp[1]:58 [ calculate_matrix::t6#0 ]
Uplifting [calculate_matrix] best 71638 combination zp[1]:58 [ calculate_matrix::t6#0 ] 
Attempting to uplift remaining variables inzp[1]:56 [ calculate_matrix::t4#0 ]
Uplifting [calculate_matrix] best 71638 combination zp[1]:56 [ calculate_matrix::t4#0 ] 
Attempting to uplift remaining variables inzp[1]:59 [ calculate_matrix::t7#0 ]
Uplifting [calculate_matrix] best 71638 combination zp[1]:59 [ calculate_matrix::t7#0 ] 
Attempting to uplift remaining variables inzp[1]:60 [ calculate_matrix::t8#0 ]
Uplifting [calculate_matrix] best 71638 combination zp[1]:60 [ calculate_matrix::t8#0 ] 
Attempting to uplift remaining variables inzp[1]:55 [ calculate_matrix::t3#0 ]
Uplifting [calculate_matrix] best 71638 combination zp[1]:55 [ calculate_matrix::t3#0 ] 
Attempting to uplift remaining variables inzp[1]:57 [ calculate_matrix::t5#0 ]
Uplifting [calculate_matrix] best 71638 combination zp[1]:57 [ calculate_matrix::t5#0 ] 
Attempting to uplift remaining variables inzp[1]:6 [ sx#11 sx#2 ]
Uplifting [] best 71638 combination zp[1]:6 [ sx#11 sx#2 ] 
Attempting to uplift remaining variables inzp[1]:62 [ calculate_matrix::t10#0 ]
Uplifting [calculate_matrix] best 71631 combination reg byte x [ calculate_matrix::t10#0 ] 
Attempting to uplift remaining variables inzp[1]:61 [ calculate_matrix::t9#0 ]
Uplifting [calculate_matrix] best 71631 combination zp[1]:61 [ calculate_matrix::t9#0 ] 
Coalescing zero page register [ zp[2]:13 [ print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 ] ] with [ zp[2]:21 [ print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 ] ] - score: 2
Coalescing zero page register [ zp[1]:7 [ sy#11 sy#2 ] ] with [ zp[1]:43 [ calculate_matrix::sy#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 ] ] with [ zp[2]:50 [ print_uchar_at::at#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:15 [ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 ] ] with [ zp[1]:52 [ print_uchar_at::b#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:6 [ sx#11 sx#2 ] ] with [ zp[1]:3 [ debug_print_init::c#2 debug_print_init::c#1 ] ]
Coalescing zero page register [ zp[1]:7 [ sy#11 sy#2 calculate_matrix::sy#0 ] ] with [ zp[1]:4 [ debug_print_init::i#2 debug_print_init::i#1 ] ]
Coalescing zero page register [ zp[2]:13 [ print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 print_uchar_at::at#0 ] ] with [ zp[2]:9 [ print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ] ]
Coalescing zero page register [ zp[2]:18 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:11 [ print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ] ]
Coalescing zero page register [ zp[1]:45 [ rotate_matrix::y#0 ] ] with [ zp[1]:15 [ print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 print_uchar_at::b#0 ] ]
Coalescing zero page register [ zp[1]:46 [ rotate_matrix::z#0 ] ] with [ zp[1]:16 [ debug_print::c#2 debug_print::c#1 ] ]
Coalescing zero page register [ zp[1]:53 [ calculate_matrix::t1#0 ] ] with [ zp[1]:17 [ debug_print::i#2 debug_print::i#1 ] ]
Coalescing zero page register [ zp[2]:24 [ debug_print_init::$41 ] ] with [ zp[2]:13 [ print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 print_uchar_at::at#0 print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ] ]
Coalescing zero page register [ zp[2]:26 [ debug_print_init::$44 ] ] with [ zp[2]:18 [ memset::dst#2 memset::dst#1 print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ] ]
Coalescing zero page register [ zp[1]:54 [ calculate_matrix::t2#0 ] ] with [ zp[1]:45 [ rotate_matrix::y#0 print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 print_uchar_at::b#0 ] ]
Coalescing zero page register [ zp[1]:55 [ calculate_matrix::t3#0 ] ] with [ zp[1]:46 [ rotate_matrix::z#0 debug_print::c#2 debug_print::c#1 ] ]
Allocated (was zp[1]:6) zp[1]:2 [ sx#11 sx#2 debug_print_init::c#2 debug_print_init::c#1 ]
Allocated (was zp[1]:7) zp[1]:3 [ sy#11 sy#2 calculate_matrix::sy#0 debug_print_init::i#2 debug_print_init::i#1 ]
Allocated (was zp[1]:8) zp[1]:4 [ anim::i#2 anim::i#1 ]
Allocated (was zp[2]:24) zp[2]:5 [ debug_print_init::$41 print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 print_uchar_at::at#0 print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ]
Allocated (was zp[2]:26) zp[2]:7 [ debug_print_init::$44 memset::dst#2 memset::dst#1 print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ]
Allocated (was zp[2]:28) zp[2]:9 [ debug_print_init::$47 ]
Allocated (was zp[2]:30) zp[2]:11 [ debug_print_init::$50 ]
Allocated (was zp[2]:32) zp[2]:13 [ debug_print_init::$53 ]
Allocated (was zp[2]:34) zp[2]:15 [ debug_print_init::$56 ]
Allocated (was zp[2]:36) zp[2]:17 [ debug_print_init::$59 ]
Allocated (was zp[2]:38) zp[2]:19 [ debug_print_init::$62 ]
Allocated (was zp[2]:40) zp[2]:21 [ debug_print_init::$65 ]
Allocated (was zp[1]:53) zp[1]:23 [ calculate_matrix::t1#0 debug_print::i#2 debug_print::i#1 ]
Allocated (was zp[1]:54) zp[1]:24 [ calculate_matrix::t2#0 rotate_matrix::y#0 print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 print_uchar_at::b#0 ]
Allocated (was zp[1]:55) zp[1]:25 [ calculate_matrix::t3#0 rotate_matrix::z#0 debug_print::c#2 debug_print::c#1 ]
Allocated (was zp[1]:56) zp[1]:26 [ calculate_matrix::t4#0 ]
Allocated (was zp[1]:57) zp[1]:27 [ calculate_matrix::t5#0 ]
Allocated (was zp[1]:58) zp[1]:28 [ calculate_matrix::t6#0 ]
Allocated (was zp[1]:59) zp[1]:29 [ calculate_matrix::t7#0 ]
Allocated (was zp[1]:60) zp[1]:30 [ calculate_matrix::t8#0 ]
Allocated (was zp[1]:61) zp[1]:31 [ calculate_matrix::t9#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// 3D Rotation using a Rotation Matrix
// Based on: 
// - C= Hacking Magazine Issue 8. http://www.ffd2.com/fridge/chacking/c=hacking8.txt
// - Codebase64 Article http://codebase64.org/doku.php?id=base:3d_rotation  
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .const LIGHT_GREY = $f
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
  .const sz = 0
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_COLOR = $d027
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // The rotated point - updated by calling rotate_matrix()
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  // The rotated point with perspective
  .label pp = $f3
  .label xp = $f4
  .label yp = $f5
  // Pointers used to multiply perspective (d/z0-z) onto x- & y-coordinates. Points into mulf_sqr1 / mulf_sqr2  
  .label psp1 = $f6
  .label psp2 = $f8
  .label SCREEN = $400
  .label COSH = SINH+$40
  .label COSQ = SINQ+$40
  .label print_screen = $400
  .label sx = 2
  .label sy = 3
  // main
main: {
    // asm { sei  }
    sei
    // [1] call sprites_init 
    jsr sprites_init
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const word*) psp1) ← (word)(const byte*) mulf_sqr1 -- _deref_pwuc1=vwuc2 
    //mulf_init();
    lda #<mulf_sqr1
    sta psp1
    lda #>mulf_sqr1
    sta psp1+1
    // [3] *((const word*) psp2) ← (word)(const byte*) mulf_sqr2 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr2
    sta psp2
    lda #>mulf_sqr2
    sta psp2+1
    // [4] call debug_print_init 
    // [15] phi from main::@1 to debug_print_init [phi:main::@1->debug_print_init]
  debug_print_init_from___b1:
    jsr debug_print_init
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [6] call anim 
  //calculate_matrix(1,1,1);
    // [77] phi from main::@2 to anim [phi:main::@2->anim]
  anim_from___b2:
    jsr anim
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // sprites_init
// Initialize sprites
sprites_init: {
    .label SCREEN = $400
    .label sprites_ptr = SCREEN+$3f8
    // [8] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE
    // [9] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  __b1_from_sprites_init:
    // [9] phi (byte) sprites_init::i#2 = (byte) 0 [phi:sprites_init->sprites_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [9] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  __b1_from___b1:
    // [9] phi (byte) sprites_init::i#2 = (byte) sprites_init::i#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    jmp __b1
    // sprites_init::@1
  __b1:
    // [10] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← (byte)(const byte*) SPRITE/(byte) $40 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta sprites_ptr,x
    // [11] *((const nomodify byte*) SPRITES_COLOR + (byte) sprites_init::i#2) ← (const nomodify byte) GREEN -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLOR,x
    // [12] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [13] if((byte) sprites_init::i#1!=(byte) 8) goto sprites_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1_from___b1
    jmp __breturn
    // sprites_init::@return
  __breturn:
    // [14] return 
    rts
}
  // debug_print_init
debug_print_init: {
    .label COLS = $d800
    .label at_line = SCREEN+$10*$28
    .label at_cols = COLS+$10*$28
    .label __41 = 5
    .label __44 = 7
    .label __47 = 9
    .label __50 = $b
    .label __53 = $d
    .label __56 = $f
    .label __59 = $11
    .label __62 = $13
    .label __65 = $15
    .label c = 2
    .label i = 3
    // [16] call print_cls 
    // [112] phi from debug_print_init to print_cls [phi:debug_print_init->print_cls]
  print_cls_from_debug_print_init:
    jsr print_cls
    // [17] phi from debug_print_init to debug_print_init::@4 [phi:debug_print_init->debug_print_init::@4]
  __b4_from_debug_print_init:
    jmp __b4
    // debug_print_init::@4
  __b4:
    // [18] call print_str_at 
    // [115] phi from debug_print_init::@4 to print_str_at [phi:debug_print_init::@4->print_str_at]
  print_str_at_from___b4:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(byte) $22 [phi:debug_print_init::@4->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$22
    sta.z print_str_at.at
    lda #>SCREEN+$22
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str [phi:debug_print_init::@4->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str_at.str
    lda #>str
    sta.z print_str_at.str+1
    jsr print_str_at
    // [19] phi from debug_print_init::@4 to debug_print_init::@5 [phi:debug_print_init::@4->debug_print_init::@5]
  __b5_from___b4:
    jmp __b5
    // debug_print_init::@5
  __b5:
    // [20] call print_str_at 
    // [115] phi from debug_print_init::@5 to print_str_at [phi:debug_print_init::@5->print_str_at]
  print_str_at_from___b5:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(byte)(number) $28*(number) 1+(byte) $22 [phi:debug_print_init::@5->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*1+$22
    sta.z print_str_at.at
    lda #>SCREEN+$28*1+$22
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str1 [phi:debug_print_init::@5->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str_at.str
    lda #>str1
    sta.z print_str_at.str+1
    jsr print_str_at
    // [21] phi from debug_print_init::@5 to debug_print_init::@6 [phi:debug_print_init::@5->debug_print_init::@6]
  __b6_from___b5:
    jmp __b6
    // debug_print_init::@6
  __b6:
    // [22] call print_str_at 
    // [115] phi from debug_print_init::@6 to print_str_at [phi:debug_print_init::@6->print_str_at]
  print_str_at_from___b6:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(byte)(number) $28*(number) 2+(byte) $22 [phi:debug_print_init::@6->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*2+$22
    sta.z print_str_at.at
    lda #>SCREEN+$28*2+$22
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str2 [phi:debug_print_init::@6->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str_at.str
    lda #>str2
    sta.z print_str_at.str+1
    jsr print_str_at
    // [23] phi from debug_print_init::@6 to debug_print_init::@7 [phi:debug_print_init::@6->debug_print_init::@7]
  __b7_from___b6:
    jmp __b7
    // debug_print_init::@7
  __b7:
    // [24] call print_str_at 
    // [115] phi from debug_print_init::@7 to print_str_at [phi:debug_print_init::@7->print_str_at]
  print_str_at_from___b7:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $10 [phi:debug_print_init::@7->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$10
    sta.z print_str_at.at
    lda #>SCREEN+$28*$10
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str3 [phi:debug_print_init::@7->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str_at.str
    lda #>str3
    sta.z print_str_at.str+1
    jsr print_str_at
    // [25] phi from debug_print_init::@7 to debug_print_init::@8 [phi:debug_print_init::@7->debug_print_init::@8]
  __b8_from___b7:
    jmp __b8
    // debug_print_init::@8
  __b8:
    // [26] call print_str_at 
    // [115] phi from debug_print_init::@8 to print_str_at [phi:debug_print_init::@8->print_str_at]
  print_str_at_from___b8:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $11 [phi:debug_print_init::@8->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$11
    sta.z print_str_at.at
    lda #>SCREEN+$28*$11
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str4 [phi:debug_print_init::@8->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str_at.str
    lda #>str4
    sta.z print_str_at.str+1
    jsr print_str_at
    // [27] phi from debug_print_init::@8 to debug_print_init::@9 [phi:debug_print_init::@8->debug_print_init::@9]
  __b9_from___b8:
    jmp __b9
    // debug_print_init::@9
  __b9:
    // [28] call print_str_at 
    // [115] phi from debug_print_init::@9 to print_str_at [phi:debug_print_init::@9->print_str_at]
  print_str_at_from___b9:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $12 [phi:debug_print_init::@9->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$12
    sta.z print_str_at.at
    lda #>SCREEN+$28*$12
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str5 [phi:debug_print_init::@9->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str_at.str
    lda #>str5
    sta.z print_str_at.str+1
    jsr print_str_at
    // [29] phi from debug_print_init::@9 to debug_print_init::@10 [phi:debug_print_init::@9->debug_print_init::@10]
  __b10_from___b9:
    jmp __b10
    // debug_print_init::@10
  __b10:
    // [30] call print_str_at 
    // [115] phi from debug_print_init::@10 to print_str_at [phi:debug_print_init::@10->print_str_at]
  print_str_at_from___b10:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $13 [phi:debug_print_init::@10->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$13
    sta.z print_str_at.at
    lda #>SCREEN+$28*$13
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str6 [phi:debug_print_init::@10->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str6
    sta.z print_str_at.str
    lda #>str6
    sta.z print_str_at.str+1
    jsr print_str_at
    // [31] phi from debug_print_init::@10 to debug_print_init::@11 [phi:debug_print_init::@10->debug_print_init::@11]
  __b11_from___b10:
    jmp __b11
    // debug_print_init::@11
  __b11:
    // [32] call print_str_at 
    // [115] phi from debug_print_init::@11 to print_str_at [phi:debug_print_init::@11->print_str_at]
  print_str_at_from___b11:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $14 [phi:debug_print_init::@11->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$14
    sta.z print_str_at.at
    lda #>SCREEN+$28*$14
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str7 [phi:debug_print_init::@11->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str7
    sta.z print_str_at.str
    lda #>str7
    sta.z print_str_at.str+1
    jsr print_str_at
    // [33] phi from debug_print_init::@11 to debug_print_init::@12 [phi:debug_print_init::@11->debug_print_init::@12]
  __b12_from___b11:
    jmp __b12
    // debug_print_init::@12
  __b12:
    // [34] call print_str_at 
    // [115] phi from debug_print_init::@12 to print_str_at [phi:debug_print_init::@12->print_str_at]
  print_str_at_from___b12:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $15 [phi:debug_print_init::@12->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$15
    sta.z print_str_at.at
    lda #>SCREEN+$28*$15
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str8 [phi:debug_print_init::@12->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str8
    sta.z print_str_at.str
    lda #>str8
    sta.z print_str_at.str+1
    jsr print_str_at
    // [35] phi from debug_print_init::@12 to debug_print_init::@13 [phi:debug_print_init::@12->debug_print_init::@13]
  __b13_from___b12:
    jmp __b13
    // debug_print_init::@13
  __b13:
    // [36] call print_str_at 
    // [115] phi from debug_print_init::@13 to print_str_at [phi:debug_print_init::@13->print_str_at]
  print_str_at_from___b13:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $16 [phi:debug_print_init::@13->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$16
    sta.z print_str_at.at
    lda #>SCREEN+$28*$16
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str9 [phi:debug_print_init::@13->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str9
    sta.z print_str_at.str
    lda #>str9
    sta.z print_str_at.str+1
    jsr print_str_at
    // [37] phi from debug_print_init::@13 to debug_print_init::@14 [phi:debug_print_init::@13->debug_print_init::@14]
  __b14_from___b13:
    jmp __b14
    // debug_print_init::@14
  __b14:
    // [38] call print_str_at 
    // [115] phi from debug_print_init::@14 to print_str_at [phi:debug_print_init::@14->print_str_at]
  print_str_at_from___b14:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $17 [phi:debug_print_init::@14->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$17
    sta.z print_str_at.at
    lda #>SCREEN+$28*$17
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str10 [phi:debug_print_init::@14->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str10
    sta.z print_str_at.str
    lda #>str10
    sta.z print_str_at.str+1
    jsr print_str_at
    // [39] phi from debug_print_init::@14 to debug_print_init::@15 [phi:debug_print_init::@14->debug_print_init::@15]
  __b15_from___b14:
    jmp __b15
    // debug_print_init::@15
  __b15:
    // [40] call print_str_at 
    // [115] phi from debug_print_init::@15 to print_str_at [phi:debug_print_init::@15->print_str_at]
  print_str_at_from___b15:
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $18 [phi:debug_print_init::@15->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$18
    sta.z print_str_at.at
    lda #>SCREEN+$28*$18
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str11 [phi:debug_print_init::@15->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str11
    sta.z print_str_at.str
    lda #>str11
    sta.z print_str_at.str+1
    jsr print_str_at
    // [41] phi from debug_print_init::@15 to debug_print_init::@1 [phi:debug_print_init::@15->debug_print_init::@1]
  __b1_from___b15:
    // [41] phi (byte) debug_print_init::i#2 = (byte) 0 [phi:debug_print_init::@15->debug_print_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [41] phi (byte) debug_print_init::c#2 = (byte) 4 [phi:debug_print_init::@15->debug_print_init::@1#1] -- vbuz1=vbuc1 
    lda #4
    sta.z c
    jmp __b1
    // [41] phi from debug_print_init::@3 to debug_print_init::@1 [phi:debug_print_init::@3->debug_print_init::@1]
  __b1_from___b3:
    // [41] phi (byte) debug_print_init::i#2 = (byte) debug_print_init::i#1 [phi:debug_print_init::@3->debug_print_init::@1#0] -- register_copy 
    // [41] phi (byte) debug_print_init::c#2 = (byte) debug_print_init::c#1 [phi:debug_print_init::@3->debug_print_init::@1#1] -- register_copy 
    jmp __b1
    // debug_print_init::@1
  __b1:
    // [42] (byte*) print_schar_at::at#0 ← (const byte*) debug_print_init::at_line#0 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line
    sta.z print_schar_at.at
    lda #>at_line
    adc #0
    sta.z print_schar_at.at+1
    // [43] (signed byte) print_schar_at::b#1 ← *((const signed byte*) xs + (byte) debug_print_init::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xs,y
    sta.z print_schar_at.b
    // [44] call print_schar_at 
    // [122] phi from debug_print_init::@1 to print_schar_at [phi:debug_print_init::@1->print_schar_at]
  print_schar_at_from___b1:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#0 [phi:debug_print_init::@1->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#1 [phi:debug_print_init::@1->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b16
    // debug_print_init::@16
  __b16:
    // [45] (byte*) print_schar_at::at#1 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*1
    sta.z print_schar_at.at
    lda #>at_line+$28*1
    adc #0
    sta.z print_schar_at.at+1
    // [46] (signed byte) print_schar_at::b#2 ← *((const signed byte*) ys + (byte) debug_print_init::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda ys,y
    sta.z print_schar_at.b
    // [47] call print_schar_at 
    // [122] phi from debug_print_init::@16 to print_schar_at [phi:debug_print_init::@16->print_schar_at]
  print_schar_at_from___b16:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#1 [phi:debug_print_init::@16->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#2 [phi:debug_print_init::@16->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b17
    // debug_print_init::@17
  __b17:
    // [48] (byte*) print_schar_at::at#2 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*2
    sta.z print_schar_at.at
    lda #>at_line+$28*2
    adc #0
    sta.z print_schar_at.at+1
    // [49] (signed byte) print_schar_at::b#3 ← *((const signed byte*) zs + (byte) debug_print_init::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda zs,y
    sta.z print_schar_at.b
    // [50] call print_schar_at 
    // [122] phi from debug_print_init::@17 to print_schar_at [phi:debug_print_init::@17->print_schar_at]
  print_schar_at_from___b17:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#2 [phi:debug_print_init::@17->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#3 [phi:debug_print_init::@17->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // [51] phi from debug_print_init::@17 to debug_print_init::@2 [phi:debug_print_init::@17->debug_print_init::@2]
  __b2_from___b17:
    // [51] phi (byte) debug_print_init::j#2 = (byte) 0 [phi:debug_print_init::@17->debug_print_init::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // [51] phi from debug_print_init::@2 to debug_print_init::@2 [phi:debug_print_init::@2->debug_print_init::@2]
  __b2_from___b2:
    // [51] phi (byte) debug_print_init::j#2 = (byte) debug_print_init::j#1 [phi:debug_print_init::@2->debug_print_init::@2#0] -- register_copy 
    jmp __b2
    // debug_print_init::@2
  __b2:
    // [52] (byte) debug_print_init::col#0 ← (byte) 8 + (byte) debug_print_init::i#2 -- vbuxx=vbuc1_plus_vbuz1 
    lax.z i
    axs #-[8]
    // [53] (byte*~) debug_print_init::$41 ← (const byte*) debug_print_init::at_cols#0 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols
    sta.z __41
    lda #>at_cols
    adc #0
    sta.z __41+1
    // [54] *((byte*~) debug_print_init::$41 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__41),y
    // [55] (byte*~) debug_print_init::$44 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*1
    sta.z __44
    lda #>at_cols+$28*1
    adc #0
    sta.z __44+1
    // [56] *((byte*~) debug_print_init::$44 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__44),y
    // [57] (byte*~) debug_print_init::$47 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*2
    sta.z __47
    lda #>at_cols+$28*2
    adc #0
    sta.z __47+1
    // [58] *((byte*~) debug_print_init::$47 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__47),y
    // [59] (byte*~) debug_print_init::$50 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 3 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*3
    sta.z __50
    lda #>at_cols+$28*3
    adc #0
    sta.z __50+1
    // [60] *((byte*~) debug_print_init::$50 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__50),y
    // [61] (byte*~) debug_print_init::$53 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 4 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*4
    sta.z __53
    lda #>at_cols+$28*4
    adc #0
    sta.z __53+1
    // [62] *((byte*~) debug_print_init::$53 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__53),y
    // [63] (byte*~) debug_print_init::$56 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 5 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*5
    sta.z __56
    lda #>at_cols+$28*5
    adc #0
    sta.z __56+1
    // [64] *((byte*~) debug_print_init::$56 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__56),y
    // [65] (byte*~) debug_print_init::$59 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 6 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*6
    sta.z __59
    lda #>at_cols+$28*6
    adc #0
    sta.z __59+1
    // [66] *((byte*~) debug_print_init::$59 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__59),y
    // [67] (byte*~) debug_print_init::$62 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 7 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*7
    sta.z __62
    lda #>at_cols+$28*7
    adc #0
    sta.z __62+1
    // [68] *((byte*~) debug_print_init::$62 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__62),y
    // [69] (byte*~) debug_print_init::$65 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 8 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*8
    sta.z __65
    lda #>at_cols+$28*8
    adc #0
    sta.z __65+1
    // [70] *((byte*~) debug_print_init::$65 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__65),y
    // [71] (byte) debug_print_init::j#1 ← ++ (byte) debug_print_init::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [72] if((byte) debug_print_init::j#1!=(byte) 4) goto debug_print_init::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    bne __b2_from___b2
    jmp __b3
    // debug_print_init::@3
  __b3:
    // [73] (byte) debug_print_init::c#1 ← (byte) debug_print_init::c#2 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c
    axs #-[4]
    stx.z c
    // [74] (byte) debug_print_init::i#1 ← ++ (byte) debug_print_init::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [75] if((byte) debug_print_init::i#1!=(byte) 8) goto debug_print_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b1_from___b3
    jmp __breturn
    // debug_print_init::@return
  __breturn:
    // [76] return 
    rts
    str: .text "sx"
    .byte 0
    str1: .text "sy"
    .byte 0
    str2: .text "sz"
    .byte 0
    str3: .text "x"
    .byte 0
    str4: .text "y"
    .byte 0
    str5: .text "z"
    .byte 0
    str6: .text "xr"
    .byte 0
    str7: .text "yr"
    .byte 0
    str8: .text "zr"
    .byte 0
    str9: .text "pp"
    .byte 0
    str10: .text "xp"
    .byte 0
    str11: .text "yp"
    .byte 0
}
  // anim
anim: {
    .label i = 4
    // [78] phi from anim to anim::@1 [phi:anim->anim::@1]
  __b1_from_anim:
    // [78] phi (signed byte) sy#11 = (signed byte) 0 [phi:anim->anim::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z sy
    // [78] phi (signed byte) sx#11 = (signed byte) 0 [phi:anim->anim::@1#1] -- vbsz1=vbsc1 
    lda #0
    sta.z sx
    jmp __b1
    // anim::@1
  __b1:
    jmp __b2
    // anim::@2
  __b2:
    // [79] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto anim::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b2
    jmp __b3
    // anim::@3
  __b3:
    // [80] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fe) goto anim::@3 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fe
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b3
    jmp __b4
    // anim::@4
  __b4:
    // [81] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fd) goto anim::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fd
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b4
    jmp __b5
    // anim::@5
  __b5:
    // [82] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [83] (signed byte) calculate_matrix::sx#0 ← (signed byte) sx#11 -- vbsxx=vbsz1 
    ldx.z sx
    // [84] (signed byte) calculate_matrix::sy#0 ← (signed byte) sy#11
    // [85] call calculate_matrix 
    //calculate_matrix_16(sx,sy,sz);
    jsr calculate_matrix
    // [86] phi from anim::@5 to anim::@8 [phi:anim::@5->anim::@8]
  __b8_from___b5:
    jmp __b8
    // anim::@8
  __b8:
    // [87] call store_matrix 
    jsr store_matrix
    // [88] phi from anim::@8 to anim::@6 [phi:anim::@8->anim::@6]
  __b6_from___b8:
    // [88] phi (byte) anim::i#2 = (byte) 0 [phi:anim::@8->anim::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b6
    // [88] phi from anim::@9 to anim::@6 [phi:anim::@9->anim::@6]
  __b6_from___b9:
    // [88] phi (byte) anim::i#2 = (byte) anim::i#1 [phi:anim::@9->anim::@6#0] -- register_copy 
    jmp __b6
    // anim::@6
  __b6:
    // [89] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [90] (signed byte) rotate_matrix::x#0 ← *((const signed byte*) xs + (byte) anim::i#2) -- vbsxx=pbsc1_derefidx_vbuz1 
    ldy.z i
    ldx xs,y
    // [91] (signed byte) rotate_matrix::y#0 ← *((const signed byte*) ys + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda ys,y
    sta.z rotate_matrix.y
    // [92] (signed byte) rotate_matrix::z#0 ← *((const signed byte*) zs + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda zs,y
    sta.z rotate_matrix.z
    // [93] call rotate_matrix 
    jsr rotate_matrix
    jmp __b9
    // anim::@9
  __b9:
    // [94] *((const signed byte*) xrs + (byte) anim::i#2) ← *((const signed byte*) xr) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda xr
    ldy.z i
    sta xrs,y
    // [95] *((const signed byte*) yrs + (byte) anim::i#2) ← *((const signed byte*) yr) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda yr
    ldy.z i
    sta yrs,y
    // [96] *((const signed byte*) zrs + (byte) anim::i#2) ← *((const signed byte*) zr) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda zr
    ldy.z i
    sta zrs,y
    // [97] *((const signed byte*) pps + (byte) anim::i#2) ← *((const signed byte*) pp) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda pp
    ldy.z i
    sta pps,y
    // [98] *((const signed byte*) xps + (byte) anim::i#2) ← *((const signed byte*) xp) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda xp
    ldy.z i
    sta xps,y
    // [99] *((const signed byte*) yps + (byte) anim::i#2) ← *((const signed byte*) yp) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda yp
    ldy.z i
    sta yps,y
    // [100] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda.z i
    asl
    tax
    // [101] (byte~) anim::$9 ← (byte) $80 + (byte)*((const signed byte*) xp) -- vbuaa=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc xp
    // [102] *((const nomodify byte*) SPRITES_XPOS + (byte) anim::i2#0) ← (byte~) anim::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
    // [103] (byte~) anim::$10 ← (byte) $80 + (byte)*((const signed byte*) yp) -- vbuaa=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc yp
    // [104] *((const nomodify byte*) SPRITES_YPOS + (byte) anim::i2#0) ← (byte~) anim::$10 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_YPOS,x
    // [105] (byte) anim::i#1 ← ++ (byte) anim::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [106] if((byte) anim::i#1!=(byte) 8) goto anim::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b6_from___b9
    jmp __b7
    // anim::@7
  __b7:
    // [107] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_GREY -- _deref_pbuc1=vbuc2 
    lda #LIGHT_GREY
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [108] call debug_print 
    jsr debug_print
    jmp __b10
    // anim::@10
  __b10:
    // [109] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_BLUE -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [110] (signed byte) sx#2 ← (signed byte) sx#11 + (signed byte) 2 -- vbsz1=vbsz1_plus_2 
    // Increment angles        
    inc.z sx
    inc.z sx
    // [111] (signed byte) sy#2 ← (signed byte) sy#11 - (signed byte) 3 -- vbsz1=vbsz1_minus_vbsc1 
    lax.z sy
    axs #3
    stx.z sy
    // [78] phi from anim::@10 to anim::@1 [phi:anim::@10->anim::@1]
  __b1_from___b10:
    // [78] phi (signed byte) sy#11 = (signed byte) sy#2 [phi:anim::@10->anim::@1#0] -- register_copy 
    // [78] phi (signed byte) sx#11 = (signed byte) sx#2 [phi:anim::@10->anim::@1#1] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [113] call memset 
    // [244] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [114] return 
    rts
}
  // print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zp(5) str, byte* zp(7) at)
print_str_at: {
    .label at = 7
    .label str = 5
    // [116] phi from print_str_at print_str_at::@2 to print_str_at::@1 [phi:print_str_at/print_str_at::@2->print_str_at::@1]
  __b1_from_print_str_at:
  __b1_from___b2:
    // [116] phi (byte*) print_str_at::at#13 = (byte*) print_str_at::at#15 [phi:print_str_at/print_str_at::@2->print_str_at::@1#0] -- register_copy 
    // [116] phi (byte*) print_str_at::str#13 = (byte*) print_str_at::str#15 [phi:print_str_at/print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp __b1
    // print_str_at::@1
  __b1:
    // [117] if((byte) 0!=*((byte*) print_str_at::str#13)) goto print_str_at::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str_at::@return
  __breturn:
    // [118] return 
    rts
    // print_str_at::@2
  __b2:
    // [119] *((byte*) print_str_at::at#13) ← *((byte*) print_str_at::str#13) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (at),y
    // [120] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#13 -- pbuz1=_inc_pbuz1 
    inc.z at
    bne !+
    inc.z at+1
  !:
    // [121] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#13 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // print_schar_at
// Print a signed char as hex at a specific screen position
// print_schar_at(signed byte zp($18) b, byte* zp(5) at)
print_schar_at: {
    .label b = $18
    .label at = 5
    // [123] if((signed byte) print_schar_at::b#22<(signed byte) 0) goto print_schar_at::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1
    jmp __b3
    // print_schar_at::@3
  __b3:
    // [124] (byte*) print_char_at::at#1 ← (byte*) print_schar_at::at#21
    // [125] call print_char_at 
    // [250] phi from print_schar_at::@3 to print_char_at [phi:print_schar_at::@3->print_char_at]
  print_char_at_from___b3:
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#1 [phi:print_schar_at::@3->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) ' ' [phi:print_schar_at::@3->print_char_at#1] -- vbuxx=vbuc1 
    ldx #' '
    jsr print_char_at
    // [126] phi from print_schar_at::@3 print_schar_at::@4 to print_schar_at::@2 [phi:print_schar_at::@3/print_schar_at::@4->print_schar_at::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [126] phi (signed byte) print_schar_at::b#24 = (signed byte) print_schar_at::b#22 [phi:print_schar_at::@3/print_schar_at::@4->print_schar_at::@2#0] -- register_copy 
    jmp __b2
    // print_schar_at::@2
  __b2:
    // [127] (byte*) print_uchar_at::at#0 ← (byte*) print_schar_at::at#21 + (byte) 1 -- pbuz1=pbuz1_plus_1 
    inc.z print_uchar_at.at
    bne !+
    inc.z print_uchar_at.at+1
  !:
    // [128] (byte) print_uchar_at::b#0 ← (byte)(signed byte) print_schar_at::b#24
    // [129] call print_uchar_at 
    jsr print_uchar_at
    jmp __breturn
    // print_schar_at::@return
  __breturn:
    // [130] return 
    rts
    // print_schar_at::@1
  __b1:
    // [131] (byte*) print_char_at::at#0 ← (byte*) print_schar_at::at#21
    // [132] call print_char_at 
    // [250] phi from print_schar_at::@1 to print_char_at [phi:print_schar_at::@1->print_char_at]
  print_char_at_from___b1:
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#0 [phi:print_schar_at::@1->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) '-' [phi:print_schar_at::@1->print_char_at#1] -- vbuxx=vbuc1 
    ldx #'-'
    jsr print_char_at
    jmp __b4
    // print_schar_at::@4
  __b4:
    // [133] (signed byte) print_schar_at::b#0 ← - (signed byte) print_schar_at::b#22 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2_from___b4
}
  // calculate_matrix
// Prepare the 3x3 rotation matrix into rotation_matrix[]
// Angles sx, sy, sz are based on 2*PI=$100 
// Method described in C= Hacking Magazine Issue 8. http://www.ffd2.com/fridge/chacking/c=hacking8.txt
// calculate_matrix(signed byte register(X) sx, signed byte zp(3) sy)
calculate_matrix: {
    .label sy = 3
    .label t1 = $17
    .label t2 = $18
    .label t3 = $19
    .label t4 = $1a
    .label t5 = $1b
    .label t6 = $1c
    .label t7 = $1d
    .label t8 = $1e
    .label t9 = $1f
    // [134] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 -- vbsz1=vbsz2 
    lda.z sy
    sta.z t1
    // [135] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 -- vbsz1=vbsz2 
    lda.z sy
    sta.z t2
    // [136] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsxx 
    stx.z t3
    // [137] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsxx 
    stx.z t4
    // [138] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 -- vbsz1=vbsxx_plus_vbsz2 
    txa
    clc
    adc.z t2
    sta.z t5
    // [139] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsxx_minus_vbsz2 
    txa
    sec
    sbc.z t1
    sta.z t6
    // [140] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsxx_plus_vbsz2 
    txa
    clc
    adc.z t1
    sta.z t7
    // [141] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_minus_vbsxx 
    txa
    eor #$ff
    sec
    adc.z t2
    sta.z t8
    // [142] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_minus_vbsxx 
    txa
    eor #$ff
    sec
    adc.z sy
    sta.z t9
    // [143] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 -- vbsxx=vbsz1_plus_vbsxx 
    txa
    clc
    adc.z sy
    tax
    // [144] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t2#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldy.z t1
    lda COSH,y
    ldy.z t2
    clc
    adc COSH,y
    // [145] *((const signed byte*) rotation_matrix) ← (signed byte~) calculate_matrix::$10 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix
    // [146] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t2#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldy.z t1
    lda SINH,y
    ldy.z t2
    sec
    sbc SINH,y
    // [147] *((const signed byte*) rotation_matrix+(byte) 1) ← (signed byte~) calculate_matrix::$11 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+1
    // [148] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz1 
    ldy.z sy
    clc
    lda SINH,y
    adc SINH,y
    // [149] *((const signed byte*) rotation_matrix+(byte) 2) ← (signed byte~) calculate_matrix::$12 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+2
    // [150] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldy.z t3
    lda SINH,y
    ldy.z t4
    sec
    sbc SINH,y
    // [151] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t6
    clc
    adc COSQ,y
    // [152] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t5
    sec
    sbc COSQ,y
    // [153] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t8
    clc
    adc COSQ,y
    // [154] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t7
    sec
    sbc COSQ,y
    // [155] *((const signed byte*) rotation_matrix+(byte) 3) ← (signed byte~) calculate_matrix::$17 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+3
    // [156] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldy.z t3
    lda COSH,y
    ldy.z t4
    clc
    adc COSH,y
    // [157] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t5
    clc
    adc SINQ,y
    // [158] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t6
    sec
    sbc SINQ,y
    // [159] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t7
    sec
    sbc SINQ,y
    // [160] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t8
    sec
    sbc SINQ,y
    // [161] *((const signed byte*) rotation_matrix+(byte) 4) ← (signed byte~) calculate_matrix::$22 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+4
    // [162] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t10#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsxx 
    ldy.z t9
    lda SINH,y
    sec
    sbc SINH,x
    // [163] *((const signed byte*) rotation_matrix+(byte) 5) ← (signed byte~) calculate_matrix::$23 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+5
    // [164] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldy.z t4
    lda COSH,y
    ldy.z t3
    sec
    sbc COSH,y
    // [165] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t6
    clc
    adc SINQ,y
    // [166] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t5
    sec
    sbc SINQ,y
    // [167] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t8
    sec
    sbc SINQ,y
    // [168] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t7
    sec
    sbc SINQ,y
    // [169] *((const signed byte*) rotation_matrix+(byte) 6) ← (signed byte~) calculate_matrix::$28 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+6
    // [170] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldy.z t3
    lda SINH,y
    ldy.z t4
    clc
    adc SINH,y
    // [171] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t6
    clc
    adc COSQ,y
    // [172] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t5
    sec
    sbc COSQ,y
    // [173] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t7
    clc
    adc COSQ,y
    // [174] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t8
    sec
    sbc COSQ,y
    // [175] *((const signed byte*) rotation_matrix+(byte) 7) ← (signed byte~) calculate_matrix::$33 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+7
    // [176] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t10#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsxx 
    lda COSH,x
    ldy.z t9
    clc
    adc COSH,y
    // [177] *((const signed byte*) rotation_matrix+(byte) 8) ← (signed byte~) calculate_matrix::$34 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+8
    jmp __breturn
    // calculate_matrix::@return
  __breturn:
    // [178] return 
    rts
}
  // store_matrix
// Store the rotation matrix into the rotation routine rotate()
// After this each call to rotate() will rotate a point with the matrix
// Implemented in assembler to utilize seriously fast multiplication 
store_matrix: {
    // asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
    lda rotation_matrix+0
    sta rotate_matrix.A1+1
    eor #$ff
    sta rotate_matrix.A2+1
    lda rotation_matrix+1
    sta rotate_matrix.B1+1
    eor #$ff
    sta rotate_matrix.B2+1
    lda rotation_matrix+2
    sta rotate_matrix.C1+1
    eor #$ff
    sta rotate_matrix.C2+1
    lda rotation_matrix+3
    sta rotate_matrix.D1+1
    eor #$ff
    sta rotate_matrix.D2+1
    lda rotation_matrix+4
    sta rotate_matrix.E1+1
    eor #$ff
    sta rotate_matrix.E2+1
    lda rotation_matrix+5
    sta rotate_matrix.F1+1
    eor #$ff
    sta rotate_matrix.F2+1
    lda rotation_matrix+6
    sta rotate_matrix.G1+1
    eor #$ff
    sta rotate_matrix.G2+1
    lda rotation_matrix+7
    sta rotate_matrix.H1+1
    eor #$ff
    sta rotate_matrix.H2+1
    lda rotation_matrix+8
    sta rotate_matrix.I1+1
    eor #$ff
    sta rotate_matrix.I2+1
    jmp __breturn
    // store_matrix::@return
  __breturn:
    // [180] return 
    rts
}
  // rotate_matrix
// Rotate a 3D point (x,y,z) using the rotation matrix
// The rotation matrix is prepared by calling prepare_matrix() 
// The passed points must be in the interval [-$3f;$3f].
// Implemented in assembler to utilize seriously fast multiplication 
// rotate_matrix(signed byte register(X) x, signed byte zp($18) y, signed byte zp($19) z)
rotate_matrix: {
    .label y = $18
    .label z = $19
    // [181] *((const signed byte*) xr) ← (signed byte) rotate_matrix::x#0 -- _deref_pbsc1=vbsxx 
    txa
    sta xr
    // [182] *((const signed byte*) yr) ← (signed byte) rotate_matrix::y#0 -- _deref_pbsc1=vbsz1 
    lda.z y
    sta yr
    // [183] *((const signed byte*) zr) ← (signed byte) rotate_matrix::z#0 -- _deref_pbsc1=vbsz1 
    lda.z z
    sta zr
    // asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  }
    ldx zr
  C1:
    lda mulf_sqr1,x
    sec
  C2:
    sbc mulf_sqr2,x
    sta C3+1
  F1:
    lda mulf_sqr1,x
    sec
  F2:
    sbc mulf_sqr2,x
    sta F3+1
  I1:
    lda mulf_sqr1,x
    sec
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  I3:
    lda #0
    clc
  G1:
    adc mulf_sqr1,x
    sec
  G2:
    sbc mulf_sqr2,x
    clc
  H1:
    adc mulf_sqr1,y
    sec
  H2:
    sbc mulf_sqr2,y
    sta zr
    sta PP+1
  PP:
    lda PERSP_Z
    sta pp
    sta psp1
    eor #$ff
    sta psp2
  C3:
    lda #0
    clc
  A1:
    adc mulf_sqr1,x
    sec
  A2:
    sbc mulf_sqr2,x
    clc
  B1:
    adc mulf_sqr1,y
    sec
  B2:
    sbc mulf_sqr2,y
    sta xr
    sta XX+1
    clc
  F3:
    lda #0
    clc
  D1:
    adc mulf_sqr1,x
    sec
  D2:
    sbc mulf_sqr2,x
    clc
  E1:
    adc mulf_sqr1,y
    sec
  E2:
    sbc mulf_sqr2,y
    sta yr
    tay
    lda (psp1),y
    sec
    sbc (psp2),y
    sta yp
  XX:
    ldy #0
    lda (psp1),y
    sec
    sbc (psp2),y
    sta xp
    jmp __breturn
    // rotate_matrix::@return
  __breturn:
    // [185] return 
    rts
}
  // debug_print
debug_print: {
    .const print_schar_pos1_col = $25
    .const print_schar_pos2_row = 1
    .const print_schar_pos2_col = $25
    .const print_schar_pos3_row = 2
    .const print_schar_pos3_col = $25
    .const print_schar_pos4_row = 4
    .const print_schar_pos4_col = $1d
    .const print_schar_pos5_row = 4
    .const print_schar_pos5_col = $21
    .const print_schar_pos6_row = 4
    .const print_schar_pos6_col = $25
    .const print_schar_pos7_row = 5
    .const print_schar_pos7_col = $1d
    .const print_schar_pos8_row = 5
    .const print_schar_pos8_col = $21
    .const print_schar_pos9_row = 5
    .const print_schar_pos9_col = $25
    .const print_schar_pos10_row = 6
    .const print_schar_pos10_col = $1d
    .const print_schar_pos11_row = 6
    .const print_schar_pos11_col = $21
    .const print_schar_pos12_row = 6
    .const print_schar_pos12_col = $25
    .label at_line = SCREEN+$13*$28
    .label c = $19
    .label i = $17
    // [186] (signed byte) debug_print::print_schar_pos1_sb#0 ← (signed byte) sx#11 -- vbsaa=vbsz1 
    lda.z sx
    jmp print_schar_pos1
    // debug_print::print_schar_pos1
  print_schar_pos1:
    // [187] (signed byte) print_schar_at::b#4 ← (signed byte) debug_print::print_schar_pos1_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [188] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos1 to print_schar_at [phi:debug_print::print_schar_pos1->print_schar_at]
  print_schar_at_from_print_schar_pos1:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos1_col#0 [phi:debug_print::print_schar_pos1->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos1_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos1_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#4 [phi:debug_print::print_schar_pos1->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b2
    // debug_print::@2
  __b2:
    // [189] (signed byte) debug_print::print_schar_pos2_sb#0 ← (signed byte) sy#11 -- vbsaa=vbsz1 
    lda.z sy
    jmp print_schar_pos2
    // debug_print::print_schar_pos2
  print_schar_pos2:
    // [190] (signed byte) print_schar_at::b#5 ← (signed byte) debug_print::print_schar_pos2_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [191] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos2 to print_schar_at [phi:debug_print::print_schar_pos2->print_schar_at]
  print_schar_at_from_print_schar_pos2:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos2_row#0*(byte) $28+(const byte) debug_print::print_schar_pos2_col#0 [phi:debug_print::print_schar_pos2->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos2_row*$28+print_schar_pos2_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos2_row*$28+print_schar_pos2_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#5 [phi:debug_print::print_schar_pos2->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // [192] phi from debug_print::print_schar_pos2 to debug_print::print_schar_pos3 [phi:debug_print::print_schar_pos2->debug_print::print_schar_pos3]
  print_schar_pos3_from_print_schar_pos2:
    jmp print_schar_pos3
    // debug_print::print_schar_pos3
  print_schar_pos3:
    // [193] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos3 to print_schar_at [phi:debug_print::print_schar_pos3->print_schar_at]
  print_schar_at_from_print_schar_pos3:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos3_row#0*(byte) $28+(const byte) debug_print::print_schar_pos3_col#0 [phi:debug_print::print_schar_pos3->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos3_row*$28+print_schar_pos3_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos3_row*$28+print_schar_pos3_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (const signed byte) sz [phi:debug_print::print_schar_pos3->print_schar_at#1] -- vbsz1=vbsc1 
    lda #sz
    sta.z print_schar_at.b
    jsr print_schar_at
    jmp __b3
    // debug_print::@3
  __b3:
    // [194] (signed byte) debug_print::print_schar_pos4_sb#0 ← *((const signed byte*) rotation_matrix) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix
    jmp print_schar_pos4
    // debug_print::print_schar_pos4
  print_schar_pos4:
    // [195] (signed byte) print_schar_at::b#7 ← (signed byte) debug_print::print_schar_pos4_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [196] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos4 to print_schar_at [phi:debug_print::print_schar_pos4->print_schar_at]
  print_schar_at_from_print_schar_pos4:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos4_row#0*(byte) $28+(const byte) debug_print::print_schar_pos4_col#0 [phi:debug_print::print_schar_pos4->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos4_row*$28+print_schar_pos4_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos4_row*$28+print_schar_pos4_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#7 [phi:debug_print::print_schar_pos4->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b4
    // debug_print::@4
  __b4:
    // [197] (signed byte) debug_print::print_schar_pos5_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 1) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+1
    jmp print_schar_pos5
    // debug_print::print_schar_pos5
  print_schar_pos5:
    // [198] (signed byte) print_schar_at::b#8 ← (signed byte) debug_print::print_schar_pos5_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [199] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos5 to print_schar_at [phi:debug_print::print_schar_pos5->print_schar_at]
  print_schar_at_from_print_schar_pos5:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos5_row#0*(byte) $28+(const byte) debug_print::print_schar_pos5_col#0 [phi:debug_print::print_schar_pos5->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos5_row*$28+print_schar_pos5_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos5_row*$28+print_schar_pos5_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#8 [phi:debug_print::print_schar_pos5->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b5
    // debug_print::@5
  __b5:
    // [200] (signed byte) debug_print::print_schar_pos6_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 2) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+2
    jmp print_schar_pos6
    // debug_print::print_schar_pos6
  print_schar_pos6:
    // [201] (signed byte) print_schar_at::b#9 ← (signed byte) debug_print::print_schar_pos6_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [202] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos6 to print_schar_at [phi:debug_print::print_schar_pos6->print_schar_at]
  print_schar_at_from_print_schar_pos6:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos6_row#0*(byte) $28+(const byte) debug_print::print_schar_pos6_col#0 [phi:debug_print::print_schar_pos6->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos6_row*$28+print_schar_pos6_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos6_row*$28+print_schar_pos6_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#9 [phi:debug_print::print_schar_pos6->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b6
    // debug_print::@6
  __b6:
    // [203] (signed byte) debug_print::print_schar_pos7_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 3) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+3
    jmp print_schar_pos7
    // debug_print::print_schar_pos7
  print_schar_pos7:
    // [204] (signed byte) print_schar_at::b#10 ← (signed byte) debug_print::print_schar_pos7_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [205] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos7 to print_schar_at [phi:debug_print::print_schar_pos7->print_schar_at]
  print_schar_at_from_print_schar_pos7:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos7_row#0*(byte) $28+(const byte) debug_print::print_schar_pos7_col#0 [phi:debug_print::print_schar_pos7->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos7_row*$28+print_schar_pos7_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos7_row*$28+print_schar_pos7_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#10 [phi:debug_print::print_schar_pos7->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b7
    // debug_print::@7
  __b7:
    // [206] (signed byte) debug_print::print_schar_pos8_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 4) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+4
    jmp print_schar_pos8
    // debug_print::print_schar_pos8
  print_schar_pos8:
    // [207] (signed byte) print_schar_at::b#11 ← (signed byte) debug_print::print_schar_pos8_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [208] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos8 to print_schar_at [phi:debug_print::print_schar_pos8->print_schar_at]
  print_schar_at_from_print_schar_pos8:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos8_row#0*(byte) $28+(const byte) debug_print::print_schar_pos8_col#0 [phi:debug_print::print_schar_pos8->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos8_row*$28+print_schar_pos8_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos8_row*$28+print_schar_pos8_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#11 [phi:debug_print::print_schar_pos8->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b8
    // debug_print::@8
  __b8:
    // [209] (signed byte) debug_print::print_schar_pos9_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 5) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+5
    jmp print_schar_pos9
    // debug_print::print_schar_pos9
  print_schar_pos9:
    // [210] (signed byte) print_schar_at::b#12 ← (signed byte) debug_print::print_schar_pos9_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [211] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos9 to print_schar_at [phi:debug_print::print_schar_pos9->print_schar_at]
  print_schar_at_from_print_schar_pos9:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos9_row#0*(byte) $28+(const byte) debug_print::print_schar_pos9_col#0 [phi:debug_print::print_schar_pos9->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos9_row*$28+print_schar_pos9_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos9_row*$28+print_schar_pos9_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#12 [phi:debug_print::print_schar_pos9->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b9
    // debug_print::@9
  __b9:
    // [212] (signed byte) debug_print::print_schar_pos10_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 6) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+6
    jmp print_schar_pos10
    // debug_print::print_schar_pos10
  print_schar_pos10:
    // [213] (signed byte) print_schar_at::b#13 ← (signed byte) debug_print::print_schar_pos10_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [214] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos10 to print_schar_at [phi:debug_print::print_schar_pos10->print_schar_at]
  print_schar_at_from_print_schar_pos10:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos10_row#0*(byte) $28+(const byte) debug_print::print_schar_pos10_col#0 [phi:debug_print::print_schar_pos10->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos10_row*$28+print_schar_pos10_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos10_row*$28+print_schar_pos10_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#13 [phi:debug_print::print_schar_pos10->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b10
    // debug_print::@10
  __b10:
    // [215] (signed byte) debug_print::print_schar_pos11_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 7) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+7
    jmp print_schar_pos11
    // debug_print::print_schar_pos11
  print_schar_pos11:
    // [216] (signed byte) print_schar_at::b#14 ← (signed byte) debug_print::print_schar_pos11_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [217] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos11 to print_schar_at [phi:debug_print::print_schar_pos11->print_schar_at]
  print_schar_at_from_print_schar_pos11:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos11_row#0*(byte) $28+(const byte) debug_print::print_schar_pos11_col#0 [phi:debug_print::print_schar_pos11->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos11_row*$28+print_schar_pos11_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos11_row*$28+print_schar_pos11_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#14 [phi:debug_print::print_schar_pos11->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b11
    // debug_print::@11
  __b11:
    // [218] (signed byte) debug_print::print_schar_pos12_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 8) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+8
    jmp print_schar_pos12
    // debug_print::print_schar_pos12
  print_schar_pos12:
    // [219] (signed byte) print_schar_at::b#15 ← (signed byte) debug_print::print_schar_pos12_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [220] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos12 to print_schar_at [phi:debug_print::print_schar_pos12->print_schar_at]
  print_schar_at_from_print_schar_pos12:
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos12_row#0*(byte) $28+(const byte) debug_print::print_schar_pos12_col#0 [phi:debug_print::print_schar_pos12->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos12_row*$28+print_schar_pos12_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos12_row*$28+print_schar_pos12_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#15 [phi:debug_print::print_schar_pos12->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // [221] phi from debug_print::print_schar_pos12 to debug_print::@1 [phi:debug_print::print_schar_pos12->debug_print::@1]
  __b1_from_print_schar_pos12:
    // [221] phi (byte) debug_print::i#2 = (byte) 0 [phi:debug_print::print_schar_pos12->debug_print::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [221] phi (byte) debug_print::c#2 = (byte) 4 [phi:debug_print::print_schar_pos12->debug_print::@1#1] -- vbuz1=vbuc1 
    lda #4
    sta.z c
    jmp __b1
    // [221] phi from debug_print::@17 to debug_print::@1 [phi:debug_print::@17->debug_print::@1]
  __b1_from___b17:
    // [221] phi (byte) debug_print::i#2 = (byte) debug_print::i#1 [phi:debug_print::@17->debug_print::@1#0] -- register_copy 
    // [221] phi (byte) debug_print::c#2 = (byte) debug_print::c#1 [phi:debug_print::@17->debug_print::@1#1] -- register_copy 
    jmp __b1
    // debug_print::@1
  __b1:
    // [222] (byte*) print_schar_at::at#15 ← (const byte*) debug_print::at_line#0 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line
    sta.z print_schar_at.at
    lda #>at_line
    adc #0
    sta.z print_schar_at.at+1
    // [223] (signed byte) print_schar_at::b#16 ← *((const signed byte*) xrs + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xrs,y
    sta.z print_schar_at.b
    // [224] call print_schar_at 
    // [122] phi from debug_print::@1 to print_schar_at [phi:debug_print::@1->print_schar_at]
  print_schar_at_from___b1:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#15 [phi:debug_print::@1->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#16 [phi:debug_print::@1->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b12
    // debug_print::@12
  __b12:
    // [225] (byte*) print_schar_at::at#16 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*1
    sta.z print_schar_at.at
    lda #>at_line+$28*1
    adc #0
    sta.z print_schar_at.at+1
    // [226] (signed byte) print_schar_at::b#17 ← *((const signed byte*) yrs + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda yrs,y
    sta.z print_schar_at.b
    // [227] call print_schar_at 
    // [122] phi from debug_print::@12 to print_schar_at [phi:debug_print::@12->print_schar_at]
  print_schar_at_from___b12:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#16 [phi:debug_print::@12->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#17 [phi:debug_print::@12->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b13
    // debug_print::@13
  __b13:
    // [228] (byte*) print_schar_at::at#17 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*2
    sta.z print_schar_at.at
    lda #>at_line+$28*2
    adc #0
    sta.z print_schar_at.at+1
    // [229] (signed byte) print_schar_at::b#18 ← *((const signed byte*) zrs + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda zrs,y
    sta.z print_schar_at.b
    // [230] call print_schar_at 
    // [122] phi from debug_print::@13 to print_schar_at [phi:debug_print::@13->print_schar_at]
  print_schar_at_from___b13:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#17 [phi:debug_print::@13->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#18 [phi:debug_print::@13->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b14
    // debug_print::@14
  __b14:
    // [231] (byte*) print_schar_at::at#18 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 3 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*3
    sta.z print_schar_at.at
    lda #>at_line+$28*3
    adc #0
    sta.z print_schar_at.at+1
    // [232] (signed byte) print_schar_at::b#19 ← *((const signed byte*) pps + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda pps,y
    sta.z print_schar_at.b
    // [233] call print_schar_at 
    // [122] phi from debug_print::@14 to print_schar_at [phi:debug_print::@14->print_schar_at]
  print_schar_at_from___b14:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#18 [phi:debug_print::@14->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#19 [phi:debug_print::@14->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b15
    // debug_print::@15
  __b15:
    // [234] (byte*) print_schar_at::at#19 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 4 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*4
    sta.z print_schar_at.at
    lda #>at_line+$28*4
    adc #0
    sta.z print_schar_at.at+1
    // [235] (signed byte) print_schar_at::b#20 ← *((const signed byte*) xps + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xps,y
    sta.z print_schar_at.b
    // [236] call print_schar_at 
    // [122] phi from debug_print::@15 to print_schar_at [phi:debug_print::@15->print_schar_at]
  print_schar_at_from___b15:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#19 [phi:debug_print::@15->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#20 [phi:debug_print::@15->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b16
    // debug_print::@16
  __b16:
    // [237] (byte*) print_schar_at::at#20 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 5 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*5
    sta.z print_schar_at.at
    lda #>at_line+$28*5
    adc #0
    sta.z print_schar_at.at+1
    // [238] (signed byte) print_schar_at::b#21 ← *((const signed byte*) yps + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda yps,y
    sta.z print_schar_at.b
    // [239] call print_schar_at 
    // [122] phi from debug_print::@16 to print_schar_at [phi:debug_print::@16->print_schar_at]
  print_schar_at_from___b16:
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#20 [phi:debug_print::@16->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#21 [phi:debug_print::@16->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    jmp __b17
    // debug_print::@17
  __b17:
    // [240] (byte) debug_print::c#1 ← (byte) debug_print::c#2 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c
    axs #-[4]
    stx.z c
    // [241] (byte) debug_print::i#1 ← ++ (byte) debug_print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [242] if((byte) debug_print::i#1!=(byte) 8) goto debug_print::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b1_from___b17
    jmp __breturn
    // debug_print::@return
  __breturn:
    // [243] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 7
    // [245] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [245] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [246] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [247] return 
    rts
    // memset::@2
  __b2:
    // [248] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [249] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [245] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [245] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_char_at
// Print a single char
// print_char_at(byte register(X) ch, byte* zp(5) at)
print_char_at: {
    .label at = 5
    // [251] *((byte*) print_char_at::at#4) ← (byte) print_char_at::ch#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (at),y
    jmp __breturn
    // print_char_at::@return
  __breturn:
    // [252] return 
    rts
}
  // print_uchar_at
// Print a char as HEX at a specific position
// print_uchar_at(byte zp($18) b, byte* zp(5) at)
print_uchar_at: {
    .label b = $18
    .label at = 5
    // [253] (byte~) print_uchar_at::$0 ← (byte) print_uchar_at::b#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // [254] (byte) print_char_at::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$0) -- vbuxx=pbuc1_derefidx_vbuaa 
    tay
    ldx print_hextab,y
    // [255] (byte*) print_char_at::at#2 ← (byte*) print_uchar_at::at#0
    // [256] call print_char_at 
  // Table of hexadecimal digits
    // [250] phi from print_uchar_at to print_char_at [phi:print_uchar_at->print_char_at]
  print_char_at_from_print_uchar_at:
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#2 [phi:print_uchar_at->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) print_char_at::ch#2 [phi:print_uchar_at->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp __b1
    // print_uchar_at::@1
  __b1:
    // [257] (byte~) print_uchar_at::$2 ← (byte) print_uchar_at::b#0 & (byte) $f -- vbuyy=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    tay
    // [258] (byte*) print_char_at::at#3 ← (byte*) print_uchar_at::at#0 + (byte) 1 -- pbuz1=pbuz1_plus_1 
    inc.z print_char_at.at
    bne !+
    inc.z print_char_at.at+1
  !:
    // [259] (byte) print_char_at::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$2) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx print_hextab,y
    // [260] call print_char_at 
    // [250] phi from print_uchar_at::@1 to print_char_at [phi:print_uchar_at::@1->print_char_at]
  print_char_at_from___b1:
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#3 [phi:print_uchar_at::@1->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) print_char_at::ch#3 [phi:print_uchar_at::@1->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp __breturn
    // print_uchar_at::@return
  __breturn:
    // [261] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // Positions to rotate
  xs: .byte -$34, -$34, -$34, 0, 0, $34, $34, $34
  ys: .byte -$34, 0, $34, -$34, $34, -$34, 0, $34
  zs: .byte $34, $34, $34, $34, $34, $34, $34, $34
  // Rotated positions
  xrs: .fill 8, 0
  yrs: .fill 8, 0
  zrs: .fill 8, 0
  // Perspective factors (from zrs)
  pps: .fill 8, 0
  // Rotated positions with perspective
  xps: .fill 8, 0
  yps: .fill 8, 0
  // The rotation matrix
  rotation_matrix: .fill 9, 0
  // mulf_sqr tables will contain f(x)=int(x*x) and g(x) = f(1-x).
  // f(x) = >(( x * x ))
  .align $100
mulf_sqr1:
.for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }

  // g(x) =  >((( 1 - x ) * ( 1 - x )))
  .align $100
mulf_sqr2:
.for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }

  // Perspective multiplication table containing (d/(z0-z)[z] for each z-value   
  .align $100
PERSP_Z:
{
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}

  // Sine and Cosine Tables   
  // Angles: $00=0, $80=PI,$100=2*PI
  // Half Sine/Cosine: signed fixed [-$20;20]
  .align $40
SINH:
{
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

  // Quarter Sine/Cosine: signed fixed [-$10,$10]
  .align $40
SINQ:
{
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

.pc = $3000 "SPRITE"
// A single sprite
SPRITE:
.var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b1
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b8
Removing instruction jmp __b6
Removing instruction jmp __b9
Removing instruction jmp __b7
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp print_schar_pos1
Removing instruction jmp __b2
Removing instruction jmp print_schar_pos2
Removing instruction jmp print_schar_pos3
Removing instruction jmp __b3
Removing instruction jmp print_schar_pos4
Removing instruction jmp __b4
Removing instruction jmp print_schar_pos5
Removing instruction jmp __b5
Removing instruction jmp print_schar_pos6
Removing instruction jmp __b6
Removing instruction jmp print_schar_pos7
Removing instruction jmp __b7
Removing instruction jmp print_schar_pos8
Removing instruction jmp __b8
Removing instruction jmp print_schar_pos9
Removing instruction jmp __b9
Removing instruction jmp print_schar_pos10
Removing instruction jmp __b10
Removing instruction jmp print_schar_pos11
Removing instruction jmp __b11
Removing instruction jmp print_schar_pos12
Removing instruction jmp __b1
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy.z i
Removing instruction ldy.z i
Removing instruction ldy.z i
Removing instruction ldy.z i
Removing instruction ldy.z i
Removing instruction ldy.z i
Removing instruction ldy.z i
Replacing instruction lda.z i with TYA
Removing instruction ldy #0
Replacing instruction ldx zr with TAX
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b6_from___b9 with __b6
Replacing label __b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b17 with __b1
Removing instruction __b2_from___b1:
Removing instruction __b1_from___b1:
Removing instruction __b4_from_debug_print_init:
Removing instruction print_str_at_from___b4:
Removing instruction __b5_from___b4:
Removing instruction print_str_at_from___b5:
Removing instruction __b6_from___b5:
Removing instruction print_str_at_from___b6:
Removing instruction __b7_from___b6:
Removing instruction print_str_at_from___b7:
Removing instruction __b8_from___b7:
Removing instruction print_str_at_from___b8:
Removing instruction __b9_from___b8:
Removing instruction print_str_at_from___b9:
Removing instruction __b10_from___b9:
Removing instruction print_str_at_from___b10:
Removing instruction __b11_from___b10:
Removing instruction print_str_at_from___b11:
Removing instruction __b12_from___b11:
Removing instruction print_str_at_from___b12:
Removing instruction __b13_from___b12:
Removing instruction print_str_at_from___b13:
Removing instruction __b14_from___b13:
Removing instruction print_str_at_from___b14:
Removing instruction __b15_from___b14:
Removing instruction print_str_at_from___b15:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b2:
Removing instruction __b1:
Removing instruction __b8_from___b5:
Removing instruction __b6_from___b9:
Removing instruction __b1_from_print_str_at:
Removing instruction __b1_from___b2:
Removing instruction print_char_at_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_char_at_from___b1:
Removing instruction print_schar_pos3_from_print_schar_pos2:
Removing instruction print_schar_at_from_print_schar_pos3:
Removing instruction __b1_from___b17:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1:
Removing instruction debug_print_init_from___b1:
Removing instruction __b2:
Removing instruction anim_from___b2:
Removing instruction __breturn:
Removing instruction __b1_from_sprites_init:
Removing instruction __breturn:
Removing instruction print_cls_from_debug_print_init:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b1_from___b15:
Removing instruction print_schar_at_from___b1:
Removing instruction __b16:
Removing instruction print_schar_at_from___b16:
Removing instruction __b17:
Removing instruction print_schar_at_from___b17:
Removing instruction __b2_from___b17:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_anim:
Removing instruction __b5:
Removing instruction __b8:
Removing instruction __b6_from___b8:
Removing instruction __b9:
Removing instruction __b7:
Removing instruction __b10:
Removing instruction __b1_from___b10:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_schar_pos1:
Removing instruction print_schar_at_from_print_schar_pos1:
Removing instruction __b2:
Removing instruction print_schar_pos2:
Removing instruction print_schar_at_from_print_schar_pos2:
Removing instruction print_schar_pos3:
Removing instruction __b3:
Removing instruction print_schar_pos4:
Removing instruction print_schar_at_from_print_schar_pos4:
Removing instruction __b4:
Removing instruction print_schar_pos5:
Removing instruction print_schar_at_from_print_schar_pos5:
Removing instruction __b5:
Removing instruction print_schar_pos6:
Removing instruction print_schar_at_from_print_schar_pos6:
Removing instruction __b6:
Removing instruction print_schar_pos7:
Removing instruction print_schar_at_from_print_schar_pos7:
Removing instruction __b7:
Removing instruction print_schar_pos8:
Removing instruction print_schar_at_from_print_schar_pos8:
Removing instruction __b8:
Removing instruction print_schar_pos9:
Removing instruction print_schar_at_from_print_schar_pos9:
Removing instruction __b9:
Removing instruction print_schar_pos10:
Removing instruction print_schar_at_from_print_schar_pos10:
Removing instruction __b10:
Removing instruction print_schar_pos11:
Removing instruction print_schar_at_from_print_schar_pos11:
Removing instruction __b11:
Removing instruction print_schar_pos12:
Removing instruction print_schar_at_from_print_schar_pos12:
Removing instruction __b1_from_print_schar_pos12:
Removing instruction print_schar_at_from___b1:
Removing instruction __b12:
Removing instruction print_schar_at_from___b12:
Removing instruction __b13:
Removing instruction print_schar_at_from___b13:
Removing instruction __b14:
Removing instruction print_schar_at_from___b14:
Removing instruction __b15:
Removing instruction print_schar_at_from___b15:
Removing instruction __b16:
Removing instruction print_schar_at_from___b16:
Removing instruction __b17:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction print_char_at_from_print_uchar_at:
Removing instruction __b1:
Removing instruction print_char_at_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b6
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Fixing long branch [322] bne __b2 to beq
Fixing long branch [331] bne __b1 to beq
Fixing long branch [970] bne __b1 to beq

FINAL SYMBOL TABLE
(const signed byte*) COSH = (const signed byte*) SINH+(byte) $40
(const signed byte*) COSQ = (const signed byte*) SINQ+(byte) $40
(const nomodify byte) GREEN = (byte) 5
(const nomodify byte) LIGHT_BLUE = (byte) $e
(const nomodify byte) LIGHT_GREY = (byte) $f
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = (byte) $20
(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER = (byte) $12
(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = (byte) $15
(const signed byte*) PERSP_Z[(number) $100]  = kickasm {{ {
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte*) SCREEN = (byte*) 1024
(const signed byte*) SINH[(number) $140]  = kickasm {{ {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
(const signed byte*) SINQ[(number) $140]  = kickasm {{ {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
(const byte*) SPRITE[]  = kickasm {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
(const nomodify byte*) SPRITES_COLOR = (byte*) 53287
(const nomodify byte*) SPRITES_XPOS = (byte*) 53248
(const nomodify byte*) SPRITES_YPOS = (byte*) 53249
(const nomodify struct MOS6569_VICII*) VICII = (struct MOS6569_VICII*) 53248
(void()) anim()
(byte~) anim::$10 reg byte a 2002.0
(byte~) anim::$9 reg byte a 2002.0
(label) anim::@1
(label) anim::@10
(label) anim::@2
(label) anim::@3
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@7
(label) anim::@8
(label) anim::@9
(byte) anim::i
(byte) anim::i#1 i zp[1]:4 1501.5
(byte) anim::i#2 i zp[1]:4 706.5882352941177
(byte) anim::i2
(byte) anim::i2#0 reg byte x 750.75
(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
(signed byte~) calculate_matrix::$10 reg byte a 2002.0
(signed byte~) calculate_matrix::$11 reg byte a 2002.0
(signed byte~) calculate_matrix::$12 reg byte a 2002.0
(signed byte~) calculate_matrix::$13 reg byte a 2002.0
(signed byte~) calculate_matrix::$14 reg byte a 2002.0
(signed byte~) calculate_matrix::$15 reg byte a 2002.0
(signed byte~) calculate_matrix::$16 reg byte a 2002.0
(signed byte~) calculate_matrix::$17 reg byte a 2002.0
(signed byte~) calculate_matrix::$18 reg byte a 2002.0
(signed byte~) calculate_matrix::$19 reg byte a 2002.0
(signed byte~) calculate_matrix::$20 reg byte a 2002.0
(signed byte~) calculate_matrix::$21 reg byte a 2002.0
(signed byte~) calculate_matrix::$22 reg byte a 2002.0
(signed byte~) calculate_matrix::$23 reg byte a 2002.0
(signed byte~) calculate_matrix::$24 reg byte a 2002.0
(signed byte~) calculate_matrix::$25 reg byte a 2002.0
(signed byte~) calculate_matrix::$26 reg byte a 2002.0
(signed byte~) calculate_matrix::$27 reg byte a 2002.0
(signed byte~) calculate_matrix::$28 reg byte a 2002.0
(signed byte~) calculate_matrix::$29 reg byte a 2002.0
(signed byte~) calculate_matrix::$30 reg byte a 2002.0
(signed byte~) calculate_matrix::$31 reg byte a 2002.0
(signed byte~) calculate_matrix::$32 reg byte a 2002.0
(signed byte~) calculate_matrix::$33 reg byte a 2002.0
(signed byte~) calculate_matrix::$34 reg byte a 2002.0
(label) calculate_matrix::@return
(signed byte) calculate_matrix::sx
(signed byte) calculate_matrix::sx#0 reg byte x 737.1818181818182
(signed byte) calculate_matrix::sy
(signed byte) calculate_matrix::sy#0 sy zp[1]:3 407.1333333333334
(signed byte) calculate_matrix::sz
(signed byte) calculate_matrix::t1
(signed byte) calculate_matrix::t1#0 t1 zp[1]:23 417.08333333333337
(signed byte) calculate_matrix::t10
(signed byte) calculate_matrix::t10#0 reg byte x 91.0
(signed byte) calculate_matrix::t2
(signed byte) calculate_matrix::t2#0 t2 zp[1]:24 455.0
(signed byte) calculate_matrix::t3
(signed byte) calculate_matrix::t3#0 t3 zp[1]:25 147.2058823529412
(signed byte) calculate_matrix::t4
(signed byte) calculate_matrix::t4#0 t4 zp[1]:26 151.66666666666666
(signed byte) calculate_matrix::t5
(signed byte) calculate_matrix::t5#0 t5 zp[1]:27 147.2058823529412
(signed byte) calculate_matrix::t6
(signed byte) calculate_matrix::t6#0 t6 zp[1]:28 156.40625
(signed byte) calculate_matrix::t7
(signed byte) calculate_matrix::t7#0 t7 zp[1]:29 151.66666666666666
(signed byte) calculate_matrix::t8
(signed byte) calculate_matrix::t8#0 t8 zp[1]:30 151.66666666666666
(signed byte) calculate_matrix::t9
(signed byte) calculate_matrix::t9#0 t9 zp[1]:31 88.32352941176471
(void()) debug_print()
(label) debug_print::@1
(label) debug_print::@10
(label) debug_print::@11
(label) debug_print::@12
(label) debug_print::@13
(label) debug_print::@14
(label) debug_print::@15
(label) debug_print::@16
(label) debug_print::@17
(label) debug_print::@2
(label) debug_print::@3
(label) debug_print::@4
(label) debug_print::@5
(label) debug_print::@6
(label) debug_print::@7
(label) debug_print::@8
(label) debug_print::@9
(label) debug_print::@return
(byte*) debug_print::at_line
(const byte*) debug_print::at_line#0 at_line = (const byte*) SCREEN+(word)(number) $13*(number) $28
(byte) debug_print::c
(byte) debug_print::c#1 c zp[1]:25 66667.33333333333
(byte) debug_print::c#2 c zp[1]:25 42105.68421052631
(byte) debug_print::i
(byte) debug_print::i#1 i zp[1]:23 150001.5
(byte) debug_print::i#2 i zp[1]:23 40000.4
(label) debug_print::print_schar_pos1
(label) debug_print::print_schar_pos10
(byte) debug_print::print_schar_pos10_col
(const byte) debug_print::print_schar_pos10_col#0 print_schar_pos10_col = (byte) $1d
(byte) debug_print::print_schar_pos10_row
(const byte) debug_print::print_schar_pos10_row#0 print_schar_pos10_row = (byte) 6
(signed byte) debug_print::print_schar_pos10_sb
(signed byte) debug_print::print_schar_pos10_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos11
(byte) debug_print::print_schar_pos11_col
(const byte) debug_print::print_schar_pos11_col#0 print_schar_pos11_col = (byte) $21
(byte) debug_print::print_schar_pos11_row
(const byte) debug_print::print_schar_pos11_row#0 print_schar_pos11_row = (byte) 6
(signed byte) debug_print::print_schar_pos11_sb
(signed byte) debug_print::print_schar_pos11_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos12
(byte) debug_print::print_schar_pos12_col
(const byte) debug_print::print_schar_pos12_col#0 print_schar_pos12_col = (byte) $25
(byte) debug_print::print_schar_pos12_row
(const byte) debug_print::print_schar_pos12_row#0 print_schar_pos12_row = (byte) 6
(signed byte) debug_print::print_schar_pos12_sb
(signed byte) debug_print::print_schar_pos12_sb#0 reg byte a 2002.0
(byte) debug_print::print_schar_pos1_col
(const byte) debug_print::print_schar_pos1_col#0 print_schar_pos1_col = (byte) $25
(byte) debug_print::print_schar_pos1_row
(signed byte) debug_print::print_schar_pos1_sb
(signed byte) debug_print::print_schar_pos1_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos2
(byte) debug_print::print_schar_pos2_col
(const byte) debug_print::print_schar_pos2_col#0 print_schar_pos2_col = (byte) $25
(byte) debug_print::print_schar_pos2_row
(const byte) debug_print::print_schar_pos2_row#0 print_schar_pos2_row = (byte) 1
(signed byte) debug_print::print_schar_pos2_sb
(signed byte) debug_print::print_schar_pos2_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos3
(byte) debug_print::print_schar_pos3_col
(const byte) debug_print::print_schar_pos3_col#0 print_schar_pos3_col = (byte) $25
(byte) debug_print::print_schar_pos3_row
(const byte) debug_print::print_schar_pos3_row#0 print_schar_pos3_row = (byte) 2
(signed byte) debug_print::print_schar_pos3_sb
(label) debug_print::print_schar_pos4
(byte) debug_print::print_schar_pos4_col
(const byte) debug_print::print_schar_pos4_col#0 print_schar_pos4_col = (byte) $1d
(byte) debug_print::print_schar_pos4_row
(const byte) debug_print::print_schar_pos4_row#0 print_schar_pos4_row = (byte) 4
(signed byte) debug_print::print_schar_pos4_sb
(signed byte) debug_print::print_schar_pos4_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos5
(byte) debug_print::print_schar_pos5_col
(const byte) debug_print::print_schar_pos5_col#0 print_schar_pos5_col = (byte) $21
(byte) debug_print::print_schar_pos5_row
(const byte) debug_print::print_schar_pos5_row#0 print_schar_pos5_row = (byte) 4
(signed byte) debug_print::print_schar_pos5_sb
(signed byte) debug_print::print_schar_pos5_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos6
(byte) debug_print::print_schar_pos6_col
(const byte) debug_print::print_schar_pos6_col#0 print_schar_pos6_col = (byte) $25
(byte) debug_print::print_schar_pos6_row
(const byte) debug_print::print_schar_pos6_row#0 print_schar_pos6_row = (byte) 4
(signed byte) debug_print::print_schar_pos6_sb
(signed byte) debug_print::print_schar_pos6_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos7
(byte) debug_print::print_schar_pos7_col
(const byte) debug_print::print_schar_pos7_col#0 print_schar_pos7_col = (byte) $1d
(byte) debug_print::print_schar_pos7_row
(const byte) debug_print::print_schar_pos7_row#0 print_schar_pos7_row = (byte) 5
(signed byte) debug_print::print_schar_pos7_sb
(signed byte) debug_print::print_schar_pos7_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos8
(byte) debug_print::print_schar_pos8_col
(const byte) debug_print::print_schar_pos8_col#0 print_schar_pos8_col = (byte) $21
(byte) debug_print::print_schar_pos8_row
(const byte) debug_print::print_schar_pos8_row#0 print_schar_pos8_row = (byte) 5
(signed byte) debug_print::print_schar_pos8_sb
(signed byte) debug_print::print_schar_pos8_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos9
(byte) debug_print::print_schar_pos9_col
(const byte) debug_print::print_schar_pos9_col#0 print_schar_pos9_col = (byte) $25
(byte) debug_print::print_schar_pos9_row
(const byte) debug_print::print_schar_pos9_row#0 print_schar_pos9_row = (byte) 5
(signed byte) debug_print::print_schar_pos9_sb
(signed byte) debug_print::print_schar_pos9_sb#0 reg byte a 2002.0
(void()) debug_print_init()
(byte*~) debug_print_init::$41 zp[2]:5 2002.0
(byte*~) debug_print_init::$44 zp[2]:7 2002.0
(byte*~) debug_print_init::$47 zp[2]:9 2002.0
(byte*~) debug_print_init::$50 zp[2]:11 2002.0
(byte*~) debug_print_init::$53 zp[2]:13 2002.0
(byte*~) debug_print_init::$56 zp[2]:15 2002.0
(byte*~) debug_print_init::$59 zp[2]:17 2002.0
(byte*~) debug_print_init::$62 zp[2]:19 2002.0
(byte*~) debug_print_init::$65 zp[2]:21 2002.0
(label) debug_print_init::@1
(label) debug_print_init::@10
(label) debug_print_init::@11
(label) debug_print_init::@12
(label) debug_print_init::@13
(label) debug_print_init::@14
(label) debug_print_init::@15
(label) debug_print_init::@16
(label) debug_print_init::@17
(label) debug_print_init::@2
(label) debug_print_init::@3
(label) debug_print_init::@4
(label) debug_print_init::@5
(label) debug_print_init::@6
(label) debug_print_init::@7
(label) debug_print_init::@8
(label) debug_print_init::@9
(label) debug_print_init::@return
(const byte*) debug_print_init::COLS = (byte*) 55296
(byte*) debug_print_init::at_cols
(const byte*) debug_print_init::at_cols#0 at_cols = (const byte*) debug_print_init::COLS+(word)(number) $10*(number) $28
(byte*) debug_print_init::at_line
(const byte*) debug_print_init::at_line#0 at_line = (const byte*) SCREEN+(word)(number) $10*(number) $28
(byte) debug_print_init::c
(byte) debug_print_init::c#1 c zp[1]:2 67.33333333333333
(byte) debug_print_init::c#2 c zp[1]:2 297.3125
(byte) debug_print_init::col
(byte) debug_print_init::col#0 reg byte x 556.111111111111
(byte) debug_print_init::i
(byte) debug_print_init::i#1 i zp[1]:3 151.5
(byte) debug_print_init::i#2 i zp[1]:3 45.63636363636364
(byte) debug_print_init::j
(byte) debug_print_init::j#1 reg byte y 1501.5
(byte) debug_print_init::j#2 reg byte y 550.5500000000001
(const byte*) debug_print_init::str[(byte) 3]  = (byte*) "sx"
(const byte*) debug_print_init::str1[(byte) 3]  = (byte*) "sy"
(const byte*) debug_print_init::str10[(byte) 3]  = (byte*) "xp"
(const byte*) debug_print_init::str11[(byte) 3]  = (byte*) "yp"
(const byte*) debug_print_init::str2[(byte) 3]  = (byte*) "sz"
(const byte*) debug_print_init::str3[(byte) 2]  = (byte*) "x"
(const byte*) debug_print_init::str4[(byte) 2]  = (byte*) "y"
(const byte*) debug_print_init::str5[(byte) 2]  = (byte*) "z"
(const byte*) debug_print_init::str6[(byte) 3]  = (byte*) "xr"
(const byte*) debug_print_init::str7[(byte) 3]  = (byte*) "yr"
(const byte*) debug_print_init::str8[(byte) 3]  = (byte*) "zr"
(const byte*) debug_print_init::str9[(byte) 3]  = (byte*) "pp"
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:7 20002.0
(byte*) memset::dst#2 dst zp[2]:7 13334.666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_screen#0
(const byte*) mulf_sqr1[(number) $200]  = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }
 }}
(const byte*) mulf_sqr2[(number) $200]  = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }
 }}
(const signed byte*) pp = (signed byte*) 243
(const signed byte*) pps[(number) 8]  = { fill( 8, 0) }
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(label) print_char_at::@return
(byte*) print_char_at::at
(byte*) print_char_at::at#0 at zp[2]:5 2000002.0
(byte*) print_char_at::at#1 at zp[2]:5 2000002.0
(byte*) print_char_at::at#2 at zp[2]:5 2.0000002E7
(byte*) print_char_at::at#3 at zp[2]:5 1.0000001E7
(byte*) print_char_at::at#4 at zp[2]:5 1.22000005E8
(byte) print_char_at::ch
(byte) print_char_at::ch#2 reg byte x 1.0000001E7
(byte) print_char_at::ch#3 reg byte x 2.0000002E7
(byte) print_char_at::ch#4 reg byte x 1.20000003E8
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(void()) print_schar_at((signed byte) print_schar_at::b , (byte*) print_schar_at::at)
(label) print_schar_at::@1
(label) print_schar_at::@2
(label) print_schar_at::@3
(label) print_schar_at::@4
(label) print_schar_at::@return
(byte*) print_schar_at::at
(byte*) print_schar_at::at#0 at zp[2]:5 101.0
(byte*) print_schar_at::at#1 at zp[2]:5 101.0
(byte*) print_schar_at::at#15 at zp[2]:5 100001.0
(byte*) print_schar_at::at#16 at zp[2]:5 100001.0
(byte*) print_schar_at::at#17 at zp[2]:5 100001.0
(byte*) print_schar_at::at#18 at zp[2]:5 100001.0
(byte*) print_schar_at::at#19 at zp[2]:5 100001.0
(byte*) print_schar_at::at#2 at zp[2]:5 101.0
(byte*) print_schar_at::at#20 at zp[2]:5 100001.0
(byte*) print_schar_at::at#21 at zp[2]:5 450039.0
(signed byte) print_schar_at::b
(signed byte) print_schar_at::b#0 b zp[1]:24 2000002.0
(signed byte) print_schar_at::b#1 b zp[1]:24 202.0
(signed byte) print_schar_at::b#10 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#11 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#12 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#13 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#14 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#15 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#16 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#17 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#18 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#19 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#2 b zp[1]:24 202.0
(signed byte) print_schar_at::b#20 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#21 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#22 b zp[1]:24 601887.1666666666
(signed byte) print_schar_at::b#24 b zp[1]:24 1000001.0
(signed byte) print_schar_at::b#3 b zp[1]:24 202.0
(signed byte) print_schar_at::b#4 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#5 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#7 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#8 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#9 b zp[1]:24 2002.0
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::at#0 at zp[2]:7 1001.0
(byte*) print_str_at::at#13 at zp[2]:7 1034.6666666666667
(byte*) print_str_at::at#15 at zp[2]:7 101.0
(byte*) print_str_at::str
(byte*) print_str_at::str#0 str zp[2]:5 2002.0
(byte*) print_str_at::str#13 str zp[2]:5 1026.25
(byte*) print_str_at::str#15 str zp[2]:5 101.0
(void()) print_uchar_at((byte) print_uchar_at::b , (byte*) print_uchar_at::at)
(byte~) print_uchar_at::$0 reg byte a 2.0000002E7
(byte~) print_uchar_at::$2 reg byte y 1.0000001E7
(label) print_uchar_at::@1
(label) print_uchar_at::@return
(byte*) print_uchar_at::at
(byte*) print_uchar_at::at#0 at zp[2]:5 3000000.428571428
(byte) print_uchar_at::b
(byte) print_uchar_at::b#0 b zp[1]:24 4200000.6
(const word*) psp1 = (word*) 246
(const word*) psp2 = (word*) 248
(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
(label) rotate_matrix::@return
(signed byte) rotate_matrix::x
(signed byte) rotate_matrix::x#0 reg byte x 3667.333333333333
(signed byte) rotate_matrix::y
(signed byte) rotate_matrix::y#0 y zp[1]:24 3667.333333333333
(signed byte) rotate_matrix::z
(signed byte) rotate_matrix::z#0 z zp[1]:25 3667.333333333333
(const signed byte*) rotation_matrix[(number) 9]  = { fill( 9, 0) }
(void()) sprites_init()
(label) sprites_init::@1
(label) sprites_init::@return
(const byte*) sprites_init::SCREEN = (byte*) 1024
(byte) sprites_init::i
(byte) sprites_init::i#1 reg byte x 151.5
(byte) sprites_init::i#2 reg byte x 134.66666666666666
(byte*) sprites_init::sprites_ptr
(const byte*) sprites_init::sprites_ptr#0 sprites_ptr = (const byte*) sprites_init::SCREEN+(word) $3f8
(void()) store_matrix()
(label) store_matrix::@return
(signed byte) sx
(signed byte) sx#11 sx zp[1]:2 14.488888888888889
(signed byte) sx#2 sx zp[1]:2 101.0
(signed byte) sy
(signed byte) sy#11 sy zp[1]:3 14.32967032967033
(signed byte) sy#2 sy zp[1]:3 202.0
(const signed byte) sz = (signed byte) 0
(const signed byte*) xp = (signed byte*) 244
(const signed byte*) xps[(number) 8]  = { fill( 8, 0) }
(const signed byte*) xr = (signed byte*) 240
(const signed byte*) xrs[(number) 8]  = { fill( 8, 0) }
(const signed byte*) xs[(number) 8]  = { (signed byte) -$34, (signed byte) -$34, (signed byte) -$34, (signed byte) 0, (signed byte) 0, (signed byte) $34, (signed byte) $34, (signed byte) $34 }
(const signed byte*) yp = (signed byte*) 245
(const signed byte*) yps[(number) 8]  = { fill( 8, 0) }
(const signed byte*) yr = (signed byte*) 241
(const signed byte*) yrs[(number) 8]  = { fill( 8, 0) }
(const signed byte*) ys[(number) 8]  = { (signed byte) -$34, (signed byte) 0, (signed byte) $34, (signed byte) -$34, (signed byte) $34, (signed byte) -$34, (signed byte) 0, (signed byte) $34 }
(const signed byte*) zr = (signed byte*) 242
(const signed byte*) zrs[(number) 8]  = { fill( 8, 0) }
(const signed byte*) zs[(number) 8]  = { (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34 }

reg byte x [ sprites_init::i#2 sprites_init::i#1 ]
reg byte y [ debug_print_init::j#2 debug_print_init::j#1 ]
zp[1]:2 [ sx#11 sx#2 debug_print_init::c#2 debug_print_init::c#1 ]
zp[1]:3 [ sy#11 sy#2 calculate_matrix::sy#0 debug_print_init::i#2 debug_print_init::i#1 ]
zp[1]:4 [ anim::i#2 anim::i#1 ]
reg byte x [ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ]
reg byte x [ debug_print_init::col#0 ]
zp[2]:5 [ debug_print_init::$41 print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 print_uchar_at::at#0 print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ]
zp[2]:7 [ debug_print_init::$44 memset::dst#2 memset::dst#1 print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ]
zp[2]:9 [ debug_print_init::$47 ]
zp[2]:11 [ debug_print_init::$50 ]
zp[2]:13 [ debug_print_init::$53 ]
zp[2]:15 [ debug_print_init::$56 ]
zp[2]:17 [ debug_print_init::$59 ]
zp[2]:19 [ debug_print_init::$62 ]
zp[2]:21 [ debug_print_init::$65 ]
reg byte x [ calculate_matrix::sx#0 ]
reg byte x [ rotate_matrix::x#0 ]
reg byte x [ anim::i2#0 ]
reg byte a [ anim::$9 ]
reg byte a [ anim::$10 ]
zp[1]:23 [ calculate_matrix::t1#0 debug_print::i#2 debug_print::i#1 ]
zp[1]:24 [ calculate_matrix::t2#0 rotate_matrix::y#0 print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 print_uchar_at::b#0 ]
zp[1]:25 [ calculate_matrix::t3#0 rotate_matrix::z#0 debug_print::c#2 debug_print::c#1 ]
zp[1]:26 [ calculate_matrix::t4#0 ]
zp[1]:27 [ calculate_matrix::t5#0 ]
zp[1]:28 [ calculate_matrix::t6#0 ]
zp[1]:29 [ calculate_matrix::t7#0 ]
zp[1]:30 [ calculate_matrix::t8#0 ]
zp[1]:31 [ calculate_matrix::t9#0 ]
reg byte x [ calculate_matrix::t10#0 ]
reg byte a [ calculate_matrix::$10 ]
reg byte a [ calculate_matrix::$11 ]
reg byte a [ calculate_matrix::$12 ]
reg byte a [ calculate_matrix::$13 ]
reg byte a [ calculate_matrix::$14 ]
reg byte a [ calculate_matrix::$15 ]
reg byte a [ calculate_matrix::$16 ]
reg byte a [ calculate_matrix::$17 ]
reg byte a [ calculate_matrix::$18 ]
reg byte a [ calculate_matrix::$19 ]
reg byte a [ calculate_matrix::$20 ]
reg byte a [ calculate_matrix::$21 ]
reg byte a [ calculate_matrix::$22 ]
reg byte a [ calculate_matrix::$23 ]
reg byte a [ calculate_matrix::$24 ]
reg byte a [ calculate_matrix::$25 ]
reg byte a [ calculate_matrix::$26 ]
reg byte a [ calculate_matrix::$27 ]
reg byte a [ calculate_matrix::$28 ]
reg byte a [ calculate_matrix::$29 ]
reg byte a [ calculate_matrix::$30 ]
reg byte a [ calculate_matrix::$31 ]
reg byte a [ calculate_matrix::$32 ]
reg byte a [ calculate_matrix::$33 ]
reg byte a [ calculate_matrix::$34 ]
reg byte a [ debug_print::print_schar_pos1_sb#0 ]
reg byte a [ debug_print::print_schar_pos2_sb#0 ]
reg byte a [ debug_print::print_schar_pos4_sb#0 ]
reg byte a [ debug_print::print_schar_pos5_sb#0 ]
reg byte a [ debug_print::print_schar_pos6_sb#0 ]
reg byte a [ debug_print::print_schar_pos7_sb#0 ]
reg byte a [ debug_print::print_schar_pos8_sb#0 ]
reg byte a [ debug_print::print_schar_pos9_sb#0 ]
reg byte a [ debug_print::print_schar_pos10_sb#0 ]
reg byte a [ debug_print::print_schar_pos11_sb#0 ]
reg byte a [ debug_print::print_schar_pos12_sb#0 ]
reg byte a [ print_uchar_at::$0 ]
reg byte y [ print_uchar_at::$2 ]


FINAL ASSEMBLER
Score: 65417

  // File Comments
// 3D Rotation using a Rotation Matrix
// Based on: 
// - C= Hacking Magazine Issue 8. http://www.ffd2.com/fridge/chacking/c=hacking8.txt
// - Codebase64 Article http://codebase64.org/doku.php?id=base:3d_rotation  
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .const LIGHT_GREY = $f
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
  .const sz = 0
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_COLOR = $d027
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // The rotated point - updated by calling rotate_matrix()
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  // The rotated point with perspective
  .label pp = $f3
  .label xp = $f4
  .label yp = $f5
  // Pointers used to multiply perspective (d/z0-z) onto x- & y-coordinates. Points into mulf_sqr1 / mulf_sqr2  
  .label psp1 = $f6
  .label psp2 = $f8
  .label SCREEN = $400
  .label COSH = SINH+$40
  .label COSQ = SINQ+$40
  .label print_screen = $400
  .label sx = 2
  .label sy = 3
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // sprites_init()
    // [1] call sprites_init 
    jsr sprites_init
    // main::@1
    // *psp1 = (unsigned int)mulf_sqr1
    // [2] *((const word*) psp1) ← (word)(const byte*) mulf_sqr1 -- _deref_pwuc1=vwuc2 
    //mulf_init();
    lda #<mulf_sqr1
    sta psp1
    lda #>mulf_sqr1
    sta psp1+1
    // *psp2 = (unsigned int)mulf_sqr2
    // [3] *((const word*) psp2) ← (word)(const byte*) mulf_sqr2 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr2
    sta psp2
    lda #>mulf_sqr2
    sta psp2+1
    // debug_print_init()
    // [4] call debug_print_init 
    // [15] phi from main::@1 to debug_print_init [phi:main::@1->debug_print_init]
    jsr debug_print_init
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // anim()
    // [6] call anim 
  //calculate_matrix(1,1,1);
    // [77] phi from main::@2 to anim [phi:main::@2->anim]
    jsr anim
    // main::@return
    // }
    // [7] return 
    rts
}
  // sprites_init
// Initialize sprites
sprites_init: {
    .label SCREEN = $400
    .label sprites_ptr = SCREEN+$3f8
    // VICII->SPRITES_ENABLE = %11111111
    // [8] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE
    // [9] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
    // [9] phi (byte) sprites_init::i#2 = (byte) 0 [phi:sprites_init->sprites_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [9] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
    // [9] phi (byte) sprites_init::i#2 = (byte) sprites_init::i#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    // sprites_init::@1
  __b1:
    // sprites_ptr[i] = (char)(SPRITE/$40)
    // [10] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← (byte)(const byte*) SPRITE/(byte) $40 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta sprites_ptr,x
    // SPRITES_COLOR[i] = GREEN
    // [11] *((const nomodify byte*) SPRITES_COLOR + (byte) sprites_init::i#2) ← (const nomodify byte) GREEN -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLOR,x
    // for(char i: 0..7)
    // [12] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [13] if((byte) sprites_init::i#1!=(byte) 8) goto sprites_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1
    // sprites_init::@return
    // }
    // [14] return 
    rts
}
  // debug_print_init
debug_print_init: {
    .label COLS = $d800
    .label at_line = SCREEN+$10*$28
    .label at_cols = COLS+$10*$28
    .label __41 = 5
    .label __44 = 7
    .label __47 = 9
    .label __50 = $b
    .label __53 = $d
    .label __56 = $f
    .label __59 = $11
    .label __62 = $13
    .label __65 = $15
    .label c = 2
    .label i = 3
    // print_cls()
    // [16] call print_cls 
    // [112] phi from debug_print_init to print_cls [phi:debug_print_init->print_cls]
    jsr print_cls
    // [17] phi from debug_print_init to debug_print_init::@4 [phi:debug_print_init->debug_print_init::@4]
    // debug_print_init::@4
    // print_str_at("sx", SCREEN+40*0+34)
    // [18] call print_str_at 
    // [115] phi from debug_print_init::@4 to print_str_at [phi:debug_print_init::@4->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(byte) $22 [phi:debug_print_init::@4->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$22
    sta.z print_str_at.at
    lda #>SCREEN+$22
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str [phi:debug_print_init::@4->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str_at.str
    lda #>str
    sta.z print_str_at.str+1
    jsr print_str_at
    // [19] phi from debug_print_init::@4 to debug_print_init::@5 [phi:debug_print_init::@4->debug_print_init::@5]
    // debug_print_init::@5
    // print_str_at("sy", SCREEN+40*1+34)
    // [20] call print_str_at 
    // [115] phi from debug_print_init::@5 to print_str_at [phi:debug_print_init::@5->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(byte)(number) $28*(number) 1+(byte) $22 [phi:debug_print_init::@5->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*1+$22
    sta.z print_str_at.at
    lda #>SCREEN+$28*1+$22
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str1 [phi:debug_print_init::@5->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str_at.str
    lda #>str1
    sta.z print_str_at.str+1
    jsr print_str_at
    // [21] phi from debug_print_init::@5 to debug_print_init::@6 [phi:debug_print_init::@5->debug_print_init::@6]
    // debug_print_init::@6
    // print_str_at("sz", SCREEN+40*2+34)
    // [22] call print_str_at 
    // [115] phi from debug_print_init::@6 to print_str_at [phi:debug_print_init::@6->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(byte)(number) $28*(number) 2+(byte) $22 [phi:debug_print_init::@6->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*2+$22
    sta.z print_str_at.at
    lda #>SCREEN+$28*2+$22
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str2 [phi:debug_print_init::@6->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str_at.str
    lda #>str2
    sta.z print_str_at.str+1
    jsr print_str_at
    // [23] phi from debug_print_init::@6 to debug_print_init::@7 [phi:debug_print_init::@6->debug_print_init::@7]
    // debug_print_init::@7
    // print_str_at("x", SCREEN+40*16)
    // [24] call print_str_at 
    // [115] phi from debug_print_init::@7 to print_str_at [phi:debug_print_init::@7->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $10 [phi:debug_print_init::@7->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$10
    sta.z print_str_at.at
    lda #>SCREEN+$28*$10
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str3 [phi:debug_print_init::@7->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str_at.str
    lda #>str3
    sta.z print_str_at.str+1
    jsr print_str_at
    // [25] phi from debug_print_init::@7 to debug_print_init::@8 [phi:debug_print_init::@7->debug_print_init::@8]
    // debug_print_init::@8
    // print_str_at("y", SCREEN+40*17)
    // [26] call print_str_at 
    // [115] phi from debug_print_init::@8 to print_str_at [phi:debug_print_init::@8->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $11 [phi:debug_print_init::@8->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$11
    sta.z print_str_at.at
    lda #>SCREEN+$28*$11
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str4 [phi:debug_print_init::@8->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str_at.str
    lda #>str4
    sta.z print_str_at.str+1
    jsr print_str_at
    // [27] phi from debug_print_init::@8 to debug_print_init::@9 [phi:debug_print_init::@8->debug_print_init::@9]
    // debug_print_init::@9
    // print_str_at("z", SCREEN+40*18)
    // [28] call print_str_at 
    // [115] phi from debug_print_init::@9 to print_str_at [phi:debug_print_init::@9->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $12 [phi:debug_print_init::@9->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$12
    sta.z print_str_at.at
    lda #>SCREEN+$28*$12
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str5 [phi:debug_print_init::@9->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str_at.str
    lda #>str5
    sta.z print_str_at.str+1
    jsr print_str_at
    // [29] phi from debug_print_init::@9 to debug_print_init::@10 [phi:debug_print_init::@9->debug_print_init::@10]
    // debug_print_init::@10
    // print_str_at("xr", SCREEN+40*19)
    // [30] call print_str_at 
    // [115] phi from debug_print_init::@10 to print_str_at [phi:debug_print_init::@10->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $13 [phi:debug_print_init::@10->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$13
    sta.z print_str_at.at
    lda #>SCREEN+$28*$13
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str6 [phi:debug_print_init::@10->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str6
    sta.z print_str_at.str
    lda #>str6
    sta.z print_str_at.str+1
    jsr print_str_at
    // [31] phi from debug_print_init::@10 to debug_print_init::@11 [phi:debug_print_init::@10->debug_print_init::@11]
    // debug_print_init::@11
    // print_str_at("yr", SCREEN+40*20)
    // [32] call print_str_at 
    // [115] phi from debug_print_init::@11 to print_str_at [phi:debug_print_init::@11->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $14 [phi:debug_print_init::@11->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$14
    sta.z print_str_at.at
    lda #>SCREEN+$28*$14
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str7 [phi:debug_print_init::@11->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str7
    sta.z print_str_at.str
    lda #>str7
    sta.z print_str_at.str+1
    jsr print_str_at
    // [33] phi from debug_print_init::@11 to debug_print_init::@12 [phi:debug_print_init::@11->debug_print_init::@12]
    // debug_print_init::@12
    // print_str_at("zr", SCREEN+40*21)
    // [34] call print_str_at 
    // [115] phi from debug_print_init::@12 to print_str_at [phi:debug_print_init::@12->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $15 [phi:debug_print_init::@12->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$15
    sta.z print_str_at.at
    lda #>SCREEN+$28*$15
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str8 [phi:debug_print_init::@12->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str8
    sta.z print_str_at.str
    lda #>str8
    sta.z print_str_at.str+1
    jsr print_str_at
    // [35] phi from debug_print_init::@12 to debug_print_init::@13 [phi:debug_print_init::@12->debug_print_init::@13]
    // debug_print_init::@13
    // print_str_at("pp", SCREEN+40*22)
    // [36] call print_str_at 
    // [115] phi from debug_print_init::@13 to print_str_at [phi:debug_print_init::@13->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $16 [phi:debug_print_init::@13->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$16
    sta.z print_str_at.at
    lda #>SCREEN+$28*$16
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str9 [phi:debug_print_init::@13->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str9
    sta.z print_str_at.str
    lda #>str9
    sta.z print_str_at.str+1
    jsr print_str_at
    // [37] phi from debug_print_init::@13 to debug_print_init::@14 [phi:debug_print_init::@13->debug_print_init::@14]
    // debug_print_init::@14
    // print_str_at("xp", SCREEN+40*23)
    // [38] call print_str_at 
    // [115] phi from debug_print_init::@14 to print_str_at [phi:debug_print_init::@14->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $17 [phi:debug_print_init::@14->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$17
    sta.z print_str_at.at
    lda #>SCREEN+$28*$17
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str10 [phi:debug_print_init::@14->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str10
    sta.z print_str_at.str
    lda #>str10
    sta.z print_str_at.str+1
    jsr print_str_at
    // [39] phi from debug_print_init::@14 to debug_print_init::@15 [phi:debug_print_init::@14->debug_print_init::@15]
    // debug_print_init::@15
    // print_str_at("yp", SCREEN+40*24)
    // [40] call print_str_at 
    // [115] phi from debug_print_init::@15 to print_str_at [phi:debug_print_init::@15->print_str_at]
    // [115] phi (byte*) print_str_at::at#15 = (const byte*) SCREEN+(word)(number) $28*(number) $18 [phi:debug_print_init::@15->print_str_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28*$18
    sta.z print_str_at.at
    lda #>SCREEN+$28*$18
    sta.z print_str_at.at+1
    // [115] phi (byte*) print_str_at::str#15 = (const byte*) debug_print_init::str11 [phi:debug_print_init::@15->print_str_at#1] -- pbuz1=pbuc1 
    lda #<str11
    sta.z print_str_at.str
    lda #>str11
    sta.z print_str_at.str+1
    jsr print_str_at
    // [41] phi from debug_print_init::@15 to debug_print_init::@1 [phi:debug_print_init::@15->debug_print_init::@1]
    // [41] phi (byte) debug_print_init::i#2 = (byte) 0 [phi:debug_print_init::@15->debug_print_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [41] phi (byte) debug_print_init::c#2 = (byte) 4 [phi:debug_print_init::@15->debug_print_init::@1#1] -- vbuz1=vbuc1 
    lda #4
    sta.z c
    // [41] phi from debug_print_init::@3 to debug_print_init::@1 [phi:debug_print_init::@3->debug_print_init::@1]
    // [41] phi (byte) debug_print_init::i#2 = (byte) debug_print_init::i#1 [phi:debug_print_init::@3->debug_print_init::@1#0] -- register_copy 
    // [41] phi (byte) debug_print_init::c#2 = (byte) debug_print_init::c#1 [phi:debug_print_init::@3->debug_print_init::@1#1] -- register_copy 
    // debug_print_init::@1
  __b1:
    // print_schar_at(xs[i], at_line+40*0+c)
    // [42] (byte*) print_schar_at::at#0 ← (const byte*) debug_print_init::at_line#0 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line
    sta.z print_schar_at.at
    lda #>at_line
    adc #0
    sta.z print_schar_at.at+1
    // [43] (signed byte) print_schar_at::b#1 ← *((const signed byte*) xs + (byte) debug_print_init::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xs,y
    sta.z print_schar_at.b
    // [44] call print_schar_at 
    // [122] phi from debug_print_init::@1 to print_schar_at [phi:debug_print_init::@1->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#0 [phi:debug_print_init::@1->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#1 [phi:debug_print_init::@1->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print_init::@16
    // print_schar_at(ys[i], at_line+40*1+c)
    // [45] (byte*) print_schar_at::at#1 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*1
    sta.z print_schar_at.at
    lda #>at_line+$28*1
    adc #0
    sta.z print_schar_at.at+1
    // [46] (signed byte) print_schar_at::b#2 ← *((const signed byte*) ys + (byte) debug_print_init::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda ys,y
    sta.z print_schar_at.b
    // [47] call print_schar_at 
    // [122] phi from debug_print_init::@16 to print_schar_at [phi:debug_print_init::@16->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#1 [phi:debug_print_init::@16->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#2 [phi:debug_print_init::@16->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print_init::@17
    // print_schar_at(zs[i], at_line+40*2+c)
    // [48] (byte*) print_schar_at::at#2 ← (const byte*) debug_print_init::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*2
    sta.z print_schar_at.at
    lda #>at_line+$28*2
    adc #0
    sta.z print_schar_at.at+1
    // [49] (signed byte) print_schar_at::b#3 ← *((const signed byte*) zs + (byte) debug_print_init::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda zs,y
    sta.z print_schar_at.b
    // [50] call print_schar_at 
    // [122] phi from debug_print_init::@17 to print_schar_at [phi:debug_print_init::@17->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#2 [phi:debug_print_init::@17->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#3 [phi:debug_print_init::@17->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // [51] phi from debug_print_init::@17 to debug_print_init::@2 [phi:debug_print_init::@17->debug_print_init::@2]
    // [51] phi (byte) debug_print_init::j#2 = (byte) 0 [phi:debug_print_init::@17->debug_print_init::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // [51] phi from debug_print_init::@2 to debug_print_init::@2 [phi:debug_print_init::@2->debug_print_init::@2]
    // [51] phi (byte) debug_print_init::j#2 = (byte) debug_print_init::j#1 [phi:debug_print_init::@2->debug_print_init::@2#0] -- register_copy 
    // debug_print_init::@2
  __b2:
    // col = 8+i
    // [52] (byte) debug_print_init::col#0 ← (byte) 8 + (byte) debug_print_init::i#2 -- vbuxx=vbuc1_plus_vbuz1 
    lax.z i
    axs #-[8]
    // at_cols+40*0+c
    // [53] (byte*~) debug_print_init::$41 ← (const byte*) debug_print_init::at_cols#0 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols
    sta.z __41
    lda #>at_cols
    adc #0
    sta.z __41+1
    // *(at_cols+40*0+c+j) = col
    // [54] *((byte*~) debug_print_init::$41 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__41),y
    // at_cols+40*1+c
    // [55] (byte*~) debug_print_init::$44 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 1 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*1
    sta.z __44
    lda #>at_cols+$28*1
    adc #0
    sta.z __44+1
    // *(at_cols+40*1+c+j) = col
    // [56] *((byte*~) debug_print_init::$44 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__44),y
    // at_cols+40*2+c
    // [57] (byte*~) debug_print_init::$47 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 2 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*2
    sta.z __47
    lda #>at_cols+$28*2
    adc #0
    sta.z __47+1
    // *(at_cols+40*2+c+j) = col
    // [58] *((byte*~) debug_print_init::$47 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__47),y
    // at_cols+40*3+c
    // [59] (byte*~) debug_print_init::$50 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 3 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*3
    sta.z __50
    lda #>at_cols+$28*3
    adc #0
    sta.z __50+1
    // *(at_cols+40*3+c+j) = col
    // [60] *((byte*~) debug_print_init::$50 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__50),y
    // at_cols+40*4+c
    // [61] (byte*~) debug_print_init::$53 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 4 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*4
    sta.z __53
    lda #>at_cols+$28*4
    adc #0
    sta.z __53+1
    // *(at_cols+40*4+c+j) = col
    // [62] *((byte*~) debug_print_init::$53 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__53),y
    // at_cols+40*5+c
    // [63] (byte*~) debug_print_init::$56 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 5 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*5
    sta.z __56
    lda #>at_cols+$28*5
    adc #0
    sta.z __56+1
    // *(at_cols+40*5+c+j) = col
    // [64] *((byte*~) debug_print_init::$56 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__56),y
    // at_cols+40*6+c
    // [65] (byte*~) debug_print_init::$59 ← (const byte*) debug_print_init::at_cols#0+(byte)(number) $28*(number) 6 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*6
    sta.z __59
    lda #>at_cols+$28*6
    adc #0
    sta.z __59+1
    // *(at_cols+40*6+c+j) = col
    // [66] *((byte*~) debug_print_init::$59 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__59),y
    // at_cols+40*7+c
    // [67] (byte*~) debug_print_init::$62 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 7 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*7
    sta.z __62
    lda #>at_cols+$28*7
    adc #0
    sta.z __62+1
    // *(at_cols+40*7+c+j) = col
    // [68] *((byte*~) debug_print_init::$62 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__62),y
    // at_cols+40*8+c
    // [69] (byte*~) debug_print_init::$65 ← (const byte*) debug_print_init::at_cols#0+(word)(number) $28*(number) 8 + (byte) debug_print_init::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_cols+$28*8
    sta.z __65
    lda #>at_cols+$28*8
    adc #0
    sta.z __65+1
    // *(at_cols+40*8+c+j) = col
    // [70] *((byte*~) debug_print_init::$65 + (byte) debug_print_init::j#2) ← (byte) debug_print_init::col#0 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (__65),y
    // for( char j: 0..3)
    // [71] (byte) debug_print_init::j#1 ← ++ (byte) debug_print_init::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [72] if((byte) debug_print_init::j#1!=(byte) 4) goto debug_print_init::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    beq !__b2+
    jmp __b2
  !__b2:
    // debug_print_init::@3
    // c += 4
    // [73] (byte) debug_print_init::c#1 ← (byte) debug_print_init::c#2 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c
    axs #-[4]
    stx.z c
    // for( char i: 0..7)
    // [74] (byte) debug_print_init::i#1 ← ++ (byte) debug_print_init::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [75] if((byte) debug_print_init::i#1!=(byte) 8) goto debug_print_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    beq !__b1+
    jmp __b1
  !__b1:
    // debug_print_init::@return
    // }
    // [76] return 
    rts
    str: .text "sx"
    .byte 0
    str1: .text "sy"
    .byte 0
    str2: .text "sz"
    .byte 0
    str3: .text "x"
    .byte 0
    str4: .text "y"
    .byte 0
    str5: .text "z"
    .byte 0
    str6: .text "xr"
    .byte 0
    str7: .text "yr"
    .byte 0
    str8: .text "zr"
    .byte 0
    str9: .text "pp"
    .byte 0
    str10: .text "xp"
    .byte 0
    str11: .text "yp"
    .byte 0
}
  // anim
anim: {
    .label i = 4
    // [78] phi from anim to anim::@1 [phi:anim->anim::@1]
    // [78] phi (signed byte) sy#11 = (signed byte) 0 [phi:anim->anim::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z sy
    // [78] phi (signed byte) sx#11 = (signed byte) 0 [phi:anim->anim::@1#1] -- vbsz1=vbsc1 
    sta.z sx
    // anim::@1
    // anim::@2
  __b2:
    // while(VICII->RASTER!=$ff)
    // [79] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto anim::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b2
    // anim::@3
  __b3:
    // while(VICII->RASTER!=$fe)
    // [80] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fe) goto anim::@3 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fe
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b3
    // anim::@4
  __b4:
    // while(VICII->RASTER!=$fd)
    // [81] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fd) goto anim::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fd
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b4
    // anim::@5
    // (VICII->BORDER_COLOR)++;
    // [82] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // calculate_matrix(sx,sy,sz)
    // [83] (signed byte) calculate_matrix::sx#0 ← (signed byte) sx#11 -- vbsxx=vbsz1 
    ldx.z sx
    // [84] (signed byte) calculate_matrix::sy#0 ← (signed byte) sy#11
    // [85] call calculate_matrix 
    //calculate_matrix_16(sx,sy,sz);
    jsr calculate_matrix
    // [86] phi from anim::@5 to anim::@8 [phi:anim::@5->anim::@8]
    // anim::@8
    // store_matrix()
    // [87] call store_matrix 
    jsr store_matrix
    // [88] phi from anim::@8 to anim::@6 [phi:anim::@8->anim::@6]
    // [88] phi (byte) anim::i#2 = (byte) 0 [phi:anim::@8->anim::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [88] phi from anim::@9 to anim::@6 [phi:anim::@9->anim::@6]
    // [88] phi (byte) anim::i#2 = (byte) anim::i#1 [phi:anim::@9->anim::@6#0] -- register_copy 
    // anim::@6
  __b6:
    // (VICII->BORDER_COLOR)++;
    // [89] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // rotate_matrix(xs[i], ys[i], zs[i])
    // [90] (signed byte) rotate_matrix::x#0 ← *((const signed byte*) xs + (byte) anim::i#2) -- vbsxx=pbsc1_derefidx_vbuz1 
    ldy.z i
    ldx xs,y
    // [91] (signed byte) rotate_matrix::y#0 ← *((const signed byte*) ys + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    lda ys,y
    sta.z rotate_matrix.y
    // [92] (signed byte) rotate_matrix::z#0 ← *((const signed byte*) zs + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    lda zs,y
    sta.z rotate_matrix.z
    // [93] call rotate_matrix 
    jsr rotate_matrix
    // anim::@9
    // xrs[i] = *xr
    // [94] *((const signed byte*) xrs + (byte) anim::i#2) ← *((const signed byte*) xr) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda xr
    ldy.z i
    sta xrs,y
    // yrs[i] = *yr
    // [95] *((const signed byte*) yrs + (byte) anim::i#2) ← *((const signed byte*) yr) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda yr
    sta yrs,y
    // zrs[i] = *zr
    // [96] *((const signed byte*) zrs + (byte) anim::i#2) ← *((const signed byte*) zr) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda zr
    sta zrs,y
    // pps[i] = *pp
    // [97] *((const signed byte*) pps + (byte) anim::i#2) ← *((const signed byte*) pp) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda pp
    sta pps,y
    // xps[i] = *xp
    // [98] *((const signed byte*) xps + (byte) anim::i#2) ← *((const signed byte*) xp) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda xp
    sta xps,y
    // yps[i] = *yp
    // [99] *((const signed byte*) yps + (byte) anim::i#2) ← *((const signed byte*) yp) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda yp
    sta yps,y
    // i2 = i*2
    // [100] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    tya
    asl
    tax
    // $80+(char)((*xp))
    // [101] (byte~) anim::$9 ← (byte) $80 + (byte)*((const signed byte*) xp) -- vbuaa=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc xp
    // SPRITES_XPOS[i2] = $80+(char)((*xp))
    // [102] *((const nomodify byte*) SPRITES_XPOS + (byte) anim::i2#0) ← (byte~) anim::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
    // $80+(char)((*yp))
    // [103] (byte~) anim::$10 ← (byte) $80 + (byte)*((const signed byte*) yp) -- vbuaa=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc yp
    // SPRITES_YPOS[i2] = $80+(char)((*yp))
    // [104] *((const nomodify byte*) SPRITES_YPOS + (byte) anim::i2#0) ← (byte~) anim::$10 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_YPOS,x
    // for(char i: 0..7)
    // [105] (byte) anim::i#1 ← ++ (byte) anim::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [106] if((byte) anim::i#1!=(byte) 8) goto anim::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b6
    // anim::@7
    // VICII->BORDER_COLOR = LIGHT_GREY
    // [107] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_GREY -- _deref_pbuc1=vbuc2 
    lda #LIGHT_GREY
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // debug_print()
    // [108] call debug_print 
    jsr debug_print
    // anim::@10
    // VICII->BORDER_COLOR = LIGHT_BLUE
    // [109] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_BLUE -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // sx +=2
    // [110] (signed byte) sx#2 ← (signed byte) sx#11 + (signed byte) 2 -- vbsz1=vbsz1_plus_2 
    // Increment angles        
    inc.z sx
    inc.z sx
    // sy -=3
    // [111] (signed byte) sy#2 ← (signed byte) sy#11 - (signed byte) 3 -- vbsz1=vbsz1_minus_vbsc1 
    lax.z sy
    axs #3
    stx.z sy
    // [78] phi from anim::@10 to anim::@1 [phi:anim::@10->anim::@1]
    // [78] phi (signed byte) sy#11 = (signed byte) sy#2 [phi:anim::@10->anim::@1#0] -- register_copy 
    // [78] phi (signed byte) sx#11 = (signed byte) sx#2 [phi:anim::@10->anim::@1#1] -- register_copy 
    jmp __b2
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [113] call memset 
    // [244] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [114] return 
    rts
}
  // print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zp(5) str, byte* zp(7) at)
print_str_at: {
    .label at = 7
    .label str = 5
    // [116] phi from print_str_at print_str_at::@2 to print_str_at::@1 [phi:print_str_at/print_str_at::@2->print_str_at::@1]
    // [116] phi (byte*) print_str_at::at#13 = (byte*) print_str_at::at#15 [phi:print_str_at/print_str_at::@2->print_str_at::@1#0] -- register_copy 
    // [116] phi (byte*) print_str_at::str#13 = (byte*) print_str_at::str#15 [phi:print_str_at/print_str_at::@2->print_str_at::@1#1] -- register_copy 
    // print_str_at::@1
  __b1:
    // while(*str)
    // [117] if((byte) 0!=*((byte*) print_str_at::str#13)) goto print_str_at::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str_at::@return
    // }
    // [118] return 
    rts
    // print_str_at::@2
  __b2:
    // *(at++) = *(str++)
    // [119] *((byte*) print_str_at::at#13) ← *((byte*) print_str_at::str#13) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (at),y
    // *(at++) = *(str++);
    // [120] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#13 -- pbuz1=_inc_pbuz1 
    inc.z at
    bne !+
    inc.z at+1
  !:
    // [121] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#13 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_schar_at
// Print a signed char as hex at a specific screen position
// print_schar_at(signed byte zp($18) b, byte* zp(5) at)
print_schar_at: {
    .label b = $18
    .label at = 5
    // if(b<0)
    // [123] if((signed byte) print_schar_at::b#22<(signed byte) 0) goto print_schar_at::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1
    // print_schar_at::@3
    // print_char_at(' ', at)
    // [124] (byte*) print_char_at::at#1 ← (byte*) print_schar_at::at#21
    // [125] call print_char_at 
    // [250] phi from print_schar_at::@3 to print_char_at [phi:print_schar_at::@3->print_char_at]
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#1 [phi:print_schar_at::@3->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) ' ' [phi:print_schar_at::@3->print_char_at#1] -- vbuxx=vbuc1 
    ldx #' '
    jsr print_char_at
    // [126] phi from print_schar_at::@3 print_schar_at::@4 to print_schar_at::@2 [phi:print_schar_at::@3/print_schar_at::@4->print_schar_at::@2]
    // [126] phi (signed byte) print_schar_at::b#24 = (signed byte) print_schar_at::b#22 [phi:print_schar_at::@3/print_schar_at::@4->print_schar_at::@2#0] -- register_copy 
    // print_schar_at::@2
  __b2:
    // print_uchar_at((char)b, at+1)
    // [127] (byte*) print_uchar_at::at#0 ← (byte*) print_schar_at::at#21 + (byte) 1 -- pbuz1=pbuz1_plus_1 
    inc.z print_uchar_at.at
    bne !+
    inc.z print_uchar_at.at+1
  !:
    // [128] (byte) print_uchar_at::b#0 ← (byte)(signed byte) print_schar_at::b#24
    // [129] call print_uchar_at 
    jsr print_uchar_at
    // print_schar_at::@return
    // }
    // [130] return 
    rts
    // print_schar_at::@1
  __b1:
    // print_char_at('-', at)
    // [131] (byte*) print_char_at::at#0 ← (byte*) print_schar_at::at#21
    // [132] call print_char_at 
    // [250] phi from print_schar_at::@1 to print_char_at [phi:print_schar_at::@1->print_char_at]
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#0 [phi:print_schar_at::@1->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) '-' [phi:print_schar_at::@1->print_char_at#1] -- vbuxx=vbuc1 
    ldx #'-'
    jsr print_char_at
    // print_schar_at::@4
    // b = -b
    // [133] (signed byte) print_schar_at::b#0 ← - (signed byte) print_schar_at::b#22 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2
}
  // calculate_matrix
// Prepare the 3x3 rotation matrix into rotation_matrix[]
// Angles sx, sy, sz are based on 2*PI=$100 
// Method described in C= Hacking Magazine Issue 8. http://www.ffd2.com/fridge/chacking/c=hacking8.txt
// calculate_matrix(signed byte register(X) sx, signed byte zp(3) sy)
calculate_matrix: {
    .label sy = 3
    .label t1 = $17
    .label t2 = $18
    .label t3 = $19
    .label t4 = $1a
    .label t5 = $1b
    .label t6 = $1c
    .label t7 = $1d
    .label t8 = $1e
    .label t9 = $1f
    // t1 = sy-sz
    // [134] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 -- vbsz1=vbsz2 
    lda.z sy
    sta.z t1
    // t2 = sy+sz
    // [135] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 -- vbsz1=vbsz2 
    lda.z sy
    sta.z t2
    // t3 = sx+sz
    // [136] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsxx 
    stx.z t3
    // t4 = sx-sz
    // [137] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsxx 
    stx.z t4
    // t5 = sx+t2
    // [138] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 -- vbsz1=vbsxx_plus_vbsz2 
    txa
    clc
    adc.z t2
    sta.z t5
    // t6 = sx-t1
    // [139] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsxx_minus_vbsz2 
    txa
    sec
    sbc.z t1
    sta.z t6
    // t7 = sx+t1
    // [140] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsxx_plus_vbsz2 
    txa
    clc
    adc.z t1
    sta.z t7
    // t8 = t2-sx
    // [141] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_minus_vbsxx 
    txa
    eor #$ff
    sec
    adc.z t2
    sta.z t8
    // t9 = sy-sx
    // [142] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_minus_vbsxx 
    txa
    eor #$ff
    sec
    adc.z sy
    sta.z t9
    // t10 = sy+sx
    // [143] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 -- vbsxx=vbsz1_plus_vbsxx 
    txa
    clc
    adc.z sy
    tax
    // COSH[t1]+COSH[t2]
    // [144] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t2#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldy.z t1
    lda COSH,y
    ldy.z t2
    clc
    adc COSH,y
    // rotation_matrix[0] = COSH[t1]+COSH[t2]
    // [145] *((const signed byte*) rotation_matrix) ← (signed byte~) calculate_matrix::$10 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix
    // SINH[t1]-SINH[t2]
    // [146] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t2#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldy.z t1
    lda SINH,y
    ldy.z t2
    sec
    sbc SINH,y
    // rotation_matrix[1] = SINH[t1]-SINH[t2]
    // [147] *((const signed byte*) rotation_matrix+(byte) 1) ← (signed byte~) calculate_matrix::$11 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+1
    // SINH[sy]+SINH[sy]
    // [148] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::sy#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz1 
    ldy.z sy
    clc
    lda SINH,y
    adc SINH,y
    // rotation_matrix[2] = SINH[sy]+SINH[sy]
    // [149] *((const signed byte*) rotation_matrix+(byte) 2) ← (signed byte~) calculate_matrix::$12 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+2
    // SINH[t3]-SINH[t4]
    // [150] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldy.z t3
    lda SINH,y
    ldy.z t4
    sec
    sbc SINH,y
    // SINH[t3]-SINH[t4] + COSQ[t6]
    // [151] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t6
    clc
    adc COSQ,y
    // SINH[t3]-SINH[t4] + COSQ[t6]-COSQ[t5]
    // [152] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t5
    sec
    sbc COSQ,y
    // SINH[t3]-SINH[t4] + COSQ[t6]-COSQ[t5]+COSQ[t8]
    // [153] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t8
    clc
    adc COSQ,y
    // SINH[t3]-SINH[t4] + COSQ[t6]-COSQ[t5]+COSQ[t8]-COSQ[t7]
    // [154] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t7
    sec
    sbc COSQ,y
    // rotation_matrix[3] = SINH[t3]-SINH[t4] + COSQ[t6]-COSQ[t5]+COSQ[t8]-COSQ[t7]
    // [155] *((const signed byte*) rotation_matrix+(byte) 3) ← (signed byte~) calculate_matrix::$17 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+3
    // COSH[t3]+COSH[t4]
    // [156] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldy.z t3
    lda COSH,y
    ldy.z t4
    clc
    adc COSH,y
    // COSH[t3]+COSH[t4] + SINQ[t5]
    // [157] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t5
    clc
    adc SINQ,y
    // COSH[t3]+COSH[t4] + SINQ[t5]-SINQ[t6]
    // [158] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t6
    sec
    sbc SINQ,y
    // COSH[t3]+COSH[t4] + SINQ[t5]-SINQ[t6]-SINQ[t7]
    // [159] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t7
    sec
    sbc SINQ,y
    // COSH[t3]+COSH[t4] + SINQ[t5]-SINQ[t6]-SINQ[t7]-SINQ[t8]
    // [160] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t8
    sec
    sbc SINQ,y
    // rotation_matrix[4] = COSH[t3]+COSH[t4] + SINQ[t5]-SINQ[t6]-SINQ[t7]-SINQ[t8]
    // [161] *((const signed byte*) rotation_matrix+(byte) 4) ← (signed byte~) calculate_matrix::$22 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+4
    // SINH[t9]-SINH[t10]
    // [162] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH + (signed byte) calculate_matrix::t10#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsxx 
    ldy.z t9
    lda SINH,y
    sec
    sbc SINH,x
    // rotation_matrix[5] = SINH[t9]-SINH[t10]
    // [163] *((const signed byte*) rotation_matrix+(byte) 5) ← (signed byte~) calculate_matrix::$23 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+5
    // COSH[t4]-COSH[t3]
    // [164] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH + (signed byte) calculate_matrix::t3#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldy.z t4
    lda COSH,y
    ldy.z t3
    sec
    sbc COSH,y
    // COSH[t4]-COSH[t3] + SINQ[t6]
    // [165] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t6
    clc
    adc SINQ,y
    // COSH[t4]-COSH[t3] + SINQ[t6]-SINQ[t5]
    // [166] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t5
    sec
    sbc SINQ,y
    // COSH[t4]-COSH[t3] + SINQ[t6]-SINQ[t5]-SINQ[t8]
    // [167] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t8
    sec
    sbc SINQ,y
    // COSH[t4]-COSH[t3] + SINQ[t6]-SINQ[t5]-SINQ[t8]-SINQ[t7]
    // [168] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t7
    sec
    sbc SINQ,y
    // rotation_matrix[6] = COSH[t4]-COSH[t3] + SINQ[t6]-SINQ[t5]-SINQ[t8]-SINQ[t7]
    // [169] *((const signed byte*) rotation_matrix+(byte) 6) ← (signed byte~) calculate_matrix::$28 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+6
    // SINH[t3]+SINH[t4]
    // [170] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldy.z t3
    lda SINH,y
    ldy.z t4
    clc
    adc SINH,y
    // SINH[t3]+SINH[t4] + COSQ[t6]
    // [171] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t6
    clc
    adc COSQ,y
    // SINH[t3]+SINH[t4] + COSQ[t6]-COSQ[t5]
    // [172] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t5
    sec
    sbc COSQ,y
    // SINH[t3]+SINH[t4] + COSQ[t6]-COSQ[t5]+COSQ[t7]
    // [173] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy.z t7
    clc
    adc COSQ,y
    // SINH[t3]+SINH[t4] + COSQ[t6]-COSQ[t5]+COSQ[t7]-COSQ[t8]
    // [174] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy.z t8
    sec
    sbc COSQ,y
    // rotation_matrix[7] = SINH[t3]+SINH[t4] + COSQ[t6]-COSQ[t5]+COSQ[t7]-COSQ[t8]
    // [175] *((const signed byte*) rotation_matrix+(byte) 7) ← (signed byte~) calculate_matrix::$33 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+7
    // COSH[t9]+COSH[t10]
    // [176] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH + (signed byte) calculate_matrix::t10#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsxx 
    lda COSH,x
    ldy.z t9
    clc
    adc COSH,y
    // rotation_matrix[8] = COSH[t9]+COSH[t10]
    // [177] *((const signed byte*) rotation_matrix+(byte) 8) ← (signed byte~) calculate_matrix::$34 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+8
    // calculate_matrix::@return
    // }
    // [178] return 
    rts
}
  // store_matrix
// Store the rotation matrix into the rotation routine rotate()
// After this each call to rotate() will rotate a point with the matrix
// Implemented in assembler to utilize seriously fast multiplication 
store_matrix: {
    // asm
    // asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
    lda rotation_matrix+0
    sta rotate_matrix.A1+1
    eor #$ff
    sta rotate_matrix.A2+1
    lda rotation_matrix+1
    sta rotate_matrix.B1+1
    eor #$ff
    sta rotate_matrix.B2+1
    lda rotation_matrix+2
    sta rotate_matrix.C1+1
    eor #$ff
    sta rotate_matrix.C2+1
    lda rotation_matrix+3
    sta rotate_matrix.D1+1
    eor #$ff
    sta rotate_matrix.D2+1
    lda rotation_matrix+4
    sta rotate_matrix.E1+1
    eor #$ff
    sta rotate_matrix.E2+1
    lda rotation_matrix+5
    sta rotate_matrix.F1+1
    eor #$ff
    sta rotate_matrix.F2+1
    lda rotation_matrix+6
    sta rotate_matrix.G1+1
    eor #$ff
    sta rotate_matrix.G2+1
    lda rotation_matrix+7
    sta rotate_matrix.H1+1
    eor #$ff
    sta rotate_matrix.H2+1
    lda rotation_matrix+8
    sta rotate_matrix.I1+1
    eor #$ff
    sta rotate_matrix.I2+1
    // store_matrix::@return
    // }
    // [180] return 
    rts
}
  // rotate_matrix
// Rotate a 3D point (x,y,z) using the rotation matrix
// The rotation matrix is prepared by calling prepare_matrix() 
// The passed points must be in the interval [-$3f;$3f].
// Implemented in assembler to utilize seriously fast multiplication 
// rotate_matrix(signed byte register(X) x, signed byte zp($18) y, signed byte zp($19) z)
rotate_matrix: {
    .label y = $18
    .label z = $19
    // *xr = x
    // [181] *((const signed byte*) xr) ← (signed byte) rotate_matrix::x#0 -- _deref_pbsc1=vbsxx 
    txa
    sta xr
    // *yr = y
    // [182] *((const signed byte*) yr) ← (signed byte) rotate_matrix::y#0 -- _deref_pbsc1=vbsz1 
    lda.z y
    sta yr
    // *zr = z
    // [183] *((const signed byte*) zr) ← (signed byte) rotate_matrix::z#0 -- _deref_pbsc1=vbsz1 
    lda.z z
    sta zr
    // asm
    // asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  }
    tax
  C1:
    lda mulf_sqr1,x
    sec
  C2:
    sbc mulf_sqr2,x
    sta C3+1
  F1:
    lda mulf_sqr1,x
    sec
  F2:
    sbc mulf_sqr2,x
    sta F3+1
  I1:
    lda mulf_sqr1,x
    sec
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  I3:
    lda #0
    clc
  G1:
    adc mulf_sqr1,x
    sec
  G2:
    sbc mulf_sqr2,x
    clc
  H1:
    adc mulf_sqr1,y
    sec
  H2:
    sbc mulf_sqr2,y
    sta zr
    sta PP+1
  PP:
    lda PERSP_Z
    sta pp
    sta psp1
    eor #$ff
    sta psp2
  C3:
    lda #0
    clc
  A1:
    adc mulf_sqr1,x
    sec
  A2:
    sbc mulf_sqr2,x
    clc
  B1:
    adc mulf_sqr1,y
    sec
  B2:
    sbc mulf_sqr2,y
    sta xr
    sta XX+1
    clc
  F3:
    lda #0
    clc
  D1:
    adc mulf_sqr1,x
    sec
  D2:
    sbc mulf_sqr2,x
    clc
  E1:
    adc mulf_sqr1,y
    sec
  E2:
    sbc mulf_sqr2,y
    sta yr
    tay
    lda (psp1),y
    sec
    sbc (psp2),y
    sta yp
  XX:
    ldy #0
    lda (psp1),y
    sec
    sbc (psp2),y
    sta xp
    // rotate_matrix::@return
    // }
    // [185] return 
    rts
}
  // debug_print
debug_print: {
    .const print_schar_pos1_col = $25
    .const print_schar_pos2_row = 1
    .const print_schar_pos2_col = $25
    .const print_schar_pos3_row = 2
    .const print_schar_pos3_col = $25
    .const print_schar_pos4_row = 4
    .const print_schar_pos4_col = $1d
    .const print_schar_pos5_row = 4
    .const print_schar_pos5_col = $21
    .const print_schar_pos6_row = 4
    .const print_schar_pos6_col = $25
    .const print_schar_pos7_row = 5
    .const print_schar_pos7_col = $1d
    .const print_schar_pos8_row = 5
    .const print_schar_pos8_col = $21
    .const print_schar_pos9_row = 5
    .const print_schar_pos9_col = $25
    .const print_schar_pos10_row = 6
    .const print_schar_pos10_col = $1d
    .const print_schar_pos11_row = 6
    .const print_schar_pos11_col = $21
    .const print_schar_pos12_row = 6
    .const print_schar_pos12_col = $25
    .label at_line = SCREEN+$13*$28
    .label c = $19
    .label i = $17
    // print_schar_pos(sx, 0, 37)
    // [186] (signed byte) debug_print::print_schar_pos1_sb#0 ← (signed byte) sx#11 -- vbsaa=vbsz1 
    lda.z sx
    // debug_print::print_schar_pos1
    // print_schar_at(sb, print_screen+row*40+col)
    // [187] (signed byte) print_schar_at::b#4 ← (signed byte) debug_print::print_schar_pos1_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [188] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos1 to print_schar_at [phi:debug_print::print_schar_pos1->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos1_col#0 [phi:debug_print::print_schar_pos1->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos1_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos1_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#4 [phi:debug_print::print_schar_pos1->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@2
    // print_schar_pos(sy, 1, 37)
    // [189] (signed byte) debug_print::print_schar_pos2_sb#0 ← (signed byte) sy#11 -- vbsaa=vbsz1 
    lda.z sy
    // debug_print::print_schar_pos2
    // print_schar_at(sb, print_screen+row*40+col)
    // [190] (signed byte) print_schar_at::b#5 ← (signed byte) debug_print::print_schar_pos2_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [191] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos2 to print_schar_at [phi:debug_print::print_schar_pos2->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos2_row#0*(byte) $28+(const byte) debug_print::print_schar_pos2_col#0 [phi:debug_print::print_schar_pos2->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos2_row*$28+print_schar_pos2_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos2_row*$28+print_schar_pos2_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#5 [phi:debug_print::print_schar_pos2->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // [192] phi from debug_print::print_schar_pos2 to debug_print::print_schar_pos3 [phi:debug_print::print_schar_pos2->debug_print::print_schar_pos3]
    // debug_print::print_schar_pos3
    // print_schar_at(sb, print_screen+row*40+col)
    // [193] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos3 to print_schar_at [phi:debug_print::print_schar_pos3->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos3_row#0*(byte) $28+(const byte) debug_print::print_schar_pos3_col#0 [phi:debug_print::print_schar_pos3->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos3_row*$28+print_schar_pos3_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos3_row*$28+print_schar_pos3_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (const signed byte) sz [phi:debug_print::print_schar_pos3->print_schar_at#1] -- vbsz1=vbsc1 
    lda #sz
    sta.z print_schar_at.b
    jsr print_schar_at
    // debug_print::@3
    // print_schar_pos(rotation_matrix[0], 4, 29)
    // [194] (signed byte) debug_print::print_schar_pos4_sb#0 ← *((const signed byte*) rotation_matrix) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix
    // debug_print::print_schar_pos4
    // print_schar_at(sb, print_screen+row*40+col)
    // [195] (signed byte) print_schar_at::b#7 ← (signed byte) debug_print::print_schar_pos4_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [196] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos4 to print_schar_at [phi:debug_print::print_schar_pos4->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos4_row#0*(byte) $28+(const byte) debug_print::print_schar_pos4_col#0 [phi:debug_print::print_schar_pos4->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos4_row*$28+print_schar_pos4_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos4_row*$28+print_schar_pos4_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#7 [phi:debug_print::print_schar_pos4->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@4
    // print_schar_pos(rotation_matrix[1], 4, 33)
    // [197] (signed byte) debug_print::print_schar_pos5_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 1) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+1
    // debug_print::print_schar_pos5
    // print_schar_at(sb, print_screen+row*40+col)
    // [198] (signed byte) print_schar_at::b#8 ← (signed byte) debug_print::print_schar_pos5_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [199] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos5 to print_schar_at [phi:debug_print::print_schar_pos5->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos5_row#0*(byte) $28+(const byte) debug_print::print_schar_pos5_col#0 [phi:debug_print::print_schar_pos5->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos5_row*$28+print_schar_pos5_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos5_row*$28+print_schar_pos5_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#8 [phi:debug_print::print_schar_pos5->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@5
    // print_schar_pos(rotation_matrix[2], 4, 37)
    // [200] (signed byte) debug_print::print_schar_pos6_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 2) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+2
    // debug_print::print_schar_pos6
    // print_schar_at(sb, print_screen+row*40+col)
    // [201] (signed byte) print_schar_at::b#9 ← (signed byte) debug_print::print_schar_pos6_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [202] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos6 to print_schar_at [phi:debug_print::print_schar_pos6->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos6_row#0*(byte) $28+(const byte) debug_print::print_schar_pos6_col#0 [phi:debug_print::print_schar_pos6->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos6_row*$28+print_schar_pos6_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos6_row*$28+print_schar_pos6_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#9 [phi:debug_print::print_schar_pos6->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@6
    // print_schar_pos(rotation_matrix[3], 5, 29)
    // [203] (signed byte) debug_print::print_schar_pos7_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 3) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+3
    // debug_print::print_schar_pos7
    // print_schar_at(sb, print_screen+row*40+col)
    // [204] (signed byte) print_schar_at::b#10 ← (signed byte) debug_print::print_schar_pos7_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [205] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos7 to print_schar_at [phi:debug_print::print_schar_pos7->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos7_row#0*(byte) $28+(const byte) debug_print::print_schar_pos7_col#0 [phi:debug_print::print_schar_pos7->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos7_row*$28+print_schar_pos7_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos7_row*$28+print_schar_pos7_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#10 [phi:debug_print::print_schar_pos7->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@7
    // print_schar_pos(rotation_matrix[4], 5, 33)
    // [206] (signed byte) debug_print::print_schar_pos8_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 4) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+4
    // debug_print::print_schar_pos8
    // print_schar_at(sb, print_screen+row*40+col)
    // [207] (signed byte) print_schar_at::b#11 ← (signed byte) debug_print::print_schar_pos8_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [208] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos8 to print_schar_at [phi:debug_print::print_schar_pos8->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos8_row#0*(byte) $28+(const byte) debug_print::print_schar_pos8_col#0 [phi:debug_print::print_schar_pos8->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos8_row*$28+print_schar_pos8_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos8_row*$28+print_schar_pos8_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#11 [phi:debug_print::print_schar_pos8->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@8
    // print_schar_pos(rotation_matrix[5], 5, 37)
    // [209] (signed byte) debug_print::print_schar_pos9_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 5) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+5
    // debug_print::print_schar_pos9
    // print_schar_at(sb, print_screen+row*40+col)
    // [210] (signed byte) print_schar_at::b#12 ← (signed byte) debug_print::print_schar_pos9_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [211] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos9 to print_schar_at [phi:debug_print::print_schar_pos9->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos9_row#0*(byte) $28+(const byte) debug_print::print_schar_pos9_col#0 [phi:debug_print::print_schar_pos9->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos9_row*$28+print_schar_pos9_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos9_row*$28+print_schar_pos9_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#12 [phi:debug_print::print_schar_pos9->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@9
    // print_schar_pos(rotation_matrix[6], 6, 29)
    // [212] (signed byte) debug_print::print_schar_pos10_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 6) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+6
    // debug_print::print_schar_pos10
    // print_schar_at(sb, print_screen+row*40+col)
    // [213] (signed byte) print_schar_at::b#13 ← (signed byte) debug_print::print_schar_pos10_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [214] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos10 to print_schar_at [phi:debug_print::print_schar_pos10->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos10_row#0*(byte) $28+(const byte) debug_print::print_schar_pos10_col#0 [phi:debug_print::print_schar_pos10->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos10_row*$28+print_schar_pos10_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos10_row*$28+print_schar_pos10_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#13 [phi:debug_print::print_schar_pos10->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@10
    // print_schar_pos(rotation_matrix[7], 6, 33)
    // [215] (signed byte) debug_print::print_schar_pos11_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 7) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+7
    // debug_print::print_schar_pos11
    // print_schar_at(sb, print_screen+row*40+col)
    // [216] (signed byte) print_schar_at::b#14 ← (signed byte) debug_print::print_schar_pos11_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [217] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos11 to print_schar_at [phi:debug_print::print_schar_pos11->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos11_row#0*(byte) $28+(const byte) debug_print::print_schar_pos11_col#0 [phi:debug_print::print_schar_pos11->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos11_row*$28+print_schar_pos11_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos11_row*$28+print_schar_pos11_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#14 [phi:debug_print::print_schar_pos11->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@11
    // print_schar_pos(rotation_matrix[8], 6, 37)
    // [218] (signed byte) debug_print::print_schar_pos12_sb#0 ← *((const signed byte*) rotation_matrix+(byte) 8) -- vbsaa=_deref_pbsc1 
    lda rotation_matrix+8
    // debug_print::print_schar_pos12
    // print_schar_at(sb, print_screen+row*40+col)
    // [219] (signed byte) print_schar_at::b#15 ← (signed byte) debug_print::print_schar_pos12_sb#0 -- vbsz1=vbsaa 
    sta.z print_schar_at.b
    // [220] call print_schar_at 
    // [122] phi from debug_print::print_schar_pos12 to print_schar_at [phi:debug_print::print_schar_pos12->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (const byte*) print_screen#0+(const byte) debug_print::print_schar_pos12_row#0*(byte) $28+(const byte) debug_print::print_schar_pos12_col#0 [phi:debug_print::print_schar_pos12->print_schar_at#0] -- pbuz1=pbuc1 
    lda #<print_screen+print_schar_pos12_row*$28+print_schar_pos12_col
    sta.z print_schar_at.at
    lda #>print_screen+print_schar_pos12_row*$28+print_schar_pos12_col
    sta.z print_schar_at.at+1
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#15 [phi:debug_print::print_schar_pos12->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // [221] phi from debug_print::print_schar_pos12 to debug_print::@1 [phi:debug_print::print_schar_pos12->debug_print::@1]
    // [221] phi (byte) debug_print::i#2 = (byte) 0 [phi:debug_print::print_schar_pos12->debug_print::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [221] phi (byte) debug_print::c#2 = (byte) 4 [phi:debug_print::print_schar_pos12->debug_print::@1#1] -- vbuz1=vbuc1 
    lda #4
    sta.z c
    // [221] phi from debug_print::@17 to debug_print::@1 [phi:debug_print::@17->debug_print::@1]
    // [221] phi (byte) debug_print::i#2 = (byte) debug_print::i#1 [phi:debug_print::@17->debug_print::@1#0] -- register_copy 
    // [221] phi (byte) debug_print::c#2 = (byte) debug_print::c#1 [phi:debug_print::@17->debug_print::@1#1] -- register_copy 
    // debug_print::@1
  __b1:
    // print_schar_at(xrs[i], at_line+40*0+c)
    // [222] (byte*) print_schar_at::at#15 ← (const byte*) debug_print::at_line#0 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line
    sta.z print_schar_at.at
    lda #>at_line
    adc #0
    sta.z print_schar_at.at+1
    // [223] (signed byte) print_schar_at::b#16 ← *((const signed byte*) xrs + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xrs,y
    sta.z print_schar_at.b
    // [224] call print_schar_at 
    // [122] phi from debug_print::@1 to print_schar_at [phi:debug_print::@1->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#15 [phi:debug_print::@1->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#16 [phi:debug_print::@1->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@12
    // print_schar_at(yrs[i], at_line+40*1+c)
    // [225] (byte*) print_schar_at::at#16 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 1 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*1
    sta.z print_schar_at.at
    lda #>at_line+$28*1
    adc #0
    sta.z print_schar_at.at+1
    // [226] (signed byte) print_schar_at::b#17 ← *((const signed byte*) yrs + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda yrs,y
    sta.z print_schar_at.b
    // [227] call print_schar_at 
    // [122] phi from debug_print::@12 to print_schar_at [phi:debug_print::@12->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#16 [phi:debug_print::@12->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#17 [phi:debug_print::@12->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@13
    // print_schar_at(zrs[i], at_line+40*2+c)
    // [228] (byte*) print_schar_at::at#17 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 2 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*2
    sta.z print_schar_at.at
    lda #>at_line+$28*2
    adc #0
    sta.z print_schar_at.at+1
    // [229] (signed byte) print_schar_at::b#18 ← *((const signed byte*) zrs + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda zrs,y
    sta.z print_schar_at.b
    // [230] call print_schar_at 
    // [122] phi from debug_print::@13 to print_schar_at [phi:debug_print::@13->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#17 [phi:debug_print::@13->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#18 [phi:debug_print::@13->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@14
    // print_schar_at(pps[i], at_line+40*3+c)
    // [231] (byte*) print_schar_at::at#18 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 3 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*3
    sta.z print_schar_at.at
    lda #>at_line+$28*3
    adc #0
    sta.z print_schar_at.at+1
    // [232] (signed byte) print_schar_at::b#19 ← *((const signed byte*) pps + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda pps,y
    sta.z print_schar_at.b
    // [233] call print_schar_at 
    // [122] phi from debug_print::@14 to print_schar_at [phi:debug_print::@14->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#18 [phi:debug_print::@14->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#19 [phi:debug_print::@14->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@15
    // print_schar_at(xps[i], at_line+40*4+c)
    // [234] (byte*) print_schar_at::at#19 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 4 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*4
    sta.z print_schar_at.at
    lda #>at_line+$28*4
    adc #0
    sta.z print_schar_at.at+1
    // [235] (signed byte) print_schar_at::b#20 ← *((const signed byte*) xps + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xps,y
    sta.z print_schar_at.b
    // [236] call print_schar_at 
    // [122] phi from debug_print::@15 to print_schar_at [phi:debug_print::@15->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#19 [phi:debug_print::@15->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#20 [phi:debug_print::@15->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@16
    // print_schar_at(yps[i], at_line+40*5+c)
    // [237] (byte*) print_schar_at::at#20 ← (const byte*) debug_print::at_line#0+(byte)(number) $28*(number) 5 + (byte) debug_print::c#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z c
    clc
    adc #<at_line+$28*5
    sta.z print_schar_at.at
    lda #>at_line+$28*5
    adc #0
    sta.z print_schar_at.at+1
    // [238] (signed byte) print_schar_at::b#21 ← *((const signed byte*) yps + (byte) debug_print::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda yps,y
    sta.z print_schar_at.b
    // [239] call print_schar_at 
    // [122] phi from debug_print::@16 to print_schar_at [phi:debug_print::@16->print_schar_at]
    // [122] phi (byte*) print_schar_at::at#21 = (byte*) print_schar_at::at#20 [phi:debug_print::@16->print_schar_at#0] -- register_copy 
    // [122] phi (signed byte) print_schar_at::b#22 = (signed byte) print_schar_at::b#21 [phi:debug_print::@16->print_schar_at#1] -- register_copy 
    jsr print_schar_at
    // debug_print::@17
    // c += 4
    // [240] (byte) debug_print::c#1 ← (byte) debug_print::c#2 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c
    axs #-[4]
    stx.z c
    // for( char i: 0..7)
    // [241] (byte) debug_print::i#1 ← ++ (byte) debug_print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [242] if((byte) debug_print::i#1!=(byte) 8) goto debug_print::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    beq !__b1+
    jmp __b1
  !__b1:
    // debug_print::@return
    // }
    // [243] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 7
    // [245] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [245] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [246] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [247] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [248] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [249] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [245] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [245] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_char_at
// Print a single char
// print_char_at(byte register(X) ch, byte* zp(5) at)
print_char_at: {
    .label at = 5
    // *(at) = ch
    // [251] *((byte*) print_char_at::at#4) ← (byte) print_char_at::ch#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (at),y
    // print_char_at::@return
    // }
    // [252] return 
    rts
}
  // print_uchar_at
// Print a char as HEX at a specific position
// print_uchar_at(byte zp($18) b, byte* zp(5) at)
print_uchar_at: {
    .label b = $18
    .label at = 5
    // b>>4
    // [253] (byte~) print_uchar_at::$0 ← (byte) print_uchar_at::b#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // print_char_at(print_hextab[b>>4], at)
    // [254] (byte) print_char_at::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$0) -- vbuxx=pbuc1_derefidx_vbuaa 
    tay
    ldx print_hextab,y
    // [255] (byte*) print_char_at::at#2 ← (byte*) print_uchar_at::at#0
    // [256] call print_char_at 
  // Table of hexadecimal digits
    // [250] phi from print_uchar_at to print_char_at [phi:print_uchar_at->print_char_at]
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#2 [phi:print_uchar_at->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) print_char_at::ch#2 [phi:print_uchar_at->print_char_at#1] -- register_copy 
    jsr print_char_at
    // print_uchar_at::@1
    // b&$f
    // [257] (byte~) print_uchar_at::$2 ← (byte) print_uchar_at::b#0 & (byte) $f -- vbuyy=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    tay
    // print_char_at(print_hextab[b&$f], at+1)
    // [258] (byte*) print_char_at::at#3 ← (byte*) print_uchar_at::at#0 + (byte) 1 -- pbuz1=pbuz1_plus_1 
    inc.z print_char_at.at
    bne !+
    inc.z print_char_at.at+1
  !:
    // [259] (byte) print_char_at::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$2) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx print_hextab,y
    // [260] call print_char_at 
    // [250] phi from print_uchar_at::@1 to print_char_at [phi:print_uchar_at::@1->print_char_at]
    // [250] phi (byte*) print_char_at::at#4 = (byte*) print_char_at::at#3 [phi:print_uchar_at::@1->print_char_at#0] -- register_copy 
    // [250] phi (byte) print_char_at::ch#4 = (byte) print_char_at::ch#3 [phi:print_uchar_at::@1->print_char_at#1] -- register_copy 
    jsr print_char_at
    // print_uchar_at::@return
    // }
    // [261] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // Positions to rotate
  xs: .byte -$34, -$34, -$34, 0, 0, $34, $34, $34
  ys: .byte -$34, 0, $34, -$34, $34, -$34, 0, $34
  zs: .byte $34, $34, $34, $34, $34, $34, $34, $34
  // Rotated positions
  xrs: .fill 8, 0
  yrs: .fill 8, 0
  zrs: .fill 8, 0
  // Perspective factors (from zrs)
  pps: .fill 8, 0
  // Rotated positions with perspective
  xps: .fill 8, 0
  yps: .fill 8, 0
  // The rotation matrix
  rotation_matrix: .fill 9, 0
  // mulf_sqr tables will contain f(x)=int(x*x) and g(x) = f(1-x).
  // f(x) = >(( x * x ))
  .align $100
mulf_sqr1:
.for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }

  // g(x) =  >((( 1 - x ) * ( 1 - x )))
  .align $100
mulf_sqr2:
.for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }

  // Perspective multiplication table containing (d/(z0-z)[z] for each z-value   
  .align $100
PERSP_Z:
{
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}

  // Sine and Cosine Tables   
  // Angles: $00=0, $80=PI,$100=2*PI
  // Half Sine/Cosine: signed fixed [-$20;20]
  .align $40
SINH:
{
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

  // Quarter Sine/Cosine: signed fixed [-$10,$10]
  .align $40
SINQ:
{
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

.pc = $3000 "SPRITE"
// A single sprite
SPRITE:
.var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


