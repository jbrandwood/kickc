
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) rem8u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@2
@2: scope:[]  from @begin
  (word) rem16u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@5
divr16u: scope:[divr16u]  from lin16u_gen lin16u_gen::@3
  (word) divr16u::divisor#6 ← phi( lin16u_gen/(word) divr16u::divisor#0 lin16u_gen::@3/(word) divr16u::divisor#1 )
  (word) divr16u::dividend#5 ← phi( lin16u_gen/(word) divr16u::dividend#1 lin16u_gen::@3/(word) divr16u::dividend#2 )
  (word) divr16u::rem#10 ← phi( lin16u_gen/(word) divr16u::rem#3 lin16u_gen::@3/(word) divr16u::rem#4 )
  (word) divr16u::quotient#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#4 ← phi( divr16u/(word) divr16u::divisor#6 divr16u::@3/(word) divr16u::divisor#7 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#6 )
  (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  (word~) divr16u::$0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#2 ← phi( divr16u::@1/(word) divr16u::divisor#4 divr16u::@4/(word) divr16u::divisor#5 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#4 ← phi( divr16u::@1/(word) divr16u::dividend#3 divr16u::@4/(word) divr16u::dividend#7 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#5 ← phi( divr16u::@1/(word) divr16u::divisor#4 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#7 ← phi( divr16u::@1/(word) divr16u::dividend#3 )
  (word) divr16u::rem#7 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (word/dword~) divr16u::$5 ← (word) divr16u::rem#7 | (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem#1 ← (word/dword~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#7 ← phi( divr16u::@2/(word) divr16u::divisor#2 divr16u::@5/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#6 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#8 )
  (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,15)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,15)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#8 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#3 ← phi( divr16u::@2/(word) divr16u::divisor#2 )
  (word) divr16u::rem#8 ← phi( divr16u::@2/(word) divr16u::rem#6 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#8 - (word) divr16u::divisor#3
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#9 ← phi( divr16u::@3/(word) divr16u::rem#11 )
  (word) rem16u#1 ← (word) divr16u::rem#9
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#11 ← phi( divr16u::@6/(word) rem16u#1 )
  (word) divr16u::return#4 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#4
  (word) rem16u#2 ← (word) rem16u#11
  return 
  to:@return
@5: scope:[]  from @2
  (word) rem16u#31 ← phi( @2/(word) rem16u#0 )
  (signed byte) rem8s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@6
@6: scope:[]  from @5
  (word) rem16u#29 ← phi( @5/(word) rem16u#31 )
  (signed word) rem16s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@8
@8: scope:[]  from @6
  (word) rem16u#27 ← phi( @6/(word) rem16u#29 )
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@20
print_str: scope:[print_str]  from main::@10 main::@14 main::@16 main::@18 main::@2 main::@23 main::@25 main::@6 main::@8
  (byte*) print_char_cursor#86 ← phi( main::@10/(byte*) print_char_cursor#19 main::@14/(byte*) print_char_cursor#23 main::@16/(byte*) print_char_cursor#25 main::@18/(byte*) print_char_cursor#27 main::@2/(byte*) print_char_cursor#84 main::@23/(byte*) print_char_cursor#32 main::@25/(byte*) print_char_cursor#34 main::@6/(byte*) print_char_cursor#15 main::@8/(byte*) print_char_cursor#17 )
  (byte*) print_str::str#12 ← phi( main::@10/(byte*) print_str::str#3 main::@14/(byte*) print_str::str#4 main::@16/(byte*) print_str::str#5 main::@18/(byte*) print_str::str#6 main::@2/(byte*) print_str::str#7 main::@23/(byte*) print_str::str#8 main::@25/(byte*) print_str::str#9 main::@6/(byte*) print_str::str#1 main::@8/(byte*) print_str::str#2 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#78 ← phi( print_str/(byte*) print_char_cursor#86 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← *((byte*) print_str::str#10) != (byte) '@'
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#40 ← phi( print_str::@1/(byte*) print_char_cursor#78 )
  (byte*) print_str::str#11 ← phi( print_str::@1/(byte*) print_str::str#10 )
  *((byte*) print_char_cursor#40) ← *((byte*) print_str::str#11)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#40
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#11
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#41 ← phi( print_str::@1/(byte*) print_char_cursor#78 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#41
  return 
  to:@return
print_ln: scope:[print_ln]  from main::@12 main::@20 main::@27
  (byte*) print_char_cursor#79 ← phi( main::@12/(byte*) print_char_cursor#21 main::@20/(byte*) print_char_cursor#29 main::@27/(byte*) print_char_cursor#36 )
  (byte*) print_line_cursor#21 ← phi( main::@12/(byte*) print_line_cursor#23 main::@20/(byte*) print_line_cursor#24 main::@27/(byte*) print_line_cursor#25 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#42 ← phi( print_ln/(byte*) print_char_cursor#79 print_ln::@1/(byte*) print_char_cursor#42 )
  (byte*) print_line_cursor#11 ← phi( print_ln/(byte*) print_line_cursor#21 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#11 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#42
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#12 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#12
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#43 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#13 ← phi( print_ln::@2/(byte*) print_line_cursor#12 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#43
  return 
  to:@return
print_word: scope:[print_word]  from main::@11 main::@15 main::@17 main::@19 main::@22 main::@24 main::@26 main::@7 main::@9
  (byte*) print_char_cursor#80 ← phi( main::@11/(byte*) print_char_cursor#20 main::@15/(byte*) print_char_cursor#24 main::@17/(byte*) print_char_cursor#26 main::@19/(byte*) print_char_cursor#28 main::@22/(byte*) print_char_cursor#31 main::@24/(byte*) print_char_cursor#33 main::@26/(byte*) print_char_cursor#35 main::@7/(byte*) print_char_cursor#16 main::@9/(byte*) print_char_cursor#18 )
  (word) print_word::w#9 ← phi( main::@11/(word) print_word::w#2 main::@15/(word) print_word::w#3 main::@17/(word) print_word::w#4 main::@19/(word) print_word::w#5 main::@22/(word) print_word::w#6 main::@24/(word) print_word::w#7 main::@26/(word) print_word::w#8 main::@7/(word) print_word::w#0 main::@9/(word) print_word::w#1 )
  (byte~) print_word::$0 ← > (word) print_word::w#9
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#10 ← phi( print_word/(word) print_word::w#9 )
  (byte*) print_char_cursor#44 ← phi( print_word/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#44
  (byte~) print_word::$2 ← < (word) print_word::w#10
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#45 ← phi( print_word::@1/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#45
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#46 ← phi( print_word::@2/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#46
  return 
  to:@return
@20: scope:[]  from @8
  (byte*) print_screen#9 ← phi( @8/(byte*) print_screen#0 )
  (byte*) print_char_cursor#88 ← phi( @8/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#31 ← phi( @8/(byte*) print_line_cursor#0 )
  (word) rem16u#26 ← phi( @8/(word) rem16u#27 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@29
print_byte: scope:[print_byte]  from main::@1 print_word print_word::@1
  (byte*) print_char_cursor#81 ← phi( main::@1/(byte*) print_char_cursor#83 print_word/(byte*) print_char_cursor#80 print_word::@1/(byte*) print_char_cursor#5 )
  (byte) print_byte::b#3 ← phi( main::@1/(byte) print_byte::b#2 print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) print_char::ch#0 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#4 ← phi( print_byte/(byte) print_byte::b#3 )
  (byte*) print_char_cursor#47 ← phi( print_byte/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#47
  (byte~) print_byte::$2 ← (byte) print_byte::b#4 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) print_char::ch#1 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#48 ← phi( print_byte::@1/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#48
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#49 ← phi( print_byte::@2/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#49
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  (byte*) print_char_cursor#50 ← phi( print_byte/(byte*) print_char_cursor#81 print_byte::@1/(byte*) print_char_cursor#8 )
  (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#50) ← (byte) print_char::ch#2
  (byte*) print_char_cursor#11 ← ++ (byte*) print_char_cursor#50
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#51 ← phi( print_char/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#51
  return 
  to:@return
print_cls: scope:[print_cls]  from main::@5
  (byte*) print_screen#1 ← phi( main::@5/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (word/signed word/dword/signed dword) 1000
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#3
  (byte*) print_char_cursor#13 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#52 ← phi( print_cls::@2/(byte*) print_char_cursor#13 )
  (byte*) print_line_cursor#14 ← phi( print_cls::@2/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#52
  return 
  to:@return
main: scope:[main]  from @29
  (byte*) print_char_cursor#90 ← phi( @29/(byte*) print_char_cursor#85 )
  (byte*) print_line_cursor#36 ← phi( @29/(byte*) print_line_cursor#26 )
  (byte*) print_screen#7 ← phi( @29/(byte*) print_screen#8 )
  (word) rem16u#20 ← phi( @29/(word) rem16u#24 )
  (word[20]) main::lintab1#0 ← { fill( 20, 0) }
  (word) lin16u_gen::min#0 ← (word/signed word/dword/signed dword) 557
  (word) lin16u_gen::max#0 ← (word/signed word/dword/signed dword) 29793
  (word*) lin16u_gen::lintab#0 ← (word[20]) main::lintab1#0
  (word) lin16u_gen::length#0 ← (byte/signed byte/word/signed word/dword/signed dword) 20
  call lin16u_gen 
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) print_char_cursor#89 ← phi( main/(byte*) print_char_cursor#90 )
  (byte*) print_line_cursor#32 ← phi( main/(byte*) print_line_cursor#36 )
  (byte*) print_screen#6 ← phi( main/(byte*) print_screen#7 )
  (word) rem16u#12 ← phi( main/(word) rem16u#9 )
  (word) rem16u#3 ← (word) rem16u#12
  (word[20]) main::lintab2#0 ← { fill( 20, 0) }
  (word) lin16u_gen::min#1 ← (word/signed word/dword/signed dword) 31179
  (word) lin16u_gen::max#1 ← (word/dword/signed dword) 63361
  (word*) lin16u_gen::lintab#1 ← (word[20]) main::lintab2#0
  (word) lin16u_gen::length#1 ← (byte/signed byte/word/signed word/dword/signed dword) 20
  call lin16u_gen 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) print_char_cursor#87 ← phi( main::@3/(byte*) print_char_cursor#89 )
  (byte*) print_line_cursor#27 ← phi( main::@3/(byte*) print_line_cursor#32 )
  (byte*) print_screen#5 ← phi( main::@3/(byte*) print_screen#6 )
  (word) rem16u#13 ← phi( main::@3/(word) rem16u#9 )
  (word) rem16u#4 ← (word) rem16u#13
  (word[20]) main::lintab3#0 ← { fill( 20, 0) }
  (word) lin16u_gen::min#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) lin16u_gen::max#2 ← (word/signed word/dword/signed dword) 25736
  (word*) lin16u_gen::lintab#2 ← (word[20]) main::lintab3#0
  (word) lin16u_gen::length#2 ← (byte/signed byte/word/signed word/dword/signed dword) 20
  call lin16u_gen 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) print_char_cursor#82 ← phi( main::@4/(byte*) print_char_cursor#87 )
  (byte*) print_line_cursor#22 ← phi( main::@4/(byte*) print_line_cursor#27 )
  (byte*) print_screen#4 ← phi( main::@4/(byte*) print_screen#5 )
  (word) rem16u#14 ← phi( main::@4/(word) rem16u#9 )
  (word) rem16u#5 ← (word) rem16u#14
  call print_cls 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (word) rem16u#52 ← phi( main::@5/(word) rem16u#5 )
  (byte*) print_char_cursor#53 ← phi( main::@5/(byte*) print_char_cursor#14 )
  (byte*) print_line_cursor#15 ← phi( main::@5/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#53
  (byte*) print_str::str#1 ← (const string) main::str
  call print_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (word) rem16u#51 ← phi( main::@6/(word) rem16u#52 )
  (byte*) print_line_cursor#43 ← phi( main::@6/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#54 ← phi( main::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#54
  (word) print_word::w#0 ← (word/signed word/dword/signed dword) 557
  call print_word 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (word) rem16u#50 ← phi( main::@7/(word) rem16u#51 )
  (byte*) print_line_cursor#40 ← phi( main::@7/(byte*) print_line_cursor#43 )
  (byte*) print_char_cursor#55 ← phi( main::@7/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#55
  (byte*) print_str::str#2 ← (const string) main::str1
  call print_str 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (word) rem16u#49 ← phi( main::@8/(word) rem16u#50 )
  (byte*) print_line_cursor#37 ← phi( main::@8/(byte*) print_line_cursor#40 )
  (byte*) print_char_cursor#56 ← phi( main::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#56
  (word) print_word::w#1 ← (word/signed word/dword/signed dword) 31179
  call print_word 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (word) rem16u#48 ← phi( main::@9/(word) rem16u#49 )
  (byte*) print_line_cursor#33 ← phi( main::@9/(byte*) print_line_cursor#37 )
  (byte*) print_char_cursor#57 ← phi( main::@9/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#57
  (byte*) print_str::str#3 ← (const string) main::str2
  call print_str 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (word) rem16u#47 ← phi( main::@10/(word) rem16u#48 )
  (byte*) print_line_cursor#28 ← phi( main::@10/(byte*) print_line_cursor#33 )
  (byte*) print_char_cursor#58 ← phi( main::@10/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#58
  (word) print_word::w#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call print_word 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (word) rem16u#46 ← phi( main::@11/(word) rem16u#47 )
  (byte*) print_line_cursor#23 ← phi( main::@11/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#59 ← phi( main::@11/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#59
  call print_ln 
  to:main::@13
main::@13: scope:[main]  from main::@12
  (word) rem16u#45 ← phi( main::@12/(word) rem16u#46 )
  (byte*) print_char_cursor#60 ← phi( main::@12/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#16 ← phi( main::@12/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#60
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main::@13 main::@21
  (word) rem16u#44 ← phi( main::@13/(word) rem16u#45 main::@21/(word) rem16u#36 )
  (byte*) print_line_cursor#48 ← phi( main::@13/(byte*) print_line_cursor#6 main::@21/(byte*) print_line_cursor#7 )
  (byte*) print_char_cursor#83 ← phi( main::@13/(byte*) print_char_cursor#22 main::@21/(byte*) print_char_cursor#30 )
  (byte) main::i#2 ← phi( main::@13/(byte) main::i#0 main::@21/(byte) main::i#1 )
  (byte) print_byte::b#2 ← (byte) main::i#2
  call print_byte 
  to:main::@14
main::@14: scope:[main]  from main::@1
  (word) rem16u#43 ← phi( main::@1/(word) rem16u#44 )
  (byte*) print_line_cursor#46 ← phi( main::@1/(byte*) print_line_cursor#48 )
  (byte) main::i#7 ← phi( main::@1/(byte) main::i#2 )
  (byte*) print_char_cursor#61 ← phi( main::@1/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#61
  (byte*) print_str::str#4 ← (const string) main::str3
  call print_str 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (word) rem16u#42 ← phi( main::@14/(word) rem16u#43 )
  (byte*) print_line_cursor#44 ← phi( main::@14/(byte*) print_line_cursor#46 )
  (byte) main::i#3 ← phi( main::@14/(byte) main::i#7 )
  (byte*) print_char_cursor#62 ← phi( main::@14/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#62
  (word) print_word::w#3 ← *((word[20]) main::lintab1#0 + (byte) main::i#3)
  call print_word 
  to:main::@16
main::@16: scope:[main]  from main::@15
  (word) rem16u#41 ← phi( main::@15/(word) rem16u#42 )
  (byte*) print_line_cursor#41 ← phi( main::@15/(byte*) print_line_cursor#44 )
  (byte) main::i#8 ← phi( main::@15/(byte) main::i#3 )
  (byte*) print_char_cursor#63 ← phi( main::@15/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#63
  (byte*) print_str::str#5 ← (const string) main::str4
  call print_str 
  to:main::@17
main::@17: scope:[main]  from main::@16
  (word) rem16u#40 ← phi( main::@16/(word) rem16u#41 )
  (byte*) print_line_cursor#38 ← phi( main::@16/(byte*) print_line_cursor#41 )
  (byte) main::i#4 ← phi( main::@16/(byte) main::i#8 )
  (byte*) print_char_cursor#64 ← phi( main::@16/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#64
  (word) print_word::w#4 ← *((word[20]) main::lintab2#0 + (byte) main::i#4)
  call print_word 
  to:main::@18
main::@18: scope:[main]  from main::@17
  (word) rem16u#39 ← phi( main::@17/(word) rem16u#40 )
  (byte*) print_line_cursor#34 ← phi( main::@17/(byte*) print_line_cursor#38 )
  (byte) main::i#9 ← phi( main::@17/(byte) main::i#4 )
  (byte*) print_char_cursor#65 ← phi( main::@17/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#65
  (byte*) print_str::str#6 ← (const string) main::str5
  call print_str 
  to:main::@19
main::@19: scope:[main]  from main::@18
  (word) rem16u#38 ← phi( main::@18/(word) rem16u#39 )
  (byte*) print_line_cursor#29 ← phi( main::@18/(byte*) print_line_cursor#34 )
  (byte) main::i#5 ← phi( main::@18/(byte) main::i#9 )
  (byte*) print_char_cursor#66 ← phi( main::@18/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#66
  (word) print_word::w#5 ← *((word[20]) main::lintab3#0 + (byte) main::i#5)
  call print_word 
  to:main::@20
main::@20: scope:[main]  from main::@19
  (word) rem16u#37 ← phi( main::@19/(word) rem16u#38 )
  (byte) main::i#10 ← phi( main::@19/(byte) main::i#5 )
  (byte*) print_line_cursor#24 ← phi( main::@19/(byte*) print_line_cursor#29 )
  (byte*) print_char_cursor#67 ← phi( main::@19/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#67
  call print_ln 
  to:main::@21
main::@21: scope:[main]  from main::@20
  (word) rem16u#36 ← phi( main::@20/(word) rem16u#37 )
  (byte) main::i#6 ← phi( main::@20/(byte) main::i#10 )
  (byte*) print_char_cursor#68 ← phi( main::@20/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#17 ← phi( main::@20/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#17
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#68
  (byte/signed word/word/dword/signed dword~) main::$19 ← (byte) main::i#6 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) main::i#1 ← (byte/signed word/word/dword/signed dword~) main::$19
  (byte/signed byte/word/signed word/dword/signed dword~) main::$20 ← (byte/signed byte/word/signed word/dword/signed dword) 20 * (byte/signed byte/word/signed word/dword/signed dword) 2
  (bool~) main::$21 ← (byte) main::i#1 < (byte/signed byte/word/signed word/dword/signed dword~) main::$20
  if((bool~) main::$21) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@21
  (word) rem16u#35 ← phi( main::@21/(word) rem16u#36 )
  (byte*) print_line_cursor#47 ← phi( main::@21/(byte*) print_line_cursor#7 )
  (byte*) print_char_cursor#84 ← phi( main::@21/(byte*) print_char_cursor#30 )
  (byte*) print_str::str#7 ← (const string) main::str6
  call print_str 
  to:main::@22
main::@22: scope:[main]  from main::@2
  (word) rem16u#34 ← phi( main::@2/(word) rem16u#35 )
  (byte*) print_line_cursor#45 ← phi( main::@2/(byte*) print_line_cursor#47 )
  (byte*) print_char_cursor#69 ← phi( main::@2/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#69
  (word) print_word::w#6 ← (word/signed word/dword/signed dword) 29793
  call print_word 
  to:main::@23
main::@23: scope:[main]  from main::@22
  (word) rem16u#33 ← phi( main::@22/(word) rem16u#34 )
  (byte*) print_line_cursor#42 ← phi( main::@22/(byte*) print_line_cursor#45 )
  (byte*) print_char_cursor#70 ← phi( main::@22/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#70
  (byte*) print_str::str#8 ← (const string) main::str7
  call print_str 
  to:main::@24
main::@24: scope:[main]  from main::@23
  (word) rem16u#32 ← phi( main::@23/(word) rem16u#33 )
  (byte*) print_line_cursor#39 ← phi( main::@23/(byte*) print_line_cursor#42 )
  (byte*) print_char_cursor#71 ← phi( main::@23/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#71
  (word) print_word::w#7 ← (word/dword/signed dword) 63361
  call print_word 
  to:main::@25
main::@25: scope:[main]  from main::@24
  (word) rem16u#30 ← phi( main::@24/(word) rem16u#32 )
  (byte*) print_line_cursor#35 ← phi( main::@24/(byte*) print_line_cursor#39 )
  (byte*) print_char_cursor#72 ← phi( main::@24/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#72
  (byte*) print_str::str#9 ← (const string) main::str8
  call print_str 
  to:main::@26
main::@26: scope:[main]  from main::@25
  (word) rem16u#28 ← phi( main::@25/(word) rem16u#30 )
  (byte*) print_line_cursor#30 ← phi( main::@25/(byte*) print_line_cursor#35 )
  (byte*) print_char_cursor#73 ← phi( main::@25/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#73
  (word) print_word::w#8 ← (word/signed word/dword/signed dword) 25736
  call print_word 
  to:main::@27
main::@27: scope:[main]  from main::@26
  (word) rem16u#25 ← phi( main::@26/(word) rem16u#28 )
  (byte*) print_line_cursor#25 ← phi( main::@26/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#74 ← phi( main::@26/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#36 ← (byte*) print_char_cursor#74
  call print_ln 
  to:main::@28
main::@28: scope:[main]  from main::@27
  (word) rem16u#21 ← phi( main::@27/(word) rem16u#25 )
  (byte*) print_char_cursor#75 ← phi( main::@27/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#18 ← phi( main::@27/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#18
  (byte*) print_char_cursor#37 ← (byte*) print_char_cursor#75
  to:main::@return
main::@return: scope:[main]  from main::@28
  (byte*) print_char_cursor#76 ← phi( main::@28/(byte*) print_char_cursor#37 )
  (byte*) print_line_cursor#19 ← phi( main::@28/(byte*) print_line_cursor#8 )
  (word) rem16u#15 ← phi( main::@28/(word) rem16u#21 )
  (word) rem16u#6 ← (word) rem16u#15
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#19
  (byte*) print_char_cursor#38 ← (byte*) print_char_cursor#76
  return 
  to:@return
lin16u_gen: scope:[lin16u_gen]  from main main::@3 main::@4
  (word*) lin16u_gen::lintab#7 ← phi( main/(word*) lin16u_gen::lintab#0 main::@3/(word*) lin16u_gen::lintab#1 main::@4/(word*) lin16u_gen::lintab#2 )
  (word) rem16u#22 ← phi( main/(word) rem16u#20 main::@3/(word) rem16u#3 main::@4/(word) rem16u#4 )
  (word) lin16u_gen::length#3 ← phi( main/(word) lin16u_gen::length#0 main::@3/(word) lin16u_gen::length#1 main::@4/(word) lin16u_gen::length#2 )
  (word) lin16u_gen::min#3 ← phi( main/(word) lin16u_gen::min#0 main::@3/(word) lin16u_gen::min#1 main::@4/(word) lin16u_gen::min#2 )
  (word) lin16u_gen::max#3 ← phi( main/(word) lin16u_gen::max#0 main::@3/(word) lin16u_gen::max#1 main::@4/(word) lin16u_gen::max#2 )
  (word~) lin16u_gen::$0 ← (word) lin16u_gen::max#3 - (word) lin16u_gen::min#3
  (word) lin16u_gen::ampl#0 ← (word~) lin16u_gen::$0
  (word/signed dword/dword~) lin16u_gen::$1 ← (word) lin16u_gen::length#3 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend#1 ← (word) lin16u_gen::ampl#0
  (word) divr16u::divisor#0 ← (word/signed dword/dword~) lin16u_gen::$1
  (word) divr16u::rem#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:lin16u_gen::@3
lin16u_gen::@3: scope:[lin16u_gen]  from lin16u_gen
  (word*) lin16u_gen::lintab#6 ← phi( lin16u_gen/(word*) lin16u_gen::lintab#7 )
  (word) lin16u_gen::min#5 ← phi( lin16u_gen/(word) lin16u_gen::min#3 )
  (word) lin16u_gen::length#4 ← phi( lin16u_gen/(word) lin16u_gen::length#3 )
  (word) rem16u#16 ← phi( lin16u_gen/(word) rem16u#2 )
  (word) divr16u::return#5 ← phi( lin16u_gen/(word) divr16u::return#2 )
  (word~) lin16u_gen::$2 ← (word) divr16u::return#5
  (word) rem16u#7 ← (word) rem16u#16
  (word) lin16u_gen::stepi#0 ← (word~) lin16u_gen::$2
  (word/signed dword/dword~) lin16u_gen::$3 ← (word) lin16u_gen::length#4 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) divr16u::divisor#1 ← (word/signed dword/dword~) lin16u_gen::$3
  (word) divr16u::rem#4 ← (word) rem16u#7
  call divr16u 
  (word) divr16u::return#3 ← (word) divr16u::return#1
  to:lin16u_gen::@4
lin16u_gen::@4: scope:[lin16u_gen]  from lin16u_gen::@3
  (word) lin16u_gen::length#6 ← phi( lin16u_gen::@3/(word) lin16u_gen::length#4 )
  (word*) lin16u_gen::lintab#5 ← phi( lin16u_gen::@3/(word*) lin16u_gen::lintab#6 )
  (word) lin16u_gen::min#4 ← phi( lin16u_gen::@3/(word) lin16u_gen::min#5 )
  (word) lin16u_gen::stepi#1 ← phi( lin16u_gen::@3/(word) lin16u_gen::stepi#0 )
  (word) rem16u#17 ← phi( lin16u_gen::@3/(word) rem16u#2 )
  (word) divr16u::return#6 ← phi( lin16u_gen::@3/(word) divr16u::return#3 )
  (word~) lin16u_gen::$4 ← (word) divr16u::return#6
  (word) rem16u#8 ← (word) rem16u#17
  (word) lin16u_gen::stepf#0 ← (word~) lin16u_gen::$4
  (dword) lin16u_gen::step#0 ← { (word) lin16u_gen::stepi#1, (word) lin16u_gen::stepf#0 }
  (dword) lin16u_gen::val#0 ← { (word) lin16u_gen::min#4, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (word) lin16u_gen::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:lin16u_gen::@1
lin16u_gen::@1: scope:[lin16u_gen]  from lin16u_gen::@1 lin16u_gen::@4
  (word) rem16u#23 ← phi( lin16u_gen::@1/(word) rem16u#23 lin16u_gen::@4/(word) rem16u#8 )
  (word) lin16u_gen::length#5 ← phi( lin16u_gen::@1/(word) lin16u_gen::length#5 lin16u_gen::@4/(word) lin16u_gen::length#6 )
  (word) lin16u_gen::i#2 ← phi( lin16u_gen::@1/(word) lin16u_gen::i#1 lin16u_gen::@4/(word) lin16u_gen::i#0 )
  (dword) lin16u_gen::step#1 ← phi( lin16u_gen::@1/(dword) lin16u_gen::step#1 lin16u_gen::@4/(dword) lin16u_gen::step#0 )
  (word*) lin16u_gen::lintab#4 ← phi( lin16u_gen::@1/(word*) lin16u_gen::lintab#3 lin16u_gen::@4/(word*) lin16u_gen::lintab#5 )
  (dword) lin16u_gen::val#2 ← phi( lin16u_gen::@1/(dword) lin16u_gen::val#1 lin16u_gen::@4/(dword) lin16u_gen::val#0 )
  (word~) lin16u_gen::$5 ← > (dword) lin16u_gen::val#2
  *((word*) lin16u_gen::lintab#4) ← (word~) lin16u_gen::$5
  (dword~) lin16u_gen::$6 ← (dword) lin16u_gen::val#2 + (dword) lin16u_gen::step#1
  (dword) lin16u_gen::val#1 ← (dword~) lin16u_gen::$6
  (word*~) lin16u_gen::$7 ← (word*) lin16u_gen::lintab#4 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (word*) lin16u_gen::lintab#3 ← (word*~) lin16u_gen::$7
  (word) lin16u_gen::i#1 ← ++ (word) lin16u_gen::i#2
  (bool~) lin16u_gen::$8 ← (word) lin16u_gen::i#1 < (word) lin16u_gen::length#5
  if((bool~) lin16u_gen::$8) goto lin16u_gen::@1
  to:lin16u_gen::@return
lin16u_gen::@return: scope:[lin16u_gen]  from lin16u_gen::@1
  (word) rem16u#18 ← phi( lin16u_gen::@1/(word) rem16u#23 )
  (word) rem16u#9 ← (word) rem16u#18
  return 
  to:@return
@29: scope:[]  from @20
  (byte*) print_screen#8 ← phi( @20/(byte*) print_screen#9 )
  (byte*) print_char_cursor#85 ← phi( @20/(byte*) print_char_cursor#88 )
  (byte*) print_line_cursor#26 ← phi( @20/(byte*) print_line_cursor#31 )
  (word) rem16u#24 ← phi( @20/(word) rem16u#26 )
  call main 
  to:@30
@30: scope:[]  from @29
  (byte*) print_char_cursor#77 ← phi( @29/(byte*) print_char_cursor#38 )
  (byte*) print_line_cursor#20 ← phi( @29/(byte*) print_line_cursor#9 )
  (word) rem16u#19 ← phi( @29/(word) rem16u#6 )
  (word) rem16u#10 ← (word) rem16u#19
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#20
  (byte*) print_char_cursor#39 ← (byte*) print_char_cursor#77
  to:@end
@end: scope:[]  from @30

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @2
(label) @20
(label) @29
(label) @30
(label) @5
(label) @6
(label) @8
(label) @begin
(label) @end
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(byte~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(word/dword~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::dividend#8
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(word) divr16u::divisor#7
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#11
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(word) divr16u::return#5
(word) divr16u::return#6
(void()) lin16u_gen((word) lin16u_gen::min , (word) lin16u_gen::max , (word*) lin16u_gen::lintab , (word) lin16u_gen::length)
(word~) lin16u_gen::$0
(word/signed dword/dword~) lin16u_gen::$1
(word~) lin16u_gen::$2
(word/signed dword/dword~) lin16u_gen::$3
(word~) lin16u_gen::$4
(word~) lin16u_gen::$5
(dword~) lin16u_gen::$6
(word*~) lin16u_gen::$7
(bool~) lin16u_gen::$8
(label) lin16u_gen::@1
(label) lin16u_gen::@3
(label) lin16u_gen::@4
(label) lin16u_gen::@return
(word) lin16u_gen::ampl
(word) lin16u_gen::ampl#0
(word) lin16u_gen::i
(word) lin16u_gen::i#0
(word) lin16u_gen::i#1
(word) lin16u_gen::i#2
(word) lin16u_gen::length
(word) lin16u_gen::length#0
(word) lin16u_gen::length#1
(word) lin16u_gen::length#2
(word) lin16u_gen::length#3
(word) lin16u_gen::length#4
(word) lin16u_gen::length#5
(word) lin16u_gen::length#6
(word*) lin16u_gen::lintab
(word*) lin16u_gen::lintab#0
(word*) lin16u_gen::lintab#1
(word*) lin16u_gen::lintab#2
(word*) lin16u_gen::lintab#3
(word*) lin16u_gen::lintab#4
(word*) lin16u_gen::lintab#5
(word*) lin16u_gen::lintab#6
(word*) lin16u_gen::lintab#7
(word) lin16u_gen::max
(word) lin16u_gen::max#0
(word) lin16u_gen::max#1
(word) lin16u_gen::max#2
(word) lin16u_gen::max#3
(word) lin16u_gen::min
(word) lin16u_gen::min#0
(word) lin16u_gen::min#1
(word) lin16u_gen::min#2
(word) lin16u_gen::min#3
(word) lin16u_gen::min#4
(word) lin16u_gen::min#5
(dword) lin16u_gen::step
(dword) lin16u_gen::step#0
(dword) lin16u_gen::step#1
(word) lin16u_gen::stepf
(word) lin16u_gen::stepf#0
(word) lin16u_gen::stepi
(word) lin16u_gen::stepi#0
(word) lin16u_gen::stepi#1
(dword) lin16u_gen::val
(dword) lin16u_gen::val#0
(dword) lin16u_gen::val#1
(dword) lin16u_gen::val#2
(void()) main()
(byte/signed word/word/dword/signed dword~) main::$19
(byte/signed byte/word/signed word/dword/signed dword~) main::$20
(bool~) main::$21
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@26
(label) main::@27
(label) main::@28
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(word[20]) main::lintab1
(word[20]) main::lintab1#0
(word[20]) main::lintab2
(word[20]) main::lintab2#0
(word[20]) main::lintab3
(word[20]) main::lintab3#0
(const string) main::str = (string) "   @"
(const string) main::str1 = (string) " @"
(const string) main::str2 = (string) " @"
(const string) main::str3 = (string) " @"
(const string) main::str4 = (string) " @"
(const string) main::str5 = (string) " @"
(const string) main::str6 = (string) "   @"
(const string) main::str7 = (string) " @"
(const string) main::str8 = (string) " @"
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(byte~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#10
(word) print_word::w#2
(word) print_word::w#3
(word) print_word::w#4
(word) print_word::w#5
(word) print_word::w#6
(word) print_word::w#7
(word) print_word::w#8
(word) print_word::w#9
(signed word) rem16s
(signed word) rem16s#0
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#38
(word) rem16u#39
(word) rem16u#4
(word) rem16u#40
(word) rem16u#41
(word) rem16u#42
(word) rem16u#43
(word) rem16u#44
(word) rem16u#45
(word) rem16u#46
(word) rem16u#47
(word) rem16u#48
(word) rem16u#49
(word) rem16u#5
(word) rem16u#50
(word) rem16u#51
(word) rem16u#52
(word) rem16u#6
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed byte) rem8s
(signed byte) rem8s#0
(byte) rem8u
(byte) rem8u#0

Inversing boolean not [11] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [10] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [19] (bool~) divr16u::$9 ← (word) divr16u::rem#6 < (word) divr16u::divisor#2 from [18] (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
Successful SSA optimization Pass2UnaryNotSimplification
Alias (word) divr16u::rem#0 = (word~) divr16u::$0 (word) divr16u::rem#7 
Alias (word) divr16u::dividend#0 = (word~) divr16u::$6 (word) divr16u::dividend#8 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$7 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#3 = (word) divr16u::dividend#7 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#4 = (word) divr16u::divisor#5 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#1 = (word/dword~) divr16u::$5 
Alias (word) divr16u::rem#6 = (word) divr16u::rem#8 
Alias (word) divr16u::divisor#2 = (word) divr16u::divisor#3 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#2 = (word~) divr16u::$10 
Alias (word) divr16u::rem#11 = (word) divr16u::rem#9 
Alias (word) divr16u::return#0 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#4 (word) divr16u::return#1 
Alias (word) rem16u#1 = (word) rem16u#11 (word) rem16u#2 
Alias (word) rem16u#0 = (word) rem16u#31 (word) rem16u#29 (word) rem16u#27 (word) rem16u#26 (word) rem16u#24 
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#31 (byte*) print_char_cursor#88 (byte*) print_screen#9 (byte*) print_line_cursor#26 (byte*) print_char_cursor#85 (byte*) print_screen#8 
Alias (byte*) print_str::str#10 = (byte*) print_str::str#11 
Alias (byte*) print_char_cursor#2 = (byte*) print_char_cursor#40 (byte*) print_char_cursor#78 (byte*) print_char_cursor#41 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#12 (byte*) print_char_cursor#3 (byte*) print_line_cursor#13 (byte*) print_char_cursor#43 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#10 = (word) print_word::w#9 
Alias (byte*) print_char_cursor#44 = (byte*) print_char_cursor#5 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#45 = (byte*) print_char_cursor#6 (byte*) print_char_cursor#46 (byte*) print_char_cursor#7 
Alias (byte) print_byte::b#3 = (byte) print_byte::b#4 
Alias (byte*) print_char_cursor#47 = (byte*) print_char_cursor#8 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#9 (byte*) print_char_cursor#48 (byte*) print_char_cursor#49 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#51 (byte*) print_char_cursor#12 
Alias (byte*) print_line_cursor#14 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_line_cursor#3 (byte*) print_char_cursor#13 (byte*) print_char_cursor#52 (byte*) print_line_cursor#4 (byte*) print_char_cursor#14 
Alias (byte*) print_screen#4 = (byte*) print_screen#6 (byte*) print_screen#7 (byte*) print_screen#5 
Alias (byte*) print_line_cursor#22 = (byte*) print_line_cursor#32 (byte*) print_line_cursor#36 (byte*) print_line_cursor#27 
Alias (byte*) print_char_cursor#82 = (byte*) print_char_cursor#89 (byte*) print_char_cursor#90 (byte*) print_char_cursor#87 
Alias (word) rem16u#12 = (word) rem16u#3 
Alias (word) rem16u#13 = (word) rem16u#4 
Alias (word) rem16u#14 = (word) rem16u#5 (word) rem16u#52 (word) rem16u#51 (word) rem16u#50 (word) rem16u#49 (word) rem16u#48 (word) rem16u#47 (word) rem16u#46 (word) rem16u#45 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#5 (byte*) print_line_cursor#43 (byte*) print_line_cursor#40 (byte*) print_line_cursor#37 (byte*) print_line_cursor#33 (byte*) print_line_cursor#28 (byte*) print_line_cursor#23 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#53 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#54 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#55 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#56 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#57 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#58 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#59 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#6 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#60 
Alias (byte) main::i#10 = (byte) main::i#7 (byte) main::i#2 (byte) main::i#3 (byte) main::i#8 (byte) main::i#4 (byte) main::i#9 (byte) main::i#5 (byte) main::i#6 
Alias (byte*) print_line_cursor#24 = (byte*) print_line_cursor#46 (byte*) print_line_cursor#48 (byte*) print_line_cursor#44 (byte*) print_line_cursor#41 (byte*) print_line_cursor#38 (byte*) print_line_cursor#34 (byte*) print_line_cursor#29 
Alias (word) rem16u#15 = (word) rem16u#43 (word) rem16u#44 (word) rem16u#42 (word) rem16u#41 (word) rem16u#40 (word) rem16u#39 (word) rem16u#38 (word) rem16u#37 (word) rem16u#36 (word) rem16u#35 (word) rem16u#34 (word) rem16u#33 (word) rem16u#32 (word) rem16u#30 (word) rem16u#28 (word) rem16u#25 (word) rem16u#21 (word) rem16u#6 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#61 
Alias (byte*) print_char_cursor#24 = (byte*) print_char_cursor#62 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#63 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#64 
Alias (byte*) print_char_cursor#27 = (byte*) print_char_cursor#65 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#66 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#67 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#7 (byte*) print_line_cursor#47 (byte*) print_line_cursor#45 (byte*) print_line_cursor#42 (byte*) print_line_cursor#39 (byte*) print_line_cursor#35 (byte*) print_line_cursor#30 (byte*) print_line_cursor#25 
Alias (byte*) print_char_cursor#30 = (byte*) print_char_cursor#68 (byte*) print_char_cursor#84 
Alias (byte) main::i#1 = (byte/signed word/word/dword/signed dword~) main::$19 
Alias (byte*) print_char_cursor#31 = (byte*) print_char_cursor#69 
Alias (byte*) print_char_cursor#32 = (byte*) print_char_cursor#70 
Alias (byte*) print_char_cursor#33 = (byte*) print_char_cursor#71 
Alias (byte*) print_char_cursor#34 = (byte*) print_char_cursor#72 
Alias (byte*) print_char_cursor#35 = (byte*) print_char_cursor#73 
Alias (byte*) print_char_cursor#36 = (byte*) print_char_cursor#74 
Alias (byte*) print_line_cursor#18 = (byte*) print_line_cursor#8 (byte*) print_line_cursor#19 (byte*) print_line_cursor#9 
Alias (byte*) print_char_cursor#37 = (byte*) print_char_cursor#75 (byte*) print_char_cursor#76 (byte*) print_char_cursor#38 
Alias (word) lin16u_gen::ampl#0 = (word~) lin16u_gen::$0 
Alias (word) divr16u::divisor#0 = (word/signed dword/dword~) lin16u_gen::$1 
Alias (word) divr16u::return#2 = (word) divr16u::return#5 
Alias (word) lin16u_gen::length#3 = (word) lin16u_gen::length#4 (word) lin16u_gen::length#6 
Alias (word) lin16u_gen::min#3 = (word) lin16u_gen::min#5 (word) lin16u_gen::min#4 
Alias (word*) lin16u_gen::lintab#5 = (word*) lin16u_gen::lintab#6 (word*) lin16u_gen::lintab#7 
Alias (word) rem16u#16 = (word) rem16u#7 
Alias (word) lin16u_gen::stepi#0 = (word~) lin16u_gen::$2 (word) lin16u_gen::stepi#1 
Alias (word) divr16u::divisor#1 = (word/signed dword/dword~) lin16u_gen::$3 
Alias (word) divr16u::return#3 = (word) divr16u::return#6 
Alias (word) rem16u#17 = (word) rem16u#8 
Alias (word) lin16u_gen::stepf#0 = (word~) lin16u_gen::$4 
Alias (dword) lin16u_gen::val#1 = (dword~) lin16u_gen::$6 
Alias (word*) lin16u_gen::lintab#3 = (word*~) lin16u_gen::$7 
Alias (word) rem16u#18 = (word) rem16u#23 (word) rem16u#9 
Alias (word) rem16u#10 = (word) rem16u#19 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#20 
Alias (byte*) print_char_cursor#39 = (byte*) print_char_cursor#77 
Successful SSA optimization Pass2AliasElimination
Alias (word) divr16u::dividend#3 = (word) divr16u::dividend#4 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#2 = (word) divr16u::divisor#4 (word) divr16u::divisor#7 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#0 = (word) divr16u::dividend#6 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (word) divr16u::divisor#2
Self Phi Eliminated (byte*) print_char_cursor#42
Self Phi Eliminated (byte*) print_line_cursor#14
Self Phi Eliminated (word) rem16u#15
Self Phi Eliminated (dword) lin16u_gen::step#1
Self Phi Eliminated (word) lin16u_gen::length#5
Self Phi Eliminated (word) rem16u#18
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (word) divr16u::divisor#2 (word) divr16u::divisor#6
Redundant Phi (byte*) print_char_cursor#42 (byte*) print_char_cursor#79
Redundant Phi (byte*) print_char_cursor#44 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#45 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#47 (byte*) print_char_cursor#11
Redundant Phi (byte*) print_char_cursor#10 (byte*) print_char_cursor#11
Redundant Phi (byte*) print_screen#1 (byte*) print_screen#4
Redundant Phi (byte*) print_line_cursor#14 (byte*) print_screen#1
Redundant Phi (word) rem16u#20 (word) rem16u#0
Redundant Phi (byte*) print_screen#4 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_line_cursor#22 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_char_cursor#82 (byte*) print_line_cursor#0
Redundant Phi (word) rem16u#12 (word) rem16u#18
Redundant Phi (word) rem16u#13 (word) rem16u#18
Redundant Phi (word) rem16u#14 (word) rem16u#18
Redundant Phi (byte*) print_line_cursor#15 (byte*) print_line_cursor#14
Redundant Phi (byte*) print_char_cursor#15 (byte*) print_line_cursor#14
Redundant Phi (byte*) print_char_cursor#16 (byte*) print_char_cursor#2
Redundant Phi (byte*) print_char_cursor#17 (byte*) print_char_cursor#45
Redundant Phi (byte*) print_char_cursor#18 (byte*) print_char_cursor#2
Redundant Phi (byte*) print_char_cursor#19 (byte*) print_char_cursor#45
Redundant Phi (byte*) print_char_cursor#20 (byte*) print_char_cursor#2
Redundant Phi (byte*) print_char_cursor#21 (byte*) print_char_cursor#45
Redundant Phi (byte*) print_line_cursor#16 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#22 (byte*) print_line_cursor#1
Redundant Phi (word) rem16u#15 (word) rem16u#14
Redundant Phi (byte*) print_char_cursor#23 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#24 (byte*) print_char_cursor#2
Redundant Phi (byte*) print_char_cursor#25 (byte*) print_char_cursor#45
Redundant Phi (byte*) print_char_cursor#26 (byte*) print_char_cursor#2
Redundant Phi (byte*) print_char_cursor#27 (byte*) print_char_cursor#45
Redundant Phi (byte*) print_char_cursor#28 (byte*) print_char_cursor#2
Redundant Phi (byte*) print_char_cursor#29 (byte*) print_char_cursor#45
Redundant Phi (byte*) print_line_cursor#17 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#30 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#31 (byte*) print_char_cursor#2
Redundant Phi (byte*) print_char_cursor#32 (byte*) print_char_cursor#45
Redundant Phi (byte*) print_char_cursor#33 (byte*) print_char_cursor#2
Redundant Phi (byte*) print_char_cursor#34 (byte*) print_char_cursor#45
Redundant Phi (byte*) print_char_cursor#35 (byte*) print_char_cursor#2
Redundant Phi (byte*) print_char_cursor#36 (byte*) print_char_cursor#45
Redundant Phi (byte*) print_line_cursor#18 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#37 (byte*) print_line_cursor#1
Redundant Phi (word) rem16u#16 (word) rem16u#1
Redundant Phi (word) rem16u#17 (word) rem16u#1
Redundant Phi (dword) lin16u_gen::step#1 (dword) lin16u_gen::step#0
Redundant Phi (word) lin16u_gen::length#5 (word) lin16u_gen::length#3
Redundant Phi (word) rem16u#18 (word) rem16u#17
Redundant Phi (word) rem16u#10 (word) rem16u#15
Redundant Phi (byte*) print_line_cursor#10 (byte*) print_line_cursor#18
Redundant Phi (byte*) print_char_cursor#39 (byte*) print_char_cursor#37
Successful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte*) print_char_cursor#79 (byte*) print_char_cursor#11
Redundant Phi (byte*) print_char_cursor#80 (byte*) print_char_cursor#2
Redundant Phi (byte*) print_char_cursor#83 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_line_cursor#24 (byte*) print_line_cursor#1
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) divr16u::$4 [12] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [20] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [27] if((byte) divr16u::i#1!=rangelast(0,15)) goto divr16u::@1
Simple Condition (bool~) print_str::$0 [50] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2
Simple Condition (bool~) print_ln::$1 [63] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1
Simple Condition (bool~) print_cls::$1 [113] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) main::$21 [216] if((byte) main::i#1<(byte/signed byte/word/signed word/dword/signed dword~) main::$20) goto main::@1
Simple Condition (bool~) lin16u_gen::$8 [286] if((word) lin16u_gen::i#1<(word) lin16u_gen::length#3) goto lin16u_gen::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) rem8u#0 = 0
Constant (const word) rem16u#0 = 0
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const signed byte) rem8s#0 = 0
Constant (const signed word) rem16s#0 = 0
Constant (const byte*) print_line_cursor#0 = ((byte*))1024
Constant (const byte[]) print_hextab#0 = $0
Constant (const word[20]) main::lintab1#0 = { fill( 20, 0) }
Constant (const word) lin16u_gen::min#0 = 557
Constant (const word) lin16u_gen::max#0 = 29793
Constant (const word) lin16u_gen::length#0 = 20
Constant (const word[20]) main::lintab2#0 = { fill( 20, 0) }
Constant (const word) lin16u_gen::min#1 = 31179
Constant (const word) lin16u_gen::max#1 = 63361
Constant (const word) lin16u_gen::length#1 = 20
Constant (const word[20]) main::lintab3#0 = { fill( 20, 0) }
Constant (const word) lin16u_gen::min#2 = 0
Constant (const word) lin16u_gen::max#2 = 25736
Constant (const word) lin16u_gen::length#2 = 20
Constant (const byte*) print_str::str#1 = main::str
Constant (const word) print_word::w#0 = 557
Constant (const byte*) print_str::str#2 = main::str1
Constant (const word) print_word::w#1 = 31179
Constant (const byte*) print_str::str#3 = main::str2
Constant (const word) print_word::w#2 = 0
Constant (const byte) main::i#0 = 0
Constant (const byte*) print_str::str#4 = main::str3
Constant (const byte*) print_str::str#5 = main::str4
Constant (const byte*) print_str::str#6 = main::str5
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$20 = 20*2
Constant (const byte*) print_str::str#7 = main::str6
Constant (const word) print_word::w#6 = 29793
Constant (const byte*) print_str::str#8 = main::str7
Constant (const word) print_word::w#7 = 63361
Constant (const byte*) print_str::str#9 = main::str8
Constant (const word) print_word::w#8 = 25736
Constant (const word) divr16u::rem#3 = 0
Constant (const word) divr16u::dividend#2 = 0
Constant (const word) lin16u_gen::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Constant (const byte*) print_cls::$0 = print_line_cursor#0+1000
Constant (const word*) lin16u_gen::lintab#0 = main::lintab1#0
Constant (const word*) lin16u_gen::lintab#1 = main::lintab2#0
Constant (const word*) lin16u_gen::lintab#2 = main::lintab3#0
Successful SSA optimization Pass2ConstantIdentification
Fixing inline constructor with lin16u_gen::$9 ← lin16u_gen::stepi#0 dw= lin16u_gen::stepf#0
Fixing inline constructor with lin16u_gen::$10 ← lin16u_gen::min#3 dw= 0
Successful SSA optimization Pass2FixInlineConstructors
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Resolved ranged next value divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value if(divr16u::i#1!=rangelast(0,15)) goto divr16u::@1 to (byte/signed byte/word/signed word/dword/signed dword) 16
Culled Empty Block (label) @2
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @8
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) @20
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@28
Culled Empty Block (label) @30
Successful SSA optimization Pass2CullEmptyBlocks
Alias (dword) lin16u_gen::step#0 = (dword~) lin16u_gen::$9 
Alias (dword) lin16u_gen::val#0 = (dword~) lin16u_gen::$10 
Successful SSA optimization Pass2AliasElimination
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::dividend#2
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte*) print_str::str#3
Inlining constant with var siblings (const byte*) print_str::str#4
Inlining constant with var siblings (const byte*) print_str::str#5
Inlining constant with var siblings (const byte*) print_str::str#6
Inlining constant with var siblings (const byte*) print_str::str#7
Inlining constant with var siblings (const byte*) print_str::str#8
Inlining constant with var siblings (const byte*) print_str::str#9
Inlining constant with var siblings (const word) print_word::w#0
Inlining constant with var siblings (const word) print_word::w#1
Inlining constant with var siblings (const word) print_word::w#2
Inlining constant with var siblings (const word) print_word::w#6
Inlining constant with var siblings (const word) print_word::w#7
Inlining constant with var siblings (const word) print_word::w#8
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const word) lin16u_gen::min#0
Inlining constant with var siblings (const word) lin16u_gen::max#0
Inlining constant with var siblings (const word) lin16u_gen::length#0
Inlining constant with var siblings (const word) lin16u_gen::min#1
Inlining constant with var siblings (const word) lin16u_gen::max#1
Inlining constant with var siblings (const word) lin16u_gen::length#1
Inlining constant with var siblings (const word) lin16u_gen::min#2
Inlining constant with var siblings (const word) lin16u_gen::max#2
Inlining constant with var siblings (const word) lin16u_gen::length#2
Inlining constant with var siblings (const word) lin16u_gen::i#0
Inlining constant with var siblings (const word*) lin16u_gen::lintab#0
Inlining constant with var siblings (const word*) lin16u_gen::lintab#1
Inlining constant with var siblings (const word*) lin16u_gen::lintab#2
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined divr16u::rem#3 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::$0 = ((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000
Constant inlined divr16u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined lin16u_gen::max#0 = (word/signed word/dword/signed dword) 29793
Constant inlined lin16u_gen::max#2 = (word/signed word/dword/signed dword) 25736
Constant inlined lin16u_gen::max#1 = (word/dword/signed dword) 63361
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined divr16u::quotient#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined lin16u_gen::min#0 = (word/signed word/dword/signed dword) 557
Constant inlined print_line_cursor#0 = ((byte*))(word/signed word/dword/signed dword) 1024
Constant inlined print_word::w#1 = (word/signed word/dword/signed dword) 31179
Constant inlined print_word::w#0 = (word/signed word/dword/signed dword) 557
Constant inlined print_word::w#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::sc#0 = ((byte*))(word/signed word/dword/signed dword) 1024
Constant inlined main::$20 = (byte/signed byte/word/signed word/dword/signed dword) 20*(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined divr16u::dividend#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_word::w#7 = (word/dword/signed dword) 63361
Constant inlined print_word::w#6 = (word/signed word/dword/signed dword) 29793
Constant inlined print_word::w#8 = (word/signed word/dword/signed dword) 25736
Constant inlined lin16u_gen::length#2 = (byte/signed byte/word/signed word/dword/signed dword) 20
Constant inlined print_str::str#9 = (const string) main::str8
Constant inlined lin16u_gen::length#1 = (byte/signed byte/word/signed word/dword/signed dword) 20
Constant inlined lin16u_gen::length#0 = (byte/signed byte/word/signed word/dword/signed dword) 20
Constant inlined print_str::str#4 = (const string) main::str3
Constant inlined print_str::str#3 = (const string) main::str2
Constant inlined print_str::str#2 = (const string) main::str1
Constant inlined print_str::str#1 = (const string) main::str
Constant inlined print_str::str#8 = (const string) main::str7
Constant inlined lin16u_gen::lintab#2 = (const word[20]) main::lintab3#0
Constant inlined lin16u_gen::min#1 = (word/signed word/dword/signed dword) 31179
Constant inlined lin16u_gen::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#7 = (const string) main::str6
Constant inlined lin16u_gen::lintab#1 = (const word[20]) main::lintab2#0
Constant inlined lin16u_gen::min#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#6 = (const string) main::str5
Constant inlined lin16u_gen::lintab#0 = (const word[20]) main::lintab1#0
Constant inlined print_str::str#5 = (const string) main::str4
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (word) lin16u_gen::length#3 (byte/signed byte/word/signed word/dword/signed dword) 20
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const word) divr16u::divisor#0 = 20-1
Constant (const word) divr16u::divisor#1 = 20-1
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const word) divr16u::divisor#0
Inlining constant with var siblings (const word) divr16u::divisor#1
Constant inlined divr16u::divisor#1 = (byte/signed byte/word/signed word/dword/signed dword) 20-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined divr16u::divisor#0 = (byte/signed byte/word/signed word/dword/signed dword) 20-(byte/signed byte/word/signed word/dword/signed dword) 1
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@29(between main::@21 and main::@1)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Added new block during phi lifting lin16u_gen::@5(between lin16u_gen::@1 and lin16u_gen::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @29
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of main::@26
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to lin16u_gen:5 lin16u_gen:7 lin16u_gen:9 print_cls:11 print_str:13 print_word:15 print_str:17 print_word:19 print_str:21 print_word:23 print_ln:25 print_byte:30 print_str:32 print_word:35 print_str:37 print_word:40 print_str:42 print_word:45 print_ln:47 print_str:51 print_word:53 print_str:55 print_word:57 print_str:59 print_word:61 print_ln:63 
Calls in [print_word] to print_byte:77 print_byte:81 
Calls in [print_byte] to print_char:88 print_char:93 
Calls in [lin16u_gen] to divr16u:121 divr16u:126 

Created 29 initial phi equivalence classes
Coalesced [16] print_char_cursor#103 ← print_char_cursor#11
Coalesced (already) [20] print_char_cursor#96 ← print_char_cursor#11
Coalesced [28] print_byte::b#5 ← print_byte::b#2
Not coalescing [29] print_char_cursor#91 ← print_line_cursor#1
Coalesced (already) [31] print_char_cursor#97 ← print_char_cursor#11
Coalesced [34] print_word::w#11 ← print_word::w#3
Coalesced (already) [36] print_char_cursor#98 ← print_char_cursor#11
Coalesced [39] print_word::w#12 ← print_word::w#4
Coalesced (already) [41] print_char_cursor#99 ← print_char_cursor#11
Coalesced [44] print_word::w#13 ← print_word::w#5
Coalesced [46] print_line_cursor#49 ← print_line_cursor#1
Not coalescing [50] print_char_cursor#100 ← print_line_cursor#1
Coalesced (already) [54] print_char_cursor#101 ← print_char_cursor#11
Coalesced (already) [58] print_char_cursor#102 ← print_char_cursor#11
Coalesced (already) [62] print_line_cursor#50 ← print_line_cursor#1
Coalesced [65] main::i#11 ← main::i#1
Coalesced [67] print_line_cursor#51 ← print_line_cursor#21
Coalesced (already) [72] print_line_cursor#52 ← print_line_cursor#1
Coalesced [75] print_byte::b#6 ← print_byte::b#0
Coalesced [76] print_char_cursor#92 ← print_char_cursor#2
Coalesced [79] print_byte::b#7 ← print_byte::b#1
Coalesced [80] print_char_cursor#93 ← print_char_cursor#11
Coalesced [86] print_char::ch#3 ← print_char::ch#0
Coalesced [87] print_char_cursor#94 ← print_char_cursor#81
Coalesced [91] print_char::ch#4 ← print_char::ch#1
Coalesced (already) [92] print_char_cursor#95 ← print_char_cursor#11
Coalesced [100] print_str::str#13 ← print_str::str#12
Coalesced (already) [101] print_char_cursor#104 ← print_char_cursor#86
Coalesced [108] print_str::str#14 ← print_str::str#0
Coalesced [109] print_char_cursor#105 ← print_char_cursor#1
Coalesced [116] print_cls::sc#3 ← print_cls::sc#1
Coalesced [120] divr16u::dividend#9 ← divr16u::dividend#1
Coalesced [125] divr16u::rem#12 ← divr16u::rem#4
Coalesced [131] lin16u_gen::val#4 ← lin16u_gen::val#0
Coalesced [132] lin16u_gen::lintab#9 ← lin16u_gen::lintab#5
Coalesced [141] lin16u_gen::val#3 ← lin16u_gen::val#1
Coalesced [142] lin16u_gen::lintab#8 ← lin16u_gen::lintab#3
Coalesced [143] lin16u_gen::i#3 ← lin16u_gen::i#1
Coalesced [145] divr16u::rem#13 ← divr16u::rem#10
Coalesced [146] divr16u::dividend#10 ← divr16u::dividend#5
Coalesced [153] divr16u::rem#16 ← divr16u::rem#1
Coalesced [160] divr16u::rem#18 ← divr16u::rem#2
Coalesced [161] divr16u::return#8 ← divr16u::quotient#2
Coalesced [167] divr16u::rem#14 ← divr16u::rem#11
Coalesced [168] divr16u::dividend#11 ← divr16u::dividend#0
Coalesced [169] divr16u::quotient#9 ← divr16u::return#0
Coalesced [170] divr16u::i#7 ← divr16u::i#1
Coalesced [171] divr16u::rem#17 ← divr16u::rem#6
Coalesced [172] divr16u::return#7 ← divr16u::quotient#1
Coalesced [173] divr16u::rem#15 ← divr16u::rem#0
Coalesced down to 18 phi equivalence classes
Culled Empty Block (label) main::@29
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_cls::@3
Culled Empty Block (label) lin16u_gen::@5
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @29
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@23
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of main::@25
Adding NOP phi() at start of main::@26
Adding NOP phi() at start of main::@27
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@29
@29: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @29
  [3] phi()
main: scope:[main]  from @29
  [4] phi()
  [5] call lin16u_gen 
  to:main::@3
main::@3: scope:[main]  from main
  [6] phi()
  [7] call lin16u_gen 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [8] phi()
  [9] call lin16u_gen 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] phi()
  [11] call print_cls 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [12] phi()
  [13] call print_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [14] phi()
  [15] call print_word 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [16] phi()
  [17] call print_str 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [18] phi()
  [19] call print_word 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [20] phi()
  [21] call print_str 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [22] phi()
  [23] call print_word 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [24] phi()
  [25] call print_ln 
  to:main::@1
main::@1: scope:[main]  from main::@12 main::@21
  [26] (byte) main::i#10 ← phi( main::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@21/(byte) main::i#1 )
  [27] (byte) print_byte::b#2 ← (byte) main::i#10
  [28] (byte*~) print_char_cursor#91 ← (byte*) print_line_cursor#1
  [29] call print_byte 
  to:main::@14
main::@14: scope:[main]  from main::@1
  [30] phi()
  [31] call print_str 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [32] (word) print_word::w#3 ← *((const word[20]) main::lintab1#0 + (byte) main::i#10)
  [33] call print_word 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [34] phi()
  [35] call print_str 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [36] (word) print_word::w#4 ← *((const word[20]) main::lintab2#0 + (byte) main::i#10)
  [37] call print_word 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [38] phi()
  [39] call print_str 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [40] (word) print_word::w#5 ← *((const word[20]) main::lintab3#0 + (byte) main::i#10)
  [41] call print_word 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [42] phi()
  [43] call print_ln 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [44] (byte) main::i#1 ← (byte) main::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [45] if((byte) main::i#1<(byte/signed byte/word/signed word/dword/signed dword) 20*(byte/signed byte/word/signed word/dword/signed dword) 2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@21
  [46] (byte*~) print_char_cursor#100 ← (byte*) print_line_cursor#1
  [47] call print_str 
  to:main::@22
main::@22: scope:[main]  from main::@2
  [48] phi()
  [49] call print_word 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [50] phi()
  [51] call print_str 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [52] phi()
  [53] call print_word 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [54] phi()
  [55] call print_str 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [56] phi()
  [57] call print_word 
  to:main::@27
main::@27: scope:[main]  from main::@26
  [58] phi()
  [59] call print_ln 
  to:main::@return
main::@return: scope:[main]  from main::@27
  [60] return 
  to:@return
print_ln: scope:[print_ln]  from main::@12 main::@20 main::@27
  [61] (byte*) print_line_cursor#21 ← phi( main::@12/((byte*))(word/signed word/dword/signed dword) 1024 main::@20/(byte*) print_line_cursor#1 main::@27/(byte*) print_line_cursor#1 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [62] (byte*) print_line_cursor#11 ← phi( print_ln/(byte*) print_line_cursor#21 print_ln::@1/(byte*) print_line_cursor#1 )
  [63] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [64] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [65] return 
  to:@return
print_word: scope:[print_word]  from main::@11 main::@15 main::@17 main::@19 main::@22 main::@24 main::@26 main::@7 main::@9
  [66] (word) print_word::w#10 ← phi( main::@11/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@15/(word) print_word::w#3 main::@17/(word) print_word::w#4 main::@19/(word) print_word::w#5 main::@22/(word/signed word/dword/signed dword) 29793 main::@24/(word/dword/signed dword) 63361 main::@26/(word/signed word/dword/signed dword) 25736 main::@7/(word/signed word/dword/signed dword) 557 main::@9/(word/signed word/dword/signed dword) 31179 )
  [67] (byte) print_byte::b#0 ← > (word) print_word::w#10
  [68] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [69] (byte) print_byte::b#1 ← < (word) print_word::w#10
  [70] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [71] return 
  to:@return
print_byte: scope:[print_byte]  from main::@1 print_word print_word::@1
  [72] (byte*) print_char_cursor#81 ← phi( main::@1/(byte*~) print_char_cursor#91 print_word/(byte*) print_char_cursor#2 print_word::@1/(byte*) print_char_cursor#11 )
  [72] (byte) print_byte::b#3 ← phi( main::@1/(byte) print_byte::b#2 print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [73] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [74] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [75] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [76] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte/signed byte/word/signed word/dword/signed dword) 15
  [77] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [78] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [79] return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  [80] (byte*) print_char_cursor#50 ← phi( print_byte/(byte*) print_char_cursor#81 print_byte::@1/(byte*) print_char_cursor#11 )
  [80] (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  [81] *((byte*) print_char_cursor#50) ← (byte) print_char::ch#2
  [82] (byte*) print_char_cursor#11 ← ++ (byte*) print_char_cursor#50
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [83] return 
  to:@return
print_str: scope:[print_str]  from main::@10 main::@14 main::@16 main::@18 main::@2 main::@23 main::@25 main::@6 main::@8
  [84] (byte*) print_char_cursor#86 ← phi( main::@10/(byte*) print_char_cursor#11 main::@14/(byte*) print_char_cursor#11 main::@16/(byte*) print_char_cursor#11 main::@18/(byte*) print_char_cursor#11 main::@2/(byte*~) print_char_cursor#100 main::@23/(byte*) print_char_cursor#11 main::@25/(byte*) print_char_cursor#11 main::@6/((byte*))(word/signed word/dword/signed dword) 1024 main::@8/(byte*) print_char_cursor#11 )
  [84] (byte*) print_str::str#12 ← phi( main::@10/(const string) main::str2 main::@14/(const string) main::str3 main::@16/(const string) main::str4 main::@18/(const string) main::str5 main::@2/(const string) main::str6 main::@23/(const string) main::str7 main::@25/(const string) main::str8 main::@6/(const string) main::str main::@8/(const string) main::str1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [85] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#86 print_str::@2/(byte*) print_char_cursor#1 )
  [85] (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@2/(byte*) print_str::str#0 )
  [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [87] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10)
  [89] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [90] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10
  to:print_str::@1
print_cls: scope:[print_cls]  from main::@5
  [91] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [92] (byte*) print_cls::sc#2 ← phi( print_cls/((byte*))(word/signed word/dword/signed dword) 1024 print_cls::@1/(byte*) print_cls::sc#1 )
  [93] *((byte*) print_cls::sc#2) ← (byte) ' '
  [94] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [95] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [96] return 
  to:@return
lin16u_gen: scope:[lin16u_gen]  from main main::@3 main::@4
  [97] (word*) lin16u_gen::lintab#5 ← phi( main/(const word[20]) main::lintab1#0 main::@3/(const word[20]) main::lintab2#0 main::@4/(const word[20]) main::lintab3#0 )
  [97] (word) lin16u_gen::min#3 ← phi( main/(word/signed word/dword/signed dword) 557 main::@3/(word/signed word/dword/signed dword) 31179 main::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [97] (word) lin16u_gen::max#3 ← phi( main/(word/signed word/dword/signed dword) 29793 main::@3/(word/dword/signed dword) 63361 main::@4/(word/signed word/dword/signed dword) 25736 )
  [98] (word) lin16u_gen::ampl#0 ← (word) lin16u_gen::max#3 - (word) lin16u_gen::min#3
  [99] (word) divr16u::dividend#1 ← (word) lin16u_gen::ampl#0
  [100] call divr16u 
  [101] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:lin16u_gen::@3
lin16u_gen::@3: scope:[lin16u_gen]  from lin16u_gen
  [102] (word) lin16u_gen::stepi#0 ← (word) divr16u::return#2
  [103] (word) divr16u::rem#4 ← (word) rem16u#1
  [104] call divr16u 
  [105] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:lin16u_gen::@4
lin16u_gen::@4: scope:[lin16u_gen]  from lin16u_gen::@3
  [106] (word) lin16u_gen::stepf#0 ← (word) divr16u::return#3
  [107] (dword) lin16u_gen::step#0 ← (word) lin16u_gen::stepi#0 dw= (word) lin16u_gen::stepf#0
  [108] (dword) lin16u_gen::val#0 ← (word) lin16u_gen::min#3 dw= (byte/signed byte/word/signed word/dword/signed dword) 0
  to:lin16u_gen::@1
lin16u_gen::@1: scope:[lin16u_gen]  from lin16u_gen::@1 lin16u_gen::@4
  [109] (word) lin16u_gen::i#2 ← phi( lin16u_gen::@1/(word) lin16u_gen::i#1 lin16u_gen::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [109] (word*) lin16u_gen::lintab#4 ← phi( lin16u_gen::@1/(word*) lin16u_gen::lintab#3 lin16u_gen::@4/(word*) lin16u_gen::lintab#5 )
  [109] (dword) lin16u_gen::val#2 ← phi( lin16u_gen::@1/(dword) lin16u_gen::val#1 lin16u_gen::@4/(dword) lin16u_gen::val#0 )
  [110] (word~) lin16u_gen::$5 ← > (dword) lin16u_gen::val#2
  [111] *((word*) lin16u_gen::lintab#4) ← (word~) lin16u_gen::$5
  [112] (dword) lin16u_gen::val#1 ← (dword) lin16u_gen::val#2 + (dword) lin16u_gen::step#0
  [113] (word*) lin16u_gen::lintab#3 ← (word*) lin16u_gen::lintab#4 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [114] (word) lin16u_gen::i#1 ← ++ (word) lin16u_gen::i#2
  [115] if((word) lin16u_gen::i#1<(byte/signed byte/word/signed word/dword/signed dword) 20) goto lin16u_gen::@1
  to:lin16u_gen::@return
lin16u_gen::@return: scope:[lin16u_gen]  from lin16u_gen::@1
  [116] return 
  to:@return
divr16u: scope:[divr16u]  from lin16u_gen lin16u_gen::@3
  [117] (word) divr16u::divisor#6 ← phi( lin16u_gen/(byte/signed byte/word/signed word/dword/signed dword) 20-(byte/signed byte/word/signed word/dword/signed dword) 1 lin16u_gen::@3/(byte/signed byte/word/signed word/dword/signed dword) 20-(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [117] (word) divr16u::dividend#5 ← phi( lin16u_gen/(word) divr16u::dividend#1 lin16u_gen::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [117] (word) divr16u::rem#10 ← phi( lin16u_gen/(byte/signed byte/word/signed word/dword/signed dword) 0 lin16u_gen::@3/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [118] (byte) divr16u::i#2 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(byte) divr16u::i#1 )
  [118] (word) divr16u::quotient#3 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::return#0 )
  [118] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [118] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [119] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [120] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [121] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128
  [122] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [123] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [124] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [125] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [126] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [127] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [128] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [129] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [130] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [130] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [131] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [132] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [133] (word) rem16u#1 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [134] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 22.0
(byte~) divr16u::$2 22.0
(word) divr16u::dividend
(word) divr16u::dividend#0 2.75
(word) divr16u::dividend#1 4.0
(word) divr16u::dividend#3 5.0
(word) divr16u::dividend#5 4.0
(word) divr16u::divisor
(word) divr16u::divisor#6 1.375
(byte) divr16u::i
(byte) divr16u::i#1 16.5
(byte) divr16u::i#2 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 16.5
(word) divr16u::quotient#2 11.0
(word) divr16u::quotient#3 2.75
(word) divr16u::rem
(word) divr16u::rem#0 8.25
(word) divr16u::rem#1 22.0
(word) divr16u::rem#10 4.0
(word) divr16u::rem#11 11.666666666666666
(word) divr16u::rem#2 22.0
(word) divr16u::rem#4 4.0
(word) divr16u::rem#5 24.0
(word) divr16u::rem#6 11.0
(word) divr16u::return
(word) divr16u::return#0 5.285714285714286
(word) divr16u::return#2 4.0
(word) divr16u::return#3 4.0
(void()) lin16u_gen((word) lin16u_gen::min , (word) lin16u_gen::max , (word*) lin16u_gen::lintab , (word) lin16u_gen::length)
(word~) lin16u_gen::$5 22.0
(word) lin16u_gen::ampl
(word) lin16u_gen::ampl#0 4.0
(word) lin16u_gen::i
(word) lin16u_gen::i#1 16.5
(word) lin16u_gen::i#2 4.4
(word) lin16u_gen::length
(word*) lin16u_gen::lintab
(word*) lin16u_gen::lintab#3 7.333333333333333
(word*) lin16u_gen::lintab#4 8.75
(word*) lin16u_gen::lintab#5 0.16666666666666666
(word) lin16u_gen::max
(word) lin16u_gen::max#3 2.0
(word) lin16u_gen::min
(word) lin16u_gen::min#3 0.36363636363636365
(dword) lin16u_gen::step
(dword) lin16u_gen::step#0 1.4444444444444446
(word) lin16u_gen::stepf
(word) lin16u_gen::stepf#0 4.0
(word) lin16u_gen::stepi
(word) lin16u_gen::stepi#0 0.8
(dword) lin16u_gen::val
(dword) lin16u_gen::val#0 4.0
(dword) lin16u_gen::val#1 5.5
(dword) lin16u_gen::val#2 11.666666666666666
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#10 3.666666666666667
(word[20]) main::lintab1
(word[20]) main::lintab2
(word[20]) main::lintab3
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 11.0
(byte) print_byte::b#3 4.75
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 4.0
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 101.0
(byte*~) print_char_cursor#100 4.0
(byte*) print_char_cursor#11 4.228571428571427
(byte*) print_char_cursor#2 12.791666666666664
(byte*) print_char_cursor#50 4.0
(byte*) print_char_cursor#81 5.666666666666667
(byte*) print_char_cursor#86 45.0
(byte*~) print_char_cursor#91 22.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 8.891891891891891
(byte*) print_line_cursor#11 204.0
(byte*) print_line_cursor#21 15.0
(void()) print_ln()
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#10 101.5
(byte*) print_str::str#12 2.0
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#10 12.333333333333332
(word) print_word::w#3 22.0
(word) print_word::w#4 22.0
(word) print_word::w#5 22.0
(signed word) rem16s
(word) rem16u
(word) rem16u#1 0.8
(signed byte) rem8s
(byte) rem8u

Initial phi equivalence classes
[ main::i#10 main::i#1 ]
[ print_line_cursor#11 print_line_cursor#21 print_line_cursor#1 ]
[ print_word::w#10 print_word::w#3 print_word::w#4 print_word::w#5 ]
[ print_byte::b#3 print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#86 print_char_cursor#50 print_char_cursor#81 print_char_cursor#91 print_char_cursor#2 print_char_cursor#11 print_char_cursor#100 print_char_cursor#1 ]
[ print_str::str#10 print_str::str#12 print_str::str#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ lin16u_gen::max#3 ]
[ lin16u_gen::min#3 ]
[ lin16u_gen::val#2 lin16u_gen::val#1 lin16u_gen::val#0 ]
[ lin16u_gen::lintab#4 lin16u_gen::lintab#3 lin16u_gen::lintab#5 ]
[ lin16u_gen::i#2 lin16u_gen::i#1 ]
[ divr16u::divisor#6 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable lin16u_gen::ampl#0 to zero page equivalence class [ lin16u_gen::ampl#0 ]
Added variable divr16u::return#2 to zero page equivalence class [ divr16u::return#2 ]
Added variable lin16u_gen::stepi#0 to zero page equivalence class [ lin16u_gen::stepi#0 ]
Added variable divr16u::return#3 to zero page equivalence class [ divr16u::return#3 ]
Added variable lin16u_gen::stepf#0 to zero page equivalence class [ lin16u_gen::stepf#0 ]
Added variable lin16u_gen::step#0 to zero page equivalence class [ lin16u_gen::step#0 ]
Added variable lin16u_gen::$5 to zero page equivalence class [ lin16u_gen::$5 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Added variable rem16u#1 to zero page equivalence class [ rem16u#1 ]
Complete equivalence classes
[ main::i#10 main::i#1 ]
[ print_line_cursor#11 print_line_cursor#21 print_line_cursor#1 ]
[ print_word::w#10 print_word::w#3 print_word::w#4 print_word::w#5 ]
[ print_byte::b#3 print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#86 print_char_cursor#50 print_char_cursor#81 print_char_cursor#91 print_char_cursor#2 print_char_cursor#11 print_char_cursor#100 print_char_cursor#1 ]
[ print_str::str#10 print_str::str#12 print_str::str#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ lin16u_gen::max#3 ]
[ lin16u_gen::min#3 ]
[ lin16u_gen::val#2 lin16u_gen::val#1 lin16u_gen::val#0 ]
[ lin16u_gen::lintab#4 lin16u_gen::lintab#3 lin16u_gen::lintab#5 ]
[ lin16u_gen::i#2 lin16u_gen::i#1 ]
[ divr16u::divisor#6 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ lin16u_gen::ampl#0 ]
[ divr16u::return#2 ]
[ lin16u_gen::stepi#0 ]
[ divr16u::return#3 ]
[ lin16u_gen::stepf#0 ]
[ lin16u_gen::step#0 ]
[ lin16u_gen::$5 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#1 ]
Allocated zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Allocated zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#21 print_line_cursor#1 ]
Allocated zp ZP_WORD:5 [ print_word::w#10 print_word::w#3 print_word::w#4 print_word::w#5 ]
Allocated zp ZP_BYTE:7 [ print_byte::b#3 print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_BYTE:8 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
Allocated zp ZP_WORD:9 [ print_char_cursor#86 print_char_cursor#50 print_char_cursor#81 print_char_cursor#91 print_char_cursor#2 print_char_cursor#11 print_char_cursor#100 print_char_cursor#1 ]
Allocated zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ]
Allocated zp ZP_WORD:13 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_WORD:15 [ lin16u_gen::max#3 ]
Allocated zp ZP_WORD:17 [ lin16u_gen::min#3 ]
Allocated zp ZP_DWORD:19 [ lin16u_gen::val#2 lin16u_gen::val#1 lin16u_gen::val#0 ]
Allocated zp ZP_WORD:23 [ lin16u_gen::lintab#4 lin16u_gen::lintab#3 lin16u_gen::lintab#5 ]
Allocated zp ZP_WORD:25 [ lin16u_gen::i#2 lin16u_gen::i#1 ]
Allocated zp ZP_WORD:27 [ divr16u::divisor#6 ]
Allocated zp ZP_WORD:29 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp ZP_WORD:31 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#0 ]
Allocated zp ZP_WORD:33 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp ZP_BYTE:35 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp ZP_BYTE:36 [ print_byte::$0 ]
Allocated zp ZP_BYTE:37 [ print_byte::$2 ]
Allocated zp ZP_WORD:38 [ lin16u_gen::ampl#0 ]
Allocated zp ZP_WORD:40 [ divr16u::return#2 ]
Allocated zp ZP_WORD:42 [ lin16u_gen::stepi#0 ]
Allocated zp ZP_WORD:44 [ divr16u::return#3 ]
Allocated zp ZP_WORD:46 [ lin16u_gen::stepf#0 ]
Allocated zp ZP_DWORD:48 [ lin16u_gen::step#0 ]
Allocated zp ZP_WORD:52 [ lin16u_gen::$5 ]
Allocated zp ZP_BYTE:54 [ divr16u::$1 ]
Allocated zp ZP_BYTE:55 [ divr16u::$2 ]
Allocated zp ZP_WORD:56 [ rem16u#1 ]

INITIAL ASM
//SEG0 File Comments
//  Linear table generator
//  Work in progress towards a sinus generator
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label rem16u = $38
  .label print_char_cursor = 9
  .label print_line_cursor = 3
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @29 [phi:@begin->@29]
b29_from_bbegin:
  jmp b29
//SEG5 @29
b29:
//SEG6 [2] call main 
//SEG7 [4] phi from @29 to main [phi:@29->main]
main_from_b29:
  jsr main
//SEG8 [3] phi from @29 to @end [phi:@29->@end]
bend_from_b29:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label i = 2
  //SEG11 [5] call lin16u_gen 
  //SEG12 [97] phi from main to lin16u_gen [phi:main->lin16u_gen]
  lin16u_gen_from_main:
  //SEG13 [97] phi (word*) lin16u_gen::lintab#5 = (const word[20]) main::lintab1#0 [phi:main->lin16u_gen#0] -- pwuz1=pwuc1 
    lda #<lintab1
    sta lin16u_gen.lintab
    lda #>lintab1
    sta lin16u_gen.lintab+1
  //SEG14 [97] phi (word) lin16u_gen::min#3 = (word/signed word/dword/signed dword) 557 [phi:main->lin16u_gen#1] -- vwuz1=vwuc1 
    lda #<$22d
    sta lin16u_gen.min
    lda #>$22d
    sta lin16u_gen.min+1
  //SEG15 [97] phi (word) lin16u_gen::max#3 = (word/signed word/dword/signed dword) 29793 [phi:main->lin16u_gen#2] -- vwuz1=vwuc1 
    lda #<$7461
    sta lin16u_gen.max
    lda #>$7461
    sta lin16u_gen.max+1
    jsr lin16u_gen
  //SEG16 [6] phi from main to main::@3 [phi:main->main::@3]
  b3_from_main:
    jmp b3
  //SEG17 main::@3
  b3:
  //SEG18 [7] call lin16u_gen 
  //SEG19 [97] phi from main::@3 to lin16u_gen [phi:main::@3->lin16u_gen]
  lin16u_gen_from_b3:
  //SEG20 [97] phi (word*) lin16u_gen::lintab#5 = (const word[20]) main::lintab2#0 [phi:main::@3->lin16u_gen#0] -- pwuz1=pwuc1 
    lda #<lintab2
    sta lin16u_gen.lintab
    lda #>lintab2
    sta lin16u_gen.lintab+1
  //SEG21 [97] phi (word) lin16u_gen::min#3 = (word/signed word/dword/signed dword) 31179 [phi:main::@3->lin16u_gen#1] -- vwuz1=vwuc1 
    lda #<$79cb
    sta lin16u_gen.min
    lda #>$79cb
    sta lin16u_gen.min+1
  //SEG22 [97] phi (word) lin16u_gen::max#3 = (word/dword/signed dword) 63361 [phi:main::@3->lin16u_gen#2] -- vwuz1=vwuc1 
    lda #<$f781
    sta lin16u_gen.max
    lda #>$f781
    sta lin16u_gen.max+1
    jsr lin16u_gen
  //SEG23 [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG24 main::@4
  b4:
  //SEG25 [9] call lin16u_gen 
  //SEG26 [97] phi from main::@4 to lin16u_gen [phi:main::@4->lin16u_gen]
  lin16u_gen_from_b4:
  //SEG27 [97] phi (word*) lin16u_gen::lintab#5 = (const word[20]) main::lintab3#0 [phi:main::@4->lin16u_gen#0] -- pwuz1=pwuc1 
    lda #<lintab3
    sta lin16u_gen.lintab
    lda #>lintab3
    sta lin16u_gen.lintab+1
  //SEG28 [97] phi (word) lin16u_gen::min#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@4->lin16u_gen#1] -- vwuz1=vbuc1 
    lda #<0
    sta lin16u_gen.min
    lda #>0
    sta lin16u_gen.min+1
  //SEG29 [97] phi (word) lin16u_gen::max#3 = (word/signed word/dword/signed dword) 25736 [phi:main::@4->lin16u_gen#2] -- vwuz1=vwuc1 
    lda #<$6488
    sta lin16u_gen.max
    lda #>$6488
    sta lin16u_gen.max+1
    jsr lin16u_gen
  //SEG30 [10] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
  //SEG31 main::@5
  b5:
  //SEG32 [11] call print_cls 
  //SEG33 [91] phi from main::@5 to print_cls [phi:main::@5->print_cls]
  print_cls_from_b5:
    jsr print_cls
  //SEG34 [12] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    jmp b6
  //SEG35 main::@6
  b6:
  //SEG36 [13] call print_str 
  //SEG37 [84] phi from main::@6 to print_str [phi:main::@6->print_str]
  print_str_from_b6:
  //SEG38 [84] phi (byte*) print_char_cursor#86 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG39 [84] phi (byte*) print_str::str#12 = (const string) main::str [phi:main::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG40 [14] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
  //SEG41 main::@7
  b7:
  //SEG42 [15] call print_word 
  //SEG43 [66] phi from main::@7 to print_word [phi:main::@7->print_word]
  print_word_from_b7:
  //SEG44 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 557 [phi:main::@7->print_word#0] -- vwuz1=vwuc1 
    lda #<$22d
    sta print_word.w
    lda #>$22d
    sta print_word.w+1
    jsr print_word
  //SEG45 [16] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  b8_from_b7:
    jmp b8
  //SEG46 main::@8
  b8:
  //SEG47 [17] call print_str 
  //SEG48 [84] phi from main::@8 to print_str [phi:main::@8->print_str]
  print_str_from_b8:
  //SEG49 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@8->print_str#0] -- register_copy 
  //SEG50 [84] phi (byte*) print_str::str#12 = (const string) main::str1 [phi:main::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG51 [18] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
  //SEG52 main::@9
  b9:
  //SEG53 [19] call print_word 
  //SEG54 [66] phi from main::@9 to print_word [phi:main::@9->print_word]
  print_word_from_b9:
  //SEG55 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 31179 [phi:main::@9->print_word#0] -- vwuz1=vwuc1 
    lda #<$79cb
    sta print_word.w
    lda #>$79cb
    sta print_word.w+1
    jsr print_word
  //SEG56 [20] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
  //SEG57 main::@10
  b10:
  //SEG58 [21] call print_str 
  //SEG59 [84] phi from main::@10 to print_str [phi:main::@10->print_str]
  print_str_from_b10:
  //SEG60 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@10->print_str#0] -- register_copy 
  //SEG61 [84] phi (byte*) print_str::str#12 = (const string) main::str2 [phi:main::@10->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG62 [22] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
  //SEG63 main::@11
  b11:
  //SEG64 [23] call print_word 
  //SEG65 [66] phi from main::@11 to print_word [phi:main::@11->print_word]
  print_word_from_b11:
  //SEG66 [66] phi (word) print_word::w#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@11->print_word#0] -- vwuz1=vbuc1 
    lda #<0
    sta print_word.w
    lda #>0
    sta print_word.w+1
    jsr print_word
  //SEG67 [24] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  b12_from_b11:
    jmp b12
  //SEG68 main::@12
  b12:
  //SEG69 [25] call print_ln 
  //SEG70 [61] phi from main::@12 to print_ln [phi:main::@12->print_ln]
  print_ln_from_b12:
  //SEG71 [61] phi (byte*) print_line_cursor#21 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main::@12->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
  //SEG72 [26] phi from main::@12 to main::@1 [phi:main::@12->main::@1]
  b1_from_b12:
  //SEG73 [26] phi (byte) main::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@12->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG74 [26] phi from main::@21 to main::@1 [phi:main::@21->main::@1]
  b1_from_b21:
  //SEG75 [26] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@21->main::@1#0] -- register_copy 
    jmp b1
  //SEG76 main::@1
  b1:
  //SEG77 [27] (byte) print_byte::b#2 ← (byte) main::i#10 -- vbuz1=vbuz2 
    lda i
    sta print_byte.b
  //SEG78 [28] (byte*~) print_char_cursor#91 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG79 [29] call print_byte 
  //SEG80 [72] phi from main::@1 to print_byte [phi:main::@1->print_byte]
  print_byte_from_b1:
  //SEG81 [72] phi (byte*) print_char_cursor#81 = (byte*~) print_char_cursor#91 [phi:main::@1->print_byte#0] -- register_copy 
  //SEG82 [72] phi (byte) print_byte::b#3 = (byte) print_byte::b#2 [phi:main::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG83 [30] phi from main::@1 to main::@14 [phi:main::@1->main::@14]
  b14_from_b1:
    jmp b14
  //SEG84 main::@14
  b14:
  //SEG85 [31] call print_str 
  //SEG86 [84] phi from main::@14 to print_str [phi:main::@14->print_str]
  print_str_from_b14:
  //SEG87 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@14->print_str#0] -- register_copy 
  //SEG88 [84] phi (byte*) print_str::str#12 = (const string) main::str3 [phi:main::@14->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
    jmp b15
  //SEG89 main::@15
  b15:
  //SEG90 [32] (word) print_word::w#3 ← *((const word[20]) main::lintab1#0 + (byte) main::i#10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda lintab1,y
    sta print_word.w
    lda lintab1+1,y
    sta print_word.w+1
  //SEG91 [33] call print_word 
  //SEG92 [66] phi from main::@15 to print_word [phi:main::@15->print_word]
  print_word_from_b15:
  //SEG93 [66] phi (word) print_word::w#10 = (word) print_word::w#3 [phi:main::@15->print_word#0] -- register_copy 
    jsr print_word
  //SEG94 [34] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
  b16_from_b15:
    jmp b16
  //SEG95 main::@16
  b16:
  //SEG96 [35] call print_str 
  //SEG97 [84] phi from main::@16 to print_str [phi:main::@16->print_str]
  print_str_from_b16:
  //SEG98 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@16->print_str#0] -- register_copy 
  //SEG99 [84] phi (byte*) print_str::str#12 = (const string) main::str4 [phi:main::@16->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
    jmp b17
  //SEG100 main::@17
  b17:
  //SEG101 [36] (word) print_word::w#4 ← *((const word[20]) main::lintab2#0 + (byte) main::i#10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda lintab2,y
    sta print_word.w
    lda lintab2+1,y
    sta print_word.w+1
  //SEG102 [37] call print_word 
  //SEG103 [66] phi from main::@17 to print_word [phi:main::@17->print_word]
  print_word_from_b17:
  //SEG104 [66] phi (word) print_word::w#10 = (word) print_word::w#4 [phi:main::@17->print_word#0] -- register_copy 
    jsr print_word
  //SEG105 [38] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
  b18_from_b17:
    jmp b18
  //SEG106 main::@18
  b18:
  //SEG107 [39] call print_str 
  //SEG108 [84] phi from main::@18 to print_str [phi:main::@18->print_str]
  print_str_from_b18:
  //SEG109 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@18->print_str#0] -- register_copy 
  //SEG110 [84] phi (byte*) print_str::str#12 = (const string) main::str5 [phi:main::@18->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta print_str.str
    lda #>str5
    sta print_str.str+1
    jsr print_str
    jmp b19
  //SEG111 main::@19
  b19:
  //SEG112 [40] (word) print_word::w#5 ← *((const word[20]) main::lintab3#0 + (byte) main::i#10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda lintab3,y
    sta print_word.w
    lda lintab3+1,y
    sta print_word.w+1
  //SEG113 [41] call print_word 
  //SEG114 [66] phi from main::@19 to print_word [phi:main::@19->print_word]
  print_word_from_b19:
  //SEG115 [66] phi (word) print_word::w#10 = (word) print_word::w#5 [phi:main::@19->print_word#0] -- register_copy 
    jsr print_word
  //SEG116 [42] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
  b20_from_b19:
    jmp b20
  //SEG117 main::@20
  b20:
  //SEG118 [43] call print_ln 
  //SEG119 [61] phi from main::@20 to print_ln [phi:main::@20->print_ln]
  print_ln_from_b20:
  //SEG120 [61] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#1 [phi:main::@20->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b21
  //SEG121 main::@21
  b21:
  //SEG122 [44] (byte) main::i#1 ← (byte) main::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda i
    clc
    adc #2
    sta i
  //SEG123 [45] if((byte) main::i#1<(byte/signed byte/word/signed word/dword/signed dword) 20*(byte/signed byte/word/signed word/dword/signed dword) 2) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$14*2
    bcc b1_from_b21
    jmp b2
  //SEG124 main::@2
  b2:
  //SEG125 [46] (byte*~) print_char_cursor#100 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG126 [47] call print_str 
  //SEG127 [84] phi from main::@2 to print_str [phi:main::@2->print_str]
  print_str_from_b2:
  //SEG128 [84] phi (byte*) print_char_cursor#86 = (byte*~) print_char_cursor#100 [phi:main::@2->print_str#0] -- register_copy 
  //SEG129 [84] phi (byte*) print_str::str#12 = (const string) main::str6 [phi:main::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta print_str.str
    lda #>str6
    sta print_str.str+1
    jsr print_str
  //SEG130 [48] phi from main::@2 to main::@22 [phi:main::@2->main::@22]
  b22_from_b2:
    jmp b22
  //SEG131 main::@22
  b22:
  //SEG132 [49] call print_word 
  //SEG133 [66] phi from main::@22 to print_word [phi:main::@22->print_word]
  print_word_from_b22:
  //SEG134 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 29793 [phi:main::@22->print_word#0] -- vwuz1=vwuc1 
    lda #<$7461
    sta print_word.w
    lda #>$7461
    sta print_word.w+1
    jsr print_word
  //SEG135 [50] phi from main::@22 to main::@23 [phi:main::@22->main::@23]
  b23_from_b22:
    jmp b23
  //SEG136 main::@23
  b23:
  //SEG137 [51] call print_str 
  //SEG138 [84] phi from main::@23 to print_str [phi:main::@23->print_str]
  print_str_from_b23:
  //SEG139 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@23->print_str#0] -- register_copy 
  //SEG140 [84] phi (byte*) print_str::str#12 = (const string) main::str7 [phi:main::@23->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta print_str.str
    lda #>str7
    sta print_str.str+1
    jsr print_str
  //SEG141 [52] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  b24_from_b23:
    jmp b24
  //SEG142 main::@24
  b24:
  //SEG143 [53] call print_word 
  //SEG144 [66] phi from main::@24 to print_word [phi:main::@24->print_word]
  print_word_from_b24:
  //SEG145 [66] phi (word) print_word::w#10 = (word/dword/signed dword) 63361 [phi:main::@24->print_word#0] -- vwuz1=vwuc1 
    lda #<$f781
    sta print_word.w
    lda #>$f781
    sta print_word.w+1
    jsr print_word
  //SEG146 [54] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
  b25_from_b24:
    jmp b25
  //SEG147 main::@25
  b25:
  //SEG148 [55] call print_str 
  //SEG149 [84] phi from main::@25 to print_str [phi:main::@25->print_str]
  print_str_from_b25:
  //SEG150 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@25->print_str#0] -- register_copy 
  //SEG151 [84] phi (byte*) print_str::str#12 = (const string) main::str8 [phi:main::@25->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta print_str.str
    lda #>str8
    sta print_str.str+1
    jsr print_str
  //SEG152 [56] phi from main::@25 to main::@26 [phi:main::@25->main::@26]
  b26_from_b25:
    jmp b26
  //SEG153 main::@26
  b26:
  //SEG154 [57] call print_word 
  //SEG155 [66] phi from main::@26 to print_word [phi:main::@26->print_word]
  print_word_from_b26:
  //SEG156 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 25736 [phi:main::@26->print_word#0] -- vwuz1=vwuc1 
    lda #<$6488
    sta print_word.w
    lda #>$6488
    sta print_word.w+1
    jsr print_word
  //SEG157 [58] phi from main::@26 to main::@27 [phi:main::@26->main::@27]
  b27_from_b26:
    jmp b27
  //SEG158 main::@27
  b27:
  //SEG159 [59] call print_ln 
  //SEG160 [61] phi from main::@27 to print_ln [phi:main::@27->print_ln]
  print_ln_from_b27:
  //SEG161 [61] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#1 [phi:main::@27->print_ln#0] -- register_copy 
    jsr print_ln
    jmp breturn
  //SEG162 main::@return
  breturn:
  //SEG163 [60] return 
    rts
    str: .text "   @"
    str1: .text " @"
    str2: .text " @"
    str3: .text " @"
    str4: .text " @"
    str5: .text " @"
    str6: .text "   @"
    str7: .text " @"
    str8: .text " @"
    lintab1: .fill 2*$14, 0
    lintab2: .fill 2*$14, 0
    lintab3: .fill 2*$14, 0
}
//SEG164 print_ln
//  Print a newline
print_ln: {
  //SEG165 [62] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG166 [62] phi (byte*) print_line_cursor#11 = (byte*) print_line_cursor#21 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG167 print_ln::@1
  b1:
  //SEG168 [63] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG169 [64] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG170 print_ln::@return
  breturn:
  //SEG171 [65] return 
    rts
}
//SEG172 print_word
//  Print a word as HEX
print_word: {
    .label w = 5
  //SEG173 [67] (byte) print_byte::b#0 ← > (word) print_word::w#10 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG174 [68] call print_byte 
  //SEG175 [72] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG176 [72] phi (byte*) print_char_cursor#81 = (byte*) print_char_cursor#2 [phi:print_word->print_byte#0] -- register_copy 
  //SEG177 [72] phi (byte) print_byte::b#3 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG178 print_word::@1
  b1:
  //SEG179 [69] (byte) print_byte::b#1 ← < (word) print_word::w#10 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG180 [70] call print_byte 
  //SEG181 [72] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG182 [72] phi (byte*) print_char_cursor#81 = (byte*) print_char_cursor#11 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG183 [72] phi (byte) print_byte::b#3 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG184 print_word::@return
  breturn:
  //SEG185 [71] return 
    rts
}
//SEG186 print_byte
//  Print a byte as HEX
print_byte: {
    .label _0 = $24
    .label _2 = $25
    .label b = 7
  //SEG187 [73] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG188 [74] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG189 [75] call print_char 
  //SEG190 [80] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG191 [80] phi (byte*) print_char_cursor#50 = (byte*) print_char_cursor#81 [phi:print_byte->print_char#0] -- register_copy 
  //SEG192 [80] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG193 print_byte::@1
  b1:
  //SEG194 [76] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte/signed byte/word/signed word/dword/signed dword) 15 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG195 [77] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG196 [78] call print_char 
  //SEG197 [80] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG198 [80] phi (byte*) print_char_cursor#50 = (byte*) print_char_cursor#11 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG199 [80] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG200 print_byte::@return
  breturn:
  //SEG201 [79] return 
    rts
}
//SEG202 print_char
//  Print a single char
print_char: {
    .label ch = 8
  //SEG203 [81] *((byte*) print_char_cursor#50) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG204 [82] (byte*) print_char_cursor#11 ← ++ (byte*) print_char_cursor#50 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG205 print_char::@return
  breturn:
  //SEG206 [83] return 
    rts
}
//SEG207 print_str
//  Print a zero-terminated string
print_str: {
    .label str = $b
  //SEG208 [85] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG209 [85] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#86 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG210 [85] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG211 print_str::@1
  b1:
  //SEG212 [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG213 print_str::@return
  breturn:
  //SEG214 [87] return 
    rts
  //SEG215 print_str::@2
  b2:
  //SEG216 [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG217 [89] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG218 [90] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG219 print_cls
//  Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $d
  //SEG220 [92] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG221 [92] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG222 [92] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG223 [92] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG224 print_cls::@1
  b1:
  //SEG225 [93] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG226 [94] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG227 [95] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG228 print_cls::@return
  breturn:
  //SEG229 [96] return 
    rts
}
//SEG230 lin16u_gen
//  Generate word linear table
//  lintab - the table to generate into
//  length - the number of points in a total sinus wavelength (the size of the table)
lin16u_gen: {
    .label _5 = $34
    .label ampl = $26
    .label stepi = $2a
    .label stepf = $2e
    .label step = $30
    .label val = $13
    .label lintab = $17
    .label i = $19
    .label max = $f
    .label min = $11
  //SEG231 [98] (word) lin16u_gen::ampl#0 ← (word) lin16u_gen::max#3 - (word) lin16u_gen::min#3 -- vwuz1=vwuz2_minus_vwuz3 
    lda max
    sec
    sbc min
    sta ampl
    lda max+1
    sbc min+1
    sta ampl+1
  //SEG232 [99] (word) divr16u::dividend#1 ← (word) lin16u_gen::ampl#0 -- vwuz1=vwuz2 
    lda ampl
    sta divr16u.dividend
    lda ampl+1
    sta divr16u.dividend+1
  //SEG233 [100] call divr16u 
  //SEG234 [117] phi from lin16u_gen to divr16u [phi:lin16u_gen->divr16u]
  divr16u_from_lin16u_gen:
  //SEG235 [117] phi (word) divr16u::divisor#6 = (byte/signed byte/word/signed word/dword/signed dword) 20-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:lin16u_gen->divr16u#0] -- vwuz1=vbuc1 
    lda #<$14-1
    sta divr16u.divisor
    lda #>$14-1
    sta divr16u.divisor+1
  //SEG236 [117] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#1 [phi:lin16u_gen->divr16u#1] -- register_copy 
  //SEG237 [117] phi (word) divr16u::rem#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lin16u_gen->divr16u#2] -- vwuz1=vbuc1 
    lda #<0
    sta divr16u.rem
    lda #>0
    sta divr16u.rem+1
    jsr divr16u
  //SEG238 [101] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_2
    lda divr16u.return+1
    sta divr16u.return_2+1
    jmp b3
  //SEG239 lin16u_gen::@3
  b3:
  //SEG240 [102] (word) lin16u_gen::stepi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return_2
    sta stepi
    lda divr16u.return_2+1
    sta stepi+1
  //SEG241 [103] (word) divr16u::rem#4 ← (word) rem16u#1 -- vwuz1=vwuz2 
    lda rem16u
    sta divr16u.rem
    lda rem16u+1
    sta divr16u.rem+1
  //SEG242 [104] call divr16u 
  //SEG243 [117] phi from lin16u_gen::@3 to divr16u [phi:lin16u_gen::@3->divr16u]
  divr16u_from_b3:
  //SEG244 [117] phi (word) divr16u::divisor#6 = (byte/signed byte/word/signed word/dword/signed dword) 20-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:lin16u_gen::@3->divr16u#0] -- vwuz1=vbuc1 
    lda #<$14-1
    sta divr16u.divisor
    lda #>$14-1
    sta divr16u.divisor+1
  //SEG245 [117] phi (word) divr16u::dividend#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lin16u_gen::@3->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta divr16u.dividend
    lda #>0
    sta divr16u.dividend+1
  //SEG246 [117] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:lin16u_gen::@3->divr16u#2] -- register_copy 
    jsr divr16u
  //SEG247 [105] (word) divr16u::return#3 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_3
    lda divr16u.return+1
    sta divr16u.return_3+1
    jmp b4
  //SEG248 lin16u_gen::@4
  b4:
  //SEG249 [106] (word) lin16u_gen::stepf#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda divr16u.return_3
    sta stepf
    lda divr16u.return_3+1
    sta stepf+1
  //SEG250 [107] (dword) lin16u_gen::step#0 ← (word) lin16u_gen::stepi#0 dw= (word) lin16u_gen::stepf#0 -- vduz1=vwuz2_dword_vwuz3 
    lda stepi
    sta step+2
    lda stepi+1
    sta step+3
    lda stepf
    sta step
    lda stepf+1
    sta step+1
  //SEG251 [108] (dword) lin16u_gen::val#0 ← (word) lin16u_gen::min#3 dw= (byte/signed byte/word/signed word/dword/signed dword) 0 -- vduz1=vwuz2_dword_vbuc1 
    lda #<0
    sta val
    lda #>0
    sta val+1
    lda min
    sta val+2
    lda min+1
    sta val+3
  //SEG252 [109] phi from lin16u_gen::@4 to lin16u_gen::@1 [phi:lin16u_gen::@4->lin16u_gen::@1]
  b1_from_b4:
  //SEG253 [109] phi (word) lin16u_gen::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lin16u_gen::@4->lin16u_gen::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
  //SEG254 [109] phi (word*) lin16u_gen::lintab#4 = (word*) lin16u_gen::lintab#5 [phi:lin16u_gen::@4->lin16u_gen::@1#1] -- register_copy 
  //SEG255 [109] phi (dword) lin16u_gen::val#2 = (dword) lin16u_gen::val#0 [phi:lin16u_gen::@4->lin16u_gen::@1#2] -- register_copy 
    jmp b1
  //SEG256 [109] phi from lin16u_gen::@1 to lin16u_gen::@1 [phi:lin16u_gen::@1->lin16u_gen::@1]
  b1_from_b1:
  //SEG257 [109] phi (word) lin16u_gen::i#2 = (word) lin16u_gen::i#1 [phi:lin16u_gen::@1->lin16u_gen::@1#0] -- register_copy 
  //SEG258 [109] phi (word*) lin16u_gen::lintab#4 = (word*) lin16u_gen::lintab#3 [phi:lin16u_gen::@1->lin16u_gen::@1#1] -- register_copy 
  //SEG259 [109] phi (dword) lin16u_gen::val#2 = (dword) lin16u_gen::val#1 [phi:lin16u_gen::@1->lin16u_gen::@1#2] -- register_copy 
    jmp b1
  //SEG260 lin16u_gen::@1
  b1:
  //SEG261 [110] (word~) lin16u_gen::$5 ← > (dword) lin16u_gen::val#2 -- vwuz1=_hi_vduz2 
    lda val+2
    sta _5
    lda val+3
    sta _5+1
  //SEG262 [111] *((word*) lin16u_gen::lintab#4) ← (word~) lin16u_gen::$5 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda _5
    sta (lintab),y
    iny
    lda _5+1
    sta (lintab),y
  //SEG263 [112] (dword) lin16u_gen::val#1 ← (dword) lin16u_gen::val#2 + (dword) lin16u_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda val
    clc
    adc step
    sta val
    lda val+1
    adc step+1
    sta val+1
    lda val+2
    adc step+2
    sta val+2
    lda val+3
    adc step+3
    sta val+3
  //SEG264 [113] (word*) lin16u_gen::lintab#3 ← (word*) lin16u_gen::lintab#4 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwuz1=pwuz1_plus_2 
    lda lintab
    clc
    adc #2
    sta lintab
    bcc !+
    inc lintab+1
  !:
  //SEG265 [114] (word) lin16u_gen::i#1 ← ++ (word) lin16u_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG266 [115] if((word) lin16u_gen::i#1<(byte/signed byte/word/signed word/dword/signed dword) 20) goto lin16u_gen::@1 -- vwuz1_lt_vbuc1_then_la1 
    lda i+1
    cmp #>$14
    bcc b1_from_b1
    bne !+
    lda i
    cmp #<$14
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG267 lin16u_gen::@return
  breturn:
  //SEG268 [116] return 
    rts
}
//SEG269 divr16u
//  Performs division on two 16 bit unsigned words and an initial remainder
//  Returns the quotient dividend/divisor.
//  The final remainder will be set into the global variable rem16u
//  Implemented using simple binary division
divr16u: {
    .label _1 = $36
    .label _2 = $37
    .label rem = $1d
    .label dividend = $1f
    .label quotient = $21
    .label i = $23
    .label return = $21
    .label return_2 = $28
    .label return_3 = $2c
    .label divisor = $1b
  //SEG270 [118] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG271 [118] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG272 [118] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta quotient
    lda #>0
    sta quotient+1
  //SEG273 [118] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG274 [118] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG275 [118] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG276 [118] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG277 [118] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG278 [118] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG279 [118] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG280 divr16u::@1
  b1:
  //SEG281 [119] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG282 [120] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuz1=_hi_vwuz2 
    lda dividend+1
    sta _1
  //SEG283 [121] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and _1
    sta _2
  //SEG284 [122] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda _2
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG285 divr16u::@4
  b4:
  //SEG286 [123] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG287 [124] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG288 [124] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG289 divr16u::@2
  b2:
  //SEG290 [125] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG291 [126] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG292 [127] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3_from_b2
    bne !+
    lda rem
    cmp divisor
    bcc b3_from_b2
  !:
    jmp b5
  //SEG293 divr16u::@5
  b5:
  //SEG294 [128] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG295 [129] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG296 [130] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG297 [130] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG298 [130] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG299 divr16u::@3
  b3:
  //SEG300 [131] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG301 [132] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b3
    jmp b6
  //SEG302 divr16u::@6
  b6:
  //SEG303 [133] (word) rem16u#1 ← (word) divr16u::rem#11 -- vwuz1=vwuz2 
    lda rem
    sta rem16u
    lda rem+1
    sta rem16u+1
    jmp breturn
  //SEG304 divr16u::@return
  breturn:
  //SEG305 [134] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [28] (byte*~) print_char_cursor#91 ← (byte*) print_line_cursor#1 [ main::i#10 print_byte::b#2 print_char_cursor#91 print_line_cursor#1 ] ( main:2 [ main::i#10 print_byte::b#2 print_char_cursor#91 print_line_cursor#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ print_byte::b#3 print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [32] (word) print_word::w#3 ← *((const word[20]) main::lintab1#0 + (byte) main::i#10) [ main::i#10 print_line_cursor#1 print_word::w#3 print_char_cursor#2 ] ( main:2 [ main::i#10 print_line_cursor#1 print_word::w#3 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [36] (word) print_word::w#4 ← *((const word[20]) main::lintab2#0 + (byte) main::i#10) [ main::i#10 print_line_cursor#1 print_word::w#4 print_char_cursor#2 ] ( main:2 [ main::i#10 print_line_cursor#1 print_word::w#4 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [40] (word) print_word::w#5 ← *((const word[20]) main::lintab3#0 + (byte) main::i#10) [ main::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#2 ] ( main:2 [ main::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [46] (byte*~) print_char_cursor#100 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#100 ] ( main:2 [ print_line_cursor#1 print_char_cursor#100 ] ) always clobbers reg byte a 
Statement [63] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#11 ] ( main:2::print_ln:25 [ print_line_cursor#1 print_char_cursor#11 ] main:2::print_ln:43 [ main::i#10 print_line_cursor#1 print_char_cursor#11 ] main:2::print_ln:59 [ print_line_cursor#1 print_char_cursor#11 ] ) always clobbers reg byte a 
Statement [64] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#11 ] ( main:2::print_ln:25 [ print_line_cursor#1 print_char_cursor#11 ] main:2::print_ln:43 [ main::i#10 print_line_cursor#1 print_char_cursor#11 ] main:2::print_ln:59 [ print_line_cursor#1 print_char_cursor#11 ] ) always clobbers reg byte a 
Statement [67] (byte) print_byte::b#0 ← > (word) print_word::w#10 [ print_word::w#10 print_byte::b#0 print_char_cursor#2 ] ( main:2::print_word:15 [ print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:19 [ print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:23 [ print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:33 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:37 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:41 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:49 [ print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:53 [ print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:57 [ print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [69] (byte) print_byte::b#1 ← < (word) print_word::w#10 [ print_char_cursor#11 print_byte::b#1 ] ( main:2::print_word:15 [ print_char_cursor#11 print_byte::b#1 ] main:2::print_word:19 [ print_char_cursor#11 print_byte::b#1 ] main:2::print_word:23 [ print_char_cursor#11 print_byte::b#1 ] main:2::print_word:33 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] main:2::print_word:37 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] main:2::print_word:41 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] main:2::print_word:49 [ print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] main:2::print_word:53 [ print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] main:2::print_word:57 [ print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [73] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#3 print_char_cursor#81 print_byte::$0 ] ( main:2::print_byte:29 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:15::print_byte:68 [ print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:19::print_byte:68 [ print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:23::print_byte:68 [ print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:33::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:37::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:41::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:49::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:53::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:57::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:15::print_byte:70 [ print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:19::print_byte:70 [ print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:23::print_byte:70 [ print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:33::print_byte:70 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:37::print_byte:70 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:41::print_byte:70 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:49::print_byte:70 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:53::print_byte:70 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:57::print_byte:70 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] ) always clobbers reg byte a 
Statement [76] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_char_cursor#11 print_byte::$2 ] ( main:2::print_byte:29 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:15::print_byte:68 [ print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:19::print_byte:68 [ print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:23::print_byte:68 [ print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:33::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:37::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:41::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:49::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:53::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:57::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:15::print_byte:70 [ print_char_cursor#11 print_byte::$2 ] main:2::print_word:19::print_byte:70 [ print_char_cursor#11 print_byte::$2 ] main:2::print_word:23::print_byte:70 [ print_char_cursor#11 print_byte::$2 ] main:2::print_word:33::print_byte:70 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:37::print_byte:70 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:41::print_byte:70 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:49::print_byte:70 [ print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:53::print_byte:70 [ print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:57::print_byte:70 [ print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] ) always clobbers reg byte a 
Statement [81] *((byte*) print_char_cursor#50) ← (byte) print_char::ch#2 [ print_char_cursor#50 ] ( main:2::print_byte:29::print_char:75 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:15::print_byte:68::print_char:75 [ print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:19::print_byte:68::print_char:75 [ print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:23::print_byte:68::print_char:75 [ print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:33::print_byte:68::print_char:75 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:37::print_byte:68::print_char:75 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:41::print_byte:68::print_char:75 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:49::print_byte:68::print_char:75 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:53::print_byte:68::print_char:75 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:57::print_byte:68::print_char:75 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:15::print_byte:70::print_char:75 [ print_byte::b#3 print_char_cursor#50 ] main:2::print_word:19::print_byte:70::print_char:75 [ print_byte::b#3 print_char_cursor#50 ] main:2::print_word:23::print_byte:70::print_char:75 [ print_byte::b#3 print_char_cursor#50 ] main:2::print_word:33::print_byte:70::print_char:75 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:37::print_byte:70::print_char:75 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:41::print_byte:70::print_char:75 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:49::print_byte:70::print_char:75 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:53::print_byte:70::print_char:75 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:57::print_byte:70::print_char:75 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_byte:29::print_char:78 [ main::i#10 print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:15::print_byte:68::print_char:78 [ print_word::w#10 print_char_cursor#50 ] main:2::print_word:19::print_byte:68::print_char:78 [ print_word::w#10 print_char_cursor#50 ] main:2::print_word:23::print_byte:68::print_char:78 [ print_word::w#10 print_char_cursor#50 ] main:2::print_word:33::print_byte:68::print_char:78 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:37::print_byte:68::print_char:78 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:41::print_byte:68::print_char:78 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:49::print_byte:68::print_char:78 [ print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:53::print_byte:68::print_char:78 [ print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:57::print_byte:68::print_char:78 [ print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:15::print_byte:70::print_char:78 [ print_char_cursor#50 ] main:2::print_word:19::print_byte:70::print_char:78 [ print_char_cursor#50 ] main:2::print_word:23::print_byte:70::print_char:78 [ print_char_cursor#50 ] main:2::print_word:33::print_byte:70::print_char:78 [ main::i#10 print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:37::print_byte:70::print_char:78 [ main::i#10 print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:41::print_byte:70::print_char:78 [ main::i#10 print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:49::print_byte:70::print_char:78 [ print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:53::print_byte:70::print_char:78 [ print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:57::print_byte:70::print_char:78 [ print_line_cursor#1 print_char_cursor#50 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:7 [ print_byte::b#3 print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#10 ] ( main:2::print_str:13 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:17 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:21 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:31 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:35 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:39 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:47 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:51 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:55 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) [ print_char_cursor#2 print_str::str#10 ] ( main:2::print_str:13 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:17 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:21 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:31 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:35 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:39 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:47 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:51 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:55 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [93] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:11 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [95] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:11 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [98] (word) lin16u_gen::ampl#0 ← (word) lin16u_gen::max#3 - (word) lin16u_gen::min#3 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::ampl#0 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::ampl#0 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::ampl#0 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::ampl#0 ] ) always clobbers reg byte a 
Statement [99] (word) divr16u::dividend#1 ← (word) lin16u_gen::ampl#0 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::dividend#1 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::dividend#1 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::dividend#1 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::dividend#1 ] ) always clobbers reg byte a 
Statement [101] (word) divr16u::return#2 ← (word) divr16u::return#0 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#2 rem16u#1 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#2 rem16u#1 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#2 rem16u#1 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#2 rem16u#1 ] ) always clobbers reg byte a 
Statement [102] (word) lin16u_gen::stepi#0 ← (word) divr16u::return#2 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 rem16u#1 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 rem16u#1 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 rem16u#1 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [103] (word) divr16u::rem#4 ← (word) rem16u#1 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::rem#4 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::rem#4 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::rem#4 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::rem#4 ] ) always clobbers reg byte a 
Statement [105] (word) divr16u::return#3 ← (word) divr16u::return#0 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#3 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#3 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#3 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#3 ] ) always clobbers reg byte a 
Statement [106] (word) lin16u_gen::stepf#0 ← (word) divr16u::return#3 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 lin16u_gen::stepf#0 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 lin16u_gen::stepf#0 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 lin16u_gen::stepf#0 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 lin16u_gen::stepf#0 ] ) always clobbers reg byte a 
Statement [107] (dword) lin16u_gen::step#0 ← (word) lin16u_gen::stepi#0 dw= (word) lin16u_gen::stepf#0 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::step#0 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::step#0 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::step#0 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::step#0 ] ) always clobbers reg byte a 
Statement [108] (dword) lin16u_gen::val#0 ← (word) lin16u_gen::min#3 dw= (byte/signed byte/word/signed word/dword/signed dword) 0 [ lin16u_gen::lintab#5 lin16u_gen::step#0 lin16u_gen::val#0 ] ( main:2::lin16u_gen:5 [ lin16u_gen::lintab#5 lin16u_gen::step#0 lin16u_gen::val#0 ] main:2::lin16u_gen:7 [ lin16u_gen::lintab#5 lin16u_gen::step#0 lin16u_gen::val#0 ] main:2::lin16u_gen:9 [ lin16u_gen::lintab#5 lin16u_gen::step#0 lin16u_gen::val#0 ] ) always clobbers reg byte a 
Statement [110] (word~) lin16u_gen::$5 ← > (dword) lin16u_gen::val#2 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::$5 ] ( main:2::lin16u_gen:5 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::$5 ] main:2::lin16u_gen:7 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::$5 ] main:2::lin16u_gen:9 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::$5 ] ) always clobbers reg byte a 
Statement [111] *((word*) lin16u_gen::lintab#4) ← (word~) lin16u_gen::$5 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 ] ( main:2::lin16u_gen:5 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 ] main:2::lin16u_gen:7 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 ] main:2::lin16u_gen:9 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [112] (dword) lin16u_gen::val#1 ← (dword) lin16u_gen::val#2 + (dword) lin16u_gen::step#0 [ lin16u_gen::step#0 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::val#1 ] ( main:2::lin16u_gen:5 [ lin16u_gen::step#0 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::val#1 ] main:2::lin16u_gen:7 [ lin16u_gen::step#0 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::val#1 ] main:2::lin16u_gen:9 [ lin16u_gen::step#0 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::val#1 ] ) always clobbers reg byte a 
Statement [113] (word*) lin16u_gen::lintab#3 ← (word*) lin16u_gen::lintab#4 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ lin16u_gen::step#0 lin16u_gen::i#2 lin16u_gen::val#1 lin16u_gen::lintab#3 ] ( main:2::lin16u_gen:5 [ lin16u_gen::step#0 lin16u_gen::i#2 lin16u_gen::val#1 lin16u_gen::lintab#3 ] main:2::lin16u_gen:7 [ lin16u_gen::step#0 lin16u_gen::i#2 lin16u_gen::val#1 lin16u_gen::lintab#3 ] main:2::lin16u_gen:9 [ lin16u_gen::step#0 lin16u_gen::i#2 lin16u_gen::val#1 lin16u_gen::lintab#3 ] ) always clobbers reg byte a 
Statement [115] if((word) lin16u_gen::i#1<(byte/signed byte/word/signed word/dword/signed dword) 20) goto lin16u_gen::@1 [ lin16u_gen::step#0 lin16u_gen::val#1 lin16u_gen::lintab#3 lin16u_gen::i#1 ] ( main:2::lin16u_gen:5 [ lin16u_gen::step#0 lin16u_gen::val#1 lin16u_gen::lintab#3 lin16u_gen::i#1 ] main:2::lin16u_gen:7 [ lin16u_gen::step#0 lin16u_gen::val#1 lin16u_gen::lintab#3 lin16u_gen::i#1 ] main:2::lin16u_gen:9 [ lin16u_gen::step#0 lin16u_gen::val#1 lin16u_gen::lintab#3 lin16u_gen::i#1 ] ) always clobbers reg byte a 
Statement [120] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:35 [ divr16u::i#2 divr16u::i#1 ]
Statement [121] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) always clobbers reg byte a 
Statement [123] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [127] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [129] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [133] (word) rem16u#1 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#1 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#0 rem16u#1 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#0 rem16u#1 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#0 rem16u#1 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#0 rem16u#1 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#0 rem16u#1 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [28] (byte*~) print_char_cursor#91 ← (byte*) print_line_cursor#1 [ main::i#10 print_byte::b#2 print_char_cursor#91 print_line_cursor#1 ] ( main:2 [ main::i#10 print_byte::b#2 print_char_cursor#91 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [32] (word) print_word::w#3 ← *((const word[20]) main::lintab1#0 + (byte) main::i#10) [ main::i#10 print_line_cursor#1 print_word::w#3 print_char_cursor#2 ] ( main:2 [ main::i#10 print_line_cursor#1 print_word::w#3 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [36] (word) print_word::w#4 ← *((const word[20]) main::lintab2#0 + (byte) main::i#10) [ main::i#10 print_line_cursor#1 print_word::w#4 print_char_cursor#2 ] ( main:2 [ main::i#10 print_line_cursor#1 print_word::w#4 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [40] (word) print_word::w#5 ← *((const word[20]) main::lintab3#0 + (byte) main::i#10) [ main::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#2 ] ( main:2 [ main::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [46] (byte*~) print_char_cursor#100 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#100 ] ( main:2 [ print_line_cursor#1 print_char_cursor#100 ] ) always clobbers reg byte a 
Statement [63] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#11 ] ( main:2::print_ln:25 [ print_line_cursor#1 print_char_cursor#11 ] main:2::print_ln:43 [ main::i#10 print_line_cursor#1 print_char_cursor#11 ] main:2::print_ln:59 [ print_line_cursor#1 print_char_cursor#11 ] ) always clobbers reg byte a 
Statement [64] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#11 ] ( main:2::print_ln:25 [ print_line_cursor#1 print_char_cursor#11 ] main:2::print_ln:43 [ main::i#10 print_line_cursor#1 print_char_cursor#11 ] main:2::print_ln:59 [ print_line_cursor#1 print_char_cursor#11 ] ) always clobbers reg byte a 
Statement [67] (byte) print_byte::b#0 ← > (word) print_word::w#10 [ print_word::w#10 print_byte::b#0 print_char_cursor#2 ] ( main:2::print_word:15 [ print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:19 [ print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:23 [ print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:33 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:37 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:41 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:49 [ print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:53 [ print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] main:2::print_word:57 [ print_line_cursor#1 print_word::w#10 print_byte::b#0 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [69] (byte) print_byte::b#1 ← < (word) print_word::w#10 [ print_char_cursor#11 print_byte::b#1 ] ( main:2::print_word:15 [ print_char_cursor#11 print_byte::b#1 ] main:2::print_word:19 [ print_char_cursor#11 print_byte::b#1 ] main:2::print_word:23 [ print_char_cursor#11 print_byte::b#1 ] main:2::print_word:33 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] main:2::print_word:37 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] main:2::print_word:41 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] main:2::print_word:49 [ print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] main:2::print_word:53 [ print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] main:2::print_word:57 [ print_line_cursor#1 print_char_cursor#11 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [73] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#3 print_char_cursor#81 print_byte::$0 ] ( main:2::print_byte:29 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:15::print_byte:68 [ print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:19::print_byte:68 [ print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:23::print_byte:68 [ print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:33::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:37::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:41::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:49::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:53::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:57::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:15::print_byte:70 [ print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:19::print_byte:70 [ print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:23::print_byte:70 [ print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:33::print_byte:70 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:37::print_byte:70 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:41::print_byte:70 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:49::print_byte:70 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:53::print_byte:70 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] main:2::print_word:57::print_byte:70 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#81 print_byte::$0 ] ) always clobbers reg byte a 
Statement [76] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_char_cursor#11 print_byte::$2 ] ( main:2::print_byte:29 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:15::print_byte:68 [ print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:19::print_byte:68 [ print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:23::print_byte:68 [ print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:33::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:37::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:41::print_byte:68 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:49::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:53::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:57::print_byte:68 [ print_line_cursor#1 print_word::w#10 print_char_cursor#11 print_byte::$2 ] main:2::print_word:15::print_byte:70 [ print_char_cursor#11 print_byte::$2 ] main:2::print_word:19::print_byte:70 [ print_char_cursor#11 print_byte::$2 ] main:2::print_word:23::print_byte:70 [ print_char_cursor#11 print_byte::$2 ] main:2::print_word:33::print_byte:70 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:37::print_byte:70 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:41::print_byte:70 [ main::i#10 print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:49::print_byte:70 [ print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:53::print_byte:70 [ print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] main:2::print_word:57::print_byte:70 [ print_line_cursor#1 print_char_cursor#11 print_byte::$2 ] ) always clobbers reg byte a 
Statement [81] *((byte*) print_char_cursor#50) ← (byte) print_char::ch#2 [ print_char_cursor#50 ] ( main:2::print_byte:29::print_char:75 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:15::print_byte:68::print_char:75 [ print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:19::print_byte:68::print_char:75 [ print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:23::print_byte:68::print_char:75 [ print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:33::print_byte:68::print_char:75 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:37::print_byte:68::print_char:75 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:41::print_byte:68::print_char:75 [ main::i#10 print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:49::print_byte:68::print_char:75 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:53::print_byte:68::print_char:75 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:57::print_byte:68::print_char:75 [ print_line_cursor#1 print_word::w#10 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:15::print_byte:70::print_char:75 [ print_byte::b#3 print_char_cursor#50 ] main:2::print_word:19::print_byte:70::print_char:75 [ print_byte::b#3 print_char_cursor#50 ] main:2::print_word:23::print_byte:70::print_char:75 [ print_byte::b#3 print_char_cursor#50 ] main:2::print_word:33::print_byte:70::print_char:75 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:37::print_byte:70::print_char:75 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:41::print_byte:70::print_char:75 [ main::i#10 print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:49::print_byte:70::print_char:75 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:53::print_byte:70::print_char:75 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_word:57::print_byte:70::print_char:75 [ print_line_cursor#1 print_byte::b#3 print_char_cursor#50 ] main:2::print_byte:29::print_char:78 [ main::i#10 print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:15::print_byte:68::print_char:78 [ print_word::w#10 print_char_cursor#50 ] main:2::print_word:19::print_byte:68::print_char:78 [ print_word::w#10 print_char_cursor#50 ] main:2::print_word:23::print_byte:68::print_char:78 [ print_word::w#10 print_char_cursor#50 ] main:2::print_word:33::print_byte:68::print_char:78 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:37::print_byte:68::print_char:78 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:41::print_byte:68::print_char:78 [ main::i#10 print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:49::print_byte:68::print_char:78 [ print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:53::print_byte:68::print_char:78 [ print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:57::print_byte:68::print_char:78 [ print_line_cursor#1 print_word::w#10 print_char_cursor#50 ] main:2::print_word:15::print_byte:70::print_char:78 [ print_char_cursor#50 ] main:2::print_word:19::print_byte:70::print_char:78 [ print_char_cursor#50 ] main:2::print_word:23::print_byte:70::print_char:78 [ print_char_cursor#50 ] main:2::print_word:33::print_byte:70::print_char:78 [ main::i#10 print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:37::print_byte:70::print_char:78 [ main::i#10 print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:41::print_byte:70::print_char:78 [ main::i#10 print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:49::print_byte:70::print_char:78 [ print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:53::print_byte:70::print_char:78 [ print_line_cursor#1 print_char_cursor#50 ] main:2::print_word:57::print_byte:70::print_char:78 [ print_line_cursor#1 print_char_cursor#50 ] ) always clobbers reg byte y 
Statement [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#10 ] ( main:2::print_str:13 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:17 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:21 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:31 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:35 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:39 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:47 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:51 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:55 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) [ print_char_cursor#2 print_str::str#10 ] ( main:2::print_str:13 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:17 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:21 [ print_char_cursor#2 print_str::str#10 ] main:2::print_str:31 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:35 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:39 [ main::i#10 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:47 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:51 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::print_str:55 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [93] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:11 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [95] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:11 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [98] (word) lin16u_gen::ampl#0 ← (word) lin16u_gen::max#3 - (word) lin16u_gen::min#3 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::ampl#0 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::ampl#0 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::ampl#0 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::ampl#0 ] ) always clobbers reg byte a 
Statement [99] (word) divr16u::dividend#1 ← (word) lin16u_gen::ampl#0 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::dividend#1 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::dividend#1 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::dividend#1 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::dividend#1 ] ) always clobbers reg byte a 
Statement [101] (word) divr16u::return#2 ← (word) divr16u::return#0 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#2 rem16u#1 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#2 rem16u#1 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#2 rem16u#1 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#2 rem16u#1 ] ) always clobbers reg byte a 
Statement [102] (word) lin16u_gen::stepi#0 ← (word) divr16u::return#2 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 rem16u#1 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 rem16u#1 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 rem16u#1 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [103] (word) divr16u::rem#4 ← (word) rem16u#1 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::rem#4 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::rem#4 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::rem#4 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::rem#4 ] ) always clobbers reg byte a 
Statement [105] (word) divr16u::return#3 ← (word) divr16u::return#0 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#3 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#3 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#3 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#3 ] ) always clobbers reg byte a 
Statement [106] (word) lin16u_gen::stepf#0 ← (word) divr16u::return#3 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 lin16u_gen::stepf#0 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 lin16u_gen::stepf#0 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 lin16u_gen::stepf#0 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 lin16u_gen::stepf#0 ] ) always clobbers reg byte a 
Statement [107] (dword) lin16u_gen::step#0 ← (word) lin16u_gen::stepi#0 dw= (word) lin16u_gen::stepf#0 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::step#0 ] ( main:2::lin16u_gen:5 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::step#0 ] main:2::lin16u_gen:7 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::step#0 ] main:2::lin16u_gen:9 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::step#0 ] ) always clobbers reg byte a 
Statement [108] (dword) lin16u_gen::val#0 ← (word) lin16u_gen::min#3 dw= (byte/signed byte/word/signed word/dword/signed dword) 0 [ lin16u_gen::lintab#5 lin16u_gen::step#0 lin16u_gen::val#0 ] ( main:2::lin16u_gen:5 [ lin16u_gen::lintab#5 lin16u_gen::step#0 lin16u_gen::val#0 ] main:2::lin16u_gen:7 [ lin16u_gen::lintab#5 lin16u_gen::step#0 lin16u_gen::val#0 ] main:2::lin16u_gen:9 [ lin16u_gen::lintab#5 lin16u_gen::step#0 lin16u_gen::val#0 ] ) always clobbers reg byte a 
Statement [110] (word~) lin16u_gen::$5 ← > (dword) lin16u_gen::val#2 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::$5 ] ( main:2::lin16u_gen:5 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::$5 ] main:2::lin16u_gen:7 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::$5 ] main:2::lin16u_gen:9 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::$5 ] ) always clobbers reg byte a 
Statement [111] *((word*) lin16u_gen::lintab#4) ← (word~) lin16u_gen::$5 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 ] ( main:2::lin16u_gen:5 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 ] main:2::lin16u_gen:7 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 ] main:2::lin16u_gen:9 [ lin16u_gen::step#0 lin16u_gen::val#2 lin16u_gen::lintab#4 lin16u_gen::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [112] (dword) lin16u_gen::val#1 ← (dword) lin16u_gen::val#2 + (dword) lin16u_gen::step#0 [ lin16u_gen::step#0 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::val#1 ] ( main:2::lin16u_gen:5 [ lin16u_gen::step#0 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::val#1 ] main:2::lin16u_gen:7 [ lin16u_gen::step#0 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::val#1 ] main:2::lin16u_gen:9 [ lin16u_gen::step#0 lin16u_gen::lintab#4 lin16u_gen::i#2 lin16u_gen::val#1 ] ) always clobbers reg byte a 
Statement [113] (word*) lin16u_gen::lintab#3 ← (word*) lin16u_gen::lintab#4 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ lin16u_gen::step#0 lin16u_gen::i#2 lin16u_gen::val#1 lin16u_gen::lintab#3 ] ( main:2::lin16u_gen:5 [ lin16u_gen::step#0 lin16u_gen::i#2 lin16u_gen::val#1 lin16u_gen::lintab#3 ] main:2::lin16u_gen:7 [ lin16u_gen::step#0 lin16u_gen::i#2 lin16u_gen::val#1 lin16u_gen::lintab#3 ] main:2::lin16u_gen:9 [ lin16u_gen::step#0 lin16u_gen::i#2 lin16u_gen::val#1 lin16u_gen::lintab#3 ] ) always clobbers reg byte a 
Statement [115] if((word) lin16u_gen::i#1<(byte/signed byte/word/signed word/dword/signed dword) 20) goto lin16u_gen::@1 [ lin16u_gen::step#0 lin16u_gen::val#1 lin16u_gen::lintab#3 lin16u_gen::i#1 ] ( main:2::lin16u_gen:5 [ lin16u_gen::step#0 lin16u_gen::val#1 lin16u_gen::lintab#3 lin16u_gen::i#1 ] main:2::lin16u_gen:7 [ lin16u_gen::step#0 lin16u_gen::val#1 lin16u_gen::lintab#3 lin16u_gen::i#1 ] main:2::lin16u_gen:9 [ lin16u_gen::step#0 lin16u_gen::val#1 lin16u_gen::lintab#3 lin16u_gen::i#1 ] ) always clobbers reg byte a 
Statement [120] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [121] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) always clobbers reg byte a 
Statement [123] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [127] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [129] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [133] (word) rem16u#1 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#1 ] ( main:2::lin16u_gen:5::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#0 rem16u#1 ] main:2::lin16u_gen:7::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#0 rem16u#1 ] main:2::lin16u_gen:9::divr16u:100 [ lin16u_gen::min#3 lin16u_gen::lintab#5 divr16u::return#0 rem16u#1 ] main:2::lin16u_gen:5::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#0 rem16u#1 ] main:2::lin16u_gen:7::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#0 rem16u#1 ] main:2::lin16u_gen:9::divr16u:104 [ lin16u_gen::min#3 lin16u_gen::lintab#5 lin16u_gen::stepi#0 divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#10 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#21 print_line_cursor#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_WORD:5 [ print_word::w#10 print_word::w#3 print_word::w#4 print_word::w#5 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_BYTE:7 [ print_byte::b#3 print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:7 , reg byte x , 
Potential registers zp ZP_BYTE:8 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:9 [ print_char_cursor#86 print_char_cursor#50 print_char_cursor#81 print_char_cursor#91 print_char_cursor#2 print_char_cursor#11 print_char_cursor#100 print_char_cursor#1 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_WORD:13 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ lin16u_gen::max#3 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_WORD:17 [ lin16u_gen::min#3 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_DWORD:19 [ lin16u_gen::val#2 lin16u_gen::val#1 lin16u_gen::val#0 ] : zp ZP_DWORD:19 , 
Potential registers zp ZP_WORD:23 [ lin16u_gen::lintab#4 lin16u_gen::lintab#3 lin16u_gen::lintab#5 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_WORD:25 [ lin16u_gen::i#2 lin16u_gen::i#1 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_WORD:27 [ divr16u::divisor#6 ] : zp ZP_WORD:27 , 
Potential registers zp ZP_WORD:29 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp ZP_WORD:29 , 
Potential registers zp ZP_WORD:31 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#0 ] : zp ZP_WORD:31 , 
Potential registers zp ZP_WORD:33 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp ZP_WORD:33 , 
Potential registers zp ZP_BYTE:35 [ divr16u::i#2 divr16u::i#1 ] : zp ZP_BYTE:35 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ print_byte::$0 ] : zp ZP_BYTE:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ print_byte::$2 ] : zp ZP_BYTE:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:38 [ lin16u_gen::ampl#0 ] : zp ZP_WORD:38 , 
Potential registers zp ZP_WORD:40 [ divr16u::return#2 ] : zp ZP_WORD:40 , 
Potential registers zp ZP_WORD:42 [ lin16u_gen::stepi#0 ] : zp ZP_WORD:42 , 
Potential registers zp ZP_WORD:44 [ divr16u::return#3 ] : zp ZP_WORD:44 , 
Potential registers zp ZP_WORD:46 [ lin16u_gen::stepf#0 ] : zp ZP_WORD:46 , 
Potential registers zp ZP_DWORD:48 [ lin16u_gen::step#0 ] : zp ZP_DWORD:48 , 
Potential registers zp ZP_WORD:52 [ lin16u_gen::$5 ] : zp ZP_WORD:52 , 
Potential registers zp ZP_BYTE:54 [ divr16u::$1 ] : zp ZP_BYTE:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:55 [ divr16u::$2 ] : zp ZP_BYTE:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:56 [ rem16u#1 ] : zp ZP_WORD:56 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 227.89: zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#21 print_line_cursor#1 ] 198.69: zp ZP_WORD:9 [ print_char_cursor#86 print_char_cursor#50 print_char_cursor#81 print_char_cursor#91 print_char_cursor#2 print_char_cursor#11 print_char_cursor#100 print_char_cursor#1 ] 0.8: zp ZP_WORD:56 [ rem16u#1 ] 
Uplift Scope [print_str] 305.5: zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ] 
Uplift Scope [divr16u] 106.92: zp ZP_WORD:29 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 35.54: zp ZP_WORD:33 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 22: zp ZP_BYTE:54 [ divr16u::$1 ] 22: zp ZP_BYTE:55 [ divr16u::$2 ] 18.19: zp ZP_BYTE:35 [ divr16u::i#2 divr16u::i#1 ] 15.75: zp ZP_WORD:31 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#0 ] 4: zp ZP_WORD:40 [ divr16u::return#2 ] 4: zp ZP_WORD:44 [ divr16u::return#3 ] 1.38: zp ZP_WORD:27 [ divr16u::divisor#6 ] 
Uplift Scope [lin16u_gen] 22: zp ZP_WORD:52 [ lin16u_gen::$5 ] 21.17: zp ZP_DWORD:19 [ lin16u_gen::val#2 lin16u_gen::val#1 lin16u_gen::val#0 ] 20.9: zp ZP_WORD:25 [ lin16u_gen::i#2 lin16u_gen::i#1 ] 16.25: zp ZP_WORD:23 [ lin16u_gen::lintab#4 lin16u_gen::lintab#3 lin16u_gen::lintab#5 ] 4: zp ZP_WORD:38 [ lin16u_gen::ampl#0 ] 4: zp ZP_WORD:46 [ lin16u_gen::stepf#0 ] 2: zp ZP_WORD:15 [ lin16u_gen::max#3 ] 1.44: zp ZP_DWORD:48 [ lin16u_gen::step#0 ] 0.8: zp ZP_WORD:42 [ lin16u_gen::stepi#0 ] 0.36: zp ZP_WORD:17 [ lin16u_gen::min#3 ] 
Uplift Scope [print_word] 78.33: zp ZP_WORD:5 [ print_word::w#10 print_word::w#3 print_word::w#4 print_word::w#5 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:13 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_byte] 23.75: zp ZP_BYTE:7 [ print_byte::b#3 print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:36 [ print_byte::$0 ] 4: zp ZP_BYTE:37 [ print_byte::$2 ] 
Uplift Scope [main] 20.17: zp ZP_BYTE:2 [ main::i#10 main::i#1 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:8 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [print_ln] 

Uplifting [] best 16039 combination zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#21 print_line_cursor#1 ] zp ZP_WORD:9 [ print_char_cursor#86 print_char_cursor#50 print_char_cursor#81 print_char_cursor#91 print_char_cursor#2 print_char_cursor#11 print_char_cursor#100 print_char_cursor#1 ] zp ZP_WORD:56 [ rem16u#1 ] 
Uplifting [print_str] best 16039 combination zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ] 
Uplifting [divr16u] best 15829 combination zp ZP_WORD:29 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp ZP_WORD:33 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp ZP_WORD:31 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#0 ] zp ZP_WORD:40 [ divr16u::return#2 ] zp ZP_WORD:44 [ divr16u::return#3 ] zp ZP_WORD:27 [ divr16u::divisor#6 ] 
Uplifting [lin16u_gen] best 15829 combination zp ZP_WORD:52 [ lin16u_gen::$5 ] zp ZP_DWORD:19 [ lin16u_gen::val#2 lin16u_gen::val#1 lin16u_gen::val#0 ] zp ZP_WORD:25 [ lin16u_gen::i#2 lin16u_gen::i#1 ] zp ZP_WORD:23 [ lin16u_gen::lintab#4 lin16u_gen::lintab#3 lin16u_gen::lintab#5 ] zp ZP_WORD:38 [ lin16u_gen::ampl#0 ] zp ZP_WORD:46 [ lin16u_gen::stepf#0 ] zp ZP_WORD:15 [ lin16u_gen::max#3 ] zp ZP_DWORD:48 [ lin16u_gen::step#0 ] zp ZP_WORD:42 [ lin16u_gen::stepi#0 ] zp ZP_WORD:17 [ lin16u_gen::min#3 ] 
Uplifting [print_word] best 15829 combination zp ZP_WORD:5 [ print_word::w#10 print_word::w#3 print_word::w#4 print_word::w#5 ] 
Uplifting [print_cls] best 15829 combination zp ZP_WORD:13 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_byte] best 15787 combination reg byte x [ print_byte::b#3 print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [main] best 15787 combination zp ZP_BYTE:2 [ main::i#10 main::i#1 ] 
Uplifting [print_char] best 15778 combination reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplifting [print_ln] best 15778 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Uplifting [main] best 15778 combination zp ZP_BYTE:2 [ main::i#10 main::i#1 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:29 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp ZP_WORD:56 [ rem16u#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:15 [ lin16u_gen::max#3 ] ] with [ zp ZP_WORD:38 [ lin16u_gen::ampl#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:33 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp ZP_WORD:40 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:33 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp ZP_WORD:44 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:15 [ lin16u_gen::max#3 lin16u_gen::ampl#0 ] ] with [ zp ZP_WORD:31 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:33 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 ] ] with [ zp ZP_WORD:46 [ lin16u_gen::stepf#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#21 print_line_cursor#1 ] ] with [ zp ZP_WORD:13 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#21 print_line_cursor#1 print_cls::sc#2 print_cls::sc#1 ] ] with [ zp ZP_WORD:15 [ lin16u_gen::max#3 lin16u_gen::ampl#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#0 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#21 print_line_cursor#1 print_cls::sc#2 print_cls::sc#1 lin16u_gen::max#3 lin16u_gen::ampl#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#0 ] ] with [ zp ZP_WORD:25 [ lin16u_gen::i#2 lin16u_gen::i#1 ] ]
Coalescing zero page register [ zp ZP_WORD:5 [ print_word::w#10 print_word::w#3 print_word::w#4 print_word::w#5 ] ] with [ zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ] ]
Coalescing zero page register [ zp ZP_WORD:5 [ print_word::w#10 print_word::w#3 print_word::w#4 print_word::w#5 print_str::str#10 print_str::str#12 print_str::str#0 ] ] with [ zp ZP_WORD:17 [ lin16u_gen::min#3 ] ]
Coalescing zero page register [ zp ZP_WORD:5 [ print_word::w#10 print_word::w#3 print_word::w#4 print_word::w#5 print_str::str#10 print_str::str#12 print_str::str#0 lin16u_gen::min#3 ] ] with [ zp ZP_WORD:52 [ lin16u_gen::$5 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ print_char_cursor#86 print_char_cursor#50 print_char_cursor#81 print_char_cursor#91 print_char_cursor#2 print_char_cursor#11 print_char_cursor#100 print_char_cursor#1 ] ] with [ zp ZP_WORD:23 [ lin16u_gen::lintab#4 lin16u_gen::lintab#3 lin16u_gen::lintab#5 ] ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:7 [ print_char_cursor#86 print_char_cursor#50 print_char_cursor#81 print_char_cursor#91 print_char_cursor#2 print_char_cursor#11 print_char_cursor#100 print_char_cursor#1 lin16u_gen::lintab#4 lin16u_gen::lintab#3 lin16u_gen::lintab#5 ]
Allocated (was zp ZP_DWORD:19) zp ZP_DWORD:9 [ lin16u_gen::val#2 lin16u_gen::val#1 lin16u_gen::val#0 ]
Allocated (was zp ZP_WORD:27) zp ZP_WORD:13 [ divr16u::divisor#6 ]
Allocated (was zp ZP_WORD:29) zp ZP_WORD:15 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 ]
Allocated (was zp ZP_WORD:33) zp ZP_WORD:17 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 lin16u_gen::stepf#0 ]
Allocated (was zp ZP_WORD:42) zp ZP_WORD:19 [ lin16u_gen::stepi#0 ]
Allocated (was zp ZP_DWORD:48) zp ZP_DWORD:21 [ lin16u_gen::step#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//  Linear table generator
//  Work in progress towards a sinus generator
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label rem16u = $f
  .label print_char_cursor = 7
  .label print_line_cursor = 3
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @29 [phi:@begin->@29]
b29_from_bbegin:
  jmp b29
//SEG5 @29
b29:
//SEG6 [2] call main 
//SEG7 [4] phi from @29 to main [phi:@29->main]
main_from_b29:
  jsr main
//SEG8 [3] phi from @29 to @end [phi:@29->@end]
bend_from_b29:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label i = 2
  //SEG11 [5] call lin16u_gen 
  //SEG12 [97] phi from main to lin16u_gen [phi:main->lin16u_gen]
  lin16u_gen_from_main:
  //SEG13 [97] phi (word*) lin16u_gen::lintab#5 = (const word[20]) main::lintab1#0 [phi:main->lin16u_gen#0] -- pwuz1=pwuc1 
    lda #<lintab1
    sta lin16u_gen.lintab
    lda #>lintab1
    sta lin16u_gen.lintab+1
  //SEG14 [97] phi (word) lin16u_gen::min#3 = (word/signed word/dword/signed dword) 557 [phi:main->lin16u_gen#1] -- vwuz1=vwuc1 
    lda #<$22d
    sta lin16u_gen.min
    lda #>$22d
    sta lin16u_gen.min+1
  //SEG15 [97] phi (word) lin16u_gen::max#3 = (word/signed word/dword/signed dword) 29793 [phi:main->lin16u_gen#2] -- vwuz1=vwuc1 
    lda #<$7461
    sta lin16u_gen.max
    lda #>$7461
    sta lin16u_gen.max+1
    jsr lin16u_gen
  //SEG16 [6] phi from main to main::@3 [phi:main->main::@3]
  b3_from_main:
    jmp b3
  //SEG17 main::@3
  b3:
  //SEG18 [7] call lin16u_gen 
  //SEG19 [97] phi from main::@3 to lin16u_gen [phi:main::@3->lin16u_gen]
  lin16u_gen_from_b3:
  //SEG20 [97] phi (word*) lin16u_gen::lintab#5 = (const word[20]) main::lintab2#0 [phi:main::@3->lin16u_gen#0] -- pwuz1=pwuc1 
    lda #<lintab2
    sta lin16u_gen.lintab
    lda #>lintab2
    sta lin16u_gen.lintab+1
  //SEG21 [97] phi (word) lin16u_gen::min#3 = (word/signed word/dword/signed dword) 31179 [phi:main::@3->lin16u_gen#1] -- vwuz1=vwuc1 
    lda #<$79cb
    sta lin16u_gen.min
    lda #>$79cb
    sta lin16u_gen.min+1
  //SEG22 [97] phi (word) lin16u_gen::max#3 = (word/dword/signed dword) 63361 [phi:main::@3->lin16u_gen#2] -- vwuz1=vwuc1 
    lda #<$f781
    sta lin16u_gen.max
    lda #>$f781
    sta lin16u_gen.max+1
    jsr lin16u_gen
  //SEG23 [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG24 main::@4
  b4:
  //SEG25 [9] call lin16u_gen 
  //SEG26 [97] phi from main::@4 to lin16u_gen [phi:main::@4->lin16u_gen]
  lin16u_gen_from_b4:
  //SEG27 [97] phi (word*) lin16u_gen::lintab#5 = (const word[20]) main::lintab3#0 [phi:main::@4->lin16u_gen#0] -- pwuz1=pwuc1 
    lda #<lintab3
    sta lin16u_gen.lintab
    lda #>lintab3
    sta lin16u_gen.lintab+1
  //SEG28 [97] phi (word) lin16u_gen::min#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@4->lin16u_gen#1] -- vwuz1=vbuc1 
    lda #<0
    sta lin16u_gen.min
    lda #>0
    sta lin16u_gen.min+1
  //SEG29 [97] phi (word) lin16u_gen::max#3 = (word/signed word/dword/signed dword) 25736 [phi:main::@4->lin16u_gen#2] -- vwuz1=vwuc1 
    lda #<$6488
    sta lin16u_gen.max
    lda #>$6488
    sta lin16u_gen.max+1
    jsr lin16u_gen
  //SEG30 [10] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
  //SEG31 main::@5
  b5:
  //SEG32 [11] call print_cls 
  //SEG33 [91] phi from main::@5 to print_cls [phi:main::@5->print_cls]
  print_cls_from_b5:
    jsr print_cls
  //SEG34 [12] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    jmp b6
  //SEG35 main::@6
  b6:
  //SEG36 [13] call print_str 
  //SEG37 [84] phi from main::@6 to print_str [phi:main::@6->print_str]
  print_str_from_b6:
  //SEG38 [84] phi (byte*) print_char_cursor#86 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG39 [84] phi (byte*) print_str::str#12 = (const string) main::str [phi:main::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG40 [14] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
  //SEG41 main::@7
  b7:
  //SEG42 [15] call print_word 
  //SEG43 [66] phi from main::@7 to print_word [phi:main::@7->print_word]
  print_word_from_b7:
  //SEG44 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 557 [phi:main::@7->print_word#0] -- vwuz1=vwuc1 
    lda #<$22d
    sta print_word.w
    lda #>$22d
    sta print_word.w+1
    jsr print_word
  //SEG45 [16] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  b8_from_b7:
    jmp b8
  //SEG46 main::@8
  b8:
  //SEG47 [17] call print_str 
  //SEG48 [84] phi from main::@8 to print_str [phi:main::@8->print_str]
  print_str_from_b8:
  //SEG49 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@8->print_str#0] -- register_copy 
  //SEG50 [84] phi (byte*) print_str::str#12 = (const string) main::str1 [phi:main::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG51 [18] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
  //SEG52 main::@9
  b9:
  //SEG53 [19] call print_word 
  //SEG54 [66] phi from main::@9 to print_word [phi:main::@9->print_word]
  print_word_from_b9:
  //SEG55 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 31179 [phi:main::@9->print_word#0] -- vwuz1=vwuc1 
    lda #<$79cb
    sta print_word.w
    lda #>$79cb
    sta print_word.w+1
    jsr print_word
  //SEG56 [20] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
  //SEG57 main::@10
  b10:
  //SEG58 [21] call print_str 
  //SEG59 [84] phi from main::@10 to print_str [phi:main::@10->print_str]
  print_str_from_b10:
  //SEG60 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@10->print_str#0] -- register_copy 
  //SEG61 [84] phi (byte*) print_str::str#12 = (const string) main::str2 [phi:main::@10->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG62 [22] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
  //SEG63 main::@11
  b11:
  //SEG64 [23] call print_word 
  //SEG65 [66] phi from main::@11 to print_word [phi:main::@11->print_word]
  print_word_from_b11:
  //SEG66 [66] phi (word) print_word::w#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@11->print_word#0] -- vwuz1=vbuc1 
    lda #<0
    sta print_word.w
    lda #>0
    sta print_word.w+1
    jsr print_word
  //SEG67 [24] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  b12_from_b11:
    jmp b12
  //SEG68 main::@12
  b12:
  //SEG69 [25] call print_ln 
  //SEG70 [61] phi from main::@12 to print_ln [phi:main::@12->print_ln]
  print_ln_from_b12:
  //SEG71 [61] phi (byte*) print_line_cursor#21 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main::@12->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
  //SEG72 [26] phi from main::@12 to main::@1 [phi:main::@12->main::@1]
  b1_from_b12:
  //SEG73 [26] phi (byte) main::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@12->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG74 [26] phi from main::@21 to main::@1 [phi:main::@21->main::@1]
  b1_from_b21:
  //SEG75 [26] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@21->main::@1#0] -- register_copy 
    jmp b1
  //SEG76 main::@1
  b1:
  //SEG77 [27] (byte) print_byte::b#2 ← (byte) main::i#10 -- vbuxx=vbuz1 
    ldx i
  //SEG78 [28] (byte*~) print_char_cursor#91 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG79 [29] call print_byte 
  //SEG80 [72] phi from main::@1 to print_byte [phi:main::@1->print_byte]
  print_byte_from_b1:
  //SEG81 [72] phi (byte*) print_char_cursor#81 = (byte*~) print_char_cursor#91 [phi:main::@1->print_byte#0] -- register_copy 
  //SEG82 [72] phi (byte) print_byte::b#3 = (byte) print_byte::b#2 [phi:main::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG83 [30] phi from main::@1 to main::@14 [phi:main::@1->main::@14]
  b14_from_b1:
    jmp b14
  //SEG84 main::@14
  b14:
  //SEG85 [31] call print_str 
  //SEG86 [84] phi from main::@14 to print_str [phi:main::@14->print_str]
  print_str_from_b14:
  //SEG87 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@14->print_str#0] -- register_copy 
  //SEG88 [84] phi (byte*) print_str::str#12 = (const string) main::str3 [phi:main::@14->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
    jmp b15
  //SEG89 main::@15
  b15:
  //SEG90 [32] (word) print_word::w#3 ← *((const word[20]) main::lintab1#0 + (byte) main::i#10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda lintab1,y
    sta print_word.w
    lda lintab1+1,y
    sta print_word.w+1
  //SEG91 [33] call print_word 
  //SEG92 [66] phi from main::@15 to print_word [phi:main::@15->print_word]
  print_word_from_b15:
  //SEG93 [66] phi (word) print_word::w#10 = (word) print_word::w#3 [phi:main::@15->print_word#0] -- register_copy 
    jsr print_word
  //SEG94 [34] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
  b16_from_b15:
    jmp b16
  //SEG95 main::@16
  b16:
  //SEG96 [35] call print_str 
  //SEG97 [84] phi from main::@16 to print_str [phi:main::@16->print_str]
  print_str_from_b16:
  //SEG98 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@16->print_str#0] -- register_copy 
  //SEG99 [84] phi (byte*) print_str::str#12 = (const string) main::str4 [phi:main::@16->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
    jmp b17
  //SEG100 main::@17
  b17:
  //SEG101 [36] (word) print_word::w#4 ← *((const word[20]) main::lintab2#0 + (byte) main::i#10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda lintab2,y
    sta print_word.w
    lda lintab2+1,y
    sta print_word.w+1
  //SEG102 [37] call print_word 
  //SEG103 [66] phi from main::@17 to print_word [phi:main::@17->print_word]
  print_word_from_b17:
  //SEG104 [66] phi (word) print_word::w#10 = (word) print_word::w#4 [phi:main::@17->print_word#0] -- register_copy 
    jsr print_word
  //SEG105 [38] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
  b18_from_b17:
    jmp b18
  //SEG106 main::@18
  b18:
  //SEG107 [39] call print_str 
  //SEG108 [84] phi from main::@18 to print_str [phi:main::@18->print_str]
  print_str_from_b18:
  //SEG109 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@18->print_str#0] -- register_copy 
  //SEG110 [84] phi (byte*) print_str::str#12 = (const string) main::str5 [phi:main::@18->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta print_str.str
    lda #>str5
    sta print_str.str+1
    jsr print_str
    jmp b19
  //SEG111 main::@19
  b19:
  //SEG112 [40] (word) print_word::w#5 ← *((const word[20]) main::lintab3#0 + (byte) main::i#10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda lintab3,y
    sta print_word.w
    lda lintab3+1,y
    sta print_word.w+1
  //SEG113 [41] call print_word 
  //SEG114 [66] phi from main::@19 to print_word [phi:main::@19->print_word]
  print_word_from_b19:
  //SEG115 [66] phi (word) print_word::w#10 = (word) print_word::w#5 [phi:main::@19->print_word#0] -- register_copy 
    jsr print_word
  //SEG116 [42] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
  b20_from_b19:
    jmp b20
  //SEG117 main::@20
  b20:
  //SEG118 [43] call print_ln 
  //SEG119 [61] phi from main::@20 to print_ln [phi:main::@20->print_ln]
  print_ln_from_b20:
  //SEG120 [61] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#1 [phi:main::@20->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b21
  //SEG121 main::@21
  b21:
  //SEG122 [44] (byte) main::i#1 ← (byte) main::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda i
    clc
    adc #2
    sta i
  //SEG123 [45] if((byte) main::i#1<(byte/signed byte/word/signed word/dword/signed dword) 20*(byte/signed byte/word/signed word/dword/signed dword) 2) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$14*2
    bcc b1_from_b21
    jmp b2
  //SEG124 main::@2
  b2:
  //SEG125 [46] (byte*~) print_char_cursor#100 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG126 [47] call print_str 
  //SEG127 [84] phi from main::@2 to print_str [phi:main::@2->print_str]
  print_str_from_b2:
  //SEG128 [84] phi (byte*) print_char_cursor#86 = (byte*~) print_char_cursor#100 [phi:main::@2->print_str#0] -- register_copy 
  //SEG129 [84] phi (byte*) print_str::str#12 = (const string) main::str6 [phi:main::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta print_str.str
    lda #>str6
    sta print_str.str+1
    jsr print_str
  //SEG130 [48] phi from main::@2 to main::@22 [phi:main::@2->main::@22]
  b22_from_b2:
    jmp b22
  //SEG131 main::@22
  b22:
  //SEG132 [49] call print_word 
  //SEG133 [66] phi from main::@22 to print_word [phi:main::@22->print_word]
  print_word_from_b22:
  //SEG134 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 29793 [phi:main::@22->print_word#0] -- vwuz1=vwuc1 
    lda #<$7461
    sta print_word.w
    lda #>$7461
    sta print_word.w+1
    jsr print_word
  //SEG135 [50] phi from main::@22 to main::@23 [phi:main::@22->main::@23]
  b23_from_b22:
    jmp b23
  //SEG136 main::@23
  b23:
  //SEG137 [51] call print_str 
  //SEG138 [84] phi from main::@23 to print_str [phi:main::@23->print_str]
  print_str_from_b23:
  //SEG139 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@23->print_str#0] -- register_copy 
  //SEG140 [84] phi (byte*) print_str::str#12 = (const string) main::str7 [phi:main::@23->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta print_str.str
    lda #>str7
    sta print_str.str+1
    jsr print_str
  //SEG141 [52] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  b24_from_b23:
    jmp b24
  //SEG142 main::@24
  b24:
  //SEG143 [53] call print_word 
  //SEG144 [66] phi from main::@24 to print_word [phi:main::@24->print_word]
  print_word_from_b24:
  //SEG145 [66] phi (word) print_word::w#10 = (word/dword/signed dword) 63361 [phi:main::@24->print_word#0] -- vwuz1=vwuc1 
    lda #<$f781
    sta print_word.w
    lda #>$f781
    sta print_word.w+1
    jsr print_word
  //SEG146 [54] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
  b25_from_b24:
    jmp b25
  //SEG147 main::@25
  b25:
  //SEG148 [55] call print_str 
  //SEG149 [84] phi from main::@25 to print_str [phi:main::@25->print_str]
  print_str_from_b25:
  //SEG150 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@25->print_str#0] -- register_copy 
  //SEG151 [84] phi (byte*) print_str::str#12 = (const string) main::str8 [phi:main::@25->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta print_str.str
    lda #>str8
    sta print_str.str+1
    jsr print_str
  //SEG152 [56] phi from main::@25 to main::@26 [phi:main::@25->main::@26]
  b26_from_b25:
    jmp b26
  //SEG153 main::@26
  b26:
  //SEG154 [57] call print_word 
  //SEG155 [66] phi from main::@26 to print_word [phi:main::@26->print_word]
  print_word_from_b26:
  //SEG156 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 25736 [phi:main::@26->print_word#0] -- vwuz1=vwuc1 
    lda #<$6488
    sta print_word.w
    lda #>$6488
    sta print_word.w+1
    jsr print_word
  //SEG157 [58] phi from main::@26 to main::@27 [phi:main::@26->main::@27]
  b27_from_b26:
    jmp b27
  //SEG158 main::@27
  b27:
  //SEG159 [59] call print_ln 
  //SEG160 [61] phi from main::@27 to print_ln [phi:main::@27->print_ln]
  print_ln_from_b27:
  //SEG161 [61] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#1 [phi:main::@27->print_ln#0] -- register_copy 
    jsr print_ln
    jmp breturn
  //SEG162 main::@return
  breturn:
  //SEG163 [60] return 
    rts
    str: .text "   @"
    str1: .text " @"
    str2: .text " @"
    str3: .text " @"
    str4: .text " @"
    str5: .text " @"
    str6: .text "   @"
    str7: .text " @"
    str8: .text " @"
    lintab1: .fill 2*$14, 0
    lintab2: .fill 2*$14, 0
    lintab3: .fill 2*$14, 0
}
//SEG164 print_ln
//  Print a newline
print_ln: {
  //SEG165 [62] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG166 [62] phi (byte*) print_line_cursor#11 = (byte*) print_line_cursor#21 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG167 print_ln::@1
  b1:
  //SEG168 [63] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG169 [64] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG170 print_ln::@return
  breturn:
  //SEG171 [65] return 
    rts
}
//SEG172 print_word
//  Print a word as HEX
print_word: {
    .label w = 5
  //SEG173 [67] (byte) print_byte::b#0 ← > (word) print_word::w#10 -- vbuxx=_hi_vwuz1 
    lda w+1
    tax
  //SEG174 [68] call print_byte 
  //SEG175 [72] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG176 [72] phi (byte*) print_char_cursor#81 = (byte*) print_char_cursor#2 [phi:print_word->print_byte#0] -- register_copy 
  //SEG177 [72] phi (byte) print_byte::b#3 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG178 print_word::@1
  b1:
  //SEG179 [69] (byte) print_byte::b#1 ← < (word) print_word::w#10 -- vbuxx=_lo_vwuz1 
    lda w
    tax
  //SEG180 [70] call print_byte 
  //SEG181 [72] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG182 [72] phi (byte*) print_char_cursor#81 = (byte*) print_char_cursor#11 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG183 [72] phi (byte) print_byte::b#3 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG184 print_word::@return
  breturn:
  //SEG185 [71] return 
    rts
}
//SEG186 print_byte
//  Print a byte as HEX
print_byte: {
  //SEG187 [73] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
  //SEG188 [74] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG189 [75] call print_char 
  //SEG190 [80] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG191 [80] phi (byte*) print_char_cursor#50 = (byte*) print_char_cursor#81 [phi:print_byte->print_char#0] -- register_copy 
  //SEG192 [80] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG193 print_byte::@1
  b1:
  //SEG194 [76] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte/signed byte/word/signed word/dword/signed dword) 15 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG195 [77] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG196 [78] call print_char 
  //SEG197 [80] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG198 [80] phi (byte*) print_char_cursor#50 = (byte*) print_char_cursor#11 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG199 [80] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG200 print_byte::@return
  breturn:
  //SEG201 [79] return 
    rts
}
//SEG202 print_char
//  Print a single char
print_char: {
  //SEG203 [81] *((byte*) print_char_cursor#50) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG204 [82] (byte*) print_char_cursor#11 ← ++ (byte*) print_char_cursor#50 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG205 print_char::@return
  breturn:
  //SEG206 [83] return 
    rts
}
//SEG207 print_str
//  Print a zero-terminated string
print_str: {
    .label str = 5
  //SEG208 [85] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG209 [85] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#86 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG210 [85] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG211 print_str::@1
  b1:
  //SEG212 [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG213 print_str::@return
  breturn:
  //SEG214 [87] return 
    rts
  //SEG215 print_str::@2
  b2:
  //SEG216 [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG217 [89] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG218 [90] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG219 print_cls
//  Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 3
  //SEG220 [92] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG221 [92] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG222 [92] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG223 [92] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG224 print_cls::@1
  b1:
  //SEG225 [93] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG226 [94] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG227 [95] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG228 print_cls::@return
  breturn:
  //SEG229 [96] return 
    rts
}
//SEG230 lin16u_gen
//  Generate word linear table
//  lintab - the table to generate into
//  length - the number of points in a total sinus wavelength (the size of the table)
lin16u_gen: {
    .label _5 = 5
    .label ampl = 3
    .label stepi = $13
    .label stepf = $11
    .label step = $15
    .label val = 9
    .label lintab = 7
    .label i = 3
    .label max = 3
    .label min = 5
  //SEG231 [98] (word) lin16u_gen::ampl#0 ← (word) lin16u_gen::max#3 - (word) lin16u_gen::min#3 -- vwuz1=vwuz1_minus_vwuz2 
    lda ampl
    sec
    sbc min
    sta ampl
    lda ampl+1
    sbc min+1
    sta ampl+1
  //SEG232 [99] (word) divr16u::dividend#1 ← (word) lin16u_gen::ampl#0
  //SEG233 [100] call divr16u 
  //SEG234 [117] phi from lin16u_gen to divr16u [phi:lin16u_gen->divr16u]
  divr16u_from_lin16u_gen:
  //SEG235 [117] phi (word) divr16u::divisor#6 = (byte/signed byte/word/signed word/dword/signed dword) 20-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:lin16u_gen->divr16u#0] -- vwuz1=vbuc1 
    lda #<$14-1
    sta divr16u.divisor
    lda #>$14-1
    sta divr16u.divisor+1
  //SEG236 [117] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#1 [phi:lin16u_gen->divr16u#1] -- register_copy 
  //SEG237 [117] phi (word) divr16u::rem#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lin16u_gen->divr16u#2] -- vwuz1=vbuc1 
    lda #<0
    sta divr16u.rem
    lda #>0
    sta divr16u.rem+1
    jsr divr16u
  //SEG238 [101] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp b3
  //SEG239 lin16u_gen::@3
  b3:
  //SEG240 [102] (word) lin16u_gen::stepi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return
    sta stepi
    lda divr16u.return+1
    sta stepi+1
  //SEG241 [103] (word) divr16u::rem#4 ← (word) rem16u#1
  //SEG242 [104] call divr16u 
  //SEG243 [117] phi from lin16u_gen::@3 to divr16u [phi:lin16u_gen::@3->divr16u]
  divr16u_from_b3:
  //SEG244 [117] phi (word) divr16u::divisor#6 = (byte/signed byte/word/signed word/dword/signed dword) 20-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:lin16u_gen::@3->divr16u#0] -- vwuz1=vbuc1 
    lda #<$14-1
    sta divr16u.divisor
    lda #>$14-1
    sta divr16u.divisor+1
  //SEG245 [117] phi (word) divr16u::dividend#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lin16u_gen::@3->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta divr16u.dividend
    lda #>0
    sta divr16u.dividend+1
  //SEG246 [117] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:lin16u_gen::@3->divr16u#2] -- register_copy 
    jsr divr16u
  //SEG247 [105] (word) divr16u::return#3 ← (word) divr16u::return#0
    jmp b4
  //SEG248 lin16u_gen::@4
  b4:
  //SEG249 [106] (word) lin16u_gen::stepf#0 ← (word) divr16u::return#3
  //SEG250 [107] (dword) lin16u_gen::step#0 ← (word) lin16u_gen::stepi#0 dw= (word) lin16u_gen::stepf#0 -- vduz1=vwuz2_dword_vwuz3 
    lda stepi
    sta step+2
    lda stepi+1
    sta step+3
    lda stepf
    sta step
    lda stepf+1
    sta step+1
  //SEG251 [108] (dword) lin16u_gen::val#0 ← (word) lin16u_gen::min#3 dw= (byte/signed byte/word/signed word/dword/signed dword) 0 -- vduz1=vwuz2_dword_vbuc1 
    lda #<0
    sta val
    lda #>0
    sta val+1
    lda min
    sta val+2
    lda min+1
    sta val+3
  //SEG252 [109] phi from lin16u_gen::@4 to lin16u_gen::@1 [phi:lin16u_gen::@4->lin16u_gen::@1]
  b1_from_b4:
  //SEG253 [109] phi (word) lin16u_gen::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lin16u_gen::@4->lin16u_gen::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
  //SEG254 [109] phi (word*) lin16u_gen::lintab#4 = (word*) lin16u_gen::lintab#5 [phi:lin16u_gen::@4->lin16u_gen::@1#1] -- register_copy 
  //SEG255 [109] phi (dword) lin16u_gen::val#2 = (dword) lin16u_gen::val#0 [phi:lin16u_gen::@4->lin16u_gen::@1#2] -- register_copy 
    jmp b1
  //SEG256 [109] phi from lin16u_gen::@1 to lin16u_gen::@1 [phi:lin16u_gen::@1->lin16u_gen::@1]
  b1_from_b1:
  //SEG257 [109] phi (word) lin16u_gen::i#2 = (word) lin16u_gen::i#1 [phi:lin16u_gen::@1->lin16u_gen::@1#0] -- register_copy 
  //SEG258 [109] phi (word*) lin16u_gen::lintab#4 = (word*) lin16u_gen::lintab#3 [phi:lin16u_gen::@1->lin16u_gen::@1#1] -- register_copy 
  //SEG259 [109] phi (dword) lin16u_gen::val#2 = (dword) lin16u_gen::val#1 [phi:lin16u_gen::@1->lin16u_gen::@1#2] -- register_copy 
    jmp b1
  //SEG260 lin16u_gen::@1
  b1:
  //SEG261 [110] (word~) lin16u_gen::$5 ← > (dword) lin16u_gen::val#2 -- vwuz1=_hi_vduz2 
    lda val+2
    sta _5
    lda val+3
    sta _5+1
  //SEG262 [111] *((word*) lin16u_gen::lintab#4) ← (word~) lin16u_gen::$5 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda _5
    sta (lintab),y
    iny
    lda _5+1
    sta (lintab),y
  //SEG263 [112] (dword) lin16u_gen::val#1 ← (dword) lin16u_gen::val#2 + (dword) lin16u_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda val
    clc
    adc step
    sta val
    lda val+1
    adc step+1
    sta val+1
    lda val+2
    adc step+2
    sta val+2
    lda val+3
    adc step+3
    sta val+3
  //SEG264 [113] (word*) lin16u_gen::lintab#3 ← (word*) lin16u_gen::lintab#4 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwuz1=pwuz1_plus_2 
    lda lintab
    clc
    adc #2
    sta lintab
    bcc !+
    inc lintab+1
  !:
  //SEG265 [114] (word) lin16u_gen::i#1 ← ++ (word) lin16u_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG266 [115] if((word) lin16u_gen::i#1<(byte/signed byte/word/signed word/dword/signed dword) 20) goto lin16u_gen::@1 -- vwuz1_lt_vbuc1_then_la1 
    lda i+1
    cmp #>$14
    bcc b1_from_b1
    bne !+
    lda i
    cmp #<$14
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG267 lin16u_gen::@return
  breturn:
  //SEG268 [116] return 
    rts
}
//SEG269 divr16u
//  Performs division on two 16 bit unsigned words and an initial remainder
//  Returns the quotient dividend/divisor.
//  The final remainder will be set into the global variable rem16u
//  Implemented using simple binary division
divr16u: {
    .label rem = $f
    .label dividend = 3
    .label quotient = $11
    .label return = $11
    .label divisor = $d
  //SEG270 [118] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG271 [118] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG272 [118] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta quotient
    lda #>0
    sta quotient+1
  //SEG273 [118] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG274 [118] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG275 [118] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG276 [118] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG277 [118] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG278 [118] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG279 [118] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG280 divr16u::@1
  b1:
  //SEG281 [119] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG282 [120] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG283 [121] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG284 [122] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG285 divr16u::@4
  b4:
  //SEG286 [123] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG287 [124] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG288 [124] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG289 divr16u::@2
  b2:
  //SEG290 [125] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG291 [126] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG292 [127] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3_from_b2
    bne !+
    lda rem
    cmp divisor
    bcc b3_from_b2
  !:
    jmp b5
  //SEG293 divr16u::@5
  b5:
  //SEG294 [128] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG295 [129] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG296 [130] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG297 [130] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG298 [130] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG299 divr16u::@3
  b3:
  //SEG300 [131] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG301 [132] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp b6
  //SEG302 divr16u::@6
  b6:
  //SEG303 [133] (word) rem16u#1 ← (word) divr16u::rem#11
    jmp breturn
  //SEG304 divr16u::@return
  breturn:
  //SEG305 [134] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b29
Removing instruction jmp bend
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b1
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp b18
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b21
Removing instruction jmp b2
Removing instruction jmp b22
Removing instruction jmp b23
Removing instruction jmp b24
Removing instruction jmp b25
Removing instruction jmp b26
Removing instruction jmp b27
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda i
Removing instruction ldy #0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b21 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b2 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Removing instruction b29_from_bbegin:
Removing instruction b29:
Removing instruction main_from_b29:
Removing instruction bend_from_b29:
Removing instruction b3_from_main:
Removing instruction lin16u_gen_from_b3:
Removing instruction b4_from_b3:
Removing instruction lin16u_gen_from_b4:
Removing instruction b5_from_b4:
Removing instruction print_cls_from_b5:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b7_from_b6:
Removing instruction print_word_from_b7:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b9_from_b8:
Removing instruction print_word_from_b9:
Removing instruction b10_from_b9:
Removing instruction print_str_from_b10:
Removing instruction b11_from_b10:
Removing instruction print_word_from_b11:
Removing instruction b12_from_b11:
Removing instruction print_ln_from_b12:
Removing instruction b1_from_b21:
Removing instruction b14_from_b1:
Removing instruction print_str_from_b14:
Removing instruction b16_from_b15:
Removing instruction print_str_from_b16:
Removing instruction b18_from_b17:
Removing instruction print_str_from_b18:
Removing instruction b20_from_b19:
Removing instruction print_ln_from_b20:
Removing instruction b22_from_b2:
Removing instruction print_word_from_b22:
Removing instruction b23_from_b22:
Removing instruction print_str_from_b23:
Removing instruction b24_from_b23:
Removing instruction print_word_from_b24:
Removing instruction b25_from_b24:
Removing instruction print_str_from_b25:
Removing instruction b26_from_b25:
Removing instruction print_word_from_b26:
Removing instruction b27_from_b26:
Removing instruction print_ln_from_b27:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction b1_from_b1:
Removing instruction b1_from_b1:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction lin16u_gen_from_main:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b1_from_b12:
Removing instruction print_byte_from_b1:
Removing instruction b14:
Removing instruction b15:
Removing instruction print_word_from_b15:
Removing instruction b16:
Removing instruction b17:
Removing instruction print_word_from_b17:
Removing instruction b18:
Removing instruction b19:
Removing instruction print_word_from_b19:
Removing instruction b20:
Removing instruction b21:
Removing instruction b2:
Removing instruction print_str_from_b2:
Removing instruction b22:
Removing instruction b23:
Removing instruction b24:
Removing instruction b25:
Removing instruction b26:
Removing instruction b27:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Removing instruction divr16u_from_lin16u_gen:
Removing instruction b3:
Removing instruction divr16u_from_b3:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction breturn:
Removing instruction b1_from_divr16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @29
(label) @begin
(label) @end
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 22.0
(byte~) divr16u::$2 reg byte a 22.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:3 2.75
(word) divr16u::dividend#1 dividend zp ZP_WORD:3 4.0
(word) divr16u::dividend#3 dividend zp ZP_WORD:3 5.0
(word) divr16u::dividend#5 dividend zp ZP_WORD:3 4.0
(word) divr16u::divisor
(word) divr16u::divisor#6 divisor zp ZP_WORD:13 1.375
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 16.5
(byte) divr16u::i#2 reg byte x 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:17 16.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:17 11.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:17 2.75
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:15 8.25
(word) divr16u::rem#1 rem zp ZP_WORD:15 22.0
(word) divr16u::rem#10 rem zp ZP_WORD:15 4.0
(word) divr16u::rem#11 rem zp ZP_WORD:15 11.666666666666666
(word) divr16u::rem#2 rem zp ZP_WORD:15 22.0
(word) divr16u::rem#4 rem zp ZP_WORD:15 4.0
(word) divr16u::rem#5 rem zp ZP_WORD:15 24.0
(word) divr16u::rem#6 rem zp ZP_WORD:15 11.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:17 5.285714285714286
(word) divr16u::return#2 return zp ZP_WORD:17 4.0
(word) divr16u::return#3 return zp ZP_WORD:17 4.0
(void()) lin16u_gen((word) lin16u_gen::min , (word) lin16u_gen::max , (word*) lin16u_gen::lintab , (word) lin16u_gen::length)
(word~) lin16u_gen::$5 $5 zp ZP_WORD:5 22.0
(label) lin16u_gen::@1
(label) lin16u_gen::@3
(label) lin16u_gen::@4
(label) lin16u_gen::@return
(word) lin16u_gen::ampl
(word) lin16u_gen::ampl#0 ampl zp ZP_WORD:3 4.0
(word) lin16u_gen::i
(word) lin16u_gen::i#1 i zp ZP_WORD:3 16.5
(word) lin16u_gen::i#2 i zp ZP_WORD:3 4.4
(word) lin16u_gen::length
(word*) lin16u_gen::lintab
(word*) lin16u_gen::lintab#3 lintab zp ZP_WORD:7 7.333333333333333
(word*) lin16u_gen::lintab#4 lintab zp ZP_WORD:7 8.75
(word*) lin16u_gen::lintab#5 lintab zp ZP_WORD:7 0.16666666666666666
(word) lin16u_gen::max
(word) lin16u_gen::max#3 max zp ZP_WORD:3 2.0
(word) lin16u_gen::min
(word) lin16u_gen::min#3 min zp ZP_WORD:5 0.36363636363636365
(dword) lin16u_gen::step
(dword) lin16u_gen::step#0 step zp ZP_DWORD:21 1.4444444444444446
(word) lin16u_gen::stepf
(word) lin16u_gen::stepf#0 stepf zp ZP_WORD:17 4.0
(word) lin16u_gen::stepi
(word) lin16u_gen::stepi#0 stepi zp ZP_WORD:19 0.8
(dword) lin16u_gen::val
(dword) lin16u_gen::val#0 val zp ZP_DWORD:9 4.0
(dword) lin16u_gen::val#1 val zp ZP_DWORD:9 5.5
(dword) lin16u_gen::val#2 val zp ZP_DWORD:9 11.666666666666666
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@26
(label) main::@27
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:2 16.5
(byte) main::i#10 i zp ZP_BYTE:2 3.666666666666667
(word[20]) main::lintab1
(const word[20]) main::lintab1#0 lintab1 = { fill( 20, 0) }
(word[20]) main::lintab2
(const word[20]) main::lintab2#0 lintab2 = { fill( 20, 0) }
(word[20]) main::lintab3
(const word[20]) main::lintab3#0 lintab3 = { fill( 20, 0) }
(const string) main::str str = (string) "   @"
(const string) main::str1 str1 = (string) " @"
(const string) main::str2 str2 = (string) " @"
(const string) main::str3 str3 = (string) " @"
(const string) main::str4 str4 = (string) " @"
(const string) main::str5 str5 = (string) " @"
(const string) main::str6 str6 = (string) "   @"
(const string) main::str7 str7 = (string) " @"
(const string) main::str8 str8 = (string) " @"
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 4.0
(byte) print_byte::b#1 reg byte x 4.0
(byte) print_byte::b#2 reg byte x 11.0
(byte) print_byte::b#3 reg byte x 4.75
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:7 101.0
(byte*~) print_char_cursor#100 print_char_cursor zp ZP_WORD:7 4.0
(byte*) print_char_cursor#11 print_char_cursor zp ZP_WORD:7 4.228571428571427
(byte*) print_char_cursor#2 print_char_cursor zp ZP_WORD:7 12.791666666666664
(byte*) print_char_cursor#50 print_char_cursor zp ZP_WORD:7 4.0
(byte*) print_char_cursor#81 print_char_cursor zp ZP_WORD:7 5.666666666666667
(byte*) print_char_cursor#86 print_char_cursor zp ZP_WORD:7 45.0
(byte*~) print_char_cursor#91 print_char_cursor zp ZP_WORD:7 22.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:3 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:3 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:3 8.891891891891891
(byte*) print_line_cursor#11 print_line_cursor zp ZP_WORD:3 204.0
(byte*) print_line_cursor#21 print_line_cursor zp ZP_WORD:3 15.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:5 202.0
(byte*) print_str::str#10 str zp ZP_WORD:5 101.5
(byte*) print_str::str#12 str zp ZP_WORD:5 2.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#10 w zp ZP_WORD:5 12.333333333333332
(word) print_word::w#3 w zp ZP_WORD:5 22.0
(word) print_word::w#4 w zp ZP_WORD:5 22.0
(word) print_word::w#5 w zp ZP_WORD:5 22.0
(signed word) rem16s
(word) rem16u
(word) rem16u#1 rem16u zp ZP_WORD:15 0.8
(signed byte) rem8s
(byte) rem8u

zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#21 print_line_cursor#1 print_cls::sc#2 print_cls::sc#1 lin16u_gen::max#3 lin16u_gen::ampl#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#0 lin16u_gen::i#2 lin16u_gen::i#1 ]
zp ZP_WORD:5 [ print_word::w#10 print_word::w#3 print_word::w#4 print_word::w#5 print_str::str#10 print_str::str#12 print_str::str#0 lin16u_gen::min#3 lin16u_gen::$5 ]
reg byte x [ print_byte::b#3 print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp ZP_WORD:7 [ print_char_cursor#86 print_char_cursor#50 print_char_cursor#81 print_char_cursor#91 print_char_cursor#2 print_char_cursor#11 print_char_cursor#100 print_char_cursor#1 lin16u_gen::lintab#4 lin16u_gen::lintab#3 lin16u_gen::lintab#5 ]
zp ZP_DWORD:9 [ lin16u_gen::val#2 lin16u_gen::val#1 lin16u_gen::val#0 ]
zp ZP_WORD:13 [ divr16u::divisor#6 ]
zp ZP_WORD:15 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 ]
zp ZP_WORD:17 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 lin16u_gen::stepf#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
zp ZP_WORD:19 [ lin16u_gen::stepi#0 ]
zp ZP_DWORD:21 [ lin16u_gen::step#0 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]


FINAL ASSEMBLER
Score: 13527

//SEG0 File Comments
//  Linear table generator
//  Work in progress towards a sinus generator
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label rem16u = $f
  .label print_char_cursor = 7
  .label print_line_cursor = 3
//SEG3 @begin
//SEG4 [1] phi from @begin to @29 [phi:@begin->@29]
//SEG5 @29
//SEG6 [2] call main 
//SEG7 [4] phi from @29 to main [phi:@29->main]
//SEG8 [3] phi from @29 to @end [phi:@29->@end]
//SEG9 @end
//SEG10 main
main: {
    .label i = 2
  //SEG11 [5] call lin16u_gen 
  //SEG12 [97] phi from main to lin16u_gen [phi:main->lin16u_gen]
  //SEG13 [97] phi (word*) lin16u_gen::lintab#5 = (const word[20]) main::lintab1#0 [phi:main->lin16u_gen#0] -- pwuz1=pwuc1 
    lda #<lintab1
    sta lin16u_gen.lintab
    lda #>lintab1
    sta lin16u_gen.lintab+1
  //SEG14 [97] phi (word) lin16u_gen::min#3 = (word/signed word/dword/signed dword) 557 [phi:main->lin16u_gen#1] -- vwuz1=vwuc1 
    lda #<$22d
    sta lin16u_gen.min
    lda #>$22d
    sta lin16u_gen.min+1
  //SEG15 [97] phi (word) lin16u_gen::max#3 = (word/signed word/dword/signed dword) 29793 [phi:main->lin16u_gen#2] -- vwuz1=vwuc1 
    lda #<$7461
    sta lin16u_gen.max
    lda #>$7461
    sta lin16u_gen.max+1
    jsr lin16u_gen
  //SEG16 [6] phi from main to main::@3 [phi:main->main::@3]
  //SEG17 main::@3
  //SEG18 [7] call lin16u_gen 
  //SEG19 [97] phi from main::@3 to lin16u_gen [phi:main::@3->lin16u_gen]
  //SEG20 [97] phi (word*) lin16u_gen::lintab#5 = (const word[20]) main::lintab2#0 [phi:main::@3->lin16u_gen#0] -- pwuz1=pwuc1 
    lda #<lintab2
    sta lin16u_gen.lintab
    lda #>lintab2
    sta lin16u_gen.lintab+1
  //SEG21 [97] phi (word) lin16u_gen::min#3 = (word/signed word/dword/signed dword) 31179 [phi:main::@3->lin16u_gen#1] -- vwuz1=vwuc1 
    lda #<$79cb
    sta lin16u_gen.min
    lda #>$79cb
    sta lin16u_gen.min+1
  //SEG22 [97] phi (word) lin16u_gen::max#3 = (word/dword/signed dword) 63361 [phi:main::@3->lin16u_gen#2] -- vwuz1=vwuc1 
    lda #<$f781
    sta lin16u_gen.max
    lda #>$f781
    sta lin16u_gen.max+1
    jsr lin16u_gen
  //SEG23 [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  //SEG24 main::@4
  //SEG25 [9] call lin16u_gen 
  //SEG26 [97] phi from main::@4 to lin16u_gen [phi:main::@4->lin16u_gen]
  //SEG27 [97] phi (word*) lin16u_gen::lintab#5 = (const word[20]) main::lintab3#0 [phi:main::@4->lin16u_gen#0] -- pwuz1=pwuc1 
    lda #<lintab3
    sta lin16u_gen.lintab
    lda #>lintab3
    sta lin16u_gen.lintab+1
  //SEG28 [97] phi (word) lin16u_gen::min#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@4->lin16u_gen#1] -- vwuz1=vbuc1 
    lda #<0
    sta lin16u_gen.min
    sta lin16u_gen.min+1
  //SEG29 [97] phi (word) lin16u_gen::max#3 = (word/signed word/dword/signed dword) 25736 [phi:main::@4->lin16u_gen#2] -- vwuz1=vwuc1 
    lda #<$6488
    sta lin16u_gen.max
    lda #>$6488
    sta lin16u_gen.max+1
    jsr lin16u_gen
  //SEG30 [10] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  //SEG31 main::@5
  //SEG32 [11] call print_cls 
  //SEG33 [91] phi from main::@5 to print_cls [phi:main::@5->print_cls]
    jsr print_cls
  //SEG34 [12] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  //SEG35 main::@6
  //SEG36 [13] call print_str 
  //SEG37 [84] phi from main::@6 to print_str [phi:main::@6->print_str]
  //SEG38 [84] phi (byte*) print_char_cursor#86 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG39 [84] phi (byte*) print_str::str#12 = (const string) main::str [phi:main::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG40 [14] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  //SEG41 main::@7
  //SEG42 [15] call print_word 
  //SEG43 [66] phi from main::@7 to print_word [phi:main::@7->print_word]
  //SEG44 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 557 [phi:main::@7->print_word#0] -- vwuz1=vwuc1 
    lda #<$22d
    sta print_word.w
    lda #>$22d
    sta print_word.w+1
    jsr print_word
  //SEG45 [16] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  //SEG46 main::@8
  //SEG47 [17] call print_str 
  //SEG48 [84] phi from main::@8 to print_str [phi:main::@8->print_str]
  //SEG49 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@8->print_str#0] -- register_copy 
  //SEG50 [84] phi (byte*) print_str::str#12 = (const string) main::str1 [phi:main::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG51 [18] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  //SEG52 main::@9
  //SEG53 [19] call print_word 
  //SEG54 [66] phi from main::@9 to print_word [phi:main::@9->print_word]
  //SEG55 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 31179 [phi:main::@9->print_word#0] -- vwuz1=vwuc1 
    lda #<$79cb
    sta print_word.w
    lda #>$79cb
    sta print_word.w+1
    jsr print_word
  //SEG56 [20] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  //SEG57 main::@10
  //SEG58 [21] call print_str 
  //SEG59 [84] phi from main::@10 to print_str [phi:main::@10->print_str]
  //SEG60 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@10->print_str#0] -- register_copy 
  //SEG61 [84] phi (byte*) print_str::str#12 = (const string) main::str2 [phi:main::@10->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG62 [22] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  //SEG63 main::@11
  //SEG64 [23] call print_word 
  //SEG65 [66] phi from main::@11 to print_word [phi:main::@11->print_word]
  //SEG66 [66] phi (word) print_word::w#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@11->print_word#0] -- vwuz1=vbuc1 
    lda #<0
    sta print_word.w
    sta print_word.w+1
    jsr print_word
  //SEG67 [24] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  //SEG68 main::@12
  //SEG69 [25] call print_ln 
  //SEG70 [61] phi from main::@12 to print_ln [phi:main::@12->print_ln]
  //SEG71 [61] phi (byte*) print_line_cursor#21 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main::@12->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
  //SEG72 [26] phi from main::@12 to main::@1 [phi:main::@12->main::@1]
  //SEG73 [26] phi (byte) main::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@12->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG74 [26] phi from main::@21 to main::@1 [phi:main::@21->main::@1]
  //SEG75 [26] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@21->main::@1#0] -- register_copy 
  //SEG76 main::@1
  b1:
  //SEG77 [27] (byte) print_byte::b#2 ← (byte) main::i#10 -- vbuxx=vbuz1 
    ldx i
  //SEG78 [28] (byte*~) print_char_cursor#91 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG79 [29] call print_byte 
  //SEG80 [72] phi from main::@1 to print_byte [phi:main::@1->print_byte]
  //SEG81 [72] phi (byte*) print_char_cursor#81 = (byte*~) print_char_cursor#91 [phi:main::@1->print_byte#0] -- register_copy 
  //SEG82 [72] phi (byte) print_byte::b#3 = (byte) print_byte::b#2 [phi:main::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG83 [30] phi from main::@1 to main::@14 [phi:main::@1->main::@14]
  //SEG84 main::@14
  //SEG85 [31] call print_str 
  //SEG86 [84] phi from main::@14 to print_str [phi:main::@14->print_str]
  //SEG87 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@14->print_str#0] -- register_copy 
  //SEG88 [84] phi (byte*) print_str::str#12 = (const string) main::str3 [phi:main::@14->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
  //SEG89 main::@15
  //SEG90 [32] (word) print_word::w#3 ← *((const word[20]) main::lintab1#0 + (byte) main::i#10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda lintab1,y
    sta print_word.w
    lda lintab1+1,y
    sta print_word.w+1
  //SEG91 [33] call print_word 
  //SEG92 [66] phi from main::@15 to print_word [phi:main::@15->print_word]
  //SEG93 [66] phi (word) print_word::w#10 = (word) print_word::w#3 [phi:main::@15->print_word#0] -- register_copy 
    jsr print_word
  //SEG94 [34] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
  //SEG95 main::@16
  //SEG96 [35] call print_str 
  //SEG97 [84] phi from main::@16 to print_str [phi:main::@16->print_str]
  //SEG98 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@16->print_str#0] -- register_copy 
  //SEG99 [84] phi (byte*) print_str::str#12 = (const string) main::str4 [phi:main::@16->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
  //SEG100 main::@17
  //SEG101 [36] (word) print_word::w#4 ← *((const word[20]) main::lintab2#0 + (byte) main::i#10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda lintab2,y
    sta print_word.w
    lda lintab2+1,y
    sta print_word.w+1
  //SEG102 [37] call print_word 
  //SEG103 [66] phi from main::@17 to print_word [phi:main::@17->print_word]
  //SEG104 [66] phi (word) print_word::w#10 = (word) print_word::w#4 [phi:main::@17->print_word#0] -- register_copy 
    jsr print_word
  //SEG105 [38] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
  //SEG106 main::@18
  //SEG107 [39] call print_str 
  //SEG108 [84] phi from main::@18 to print_str [phi:main::@18->print_str]
  //SEG109 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@18->print_str#0] -- register_copy 
  //SEG110 [84] phi (byte*) print_str::str#12 = (const string) main::str5 [phi:main::@18->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta print_str.str
    lda #>str5
    sta print_str.str+1
    jsr print_str
  //SEG111 main::@19
  //SEG112 [40] (word) print_word::w#5 ← *((const word[20]) main::lintab3#0 + (byte) main::i#10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda lintab3,y
    sta print_word.w
    lda lintab3+1,y
    sta print_word.w+1
  //SEG113 [41] call print_word 
  //SEG114 [66] phi from main::@19 to print_word [phi:main::@19->print_word]
  //SEG115 [66] phi (word) print_word::w#10 = (word) print_word::w#5 [phi:main::@19->print_word#0] -- register_copy 
    jsr print_word
  //SEG116 [42] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
  //SEG117 main::@20
  //SEG118 [43] call print_ln 
  //SEG119 [61] phi from main::@20 to print_ln [phi:main::@20->print_ln]
  //SEG120 [61] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#1 [phi:main::@20->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG121 main::@21
  //SEG122 [44] (byte) main::i#1 ← (byte) main::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda i
    clc
    adc #2
    sta i
  //SEG123 [45] if((byte) main::i#1<(byte/signed byte/word/signed word/dword/signed dword) 20*(byte/signed byte/word/signed word/dword/signed dword) 2) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    cmp #$14*2
    bcc b1
  //SEG124 main::@2
  //SEG125 [46] (byte*~) print_char_cursor#100 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG126 [47] call print_str 
  //SEG127 [84] phi from main::@2 to print_str [phi:main::@2->print_str]
  //SEG128 [84] phi (byte*) print_char_cursor#86 = (byte*~) print_char_cursor#100 [phi:main::@2->print_str#0] -- register_copy 
  //SEG129 [84] phi (byte*) print_str::str#12 = (const string) main::str6 [phi:main::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta print_str.str
    lda #>str6
    sta print_str.str+1
    jsr print_str
  //SEG130 [48] phi from main::@2 to main::@22 [phi:main::@2->main::@22]
  //SEG131 main::@22
  //SEG132 [49] call print_word 
  //SEG133 [66] phi from main::@22 to print_word [phi:main::@22->print_word]
  //SEG134 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 29793 [phi:main::@22->print_word#0] -- vwuz1=vwuc1 
    lda #<$7461
    sta print_word.w
    lda #>$7461
    sta print_word.w+1
    jsr print_word
  //SEG135 [50] phi from main::@22 to main::@23 [phi:main::@22->main::@23]
  //SEG136 main::@23
  //SEG137 [51] call print_str 
  //SEG138 [84] phi from main::@23 to print_str [phi:main::@23->print_str]
  //SEG139 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@23->print_str#0] -- register_copy 
  //SEG140 [84] phi (byte*) print_str::str#12 = (const string) main::str7 [phi:main::@23->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta print_str.str
    lda #>str7
    sta print_str.str+1
    jsr print_str
  //SEG141 [52] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  //SEG142 main::@24
  //SEG143 [53] call print_word 
  //SEG144 [66] phi from main::@24 to print_word [phi:main::@24->print_word]
  //SEG145 [66] phi (word) print_word::w#10 = (word/dword/signed dword) 63361 [phi:main::@24->print_word#0] -- vwuz1=vwuc1 
    lda #<$f781
    sta print_word.w
    lda #>$f781
    sta print_word.w+1
    jsr print_word
  //SEG146 [54] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
  //SEG147 main::@25
  //SEG148 [55] call print_str 
  //SEG149 [84] phi from main::@25 to print_str [phi:main::@25->print_str]
  //SEG150 [84] phi (byte*) print_char_cursor#86 = (byte*) print_char_cursor#11 [phi:main::@25->print_str#0] -- register_copy 
  //SEG151 [84] phi (byte*) print_str::str#12 = (const string) main::str8 [phi:main::@25->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta print_str.str
    lda #>str8
    sta print_str.str+1
    jsr print_str
  //SEG152 [56] phi from main::@25 to main::@26 [phi:main::@25->main::@26]
  //SEG153 main::@26
  //SEG154 [57] call print_word 
  //SEG155 [66] phi from main::@26 to print_word [phi:main::@26->print_word]
  //SEG156 [66] phi (word) print_word::w#10 = (word/signed word/dword/signed dword) 25736 [phi:main::@26->print_word#0] -- vwuz1=vwuc1 
    lda #<$6488
    sta print_word.w
    lda #>$6488
    sta print_word.w+1
    jsr print_word
  //SEG157 [58] phi from main::@26 to main::@27 [phi:main::@26->main::@27]
  //SEG158 main::@27
  //SEG159 [59] call print_ln 
  //SEG160 [61] phi from main::@27 to print_ln [phi:main::@27->print_ln]
  //SEG161 [61] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#1 [phi:main::@27->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG162 main::@return
  //SEG163 [60] return 
    rts
    str: .text "   @"
    str1: .text " @"
    str2: .text " @"
    str3: .text " @"
    str4: .text " @"
    str5: .text " @"
    str6: .text "   @"
    str7: .text " @"
    str8: .text " @"
    lintab1: .fill 2*$14, 0
    lintab2: .fill 2*$14, 0
    lintab3: .fill 2*$14, 0
}
//SEG164 print_ln
//  Print a newline
print_ln: {
  //SEG165 [62] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG166 [62] phi (byte*) print_line_cursor#11 = (byte*) print_line_cursor#21 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG167 print_ln::@1
  b1:
  //SEG168 [63] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG169 [64] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG170 print_ln::@return
  //SEG171 [65] return 
    rts
}
//SEG172 print_word
//  Print a word as HEX
print_word: {
    .label w = 5
  //SEG173 [67] (byte) print_byte::b#0 ← > (word) print_word::w#10 -- vbuxx=_hi_vwuz1 
    lda w+1
    tax
  //SEG174 [68] call print_byte 
  //SEG175 [72] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG176 [72] phi (byte*) print_char_cursor#81 = (byte*) print_char_cursor#2 [phi:print_word->print_byte#0] -- register_copy 
  //SEG177 [72] phi (byte) print_byte::b#3 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG178 print_word::@1
  //SEG179 [69] (byte) print_byte::b#1 ← < (word) print_word::w#10 -- vbuxx=_lo_vwuz1 
    lda w
    tax
  //SEG180 [70] call print_byte 
  //SEG181 [72] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG182 [72] phi (byte*) print_char_cursor#81 = (byte*) print_char_cursor#11 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG183 [72] phi (byte) print_byte::b#3 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG184 print_word::@return
  //SEG185 [71] return 
    rts
}
//SEG186 print_byte
//  Print a byte as HEX
print_byte: {
  //SEG187 [73] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
  //SEG188 [74] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG189 [75] call print_char 
  //SEG190 [80] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG191 [80] phi (byte*) print_char_cursor#50 = (byte*) print_char_cursor#81 [phi:print_byte->print_char#0] -- register_copy 
  //SEG192 [80] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG193 print_byte::@1
  //SEG194 [76] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte/signed byte/word/signed word/dword/signed dword) 15 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG195 [77] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG196 [78] call print_char 
  //SEG197 [80] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG198 [80] phi (byte*) print_char_cursor#50 = (byte*) print_char_cursor#11 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG199 [80] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG200 print_byte::@return
  //SEG201 [79] return 
    rts
}
//SEG202 print_char
//  Print a single char
print_char: {
  //SEG203 [81] *((byte*) print_char_cursor#50) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG204 [82] (byte*) print_char_cursor#11 ← ++ (byte*) print_char_cursor#50 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG205 print_char::@return
  //SEG206 [83] return 
    rts
}
//SEG207 print_str
//  Print a zero-terminated string
print_str: {
    .label str = 5
  //SEG208 [85] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG209 [85] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#86 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG210 [85] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG211 print_str::@1
  b1:
  //SEG212 [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG213 print_str::@return
  //SEG214 [87] return 
    rts
  //SEG215 print_str::@2
  b2:
  //SEG216 [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG217 [89] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG218 [90] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG219 print_cls
//  Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 3
  //SEG220 [92] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG221 [92] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG222 [92] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG223 [92] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG224 print_cls::@1
  b1:
  //SEG225 [93] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG226 [94] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG227 [95] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG228 print_cls::@return
  //SEG229 [96] return 
    rts
}
//SEG230 lin16u_gen
//  Generate word linear table
//  lintab - the table to generate into
//  length - the number of points in a total sinus wavelength (the size of the table)
lin16u_gen: {
    .label _5 = 5
    .label ampl = 3
    .label stepi = $13
    .label stepf = $11
    .label step = $15
    .label val = 9
    .label lintab = 7
    .label i = 3
    .label max = 3
    .label min = 5
  //SEG231 [98] (word) lin16u_gen::ampl#0 ← (word) lin16u_gen::max#3 - (word) lin16u_gen::min#3 -- vwuz1=vwuz1_minus_vwuz2 
    lda ampl
    sec
    sbc min
    sta ampl
    lda ampl+1
    sbc min+1
    sta ampl+1
  //SEG232 [99] (word) divr16u::dividend#1 ← (word) lin16u_gen::ampl#0
  //SEG233 [100] call divr16u 
  //SEG234 [117] phi from lin16u_gen to divr16u [phi:lin16u_gen->divr16u]
  //SEG235 [117] phi (word) divr16u::divisor#6 = (byte/signed byte/word/signed word/dword/signed dword) 20-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:lin16u_gen->divr16u#0] -- vwuz1=vbuc1 
    lda #<$14-1
    sta divr16u.divisor
    lda #>$14-1
    sta divr16u.divisor+1
  //SEG236 [117] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#1 [phi:lin16u_gen->divr16u#1] -- register_copy 
  //SEG237 [117] phi (word) divr16u::rem#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lin16u_gen->divr16u#2] -- vwuz1=vbuc1 
    lda #<0
    sta divr16u.rem
    sta divr16u.rem+1
    jsr divr16u
  //SEG238 [101] (word) divr16u::return#2 ← (word) divr16u::return#0
  //SEG239 lin16u_gen::@3
  //SEG240 [102] (word) lin16u_gen::stepi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return
    sta stepi
    lda divr16u.return+1
    sta stepi+1
  //SEG241 [103] (word) divr16u::rem#4 ← (word) rem16u#1
  //SEG242 [104] call divr16u 
  //SEG243 [117] phi from lin16u_gen::@3 to divr16u [phi:lin16u_gen::@3->divr16u]
  //SEG244 [117] phi (word) divr16u::divisor#6 = (byte/signed byte/word/signed word/dword/signed dword) 20-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:lin16u_gen::@3->divr16u#0] -- vwuz1=vbuc1 
    lda #<$14-1
    sta divr16u.divisor
    lda #>$14-1
    sta divr16u.divisor+1
  //SEG245 [117] phi (word) divr16u::dividend#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lin16u_gen::@3->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta divr16u.dividend
    sta divr16u.dividend+1
  //SEG246 [117] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:lin16u_gen::@3->divr16u#2] -- register_copy 
    jsr divr16u
  //SEG247 [105] (word) divr16u::return#3 ← (word) divr16u::return#0
  //SEG248 lin16u_gen::@4
  //SEG249 [106] (word) lin16u_gen::stepf#0 ← (word) divr16u::return#3
  //SEG250 [107] (dword) lin16u_gen::step#0 ← (word) lin16u_gen::stepi#0 dw= (word) lin16u_gen::stepf#0 -- vduz1=vwuz2_dword_vwuz3 
    lda stepi
    sta step+2
    lda stepi+1
    sta step+3
    lda stepf
    sta step
    lda stepf+1
    sta step+1
  //SEG251 [108] (dword) lin16u_gen::val#0 ← (word) lin16u_gen::min#3 dw= (byte/signed byte/word/signed word/dword/signed dword) 0 -- vduz1=vwuz2_dword_vbuc1 
    lda #<0
    sta val
    sta val+1
    lda min
    sta val+2
    lda min+1
    sta val+3
  //SEG252 [109] phi from lin16u_gen::@4 to lin16u_gen::@1 [phi:lin16u_gen::@4->lin16u_gen::@1]
  //SEG253 [109] phi (word) lin16u_gen::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lin16u_gen::@4->lin16u_gen::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    sta i+1
  //SEG254 [109] phi (word*) lin16u_gen::lintab#4 = (word*) lin16u_gen::lintab#5 [phi:lin16u_gen::@4->lin16u_gen::@1#1] -- register_copy 
  //SEG255 [109] phi (dword) lin16u_gen::val#2 = (dword) lin16u_gen::val#0 [phi:lin16u_gen::@4->lin16u_gen::@1#2] -- register_copy 
  //SEG256 [109] phi from lin16u_gen::@1 to lin16u_gen::@1 [phi:lin16u_gen::@1->lin16u_gen::@1]
  //SEG257 [109] phi (word) lin16u_gen::i#2 = (word) lin16u_gen::i#1 [phi:lin16u_gen::@1->lin16u_gen::@1#0] -- register_copy 
  //SEG258 [109] phi (word*) lin16u_gen::lintab#4 = (word*) lin16u_gen::lintab#3 [phi:lin16u_gen::@1->lin16u_gen::@1#1] -- register_copy 
  //SEG259 [109] phi (dword) lin16u_gen::val#2 = (dword) lin16u_gen::val#1 [phi:lin16u_gen::@1->lin16u_gen::@1#2] -- register_copy 
  //SEG260 lin16u_gen::@1
  b1:
  //SEG261 [110] (word~) lin16u_gen::$5 ← > (dword) lin16u_gen::val#2 -- vwuz1=_hi_vduz2 
    lda val+2
    sta _5
    lda val+3
    sta _5+1
  //SEG262 [111] *((word*) lin16u_gen::lintab#4) ← (word~) lin16u_gen::$5 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda _5
    sta (lintab),y
    iny
    lda _5+1
    sta (lintab),y
  //SEG263 [112] (dword) lin16u_gen::val#1 ← (dword) lin16u_gen::val#2 + (dword) lin16u_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda val
    clc
    adc step
    sta val
    lda val+1
    adc step+1
    sta val+1
    lda val+2
    adc step+2
    sta val+2
    lda val+3
    adc step+3
    sta val+3
  //SEG264 [113] (word*) lin16u_gen::lintab#3 ← (word*) lin16u_gen::lintab#4 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwuz1=pwuz1_plus_2 
    lda lintab
    clc
    adc #2
    sta lintab
    bcc !+
    inc lintab+1
  !:
  //SEG265 [114] (word) lin16u_gen::i#1 ← ++ (word) lin16u_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG266 [115] if((word) lin16u_gen::i#1<(byte/signed byte/word/signed word/dword/signed dword) 20) goto lin16u_gen::@1 -- vwuz1_lt_vbuc1_then_la1 
    lda i+1
    cmp #>$14
    bcc b1
    bne !+
    lda i
    cmp #<$14
    bcc b1
  !:
  //SEG267 lin16u_gen::@return
  //SEG268 [116] return 
    rts
}
//SEG269 divr16u
//  Performs division on two 16 bit unsigned words and an initial remainder
//  Returns the quotient dividend/divisor.
//  The final remainder will be set into the global variable rem16u
//  Implemented using simple binary division
divr16u: {
    .label rem = $f
    .label dividend = 3
    .label quotient = $11
    .label return = $11
    .label divisor = $d
  //SEG270 [118] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  //SEG271 [118] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG272 [118] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta quotient
    sta quotient+1
  //SEG273 [118] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG274 [118] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
  //SEG275 [118] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  //SEG276 [118] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG277 [118] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG278 [118] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG279 [118] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
  //SEG280 divr16u::@1
  b1:
  //SEG281 [119] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG282 [120] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG283 [121] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG284 [122] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG285 divr16u::@4
  //SEG286 [123] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG287 [124] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  //SEG288 [124] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
  //SEG289 divr16u::@2
  b2:
  //SEG290 [125] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG291 [126] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG292 [127] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3
    bne !+
    lda rem
    cmp divisor
    bcc b3
  !:
  //SEG293 divr16u::@5
  //SEG294 [128] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG295 [129] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG296 [130] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  //SEG297 [130] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG298 [130] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
  //SEG299 divr16u::@3
  b3:
  //SEG300 [131] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG301 [132] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG302 divr16u::@6
  //SEG303 [133] (word) rem16u#1 ← (word) divr16u::rem#11
  //SEG304 divr16u::@return
  //SEG305 [134] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

