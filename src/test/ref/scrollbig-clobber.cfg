@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [5] (byte*) nxt#13 ← phi( main/(const byte*) TEXT#0 main::@2/(byte*) nxt#11 )
  [6] call next_char 
  [7] (byte) next_char::return#0 ← (byte) next_char::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (byte~) main::$0 ← (byte) next_char::return#0
  [9] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  [10] (byte) main::i#1 ← ++ (byte) main::i#2
  [11] if((byte) main::i#1!=(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [12] return 
  to:@return

(byte()) next_char()
next_char: scope:[next_char]  from main::@1
  [13] (byte) next_char::c#0 ← *((byte*) nxt#13)
  [14] if((byte) next_char::c#0!=(byte) 0) goto next_char::@1
  to:next_char::@2
next_char::@2: scope:[next_char]  from next_char
  [15] (byte) next_char::c#1 ← *((const byte*) TEXT#0)
  to:next_char::@1
next_char::@1: scope:[next_char]  from next_char next_char::@2
  [16] (byte) next_char::return#1 ← phi( next_char/(byte) next_char::c#0 next_char::@2/(byte) next_char::c#1 )
  [16] (byte*) nxt#10 ← phi( next_char/(byte*) nxt#13 next_char::@2/(const byte*) TEXT#0 )
  [17] (byte*) nxt#11 ← ++ (byte*) nxt#10
  to:next_char::@return
next_char::@return: scope:[next_char]  from next_char::@1
  [18] return 
  to:@return
