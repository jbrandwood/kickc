
void main()
main: scope:[main]  from
  [0] phi()
  [1] call malloc
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call SolveMaze
  to:main::@2
main::@2: scope:[main]  from main::@1
  asm { loop: jmploop  }
  to:main::@return
main::@return: scope:[main]  from main::@2
  [5] return 
  to:@return

void * malloc(unsigned int size)
malloc: scope:[malloc]  from main
  [6] phi()
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  [7] return 
  to:@return

void SolveMaze(char *maze , unsigned int width , unsigned int height)
SolveMaze: scope:[SolveMaze]  from main::@1
  [8] phi()
  to:SolveMaze::@1
SolveMaze::@1: scope:[SolveMaze]  from SolveMaze SolveMaze::@4
  [9] SolveMaze::forward#3 = phi( SolveMaze/0, SolveMaze::@4/1 )
  to:SolveMaze::@2
SolveMaze::@2: scope:[SolveMaze]  from SolveMaze::@1
  [10] if(0!=SolveMaze::forward#3) goto SolveMaze::@3
  to:SolveMaze::@4
SolveMaze::@3: scope:[SolveMaze]  from SolveMaze::@2
  [11] phi()
  to:SolveMaze::@4
SolveMaze::@4: scope:[SolveMaze]  from SolveMaze::@2 SolveMaze::@3
  [12] SolveMaze::$9 = phi( SolveMaze::@3/2, SolveMaze::@2/3 )
  [13] *(main::maze#1+SolveMaze::y*main::width+SolveMaze::x) = SolveMaze::$9
  to:SolveMaze::@1
