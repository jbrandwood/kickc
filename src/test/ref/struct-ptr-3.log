Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (struct Point*) points#5 ← phi( _start::@1/(struct Point*) points#9 )
  (byte*~) main::$4 ← (byte*)(struct Point*) points#5
  (byte*~) main::$0 ← (byte*~) main::$4 + (const byte) OFFSET_STRUCT_POINT_X
  *((const nomodify byte*) main::SCREEN + (number) 0) ← *((byte*~) main::$0)
  (byte*~) main::$5 ← (byte*)(struct Point*) points#5
  (byte*~) main::$1 ← (byte*~) main::$5 + (const byte) OFFSET_STRUCT_POINT_Y
  *((const nomodify byte*) main::SCREEN + (number) 1) ← *((byte*~) main::$1)
  (struct Point*) points#0 ← (struct Point*) points#5 + (const byte) SIZEOF_STRUCT_POINT
  (byte*~) main::$6 ← (byte*)(struct Point*) points#0
  (byte*~) main::$2 ← (byte*~) main::$6 + (const byte) OFFSET_STRUCT_POINT_X
  *((const nomodify byte*) main::SCREEN + (number) 2) ← *((byte*~) main::$2)
  (byte*~) main::$7 ← (byte*)(struct Point*) points#0
  (byte*~) main::$3 ← (byte*~) main::$7 + (const byte) OFFSET_STRUCT_POINT_Y
  *((const nomodify byte*) main::SCREEN + (number) 3) ← *((byte*~) main::$3)
  to:main::@return
main::@return: scope:[main]  from main
  (struct Point*) points#6 ← phi( main/(struct Point*) points#0 )
  (struct Point*) points#1 ← (struct Point*) points#6
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (struct Point*) points#2 ← (struct Point*)(number) $1000
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (struct Point*) points#9 ← phi( _start::_init1/(struct Point*) points#2 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (struct Point*) points#7 ← phi( _start::@1/(struct Point*) points#1 )
  (struct Point*) points#3 ← (struct Point*) points#7
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (struct Point*) points#8 ← phi( _start::@2/(struct Point*) points#3 )
  (struct Point*) points#4 ← (struct Point*) points#8
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const byte) SIZEOF_STRUCT_POINT = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) main()
(byte*~) main::$0
(byte*~) main::$1
(byte*~) main::$2
(byte*~) main::$3
(byte*~) main::$4
(byte*~) main::$5
(byte*~) main::$6
(byte*~) main::$7
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(struct Point*) points
(struct Point*) points#0
(struct Point*) points#1
(struct Point*) points#2
(struct Point*) points#3
(struct Point*) points#4
(struct Point*) points#5
(struct Point*) points#6
(struct Point*) points#7
(struct Point*) points#8
(struct Point*) points#9

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) main::SCREEN + (number) 0) ← *((byte*~) main::$0)
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) main::SCREEN + (number) 1) ← *((byte*~) main::$1)
Adding number conversion cast (unumber) 2 in *((const nomodify byte*) main::SCREEN + (number) 2) ← *((byte*~) main::$2)
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) main::SCREEN + (number) 3) ← *((byte*~) main::$3)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant pointer cast (struct Point*) 4096
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias points#0 = points#6 points#1 
Alias points#2 = points#9 
Alias points#3 = points#7 points#8 points#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (struct Point*) points#5 (struct Point*) points#2
Identical Phi Values (struct Point*) points#3 (struct Point*) points#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const struct Point*) points#2 = (struct Point*) 4096
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::$4 = (byte*)points#2
Constant (const byte*) main::$5 = (byte*)points#2
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [3] *((const nomodify byte*) main::SCREEN + (byte) 0) ← *((byte*~) main::$0)  -- *(main::$4 + OFFSET_STRUCT_POINT_X)
Converting *(pointer+n) to pointer[n] [6] *((const nomodify byte*) main::SCREEN + (byte) 1) ← *((byte*~) main::$1)  -- *(main::$5 + OFFSET_STRUCT_POINT_Y)
Converting *(pointer+n) to pointer[n] [10] *((const nomodify byte*) main::SCREEN + (byte) 2) ← *((byte*~) main::$2)  -- *(main::$6 + OFFSET_STRUCT_POINT_X)
Converting *(pointer+n) to pointer[n] [13] *((const nomodify byte*) main::SCREEN + (byte) 3) ← *((byte*~) main::$3)  -- *(main::$7 + OFFSET_STRUCT_POINT_Y)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::$4 in [2] (byte*~) main::$0 ← (const byte*) main::$4 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero main::$4 in [3] *((const nomodify byte*) main::SCREEN + (byte) 0) ← *((const byte*) main::$4 + (const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero main::SCREEN in [3] *((const nomodify byte*) main::SCREEN + (byte) 0) ← *((const byte*) main::$4)
Simplifying expression containing zero main::$6 in [9] (byte*~) main::$2 ← (byte*~) main::$6 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero main::$6 in [10] *((const nomodify byte*) main::SCREEN + (byte) 2) ← *((byte*~) main::$6 + (const byte) OFFSET_STRUCT_POINT_X)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) main::$0 and assignment [0] (byte*~) main::$0 ← (const byte*) main::$4
Eliminating unused variable (byte*~) main::$1 and assignment [2] (byte*~) main::$1 ← (const byte*) main::$5 + (const byte) OFFSET_STRUCT_POINT_Y
Eliminating unused variable (byte*~) main::$2 and assignment [6] (byte*~) main::$2 ← (byte*~) main::$6
Eliminating unused variable (byte*~) main::$3 and assignment [9] (byte*~) main::$3 ← (byte*~) main::$7 + (const byte) OFFSET_STRUCT_POINT_Y
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [2] (struct Point*) points#0 ← (const struct Point*) points#2 + (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const struct Point*) points#0 = points#2+SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::$6 = (byte*)points#0
Constant (const byte*) main::$7 = (byte*)points#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const struct Point*) points#2
Inlining constant with different constant siblings (const struct Point*) points#0
Constant inlined main::$5 = (byte*)(struct Point*) 4096
Constant inlined points#0 = (struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT
Constant inlined main::$6 = (byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT
Constant inlined points#2 = (struct Point*) 4096
Constant inlined main::$4 = (byte*)(struct Point*) 4096
Constant inlined main::$7 = (byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)(struct Point*) 4096+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::SCREEN+2)
Consolidated array index constant in *((byte*)(struct Point*) 4096+SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *(main::SCREEN+3)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) main::SCREEN) ← *((byte*)(struct Point*) 4096)
  [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(struct Point*) 4096+(const byte) OFFSET_STRUCT_POINT_Y)
  [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT)
  [3] *((const nomodify byte*) main::SCREEN+(byte) 3) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT+(const byte) OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(void()) main()
(struct Point*) points

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct - accessing pointer to struct in memory
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  // main
main: {
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN) ← *((byte*)(struct Point*) 4096) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000
    sta SCREEN
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(struct Point*) 4096+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT
    sta SCREEN+2
    // [3] *((const nomodify byte*) main::SCREEN+(byte) 3) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y
    sta SCREEN+3
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) main::SCREEN) ← *((byte*)(struct Point*) 4096) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(struct Point*) 4096+(const byte) OFFSET_STRUCT_POINT_Y) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) main::SCREEN+(byte) 3) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT+(const byte) OFFSET_STRUCT_POINT_Y) [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [Point] best 41 combination 
Uplifting [main] best 41 combination 
Uplifting [] best 41 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct - accessing pointer to struct in memory
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  // main
main: {
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN) ← *((byte*)(struct Point*) 4096) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000
    sta SCREEN
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(struct Point*) 4096+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT
    sta SCREEN+2
    // [3] *((const nomodify byte*) main::SCREEN+(byte) 3) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y
    sta SCREEN+3
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const byte) SIZEOF_STRUCT_POINT = (byte) 2
(void()) main()
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(struct Point*) points



FINAL ASSEMBLER
Score: 38

  // File Comments
// Minimal struct - accessing pointer to struct in memory
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  // main
main: {
    .label SCREEN = $400
    // SCREEN[0] = (*points).x
    // [0] *((const nomodify byte*) main::SCREEN) ← *((byte*)(struct Point*) 4096) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000
    sta SCREEN
    // SCREEN[1] = (*points).y
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(struct Point*) 4096+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // SCREEN[2] = (*points).x
    // [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT
    sta SCREEN+2
    // SCREEN[3] = (*points).y
    // [3] *((const nomodify byte*) main::SCREEN+(byte) 3) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y
    sta SCREEN+3
    // main::@return
    // }
    // [4] return 
    rts
}
  // File Data

