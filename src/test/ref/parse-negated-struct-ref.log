Setting inferred volatile on symbol affected by address-of (struct A*~) main::$0 ← & (struct A) aa
Created struct value member variable (byte) aa_b
Converted struct value to member variables (struct A) aa
Adding struct value list initializer (byte) aa_b ← (number) 1
Rewriting struct pointer member access *((struct A*) main::a).b
Warning! Adding boolean cast to non-boolean sub-expression *((byte*) main::$3)
Adding versioned struct unwinding for (struct A) aa#0

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) aa_b#0 ← (number) 1
  (struct A) aa#0 ← struct-unwound {(byte) aa_b#0}
  to:@1

(void()) main()
main: scope:[main]  from @1
  (struct A) aa#1 ← phi( @1/(struct A) aa#2 )
  (byte*) main::SCREEN ← ((byte*)) (number) $400
  (struct A*~) main::$0 ← & (struct A) aa#1
  (struct A*) main::a#0 ← (struct A*~) main::$0
  (byte*) main::$3 ← (byte*)(struct A*) main::a#0 + (const byte) OFFSET_STRUCT_A_B
  (bool~) main::$4 ← (number) 0 != *((byte*) main::$3)
  (bool~) main::$1 ← ! (bool~) main::$4
  (bool~) main::$2 ← ! (bool~) main::$1
  if((bool~) main::$2) goto main::@1
  to:main::@2
main::@1: scope:[main]  from main main::@2
  asm { jmp!a+ !a:  }
  to:main::@return
main::@2: scope:[main]  from main
  *((byte*) main::SCREEN) ← (byte) 'a'
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  (struct A) aa#2 ← phi( @begin/(struct A) aa#0 )
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte) A::b
(const byte) OFFSET_STRUCT_A_B = (byte) 0
(struct A) aa
(struct A) aa#0
(struct A) aa#1
(struct A) aa#2
(byte) aa_b
(byte) aa_b#0
(void()) main()
(struct A*~) main::$0
(bool~) main::$1
(bool~) main::$2
(byte*) main::$3
(bool~) main::$4
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) main::SCREEN
(struct A*) main::a
(struct A*) main::a#0

Adding number conversion cast (unumber) 1 in (byte) aa_b#0 ← (number) 1
Adding number conversion cast (unumber) 0 in (bool~) main::$4 ← (number) 0 != *((byte*) main::$3)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) aa_b#0 ← (unumber)(number) 1
Inlining cast (byte*) main::SCREEN ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [8] (bool~) main::$1 ← (byte) 0 == *((byte*) main::$3) from [7] (bool~) main::$4 ← (byte) 0 != *((byte*) main::$3)
Inversing boolean not [9] (bool~) main::$2 ← (byte) 0 != *((byte*) main::$3) from [8] (bool~) main::$1 ← (byte) 0 == *((byte*) main::$3)
Successful SSA optimization Pass2UnaryNotSimplification
Alias (struct A*) main::a#0 = (struct A*~) main::$0 
Alias (struct A) aa#0 = (struct A) aa#2 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (struct A) aa#1 (struct A) aa#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$2 [10] if((byte) 0!=*((byte*) main::$3)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting struct address-of to first member [4] (struct A*) main::a#0 ← (struct A*)&(byte) aa_b#0
Successful SSA optimization PassNStructAddressOfRewriting
Constant right-side identified [4] (struct A*) main::a#0 ← (struct A*)&(byte) aa_b#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::SCREEN = (byte*) 1024
Constant (const struct A*) main::a#0 = (struct A*)&aa_b#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)main::a#0 in [6] (byte*) main::$3 ← (byte*)(const struct A*) main::a#0 + (const byte) OFFSET_STRUCT_A_B
Successful SSA optimization Pass2ConstantValues
Converting *(pointer+n) to pointer[n] [10] if((byte) 0!=*((byte*) main::$3)) goto main::@1  -- *((byte*)main::a#0 + OFFSET_STRUCT_A_B)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero (byte*)main::a#0 in [6] (byte*) main::$3 ← (byte*)(const struct A*) main::a#0 + (const byte) OFFSET_STRUCT_A_B
Simplifying expression containing zero (byte*)main::a#0 in [10] if((byte) 0!=*((byte*)(const struct A*) main::a#0 + (const byte) OFFSET_STRUCT_A_B)) goto main::@1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (struct A) aa#0 and assignment [1] (struct A) aa#0 ← struct-unwound {(byte) aa_b#0}
Eliminating unused variable (byte*) main::$3 and assignment [2] (byte*) main::$3 ← (byte*)(const struct A*) main::a#0
Eliminating unused constant (const byte) OFFSET_STRUCT_A_B
Successful SSA optimization PassNEliminateUnusedVars
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] (byte) aa_b#0 ← (byte) 1
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] if((byte) 0!=*((byte*)(const struct A*) main::a#0)) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main
  [5] *((const byte*) main::SCREEN) ← (byte) 'a'
  to:main::@1
main::@1: scope:[main]  from main main::@2
  asm { jmp!a+ !a:  }
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) A::b
(struct A) aa
(byte) aa_b
(byte) aa_b#0 20.0
(void()) main()
(struct A*) main::a

Initial phi equivalence classes
Complete equivalence classes
[ aa_b#0 ]
Allocated zp ZP_BYTE:2 [ aa_b#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test parsing a negated struct reference - which causes problems with the ASMREL labels !a++
// https://gitlab.com/camelot/kickc/issues/266
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label aa_b = 2
  // @begin
bbegin:
  // [0] (byte) aa_b#0 ← (byte) 1 -- vbuz1=vbuc1 
  lda #1
  sta.z aa_b
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label a = aa_b
    // [4] if((byte) 0!=*((byte*)(const struct A*) main::a#0)) goto main::@1 -- vbuc1_neq__deref_pbuc2_then_la1 
    lda #0
    cmp.z a
    bne b1
    jmp b2
    // main::@2
  b2:
    // [5] *((const byte*) main::SCREEN) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN
    jmp b1
    // main::@1
  b1:
    // asm { jmp!a+ !a:  }
    // ASMREL labels
    jmp !a+
  !a:
    jmp breturn
    // main::@return
  breturn:
    // [7] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (byte) aa_b#0 ← (byte) 1 [ ] (  [ ] ) always clobbers reg byte a 
Statement [4] if((byte) 0!=*((byte*)(const struct A*) main::a#0)) goto main::@1 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) main::SCREEN) ← (byte) 'a' [ ] ( main:2 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ aa_b#0 ] : zp ZP_BYTE:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 20: zp ZP_BYTE:2 [ aa_b#0 ] 
Uplift Scope [A] 
Uplift Scope [main] 

Uplifting [] best 48 combination zp ZP_BYTE:2 [ aa_b#0 ] 
Uplifting [A] best 48 combination 
Uplifting [main] best 48 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ aa_b#0 ]
Uplifting [] best 48 combination zp ZP_BYTE:2 [ aa_b#0 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test parsing a negated struct reference - which causes problems with the ASMREL labels !a++
// https://gitlab.com/camelot/kickc/issues/266
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label aa_b = 2
  // @begin
bbegin:
  // [0] (byte) aa_b#0 ← (byte) 1 -- vbuz1=vbuc1 
  lda #1
  sta.z aa_b
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label a = aa_b
    // [4] if((byte) 0!=*((byte*)(const struct A*) main::a#0)) goto main::@1 -- vbuc1_neq__deref_pbuc2_then_la1 
    lda #0
    cmp.z a
    bne b1
    jmp b2
    // main::@2
  b2:
    // [5] *((const byte*) main::SCREEN) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN
    jmp b1
    // main::@1
  b1:
    // asm { jmp!a+ !a:  }
    // ASMREL labels
    jmp !a+
  !a:
    jmp breturn
    // main::@return
  breturn:
    // [7] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction b2:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to !a+ in bne b1
Succesful ASM optimization Pass5DoubleJumpElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte) A::b
(struct A) aa
(byte) aa_b
(byte) aa_b#0 aa_b zp ZP_BYTE:2 20.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::SCREEN SCREEN = (byte*) 1024
(struct A*) main::a
(const struct A*) main::a#0 a = (struct A*)&(byte) aa_b#0

zp ZP_BYTE:2 [ aa_b#0 ]


FINAL ASSEMBLER
Score: 39

  // File Comments
// Test parsing a negated struct reference - which causes problems with the ASMREL labels !a++
// https://gitlab.com/camelot/kickc/issues/266
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label aa_b = 2
  // @begin
bbegin:
  // aa = { 1 }
  // [0] (byte) aa_b#0 ← (byte) 1 -- vbuz1=vbuc1 
  lda #1
  sta.z aa_b
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  jsr main
  rts
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    .label a = aa_b
    // if(!a->b)
    // [4] if((byte) 0!=*((byte*)(const struct A*) main::a#0)) goto main::@1 -- vbuc1_neq__deref_pbuc2_then_la1 
    lda #0
    cmp.z a
    bne !a+
    // main::@2
    // *SCREEN = 'a'
    // [5] *((const byte*) main::SCREEN) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN
    // main::@1
    // asm
    // asm { jmp!a+ !a:  }
    // ASMREL labels
    jmp !a+
  !a:
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data

