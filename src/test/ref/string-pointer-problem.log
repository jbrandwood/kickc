Identified constant variable (byte*) process_name
Culled Empty Block (label) @1
Culled Empty Block (label) set_process_name::@4
Culled Empty Block (label) set_process_name::@3
Culled Empty Block (label) set_process_name::@5
Culled Empty Block (label) set_process_name::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2

(void()) main()
main: scope:[main]  from @2
  (byte*) set_process_name::name#0 ← (const byte*) main::name
  call set_process_name 
  to:main::@1
main::@1: scope:[main]  from main
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) set_process_name((byte*) set_process_name::name)
set_process_name: scope:[set_process_name]  from main
  (byte*) set_process_name::name#3 ← phi( main/(byte*) set_process_name::name#0 )
  (signed word) set_process_name::j#0 ← (signed word) 0
  to:set_process_name::@1
set_process_name::@1: scope:[set_process_name]  from set_process_name set_process_name::@2
  (byte*) set_process_name::name#2 ← phi( set_process_name/(byte*) set_process_name::name#3 set_process_name::@2/(byte*) set_process_name::name#1 )
  (signed word) set_process_name::j#2 ← phi( set_process_name/(signed word) set_process_name::j#0 set_process_name::@2/(signed word) set_process_name::j#1 )
  (bool~) set_process_name::$0 ← (signed word) set_process_name::j#2 < (number) $11
  if((bool~) set_process_name::$0) goto set_process_name::@2
  to:set_process_name::@return
set_process_name::@2: scope:[set_process_name]  from set_process_name::@1
  (signed word) set_process_name::j#3 ← phi( set_process_name::@1/(signed word) set_process_name::j#2 )
  (byte*) set_process_name::name#1 ← phi( set_process_name::@1/(byte*) set_process_name::name#2 )
  *((const byte*) process_name + (signed word) set_process_name::j#3) ← *((byte*) set_process_name::name#1 + (signed word) set_process_name::j#3)
  (signed word) set_process_name::j#1 ← ++ (signed word) set_process_name::j#3
  to:set_process_name::@1
set_process_name::@return: scope:[set_process_name]  from set_process_name::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@return
(const byte*) main::name[(byte) 9]  = (byte*) "keyboard"
(const byte*) process_name = (byte*)(number) $400
(void()) set_process_name((byte*) set_process_name::name)
(bool~) set_process_name::$0
(label) set_process_name::@1
(label) set_process_name::@2
(label) set_process_name::@return
(signed word) set_process_name::j
(signed word) set_process_name::j#0
(signed word) set_process_name::j#1
(signed word) set_process_name::j#2
(signed word) set_process_name::j#3
(byte*) set_process_name::name
(byte*) set_process_name::name#0
(byte*) set_process_name::name#1
(byte*) set_process_name::name#2
(byte*) set_process_name::name#3

Adding number conversion cast (snumber) $11 in (bool~) set_process_name::$0 ← (signed word) set_process_name::j#2 < (number) $11
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $11
Successful SSA optimization PassNCastSimplification
Finalized signed number type (signed byte) $11
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte*) set_process_name::name#1 = (byte*) set_process_name::name#2 
Alias (signed word) set_process_name::j#2 = (signed word) set_process_name::j#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) set_process_name::name#3 (byte*) set_process_name::name#0
Identical Phi Values (byte*) set_process_name::name#1 (byte*) set_process_name::name#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) set_process_name::$0 [7] if((signed word) set_process_name::j#2<(signed byte) $11) goto set_process_name::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) set_process_name::name#0 = main::name
Constant (const signed word) set_process_name::j#0 = 0
Successful SSA optimization Pass2ConstantIdentification
De-inlining pointer[w] to *(pointer+w)   [8] *((const byte*) process_name + (signed word) set_process_name::j#2) ← *((const byte*) set_process_name::name#0 + (signed word) set_process_name::j#2)
De-inlining pointer[w] to *(pointer+w)   [8] *((const byte*) process_name + (signed word) set_process_name::j#2) ← *((byte*~) set_process_name::$1)
Successful SSA optimization Pass2DeInlineWordDerefIdx
Inlining constant with var siblings (const signed word) set_process_name::j#0
Constant inlined set_process_name::name#0 = (const byte*) main::name
Constant inlined set_process_name::j#0 = (signed word) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of set_process_name
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to set_process_name:6 

Created 1 initial phi equivalence classes
Coalesced [17] set_process_name::j#4 ← set_process_name::j#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@1
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of set_process_name

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call set_process_name 
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return

(void()) set_process_name((byte*) set_process_name::name)
set_process_name: scope:[set_process_name]  from main
  [7] phi()
  to:set_process_name::@1
set_process_name::@1: scope:[set_process_name]  from set_process_name set_process_name::@2
  [8] (signed word) set_process_name::j#2 ← phi( set_process_name/(signed word) 0 set_process_name::@2/(signed word) set_process_name::j#1 )
  [9] if((signed word) set_process_name::j#2<(signed byte) $11) goto set_process_name::@2
  to:set_process_name::@return
set_process_name::@return: scope:[set_process_name]  from set_process_name::@1
  [10] return 
  to:@return
set_process_name::@2: scope:[set_process_name]  from set_process_name::@1
  [11] (byte*~) set_process_name::$1 ← (const byte*) main::name + (signed word) set_process_name::j#2
  [12] (byte*~) set_process_name::$2 ← (const byte*) process_name + (signed word) set_process_name::j#2
  [13] *((byte*~) set_process_name::$2) ← *((byte*~) set_process_name::$1)
  [14] (signed word) set_process_name::j#1 ← ++ (signed word) set_process_name::j#2
  to:set_process_name::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(void()) set_process_name((byte*) set_process_name::name)
(byte*~) set_process_name::$1 11.0
(byte*~) set_process_name::$2 22.0
(signed word) set_process_name::j
(signed word) set_process_name::j#1 22.0
(signed word) set_process_name::j#2 11.0
(byte*) set_process_name::name

Initial phi equivalence classes
[ set_process_name::j#2 set_process_name::j#1 ]
Added variable set_process_name::$1 to live range equivalence class [ set_process_name::$1 ]
Added variable set_process_name::$2 to live range equivalence class [ set_process_name::$2 ]
Complete equivalence classes
[ set_process_name::j#2 set_process_name::j#1 ]
[ set_process_name::$1 ]
[ set_process_name::$2 ]
Allocated zp[2]:2 [ set_process_name::j#2 set_process_name::j#1 ]
Allocated zp[2]:4 [ set_process_name::$1 ]
Allocated zp[2]:6 [ set_process_name::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test adding integer index to a pointer that is a literal string
// https://gitlab.com/camelot/kickc/issues/315
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label process_name = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call set_process_name 
    // [7] phi from main to set_process_name [phi:main->set_process_name]
  set_process_name_from_main:
    jsr set_process_name
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
    name: .text "keyboard"
    .byte 0
}
  // set_process_name
set_process_name: {
    .label j = 2
    .label __1 = 4
    .label __2 = 6
    // [8] phi from set_process_name to set_process_name::@1 [phi:set_process_name->set_process_name::@1]
  __b1_from_set_process_name:
    // [8] phi (signed word) set_process_name::j#2 = (signed word) 0 [phi:set_process_name->set_process_name::@1#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z j
    lda #>0
    sta.z j+1
    jmp __b1
    // set_process_name::@1
  __b1:
    // [9] if((signed word) set_process_name::j#2<(signed byte) $11) goto set_process_name::@2 -- vwsz1_lt_vwuc1_then_la1 
    lda.z j+1
    bmi __b2
    cmp #>$11
    bcc __b2
    bne !+
    lda.z j
    cmp #<$11
    bcc __b2
  !:
    jmp __breturn
    // set_process_name::@return
  __breturn:
    // [10] return 
    rts
    // set_process_name::@2
  __b2:
    // [11] (byte*~) set_process_name::$1 ← (const byte*) main::name + (signed word) set_process_name::j#2 -- pbuz1=pbuc1_plus_vwsz2 
    lda #<main.name
    clc
    adc.z j
    sta.z __1
    lda #>main.name
    adc.z j+1
    sta.z __1+1
    // [12] (byte*~) set_process_name::$2 ← (const byte*) process_name + (signed word) set_process_name::j#2 -- pbuz1=pbuc1_plus_vwsz2 
    lda #<process_name
    clc
    adc.z j
    sta.z __2
    lda #>process_name
    adc.z j+1
    sta.z __2+1
    // [13] *((byte*~) set_process_name::$2) ← *((byte*~) set_process_name::$1) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (__1),y
    ldy #0
    sta (__2),y
    // [14] (signed word) set_process_name::j#1 ← ++ (signed word) set_process_name::j#2 -- vwsz1=_inc_vwsz1 
    inc.z j
    bne !+
    inc.z j+1
  !:
    // [8] phi from set_process_name::@2 to set_process_name::@1 [phi:set_process_name::@2->set_process_name::@1]
  __b1_from___b2:
    // [8] phi (signed word) set_process_name::j#2 = (signed word) set_process_name::j#1 [phi:set_process_name::@2->set_process_name::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] if((signed word) set_process_name::j#2<(signed byte) $11) goto set_process_name::@2 [ set_process_name::j#2 ] ( main:2::set_process_name:5 [ set_process_name::j#2 ] ) always clobbers reg byte a 
Statement [11] (byte*~) set_process_name::$1 ← (const byte*) main::name + (signed word) set_process_name::j#2 [ set_process_name::j#2 set_process_name::$1 ] ( main:2::set_process_name:5 [ set_process_name::j#2 set_process_name::$1 ] ) always clobbers reg byte a 
Statement [12] (byte*~) set_process_name::$2 ← (const byte*) process_name + (signed word) set_process_name::j#2 [ set_process_name::j#2 set_process_name::$1 set_process_name::$2 ] ( main:2::set_process_name:5 [ set_process_name::j#2 set_process_name::$1 set_process_name::$2 ] ) always clobbers reg byte a 
Statement [13] *((byte*~) set_process_name::$2) ← *((byte*~) set_process_name::$1) [ set_process_name::j#2 ] ( main:2::set_process_name:5 [ set_process_name::j#2 ] ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ set_process_name::j#2 set_process_name::j#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ set_process_name::$1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ set_process_name::$2 ] : zp[2]:6 , 

REGISTER UPLIFT SCOPES
Uplift Scope [set_process_name] 33: zp[2]:2 [ set_process_name::j#2 set_process_name::j#1 ] 22: zp[2]:6 [ set_process_name::$2 ] 11: zp[2]:4 [ set_process_name::$1 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [set_process_name] best 1063 combination zp[2]:2 [ set_process_name::j#2 set_process_name::j#1 ] zp[2]:6 [ set_process_name::$2 ] zp[2]:4 [ set_process_name::$1 ] 
Uplifting [main] best 1063 combination 
Uplifting [] best 1063 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test adding integer index to a pointer that is a literal string
// https://gitlab.com/camelot/kickc/issues/315
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label process_name = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call set_process_name 
    // [7] phi from main to set_process_name [phi:main->set_process_name]
  set_process_name_from_main:
    jsr set_process_name
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
    name: .text "keyboard"
    .byte 0
}
  // set_process_name
set_process_name: {
    .label j = 2
    .label __1 = 4
    .label __2 = 6
    // [8] phi from set_process_name to set_process_name::@1 [phi:set_process_name->set_process_name::@1]
  __b1_from_set_process_name:
    // [8] phi (signed word) set_process_name::j#2 = (signed word) 0 [phi:set_process_name->set_process_name::@1#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z j
    lda #>0
    sta.z j+1
    jmp __b1
    // set_process_name::@1
  __b1:
    // [9] if((signed word) set_process_name::j#2<(signed byte) $11) goto set_process_name::@2 -- vwsz1_lt_vwuc1_then_la1 
    lda.z j+1
    bmi __b2
    cmp #>$11
    bcc __b2
    bne !+
    lda.z j
    cmp #<$11
    bcc __b2
  !:
    jmp __breturn
    // set_process_name::@return
  __breturn:
    // [10] return 
    rts
    // set_process_name::@2
  __b2:
    // [11] (byte*~) set_process_name::$1 ← (const byte*) main::name + (signed word) set_process_name::j#2 -- pbuz1=pbuc1_plus_vwsz2 
    lda #<main.name
    clc
    adc.z j
    sta.z __1
    lda #>main.name
    adc.z j+1
    sta.z __1+1
    // [12] (byte*~) set_process_name::$2 ← (const byte*) process_name + (signed word) set_process_name::j#2 -- pbuz1=pbuc1_plus_vwsz2 
    lda #<process_name
    clc
    adc.z j
    sta.z __2
    lda #>process_name
    adc.z j+1
    sta.z __2+1
    // [13] *((byte*~) set_process_name::$2) ← *((byte*~) set_process_name::$1) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (__1),y
    ldy #0
    sta (__2),y
    // [14] (signed word) set_process_name::j#1 ← ++ (signed word) set_process_name::j#2 -- vwsz1=_inc_vwsz1 
    inc.z j
    bne !+
    inc.z j+1
  !:
    // [8] phi from set_process_name::@2 to set_process_name::@1 [phi:set_process_name::@2->set_process_name::@1]
  __b1_from___b2:
    // [8] phi (signed word) set_process_name::j#2 = (signed word) set_process_name::j#1 [phi:set_process_name::@2->set_process_name::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction set_process_name_from_main:
Removing instruction __breturn:
Removing instruction __b1_from_set_process_name:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@return
(const byte*) main::name[(byte) 9]  = (byte*) "keyboard"
(const byte*) process_name = (byte*) 1024
(void()) set_process_name((byte*) set_process_name::name)
(byte*~) set_process_name::$1 zp[2]:4 11.0
(byte*~) set_process_name::$2 zp[2]:6 22.0
(label) set_process_name::@1
(label) set_process_name::@2
(label) set_process_name::@return
(signed word) set_process_name::j
(signed word) set_process_name::j#1 j zp[2]:2 22.0
(signed word) set_process_name::j#2 j zp[2]:2 11.0
(byte*) set_process_name::name

zp[2]:2 [ set_process_name::j#2 set_process_name::j#1 ]
zp[2]:4 [ set_process_name::$1 ]
zp[2]:6 [ set_process_name::$2 ]


FINAL ASSEMBLER
Score: 948

  // File Comments
// Test adding integer index to a pointer that is a literal string
// https://gitlab.com/camelot/kickc/issues/315
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label process_name = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // set_process_name("keyboard")
    // [5] call set_process_name 
    // [7] phi from main to set_process_name [phi:main->set_process_name]
    jsr set_process_name
    // main::@return
    // }
    // [6] return 
    rts
    name: .text "keyboard"
    .byte 0
}
  // set_process_name
set_process_name: {
    .label j = 2
    .label __1 = 4
    .label __2 = 6
    // [8] phi from set_process_name to set_process_name::@1 [phi:set_process_name->set_process_name::@1]
    // [8] phi (signed word) set_process_name::j#2 = (signed word) 0 [phi:set_process_name->set_process_name::@1#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z j
    sta.z j+1
    // set_process_name::@1
  __b1:
    // for(signed int j = 0; j < 17; j++)
    // [9] if((signed word) set_process_name::j#2<(signed byte) $11) goto set_process_name::@2 -- vwsz1_lt_vwuc1_then_la1 
    lda.z j+1
    bmi __b2
    cmp #>$11
    bcc __b2
    bne !+
    lda.z j
    cmp #<$11
    bcc __b2
  !:
    // set_process_name::@return
    // }
    // [10] return 
    rts
    // set_process_name::@2
  __b2:
    // process_name[j]=name[j]
    // [11] (byte*~) set_process_name::$1 ← (const byte*) main::name + (signed word) set_process_name::j#2 -- pbuz1=pbuc1_plus_vwsz2 
    lda #<main.name
    clc
    adc.z j
    sta.z __1
    lda #>main.name
    adc.z j+1
    sta.z __1+1
    // [12] (byte*~) set_process_name::$2 ← (const byte*) process_name + (signed word) set_process_name::j#2 -- pbuz1=pbuc1_plus_vwsz2 
    lda #<process_name
    clc
    adc.z j
    sta.z __2
    lda #>process_name
    adc.z j+1
    sta.z __2+1
    // [13] *((byte*~) set_process_name::$2) ← *((byte*~) set_process_name::$1) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (__1),y
    sta (__2),y
    // for(signed int j = 0; j < 17; j++)
    // [14] (signed word) set_process_name::j#1 ← ++ (signed word) set_process_name::j#2 -- vwsz1=_inc_vwsz1 
    inc.z j
    bne !+
    inc.z j+1
  !:
    // [8] phi from set_process_name::@2 to set_process_name::@1 [phi:set_process_name::@2->set_process_name::@1]
    // [8] phi (signed word) set_process_name::j#2 = (signed word) set_process_name::j#1 [phi:set_process_name::@2->set_process_name::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

