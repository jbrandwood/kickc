Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  screen#19 = phi( __start::@1/screen#18 )
  strip::p#0 = msg1
  strip::c#0 = ' '
  call strip 
  to:main::@1
main::@1: scope:[main]  from main
  screen#15 = phi( main/screen#19 )
  print::msg#0 = msg1
  call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  screen#8 = phi( main::@1/screen#4 )
  screen#0 = screen#8
  strip::p#1 = msg2
  strip::c#1 = 'y'
  call strip 
  to:main::@3
main::@3: scope:[main]  from main::@2
  screen#16 = phi( main::@2/screen#0 )
  print::msg#1 = msg2
  call print 
  to:main::@4
main::@4: scope:[main]  from main::@3
  screen#9 = phi( main::@3/screen#4 )
  screen#1 = screen#9
  to:main::@return
main::@return: scope:[main]  from main::@4
  screen#10 = phi( main::@4/screen#1 )
  screen#2 = screen#10
  return 
  to:@return

void strip(byte* strip::p , byte strip::c)
strip: scope:[strip]  from main main::@2
  strip::c#3 = phi( main/strip::c#0, main::@2/strip::c#1 )
  strip::p#3 = phi( main/strip::p#0, main::@2/strip::p#1 )
  strip::dest#0 = strip::p#3
  to:strip::@1
strip::@1: scope:[strip]  from strip strip::@2
  strip::dest#3 = phi( strip/strip::dest#0, strip::@2/strip::dest#4 )
  strip::c#2 = phi( strip/strip::c#3, strip::@2/strip::c#4 )
  strip::p#4 = phi( strip/strip::p#3, strip::@2/strip::p#2 )
  strip::$0 = *strip::p#4 != strip::c#2
  strip::$1 = ! strip::$0
  if(strip::$1) goto strip::@2
  to:strip::@3
strip::@2: scope:[strip]  from strip::@1 strip::@3
  strip::dest#4 = phi( strip::@1/strip::dest#3, strip::@3/strip::dest#1 )
  strip::c#4 = phi( strip::@1/strip::c#2, strip::@3/strip::c#5 )
  strip::p#5 = phi( strip::@1/strip::p#4, strip::@3/strip::p#6 )
  strip::$2 = *strip::p#5 != 0
  strip::p#2 = ++ strip::p#5
  if(strip::$2) goto strip::@1
  to:strip::@return
strip::@3: scope:[strip]  from strip::@1
  strip::c#5 = phi( strip::@1/strip::c#2 )
  strip::dest#2 = phi( strip::@1/strip::dest#3 )
  strip::p#6 = phi( strip::@1/strip::p#4 )
  *strip::dest#2 = *strip::p#6
  strip::dest#1 = ++ strip::dest#2
  to:strip::@2
strip::@return: scope:[strip]  from strip::@2
  return 
  to:@return

void print(byte* print::msg)
print: scope:[print]  from main::@1 main::@3
  screen#17 = phi( main::@1/screen#15, main::@3/screen#16 )
  print::msg#4 = phi( main::@1/print::msg#0, main::@3/print::msg#1 )
  to:print::@1
print::@1: scope:[print]  from print print::@1
  screen#11 = phi( print/screen#17, print::@1/screen#3 )
  print::msg#3 = phi( print/print::msg#4, print::@1/print::msg#2 )
  *screen#11 = *print::msg#3
  screen#3 = ++ screen#11
  print::msg#2 = ++ print::msg#3
  print::$0 = *print::msg#2 != 0
  if(print::$0) goto print::@1
  to:print::@return
print::@return: scope:[print]  from print::@1
  screen#12 = phi( print::@1/screen#3 )
  screen#4 = screen#12
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  screen#5 = (byte*)$400
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  screen#18 = phi( __start::__init1/screen#5 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  screen#13 = phi( __start::@1/screen#2 )
  screen#6 = screen#13
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  screen#14 = phi( __start::@2/screen#6 )
  screen#7 = screen#14
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
constant byte* msg1[]  = "hello world!"
constant byte* msg2[]  = "goodbye blue sky!"
void print(byte* print::msg)
bool~ print::$0
byte* print::msg
byte* print::msg#0
byte* print::msg#1
byte* print::msg#2
byte* print::msg#3
byte* print::msg#4
byte* screen
byte* screen#0
byte* screen#1
byte* screen#10
byte* screen#11
byte* screen#12
byte* screen#13
byte* screen#14
byte* screen#15
byte* screen#16
byte* screen#17
byte* screen#18
byte* screen#19
byte* screen#2
byte* screen#3
byte* screen#4
byte* screen#5
byte* screen#6
byte* screen#7
byte* screen#8
byte* screen#9
void strip(byte* strip::p , byte strip::c)
bool~ strip::$0
bool~ strip::$1
bool~ strip::$2
byte strip::c
byte strip::c#0
byte strip::c#1
byte strip::c#2
byte strip::c#3
byte strip::c#4
byte strip::c#5
byte* strip::dest
byte* strip::dest#0
byte* strip::dest#1
byte* strip::dest#2
byte* strip::dest#3
byte* strip::dest#4
byte* strip::p
byte* strip::p#0
byte* strip::p#1
byte* strip::p#2
byte* strip::p#3
byte* strip::p#4
byte* strip::p#5
byte* strip::p#6

Adding number conversion cast (unumber) 0 in strip::$2 = *strip::p#5 != 0
Adding number conversion cast (unumber) 0 in print::$0 = *print::msg#2 != 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [24] strip::$1 = *strip::p#4 == strip::c#2 from [23] strip::$0 = *strip::p#4 != strip::c#2
Successful SSA optimization Pass2UnaryNotSimplification
Alias screen#15 = screen#19 
Alias screen#0 = screen#8 screen#16 
Alias screen#1 = screen#9 screen#10 screen#2 
Alias strip::dest#0 = strip::p#3 
Alias strip::p#4 = strip::p#6 
Alias strip::dest#2 = strip::dest#3 
Alias strip::c#2 = strip::c#5 
Alias screen#12 = screen#3 screen#4 
Alias screen#18 = screen#5 
Alias screen#13 = screen#6 screen#14 screen#7 
Successful SSA optimization Pass2AliasElimination
Alias strip::p#4 = strip::p#5 
Alias strip::c#2 = strip::c#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values screen#15 screen#18
Identical Phi Values screen#0 screen#12
Identical Phi Values screen#1 screen#12
Identical Phi Values strip::c#2 strip::c#3
Identical Phi Values screen#13 screen#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition strip::$1 [17] if(*strip::p#4==strip::c#3) goto strip::@2
Simple Condition strip::$2 [21] if(*strip::p#4!=0) goto strip::@1
Simple Condition print::$0 [31] if(*print::msg#2!=0) goto print::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant strip::p#0 = msg1
Constant strip::c#0 = ' '
Constant print::msg#0 = msg1
Constant strip::p#1 = msg2
Constant strip::c#1 = 'y'
Constant print::msg#1 = msg2
Constant screen#18 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings strip::p#0
Inlining constant with var siblings strip::c#0
Inlining constant with var siblings strip::p#1
Inlining constant with var siblings strip::c#1
Inlining constant with var siblings print::msg#0
Inlining constant with var siblings print::msg#1
Inlining constant with var siblings screen#18
Constant inlined strip::p#0 = msg1
Constant inlined print::msg#1 = msg2
Constant inlined strip::p#1 = msg2
Constant inlined print::msg#0 = msg1
Constant inlined strip::c#0 = ' '
Constant inlined strip::c#1 = 'y'
Constant inlined screen#18 = (byte*) 1024
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting strip::@4(between strip::@2 and strip::@1)
Added new block during phi lifting strip::@5(between strip::@1 and strip::@2)
Added new block during phi lifting print::@2(between print::@1 and print::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
CALL GRAPH
Calls in [main] to strip:1 print:3 strip:5 print:7 

Created 9 initial phi equivalence classes
Coalesced [6] screen#20 = screen#12
Not coalescing [11] strip::p#7 = strip::dest#0
Coalesced [12] strip::dest#5 = strip::dest#0
Coalesced [17] strip::dest#8 = strip::dest#1
Not coalescing [22] strip::p#8 = strip::p#2
Coalesced [23] strip::dest#6 = strip::dest#4
Coalesced (already) [24] strip::dest#7 = strip::dest#2
Coalesced [26] print::msg#5 = print::msg#4
Coalesced [27] screen#21 = screen#17
Coalesced [34] print::msg#6 = print::msg#2
Coalesced (already) [35] screen#22 = screen#12
Coalesced down to 6 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label strip::@5
Culled Empty Block label print::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call strip 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call strip 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] phi()
  [7] call print 
  to:main::@return
main::@return: scope:[main]  from main::@3
  [8] return 
  to:@return

void strip(byte* strip::p , byte strip::c)
strip: scope:[strip]  from main main::@2
  [9] strip::c#3 = phi( main/' ', main::@2/'y' )
  [9] strip::dest#0 = phi( main/msg1, main::@2/msg2 )
  [10] strip::p#7 = strip::dest#0
  to:strip::@1
strip::@1: scope:[strip]  from strip strip::@4
  [11] strip::dest#2 = phi( strip/strip::dest#0, strip::@4/strip::dest#4 )
  [11] strip::p#4 = phi( strip/strip::p#7, strip::@4/strip::p#8 )
  [12] if(*strip::p#4==strip::c#3) goto strip::@2
  to:strip::@3
strip::@3: scope:[strip]  from strip::@1
  [13] *strip::dest#2 = *strip::p#4
  [14] strip::dest#1 = ++ strip::dest#2
  to:strip::@2
strip::@2: scope:[strip]  from strip::@1 strip::@3
  [15] strip::dest#4 = phi( strip::@1/strip::dest#2, strip::@3/strip::dest#1 )
  [16] strip::p#2 = ++ strip::p#4
  [17] if(*strip::p#4!=0) goto strip::@4
  to:strip::@return
strip::@return: scope:[strip]  from strip::@2
  [18] return 
  to:@return
strip::@4: scope:[strip]  from strip::@2
  [19] strip::p#8 = strip::p#2
  to:strip::@1

void print(byte* print::msg)
print: scope:[print]  from main::@1 main::@3
  [20] screen#17 = phi( main::@1/(byte*) 1024, main::@3/screen#12 )
  [20] print::msg#4 = phi( main::@1/msg1, main::@3/msg2 )
  to:print::@1
print::@1: scope:[print]  from print print::@1
  [21] screen#11 = phi( print/screen#17, print::@1/screen#12 )
  [21] print::msg#3 = phi( print/print::msg#4, print::@1/print::msg#2 )
  [22] *screen#11 = *print::msg#3
  [23] screen#12 = ++ screen#11
  [24] print::msg#2 = ++ print::msg#3
  [25] if(*print::msg#2!=0) goto print::@1
  to:print::@return
print::@return: scope:[print]  from print::@1
  [26] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
void print(byte* print::msg)
byte* print::msg
byte* print::msg#2 151.5
byte* print::msg#3 104.66666666666666
byte* print::msg#4 11.0
byte* screen
byte* screen#11 157.0
byte* screen#12 25.5
byte* screen#17 13.0
void strip(byte* strip::p , byte strip::c)
byte strip::c
byte strip::c#3 10.1
byte* strip::dest
byte* strip::dest#0 11.0
byte* strip::dest#1 202.0
byte* strip::dest#2 138.33333333333331
byte* strip::dest#4 75.75
byte* strip::p
byte* strip::p#2 101.0
byte* strip::p#4 85.99999999999999
byte* strip::p#7 22.0
byte* strip::p#8 202.0

Initial phi equivalence classes
[ strip::c#3 ]
[ strip::p#4 strip::p#7 strip::p#8 ]
[ strip::dest#2 strip::dest#0 strip::dest#4 strip::dest#1 ]
[ print::msg#3 print::msg#4 print::msg#2 ]
[ screen#11 screen#17 screen#12 ]
Added variable strip::p#2 to live range equivalence class [ strip::p#2 ]
Complete equivalence classes
[ strip::c#3 ]
[ strip::p#4 strip::p#7 strip::p#8 ]
[ strip::dest#2 strip::dest#0 strip::dest#4 strip::dest#1 ]
[ print::msg#3 print::msg#4 print::msg#2 ]
[ screen#11 screen#17 screen#12 ]
[ strip::p#2 ]
Allocated zp[1]:2 [ strip::c#3 ]
Allocated zp[2]:3 [ strip::p#4 strip::p#7 strip::p#8 ]
Allocated zp[2]:5 [ strip::dest#2 strip::dest#0 strip::dest#4 strip::dest#1 ]
Allocated zp[2]:7 [ print::msg#3 print::msg#4 print::msg#2 ]
Allocated zp[2]:9 [ screen#11 screen#17 screen#12 ]
Allocated zp[2]:11 [ strip::p#2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [10] strip::p#7 = strip::dest#0 [ strip::dest#0 strip::c#3 strip::p#7 ] ( strip:1 [ strip::dest#0 strip::c#3 strip::p#7 ] { }  strip:5 [ screen#12 strip::dest#0 strip::c#3 strip::p#7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ strip::c#3 ]
Statement [12] if(*strip::p#4==strip::c#3) goto strip::@2 [ strip::c#3 strip::p#4 strip::dest#2 ] ( strip:1 [ strip::c#3 strip::p#4 strip::dest#2 ] { }  strip:5 [ screen#12 strip::c#3 strip::p#4 strip::dest#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ strip::c#3 ]
Statement [13] *strip::dest#2 = *strip::p#4 [ strip::c#3 strip::p#4 strip::dest#2 ] ( strip:1 [ strip::c#3 strip::p#4 strip::dest#2 ] { }  strip:5 [ screen#12 strip::c#3 strip::p#4 strip::dest#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [16] strip::p#2 = ++ strip::p#4 [ strip::c#3 strip::p#4 strip::dest#4 strip::p#2 ] ( strip:1 [ strip::c#3 strip::p#4 strip::dest#4 strip::p#2 ] { }  strip:5 [ screen#12 strip::c#3 strip::p#4 strip::dest#4 strip::p#2 ] { }  ) always clobbers reg byte a 
Statement [17] if(*strip::p#4!=0) goto strip::@4 [ strip::c#3 strip::dest#4 strip::p#2 ] ( strip:1 [ strip::c#3 strip::dest#4 strip::p#2 ] { }  strip:5 [ screen#12 strip::c#3 strip::dest#4 strip::p#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [19] strip::p#8 = strip::p#2 [ strip::c#3 strip::p#8 strip::dest#4 ] ( strip:1 [ strip::c#3 strip::p#8 strip::dest#4 ] { }  strip:5 [ screen#12 strip::c#3 strip::p#8 strip::dest#4 ] { }  ) always clobbers reg byte a 
Statement [22] *screen#11 = *print::msg#3 [ print::msg#3 screen#11 ] ( print:3 [ print::msg#3 screen#11 ] { }  print:7 [ print::msg#3 screen#11 ] { { screen#12 = screen#17 } }  ) always clobbers reg byte a reg byte y 
Statement [25] if(*print::msg#2!=0) goto print::@1 [ screen#12 print::msg#2 ] ( print:3 [ screen#12 print::msg#2 ] { }  print:7 [ screen#12 print::msg#2 ] { { screen#12 = screen#17 } }  ) always clobbers reg byte a reg byte y 
Statement [10] strip::p#7 = strip::dest#0 [ strip::dest#0 strip::c#3 strip::p#7 ] ( strip:1 [ strip::dest#0 strip::c#3 strip::p#7 ] { }  strip:5 [ screen#12 strip::dest#0 strip::c#3 strip::p#7 ] { }  ) always clobbers reg byte a 
Statement [12] if(*strip::p#4==strip::c#3) goto strip::@2 [ strip::c#3 strip::p#4 strip::dest#2 ] ( strip:1 [ strip::c#3 strip::p#4 strip::dest#2 ] { }  strip:5 [ screen#12 strip::c#3 strip::p#4 strip::dest#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [13] *strip::dest#2 = *strip::p#4 [ strip::c#3 strip::p#4 strip::dest#2 ] ( strip:1 [ strip::c#3 strip::p#4 strip::dest#2 ] { }  strip:5 [ screen#12 strip::c#3 strip::p#4 strip::dest#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [16] strip::p#2 = ++ strip::p#4 [ strip::c#3 strip::p#4 strip::dest#4 strip::p#2 ] ( strip:1 [ strip::c#3 strip::p#4 strip::dest#4 strip::p#2 ] { }  strip:5 [ screen#12 strip::c#3 strip::p#4 strip::dest#4 strip::p#2 ] { }  ) always clobbers reg byte a 
Statement [17] if(*strip::p#4!=0) goto strip::@4 [ strip::c#3 strip::dest#4 strip::p#2 ] ( strip:1 [ strip::c#3 strip::dest#4 strip::p#2 ] { }  strip:5 [ screen#12 strip::c#3 strip::dest#4 strip::p#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [19] strip::p#8 = strip::p#2 [ strip::c#3 strip::p#8 strip::dest#4 ] ( strip:1 [ strip::c#3 strip::p#8 strip::dest#4 ] { }  strip:5 [ screen#12 strip::c#3 strip::p#8 strip::dest#4 ] { }  ) always clobbers reg byte a 
Statement [22] *screen#11 = *print::msg#3 [ print::msg#3 screen#11 ] ( print:3 [ print::msg#3 screen#11 ] { }  print:7 [ print::msg#3 screen#11 ] { { screen#12 = screen#17 } }  ) always clobbers reg byte a reg byte y 
Statement [25] if(*print::msg#2!=0) goto print::@1 [ screen#12 print::msg#2 ] ( print:3 [ screen#12 print::msg#2 ] { }  print:7 [ screen#12 print::msg#2 ] { { screen#12 = screen#17 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ strip::c#3 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ strip::p#4 strip::p#7 strip::p#8 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ strip::dest#2 strip::dest#0 strip::dest#4 strip::dest#1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ print::msg#3 print::msg#4 print::msg#2 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ screen#11 screen#17 screen#12 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ strip::p#2 ] : zp[2]:11 , 

REGISTER UPLIFT SCOPES
Uplift Scope [strip] 427.08: zp[2]:5 [ strip::dest#2 strip::dest#0 strip::dest#4 strip::dest#1 ] 310: zp[2]:3 [ strip::p#4 strip::p#7 strip::p#8 ] 101: zp[2]:11 [ strip::p#2 ] 10.1: zp[1]:2 [ strip::c#3 ] 
Uplift Scope [print] 267.17: zp[2]:7 [ print::msg#3 print::msg#4 print::msg#2 ] 
Uplift Scope [] 195.5: zp[2]:9 [ screen#11 screen#17 screen#12 ] 
Uplift Scope [main] 

Uplifting [strip] best 1675 combination zp[2]:5 [ strip::dest#2 strip::dest#0 strip::dest#4 strip::dest#1 ] zp[2]:3 [ strip::p#4 strip::p#7 strip::p#8 ] zp[2]:11 [ strip::p#2 ] reg byte x [ strip::c#3 ] 
Uplifting [print] best 1675 combination zp[2]:7 [ print::msg#3 print::msg#4 print::msg#2 ] 
Uplifting [] best 1675 combination zp[2]:9 [ screen#11 screen#17 screen#12 ] 
Uplifting [main] best 1675 combination 
Coalescing zero page register [ zp[2]:7 [ print::msg#3 print::msg#4 print::msg#2 ] ] with [ zp[2]:3 [ strip::p#4 strip::p#7 strip::p#8 ] ]
Allocated (was zp[2]:5) zp[2]:2 [ strip::dest#2 strip::dest#0 strip::dest#4 strip::dest#1 ]
Allocated (was zp[2]:7) zp[2]:4 [ print::msg#3 print::msg#4 print::msg#2 strip::p#4 strip::p#7 strip::p#8 ]
Allocated (was zp[2]:9) zp[2]:6 [ screen#11 screen#17 screen#12 ]
Allocated (was zp[2]:11) zp[2]:8 [ strip::p#2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests of strip() function from https://news.ycombinator.com/item?id=12080871
  // Upstart
  // Commodore 64 PRG executable file
.file [name="strip.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label screen = 6
.segment Code
  // main
main: {
    // [1] call strip 
    // [9] phi from main to strip [phi:main->strip]
  strip_from_main:
    // [9] phi strip::c#3 = ' ' [phi:main->strip#0] -- vbuxx=vbuc1 
    ldx #' '
    // [9] phi strip::dest#0 = msg1 [phi:main->strip#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z strip.dest
    lda #>msg1
    sta.z strip.dest+1
    jsr strip
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print 
    // [20] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [20] phi screen#17 = (byte*) 1024 [phi:main::@1->print#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [20] phi print::msg#4 = msg1 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.msg
    lda #>msg1
    sta.z print.msg+1
    jsr print
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call strip 
    // [9] phi from main::@2 to strip [phi:main::@2->strip]
  strip_from___b2:
    // [9] phi strip::c#3 = 'y' [phi:main::@2->strip#0] -- vbuxx=vbuc1 
    ldx #'y'
    // [9] phi strip::dest#0 = msg2 [phi:main::@2->strip#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z strip.dest
    lda #>msg2
    sta.z strip.dest+1
    jsr strip
    // [6] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [7] call print 
    // [20] phi from main::@3 to print [phi:main::@3->print]
  print_from___b3:
    // [20] phi screen#17 = screen#12 [phi:main::@3->print#0] -- register_copy 
    // [20] phi print::msg#4 = msg2 [phi:main::@3->print#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z print.msg
    lda #>msg2
    sta.z print.msg+1
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // strip
// strip(byte* zp(8) p, byte register(X) c)
strip: {
    .label dest = 2
    .label p = 8
    .label p_1 = 4
    // [10] strip::p#7 = strip::dest#0 -- pbuz1=pbuz2 
    lda.z dest
    sta.z p_1
    lda.z dest+1
    sta.z p_1+1
    // [11] phi from strip strip::@4 to strip::@1 [phi:strip/strip::@4->strip::@1]
  __b1_from_strip:
  __b1_from___b4:
    // [11] phi strip::dest#2 = strip::dest#0 [phi:strip/strip::@4->strip::@1#0] -- register_copy 
    // [11] phi strip::p#4 = strip::p#7 [phi:strip/strip::@4->strip::@1#1] -- register_copy 
    jmp __b1
    // strip::@1
  __b1:
    // [12] if(*strip::p#4==strip::c#3) goto strip::@2 -- _deref_pbuz1_eq_vbuxx_then_la1 
    txa
    ldy #0
    cmp (p_1),y
    beq __b2_from___b1
    jmp __b3
    // strip::@3
  __b3:
    // [13] *strip::dest#2 = *strip::p#4 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (p_1),y
    ldy #0
    sta (dest),y
    // [14] strip::dest#1 = ++ strip::dest#2 -- pbuz1=_inc_pbuz1 
    inc.z dest
    bne !+
    inc.z dest+1
  !:
    // [15] phi from strip::@1 strip::@3 to strip::@2 [phi:strip::@1/strip::@3->strip::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [15] phi strip::dest#4 = strip::dest#2 [phi:strip::@1/strip::@3->strip::@2#0] -- register_copy 
    jmp __b2
    // strip::@2
  __b2:
    // [16] strip::p#2 = ++ strip::p#4 -- pbuz1=_inc_pbuz2 
    clc
    lda.z p_1
    adc #1
    sta.z p
    lda.z p_1+1
    adc #0
    sta.z p+1
    // [17] if(*strip::p#4!=0) goto strip::@4 -- _deref_pbuz1_neq_0_then_la1 
    ldy #0
    lda (p_1),y
    cmp #0
    bne __b4
    jmp __breturn
    // strip::@return
  __breturn:
    // [18] return 
    rts
    // strip::@4
  __b4:
    // [19] strip::p#8 = strip::p#2 -- pbuz1=pbuz2 
    lda.z p
    sta.z p_1
    lda.z p+1
    sta.z p_1+1
    jmp __b1_from___b4
}
  // print
// print(byte* zp(4) msg)
print: {
    .label msg = 4
    // [21] phi from print print::@1 to print::@1 [phi:print/print::@1->print::@1]
  __b1_from_print:
  __b1_from___b1:
    // [21] phi screen#11 = screen#17 [phi:print/print::@1->print::@1#0] -- register_copy 
    // [21] phi print::msg#3 = print::msg#4 [phi:print/print::@1->print::@1#1] -- register_copy 
    jmp __b1
    // print::@1
  __b1:
    // [22] *screen#11 = *print::msg#3 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (msg),y
    ldy #0
    sta (screen),y
    // [23] screen#12 = ++ screen#11 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [24] print::msg#2 = ++ print::msg#3 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    // [25] if(*print::msg#2!=0) goto print::@1 -- _deref_pbuz1_neq_0_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b1_from___b1
    jmp __breturn
    // print::@return
  __breturn:
    // [26] return 
    rts
}
  // File Data
.segment Data
  msg1: .text "hello world!"
  .byte 0
  msg2: .text "goodbye blue sky!"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b1 with __b2
Replacing label __b1_from___b4 with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from_main:
Removing instruction print_from___b1:
Removing instruction __b2_from___b1:
Removing instruction strip_from___b2:
Removing instruction __b3_from___b2:
Removing instruction print_from___b3:
Removing instruction __b1_from_strip:
Removing instruction __b1_from___b4:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_print:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction strip_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
void main()
constant byte* msg1[]  = "hello world!"
constant byte* msg2[]  = "goodbye blue sky!"
void print(byte* print::msg)
byte* print::msg
byte* print::msg#2 msg zp[2]:4 151.5
byte* print::msg#3 msg zp[2]:4 104.66666666666666
byte* print::msg#4 msg zp[2]:4 11.0
byte* screen
byte* screen#11 screen zp[2]:6 157.0
byte* screen#12 screen zp[2]:6 25.5
byte* screen#17 screen zp[2]:6 13.0
void strip(byte* strip::p , byte strip::c)
byte strip::c
byte strip::c#3 reg byte x 10.1
byte* strip::dest
byte* strip::dest#0 dest zp[2]:2 11.0
byte* strip::dest#1 dest zp[2]:2 202.0
byte* strip::dest#2 dest zp[2]:2 138.33333333333331
byte* strip::dest#4 dest zp[2]:2 75.75
byte* strip::p
byte* strip::p#2 p zp[2]:8 101.0
byte* strip::p#4 p_1 zp[2]:4 85.99999999999999
byte* strip::p#7 p_1 zp[2]:4 22.0
byte* strip::p#8 p_1 zp[2]:4 202.0

reg byte x [ strip::c#3 ]
zp[2]:2 [ strip::dest#2 strip::dest#0 strip::dest#4 strip::dest#1 ]
zp[2]:4 [ print::msg#3 print::msg#4 print::msg#2 strip::p#4 strip::p#7 strip::p#8 ]
zp[2]:6 [ screen#11 screen#17 screen#12 ]
zp[2]:8 [ strip::p#2 ]


FINAL ASSEMBLER
Score: 1423

  // File Comments
// Tests of strip() function from https://news.ycombinator.com/item?id=12080871
  // Upstart
  // Commodore 64 PRG executable file
.file [name="strip.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label screen = 6
.segment Code
  // main
main: {
    // strip(msg1, ' ')
    // [1] call strip 
    // [9] phi from main to strip [phi:main->strip]
    // [9] phi strip::c#3 = ' ' [phi:main->strip#0] -- vbuxx=vbuc1 
    ldx #' '
    // [9] phi strip::dest#0 = msg1 [phi:main->strip#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z strip.dest
    lda #>msg1
    sta.z strip.dest+1
    jsr strip
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print(msg1)
    // [3] call print 
    // [20] phi from main::@1 to print [phi:main::@1->print]
    // [20] phi screen#17 = (byte*) 1024 [phi:main::@1->print#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [20] phi print::msg#4 = msg1 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.msg
    lda #>msg1
    sta.z print.msg+1
    jsr print
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // strip(msg2, 'y')
    // [5] call strip 
    // [9] phi from main::@2 to strip [phi:main::@2->strip]
    // [9] phi strip::c#3 = 'y' [phi:main::@2->strip#0] -- vbuxx=vbuc1 
    ldx #'y'
    // [9] phi strip::dest#0 = msg2 [phi:main::@2->strip#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z strip.dest
    lda #>msg2
    sta.z strip.dest+1
    jsr strip
    // [6] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // print(msg2)
    // [7] call print 
    // [20] phi from main::@3 to print [phi:main::@3->print]
    // [20] phi screen#17 = screen#12 [phi:main::@3->print#0] -- register_copy 
    // [20] phi print::msg#4 = msg2 [phi:main::@3->print#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z print.msg
    lda #>msg2
    sta.z print.msg+1
    jsr print
    // main::@return
    // }
    // [8] return 
    rts
}
  // strip
// strip(byte* zp(8) p, byte register(X) c)
strip: {
    .label dest = 2
    .label p = 8
    .label p_1 = 4
    // [10] strip::p#7 = strip::dest#0 -- pbuz1=pbuz2 
    lda.z dest
    sta.z p_1
    lda.z dest+1
    sta.z p_1+1
    // [11] phi from strip strip::@4 to strip::@1 [phi:strip/strip::@4->strip::@1]
    // [11] phi strip::dest#2 = strip::dest#0 [phi:strip/strip::@4->strip::@1#0] -- register_copy 
    // [11] phi strip::p#4 = strip::p#7 [phi:strip/strip::@4->strip::@1#1] -- register_copy 
    // strip::@1
  __b1:
    // if(*p!=c)
    // [12] if(*strip::p#4==strip::c#3) goto strip::@2 -- _deref_pbuz1_eq_vbuxx_then_la1 
    txa
    ldy #0
    cmp (p_1),y
    beq __b2
    // strip::@3
    // *dest++=*p
    // [13] *strip::dest#2 = *strip::p#4 -- _deref_pbuz1=_deref_pbuz2 
    lda (p_1),y
    sta (dest),y
    // *dest++=*p;
    // [14] strip::dest#1 = ++ strip::dest#2 -- pbuz1=_inc_pbuz1 
    inc.z dest
    bne !+
    inc.z dest+1
  !:
    // [15] phi from strip::@1 strip::@3 to strip::@2 [phi:strip::@1/strip::@3->strip::@2]
    // [15] phi strip::dest#4 = strip::dest#2 [phi:strip::@1/strip::@3->strip::@2#0] -- register_copy 
    // strip::@2
  __b2:
    // while(*p++!=0)
    // [16] strip::p#2 = ++ strip::p#4 -- pbuz1=_inc_pbuz2 
    clc
    lda.z p_1
    adc #1
    sta.z p
    lda.z p_1+1
    adc #0
    sta.z p+1
    // [17] if(*strip::p#4!=0) goto strip::@4 -- _deref_pbuz1_neq_0_then_la1 
    ldy #0
    lda (p_1),y
    cmp #0
    bne __b4
    // strip::@return
    // }
    // [18] return 
    rts
    // strip::@4
  __b4:
    // [19] strip::p#8 = strip::p#2 -- pbuz1=pbuz2 
    lda.z p
    sta.z p_1
    lda.z p+1
    sta.z p_1+1
    jmp __b1
}
  // print
// print(byte* zp(4) msg)
print: {
    .label msg = 4
    // [21] phi from print print::@1 to print::@1 [phi:print/print::@1->print::@1]
    // [21] phi screen#11 = screen#17 [phi:print/print::@1->print::@1#0] -- register_copy 
    // [21] phi print::msg#3 = print::msg#4 [phi:print/print::@1->print::@1#1] -- register_copy 
    // print::@1
  __b1:
    // *screen++ = *msg++
    // [22] *screen#11 = *print::msg#3 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (msg),y
    sta (screen),y
    // *screen++ = *msg++;
    // [23] screen#12 = ++ screen#11 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [24] print::msg#2 = ++ print::msg#3 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    // while(*msg!=0)
    // [25] if(*print::msg#2!=0) goto print::@1 -- _deref_pbuz1_neq_0_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b1
    // print::@return
    // }
    // [26] return 
    rts
}
  // File Data
.segment Data
  msg1: .text "hello world!"
  .byte 0
  msg2: .text "goodbye blue sky!"
  .byte 0

