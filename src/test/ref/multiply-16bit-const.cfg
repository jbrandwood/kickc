
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [2] (byte*) print_char_cursor#13 ← phi( main/(const byte*) print_screen#0 main::@4/(byte*) print_line_cursor#0 )
  [2] (byte*) print_line_cursor#16 ← phi( main/(const byte*) print_screen#0 main::@4/(byte*) print_line_cursor#27 )
  [2] (dword) main::i#2 ← phi( main/(dword) 0 main::@4/(dword) main::i#1 )
  [3] if((dword) main::i#2<(word) $d02) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [5] (dword~) main::$5 ← (dword) main::i#2 << (byte) 4
  [6] (dword~) main::$6 ← (dword~) main::$5 + (dword) main::i#2
  [7] (dword~) main::$7 ← (dword~) main::$6 << (byte) 2
  [8] (dword~) main::$8 ← (dword~) main::$7 + (dword) main::i#2
  [9] (dword~) main::$9 ← (dword~) main::$8 << (byte) 2
  [10] (dword~) main::$10 ← (dword~) main::$9 + (dword) main::i#2
  [11] (dword~) main::$11 ← (dword~) main::$10 << (byte) 1
  [12] (dword) print_ulong_decimal::w#0 ← (dword~) main::$11 + (dword) main::i#2
  [13] call print_ulong_decimal 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call print_ln 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] (dword) main::i#1 ← (dword) main::i#2 + (word) $14d
  [17] (byte*) print_line_cursor#27 ← (byte*) print_line_cursor#0
  to:main::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [18] phi()
  [19] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [20] return 
  to:@return

(void()) print_ulong_decimal((dword) print_ulong_decimal::w)
print_ulong_decimal: scope:[print_ulong_decimal]  from main::@2
  [21] (dword) ultoa::value#1 ← (dword) print_ulong_decimal::w#0
  [22] call ultoa 
  to:print_ulong_decimal::@1
print_ulong_decimal::@1: scope:[print_ulong_decimal]  from print_ulong_decimal
  [23] phi()
  [24] call print_str 
  to:print_ulong_decimal::@return
print_ulong_decimal::@return: scope:[print_ulong_decimal]  from print_ulong_decimal::@1
  [25] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@3
  [26] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@2
  [27] (byte*) print_line_cursor#10 ← phi( print_ln/(byte*) print_line_cursor#16 print_ln::@2/(byte*) print_line_cursor#26 )
  [28] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#10 + (byte) $28
  [29] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#1) goto print_ln::@2
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [30] return 
  to:@return
print_ln::@2: scope:[print_ln]  from print_ln::@1
  [31] (byte*) print_line_cursor#26 ← (byte*) print_line_cursor#0
  to:print_ln::@1

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [32] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [33] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [34] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [35] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [36] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [37] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from print_ulong_decimal
  [38] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [39] (byte*) ultoa::buffer#11 ← phi( ultoa::@4/(byte*) ultoa::buffer#14 ultoa/(const byte*) decimal_digits_long )
  [39] (byte) ultoa::started#2 ← phi( ultoa::@4/(byte) ultoa::started#4 ultoa/(byte) 0 )
  [39] (dword) ultoa::value#2 ← phi( ultoa::@4/(dword) ultoa::value#6 ultoa/(dword) ultoa::value#1 )
  [39] (byte) ultoa::digit#2 ← phi( ultoa::@4/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [40] if((byte) ultoa::digit#2<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [41] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2
  [42] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  [43] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11
  [44] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [45] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [46] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2
  [47] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10)
  [48] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [49] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [50] (byte*) ultoa::buffer#14 ← phi( ultoa::@7/(byte*) ultoa::buffer#11 ultoa::@6/(byte*) ultoa::buffer#4 )
  [50] (byte) ultoa::started#4 ← phi( ultoa::@7/(byte) ultoa::started#2 ultoa::@6/(byte) 1 )
  [50] (dword) ultoa::value#6 ← phi( ultoa::@7/(dword) ultoa::value#2 ultoa::@6/(dword) ultoa::value#0 )
  [51] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [52] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
  [53] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
  [54] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [55] call ultoa_append 
  [56] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [57] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [58] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11
  to:ultoa::@4

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_ulong_decimal::@1
  [59] (byte*) print_char_cursor#42 ← (byte*) print_char_cursor#13
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [60] (byte*) print_char_cursor#1 ← phi( print_str/(byte*) print_char_cursor#42 print_str::@3/(byte*) print_char_cursor#24 )
  [60] (byte*) print_str::str#2 ← phi( print_str/(const byte*) decimal_digits_long print_str::@3/(byte*) print_str::str#0 )
  [61] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [62] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [63] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [64] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [65] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [66] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [67] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [67] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [68] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [69] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [70] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [71] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [72] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2
  [73] *((byte*) print_char_cursor#1) ← (byte) print_char::ch#0
  [74] (byte*) print_char_cursor#24 ← ++ (byte*) print_char_cursor#1
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [75] return 
  to:@return
