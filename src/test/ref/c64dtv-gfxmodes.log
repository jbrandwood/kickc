Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void dtvSetCpuBankSegment1(byte dtvSetCpuBankSegment1::cpuBankIdx)
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from mode_8bppchunkybmm::@2 mode_8bppchunkybmm::@6 mode_8bppchunkybmm::@8
  dtvSetCpuBankSegment1::cpuBankIdx#3 = phi( mode_8bppchunkybmm::@2/dtvSetCpuBankSegment1::cpuBankIdx#0, mode_8bppchunkybmm::@6/dtvSetCpuBankSegment1::cpuBankIdx#1, mode_8bppchunkybmm::@8/dtvSetCpuBankSegment1::cpuBankIdx#2 )
  *dtvSetCpuBankSegment1::cpuBank = dtvSetCpuBankSegment1::cpuBankIdx#3
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from print_cls
  memset::c#4 = phi( print_cls/memset::c#0 )
  memset::str#3 = phi( print_cls/memset::str#0 )
  memset::num#1 = phi( print_cls/memset::num#0 )
  memset::$0 = memset::num#1 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#1 = phi( memset/memset::str#3, memset::@3/memset::str#4 )
  memset::return#0 = memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#3 = phi( memset/memset::c#4 )
  memset::num#2 = phi( memset/memset::num#1 )
  memset::str#2 = phi( memset/memset::str#3 )
  memset::$4 = (byte*)memset::str#2
  memset::$2 = memset::$4 + memset::num#2
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#2 = phi( memset::@2/memset::c#3, memset::@4/memset::c#1 )
  memset::str#4 = phi( memset::@2/memset::str#2, memset::@4/memset::str#5 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#5 = phi( memset::@3/memset::str#4 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#1 = phi( memset::@3/memset::c#2 )
  *memset::dst#3 = memset::c#1
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#3 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#3
  return 
  to:@return

void print_str_lines(byte* print_str_lines::str)
print_str_lines: scope:[print_str_lines]  from menu::@32
  print_line_cursor#52 = phi( menu::@32/print_line_cursor#11 )
  print_char_cursor#58 = phi( menu::@32/print_char_cursor#14 )
  print_str_lines::str#4 = phi( menu::@32/print_str_lines::str#1 )
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@7
  print_line_cursor#33 = phi( print_str_lines/print_line_cursor#52, print_str_lines::@7/print_line_cursor#0 )
  print_char_cursor#39 = phi( print_str_lines/print_char_cursor#58, print_str_lines::@7/print_char_cursor#1 )
  print_str_lines::str#2 = phi( print_str_lines/print_str_lines::str#4, print_str_lines::@7/print_str_lines::str#5 )
  print_str_lines::$3 = 0 != *print_str_lines::str#2
  if(print_str_lines::$3) goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@3
  print_line_cursor#69 = phi( print_str_lines::@1/print_line_cursor#33, print_str_lines::@3/print_line_cursor#53 )
  print_char_cursor#59 = phi( print_str_lines::@1/print_char_cursor#39, print_str_lines::@3/print_char_cursor#60 )
  print_str_lines::str#3 = phi( print_str_lines::@1/print_str_lines::str#2, print_str_lines::@3/print_str_lines::str#6 )
  print_str_lines::ch#0 = *print_str_lines::str#3
  print_str_lines::str#0 = ++ print_str_lines::str#3
  print_str_lines::$5 = 0 != print_str_lines::ch#0
  print_str_lines::$0 = ! print_str_lines::$5
  if(print_str_lines::$0) goto print_str_lines::@3
  to:print_str_lines::@4
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@6
  print_char_cursor#60 = phi( print_str_lines::@2/print_char_cursor#59, print_str_lines::@6/print_char_cursor#0 )
  print_line_cursor#53 = phi( print_str_lines::@2/print_line_cursor#69, print_str_lines::@6/print_line_cursor#70 )
  print_str_lines::str#6 = phi( print_str_lines::@2/print_str_lines::str#0, print_str_lines::@6/print_str_lines::str#7 )
  print_str_lines::ch#1 = phi( print_str_lines::@2/print_str_lines::ch#0, print_str_lines::@6/print_str_lines::ch#3 )
  print_str_lines::$4 = 0 != print_str_lines::ch#1
  if(print_str_lines::$4) goto print_str_lines::@2
  to:print_str_lines::@5
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2
  print_line_cursor#85 = phi( print_str_lines::@2/print_line_cursor#69 )
  print_str_lines::str#9 = phi( print_str_lines::@2/print_str_lines::str#0 )
  print_char_cursor#37 = phi( print_str_lines::@2/print_char_cursor#59 )
  print_str_lines::ch#2 = phi( print_str_lines::@2/print_str_lines::ch#0 )
  print_char::ch#0 = print_str_lines::ch#2
  call print_char 
  to:print_str_lines::@6
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@4
  print_line_cursor#70 = phi( print_str_lines::@4/print_line_cursor#85 )
  print_str_lines::str#7 = phi( print_str_lines::@4/print_str_lines::str#9 )
  print_str_lines::ch#3 = phi( print_str_lines::@4/print_str_lines::ch#2 )
  print_char_cursor#20 = phi( print_str_lines::@4/print_char_cursor#6 )
  print_char_cursor#0 = print_char_cursor#20
  to:print_str_lines::@3
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@3
  print_str_lines::str#8 = phi( print_str_lines::@3/print_str_lines::str#6 )
  print_char_cursor#38 = phi( print_str_lines::@3/print_char_cursor#60 )
  print_line_cursor#32 = phi( print_str_lines::@3/print_line_cursor#53 )
  call print_ln 
  to:print_str_lines::@7
print_str_lines::@7: scope:[print_str_lines]  from print_str_lines::@5
  print_str_lines::str#5 = phi( print_str_lines::@5/print_str_lines::str#8 )
  print_char_cursor#21 = phi( print_str_lines::@5/print_char_cursor#4 )
  print_line_cursor#17 = phi( print_str_lines::@5/print_line_cursor#3 )
  print_line_cursor#0 = print_line_cursor#17
  print_char_cursor#1 = print_char_cursor#21
  to:print_str_lines::@1
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  print_line_cursor#18 = phi( print_str_lines::@1/print_line_cursor#33 )
  print_char_cursor#22 = phi( print_str_lines::@1/print_char_cursor#39 )
  print_char_cursor#2 = print_char_cursor#22
  print_line_cursor#1 = print_line_cursor#18
  return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from print_str_lines::@5
  print_char_cursor#40 = phi( print_str_lines::@5/print_char_cursor#38 )
  print_line_cursor#34 = phi( print_str_lines::@5/print_line_cursor#32 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  print_char_cursor#23 = phi( print_ln/print_char_cursor#40, print_ln::@1/print_char_cursor#23 )
  print_line_cursor#19 = phi( print_ln/print_line_cursor#34, print_ln::@1/print_line_cursor#2 )
  print_ln::$0 = print_line_cursor#19 + $28
  print_line_cursor#2 = print_ln::$0
  print_ln::$1 = print_line_cursor#2 < print_char_cursor#23
  if(print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  print_line_cursor#20 = phi( print_ln::@1/print_line_cursor#2 )
  print_char_cursor#3 = print_line_cursor#20
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  print_char_cursor#24 = phi( print_ln::@2/print_char_cursor#3 )
  print_line_cursor#21 = phi( print_ln::@2/print_line_cursor#20 )
  print_line_cursor#3 = print_line_cursor#21
  print_char_cursor#4 = print_char_cursor#24
  return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from print_str_lines::@4
  print_char_cursor#25 = phi( print_str_lines::@4/print_char_cursor#37 )
  print_char::ch#1 = phi( print_str_lines::@4/print_char::ch#0 )
  *print_char_cursor#25 = print_char::ch#1
  print_char_cursor#5 = ++ print_char_cursor#25
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  print_char_cursor#26 = phi( print_char/print_char_cursor#5 )
  print_char_cursor#6 = print_char_cursor#26
  return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from menu::@31
  print_screen#9 = phi( menu::@31/print_screen#4 )
  memset::str#0 = (void*)print_screen#9
  memset::c#0 = ' '
  memset::num#0 = $3e8
  call memset 
  memset::return#2 = memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  print_screen#10 = phi( print_cls/print_screen#9 )
  print_line_cursor#4 = print_screen#10
  print_char_cursor#7 = print_line_cursor#4
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  print_char_cursor#27 = phi( print_cls::@1/print_char_cursor#7 )
  print_line_cursor#22 = phi( print_cls::@1/print_line_cursor#4 )
  print_line_cursor#5 = print_line_cursor#22
  print_char_cursor#8 = print_char_cursor#27
  return 
  to:@return

void print_set_screen(byte* print_set_screen::screen)
print_set_screen: scope:[print_set_screen]  from menu::@5
  print_set_screen::screen#1 = phi( menu::@5/print_set_screen::screen#0 )
  print_screen#0 = print_set_screen::screen#1
  print_line_cursor#6 = print_screen#0
  print_char_cursor#9 = print_line_cursor#6
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  print_char_cursor#28 = phi( print_set_screen/print_char_cursor#9 )
  print_line_cursor#23 = phi( print_set_screen/print_line_cursor#6 )
  print_screen#11 = phi( print_set_screen/print_screen#0 )
  print_screen#1 = print_screen#11
  print_line_cursor#7 = print_line_cursor#23
  print_char_cursor#10 = print_char_cursor#28
  return 
  to:@return

byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  keyboard_matrix_read::rowid#1 = phi( keyboard_key_pressed/keyboard_matrix_read::rowid#0 )
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#1]
  keyboard_matrix_read::$0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  keyboard_matrix_read::row_pressed_bits#0 = keyboard_matrix_read::$0
  keyboard_matrix_read::return#0 = keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  keyboard_matrix_read::return#3 = phi( keyboard_matrix_read/keyboard_matrix_read::return#0 )
  keyboard_matrix_read::return#1 = keyboard_matrix_read::return#3
  return 
  to:@return

byte keyboard_key_pressed(byte keyboard_key_pressed::key)
keyboard_key_pressed: scope:[keyboard_key_pressed]  from menu::@10 menu::@11 menu::@12 menu::@13 menu::@14 menu::@15 menu::@16 menu::@17 menu::@18 menu::@7 menu::@8 menu::@9 mode_ctrl::@10 mode_ctrl::@3 mode_ctrl::@4 mode_ctrl::@5 mode_ctrl::@6 mode_ctrl::@7 mode_ctrl::@8 mode_ctrl::@9
  keyboard_key_pressed::key#20 = phi( menu::@10/keyboard_key_pressed::key#3, menu::@11/keyboard_key_pressed::key#4, menu::@12/keyboard_key_pressed::key#5, menu::@13/keyboard_key_pressed::key#6, menu::@14/keyboard_key_pressed::key#7, menu::@15/keyboard_key_pressed::key#8, menu::@16/keyboard_key_pressed::key#9, menu::@17/keyboard_key_pressed::key#10, menu::@18/keyboard_key_pressed::key#11, menu::@7/keyboard_key_pressed::key#0, menu::@8/keyboard_key_pressed::key#1, menu::@9/keyboard_key_pressed::key#2, mode_ctrl::@10/keyboard_key_pressed::key#19, mode_ctrl::@3/keyboard_key_pressed::key#12, mode_ctrl::@4/keyboard_key_pressed::key#13, mode_ctrl::@5/keyboard_key_pressed::key#14, mode_ctrl::@6/keyboard_key_pressed::key#15, mode_ctrl::@7/keyboard_key_pressed::key#16, mode_ctrl::@8/keyboard_key_pressed::key#17, mode_ctrl::@9/keyboard_key_pressed::key#18 )
  keyboard_key_pressed::$0 = keyboard_key_pressed::key#20 & 7
  keyboard_key_pressed::colidx#0 = keyboard_key_pressed::$0
  keyboard_key_pressed::$1 = keyboard_key_pressed::key#20 >> 3
  keyboard_key_pressed::rowidx#0 = keyboard_key_pressed::$1
  keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0
  call keyboard_matrix_read 
  keyboard_matrix_read::return#2 = keyboard_matrix_read::return#1
  to:keyboard_key_pressed::@1
keyboard_key_pressed::@1: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  keyboard_key_pressed::colidx#1 = phi( keyboard_key_pressed/keyboard_key_pressed::colidx#0 )
  keyboard_matrix_read::return#4 = phi( keyboard_key_pressed/keyboard_matrix_read::return#2 )
  keyboard_key_pressed::$2 = keyboard_matrix_read::return#4
  keyboard_key_pressed::$3 = keyboard_key_pressed::$2 & keyboard_matrix_col_bitmask[keyboard_key_pressed::colidx#1]
  keyboard_key_pressed::return#0 = keyboard_key_pressed::$3
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@1
  keyboard_key_pressed::return#22 = phi( keyboard_key_pressed::@1/keyboard_key_pressed::return#0 )
  keyboard_key_pressed::return#1 = keyboard_key_pressed::return#22
  return 
  to:@return

void bitmap_init(byte* bitmap_init::bitmap)
bitmap_init: scope:[bitmap_init]  from mode_stdbitmap::@6
  bitmap_init::bitmap#2 = phi( mode_stdbitmap::@6/bitmap_init::bitmap#0 )
  bitmap_init::bits#0 = $80
  bitmap_init::x#0 = 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  bitmap_init::bits#3 = phi( bitmap_init/bitmap_init::bits#0, bitmap_init::@2/bitmap_init::bits#4 )
  bitmap_init::bitmap#1 = phi( bitmap_init/bitmap_init::bitmap#2, bitmap_init::@2/bitmap_init::bitmap#3 )
  bitmap_init::x#2 = phi( bitmap_init/bitmap_init::x#0, bitmap_init::@2/bitmap_init::x#1 )
  bitmap_init::$0 = bitmap_init::x#2 & $f8
  bitmap_plot_xlo[bitmap_init::x#2] = bitmap_init::$0
  bitmap_init::$1 = > bitmap_init::bitmap#1
  bitmap_plot_xhi[bitmap_init::x#2] = bitmap_init::$1
  bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  bitmap_init::$2 = bitmap_init::bits#3 >> 1
  bitmap_init::bits#1 = bitmap_init::$2
  bitmap_init::$3 = bitmap_init::bits#1 == 0
  bitmap_init::$4 = ! bitmap_init::$3
  if(bitmap_init::$4) goto bitmap_init::@2
  to:bitmap_init::@3
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@3
  bitmap_init::bits#4 = phi( bitmap_init::@1/bitmap_init::bits#1, bitmap_init::@3/bitmap_init::bits#2 )
  bitmap_init::bitmap#3 = phi( bitmap_init::@1/bitmap_init::bitmap#1, bitmap_init::@3/bitmap_init::bitmap#4 )
  bitmap_init::x#3 = phi( bitmap_init::@1/bitmap_init::x#2, bitmap_init::@3/bitmap_init::x#4 )
  bitmap_init::x#1 = bitmap_init::x#3 + rangenext(0,$ff)
  bitmap_init::$5 = bitmap_init::x#1 != rangelast(0,$ff)
  if(bitmap_init::$5) goto bitmap_init::@1
  to:bitmap_init::@4
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@1
  bitmap_init::bitmap#4 = phi( bitmap_init::@1/bitmap_init::bitmap#1 )
  bitmap_init::x#4 = phi( bitmap_init::@1/bitmap_init::x#2 )
  bitmap_init::bits#2 = $80
  to:bitmap_init::@2
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@2
  bitmap_init::yoffs#0 = (byte*)0
  bitmap_init::y#0 = 0
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  bitmap_init::yoffs#2 = phi( bitmap_init::@4/bitmap_init::yoffs#0, bitmap_init::@6/bitmap_init::yoffs#4 )
  bitmap_init::y#2 = phi( bitmap_init::@4/bitmap_init::y#0, bitmap_init::@6/bitmap_init::y#1 )
  bitmap_init::$6 = bitmap_init::y#2 & 7
  bitmap_init::$7 = < bitmap_init::yoffs#2
  bitmap_init::$8 = bitmap_init::$6 | bitmap_init::$7
  bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$8
  bitmap_init::$9 = > bitmap_init::yoffs#2
  bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$9
  bitmap_init::$10 = bitmap_init::y#2 & 7
  bitmap_init::$11 = bitmap_init::$10 == 7
  bitmap_init::$12 = ! bitmap_init::$11
  if(bitmap_init::$12) goto bitmap_init::@6
  to:bitmap_init::@7
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@5 bitmap_init::@7
  bitmap_init::yoffs#4 = phi( bitmap_init::@5/bitmap_init::yoffs#2, bitmap_init::@7/bitmap_init::yoffs#1 )
  bitmap_init::y#3 = phi( bitmap_init::@5/bitmap_init::y#2, bitmap_init::@7/bitmap_init::y#4 )
  bitmap_init::y#1 = bitmap_init::y#3 + rangenext(0,$ff)
  bitmap_init::$14 = bitmap_init::y#1 != rangelast(0,$ff)
  if(bitmap_init::$14) goto bitmap_init::@5
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@5
  bitmap_init::y#4 = phi( bitmap_init::@5/bitmap_init::y#2 )
  bitmap_init::yoffs#3 = phi( bitmap_init::@5/bitmap_init::yoffs#2 )
  bitmap_init::$13 = bitmap_init::yoffs#3 + $28*8
  bitmap_init::yoffs#1 = bitmap_init::$13
  to:bitmap_init::@6
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@6
  return 
  to:@return

void bitmap_clear()
bitmap_clear: scope:[bitmap_clear]  from mode_stdbitmap::@10
  bitmap_clear::bitmap#0 = (byte*){ bitmap_plot_xhi[0], bitmap_plot_xlo[0] }
  bitmap_clear::y#0 = 0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  bitmap_clear::y#4 = phi( bitmap_clear/bitmap_clear::y#0, bitmap_clear::@3/bitmap_clear::y#1 )
  bitmap_clear::bitmap#3 = phi( bitmap_clear/bitmap_clear::bitmap#0, bitmap_clear::@3/bitmap_clear::bitmap#4 )
  bitmap_clear::x#0 = 0
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  bitmap_clear::y#3 = phi( bitmap_clear::@1/bitmap_clear::y#4, bitmap_clear::@2/bitmap_clear::y#3 )
  bitmap_clear::x#2 = phi( bitmap_clear::@1/bitmap_clear::x#0, bitmap_clear::@2/bitmap_clear::x#1 )
  bitmap_clear::bitmap#2 = phi( bitmap_clear::@1/bitmap_clear::bitmap#3, bitmap_clear::@2/bitmap_clear::bitmap#1 )
  *bitmap_clear::bitmap#2 = 0
  bitmap_clear::bitmap#1 = ++ bitmap_clear::bitmap#2
  bitmap_clear::x#1 = bitmap_clear::x#2 + rangenext(0,$c7)
  bitmap_clear::$0 = bitmap_clear::x#1 != rangelast(0,$c7)
  if(bitmap_clear::$0) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  bitmap_clear::bitmap#4 = phi( bitmap_clear::@2/bitmap_clear::bitmap#1 )
  bitmap_clear::y#2 = phi( bitmap_clear::@2/bitmap_clear::y#3 )
  bitmap_clear::y#1 = bitmap_clear::y#2 + rangenext(0,$27)
  bitmap_clear::$1 = bitmap_clear::y#1 != rangelast(0,$27)
  if(bitmap_clear::$1) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  return 
  to:@return

void bitmap_plot(byte bitmap_plot::x , byte bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  bitmap_plot::y#4 = phi( bitmap_line_xdyd::@1/bitmap_plot::y#1, bitmap_line_xdyi::@1/bitmap_plot::y#0, bitmap_line_ydxd::@1/bitmap_plot::y#3, bitmap_line_ydxi::@1/bitmap_plot::y#2 )
  bitmap_plot::x#4 = phi( bitmap_line_xdyd::@1/bitmap_plot::x#1, bitmap_line_xdyi::@1/bitmap_plot::x#0, bitmap_line_ydxd::@1/bitmap_plot::x#3, bitmap_line_ydxi::@1/bitmap_plot::x#2 )
  bitmap_plot::plotter_x#0 = (word){ bitmap_plot_xhi[bitmap_plot::x#4], bitmap_plot_xlo[bitmap_plot::x#4] }
  bitmap_plot::plotter_y#0 = (word){ bitmap_plot_yhi[bitmap_plot::y#4], bitmap_plot_ylo[bitmap_plot::y#4] }
  bitmap_plot::$0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0
  bitmap_plot::plotter#0 = ((byte*)) bitmap_plot::$0
  bitmap_plot::$1 = *bitmap_plot::plotter#0 | bitmap_plot_bit[bitmap_plot::x#4]
  *bitmap_plot::plotter#0 = bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return

void bitmap_line(byte bitmap_line::x0 , byte bitmap_line::x1 , byte bitmap_line::y0 , byte bitmap_line::y1)
bitmap_line: scope:[bitmap_line]  from mode_stdbitmap::@8
  bitmap_line::y1#13 = phi( mode_stdbitmap::@8/bitmap_line::y1#0 )
  bitmap_line::y0#13 = phi( mode_stdbitmap::@8/bitmap_line::y0#0 )
  bitmap_line::x1#1 = phi( mode_stdbitmap::@8/bitmap_line::x1#0 )
  bitmap_line::x0#1 = phi( mode_stdbitmap::@8/bitmap_line::x0#0 )
  bitmap_line::xd#0 = 0
  bitmap_line::yd#0 = 0
  bitmap_line::$0 = bitmap_line::x0#1 < bitmap_line::x1#1
  if(bitmap_line::$0) goto bitmap_line::@1
  to:bitmap_line::@2
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  bitmap_line::y1#1 = phi( bitmap_line/bitmap_line::y1#13 )
  bitmap_line::y0#1 = phi( bitmap_line/bitmap_line::y0#13 )
  bitmap_line::x0#2 = phi( bitmap_line/bitmap_line::x0#1 )
  bitmap_line::x1#2 = phi( bitmap_line/bitmap_line::x1#1 )
  bitmap_line::$11 = bitmap_line::x1#2 - bitmap_line::x0#2
  bitmap_line::xd#1 = bitmap_line::$11
  bitmap_line::$12 = bitmap_line::y0#1 < bitmap_line::y1#1
  if(bitmap_line::$12) goto bitmap_line::@11
  to:bitmap_line::@5
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line
  bitmap_line::y1#2 = phi( bitmap_line/bitmap_line::y1#13 )
  bitmap_line::y0#2 = phi( bitmap_line/bitmap_line::y0#13 )
  bitmap_line::x1#3 = phi( bitmap_line/bitmap_line::x1#1 )
  bitmap_line::x0#3 = phi( bitmap_line/bitmap_line::x0#1 )
  bitmap_line::$1 = bitmap_line::x0#3 - bitmap_line::x1#3
  bitmap_line::xd#2 = bitmap_line::$1
  bitmap_line::$2 = bitmap_line::y0#2 < bitmap_line::y1#2
  if(bitmap_line::$2) goto bitmap_line::@7
  to:bitmap_line::@3
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@2
  bitmap_line::x0#11 = phi( bitmap_line::@2/bitmap_line::x0#3 )
  bitmap_line::x1#11 = phi( bitmap_line::@2/bitmap_line::x1#3 )
  bitmap_line::xd#3 = phi( bitmap_line::@2/bitmap_line::xd#2 )
  bitmap_line::y0#3 = phi( bitmap_line::@2/bitmap_line::y0#2 )
  bitmap_line::y1#3 = phi( bitmap_line::@2/bitmap_line::y1#2 )
  bitmap_line::$7 = bitmap_line::y1#3 - bitmap_line::y0#3
  bitmap_line::yd#1 = bitmap_line::$7
  bitmap_line::$8 = bitmap_line::yd#1 < bitmap_line::xd#3
  if(bitmap_line::$8) goto bitmap_line::@9
  to:bitmap_line::@10
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@2
  bitmap_line::x0#10 = phi( bitmap_line::@2/bitmap_line::x0#3 )
  bitmap_line::x1#10 = phi( bitmap_line::@2/bitmap_line::x1#3 )
  bitmap_line::xd#4 = phi( bitmap_line::@2/bitmap_line::xd#2 )
  bitmap_line::y1#4 = phi( bitmap_line::@2/bitmap_line::y1#2 )
  bitmap_line::y0#4 = phi( bitmap_line::@2/bitmap_line::y0#2 )
  bitmap_line::$3 = bitmap_line::y0#4 - bitmap_line::y1#4
  bitmap_line::yd#2 = bitmap_line::$3
  bitmap_line::$4 = bitmap_line::yd#2 < bitmap_line::xd#4
  if(bitmap_line::$4) goto bitmap_line::@8
  to:bitmap_line::@4
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@3
  bitmap_line::yd#5 = phi( bitmap_line::@3/bitmap_line::yd#2 )
  bitmap_line::xd#5 = phi( bitmap_line::@3/bitmap_line::xd#4 )
  bitmap_line::x0#4 = phi( bitmap_line::@3/bitmap_line::x0#10 )
  bitmap_line::y1#5 = phi( bitmap_line::@3/bitmap_line::y1#4 )
  bitmap_line::x1#4 = phi( bitmap_line::@3/bitmap_line::x1#10 )
  bitmap_line_xdyi::x#0 = bitmap_line::x1#4
  bitmap_line_xdyi::y#0 = bitmap_line::y1#5
  bitmap_line_xdyi::x1#0 = bitmap_line::x0#4
  bitmap_line_xdyi::xd#0 = bitmap_line::xd#5
  bitmap_line_xdyi::yd#0 = bitmap_line::yd#5
  call bitmap_line_xdyi 
  to:bitmap_line::@15
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line::@8
  to:bitmap_line::@return
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@3
  bitmap_line::xd#6 = phi( bitmap_line::@3/bitmap_line::xd#4 )
  bitmap_line::yd#6 = phi( bitmap_line::@3/bitmap_line::yd#2 )
  bitmap_line::y0#5 = phi( bitmap_line::@3/bitmap_line::y0#4 )
  bitmap_line::x1#5 = phi( bitmap_line::@3/bitmap_line::x1#10 )
  bitmap_line::y1#6 = phi( bitmap_line::@3/bitmap_line::y1#4 )
  bitmap_line_ydxi::y#0 = bitmap_line::y1#6
  bitmap_line_ydxi::x#0 = bitmap_line::x1#5
  bitmap_line_ydxi::y1#0 = bitmap_line::y0#5
  bitmap_line_ydxi::yd#0 = bitmap_line::yd#6
  bitmap_line_ydxi::xd#0 = bitmap_line::xd#6
  call bitmap_line_ydxi 
  to:bitmap_line::@16
bitmap_line::@16: scope:[bitmap_line]  from bitmap_line::@4
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@7
  bitmap_line::yd#7 = phi( bitmap_line::@7/bitmap_line::yd#1 )
  bitmap_line::xd#7 = phi( bitmap_line::@7/bitmap_line::xd#3 )
  bitmap_line::x0#5 = phi( bitmap_line::@7/bitmap_line::x0#11 )
  bitmap_line::y1#7 = phi( bitmap_line::@7/bitmap_line::y1#3 )
  bitmap_line::x1#6 = phi( bitmap_line::@7/bitmap_line::x1#11 )
  bitmap_line_xdyd::x#0 = bitmap_line::x1#6
  bitmap_line_xdyd::y#0 = bitmap_line::y1#7
  bitmap_line_xdyd::x1#0 = bitmap_line::x0#5
  bitmap_line_xdyd::xd#0 = bitmap_line::xd#7
  bitmap_line_xdyd::yd#0 = bitmap_line::yd#7
  call bitmap_line_xdyd 
  to:bitmap_line::@17
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@9
  to:bitmap_line::@return
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@7
  bitmap_line::xd#8 = phi( bitmap_line::@7/bitmap_line::xd#3 )
  bitmap_line::yd#8 = phi( bitmap_line::@7/bitmap_line::yd#1 )
  bitmap_line::y1#8 = phi( bitmap_line::@7/bitmap_line::y1#3 )
  bitmap_line::x0#6 = phi( bitmap_line::@7/bitmap_line::x0#11 )
  bitmap_line::y0#6 = phi( bitmap_line::@7/bitmap_line::y0#3 )
  bitmap_line_ydxd::y#0 = bitmap_line::y0#6
  bitmap_line_ydxd::x#0 = bitmap_line::x0#6
  bitmap_line_ydxd::y1#0 = bitmap_line::y1#8
  bitmap_line_ydxd::yd#0 = bitmap_line::yd#8
  bitmap_line_ydxd::xd#0 = bitmap_line::xd#8
  call bitmap_line_ydxd 
  to:bitmap_line::@18
bitmap_line::@18: scope:[bitmap_line]  from bitmap_line::@10
  to:bitmap_line::@return
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@1
  bitmap_line::x1#13 = phi( bitmap_line::@1/bitmap_line::x1#2 )
  bitmap_line::x0#13 = phi( bitmap_line::@1/bitmap_line::x0#2 )
  bitmap_line::xd#9 = phi( bitmap_line::@1/bitmap_line::xd#1 )
  bitmap_line::y0#7 = phi( bitmap_line::@1/bitmap_line::y0#1 )
  bitmap_line::y1#9 = phi( bitmap_line::@1/bitmap_line::y1#1 )
  bitmap_line::$17 = bitmap_line::y1#9 - bitmap_line::y0#7
  bitmap_line::yd#3 = bitmap_line::$17
  bitmap_line::$18 = bitmap_line::yd#3 < bitmap_line::xd#9
  if(bitmap_line::$18) goto bitmap_line::@13
  to:bitmap_line::@14
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@1
  bitmap_line::x1#12 = phi( bitmap_line::@1/bitmap_line::x1#2 )
  bitmap_line::x0#12 = phi( bitmap_line::@1/bitmap_line::x0#2 )
  bitmap_line::xd#10 = phi( bitmap_line::@1/bitmap_line::xd#1 )
  bitmap_line::y1#10 = phi( bitmap_line::@1/bitmap_line::y1#1 )
  bitmap_line::y0#8 = phi( bitmap_line::@1/bitmap_line::y0#1 )
  bitmap_line::$13 = bitmap_line::y0#8 - bitmap_line::y1#10
  bitmap_line::yd#4 = bitmap_line::$13
  bitmap_line::$14 = bitmap_line::yd#4 < bitmap_line::xd#10
  if(bitmap_line::$14) goto bitmap_line::@12
  to:bitmap_line::@6
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line::@5
  bitmap_line::yd#9 = phi( bitmap_line::@5/bitmap_line::yd#4 )
  bitmap_line::xd#11 = phi( bitmap_line::@5/bitmap_line::xd#10 )
  bitmap_line::x1#7 = phi( bitmap_line::@5/bitmap_line::x1#12 )
  bitmap_line::y0#9 = phi( bitmap_line::@5/bitmap_line::y0#8 )
  bitmap_line::x0#7 = phi( bitmap_line::@5/bitmap_line::x0#12 )
  bitmap_line_xdyd::x#1 = bitmap_line::x0#7
  bitmap_line_xdyd::y#1 = bitmap_line::y0#9
  bitmap_line_xdyd::x1#1 = bitmap_line::x1#7
  bitmap_line_xdyd::xd#1 = bitmap_line::xd#11
  bitmap_line_xdyd::yd#1 = bitmap_line::yd#9
  call bitmap_line_xdyd 
  to:bitmap_line::@19
bitmap_line::@19: scope:[bitmap_line]  from bitmap_line::@12
  to:bitmap_line::@return
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5
  bitmap_line::xd#12 = phi( bitmap_line::@5/bitmap_line::xd#10 )
  bitmap_line::yd#10 = phi( bitmap_line::@5/bitmap_line::yd#4 )
  bitmap_line::y0#10 = phi( bitmap_line::@5/bitmap_line::y0#8 )
  bitmap_line::x1#8 = phi( bitmap_line::@5/bitmap_line::x1#12 )
  bitmap_line::y1#11 = phi( bitmap_line::@5/bitmap_line::y1#10 )
  bitmap_line_ydxd::y#1 = bitmap_line::y1#11
  bitmap_line_ydxd::x#1 = bitmap_line::x1#8
  bitmap_line_ydxd::y1#1 = bitmap_line::y0#10
  bitmap_line_ydxd::yd#1 = bitmap_line::yd#10
  bitmap_line_ydxd::xd#1 = bitmap_line::xd#12
  call bitmap_line_ydxd 
  to:bitmap_line::@20
bitmap_line::@20: scope:[bitmap_line]  from bitmap_line::@6
  to:bitmap_line::@return
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@11
  bitmap_line::yd#11 = phi( bitmap_line::@11/bitmap_line::yd#3 )
  bitmap_line::xd#13 = phi( bitmap_line::@11/bitmap_line::xd#9 )
  bitmap_line::x1#9 = phi( bitmap_line::@11/bitmap_line::x1#13 )
  bitmap_line::y0#11 = phi( bitmap_line::@11/bitmap_line::y0#7 )
  bitmap_line::x0#8 = phi( bitmap_line::@11/bitmap_line::x0#13 )
  bitmap_line_xdyi::x#1 = bitmap_line::x0#8
  bitmap_line_xdyi::y#1 = bitmap_line::y0#11
  bitmap_line_xdyi::x1#1 = bitmap_line::x1#9
  bitmap_line_xdyi::xd#1 = bitmap_line::xd#13
  bitmap_line_xdyi::yd#1 = bitmap_line::yd#11
  call bitmap_line_xdyi 
  to:bitmap_line::@21
bitmap_line::@21: scope:[bitmap_line]  from bitmap_line::@13
  to:bitmap_line::@return
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@11
  bitmap_line::xd#14 = phi( bitmap_line::@11/bitmap_line::xd#9 )
  bitmap_line::yd#12 = phi( bitmap_line::@11/bitmap_line::yd#3 )
  bitmap_line::y1#12 = phi( bitmap_line::@11/bitmap_line::y1#9 )
  bitmap_line::x0#9 = phi( bitmap_line::@11/bitmap_line::x0#13 )
  bitmap_line::y0#12 = phi( bitmap_line::@11/bitmap_line::y0#7 )
  bitmap_line_ydxi::y#1 = bitmap_line::y0#12
  bitmap_line_ydxi::x#1 = bitmap_line::x0#9
  bitmap_line_ydxi::y1#1 = bitmap_line::y1#12
  bitmap_line_ydxi::yd#1 = bitmap_line::yd#12
  bitmap_line_ydxi::xd#1 = bitmap_line::xd#14
  call bitmap_line_ydxi 
  to:bitmap_line::@22
bitmap_line::@22: scope:[bitmap_line]  from bitmap_line::@14
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@15 bitmap_line::@16 bitmap_line::@17 bitmap_line::@18 bitmap_line::@19 bitmap_line::@20 bitmap_line::@21 bitmap_line::@22
  return 
  to:@return

void bitmap_line_xdyi(byte bitmap_line_xdyi::x , byte bitmap_line_xdyi::y , byte bitmap_line_xdyi::x1 , byte bitmap_line_xdyi::xd , byte bitmap_line_xdyi::yd)
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@13 bitmap_line::@8
  bitmap_line_xdyi::x1#6 = phi( bitmap_line::@13/bitmap_line_xdyi::x1#1, bitmap_line::@8/bitmap_line_xdyi::x1#0 )
  bitmap_line_xdyi::xd#5 = phi( bitmap_line::@13/bitmap_line_xdyi::xd#1, bitmap_line::@8/bitmap_line_xdyi::xd#0 )
  bitmap_line_xdyi::y#5 = phi( bitmap_line::@13/bitmap_line_xdyi::y#1, bitmap_line::@8/bitmap_line_xdyi::y#0 )
  bitmap_line_xdyi::x#6 = phi( bitmap_line::@13/bitmap_line_xdyi::x#1, bitmap_line::@8/bitmap_line_xdyi::x#0 )
  bitmap_line_xdyi::yd#2 = phi( bitmap_line::@13/bitmap_line_xdyi::yd#1, bitmap_line::@8/bitmap_line_xdyi::yd#0 )
  bitmap_line_xdyi::$0 = bitmap_line_xdyi::yd#2 >> 1
  bitmap_line_xdyi::e#0 = bitmap_line_xdyi::$0
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  bitmap_line_xdyi::x1#5 = phi( bitmap_line_xdyi/bitmap_line_xdyi::x1#6, bitmap_line_xdyi::@2/bitmap_line_xdyi::x1#2 )
  bitmap_line_xdyi::xd#4 = phi( bitmap_line_xdyi/bitmap_line_xdyi::xd#5, bitmap_line_xdyi::@2/bitmap_line_xdyi::xd#6 )
  bitmap_line_xdyi::yd#4 = phi( bitmap_line_xdyi/bitmap_line_xdyi::yd#2, bitmap_line_xdyi::@2/bitmap_line_xdyi::yd#5 )
  bitmap_line_xdyi::e#5 = phi( bitmap_line_xdyi/bitmap_line_xdyi::e#0, bitmap_line_xdyi::@2/bitmap_line_xdyi::e#6 )
  bitmap_line_xdyi::y#3 = phi( bitmap_line_xdyi/bitmap_line_xdyi::y#5, bitmap_line_xdyi::@2/bitmap_line_xdyi::y#6 )
  bitmap_line_xdyi::x#3 = phi( bitmap_line_xdyi/bitmap_line_xdyi::x#6, bitmap_line_xdyi::@2/bitmap_line_xdyi::x#5 )
  bitmap_plot::x#0 = bitmap_line_xdyi::x#3
  bitmap_plot::y#0 = bitmap_line_xdyi::y#3
  call bitmap_plot 
  to:bitmap_line_xdyi::@4
bitmap_line_xdyi::@4: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  bitmap_line_xdyi::y#7 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::y#3 )
  bitmap_line_xdyi::x1#4 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::x1#5 )
  bitmap_line_xdyi::xd#2 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::xd#4 )
  bitmap_line_xdyi::yd#3 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::yd#4 )
  bitmap_line_xdyi::e#3 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::e#5 )
  bitmap_line_xdyi::x#4 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::x#3 )
  bitmap_line_xdyi::x#2 = ++ bitmap_line_xdyi::x#4
  bitmap_line_xdyi::$2 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#3
  bitmap_line_xdyi::e#1 = bitmap_line_xdyi::$2
  bitmap_line_xdyi::$3 = bitmap_line_xdyi::xd#2 < bitmap_line_xdyi::e#1
  bitmap_line_xdyi::$4 = ! bitmap_line_xdyi::$3
  if(bitmap_line_xdyi::$4) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4
  bitmap_line_xdyi::xd#6 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::xd#3, bitmap_line_xdyi::@4/bitmap_line_xdyi::xd#2 )
  bitmap_line_xdyi::yd#5 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::yd#6, bitmap_line_xdyi::@4/bitmap_line_xdyi::yd#3 )
  bitmap_line_xdyi::e#6 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::e#2, bitmap_line_xdyi::@4/bitmap_line_xdyi::e#1 )
  bitmap_line_xdyi::y#6 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::y#2, bitmap_line_xdyi::@4/bitmap_line_xdyi::y#7 )
  bitmap_line_xdyi::x#5 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::x#7, bitmap_line_xdyi::@4/bitmap_line_xdyi::x#2 )
  bitmap_line_xdyi::x1#2 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::x1#3, bitmap_line_xdyi::@4/bitmap_line_xdyi::x1#4 )
  bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#2 + 1
  bitmap_line_xdyi::$7 = bitmap_line_xdyi::x#5 != bitmap_line_xdyi::$6
  if(bitmap_line_xdyi::$7) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@4
  bitmap_line_xdyi::yd#6 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::yd#3 )
  bitmap_line_xdyi::x#7 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::x#2 )
  bitmap_line_xdyi::x1#3 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::x1#4 )
  bitmap_line_xdyi::xd#3 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::xd#2 )
  bitmap_line_xdyi::e#4 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::e#1 )
  bitmap_line_xdyi::y#4 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::y#7 )
  bitmap_line_xdyi::y#2 = ++ bitmap_line_xdyi::y#4
  bitmap_line_xdyi::$5 = bitmap_line_xdyi::e#4 - bitmap_line_xdyi::xd#3
  bitmap_line_xdyi::e#2 = bitmap_line_xdyi::$5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  return 
  to:@return

void bitmap_line_xdyd(byte bitmap_line_xdyd::x , byte bitmap_line_xdyd::y , byte bitmap_line_xdyd::x1 , byte bitmap_line_xdyd::xd , byte bitmap_line_xdyd::yd)
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@12 bitmap_line::@9
  bitmap_line_xdyd::x1#6 = phi( bitmap_line::@12/bitmap_line_xdyd::x1#1, bitmap_line::@9/bitmap_line_xdyd::x1#0 )
  bitmap_line_xdyd::xd#5 = phi( bitmap_line::@12/bitmap_line_xdyd::xd#1, bitmap_line::@9/bitmap_line_xdyd::xd#0 )
  bitmap_line_xdyd::y#5 = phi( bitmap_line::@12/bitmap_line_xdyd::y#1, bitmap_line::@9/bitmap_line_xdyd::y#0 )
  bitmap_line_xdyd::x#6 = phi( bitmap_line::@12/bitmap_line_xdyd::x#1, bitmap_line::@9/bitmap_line_xdyd::x#0 )
  bitmap_line_xdyd::yd#2 = phi( bitmap_line::@12/bitmap_line_xdyd::yd#1, bitmap_line::@9/bitmap_line_xdyd::yd#0 )
  bitmap_line_xdyd::$0 = bitmap_line_xdyd::yd#2 >> 1
  bitmap_line_xdyd::e#0 = bitmap_line_xdyd::$0
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  bitmap_line_xdyd::x1#5 = phi( bitmap_line_xdyd/bitmap_line_xdyd::x1#6, bitmap_line_xdyd::@2/bitmap_line_xdyd::x1#2 )
  bitmap_line_xdyd::xd#4 = phi( bitmap_line_xdyd/bitmap_line_xdyd::xd#5, bitmap_line_xdyd::@2/bitmap_line_xdyd::xd#6 )
  bitmap_line_xdyd::yd#4 = phi( bitmap_line_xdyd/bitmap_line_xdyd::yd#2, bitmap_line_xdyd::@2/bitmap_line_xdyd::yd#5 )
  bitmap_line_xdyd::e#5 = phi( bitmap_line_xdyd/bitmap_line_xdyd::e#0, bitmap_line_xdyd::@2/bitmap_line_xdyd::e#6 )
  bitmap_line_xdyd::y#3 = phi( bitmap_line_xdyd/bitmap_line_xdyd::y#5, bitmap_line_xdyd::@2/bitmap_line_xdyd::y#6 )
  bitmap_line_xdyd::x#3 = phi( bitmap_line_xdyd/bitmap_line_xdyd::x#6, bitmap_line_xdyd::@2/bitmap_line_xdyd::x#5 )
  bitmap_plot::x#1 = bitmap_line_xdyd::x#3
  bitmap_plot::y#1 = bitmap_line_xdyd::y#3
  call bitmap_plot 
  to:bitmap_line_xdyd::@4
bitmap_line_xdyd::@4: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  bitmap_line_xdyd::y#7 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::y#3 )
  bitmap_line_xdyd::x1#4 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::x1#5 )
  bitmap_line_xdyd::xd#2 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::xd#4 )
  bitmap_line_xdyd::yd#3 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::yd#4 )
  bitmap_line_xdyd::e#3 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::e#5 )
  bitmap_line_xdyd::x#4 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::x#3 )
  bitmap_line_xdyd::x#2 = ++ bitmap_line_xdyd::x#4
  bitmap_line_xdyd::$2 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#3
  bitmap_line_xdyd::e#1 = bitmap_line_xdyd::$2
  bitmap_line_xdyd::$3 = bitmap_line_xdyd::xd#2 < bitmap_line_xdyd::e#1
  bitmap_line_xdyd::$4 = ! bitmap_line_xdyd::$3
  if(bitmap_line_xdyd::$4) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4
  bitmap_line_xdyd::xd#6 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::xd#3, bitmap_line_xdyd::@4/bitmap_line_xdyd::xd#2 )
  bitmap_line_xdyd::yd#5 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::yd#6, bitmap_line_xdyd::@4/bitmap_line_xdyd::yd#3 )
  bitmap_line_xdyd::e#6 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::e#2, bitmap_line_xdyd::@4/bitmap_line_xdyd::e#1 )
  bitmap_line_xdyd::y#6 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::y#2, bitmap_line_xdyd::@4/bitmap_line_xdyd::y#7 )
  bitmap_line_xdyd::x#5 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::x#7, bitmap_line_xdyd::@4/bitmap_line_xdyd::x#2 )
  bitmap_line_xdyd::x1#2 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::x1#3, bitmap_line_xdyd::@4/bitmap_line_xdyd::x1#4 )
  bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#2 + 1
  bitmap_line_xdyd::$7 = bitmap_line_xdyd::x#5 != bitmap_line_xdyd::$6
  if(bitmap_line_xdyd::$7) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@4
  bitmap_line_xdyd::yd#6 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::yd#3 )
  bitmap_line_xdyd::x#7 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::x#2 )
  bitmap_line_xdyd::x1#3 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::x1#4 )
  bitmap_line_xdyd::xd#3 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::xd#2 )
  bitmap_line_xdyd::e#4 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::e#1 )
  bitmap_line_xdyd::y#4 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::y#7 )
  bitmap_line_xdyd::y#2 = -- bitmap_line_xdyd::y#4
  bitmap_line_xdyd::$5 = bitmap_line_xdyd::e#4 - bitmap_line_xdyd::xd#3
  bitmap_line_xdyd::e#2 = bitmap_line_xdyd::$5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  return 
  to:@return

void bitmap_line_ydxi(byte bitmap_line_ydxi::y , byte bitmap_line_ydxi::x , byte bitmap_line_ydxi::y1 , byte bitmap_line_ydxi::yd , byte bitmap_line_ydxi::xd)
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@14 bitmap_line::@4
  bitmap_line_ydxi::y1#6 = phi( bitmap_line::@14/bitmap_line_ydxi::y1#1, bitmap_line::@4/bitmap_line_ydxi::y1#0 )
  bitmap_line_ydxi::yd#5 = phi( bitmap_line::@14/bitmap_line_ydxi::yd#1, bitmap_line::@4/bitmap_line_ydxi::yd#0 )
  bitmap_line_ydxi::y#6 = phi( bitmap_line::@14/bitmap_line_ydxi::y#1, bitmap_line::@4/bitmap_line_ydxi::y#0 )
  bitmap_line_ydxi::x#5 = phi( bitmap_line::@14/bitmap_line_ydxi::x#1, bitmap_line::@4/bitmap_line_ydxi::x#0 )
  bitmap_line_ydxi::xd#2 = phi( bitmap_line::@14/bitmap_line_ydxi::xd#1, bitmap_line::@4/bitmap_line_ydxi::xd#0 )
  bitmap_line_ydxi::$0 = bitmap_line_ydxi::xd#2 >> 1
  bitmap_line_ydxi::e#0 = bitmap_line_ydxi::$0
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  bitmap_line_ydxi::y1#5 = phi( bitmap_line_ydxi/bitmap_line_ydxi::y1#6, bitmap_line_ydxi::@2/bitmap_line_ydxi::y1#2 )
  bitmap_line_ydxi::yd#4 = phi( bitmap_line_ydxi/bitmap_line_ydxi::yd#5, bitmap_line_ydxi::@2/bitmap_line_ydxi::yd#6 )
  bitmap_line_ydxi::xd#4 = phi( bitmap_line_ydxi/bitmap_line_ydxi::xd#2, bitmap_line_ydxi::@2/bitmap_line_ydxi::xd#5 )
  bitmap_line_ydxi::e#5 = phi( bitmap_line_ydxi/bitmap_line_ydxi::e#0, bitmap_line_ydxi::@2/bitmap_line_ydxi::e#6 )
  bitmap_line_ydxi::y#3 = phi( bitmap_line_ydxi/bitmap_line_ydxi::y#6, bitmap_line_ydxi::@2/bitmap_line_ydxi::y#5 )
  bitmap_line_ydxi::x#3 = phi( bitmap_line_ydxi/bitmap_line_ydxi::x#5, bitmap_line_ydxi::@2/bitmap_line_ydxi::x#6 )
  bitmap_plot::x#2 = bitmap_line_ydxi::x#3
  bitmap_plot::y#2 = bitmap_line_ydxi::y#3
  call bitmap_plot 
  to:bitmap_line_ydxi::@4
bitmap_line_ydxi::@4: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  bitmap_line_ydxi::x#7 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::x#3 )
  bitmap_line_ydxi::y1#4 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::y1#5 )
  bitmap_line_ydxi::yd#2 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::yd#4 )
  bitmap_line_ydxi::xd#3 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::xd#4 )
  bitmap_line_ydxi::e#3 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::e#5 )
  bitmap_line_ydxi::y#4 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::y#3 )
  bitmap_line_ydxi::y#2 = ++ bitmap_line_ydxi::y#4
  bitmap_line_ydxi::$2 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#3
  bitmap_line_ydxi::e#1 = bitmap_line_ydxi::$2
  bitmap_line_ydxi::$3 = bitmap_line_ydxi::yd#2 < bitmap_line_ydxi::e#1
  bitmap_line_ydxi::$4 = ! bitmap_line_ydxi::$3
  if(bitmap_line_ydxi::$4) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4
  bitmap_line_ydxi::yd#6 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::yd#3, bitmap_line_ydxi::@4/bitmap_line_ydxi::yd#2 )
  bitmap_line_ydxi::xd#5 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::xd#6, bitmap_line_ydxi::@4/bitmap_line_ydxi::xd#3 )
  bitmap_line_ydxi::e#6 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::e#2, bitmap_line_ydxi::@4/bitmap_line_ydxi::e#1 )
  bitmap_line_ydxi::x#6 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::x#2, bitmap_line_ydxi::@4/bitmap_line_ydxi::x#7 )
  bitmap_line_ydxi::y#5 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::y#7, bitmap_line_ydxi::@4/bitmap_line_ydxi::y#2 )
  bitmap_line_ydxi::y1#2 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::y1#3, bitmap_line_ydxi::@4/bitmap_line_ydxi::y1#4 )
  bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#2 + 1
  bitmap_line_ydxi::$7 = bitmap_line_ydxi::y#5 != bitmap_line_ydxi::$6
  if(bitmap_line_ydxi::$7) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@4
  bitmap_line_ydxi::xd#6 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::xd#3 )
  bitmap_line_ydxi::y#7 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::y#2 )
  bitmap_line_ydxi::y1#3 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::y1#4 )
  bitmap_line_ydxi::yd#3 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::yd#2 )
  bitmap_line_ydxi::e#4 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::e#1 )
  bitmap_line_ydxi::x#4 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::x#7 )
  bitmap_line_ydxi::x#2 = ++ bitmap_line_ydxi::x#4
  bitmap_line_ydxi::$5 = bitmap_line_ydxi::e#4 - bitmap_line_ydxi::yd#3
  bitmap_line_ydxi::e#2 = bitmap_line_ydxi::$5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  return 
  to:@return

void bitmap_line_ydxd(byte bitmap_line_ydxd::y , byte bitmap_line_ydxd::x , byte bitmap_line_ydxd::y1 , byte bitmap_line_ydxd::yd , byte bitmap_line_ydxd::xd)
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@10 bitmap_line::@6
  bitmap_line_ydxd::y1#6 = phi( bitmap_line::@10/bitmap_line_ydxd::y1#0, bitmap_line::@6/bitmap_line_ydxd::y1#1 )
  bitmap_line_ydxd::yd#5 = phi( bitmap_line::@10/bitmap_line_ydxd::yd#0, bitmap_line::@6/bitmap_line_ydxd::yd#1 )
  bitmap_line_ydxd::y#7 = phi( bitmap_line::@10/bitmap_line_ydxd::y#0, bitmap_line::@6/bitmap_line_ydxd::y#1 )
  bitmap_line_ydxd::x#5 = phi( bitmap_line::@10/bitmap_line_ydxd::x#0, bitmap_line::@6/bitmap_line_ydxd::x#1 )
  bitmap_line_ydxd::xd#2 = phi( bitmap_line::@10/bitmap_line_ydxd::xd#0, bitmap_line::@6/bitmap_line_ydxd::xd#1 )
  bitmap_line_ydxd::$0 = bitmap_line_ydxd::xd#2 >> 1
  bitmap_line_ydxd::e#0 = bitmap_line_ydxd::$0
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  bitmap_line_ydxd::y1#5 = phi( bitmap_line_ydxd/bitmap_line_ydxd::y1#6, bitmap_line_ydxd::@2/bitmap_line_ydxd::y1#2 )
  bitmap_line_ydxd::yd#4 = phi( bitmap_line_ydxd/bitmap_line_ydxd::yd#5, bitmap_line_ydxd::@2/bitmap_line_ydxd::yd#6 )
  bitmap_line_ydxd::xd#4 = phi( bitmap_line_ydxd/bitmap_line_ydxd::xd#2, bitmap_line_ydxd::@2/bitmap_line_ydxd::xd#5 )
  bitmap_line_ydxd::e#5 = phi( bitmap_line_ydxd/bitmap_line_ydxd::e#0, bitmap_line_ydxd::@2/bitmap_line_ydxd::e#6 )
  bitmap_line_ydxd::y#4 = phi( bitmap_line_ydxd/bitmap_line_ydxd::y#7, bitmap_line_ydxd::@2/bitmap_line_ydxd::y#6 )
  bitmap_line_ydxd::x#3 = phi( bitmap_line_ydxd/bitmap_line_ydxd::x#5, bitmap_line_ydxd::@2/bitmap_line_ydxd::x#6 )
  bitmap_plot::x#3 = bitmap_line_ydxd::x#3
  bitmap_plot::y#3 = bitmap_line_ydxd::y#4
  call bitmap_plot 
  to:bitmap_line_ydxd::@4
bitmap_line_ydxd::@4: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  bitmap_line_ydxd::x#7 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::x#3 )
  bitmap_line_ydxd::y1#4 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::y1#5 )
  bitmap_line_ydxd::yd#2 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::yd#4 )
  bitmap_line_ydxd::xd#3 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::xd#4 )
  bitmap_line_ydxd::e#3 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::e#5 )
  bitmap_line_ydxd::y#5 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::y#4 )
  bitmap_line_ydxd::y#2 = bitmap_line_ydxd::y#5
  bitmap_line_ydxd::y#3 = ++ bitmap_line_ydxd::y#2
  bitmap_line_ydxd::$2 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#3
  bitmap_line_ydxd::e#1 = bitmap_line_ydxd::$2
  bitmap_line_ydxd::$3 = bitmap_line_ydxd::yd#2 < bitmap_line_ydxd::e#1
  bitmap_line_ydxd::$4 = ! bitmap_line_ydxd::$3
  if(bitmap_line_ydxd::$4) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4
  bitmap_line_ydxd::yd#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::yd#3, bitmap_line_ydxd::@4/bitmap_line_ydxd::yd#2 )
  bitmap_line_ydxd::xd#5 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::xd#6, bitmap_line_ydxd::@4/bitmap_line_ydxd::xd#3 )
  bitmap_line_ydxd::e#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::e#2, bitmap_line_ydxd::@4/bitmap_line_ydxd::e#1 )
  bitmap_line_ydxd::x#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::x#2, bitmap_line_ydxd::@4/bitmap_line_ydxd::x#7 )
  bitmap_line_ydxd::y#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::y#8, bitmap_line_ydxd::@4/bitmap_line_ydxd::y#3 )
  bitmap_line_ydxd::y1#2 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::y1#3, bitmap_line_ydxd::@4/bitmap_line_ydxd::y1#4 )
  bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#2 + 1
  bitmap_line_ydxd::$7 = bitmap_line_ydxd::y#6 != bitmap_line_ydxd::$6
  if(bitmap_line_ydxd::$7) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@4
  bitmap_line_ydxd::xd#6 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::xd#3 )
  bitmap_line_ydxd::y#8 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::y#3 )
  bitmap_line_ydxd::y1#3 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::y1#4 )
  bitmap_line_ydxd::yd#3 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::yd#2 )
  bitmap_line_ydxd::e#4 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::e#1 )
  bitmap_line_ydxd::x#4 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::x#7 )
  bitmap_line_ydxd::x#2 = -- bitmap_line_ydxd::x#4
  bitmap_line_ydxd::$5 = bitmap_line_ydxd::e#4 - bitmap_line_ydxd::yd#3
  bitmap_line_ydxd::e#2 = bitmap_line_ydxd::$5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  dtv_control#132 = phi( __start::@1/dtv_control#131 )
  print_char_cursor#61 = phi( __start::@1/print_char_cursor#57 )
  print_line_cursor#54 = phi( __start::@1/print_line_cursor#51 )
  print_screen#35 = phi( __start::@1/print_screen#34 )
  asm { sei  }
  *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  *PROCPORT = PROCPORT_RAM_IO
  *DTV_FEATURE = DTV_FEATURE_ENABLE
  to:main::@1
main::@1: scope:[main]  from main main::@3
  dtv_control#101 = phi( main/dtv_control#132, main::@3/dtv_control#0 )
  print_char_cursor#42 = phi( main/print_char_cursor#61, main::@3/print_char_cursor#11 )
  print_line_cursor#36 = phi( main/print_line_cursor#54, main::@3/print_line_cursor#8 )
  print_screen#19 = phi( main/print_screen#35, main::@3/print_screen#2 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  dtv_control#100 = phi( main::@1/dtv_control#101 )
  print_char_cursor#41 = phi( main::@1/print_char_cursor#42 )
  print_line_cursor#35 = phi( main::@1/print_line_cursor#36 )
  print_screen#18 = phi( main::@1/print_screen#19 )
  call menu 
  to:main::@3
main::@3: scope:[main]  from main::@2
  dtv_control#56 = phi( main::@2/dtv_control#3 )
  print_char_cursor#29 = phi( main::@2/print_char_cursor#16 )
  print_line_cursor#24 = phi( main::@2/print_line_cursor#13 )
  print_screen#12 = phi( main::@2/print_screen#5 )
  print_screen#2 = print_screen#12
  print_line_cursor#8 = print_line_cursor#24
  print_char_cursor#11 = print_char_cursor#29
  dtv_control#0 = dtv_control#56
  to:main::@1
main::@return: scope:[main]  from main::@1
  dtv_control#57 = phi( main::@1/dtv_control#101 )
  print_char_cursor#30 = phi( main::@1/print_char_cursor#42 )
  print_line_cursor#25 = phi( main::@1/print_line_cursor#36 )
  print_screen#13 = phi( main::@1/print_screen#19 )
  print_screen#3 = print_screen#13
  print_line_cursor#9 = print_line_cursor#25
  print_char_cursor#12 = print_char_cursor#30
  dtv_control#1 = dtv_control#57
  return 
  to:@return

void menu()
menu: scope:[menu]  from main::@2
  dtv_control#256 = phi( main::@2/dtv_control#100 )
  print_char_cursor#102 = phi( main::@2/print_char_cursor#41 )
  print_line_cursor#98 = phi( main::@2/print_line_cursor#35 )
  print_screen#78 = phi( main::@2/print_screen#18 )
  *DTV_GRAPHICS_VIC_BANK = (byte)(dword)menu::CHARSET/$10000
  *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
  *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
  *DTV_CONTROL = 0
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)menu::CHARSET/$4000
  *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
  *VIC_CONTROL2 = VIC_CSEL
  *VIC_MEMORY = (byte)(word)menu::SCREEN&$3fff/$40|(word)menu::CHARSET&$3fff/$400
  menu::i#0 = 0
  to:menu::@1
menu::@1: scope:[menu]  from menu menu::@1
  dtv_control#247 = phi( menu/dtv_control#256, menu::@1/dtv_control#247 )
  print_char_cursor#90 = phi( menu/print_char_cursor#102, menu::@1/print_char_cursor#90 )
  print_line_cursor#86 = phi( menu/print_line_cursor#98, menu::@1/print_line_cursor#86 )
  print_screen#66 = phi( menu/print_screen#78, menu::@1/print_screen#66 )
  menu::i#2 = phi( menu/menu::i#0, menu::@1/menu::i#1 )
  DTV_PALETTE[menu::i#2] = DTV_PALETTE_DEFAULT[menu::i#2]
  menu::i#1 = menu::i#2 + rangenext(0,$f)
  menu::$3 = menu::i#1 != rangelast(0,$f)
  if(menu::$3) goto menu::@1
  to:menu::@2
menu::@2: scope:[menu]  from menu::@1
  dtv_control#237 = phi( menu::@1/dtv_control#247 )
  print_char_cursor#76 = phi( menu::@1/print_char_cursor#90 )
  print_line_cursor#71 = phi( menu::@1/print_line_cursor#86 )
  print_screen#51 = phi( menu::@1/print_screen#66 )
  menu::c#0 = COLS
  to:menu::@3
menu::@3: scope:[menu]  from menu::@2 menu::@4
  dtv_control#222 = phi( menu::@2/dtv_control#237, menu::@4/dtv_control#238 )
  print_char_cursor#62 = phi( menu::@2/print_char_cursor#76, menu::@4/print_char_cursor#77 )
  print_line_cursor#55 = phi( menu::@2/print_line_cursor#71, menu::@4/print_line_cursor#72 )
  print_screen#36 = phi( menu::@2/print_screen#51, menu::@4/print_screen#52 )
  menu::c#2 = phi( menu::@2/menu::c#0, menu::@4/menu::c#1 )
  menu::$4 = menu::c#2 != COLS+$3e8
  if(menu::$4) goto menu::@4
  to:menu::@5
menu::@4: scope:[menu]  from menu::@3
  dtv_control#238 = phi( menu::@3/dtv_control#222 )
  print_char_cursor#77 = phi( menu::@3/print_char_cursor#62 )
  print_line_cursor#72 = phi( menu::@3/print_line_cursor#55 )
  print_screen#52 = phi( menu::@3/print_screen#36 )
  menu::c#3 = phi( menu::@3/menu::c#2 )
  *menu::c#3 = LIGHT_GREEN
  menu::c#1 = ++ menu::c#3
  to:menu::@3
menu::@5: scope:[menu]  from menu::@3
  dtv_control#205 = phi( menu::@3/dtv_control#222 )
  print_char_cursor#43 = phi( menu::@3/print_char_cursor#62 )
  print_line_cursor#37 = phi( menu::@3/print_line_cursor#55 )
  print_screen#20 = phi( menu::@3/print_screen#36 )
  *BG_COLOR = 0
  *BORDER_COLOR = 0
  print_set_screen::screen#0 = menu::SCREEN
  call print_set_screen 
  to:menu::@31
menu::@31: scope:[menu]  from menu::@5
  dtv_control#190 = phi( menu::@5/dtv_control#205 )
  print_char_cursor#31 = phi( menu::@5/print_char_cursor#10 )
  print_line_cursor#26 = phi( menu::@5/print_line_cursor#7 )
  print_screen#14 = phi( menu::@5/print_screen#1 )
  print_screen#4 = print_screen#14
  print_line_cursor#10 = print_line_cursor#26
  print_char_cursor#13 = print_char_cursor#31
  call print_cls 
  to:menu::@32
menu::@32: scope:[menu]  from menu::@31
  dtv_control#161 = phi( menu::@31/dtv_control#190 )
  print_screen#53 = phi( menu::@31/print_screen#4 )
  print_char_cursor#32 = phi( menu::@31/print_char_cursor#8 )
  print_line_cursor#27 = phi( menu::@31/print_line_cursor#5 )
  print_line_cursor#11 = print_line_cursor#27
  print_char_cursor#14 = print_char_cursor#32
  print_str_lines::str#1 = MENU_TEXT
  call print_str_lines 
  to:menu::@33
menu::@33: scope:[menu]  from menu::@32
  dtv_control#133 = phi( menu::@32/dtv_control#161 )
  print_screen#37 = phi( menu::@32/print_screen#53 )
  print_line_cursor#28 = phi( menu::@32/print_line_cursor#1 )
  print_char_cursor#33 = phi( menu::@32/print_char_cursor#2 )
  print_char_cursor#15 = print_char_cursor#33
  print_line_cursor#12 = print_line_cursor#28
  to:menu::@6
menu::@6: scope:[menu]  from menu::@33 menu::@55
  dtv_control#103 = phi( menu::@33/dtv_control#133, menu::@55/dtv_control#134 )
  print_char_cursor#56 = phi( menu::@33/print_char_cursor#15, menu::@55/print_char_cursor#63 )
  print_line_cursor#50 = phi( menu::@33/print_line_cursor#12, menu::@55/print_line_cursor#56 )
  print_screen#33 = phi( menu::@33/print_screen#37, menu::@55/print_screen#38 )
  if(true) goto menu::@7
  to:menu::@return
menu::@7: scope:[menu]  from menu::@6
  print_char_cursor#91 = phi( menu::@6/print_char_cursor#56 )
  print_line_cursor#87 = phi( menu::@6/print_line_cursor#50 )
  print_screen#67 = phi( menu::@6/print_screen#33 )
  dtv_control#162 = phi( menu::@6/dtv_control#103 )
  keyboard_key_pressed::key#0 = KEY_1
  call keyboard_key_pressed 
  keyboard_key_pressed::return#2 = keyboard_key_pressed::return#1
  to:menu::@34
menu::@34: scope:[menu]  from menu::@7
  print_char_cursor#78 = phi( menu::@7/print_char_cursor#91 )
  print_line_cursor#73 = phi( menu::@7/print_line_cursor#87 )
  print_screen#54 = phi( menu::@7/print_screen#67 )
  dtv_control#135 = phi( menu::@7/dtv_control#162 )
  keyboard_key_pressed::return#23 = phi( menu::@7/keyboard_key_pressed::return#2 )
  menu::$5 = keyboard_key_pressed::return#23
  menu::$6 = menu::$5 != 0
  menu::$7 = ! menu::$6
  if(menu::$7) goto menu::@8
  to:menu::@19
menu::@8: scope:[menu]  from menu::@34
  print_char_cursor#92 = phi( menu::@34/print_char_cursor#78 )
  print_line_cursor#88 = phi( menu::@34/print_line_cursor#73 )
  print_screen#68 = phi( menu::@34/print_screen#54 )
  dtv_control#163 = phi( menu::@34/dtv_control#135 )
  keyboard_key_pressed::key#1 = KEY_2
  call keyboard_key_pressed 
  keyboard_key_pressed::return#3 = keyboard_key_pressed::return#1
  to:menu::@35
menu::@35: scope:[menu]  from menu::@8
  print_char_cursor#79 = phi( menu::@8/print_char_cursor#92 )
  print_line_cursor#74 = phi( menu::@8/print_line_cursor#88 )
  print_screen#55 = phi( menu::@8/print_screen#68 )
  dtv_control#136 = phi( menu::@8/dtv_control#163 )
  keyboard_key_pressed::return#24 = phi( menu::@8/keyboard_key_pressed::return#3 )
  menu::$9 = keyboard_key_pressed::return#24
  menu::$10 = menu::$9 != 0
  menu::$11 = ! menu::$10
  if(menu::$11) goto menu::@9
  to:menu::@20
menu::@19: scope:[menu]  from menu::@34
  print_char_cursor#64 = phi( menu::@34/print_char_cursor#78 )
  print_line_cursor#57 = phi( menu::@34/print_line_cursor#73 )
  print_screen#39 = phi( menu::@34/print_screen#54 )
  dtv_control#102 = phi( menu::@34/dtv_control#135 )
  call mode_stdchar 
  to:menu::@36
menu::@36: scope:[menu]  from menu::@19
  print_char_cursor#44 = phi( menu::@19/print_char_cursor#64 )
  print_line_cursor#38 = phi( menu::@19/print_line_cursor#57 )
  print_screen#21 = phi( menu::@19/print_screen#39 )
  dtv_control#58 = phi( menu::@19/dtv_control#19 )
  dtv_control#2 = dtv_control#58
  to:menu::@return
menu::@return: scope:[menu]  from menu::@36 menu::@38 menu::@40 menu::@42 menu::@44 menu::@46 menu::@48 menu::@50 menu::@52 menu::@54 menu::@56 menu::@57 menu::@6
  dtv_control#59 = phi( menu::@36/dtv_control#2, menu::@38/dtv_control#4, menu::@40/dtv_control#5, menu::@42/dtv_control#6, menu::@44/dtv_control#7, menu::@46/dtv_control#8, menu::@48/dtv_control#9, menu::@50/dtv_control#10, menu::@52/dtv_control#11, menu::@54/dtv_control#12, menu::@56/dtv_control#13, menu::@57/dtv_control#14, menu::@6/dtv_control#103 )
  print_char_cursor#34 = phi( menu::@36/print_char_cursor#44, menu::@38/print_char_cursor#45, menu::@40/print_char_cursor#46, menu::@42/print_char_cursor#47, menu::@44/print_char_cursor#48, menu::@46/print_char_cursor#49, menu::@48/print_char_cursor#50, menu::@50/print_char_cursor#51, menu::@52/print_char_cursor#52, menu::@54/print_char_cursor#53, menu::@56/print_char_cursor#54, menu::@57/print_char_cursor#55, menu::@6/print_char_cursor#56 )
  print_line_cursor#29 = phi( menu::@36/print_line_cursor#38, menu::@38/print_line_cursor#39, menu::@40/print_line_cursor#40, menu::@42/print_line_cursor#41, menu::@44/print_line_cursor#42, menu::@46/print_line_cursor#43, menu::@48/print_line_cursor#44, menu::@50/print_line_cursor#45, menu::@52/print_line_cursor#46, menu::@54/print_line_cursor#47, menu::@56/print_line_cursor#48, menu::@57/print_line_cursor#49, menu::@6/print_line_cursor#50 )
  print_screen#15 = phi( menu::@36/print_screen#21, menu::@38/print_screen#22, menu::@40/print_screen#23, menu::@42/print_screen#24, menu::@44/print_screen#25, menu::@46/print_screen#26, menu::@48/print_screen#27, menu::@50/print_screen#28, menu::@52/print_screen#29, menu::@54/print_screen#30, menu::@56/print_screen#31, menu::@57/print_screen#32, menu::@6/print_screen#33 )
  print_screen#5 = print_screen#15
  print_line_cursor#13 = print_line_cursor#29
  print_char_cursor#16 = print_char_cursor#34
  dtv_control#3 = dtv_control#59
  return 
  to:@return
menu::@9: scope:[menu]  from menu::@35
  print_char_cursor#93 = phi( menu::@35/print_char_cursor#79 )
  print_line_cursor#89 = phi( menu::@35/print_line_cursor#74 )
  print_screen#69 = phi( menu::@35/print_screen#55 )
  dtv_control#164 = phi( menu::@35/dtv_control#136 )
  keyboard_key_pressed::key#2 = KEY_3
  call keyboard_key_pressed 
  keyboard_key_pressed::return#4 = keyboard_key_pressed::return#1
  to:menu::@37
menu::@37: scope:[menu]  from menu::@9
  print_char_cursor#80 = phi( menu::@9/print_char_cursor#93 )
  print_line_cursor#75 = phi( menu::@9/print_line_cursor#89 )
  print_screen#56 = phi( menu::@9/print_screen#69 )
  dtv_control#137 = phi( menu::@9/dtv_control#164 )
  keyboard_key_pressed::return#25 = phi( menu::@9/keyboard_key_pressed::return#4 )
  menu::$13 = keyboard_key_pressed::return#25
  menu::$14 = menu::$13 != 0
  menu::$15 = ! menu::$14
  if(menu::$15) goto menu::@10
  to:menu::@21
menu::@20: scope:[menu]  from menu::@35
  print_char_cursor#65 = phi( menu::@35/print_char_cursor#79 )
  print_line_cursor#58 = phi( menu::@35/print_line_cursor#74 )
  print_screen#40 = phi( menu::@35/print_screen#55 )
  dtv_control#104 = phi( menu::@35/dtv_control#136 )
  call mode_ecmchar 
  to:menu::@38
menu::@38: scope:[menu]  from menu::@20
  print_char_cursor#45 = phi( menu::@20/print_char_cursor#65 )
  print_line_cursor#39 = phi( menu::@20/print_line_cursor#58 )
  print_screen#22 = phi( menu::@20/print_screen#40 )
  dtv_control#60 = phi( menu::@20/dtv_control#22 )
  dtv_control#4 = dtv_control#60
  to:menu::@return
menu::@10: scope:[menu]  from menu::@37
  print_char_cursor#94 = phi( menu::@37/print_char_cursor#80 )
  print_line_cursor#90 = phi( menu::@37/print_line_cursor#75 )
  print_screen#70 = phi( menu::@37/print_screen#56 )
  dtv_control#165 = phi( menu::@37/dtv_control#137 )
  keyboard_key_pressed::key#3 = KEY_4
  call keyboard_key_pressed 
  keyboard_key_pressed::return#5 = keyboard_key_pressed::return#1
  to:menu::@39
menu::@39: scope:[menu]  from menu::@10
  print_char_cursor#81 = phi( menu::@10/print_char_cursor#94 )
  print_line_cursor#76 = phi( menu::@10/print_line_cursor#90 )
  print_screen#57 = phi( menu::@10/print_screen#70 )
  dtv_control#138 = phi( menu::@10/dtv_control#165 )
  keyboard_key_pressed::return#26 = phi( menu::@10/keyboard_key_pressed::return#5 )
  menu::$17 = keyboard_key_pressed::return#26
  menu::$18 = menu::$17 != 0
  menu::$19 = ! menu::$18
  if(menu::$19) goto menu::@11
  to:menu::@22
menu::@21: scope:[menu]  from menu::@37
  print_char_cursor#66 = phi( menu::@37/print_char_cursor#80 )
  print_line_cursor#59 = phi( menu::@37/print_line_cursor#75 )
  print_screen#41 = phi( menu::@37/print_screen#56 )
  dtv_control#105 = phi( menu::@37/dtv_control#137 )
  call mode_mcchar 
  to:menu::@40
menu::@40: scope:[menu]  from menu::@21
  print_char_cursor#46 = phi( menu::@21/print_char_cursor#66 )
  print_line_cursor#40 = phi( menu::@21/print_line_cursor#59 )
  print_screen#23 = phi( menu::@21/print_screen#41 )
  dtv_control#61 = phi( menu::@21/dtv_control#25 )
  dtv_control#5 = dtv_control#61
  to:menu::@return
menu::@11: scope:[menu]  from menu::@39
  print_char_cursor#95 = phi( menu::@39/print_char_cursor#81 )
  print_line_cursor#91 = phi( menu::@39/print_line_cursor#76 )
  print_screen#71 = phi( menu::@39/print_screen#57 )
  dtv_control#166 = phi( menu::@39/dtv_control#138 )
  keyboard_key_pressed::key#4 = KEY_6
  call keyboard_key_pressed 
  keyboard_key_pressed::return#6 = keyboard_key_pressed::return#1
  to:menu::@41
menu::@41: scope:[menu]  from menu::@11
  print_char_cursor#82 = phi( menu::@11/print_char_cursor#95 )
  print_line_cursor#77 = phi( menu::@11/print_line_cursor#91 )
  print_screen#58 = phi( menu::@11/print_screen#71 )
  dtv_control#139 = phi( menu::@11/dtv_control#166 )
  keyboard_key_pressed::return#27 = phi( menu::@11/keyboard_key_pressed::return#6 )
  menu::$21 = keyboard_key_pressed::return#27
  menu::$22 = menu::$21 != 0
  menu::$23 = ! menu::$22
  if(menu::$23) goto menu::@12
  to:menu::@23
menu::@22: scope:[menu]  from menu::@39
  print_char_cursor#67 = phi( menu::@39/print_char_cursor#81 )
  print_line_cursor#60 = phi( menu::@39/print_line_cursor#76 )
  print_screen#42 = phi( menu::@39/print_screen#57 )
  dtv_control#106 = phi( menu::@39/dtv_control#138 )
  call mode_stdbitmap 
  to:menu::@42
menu::@42: scope:[menu]  from menu::@22
  print_char_cursor#47 = phi( menu::@22/print_char_cursor#67 )
  print_line_cursor#41 = phi( menu::@22/print_line_cursor#60 )
  print_screen#24 = phi( menu::@22/print_screen#42 )
  dtv_control#62 = phi( menu::@22/dtv_control#28 )
  dtv_control#6 = dtv_control#62
  to:menu::@return
menu::@12: scope:[menu]  from menu::@41
  print_char_cursor#96 = phi( menu::@41/print_char_cursor#82 )
  print_line_cursor#92 = phi( menu::@41/print_line_cursor#77 )
  print_screen#72 = phi( menu::@41/print_screen#58 )
  dtv_control#167 = phi( menu::@41/dtv_control#139 )
  keyboard_key_pressed::key#5 = KEY_7
  call keyboard_key_pressed 
  keyboard_key_pressed::return#7 = keyboard_key_pressed::return#1
  to:menu::@43
menu::@43: scope:[menu]  from menu::@12
  print_char_cursor#83 = phi( menu::@12/print_char_cursor#96 )
  print_line_cursor#78 = phi( menu::@12/print_line_cursor#92 )
  print_screen#59 = phi( menu::@12/print_screen#72 )
  dtv_control#140 = phi( menu::@12/dtv_control#167 )
  keyboard_key_pressed::return#28 = phi( menu::@12/keyboard_key_pressed::return#7 )
  menu::$25 = keyboard_key_pressed::return#28
  menu::$26 = menu::$25 != 0
  menu::$27 = ! menu::$26
  if(menu::$27) goto menu::@13
  to:menu::@24
menu::@23: scope:[menu]  from menu::@41
  print_char_cursor#68 = phi( menu::@41/print_char_cursor#82 )
  print_line_cursor#61 = phi( menu::@41/print_line_cursor#77 )
  print_screen#43 = phi( menu::@41/print_screen#58 )
  dtv_control#107 = phi( menu::@41/dtv_control#139 )
  call mode_hicolstdchar 
  to:menu::@44
menu::@44: scope:[menu]  from menu::@23
  print_char_cursor#48 = phi( menu::@23/print_char_cursor#68 )
  print_line_cursor#42 = phi( menu::@23/print_line_cursor#61 )
  print_screen#25 = phi( menu::@23/print_screen#43 )
  dtv_control#63 = phi( menu::@23/dtv_control#31 )
  dtv_control#7 = dtv_control#63
  to:menu::@return
menu::@13: scope:[menu]  from menu::@43
  print_char_cursor#97 = phi( menu::@43/print_char_cursor#83 )
  print_line_cursor#93 = phi( menu::@43/print_line_cursor#78 )
  print_screen#73 = phi( menu::@43/print_screen#59 )
  dtv_control#168 = phi( menu::@43/dtv_control#140 )
  keyboard_key_pressed::key#6 = KEY_8
  call keyboard_key_pressed 
  keyboard_key_pressed::return#8 = keyboard_key_pressed::return#1
  to:menu::@45
menu::@45: scope:[menu]  from menu::@13
  print_char_cursor#84 = phi( menu::@13/print_char_cursor#97 )
  print_line_cursor#79 = phi( menu::@13/print_line_cursor#93 )
  print_screen#60 = phi( menu::@13/print_screen#73 )
  dtv_control#141 = phi( menu::@13/dtv_control#168 )
  keyboard_key_pressed::return#29 = phi( menu::@13/keyboard_key_pressed::return#8 )
  menu::$29 = keyboard_key_pressed::return#29
  menu::$30 = menu::$29 != 0
  menu::$31 = ! menu::$30
  if(menu::$31) goto menu::@14
  to:menu::@25
menu::@24: scope:[menu]  from menu::@43
  print_char_cursor#69 = phi( menu::@43/print_char_cursor#83 )
  print_line_cursor#62 = phi( menu::@43/print_line_cursor#78 )
  print_screen#44 = phi( menu::@43/print_screen#59 )
  dtv_control#108 = phi( menu::@43/dtv_control#140 )
  call mode_hicolecmchar 
  to:menu::@46
menu::@46: scope:[menu]  from menu::@24
  print_char_cursor#49 = phi( menu::@24/print_char_cursor#69 )
  print_line_cursor#43 = phi( menu::@24/print_line_cursor#62 )
  print_screen#26 = phi( menu::@24/print_screen#44 )
  dtv_control#64 = phi( menu::@24/dtv_control#34 )
  dtv_control#8 = dtv_control#64
  to:menu::@return
menu::@14: scope:[menu]  from menu::@45
  print_char_cursor#98 = phi( menu::@45/print_char_cursor#84 )
  print_line_cursor#94 = phi( menu::@45/print_line_cursor#79 )
  print_screen#74 = phi( menu::@45/print_screen#60 )
  dtv_control#169 = phi( menu::@45/dtv_control#141 )
  keyboard_key_pressed::key#7 = KEY_A
  call keyboard_key_pressed 
  keyboard_key_pressed::return#9 = keyboard_key_pressed::return#1
  to:menu::@47
menu::@47: scope:[menu]  from menu::@14
  print_char_cursor#85 = phi( menu::@14/print_char_cursor#98 )
  print_line_cursor#80 = phi( menu::@14/print_line_cursor#94 )
  print_screen#61 = phi( menu::@14/print_screen#74 )
  dtv_control#142 = phi( menu::@14/dtv_control#169 )
  keyboard_key_pressed::return#30 = phi( menu::@14/keyboard_key_pressed::return#9 )
  menu::$33 = keyboard_key_pressed::return#30
  menu::$34 = menu::$33 != 0
  menu::$35 = ! menu::$34
  if(menu::$35) goto menu::@15
  to:menu::@26
menu::@25: scope:[menu]  from menu::@45
  print_char_cursor#70 = phi( menu::@45/print_char_cursor#84 )
  print_line_cursor#63 = phi( menu::@45/print_line_cursor#79 )
  print_screen#45 = phi( menu::@45/print_screen#60 )
  dtv_control#109 = phi( menu::@45/dtv_control#141 )
  call mode_hicolmcchar 
  to:menu::@48
menu::@48: scope:[menu]  from menu::@25
  print_char_cursor#50 = phi( menu::@25/print_char_cursor#70 )
  print_line_cursor#44 = phi( menu::@25/print_line_cursor#63 )
  print_screen#27 = phi( menu::@25/print_screen#45 )
  dtv_control#65 = phi( menu::@25/dtv_control#37 )
  dtv_control#9 = dtv_control#65
  to:menu::@return
menu::@15: scope:[menu]  from menu::@47
  print_char_cursor#99 = phi( menu::@47/print_char_cursor#85 )
  print_line_cursor#95 = phi( menu::@47/print_line_cursor#80 )
  print_screen#75 = phi( menu::@47/print_screen#61 )
  dtv_control#170 = phi( menu::@47/dtv_control#142 )
  keyboard_key_pressed::key#8 = KEY_B
  call keyboard_key_pressed 
  keyboard_key_pressed::return#10 = keyboard_key_pressed::return#1
  to:menu::@49
menu::@49: scope:[menu]  from menu::@15
  print_char_cursor#86 = phi( menu::@15/print_char_cursor#99 )
  print_line_cursor#81 = phi( menu::@15/print_line_cursor#95 )
  print_screen#62 = phi( menu::@15/print_screen#75 )
  dtv_control#143 = phi( menu::@15/dtv_control#170 )
  keyboard_key_pressed::return#31 = phi( menu::@15/keyboard_key_pressed::return#10 )
  menu::$37 = keyboard_key_pressed::return#31
  menu::$38 = menu::$37 != 0
  menu::$39 = ! menu::$38
  if(menu::$39) goto menu::@16
  to:menu::@27
menu::@26: scope:[menu]  from menu::@47
  print_char_cursor#71 = phi( menu::@47/print_char_cursor#85 )
  print_line_cursor#64 = phi( menu::@47/print_line_cursor#80 )
  print_screen#46 = phi( menu::@47/print_screen#61 )
  dtv_control#110 = phi( menu::@47/dtv_control#142 )
  call mode_sixsfred2 
  to:menu::@50
menu::@50: scope:[menu]  from menu::@26
  print_char_cursor#51 = phi( menu::@26/print_char_cursor#71 )
  print_line_cursor#45 = phi( menu::@26/print_line_cursor#64 )
  print_screen#28 = phi( menu::@26/print_screen#46 )
  dtv_control#66 = phi( menu::@26/dtv_control#46 )
  dtv_control#10 = dtv_control#66
  to:menu::@return
menu::@16: scope:[menu]  from menu::@49
  print_char_cursor#100 = phi( menu::@49/print_char_cursor#86 )
  print_line_cursor#96 = phi( menu::@49/print_line_cursor#81 )
  print_screen#76 = phi( menu::@49/print_screen#62 )
  dtv_control#171 = phi( menu::@49/dtv_control#143 )
  keyboard_key_pressed::key#9 = KEY_C
  call keyboard_key_pressed 
  keyboard_key_pressed::return#11 = keyboard_key_pressed::return#1
  to:menu::@51
menu::@51: scope:[menu]  from menu::@16
  print_char_cursor#87 = phi( menu::@16/print_char_cursor#100 )
  print_line_cursor#82 = phi( menu::@16/print_line_cursor#96 )
  print_screen#63 = phi( menu::@16/print_screen#76 )
  dtv_control#144 = phi( menu::@16/dtv_control#171 )
  keyboard_key_pressed::return#32 = phi( menu::@16/keyboard_key_pressed::return#11 )
  menu::$41 = keyboard_key_pressed::return#32
  menu::$42 = menu::$41 != 0
  menu::$43 = ! menu::$42
  if(menu::$43) goto menu::@17
  to:menu::@28
menu::@27: scope:[menu]  from menu::@49
  print_char_cursor#72 = phi( menu::@49/print_char_cursor#86 )
  print_line_cursor#65 = phi( menu::@49/print_line_cursor#81 )
  print_screen#47 = phi( menu::@49/print_screen#62 )
  dtv_control#111 = phi( menu::@49/dtv_control#143 )
  call mode_twoplanebitmap 
  to:menu::@52
menu::@52: scope:[menu]  from menu::@27
  print_char_cursor#52 = phi( menu::@27/print_char_cursor#72 )
  print_line_cursor#46 = phi( menu::@27/print_line_cursor#65 )
  print_screen#29 = phi( menu::@27/print_screen#47 )
  dtv_control#67 = phi( menu::@27/dtv_control#40 )
  dtv_control#11 = dtv_control#67
  to:menu::@return
menu::@17: scope:[menu]  from menu::@51
  print_char_cursor#101 = phi( menu::@51/print_char_cursor#87 )
  print_line_cursor#97 = phi( menu::@51/print_line_cursor#82 )
  print_screen#77 = phi( menu::@51/print_screen#63 )
  dtv_control#172 = phi( menu::@51/dtv_control#144 )
  keyboard_key_pressed::key#10 = KEY_D
  call keyboard_key_pressed 
  keyboard_key_pressed::return#12 = keyboard_key_pressed::return#1
  to:menu::@53
menu::@53: scope:[menu]  from menu::@17
  print_char_cursor#89 = phi( menu::@17/print_char_cursor#101 )
  print_line_cursor#84 = phi( menu::@17/print_line_cursor#97 )
  print_screen#65 = phi( menu::@17/print_screen#77 )
  dtv_control#145 = phi( menu::@17/dtv_control#172 )
  keyboard_key_pressed::return#33 = phi( menu::@17/keyboard_key_pressed::return#12 )
  menu::$45 = keyboard_key_pressed::return#33
  menu::$46 = menu::$45 != 0
  menu::$47 = ! menu::$46
  if(menu::$47) goto menu::@18
  to:menu::@29
menu::@28: scope:[menu]  from menu::@51
  print_char_cursor#73 = phi( menu::@51/print_char_cursor#87 )
  print_line_cursor#66 = phi( menu::@51/print_line_cursor#82 )
  print_screen#48 = phi( menu::@51/print_screen#63 )
  dtv_control#112 = phi( menu::@51/dtv_control#144 )
  call mode_sixsfred 
  to:menu::@54
menu::@54: scope:[menu]  from menu::@28
  print_char_cursor#53 = phi( menu::@28/print_char_cursor#73 )
  print_line_cursor#47 = phi( menu::@28/print_line_cursor#66 )
  print_screen#30 = phi( menu::@28/print_screen#48 )
  dtv_control#68 = phi( menu::@28/dtv_control#43 )
  dtv_control#12 = dtv_control#68
  to:menu::@return
menu::@18: scope:[menu]  from menu::@53
  dtv_control#173 = phi( menu::@53/dtv_control#145 )
  print_char_cursor#88 = phi( menu::@53/print_char_cursor#89 )
  print_line_cursor#83 = phi( menu::@53/print_line_cursor#84 )
  print_screen#64 = phi( menu::@53/print_screen#65 )
  keyboard_key_pressed::key#11 = KEY_E
  call keyboard_key_pressed 
  keyboard_key_pressed::return#13 = keyboard_key_pressed::return#1
  to:menu::@55
menu::@55: scope:[menu]  from menu::@18
  dtv_control#134 = phi( menu::@18/dtv_control#173 )
  print_char_cursor#63 = phi( menu::@18/print_char_cursor#88 )
  print_line_cursor#56 = phi( menu::@18/print_line_cursor#83 )
  print_screen#38 = phi( menu::@18/print_screen#64 )
  keyboard_key_pressed::return#34 = phi( menu::@18/keyboard_key_pressed::return#13 )
  menu::$49 = keyboard_key_pressed::return#34
  menu::$50 = menu::$49 != 0
  menu::$51 = ! menu::$50
  if(menu::$51) goto menu::@6
  to:menu::@30
menu::@29: scope:[menu]  from menu::@53
  print_char_cursor#74 = phi( menu::@53/print_char_cursor#89 )
  print_line_cursor#67 = phi( menu::@53/print_line_cursor#84 )
  print_screen#49 = phi( menu::@53/print_screen#65 )
  dtv_control#113 = phi( menu::@53/dtv_control#145 )
  call mode_8bpppixelcell 
  to:menu::@56
menu::@56: scope:[menu]  from menu::@29
  print_char_cursor#54 = phi( menu::@29/print_char_cursor#74 )
  print_line_cursor#48 = phi( menu::@29/print_line_cursor#67 )
  print_screen#31 = phi( menu::@29/print_screen#49 )
  dtv_control#69 = phi( menu::@29/dtv_control#49 )
  dtv_control#13 = dtv_control#69
  to:menu::@return
menu::@30: scope:[menu]  from menu::@55
  print_char_cursor#75 = phi( menu::@55/print_char_cursor#63 )
  print_line_cursor#68 = phi( menu::@55/print_line_cursor#56 )
  print_screen#50 = phi( menu::@55/print_screen#38 )
  dtv_control#114 = phi( menu::@55/dtv_control#134 )
  call mode_8bppchunkybmm 
  to:menu::@57
menu::@57: scope:[menu]  from menu::@30
  print_char_cursor#55 = phi( menu::@30/print_char_cursor#75 )
  print_line_cursor#49 = phi( menu::@30/print_line_cursor#68 )
  print_screen#32 = phi( menu::@30/print_screen#50 )
  dtv_control#70 = phi( menu::@30/dtv_control#52 )
  dtv_control#14 = dtv_control#70
  to:menu::@return

void mode_ctrl()
mode_ctrl: scope:[mode_ctrl]  from mode_8bppchunkybmm::@11 mode_8bpppixelcell::@14 mode_ecmchar::@6 mode_hicolecmchar::@6 mode_hicolmcchar::@6 mode_hicolstdchar::@6 mode_mcchar::@6 mode_sixsfred2::@14 mode_sixsfred::@14 mode_stdbitmap::@9 mode_stdchar::@6 mode_twoplanebitmap::@17
  dtv_control#146 = phi( mode_8bppchunkybmm::@11/dtv_control#130, mode_8bpppixelcell::@14/dtv_control#129, mode_ecmchar::@6/dtv_control#120, mode_hicolecmchar::@6/dtv_control#124, mode_hicolmcchar::@6/dtv_control#125, mode_hicolstdchar::@6/dtv_control#123, mode_mcchar::@6/dtv_control#121, mode_sixsfred2::@14/dtv_control#128, mode_sixsfred::@14/dtv_control#127, mode_stdbitmap::@9/dtv_control#122, mode_stdchar::@6/dtv_control#119, mode_twoplanebitmap::@17/dtv_control#126 )
  to:mode_ctrl::@1
mode_ctrl::@1: scope:[mode_ctrl]  from mode_ctrl mode_ctrl::@11 mode_ctrl::@19
  dtv_control#116 = phi( mode_ctrl/dtv_control#146, mode_ctrl::@11/dtv_control#73, mode_ctrl::@19/dtv_control#16 )
  if(true) goto mode_ctrl::@2
  to:mode_ctrl::@return
mode_ctrl::@2: scope:[mode_ctrl]  from mode_ctrl::@1 mode_ctrl::@2
  dtv_control#174 = phi( mode_ctrl::@1/dtv_control#116, mode_ctrl::@2/dtv_control#174 )
  mode_ctrl::$0 = *RASTER != $ff
  if(mode_ctrl::$0) goto mode_ctrl::@2
  to:mode_ctrl::@3
mode_ctrl::@3: scope:[mode_ctrl]  from mode_ctrl::@2
  dtv_control#147 = phi( mode_ctrl::@2/dtv_control#174 )
  keyboard_key_pressed::key#12 = KEY_SPACE
  call keyboard_key_pressed 
  keyboard_key_pressed::return#14 = keyboard_key_pressed::return#1
  to:mode_ctrl::@20
mode_ctrl::@20: scope:[mode_ctrl]  from mode_ctrl::@3
  dtv_control#115 = phi( mode_ctrl::@3/dtv_control#147 )
  keyboard_key_pressed::return#35 = phi( mode_ctrl::@3/keyboard_key_pressed::return#14 )
  mode_ctrl::$1 = keyboard_key_pressed::return#35
  mode_ctrl::$2 = mode_ctrl::$1 != 0
  mode_ctrl::$3 = ! mode_ctrl::$2
  if(mode_ctrl::$3) goto mode_ctrl::@4
  to:mode_ctrl::@return
mode_ctrl::@4: scope:[mode_ctrl]  from mode_ctrl::@20
  dtv_control#71 = phi( mode_ctrl::@20/dtv_control#115 )
  mode_ctrl::ctrl#0 = dtv_control#71
  keyboard_key_pressed::key#13 = KEY_L
  call keyboard_key_pressed 
  keyboard_key_pressed::return#15 = keyboard_key_pressed::return#1
  to:mode_ctrl::@21
mode_ctrl::@21: scope:[mode_ctrl]  from mode_ctrl::@4
  dtv_control#283 = phi( mode_ctrl::@4/dtv_control#71 )
  mode_ctrl::ctrl#16 = phi( mode_ctrl::@4/mode_ctrl::ctrl#0 )
  keyboard_key_pressed::return#36 = phi( mode_ctrl::@4/keyboard_key_pressed::return#15 )
  mode_ctrl::$4 = keyboard_key_pressed::return#36
  mode_ctrl::$5 = mode_ctrl::$4 != 0
  mode_ctrl::$6 = ! mode_ctrl::$5
  if(mode_ctrl::$6) goto mode_ctrl::@5
  to:mode_ctrl::@12
mode_ctrl::@return: scope:[mode_ctrl]  from mode_ctrl::@1 mode_ctrl::@20
  dtv_control#72 = phi( mode_ctrl::@1/dtv_control#116, mode_ctrl::@20/dtv_control#115 )
  dtv_control#15 = dtv_control#72
  return 
  to:@return
mode_ctrl::@5: scope:[mode_ctrl]  from mode_ctrl::@12 mode_ctrl::@21
  dtv_control#277 = phi( mode_ctrl::@12/dtv_control#282, mode_ctrl::@21/dtv_control#283 )
  mode_ctrl::ctrl#23 = phi( mode_ctrl::@12/mode_ctrl::ctrl#1, mode_ctrl::@21/mode_ctrl::ctrl#16 )
  keyboard_key_pressed::key#14 = KEY_H
  call keyboard_key_pressed 
  keyboard_key_pressed::return#16 = keyboard_key_pressed::return#1
  to:mode_ctrl::@22
mode_ctrl::@22: scope:[mode_ctrl]  from mode_ctrl::@5
  dtv_control#272 = phi( mode_ctrl::@5/dtv_control#277 )
  mode_ctrl::ctrl#17 = phi( mode_ctrl::@5/mode_ctrl::ctrl#23 )
  keyboard_key_pressed::return#37 = phi( mode_ctrl::@5/keyboard_key_pressed::return#16 )
  mode_ctrl::$8 = keyboard_key_pressed::return#37
  mode_ctrl::$9 = mode_ctrl::$8 != 0
  mode_ctrl::$10 = ! mode_ctrl::$9
  if(mode_ctrl::$10) goto mode_ctrl::@6
  to:mode_ctrl::@13
mode_ctrl::@12: scope:[mode_ctrl]  from mode_ctrl::@21
  dtv_control#282 = phi( mode_ctrl::@21/dtv_control#283 )
  mode_ctrl::ctrl#8 = phi( mode_ctrl::@21/mode_ctrl::ctrl#16 )
  mode_ctrl::$7 = mode_ctrl::ctrl#8 | DTV_LINEAR
  mode_ctrl::ctrl#1 = mode_ctrl::$7
  to:mode_ctrl::@5
mode_ctrl::@6: scope:[mode_ctrl]  from mode_ctrl::@13 mode_ctrl::@22
  dtv_control#265 = phi( mode_ctrl::@13/dtv_control#271, mode_ctrl::@22/dtv_control#272 )
  mode_ctrl::ctrl#24 = phi( mode_ctrl::@13/mode_ctrl::ctrl#2, mode_ctrl::@22/mode_ctrl::ctrl#17 )
  keyboard_key_pressed::key#15 = KEY_O
  call keyboard_key_pressed 
  keyboard_key_pressed::return#17 = keyboard_key_pressed::return#1
  to:mode_ctrl::@23
mode_ctrl::@23: scope:[mode_ctrl]  from mode_ctrl::@6
  dtv_control#258 = phi( mode_ctrl::@6/dtv_control#265 )
  mode_ctrl::ctrl#18 = phi( mode_ctrl::@6/mode_ctrl::ctrl#24 )
  keyboard_key_pressed::return#38 = phi( mode_ctrl::@6/keyboard_key_pressed::return#17 )
  mode_ctrl::$12 = keyboard_key_pressed::return#38
  mode_ctrl::$13 = mode_ctrl::$12 != 0
  mode_ctrl::$14 = ! mode_ctrl::$13
  if(mode_ctrl::$14) goto mode_ctrl::@7
  to:mode_ctrl::@14
mode_ctrl::@13: scope:[mode_ctrl]  from mode_ctrl::@22
  dtv_control#271 = phi( mode_ctrl::@22/dtv_control#272 )
  mode_ctrl::ctrl#9 = phi( mode_ctrl::@22/mode_ctrl::ctrl#17 )
  mode_ctrl::$11 = mode_ctrl::ctrl#9 | DTV_HIGHCOLOR
  mode_ctrl::ctrl#2 = mode_ctrl::$11
  to:mode_ctrl::@6
mode_ctrl::@7: scope:[mode_ctrl]  from mode_ctrl::@14 mode_ctrl::@23
  dtv_control#248 = phi( mode_ctrl::@14/dtv_control#257, mode_ctrl::@23/dtv_control#258 )
  mode_ctrl::ctrl#25 = phi( mode_ctrl::@14/mode_ctrl::ctrl#3, mode_ctrl::@23/mode_ctrl::ctrl#18 )
  keyboard_key_pressed::key#16 = KEY_B
  call keyboard_key_pressed 
  keyboard_key_pressed::return#18 = keyboard_key_pressed::return#1
  to:mode_ctrl::@24
mode_ctrl::@24: scope:[mode_ctrl]  from mode_ctrl::@7
  dtv_control#240 = phi( mode_ctrl::@7/dtv_control#248 )
  mode_ctrl::ctrl#19 = phi( mode_ctrl::@7/mode_ctrl::ctrl#25 )
  keyboard_key_pressed::return#39 = phi( mode_ctrl::@7/keyboard_key_pressed::return#18 )
  mode_ctrl::$16 = keyboard_key_pressed::return#39
  mode_ctrl::$17 = mode_ctrl::$16 != 0
  mode_ctrl::$18 = ! mode_ctrl::$17
  if(mode_ctrl::$18) goto mode_ctrl::@8
  to:mode_ctrl::@15
mode_ctrl::@14: scope:[mode_ctrl]  from mode_ctrl::@23
  dtv_control#257 = phi( mode_ctrl::@23/dtv_control#258 )
  mode_ctrl::ctrl#10 = phi( mode_ctrl::@23/mode_ctrl::ctrl#18 )
  mode_ctrl::$15 = mode_ctrl::ctrl#10 | DTV_OVERSCAN
  mode_ctrl::ctrl#3 = mode_ctrl::$15
  to:mode_ctrl::@7
mode_ctrl::@8: scope:[mode_ctrl]  from mode_ctrl::@15 mode_ctrl::@24
  dtv_control#223 = phi( mode_ctrl::@15/dtv_control#239, mode_ctrl::@24/dtv_control#240 )
  mode_ctrl::ctrl#26 = phi( mode_ctrl::@15/mode_ctrl::ctrl#4, mode_ctrl::@24/mode_ctrl::ctrl#19 )
  keyboard_key_pressed::key#17 = KEY_U
  call keyboard_key_pressed 
  keyboard_key_pressed::return#19 = keyboard_key_pressed::return#1
  to:mode_ctrl::@25
mode_ctrl::@25: scope:[mode_ctrl]  from mode_ctrl::@8
  dtv_control#207 = phi( mode_ctrl::@8/dtv_control#223 )
  mode_ctrl::ctrl#20 = phi( mode_ctrl::@8/mode_ctrl::ctrl#26 )
  keyboard_key_pressed::return#40 = phi( mode_ctrl::@8/keyboard_key_pressed::return#19 )
  mode_ctrl::$20 = keyboard_key_pressed::return#40
  mode_ctrl::$21 = mode_ctrl::$20 != 0
  mode_ctrl::$22 = ! mode_ctrl::$21
  if(mode_ctrl::$22) goto mode_ctrl::@9
  to:mode_ctrl::@16
mode_ctrl::@15: scope:[mode_ctrl]  from mode_ctrl::@24
  dtv_control#239 = phi( mode_ctrl::@24/dtv_control#240 )
  mode_ctrl::ctrl#11 = phi( mode_ctrl::@24/mode_ctrl::ctrl#19 )
  mode_ctrl::$19 = mode_ctrl::ctrl#11 | DTV_BORDER_OFF
  mode_ctrl::ctrl#4 = mode_ctrl::$19
  to:mode_ctrl::@8
mode_ctrl::@9: scope:[mode_ctrl]  from mode_ctrl::@16 mode_ctrl::@25
  dtv_control#191 = phi( mode_ctrl::@16/dtv_control#206, mode_ctrl::@25/dtv_control#207 )
  mode_ctrl::ctrl#27 = phi( mode_ctrl::@16/mode_ctrl::ctrl#5, mode_ctrl::@25/mode_ctrl::ctrl#20 )
  keyboard_key_pressed::key#18 = KEY_C
  call keyboard_key_pressed 
  keyboard_key_pressed::return#20 = keyboard_key_pressed::return#1
  to:mode_ctrl::@26
mode_ctrl::@26: scope:[mode_ctrl]  from mode_ctrl::@9
  dtv_control#176 = phi( mode_ctrl::@9/dtv_control#191 )
  mode_ctrl::ctrl#21 = phi( mode_ctrl::@9/mode_ctrl::ctrl#27 )
  keyboard_key_pressed::return#41 = phi( mode_ctrl::@9/keyboard_key_pressed::return#20 )
  mode_ctrl::$24 = keyboard_key_pressed::return#41
  mode_ctrl::$25 = mode_ctrl::$24 != 0
  mode_ctrl::$26 = ! mode_ctrl::$25
  if(mode_ctrl::$26) goto mode_ctrl::@10
  to:mode_ctrl::@17
mode_ctrl::@16: scope:[mode_ctrl]  from mode_ctrl::@25
  dtv_control#206 = phi( mode_ctrl::@25/dtv_control#207 )
  mode_ctrl::ctrl#12 = phi( mode_ctrl::@25/mode_ctrl::ctrl#20 )
  mode_ctrl::$23 = mode_ctrl::ctrl#12 | DTV_CHUNKY
  mode_ctrl::ctrl#5 = mode_ctrl::$23
  to:mode_ctrl::@9
mode_ctrl::@10: scope:[mode_ctrl]  from mode_ctrl::@17 mode_ctrl::@26
  dtv_control#148 = phi( mode_ctrl::@17/dtv_control#175, mode_ctrl::@26/dtv_control#176 )
  mode_ctrl::ctrl#28 = phi( mode_ctrl::@17/mode_ctrl::ctrl#6, mode_ctrl::@26/mode_ctrl::ctrl#21 )
  keyboard_key_pressed::key#19 = KEY_0
  call keyboard_key_pressed 
  keyboard_key_pressed::return#21 = keyboard_key_pressed::return#1
  to:mode_ctrl::@27
mode_ctrl::@27: scope:[mode_ctrl]  from mode_ctrl::@10
  dtv_control#118 = phi( mode_ctrl::@10/dtv_control#148 )
  mode_ctrl::ctrl#22 = phi( mode_ctrl::@10/mode_ctrl::ctrl#28 )
  keyboard_key_pressed::return#42 = phi( mode_ctrl::@10/keyboard_key_pressed::return#21 )
  mode_ctrl::$28 = keyboard_key_pressed::return#42
  mode_ctrl::$29 = mode_ctrl::$28 != 0
  mode_ctrl::$30 = ! mode_ctrl::$29
  if(mode_ctrl::$30) goto mode_ctrl::@11
  to:mode_ctrl::@18
mode_ctrl::@17: scope:[mode_ctrl]  from mode_ctrl::@26
  dtv_control#175 = phi( mode_ctrl::@26/dtv_control#176 )
  mode_ctrl::ctrl#13 = phi( mode_ctrl::@26/mode_ctrl::ctrl#21 )
  mode_ctrl::$27 = mode_ctrl::ctrl#13 | DTV_COLORRAM_OFF
  mode_ctrl::ctrl#6 = mode_ctrl::$27
  to:mode_ctrl::@10
mode_ctrl::@11: scope:[mode_ctrl]  from mode_ctrl::@18 mode_ctrl::@27
  dtv_control#73 = phi( mode_ctrl::@18/dtv_control#117, mode_ctrl::@27/dtv_control#118 )
  mode_ctrl::ctrl#14 = phi( mode_ctrl::@18/mode_ctrl::ctrl#7, mode_ctrl::@27/mode_ctrl::ctrl#22 )
  mode_ctrl::$31 = mode_ctrl::ctrl#14 != dtv_control#73
  mode_ctrl::$32 = ! mode_ctrl::$31
  if(mode_ctrl::$32) goto mode_ctrl::@1
  to:mode_ctrl::@19
mode_ctrl::@18: scope:[mode_ctrl]  from mode_ctrl::@27
  dtv_control#117 = phi( mode_ctrl::@27/dtv_control#118 )
  mode_ctrl::ctrl#7 = 0
  to:mode_ctrl::@11
mode_ctrl::@19: scope:[mode_ctrl]  from mode_ctrl::@11
  mode_ctrl::ctrl#15 = phi( mode_ctrl::@11/mode_ctrl::ctrl#14 )
  dtv_control#16 = mode_ctrl::ctrl#15
  *DTV_CONTROL = mode_ctrl::ctrl#15
  *BORDER_COLOR = mode_ctrl::ctrl#15
  to:mode_ctrl::@1

void mode_stdchar()
mode_stdchar: scope:[mode_stdchar]  from menu::@19
  *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_stdchar::CHARSET/$10000
  *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
  *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
  dtv_control#17 = 0
  *DTV_CONTROL = 0
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_stdchar::CHARSET/$4000
  *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
  *VIC_CONTROL2 = VIC_CSEL
  *VIC_MEMORY = (byte)(word)mode_stdchar::SCREEN&$3fff/$40|(word)mode_stdchar::CHARSET&$3fff/$400
  mode_stdchar::i#0 = 0
  to:mode_stdchar::@1
mode_stdchar::@1: scope:[mode_stdchar]  from mode_stdchar mode_stdchar::@1
  dtv_control#224 = phi( mode_stdchar/dtv_control#17, mode_stdchar::@1/dtv_control#224 )
  mode_stdchar::i#2 = phi( mode_stdchar/mode_stdchar::i#0, mode_stdchar::@1/mode_stdchar::i#1 )
  DTV_PALETTE[mode_stdchar::i#2] = DTV_PALETTE_DEFAULT[mode_stdchar::i#2]
  mode_stdchar::i#1 = mode_stdchar::i#2 + rangenext(0,$f)
  mode_stdchar::$1 = mode_stdchar::i#1 != rangelast(0,$f)
  if(mode_stdchar::$1) goto mode_stdchar::@1
  to:mode_stdchar::@2
mode_stdchar::@2: scope:[mode_stdchar]  from mode_stdchar::@1
  dtv_control#208 = phi( mode_stdchar::@1/dtv_control#224 )
  *BG_COLOR = 0
  *BORDER_COLOR = 0
  mode_stdchar::col#0 = mode_stdchar::COLORS
  mode_stdchar::ch#0 = mode_stdchar::SCREEN
  mode_stdchar::cy#0 = 0
  to:mode_stdchar::@3
mode_stdchar::@3: scope:[mode_stdchar]  from mode_stdchar::@2 mode_stdchar::@5
  dtv_control#192 = phi( mode_stdchar::@2/dtv_control#208, mode_stdchar::@5/dtv_control#149 )
  mode_stdchar::ch#3 = phi( mode_stdchar::@2/mode_stdchar::ch#0, mode_stdchar::@5/mode_stdchar::ch#4 )
  mode_stdchar::col#3 = phi( mode_stdchar::@2/mode_stdchar::col#0, mode_stdchar::@5/mode_stdchar::col#4 )
  mode_stdchar::cy#4 = phi( mode_stdchar::@2/mode_stdchar::cy#0, mode_stdchar::@5/mode_stdchar::cy#1 )
  mode_stdchar::cx#0 = 0
  to:mode_stdchar::@4
mode_stdchar::@4: scope:[mode_stdchar]  from mode_stdchar::@3 mode_stdchar::@4
  dtv_control#177 = phi( mode_stdchar::@3/dtv_control#192, mode_stdchar::@4/dtv_control#177 )
  mode_stdchar::ch#2 = phi( mode_stdchar::@3/mode_stdchar::ch#3, mode_stdchar::@4/mode_stdchar::ch#1 )
  mode_stdchar::col#2 = phi( mode_stdchar::@3/mode_stdchar::col#3, mode_stdchar::@4/mode_stdchar::col#1 )
  mode_stdchar::cy#2 = phi( mode_stdchar::@3/mode_stdchar::cy#4, mode_stdchar::@4/mode_stdchar::cy#2 )
  mode_stdchar::cx#2 = phi( mode_stdchar::@3/mode_stdchar::cx#0, mode_stdchar::@4/mode_stdchar::cx#1 )
  mode_stdchar::$2 = mode_stdchar::cx#2 + mode_stdchar::cy#2
  mode_stdchar::$3 = mode_stdchar::$2 & $f
  *mode_stdchar::col#2 = mode_stdchar::$3
  mode_stdchar::col#1 = ++ mode_stdchar::col#2
  mode_stdchar::$4 = mode_stdchar::cy#2 & $f
  mode_stdchar::$5 = mode_stdchar::$4 * $10
  mode_stdchar::$6 = mode_stdchar::cx#2 & $f
  mode_stdchar::$7 = mode_stdchar::$5 | mode_stdchar::$6
  *mode_stdchar::ch#2 = mode_stdchar::$7
  mode_stdchar::ch#1 = ++ mode_stdchar::ch#2
  mode_stdchar::cx#1 = mode_stdchar::cx#2 + rangenext(0,$27)
  mode_stdchar::$8 = mode_stdchar::cx#1 != rangelast(0,$27)
  if(mode_stdchar::$8) goto mode_stdchar::@4
  to:mode_stdchar::@5
mode_stdchar::@5: scope:[mode_stdchar]  from mode_stdchar::@4
  dtv_control#149 = phi( mode_stdchar::@4/dtv_control#177 )
  mode_stdchar::ch#4 = phi( mode_stdchar::@4/mode_stdchar::ch#1 )
  mode_stdchar::col#4 = phi( mode_stdchar::@4/mode_stdchar::col#1 )
  mode_stdchar::cy#3 = phi( mode_stdchar::@4/mode_stdchar::cy#2 )
  mode_stdchar::cy#1 = mode_stdchar::cy#3 + rangenext(0,$18)
  mode_stdchar::$9 = mode_stdchar::cy#1 != rangelast(0,$18)
  if(mode_stdchar::$9) goto mode_stdchar::@3
  to:mode_stdchar::@6
mode_stdchar::@6: scope:[mode_stdchar]  from mode_stdchar::@5
  dtv_control#119 = phi( mode_stdchar::@5/dtv_control#149 )
  call mode_ctrl 
  to:mode_stdchar::@7
mode_stdchar::@7: scope:[mode_stdchar]  from mode_stdchar::@6
  dtv_control#74 = phi( mode_stdchar::@6/dtv_control#15 )
  dtv_control#18 = dtv_control#74
  to:mode_stdchar::@return
mode_stdchar::@return: scope:[mode_stdchar]  from mode_stdchar::@7
  dtv_control#75 = phi( mode_stdchar::@7/dtv_control#18 )
  dtv_control#19 = dtv_control#75
  return 
  to:@return

void mode_ecmchar()
mode_ecmchar: scope:[mode_ecmchar]  from menu::@20
  *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_ecmchar::CHARSET/$10000
  *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
  *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
  dtv_control#20 = 0
  *DTV_CONTROL = 0
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_ecmchar::CHARSET/$4000
  *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3
  *VIC_CONTROL2 = VIC_CSEL
  *VIC_MEMORY = (byte)(word)mode_ecmchar::SCREEN&$3fff/$40|(word)mode_ecmchar::CHARSET&$3fff/$400
  mode_ecmchar::i#0 = 0
  to:mode_ecmchar::@1
mode_ecmchar::@1: scope:[mode_ecmchar]  from mode_ecmchar mode_ecmchar::@1
  dtv_control#225 = phi( mode_ecmchar/dtv_control#20, mode_ecmchar::@1/dtv_control#225 )
  mode_ecmchar::i#2 = phi( mode_ecmchar/mode_ecmchar::i#0, mode_ecmchar::@1/mode_ecmchar::i#1 )
  DTV_PALETTE[mode_ecmchar::i#2] = DTV_PALETTE_DEFAULT[mode_ecmchar::i#2]
  mode_ecmchar::i#1 = mode_ecmchar::i#2 + rangenext(0,$f)
  mode_ecmchar::$1 = mode_ecmchar::i#1 != rangelast(0,$f)
  if(mode_ecmchar::$1) goto mode_ecmchar::@1
  to:mode_ecmchar::@2
mode_ecmchar::@2: scope:[mode_ecmchar]  from mode_ecmchar::@1
  dtv_control#209 = phi( mode_ecmchar::@1/dtv_control#225 )
  *BORDER_COLOR = 0
  *BG_COLOR = 0
  *BG_COLOR1 = 2
  *BG_COLOR2 = 5
  *BG_COLOR3 = 6
  mode_ecmchar::col#0 = mode_ecmchar::COLORS
  mode_ecmchar::ch#0 = mode_ecmchar::SCREEN
  mode_ecmchar::cy#0 = 0
  to:mode_ecmchar::@3
mode_ecmchar::@3: scope:[mode_ecmchar]  from mode_ecmchar::@2 mode_ecmchar::@5
  dtv_control#193 = phi( mode_ecmchar::@2/dtv_control#209, mode_ecmchar::@5/dtv_control#150 )
  mode_ecmchar::ch#3 = phi( mode_ecmchar::@2/mode_ecmchar::ch#0, mode_ecmchar::@5/mode_ecmchar::ch#4 )
  mode_ecmchar::col#3 = phi( mode_ecmchar::@2/mode_ecmchar::col#0, mode_ecmchar::@5/mode_ecmchar::col#4 )
  mode_ecmchar::cy#4 = phi( mode_ecmchar::@2/mode_ecmchar::cy#0, mode_ecmchar::@5/mode_ecmchar::cy#1 )
  mode_ecmchar::cx#0 = 0
  to:mode_ecmchar::@4
mode_ecmchar::@4: scope:[mode_ecmchar]  from mode_ecmchar::@3 mode_ecmchar::@4
  dtv_control#178 = phi( mode_ecmchar::@3/dtv_control#193, mode_ecmchar::@4/dtv_control#178 )
  mode_ecmchar::ch#2 = phi( mode_ecmchar::@3/mode_ecmchar::ch#3, mode_ecmchar::@4/mode_ecmchar::ch#1 )
  mode_ecmchar::col#2 = phi( mode_ecmchar::@3/mode_ecmchar::col#3, mode_ecmchar::@4/mode_ecmchar::col#1 )
  mode_ecmchar::cy#2 = phi( mode_ecmchar::@3/mode_ecmchar::cy#4, mode_ecmchar::@4/mode_ecmchar::cy#2 )
  mode_ecmchar::cx#2 = phi( mode_ecmchar::@3/mode_ecmchar::cx#0, mode_ecmchar::@4/mode_ecmchar::cx#1 )
  mode_ecmchar::$2 = mode_ecmchar::cx#2 + mode_ecmchar::cy#2
  mode_ecmchar::$3 = mode_ecmchar::$2 & $f
  *mode_ecmchar::col#2 = mode_ecmchar::$3
  mode_ecmchar::col#1 = ++ mode_ecmchar::col#2
  mode_ecmchar::$4 = mode_ecmchar::cy#2 & $f
  mode_ecmchar::$5 = mode_ecmchar::$4 * $10
  mode_ecmchar::$6 = mode_ecmchar::cx#2 & $f
  mode_ecmchar::$7 = mode_ecmchar::$5 | mode_ecmchar::$6
  *mode_ecmchar::ch#2 = mode_ecmchar::$7
  mode_ecmchar::ch#1 = ++ mode_ecmchar::ch#2
  mode_ecmchar::cx#1 = mode_ecmchar::cx#2 + rangenext(0,$27)
  mode_ecmchar::$8 = mode_ecmchar::cx#1 != rangelast(0,$27)
  if(mode_ecmchar::$8) goto mode_ecmchar::@4
  to:mode_ecmchar::@5
mode_ecmchar::@5: scope:[mode_ecmchar]  from mode_ecmchar::@4
  dtv_control#150 = phi( mode_ecmchar::@4/dtv_control#178 )
  mode_ecmchar::ch#4 = phi( mode_ecmchar::@4/mode_ecmchar::ch#1 )
  mode_ecmchar::col#4 = phi( mode_ecmchar::@4/mode_ecmchar::col#1 )
  mode_ecmchar::cy#3 = phi( mode_ecmchar::@4/mode_ecmchar::cy#2 )
  mode_ecmchar::cy#1 = mode_ecmchar::cy#3 + rangenext(0,$18)
  mode_ecmchar::$9 = mode_ecmchar::cy#1 != rangelast(0,$18)
  if(mode_ecmchar::$9) goto mode_ecmchar::@3
  to:mode_ecmchar::@6
mode_ecmchar::@6: scope:[mode_ecmchar]  from mode_ecmchar::@5
  dtv_control#120 = phi( mode_ecmchar::@5/dtv_control#150 )
  call mode_ctrl 
  to:mode_ecmchar::@7
mode_ecmchar::@7: scope:[mode_ecmchar]  from mode_ecmchar::@6
  dtv_control#76 = phi( mode_ecmchar::@6/dtv_control#15 )
  dtv_control#21 = dtv_control#76
  to:mode_ecmchar::@return
mode_ecmchar::@return: scope:[mode_ecmchar]  from mode_ecmchar::@7
  dtv_control#77 = phi( mode_ecmchar::@7/dtv_control#21 )
  dtv_control#22 = dtv_control#77
  return 
  to:@return

void mode_mcchar()
mode_mcchar: scope:[mode_mcchar]  from menu::@21
  *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_mcchar::CHARSET/$10000
  *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
  *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
  dtv_control#23 = 0
  *DTV_CONTROL = 0
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_mcchar::CHARSET/$4000
  *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
  *VIC_CONTROL2 = VIC_CSEL|VIC_MCM
  *VIC_MEMORY = (byte)(word)mode_mcchar::SCREEN&$3fff/$40|(word)mode_mcchar::CHARSET&$3fff/$400
  mode_mcchar::i#0 = 0
  to:mode_mcchar::@1
mode_mcchar::@1: scope:[mode_mcchar]  from mode_mcchar mode_mcchar::@1
  dtv_control#226 = phi( mode_mcchar/dtv_control#23, mode_mcchar::@1/dtv_control#226 )
  mode_mcchar::i#2 = phi( mode_mcchar/mode_mcchar::i#0, mode_mcchar::@1/mode_mcchar::i#1 )
  DTV_PALETTE[mode_mcchar::i#2] = DTV_PALETTE_DEFAULT[mode_mcchar::i#2]
  mode_mcchar::i#1 = mode_mcchar::i#2 + rangenext(0,$f)
  mode_mcchar::$1 = mode_mcchar::i#1 != rangelast(0,$f)
  if(mode_mcchar::$1) goto mode_mcchar::@1
  to:mode_mcchar::@2
mode_mcchar::@2: scope:[mode_mcchar]  from mode_mcchar::@1
  dtv_control#210 = phi( mode_mcchar::@1/dtv_control#226 )
  *BORDER_COLOR = 0
  *BG_COLOR = BLACK
  *BG_COLOR1 = GREEN
  *BG_COLOR2 = BLUE
  mode_mcchar::col#0 = mode_mcchar::COLORS
  mode_mcchar::ch#0 = mode_mcchar::SCREEN
  mode_mcchar::cy#0 = 0
  to:mode_mcchar::@3
mode_mcchar::@3: scope:[mode_mcchar]  from mode_mcchar::@2 mode_mcchar::@5
  dtv_control#194 = phi( mode_mcchar::@2/dtv_control#210, mode_mcchar::@5/dtv_control#151 )
  mode_mcchar::ch#3 = phi( mode_mcchar::@2/mode_mcchar::ch#0, mode_mcchar::@5/mode_mcchar::ch#4 )
  mode_mcchar::col#3 = phi( mode_mcchar::@2/mode_mcchar::col#0, mode_mcchar::@5/mode_mcchar::col#4 )
  mode_mcchar::cy#4 = phi( mode_mcchar::@2/mode_mcchar::cy#0, mode_mcchar::@5/mode_mcchar::cy#1 )
  mode_mcchar::cx#0 = 0
  to:mode_mcchar::@4
mode_mcchar::@4: scope:[mode_mcchar]  from mode_mcchar::@3 mode_mcchar::@4
  dtv_control#179 = phi( mode_mcchar::@3/dtv_control#194, mode_mcchar::@4/dtv_control#179 )
  mode_mcchar::ch#2 = phi( mode_mcchar::@3/mode_mcchar::ch#3, mode_mcchar::@4/mode_mcchar::ch#1 )
  mode_mcchar::col#2 = phi( mode_mcchar::@3/mode_mcchar::col#3, mode_mcchar::@4/mode_mcchar::col#1 )
  mode_mcchar::cy#2 = phi( mode_mcchar::@3/mode_mcchar::cy#4, mode_mcchar::@4/mode_mcchar::cy#2 )
  mode_mcchar::cx#2 = phi( mode_mcchar::@3/mode_mcchar::cx#0, mode_mcchar::@4/mode_mcchar::cx#1 )
  mode_mcchar::$2 = mode_mcchar::cx#2 + mode_mcchar::cy#2
  mode_mcchar::$3 = mode_mcchar::$2 & $f
  *mode_mcchar::col#2 = mode_mcchar::$3
  mode_mcchar::col#1 = ++ mode_mcchar::col#2
  mode_mcchar::$4 = mode_mcchar::cy#2 & $f
  mode_mcchar::$5 = mode_mcchar::$4 * $10
  mode_mcchar::$6 = mode_mcchar::cx#2 & $f
  mode_mcchar::$7 = mode_mcchar::$5 | mode_mcchar::$6
  *mode_mcchar::ch#2 = mode_mcchar::$7
  mode_mcchar::ch#1 = ++ mode_mcchar::ch#2
  mode_mcchar::cx#1 = mode_mcchar::cx#2 + rangenext(0,$27)
  mode_mcchar::$8 = mode_mcchar::cx#1 != rangelast(0,$27)
  if(mode_mcchar::$8) goto mode_mcchar::@4
  to:mode_mcchar::@5
mode_mcchar::@5: scope:[mode_mcchar]  from mode_mcchar::@4
  dtv_control#151 = phi( mode_mcchar::@4/dtv_control#179 )
  mode_mcchar::ch#4 = phi( mode_mcchar::@4/mode_mcchar::ch#1 )
  mode_mcchar::col#4 = phi( mode_mcchar::@4/mode_mcchar::col#1 )
  mode_mcchar::cy#3 = phi( mode_mcchar::@4/mode_mcchar::cy#2 )
  mode_mcchar::cy#1 = mode_mcchar::cy#3 + rangenext(0,$18)
  mode_mcchar::$9 = mode_mcchar::cy#1 != rangelast(0,$18)
  if(mode_mcchar::$9) goto mode_mcchar::@3
  to:mode_mcchar::@6
mode_mcchar::@6: scope:[mode_mcchar]  from mode_mcchar::@5
  dtv_control#121 = phi( mode_mcchar::@5/dtv_control#151 )
  call mode_ctrl 
  to:mode_mcchar::@7
mode_mcchar::@7: scope:[mode_mcchar]  from mode_mcchar::@6
  dtv_control#78 = phi( mode_mcchar::@6/dtv_control#15 )
  dtv_control#24 = dtv_control#78
  to:mode_mcchar::@return
mode_mcchar::@return: scope:[mode_mcchar]  from mode_mcchar::@7
  dtv_control#79 = phi( mode_mcchar::@7/dtv_control#24 )
  dtv_control#25 = dtv_control#79
  return 
  to:@return

void mode_stdbitmap()
mode_stdbitmap: scope:[mode_stdbitmap]  from menu::@22
  *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_stdbitmap::BITMAP/$10000
  dtv_control#26 = 0
  *DTV_CONTROL = 0
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_stdbitmap::BITMAP/$4000
  *VIC_CONTROL = VIC_BMM|VIC_DEN|VIC_RSEL|3
  *VIC_CONTROL2 = VIC_CSEL
  *VIC_MEMORY = (byte)(word)mode_stdbitmap::SCREEN&$3fff/$40|(word)mode_stdbitmap::BITMAP&$3fff/$400
  mode_stdbitmap::i#0 = 0
  to:mode_stdbitmap::@1
mode_stdbitmap::@1: scope:[mode_stdbitmap]  from mode_stdbitmap mode_stdbitmap::@1
  dtv_control#266 = phi( mode_stdbitmap/dtv_control#26, mode_stdbitmap::@1/dtv_control#266 )
  mode_stdbitmap::i#2 = phi( mode_stdbitmap/mode_stdbitmap::i#0, mode_stdbitmap::@1/mode_stdbitmap::i#1 )
  DTV_PALETTE[mode_stdbitmap::i#2] = DTV_PALETTE_DEFAULT[mode_stdbitmap::i#2]
  mode_stdbitmap::i#1 = mode_stdbitmap::i#2 + rangenext(0,$f)
  mode_stdbitmap::$3 = mode_stdbitmap::i#1 != rangelast(0,$f)
  if(mode_stdbitmap::$3) goto mode_stdbitmap::@1
  to:mode_stdbitmap::@2
mode_stdbitmap::@2: scope:[mode_stdbitmap]  from mode_stdbitmap::@1
  dtv_control#259 = phi( mode_stdbitmap::@1/dtv_control#266 )
  *BG_COLOR = BLACK
  *BORDER_COLOR = BLACK
  mode_stdbitmap::ch#0 = mode_stdbitmap::SCREEN
  mode_stdbitmap::cy#0 = 0
  to:mode_stdbitmap::@3
mode_stdbitmap::@3: scope:[mode_stdbitmap]  from mode_stdbitmap::@2 mode_stdbitmap::@5
  dtv_control#249 = phi( mode_stdbitmap::@2/dtv_control#259, mode_stdbitmap::@5/dtv_control#227 )
  mode_stdbitmap::ch#3 = phi( mode_stdbitmap::@2/mode_stdbitmap::ch#0, mode_stdbitmap::@5/mode_stdbitmap::ch#4 )
  mode_stdbitmap::cy#4 = phi( mode_stdbitmap::@2/mode_stdbitmap::cy#0, mode_stdbitmap::@5/mode_stdbitmap::cy#1 )
  mode_stdbitmap::cx#0 = 0
  to:mode_stdbitmap::@4
mode_stdbitmap::@4: scope:[mode_stdbitmap]  from mode_stdbitmap::@3 mode_stdbitmap::@4
  dtv_control#241 = phi( mode_stdbitmap::@3/dtv_control#249, mode_stdbitmap::@4/dtv_control#241 )
  mode_stdbitmap::ch#2 = phi( mode_stdbitmap::@3/mode_stdbitmap::ch#3, mode_stdbitmap::@4/mode_stdbitmap::ch#1 )
  mode_stdbitmap::cy#2 = phi( mode_stdbitmap::@3/mode_stdbitmap::cy#4, mode_stdbitmap::@4/mode_stdbitmap::cy#2 )
  mode_stdbitmap::cx#2 = phi( mode_stdbitmap::@3/mode_stdbitmap::cx#0, mode_stdbitmap::@4/mode_stdbitmap::cx#1 )
  mode_stdbitmap::$4 = mode_stdbitmap::cx#2 + mode_stdbitmap::cy#2
  mode_stdbitmap::$5 = mode_stdbitmap::$4 & $f
  mode_stdbitmap::col#0 = mode_stdbitmap::$5
  mode_stdbitmap::$6 = $f - mode_stdbitmap::col#0
  mode_stdbitmap::col2#0 = mode_stdbitmap::$6
  mode_stdbitmap::$7 = mode_stdbitmap::col#0 * $10
  mode_stdbitmap::$8 = mode_stdbitmap::$7 | mode_stdbitmap::col2#0
  *mode_stdbitmap::ch#2 = mode_stdbitmap::$8
  mode_stdbitmap::ch#1 = ++ mode_stdbitmap::ch#2
  mode_stdbitmap::cx#1 = mode_stdbitmap::cx#2 + rangenext(0,$27)
  mode_stdbitmap::$9 = mode_stdbitmap::cx#1 != rangelast(0,$27)
  if(mode_stdbitmap::$9) goto mode_stdbitmap::@4
  to:mode_stdbitmap::@5
mode_stdbitmap::@5: scope:[mode_stdbitmap]  from mode_stdbitmap::@4
  dtv_control#227 = phi( mode_stdbitmap::@4/dtv_control#241 )
  mode_stdbitmap::ch#4 = phi( mode_stdbitmap::@4/mode_stdbitmap::ch#1 )
  mode_stdbitmap::cy#3 = phi( mode_stdbitmap::@4/mode_stdbitmap::cy#2 )
  mode_stdbitmap::cy#1 = mode_stdbitmap::cy#3 + rangenext(0,$18)
  mode_stdbitmap::$10 = mode_stdbitmap::cy#1 != rangelast(0,$18)
  if(mode_stdbitmap::$10) goto mode_stdbitmap::@3
  to:mode_stdbitmap::@6
mode_stdbitmap::@6: scope:[mode_stdbitmap]  from mode_stdbitmap::@5
  dtv_control#211 = phi( mode_stdbitmap::@5/dtv_control#227 )
  bitmap_init::bitmap#0 = mode_stdbitmap::BITMAP
  call bitmap_init 
  to:mode_stdbitmap::@10
mode_stdbitmap::@10: scope:[mode_stdbitmap]  from mode_stdbitmap::@6
  dtv_control#195 = phi( mode_stdbitmap::@6/dtv_control#211 )
  call bitmap_clear 
  to:mode_stdbitmap::@11
mode_stdbitmap::@11: scope:[mode_stdbitmap]  from mode_stdbitmap::@10
  dtv_control#180 = phi( mode_stdbitmap::@10/dtv_control#195 )
  mode_stdbitmap::l#0 = 0
  to:mode_stdbitmap::@7
mode_stdbitmap::@7: scope:[mode_stdbitmap]  from mode_stdbitmap::@11 mode_stdbitmap::@12
  dtv_control#152 = phi( mode_stdbitmap::@11/dtv_control#180, mode_stdbitmap::@12/dtv_control#181 )
  mode_stdbitmap::l#2 = phi( mode_stdbitmap::@11/mode_stdbitmap::l#0, mode_stdbitmap::@12/mode_stdbitmap::l#1 )
  mode_stdbitmap::$11 = mode_stdbitmap::l#2 < mode_stdbitmap::lines_cnt
  if(mode_stdbitmap::$11) goto mode_stdbitmap::@8
  to:mode_stdbitmap::@9
mode_stdbitmap::@8: scope:[mode_stdbitmap]  from mode_stdbitmap::@7
  dtv_control#196 = phi( mode_stdbitmap::@7/dtv_control#152 )
  mode_stdbitmap::l#3 = phi( mode_stdbitmap::@7/mode_stdbitmap::l#2 )
  mode_stdbitmap::$12 = mode_stdbitmap::l#3 + 1
  mode_stdbitmap::$13 = mode_stdbitmap::l#3 + 1
  bitmap_line::x0#0 = mode_stdbitmap::lines_x[mode_stdbitmap::l#3]
  bitmap_line::x1#0 = mode_stdbitmap::lines_x[mode_stdbitmap::$12]
  bitmap_line::y0#0 = mode_stdbitmap::lines_y[mode_stdbitmap::l#3]
  bitmap_line::y1#0 = mode_stdbitmap::lines_y[mode_stdbitmap::$13]
  call bitmap_line 
  to:mode_stdbitmap::@12
mode_stdbitmap::@12: scope:[mode_stdbitmap]  from mode_stdbitmap::@8
  dtv_control#181 = phi( mode_stdbitmap::@8/dtv_control#196 )
  mode_stdbitmap::l#4 = phi( mode_stdbitmap::@8/mode_stdbitmap::l#3 )
  mode_stdbitmap::l#1 = ++ mode_stdbitmap::l#4
  to:mode_stdbitmap::@7
mode_stdbitmap::@9: scope:[mode_stdbitmap]  from mode_stdbitmap::@7
  dtv_control#122 = phi( mode_stdbitmap::@7/dtv_control#152 )
  call mode_ctrl 
  to:mode_stdbitmap::@13
mode_stdbitmap::@13: scope:[mode_stdbitmap]  from mode_stdbitmap::@9
  dtv_control#80 = phi( mode_stdbitmap::@9/dtv_control#15 )
  dtv_control#27 = dtv_control#80
  to:mode_stdbitmap::@return
mode_stdbitmap::@return: scope:[mode_stdbitmap]  from mode_stdbitmap::@13
  dtv_control#81 = phi( mode_stdbitmap::@13/dtv_control#27 )
  dtv_control#28 = dtv_control#81
  return 
  to:@return

void mode_hicolstdchar()
mode_hicolstdchar: scope:[mode_hicolstdchar]  from menu::@23
  *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_hicolstdchar::CHARSET/$10000
  *DTV_COLOR_BANK_LO = <(word)mode_hicolstdchar::COLORS/$400
  *DTV_COLOR_BANK_HI = >(word)mode_hicolstdchar::COLORS/$400
  dtv_control#29 = DTV_HIGHCOLOR
  *DTV_CONTROL = DTV_HIGHCOLOR
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_hicolstdchar::CHARSET/$4000
  *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
  *VIC_CONTROL2 = VIC_CSEL
  *VIC_MEMORY = (byte)(word)mode_hicolstdchar::SCREEN&$3fff/$40|(word)mode_hicolstdchar::CHARSET&$3fff/$400
  mode_hicolstdchar::i#0 = 0
  to:mode_hicolstdchar::@1
mode_hicolstdchar::@1: scope:[mode_hicolstdchar]  from mode_hicolstdchar mode_hicolstdchar::@1
  dtv_control#228 = phi( mode_hicolstdchar/dtv_control#29, mode_hicolstdchar::@1/dtv_control#228 )
  mode_hicolstdchar::i#2 = phi( mode_hicolstdchar/mode_hicolstdchar::i#0, mode_hicolstdchar::@1/mode_hicolstdchar::i#1 )
  DTV_PALETTE[mode_hicolstdchar::i#2] = mode_hicolstdchar::i#2
  mode_hicolstdchar::i#1 = mode_hicolstdchar::i#2 + rangenext(0,$f)
  mode_hicolstdchar::$1 = mode_hicolstdchar::i#1 != rangelast(0,$f)
  if(mode_hicolstdchar::$1) goto mode_hicolstdchar::@1
  to:mode_hicolstdchar::@2
mode_hicolstdchar::@2: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@1
  dtv_control#212 = phi( mode_hicolstdchar::@1/dtv_control#228 )
  *BG_COLOR = 0
  *BORDER_COLOR = 0
  mode_hicolstdchar::col#0 = mode_hicolstdchar::COLORS
  mode_hicolstdchar::ch#0 = mode_hicolstdchar::SCREEN
  mode_hicolstdchar::cy#0 = 0
  to:mode_hicolstdchar::@3
mode_hicolstdchar::@3: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@2 mode_hicolstdchar::@5
  dtv_control#197 = phi( mode_hicolstdchar::@2/dtv_control#212, mode_hicolstdchar::@5/dtv_control#153 )
  mode_hicolstdchar::ch#3 = phi( mode_hicolstdchar::@2/mode_hicolstdchar::ch#0, mode_hicolstdchar::@5/mode_hicolstdchar::ch#4 )
  mode_hicolstdchar::col#3 = phi( mode_hicolstdchar::@2/mode_hicolstdchar::col#0, mode_hicolstdchar::@5/mode_hicolstdchar::col#4 )
  mode_hicolstdchar::cy#4 = phi( mode_hicolstdchar::@2/mode_hicolstdchar::cy#0, mode_hicolstdchar::@5/mode_hicolstdchar::cy#1 )
  mode_hicolstdchar::cx#0 = 0
  to:mode_hicolstdchar::@4
mode_hicolstdchar::@4: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@3 mode_hicolstdchar::@4
  dtv_control#182 = phi( mode_hicolstdchar::@3/dtv_control#197, mode_hicolstdchar::@4/dtv_control#182 )
  mode_hicolstdchar::ch#2 = phi( mode_hicolstdchar::@3/mode_hicolstdchar::ch#3, mode_hicolstdchar::@4/mode_hicolstdchar::ch#1 )
  mode_hicolstdchar::col#2 = phi( mode_hicolstdchar::@3/mode_hicolstdchar::col#3, mode_hicolstdchar::@4/mode_hicolstdchar::col#1 )
  mode_hicolstdchar::cx#2 = phi( mode_hicolstdchar::@3/mode_hicolstdchar::cx#0, mode_hicolstdchar::@4/mode_hicolstdchar::cx#1 )
  mode_hicolstdchar::cy#2 = phi( mode_hicolstdchar::@3/mode_hicolstdchar::cy#4, mode_hicolstdchar::@4/mode_hicolstdchar::cy#2 )
  mode_hicolstdchar::$2 = mode_hicolstdchar::cy#2 & $f
  mode_hicolstdchar::$3 = mode_hicolstdchar::$2 * $10
  mode_hicolstdchar::$4 = mode_hicolstdchar::cx#2 & $f
  mode_hicolstdchar::$5 = mode_hicolstdchar::$3 | mode_hicolstdchar::$4
  mode_hicolstdchar::v#0 = mode_hicolstdchar::$5
  *mode_hicolstdchar::col#2 = mode_hicolstdchar::v#0
  mode_hicolstdchar::col#1 = ++ mode_hicolstdchar::col#2
  *mode_hicolstdchar::ch#2 = mode_hicolstdchar::v#0
  mode_hicolstdchar::ch#1 = ++ mode_hicolstdchar::ch#2
  mode_hicolstdchar::cx#1 = mode_hicolstdchar::cx#2 + rangenext(0,$27)
  mode_hicolstdchar::$6 = mode_hicolstdchar::cx#1 != rangelast(0,$27)
  if(mode_hicolstdchar::$6) goto mode_hicolstdchar::@4
  to:mode_hicolstdchar::@5
mode_hicolstdchar::@5: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@4
  dtv_control#153 = phi( mode_hicolstdchar::@4/dtv_control#182 )
  mode_hicolstdchar::ch#4 = phi( mode_hicolstdchar::@4/mode_hicolstdchar::ch#1 )
  mode_hicolstdchar::col#4 = phi( mode_hicolstdchar::@4/mode_hicolstdchar::col#1 )
  mode_hicolstdchar::cy#3 = phi( mode_hicolstdchar::@4/mode_hicolstdchar::cy#2 )
  mode_hicolstdchar::cy#1 = mode_hicolstdchar::cy#3 + rangenext(0,$18)
  mode_hicolstdchar::$7 = mode_hicolstdchar::cy#1 != rangelast(0,$18)
  if(mode_hicolstdchar::$7) goto mode_hicolstdchar::@3
  to:mode_hicolstdchar::@6
mode_hicolstdchar::@6: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@5
  dtv_control#123 = phi( mode_hicolstdchar::@5/dtv_control#153 )
  call mode_ctrl 
  to:mode_hicolstdchar::@7
mode_hicolstdchar::@7: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@6
  dtv_control#82 = phi( mode_hicolstdchar::@6/dtv_control#15 )
  dtv_control#30 = dtv_control#82
  to:mode_hicolstdchar::@return
mode_hicolstdchar::@return: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@7
  dtv_control#83 = phi( mode_hicolstdchar::@7/dtv_control#30 )
  dtv_control#31 = dtv_control#83
  return 
  to:@return

void mode_hicolecmchar()
mode_hicolecmchar: scope:[mode_hicolecmchar]  from menu::@24
  *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_hicolecmchar::CHARSET/$10000
  *DTV_COLOR_BANK_LO = <(word)mode_hicolecmchar::COLORS/$400
  *DTV_COLOR_BANK_HI = >(word)mode_hicolecmchar::COLORS/$400
  dtv_control#32 = DTV_HIGHCOLOR
  *DTV_CONTROL = DTV_HIGHCOLOR
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_hicolecmchar::CHARSET/$4000
  *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3
  *VIC_CONTROL2 = VIC_CSEL
  *VIC_MEMORY = (byte)(word)mode_hicolecmchar::SCREEN&$3fff/$40|(word)mode_hicolecmchar::CHARSET&$3fff/$400
  mode_hicolecmchar::i#0 = 0
  to:mode_hicolecmchar::@1
mode_hicolecmchar::@1: scope:[mode_hicolecmchar]  from mode_hicolecmchar mode_hicolecmchar::@1
  dtv_control#229 = phi( mode_hicolecmchar/dtv_control#32, mode_hicolecmchar::@1/dtv_control#229 )
  mode_hicolecmchar::i#2 = phi( mode_hicolecmchar/mode_hicolecmchar::i#0, mode_hicolecmchar::@1/mode_hicolecmchar::i#1 )
  DTV_PALETTE[mode_hicolecmchar::i#2] = mode_hicolecmchar::i#2
  mode_hicolecmchar::i#1 = mode_hicolecmchar::i#2 + rangenext(0,$f)
  mode_hicolecmchar::$1 = mode_hicolecmchar::i#1 != rangelast(0,$f)
  if(mode_hicolecmchar::$1) goto mode_hicolecmchar::@1
  to:mode_hicolecmchar::@2
mode_hicolecmchar::@2: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@1
  dtv_control#213 = phi( mode_hicolecmchar::@1/dtv_control#229 )
  *BORDER_COLOR = 0
  *BG_COLOR = $50
  *BG_COLOR1 = $54
  *BG_COLOR2 = $58
  *BG_COLOR3 = $5c
  mode_hicolecmchar::col#0 = mode_hicolecmchar::COLORS
  mode_hicolecmchar::ch#0 = mode_hicolecmchar::SCREEN
  mode_hicolecmchar::cy#0 = 0
  to:mode_hicolecmchar::@3
mode_hicolecmchar::@3: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@2 mode_hicolecmchar::@5
  dtv_control#198 = phi( mode_hicolecmchar::@2/dtv_control#213, mode_hicolecmchar::@5/dtv_control#154 )
  mode_hicolecmchar::ch#3 = phi( mode_hicolecmchar::@2/mode_hicolecmchar::ch#0, mode_hicolecmchar::@5/mode_hicolecmchar::ch#4 )
  mode_hicolecmchar::col#3 = phi( mode_hicolecmchar::@2/mode_hicolecmchar::col#0, mode_hicolecmchar::@5/mode_hicolecmchar::col#4 )
  mode_hicolecmchar::cy#4 = phi( mode_hicolecmchar::@2/mode_hicolecmchar::cy#0, mode_hicolecmchar::@5/mode_hicolecmchar::cy#1 )
  mode_hicolecmchar::cx#0 = 0
  to:mode_hicolecmchar::@4
mode_hicolecmchar::@4: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@3 mode_hicolecmchar::@4
  dtv_control#183 = phi( mode_hicolecmchar::@3/dtv_control#198, mode_hicolecmchar::@4/dtv_control#183 )
  mode_hicolecmchar::ch#2 = phi( mode_hicolecmchar::@3/mode_hicolecmchar::ch#3, mode_hicolecmchar::@4/mode_hicolecmchar::ch#1 )
  mode_hicolecmchar::col#2 = phi( mode_hicolecmchar::@3/mode_hicolecmchar::col#3, mode_hicolecmchar::@4/mode_hicolecmchar::col#1 )
  mode_hicolecmchar::cx#2 = phi( mode_hicolecmchar::@3/mode_hicolecmchar::cx#0, mode_hicolecmchar::@4/mode_hicolecmchar::cx#1 )
  mode_hicolecmchar::cy#2 = phi( mode_hicolecmchar::@3/mode_hicolecmchar::cy#4, mode_hicolecmchar::@4/mode_hicolecmchar::cy#2 )
  mode_hicolecmchar::$2 = mode_hicolecmchar::cy#2 & $f
  mode_hicolecmchar::$3 = mode_hicolecmchar::$2 * $10
  mode_hicolecmchar::$4 = mode_hicolecmchar::cx#2 & $f
  mode_hicolecmchar::$5 = mode_hicolecmchar::$3 | mode_hicolecmchar::$4
  mode_hicolecmchar::v#0 = mode_hicolecmchar::$5
  *mode_hicolecmchar::col#2 = mode_hicolecmchar::v#0
  mode_hicolecmchar::col#1 = ++ mode_hicolecmchar::col#2
  *mode_hicolecmchar::ch#2 = mode_hicolecmchar::v#0
  mode_hicolecmchar::ch#1 = ++ mode_hicolecmchar::ch#2
  mode_hicolecmchar::cx#1 = mode_hicolecmchar::cx#2 + rangenext(0,$27)
  mode_hicolecmchar::$6 = mode_hicolecmchar::cx#1 != rangelast(0,$27)
  if(mode_hicolecmchar::$6) goto mode_hicolecmchar::@4
  to:mode_hicolecmchar::@5
mode_hicolecmchar::@5: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@4
  dtv_control#154 = phi( mode_hicolecmchar::@4/dtv_control#183 )
  mode_hicolecmchar::ch#4 = phi( mode_hicolecmchar::@4/mode_hicolecmchar::ch#1 )
  mode_hicolecmchar::col#4 = phi( mode_hicolecmchar::@4/mode_hicolecmchar::col#1 )
  mode_hicolecmchar::cy#3 = phi( mode_hicolecmchar::@4/mode_hicolecmchar::cy#2 )
  mode_hicolecmchar::cy#1 = mode_hicolecmchar::cy#3 + rangenext(0,$18)
  mode_hicolecmchar::$7 = mode_hicolecmchar::cy#1 != rangelast(0,$18)
  if(mode_hicolecmchar::$7) goto mode_hicolecmchar::@3
  to:mode_hicolecmchar::@6
mode_hicolecmchar::@6: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@5
  dtv_control#124 = phi( mode_hicolecmchar::@5/dtv_control#154 )
  call mode_ctrl 
  to:mode_hicolecmchar::@7
mode_hicolecmchar::@7: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@6
  dtv_control#84 = phi( mode_hicolecmchar::@6/dtv_control#15 )
  dtv_control#33 = dtv_control#84
  to:mode_hicolecmchar::@return
mode_hicolecmchar::@return: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@7
  dtv_control#85 = phi( mode_hicolecmchar::@7/dtv_control#33 )
  dtv_control#34 = dtv_control#85
  return 
  to:@return

void mode_hicolmcchar()
mode_hicolmcchar: scope:[mode_hicolmcchar]  from menu::@25
  *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_hicolmcchar::CHARSET/$10000
  *DTV_COLOR_BANK_LO = <(word)mode_hicolmcchar::COLORS/$400
  *DTV_COLOR_BANK_HI = >(word)mode_hicolmcchar::COLORS/$400
  dtv_control#35 = DTV_HIGHCOLOR
  *DTV_CONTROL = DTV_HIGHCOLOR
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_hicolmcchar::CHARSET/$4000
  *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
  *VIC_CONTROL2 = VIC_CSEL|VIC_MCM
  *VIC_MEMORY = (byte)(word)mode_hicolmcchar::SCREEN&$3fff/$40|(word)mode_hicolmcchar::CHARSET&$3fff/$400
  mode_hicolmcchar::i#0 = 0
  to:mode_hicolmcchar::@1
mode_hicolmcchar::@1: scope:[mode_hicolmcchar]  from mode_hicolmcchar mode_hicolmcchar::@1
  dtv_control#230 = phi( mode_hicolmcchar/dtv_control#35, mode_hicolmcchar::@1/dtv_control#230 )
  mode_hicolmcchar::i#2 = phi( mode_hicolmcchar/mode_hicolmcchar::i#0, mode_hicolmcchar::@1/mode_hicolmcchar::i#1 )
  DTV_PALETTE[mode_hicolmcchar::i#2] = mode_hicolmcchar::i#2
  mode_hicolmcchar::i#1 = mode_hicolmcchar::i#2 + rangenext(0,$f)
  mode_hicolmcchar::$1 = mode_hicolmcchar::i#1 != rangelast(0,$f)
  if(mode_hicolmcchar::$1) goto mode_hicolmcchar::@1
  to:mode_hicolmcchar::@2
mode_hicolmcchar::@2: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@1
  dtv_control#214 = phi( mode_hicolmcchar::@1/dtv_control#230 )
  *BORDER_COLOR = 0
  *BG_COLOR = $50
  *BG_COLOR1 = $54
  *BG_COLOR2 = $58
  mode_hicolmcchar::col#0 = mode_hicolmcchar::COLORS
  mode_hicolmcchar::ch#0 = mode_hicolmcchar::SCREEN
  mode_hicolmcchar::cy#0 = 0
  to:mode_hicolmcchar::@3
mode_hicolmcchar::@3: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@2 mode_hicolmcchar::@5
  dtv_control#199 = phi( mode_hicolmcchar::@2/dtv_control#214, mode_hicolmcchar::@5/dtv_control#155 )
  mode_hicolmcchar::ch#3 = phi( mode_hicolmcchar::@2/mode_hicolmcchar::ch#0, mode_hicolmcchar::@5/mode_hicolmcchar::ch#4 )
  mode_hicolmcchar::col#3 = phi( mode_hicolmcchar::@2/mode_hicolmcchar::col#0, mode_hicolmcchar::@5/mode_hicolmcchar::col#4 )
  mode_hicolmcchar::cy#4 = phi( mode_hicolmcchar::@2/mode_hicolmcchar::cy#0, mode_hicolmcchar::@5/mode_hicolmcchar::cy#1 )
  mode_hicolmcchar::cx#0 = 0
  to:mode_hicolmcchar::@4
mode_hicolmcchar::@4: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@3 mode_hicolmcchar::@4
  dtv_control#184 = phi( mode_hicolmcchar::@3/dtv_control#199, mode_hicolmcchar::@4/dtv_control#184 )
  mode_hicolmcchar::ch#2 = phi( mode_hicolmcchar::@3/mode_hicolmcchar::ch#3, mode_hicolmcchar::@4/mode_hicolmcchar::ch#1 )
  mode_hicolmcchar::col#2 = phi( mode_hicolmcchar::@3/mode_hicolmcchar::col#3, mode_hicolmcchar::@4/mode_hicolmcchar::col#1 )
  mode_hicolmcchar::cx#2 = phi( mode_hicolmcchar::@3/mode_hicolmcchar::cx#0, mode_hicolmcchar::@4/mode_hicolmcchar::cx#1 )
  mode_hicolmcchar::cy#2 = phi( mode_hicolmcchar::@3/mode_hicolmcchar::cy#4, mode_hicolmcchar::@4/mode_hicolmcchar::cy#2 )
  mode_hicolmcchar::$2 = mode_hicolmcchar::cy#2 & $f
  mode_hicolmcchar::$3 = mode_hicolmcchar::$2 * $10
  mode_hicolmcchar::$4 = mode_hicolmcchar::cx#2 & $f
  mode_hicolmcchar::$5 = mode_hicolmcchar::$3 | mode_hicolmcchar::$4
  mode_hicolmcchar::v#0 = mode_hicolmcchar::$5
  *mode_hicolmcchar::col#2 = mode_hicolmcchar::v#0
  mode_hicolmcchar::col#1 = ++ mode_hicolmcchar::col#2
  *mode_hicolmcchar::ch#2 = mode_hicolmcchar::v#0
  mode_hicolmcchar::ch#1 = ++ mode_hicolmcchar::ch#2
  mode_hicolmcchar::cx#1 = mode_hicolmcchar::cx#2 + rangenext(0,$27)
  mode_hicolmcchar::$6 = mode_hicolmcchar::cx#1 != rangelast(0,$27)
  if(mode_hicolmcchar::$6) goto mode_hicolmcchar::@4
  to:mode_hicolmcchar::@5
mode_hicolmcchar::@5: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@4
  dtv_control#155 = phi( mode_hicolmcchar::@4/dtv_control#184 )
  mode_hicolmcchar::ch#4 = phi( mode_hicolmcchar::@4/mode_hicolmcchar::ch#1 )
  mode_hicolmcchar::col#4 = phi( mode_hicolmcchar::@4/mode_hicolmcchar::col#1 )
  mode_hicolmcchar::cy#3 = phi( mode_hicolmcchar::@4/mode_hicolmcchar::cy#2 )
  mode_hicolmcchar::cy#1 = mode_hicolmcchar::cy#3 + rangenext(0,$18)
  mode_hicolmcchar::$7 = mode_hicolmcchar::cy#1 != rangelast(0,$18)
  if(mode_hicolmcchar::$7) goto mode_hicolmcchar::@3
  to:mode_hicolmcchar::@6
mode_hicolmcchar::@6: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@5
  dtv_control#125 = phi( mode_hicolmcchar::@5/dtv_control#155 )
  call mode_ctrl 
  to:mode_hicolmcchar::@7
mode_hicolmcchar::@7: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@6
  dtv_control#86 = phi( mode_hicolmcchar::@6/dtv_control#15 )
  dtv_control#36 = dtv_control#86
  to:mode_hicolmcchar::@return
mode_hicolmcchar::@return: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@7
  dtv_control#87 = phi( mode_hicolmcchar::@7/dtv_control#36 )
  dtv_control#37 = dtv_control#87
  return 
  to:@return

void mode_twoplanebitmap()
mode_twoplanebitmap: scope:[mode_twoplanebitmap]  from menu::@27
  dtv_control#38 = DTV_HIGHCOLOR|DTV_LINEAR
  *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR
  *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
  *VIC_CONTROL2 = VIC_CSEL
  *DTV_PLANEA_START_LO = <mode_twoplanebitmap::PLANEA
  *DTV_PLANEA_START_MI = >mode_twoplanebitmap::PLANEA
  *DTV_PLANEA_START_HI = 0
  *DTV_PLANEA_STEP = 1
  *DTV_PLANEA_MODULO_LO = 0
  *DTV_PLANEA_MODULO_HI = 0
  *DTV_PLANEB_START_LO = <mode_twoplanebitmap::PLANEB
  *DTV_PLANEB_START_MI = >mode_twoplanebitmap::PLANEB
  *DTV_PLANEB_START_HI = 0
  *DTV_PLANEB_STEP = 1
  *DTV_PLANEB_MODULO_LO = 0
  *DTV_PLANEB_MODULO_HI = 0
  *DTV_COLOR_BANK_LO = <mode_twoplanebitmap::COLORS/$400
  *DTV_COLOR_BANK_HI = >mode_twoplanebitmap::COLORS/$400
  mode_twoplanebitmap::i#0 = 0
  to:mode_twoplanebitmap::@1
mode_twoplanebitmap::@1: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap mode_twoplanebitmap::@1
  dtv_control#292 = phi( mode_twoplanebitmap/dtv_control#38, mode_twoplanebitmap::@1/dtv_control#292 )
  mode_twoplanebitmap::i#2 = phi( mode_twoplanebitmap/mode_twoplanebitmap::i#0, mode_twoplanebitmap::@1/mode_twoplanebitmap::i#1 )
  DTV_PALETTE[mode_twoplanebitmap::i#2] = mode_twoplanebitmap::i#2
  mode_twoplanebitmap::i#1 = mode_twoplanebitmap::i#2 + rangenext(0,$f)
  mode_twoplanebitmap::$1 = mode_twoplanebitmap::i#1 != rangelast(0,$f)
  if(mode_twoplanebitmap::$1) goto mode_twoplanebitmap::@1
  to:mode_twoplanebitmap::@2
mode_twoplanebitmap::@2: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@1
  dtv_control#291 = phi( mode_twoplanebitmap::@1/dtv_control#292 )
  *BORDER_COLOR = 0
  *BG_COLOR = $70
  *BG_COLOR1 = $d4
  mode_twoplanebitmap::col#0 = mode_twoplanebitmap::COLORS
  mode_twoplanebitmap::cy#0 = 0
  to:mode_twoplanebitmap::@3
mode_twoplanebitmap::@3: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@2 mode_twoplanebitmap::@5
  dtv_control#288 = phi( mode_twoplanebitmap::@2/dtv_control#291, mode_twoplanebitmap::@5/dtv_control#278 )
  mode_twoplanebitmap::col#3 = phi( mode_twoplanebitmap::@2/mode_twoplanebitmap::col#0, mode_twoplanebitmap::@5/mode_twoplanebitmap::col#4 )
  mode_twoplanebitmap::cy#4 = phi( mode_twoplanebitmap::@2/mode_twoplanebitmap::cy#0, mode_twoplanebitmap::@5/mode_twoplanebitmap::cy#1 )
  mode_twoplanebitmap::cx#0 = 0
  to:mode_twoplanebitmap::@4
mode_twoplanebitmap::@4: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@3 mode_twoplanebitmap::@4
  dtv_control#284 = phi( mode_twoplanebitmap::@3/dtv_control#288, mode_twoplanebitmap::@4/dtv_control#284 )
  mode_twoplanebitmap::col#2 = phi( mode_twoplanebitmap::@3/mode_twoplanebitmap::col#3, mode_twoplanebitmap::@4/mode_twoplanebitmap::col#1 )
  mode_twoplanebitmap::cx#2 = phi( mode_twoplanebitmap::@3/mode_twoplanebitmap::cx#0, mode_twoplanebitmap::@4/mode_twoplanebitmap::cx#1 )
  mode_twoplanebitmap::cy#2 = phi( mode_twoplanebitmap::@3/mode_twoplanebitmap::cy#4, mode_twoplanebitmap::@4/mode_twoplanebitmap::cy#2 )
  mode_twoplanebitmap::$2 = mode_twoplanebitmap::cy#2 & $f
  mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2 * $10
  mode_twoplanebitmap::$4 = mode_twoplanebitmap::cx#2 & $f
  mode_twoplanebitmap::$5 = mode_twoplanebitmap::$3 | mode_twoplanebitmap::$4
  *mode_twoplanebitmap::col#2 = mode_twoplanebitmap::$5
  mode_twoplanebitmap::col#1 = ++ mode_twoplanebitmap::col#2
  mode_twoplanebitmap::cx#1 = mode_twoplanebitmap::cx#2 + rangenext(0,$27)
  mode_twoplanebitmap::$6 = mode_twoplanebitmap::cx#1 != rangelast(0,$27)
  if(mode_twoplanebitmap::$6) goto mode_twoplanebitmap::@4
  to:mode_twoplanebitmap::@5
mode_twoplanebitmap::@5: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@4
  dtv_control#278 = phi( mode_twoplanebitmap::@4/dtv_control#284 )
  mode_twoplanebitmap::col#4 = phi( mode_twoplanebitmap::@4/mode_twoplanebitmap::col#1 )
  mode_twoplanebitmap::cy#3 = phi( mode_twoplanebitmap::@4/mode_twoplanebitmap::cy#2 )
  mode_twoplanebitmap::cy#1 = mode_twoplanebitmap::cy#3 + rangenext(0,$18)
  mode_twoplanebitmap::$7 = mode_twoplanebitmap::cy#1 != rangelast(0,$18)
  if(mode_twoplanebitmap::$7) goto mode_twoplanebitmap::@3
  to:mode_twoplanebitmap::@6
mode_twoplanebitmap::@6: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@5
  dtv_control#273 = phi( mode_twoplanebitmap::@5/dtv_control#278 )
  mode_twoplanebitmap::gfxa#0 = mode_twoplanebitmap::PLANEA
  mode_twoplanebitmap::ay#0 = 0
  to:mode_twoplanebitmap::@7
mode_twoplanebitmap::@7: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@12 mode_twoplanebitmap::@6
  dtv_control#267 = phi( mode_twoplanebitmap::@12/dtv_control#231, mode_twoplanebitmap::@6/dtv_control#273 )
  mode_twoplanebitmap::gfxa#7 = phi( mode_twoplanebitmap::@12/mode_twoplanebitmap::gfxa#8, mode_twoplanebitmap::@6/mode_twoplanebitmap::gfxa#0 )
  mode_twoplanebitmap::ay#5 = phi( mode_twoplanebitmap::@12/mode_twoplanebitmap::ay#1, mode_twoplanebitmap::@6/mode_twoplanebitmap::ay#0 )
  mode_twoplanebitmap::ax#0 = 0
  to:mode_twoplanebitmap::@8
mode_twoplanebitmap::@8: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@10 mode_twoplanebitmap::@7
  dtv_control#260 = phi( mode_twoplanebitmap::@10/dtv_control#242, mode_twoplanebitmap::@7/dtv_control#267 )
  mode_twoplanebitmap::ax#5 = phi( mode_twoplanebitmap::@10/mode_twoplanebitmap::ax#1, mode_twoplanebitmap::@7/mode_twoplanebitmap::ax#0 )
  mode_twoplanebitmap::gfxa#5 = phi( mode_twoplanebitmap::@10/mode_twoplanebitmap::gfxa#6, mode_twoplanebitmap::@7/mode_twoplanebitmap::gfxa#7 )
  mode_twoplanebitmap::ay#2 = phi( mode_twoplanebitmap::@10/mode_twoplanebitmap::ay#4, mode_twoplanebitmap::@7/mode_twoplanebitmap::ay#5 )
  mode_twoplanebitmap::$8 = mode_twoplanebitmap::ay#2 & 4
  mode_twoplanebitmap::$9 = mode_twoplanebitmap::$8 == 0
  if(mode_twoplanebitmap::$9) goto mode_twoplanebitmap::@9
  to:mode_twoplanebitmap::@11
mode_twoplanebitmap::@9: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@8
  dtv_control#251 = phi( mode_twoplanebitmap::@8/dtv_control#260 )
  mode_twoplanebitmap::ay#7 = phi( mode_twoplanebitmap::@8/mode_twoplanebitmap::ay#2 )
  mode_twoplanebitmap::ax#4 = phi( mode_twoplanebitmap::@8/mode_twoplanebitmap::ax#5 )
  mode_twoplanebitmap::gfxa#3 = phi( mode_twoplanebitmap::@8/mode_twoplanebitmap::gfxa#5 )
  *mode_twoplanebitmap::gfxa#3 = 0
  mode_twoplanebitmap::gfxa#1 = ++ mode_twoplanebitmap::gfxa#3
  to:mode_twoplanebitmap::@10
mode_twoplanebitmap::@11: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@8
  dtv_control#250 = phi( mode_twoplanebitmap::@8/dtv_control#260 )
  mode_twoplanebitmap::ay#6 = phi( mode_twoplanebitmap::@8/mode_twoplanebitmap::ay#2 )
  mode_twoplanebitmap::ax#3 = phi( mode_twoplanebitmap::@8/mode_twoplanebitmap::ax#5 )
  mode_twoplanebitmap::gfxa#4 = phi( mode_twoplanebitmap::@8/mode_twoplanebitmap::gfxa#5 )
  *mode_twoplanebitmap::gfxa#4 = $ff
  mode_twoplanebitmap::gfxa#2 = ++ mode_twoplanebitmap::gfxa#4
  to:mode_twoplanebitmap::@10
mode_twoplanebitmap::@10: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@11 mode_twoplanebitmap::@9
  dtv_control#242 = phi( mode_twoplanebitmap::@11/dtv_control#250, mode_twoplanebitmap::@9/dtv_control#251 )
  mode_twoplanebitmap::gfxa#6 = phi( mode_twoplanebitmap::@11/mode_twoplanebitmap::gfxa#2, mode_twoplanebitmap::@9/mode_twoplanebitmap::gfxa#1 )
  mode_twoplanebitmap::ay#4 = phi( mode_twoplanebitmap::@11/mode_twoplanebitmap::ay#6, mode_twoplanebitmap::@9/mode_twoplanebitmap::ay#7 )
  mode_twoplanebitmap::ax#2 = phi( mode_twoplanebitmap::@11/mode_twoplanebitmap::ax#3, mode_twoplanebitmap::@9/mode_twoplanebitmap::ax#4 )
  mode_twoplanebitmap::ax#1 = mode_twoplanebitmap::ax#2 + rangenext(0,$27)
  mode_twoplanebitmap::$10 = mode_twoplanebitmap::ax#1 != rangelast(0,$27)
  if(mode_twoplanebitmap::$10) goto mode_twoplanebitmap::@8
  to:mode_twoplanebitmap::@12
mode_twoplanebitmap::@12: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@10
  dtv_control#231 = phi( mode_twoplanebitmap::@10/dtv_control#242 )
  mode_twoplanebitmap::gfxa#8 = phi( mode_twoplanebitmap::@10/mode_twoplanebitmap::gfxa#6 )
  mode_twoplanebitmap::ay#3 = phi( mode_twoplanebitmap::@10/mode_twoplanebitmap::ay#4 )
  mode_twoplanebitmap::ay#1 = mode_twoplanebitmap::ay#3 + rangenext(0,$c7)
  mode_twoplanebitmap::$11 = mode_twoplanebitmap::ay#1 != rangelast(0,$c7)
  if(mode_twoplanebitmap::$11) goto mode_twoplanebitmap::@7
  to:mode_twoplanebitmap::@13
mode_twoplanebitmap::@13: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@12
  dtv_control#215 = phi( mode_twoplanebitmap::@12/dtv_control#231 )
  mode_twoplanebitmap::gfxb#0 = mode_twoplanebitmap::PLANEB
  mode_twoplanebitmap::by#0 = 0
  to:mode_twoplanebitmap::@14
mode_twoplanebitmap::@14: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@13 mode_twoplanebitmap::@16
  dtv_control#200 = phi( mode_twoplanebitmap::@13/dtv_control#215, mode_twoplanebitmap::@16/dtv_control#156 )
  mode_twoplanebitmap::by#4 = phi( mode_twoplanebitmap::@13/mode_twoplanebitmap::by#0, mode_twoplanebitmap::@16/mode_twoplanebitmap::by#1 )
  mode_twoplanebitmap::gfxb#3 = phi( mode_twoplanebitmap::@13/mode_twoplanebitmap::gfxb#0, mode_twoplanebitmap::@16/mode_twoplanebitmap::gfxb#4 )
  mode_twoplanebitmap::bx#0 = 0
  to:mode_twoplanebitmap::@15
mode_twoplanebitmap::@15: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@14 mode_twoplanebitmap::@15
  dtv_control#185 = phi( mode_twoplanebitmap::@14/dtv_control#200, mode_twoplanebitmap::@15/dtv_control#185 )
  mode_twoplanebitmap::by#3 = phi( mode_twoplanebitmap::@14/mode_twoplanebitmap::by#4, mode_twoplanebitmap::@15/mode_twoplanebitmap::by#3 )
  mode_twoplanebitmap::bx#2 = phi( mode_twoplanebitmap::@14/mode_twoplanebitmap::bx#0, mode_twoplanebitmap::@15/mode_twoplanebitmap::bx#1 )
  mode_twoplanebitmap::gfxb#2 = phi( mode_twoplanebitmap::@14/mode_twoplanebitmap::gfxb#3, mode_twoplanebitmap::@15/mode_twoplanebitmap::gfxb#1 )
  *mode_twoplanebitmap::gfxb#2 = $f
  mode_twoplanebitmap::gfxb#1 = ++ mode_twoplanebitmap::gfxb#2
  mode_twoplanebitmap::bx#1 = mode_twoplanebitmap::bx#2 + rangenext(0,$27)
  mode_twoplanebitmap::$12 = mode_twoplanebitmap::bx#1 != rangelast(0,$27)
  if(mode_twoplanebitmap::$12) goto mode_twoplanebitmap::@15
  to:mode_twoplanebitmap::@16
mode_twoplanebitmap::@16: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@15
  dtv_control#156 = phi( mode_twoplanebitmap::@15/dtv_control#185 )
  mode_twoplanebitmap::gfxb#4 = phi( mode_twoplanebitmap::@15/mode_twoplanebitmap::gfxb#1 )
  mode_twoplanebitmap::by#2 = phi( mode_twoplanebitmap::@15/mode_twoplanebitmap::by#3 )
  mode_twoplanebitmap::by#1 = mode_twoplanebitmap::by#2 + rangenext(0,$c7)
  mode_twoplanebitmap::$13 = mode_twoplanebitmap::by#1 != rangelast(0,$c7)
  if(mode_twoplanebitmap::$13) goto mode_twoplanebitmap::@14
  to:mode_twoplanebitmap::@17
mode_twoplanebitmap::@17: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@16
  dtv_control#126 = phi( mode_twoplanebitmap::@16/dtv_control#156 )
  call mode_ctrl 
  to:mode_twoplanebitmap::@18
mode_twoplanebitmap::@18: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@17
  dtv_control#88 = phi( mode_twoplanebitmap::@17/dtv_control#15 )
  dtv_control#39 = dtv_control#88
  to:mode_twoplanebitmap::@return
mode_twoplanebitmap::@return: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@18
  dtv_control#89 = phi( mode_twoplanebitmap::@18/dtv_control#39 )
  dtv_control#40 = dtv_control#89
  return 
  to:@return

void mode_sixsfred()
mode_sixsfred: scope:[mode_sixsfred]  from menu::@28
  dtv_control#41 = DTV_HIGHCOLOR|DTV_LINEAR
  *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR
  *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
  *VIC_CONTROL2 = VIC_MCM|VIC_CSEL
  *DTV_PLANEA_START_LO = <mode_sixsfred::PLANEA
  *DTV_PLANEA_START_MI = >mode_sixsfred::PLANEA
  *DTV_PLANEA_START_HI = 0
  *DTV_PLANEA_STEP = 1
  *DTV_PLANEA_MODULO_LO = 0
  *DTV_PLANEA_MODULO_HI = 0
  *DTV_PLANEB_START_LO = <mode_sixsfred::PLANEB
  *DTV_PLANEB_START_MI = >mode_sixsfred::PLANEB
  *DTV_PLANEB_START_HI = 0
  *DTV_PLANEB_STEP = 1
  *DTV_PLANEB_MODULO_LO = 0
  *DTV_PLANEB_MODULO_HI = 0
  *DTV_COLOR_BANK_LO = <mode_sixsfred::COLORS/$400
  *DTV_COLOR_BANK_HI = >mode_sixsfred::COLORS/$400
  mode_sixsfred::i#0 = 0
  to:mode_sixsfred::@1
mode_sixsfred::@1: scope:[mode_sixsfred]  from mode_sixsfred mode_sixsfred::@1
  dtv_control#289 = phi( mode_sixsfred/dtv_control#41, mode_sixsfred::@1/dtv_control#289 )
  mode_sixsfred::i#2 = phi( mode_sixsfred/mode_sixsfred::i#0, mode_sixsfred::@1/mode_sixsfred::i#1 )
  DTV_PALETTE[mode_sixsfred::i#2] = mode_sixsfred::i#2
  mode_sixsfred::i#1 = mode_sixsfred::i#2 + rangenext(0,$f)
  mode_sixsfred::$1 = mode_sixsfred::i#1 != rangelast(0,$f)
  if(mode_sixsfred::$1) goto mode_sixsfred::@1
  to:mode_sixsfred::@2
mode_sixsfred::@2: scope:[mode_sixsfred]  from mode_sixsfred::@1
  dtv_control#285 = phi( mode_sixsfred::@1/dtv_control#289 )
  *BORDER_COLOR = 0
  mode_sixsfred::col#0 = mode_sixsfred::COLORS
  mode_sixsfred::cy#0 = 0
  to:mode_sixsfred::@3
mode_sixsfred::@3: scope:[mode_sixsfred]  from mode_sixsfred::@2 mode_sixsfred::@5
  dtv_control#279 = phi( mode_sixsfred::@2/dtv_control#285, mode_sixsfred::@5/dtv_control#268 )
  mode_sixsfred::col#3 = phi( mode_sixsfred::@2/mode_sixsfred::col#0, mode_sixsfred::@5/mode_sixsfred::col#4 )
  mode_sixsfred::cy#4 = phi( mode_sixsfred::@2/mode_sixsfred::cy#0, mode_sixsfred::@5/mode_sixsfred::cy#1 )
  mode_sixsfred::cx#0 = 0
  to:mode_sixsfred::@4
mode_sixsfred::@4: scope:[mode_sixsfred]  from mode_sixsfred::@3 mode_sixsfred::@4
  dtv_control#274 = phi( mode_sixsfred::@3/dtv_control#279, mode_sixsfred::@4/dtv_control#274 )
  mode_sixsfred::col#2 = phi( mode_sixsfred::@3/mode_sixsfred::col#3, mode_sixsfred::@4/mode_sixsfred::col#1 )
  mode_sixsfred::cy#2 = phi( mode_sixsfred::@3/mode_sixsfred::cy#4, mode_sixsfred::@4/mode_sixsfred::cy#2 )
  mode_sixsfred::cx#2 = phi( mode_sixsfred::@3/mode_sixsfred::cx#0, mode_sixsfred::@4/mode_sixsfred::cx#1 )
  mode_sixsfred::$2 = mode_sixsfred::cx#2 + mode_sixsfred::cy#2
  mode_sixsfred::$3 = mode_sixsfred::$2 & $f
  *mode_sixsfred::col#2 = mode_sixsfred::$3
  mode_sixsfred::col#1 = ++ mode_sixsfred::col#2
  mode_sixsfred::cx#1 = mode_sixsfred::cx#2 + rangenext(0,$27)
  mode_sixsfred::$4 = mode_sixsfred::cx#1 != rangelast(0,$27)
  if(mode_sixsfred::$4) goto mode_sixsfred::@4
  to:mode_sixsfred::@5
mode_sixsfred::@5: scope:[mode_sixsfred]  from mode_sixsfred::@4
  dtv_control#268 = phi( mode_sixsfred::@4/dtv_control#274 )
  mode_sixsfred::col#4 = phi( mode_sixsfred::@4/mode_sixsfred::col#1 )
  mode_sixsfred::cy#3 = phi( mode_sixsfred::@4/mode_sixsfred::cy#2 )
  mode_sixsfred::cy#1 = mode_sixsfred::cy#3 + rangenext(0,$18)
  mode_sixsfred::$5 = mode_sixsfred::cy#1 != rangelast(0,$18)
  if(mode_sixsfred::$5) goto mode_sixsfred::@3
  to:mode_sixsfred::@6
mode_sixsfred::@6: scope:[mode_sixsfred]  from mode_sixsfred::@5
  dtv_control#261 = phi( mode_sixsfred::@5/dtv_control#268 )
  mode_sixsfred::gfxa#0 = mode_sixsfred::PLANEA
  mode_sixsfred::ay#0 = 0
  to:mode_sixsfred::@7
mode_sixsfred::@7: scope:[mode_sixsfred]  from mode_sixsfred::@6 mode_sixsfred::@9
  dtv_control#252 = phi( mode_sixsfred::@6/dtv_control#261, mode_sixsfred::@9/dtv_control#232 )
  mode_sixsfred::gfxa#3 = phi( mode_sixsfred::@6/mode_sixsfred::gfxa#0, mode_sixsfred::@9/mode_sixsfred::gfxa#4 )
  mode_sixsfred::ay#4 = phi( mode_sixsfred::@6/mode_sixsfred::ay#0, mode_sixsfred::@9/mode_sixsfred::ay#1 )
  mode_sixsfred::ax#0 = 0
  to:mode_sixsfred::@8
mode_sixsfred::@8: scope:[mode_sixsfred]  from mode_sixsfred::@7 mode_sixsfred::@8
  dtv_control#243 = phi( mode_sixsfred::@7/dtv_control#252, mode_sixsfred::@8/dtv_control#243 )
  mode_sixsfred::ax#2 = phi( mode_sixsfred::@7/mode_sixsfred::ax#0, mode_sixsfred::@8/mode_sixsfred::ax#1 )
  mode_sixsfred::gfxa#2 = phi( mode_sixsfred::@7/mode_sixsfred::gfxa#3, mode_sixsfred::@8/mode_sixsfred::gfxa#1 )
  mode_sixsfred::ay#2 = phi( mode_sixsfred::@7/mode_sixsfred::ay#4, mode_sixsfred::@8/mode_sixsfred::ay#2 )
  mode_sixsfred::$6 = mode_sixsfred::ay#2 / 2
  mode_sixsfred::$7 = mode_sixsfred::$6 & 3
  mode_sixsfred::row#0 = mode_sixsfred::$7
  *mode_sixsfred::gfxa#2 = mode_sixsfred::row_bitmask[mode_sixsfred::row#0]
  mode_sixsfred::gfxa#1 = ++ mode_sixsfred::gfxa#2
  mode_sixsfred::ax#1 = mode_sixsfred::ax#2 + rangenext(0,$27)
  mode_sixsfred::$8 = mode_sixsfred::ax#1 != rangelast(0,$27)
  if(mode_sixsfred::$8) goto mode_sixsfred::@8
  to:mode_sixsfred::@9
mode_sixsfred::@9: scope:[mode_sixsfred]  from mode_sixsfred::@8
  dtv_control#232 = phi( mode_sixsfred::@8/dtv_control#243 )
  mode_sixsfred::gfxa#4 = phi( mode_sixsfred::@8/mode_sixsfred::gfxa#1 )
  mode_sixsfred::ay#3 = phi( mode_sixsfred::@8/mode_sixsfred::ay#2 )
  mode_sixsfred::ay#1 = mode_sixsfred::ay#3 + rangenext(0,$c7)
  mode_sixsfred::$9 = mode_sixsfred::ay#1 != rangelast(0,$c7)
  if(mode_sixsfred::$9) goto mode_sixsfred::@7
  to:mode_sixsfred::@10
mode_sixsfred::@10: scope:[mode_sixsfred]  from mode_sixsfred::@9
  dtv_control#216 = phi( mode_sixsfred::@9/dtv_control#232 )
  mode_sixsfred::gfxb#0 = mode_sixsfred::PLANEB
  mode_sixsfred::by#0 = 0
  to:mode_sixsfred::@11
mode_sixsfred::@11: scope:[mode_sixsfred]  from mode_sixsfred::@10 mode_sixsfred::@13
  dtv_control#201 = phi( mode_sixsfred::@10/dtv_control#216, mode_sixsfred::@13/dtv_control#157 )
  mode_sixsfred::by#4 = phi( mode_sixsfred::@10/mode_sixsfred::by#0, mode_sixsfred::@13/mode_sixsfred::by#1 )
  mode_sixsfred::gfxb#3 = phi( mode_sixsfred::@10/mode_sixsfred::gfxb#0, mode_sixsfred::@13/mode_sixsfred::gfxb#4 )
  mode_sixsfred::bx#0 = 0
  to:mode_sixsfred::@12
mode_sixsfred::@12: scope:[mode_sixsfred]  from mode_sixsfred::@11 mode_sixsfred::@12
  dtv_control#186 = phi( mode_sixsfred::@11/dtv_control#201, mode_sixsfred::@12/dtv_control#186 )
  mode_sixsfred::by#3 = phi( mode_sixsfred::@11/mode_sixsfred::by#4, mode_sixsfred::@12/mode_sixsfred::by#3 )
  mode_sixsfred::bx#2 = phi( mode_sixsfred::@11/mode_sixsfred::bx#0, mode_sixsfred::@12/mode_sixsfred::bx#1 )
  mode_sixsfred::gfxb#2 = phi( mode_sixsfred::@11/mode_sixsfred::gfxb#3, mode_sixsfred::@12/mode_sixsfred::gfxb#1 )
  *mode_sixsfred::gfxb#2 = $1b
  mode_sixsfred::gfxb#1 = ++ mode_sixsfred::gfxb#2
  mode_sixsfred::bx#1 = mode_sixsfred::bx#2 + rangenext(0,$27)
  mode_sixsfred::$10 = mode_sixsfred::bx#1 != rangelast(0,$27)
  if(mode_sixsfred::$10) goto mode_sixsfred::@12
  to:mode_sixsfred::@13
mode_sixsfred::@13: scope:[mode_sixsfred]  from mode_sixsfred::@12
  dtv_control#157 = phi( mode_sixsfred::@12/dtv_control#186 )
  mode_sixsfred::gfxb#4 = phi( mode_sixsfred::@12/mode_sixsfred::gfxb#1 )
  mode_sixsfred::by#2 = phi( mode_sixsfred::@12/mode_sixsfred::by#3 )
  mode_sixsfred::by#1 = mode_sixsfred::by#2 + rangenext(0,$c7)
  mode_sixsfred::$11 = mode_sixsfred::by#1 != rangelast(0,$c7)
  if(mode_sixsfred::$11) goto mode_sixsfred::@11
  to:mode_sixsfred::@14
mode_sixsfred::@14: scope:[mode_sixsfred]  from mode_sixsfred::@13
  dtv_control#127 = phi( mode_sixsfred::@13/dtv_control#157 )
  call mode_ctrl 
  to:mode_sixsfred::@15
mode_sixsfred::@15: scope:[mode_sixsfred]  from mode_sixsfred::@14
  dtv_control#90 = phi( mode_sixsfred::@14/dtv_control#15 )
  dtv_control#42 = dtv_control#90
  to:mode_sixsfred::@return
mode_sixsfred::@return: scope:[mode_sixsfred]  from mode_sixsfred::@15
  dtv_control#91 = phi( mode_sixsfred::@15/dtv_control#42 )
  dtv_control#43 = dtv_control#91
  return 
  to:@return

void mode_sixsfred2()
mode_sixsfred2: scope:[mode_sixsfred2]  from menu::@26
  dtv_control#44 = DTV_LINEAR
  *DTV_CONTROL = DTV_LINEAR
  *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
  *VIC_CONTROL2 = VIC_MCM|VIC_CSEL
  *DTV_PLANEA_START_LO = <mode_sixsfred2::PLANEA
  *DTV_PLANEA_START_MI = >mode_sixsfred2::PLANEA
  *DTV_PLANEA_START_HI = 0
  *DTV_PLANEA_STEP = 1
  *DTV_PLANEA_MODULO_LO = 0
  *DTV_PLANEA_MODULO_HI = 0
  *DTV_PLANEB_START_LO = <mode_sixsfred2::PLANEB
  *DTV_PLANEB_START_MI = >mode_sixsfred2::PLANEB
  *DTV_PLANEB_START_HI = 0
  *DTV_PLANEB_STEP = 1
  *DTV_PLANEB_MODULO_LO = 0
  *DTV_PLANEB_MODULO_HI = 0
  *DTV_COLOR_BANK_LO = <mode_sixsfred2::COLORS/$400
  *DTV_COLOR_BANK_HI = >mode_sixsfred2::COLORS/$400
  mode_sixsfred2::i#0 = 0
  to:mode_sixsfred2::@1
mode_sixsfred2::@1: scope:[mode_sixsfred2]  from mode_sixsfred2 mode_sixsfred2::@1
  dtv_control#290 = phi( mode_sixsfred2/dtv_control#44, mode_sixsfred2::@1/dtv_control#290 )
  mode_sixsfred2::i#2 = phi( mode_sixsfred2/mode_sixsfred2::i#0, mode_sixsfred2::@1/mode_sixsfred2::i#1 )
  DTV_PALETTE[mode_sixsfred2::i#2] = mode_sixsfred2::i#2
  mode_sixsfred2::i#1 = mode_sixsfred2::i#2 + rangenext(0,$f)
  mode_sixsfred2::$1 = mode_sixsfred2::i#1 != rangelast(0,$f)
  if(mode_sixsfred2::$1) goto mode_sixsfred2::@1
  to:mode_sixsfred2::@2
mode_sixsfred2::@2: scope:[mode_sixsfred2]  from mode_sixsfred2::@1
  dtv_control#286 = phi( mode_sixsfred2::@1/dtv_control#290 )
  *BORDER_COLOR = 0
  mode_sixsfred2::col#0 = mode_sixsfred2::COLORS
  mode_sixsfred2::cy#0 = 0
  to:mode_sixsfred2::@3
mode_sixsfred2::@3: scope:[mode_sixsfred2]  from mode_sixsfred2::@2 mode_sixsfred2::@5
  dtv_control#280 = phi( mode_sixsfred2::@2/dtv_control#286, mode_sixsfred2::@5/dtv_control#269 )
  mode_sixsfred2::col#3 = phi( mode_sixsfred2::@2/mode_sixsfred2::col#0, mode_sixsfred2::@5/mode_sixsfred2::col#4 )
  mode_sixsfred2::cy#4 = phi( mode_sixsfred2::@2/mode_sixsfred2::cy#0, mode_sixsfred2::@5/mode_sixsfred2::cy#1 )
  mode_sixsfred2::cx#0 = 0
  to:mode_sixsfred2::@4
mode_sixsfred2::@4: scope:[mode_sixsfred2]  from mode_sixsfred2::@3 mode_sixsfred2::@4
  dtv_control#275 = phi( mode_sixsfred2::@3/dtv_control#280, mode_sixsfred2::@4/dtv_control#275 )
  mode_sixsfred2::col#2 = phi( mode_sixsfred2::@3/mode_sixsfred2::col#3, mode_sixsfred2::@4/mode_sixsfred2::col#1 )
  mode_sixsfred2::cy#2 = phi( mode_sixsfred2::@3/mode_sixsfred2::cy#4, mode_sixsfred2::@4/mode_sixsfred2::cy#2 )
  mode_sixsfred2::cx#2 = phi( mode_sixsfred2::@3/mode_sixsfred2::cx#0, mode_sixsfred2::@4/mode_sixsfred2::cx#1 )
  mode_sixsfred2::$2 = mode_sixsfred2::cx#2 & 3
  mode_sixsfred2::$3 = mode_sixsfred2::$2 * $10
  mode_sixsfred2::$4 = mode_sixsfred2::cy#2 & 3
  mode_sixsfred2::$5 = mode_sixsfred2::$3 | mode_sixsfred2::$4
  *mode_sixsfred2::col#2 = mode_sixsfred2::$5
  mode_sixsfred2::col#1 = ++ mode_sixsfred2::col#2
  mode_sixsfred2::cx#1 = mode_sixsfred2::cx#2 + rangenext(0,$27)
  mode_sixsfred2::$6 = mode_sixsfred2::cx#1 != rangelast(0,$27)
  if(mode_sixsfred2::$6) goto mode_sixsfred2::@4
  to:mode_sixsfred2::@5
mode_sixsfred2::@5: scope:[mode_sixsfred2]  from mode_sixsfred2::@4
  dtv_control#269 = phi( mode_sixsfred2::@4/dtv_control#275 )
  mode_sixsfred2::col#4 = phi( mode_sixsfred2::@4/mode_sixsfred2::col#1 )
  mode_sixsfred2::cy#3 = phi( mode_sixsfred2::@4/mode_sixsfred2::cy#2 )
  mode_sixsfred2::cy#1 = mode_sixsfred2::cy#3 + rangenext(0,$18)
  mode_sixsfred2::$7 = mode_sixsfred2::cy#1 != rangelast(0,$18)
  if(mode_sixsfred2::$7) goto mode_sixsfred2::@3
  to:mode_sixsfred2::@6
mode_sixsfred2::@6: scope:[mode_sixsfred2]  from mode_sixsfred2::@5
  dtv_control#262 = phi( mode_sixsfred2::@5/dtv_control#269 )
  mode_sixsfred2::gfxa#0 = mode_sixsfred2::PLANEA
  mode_sixsfred2::ay#0 = 0
  to:mode_sixsfred2::@7
mode_sixsfred2::@7: scope:[mode_sixsfred2]  from mode_sixsfred2::@6 mode_sixsfred2::@9
  dtv_control#253 = phi( mode_sixsfred2::@6/dtv_control#262, mode_sixsfred2::@9/dtv_control#233 )
  mode_sixsfred2::gfxa#3 = phi( mode_sixsfred2::@6/mode_sixsfred2::gfxa#0, mode_sixsfred2::@9/mode_sixsfred2::gfxa#4 )
  mode_sixsfred2::ay#4 = phi( mode_sixsfred2::@6/mode_sixsfred2::ay#0, mode_sixsfred2::@9/mode_sixsfred2::ay#1 )
  mode_sixsfred2::ax#0 = 0
  to:mode_sixsfred2::@8
mode_sixsfred2::@8: scope:[mode_sixsfred2]  from mode_sixsfred2::@7 mode_sixsfred2::@8
  dtv_control#244 = phi( mode_sixsfred2::@7/dtv_control#253, mode_sixsfred2::@8/dtv_control#244 )
  mode_sixsfred2::ax#2 = phi( mode_sixsfred2::@7/mode_sixsfred2::ax#0, mode_sixsfred2::@8/mode_sixsfred2::ax#1 )
  mode_sixsfred2::gfxa#2 = phi( mode_sixsfred2::@7/mode_sixsfred2::gfxa#3, mode_sixsfred2::@8/mode_sixsfred2::gfxa#1 )
  mode_sixsfred2::ay#2 = phi( mode_sixsfred2::@7/mode_sixsfred2::ay#4, mode_sixsfred2::@8/mode_sixsfred2::ay#2 )
  mode_sixsfred2::$8 = mode_sixsfred2::ay#2 / 2
  mode_sixsfred2::$9 = mode_sixsfred2::$8 & 3
  mode_sixsfred2::row#0 = mode_sixsfred2::$9
  *mode_sixsfred2::gfxa#2 = mode_sixsfred2::row_bitmask[mode_sixsfred2::row#0]
  mode_sixsfred2::gfxa#1 = ++ mode_sixsfred2::gfxa#2
  mode_sixsfred2::ax#1 = mode_sixsfred2::ax#2 + rangenext(0,$27)
  mode_sixsfred2::$10 = mode_sixsfred2::ax#1 != rangelast(0,$27)
  if(mode_sixsfred2::$10) goto mode_sixsfred2::@8
  to:mode_sixsfred2::@9
mode_sixsfred2::@9: scope:[mode_sixsfred2]  from mode_sixsfred2::@8
  dtv_control#233 = phi( mode_sixsfred2::@8/dtv_control#244 )
  mode_sixsfred2::gfxa#4 = phi( mode_sixsfred2::@8/mode_sixsfred2::gfxa#1 )
  mode_sixsfred2::ay#3 = phi( mode_sixsfred2::@8/mode_sixsfred2::ay#2 )
  mode_sixsfred2::ay#1 = mode_sixsfred2::ay#3 + rangenext(0,$c7)
  mode_sixsfred2::$11 = mode_sixsfred2::ay#1 != rangelast(0,$c7)
  if(mode_sixsfred2::$11) goto mode_sixsfred2::@7
  to:mode_sixsfred2::@10
mode_sixsfred2::@10: scope:[mode_sixsfred2]  from mode_sixsfred2::@9
  dtv_control#217 = phi( mode_sixsfred2::@9/dtv_control#233 )
  mode_sixsfred2::gfxb#0 = mode_sixsfred2::PLANEB
  mode_sixsfred2::by#0 = 0
  to:mode_sixsfred2::@11
mode_sixsfred2::@11: scope:[mode_sixsfred2]  from mode_sixsfred2::@10 mode_sixsfred2::@13
  dtv_control#202 = phi( mode_sixsfred2::@10/dtv_control#217, mode_sixsfred2::@13/dtv_control#158 )
  mode_sixsfred2::by#4 = phi( mode_sixsfred2::@10/mode_sixsfred2::by#0, mode_sixsfred2::@13/mode_sixsfred2::by#1 )
  mode_sixsfred2::gfxb#3 = phi( mode_sixsfred2::@10/mode_sixsfred2::gfxb#0, mode_sixsfred2::@13/mode_sixsfred2::gfxb#4 )
  mode_sixsfred2::bx#0 = 0
  to:mode_sixsfred2::@12
mode_sixsfred2::@12: scope:[mode_sixsfred2]  from mode_sixsfred2::@11 mode_sixsfred2::@12
  dtv_control#187 = phi( mode_sixsfred2::@11/dtv_control#202, mode_sixsfred2::@12/dtv_control#187 )
  mode_sixsfred2::by#3 = phi( mode_sixsfred2::@11/mode_sixsfred2::by#4, mode_sixsfred2::@12/mode_sixsfred2::by#3 )
  mode_sixsfred2::bx#2 = phi( mode_sixsfred2::@11/mode_sixsfred2::bx#0, mode_sixsfred2::@12/mode_sixsfred2::bx#1 )
  mode_sixsfred2::gfxb#2 = phi( mode_sixsfred2::@11/mode_sixsfred2::gfxb#3, mode_sixsfred2::@12/mode_sixsfred2::gfxb#1 )
  *mode_sixsfred2::gfxb#2 = $1b
  mode_sixsfred2::gfxb#1 = ++ mode_sixsfred2::gfxb#2
  mode_sixsfred2::bx#1 = mode_sixsfred2::bx#2 + rangenext(0,$27)
  mode_sixsfred2::$12 = mode_sixsfred2::bx#1 != rangelast(0,$27)
  if(mode_sixsfred2::$12) goto mode_sixsfred2::@12
  to:mode_sixsfred2::@13
mode_sixsfred2::@13: scope:[mode_sixsfred2]  from mode_sixsfred2::@12
  dtv_control#158 = phi( mode_sixsfred2::@12/dtv_control#187 )
  mode_sixsfred2::gfxb#4 = phi( mode_sixsfred2::@12/mode_sixsfred2::gfxb#1 )
  mode_sixsfred2::by#2 = phi( mode_sixsfred2::@12/mode_sixsfred2::by#3 )
  mode_sixsfred2::by#1 = mode_sixsfred2::by#2 + rangenext(0,$c7)
  mode_sixsfred2::$13 = mode_sixsfred2::by#1 != rangelast(0,$c7)
  if(mode_sixsfred2::$13) goto mode_sixsfred2::@11
  to:mode_sixsfred2::@14
mode_sixsfred2::@14: scope:[mode_sixsfred2]  from mode_sixsfred2::@13
  dtv_control#128 = phi( mode_sixsfred2::@13/dtv_control#158 )
  call mode_ctrl 
  to:mode_sixsfred2::@15
mode_sixsfred2::@15: scope:[mode_sixsfred2]  from mode_sixsfred2::@14
  dtv_control#92 = phi( mode_sixsfred2::@14/dtv_control#15 )
  dtv_control#45 = dtv_control#92
  to:mode_sixsfred2::@return
mode_sixsfred2::@return: scope:[mode_sixsfred2]  from mode_sixsfred2::@15
  dtv_control#93 = phi( mode_sixsfred2::@15/dtv_control#45 )
  dtv_control#46 = dtv_control#93
  return 
  to:@return

void mode_8bpppixelcell()
mode_8bpppixelcell: scope:[mode_8bpppixelcell]  from menu::@29
  dtv_control#47 = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
  *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
  *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3
  *VIC_CONTROL2 = VIC_MCM|VIC_CSEL
  *DTV_PLANEA_START_LO = <mode_8bpppixelcell::PLANEA
  *DTV_PLANEA_START_MI = >mode_8bpppixelcell::PLANEA
  *DTV_PLANEA_START_HI = 0
  *DTV_PLANEA_STEP = 1
  *DTV_PLANEA_MODULO_LO = 0
  *DTV_PLANEA_MODULO_HI = 0
  *DTV_PLANEB_START_LO = <mode_8bpppixelcell::PLANEB
  *DTV_PLANEB_START_MI = >mode_8bpppixelcell::PLANEB
  *DTV_PLANEB_START_HI = 0
  *DTV_PLANEB_STEP = 0
  *DTV_PLANEB_MODULO_LO = 0
  *DTV_PLANEB_MODULO_HI = 0
  *BORDER_COLOR = 0
  mode_8bpppixelcell::i#0 = 0
  to:mode_8bpppixelcell::@1
mode_8bpppixelcell::@1: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell mode_8bpppixelcell::@1
  dtv_control#287 = phi( mode_8bpppixelcell/dtv_control#47, mode_8bpppixelcell::@1/dtv_control#287 )
  mode_8bpppixelcell::i#2 = phi( mode_8bpppixelcell/mode_8bpppixelcell::i#0, mode_8bpppixelcell::@1/mode_8bpppixelcell::i#1 )
  DTV_PALETTE[mode_8bpppixelcell::i#2] = mode_8bpppixelcell::i#2
  mode_8bpppixelcell::i#1 = mode_8bpppixelcell::i#2 + rangenext(0,$f)
  mode_8bpppixelcell::$1 = mode_8bpppixelcell::i#1 != rangelast(0,$f)
  if(mode_8bpppixelcell::$1) goto mode_8bpppixelcell::@1
  to:mode_8bpppixelcell::@2
mode_8bpppixelcell::@2: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@1
  dtv_control#281 = phi( mode_8bpppixelcell::@1/dtv_control#287 )
  mode_8bpppixelcell::gfxa#0 = mode_8bpppixelcell::PLANEA
  mode_8bpppixelcell::ay#0 = 0
  to:mode_8bpppixelcell::@3
mode_8bpppixelcell::@3: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@2 mode_8bpppixelcell::@5
  dtv_control#276 = phi( mode_8bpppixelcell::@2/dtv_control#281, mode_8bpppixelcell::@5/dtv_control#263 )
  mode_8bpppixelcell::gfxa#3 = phi( mode_8bpppixelcell::@2/mode_8bpppixelcell::gfxa#0, mode_8bpppixelcell::@5/mode_8bpppixelcell::gfxa#4 )
  mode_8bpppixelcell::ay#4 = phi( mode_8bpppixelcell::@2/mode_8bpppixelcell::ay#0, mode_8bpppixelcell::@5/mode_8bpppixelcell::ay#1 )
  mode_8bpppixelcell::ax#0 = 0
  to:mode_8bpppixelcell::@4
mode_8bpppixelcell::@4: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@3 mode_8bpppixelcell::@4
  dtv_control#270 = phi( mode_8bpppixelcell::@3/dtv_control#276, mode_8bpppixelcell::@4/dtv_control#270 )
  mode_8bpppixelcell::gfxa#2 = phi( mode_8bpppixelcell::@3/mode_8bpppixelcell::gfxa#3, mode_8bpppixelcell::@4/mode_8bpppixelcell::gfxa#1 )
  mode_8bpppixelcell::ax#2 = phi( mode_8bpppixelcell::@3/mode_8bpppixelcell::ax#0, mode_8bpppixelcell::@4/mode_8bpppixelcell::ax#1 )
  mode_8bpppixelcell::ay#2 = phi( mode_8bpppixelcell::@3/mode_8bpppixelcell::ay#4, mode_8bpppixelcell::@4/mode_8bpppixelcell::ay#2 )
  mode_8bpppixelcell::$2 = mode_8bpppixelcell::ay#2 & $f
  mode_8bpppixelcell::$3 = mode_8bpppixelcell::$2 * $10
  mode_8bpppixelcell::$4 = mode_8bpppixelcell::ax#2 & $f
  mode_8bpppixelcell::$5 = mode_8bpppixelcell::$3 | mode_8bpppixelcell::$4
  *mode_8bpppixelcell::gfxa#2 = mode_8bpppixelcell::$5
  mode_8bpppixelcell::gfxa#1 = ++ mode_8bpppixelcell::gfxa#2
  mode_8bpppixelcell::ax#1 = mode_8bpppixelcell::ax#2 + rangenext(0,$27)
  mode_8bpppixelcell::$6 = mode_8bpppixelcell::ax#1 != rangelast(0,$27)
  if(mode_8bpppixelcell::$6) goto mode_8bpppixelcell::@4
  to:mode_8bpppixelcell::@5
mode_8bpppixelcell::@5: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@4
  dtv_control#263 = phi( mode_8bpppixelcell::@4/dtv_control#270 )
  mode_8bpppixelcell::gfxa#4 = phi( mode_8bpppixelcell::@4/mode_8bpppixelcell::gfxa#1 )
  mode_8bpppixelcell::ay#3 = phi( mode_8bpppixelcell::@4/mode_8bpppixelcell::ay#2 )
  mode_8bpppixelcell::ay#1 = mode_8bpppixelcell::ay#3 + rangenext(0,$18)
  mode_8bpppixelcell::$7 = mode_8bpppixelcell::ay#1 != rangelast(0,$18)
  if(mode_8bpppixelcell::$7) goto mode_8bpppixelcell::@3
  to:mode_8bpppixelcell::@6
mode_8bpppixelcell::@6: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@5
  dtv_control#254 = phi( mode_8bpppixelcell::@5/dtv_control#263 )
  *PROCPORT = PROCPORT_RAM_CHARROM
  mode_8bpppixelcell::gfxb#0 = mode_8bpppixelcell::PLANEB
  mode_8bpppixelcell::chargen#0 = mode_8bpppixelcell::CHARGEN
  mode_8bpppixelcell::col#0 = 0
  mode_8bpppixelcell::ch#0 = 0
  to:mode_8bpppixelcell::@7
mode_8bpppixelcell::@7: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@13 mode_8bpppixelcell::@6
  dtv_control#245 = phi( mode_8bpppixelcell::@13/dtv_control#159, mode_8bpppixelcell::@6/dtv_control#254 )
  mode_8bpppixelcell::ch#8 = phi( mode_8bpppixelcell::@13/mode_8bpppixelcell::ch#1, mode_8bpppixelcell::@6/mode_8bpppixelcell::ch#0 )
  mode_8bpppixelcell::col#7 = phi( mode_8bpppixelcell::@13/mode_8bpppixelcell::col#8, mode_8bpppixelcell::@6/mode_8bpppixelcell::col#0 )
  mode_8bpppixelcell::gfxb#7 = phi( mode_8bpppixelcell::@13/mode_8bpppixelcell::gfxb#8, mode_8bpppixelcell::@6/mode_8bpppixelcell::gfxb#0 )
  mode_8bpppixelcell::chargen#4 = phi( mode_8bpppixelcell::@13/mode_8bpppixelcell::chargen#5, mode_8bpppixelcell::@6/mode_8bpppixelcell::chargen#0 )
  mode_8bpppixelcell::cr#0 = 0
  to:mode_8bpppixelcell::@8
mode_8bpppixelcell::@8: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@12 mode_8bpppixelcell::@7
  dtv_control#234 = phi( mode_8bpppixelcell::@12/dtv_control#188, mode_8bpppixelcell::@7/dtv_control#245 )
  mode_8bpppixelcell::ch#7 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::ch#3, mode_8bpppixelcell::@7/mode_8bpppixelcell::ch#8 )
  mode_8bpppixelcell::cr#6 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::cr#1, mode_8bpppixelcell::@7/mode_8bpppixelcell::cr#0 )
  mode_8bpppixelcell::col#5 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::col#6, mode_8bpppixelcell::@7/mode_8bpppixelcell::col#7 )
  mode_8bpppixelcell::gfxb#5 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::gfxb#6, mode_8bpppixelcell::@7/mode_8bpppixelcell::gfxb#7 )
  mode_8bpppixelcell::chargen#2 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::chargen#3, mode_8bpppixelcell::@7/mode_8bpppixelcell::chargen#4 )
  mode_8bpppixelcell::bits#0 = *mode_8bpppixelcell::chargen#2
  mode_8bpppixelcell::chargen#1 = ++ mode_8bpppixelcell::chargen#2
  mode_8bpppixelcell::cp#0 = 0
  to:mode_8bpppixelcell::@9
mode_8bpppixelcell::@9: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@10 mode_8bpppixelcell::@8
  dtv_control#219 = phi( mode_8bpppixelcell::@10/dtv_control#203, mode_8bpppixelcell::@8/dtv_control#234 )
  mode_8bpppixelcell::ch#6 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::ch#4, mode_8bpppixelcell::@8/mode_8bpppixelcell::ch#7 )
  mode_8bpppixelcell::chargen#8 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::chargen#6, mode_8bpppixelcell::@8/mode_8bpppixelcell::chargen#1 )
  mode_8bpppixelcell::cr#5 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::cr#3, mode_8bpppixelcell::@8/mode_8bpppixelcell::cr#6 )
  mode_8bpppixelcell::cp#4 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::cp#1, mode_8bpppixelcell::@8/mode_8bpppixelcell::cp#0 )
  mode_8bpppixelcell::col#4 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::col#1, mode_8bpppixelcell::@8/mode_8bpppixelcell::col#5 )
  mode_8bpppixelcell::gfxb#4 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::gfxb#1, mode_8bpppixelcell::@8/mode_8bpppixelcell::gfxb#5 )
  mode_8bpppixelcell::bits#2 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::bits#1, mode_8bpppixelcell::@8/mode_8bpppixelcell::bits#0 )
  mode_8bpppixelcell::c#0 = 0
  mode_8bpppixelcell::$8 = mode_8bpppixelcell::bits#2 & $80
  mode_8bpppixelcell::$9 = mode_8bpppixelcell::$8 != 0
  mode_8bpppixelcell::$10 = ! mode_8bpppixelcell::$9
  if(mode_8bpppixelcell::$10) goto mode_8bpppixelcell::@10
  to:mode_8bpppixelcell::@11
mode_8bpppixelcell::@10: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@11 mode_8bpppixelcell::@9
  dtv_control#203 = phi( mode_8bpppixelcell::@11/dtv_control#218, mode_8bpppixelcell::@9/dtv_control#219 )
  mode_8bpppixelcell::ch#4 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::ch#5, mode_8bpppixelcell::@9/mode_8bpppixelcell::ch#6 )
  mode_8bpppixelcell::chargen#6 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::chargen#7, mode_8bpppixelcell::@9/mode_8bpppixelcell::chargen#8 )
  mode_8bpppixelcell::cr#3 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::cr#4, mode_8bpppixelcell::@9/mode_8bpppixelcell::cr#5 )
  mode_8bpppixelcell::cp#2 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::cp#3, mode_8bpppixelcell::@9/mode_8bpppixelcell::cp#4 )
  mode_8bpppixelcell::col#2 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::col#3, mode_8bpppixelcell::@9/mode_8bpppixelcell::col#4 )
  mode_8bpppixelcell::bits#3 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::bits#4, mode_8bpppixelcell::@9/mode_8bpppixelcell::bits#2 )
  mode_8bpppixelcell::gfxb#2 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::gfxb#3, mode_8bpppixelcell::@9/mode_8bpppixelcell::gfxb#4 )
  mode_8bpppixelcell::c#2 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::c#1, mode_8bpppixelcell::@9/mode_8bpppixelcell::c#0 )
  *mode_8bpppixelcell::gfxb#2 = mode_8bpppixelcell::c#2
  mode_8bpppixelcell::gfxb#1 = ++ mode_8bpppixelcell::gfxb#2
  mode_8bpppixelcell::$11 = mode_8bpppixelcell::bits#3 * 2
  mode_8bpppixelcell::bits#1 = mode_8bpppixelcell::$11
  mode_8bpppixelcell::col#1 = ++ mode_8bpppixelcell::col#2
  mode_8bpppixelcell::cp#1 = mode_8bpppixelcell::cp#2 + rangenext(0,7)
  mode_8bpppixelcell::$12 = mode_8bpppixelcell::cp#1 != rangelast(0,7)
  if(mode_8bpppixelcell::$12) goto mode_8bpppixelcell::@9
  to:mode_8bpppixelcell::@12
mode_8bpppixelcell::@11: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@9
  dtv_control#218 = phi( mode_8bpppixelcell::@9/dtv_control#219 )
  mode_8bpppixelcell::ch#5 = phi( mode_8bpppixelcell::@9/mode_8bpppixelcell::ch#6 )
  mode_8bpppixelcell::chargen#7 = phi( mode_8bpppixelcell::@9/mode_8bpppixelcell::chargen#8 )
  mode_8bpppixelcell::cr#4 = phi( mode_8bpppixelcell::@9/mode_8bpppixelcell::cr#5 )
  mode_8bpppixelcell::cp#3 = phi( mode_8bpppixelcell::@9/mode_8bpppixelcell::cp#4 )
  mode_8bpppixelcell::bits#4 = phi( mode_8bpppixelcell::@9/mode_8bpppixelcell::bits#2 )
  mode_8bpppixelcell::gfxb#3 = phi( mode_8bpppixelcell::@9/mode_8bpppixelcell::gfxb#4 )
  mode_8bpppixelcell::col#3 = phi( mode_8bpppixelcell::@9/mode_8bpppixelcell::col#4 )
  mode_8bpppixelcell::c#1 = mode_8bpppixelcell::col#3
  to:mode_8bpppixelcell::@10
mode_8bpppixelcell::@12: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@10
  dtv_control#188 = phi( mode_8bpppixelcell::@10/dtv_control#203 )
  mode_8bpppixelcell::col#6 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::col#1 )
  mode_8bpppixelcell::gfxb#6 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::gfxb#1 )
  mode_8bpppixelcell::ch#3 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::ch#4 )
  mode_8bpppixelcell::chargen#3 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::chargen#6 )
  mode_8bpppixelcell::cr#2 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::cr#3 )
  mode_8bpppixelcell::cr#1 = mode_8bpppixelcell::cr#2 + rangenext(0,7)
  mode_8bpppixelcell::$13 = mode_8bpppixelcell::cr#1 != rangelast(0,7)
  if(mode_8bpppixelcell::$13) goto mode_8bpppixelcell::@8
  to:mode_8bpppixelcell::@13
mode_8bpppixelcell::@13: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@12
  mode_8bpppixelcell::col#8 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::col#6 )
  mode_8bpppixelcell::gfxb#8 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::gfxb#6 )
  dtv_control#159 = phi( mode_8bpppixelcell::@12/dtv_control#188 )
  mode_8bpppixelcell::chargen#5 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::chargen#3 )
  mode_8bpppixelcell::ch#2 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::ch#3 )
  mode_8bpppixelcell::ch#1 = mode_8bpppixelcell::ch#2 + rangenext(0,$ff)
  mode_8bpppixelcell::$14 = mode_8bpppixelcell::ch#1 != rangelast(0,$ff)
  if(mode_8bpppixelcell::$14) goto mode_8bpppixelcell::@7
  to:mode_8bpppixelcell::@14
mode_8bpppixelcell::@14: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@13
  dtv_control#129 = phi( mode_8bpppixelcell::@13/dtv_control#159 )
  *PROCPORT = PROCPORT_RAM_IO
  call mode_ctrl 
  to:mode_8bpppixelcell::@15
mode_8bpppixelcell::@15: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@14
  dtv_control#94 = phi( mode_8bpppixelcell::@14/dtv_control#15 )
  dtv_control#48 = dtv_control#94
  to:mode_8bpppixelcell::@return
mode_8bpppixelcell::@return: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@15
  dtv_control#95 = phi( mode_8bpppixelcell::@15/dtv_control#48 )
  dtv_control#49 = dtv_control#95
  return 
  to:@return

void mode_8bppchunkybmm()
mode_8bppchunkybmm: scope:[mode_8bppchunkybmm]  from menu::@30
  dtv_control#50 = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
  *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
  *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3
  *VIC_CONTROL2 = VIC_MCM|VIC_CSEL
  *DTV_PLANEB_START_LO = <<mode_8bppchunkybmm::PLANEB
  *DTV_PLANEB_START_MI = ><mode_8bppchunkybmm::PLANEB
  *DTV_PLANEB_START_HI = <>mode_8bppchunkybmm::PLANEB
  *DTV_PLANEB_STEP = 8
  *DTV_PLANEB_MODULO_LO = 0
  *DTV_PLANEB_MODULO_HI = 0
  *BORDER_COLOR = 0
  mode_8bppchunkybmm::i#0 = 0
  to:mode_8bppchunkybmm::@1
mode_8bppchunkybmm::@1: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm mode_8bppchunkybmm::@1
  dtv_control#264 = phi( mode_8bppchunkybmm/dtv_control#50, mode_8bppchunkybmm::@1/dtv_control#264 )
  mode_8bppchunkybmm::i#2 = phi( mode_8bppchunkybmm/mode_8bppchunkybmm::i#0, mode_8bppchunkybmm::@1/mode_8bppchunkybmm::i#1 )
  DTV_PALETTE[mode_8bppchunkybmm::i#2] = mode_8bppchunkybmm::i#2
  mode_8bppchunkybmm::i#1 = mode_8bppchunkybmm::i#2 + rangenext(0,$f)
  mode_8bppchunkybmm::$3 = mode_8bppchunkybmm::i#1 != rangelast(0,$f)
  if(mode_8bppchunkybmm::$3) goto mode_8bppchunkybmm::@1
  to:mode_8bppchunkybmm::@2
mode_8bppchunkybmm::@2: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@1
  dtv_control#255 = phi( mode_8bppchunkybmm::@1/dtv_control#264 )
  mode_8bppchunkybmm::gfxbCpuBank#0 = (byte)mode_8bppchunkybmm::PLANEB/$4000
  dtvSetCpuBankSegment1::cpuBankIdx#0 = mode_8bppchunkybmm::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@9
mode_8bppchunkybmm::@9: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@2
  dtv_control#246 = phi( mode_8bppchunkybmm::@2/dtv_control#255 )
  mode_8bppchunkybmm::gfxbCpuBank#3 = phi( mode_8bppchunkybmm::@2/mode_8bppchunkybmm::gfxbCpuBank#0 )
  mode_8bppchunkybmm::gfxbCpuBank#1 = ++ mode_8bppchunkybmm::gfxbCpuBank#3
  mode_8bppchunkybmm::gfxb#0 = (byte*)$4000
  mode_8bppchunkybmm::y#0 = 0
  to:mode_8bppchunkybmm::@3
mode_8bppchunkybmm::@3: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@7 mode_8bppchunkybmm::@9
  dtv_control#235 = phi( mode_8bppchunkybmm::@7/dtv_control#189, mode_8bppchunkybmm::@9/dtv_control#246 )
  mode_8bppchunkybmm::gfxbCpuBank#7 = phi( mode_8bppchunkybmm::@7/mode_8bppchunkybmm::gfxbCpuBank#9, mode_8bppchunkybmm::@9/mode_8bppchunkybmm::gfxbCpuBank#1 )
  mode_8bppchunkybmm::y#6 = phi( mode_8bppchunkybmm::@7/mode_8bppchunkybmm::y#1, mode_8bppchunkybmm::@9/mode_8bppchunkybmm::y#0 )
  mode_8bppchunkybmm::gfxb#5 = phi( mode_8bppchunkybmm::@7/mode_8bppchunkybmm::gfxb#6, mode_8bppchunkybmm::@9/mode_8bppchunkybmm::gfxb#0 )
  mode_8bppchunkybmm::x#0 = 0
  to:mode_8bppchunkybmm::@4
mode_8bppchunkybmm::@4: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@3 mode_8bppchunkybmm::@5
  dtv_control#221 = phi( mode_8bppchunkybmm::@3/dtv_control#235, mode_8bppchunkybmm::@5/dtv_control#204 )
  mode_8bppchunkybmm::gfxbCpuBank#6 = phi( mode_8bppchunkybmm::@3/mode_8bppchunkybmm::gfxbCpuBank#7, mode_8bppchunkybmm::@5/mode_8bppchunkybmm::gfxbCpuBank#8 )
  mode_8bppchunkybmm::y#5 = phi( mode_8bppchunkybmm::@3/mode_8bppchunkybmm::y#6, mode_8bppchunkybmm::@5/mode_8bppchunkybmm::y#2 )
  mode_8bppchunkybmm::x#4 = phi( mode_8bppchunkybmm::@3/mode_8bppchunkybmm::x#0, mode_8bppchunkybmm::@5/mode_8bppchunkybmm::x#1 )
  mode_8bppchunkybmm::gfxb#3 = phi( mode_8bppchunkybmm::@3/mode_8bppchunkybmm::gfxb#5, mode_8bppchunkybmm::@5/mode_8bppchunkybmm::gfxb#1 )
  mode_8bppchunkybmm::$4 = mode_8bppchunkybmm::gfxb#3 == $8000
  mode_8bppchunkybmm::$5 = ! mode_8bppchunkybmm::$4
  if(mode_8bppchunkybmm::$5) goto mode_8bppchunkybmm::@5
  to:mode_8bppchunkybmm::@6
mode_8bppchunkybmm::@5: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@10 mode_8bppchunkybmm::@4
  dtv_control#204 = phi( mode_8bppchunkybmm::@10/dtv_control#220, mode_8bppchunkybmm::@4/dtv_control#221 )
  mode_8bppchunkybmm::gfxbCpuBank#8 = phi( mode_8bppchunkybmm::@10/mode_8bppchunkybmm::gfxbCpuBank#2, mode_8bppchunkybmm::@4/mode_8bppchunkybmm::gfxbCpuBank#6 )
  mode_8bppchunkybmm::gfxb#4 = phi( mode_8bppchunkybmm::@10/mode_8bppchunkybmm::gfxb#2, mode_8bppchunkybmm::@4/mode_8bppchunkybmm::gfxb#3 )
  mode_8bppchunkybmm::y#2 = phi( mode_8bppchunkybmm::@10/mode_8bppchunkybmm::y#4, mode_8bppchunkybmm::@4/mode_8bppchunkybmm::y#5 )
  mode_8bppchunkybmm::x#2 = phi( mode_8bppchunkybmm::@10/mode_8bppchunkybmm::x#3, mode_8bppchunkybmm::@4/mode_8bppchunkybmm::x#4 )
  mode_8bppchunkybmm::$7 = mode_8bppchunkybmm::x#2 + mode_8bppchunkybmm::y#2
  mode_8bppchunkybmm::c#0 = (byte)mode_8bppchunkybmm::$7
  *mode_8bppchunkybmm::gfxb#4 = mode_8bppchunkybmm::c#0
  mode_8bppchunkybmm::gfxb#1 = ++ mode_8bppchunkybmm::gfxb#4
  mode_8bppchunkybmm::x#1 = mode_8bppchunkybmm::x#2 + rangenext(0,$13f)
  mode_8bppchunkybmm::$8 = mode_8bppchunkybmm::x#1 != rangelast(0,$13f)
  if(mode_8bppchunkybmm::$8) goto mode_8bppchunkybmm::@4
  to:mode_8bppchunkybmm::@7
mode_8bppchunkybmm::@6: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@4
  dtv_control#236 = phi( mode_8bppchunkybmm::@4/dtv_control#221 )
  mode_8bppchunkybmm::y#7 = phi( mode_8bppchunkybmm::@4/mode_8bppchunkybmm::y#5 )
  mode_8bppchunkybmm::x#5 = phi( mode_8bppchunkybmm::@4/mode_8bppchunkybmm::x#4 )
  mode_8bppchunkybmm::gfxbCpuBank#4 = phi( mode_8bppchunkybmm::@4/mode_8bppchunkybmm::gfxbCpuBank#6 )
  dtvSetCpuBankSegment1::cpuBankIdx#1 = mode_8bppchunkybmm::gfxbCpuBank#4
  call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@10
mode_8bppchunkybmm::@10: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@6
  dtv_control#220 = phi( mode_8bppchunkybmm::@6/dtv_control#236 )
  mode_8bppchunkybmm::y#4 = phi( mode_8bppchunkybmm::@6/mode_8bppchunkybmm::y#7 )
  mode_8bppchunkybmm::x#3 = phi( mode_8bppchunkybmm::@6/mode_8bppchunkybmm::x#5 )
  mode_8bppchunkybmm::gfxbCpuBank#5 = phi( mode_8bppchunkybmm::@6/mode_8bppchunkybmm::gfxbCpuBank#4 )
  mode_8bppchunkybmm::gfxbCpuBank#2 = ++ mode_8bppchunkybmm::gfxbCpuBank#5
  mode_8bppchunkybmm::gfxb#2 = ((byte*)) $4000
  to:mode_8bppchunkybmm::@5
mode_8bppchunkybmm::@7: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@5
  dtv_control#189 = phi( mode_8bppchunkybmm::@5/dtv_control#204 )
  mode_8bppchunkybmm::gfxbCpuBank#9 = phi( mode_8bppchunkybmm::@5/mode_8bppchunkybmm::gfxbCpuBank#8 )
  mode_8bppchunkybmm::gfxb#6 = phi( mode_8bppchunkybmm::@5/mode_8bppchunkybmm::gfxb#1 )
  mode_8bppchunkybmm::y#3 = phi( mode_8bppchunkybmm::@5/mode_8bppchunkybmm::y#2 )
  mode_8bppchunkybmm::y#1 = mode_8bppchunkybmm::y#3 + rangenext(0,$c7)
  mode_8bppchunkybmm::$9 = mode_8bppchunkybmm::y#1 != rangelast(0,$c7)
  if(mode_8bppchunkybmm::$9) goto mode_8bppchunkybmm::@3
  to:mode_8bppchunkybmm::@8
mode_8bppchunkybmm::@8: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@7
  dtv_control#160 = phi( mode_8bppchunkybmm::@7/dtv_control#189 )
  dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte)$4000/$4000
  call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@11
mode_8bppchunkybmm::@11: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@8
  dtv_control#130 = phi( mode_8bppchunkybmm::@8/dtv_control#160 )
  call mode_ctrl 
  to:mode_8bppchunkybmm::@12
mode_8bppchunkybmm::@12: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@11
  dtv_control#96 = phi( mode_8bppchunkybmm::@11/dtv_control#15 )
  dtv_control#51 = dtv_control#96
  to:mode_8bppchunkybmm::@return
mode_8bppchunkybmm::@return: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@12
  dtv_control#97 = phi( mode_8bppchunkybmm::@12/dtv_control#51 )
  dtv_control#52 = dtv_control#97
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  print_screen#6 = (byte*)$400
  print_line_cursor#14 = print_screen#6
  print_char_cursor#17 = print_line_cursor#14
  dtv_control#53 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  dtv_control#131 = phi( __start::__init1/dtv_control#53 )
  print_char_cursor#57 = phi( __start::__init1/print_char_cursor#17 )
  print_line_cursor#51 = phi( __start::__init1/print_line_cursor#14 )
  print_screen#34 = phi( __start::__init1/print_screen#6 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  dtv_control#98 = phi( __start::@1/dtv_control#1 )
  print_char_cursor#35 = phi( __start::@1/print_char_cursor#12 )
  print_line_cursor#30 = phi( __start::@1/print_line_cursor#9 )
  print_screen#16 = phi( __start::@1/print_screen#3 )
  print_screen#7 = print_screen#16
  print_line_cursor#15 = print_line_cursor#30
  print_char_cursor#18 = print_char_cursor#35
  dtv_control#54 = dtv_control#98
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  dtv_control#99 = phi( __start::@2/dtv_control#54 )
  print_char_cursor#36 = phi( __start::@2/print_char_cursor#18 )
  print_line_cursor#31 = phi( __start::@2/print_line_cursor#15 )
  print_screen#17 = phi( __start::@2/print_screen#7 )
  print_screen#8 = print_screen#17
  print_line_cursor#16 = print_line_cursor#31
  print_char_cursor#19 = print_char_cursor#36
  dtv_control#55 = dtv_control#99
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* BG_COLOR = (byte*)$d021
const nomodify byte* BG_COLOR1 = (byte*)$d022
const nomodify byte* BG_COLOR2 = (byte*)$d023
const nomodify byte* BG_COLOR3 = (byte*)$d024
const nomodify byte BLACK = 0
const nomodify byte BLUE = 6
const nomodify byte* BORDER_COLOR = (byte*)$d020
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*)$dc00
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*)$dd00
const nomodify byte* COLS = (byte*)$d800
const nomodify byte DTV_BORDER_OFF = 2
const nomodify byte DTV_CHUNKY = $40
const nomodify byte DTV_COLORRAM_OFF = $10
const nomodify dword DTV_COLOR_BANK_DEFAULT = $1d800
const nomodify byte* DTV_COLOR_BANK_HI = (byte*)$d037
const nomodify byte* DTV_COLOR_BANK_LO = (byte*)$d036
const nomodify byte* DTV_CONTROL = (byte*)$d03c
const nomodify byte* DTV_FEATURE = (byte*)$d03f
const nomodify byte DTV_FEATURE_ENABLE = 1
const nomodify byte* DTV_GRAPHICS_VIC_BANK = (byte*)$d03d
const nomodify byte DTV_HIGHCOLOR = 4
const nomodify byte DTV_LINEAR = 1
const nomodify byte DTV_OVERSCAN = 8
const nomodify byte* DTV_PALETTE = (byte*)$d200
const byte* DTV_PALETTE_DEFAULT[$10]  = { 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a }
const nomodify byte* DTV_PLANEA_MODULO_HI = (byte*)$d039
const nomodify byte* DTV_PLANEA_MODULO_LO = (byte*)$d038
const nomodify byte* DTV_PLANEA_START_HI = (byte*)$d045
const nomodify byte* DTV_PLANEA_START_LO = (byte*)$d03a
const nomodify byte* DTV_PLANEA_START_MI = (byte*)$d03b
const nomodify byte* DTV_PLANEA_STEP = (byte*)$d046
const nomodify byte* DTV_PLANEB_MODULO_HI = (byte*)$d048
const nomodify byte* DTV_PLANEB_MODULO_LO = (byte*)$d047
const nomodify byte* DTV_PLANEB_START_HI = (byte*)$d04b
const nomodify byte* DTV_PLANEB_START_LO = (byte*)$d049
const nomodify byte* DTV_PLANEB_START_MI = (byte*)$d04a
const nomodify byte* DTV_PLANEB_STEP = (byte*)$d04c
const nomodify byte GREEN = 5
const nomodify byte KEY_0 = $23
const nomodify byte KEY_1 = $38
const nomodify byte KEY_2 = $3b
const nomodify byte KEY_3 = 8
const nomodify byte KEY_4 = $b
const nomodify byte KEY_6 = $13
const nomodify byte KEY_7 = $18
const nomodify byte KEY_8 = $1b
const nomodify byte KEY_A = $a
const nomodify byte KEY_B = $1c
const nomodify byte KEY_C = $14
const nomodify byte KEY_D = $12
const nomodify byte KEY_E = $e
const nomodify byte KEY_H = $1d
const nomodify byte KEY_L = $2a
const nomodify byte KEY_O = $26
const nomodify byte KEY_SPACE = $3c
const nomodify byte KEY_U = $1e
const nomodify byte LIGHT_GREEN = $d
const byte* MENU_TEXT[]  = "C64DTV Graphics Modes            CCLHBME@                                 OHIIMCC@                                 LUNCMMM@----------------------------------------@1. Standard Char             (V) 0000000@2. Extended Color Char       (V) 0000001@3. Multicolor Char           (V) 0000010@4. Standard Bitmap           (V) 0000100@5. Multicolor Bitmap         (V) 0000110@6. High Color Standard Char  (H) 0001000@7. High Extended Color Char  (H) 0001001@8. High Multicolor Char      (H) 0001010@9. High Multicolor Bitmap    (H) 0001110@a. Sixs Fred 2               (D) 0010111@b. Two Plane Bitmap          (D) 0011101@c. Sixs Fred (2 Plane MC BM) (D) 0011111@d. 8bpp Pixel Cell           (D) 0111011@e. Chunky 8bpp Bitmap        (D) 1111011@----------------------------------------@    (V) vicII (H) vicII+hicol (D) c64dtv@"
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A = 0
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
const nomodify byte* PROCPORT = (byte*)1
const nomodify byte* PROCPORT_DDR = (byte*)0
const nomodify byte PROCPORT_DDR_MEMORY_MASK = 7
const nomodify byte PROCPORT_RAM_CHARROM = 1
const nomodify byte PROCPORT_RAM_IO = 5
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte* RASTER = (byte*)$d012
const nomodify byte VIC_BMM = $20
const nomodify byte* VIC_CONTROL = (byte*)$d011
const nomodify byte* VIC_CONTROL2 = (byte*)$d016
const nomodify byte VIC_CSEL = 8
const nomodify byte VIC_DEN = $10
const nomodify byte VIC_ECM = $40
const nomodify byte VIC_MCM = $10
const nomodify byte* VIC_MEMORY = (byte*)$d018
const nomodify byte VIC_RSEL = 8
void __start()
void bitmap_clear()
bool~ bitmap_clear::$0
bool~ bitmap_clear::$1
byte* bitmap_clear::bitmap
byte* bitmap_clear::bitmap#0
byte* bitmap_clear::bitmap#1
byte* bitmap_clear::bitmap#2
byte* bitmap_clear::bitmap#3
byte* bitmap_clear::bitmap#4
byte bitmap_clear::x
byte bitmap_clear::x#0
byte bitmap_clear::x#1
byte bitmap_clear::x#2
byte bitmap_clear::y
byte bitmap_clear::y#0
byte bitmap_clear::y#1
byte bitmap_clear::y#2
byte bitmap_clear::y#3
byte bitmap_clear::y#4
void bitmap_init(byte* bitmap_init::bitmap)
number~ bitmap_init::$0
byte~ bitmap_init::$1
number~ bitmap_init::$10
bool~ bitmap_init::$11
bool~ bitmap_init::$12
byte*~ bitmap_init::$13
bool~ bitmap_init::$14
byte~ bitmap_init::$2
bool~ bitmap_init::$3
bool~ bitmap_init::$4
bool~ bitmap_init::$5
number~ bitmap_init::$6
byte~ bitmap_init::$7
number~ bitmap_init::$8
byte~ bitmap_init::$9
byte* bitmap_init::bitmap
byte* bitmap_init::bitmap#0
byte* bitmap_init::bitmap#1
byte* bitmap_init::bitmap#2
byte* bitmap_init::bitmap#3
byte* bitmap_init::bitmap#4
byte bitmap_init::bits
byte bitmap_init::bits#0
byte bitmap_init::bits#1
byte bitmap_init::bits#2
byte bitmap_init::bits#3
byte bitmap_init::bits#4
byte bitmap_init::x
byte bitmap_init::x#0
byte bitmap_init::x#1
byte bitmap_init::x#2
byte bitmap_init::x#3
byte bitmap_init::x#4
byte bitmap_init::y
byte bitmap_init::y#0
byte bitmap_init::y#1
byte bitmap_init::y#2
byte bitmap_init::y#3
byte bitmap_init::y#4
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#0
byte* bitmap_init::yoffs#1
byte* bitmap_init::yoffs#2
byte* bitmap_init::yoffs#3
byte* bitmap_init::yoffs#4
void bitmap_line(byte bitmap_line::x0 , byte bitmap_line::x1 , byte bitmap_line::y0 , byte bitmap_line::y1)
bool~ bitmap_line::$0
byte~ bitmap_line::$1
byte~ bitmap_line::$11
bool~ bitmap_line::$12
byte~ bitmap_line::$13
bool~ bitmap_line::$14
byte~ bitmap_line::$17
bool~ bitmap_line::$18
bool~ bitmap_line::$2
byte~ bitmap_line::$3
bool~ bitmap_line::$4
byte~ bitmap_line::$7
bool~ bitmap_line::$8
byte bitmap_line::x0
byte bitmap_line::x0#0
byte bitmap_line::x0#1
byte bitmap_line::x0#10
byte bitmap_line::x0#11
byte bitmap_line::x0#12
byte bitmap_line::x0#13
byte bitmap_line::x0#2
byte bitmap_line::x0#3
byte bitmap_line::x0#4
byte bitmap_line::x0#5
byte bitmap_line::x0#6
byte bitmap_line::x0#7
byte bitmap_line::x0#8
byte bitmap_line::x0#9
byte bitmap_line::x1
byte bitmap_line::x1#0
byte bitmap_line::x1#1
byte bitmap_line::x1#10
byte bitmap_line::x1#11
byte bitmap_line::x1#12
byte bitmap_line::x1#13
byte bitmap_line::x1#2
byte bitmap_line::x1#3
byte bitmap_line::x1#4
byte bitmap_line::x1#5
byte bitmap_line::x1#6
byte bitmap_line::x1#7
byte bitmap_line::x1#8
byte bitmap_line::x1#9
byte bitmap_line::xd
byte bitmap_line::xd#0
byte bitmap_line::xd#1
byte bitmap_line::xd#10
byte bitmap_line::xd#11
byte bitmap_line::xd#12
byte bitmap_line::xd#13
byte bitmap_line::xd#14
byte bitmap_line::xd#2
byte bitmap_line::xd#3
byte bitmap_line::xd#4
byte bitmap_line::xd#5
byte bitmap_line::xd#6
byte bitmap_line::xd#7
byte bitmap_line::xd#8
byte bitmap_line::xd#9
byte bitmap_line::y0
byte bitmap_line::y0#0
byte bitmap_line::y0#1
byte bitmap_line::y0#10
byte bitmap_line::y0#11
byte bitmap_line::y0#12
byte bitmap_line::y0#13
byte bitmap_line::y0#2
byte bitmap_line::y0#3
byte bitmap_line::y0#4
byte bitmap_line::y0#5
byte bitmap_line::y0#6
byte bitmap_line::y0#7
byte bitmap_line::y0#8
byte bitmap_line::y0#9
byte bitmap_line::y1
byte bitmap_line::y1#0
byte bitmap_line::y1#1
byte bitmap_line::y1#10
byte bitmap_line::y1#11
byte bitmap_line::y1#12
byte bitmap_line::y1#13
byte bitmap_line::y1#2
byte bitmap_line::y1#3
byte bitmap_line::y1#4
byte bitmap_line::y1#5
byte bitmap_line::y1#6
byte bitmap_line::y1#7
byte bitmap_line::y1#8
byte bitmap_line::y1#9
byte bitmap_line::yd
byte bitmap_line::yd#0
byte bitmap_line::yd#1
byte bitmap_line::yd#10
byte bitmap_line::yd#11
byte bitmap_line::yd#12
byte bitmap_line::yd#2
byte bitmap_line::yd#3
byte bitmap_line::yd#4
byte bitmap_line::yd#5
byte bitmap_line::yd#6
byte bitmap_line::yd#7
byte bitmap_line::yd#8
byte bitmap_line::yd#9
void bitmap_line_xdyd(byte bitmap_line_xdyd::x , byte bitmap_line_xdyd::y , byte bitmap_line_xdyd::x1 , byte bitmap_line_xdyd::xd , byte bitmap_line_xdyd::yd)
byte~ bitmap_line_xdyd::$0
byte~ bitmap_line_xdyd::$2
bool~ bitmap_line_xdyd::$3
bool~ bitmap_line_xdyd::$4
byte~ bitmap_line_xdyd::$5
number~ bitmap_line_xdyd::$6
bool~ bitmap_line_xdyd::$7
byte bitmap_line_xdyd::e
byte bitmap_line_xdyd::e#0
byte bitmap_line_xdyd::e#1
byte bitmap_line_xdyd::e#2
byte bitmap_line_xdyd::e#3
byte bitmap_line_xdyd::e#4
byte bitmap_line_xdyd::e#5
byte bitmap_line_xdyd::e#6
byte bitmap_line_xdyd::x
byte bitmap_line_xdyd::x#0
byte bitmap_line_xdyd::x#1
byte bitmap_line_xdyd::x#2
byte bitmap_line_xdyd::x#3
byte bitmap_line_xdyd::x#4
byte bitmap_line_xdyd::x#5
byte bitmap_line_xdyd::x#6
byte bitmap_line_xdyd::x#7
byte bitmap_line_xdyd::x1
byte bitmap_line_xdyd::x1#0
byte bitmap_line_xdyd::x1#1
byte bitmap_line_xdyd::x1#2
byte bitmap_line_xdyd::x1#3
byte bitmap_line_xdyd::x1#4
byte bitmap_line_xdyd::x1#5
byte bitmap_line_xdyd::x1#6
byte bitmap_line_xdyd::xd
byte bitmap_line_xdyd::xd#0
byte bitmap_line_xdyd::xd#1
byte bitmap_line_xdyd::xd#2
byte bitmap_line_xdyd::xd#3
byte bitmap_line_xdyd::xd#4
byte bitmap_line_xdyd::xd#5
byte bitmap_line_xdyd::xd#6
byte bitmap_line_xdyd::y
byte bitmap_line_xdyd::y#0
byte bitmap_line_xdyd::y#1
byte bitmap_line_xdyd::y#2
byte bitmap_line_xdyd::y#3
byte bitmap_line_xdyd::y#4
byte bitmap_line_xdyd::y#5
byte bitmap_line_xdyd::y#6
byte bitmap_line_xdyd::y#7
byte bitmap_line_xdyd::yd
byte bitmap_line_xdyd::yd#0
byte bitmap_line_xdyd::yd#1
byte bitmap_line_xdyd::yd#2
byte bitmap_line_xdyd::yd#3
byte bitmap_line_xdyd::yd#4
byte bitmap_line_xdyd::yd#5
byte bitmap_line_xdyd::yd#6
void bitmap_line_xdyi(byte bitmap_line_xdyi::x , byte bitmap_line_xdyi::y , byte bitmap_line_xdyi::x1 , byte bitmap_line_xdyi::xd , byte bitmap_line_xdyi::yd)
byte~ bitmap_line_xdyi::$0
byte~ bitmap_line_xdyi::$2
bool~ bitmap_line_xdyi::$3
bool~ bitmap_line_xdyi::$4
byte~ bitmap_line_xdyi::$5
number~ bitmap_line_xdyi::$6
bool~ bitmap_line_xdyi::$7
byte bitmap_line_xdyi::e
byte bitmap_line_xdyi::e#0
byte bitmap_line_xdyi::e#1
byte bitmap_line_xdyi::e#2
byte bitmap_line_xdyi::e#3
byte bitmap_line_xdyi::e#4
byte bitmap_line_xdyi::e#5
byte bitmap_line_xdyi::e#6
byte bitmap_line_xdyi::x
byte bitmap_line_xdyi::x#0
byte bitmap_line_xdyi::x#1
byte bitmap_line_xdyi::x#2
byte bitmap_line_xdyi::x#3
byte bitmap_line_xdyi::x#4
byte bitmap_line_xdyi::x#5
byte bitmap_line_xdyi::x#6
byte bitmap_line_xdyi::x#7
byte bitmap_line_xdyi::x1
byte bitmap_line_xdyi::x1#0
byte bitmap_line_xdyi::x1#1
byte bitmap_line_xdyi::x1#2
byte bitmap_line_xdyi::x1#3
byte bitmap_line_xdyi::x1#4
byte bitmap_line_xdyi::x1#5
byte bitmap_line_xdyi::x1#6
byte bitmap_line_xdyi::xd
byte bitmap_line_xdyi::xd#0
byte bitmap_line_xdyi::xd#1
byte bitmap_line_xdyi::xd#2
byte bitmap_line_xdyi::xd#3
byte bitmap_line_xdyi::xd#4
byte bitmap_line_xdyi::xd#5
byte bitmap_line_xdyi::xd#6
byte bitmap_line_xdyi::y
byte bitmap_line_xdyi::y#0
byte bitmap_line_xdyi::y#1
byte bitmap_line_xdyi::y#2
byte bitmap_line_xdyi::y#3
byte bitmap_line_xdyi::y#4
byte bitmap_line_xdyi::y#5
byte bitmap_line_xdyi::y#6
byte bitmap_line_xdyi::y#7
byte bitmap_line_xdyi::yd
byte bitmap_line_xdyi::yd#0
byte bitmap_line_xdyi::yd#1
byte bitmap_line_xdyi::yd#2
byte bitmap_line_xdyi::yd#3
byte bitmap_line_xdyi::yd#4
byte bitmap_line_xdyi::yd#5
byte bitmap_line_xdyi::yd#6
void bitmap_line_ydxd(byte bitmap_line_ydxd::y , byte bitmap_line_ydxd::x , byte bitmap_line_ydxd::y1 , byte bitmap_line_ydxd::yd , byte bitmap_line_ydxd::xd)
byte~ bitmap_line_ydxd::$0
byte~ bitmap_line_ydxd::$2
bool~ bitmap_line_ydxd::$3
bool~ bitmap_line_ydxd::$4
byte~ bitmap_line_ydxd::$5
number~ bitmap_line_ydxd::$6
bool~ bitmap_line_ydxd::$7
byte bitmap_line_ydxd::e
byte bitmap_line_ydxd::e#0
byte bitmap_line_ydxd::e#1
byte bitmap_line_ydxd::e#2
byte bitmap_line_ydxd::e#3
byte bitmap_line_ydxd::e#4
byte bitmap_line_ydxd::e#5
byte bitmap_line_ydxd::e#6
byte bitmap_line_ydxd::x
byte bitmap_line_ydxd::x#0
byte bitmap_line_ydxd::x#1
byte bitmap_line_ydxd::x#2
byte bitmap_line_ydxd::x#3
byte bitmap_line_ydxd::x#4
byte bitmap_line_ydxd::x#5
byte bitmap_line_ydxd::x#6
byte bitmap_line_ydxd::x#7
byte bitmap_line_ydxd::xd
byte bitmap_line_ydxd::xd#0
byte bitmap_line_ydxd::xd#1
byte bitmap_line_ydxd::xd#2
byte bitmap_line_ydxd::xd#3
byte bitmap_line_ydxd::xd#4
byte bitmap_line_ydxd::xd#5
byte bitmap_line_ydxd::xd#6
byte bitmap_line_ydxd::y
byte bitmap_line_ydxd::y#0
byte bitmap_line_ydxd::y#1
byte bitmap_line_ydxd::y#2
byte bitmap_line_ydxd::y#3
byte bitmap_line_ydxd::y#4
byte bitmap_line_ydxd::y#5
byte bitmap_line_ydxd::y#6
byte bitmap_line_ydxd::y#7
byte bitmap_line_ydxd::y#8
byte bitmap_line_ydxd::y1
byte bitmap_line_ydxd::y1#0
byte bitmap_line_ydxd::y1#1
byte bitmap_line_ydxd::y1#2
byte bitmap_line_ydxd::y1#3
byte bitmap_line_ydxd::y1#4
byte bitmap_line_ydxd::y1#5
byte bitmap_line_ydxd::y1#6
byte bitmap_line_ydxd::yd
byte bitmap_line_ydxd::yd#0
byte bitmap_line_ydxd::yd#1
byte bitmap_line_ydxd::yd#2
byte bitmap_line_ydxd::yd#3
byte bitmap_line_ydxd::yd#4
byte bitmap_line_ydxd::yd#5
byte bitmap_line_ydxd::yd#6
void bitmap_line_ydxi(byte bitmap_line_ydxi::y , byte bitmap_line_ydxi::x , byte bitmap_line_ydxi::y1 , byte bitmap_line_ydxi::yd , byte bitmap_line_ydxi::xd)
byte~ bitmap_line_ydxi::$0
byte~ bitmap_line_ydxi::$2
bool~ bitmap_line_ydxi::$3
bool~ bitmap_line_ydxi::$4
byte~ bitmap_line_ydxi::$5
number~ bitmap_line_ydxi::$6
bool~ bitmap_line_ydxi::$7
byte bitmap_line_ydxi::e
byte bitmap_line_ydxi::e#0
byte bitmap_line_ydxi::e#1
byte bitmap_line_ydxi::e#2
byte bitmap_line_ydxi::e#3
byte bitmap_line_ydxi::e#4
byte bitmap_line_ydxi::e#5
byte bitmap_line_ydxi::e#6
byte bitmap_line_ydxi::x
byte bitmap_line_ydxi::x#0
byte bitmap_line_ydxi::x#1
byte bitmap_line_ydxi::x#2
byte bitmap_line_ydxi::x#3
byte bitmap_line_ydxi::x#4
byte bitmap_line_ydxi::x#5
byte bitmap_line_ydxi::x#6
byte bitmap_line_ydxi::x#7
byte bitmap_line_ydxi::xd
byte bitmap_line_ydxi::xd#0
byte bitmap_line_ydxi::xd#1
byte bitmap_line_ydxi::xd#2
byte bitmap_line_ydxi::xd#3
byte bitmap_line_ydxi::xd#4
byte bitmap_line_ydxi::xd#5
byte bitmap_line_ydxi::xd#6
byte bitmap_line_ydxi::y
byte bitmap_line_ydxi::y#0
byte bitmap_line_ydxi::y#1
byte bitmap_line_ydxi::y#2
byte bitmap_line_ydxi::y#3
byte bitmap_line_ydxi::y#4
byte bitmap_line_ydxi::y#5
byte bitmap_line_ydxi::y#6
byte bitmap_line_ydxi::y#7
byte bitmap_line_ydxi::y1
byte bitmap_line_ydxi::y1#0
byte bitmap_line_ydxi::y1#1
byte bitmap_line_ydxi::y1#2
byte bitmap_line_ydxi::y1#3
byte bitmap_line_ydxi::y1#4
byte bitmap_line_ydxi::y1#5
byte bitmap_line_ydxi::y1#6
byte bitmap_line_ydxi::yd
byte bitmap_line_ydxi::yd#0
byte bitmap_line_ydxi::yd#1
byte bitmap_line_ydxi::yd#2
byte bitmap_line_ydxi::yd#3
byte bitmap_line_ydxi::yd#4
byte bitmap_line_ydxi::yd#5
byte bitmap_line_ydxi::yd#6
void bitmap_plot(byte bitmap_plot::x , byte bitmap_plot::y)
word~ bitmap_plot::$0
byte~ bitmap_plot::$1
byte* bitmap_plot::plotter
byte* bitmap_plot::plotter#0
word bitmap_plot::plotter_x
word bitmap_plot::plotter_x#0
word bitmap_plot::plotter_y
word bitmap_plot::plotter_y#0
byte bitmap_plot::x
byte bitmap_plot::x#0
byte bitmap_plot::x#1
byte bitmap_plot::x#2
byte bitmap_plot::x#3
byte bitmap_plot::x#4
byte bitmap_plot::y
byte bitmap_plot::y#0
byte bitmap_plot::y#1
byte bitmap_plot::y#2
byte bitmap_plot::y#3
byte bitmap_plot::y#4
const to_nomodify byte* bitmap_plot_bit[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_xhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_xlo[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_yhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_ylo[$100]  = { fill( $100, 0) }
void dtvSetCpuBankSegment1(byte dtvSetCpuBankSegment1::cpuBankIdx)
const byte* dtvSetCpuBankSegment1::cpuBank = (byte*)$ff
byte dtvSetCpuBankSegment1::cpuBankIdx
byte dtvSetCpuBankSegment1::cpuBankIdx#0
byte dtvSetCpuBankSegment1::cpuBankIdx#1
byte dtvSetCpuBankSegment1::cpuBankIdx#2
byte dtvSetCpuBankSegment1::cpuBankIdx#3
byte dtv_control
byte dtv_control#0
byte dtv_control#1
byte dtv_control#10
byte dtv_control#100
byte dtv_control#101
byte dtv_control#102
byte dtv_control#103
byte dtv_control#104
byte dtv_control#105
byte dtv_control#106
byte dtv_control#107
byte dtv_control#108
byte dtv_control#109
byte dtv_control#11
byte dtv_control#110
byte dtv_control#111
byte dtv_control#112
byte dtv_control#113
byte dtv_control#114
byte dtv_control#115
byte dtv_control#116
byte dtv_control#117
byte dtv_control#118
byte dtv_control#119
byte dtv_control#12
byte dtv_control#120
byte dtv_control#121
byte dtv_control#122
byte dtv_control#123
byte dtv_control#124
byte dtv_control#125
byte dtv_control#126
byte dtv_control#127
byte dtv_control#128
byte dtv_control#129
byte dtv_control#13
byte dtv_control#130
byte dtv_control#131
byte dtv_control#132
byte dtv_control#133
byte dtv_control#134
byte dtv_control#135
byte dtv_control#136
byte dtv_control#137
byte dtv_control#138
byte dtv_control#139
byte dtv_control#14
byte dtv_control#140
byte dtv_control#141
byte dtv_control#142
byte dtv_control#143
byte dtv_control#144
byte dtv_control#145
byte dtv_control#146
byte dtv_control#147
byte dtv_control#148
byte dtv_control#149
byte dtv_control#15
byte dtv_control#150
byte dtv_control#151
byte dtv_control#152
byte dtv_control#153
byte dtv_control#154
byte dtv_control#155
byte dtv_control#156
byte dtv_control#157
byte dtv_control#158
byte dtv_control#159
byte dtv_control#16
byte dtv_control#160
byte dtv_control#161
byte dtv_control#162
byte dtv_control#163
byte dtv_control#164
byte dtv_control#165
byte dtv_control#166
byte dtv_control#167
byte dtv_control#168
byte dtv_control#169
byte dtv_control#17
byte dtv_control#170
byte dtv_control#171
byte dtv_control#172
byte dtv_control#173
byte dtv_control#174
byte dtv_control#175
byte dtv_control#176
byte dtv_control#177
byte dtv_control#178
byte dtv_control#179
byte dtv_control#18
byte dtv_control#180
byte dtv_control#181
byte dtv_control#182
byte dtv_control#183
byte dtv_control#184
byte dtv_control#185
byte dtv_control#186
byte dtv_control#187
byte dtv_control#188
byte dtv_control#189
byte dtv_control#19
byte dtv_control#190
byte dtv_control#191
byte dtv_control#192
byte dtv_control#193
byte dtv_control#194
byte dtv_control#195
byte dtv_control#196
byte dtv_control#197
byte dtv_control#198
byte dtv_control#199
byte dtv_control#2
byte dtv_control#20
byte dtv_control#200
byte dtv_control#201
byte dtv_control#202
byte dtv_control#203
byte dtv_control#204
byte dtv_control#205
byte dtv_control#206
byte dtv_control#207
byte dtv_control#208
byte dtv_control#209
byte dtv_control#21
byte dtv_control#210
byte dtv_control#211
byte dtv_control#212
byte dtv_control#213
byte dtv_control#214
byte dtv_control#215
byte dtv_control#216
byte dtv_control#217
byte dtv_control#218
byte dtv_control#219
byte dtv_control#22
byte dtv_control#220
byte dtv_control#221
byte dtv_control#222
byte dtv_control#223
byte dtv_control#224
byte dtv_control#225
byte dtv_control#226
byte dtv_control#227
byte dtv_control#228
byte dtv_control#229
byte dtv_control#23
byte dtv_control#230
byte dtv_control#231
byte dtv_control#232
byte dtv_control#233
byte dtv_control#234
byte dtv_control#235
byte dtv_control#236
byte dtv_control#237
byte dtv_control#238
byte dtv_control#239
byte dtv_control#24
byte dtv_control#240
byte dtv_control#241
byte dtv_control#242
byte dtv_control#243
byte dtv_control#244
byte dtv_control#245
byte dtv_control#246
byte dtv_control#247
byte dtv_control#248
byte dtv_control#249
byte dtv_control#25
byte dtv_control#250
byte dtv_control#251
byte dtv_control#252
byte dtv_control#253
byte dtv_control#254
byte dtv_control#255
byte dtv_control#256
byte dtv_control#257
byte dtv_control#258
byte dtv_control#259
byte dtv_control#26
byte dtv_control#260
byte dtv_control#261
byte dtv_control#262
byte dtv_control#263
byte dtv_control#264
byte dtv_control#265
byte dtv_control#266
byte dtv_control#267
byte dtv_control#268
byte dtv_control#269
byte dtv_control#27
byte dtv_control#270
byte dtv_control#271
byte dtv_control#272
byte dtv_control#273
byte dtv_control#274
byte dtv_control#275
byte dtv_control#276
byte dtv_control#277
byte dtv_control#278
byte dtv_control#279
byte dtv_control#28
byte dtv_control#280
byte dtv_control#281
byte dtv_control#282
byte dtv_control#283
byte dtv_control#284
byte dtv_control#285
byte dtv_control#286
byte dtv_control#287
byte dtv_control#288
byte dtv_control#289
byte dtv_control#29
byte dtv_control#290
byte dtv_control#291
byte dtv_control#292
byte dtv_control#3
byte dtv_control#30
byte dtv_control#31
byte dtv_control#32
byte dtv_control#33
byte dtv_control#34
byte dtv_control#35
byte dtv_control#36
byte dtv_control#37
byte dtv_control#38
byte dtv_control#39
byte dtv_control#4
byte dtv_control#40
byte dtv_control#41
byte dtv_control#42
byte dtv_control#43
byte dtv_control#44
byte dtv_control#45
byte dtv_control#46
byte dtv_control#47
byte dtv_control#48
byte dtv_control#49
byte dtv_control#5
byte dtv_control#50
byte dtv_control#51
byte dtv_control#52
byte dtv_control#53
byte dtv_control#54
byte dtv_control#55
byte dtv_control#56
byte dtv_control#57
byte dtv_control#58
byte dtv_control#59
byte dtv_control#6
byte dtv_control#60
byte dtv_control#61
byte dtv_control#62
byte dtv_control#63
byte dtv_control#64
byte dtv_control#65
byte dtv_control#66
byte dtv_control#67
byte dtv_control#68
byte dtv_control#69
byte dtv_control#7
byte dtv_control#70
byte dtv_control#71
byte dtv_control#72
byte dtv_control#73
byte dtv_control#74
byte dtv_control#75
byte dtv_control#76
byte dtv_control#77
byte dtv_control#78
byte dtv_control#79
byte dtv_control#8
byte dtv_control#80
byte dtv_control#81
byte dtv_control#82
byte dtv_control#83
byte dtv_control#84
byte dtv_control#85
byte dtv_control#86
byte dtv_control#87
byte dtv_control#88
byte dtv_control#89
byte dtv_control#9
byte dtv_control#90
byte dtv_control#91
byte dtv_control#92
byte dtv_control#93
byte dtv_control#94
byte dtv_control#95
byte dtv_control#96
byte dtv_control#97
byte dtv_control#98
byte dtv_control#99
byte keyboard_key_pressed(byte keyboard_key_pressed::key)
number~ keyboard_key_pressed::$0
byte~ keyboard_key_pressed::$1
byte~ keyboard_key_pressed::$2
byte~ keyboard_key_pressed::$3
byte keyboard_key_pressed::colidx
byte keyboard_key_pressed::colidx#0
byte keyboard_key_pressed::colidx#1
byte keyboard_key_pressed::key
byte keyboard_key_pressed::key#0
byte keyboard_key_pressed::key#1
byte keyboard_key_pressed::key#10
byte keyboard_key_pressed::key#11
byte keyboard_key_pressed::key#12
byte keyboard_key_pressed::key#13
byte keyboard_key_pressed::key#14
byte keyboard_key_pressed::key#15
byte keyboard_key_pressed::key#16
byte keyboard_key_pressed::key#17
byte keyboard_key_pressed::key#18
byte keyboard_key_pressed::key#19
byte keyboard_key_pressed::key#2
byte keyboard_key_pressed::key#20
byte keyboard_key_pressed::key#3
byte keyboard_key_pressed::key#4
byte keyboard_key_pressed::key#5
byte keyboard_key_pressed::key#6
byte keyboard_key_pressed::key#7
byte keyboard_key_pressed::key#8
byte keyboard_key_pressed::key#9
byte keyboard_key_pressed::return
byte keyboard_key_pressed::return#0
byte keyboard_key_pressed::return#1
byte keyboard_key_pressed::return#10
byte keyboard_key_pressed::return#11
byte keyboard_key_pressed::return#12
byte keyboard_key_pressed::return#13
byte keyboard_key_pressed::return#14
byte keyboard_key_pressed::return#15
byte keyboard_key_pressed::return#16
byte keyboard_key_pressed::return#17
byte keyboard_key_pressed::return#18
byte keyboard_key_pressed::return#19
byte keyboard_key_pressed::return#2
byte keyboard_key_pressed::return#20
byte keyboard_key_pressed::return#21
byte keyboard_key_pressed::return#22
byte keyboard_key_pressed::return#23
byte keyboard_key_pressed::return#24
byte keyboard_key_pressed::return#25
byte keyboard_key_pressed::return#26
byte keyboard_key_pressed::return#27
byte keyboard_key_pressed::return#28
byte keyboard_key_pressed::return#29
byte keyboard_key_pressed::return#3
byte keyboard_key_pressed::return#30
byte keyboard_key_pressed::return#31
byte keyboard_key_pressed::return#32
byte keyboard_key_pressed::return#33
byte keyboard_key_pressed::return#34
byte keyboard_key_pressed::return#35
byte keyboard_key_pressed::return#36
byte keyboard_key_pressed::return#37
byte keyboard_key_pressed::return#38
byte keyboard_key_pressed::return#39
byte keyboard_key_pressed::return#4
byte keyboard_key_pressed::return#40
byte keyboard_key_pressed::return#41
byte keyboard_key_pressed::return#42
byte keyboard_key_pressed::return#5
byte keyboard_key_pressed::return#6
byte keyboard_key_pressed::return#7
byte keyboard_key_pressed::return#8
byte keyboard_key_pressed::return#9
byte keyboard_key_pressed::rowidx
byte keyboard_key_pressed::rowidx#0
const byte* keyboard_matrix_col_bitmask[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte~ keyboard_matrix_read::$0
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0
byte keyboard_matrix_read::return#1
byte keyboard_matrix_read::return#2
byte keyboard_matrix_read::return#3
byte keyboard_matrix_read::return#4
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::row_pressed_bits#0
byte keyboard_matrix_read::rowid
byte keyboard_matrix_read::rowid#0
byte keyboard_matrix_read::rowid#1
const byte* keyboard_matrix_row_bitmask[8]  = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void menu()
bool~ menu::$10
bool~ menu::$11
byte~ menu::$13
bool~ menu::$14
bool~ menu::$15
byte~ menu::$17
bool~ menu::$18
bool~ menu::$19
byte~ menu::$21
bool~ menu::$22
bool~ menu::$23
byte~ menu::$25
bool~ menu::$26
bool~ menu::$27
byte~ menu::$29
bool~ menu::$3
bool~ menu::$30
bool~ menu::$31
byte~ menu::$33
bool~ menu::$34
bool~ menu::$35
byte~ menu::$37
bool~ menu::$38
bool~ menu::$39
bool~ menu::$4
byte~ menu::$41
bool~ menu::$42
bool~ menu::$43
byte~ menu::$45
bool~ menu::$46
bool~ menu::$47
byte~ menu::$49
byte~ menu::$5
bool~ menu::$50
bool~ menu::$51
bool~ menu::$6
bool~ menu::$7
byte~ menu::$9
const nomodify byte* menu::CHARSET = (byte*)$9800
const nomodify byte* menu::SCREEN = (byte*)$8000
byte* menu::c
byte* menu::c#0
byte* menu::c#1
byte* menu::c#2
byte* menu::c#3
byte menu::i
byte menu::i#0
byte menu::i#1
byte menu::i#2
void mode_8bppchunkybmm()
bool~ mode_8bppchunkybmm::$3
bool~ mode_8bppchunkybmm::$4
bool~ mode_8bppchunkybmm::$5
word~ mode_8bppchunkybmm::$7
bool~ mode_8bppchunkybmm::$8
bool~ mode_8bppchunkybmm::$9
const nomodify dword mode_8bppchunkybmm::PLANEB = $20000
byte mode_8bppchunkybmm::c
byte mode_8bppchunkybmm::c#0
byte* mode_8bppchunkybmm::gfxb
byte* mode_8bppchunkybmm::gfxb#0
byte* mode_8bppchunkybmm::gfxb#1
byte* mode_8bppchunkybmm::gfxb#2
byte* mode_8bppchunkybmm::gfxb#3
byte* mode_8bppchunkybmm::gfxb#4
byte* mode_8bppchunkybmm::gfxb#5
byte* mode_8bppchunkybmm::gfxb#6
byte mode_8bppchunkybmm::gfxbCpuBank
byte mode_8bppchunkybmm::gfxbCpuBank#0
byte mode_8bppchunkybmm::gfxbCpuBank#1
byte mode_8bppchunkybmm::gfxbCpuBank#2
byte mode_8bppchunkybmm::gfxbCpuBank#3
byte mode_8bppchunkybmm::gfxbCpuBank#4
byte mode_8bppchunkybmm::gfxbCpuBank#5
byte mode_8bppchunkybmm::gfxbCpuBank#6
byte mode_8bppchunkybmm::gfxbCpuBank#7
byte mode_8bppchunkybmm::gfxbCpuBank#8
byte mode_8bppchunkybmm::gfxbCpuBank#9
byte mode_8bppchunkybmm::i
byte mode_8bppchunkybmm::i#0
byte mode_8bppchunkybmm::i#1
byte mode_8bppchunkybmm::i#2
word mode_8bppchunkybmm::x
word mode_8bppchunkybmm::x#0
word mode_8bppchunkybmm::x#1
word mode_8bppchunkybmm::x#2
word mode_8bppchunkybmm::x#3
word mode_8bppchunkybmm::x#4
word mode_8bppchunkybmm::x#5
byte mode_8bppchunkybmm::y
byte mode_8bppchunkybmm::y#0
byte mode_8bppchunkybmm::y#1
byte mode_8bppchunkybmm::y#2
byte mode_8bppchunkybmm::y#3
byte mode_8bppchunkybmm::y#4
byte mode_8bppchunkybmm::y#5
byte mode_8bppchunkybmm::y#6
byte mode_8bppchunkybmm::y#7
void mode_8bpppixelcell()
bool~ mode_8bpppixelcell::$1
bool~ mode_8bpppixelcell::$10
number~ mode_8bpppixelcell::$11
bool~ mode_8bpppixelcell::$12
bool~ mode_8bpppixelcell::$13
bool~ mode_8bpppixelcell::$14
number~ mode_8bpppixelcell::$2
number~ mode_8bpppixelcell::$3
number~ mode_8bpppixelcell::$4
number~ mode_8bpppixelcell::$5
bool~ mode_8bpppixelcell::$6
bool~ mode_8bpppixelcell::$7
number~ mode_8bpppixelcell::$8
bool~ mode_8bpppixelcell::$9
const byte* mode_8bpppixelcell::CHARGEN = (byte*)$d000
const nomodify byte* mode_8bpppixelcell::PLANEA = (byte*)$3c00
const nomodify byte* mode_8bpppixelcell::PLANEB = (byte*)$4000
byte mode_8bpppixelcell::ax
byte mode_8bpppixelcell::ax#0
byte mode_8bpppixelcell::ax#1
byte mode_8bpppixelcell::ax#2
byte mode_8bpppixelcell::ay
byte mode_8bpppixelcell::ay#0
byte mode_8bpppixelcell::ay#1
byte mode_8bpppixelcell::ay#2
byte mode_8bpppixelcell::ay#3
byte mode_8bpppixelcell::ay#4
byte mode_8bpppixelcell::bits
byte mode_8bpppixelcell::bits#0
byte mode_8bpppixelcell::bits#1
byte mode_8bpppixelcell::bits#2
byte mode_8bpppixelcell::bits#3
byte mode_8bpppixelcell::bits#4
byte mode_8bpppixelcell::c
byte mode_8bpppixelcell::c#0
byte mode_8bpppixelcell::c#1
byte mode_8bpppixelcell::c#2
byte mode_8bpppixelcell::ch
byte mode_8bpppixelcell::ch#0
byte mode_8bpppixelcell::ch#1
byte mode_8bpppixelcell::ch#2
byte mode_8bpppixelcell::ch#3
byte mode_8bpppixelcell::ch#4
byte mode_8bpppixelcell::ch#5
byte mode_8bpppixelcell::ch#6
byte mode_8bpppixelcell::ch#7
byte mode_8bpppixelcell::ch#8
byte* mode_8bpppixelcell::chargen
byte* mode_8bpppixelcell::chargen#0
byte* mode_8bpppixelcell::chargen#1
byte* mode_8bpppixelcell::chargen#2
byte* mode_8bpppixelcell::chargen#3
byte* mode_8bpppixelcell::chargen#4
byte* mode_8bpppixelcell::chargen#5
byte* mode_8bpppixelcell::chargen#6
byte* mode_8bpppixelcell::chargen#7
byte* mode_8bpppixelcell::chargen#8
byte mode_8bpppixelcell::col
byte mode_8bpppixelcell::col#0
byte mode_8bpppixelcell::col#1
byte mode_8bpppixelcell::col#2
byte mode_8bpppixelcell::col#3
byte mode_8bpppixelcell::col#4
byte mode_8bpppixelcell::col#5
byte mode_8bpppixelcell::col#6
byte mode_8bpppixelcell::col#7
byte mode_8bpppixelcell::col#8
byte mode_8bpppixelcell::cp
byte mode_8bpppixelcell::cp#0
byte mode_8bpppixelcell::cp#1
byte mode_8bpppixelcell::cp#2
byte mode_8bpppixelcell::cp#3
byte mode_8bpppixelcell::cp#4
byte mode_8bpppixelcell::cr
byte mode_8bpppixelcell::cr#0
byte mode_8bpppixelcell::cr#1
byte mode_8bpppixelcell::cr#2
byte mode_8bpppixelcell::cr#3
byte mode_8bpppixelcell::cr#4
byte mode_8bpppixelcell::cr#5
byte mode_8bpppixelcell::cr#6
byte* mode_8bpppixelcell::gfxa
byte* mode_8bpppixelcell::gfxa#0
byte* mode_8bpppixelcell::gfxa#1
byte* mode_8bpppixelcell::gfxa#2
byte* mode_8bpppixelcell::gfxa#3
byte* mode_8bpppixelcell::gfxa#4
byte* mode_8bpppixelcell::gfxb
byte* mode_8bpppixelcell::gfxb#0
byte* mode_8bpppixelcell::gfxb#1
byte* mode_8bpppixelcell::gfxb#2
byte* mode_8bpppixelcell::gfxb#3
byte* mode_8bpppixelcell::gfxb#4
byte* mode_8bpppixelcell::gfxb#5
byte* mode_8bpppixelcell::gfxb#6
byte* mode_8bpppixelcell::gfxb#7
byte* mode_8bpppixelcell::gfxb#8
byte mode_8bpppixelcell::i
byte mode_8bpppixelcell::i#0
byte mode_8bpppixelcell::i#1
byte mode_8bpppixelcell::i#2
void mode_ctrl()
bool~ mode_ctrl::$0
byte~ mode_ctrl::$1
bool~ mode_ctrl::$10
byte~ mode_ctrl::$11
byte~ mode_ctrl::$12
bool~ mode_ctrl::$13
bool~ mode_ctrl::$14
byte~ mode_ctrl::$15
byte~ mode_ctrl::$16
bool~ mode_ctrl::$17
bool~ mode_ctrl::$18
byte~ mode_ctrl::$19
bool~ mode_ctrl::$2
byte~ mode_ctrl::$20
bool~ mode_ctrl::$21
bool~ mode_ctrl::$22
byte~ mode_ctrl::$23
byte~ mode_ctrl::$24
bool~ mode_ctrl::$25
bool~ mode_ctrl::$26
byte~ mode_ctrl::$27
byte~ mode_ctrl::$28
bool~ mode_ctrl::$29
bool~ mode_ctrl::$3
bool~ mode_ctrl::$30
bool~ mode_ctrl::$31
bool~ mode_ctrl::$32
byte~ mode_ctrl::$4
bool~ mode_ctrl::$5
bool~ mode_ctrl::$6
byte~ mode_ctrl::$7
byte~ mode_ctrl::$8
bool~ mode_ctrl::$9
byte mode_ctrl::ctrl
byte mode_ctrl::ctrl#0
byte mode_ctrl::ctrl#1
byte mode_ctrl::ctrl#10
byte mode_ctrl::ctrl#11
byte mode_ctrl::ctrl#12
byte mode_ctrl::ctrl#13
byte mode_ctrl::ctrl#14
byte mode_ctrl::ctrl#15
byte mode_ctrl::ctrl#16
byte mode_ctrl::ctrl#17
byte mode_ctrl::ctrl#18
byte mode_ctrl::ctrl#19
byte mode_ctrl::ctrl#2
byte mode_ctrl::ctrl#20
byte mode_ctrl::ctrl#21
byte mode_ctrl::ctrl#22
byte mode_ctrl::ctrl#23
byte mode_ctrl::ctrl#24
byte mode_ctrl::ctrl#25
byte mode_ctrl::ctrl#26
byte mode_ctrl::ctrl#27
byte mode_ctrl::ctrl#28
byte mode_ctrl::ctrl#3
byte mode_ctrl::ctrl#4
byte mode_ctrl::ctrl#5
byte mode_ctrl::ctrl#6
byte mode_ctrl::ctrl#7
byte mode_ctrl::ctrl#8
byte mode_ctrl::ctrl#9
void mode_ecmchar()
bool~ mode_ecmchar::$1
byte~ mode_ecmchar::$2
number~ mode_ecmchar::$3
number~ mode_ecmchar::$4
number~ mode_ecmchar::$5
number~ mode_ecmchar::$6
number~ mode_ecmchar::$7
bool~ mode_ecmchar::$8
bool~ mode_ecmchar::$9
const nomodify byte* mode_ecmchar::CHARSET = (byte*)$9000
const nomodify byte* mode_ecmchar::COLORS = (byte*)$d800
const nomodify byte* mode_ecmchar::SCREEN = (byte*)$8000
byte* mode_ecmchar::ch
byte* mode_ecmchar::ch#0
byte* mode_ecmchar::ch#1
byte* mode_ecmchar::ch#2
byte* mode_ecmchar::ch#3
byte* mode_ecmchar::ch#4
byte* mode_ecmchar::col
byte* mode_ecmchar::col#0
byte* mode_ecmchar::col#1
byte* mode_ecmchar::col#2
byte* mode_ecmchar::col#3
byte* mode_ecmchar::col#4
byte mode_ecmchar::cx
byte mode_ecmchar::cx#0
byte mode_ecmchar::cx#1
byte mode_ecmchar::cx#2
byte mode_ecmchar::cy
byte mode_ecmchar::cy#0
byte mode_ecmchar::cy#1
byte mode_ecmchar::cy#2
byte mode_ecmchar::cy#3
byte mode_ecmchar::cy#4
byte mode_ecmchar::i
byte mode_ecmchar::i#0
byte mode_ecmchar::i#1
byte mode_ecmchar::i#2
void mode_hicolecmchar()
bool~ mode_hicolecmchar::$1
number~ mode_hicolecmchar::$2
number~ mode_hicolecmchar::$3
number~ mode_hicolecmchar::$4
number~ mode_hicolecmchar::$5
bool~ mode_hicolecmchar::$6
bool~ mode_hicolecmchar::$7
const nomodify byte* mode_hicolecmchar::CHARSET = (byte*)$9000
const nomodify byte* mode_hicolecmchar::COLORS = (byte*)$8400
const nomodify byte* mode_hicolecmchar::SCREEN = (byte*)$8000
byte* mode_hicolecmchar::ch
byte* mode_hicolecmchar::ch#0
byte* mode_hicolecmchar::ch#1
byte* mode_hicolecmchar::ch#2
byte* mode_hicolecmchar::ch#3
byte* mode_hicolecmchar::ch#4
byte* mode_hicolecmchar::col
byte* mode_hicolecmchar::col#0
byte* mode_hicolecmchar::col#1
byte* mode_hicolecmchar::col#2
byte* mode_hicolecmchar::col#3
byte* mode_hicolecmchar::col#4
byte mode_hicolecmchar::cx
byte mode_hicolecmchar::cx#0
byte mode_hicolecmchar::cx#1
byte mode_hicolecmchar::cx#2
byte mode_hicolecmchar::cy
byte mode_hicolecmchar::cy#0
byte mode_hicolecmchar::cy#1
byte mode_hicolecmchar::cy#2
byte mode_hicolecmchar::cy#3
byte mode_hicolecmchar::cy#4
byte mode_hicolecmchar::i
byte mode_hicolecmchar::i#0
byte mode_hicolecmchar::i#1
byte mode_hicolecmchar::i#2
byte mode_hicolecmchar::v
byte mode_hicolecmchar::v#0
void mode_hicolmcchar()
bool~ mode_hicolmcchar::$1
number~ mode_hicolmcchar::$2
number~ mode_hicolmcchar::$3
number~ mode_hicolmcchar::$4
number~ mode_hicolmcchar::$5
bool~ mode_hicolmcchar::$6
bool~ mode_hicolmcchar::$7
const nomodify byte* mode_hicolmcchar::CHARSET = (byte*)$9000
const nomodify byte* mode_hicolmcchar::COLORS = (byte*)$8400
const nomodify byte* mode_hicolmcchar::SCREEN = (byte*)$8000
byte* mode_hicolmcchar::ch
byte* mode_hicolmcchar::ch#0
byte* mode_hicolmcchar::ch#1
byte* mode_hicolmcchar::ch#2
byte* mode_hicolmcchar::ch#3
byte* mode_hicolmcchar::ch#4
byte* mode_hicolmcchar::col
byte* mode_hicolmcchar::col#0
byte* mode_hicolmcchar::col#1
byte* mode_hicolmcchar::col#2
byte* mode_hicolmcchar::col#3
byte* mode_hicolmcchar::col#4
byte mode_hicolmcchar::cx
byte mode_hicolmcchar::cx#0
byte mode_hicolmcchar::cx#1
byte mode_hicolmcchar::cx#2
byte mode_hicolmcchar::cy
byte mode_hicolmcchar::cy#0
byte mode_hicolmcchar::cy#1
byte mode_hicolmcchar::cy#2
byte mode_hicolmcchar::cy#3
byte mode_hicolmcchar::cy#4
byte mode_hicolmcchar::i
byte mode_hicolmcchar::i#0
byte mode_hicolmcchar::i#1
byte mode_hicolmcchar::i#2
byte mode_hicolmcchar::v
byte mode_hicolmcchar::v#0
void mode_hicolstdchar()
bool~ mode_hicolstdchar::$1
number~ mode_hicolstdchar::$2
number~ mode_hicolstdchar::$3
number~ mode_hicolstdchar::$4
number~ mode_hicolstdchar::$5
bool~ mode_hicolstdchar::$6
bool~ mode_hicolstdchar::$7
const nomodify byte* mode_hicolstdchar::CHARSET = (byte*)$9000
const nomodify byte* mode_hicolstdchar::COLORS = (byte*)$8400
const nomodify byte* mode_hicolstdchar::SCREEN = (byte*)$8000
byte* mode_hicolstdchar::ch
byte* mode_hicolstdchar::ch#0
byte* mode_hicolstdchar::ch#1
byte* mode_hicolstdchar::ch#2
byte* mode_hicolstdchar::ch#3
byte* mode_hicolstdchar::ch#4
byte* mode_hicolstdchar::col
byte* mode_hicolstdchar::col#0
byte* mode_hicolstdchar::col#1
byte* mode_hicolstdchar::col#2
byte* mode_hicolstdchar::col#3
byte* mode_hicolstdchar::col#4
byte mode_hicolstdchar::cx
byte mode_hicolstdchar::cx#0
byte mode_hicolstdchar::cx#1
byte mode_hicolstdchar::cx#2
byte mode_hicolstdchar::cy
byte mode_hicolstdchar::cy#0
byte mode_hicolstdchar::cy#1
byte mode_hicolstdchar::cy#2
byte mode_hicolstdchar::cy#3
byte mode_hicolstdchar::cy#4
byte mode_hicolstdchar::i
byte mode_hicolstdchar::i#0
byte mode_hicolstdchar::i#1
byte mode_hicolstdchar::i#2
byte mode_hicolstdchar::v
byte mode_hicolstdchar::v#0
void mode_mcchar()
bool~ mode_mcchar::$1
byte~ mode_mcchar::$2
number~ mode_mcchar::$3
number~ mode_mcchar::$4
number~ mode_mcchar::$5
number~ mode_mcchar::$6
number~ mode_mcchar::$7
bool~ mode_mcchar::$8
bool~ mode_mcchar::$9
const nomodify byte* mode_mcchar::CHARSET = (byte*)$9000
const nomodify byte* mode_mcchar::COLORS = (byte*)$d800
const nomodify byte* mode_mcchar::SCREEN = (byte*)$8000
byte* mode_mcchar::ch
byte* mode_mcchar::ch#0
byte* mode_mcchar::ch#1
byte* mode_mcchar::ch#2
byte* mode_mcchar::ch#3
byte* mode_mcchar::ch#4
byte* mode_mcchar::col
byte* mode_mcchar::col#0
byte* mode_mcchar::col#1
byte* mode_mcchar::col#2
byte* mode_mcchar::col#3
byte* mode_mcchar::col#4
byte mode_mcchar::cx
byte mode_mcchar::cx#0
byte mode_mcchar::cx#1
byte mode_mcchar::cx#2
byte mode_mcchar::cy
byte mode_mcchar::cy#0
byte mode_mcchar::cy#1
byte mode_mcchar::cy#2
byte mode_mcchar::cy#3
byte mode_mcchar::cy#4
byte mode_mcchar::i
byte mode_mcchar::i#0
byte mode_mcchar::i#1
byte mode_mcchar::i#2
void mode_sixsfred()
bool~ mode_sixsfred::$1
bool~ mode_sixsfred::$10
bool~ mode_sixsfred::$11
byte~ mode_sixsfred::$2
number~ mode_sixsfred::$3
bool~ mode_sixsfred::$4
bool~ mode_sixsfred::$5
number~ mode_sixsfred::$6
number~ mode_sixsfred::$7
bool~ mode_sixsfred::$8
bool~ mode_sixsfred::$9
const nomodify byte* mode_sixsfred::COLORS = (byte*)$8000
const nomodify byte* mode_sixsfred::PLANEA = (byte*)$4000
const nomodify byte* mode_sixsfred::PLANEB = (byte*)$6000
byte mode_sixsfred::ax
byte mode_sixsfred::ax#0
byte mode_sixsfred::ax#1
byte mode_sixsfred::ax#2
byte mode_sixsfred::ay
byte mode_sixsfred::ay#0
byte mode_sixsfred::ay#1
byte mode_sixsfred::ay#2
byte mode_sixsfred::ay#3
byte mode_sixsfred::ay#4
byte mode_sixsfred::bx
byte mode_sixsfred::bx#0
byte mode_sixsfred::bx#1
byte mode_sixsfred::bx#2
byte mode_sixsfred::by
byte mode_sixsfred::by#0
byte mode_sixsfred::by#1
byte mode_sixsfred::by#2
byte mode_sixsfred::by#3
byte mode_sixsfred::by#4
byte* mode_sixsfred::col
byte* mode_sixsfred::col#0
byte* mode_sixsfred::col#1
byte* mode_sixsfred::col#2
byte* mode_sixsfred::col#3
byte* mode_sixsfred::col#4
byte mode_sixsfred::cx
byte mode_sixsfred::cx#0
byte mode_sixsfred::cx#1
byte mode_sixsfred::cx#2
byte mode_sixsfred::cy
byte mode_sixsfred::cy#0
byte mode_sixsfred::cy#1
byte mode_sixsfred::cy#2
byte mode_sixsfred::cy#3
byte mode_sixsfred::cy#4
byte* mode_sixsfred::gfxa
byte* mode_sixsfred::gfxa#0
byte* mode_sixsfred::gfxa#1
byte* mode_sixsfred::gfxa#2
byte* mode_sixsfred::gfxa#3
byte* mode_sixsfred::gfxa#4
byte* mode_sixsfred::gfxb
byte* mode_sixsfred::gfxb#0
byte* mode_sixsfred::gfxb#1
byte* mode_sixsfred::gfxb#2
byte* mode_sixsfred::gfxb#3
byte* mode_sixsfred::gfxb#4
byte mode_sixsfred::i
byte mode_sixsfred::i#0
byte mode_sixsfred::i#1
byte mode_sixsfred::i#2
byte mode_sixsfred::row
byte mode_sixsfred::row#0
const byte* mode_sixsfred::row_bitmask[]  = { 0, $55, $aa, $ff }
void mode_sixsfred2()
bool~ mode_sixsfred2::$1
bool~ mode_sixsfred2::$10
bool~ mode_sixsfred2::$11
bool~ mode_sixsfred2::$12
bool~ mode_sixsfred2::$13
number~ mode_sixsfred2::$2
number~ mode_sixsfred2::$3
number~ mode_sixsfred2::$4
number~ mode_sixsfred2::$5
bool~ mode_sixsfred2::$6
bool~ mode_sixsfred2::$7
number~ mode_sixsfred2::$8
number~ mode_sixsfred2::$9
const nomodify byte* mode_sixsfred2::COLORS = (byte*)$8000
const nomodify byte* mode_sixsfred2::PLANEA = (byte*)$4000
const nomodify byte* mode_sixsfred2::PLANEB = (byte*)$6000
byte mode_sixsfred2::ax
byte mode_sixsfred2::ax#0
byte mode_sixsfred2::ax#1
byte mode_sixsfred2::ax#2
byte mode_sixsfred2::ay
byte mode_sixsfred2::ay#0
byte mode_sixsfred2::ay#1
byte mode_sixsfred2::ay#2
byte mode_sixsfred2::ay#3
byte mode_sixsfred2::ay#4
byte mode_sixsfred2::bx
byte mode_sixsfred2::bx#0
byte mode_sixsfred2::bx#1
byte mode_sixsfred2::bx#2
byte mode_sixsfred2::by
byte mode_sixsfred2::by#0
byte mode_sixsfred2::by#1
byte mode_sixsfred2::by#2
byte mode_sixsfred2::by#3
byte mode_sixsfred2::by#4
byte* mode_sixsfred2::col
byte* mode_sixsfred2::col#0
byte* mode_sixsfred2::col#1
byte* mode_sixsfred2::col#2
byte* mode_sixsfred2::col#3
byte* mode_sixsfred2::col#4
byte mode_sixsfred2::cx
byte mode_sixsfred2::cx#0
byte mode_sixsfred2::cx#1
byte mode_sixsfred2::cx#2
byte mode_sixsfred2::cy
byte mode_sixsfred2::cy#0
byte mode_sixsfred2::cy#1
byte mode_sixsfred2::cy#2
byte mode_sixsfred2::cy#3
byte mode_sixsfred2::cy#4
byte* mode_sixsfred2::gfxa
byte* mode_sixsfred2::gfxa#0
byte* mode_sixsfred2::gfxa#1
byte* mode_sixsfred2::gfxa#2
byte* mode_sixsfred2::gfxa#3
byte* mode_sixsfred2::gfxa#4
byte* mode_sixsfred2::gfxb
byte* mode_sixsfred2::gfxb#0
byte* mode_sixsfred2::gfxb#1
byte* mode_sixsfred2::gfxb#2
byte* mode_sixsfred2::gfxb#3
byte* mode_sixsfred2::gfxb#4
byte mode_sixsfred2::i
byte mode_sixsfred2::i#0
byte mode_sixsfred2::i#1
byte mode_sixsfred2::i#2
byte mode_sixsfred2::row
byte mode_sixsfred2::row#0
const byte* mode_sixsfred2::row_bitmask[]  = { 0, $55, $aa, $ff }
void mode_stdbitmap()
bool~ mode_stdbitmap::$10
bool~ mode_stdbitmap::$11
number~ mode_stdbitmap::$12
number~ mode_stdbitmap::$13
bool~ mode_stdbitmap::$3
byte~ mode_stdbitmap::$4
number~ mode_stdbitmap::$5
number~ mode_stdbitmap::$6
number~ mode_stdbitmap::$7
number~ mode_stdbitmap::$8
bool~ mode_stdbitmap::$9
const nomodify byte* mode_stdbitmap::BITMAP = (byte*)$6000
const nomodify byte* mode_stdbitmap::SCREEN = (byte*)$4000
byte* mode_stdbitmap::ch
byte* mode_stdbitmap::ch#0
byte* mode_stdbitmap::ch#1
byte* mode_stdbitmap::ch#2
byte* mode_stdbitmap::ch#3
byte* mode_stdbitmap::ch#4
byte mode_stdbitmap::col
byte mode_stdbitmap::col#0
byte mode_stdbitmap::col2
byte mode_stdbitmap::col2#0
byte mode_stdbitmap::cx
byte mode_stdbitmap::cx#0
byte mode_stdbitmap::cx#1
byte mode_stdbitmap::cx#2
byte mode_stdbitmap::cy
byte mode_stdbitmap::cy#0
byte mode_stdbitmap::cy#1
byte mode_stdbitmap::cy#2
byte mode_stdbitmap::cy#3
byte mode_stdbitmap::cy#4
byte mode_stdbitmap::i
byte mode_stdbitmap::i#0
byte mode_stdbitmap::i#1
byte mode_stdbitmap::i#2
byte mode_stdbitmap::l
byte mode_stdbitmap::l#0
byte mode_stdbitmap::l#1
byte mode_stdbitmap::l#2
byte mode_stdbitmap::l#3
byte mode_stdbitmap::l#4
const byte mode_stdbitmap::lines_cnt = 9
const byte* mode_stdbitmap::lines_x[]  = { 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80 }
const byte* mode_stdbitmap::lines_y[]  = { 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0 }
void mode_stdchar()
bool~ mode_stdchar::$1
byte~ mode_stdchar::$2
number~ mode_stdchar::$3
number~ mode_stdchar::$4
number~ mode_stdchar::$5
number~ mode_stdchar::$6
number~ mode_stdchar::$7
bool~ mode_stdchar::$8
bool~ mode_stdchar::$9
const nomodify byte* mode_stdchar::CHARSET = (byte*)$9000
const nomodify byte* mode_stdchar::COLORS = (byte*)$d800
const nomodify byte* mode_stdchar::SCREEN = (byte*)$8000
byte* mode_stdchar::ch
byte* mode_stdchar::ch#0
byte* mode_stdchar::ch#1
byte* mode_stdchar::ch#2
byte* mode_stdchar::ch#3
byte* mode_stdchar::ch#4
byte* mode_stdchar::col
byte* mode_stdchar::col#0
byte* mode_stdchar::col#1
byte* mode_stdchar::col#2
byte* mode_stdchar::col#3
byte* mode_stdchar::col#4
byte mode_stdchar::cx
byte mode_stdchar::cx#0
byte mode_stdchar::cx#1
byte mode_stdchar::cx#2
byte mode_stdchar::cy
byte mode_stdchar::cy#0
byte mode_stdchar::cy#1
byte mode_stdchar::cy#2
byte mode_stdchar::cy#3
byte mode_stdchar::cy#4
byte mode_stdchar::i
byte mode_stdchar::i#0
byte mode_stdchar::i#1
byte mode_stdchar::i#2
void mode_twoplanebitmap()
bool~ mode_twoplanebitmap::$1
bool~ mode_twoplanebitmap::$10
bool~ mode_twoplanebitmap::$11
bool~ mode_twoplanebitmap::$12
bool~ mode_twoplanebitmap::$13
number~ mode_twoplanebitmap::$2
number~ mode_twoplanebitmap::$3
number~ mode_twoplanebitmap::$4
number~ mode_twoplanebitmap::$5
bool~ mode_twoplanebitmap::$6
bool~ mode_twoplanebitmap::$7
number~ mode_twoplanebitmap::$8
bool~ mode_twoplanebitmap::$9
const nomodify byte* mode_twoplanebitmap::COLORS = (byte*)$8000
const nomodify byte* mode_twoplanebitmap::PLANEA = (byte*)$4000
const nomodify byte* mode_twoplanebitmap::PLANEB = (byte*)$6000
byte mode_twoplanebitmap::ax
byte mode_twoplanebitmap::ax#0
byte mode_twoplanebitmap::ax#1
byte mode_twoplanebitmap::ax#2
byte mode_twoplanebitmap::ax#3
byte mode_twoplanebitmap::ax#4
byte mode_twoplanebitmap::ax#5
byte mode_twoplanebitmap::ay
byte mode_twoplanebitmap::ay#0
byte mode_twoplanebitmap::ay#1
byte mode_twoplanebitmap::ay#2
byte mode_twoplanebitmap::ay#3
byte mode_twoplanebitmap::ay#4
byte mode_twoplanebitmap::ay#5
byte mode_twoplanebitmap::ay#6
byte mode_twoplanebitmap::ay#7
byte mode_twoplanebitmap::bx
byte mode_twoplanebitmap::bx#0
byte mode_twoplanebitmap::bx#1
byte mode_twoplanebitmap::bx#2
byte mode_twoplanebitmap::by
byte mode_twoplanebitmap::by#0
byte mode_twoplanebitmap::by#1
byte mode_twoplanebitmap::by#2
byte mode_twoplanebitmap::by#3
byte mode_twoplanebitmap::by#4
byte* mode_twoplanebitmap::col
byte* mode_twoplanebitmap::col#0
byte* mode_twoplanebitmap::col#1
byte* mode_twoplanebitmap::col#2
byte* mode_twoplanebitmap::col#3
byte* mode_twoplanebitmap::col#4
byte mode_twoplanebitmap::cx
byte mode_twoplanebitmap::cx#0
byte mode_twoplanebitmap::cx#1
byte mode_twoplanebitmap::cx#2
byte mode_twoplanebitmap::cy
byte mode_twoplanebitmap::cy#0
byte mode_twoplanebitmap::cy#1
byte mode_twoplanebitmap::cy#2
byte mode_twoplanebitmap::cy#3
byte mode_twoplanebitmap::cy#4
byte* mode_twoplanebitmap::gfxa
byte* mode_twoplanebitmap::gfxa#0
byte* mode_twoplanebitmap::gfxa#1
byte* mode_twoplanebitmap::gfxa#2
byte* mode_twoplanebitmap::gfxa#3
byte* mode_twoplanebitmap::gfxa#4
byte* mode_twoplanebitmap::gfxa#5
byte* mode_twoplanebitmap::gfxa#6
byte* mode_twoplanebitmap::gfxa#7
byte* mode_twoplanebitmap::gfxa#8
byte* mode_twoplanebitmap::gfxb
byte* mode_twoplanebitmap::gfxb#0
byte* mode_twoplanebitmap::gfxb#1
byte* mode_twoplanebitmap::gfxb#2
byte* mode_twoplanebitmap::gfxb#3
byte* mode_twoplanebitmap::gfxb#4
byte mode_twoplanebitmap::i
byte mode_twoplanebitmap::i#0
byte mode_twoplanebitmap::i#1
byte mode_twoplanebitmap::i#2
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0
byte print_char::ch#1
byte* print_char_cursor
byte* print_char_cursor#0
byte* print_char_cursor#1
byte* print_char_cursor#10
byte* print_char_cursor#100
byte* print_char_cursor#101
byte* print_char_cursor#102
byte* print_char_cursor#11
byte* print_char_cursor#12
byte* print_char_cursor#13
byte* print_char_cursor#14
byte* print_char_cursor#15
byte* print_char_cursor#16
byte* print_char_cursor#17
byte* print_char_cursor#18
byte* print_char_cursor#19
byte* print_char_cursor#2
byte* print_char_cursor#20
byte* print_char_cursor#21
byte* print_char_cursor#22
byte* print_char_cursor#23
byte* print_char_cursor#24
byte* print_char_cursor#25
byte* print_char_cursor#26
byte* print_char_cursor#27
byte* print_char_cursor#28
byte* print_char_cursor#29
byte* print_char_cursor#3
byte* print_char_cursor#30
byte* print_char_cursor#31
byte* print_char_cursor#32
byte* print_char_cursor#33
byte* print_char_cursor#34
byte* print_char_cursor#35
byte* print_char_cursor#36
byte* print_char_cursor#37
byte* print_char_cursor#38
byte* print_char_cursor#39
byte* print_char_cursor#4
byte* print_char_cursor#40
byte* print_char_cursor#41
byte* print_char_cursor#42
byte* print_char_cursor#43
byte* print_char_cursor#44
byte* print_char_cursor#45
byte* print_char_cursor#46
byte* print_char_cursor#47
byte* print_char_cursor#48
byte* print_char_cursor#49
byte* print_char_cursor#5
byte* print_char_cursor#50
byte* print_char_cursor#51
byte* print_char_cursor#52
byte* print_char_cursor#53
byte* print_char_cursor#54
byte* print_char_cursor#55
byte* print_char_cursor#56
byte* print_char_cursor#57
byte* print_char_cursor#58
byte* print_char_cursor#59
byte* print_char_cursor#6
byte* print_char_cursor#60
byte* print_char_cursor#61
byte* print_char_cursor#62
byte* print_char_cursor#63
byte* print_char_cursor#64
byte* print_char_cursor#65
byte* print_char_cursor#66
byte* print_char_cursor#67
byte* print_char_cursor#68
byte* print_char_cursor#69
byte* print_char_cursor#7
byte* print_char_cursor#70
byte* print_char_cursor#71
byte* print_char_cursor#72
byte* print_char_cursor#73
byte* print_char_cursor#74
byte* print_char_cursor#75
byte* print_char_cursor#76
byte* print_char_cursor#77
byte* print_char_cursor#78
byte* print_char_cursor#79
byte* print_char_cursor#8
byte* print_char_cursor#80
byte* print_char_cursor#81
byte* print_char_cursor#82
byte* print_char_cursor#83
byte* print_char_cursor#84
byte* print_char_cursor#85
byte* print_char_cursor#86
byte* print_char_cursor#87
byte* print_char_cursor#88
byte* print_char_cursor#89
byte* print_char_cursor#9
byte* print_char_cursor#90
byte* print_char_cursor#91
byte* print_char_cursor#92
byte* print_char_cursor#93
byte* print_char_cursor#94
byte* print_char_cursor#95
byte* print_char_cursor#96
byte* print_char_cursor#97
byte* print_char_cursor#98
byte* print_char_cursor#99
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#0
byte* print_line_cursor#1
byte* print_line_cursor#10
byte* print_line_cursor#11
byte* print_line_cursor#12
byte* print_line_cursor#13
byte* print_line_cursor#14
byte* print_line_cursor#15
byte* print_line_cursor#16
byte* print_line_cursor#17
byte* print_line_cursor#18
byte* print_line_cursor#19
byte* print_line_cursor#2
byte* print_line_cursor#20
byte* print_line_cursor#21
byte* print_line_cursor#22
byte* print_line_cursor#23
byte* print_line_cursor#24
byte* print_line_cursor#25
byte* print_line_cursor#26
byte* print_line_cursor#27
byte* print_line_cursor#28
byte* print_line_cursor#29
byte* print_line_cursor#3
byte* print_line_cursor#30
byte* print_line_cursor#31
byte* print_line_cursor#32
byte* print_line_cursor#33
byte* print_line_cursor#34
byte* print_line_cursor#35
byte* print_line_cursor#36
byte* print_line_cursor#37
byte* print_line_cursor#38
byte* print_line_cursor#39
byte* print_line_cursor#4
byte* print_line_cursor#40
byte* print_line_cursor#41
byte* print_line_cursor#42
byte* print_line_cursor#43
byte* print_line_cursor#44
byte* print_line_cursor#45
byte* print_line_cursor#46
byte* print_line_cursor#47
byte* print_line_cursor#48
byte* print_line_cursor#49
byte* print_line_cursor#5
byte* print_line_cursor#50
byte* print_line_cursor#51
byte* print_line_cursor#52
byte* print_line_cursor#53
byte* print_line_cursor#54
byte* print_line_cursor#55
byte* print_line_cursor#56
byte* print_line_cursor#57
byte* print_line_cursor#58
byte* print_line_cursor#59
byte* print_line_cursor#6
byte* print_line_cursor#60
byte* print_line_cursor#61
byte* print_line_cursor#62
byte* print_line_cursor#63
byte* print_line_cursor#64
byte* print_line_cursor#65
byte* print_line_cursor#66
byte* print_line_cursor#67
byte* print_line_cursor#68
byte* print_line_cursor#69
byte* print_line_cursor#7
byte* print_line_cursor#70
byte* print_line_cursor#71
byte* print_line_cursor#72
byte* print_line_cursor#73
byte* print_line_cursor#74
byte* print_line_cursor#75
byte* print_line_cursor#76
byte* print_line_cursor#77
byte* print_line_cursor#78
byte* print_line_cursor#79
byte* print_line_cursor#8
byte* print_line_cursor#80
byte* print_line_cursor#81
byte* print_line_cursor#82
byte* print_line_cursor#83
byte* print_line_cursor#84
byte* print_line_cursor#85
byte* print_line_cursor#86
byte* print_line_cursor#87
byte* print_line_cursor#88
byte* print_line_cursor#89
byte* print_line_cursor#9
byte* print_line_cursor#90
byte* print_line_cursor#91
byte* print_line_cursor#92
byte* print_line_cursor#93
byte* print_line_cursor#94
byte* print_line_cursor#95
byte* print_line_cursor#96
byte* print_line_cursor#97
byte* print_line_cursor#98
void print_ln()
byte*~ print_ln::$0
bool~ print_ln::$1
byte* print_screen
byte* print_screen#0
byte* print_screen#1
byte* print_screen#10
byte* print_screen#11
byte* print_screen#12
byte* print_screen#13
byte* print_screen#14
byte* print_screen#15
byte* print_screen#16
byte* print_screen#17
byte* print_screen#18
byte* print_screen#19
byte* print_screen#2
byte* print_screen#20
byte* print_screen#21
byte* print_screen#22
byte* print_screen#23
byte* print_screen#24
byte* print_screen#25
byte* print_screen#26
byte* print_screen#27
byte* print_screen#28
byte* print_screen#29
byte* print_screen#3
byte* print_screen#30
byte* print_screen#31
byte* print_screen#32
byte* print_screen#33
byte* print_screen#34
byte* print_screen#35
byte* print_screen#36
byte* print_screen#37
byte* print_screen#38
byte* print_screen#39
byte* print_screen#4
byte* print_screen#40
byte* print_screen#41
byte* print_screen#42
byte* print_screen#43
byte* print_screen#44
byte* print_screen#45
byte* print_screen#46
byte* print_screen#47
byte* print_screen#48
byte* print_screen#49
byte* print_screen#5
byte* print_screen#50
byte* print_screen#51
byte* print_screen#52
byte* print_screen#53
byte* print_screen#54
byte* print_screen#55
byte* print_screen#56
byte* print_screen#57
byte* print_screen#58
byte* print_screen#59
byte* print_screen#6
byte* print_screen#60
byte* print_screen#61
byte* print_screen#62
byte* print_screen#63
byte* print_screen#64
byte* print_screen#65
byte* print_screen#66
byte* print_screen#67
byte* print_screen#68
byte* print_screen#69
byte* print_screen#7
byte* print_screen#70
byte* print_screen#71
byte* print_screen#72
byte* print_screen#73
byte* print_screen#74
byte* print_screen#75
byte* print_screen#76
byte* print_screen#77
byte* print_screen#78
byte* print_screen#8
byte* print_screen#9
void print_set_screen(byte* print_set_screen::screen)
byte* print_set_screen::screen
byte* print_set_screen::screen#0
byte* print_set_screen::screen#1
void print_str_lines(byte* print_str_lines::str)
bool~ print_str_lines::$0
bool~ print_str_lines::$3
bool~ print_str_lines::$4
bool~ print_str_lines::$5
byte print_str_lines::ch
byte print_str_lines::ch#0
byte print_str_lines::ch#1
byte print_str_lines::ch#2
byte print_str_lines::ch#3
byte* print_str_lines::str
byte* print_str_lines::str#0
byte* print_str_lines::str#1
byte* print_str_lines::str#2
byte* print_str_lines::str#3
byte* print_str_lines::str#4
byte* print_str_lines::str#5
byte* print_str_lines::str#6
byte* print_str_lines::str#7
byte* print_str_lines::str#8
byte* print_str_lines::str#9

Fixing inline constructor with bitmap_clear::$2 = (byte)bitmap_plot_xhi[0] w= (byte)bitmap_plot_xlo[0]
Fixing inline constructor with bitmap_plot::$2 = (byte)bitmap_plot_xhi[bitmap_plot::x#4] w= (byte)bitmap_plot_xlo[bitmap_plot::x#4]
Fixing inline constructor with bitmap_plot::$3 = (byte)bitmap_plot_yhi[bitmap_plot::y#4] w= (byte)bitmap_plot_ylo[bitmap_plot::y#4]
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#1 > 0
Adding number conversion cast (unumber) 0 in print_str_lines::$3 = 0 != *print_str_lines::str#2
Adding number conversion cast (unumber) 0 in print_str_lines::$5 = 0 != print_str_lines::ch#0
Adding number conversion cast (unumber) 0 in print_str_lines::$4 = 0 != print_str_lines::ch#1
Adding number conversion cast (unumber) $28 in print_ln::$0 = print_line_cursor#19 + $28
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Adding number conversion cast (unumber) 7 in keyboard_key_pressed::$0 = keyboard_key_pressed::key#20 & 7
Adding number conversion cast (unumber) keyboard_key_pressed::$0 in keyboard_key_pressed::$0 = keyboard_key_pressed::key#20 & (unumber)7
Adding number conversion cast (unumber) 3 in keyboard_key_pressed::$1 = keyboard_key_pressed::key#20 >> 3
Adding number conversion cast (unumber) $f8 in bitmap_init::$0 = bitmap_init::x#2 & $f8
Adding number conversion cast (unumber) bitmap_init::$0 in bitmap_init::$0 = bitmap_init::x#2 & (unumber)$f8
Adding number conversion cast (unumber) 1 in bitmap_init::$2 = bitmap_init::bits#3 >> 1
Adding number conversion cast (unumber) 0 in bitmap_init::$3 = bitmap_init::bits#1 == 0
Adding number conversion cast (unumber) $80 in bitmap_init::bits#2 = $80
Adding number conversion cast (unumber) 7 in bitmap_init::$6 = bitmap_init::y#2 & 7
Adding number conversion cast (unumber) bitmap_init::$6 in bitmap_init::$6 = bitmap_init::y#2 & (unumber)7
Adding number conversion cast (unumber) bitmap_init::$8 in bitmap_init::$8 = bitmap_init::$6 | bitmap_init::$7
Adding number conversion cast (unumber) 7 in bitmap_init::$10 = bitmap_init::y#2 & 7
Adding number conversion cast (unumber) bitmap_init::$10 in bitmap_init::$10 = bitmap_init::y#2 & (unumber)7
Adding number conversion cast (unumber) 7 in bitmap_init::$11 = bitmap_init::$10 == 7
Adding number conversion cast (unumber) $28*8 in bitmap_init::$13 = bitmap_init::yoffs#3 + $28*8
Adding number conversion cast (unumber) 0 in bitmap_clear::$2 = (byte)bitmap_plot_xhi[0] w= (byte)bitmap_plot_xlo[0]
Adding number conversion cast (unumber) 0 in bitmap_clear::$2 = (byte)bitmap_plot_xhi[(unumber)0] w= (byte)bitmap_plot_xlo[0]
Adding number conversion cast (unumber) 0 in *bitmap_clear::bitmap#2 = 0
Adding number conversion cast (unumber) 1 in bitmap_line_xdyi::$0 = bitmap_line_xdyi::yd#2 >> 1
Adding number conversion cast (unumber) 1 in bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#2 + 1
Adding number conversion cast (unumber) bitmap_line_xdyi::$6 in bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#2 + (unumber)1
Adding number conversion cast (unumber) 1 in bitmap_line_xdyd::$0 = bitmap_line_xdyd::yd#2 >> 1
Adding number conversion cast (unumber) 1 in bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#2 + 1
Adding number conversion cast (unumber) bitmap_line_xdyd::$6 in bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#2 + (unumber)1
Adding number conversion cast (unumber) 1 in bitmap_line_ydxi::$0 = bitmap_line_ydxi::xd#2 >> 1
Adding number conversion cast (unumber) 1 in bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#2 + 1
Adding number conversion cast (unumber) bitmap_line_ydxi::$6 in bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#2 + (unumber)1
Adding number conversion cast (unumber) 1 in bitmap_line_ydxd::$0 = bitmap_line_ydxd::xd#2 >> 1
Adding number conversion cast (unumber) 1 in bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#2 + 1
Adding number conversion cast (unumber) bitmap_line_ydxd::$6 in bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#2 + (unumber)1
Adding number conversion cast (unumber) $10000 in *DTV_GRAPHICS_VIC_BANK = (byte)(dword)menu::CHARSET/$10000
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
Adding number conversion cast (unumber) 0 in *DTV_CONTROL = 0
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) 3^(byte)(word)menu::CHARSET/$4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)menu::CHARSET/$4000
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) 3^(byte)(word)menu::CHARSET/$4000
Adding number conversion cast (unumber) $4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) (unumber)3^(byte)(word)menu::CHARSET/$4000
Adding number conversion cast (unumber) VIC_DEN|VIC_RSEL|3 in *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)menu::SCREEN&$3fff/$40|(word)menu::CHARSET&$3fff/$400
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)menu::SCREEN&(unumber)$3fff/$40|(word)menu::CHARSET&$3fff/$400
Adding number conversion cast (unumber) $3e8 in menu::$4 = menu::c#2 != COLS+$3e8
Adding number conversion cast (unumber) 0 in *BG_COLOR = 0
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) 0 in menu::$6 = menu::$5 != 0
Adding number conversion cast (unumber) 0 in menu::$10 = menu::$9 != 0
Adding number conversion cast (unumber) 0 in menu::$14 = menu::$13 != 0
Adding number conversion cast (unumber) 0 in menu::$18 = menu::$17 != 0
Adding number conversion cast (unumber) 0 in menu::$22 = menu::$21 != 0
Adding number conversion cast (unumber) 0 in menu::$26 = menu::$25 != 0
Adding number conversion cast (unumber) 0 in menu::$30 = menu::$29 != 0
Adding number conversion cast (unumber) 0 in menu::$34 = menu::$33 != 0
Adding number conversion cast (unumber) 0 in menu::$38 = menu::$37 != 0
Adding number conversion cast (unumber) 0 in menu::$42 = menu::$41 != 0
Adding number conversion cast (unumber) 0 in menu::$46 = menu::$45 != 0
Adding number conversion cast (unumber) 0 in menu::$50 = menu::$49 != 0
Adding number conversion cast (unumber) $ff in mode_ctrl::$0 = *RASTER != $ff
Adding number conversion cast (unumber) 0 in mode_ctrl::$2 = mode_ctrl::$1 != 0
Adding number conversion cast (unumber) 0 in mode_ctrl::$5 = mode_ctrl::$4 != 0
Adding number conversion cast (unumber) 0 in mode_ctrl::$9 = mode_ctrl::$8 != 0
Adding number conversion cast (unumber) 0 in mode_ctrl::$13 = mode_ctrl::$12 != 0
Adding number conversion cast (unumber) 0 in mode_ctrl::$17 = mode_ctrl::$16 != 0
Adding number conversion cast (unumber) 0 in mode_ctrl::$21 = mode_ctrl::$20 != 0
Adding number conversion cast (unumber) 0 in mode_ctrl::$25 = mode_ctrl::$24 != 0
Adding number conversion cast (unumber) 0 in mode_ctrl::$29 = mode_ctrl::$28 != 0
Adding number conversion cast (unumber) 0 in mode_ctrl::ctrl#7 = 0
Adding number conversion cast (unumber) $10000 in *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_stdchar::CHARSET/$10000
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
Adding number conversion cast (unumber) 0 in dtv_control#17 = 0
Adding number conversion cast (unumber) 0 in *DTV_CONTROL = 0
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) 3^(byte)(word)mode_stdchar::CHARSET/$4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_stdchar::CHARSET/$4000
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) 3^(byte)(word)mode_stdchar::CHARSET/$4000
Adding number conversion cast (unumber) $4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) (unumber)3^(byte)(word)mode_stdchar::CHARSET/$4000
Adding number conversion cast (unumber) VIC_DEN|VIC_RSEL|3 in *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_stdchar::SCREEN&$3fff/$40|(word)mode_stdchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_stdchar::SCREEN&(unumber)$3fff/$40|(word)mode_stdchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) 0 in *BG_COLOR = 0
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) $f in mode_stdchar::$3 = mode_stdchar::$2 & $f
Adding number conversion cast (unumber) mode_stdchar::$3 in mode_stdchar::$3 = mode_stdchar::$2 & (unumber)$f
Adding number conversion cast (unumber) $f in mode_stdchar::$4 = mode_stdchar::cy#2 & $f
Adding number conversion cast (unumber) mode_stdchar::$4 in mode_stdchar::$4 = mode_stdchar::cy#2 & (unumber)$f
Adding number conversion cast (unumber) $10 in mode_stdchar::$5 = mode_stdchar::$4 * $10
Adding number conversion cast (unumber) mode_stdchar::$5 in mode_stdchar::$5 = mode_stdchar::$4 * (unumber)$10
Adding number conversion cast (unumber) $f in mode_stdchar::$6 = mode_stdchar::cx#2 & $f
Adding number conversion cast (unumber) mode_stdchar::$6 in mode_stdchar::$6 = mode_stdchar::cx#2 & (unumber)$f
Adding number conversion cast (unumber) mode_stdchar::$7 in mode_stdchar::$7 = mode_stdchar::$5 | mode_stdchar::$6
Adding number conversion cast (unumber) $10000 in *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_ecmchar::CHARSET/$10000
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
Adding number conversion cast (unumber) 0 in dtv_control#20 = 0
Adding number conversion cast (unumber) 0 in *DTV_CONTROL = 0
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) 3^(byte)(word)mode_ecmchar::CHARSET/$4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_ecmchar::CHARSET/$4000
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) 3^(byte)(word)mode_ecmchar::CHARSET/$4000
Adding number conversion cast (unumber) $4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) (unumber)3^(byte)(word)mode_ecmchar::CHARSET/$4000
Adding number conversion cast (unumber) VIC_DEN|VIC_RSEL|VIC_ECM|3 in *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_DEN|VIC_RSEL|VIC_ECM|3
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_ecmchar::SCREEN&$3fff/$40|(word)mode_ecmchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_ecmchar::SCREEN&(unumber)$3fff/$40|(word)mode_ecmchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) 0 in *BG_COLOR = 0
Adding number conversion cast (unumber) 2 in *BG_COLOR1 = 2
Adding number conversion cast (unumber) 5 in *BG_COLOR2 = 5
Adding number conversion cast (unumber) 6 in *BG_COLOR3 = 6
Adding number conversion cast (unumber) $f in mode_ecmchar::$3 = mode_ecmchar::$2 & $f
Adding number conversion cast (unumber) mode_ecmchar::$3 in mode_ecmchar::$3 = mode_ecmchar::$2 & (unumber)$f
Adding number conversion cast (unumber) $f in mode_ecmchar::$4 = mode_ecmchar::cy#2 & $f
Adding number conversion cast (unumber) mode_ecmchar::$4 in mode_ecmchar::$4 = mode_ecmchar::cy#2 & (unumber)$f
Adding number conversion cast (unumber) $10 in mode_ecmchar::$5 = mode_ecmchar::$4 * $10
Adding number conversion cast (unumber) mode_ecmchar::$5 in mode_ecmchar::$5 = mode_ecmchar::$4 * (unumber)$10
Adding number conversion cast (unumber) $f in mode_ecmchar::$6 = mode_ecmchar::cx#2 & $f
Adding number conversion cast (unumber) mode_ecmchar::$6 in mode_ecmchar::$6 = mode_ecmchar::cx#2 & (unumber)$f
Adding number conversion cast (unumber) mode_ecmchar::$7 in mode_ecmchar::$7 = mode_ecmchar::$5 | mode_ecmchar::$6
Adding number conversion cast (unumber) $10000 in *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_mcchar::CHARSET/$10000
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
Adding number conversion cast (unumber) 0 in dtv_control#23 = 0
Adding number conversion cast (unumber) 0 in *DTV_CONTROL = 0
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) 3^(byte)(word)mode_mcchar::CHARSET/$4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_mcchar::CHARSET/$4000
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) 3^(byte)(word)mode_mcchar::CHARSET/$4000
Adding number conversion cast (unumber) $4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) (unumber)3^(byte)(word)mode_mcchar::CHARSET/$4000
Adding number conversion cast (unumber) VIC_DEN|VIC_RSEL|3 in *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_mcchar::SCREEN&$3fff/$40|(word)mode_mcchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_mcchar::SCREEN&(unumber)$3fff/$40|(word)mode_mcchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) $f in mode_mcchar::$3 = mode_mcchar::$2 & $f
Adding number conversion cast (unumber) mode_mcchar::$3 in mode_mcchar::$3 = mode_mcchar::$2 & (unumber)$f
Adding number conversion cast (unumber) $f in mode_mcchar::$4 = mode_mcchar::cy#2 & $f
Adding number conversion cast (unumber) mode_mcchar::$4 in mode_mcchar::$4 = mode_mcchar::cy#2 & (unumber)$f
Adding number conversion cast (unumber) $10 in mode_mcchar::$5 = mode_mcchar::$4 * $10
Adding number conversion cast (unumber) mode_mcchar::$5 in mode_mcchar::$5 = mode_mcchar::$4 * (unumber)$10
Adding number conversion cast (unumber) $f in mode_mcchar::$6 = mode_mcchar::cx#2 & $f
Adding number conversion cast (unumber) mode_mcchar::$6 in mode_mcchar::$6 = mode_mcchar::cx#2 & (unumber)$f
Adding number conversion cast (unumber) mode_mcchar::$7 in mode_mcchar::$7 = mode_mcchar::$5 | mode_mcchar::$6
Adding number conversion cast (unumber) $10000 in *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_stdbitmap::BITMAP/$10000
Adding number conversion cast (unumber) 0 in dtv_control#26 = 0
Adding number conversion cast (unumber) 0 in *DTV_CONTROL = 0
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) 3^(byte)(word)mode_stdbitmap::BITMAP/$4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_stdbitmap::BITMAP/$4000
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) 3^(byte)(word)mode_stdbitmap::BITMAP/$4000
Adding number conversion cast (unumber) $4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) (unumber)3^(byte)(word)mode_stdbitmap::BITMAP/$4000
Adding number conversion cast (unumber) VIC_BMM|VIC_DEN|VIC_RSEL|3 in *VIC_CONTROL = VIC_BMM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_BMM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_stdbitmap::SCREEN&$3fff/$40|(word)mode_stdbitmap::BITMAP&$3fff/$400
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_stdbitmap::SCREEN&(unumber)$3fff/$40|(word)mode_stdbitmap::BITMAP&$3fff/$400
Adding number conversion cast (unumber) $f in mode_stdbitmap::$5 = mode_stdbitmap::$4 & $f
Adding number conversion cast (unumber) mode_stdbitmap::$5 in mode_stdbitmap::$5 = mode_stdbitmap::$4 & (unumber)$f
Adding number conversion cast (unumber) $f in mode_stdbitmap::$6 = $f - mode_stdbitmap::col#0
Adding number conversion cast (unumber) mode_stdbitmap::$6 in mode_stdbitmap::$6 = (unumber)$f - mode_stdbitmap::col#0
Adding number conversion cast (unumber) $10 in mode_stdbitmap::$7 = mode_stdbitmap::col#0 * $10
Adding number conversion cast (unumber) mode_stdbitmap::$7 in mode_stdbitmap::$7 = mode_stdbitmap::col#0 * (unumber)$10
Adding number conversion cast (unumber) mode_stdbitmap::$8 in mode_stdbitmap::$8 = mode_stdbitmap::$7 | mode_stdbitmap::col2#0
Adding number conversion cast (unumber) 1 in mode_stdbitmap::$12 = mode_stdbitmap::l#3 + 1
Adding number conversion cast (unumber) mode_stdbitmap::$12 in mode_stdbitmap::$12 = mode_stdbitmap::l#3 + (unumber)1
Adding number conversion cast (unumber) 1 in mode_stdbitmap::$13 = mode_stdbitmap::l#3 + 1
Adding number conversion cast (unumber) mode_stdbitmap::$13 in mode_stdbitmap::$13 = mode_stdbitmap::l#3 + (unumber)1
Adding number conversion cast (unumber) $10000 in *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_hicolstdchar::CHARSET/$10000
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_LO = <(word)mode_hicolstdchar::COLORS/$400
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_HI = >(word)mode_hicolstdchar::COLORS/$400
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) 3^(byte)(word)mode_hicolstdchar::CHARSET/$4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_hicolstdchar::CHARSET/$4000
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) 3^(byte)(word)mode_hicolstdchar::CHARSET/$4000
Adding number conversion cast (unumber) $4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) (unumber)3^(byte)(word)mode_hicolstdchar::CHARSET/$4000
Adding number conversion cast (unumber) VIC_DEN|VIC_RSEL|3 in *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_hicolstdchar::SCREEN&$3fff/$40|(word)mode_hicolstdchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_hicolstdchar::SCREEN&(unumber)$3fff/$40|(word)mode_hicolstdchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) 0 in *BG_COLOR = 0
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) $f in mode_hicolstdchar::$2 = mode_hicolstdchar::cy#2 & $f
Adding number conversion cast (unumber) mode_hicolstdchar::$2 in mode_hicolstdchar::$2 = mode_hicolstdchar::cy#2 & (unumber)$f
Adding number conversion cast (unumber) $10 in mode_hicolstdchar::$3 = mode_hicolstdchar::$2 * $10
Adding number conversion cast (unumber) mode_hicolstdchar::$3 in mode_hicolstdchar::$3 = mode_hicolstdchar::$2 * (unumber)$10
Adding number conversion cast (unumber) $f in mode_hicolstdchar::$4 = mode_hicolstdchar::cx#2 & $f
Adding number conversion cast (unumber) mode_hicolstdchar::$4 in mode_hicolstdchar::$4 = mode_hicolstdchar::cx#2 & (unumber)$f
Adding number conversion cast (unumber) mode_hicolstdchar::$5 in mode_hicolstdchar::$5 = mode_hicolstdchar::$3 | mode_hicolstdchar::$4
Adding number conversion cast (unumber) $10000 in *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_hicolecmchar::CHARSET/$10000
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_LO = <(word)mode_hicolecmchar::COLORS/$400
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_HI = >(word)mode_hicolecmchar::COLORS/$400
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) 3^(byte)(word)mode_hicolecmchar::CHARSET/$4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_hicolecmchar::CHARSET/$4000
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) 3^(byte)(word)mode_hicolecmchar::CHARSET/$4000
Adding number conversion cast (unumber) $4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) (unumber)3^(byte)(word)mode_hicolecmchar::CHARSET/$4000
Adding number conversion cast (unumber) VIC_DEN|VIC_RSEL|VIC_ECM|3 in *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_DEN|VIC_RSEL|VIC_ECM|3
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_hicolecmchar::SCREEN&$3fff/$40|(word)mode_hicolecmchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_hicolecmchar::SCREEN&(unumber)$3fff/$40|(word)mode_hicolecmchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) $50 in *BG_COLOR = $50
Adding number conversion cast (unumber) $54 in *BG_COLOR1 = $54
Adding number conversion cast (unumber) $58 in *BG_COLOR2 = $58
Adding number conversion cast (unumber) $5c in *BG_COLOR3 = $5c
Adding number conversion cast (unumber) $f in mode_hicolecmchar::$2 = mode_hicolecmchar::cy#2 & $f
Adding number conversion cast (unumber) mode_hicolecmchar::$2 in mode_hicolecmchar::$2 = mode_hicolecmchar::cy#2 & (unumber)$f
Adding number conversion cast (unumber) $10 in mode_hicolecmchar::$3 = mode_hicolecmchar::$2 * $10
Adding number conversion cast (unumber) mode_hicolecmchar::$3 in mode_hicolecmchar::$3 = mode_hicolecmchar::$2 * (unumber)$10
Adding number conversion cast (unumber) $f in mode_hicolecmchar::$4 = mode_hicolecmchar::cx#2 & $f
Adding number conversion cast (unumber) mode_hicolecmchar::$4 in mode_hicolecmchar::$4 = mode_hicolecmchar::cx#2 & (unumber)$f
Adding number conversion cast (unumber) mode_hicolecmchar::$5 in mode_hicolecmchar::$5 = mode_hicolecmchar::$3 | mode_hicolecmchar::$4
Adding number conversion cast (unumber) $10000 in *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_hicolmcchar::CHARSET/$10000
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_LO = <(word)mode_hicolmcchar::COLORS/$400
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_HI = >(word)mode_hicolmcchar::COLORS/$400
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) 3^(byte)(word)mode_hicolmcchar::CHARSET/$4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_hicolmcchar::CHARSET/$4000
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) 3^(byte)(word)mode_hicolmcchar::CHARSET/$4000
Adding number conversion cast (unumber) $4000 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = ((unumber)) (unumber)3^(byte)(word)mode_hicolmcchar::CHARSET/$4000
Adding number conversion cast (unumber) VIC_DEN|VIC_RSEL|3 in *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_hicolmcchar::SCREEN&$3fff/$40|(word)mode_hicolmcchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)mode_hicolmcchar::SCREEN&(unumber)$3fff/$40|(word)mode_hicolmcchar::CHARSET&$3fff/$400
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) $50 in *BG_COLOR = $50
Adding number conversion cast (unumber) $54 in *BG_COLOR1 = $54
Adding number conversion cast (unumber) $58 in *BG_COLOR2 = $58
Adding number conversion cast (unumber) $f in mode_hicolmcchar::$2 = mode_hicolmcchar::cy#2 & $f
Adding number conversion cast (unumber) mode_hicolmcchar::$2 in mode_hicolmcchar::$2 = mode_hicolmcchar::cy#2 & (unumber)$f
Adding number conversion cast (unumber) $10 in mode_hicolmcchar::$3 = mode_hicolmcchar::$2 * $10
Adding number conversion cast (unumber) mode_hicolmcchar::$3 in mode_hicolmcchar::$3 = mode_hicolmcchar::$2 * (unumber)$10
Adding number conversion cast (unumber) $f in mode_hicolmcchar::$4 = mode_hicolmcchar::cx#2 & $f
Adding number conversion cast (unumber) mode_hicolmcchar::$4 in mode_hicolmcchar::$4 = mode_hicolmcchar::cx#2 & (unumber)$f
Adding number conversion cast (unumber) mode_hicolmcchar::$5 in mode_hicolmcchar::$5 = mode_hicolmcchar::$3 | mode_hicolmcchar::$4
Adding number conversion cast (unumber) VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 in *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_START_HI = 0
Adding number conversion cast (unumber) 1 in *DTV_PLANEA_STEP = 1
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_MODULO_LO = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_MODULO_HI = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_START_HI = 0
Adding number conversion cast (unumber) 1 in *DTV_PLANEB_STEP = 1
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_MODULO_LO = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_MODULO_HI = 0
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_LO = <mode_twoplanebitmap::COLORS/$400
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_HI = >mode_twoplanebitmap::COLORS/$400
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) $70 in *BG_COLOR = $70
Adding number conversion cast (unumber) $d4 in *BG_COLOR1 = $d4
Adding number conversion cast (unumber) $f in mode_twoplanebitmap::$2 = mode_twoplanebitmap::cy#2 & $f
Adding number conversion cast (unumber) mode_twoplanebitmap::$2 in mode_twoplanebitmap::$2 = mode_twoplanebitmap::cy#2 & (unumber)$f
Adding number conversion cast (unumber) $10 in mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2 * $10
Adding number conversion cast (unumber) mode_twoplanebitmap::$3 in mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2 * (unumber)$10
Adding number conversion cast (unumber) $f in mode_twoplanebitmap::$4 = mode_twoplanebitmap::cx#2 & $f
Adding number conversion cast (unumber) mode_twoplanebitmap::$4 in mode_twoplanebitmap::$4 = mode_twoplanebitmap::cx#2 & (unumber)$f
Adding number conversion cast (unumber) mode_twoplanebitmap::$5 in mode_twoplanebitmap::$5 = mode_twoplanebitmap::$3 | mode_twoplanebitmap::$4
Adding number conversion cast (unumber) 4 in mode_twoplanebitmap::$8 = mode_twoplanebitmap::ay#2 & 4
Adding number conversion cast (unumber) mode_twoplanebitmap::$8 in mode_twoplanebitmap::$8 = mode_twoplanebitmap::ay#2 & (unumber)4
Adding number conversion cast (unumber) 0 in mode_twoplanebitmap::$9 = mode_twoplanebitmap::$8 == 0
Adding number conversion cast (unumber) 0 in *mode_twoplanebitmap::gfxa#3 = 0
Adding number conversion cast (unumber) $ff in *mode_twoplanebitmap::gfxa#4 = $ff
Adding number conversion cast (unumber) $f in *mode_twoplanebitmap::gfxb#2 = $f
Adding number conversion cast (unumber) VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 in *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_START_HI = 0
Adding number conversion cast (unumber) 1 in *DTV_PLANEA_STEP = 1
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_MODULO_LO = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_MODULO_HI = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_START_HI = 0
Adding number conversion cast (unumber) 1 in *DTV_PLANEB_STEP = 1
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_MODULO_LO = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_MODULO_HI = 0
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_LO = <mode_sixsfred::COLORS/$400
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_HI = >mode_sixsfred::COLORS/$400
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) $f in mode_sixsfred::$3 = mode_sixsfred::$2 & $f
Adding number conversion cast (unumber) mode_sixsfred::$3 in mode_sixsfred::$3 = mode_sixsfred::$2 & (unumber)$f
Adding number conversion cast (unumber) 2 in mode_sixsfred::$6 = mode_sixsfred::ay#2 / 2
Adding number conversion cast (unumber) mode_sixsfred::$6 in mode_sixsfred::$6 = mode_sixsfred::ay#2 / (unumber)2
Adding number conversion cast (unumber) 3 in mode_sixsfred::$7 = mode_sixsfred::$6 & 3
Adding number conversion cast (unumber) mode_sixsfred::$7 in mode_sixsfred::$7 = mode_sixsfred::$6 & (unumber)3
Adding number conversion cast (unumber) $1b in *mode_sixsfred::gfxb#2 = $1b
Adding number conversion cast (unumber) VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 in *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_START_HI = 0
Adding number conversion cast (unumber) 1 in *DTV_PLANEA_STEP = 1
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_MODULO_LO = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_MODULO_HI = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_START_HI = 0
Adding number conversion cast (unumber) 1 in *DTV_PLANEB_STEP = 1
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_MODULO_LO = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_MODULO_HI = 0
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_LO = <mode_sixsfred2::COLORS/$400
Adding number conversion cast (unumber) $400 in *DTV_COLOR_BANK_HI = >mode_sixsfred2::COLORS/$400
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) 3 in mode_sixsfred2::$2 = mode_sixsfred2::cx#2 & 3
Adding number conversion cast (unumber) mode_sixsfred2::$2 in mode_sixsfred2::$2 = mode_sixsfred2::cx#2 & (unumber)3
Adding number conversion cast (unumber) $10 in mode_sixsfred2::$3 = mode_sixsfred2::$2 * $10
Adding number conversion cast (unumber) mode_sixsfred2::$3 in mode_sixsfred2::$3 = mode_sixsfred2::$2 * (unumber)$10
Adding number conversion cast (unumber) 3 in mode_sixsfred2::$4 = mode_sixsfred2::cy#2 & 3
Adding number conversion cast (unumber) mode_sixsfred2::$4 in mode_sixsfred2::$4 = mode_sixsfred2::cy#2 & (unumber)3
Adding number conversion cast (unumber) mode_sixsfred2::$5 in mode_sixsfred2::$5 = mode_sixsfred2::$3 | mode_sixsfred2::$4
Adding number conversion cast (unumber) 2 in mode_sixsfred2::$8 = mode_sixsfred2::ay#2 / 2
Adding number conversion cast (unumber) mode_sixsfred2::$8 in mode_sixsfred2::$8 = mode_sixsfred2::ay#2 / (unumber)2
Adding number conversion cast (unumber) 3 in mode_sixsfred2::$9 = mode_sixsfred2::$8 & 3
Adding number conversion cast (unumber) mode_sixsfred2::$9 in mode_sixsfred2::$9 = mode_sixsfred2::$8 & (unumber)3
Adding number conversion cast (unumber) $1b in *mode_sixsfred2::gfxb#2 = $1b
Adding number conversion cast (unumber) VIC_ECM|VIC_DEN|VIC_RSEL|3 in *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_ECM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_START_HI = 0
Adding number conversion cast (unumber) 1 in *DTV_PLANEA_STEP = 1
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_MODULO_LO = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEA_MODULO_HI = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_START_HI = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_STEP = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_MODULO_LO = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_MODULO_HI = 0
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) $f in mode_8bpppixelcell::$2 = mode_8bpppixelcell::ay#2 & $f
Adding number conversion cast (unumber) mode_8bpppixelcell::$2 in mode_8bpppixelcell::$2 = mode_8bpppixelcell::ay#2 & (unumber)$f
Adding number conversion cast (unumber) $10 in mode_8bpppixelcell::$3 = mode_8bpppixelcell::$2 * $10
Adding number conversion cast (unumber) mode_8bpppixelcell::$3 in mode_8bpppixelcell::$3 = mode_8bpppixelcell::$2 * (unumber)$10
Adding number conversion cast (unumber) $f in mode_8bpppixelcell::$4 = mode_8bpppixelcell::ax#2 & $f
Adding number conversion cast (unumber) mode_8bpppixelcell::$4 in mode_8bpppixelcell::$4 = mode_8bpppixelcell::ax#2 & (unumber)$f
Adding number conversion cast (unumber) mode_8bpppixelcell::$5 in mode_8bpppixelcell::$5 = mode_8bpppixelcell::$3 | mode_8bpppixelcell::$4
Adding number conversion cast (unumber) $80 in mode_8bpppixelcell::$8 = mode_8bpppixelcell::bits#2 & $80
Adding number conversion cast (unumber) mode_8bpppixelcell::$8 in mode_8bpppixelcell::$8 = mode_8bpppixelcell::bits#2 & (unumber)$80
Adding number conversion cast (unumber) 0 in mode_8bpppixelcell::$9 = mode_8bpppixelcell::$8 != 0
Adding number conversion cast (unumber) 2 in mode_8bpppixelcell::$11 = mode_8bpppixelcell::bits#3 * 2
Adding number conversion cast (unumber) mode_8bpppixelcell::$11 in mode_8bpppixelcell::$11 = mode_8bpppixelcell::bits#3 * (unumber)2
Adding number conversion cast (unumber) VIC_ECM|VIC_DEN|VIC_RSEL|3 in *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *VIC_CONTROL = ((unumber)) VIC_ECM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 8 in *DTV_PLANEB_STEP = 8
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_MODULO_LO = 0
Adding number conversion cast (unumber) 0 in *DTV_PLANEB_MODULO_HI = 0
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) $4000 in mode_8bppchunkybmm::gfxbCpuBank#0 = (byte)mode_8bppchunkybmm::PLANEB/$4000
Adding number conversion cast (unumber) $8000 in mode_8bppchunkybmm::$4 = mode_8bppchunkybmm::gfxb#3 == $8000
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) $40 in *VIC_MEMORY = (byte)(word)menu::SCREEN&(unumber)$3fff/$40|(word)menu::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $400 in *VIC_MEMORY = (byte)(word)menu::SCREEN&(unumber)$3fff/(unumber)$40|(word)menu::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $40 in *VIC_MEMORY = (byte)(word)mode_stdchar::SCREEN&(unumber)$3fff/$40|(word)mode_stdchar::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $400 in *VIC_MEMORY = (byte)(word)mode_stdchar::SCREEN&(unumber)$3fff/(unumber)$40|(word)mode_stdchar::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $40 in *VIC_MEMORY = (byte)(word)mode_ecmchar::SCREEN&(unumber)$3fff/$40|(word)mode_ecmchar::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $400 in *VIC_MEMORY = (byte)(word)mode_ecmchar::SCREEN&(unumber)$3fff/(unumber)$40|(word)mode_ecmchar::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $40 in *VIC_MEMORY = (byte)(word)mode_mcchar::SCREEN&(unumber)$3fff/$40|(word)mode_mcchar::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $400 in *VIC_MEMORY = (byte)(word)mode_mcchar::SCREEN&(unumber)$3fff/(unumber)$40|(word)mode_mcchar::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $40 in *VIC_MEMORY = (byte)(word)mode_stdbitmap::SCREEN&(unumber)$3fff/$40|(word)mode_stdbitmap::BITMAP&(unumber)$3fff/$400
Adding number conversion cast (unumber) $400 in *VIC_MEMORY = (byte)(word)mode_stdbitmap::SCREEN&(unumber)$3fff/(unumber)$40|(word)mode_stdbitmap::BITMAP&(unumber)$3fff/$400
Adding number conversion cast (unumber) $40 in *VIC_MEMORY = (byte)(word)mode_hicolstdchar::SCREEN&(unumber)$3fff/$40|(word)mode_hicolstdchar::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $400 in *VIC_MEMORY = (byte)(word)mode_hicolstdchar::SCREEN&(unumber)$3fff/(unumber)$40|(word)mode_hicolstdchar::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $40 in *VIC_MEMORY = (byte)(word)mode_hicolecmchar::SCREEN&(unumber)$3fff/$40|(word)mode_hicolecmchar::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $400 in *VIC_MEMORY = (byte)(word)mode_hicolecmchar::SCREEN&(unumber)$3fff/(unumber)$40|(word)mode_hicolecmchar::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $40 in *VIC_MEMORY = (byte)(word)mode_hicolmcchar::SCREEN&(unumber)$3fff/$40|(word)mode_hicolmcchar::CHARSET&(unumber)$3fff/$400
Adding number conversion cast (unumber) $400 in *VIC_MEMORY = (byte)(word)mode_hicolmcchar::SCREEN&(unumber)$3fff/(unumber)$40|(word)mode_hicolmcchar::CHARSET&(unumber)$3fff/$400
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memset::dst#0 = (byte*)memset::str#2
Inlining cast memset::num#0 = (unumber)$3e8
Inlining cast bitmap_init::bits#2 = (unumber)$80
Inlining cast *bitmap_clear::bitmap#2 = (unumber)0
Inlining cast bitmap_plot::plotter#0 = (byte*)bitmap_plot::$0
Inlining cast *DTV_CONTROL = (unumber)0
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = (unumber)(unumber)3^(byte)(word)menu::CHARSET/(unumber)$4000
Inlining cast *VIC_CONTROL = (unumber)VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *BG_COLOR = (unumber)0
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast mode_ctrl::ctrl#7 = (unumber)0
Inlining cast dtv_control#17 = (unumber)0
Inlining cast *DTV_CONTROL = (unumber)0
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = (unumber)(unumber)3^(byte)(word)mode_stdchar::CHARSET/(unumber)$4000
Inlining cast *VIC_CONTROL = (unumber)VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *BG_COLOR = (unumber)0
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast dtv_control#20 = (unumber)0
Inlining cast *DTV_CONTROL = (unumber)0
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = (unumber)(unumber)3^(byte)(word)mode_ecmchar::CHARSET/(unumber)$4000
Inlining cast *VIC_CONTROL = (unumber)VIC_DEN|VIC_RSEL|VIC_ECM|(unumber)3
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast *BG_COLOR = (unumber)0
Inlining cast *BG_COLOR1 = (unumber)2
Inlining cast *BG_COLOR2 = (unumber)5
Inlining cast *BG_COLOR3 = (unumber)6
Inlining cast dtv_control#23 = (unumber)0
Inlining cast *DTV_CONTROL = (unumber)0
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = (unumber)(unumber)3^(byte)(word)mode_mcchar::CHARSET/(unumber)$4000
Inlining cast *VIC_CONTROL = (unumber)VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast dtv_control#26 = (unumber)0
Inlining cast *DTV_CONTROL = (unumber)0
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = (unumber)(unumber)3^(byte)(word)mode_stdbitmap::BITMAP/(unumber)$4000
Inlining cast *VIC_CONTROL = (unumber)VIC_BMM|VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = (unumber)(unumber)3^(byte)(word)mode_hicolstdchar::CHARSET/(unumber)$4000
Inlining cast *VIC_CONTROL = (unumber)VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *BG_COLOR = (unumber)0
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = (unumber)(unumber)3^(byte)(word)mode_hicolecmchar::CHARSET/(unumber)$4000
Inlining cast *VIC_CONTROL = (unumber)VIC_DEN|VIC_RSEL|VIC_ECM|(unumber)3
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast *BG_COLOR = (unumber)$50
Inlining cast *BG_COLOR1 = (unumber)$54
Inlining cast *BG_COLOR2 = (unumber)$58
Inlining cast *BG_COLOR3 = (unumber)$5c
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = (unumber)(unumber)3^(byte)(word)mode_hicolmcchar::CHARSET/(unumber)$4000
Inlining cast *VIC_CONTROL = (unumber)VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast *BG_COLOR = (unumber)$50
Inlining cast *BG_COLOR1 = (unumber)$54
Inlining cast *BG_COLOR2 = (unumber)$58
Inlining cast *VIC_CONTROL = (unumber)VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *DTV_PLANEA_START_HI = (unumber)0
Inlining cast *DTV_PLANEA_STEP = (unumber)1
Inlining cast *DTV_PLANEA_MODULO_LO = (unumber)0
Inlining cast *DTV_PLANEA_MODULO_HI = (unumber)0
Inlining cast *DTV_PLANEB_START_HI = (unumber)0
Inlining cast *DTV_PLANEB_STEP = (unumber)1
Inlining cast *DTV_PLANEB_MODULO_LO = (unumber)0
Inlining cast *DTV_PLANEB_MODULO_HI = (unumber)0
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast *BG_COLOR = (unumber)$70
Inlining cast *BG_COLOR1 = (unumber)$d4
Inlining cast *mode_twoplanebitmap::gfxa#3 = (unumber)0
Inlining cast *mode_twoplanebitmap::gfxa#4 = (unumber)$ff
Inlining cast *mode_twoplanebitmap::gfxb#2 = (unumber)$f
Inlining cast *VIC_CONTROL = (unumber)VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *DTV_PLANEA_START_HI = (unumber)0
Inlining cast *DTV_PLANEA_STEP = (unumber)1
Inlining cast *DTV_PLANEA_MODULO_LO = (unumber)0
Inlining cast *DTV_PLANEA_MODULO_HI = (unumber)0
Inlining cast *DTV_PLANEB_START_HI = (unumber)0
Inlining cast *DTV_PLANEB_STEP = (unumber)1
Inlining cast *DTV_PLANEB_MODULO_LO = (unumber)0
Inlining cast *DTV_PLANEB_MODULO_HI = (unumber)0
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast *mode_sixsfred::gfxb#2 = (unumber)$1b
Inlining cast *VIC_CONTROL = (unumber)VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *DTV_PLANEA_START_HI = (unumber)0
Inlining cast *DTV_PLANEA_STEP = (unumber)1
Inlining cast *DTV_PLANEA_MODULO_LO = (unumber)0
Inlining cast *DTV_PLANEA_MODULO_HI = (unumber)0
Inlining cast *DTV_PLANEB_START_HI = (unumber)0
Inlining cast *DTV_PLANEB_STEP = (unumber)1
Inlining cast *DTV_PLANEB_MODULO_LO = (unumber)0
Inlining cast *DTV_PLANEB_MODULO_HI = (unumber)0
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast *mode_sixsfred2::gfxb#2 = (unumber)$1b
Inlining cast *VIC_CONTROL = (unumber)VIC_ECM|VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *DTV_PLANEA_START_HI = (unumber)0
Inlining cast *DTV_PLANEA_STEP = (unumber)1
Inlining cast *DTV_PLANEA_MODULO_LO = (unumber)0
Inlining cast *DTV_PLANEA_MODULO_HI = (unumber)0
Inlining cast *DTV_PLANEB_START_HI = (unumber)0
Inlining cast *DTV_PLANEB_STEP = (unumber)0
Inlining cast *DTV_PLANEB_MODULO_LO = (unumber)0
Inlining cast *DTV_PLANEB_MODULO_HI = (unumber)0
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast *VIC_CONTROL = (unumber)VIC_ECM|VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *DTV_PLANEB_STEP = (unumber)8
Inlining cast *DTV_PLANEB_MODULO_LO = (unumber)0
Inlining cast *DTV_PLANEB_MODULO_HI = (unumber)0
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast mode_8bppchunkybmm::gfxb#2 = (byte*)$4000
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53282
Simplifying constant pointer cast (byte*) 53283
Simplifying constant pointer cast (byte*) 53284
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53270
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (byte*) 53311
Simplifying constant pointer cast (byte*) 53308
Simplifying constant pointer cast (byte*) 53760
Simplifying constant pointer cast (byte*) 53306
Simplifying constant pointer cast (byte*) 53307
Simplifying constant pointer cast (byte*) 53317
Simplifying constant pointer cast (byte*) 53318
Simplifying constant pointer cast (byte*) 53304
Simplifying constant pointer cast (byte*) 53305
Simplifying constant pointer cast (byte*) 53321
Simplifying constant pointer cast (byte*) 53322
Simplifying constant pointer cast (byte*) 53323
Simplifying constant pointer cast (byte*) 53324
Simplifying constant pointer cast (byte*) 53319
Simplifying constant pointer cast (byte*) 53320
Simplifying constant pointer cast (byte*) 53302
Simplifying constant pointer cast (byte*) 53303
Simplifying constant pointer cast (byte*) 53309
Simplifying constant pointer cast (byte*) 255
Simplifying constant pointer cast (byte*) 32768
Simplifying constant pointer cast (byte*) 38912
Simplifying constant pointer cast (byte*) 32768
Simplifying constant pointer cast (byte*) 36864
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 32768
Simplifying constant pointer cast (byte*) 36864
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 32768
Simplifying constant pointer cast (byte*) 36864
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 16384
Simplifying constant pointer cast (byte*) 24576
Simplifying constant pointer cast (byte*) 32768
Simplifying constant pointer cast (byte*) 36864
Simplifying constant pointer cast (byte*) 33792
Simplifying constant pointer cast (byte*) 32768
Simplifying constant pointer cast (byte*) 36864
Simplifying constant pointer cast (byte*) 33792
Simplifying constant pointer cast (byte*) 32768
Simplifying constant pointer cast (byte*) 36864
Simplifying constant pointer cast (byte*) 33792
Simplifying constant pointer cast (byte*) 16384
Simplifying constant pointer cast (byte*) 24576
Simplifying constant pointer cast (byte*) 32768
Simplifying constant pointer cast (byte*) 16384
Simplifying constant pointer cast (byte*) 24576
Simplifying constant pointer cast (byte*) 32768
Simplifying constant pointer cast (byte*) 16384
Simplifying constant pointer cast (byte*) 24576
Simplifying constant pointer cast (byte*) 32768
Simplifying constant pointer cast (byte*) 15360
Simplifying constant pointer cast (byte*) 16384
Simplifying constant pointer cast (byte*) 53248
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $3e8
Simplifying constant integer cast 7
Simplifying constant integer cast 3
Simplifying constant integer cast $f8
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast bitmap_plot_xhi[(unumber)0]
Simplifying constant integer cast 0
Simplifying constant integer cast bitmap_plot_xlo[(unumber)0]
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast bitmap_plot_xhi[bitmap_plot::x#4]
Simplifying constant integer cast bitmap_plot_xlo[bitmap_plot::x#4]
Simplifying constant integer cast bitmap_plot_yhi[bitmap_plot::y#4]
Simplifying constant integer cast bitmap_plot_ylo[bitmap_plot::y#4]
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $10000
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)3^(byte)(word)menu::CHARSET/(unumber)$4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $10000
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)3^(byte)(word)mode_stdchar::CHARSET/(unumber)$4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $10000
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)3^(byte)(word)mode_ecmchar::CHARSET/(unumber)$4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast VIC_DEN|VIC_RSEL|VIC_ECM|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $10000
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)3^(byte)(word)mode_mcchar::CHARSET/(unumber)$4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $10000
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)3^(byte)(word)mode_stdbitmap::BITMAP/(unumber)$4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast VIC_BMM|VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $10000
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)3^(byte)(word)mode_hicolstdchar::CHARSET/(unumber)$4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $10000
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)3^(byte)(word)mode_hicolecmchar::CHARSET/(unumber)$4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast VIC_DEN|VIC_RSEL|VIC_ECM|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast $50
Simplifying constant integer cast $54
Simplifying constant integer cast $58
Simplifying constant integer cast $5c
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $10000
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)3^(byte)(word)mode_hicolmcchar::CHARSET/(unumber)$4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast $50
Simplifying constant integer cast $54
Simplifying constant integer cast $58
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast $70
Simplifying constant integer cast $d4
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $f
Simplifying constant integer cast VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast $1b
Simplifying constant integer cast VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast $10
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast $1b
Simplifying constant integer cast VIC_ECM|VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast VIC_ECM|VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $4000
Simplifying constant pointer cast (byte*) 16384
Simplifying constant integer cast $8000
Simplifying constant pointer cast (byte*) 16384
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type $3e8
Finalized unsigned number type 7
Finalized unsigned number type 3
Finalized unsigned number type $f8
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type $80
Finalized unsigned number type 7
Finalized unsigned number type 7
Finalized unsigned number type 7
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type $10000
Finalized unsigned number type $400
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type 3
Finalized unsigned number type 3
Finalized unsigned number type $4000
Finalized unsigned number type 3
Finalized unsigned number type $3fff
Finalized unsigned number type $40
Finalized unsigned number type $3fff
Finalized unsigned number type $400
Finalized unsigned number type $3e8
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $ff
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $10000
Finalized unsigned number type $400
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 3
Finalized unsigned number type 3
Finalized unsigned number type $4000
Finalized unsigned number type 3
Finalized unsigned number type $3fff
Finalized unsigned number type $40
Finalized unsigned number type $3fff
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $f
Finalized unsigned number type $f
Finalized unsigned number type $10
Finalized unsigned number type $f
Finalized unsigned number type $10000
Finalized unsigned number type $400
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 3
Finalized unsigned number type 3
Finalized unsigned number type $4000
Finalized unsigned number type 3
Finalized unsigned number type $3fff
Finalized unsigned number type $40
Finalized unsigned number type $3fff
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 2
Finalized unsigned number type 5
Finalized unsigned number type 6
Finalized unsigned number type $f
Finalized unsigned number type $f
Finalized unsigned number type $10
Finalized unsigned number type $f
Finalized unsigned number type $10000
Finalized unsigned number type $400
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 3
Finalized unsigned number type 3
Finalized unsigned number type $4000
Finalized unsigned number type 3
Finalized unsigned number type $3fff
Finalized unsigned number type $40
Finalized unsigned number type $3fff
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type $f
Finalized unsigned number type $f
Finalized unsigned number type $10
Finalized unsigned number type $f
Finalized unsigned number type $10000
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 3
Finalized unsigned number type 3
Finalized unsigned number type $4000
Finalized unsigned number type 3
Finalized unsigned number type $3fff
Finalized unsigned number type $40
Finalized unsigned number type $3fff
Finalized unsigned number type $400
Finalized unsigned number type $f
Finalized unsigned number type $f
Finalized unsigned number type $10
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type $10000
Finalized unsigned number type $400
Finalized unsigned number type $400
Finalized unsigned number type 3
Finalized unsigned number type 3
Finalized unsigned number type $4000
Finalized unsigned number type 3
Finalized unsigned number type $3fff
Finalized unsigned number type $40
Finalized unsigned number type $3fff
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $f
Finalized unsigned number type $10
Finalized unsigned number type $f
Finalized unsigned number type $10000
Finalized unsigned number type $400
Finalized unsigned number type $400
Finalized unsigned number type 3
Finalized unsigned number type 3
Finalized unsigned number type $4000
Finalized unsigned number type 3
Finalized unsigned number type $3fff
Finalized unsigned number type $40
Finalized unsigned number type $3fff
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type $50
Finalized unsigned number type $54
Finalized unsigned number type $58
Finalized unsigned number type $5c
Finalized unsigned number type $f
Finalized unsigned number type $10
Finalized unsigned number type $f
Finalized unsigned number type $10000
Finalized unsigned number type $400
Finalized unsigned number type $400
Finalized unsigned number type 3
Finalized unsigned number type 3
Finalized unsigned number type $4000
Finalized unsigned number type 3
Finalized unsigned number type $3fff
Finalized unsigned number type $40
Finalized unsigned number type $3fff
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type $50
Finalized unsigned number type $54
Finalized unsigned number type $58
Finalized unsigned number type $f
Finalized unsigned number type $10
Finalized unsigned number type $f
Finalized unsigned number type 3
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $400
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type $70
Finalized unsigned number type $d4
Finalized unsigned number type $f
Finalized unsigned number type $10
Finalized unsigned number type $f
Finalized unsigned number type 4
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $ff
Finalized unsigned number type $f
Finalized unsigned number type 3
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $400
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type $f
Finalized unsigned number type 2
Finalized unsigned number type 3
Finalized unsigned number type $1b
Finalized unsigned number type 3
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $400
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type 3
Finalized unsigned number type $10
Finalized unsigned number type 3
Finalized unsigned number type 2
Finalized unsigned number type 3
Finalized unsigned number type $1b
Finalized unsigned number type 3
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $f
Finalized unsigned number type $10
Finalized unsigned number type $f
Finalized unsigned number type $80
Finalized unsigned number type 0
Finalized unsigned number type 2
Finalized unsigned number type 3
Finalized unsigned number type 8
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $4000
Finalized unsigned number type $8000
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in keyboard_key_pressed::$0 = keyboard_key_pressed::key#20 & 7
Inferred type updated to byte in bitmap_init::$0 = bitmap_init::x#2 & $f8
Inferred type updated to byte in bitmap_init::$6 = bitmap_init::y#2 & 7
Inferred type updated to byte in bitmap_init::$8 = bitmap_init::$6 | bitmap_init::$7
Inferred type updated to byte in bitmap_init::$10 = bitmap_init::y#2 & 7
Inferred type updated to byte in bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#2 + 1
Inferred type updated to byte in bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#2 + 1
Inferred type updated to byte in bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#2 + 1
Inferred type updated to byte in bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#2 + 1
Inferred type updated to byte in mode_stdchar::$3 = mode_stdchar::$2 & $f
Inferred type updated to byte in mode_stdchar::$4 = mode_stdchar::cy#2 & $f
Inferred type updated to byte in mode_stdchar::$5 = mode_stdchar::$4 * $10
Inferred type updated to byte in mode_stdchar::$6 = mode_stdchar::cx#2 & $f
Inferred type updated to byte in mode_stdchar::$7 = mode_stdchar::$5 | mode_stdchar::$6
Inferred type updated to byte in mode_ecmchar::$3 = mode_ecmchar::$2 & $f
Inferred type updated to byte in mode_ecmchar::$4 = mode_ecmchar::cy#2 & $f
Inferred type updated to byte in mode_ecmchar::$5 = mode_ecmchar::$4 * $10
Inferred type updated to byte in mode_ecmchar::$6 = mode_ecmchar::cx#2 & $f
Inferred type updated to byte in mode_ecmchar::$7 = mode_ecmchar::$5 | mode_ecmchar::$6
Inferred type updated to byte in mode_mcchar::$3 = mode_mcchar::$2 & $f
Inferred type updated to byte in mode_mcchar::$4 = mode_mcchar::cy#2 & $f
Inferred type updated to byte in mode_mcchar::$5 = mode_mcchar::$4 * $10
Inferred type updated to byte in mode_mcchar::$6 = mode_mcchar::cx#2 & $f
Inferred type updated to byte in mode_mcchar::$7 = mode_mcchar::$5 | mode_mcchar::$6
Inferred type updated to byte in mode_stdbitmap::$5 = mode_stdbitmap::$4 & $f
Inferred type updated to byte in mode_stdbitmap::$6 = $f - mode_stdbitmap::col#0
Inferred type updated to byte in mode_stdbitmap::$7 = mode_stdbitmap::col#0 * $10
Inferred type updated to byte in mode_stdbitmap::$8 = mode_stdbitmap::$7 | mode_stdbitmap::col2#0
Inferred type updated to byte in mode_stdbitmap::$12 = mode_stdbitmap::l#3 + 1
Inferred type updated to byte in mode_stdbitmap::$13 = mode_stdbitmap::l#3 + 1
Inferred type updated to byte in mode_hicolstdchar::$2 = mode_hicolstdchar::cy#2 & $f
Inferred type updated to byte in mode_hicolstdchar::$3 = mode_hicolstdchar::$2 * $10
Inferred type updated to byte in mode_hicolstdchar::$4 = mode_hicolstdchar::cx#2 & $f
Inferred type updated to byte in mode_hicolstdchar::$5 = mode_hicolstdchar::$3 | mode_hicolstdchar::$4
Inferred type updated to byte in mode_hicolecmchar::$2 = mode_hicolecmchar::cy#2 & $f
Inferred type updated to byte in mode_hicolecmchar::$3 = mode_hicolecmchar::$2 * $10
Inferred type updated to byte in mode_hicolecmchar::$4 = mode_hicolecmchar::cx#2 & $f
Inferred type updated to byte in mode_hicolecmchar::$5 = mode_hicolecmchar::$3 | mode_hicolecmchar::$4
Inferred type updated to byte in mode_hicolmcchar::$2 = mode_hicolmcchar::cy#2 & $f
Inferred type updated to byte in mode_hicolmcchar::$3 = mode_hicolmcchar::$2 * $10
Inferred type updated to byte in mode_hicolmcchar::$4 = mode_hicolmcchar::cx#2 & $f
Inferred type updated to byte in mode_hicolmcchar::$5 = mode_hicolmcchar::$3 | mode_hicolmcchar::$4
Inferred type updated to byte in mode_twoplanebitmap::$2 = mode_twoplanebitmap::cy#2 & $f
Inferred type updated to byte in mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2 * $10
Inferred type updated to byte in mode_twoplanebitmap::$4 = mode_twoplanebitmap::cx#2 & $f
Inferred type updated to byte in mode_twoplanebitmap::$5 = mode_twoplanebitmap::$3 | mode_twoplanebitmap::$4
Inferred type updated to byte in mode_twoplanebitmap::$8 = mode_twoplanebitmap::ay#2 & 4
Inferred type updated to byte in mode_sixsfred::$3 = mode_sixsfred::$2 & $f
Inferred type updated to byte in mode_sixsfred::$6 = mode_sixsfred::ay#2 / 2
Inferred type updated to byte in mode_sixsfred::$7 = mode_sixsfred::$6 & 3
Inferred type updated to byte in mode_sixsfred2::$2 = mode_sixsfred2::cx#2 & 3
Inferred type updated to byte in mode_sixsfred2::$3 = mode_sixsfred2::$2 * $10
Inferred type updated to byte in mode_sixsfred2::$4 = mode_sixsfred2::cy#2 & 3
Inferred type updated to byte in mode_sixsfred2::$5 = mode_sixsfred2::$3 | mode_sixsfred2::$4
Inferred type updated to byte in mode_sixsfred2::$8 = mode_sixsfred2::ay#2 / 2
Inferred type updated to byte in mode_sixsfred2::$9 = mode_sixsfred2::$8 & 3
Inferred type updated to byte in mode_8bpppixelcell::$2 = mode_8bpppixelcell::ay#2 & $f
Inferred type updated to byte in mode_8bpppixelcell::$3 = mode_8bpppixelcell::$2 * $10
Inferred type updated to byte in mode_8bpppixelcell::$4 = mode_8bpppixelcell::ax#2 & $f
Inferred type updated to byte in mode_8bpppixelcell::$5 = mode_8bpppixelcell::$3 | mode_8bpppixelcell::$4
Inferred type updated to byte in mode_8bpppixelcell::$8 = mode_8bpppixelcell::bits#2 & $80
Inferred type updated to byte in mode_8bpppixelcell::$11 = mode_8bpppixelcell::bits#3 * 2
Adding pointer type conversion cast (byte*) bitmap_clear::$2 in bitmap_clear::$2 = bitmap_plot_xhi[0] w= bitmap_plot_xlo[0]
Successful SSA optimization PassNAddTypeConversionAssignment
Inversing boolean not [6] memset::$1 = memset::num#1 <= 0 from [5] memset::$0 = memset::num#1 > 0
Inversing boolean not [32] print_str_lines::$0 = 0 == print_str_lines::ch#0 from [31] print_str_lines::$5 = 0 != print_str_lines::ch#0
Inversing boolean not [126] bitmap_init::$4 = bitmap_init::bits#1 != 0 from [125] bitmap_init::$3 = bitmap_init::bits#1 == 0
Inversing boolean not [145] bitmap_init::$12 = bitmap_init::$10 != 7 from [144] bitmap_init::$11 = bitmap_init::$10 == 7
Inversing boolean not [286] bitmap_line_xdyi::$4 = bitmap_line_xdyi::xd#2 >= bitmap_line_xdyi::e#1 from [285] bitmap_line_xdyi::$3 = bitmap_line_xdyi::xd#2 < bitmap_line_xdyi::e#1
Inversing boolean not [309] bitmap_line_xdyd::$4 = bitmap_line_xdyd::xd#2 >= bitmap_line_xdyd::e#1 from [308] bitmap_line_xdyd::$3 = bitmap_line_xdyd::xd#2 < bitmap_line_xdyd::e#1
Inversing boolean not [332] bitmap_line_ydxi::$4 = bitmap_line_ydxi::yd#2 >= bitmap_line_ydxi::e#1 from [331] bitmap_line_ydxi::$3 = bitmap_line_ydxi::yd#2 < bitmap_line_ydxi::e#1
Inversing boolean not [356] bitmap_line_ydxd::$4 = bitmap_line_ydxd::yd#2 >= bitmap_line_ydxd::e#1 from [355] bitmap_line_ydxd::$3 = bitmap_line_ydxd::yd#2 < bitmap_line_ydxd::e#1
Inversing boolean not [438] menu::$7 = menu::$5 == 0 from [437] menu::$6 = menu::$5 != 0
Inversing boolean not [447] menu::$11 = menu::$9 == 0 from [446] menu::$10 = menu::$9 != 0
Inversing boolean not [466] menu::$15 = menu::$13 == 0 from [465] menu::$14 = menu::$13 != 0
Inversing boolean not [479] menu::$19 = menu::$17 == 0 from [478] menu::$18 = menu::$17 != 0
Inversing boolean not [492] menu::$23 = menu::$21 == 0 from [491] menu::$22 = menu::$21 != 0
Inversing boolean not [505] menu::$27 = menu::$25 == 0 from [504] menu::$26 = menu::$25 != 0
Inversing boolean not [518] menu::$31 = menu::$29 == 0 from [517] menu::$30 = menu::$29 != 0
Inversing boolean not [531] menu::$35 = menu::$33 == 0 from [530] menu::$34 = menu::$33 != 0
Inversing boolean not [544] menu::$39 = menu::$37 == 0 from [543] menu::$38 = menu::$37 != 0
Inversing boolean not [557] menu::$43 = menu::$41 == 0 from [556] menu::$42 = menu::$41 != 0
Inversing boolean not [570] menu::$47 = menu::$45 == 0 from [569] menu::$46 = menu::$45 != 0
Inversing boolean not [583] menu::$51 = menu::$49 == 0 from [582] menu::$50 = menu::$49 != 0
Inversing boolean not [606] mode_ctrl::$3 = mode_ctrl::$1 == 0 from [605] mode_ctrl::$2 = mode_ctrl::$1 != 0
Inversing boolean not [616] mode_ctrl::$6 = mode_ctrl::$4 == 0 from [615] mode_ctrl::$5 = mode_ctrl::$4 != 0
Inversing boolean not [628] mode_ctrl::$10 = mode_ctrl::$8 == 0 from [627] mode_ctrl::$9 = mode_ctrl::$8 != 0
Inversing boolean not [640] mode_ctrl::$14 = mode_ctrl::$12 == 0 from [639] mode_ctrl::$13 = mode_ctrl::$12 != 0
Inversing boolean not [652] mode_ctrl::$18 = mode_ctrl::$16 == 0 from [651] mode_ctrl::$17 = mode_ctrl::$16 != 0
Inversing boolean not [664] mode_ctrl::$22 = mode_ctrl::$20 == 0 from [663] mode_ctrl::$21 = mode_ctrl::$20 != 0
Inversing boolean not [676] mode_ctrl::$26 = mode_ctrl::$24 == 0 from [675] mode_ctrl::$25 = mode_ctrl::$24 != 0
Inversing boolean not [688] mode_ctrl::$30 = mode_ctrl::$28 == 0 from [687] mode_ctrl::$29 = mode_ctrl::$28 != 0
Inversing boolean not [695] mode_ctrl::$32 = mode_ctrl::ctrl#14 == dtv_control#73 from [694] mode_ctrl::$31 = mode_ctrl::ctrl#14 != dtv_control#73
Inversing boolean not [1384] mode_8bpppixelcell::$10 = mode_8bpppixelcell::$8 == 0 from [1383] mode_8bpppixelcell::$9 = mode_8bpppixelcell::$8 != 0
Inversing boolean not [1442] mode_8bppchunkybmm::$5 = mode_8bppchunkybmm::gfxb#3 != $8000 from [1441] mode_8bppchunkybmm::$4 = mode_8bppchunkybmm::gfxb#3 == $8000
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_str_lines::ch#0 = print_str_lines::ch#2 print_str_lines::ch#3 
Alias print_char_cursor#37 = print_char_cursor#59 
Alias print_str_lines::str#0 = print_str_lines::str#9 print_str_lines::str#7 
Alias print_line_cursor#69 = print_line_cursor#85 print_line_cursor#70 
Alias print_char_cursor#0 = print_char_cursor#20 
Alias print_line_cursor#32 = print_line_cursor#53 
Alias print_char_cursor#38 = print_char_cursor#60 
Alias print_str_lines::str#5 = print_str_lines::str#8 print_str_lines::str#6 
Alias print_line_cursor#0 = print_line_cursor#17 
Alias print_char_cursor#1 = print_char_cursor#21 
Alias print_char_cursor#2 = print_char_cursor#22 print_char_cursor#39 
Alias print_line_cursor#1 = print_line_cursor#18 print_line_cursor#33 
Alias print_line_cursor#2 = print_ln::$0 print_line_cursor#20 print_char_cursor#3 print_line_cursor#21 print_char_cursor#24 print_line_cursor#3 print_char_cursor#4 
Alias print_char_cursor#26 = print_char_cursor#5 print_char_cursor#6 
Alias print_line_cursor#22 = print_screen#10 print_screen#9 print_line_cursor#4 print_char_cursor#7 print_char_cursor#27 print_line_cursor#5 print_char_cursor#8 
Alias print_screen#0 = print_line_cursor#6 print_char_cursor#9 print_screen#11 print_line_cursor#23 print_char_cursor#28 print_screen#1 print_line_cursor#7 print_char_cursor#10 
Alias keyboard_matrix_read::return#0 = keyboard_matrix_read::row_pressed_bits#0 keyboard_matrix_read::$0 keyboard_matrix_read::return#3 keyboard_matrix_read::return#1 
Alias keyboard_key_pressed::colidx#0 = keyboard_key_pressed::$0 keyboard_key_pressed::colidx#1 
Alias keyboard_key_pressed::rowidx#0 = keyboard_key_pressed::$1 
Alias keyboard_matrix_read::return#2 = keyboard_matrix_read::return#4 
Alias keyboard_key_pressed::return#0 = keyboard_key_pressed::$3 keyboard_key_pressed::return#22 keyboard_key_pressed::return#1 
Alias bitmap_init::bits#1 = bitmap_init::$2 
Alias bitmap_init::x#2 = bitmap_init::x#4 
Alias bitmap_init::bitmap#1 = bitmap_init::bitmap#4 
Alias bitmap_init::yoffs#2 = bitmap_init::yoffs#3 
Alias bitmap_init::y#2 = bitmap_init::y#4 
Alias bitmap_init::yoffs#1 = bitmap_init::$13 
Alias bitmap_clear::bitmap#0 = bitmap_clear::$2 
Alias bitmap_clear::y#2 = bitmap_clear::y#3 
Alias bitmap_clear::bitmap#1 = bitmap_clear::bitmap#4 
Alias bitmap_plot::plotter_x#0 = bitmap_plot::$2 
Alias bitmap_plot::plotter_y#0 = bitmap_plot::$3 
Alias bitmap_line::x1#1 = bitmap_line::x1#2 bitmap_line::x1#3 bitmap_line::x1#11 bitmap_line::x1#10 bitmap_line::x1#4 bitmap_line::x1#5 bitmap_line::x1#6 bitmap_line::x1#13 bitmap_line::x1#12 bitmap_line::x1#7 bitmap_line::x1#8 bitmap_line::x1#9 
Alias bitmap_line::x0#1 = bitmap_line::x0#2 bitmap_line::x0#3 bitmap_line::x0#11 bitmap_line::x0#10 bitmap_line::x0#4 bitmap_line::x0#5 bitmap_line::x0#6 bitmap_line::x0#13 bitmap_line::x0#12 bitmap_line::x0#7 bitmap_line::x0#8 bitmap_line::x0#9 
Alias bitmap_line::y0#1 = bitmap_line::y0#13 bitmap_line::y0#2 bitmap_line::y0#3 bitmap_line::y0#4 bitmap_line::y0#5 bitmap_line::y0#6 bitmap_line::y0#7 bitmap_line::y0#8 bitmap_line::y0#9 bitmap_line::y0#10 bitmap_line::y0#11 bitmap_line::y0#12 
Alias bitmap_line::y1#1 = bitmap_line::y1#13 bitmap_line::y1#2 bitmap_line::y1#3 bitmap_line::y1#4 bitmap_line::y1#5 bitmap_line::y1#6 bitmap_line::y1#7 bitmap_line::y1#8 bitmap_line::y1#9 bitmap_line::y1#10 bitmap_line::y1#11 bitmap_line::y1#12 
Alias bitmap_line::xd#1 = bitmap_line::$11 bitmap_line::xd#9 bitmap_line::xd#10 bitmap_line::xd#11 bitmap_line::xd#12 bitmap_line::xd#13 bitmap_line::xd#14 
Alias bitmap_line::xd#2 = bitmap_line::$1 bitmap_line::xd#3 bitmap_line::xd#4 bitmap_line::xd#5 bitmap_line::xd#6 bitmap_line::xd#7 bitmap_line::xd#8 
Alias bitmap_line::yd#1 = bitmap_line::$7 bitmap_line::yd#7 bitmap_line::yd#8 
Alias bitmap_line::yd#2 = bitmap_line::$3 bitmap_line::yd#5 bitmap_line::yd#6 
Alias bitmap_line::yd#11 = bitmap_line::yd#3 bitmap_line::$17 bitmap_line::yd#12 
Alias bitmap_line::yd#10 = bitmap_line::yd#4 bitmap_line::$13 bitmap_line::yd#9 
Alias bitmap_line_xdyi::e#0 = bitmap_line_xdyi::$0 
Alias bitmap_line_xdyi::x#3 = bitmap_line_xdyi::x#4 
Alias bitmap_line_xdyi::e#3 = bitmap_line_xdyi::e#5 
Alias bitmap_line_xdyi::yd#3 = bitmap_line_xdyi::yd#4 bitmap_line_xdyi::yd#6 
Alias bitmap_line_xdyi::xd#2 = bitmap_line_xdyi::xd#4 bitmap_line_xdyi::xd#3 
Alias bitmap_line_xdyi::x1#3 = bitmap_line_xdyi::x1#4 bitmap_line_xdyi::x1#5 
Alias bitmap_line_xdyi::y#3 = bitmap_line_xdyi::y#7 bitmap_line_xdyi::y#4 
Alias bitmap_line_xdyi::e#1 = bitmap_line_xdyi::$2 bitmap_line_xdyi::e#4 
Alias bitmap_line_xdyi::x#2 = bitmap_line_xdyi::x#7 
Alias bitmap_line_xdyi::e#2 = bitmap_line_xdyi::$5 
Alias bitmap_line_xdyd::e#0 = bitmap_line_xdyd::$0 
Alias bitmap_line_xdyd::x#3 = bitmap_line_xdyd::x#4 
Alias bitmap_line_xdyd::e#3 = bitmap_line_xdyd::e#5 
Alias bitmap_line_xdyd::yd#3 = bitmap_line_xdyd::yd#4 bitmap_line_xdyd::yd#6 
Alias bitmap_line_xdyd::xd#2 = bitmap_line_xdyd::xd#4 bitmap_line_xdyd::xd#3 
Alias bitmap_line_xdyd::x1#3 = bitmap_line_xdyd::x1#4 bitmap_line_xdyd::x1#5 
Alias bitmap_line_xdyd::y#3 = bitmap_line_xdyd::y#7 bitmap_line_xdyd::y#4 
Alias bitmap_line_xdyd::e#1 = bitmap_line_xdyd::$2 bitmap_line_xdyd::e#4 
Alias bitmap_line_xdyd::x#2 = bitmap_line_xdyd::x#7 
Alias bitmap_line_xdyd::e#2 = bitmap_line_xdyd::$5 
Alias bitmap_line_ydxi::e#0 = bitmap_line_ydxi::$0 
Alias bitmap_line_ydxi::y#3 = bitmap_line_ydxi::y#4 
Alias bitmap_line_ydxi::e#3 = bitmap_line_ydxi::e#5 
Alias bitmap_line_ydxi::xd#3 = bitmap_line_ydxi::xd#4 bitmap_line_ydxi::xd#6 
Alias bitmap_line_ydxi::yd#2 = bitmap_line_ydxi::yd#4 bitmap_line_ydxi::yd#3 
Alias bitmap_line_ydxi::y1#3 = bitmap_line_ydxi::y1#4 bitmap_line_ydxi::y1#5 
Alias bitmap_line_ydxi::x#3 = bitmap_line_ydxi::x#7 bitmap_line_ydxi::x#4 
Alias bitmap_line_ydxi::e#1 = bitmap_line_ydxi::$2 bitmap_line_ydxi::e#4 
Alias bitmap_line_ydxi::y#2 = bitmap_line_ydxi::y#7 
Alias bitmap_line_ydxi::e#2 = bitmap_line_ydxi::$5 
Alias bitmap_line_ydxd::e#0 = bitmap_line_ydxd::$0 
Alias bitmap_line_ydxd::y#2 = bitmap_line_ydxd::y#5 bitmap_line_ydxd::y#4 
Alias bitmap_line_ydxd::e#3 = bitmap_line_ydxd::e#5 
Alias bitmap_line_ydxd::xd#3 = bitmap_line_ydxd::xd#4 bitmap_line_ydxd::xd#6 
Alias bitmap_line_ydxd::yd#2 = bitmap_line_ydxd::yd#4 bitmap_line_ydxd::yd#3 
Alias bitmap_line_ydxd::y1#3 = bitmap_line_ydxd::y1#4 bitmap_line_ydxd::y1#5 
Alias bitmap_line_ydxd::x#3 = bitmap_line_ydxd::x#7 bitmap_line_ydxd::x#4 
Alias bitmap_line_ydxd::e#1 = bitmap_line_ydxd::$2 bitmap_line_ydxd::e#4 
Alias bitmap_line_ydxd::y#3 = bitmap_line_ydxd::y#8 
Alias bitmap_line_ydxd::e#2 = bitmap_line_ydxd::$5 
Alias print_screen#13 = print_screen#18 print_screen#19 print_screen#3 
Alias print_line_cursor#25 = print_line_cursor#35 print_line_cursor#36 print_line_cursor#9 
Alias print_char_cursor#12 = print_char_cursor#41 print_char_cursor#42 print_char_cursor#30 
Alias dtv_control#1 = dtv_control#100 dtv_control#101 dtv_control#57 
Alias print_screen#12 = print_screen#2 
Alias print_line_cursor#24 = print_line_cursor#8 
Alias print_char_cursor#11 = print_char_cursor#29 
Alias dtv_control#0 = dtv_control#56 
Alias print_screen#51 = print_screen#66 
Alias print_line_cursor#71 = print_line_cursor#86 
Alias print_char_cursor#76 = print_char_cursor#90 
Alias dtv_control#237 = dtv_control#247 
Alias menu::c#2 = menu::c#3 
Alias print_screen#20 = print_screen#52 print_screen#36 
Alias print_line_cursor#37 = print_line_cursor#72 print_line_cursor#55 
Alias print_char_cursor#43 = print_char_cursor#77 print_char_cursor#62 
Alias dtv_control#133 = dtv_control#238 dtv_control#222 dtv_control#205 dtv_control#190 dtv_control#161 
Alias print_screen#14 = print_screen#4 print_screen#53 print_screen#37 
Alias print_line_cursor#10 = print_line_cursor#26 
Alias print_char_cursor#13 = print_char_cursor#31 
Alias print_line_cursor#11 = print_line_cursor#27 
Alias print_char_cursor#14 = print_char_cursor#32 
Alias print_char_cursor#15 = print_char_cursor#33 
Alias print_line_cursor#12 = print_line_cursor#28 
Alias dtv_control#102 = dtv_control#162 dtv_control#103 dtv_control#135 dtv_control#163 dtv_control#136 dtv_control#164 dtv_control#137 dtv_control#104 dtv_control#165 dtv_control#138 dtv_control#105 dtv_control#166 dtv_control#139 dtv_control#106 dtv_control#167 dtv_control#140 dtv_control#107 dtv_control#168 dtv_control#141 dtv_control#108 dtv_control#169 dtv_control#142 dtv_control#109 dtv_control#170 dtv_control#143 dtv_control#110 dtv_control#171 dtv_control#144 dtv_control#111 dtv_control#172 dtv_control#145 dtv_control#112 dtv_control#173 dtv_control#134 dtv_control#113 dtv_control#114 
Alias print_screen#21 = print_screen#67 print_screen#33 print_screen#54 print_screen#68 print_screen#55 print_screen#39 print_screen#69 print_screen#56 print_screen#40 print_screen#22 print_screen#70 print_screen#57 print_screen#41 print_screen#23 print_screen#71 print_screen#58 print_screen#42 print_screen#24 print_screen#72 print_screen#59 print_screen#43 print_screen#25 print_screen#73 print_screen#60 print_screen#44 print_screen#26 print_screen#74 print_screen#61 print_screen#45 print_screen#27 print_screen#75 print_screen#62 print_screen#46 print_screen#28 print_screen#76 print_screen#63 print_screen#47 print_screen#29 print_screen#77 print_screen#65 print_screen#48 print_screen#30 print_screen#64 print_screen#38 print_screen#49 print_screen#31 print_screen#50 print_screen#32 
Alias print_line_cursor#38 = print_line_cursor#87 print_line_cursor#50 print_line_cursor#73 print_line_cursor#88 print_line_cursor#74 print_line_cursor#57 print_line_cursor#89 print_line_cursor#75 print_line_cursor#58 print_line_cursor#39 print_line_cursor#90 print_line_cursor#76 print_line_cursor#59 print_line_cursor#40 print_line_cursor#91 print_line_cursor#77 print_line_cursor#60 print_line_cursor#41 print_line_cursor#92 print_line_cursor#78 print_line_cursor#61 print_line_cursor#42 print_line_cursor#93 print_line_cursor#79 print_line_cursor#62 print_line_cursor#43 print_line_cursor#94 print_line_cursor#80 print_line_cursor#63 print_line_cursor#44 print_line_cursor#95 print_line_cursor#81 print_line_cursor#64 print_line_cursor#45 print_line_cursor#96 print_line_cursor#82 print_line_cursor#65 print_line_cursor#46 print_line_cursor#97 print_line_cursor#84 print_line_cursor#66 print_line_cursor#47 print_line_cursor#83 print_line_cursor#56 print_line_cursor#67 print_line_cursor#48 print_line_cursor#68 print_line_cursor#49 
Alias print_char_cursor#100 = print_char_cursor#91 print_char_cursor#56 print_char_cursor#78 print_char_cursor#92 print_char_cursor#79 print_char_cursor#64 print_char_cursor#44 print_char_cursor#93 print_char_cursor#80 print_char_cursor#65 print_char_cursor#45 print_char_cursor#94 print_char_cursor#81 print_char_cursor#66 print_char_cursor#46 print_char_cursor#95 print_char_cursor#82 print_char_cursor#67 print_char_cursor#47 print_char_cursor#96 print_char_cursor#83 print_char_cursor#68 print_char_cursor#48 print_char_cursor#97 print_char_cursor#84 print_char_cursor#69 print_char_cursor#49 print_char_cursor#98 print_char_cursor#85 print_char_cursor#70 print_char_cursor#50 print_char_cursor#99 print_char_cursor#86 print_char_cursor#71 print_char_cursor#51 print_char_cursor#87 print_char_cursor#72 print_char_cursor#52 print_char_cursor#101 print_char_cursor#89 print_char_cursor#73 print_char_cursor#53 print_char_cursor#88 print_char_cursor#63 print_char_cursor#74 print_char_cursor#54 print_char_cursor#75 print_char_cursor#55 
Alias keyboard_key_pressed::return#2 = keyboard_key_pressed::return#23 
Alias keyboard_key_pressed::return#24 = keyboard_key_pressed::return#3 
Alias dtv_control#2 = dtv_control#58 
Alias print_screen#15 = print_screen#5 
Alias print_line_cursor#13 = print_line_cursor#29 
Alias print_char_cursor#16 = print_char_cursor#34 
Alias dtv_control#3 = dtv_control#59 
Alias keyboard_key_pressed::return#25 = keyboard_key_pressed::return#4 
Alias dtv_control#4 = dtv_control#60 
Alias keyboard_key_pressed::return#26 = keyboard_key_pressed::return#5 
Alias dtv_control#5 = dtv_control#61 
Alias keyboard_key_pressed::return#27 = keyboard_key_pressed::return#6 
Alias dtv_control#6 = dtv_control#62 
Alias keyboard_key_pressed::return#28 = keyboard_key_pressed::return#7 
Alias dtv_control#63 = dtv_control#7 
Alias keyboard_key_pressed::return#29 = keyboard_key_pressed::return#8 
Alias dtv_control#64 = dtv_control#8 
Alias keyboard_key_pressed::return#30 = keyboard_key_pressed::return#9 
Alias dtv_control#65 = dtv_control#9 
Alias keyboard_key_pressed::return#10 = keyboard_key_pressed::return#31 
Alias dtv_control#10 = dtv_control#66 
Alias keyboard_key_pressed::return#11 = keyboard_key_pressed::return#32 
Alias dtv_control#11 = dtv_control#67 
Alias keyboard_key_pressed::return#12 = keyboard_key_pressed::return#33 
Alias dtv_control#12 = dtv_control#68 
Alias keyboard_key_pressed::return#13 = keyboard_key_pressed::return#34 
Alias dtv_control#13 = dtv_control#69 
Alias dtv_control#14 = dtv_control#70 
Alias dtv_control#115 = dtv_control#147 dtv_control#174 dtv_control#71 dtv_control#283 dtv_control#282 
Alias keyboard_key_pressed::return#14 = keyboard_key_pressed::return#35 
Alias keyboard_key_pressed::return#15 = keyboard_key_pressed::return#36 
Alias mode_ctrl::ctrl#0 = mode_ctrl::ctrl#16 mode_ctrl::ctrl#8 
Alias dtv_control#15 = dtv_control#72 
Alias keyboard_key_pressed::return#16 = keyboard_key_pressed::return#37 
Alias mode_ctrl::ctrl#17 = mode_ctrl::ctrl#23 mode_ctrl::ctrl#9 
Alias dtv_control#271 = dtv_control#272 dtv_control#277 
Alias mode_ctrl::ctrl#1 = mode_ctrl::$7 
Alias keyboard_key_pressed::return#17 = keyboard_key_pressed::return#38 
Alias mode_ctrl::ctrl#10 = mode_ctrl::ctrl#18 mode_ctrl::ctrl#24 
Alias dtv_control#257 = dtv_control#258 dtv_control#265 
Alias mode_ctrl::ctrl#2 = mode_ctrl::$11 
Alias keyboard_key_pressed::return#18 = keyboard_key_pressed::return#39 
Alias mode_ctrl::ctrl#11 = mode_ctrl::ctrl#19 mode_ctrl::ctrl#25 
Alias dtv_control#239 = dtv_control#240 dtv_control#248 
Alias mode_ctrl::ctrl#3 = mode_ctrl::$15 
Alias keyboard_key_pressed::return#19 = keyboard_key_pressed::return#40 
Alias mode_ctrl::ctrl#12 = mode_ctrl::ctrl#20 mode_ctrl::ctrl#26 
Alias dtv_control#206 = dtv_control#207 dtv_control#223 
Alias mode_ctrl::ctrl#4 = mode_ctrl::$19 
Alias keyboard_key_pressed::return#20 = keyboard_key_pressed::return#41 
Alias mode_ctrl::ctrl#13 = mode_ctrl::ctrl#21 mode_ctrl::ctrl#27 
Alias dtv_control#175 = dtv_control#176 dtv_control#191 
Alias mode_ctrl::ctrl#5 = mode_ctrl::$23 
Alias keyboard_key_pressed::return#21 = keyboard_key_pressed::return#42 
Alias mode_ctrl::ctrl#22 = mode_ctrl::ctrl#28 
Alias dtv_control#117 = dtv_control#118 dtv_control#148 
Alias mode_ctrl::ctrl#6 = mode_ctrl::$27 
Alias mode_ctrl::ctrl#14 = mode_ctrl::ctrl#15 
Alias dtv_control#208 = dtv_control#224 
Alias mode_stdchar::cy#2 = mode_stdchar::cy#3 
Alias mode_stdchar::col#1 = mode_stdchar::col#4 
Alias mode_stdchar::ch#1 = mode_stdchar::ch#4 
Alias dtv_control#119 = dtv_control#149 dtv_control#177 
Alias dtv_control#18 = dtv_control#74 dtv_control#75 dtv_control#19 
Alias dtv_control#209 = dtv_control#225 
Alias mode_ecmchar::cy#2 = mode_ecmchar::cy#3 
Alias mode_ecmchar::col#1 = mode_ecmchar::col#4 
Alias mode_ecmchar::ch#1 = mode_ecmchar::ch#4 
Alias dtv_control#120 = dtv_control#150 dtv_control#178 
Alias dtv_control#21 = dtv_control#76 dtv_control#77 dtv_control#22 
Alias dtv_control#210 = dtv_control#226 
Alias mode_mcchar::cy#2 = mode_mcchar::cy#3 
Alias mode_mcchar::col#1 = mode_mcchar::col#4 
Alias mode_mcchar::ch#1 = mode_mcchar::ch#4 
Alias dtv_control#121 = dtv_control#151 dtv_control#179 
Alias dtv_control#24 = dtv_control#78 dtv_control#79 dtv_control#25 
Alias dtv_control#259 = dtv_control#266 
Alias mode_stdbitmap::col#0 = mode_stdbitmap::$5 
Alias mode_stdbitmap::col2#0 = mode_stdbitmap::$6 
Alias mode_stdbitmap::cy#2 = mode_stdbitmap::cy#3 
Alias mode_stdbitmap::ch#1 = mode_stdbitmap::ch#4 
Alias dtv_control#180 = dtv_control#227 dtv_control#241 dtv_control#211 dtv_control#195 
Alias mode_stdbitmap::l#2 = mode_stdbitmap::l#3 mode_stdbitmap::l#4 
Alias dtv_control#122 = dtv_control#196 dtv_control#152 dtv_control#181 
Alias dtv_control#27 = dtv_control#80 dtv_control#81 dtv_control#28 
Alias dtv_control#212 = dtv_control#228 
Alias mode_hicolstdchar::v#0 = mode_hicolstdchar::$5 
Alias mode_hicolstdchar::cy#2 = mode_hicolstdchar::cy#3 
Alias mode_hicolstdchar::col#1 = mode_hicolstdchar::col#4 
Alias mode_hicolstdchar::ch#1 = mode_hicolstdchar::ch#4 
Alias dtv_control#123 = dtv_control#153 dtv_control#182 
Alias dtv_control#30 = dtv_control#82 dtv_control#83 dtv_control#31 
Alias dtv_control#213 = dtv_control#229 
Alias mode_hicolecmchar::v#0 = mode_hicolecmchar::$5 
Alias mode_hicolecmchar::cy#2 = mode_hicolecmchar::cy#3 
Alias mode_hicolecmchar::col#1 = mode_hicolecmchar::col#4 
Alias mode_hicolecmchar::ch#1 = mode_hicolecmchar::ch#4 
Alias dtv_control#124 = dtv_control#154 dtv_control#183 
Alias dtv_control#33 = dtv_control#84 dtv_control#85 dtv_control#34 
Alias dtv_control#214 = dtv_control#230 
Alias mode_hicolmcchar::v#0 = mode_hicolmcchar::$5 
Alias mode_hicolmcchar::cy#2 = mode_hicolmcchar::cy#3 
Alias mode_hicolmcchar::col#1 = mode_hicolmcchar::col#4 
Alias mode_hicolmcchar::ch#1 = mode_hicolmcchar::ch#4 
Alias dtv_control#125 = dtv_control#155 dtv_control#184 
Alias dtv_control#36 = dtv_control#86 dtv_control#87 dtv_control#37 
Alias dtv_control#291 = dtv_control#292 
Alias mode_twoplanebitmap::cy#2 = mode_twoplanebitmap::cy#3 
Alias mode_twoplanebitmap::col#1 = mode_twoplanebitmap::col#4 
Alias dtv_control#273 = dtv_control#278 dtv_control#284 
Alias mode_twoplanebitmap::gfxa#3 = mode_twoplanebitmap::gfxa#5 mode_twoplanebitmap::gfxa#4 
Alias mode_twoplanebitmap::ax#3 = mode_twoplanebitmap::ax#4 mode_twoplanebitmap::ax#5 
Alias mode_twoplanebitmap::ay#2 = mode_twoplanebitmap::ay#7 mode_twoplanebitmap::ay#6 
Alias dtv_control#250 = dtv_control#251 dtv_control#260 
Alias mode_twoplanebitmap::ay#3 = mode_twoplanebitmap::ay#4 
Alias mode_twoplanebitmap::gfxa#6 = mode_twoplanebitmap::gfxa#8 
Alias dtv_control#215 = dtv_control#231 dtv_control#242 
Alias mode_twoplanebitmap::by#2 = mode_twoplanebitmap::by#3 
Alias mode_twoplanebitmap::gfxb#1 = mode_twoplanebitmap::gfxb#4 
Alias dtv_control#126 = dtv_control#156 dtv_control#185 
Alias dtv_control#39 = dtv_control#88 dtv_control#89 dtv_control#40 
Alias dtv_control#285 = dtv_control#289 
Alias mode_sixsfred::cy#2 = mode_sixsfred::cy#3 
Alias mode_sixsfred::col#1 = mode_sixsfred::col#4 
Alias dtv_control#261 = dtv_control#268 dtv_control#274 
Alias mode_sixsfred::row#0 = mode_sixsfred::$7 
Alias mode_sixsfred::ay#2 = mode_sixsfred::ay#3 
Alias mode_sixsfred::gfxa#1 = mode_sixsfred::gfxa#4 
Alias dtv_control#216 = dtv_control#232 dtv_control#243 
Alias mode_sixsfred::by#2 = mode_sixsfred::by#3 
Alias mode_sixsfred::gfxb#1 = mode_sixsfred::gfxb#4 
Alias dtv_control#127 = dtv_control#157 dtv_control#186 
Alias dtv_control#42 = dtv_control#90 dtv_control#91 dtv_control#43 
Alias dtv_control#286 = dtv_control#290 
Alias mode_sixsfred2::cy#2 = mode_sixsfred2::cy#3 
Alias mode_sixsfred2::col#1 = mode_sixsfred2::col#4 
Alias dtv_control#262 = dtv_control#269 dtv_control#275 
Alias mode_sixsfred2::row#0 = mode_sixsfred2::$9 
Alias mode_sixsfred2::ay#2 = mode_sixsfred2::ay#3 
Alias mode_sixsfred2::gfxa#1 = mode_sixsfred2::gfxa#4 
Alias dtv_control#217 = dtv_control#233 dtv_control#244 
Alias mode_sixsfred2::by#2 = mode_sixsfred2::by#3 
Alias mode_sixsfred2::gfxb#1 = mode_sixsfred2::gfxb#4 
Alias dtv_control#128 = dtv_control#158 dtv_control#187 
Alias dtv_control#45 = dtv_control#92 dtv_control#93 dtv_control#46 
Alias dtv_control#281 = dtv_control#287 
Alias mode_8bpppixelcell::ay#2 = mode_8bpppixelcell::ay#3 
Alias mode_8bpppixelcell::gfxa#1 = mode_8bpppixelcell::gfxa#4 
Alias dtv_control#254 = dtv_control#263 dtv_control#270 
Alias mode_8bpppixelcell::bits#1 = mode_8bpppixelcell::$11 
Alias mode_8bpppixelcell::col#3 = mode_8bpppixelcell::col#4 mode_8bpppixelcell::c#1 
Alias mode_8bpppixelcell::gfxb#3 = mode_8bpppixelcell::gfxb#4 
Alias mode_8bpppixelcell::bits#2 = mode_8bpppixelcell::bits#4 
Alias mode_8bpppixelcell::cp#3 = mode_8bpppixelcell::cp#4 
Alias mode_8bpppixelcell::cr#4 = mode_8bpppixelcell::cr#5 
Alias mode_8bpppixelcell::chargen#7 = mode_8bpppixelcell::chargen#8 
Alias mode_8bpppixelcell::ch#5 = mode_8bpppixelcell::ch#6 
Alias dtv_control#218 = dtv_control#219 
Alias mode_8bpppixelcell::cr#2 = mode_8bpppixelcell::cr#3 
Alias mode_8bpppixelcell::chargen#3 = mode_8bpppixelcell::chargen#6 mode_8bpppixelcell::chargen#5 
Alias mode_8bpppixelcell::ch#2 = mode_8bpppixelcell::ch#3 mode_8bpppixelcell::ch#4 
Alias mode_8bpppixelcell::gfxb#1 = mode_8bpppixelcell::gfxb#6 mode_8bpppixelcell::gfxb#8 
Alias mode_8bpppixelcell::col#1 = mode_8bpppixelcell::col#6 mode_8bpppixelcell::col#8 
Alias dtv_control#129 = dtv_control#188 dtv_control#203 dtv_control#159 
Alias dtv_control#48 = dtv_control#94 dtv_control#95 dtv_control#49 
Alias dtv_control#246 = dtv_control#255 dtv_control#264 
Alias mode_8bppchunkybmm::gfxbCpuBank#0 = mode_8bppchunkybmm::gfxbCpuBank#3 
Alias mode_8bppchunkybmm::gfxbCpuBank#4 = mode_8bppchunkybmm::gfxbCpuBank#6 mode_8bppchunkybmm::gfxbCpuBank#5 
Alias mode_8bppchunkybmm::x#3 = mode_8bppchunkybmm::x#5 mode_8bppchunkybmm::x#4 
Alias mode_8bppchunkybmm::y#4 = mode_8bppchunkybmm::y#7 mode_8bppchunkybmm::y#5 
Alias dtv_control#220 = dtv_control#236 dtv_control#221 
Alias mode_8bppchunkybmm::y#2 = mode_8bppchunkybmm::y#3 
Alias mode_8bppchunkybmm::gfxb#1 = mode_8bppchunkybmm::gfxb#6 
Alias mode_8bppchunkybmm::gfxbCpuBank#8 = mode_8bppchunkybmm::gfxbCpuBank#9 
Alias dtv_control#130 = dtv_control#189 dtv_control#204 dtv_control#160 
Alias dtv_control#51 = dtv_control#96 dtv_control#97 dtv_control#52 
Alias print_screen#34 = print_line_cursor#14 print_screen#6 print_char_cursor#17 print_line_cursor#51 print_char_cursor#57 
Alias dtv_control#131 = dtv_control#53 
Alias print_screen#16 = print_screen#7 print_screen#17 print_screen#8 
Alias print_line_cursor#15 = print_line_cursor#30 print_line_cursor#31 print_line_cursor#16 
Alias print_char_cursor#18 = print_char_cursor#35 print_char_cursor#36 print_char_cursor#19 
Alias dtv_control#54 = dtv_control#98 dtv_control#99 dtv_control#55 
Successful SSA optimization Pass2AliasElimination
Alias print_str_lines::ch#0 = print_str_lines::ch#1 
Alias print_str_lines::str#0 = print_str_lines::str#5 
Alias print_line_cursor#32 = print_line_cursor#69 
Alias bitmap_init::x#2 = bitmap_init::x#3 
Alias bitmap_init::bitmap#1 = bitmap_init::bitmap#3 
Alias bitmap_init::y#2 = bitmap_init::y#3 
Alias bitmap_line_xdyi::x1#2 = bitmap_line_xdyi::x1#3 
Alias bitmap_line_xdyi::x#2 = bitmap_line_xdyi::x#5 
Alias bitmap_line_xdyi::yd#3 = bitmap_line_xdyi::yd#5 
Alias bitmap_line_xdyi::xd#2 = bitmap_line_xdyi::xd#6 
Alias bitmap_line_xdyd::x1#2 = bitmap_line_xdyd::x1#3 
Alias bitmap_line_xdyd::x#2 = bitmap_line_xdyd::x#5 
Alias bitmap_line_xdyd::yd#3 = bitmap_line_xdyd::yd#5 
Alias bitmap_line_xdyd::xd#2 = bitmap_line_xdyd::xd#6 
Alias bitmap_line_ydxi::y1#2 = bitmap_line_ydxi::y1#3 
Alias bitmap_line_ydxi::y#2 = bitmap_line_ydxi::y#5 
Alias bitmap_line_ydxi::xd#3 = bitmap_line_ydxi::xd#5 
Alias bitmap_line_ydxi::yd#2 = bitmap_line_ydxi::yd#6 
Alias bitmap_line_ydxd::y1#2 = bitmap_line_ydxd::y1#3 
Alias bitmap_line_ydxd::y#3 = bitmap_line_ydxd::y#6 
Alias bitmap_line_ydxd::xd#3 = bitmap_line_ydxd::xd#5 
Alias bitmap_line_ydxd::yd#2 = bitmap_line_ydxd::yd#6 
Alias print_screen#15 = print_screen#21 
Alias print_line_cursor#13 = print_line_cursor#38 
Alias print_char_cursor#100 = print_char_cursor#16 
Alias dtv_control#115 = dtv_control#271 dtv_control#257 dtv_control#239 dtv_control#206 dtv_control#175 dtv_control#117 dtv_control#73 
Alias mode_twoplanebitmap::ax#2 = mode_twoplanebitmap::ax#3 
Alias mode_twoplanebitmap::ay#2 = mode_twoplanebitmap::ay#3 
Alias dtv_control#215 = dtv_control#250 
Alias mode_8bpppixelcell::gfxb#2 = mode_8bpppixelcell::gfxb#3 
Alias mode_8bpppixelcell::bits#2 = mode_8bpppixelcell::bits#3 
Alias mode_8bpppixelcell::col#2 = mode_8bpppixelcell::col#3 
Alias mode_8bpppixelcell::cp#2 = mode_8bpppixelcell::cp#3 
Alias mode_8bpppixelcell::cr#2 = mode_8bpppixelcell::cr#4 
Alias mode_8bpppixelcell::chargen#3 = mode_8bpppixelcell::chargen#7 
Alias mode_8bpppixelcell::ch#2 = mode_8bpppixelcell::ch#5 
Alias dtv_control#129 = dtv_control#218 
Alias mode_8bppchunkybmm::x#2 = mode_8bppchunkybmm::x#3 
Alias mode_8bppchunkybmm::y#2 = mode_8bppchunkybmm::y#4 
Alias dtv_control#130 = dtv_control#220 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values memset::num#1 memset::num#0
Identical Phi Values memset::str#2 memset::str#0
Identical Phi Values memset::c#3 memset::c#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#4 memset::str#2
Identical Phi Values memset::c#1 memset::c#3
Identical Phi Values print_str_lines::str#4 print_str_lines::str#1
Identical Phi Values print_char_cursor#58 print_char_cursor#14
Identical Phi Values print_line_cursor#52 print_line_cursor#11
Identical Phi Values print_line_cursor#32 print_line_cursor#1
Identical Phi Values print_char_cursor#0 print_char_cursor#26
Identical Phi Values print_line_cursor#0 print_line_cursor#2
Identical Phi Values print_char_cursor#1 print_line_cursor#2
Identical Phi Values print_line_cursor#34 print_line_cursor#32
Identical Phi Values print_char_cursor#40 print_char_cursor#38
Identical Phi Values print_char_cursor#23 print_char_cursor#40
Identical Phi Values print_char::ch#1 print_char::ch#0
Identical Phi Values print_char_cursor#25 print_char_cursor#37
Identical Phi Values print_line_cursor#22 print_screen#14
Identical Phi Values print_set_screen::screen#1 print_set_screen::screen#0
Identical Phi Values keyboard_matrix_read::rowid#1 keyboard_matrix_read::rowid#0
Identical Phi Values bitmap_init::bitmap#2 bitmap_init::bitmap#0
Identical Phi Values bitmap_init::bitmap#1 bitmap_init::bitmap#2
Identical Phi Values bitmap_clear::y#2 bitmap_clear::y#4
Identical Phi Values bitmap_line::x0#1 bitmap_line::x0#0
Identical Phi Values bitmap_line::x1#1 bitmap_line::x1#0
Identical Phi Values bitmap_line::y0#1 bitmap_line::y0#0
Identical Phi Values bitmap_line::y1#1 bitmap_line::y1#0
Identical Phi Values bitmap_line_xdyi::yd#3 bitmap_line_xdyi::yd#2
Identical Phi Values bitmap_line_xdyi::xd#2 bitmap_line_xdyi::xd#5
Identical Phi Values bitmap_line_xdyi::x1#2 bitmap_line_xdyi::x1#6
Identical Phi Values bitmap_line_xdyd::yd#3 bitmap_line_xdyd::yd#2
Identical Phi Values bitmap_line_xdyd::xd#2 bitmap_line_xdyd::xd#5
Identical Phi Values bitmap_line_xdyd::x1#2 bitmap_line_xdyd::x1#6
Identical Phi Values bitmap_line_ydxi::xd#3 bitmap_line_ydxi::xd#2
Identical Phi Values bitmap_line_ydxi::yd#2 bitmap_line_ydxi::yd#5
Identical Phi Values bitmap_line_ydxi::y1#2 bitmap_line_ydxi::y1#6
Identical Phi Values bitmap_line_ydxd::xd#3 bitmap_line_ydxd::xd#2
Identical Phi Values bitmap_line_ydxd::yd#2 bitmap_line_ydxd::yd#5
Identical Phi Values bitmap_line_ydxd::y1#2 bitmap_line_ydxd::y1#6
Identical Phi Values print_screen#35 print_screen#34
Identical Phi Values print_line_cursor#54 print_screen#34
Identical Phi Values print_char_cursor#61 print_screen#34
Identical Phi Values dtv_control#132 dtv_control#131
Identical Phi Values print_screen#12 print_screen#15
Identical Phi Values print_line_cursor#24 print_line_cursor#13
Identical Phi Values print_char_cursor#11 print_char_cursor#100
Identical Phi Values dtv_control#0 dtv_control#3
Identical Phi Values print_screen#78 print_screen#13
Identical Phi Values print_line_cursor#98 print_line_cursor#25
Identical Phi Values print_char_cursor#102 print_char_cursor#12
Identical Phi Values dtv_control#256 dtv_control#1
Identical Phi Values print_screen#51 print_screen#78
Identical Phi Values print_line_cursor#71 print_line_cursor#98
Identical Phi Values print_char_cursor#76 print_char_cursor#102
Identical Phi Values dtv_control#237 dtv_control#256
Identical Phi Values print_screen#20 print_screen#51
Identical Phi Values print_line_cursor#37 print_line_cursor#71
Identical Phi Values print_char_cursor#43 print_char_cursor#76
Identical Phi Values dtv_control#133 dtv_control#237
Identical Phi Values print_screen#14 print_screen#0
Identical Phi Values print_line_cursor#10 print_screen#0
Identical Phi Values print_char_cursor#13 print_screen#0
Identical Phi Values print_line_cursor#11 print_line_cursor#22
Identical Phi Values print_char_cursor#14 print_line_cursor#22
Identical Phi Values print_char_cursor#15 print_char_cursor#2
Identical Phi Values print_line_cursor#12 print_line_cursor#1
Identical Phi Values print_screen#15 print_screen#14
Identical Phi Values print_line_cursor#13 print_line_cursor#12
Identical Phi Values print_char_cursor#100 print_char_cursor#15
Identical Phi Values dtv_control#102 dtv_control#133
Identical Phi Values dtv_control#2 dtv_control#18
Identical Phi Values dtv_control#4 dtv_control#21
Identical Phi Values dtv_control#5 dtv_control#24
Identical Phi Values dtv_control#6 dtv_control#27
Identical Phi Values dtv_control#63 dtv_control#30
Identical Phi Values dtv_control#64 dtv_control#33
Identical Phi Values dtv_control#65 dtv_control#36
Identical Phi Values dtv_control#10 dtv_control#45
Identical Phi Values dtv_control#11 dtv_control#39
Identical Phi Values dtv_control#12 dtv_control#42
Identical Phi Values dtv_control#13 dtv_control#48
Identical Phi Values dtv_control#14 dtv_control#51
Identical Phi Values dtv_control#115 dtv_control#116
Identical Phi Values dtv_control#208 dtv_control#17
Identical Phi Values mode_stdchar::cy#2 mode_stdchar::cy#4
Identical Phi Values dtv_control#119 dtv_control#192
Identical Phi Values dtv_control#18 dtv_control#15
Identical Phi Values dtv_control#209 dtv_control#20
Identical Phi Values mode_ecmchar::cy#2 mode_ecmchar::cy#4
Identical Phi Values dtv_control#120 dtv_control#193
Identical Phi Values dtv_control#21 dtv_control#15
Identical Phi Values dtv_control#210 dtv_control#23
Identical Phi Values mode_mcchar::cy#2 mode_mcchar::cy#4
Identical Phi Values dtv_control#121 dtv_control#194
Identical Phi Values dtv_control#24 dtv_control#15
Identical Phi Values dtv_control#259 dtv_control#26
Identical Phi Values mode_stdbitmap::cy#2 mode_stdbitmap::cy#4
Identical Phi Values dtv_control#180 dtv_control#249
Identical Phi Values dtv_control#122 dtv_control#180
Identical Phi Values dtv_control#27 dtv_control#15
Identical Phi Values dtv_control#212 dtv_control#29
Identical Phi Values mode_hicolstdchar::cy#2 mode_hicolstdchar::cy#4
Identical Phi Values dtv_control#123 dtv_control#197
Identical Phi Values dtv_control#30 dtv_control#15
Identical Phi Values dtv_control#213 dtv_control#32
Identical Phi Values mode_hicolecmchar::cy#2 mode_hicolecmchar::cy#4
Identical Phi Values dtv_control#124 dtv_control#198
Identical Phi Values dtv_control#33 dtv_control#15
Identical Phi Values dtv_control#214 dtv_control#35
Identical Phi Values mode_hicolmcchar::cy#2 mode_hicolmcchar::cy#4
Identical Phi Values dtv_control#125 dtv_control#199
Identical Phi Values dtv_control#36 dtv_control#15
Identical Phi Values dtv_control#291 dtv_control#38
Identical Phi Values mode_twoplanebitmap::cy#2 mode_twoplanebitmap::cy#4
Identical Phi Values dtv_control#273 dtv_control#288
Identical Phi Values mode_twoplanebitmap::ay#2 mode_twoplanebitmap::ay#5
Identical Phi Values dtv_control#215 dtv_control#267
Identical Phi Values mode_twoplanebitmap::by#2 mode_twoplanebitmap::by#4
Identical Phi Values dtv_control#126 dtv_control#200
Identical Phi Values dtv_control#39 dtv_control#15
Identical Phi Values dtv_control#285 dtv_control#41
Identical Phi Values mode_sixsfred::cy#2 mode_sixsfred::cy#4
Identical Phi Values dtv_control#261 dtv_control#279
Identical Phi Values mode_sixsfred::ay#2 mode_sixsfred::ay#4
Identical Phi Values dtv_control#216 dtv_control#252
Identical Phi Values mode_sixsfred::by#2 mode_sixsfred::by#4
Identical Phi Values dtv_control#127 dtv_control#201
Identical Phi Values dtv_control#42 dtv_control#15
Identical Phi Values dtv_control#286 dtv_control#44
Identical Phi Values mode_sixsfred2::cy#2 mode_sixsfred2::cy#4
Identical Phi Values dtv_control#262 dtv_control#280
Identical Phi Values mode_sixsfred2::ay#2 mode_sixsfred2::ay#4
Identical Phi Values dtv_control#217 dtv_control#253
Identical Phi Values mode_sixsfred2::by#2 mode_sixsfred2::by#4
Identical Phi Values dtv_control#128 dtv_control#202
Identical Phi Values dtv_control#45 dtv_control#15
Identical Phi Values dtv_control#281 dtv_control#47
Identical Phi Values mode_8bpppixelcell::ay#2 mode_8bpppixelcell::ay#4
Identical Phi Values dtv_control#254 dtv_control#276
Identical Phi Values mode_8bpppixelcell::cr#2 mode_8bpppixelcell::cr#6
Identical Phi Values mode_8bpppixelcell::chargen#3 mode_8bpppixelcell::chargen#1
Identical Phi Values mode_8bpppixelcell::ch#2 mode_8bpppixelcell::ch#7
Identical Phi Values dtv_control#129 dtv_control#234
Identical Phi Values dtv_control#48 dtv_control#15
Identical Phi Values dtv_control#246 dtv_control#50
Identical Phi Values mode_8bppchunkybmm::y#2 mode_8bppchunkybmm::y#6
Identical Phi Values dtv_control#130 dtv_control#235
Identical Phi Values dtv_control#51 dtv_control#15
Identical Phi Values print_screen#16 print_screen#13
Identical Phi Values print_line_cursor#15 print_line_cursor#25
Identical Phi Values print_char_cursor#18 print_char_cursor#12
Identical Phi Values dtv_control#54 dtv_control#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#0
Identical Phi Values dtv_control#15 dtv_control#116
Identical Phi Values dtv_control#192 dtv_control#17
Identical Phi Values dtv_control#193 dtv_control#20
Identical Phi Values dtv_control#194 dtv_control#23
Identical Phi Values dtv_control#249 dtv_control#26
Identical Phi Values dtv_control#197 dtv_control#29
Identical Phi Values dtv_control#198 dtv_control#32
Identical Phi Values dtv_control#199 dtv_control#35
Identical Phi Values dtv_control#288 dtv_control#38
Identical Phi Values dtv_control#267 dtv_control#288
Identical Phi Values dtv_control#200 dtv_control#267
Identical Phi Values dtv_control#279 dtv_control#41
Identical Phi Values dtv_control#252 dtv_control#279
Identical Phi Values dtv_control#201 dtv_control#252
Identical Phi Values dtv_control#280 dtv_control#44
Identical Phi Values dtv_control#253 dtv_control#280
Identical Phi Values dtv_control#202 dtv_control#253
Identical Phi Values dtv_control#276 dtv_control#47
Identical Phi Values mode_8bpppixelcell::ch#7 mode_8bpppixelcell::ch#8
Identical Phi Values dtv_control#234 dtv_control#245
Identical Phi Values dtv_control#235 dtv_control#50
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values dtv_control#245 dtv_control#47
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [143] bitmap_init::$10 = bitmap_init::y#2 & 7
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition memset::$1 [6] if(memset::num#0<=0) goto memset::@1
Simple Condition memset::$3 [13] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition print_str_lines::$3 [20] if(0!=*print_str_lines::str#2) goto print_str_lines::@2
Simple Condition print_str_lines::$0 [25] if(0==print_str_lines::ch#0) goto print_str_lines::@3
Simple Condition print_str_lines::$4 [28] if(0!=print_str_lines::ch#0) goto print_str_lines::@2
Simple Condition print_ln::$1 [39] if(print_line_cursor#2<print_char_cursor#38) goto print_ln::@1
Simple Condition bitmap_init::$4 [79] if(bitmap_init::bits#1!=0) goto bitmap_init::@2
Simple Condition bitmap_init::$5 [83] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition bitmap_init::$12 [96] if(bitmap_init::$10!=7) goto bitmap_init::@6
Simple Condition bitmap_init::$14 [100] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5
Simple Condition bitmap_clear::$0 [113] if(bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2
Simple Condition bitmap_clear::$1 [116] if(bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1
Simple Condition bitmap_line::$0 [130] if(bitmap_line::x0#0<bitmap_line::x1#0) goto bitmap_line::@1
Simple Condition bitmap_line::$12 [133] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@11
Simple Condition bitmap_line::$2 [136] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@7
Simple Condition bitmap_line::$8 [139] if(bitmap_line::yd#1<bitmap_line::xd#2) goto bitmap_line::@9
Simple Condition bitmap_line::$4 [142] if(bitmap_line::yd#2<bitmap_line::xd#2) goto bitmap_line::@8
Simple Condition bitmap_line::$18 [169] if(bitmap_line::yd#11<bitmap_line::xd#1) goto bitmap_line::@13
Simple Condition bitmap_line::$14 [172] if(bitmap_line::yd#10<bitmap_line::xd#1) goto bitmap_line::@12
Simple Condition bitmap_line_xdyi::$4 [207] if(bitmap_line_xdyi::xd#5>=bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
Simple Condition bitmap_line_xdyi::$7 [211] if(bitmap_line_xdyi::x#2!=bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
Simple Condition bitmap_line_xdyd::$4 [224] if(bitmap_line_xdyd::xd#5>=bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
Simple Condition bitmap_line_xdyd::$7 [228] if(bitmap_line_xdyd::x#2!=bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
Simple Condition bitmap_line_ydxi::$4 [241] if(bitmap_line_ydxi::yd#5>=bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
Simple Condition bitmap_line_ydxi::$7 [245] if(bitmap_line_ydxi::y#2!=bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
Simple Condition bitmap_line_ydxd::$4 [258] if(bitmap_line_ydxd::yd#5>=bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
Simple Condition bitmap_line_ydxd::$7 [262] if(bitmap_line_ydxd::y#3!=bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
Simple Condition menu::$3 [291] if(menu::i#1!=rangelast(0,$f)) goto menu::@1
Simple Condition menu::$4 [295] if(menu::c#2!=COLS+$3e8) goto menu::@4
Simple Condition menu::$7 [315] if(menu::$5==0) goto menu::@8
Simple Condition menu::$11 [321] if(menu::$9==0) goto menu::@9
Simple Condition menu::$15 [331] if(menu::$13==0) goto menu::@10
Simple Condition menu::$19 [339] if(menu::$17==0) goto menu::@11
Simple Condition menu::$23 [347] if(menu::$21==0) goto menu::@12
Simple Condition menu::$27 [355] if(menu::$25==0) goto menu::@13
Simple Condition menu::$31 [363] if(menu::$29==0) goto menu::@14
Simple Condition menu::$35 [371] if(menu::$33==0) goto menu::@15
Simple Condition menu::$39 [379] if(menu::$37==0) goto menu::@16
Simple Condition menu::$43 [387] if(menu::$41==0) goto menu::@17
Simple Condition menu::$47 [395] if(menu::$45==0) goto menu::@18
Simple Condition menu::$51 [403] if(menu::$49==0) goto menu::@6
Simple Condition mode_ctrl::$0 [413] if(*RASTER!=$ff) goto mode_ctrl::@2
Simple Condition mode_ctrl::$3 [419] if(mode_ctrl::$1==0) goto mode_ctrl::@4
Simple Condition mode_ctrl::$6 [426] if(mode_ctrl::$4==0) goto mode_ctrl::@5
Simple Condition mode_ctrl::$10 [435] if(mode_ctrl::$8==0) goto mode_ctrl::@6
Simple Condition mode_ctrl::$14 [443] if(mode_ctrl::$12==0) goto mode_ctrl::@7
Simple Condition mode_ctrl::$18 [451] if(mode_ctrl::$16==0) goto mode_ctrl::@8
Simple Condition mode_ctrl::$22 [459] if(mode_ctrl::$20==0) goto mode_ctrl::@9
Simple Condition mode_ctrl::$26 [467] if(mode_ctrl::$24==0) goto mode_ctrl::@10
Simple Condition mode_ctrl::$30 [475] if(mode_ctrl::$28==0) goto mode_ctrl::@11
Simple Condition mode_ctrl::$32 [479] if(mode_ctrl::ctrl#14==dtv_control#116) goto mode_ctrl::@1
Simple Condition mode_stdchar::$1 [499] if(mode_stdchar::i#1!=rangelast(0,$f)) goto mode_stdchar::@1
Simple Condition mode_stdchar::$8 [520] if(mode_stdchar::cx#1!=rangelast(0,$27)) goto mode_stdchar::@4
Simple Condition mode_stdchar::$9 [523] if(mode_stdchar::cy#1!=rangelast(0,$18)) goto mode_stdchar::@3
Simple Condition mode_ecmchar::$1 [542] if(mode_ecmchar::i#1!=rangelast(0,$f)) goto mode_ecmchar::@1
Simple Condition mode_ecmchar::$8 [566] if(mode_ecmchar::cx#1!=rangelast(0,$27)) goto mode_ecmchar::@4
Simple Condition mode_ecmchar::$9 [569] if(mode_ecmchar::cy#1!=rangelast(0,$18)) goto mode_ecmchar::@3
Simple Condition mode_mcchar::$1 [588] if(mode_mcchar::i#1!=rangelast(0,$f)) goto mode_mcchar::@1
Simple Condition mode_mcchar::$8 [611] if(mode_mcchar::cx#1!=rangelast(0,$27)) goto mode_mcchar::@4
Simple Condition mode_mcchar::$9 [614] if(mode_mcchar::cy#1!=rangelast(0,$18)) goto mode_mcchar::@3
Simple Condition mode_stdbitmap::$3 [631] if(mode_stdbitmap::i#1!=rangelast(0,$f)) goto mode_stdbitmap::@1
Simple Condition mode_stdbitmap::$9 [648] if(mode_stdbitmap::cx#1!=rangelast(0,$27)) goto mode_stdbitmap::@4
Simple Condition mode_stdbitmap::$10 [651] if(mode_stdbitmap::cy#1!=rangelast(0,$18)) goto mode_stdbitmap::@3
Simple Condition mode_stdbitmap::$11 [658] if(mode_stdbitmap::l#2<mode_stdbitmap::lines_cnt) goto mode_stdbitmap::@8
Simple Condition mode_hicolstdchar::$1 [685] if(mode_hicolstdchar::i#1!=rangelast(0,$f)) goto mode_hicolstdchar::@1
Simple Condition mode_hicolstdchar::$6 [704] if(mode_hicolstdchar::cx#1!=rangelast(0,$27)) goto mode_hicolstdchar::@4
Simple Condition mode_hicolstdchar::$7 [707] if(mode_hicolstdchar::cy#1!=rangelast(0,$18)) goto mode_hicolstdchar::@3
Simple Condition mode_hicolecmchar::$1 [726] if(mode_hicolecmchar::i#1!=rangelast(0,$f)) goto mode_hicolecmchar::@1
Simple Condition mode_hicolecmchar::$6 [748] if(mode_hicolecmchar::cx#1!=rangelast(0,$27)) goto mode_hicolecmchar::@4
Simple Condition mode_hicolecmchar::$7 [751] if(mode_hicolecmchar::cy#1!=rangelast(0,$18)) goto mode_hicolecmchar::@3
Simple Condition mode_hicolmcchar::$1 [770] if(mode_hicolmcchar::i#1!=rangelast(0,$f)) goto mode_hicolmcchar::@1
Simple Condition mode_hicolmcchar::$6 [791] if(mode_hicolmcchar::cx#1!=rangelast(0,$27)) goto mode_hicolmcchar::@4
Simple Condition mode_hicolmcchar::$7 [794] if(mode_hicolmcchar::cy#1!=rangelast(0,$18)) goto mode_hicolmcchar::@3
Simple Condition mode_twoplanebitmap::$1 [821] if(mode_twoplanebitmap::i#1!=rangelast(0,$f)) goto mode_twoplanebitmap::@1
Simple Condition mode_twoplanebitmap::$6 [838] if(mode_twoplanebitmap::cx#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@4
Simple Condition mode_twoplanebitmap::$7 [841] if(mode_twoplanebitmap::cy#1!=rangelast(0,$18)) goto mode_twoplanebitmap::@3
Simple Condition mode_twoplanebitmap::$9 [849] if(mode_twoplanebitmap::$8==0) goto mode_twoplanebitmap::@9
Simple Condition mode_twoplanebitmap::$10 [857] if(mode_twoplanebitmap::ax#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@8
Simple Condition mode_twoplanebitmap::$11 [860] if(mode_twoplanebitmap::ay#1!=rangelast(0,$c7)) goto mode_twoplanebitmap::@7
Simple Condition mode_twoplanebitmap::$12 [870] if(mode_twoplanebitmap::bx#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@15
Simple Condition mode_twoplanebitmap::$13 [873] if(mode_twoplanebitmap::by#1!=rangelast(0,$c7)) goto mode_twoplanebitmap::@14
Simple Condition mode_sixsfred::$1 [900] if(mode_sixsfred::i#1!=rangelast(0,$f)) goto mode_sixsfred::@1
Simple Condition mode_sixsfred::$4 [913] if(mode_sixsfred::cx#1!=rangelast(0,$27)) goto mode_sixsfred::@4
Simple Condition mode_sixsfred::$5 [916] if(mode_sixsfred::cy#1!=rangelast(0,$18)) goto mode_sixsfred::@3
Simple Condition mode_sixsfred::$8 [928] if(mode_sixsfred::ax#1!=rangelast(0,$27)) goto mode_sixsfred::@8
Simple Condition mode_sixsfred::$9 [931] if(mode_sixsfred::ay#1!=rangelast(0,$c7)) goto mode_sixsfred::@7
Simple Condition mode_sixsfred::$10 [941] if(mode_sixsfred::bx#1!=rangelast(0,$27)) goto mode_sixsfred::@12
Simple Condition mode_sixsfred::$11 [944] if(mode_sixsfred::by#1!=rangelast(0,$c7)) goto mode_sixsfred::@11
Simple Condition mode_sixsfred2::$1 [971] if(mode_sixsfred2::i#1!=rangelast(0,$f)) goto mode_sixsfred2::@1
Simple Condition mode_sixsfred2::$6 [986] if(mode_sixsfred2::cx#1!=rangelast(0,$27)) goto mode_sixsfred2::@4
Simple Condition mode_sixsfred2::$7 [989] if(mode_sixsfred2::cy#1!=rangelast(0,$18)) goto mode_sixsfred2::@3
Simple Condition mode_sixsfred2::$10 [1001] if(mode_sixsfred2::ax#1!=rangelast(0,$27)) goto mode_sixsfred2::@8
Simple Condition mode_sixsfred2::$11 [1004] if(mode_sixsfred2::ay#1!=rangelast(0,$c7)) goto mode_sixsfred2::@7
Simple Condition mode_sixsfred2::$12 [1014] if(mode_sixsfred2::bx#1!=rangelast(0,$27)) goto mode_sixsfred2::@12
Simple Condition mode_sixsfred2::$13 [1017] if(mode_sixsfred2::by#1!=rangelast(0,$c7)) goto mode_sixsfred2::@11
Simple Condition mode_8bpppixelcell::$1 [1043] if(mode_8bpppixelcell::i#1!=rangelast(0,$f)) goto mode_8bpppixelcell::@1
Simple Condition mode_8bpppixelcell::$6 [1057] if(mode_8bpppixelcell::ax#1!=rangelast(0,$27)) goto mode_8bpppixelcell::@4
Simple Condition mode_8bpppixelcell::$7 [1060] if(mode_8bpppixelcell::ay#1!=rangelast(0,$18)) goto mode_8bpppixelcell::@3
Simple Condition mode_8bpppixelcell::$10 [1076] if(mode_8bpppixelcell::$8==0) goto mode_8bpppixelcell::@10
Simple Condition mode_8bpppixelcell::$12 [1084] if(mode_8bpppixelcell::cp#1!=rangelast(0,7)) goto mode_8bpppixelcell::@9
Simple Condition mode_8bpppixelcell::$13 [1087] if(mode_8bpppixelcell::cr#1!=rangelast(0,7)) goto mode_8bpppixelcell::@8
Simple Condition mode_8bpppixelcell::$14 [1090] if(mode_8bpppixelcell::ch#1!=rangelast(0,$ff)) goto mode_8bpppixelcell::@7
Simple Condition mode_8bppchunkybmm::$3 [1111] if(mode_8bppchunkybmm::i#1!=rangelast(0,$f)) goto mode_8bppchunkybmm::@1
Simple Condition mode_8bppchunkybmm::$5 [1122] if(mode_8bppchunkybmm::gfxb#3!=$8000) goto mode_8bppchunkybmm::@5
Simple Condition mode_8bppchunkybmm::$8 [1130] if(mode_8bppchunkybmm::x#1!=rangelast(0,$13f)) goto mode_8bppchunkybmm::@4
Simple Condition mode_8bppchunkybmm::$9 [1137] if(mode_8bppchunkybmm::y#1!=rangelast(0,$c7)) goto mode_8bppchunkybmm::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant memset::c#0 = ' '
Constant memset::num#0 = $3e8
Constant bitmap_init::bits#0 = $80
Constant bitmap_init::x#0 = 0
Constant bitmap_init::bits#2 = $80
Constant bitmap_init::yoffs#0 = (byte*) 0
Constant bitmap_init::y#0 = 0
Constant bitmap_clear::y#0 = 0
Constant bitmap_clear::x#0 = 0
Constant bitmap_line::xd#0 = 0
Constant bitmap_line::yd#0 = 0
Constant menu::i#0 = 0
Constant menu::c#0 = COLS
Constant print_set_screen::screen#0 = menu::SCREEN
Constant print_str_lines::str#1 = MENU_TEXT
Constant keyboard_key_pressed::key#0 = KEY_1
Constant keyboard_key_pressed::key#1 = KEY_2
Constant keyboard_key_pressed::key#2 = KEY_3
Constant keyboard_key_pressed::key#3 = KEY_4
Constant keyboard_key_pressed::key#4 = KEY_6
Constant keyboard_key_pressed::key#5 = KEY_7
Constant keyboard_key_pressed::key#6 = KEY_8
Constant keyboard_key_pressed::key#7 = KEY_A
Constant keyboard_key_pressed::key#8 = KEY_B
Constant keyboard_key_pressed::key#9 = KEY_C
Constant keyboard_key_pressed::key#10 = KEY_D
Constant keyboard_key_pressed::key#11 = KEY_E
Constant keyboard_key_pressed::key#12 = KEY_SPACE
Constant keyboard_key_pressed::key#13 = KEY_L
Constant keyboard_key_pressed::key#14 = KEY_H
Constant keyboard_key_pressed::key#15 = KEY_O
Constant keyboard_key_pressed::key#16 = KEY_B
Constant keyboard_key_pressed::key#17 = KEY_U
Constant keyboard_key_pressed::key#18 = KEY_C
Constant keyboard_key_pressed::key#19 = KEY_0
Constant mode_ctrl::ctrl#7 = 0
Constant dtv_control#17 = 0
Constant mode_stdchar::i#0 = 0
Constant mode_stdchar::col#0 = mode_stdchar::COLORS
Constant mode_stdchar::ch#0 = mode_stdchar::SCREEN
Constant mode_stdchar::cy#0 = 0
Constant mode_stdchar::cx#0 = 0
Constant dtv_control#20 = 0
Constant mode_ecmchar::i#0 = 0
Constant mode_ecmchar::col#0 = mode_ecmchar::COLORS
Constant mode_ecmchar::ch#0 = mode_ecmchar::SCREEN
Constant mode_ecmchar::cy#0 = 0
Constant mode_ecmchar::cx#0 = 0
Constant dtv_control#23 = 0
Constant mode_mcchar::i#0 = 0
Constant mode_mcchar::col#0 = mode_mcchar::COLORS
Constant mode_mcchar::ch#0 = mode_mcchar::SCREEN
Constant mode_mcchar::cy#0 = 0
Constant mode_mcchar::cx#0 = 0
Constant dtv_control#26 = 0
Constant mode_stdbitmap::i#0 = 0
Constant mode_stdbitmap::ch#0 = mode_stdbitmap::SCREEN
Constant mode_stdbitmap::cy#0 = 0
Constant mode_stdbitmap::cx#0 = 0
Constant bitmap_init::bitmap#0 = mode_stdbitmap::BITMAP
Constant mode_stdbitmap::l#0 = 0
Constant dtv_control#29 = DTV_HIGHCOLOR
Constant mode_hicolstdchar::i#0 = 0
Constant mode_hicolstdchar::col#0 = mode_hicolstdchar::COLORS
Constant mode_hicolstdchar::ch#0 = mode_hicolstdchar::SCREEN
Constant mode_hicolstdchar::cy#0 = 0
Constant mode_hicolstdchar::cx#0 = 0
Constant dtv_control#32 = DTV_HIGHCOLOR
Constant mode_hicolecmchar::i#0 = 0
Constant mode_hicolecmchar::col#0 = mode_hicolecmchar::COLORS
Constant mode_hicolecmchar::ch#0 = mode_hicolecmchar::SCREEN
Constant mode_hicolecmchar::cy#0 = 0
Constant mode_hicolecmchar::cx#0 = 0
Constant dtv_control#35 = DTV_HIGHCOLOR
Constant mode_hicolmcchar::i#0 = 0
Constant mode_hicolmcchar::col#0 = mode_hicolmcchar::COLORS
Constant mode_hicolmcchar::ch#0 = mode_hicolmcchar::SCREEN
Constant mode_hicolmcchar::cy#0 = 0
Constant mode_hicolmcchar::cx#0 = 0
Constant dtv_control#38 = DTV_HIGHCOLOR|DTV_LINEAR
Constant mode_twoplanebitmap::i#0 = 0
Constant mode_twoplanebitmap::col#0 = mode_twoplanebitmap::COLORS
Constant mode_twoplanebitmap::cy#0 = 0
Constant mode_twoplanebitmap::cx#0 = 0
Constant mode_twoplanebitmap::gfxa#0 = mode_twoplanebitmap::PLANEA
Constant mode_twoplanebitmap::ay#0 = 0
Constant mode_twoplanebitmap::ax#0 = 0
Constant mode_twoplanebitmap::gfxb#0 = mode_twoplanebitmap::PLANEB
Constant mode_twoplanebitmap::by#0 = 0
Constant mode_twoplanebitmap::bx#0 = 0
Constant dtv_control#41 = DTV_HIGHCOLOR|DTV_LINEAR
Constant mode_sixsfred::i#0 = 0
Constant mode_sixsfred::col#0 = mode_sixsfred::COLORS
Constant mode_sixsfred::cy#0 = 0
Constant mode_sixsfred::cx#0 = 0
Constant mode_sixsfred::gfxa#0 = mode_sixsfred::PLANEA
Constant mode_sixsfred::ay#0 = 0
Constant mode_sixsfred::ax#0 = 0
Constant mode_sixsfred::gfxb#0 = mode_sixsfred::PLANEB
Constant mode_sixsfred::by#0 = 0
Constant mode_sixsfred::bx#0 = 0
Constant dtv_control#44 = DTV_LINEAR
Constant mode_sixsfred2::i#0 = 0
Constant mode_sixsfred2::col#0 = mode_sixsfred2::COLORS
Constant mode_sixsfred2::cy#0 = 0
Constant mode_sixsfred2::cx#0 = 0
Constant mode_sixsfred2::gfxa#0 = mode_sixsfred2::PLANEA
Constant mode_sixsfred2::ay#0 = 0
Constant mode_sixsfred2::ax#0 = 0
Constant mode_sixsfred2::gfxb#0 = mode_sixsfred2::PLANEB
Constant mode_sixsfred2::by#0 = 0
Constant mode_sixsfred2::bx#0 = 0
Constant dtv_control#47 = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
Constant mode_8bpppixelcell::i#0 = 0
Constant mode_8bpppixelcell::gfxa#0 = mode_8bpppixelcell::PLANEA
Constant mode_8bpppixelcell::ay#0 = 0
Constant mode_8bpppixelcell::ax#0 = 0
Constant mode_8bpppixelcell::gfxb#0 = mode_8bpppixelcell::PLANEB
Constant mode_8bpppixelcell::chargen#0 = mode_8bpppixelcell::CHARGEN
Constant mode_8bpppixelcell::col#0 = 0
Constant mode_8bpppixelcell::ch#0 = 0
Constant mode_8bpppixelcell::cr#0 = 0
Constant mode_8bpppixelcell::cp#0 = 0
Constant mode_8bpppixelcell::c#0 = 0
Constant dtv_control#50 = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
Constant mode_8bppchunkybmm::i#0 = 0
Constant mode_8bppchunkybmm::gfxbCpuBank#0 = (byte)mode_8bppchunkybmm::PLANEB/$4000
Constant mode_8bppchunkybmm::gfxb#0 = (byte*) 16384
Constant mode_8bppchunkybmm::y#0 = 0
Constant mode_8bppchunkybmm::x#0 = 0
Constant mode_8bppchunkybmm::gfxb#2 = (byte*) 16384
Constant dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte)$4000/$4000
Constant print_screen#34 = (byte*) 1024
Constant dtv_control#131 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant print_screen#0 = print_set_screen::screen#0
Constant dtvSetCpuBankSegment1::cpuBankIdx#0 = mode_8bppchunkybmm::gfxbCpuBank#0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::str#0 = (void*)print_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::$4 = (byte*)memset::str#0
Constant memset::dst#0 = (byte*)memset::str#0
Constant memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [6] if(memset::num#0<=0) goto memset::@1
if() condition always true - replacing block destination [272] if(true) goto main::@2
Removing PHI-reference to removed block (menu::@6) in block menu::@return
if() condition always true - replacing block destination [309] if(true) goto menu::@7
if() condition always true - replacing block destination [410] if(true) goto mode_ctrl::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [81] bitmap_init::x#1 = ++ bitmap_init::x#2 to ++
Resolved ranged comparison value [83] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to 0
Resolved ranged next value [98] bitmap_init::y#1 = ++ bitmap_init::y#2 to ++
Resolved ranged comparison value [100] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5 to 0
Resolved ranged next value [111] bitmap_clear::x#1 = ++ bitmap_clear::x#2 to ++
Resolved ranged comparison value [113] if(bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2 to $c8
Resolved ranged next value [114] bitmap_clear::y#1 = ++ bitmap_clear::y#4 to ++
Resolved ranged comparison value [116] if(bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1 to $28
Resolved ranged next value [289] menu::i#1 = ++ menu::i#2 to ++
Resolved ranged comparison value [291] if(menu::i#1!=rangelast(0,$f)) goto menu::@1 to $10
Resolved ranged next value [497] mode_stdchar::i#1 = ++ mode_stdchar::i#2 to ++
Resolved ranged comparison value [499] if(mode_stdchar::i#1!=rangelast(0,$f)) goto mode_stdchar::@1 to $10
Resolved ranged next value [518] mode_stdchar::cx#1 = ++ mode_stdchar::cx#2 to ++
Resolved ranged comparison value [520] if(mode_stdchar::cx#1!=rangelast(0,$27)) goto mode_stdchar::@4 to $28
Resolved ranged next value [521] mode_stdchar::cy#1 = ++ mode_stdchar::cy#4 to ++
Resolved ranged comparison value [523] if(mode_stdchar::cy#1!=rangelast(0,$18)) goto mode_stdchar::@3 to $19
Resolved ranged next value [540] mode_ecmchar::i#1 = ++ mode_ecmchar::i#2 to ++
Resolved ranged comparison value [542] if(mode_ecmchar::i#1!=rangelast(0,$f)) goto mode_ecmchar::@1 to $10
Resolved ranged next value [564] mode_ecmchar::cx#1 = ++ mode_ecmchar::cx#2 to ++
Resolved ranged comparison value [566] if(mode_ecmchar::cx#1!=rangelast(0,$27)) goto mode_ecmchar::@4 to $28
Resolved ranged next value [567] mode_ecmchar::cy#1 = ++ mode_ecmchar::cy#4 to ++
Resolved ranged comparison value [569] if(mode_ecmchar::cy#1!=rangelast(0,$18)) goto mode_ecmchar::@3 to $19
Resolved ranged next value [586] mode_mcchar::i#1 = ++ mode_mcchar::i#2 to ++
Resolved ranged comparison value [588] if(mode_mcchar::i#1!=rangelast(0,$f)) goto mode_mcchar::@1 to $10
Resolved ranged next value [609] mode_mcchar::cx#1 = ++ mode_mcchar::cx#2 to ++
Resolved ranged comparison value [611] if(mode_mcchar::cx#1!=rangelast(0,$27)) goto mode_mcchar::@4 to $28
Resolved ranged next value [612] mode_mcchar::cy#1 = ++ mode_mcchar::cy#4 to ++
Resolved ranged comparison value [614] if(mode_mcchar::cy#1!=rangelast(0,$18)) goto mode_mcchar::@3 to $19
Resolved ranged next value [629] mode_stdbitmap::i#1 = ++ mode_stdbitmap::i#2 to ++
Resolved ranged comparison value [631] if(mode_stdbitmap::i#1!=rangelast(0,$f)) goto mode_stdbitmap::@1 to $10
Resolved ranged next value [646] mode_stdbitmap::cx#1 = ++ mode_stdbitmap::cx#2 to ++
Resolved ranged comparison value [648] if(mode_stdbitmap::cx#1!=rangelast(0,$27)) goto mode_stdbitmap::@4 to $28
Resolved ranged next value [649] mode_stdbitmap::cy#1 = ++ mode_stdbitmap::cy#4 to ++
Resolved ranged comparison value [651] if(mode_stdbitmap::cy#1!=rangelast(0,$18)) goto mode_stdbitmap::@3 to $19
Resolved ranged next value [683] mode_hicolstdchar::i#1 = ++ mode_hicolstdchar::i#2 to ++
Resolved ranged comparison value [685] if(mode_hicolstdchar::i#1!=rangelast(0,$f)) goto mode_hicolstdchar::@1 to $10
Resolved ranged next value [702] mode_hicolstdchar::cx#1 = ++ mode_hicolstdchar::cx#2 to ++
Resolved ranged comparison value [704] if(mode_hicolstdchar::cx#1!=rangelast(0,$27)) goto mode_hicolstdchar::@4 to $28
Resolved ranged next value [705] mode_hicolstdchar::cy#1 = ++ mode_hicolstdchar::cy#4 to ++
Resolved ranged comparison value [707] if(mode_hicolstdchar::cy#1!=rangelast(0,$18)) goto mode_hicolstdchar::@3 to $19
Resolved ranged next value [724] mode_hicolecmchar::i#1 = ++ mode_hicolecmchar::i#2 to ++
Resolved ranged comparison value [726] if(mode_hicolecmchar::i#1!=rangelast(0,$f)) goto mode_hicolecmchar::@1 to $10
Resolved ranged next value [746] mode_hicolecmchar::cx#1 = ++ mode_hicolecmchar::cx#2 to ++
Resolved ranged comparison value [748] if(mode_hicolecmchar::cx#1!=rangelast(0,$27)) goto mode_hicolecmchar::@4 to $28
Resolved ranged next value [749] mode_hicolecmchar::cy#1 = ++ mode_hicolecmchar::cy#4 to ++
Resolved ranged comparison value [751] if(mode_hicolecmchar::cy#1!=rangelast(0,$18)) goto mode_hicolecmchar::@3 to $19
Resolved ranged next value [768] mode_hicolmcchar::i#1 = ++ mode_hicolmcchar::i#2 to ++
Resolved ranged comparison value [770] if(mode_hicolmcchar::i#1!=rangelast(0,$f)) goto mode_hicolmcchar::@1 to $10
Resolved ranged next value [789] mode_hicolmcchar::cx#1 = ++ mode_hicolmcchar::cx#2 to ++
Resolved ranged comparison value [791] if(mode_hicolmcchar::cx#1!=rangelast(0,$27)) goto mode_hicolmcchar::@4 to $28
Resolved ranged next value [792] mode_hicolmcchar::cy#1 = ++ mode_hicolmcchar::cy#4 to ++
Resolved ranged comparison value [794] if(mode_hicolmcchar::cy#1!=rangelast(0,$18)) goto mode_hicolmcchar::@3 to $19
Resolved ranged next value [819] mode_twoplanebitmap::i#1 = ++ mode_twoplanebitmap::i#2 to ++
Resolved ranged comparison value [821] if(mode_twoplanebitmap::i#1!=rangelast(0,$f)) goto mode_twoplanebitmap::@1 to $10
Resolved ranged next value [836] mode_twoplanebitmap::cx#1 = ++ mode_twoplanebitmap::cx#2 to ++
Resolved ranged comparison value [838] if(mode_twoplanebitmap::cx#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@4 to $28
Resolved ranged next value [839] mode_twoplanebitmap::cy#1 = ++ mode_twoplanebitmap::cy#4 to ++
Resolved ranged comparison value [841] if(mode_twoplanebitmap::cy#1!=rangelast(0,$18)) goto mode_twoplanebitmap::@3 to $19
Resolved ranged next value [855] mode_twoplanebitmap::ax#1 = ++ mode_twoplanebitmap::ax#2 to ++
Resolved ranged comparison value [857] if(mode_twoplanebitmap::ax#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@8 to $28
Resolved ranged next value [858] mode_twoplanebitmap::ay#1 = ++ mode_twoplanebitmap::ay#5 to ++
Resolved ranged comparison value [860] if(mode_twoplanebitmap::ay#1!=rangelast(0,$c7)) goto mode_twoplanebitmap::@7 to $c8
Resolved ranged next value [868] mode_twoplanebitmap::bx#1 = ++ mode_twoplanebitmap::bx#2 to ++
Resolved ranged comparison value [870] if(mode_twoplanebitmap::bx#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@15 to $28
Resolved ranged next value [871] mode_twoplanebitmap::by#1 = ++ mode_twoplanebitmap::by#4 to ++
Resolved ranged comparison value [873] if(mode_twoplanebitmap::by#1!=rangelast(0,$c7)) goto mode_twoplanebitmap::@14 to $c8
Resolved ranged next value [898] mode_sixsfred::i#1 = ++ mode_sixsfred::i#2 to ++
Resolved ranged comparison value [900] if(mode_sixsfred::i#1!=rangelast(0,$f)) goto mode_sixsfred::@1 to $10
Resolved ranged next value [911] mode_sixsfred::cx#1 = ++ mode_sixsfred::cx#2 to ++
Resolved ranged comparison value [913] if(mode_sixsfred::cx#1!=rangelast(0,$27)) goto mode_sixsfred::@4 to $28
Resolved ranged next value [914] mode_sixsfred::cy#1 = ++ mode_sixsfred::cy#4 to ++
Resolved ranged comparison value [916] if(mode_sixsfred::cy#1!=rangelast(0,$18)) goto mode_sixsfred::@3 to $19
Resolved ranged next value [926] mode_sixsfred::ax#1 = ++ mode_sixsfred::ax#2 to ++
Resolved ranged comparison value [928] if(mode_sixsfred::ax#1!=rangelast(0,$27)) goto mode_sixsfred::@8 to $28
Resolved ranged next value [929] mode_sixsfred::ay#1 = ++ mode_sixsfred::ay#4 to ++
Resolved ranged comparison value [931] if(mode_sixsfred::ay#1!=rangelast(0,$c7)) goto mode_sixsfred::@7 to $c8
Resolved ranged next value [939] mode_sixsfred::bx#1 = ++ mode_sixsfred::bx#2 to ++
Resolved ranged comparison value [941] if(mode_sixsfred::bx#1!=rangelast(0,$27)) goto mode_sixsfred::@12 to $28
Resolved ranged next value [942] mode_sixsfred::by#1 = ++ mode_sixsfred::by#4 to ++
Resolved ranged comparison value [944] if(mode_sixsfred::by#1!=rangelast(0,$c7)) goto mode_sixsfred::@11 to $c8
Resolved ranged next value [969] mode_sixsfred2::i#1 = ++ mode_sixsfred2::i#2 to ++
Resolved ranged comparison value [971] if(mode_sixsfred2::i#1!=rangelast(0,$f)) goto mode_sixsfred2::@1 to $10
Resolved ranged next value [984] mode_sixsfred2::cx#1 = ++ mode_sixsfred2::cx#2 to ++
Resolved ranged comparison value [986] if(mode_sixsfred2::cx#1!=rangelast(0,$27)) goto mode_sixsfred2::@4 to $28
Resolved ranged next value [987] mode_sixsfred2::cy#1 = ++ mode_sixsfred2::cy#4 to ++
Resolved ranged comparison value [989] if(mode_sixsfred2::cy#1!=rangelast(0,$18)) goto mode_sixsfred2::@3 to $19
Resolved ranged next value [999] mode_sixsfred2::ax#1 = ++ mode_sixsfred2::ax#2 to ++
Resolved ranged comparison value [1001] if(mode_sixsfred2::ax#1!=rangelast(0,$27)) goto mode_sixsfred2::@8 to $28
Resolved ranged next value [1002] mode_sixsfred2::ay#1 = ++ mode_sixsfred2::ay#4 to ++
Resolved ranged comparison value [1004] if(mode_sixsfred2::ay#1!=rangelast(0,$c7)) goto mode_sixsfred2::@7 to $c8
Resolved ranged next value [1012] mode_sixsfred2::bx#1 = ++ mode_sixsfred2::bx#2 to ++
Resolved ranged comparison value [1014] if(mode_sixsfred2::bx#1!=rangelast(0,$27)) goto mode_sixsfred2::@12 to $28
Resolved ranged next value [1015] mode_sixsfred2::by#1 = ++ mode_sixsfred2::by#4 to ++
Resolved ranged comparison value [1017] if(mode_sixsfred2::by#1!=rangelast(0,$c7)) goto mode_sixsfred2::@11 to $c8
Resolved ranged next value [1041] mode_8bpppixelcell::i#1 = ++ mode_8bpppixelcell::i#2 to ++
Resolved ranged comparison value [1043] if(mode_8bpppixelcell::i#1!=rangelast(0,$f)) goto mode_8bpppixelcell::@1 to $10
Resolved ranged next value [1055] mode_8bpppixelcell::ax#1 = ++ mode_8bpppixelcell::ax#2 to ++
Resolved ranged comparison value [1057] if(mode_8bpppixelcell::ax#1!=rangelast(0,$27)) goto mode_8bpppixelcell::@4 to $28
Resolved ranged next value [1058] mode_8bpppixelcell::ay#1 = ++ mode_8bpppixelcell::ay#4 to ++
Resolved ranged comparison value [1060] if(mode_8bpppixelcell::ay#1!=rangelast(0,$18)) goto mode_8bpppixelcell::@3 to $19
Resolved ranged next value [1082] mode_8bpppixelcell::cp#1 = ++ mode_8bpppixelcell::cp#2 to ++
Resolved ranged comparison value [1084] if(mode_8bpppixelcell::cp#1!=rangelast(0,7)) goto mode_8bpppixelcell::@9 to 8
Resolved ranged next value [1085] mode_8bpppixelcell::cr#1 = ++ mode_8bpppixelcell::cr#6 to ++
Resolved ranged comparison value [1087] if(mode_8bpppixelcell::cr#1!=rangelast(0,7)) goto mode_8bpppixelcell::@8 to 8
Resolved ranged next value [1088] mode_8bpppixelcell::ch#1 = ++ mode_8bpppixelcell::ch#8 to ++
Resolved ranged comparison value [1090] if(mode_8bpppixelcell::ch#1!=rangelast(0,$ff)) goto mode_8bpppixelcell::@7 to 0
Resolved ranged next value [1109] mode_8bppchunkybmm::i#1 = ++ mode_8bppchunkybmm::i#2 to ++
Resolved ranged comparison value [1111] if(mode_8bppchunkybmm::i#1!=rangelast(0,$f)) goto mode_8bppchunkybmm::@1 to $10
Resolved ranged next value [1128] mode_8bppchunkybmm::x#1 = ++ mode_8bppchunkybmm::x#2 to ++
Resolved ranged comparison value [1130] if(mode_8bppchunkybmm::x#1!=rangelast(0,$13f)) goto mode_8bppchunkybmm::@4 to $140
Resolved ranged next value [1135] mode_8bppchunkybmm::y#1 = ++ mode_8bppchunkybmm::y#6 to ++
Resolved ranged comparison value [1137] if(mode_8bppchunkybmm::y#1!=rangelast(0,$c7)) goto mode_8bppchunkybmm::@3 to $c8
Simplifying constant evaluating to zero (byte)(dword)menu::CHARSET/$10000 in [277] *DTV_GRAPHICS_VIC_BANK = (byte)(dword)menu::CHARSET/$10000
Simplifying constant evaluating to zero >(word)DTV_COLOR_BANK_DEFAULT/$400 in [279] *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
Simplifying constant evaluating to zero (word)menu::SCREEN&$3fff/$40 in [285] *VIC_MEMORY = (byte)(word)menu::SCREEN&$3fff/$40|(word)menu::CHARSET&$3fff/$400
Simplifying constant evaluating to zero (byte)(dword)mode_stdchar::CHARSET/$10000 in [484] *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_stdchar::CHARSET/$10000
Simplifying constant evaluating to zero >(word)DTV_COLOR_BANK_DEFAULT/$400 in [486] *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
Simplifying constant evaluating to zero (word)mode_stdchar::SCREEN&$3fff/$40 in [493] *VIC_MEMORY = (byte)(word)mode_stdchar::SCREEN&$3fff/$40|(word)mode_stdchar::CHARSET&$3fff/$400
Simplifying constant evaluating to zero (byte)(dword)mode_ecmchar::CHARSET/$10000 in [527] *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_ecmchar::CHARSET/$10000
Simplifying constant evaluating to zero >(word)DTV_COLOR_BANK_DEFAULT/$400 in [529] *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
Simplifying constant evaluating to zero (word)mode_ecmchar::SCREEN&$3fff/$40 in [536] *VIC_MEMORY = (byte)(word)mode_ecmchar::SCREEN&$3fff/$40|(word)mode_ecmchar::CHARSET&$3fff/$400
Simplifying constant evaluating to zero (byte)(dword)mode_mcchar::CHARSET/$10000 in [573] *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_mcchar::CHARSET/$10000
Simplifying constant evaluating to zero >(word)DTV_COLOR_BANK_DEFAULT/$400 in [575] *DTV_COLOR_BANK_HI = >(word)DTV_COLOR_BANK_DEFAULT/$400
Simplifying constant evaluating to zero (word)mode_mcchar::SCREEN&$3fff/$40 in [582] *VIC_MEMORY = (byte)(word)mode_mcchar::SCREEN&$3fff/$40|(word)mode_mcchar::CHARSET&$3fff/$400
Simplifying constant evaluating to zero (byte)(dword)mode_stdbitmap::BITMAP/$10000 in [618] *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_stdbitmap::BITMAP/$10000
Simplifying constant evaluating to zero (word)mode_stdbitmap::SCREEN&$3fff/$40 in [625] *VIC_MEMORY = (byte)(word)mode_stdbitmap::SCREEN&$3fff/$40|(word)mode_stdbitmap::BITMAP&$3fff/$400
Simplifying constant evaluating to zero (byte)(dword)mode_hicolstdchar::CHARSET/$10000 in [670] *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_hicolstdchar::CHARSET/$10000
Simplifying constant evaluating to zero >(word)mode_hicolstdchar::COLORS/$400 in [672] *DTV_COLOR_BANK_HI = >(word)mode_hicolstdchar::COLORS/$400
Simplifying constant evaluating to zero (word)mode_hicolstdchar::SCREEN&$3fff/$40 in [679] *VIC_MEMORY = (byte)(word)mode_hicolstdchar::SCREEN&$3fff/$40|(word)mode_hicolstdchar::CHARSET&$3fff/$400
Simplifying constant evaluating to zero (byte)(dword)mode_hicolecmchar::CHARSET/$10000 in [711] *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_hicolecmchar::CHARSET/$10000
Simplifying constant evaluating to zero >(word)mode_hicolecmchar::COLORS/$400 in [713] *DTV_COLOR_BANK_HI = >(word)mode_hicolecmchar::COLORS/$400
Simplifying constant evaluating to zero (word)mode_hicolecmchar::SCREEN&$3fff/$40 in [720] *VIC_MEMORY = (byte)(word)mode_hicolecmchar::SCREEN&$3fff/$40|(word)mode_hicolecmchar::CHARSET&$3fff/$400
Simplifying constant evaluating to zero (byte)(dword)mode_hicolmcchar::CHARSET/$10000 in [755] *DTV_GRAPHICS_VIC_BANK = (byte)(dword)mode_hicolmcchar::CHARSET/$10000
Simplifying constant evaluating to zero >(word)mode_hicolmcchar::COLORS/$400 in [757] *DTV_COLOR_BANK_HI = >(word)mode_hicolmcchar::COLORS/$400
Simplifying constant evaluating to zero (word)mode_hicolmcchar::SCREEN&$3fff/$40 in [764] *VIC_MEMORY = (byte)(word)mode_hicolmcchar::SCREEN&$3fff/$40|(word)mode_hicolmcchar::CHARSET&$3fff/$400
Simplifying constant evaluating to zero <mode_twoplanebitmap::PLANEA in [802] *DTV_PLANEA_START_LO = <mode_twoplanebitmap::PLANEA
Simplifying constant evaluating to zero <mode_twoplanebitmap::PLANEB in [808] *DTV_PLANEB_START_LO = <mode_twoplanebitmap::PLANEB
Simplifying constant evaluating to zero >mode_twoplanebitmap::COLORS/$400 in [815] *DTV_COLOR_BANK_HI = >mode_twoplanebitmap::COLORS/$400
Simplifying constant evaluating to zero <mode_sixsfred::PLANEA in [881] *DTV_PLANEA_START_LO = <mode_sixsfred::PLANEA
Simplifying constant evaluating to zero <mode_sixsfred::PLANEB in [887] *DTV_PLANEB_START_LO = <mode_sixsfred::PLANEB
Simplifying constant evaluating to zero >mode_sixsfred::COLORS/$400 in [894] *DTV_COLOR_BANK_HI = >mode_sixsfred::COLORS/$400
Simplifying constant evaluating to zero <mode_sixsfred2::PLANEA in [952] *DTV_PLANEA_START_LO = <mode_sixsfred2::PLANEA
Simplifying constant evaluating to zero <mode_sixsfred2::PLANEB in [958] *DTV_PLANEB_START_LO = <mode_sixsfred2::PLANEB
Simplifying constant evaluating to zero >mode_sixsfred2::COLORS/$400 in [965] *DTV_COLOR_BANK_HI = >mode_sixsfred2::COLORS/$400
Simplifying constant evaluating to zero <mode_8bpppixelcell::PLANEA in [1025] *DTV_PLANEA_START_LO = <mode_8bpppixelcell::PLANEA
Simplifying constant evaluating to zero <mode_8bpppixelcell::PLANEB in [1031] *DTV_PLANEB_START_LO = <mode_8bpppixelcell::PLANEB
Simplifying constant evaluating to zero <<mode_8bppchunkybmm::PLANEB in [1099] *DTV_PLANEB_START_LO = <<mode_8bppchunkybmm::PLANEB
Simplifying constant evaluating to zero ><mode_8bppchunkybmm::PLANEB in [1100] *DTV_PLANEB_START_MI = ><mode_8bppchunkybmm::PLANEB
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (byte*)CIA1 in [56] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0]
Simplifying expression containing zero bitmap_plot_xhi in [103] bitmap_clear::$3 = bitmap_plot_xhi[0] w= bitmap_plot_xlo[0]
Simplifying expression containing zero bitmap_plot_xlo in [103] bitmap_clear::$3 = *bitmap_plot_xhi w= bitmap_plot_xlo[0]
Simplifying expression containing zero (byte*)CIA2 in [282] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)menu::CHARSET/$4000
Simplifying expression containing zero (word)menu::CHARSET&$3fff/$400 in [285] *VIC_MEMORY = (byte)0|(word)menu::CHARSET&$3fff/$400
Simplifying expression containing zero (byte*)CIA2 in [490] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_stdchar::CHARSET/$4000
Simplifying expression containing zero (word)mode_stdchar::CHARSET&$3fff/$400 in [493] *VIC_MEMORY = (byte)0|(word)mode_stdchar::CHARSET&$3fff/$400
Simplifying expression containing zero (byte*)CIA2 in [533] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_ecmchar::CHARSET/$4000
Simplifying expression containing zero (word)mode_ecmchar::CHARSET&$3fff/$400 in [536] *VIC_MEMORY = (byte)0|(word)mode_ecmchar::CHARSET&$3fff/$400
Simplifying expression containing zero (byte*)CIA2 in [579] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_mcchar::CHARSET/$4000
Simplifying expression containing zero (word)mode_mcchar::CHARSET&$3fff/$400 in [582] *VIC_MEMORY = (byte)0|(word)mode_mcchar::CHARSET&$3fff/$400
Simplifying expression containing zero (byte*)CIA2 in [622] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_stdbitmap::BITMAP/$4000
Simplifying expression containing zero (word)mode_stdbitmap::BITMAP&$3fff/$400 in [625] *VIC_MEMORY = (byte)0|(word)mode_stdbitmap::BITMAP&$3fff/$400
Simplifying expression containing zero (byte*)CIA2 in [676] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_hicolstdchar::CHARSET/$4000
Simplifying expression containing zero (word)mode_hicolstdchar::CHARSET&$3fff/$400 in [679] *VIC_MEMORY = (byte)0|(word)mode_hicolstdchar::CHARSET&$3fff/$400
Simplifying expression containing zero (byte*)CIA2 in [717] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_hicolecmchar::CHARSET/$4000
Simplifying expression containing zero (word)mode_hicolecmchar::CHARSET&$3fff/$400 in [720] *VIC_MEMORY = (byte)0|(word)mode_hicolecmchar::CHARSET&$3fff/$400
Simplifying expression containing zero (byte*)CIA2 in [761] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = 3^(byte)(word)mode_hicolmcchar::CHARSET/$4000
Simplifying expression containing zero (word)mode_hicolmcchar::CHARSET&$3fff/$400 in [764] *VIC_MEMORY = (byte)0|(word)mode_hicolmcchar::CHARSET&$3fff/$400
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable - keeping the phi block print_screen#13
Eliminating unused variable - keeping the phi block print_line_cursor#25
Eliminating unused variable - keeping the phi block print_char_cursor#12
Eliminating unused variable - keeping the phi block dtv_control#1
Eliminating unused constant memset::return#2
Eliminating unused constant bitmap_line::xd#0
Eliminating unused constant bitmap_line::yd#0
Eliminating unused constant OFFSET_STRUCT_MOS6526_CIA_PORT_A
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block dtv_control#3
Eliminating unused constant print_screen#34
Eliminating unused constant dtv_control#131
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [54] if(bitmap_init::x#1!=0) goto bitmap_init::@1
Adding number conversion cast (unumber) 0 in [66] if(bitmap_init::y#1!=0) goto bitmap_init::@5
Adding number conversion cast (unumber) $c8 in [76] if(bitmap_clear::x#1!=$c8) goto bitmap_clear::@2
Adding number conversion cast (unumber) $28 in [78] if(bitmap_clear::y#1!=$28) goto bitmap_clear::@1
Adding number conversion cast (unumber) $10 in [228] if(menu::i#1!=$10) goto menu::@1
Adding number conversion cast (unumber) $10 in [366] if(mode_stdchar::i#1!=$10) goto mode_stdchar::@1
Adding number conversion cast (unumber) $28 in [382] if(mode_stdchar::cx#1!=$28) goto mode_stdchar::@4
Adding number conversion cast (unumber) $19 in [384] if(mode_stdchar::cy#1!=$19) goto mode_stdchar::@3
Adding number conversion cast (unumber) $10 in [399] if(mode_ecmchar::i#1!=$10) goto mode_ecmchar::@1
Adding number conversion cast (unumber) $28 in [418] if(mode_ecmchar::cx#1!=$28) goto mode_ecmchar::@4
Adding number conversion cast (unumber) $19 in [420] if(mode_ecmchar::cy#1!=$19) goto mode_ecmchar::@3
Adding number conversion cast (unumber) $10 in [435] if(mode_mcchar::i#1!=$10) goto mode_mcchar::@1
Adding number conversion cast (unumber) $28 in [453] if(mode_mcchar::cx#1!=$28) goto mode_mcchar::@4
Adding number conversion cast (unumber) $19 in [455] if(mode_mcchar::cy#1!=$19) goto mode_mcchar::@3
Adding number conversion cast (unumber) $10 in [468] if(mode_stdbitmap::i#1!=$10) goto mode_stdbitmap::@1
Adding number conversion cast (unumber) $28 in [481] if(mode_stdbitmap::cx#1!=$28) goto mode_stdbitmap::@4
Adding number conversion cast (unumber) $19 in [483] if(mode_stdbitmap::cy#1!=$19) goto mode_stdbitmap::@3
Adding number conversion cast (unumber) $10 in [510] if(mode_hicolstdchar::i#1!=$10) goto mode_hicolstdchar::@1
Adding number conversion cast (unumber) $28 in [524] if(mode_hicolstdchar::cx#1!=$28) goto mode_hicolstdchar::@4
Adding number conversion cast (unumber) $19 in [526] if(mode_hicolstdchar::cy#1!=$19) goto mode_hicolstdchar::@3
Adding number conversion cast (unumber) $10 in [541] if(mode_hicolecmchar::i#1!=$10) goto mode_hicolecmchar::@1
Adding number conversion cast (unumber) $28 in [558] if(mode_hicolecmchar::cx#1!=$28) goto mode_hicolecmchar::@4
Adding number conversion cast (unumber) $19 in [560] if(mode_hicolecmchar::cy#1!=$19) goto mode_hicolecmchar::@3
Adding number conversion cast (unumber) $10 in [575] if(mode_hicolmcchar::i#1!=$10) goto mode_hicolmcchar::@1
Adding number conversion cast (unumber) $28 in [591] if(mode_hicolmcchar::cx#1!=$28) goto mode_hicolmcchar::@4
Adding number conversion cast (unumber) $19 in [593] if(mode_hicolmcchar::cy#1!=$19) goto mode_hicolmcchar::@3
Adding number conversion cast (unumber) $10 in [616] if(mode_twoplanebitmap::i#1!=$10) goto mode_twoplanebitmap::@1
Adding number conversion cast (unumber) $28 in [629] if(mode_twoplanebitmap::cx#1!=$28) goto mode_twoplanebitmap::@4
Adding number conversion cast (unumber) $19 in [631] if(mode_twoplanebitmap::cy#1!=$19) goto mode_twoplanebitmap::@3
Adding number conversion cast (unumber) $28 in [642] if(mode_twoplanebitmap::ax#1!=$28) goto mode_twoplanebitmap::@8
Adding number conversion cast (unumber) $c8 in [644] if(mode_twoplanebitmap::ay#1!=$c8) goto mode_twoplanebitmap::@7
Adding number conversion cast (unumber) $28 in [650] if(mode_twoplanebitmap::bx#1!=$28) goto mode_twoplanebitmap::@15
Adding number conversion cast (unumber) $c8 in [652] if(mode_twoplanebitmap::by#1!=$c8) goto mode_twoplanebitmap::@14
Adding number conversion cast (unumber) $10 in [675] if(mode_sixsfred::i#1!=$10) goto mode_sixsfred::@1
Adding number conversion cast (unumber) $28 in [684] if(mode_sixsfred::cx#1!=$28) goto mode_sixsfred::@4
Adding number conversion cast (unumber) $19 in [686] if(mode_sixsfred::cy#1!=$19) goto mode_sixsfred::@3
Adding number conversion cast (unumber) $28 in [694] if(mode_sixsfred::ax#1!=$28) goto mode_sixsfred::@8
Adding number conversion cast (unumber) $c8 in [696] if(mode_sixsfred::ay#1!=$c8) goto mode_sixsfred::@7
Adding number conversion cast (unumber) $28 in [702] if(mode_sixsfred::bx#1!=$28) goto mode_sixsfred::@12
Adding number conversion cast (unumber) $c8 in [704] if(mode_sixsfred::by#1!=$c8) goto mode_sixsfred::@11
Adding number conversion cast (unumber) $10 in [727] if(mode_sixsfred2::i#1!=$10) goto mode_sixsfred2::@1
Adding number conversion cast (unumber) $28 in [738] if(mode_sixsfred2::cx#1!=$28) goto mode_sixsfred2::@4
Adding number conversion cast (unumber) $19 in [740] if(mode_sixsfred2::cy#1!=$19) goto mode_sixsfred2::@3
Adding number conversion cast (unumber) $28 in [748] if(mode_sixsfred2::ax#1!=$28) goto mode_sixsfred2::@8
Adding number conversion cast (unumber) $c8 in [750] if(mode_sixsfred2::ay#1!=$c8) goto mode_sixsfred2::@7
Adding number conversion cast (unumber) $28 in [756] if(mode_sixsfred2::bx#1!=$28) goto mode_sixsfred2::@12
Adding number conversion cast (unumber) $c8 in [758] if(mode_sixsfred2::by#1!=$c8) goto mode_sixsfred2::@11
Adding number conversion cast (unumber) $10 in [780] if(mode_8bpppixelcell::i#1!=$10) goto mode_8bpppixelcell::@1
Adding number conversion cast (unumber) $28 in [790] if(mode_8bpppixelcell::ax#1!=$28) goto mode_8bpppixelcell::@4
Adding number conversion cast (unumber) $19 in [792] if(mode_8bpppixelcell::ay#1!=$19) goto mode_8bpppixelcell::@3
Adding number conversion cast (unumber) 8 in [807] if(mode_8bpppixelcell::cp#1!=8) goto mode_8bpppixelcell::@9
Adding number conversion cast (unumber) 8 in [809] if(mode_8bpppixelcell::cr#1!=8) goto mode_8bpppixelcell::@8
Adding number conversion cast (unumber) 0 in [811] if(mode_8bpppixelcell::ch#1!=0) goto mode_8bpppixelcell::@7
Adding number conversion cast (unumber) $10 in [828] if(mode_8bppchunkybmm::i#1!=$10) goto mode_8bppchunkybmm::@1
Adding number conversion cast (unumber) $140 in [840] if(mode_8bppchunkybmm::x#1!=$140) goto mode_8bppchunkybmm::@4
Adding number conversion cast (unumber) $c8 in [845] if(mode_8bppchunkybmm::y#1!=$c8) goto mode_8bppchunkybmm::@3
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [70] bitmap_clear::bitmap#0 = (byte*)bitmap_clear::$3
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $140
Simplifying constant integer cast $c8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $c8
Finalized unsigned number type $28
Finalized unsigned number type $10
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type $28
Finalized unsigned number type $c8
Finalized unsigned number type $28
Finalized unsigned number type $c8
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type $28
Finalized unsigned number type $c8
Finalized unsigned number type $28
Finalized unsigned number type $c8
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type $28
Finalized unsigned number type $c8
Finalized unsigned number type $28
Finalized unsigned number type $c8
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type 0
Finalized unsigned number type $10
Finalized unsigned number type $140
Finalized unsigned number type $c8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias bitmap_init::$10 = bitmap_init::$6 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [4] memset::end#0 = memset::$4 + memset::num#0
Constant right-side identified [47] bitmap_init::$1 = > bitmap_init::bitmap#0
Constant right-side identified [827] mode_8bppchunkybmm::gfxbCpuBank#1 = ++ mode_8bppchunkybmm::gfxbCpuBank#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memset::end#0 = memset::$4+memset::num#0
Constant bitmap_init::$1 = >bitmap_init::bitmap#0
Constant mode_8bppchunkybmm::gfxbCpuBank#1 = ++mode_8bppchunkybmm::gfxbCpuBank#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [67] bitmap_clear::bitmap#0 = (byte*)bitmap_clear::$3 keeping bitmap_clear::bitmap#0
Inlining Noop Cast [81] bitmap_plot::plotter#0 = (byte*)bitmap_plot::$0 keeping bitmap_plot::plotter#0
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [371] mode_stdchar::$5 = mode_stdchar::$4 * $10
Rewriting multiplication to use shift [407] mode_ecmchar::$5 = mode_ecmchar::$4 * $10
Rewriting multiplication to use shift [442] mode_mcchar::$5 = mode_mcchar::$4 * $10
Rewriting multiplication to use shift [471] mode_stdbitmap::$7 = mode_stdbitmap::col#0 * $10
Rewriting multiplication to use shift [511] mode_hicolstdchar::$3 = mode_hicolstdchar::$2 * $10
Rewriting multiplication to use shift [545] mode_hicolecmchar::$3 = mode_hicolecmchar::$2 * $10
Rewriting multiplication to use shift [578] mode_hicolmcchar::$3 = mode_hicolmcchar::$2 * $10
Rewriting multiplication to use shift [618] mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2 * $10
Rewriting division to use shift [684] mode_sixsfred::$6 = mode_sixsfred::ay#4 / 2
Rewriting multiplication to use shift [727] mode_sixsfred2::$3 = mode_sixsfred2::$2 * $10
Rewriting division to use shift [738] mode_sixsfred2::$8 = mode_sixsfred2::ay#4 / 2
Rewriting multiplication to use shift [779] mode_8bpppixelcell::$3 = mode_8bpppixelcell::$2 * $10
Rewriting multiplication to use shift [799] mode_8bpppixelcell::bits#1 = mode_8bpppixelcell::bits#2 * 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#2
Inlining constant with var siblings dtvSetCpuBankSegment1::cpuBankIdx#0
Inlining constant with var siblings memset::dst#0
Inlining constant with var siblings print_str_lines::str#1
Inlining constant with var siblings keyboard_key_pressed::key#0
Inlining constant with var siblings keyboard_key_pressed::key#1
Inlining constant with var siblings keyboard_key_pressed::key#2
Inlining constant with var siblings keyboard_key_pressed::key#3
Inlining constant with var siblings keyboard_key_pressed::key#4
Inlining constant with var siblings keyboard_key_pressed::key#5
Inlining constant with var siblings keyboard_key_pressed::key#6
Inlining constant with var siblings keyboard_key_pressed::key#7
Inlining constant with var siblings keyboard_key_pressed::key#8
Inlining constant with var siblings keyboard_key_pressed::key#9
Inlining constant with var siblings keyboard_key_pressed::key#10
Inlining constant with var siblings keyboard_key_pressed::key#11
Inlining constant with var siblings keyboard_key_pressed::key#12
Inlining constant with var siblings keyboard_key_pressed::key#13
Inlining constant with var siblings keyboard_key_pressed::key#14
Inlining constant with var siblings keyboard_key_pressed::key#15
Inlining constant with var siblings keyboard_key_pressed::key#16
Inlining constant with var siblings keyboard_key_pressed::key#17
Inlining constant with var siblings keyboard_key_pressed::key#18
Inlining constant with var siblings keyboard_key_pressed::key#19
Inlining constant with var siblings bitmap_init::bits#0
Inlining constant with var siblings bitmap_init::x#0
Inlining constant with var siblings bitmap_init::bits#2
Inlining constant with var siblings bitmap_init::yoffs#0
Inlining constant with var siblings bitmap_init::y#0
Inlining constant with var siblings bitmap_clear::y#0
Inlining constant with var siblings bitmap_clear::x#0
Inlining constant with var siblings menu::i#0
Inlining constant with var siblings menu::c#0
Inlining constant with var siblings mode_ctrl::ctrl#7
Inlining constant with var siblings mode_stdchar::i#0
Inlining constant with var siblings mode_stdchar::col#0
Inlining constant with var siblings mode_stdchar::ch#0
Inlining constant with var siblings mode_stdchar::cy#0
Inlining constant with var siblings mode_stdchar::cx#0
Inlining constant with var siblings mode_ecmchar::i#0
Inlining constant with var siblings mode_ecmchar::col#0
Inlining constant with var siblings mode_ecmchar::ch#0
Inlining constant with var siblings mode_ecmchar::cy#0
Inlining constant with var siblings mode_ecmchar::cx#0
Inlining constant with var siblings mode_mcchar::i#0
Inlining constant with var siblings mode_mcchar::col#0
Inlining constant with var siblings mode_mcchar::ch#0
Inlining constant with var siblings mode_mcchar::cy#0
Inlining constant with var siblings mode_mcchar::cx#0
Inlining constant with var siblings mode_stdbitmap::i#0
Inlining constant with var siblings mode_stdbitmap::ch#0
Inlining constant with var siblings mode_stdbitmap::cy#0
Inlining constant with var siblings mode_stdbitmap::cx#0
Inlining constant with var siblings mode_stdbitmap::l#0
Inlining constant with var siblings mode_hicolstdchar::i#0
Inlining constant with var siblings mode_hicolstdchar::col#0
Inlining constant with var siblings mode_hicolstdchar::ch#0
Inlining constant with var siblings mode_hicolstdchar::cy#0
Inlining constant with var siblings mode_hicolstdchar::cx#0
Inlining constant with var siblings mode_hicolecmchar::i#0
Inlining constant with var siblings mode_hicolecmchar::col#0
Inlining constant with var siblings mode_hicolecmchar::ch#0
Inlining constant with var siblings mode_hicolecmchar::cy#0
Inlining constant with var siblings mode_hicolecmchar::cx#0
Inlining constant with var siblings mode_hicolmcchar::i#0
Inlining constant with var siblings mode_hicolmcchar::col#0
Inlining constant with var siblings mode_hicolmcchar::ch#0
Inlining constant with var siblings mode_hicolmcchar::cy#0
Inlining constant with var siblings mode_hicolmcchar::cx#0
Inlining constant with var siblings mode_twoplanebitmap::i#0
Inlining constant with var siblings mode_twoplanebitmap::col#0
Inlining constant with var siblings mode_twoplanebitmap::cy#0
Inlining constant with var siblings mode_twoplanebitmap::cx#0
Inlining constant with var siblings mode_twoplanebitmap::gfxa#0
Inlining constant with var siblings mode_twoplanebitmap::ay#0
Inlining constant with var siblings mode_twoplanebitmap::ax#0
Inlining constant with var siblings mode_twoplanebitmap::gfxb#0
Inlining constant with var siblings mode_twoplanebitmap::by#0
Inlining constant with var siblings mode_twoplanebitmap::bx#0
Inlining constant with var siblings mode_sixsfred::i#0
Inlining constant with var siblings mode_sixsfred::col#0
Inlining constant with var siblings mode_sixsfred::cy#0
Inlining constant with var siblings mode_sixsfred::cx#0
Inlining constant with var siblings mode_sixsfred::gfxa#0
Inlining constant with var siblings mode_sixsfred::ay#0
Inlining constant with var siblings mode_sixsfred::ax#0
Inlining constant with var siblings mode_sixsfred::gfxb#0
Inlining constant with var siblings mode_sixsfred::by#0
Inlining constant with var siblings mode_sixsfred::bx#0
Inlining constant with var siblings mode_sixsfred2::i#0
Inlining constant with var siblings mode_sixsfred2::col#0
Inlining constant with var siblings mode_sixsfred2::cy#0
Inlining constant with var siblings mode_sixsfred2::cx#0
Inlining constant with var siblings mode_sixsfred2::gfxa#0
Inlining constant with var siblings mode_sixsfred2::ay#0
Inlining constant with var siblings mode_sixsfred2::ax#0
Inlining constant with var siblings mode_sixsfred2::gfxb#0
Inlining constant with var siblings mode_sixsfred2::by#0
Inlining constant with var siblings mode_sixsfred2::bx#0
Inlining constant with var siblings mode_8bpppixelcell::i#0
Inlining constant with var siblings mode_8bpppixelcell::gfxa#0
Inlining constant with var siblings mode_8bpppixelcell::ay#0
Inlining constant with var siblings mode_8bpppixelcell::ax#0
Inlining constant with var siblings mode_8bpppixelcell::gfxb#0
Inlining constant with var siblings mode_8bpppixelcell::chargen#0
Inlining constant with var siblings mode_8bpppixelcell::col#0
Inlining constant with var siblings mode_8bpppixelcell::ch#0
Inlining constant with var siblings mode_8bpppixelcell::cr#0
Inlining constant with var siblings mode_8bpppixelcell::cp#0
Inlining constant with var siblings mode_8bpppixelcell::c#0
Inlining constant with var siblings mode_8bppchunkybmm::i#0
Inlining constant with var siblings mode_8bppchunkybmm::gfxbCpuBank#0
Inlining constant with var siblings mode_8bppchunkybmm::gfxb#0
Inlining constant with var siblings mode_8bppchunkybmm::y#0
Inlining constant with var siblings mode_8bppchunkybmm::x#0
Inlining constant with var siblings mode_8bppchunkybmm::gfxb#2
Inlining constant with var siblings mode_8bppchunkybmm::gfxbCpuBank#1
Inlining constant with var siblings dtv_control#17
Inlining constant with var siblings dtv_control#20
Inlining constant with var siblings dtv_control#23
Inlining constant with var siblings dtv_control#26
Inlining constant with var siblings dtv_control#29
Inlining constant with var siblings dtv_control#32
Inlining constant with var siblings dtv_control#35
Inlining constant with var siblings dtv_control#38
Inlining constant with var siblings dtv_control#41
Inlining constant with var siblings dtv_control#44
Inlining constant with var siblings dtv_control#47
Inlining constant with var siblings dtv_control#50
Constant inlined mode_hicolecmchar::cx#0 = 0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#0 = (byte)mode_8bppchunkybmm::PLANEB/$4000
Constant inlined mode_sixsfred2::gfxb#0 = mode_sixsfred2::PLANEB
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte)$4000/$4000
Constant inlined mode_twoplanebitmap::ay#0 = 0
Constant inlined mode_mcchar::i#0 = 0
Constant inlined mode_sixsfred::bx#0 = 0
Constant inlined mode_mcchar::cx#0 = 0
Constant inlined menu::c#0 = COLS
Constant inlined mode_stdbitmap::ch#0 = mode_stdbitmap::SCREEN
Constant inlined mode_twoplanebitmap::col#0 = mode_twoplanebitmap::COLORS
Constant inlined mode_twoplanebitmap::gfxb#0 = mode_twoplanebitmap::PLANEB
Constant inlined mode_hicolecmchar::i#0 = 0
Constant inlined mode_ecmchar::i#0 = 0
Constant inlined mode_ecmchar::ch#0 = mode_ecmchar::SCREEN
Constant inlined mode_stdbitmap::i#0 = 0
Constant inlined mode_stdbitmap::cx#0 = 0
Constant inlined keyboard_key_pressed::key#0 = KEY_1
Constant inlined keyboard_key_pressed::key#13 = KEY_L
Constant inlined keyboard_key_pressed::key#1 = KEY_2
Constant inlined keyboard_key_pressed::key#14 = KEY_H
Constant inlined bitmap_init::yoffs#0 = (byte*) 0
Constant inlined keyboard_key_pressed::key#15 = KEY_O
Constant inlined keyboard_key_pressed::key#16 = KEY_B
Constant inlined mode_hicolmcchar::cy#0 = 0
Constant inlined keyboard_key_pressed::key#4 = KEY_6
Constant inlined keyboard_key_pressed::key#17 = KEY_U
Constant inlined keyboard_key_pressed::key#5 = KEY_7
Constant inlined keyboard_key_pressed::key#18 = KEY_C
Constant inlined keyboard_key_pressed::key#2 = KEY_3
Constant inlined keyboard_key_pressed::key#19 = KEY_0
Constant inlined keyboard_key_pressed::key#3 = KEY_4
Constant inlined mode_sixsfred::cy#0 = 0
Constant inlined keyboard_key_pressed::key#8 = KEY_B
Constant inlined keyboard_key_pressed::key#9 = KEY_C
Constant inlined keyboard_key_pressed::key#6 = KEY_8
Constant inlined keyboard_key_pressed::key#7 = KEY_A
Constant inlined mode_ecmchar::cx#0 = 0
Constant inlined mode_hicolecmchar::ch#0 = mode_hicolecmchar::SCREEN
Constant inlined print_str_lines::str#1 = MENU_TEXT
Constant inlined mode_8bpppixelcell::chargen#0 = mode_8bpppixelcell::CHARGEN
Constant inlined mode_twoplanebitmap::ax#0 = 0
Constant inlined mode_sixsfred2::ax#0 = 0
Constant inlined mode_mcchar::ch#0 = mode_mcchar::SCREEN
Constant inlined mode_8bpppixelcell::gfxb#0 = mode_8bpppixelcell::PLANEB
Constant inlined keyboard_key_pressed::key#10 = KEY_D
Constant inlined keyboard_key_pressed::key#11 = KEY_E
Constant inlined keyboard_key_pressed::key#12 = KEY_SPACE
Constant inlined mode_sixsfred::by#0 = 0
Constant inlined mode_8bpppixelcell::i#0 = 0
Constant inlined mode_mcchar::cy#0 = 0
Constant inlined mode_twoplanebitmap::by#0 = 0
Constant inlined mode_8bpppixelcell::cr#0 = 0
Constant inlined mode_stdbitmap::cy#0 = 0
Constant inlined mode_stdbitmap::l#0 = 0
Constant inlined mode_hicolmcchar::col#0 = mode_hicolmcchar::COLORS
Constant inlined mode_ecmchar::cy#0 = 0
Constant inlined mode_8bpppixelcell::ax#0 = 0
Constant inlined mode_sixsfred::gfxa#0 = mode_sixsfred::PLANEA
Constant inlined bitmap_clear::y#0 = 0
Constant inlined mode_hicolstdchar::cy#0 = 0
Constant inlined bitmap_init::y#0 = 0
Constant inlined mode_sixsfred2::cx#0 = 0
Constant inlined mode_stdchar::col#0 = mode_stdchar::COLORS
Constant inlined mode_sixsfred2::ay#0 = 0
Constant inlined dtv_control#32 = DTV_HIGHCOLOR
Constant inlined menu::i#0 = 0
Constant inlined print_screen#0 = menu::SCREEN
Constant inlined mode_hicolstdchar::col#0 = mode_hicolstdchar::COLORS
Constant inlined mode_stdchar::i#0 = 0
Constant inlined mode_twoplanebitmap::bx#0 = 0
Constant inlined dtv_control#29 = DTV_HIGHCOLOR
Constant inlined mode_sixsfred2::bx#0 = 0
Constant inlined dtv_control#26 = 0
Constant inlined mode_sixsfred2::i#0 = 0
Constant inlined dtv_control#23 = 0
Constant inlined mode_sixsfred::ax#0 = 0
Constant inlined dtv_control#20 = 0
Constant inlined mode_8bppchunkybmm::y#0 = 0
Constant inlined mode_8bpppixelcell::ay#0 = 0
Constant inlined mode_sixsfred::i#0 = 0
Constant inlined bitmap_clear::x#0 = 0
Constant inlined mode_hicolstdchar::cx#0 = 0
Constant inlined mode_sixsfred::gfxb#0 = mode_sixsfred::PLANEB
Constant inlined mode_8bppchunkybmm::i#0 = 0
Constant inlined mode_hicolstdchar::ch#0 = mode_hicolstdchar::SCREEN
Constant inlined mode_sixsfred2::cy#0 = 0
Constant inlined mode_twoplanebitmap::cy#0 = 0
Constant inlined memset::dst#0 = (byte*)memset::str#0
Constant inlined dtv_control#17 = 0
Constant inlined bitmap_init::x#0 = 0
Constant inlined bitmap_init::bitmap#0 = mode_stdbitmap::BITMAP
Constant inlined mode_hicolecmchar::cy#0 = 0
Constant inlined mode_8bppchunkybmm::gfxb#2 = (byte*) 16384
Constant inlined mode_hicolmcchar::i#0 = 0
Constant inlined dtv_control#50 = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
Constant inlined bitmap_init::bits#0 = $80
Constant inlined mode_stdchar::cx#0 = 0
Constant inlined mode_8bppchunkybmm::gfxbCpuBank#1 = ++(byte)mode_8bppchunkybmm::PLANEB/$4000
Constant inlined bitmap_init::bits#2 = $80
Constant inlined mode_8bppchunkybmm::gfxbCpuBank#0 = (byte)mode_8bppchunkybmm::PLANEB/$4000
Constant inlined mode_8bppchunkybmm::gfxb#0 = (byte*) 16384
Constant inlined mode_twoplanebitmap::gfxa#0 = mode_twoplanebitmap::PLANEA
Constant inlined memset::$4 = (byte*)memset::str#0
Constant inlined print_set_screen::screen#0 = menu::SCREEN
Constant inlined mode_8bpppixelcell::ch#0 = 0
Constant inlined mode_8bpppixelcell::c#0 = 0
Constant inlined mode_hicolecmchar::col#0 = mode_hicolecmchar::COLORS
Constant inlined mode_hicolstdchar::i#0 = 0
Constant inlined mode_sixsfred2::by#0 = 0
Constant inlined mode_twoplanebitmap::i#0 = 0
Constant inlined mode_stdchar::ch#0 = mode_stdchar::SCREEN
Constant inlined mode_sixsfred2::gfxa#0 = mode_sixsfred2::PLANEA
Constant inlined dtv_control#47 = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
Constant inlined mode_8bpppixelcell::cp#0 = 0
Constant inlined dtv_control#44 = DTV_LINEAR
Constant inlined mode_hicolmcchar::cx#0 = 0
Constant inlined mode_8bppchunkybmm::x#0 = 0
Constant inlined mode_sixsfred::ay#0 = 0
Constant inlined mode_ctrl::ctrl#7 = 0
Constant inlined dtv_control#41 = DTV_HIGHCOLOR|DTV_LINEAR
Constant inlined mode_sixsfred::cx#0 = 0
Constant inlined mode_8bpppixelcell::col#0 = 0
Constant inlined mode_sixsfred::col#0 = mode_sixsfred::COLORS
Constant inlined mode_ecmchar::col#0 = mode_ecmchar::COLORS
Constant inlined mode_hicolmcchar::ch#0 = mode_hicolmcchar::SCREEN
Constant inlined mode_sixsfred2::col#0 = mode_sixsfred2::COLORS
Constant inlined mode_8bpppixelcell::gfxa#0 = mode_8bpppixelcell::PLANEA
Constant inlined mode_stdchar::cy#0 = 0
Constant inlined bitmap_init::$1 = >mode_stdbitmap::BITMAP
Constant inlined mode_mcchar::col#0 = mode_mcchar::COLORS
Constant inlined mode_twoplanebitmap::cx#0 = 0
Constant inlined dtv_control#38 = DTV_HIGHCOLOR|DTV_LINEAR
Constant inlined dtv_control#35 = DTV_HIGHCOLOR
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in assignment (mode_stdbitmap::lines_x+1)[mode_stdbitmap::$12]
Consolidated array index constant in assignment (mode_stdbitmap::lines_y+1)[mode_stdbitmap::$13]
Successful SSA optimization Pass2ConstantAdditionElimination
Alias mode_stdbitmap::l#2 = mode_stdbitmap::$12 mode_stdbitmap::$13 
Successful SSA optimization Pass2AliasElimination
Removing call to empty procedure [229] call print_set_screen 
Removing unused procedure print_set_screen
Removing unused procedure block print_set_screen
Removing unused procedure block print_set_screen::@return
Successful SSA optimization PassNEliminateEmptyProcedure
Added new block during phi lifting print_str_lines::@8(between print_str_lines::@1 and print_str_lines::@2)
Added new block during phi lifting print_str_lines::@9(between print_str_lines::@3 and print_str_lines::@2)
Added new block during phi lifting print_str_lines::@10(between print_str_lines::@2 and print_str_lines::@3)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting bitmap_init::@8(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@6 and bitmap_init::@5)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@5 and bitmap_init::@6)
Added new block during phi lifting bitmap_clear::@4(between bitmap_clear::@3 and bitmap_clear::@1)
Added new block during phi lifting bitmap_clear::@5(between bitmap_clear::@2 and bitmap_clear::@2)
Added new block during phi lifting bitmap_line_xdyi::@5(between bitmap_line_xdyi::@2 and bitmap_line_xdyi::@1)
Added new block during phi lifting bitmap_line_xdyi::@6(between bitmap_line_xdyi::@4 and bitmap_line_xdyi::@2)
Added new block during phi lifting bitmap_line_xdyd::@5(between bitmap_line_xdyd::@2 and bitmap_line_xdyd::@1)
Added new block during phi lifting bitmap_line_xdyd::@6(between bitmap_line_xdyd::@4 and bitmap_line_xdyd::@2)
Added new block during phi lifting bitmap_line_ydxi::@5(between bitmap_line_ydxi::@2 and bitmap_line_ydxi::@1)
Added new block during phi lifting bitmap_line_ydxi::@6(between bitmap_line_ydxi::@4 and bitmap_line_ydxi::@2)
Added new block during phi lifting bitmap_line_ydxd::@5(between bitmap_line_ydxd::@2 and bitmap_line_ydxd::@1)
Added new block during phi lifting bitmap_line_ydxd::@6(between bitmap_line_ydxd::@4 and bitmap_line_ydxd::@2)
Added new block during phi lifting menu::@58(between menu::@1 and menu::@1)
Added new block during phi lifting mode_ctrl::@28(between mode_ctrl::@11 and mode_ctrl::@1)
Added new block during phi lifting mode_ctrl::@29(between mode_ctrl::@21 and mode_ctrl::@5)
Added new block during phi lifting mode_ctrl::@30(between mode_ctrl::@22 and mode_ctrl::@6)
Added new block during phi lifting mode_ctrl::@31(between mode_ctrl::@23 and mode_ctrl::@7)
Added new block during phi lifting mode_ctrl::@32(between mode_ctrl::@24 and mode_ctrl::@8)
Added new block during phi lifting mode_ctrl::@33(between mode_ctrl::@25 and mode_ctrl::@9)
Added new block during phi lifting mode_ctrl::@34(between mode_ctrl::@26 and mode_ctrl::@10)
Added new block during phi lifting mode_ctrl::@35(between mode_ctrl::@27 and mode_ctrl::@11)
Added new block during phi lifting mode_stdchar::@8(between mode_stdchar::@1 and mode_stdchar::@1)
Added new block during phi lifting mode_stdchar::@9(between mode_stdchar::@5 and mode_stdchar::@3)
Added new block during phi lifting mode_stdchar::@10(between mode_stdchar::@4 and mode_stdchar::@4)
Added new block during phi lifting mode_ecmchar::@8(between mode_ecmchar::@1 and mode_ecmchar::@1)
Added new block during phi lifting mode_ecmchar::@9(between mode_ecmchar::@5 and mode_ecmchar::@3)
Added new block during phi lifting mode_ecmchar::@10(between mode_ecmchar::@4 and mode_ecmchar::@4)
Added new block during phi lifting mode_mcchar::@8(between mode_mcchar::@1 and mode_mcchar::@1)
Added new block during phi lifting mode_mcchar::@9(between mode_mcchar::@5 and mode_mcchar::@3)
Added new block during phi lifting mode_mcchar::@10(between mode_mcchar::@4 and mode_mcchar::@4)
Added new block during phi lifting mode_stdbitmap::@14(between mode_stdbitmap::@1 and mode_stdbitmap::@1)
Added new block during phi lifting mode_stdbitmap::@15(between mode_stdbitmap::@5 and mode_stdbitmap::@3)
Added new block during phi lifting mode_stdbitmap::@16(between mode_stdbitmap::@4 and mode_stdbitmap::@4)
Added new block during phi lifting mode_hicolstdchar::@8(between mode_hicolstdchar::@1 and mode_hicolstdchar::@1)
Added new block during phi lifting mode_hicolstdchar::@9(between mode_hicolstdchar::@5 and mode_hicolstdchar::@3)
Added new block during phi lifting mode_hicolstdchar::@10(between mode_hicolstdchar::@4 and mode_hicolstdchar::@4)
Added new block during phi lifting mode_hicolecmchar::@8(between mode_hicolecmchar::@1 and mode_hicolecmchar::@1)
Added new block during phi lifting mode_hicolecmchar::@9(between mode_hicolecmchar::@5 and mode_hicolecmchar::@3)
Added new block during phi lifting mode_hicolecmchar::@10(between mode_hicolecmchar::@4 and mode_hicolecmchar::@4)
Added new block during phi lifting mode_hicolmcchar::@8(between mode_hicolmcchar::@1 and mode_hicolmcchar::@1)
Added new block during phi lifting mode_hicolmcchar::@9(between mode_hicolmcchar::@5 and mode_hicolmcchar::@3)
Added new block during phi lifting mode_hicolmcchar::@10(between mode_hicolmcchar::@4 and mode_hicolmcchar::@4)
Added new block during phi lifting mode_twoplanebitmap::@19(between mode_twoplanebitmap::@1 and mode_twoplanebitmap::@1)
Added new block during phi lifting mode_twoplanebitmap::@20(between mode_twoplanebitmap::@5 and mode_twoplanebitmap::@3)
Added new block during phi lifting mode_twoplanebitmap::@21(between mode_twoplanebitmap::@4 and mode_twoplanebitmap::@4)
Added new block during phi lifting mode_twoplanebitmap::@22(between mode_twoplanebitmap::@12 and mode_twoplanebitmap::@7)
Added new block during phi lifting mode_twoplanebitmap::@23(between mode_twoplanebitmap::@10 and mode_twoplanebitmap::@8)
Added new block during phi lifting mode_twoplanebitmap::@24(between mode_twoplanebitmap::@16 and mode_twoplanebitmap::@14)
Added new block during phi lifting mode_twoplanebitmap::@25(between mode_twoplanebitmap::@15 and mode_twoplanebitmap::@15)
Added new block during phi lifting mode_sixsfred::@16(between mode_sixsfred::@1 and mode_sixsfred::@1)
Added new block during phi lifting mode_sixsfred::@17(between mode_sixsfred::@5 and mode_sixsfred::@3)
Added new block during phi lifting mode_sixsfred::@18(between mode_sixsfred::@4 and mode_sixsfred::@4)
Added new block during phi lifting mode_sixsfred::@19(between mode_sixsfred::@9 and mode_sixsfred::@7)
Added new block during phi lifting mode_sixsfred::@20(between mode_sixsfred::@8 and mode_sixsfred::@8)
Added new block during phi lifting mode_sixsfred::@21(between mode_sixsfred::@13 and mode_sixsfred::@11)
Added new block during phi lifting mode_sixsfred::@22(between mode_sixsfred::@12 and mode_sixsfred::@12)
Added new block during phi lifting mode_sixsfred2::@16(between mode_sixsfred2::@1 and mode_sixsfred2::@1)
Added new block during phi lifting mode_sixsfred2::@17(between mode_sixsfred2::@5 and mode_sixsfred2::@3)
Added new block during phi lifting mode_sixsfred2::@18(between mode_sixsfred2::@4 and mode_sixsfred2::@4)
Added new block during phi lifting mode_sixsfred2::@19(between mode_sixsfred2::@9 and mode_sixsfred2::@7)
Added new block during phi lifting mode_sixsfred2::@20(between mode_sixsfred2::@8 and mode_sixsfred2::@8)
Added new block during phi lifting mode_sixsfred2::@21(between mode_sixsfred2::@13 and mode_sixsfred2::@11)
Added new block during phi lifting mode_sixsfred2::@22(between mode_sixsfred2::@12 and mode_sixsfred2::@12)
Added new block during phi lifting mode_8bpppixelcell::@16(between mode_8bpppixelcell::@1 and mode_8bpppixelcell::@1)
Added new block during phi lifting mode_8bpppixelcell::@17(between mode_8bpppixelcell::@5 and mode_8bpppixelcell::@3)
Added new block during phi lifting mode_8bpppixelcell::@18(between mode_8bpppixelcell::@4 and mode_8bpppixelcell::@4)
Added new block during phi lifting mode_8bpppixelcell::@19(between mode_8bpppixelcell::@13 and mode_8bpppixelcell::@7)
Added new block during phi lifting mode_8bpppixelcell::@20(between mode_8bpppixelcell::@12 and mode_8bpppixelcell::@8)
Added new block during phi lifting mode_8bpppixelcell::@21(between mode_8bpppixelcell::@10 and mode_8bpppixelcell::@9)
Added new block during phi lifting mode_8bppchunkybmm::@13(between mode_8bppchunkybmm::@1 and mode_8bppchunkybmm::@1)
Added new block during phi lifting mode_8bppchunkybmm::@14(between mode_8bppchunkybmm::@7 and mode_8bppchunkybmm::@3)
Added new block during phi lifting mode_8bppchunkybmm::@15(between mode_8bppchunkybmm::@5 and mode_8bppchunkybmm::@4)
Added new block during phi lifting mode_8bppchunkybmm::@16(between mode_8bppchunkybmm::@4 and mode_8bppchunkybmm::@5)
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of menu::@2
Adding NOP phi() at start of menu::@31
Adding NOP phi() at start of menu::@32
Adding NOP phi() at start of menu::@33
Adding NOP phi() at start of menu::@6
Adding NOP phi() at start of menu::@7
Adding NOP phi() at start of menu::@19
Adding NOP phi() at start of menu::@36
Adding NOP phi() at start of menu::@8
Adding NOP phi() at start of menu::@20
Adding NOP phi() at start of menu::@38
Adding NOP phi() at start of menu::@9
Adding NOP phi() at start of menu::@21
Adding NOP phi() at start of menu::@40
Adding NOP phi() at start of menu::@10
Adding NOP phi() at start of menu::@22
Adding NOP phi() at start of menu::@42
Adding NOP phi() at start of menu::@11
Adding NOP phi() at start of menu::@23
Adding NOP phi() at start of menu::@44
Adding NOP phi() at start of menu::@12
Adding NOP phi() at start of menu::@24
Adding NOP phi() at start of menu::@46
Adding NOP phi() at start of menu::@13
Adding NOP phi() at start of menu::@25
Adding NOP phi() at start of menu::@48
Adding NOP phi() at start of menu::@14
Adding NOP phi() at start of menu::@26
Adding NOP phi() at start of menu::@50
Adding NOP phi() at start of menu::@15
Adding NOP phi() at start of menu::@27
Adding NOP phi() at start of menu::@52
Adding NOP phi() at start of menu::@16
Adding NOP phi() at start of menu::@28
Adding NOP phi() at start of menu::@54
Adding NOP phi() at start of menu::@17
Adding NOP phi() at start of menu::@29
Adding NOP phi() at start of menu::@56
Adding NOP phi() at start of menu::@18
Adding NOP phi() at start of menu::@30
Adding NOP phi() at start of menu::@57
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of print_str_lines
Adding NOP phi() at start of print_str_lines::@5
Adding NOP phi() at start of mode_stdchar::@6
Adding NOP phi() at start of mode_stdchar::@7
Adding NOP phi() at start of mode_ecmchar::@6
Adding NOP phi() at start of mode_ecmchar::@7
Adding NOP phi() at start of mode_mcchar::@6
Adding NOP phi() at start of mode_mcchar::@7
Adding NOP phi() at start of mode_stdbitmap::@6
Adding NOP phi() at start of mode_stdbitmap::@10
Adding NOP phi() at start of mode_stdbitmap::@11
Adding NOP phi() at start of mode_stdbitmap::@9
Adding NOP phi() at start of mode_stdbitmap::@13
Adding NOP phi() at start of mode_hicolstdchar::@6
Adding NOP phi() at start of mode_hicolstdchar::@7
Adding NOP phi() at start of mode_hicolecmchar::@6
Adding NOP phi() at start of mode_hicolecmchar::@7
Adding NOP phi() at start of mode_hicolmcchar::@6
Adding NOP phi() at start of mode_hicolmcchar::@7
Adding NOP phi() at start of mode_sixsfred2::@6
Adding NOP phi() at start of mode_sixsfred2::@10
Adding NOP phi() at start of mode_sixsfred2::@14
Adding NOP phi() at start of mode_sixsfred2::@15
Adding NOP phi() at start of mode_twoplanebitmap::@6
Adding NOP phi() at start of mode_twoplanebitmap::@13
Adding NOP phi() at start of mode_twoplanebitmap::@17
Adding NOP phi() at start of mode_twoplanebitmap::@18
Adding NOP phi() at start of mode_sixsfred::@6
Adding NOP phi() at start of mode_sixsfred::@10
Adding NOP phi() at start of mode_sixsfred::@14
Adding NOP phi() at start of mode_sixsfred::@15
Adding NOP phi() at start of mode_8bpppixelcell::@2
Adding NOP phi() at start of mode_8bpppixelcell::@15
Adding NOP phi() at start of mode_8bppchunkybmm::@2
Adding NOP phi() at start of mode_8bppchunkybmm::@9
Adding NOP phi() at start of mode_8bppchunkybmm::@8
Adding NOP phi() at start of mode_8bppchunkybmm::@11
Adding NOP phi() at start of mode_8bppchunkybmm::@12
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of mode_ctrl::@3
Adding NOP phi() at start of mode_ctrl::@18
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@3
Adding NOP phi() at start of bitmap_init::@4
Adding NOP phi() at start of bitmap_line::@16
Adding NOP phi() at start of bitmap_line::@15
Adding NOP phi() at start of bitmap_line::@18
Adding NOP phi() at start of bitmap_line::@17
Adding NOP phi() at start of bitmap_line::@20
Adding NOP phi() at start of bitmap_line::@19
Adding NOP phi() at start of bitmap_line::@22
Adding NOP phi() at start of bitmap_line::@21
CALL GRAPH
Calls in [main] to menu:6 
Calls in [menu] to print_cls:27 print_str_lines:29 keyboard_key_pressed:33 mode_stdchar:38 keyboard_key_pressed:42 mode_ecmchar:47 keyboard_key_pressed:50 mode_mcchar:55 keyboard_key_pressed:58 mode_stdbitmap:63 keyboard_key_pressed:66 mode_hicolstdchar:71 keyboard_key_pressed:74 mode_hicolecmchar:79 keyboard_key_pressed:82 mode_hicolmcchar:87 keyboard_key_pressed:90 mode_sixsfred2:95 keyboard_key_pressed:98 mode_twoplanebitmap:103 keyboard_key_pressed:106 mode_sixsfred:111 keyboard_key_pressed:114 mode_8bpppixelcell:119 keyboard_key_pressed:122 mode_8bppchunkybmm:127 
Calls in [print_cls] to memset:134 
Calls in [print_str_lines] to print_char:148 print_ln:153 
Calls in [keyboard_key_pressed] to keyboard_matrix_read:164 
Calls in [mode_stdchar] to mode_ctrl:203 
Calls in [mode_ecmchar] to mode_ctrl:250 
Calls in [mode_mcchar] to mode_ctrl:296 
Calls in [mode_stdbitmap] to bitmap_init:334 bitmap_clear:336 mode_ctrl:341 bitmap_line:348 
Calls in [mode_hicolstdchar] to mode_ctrl:388 
Calls in [mode_hicolecmchar] to mode_ctrl:433 
Calls in [mode_hicolmcchar] to mode_ctrl:477 
Calls in [mode_sixsfred2] to mode_ctrl:545 
Calls in [mode_twoplanebitmap] to mode_ctrl:623 
Calls in [mode_sixsfred] to mode_ctrl:698 
Calls in [mode_8bpppixelcell] to mode_ctrl:775 
Calls in [mode_8bppchunkybmm] to dtvSetCpuBankSegment1:810 dtvSetCpuBankSegment1:819 dtvSetCpuBankSegment1:832 mode_ctrl:834 
Calls in [mode_ctrl] to keyboard_key_pressed:873 keyboard_key_pressed:879 keyboard_key_pressed:886 keyboard_key_pressed:893 keyboard_key_pressed:900 keyboard_key_pressed:907 keyboard_key_pressed:914 keyboard_key_pressed:921 
Calls in [bitmap_line] to bitmap_line_ydxi:1004 bitmap_line_xdyi:1017 bitmap_line_ydxd:1031 bitmap_line_xdyd:1043 bitmap_line_ydxd:1059 bitmap_line_xdyd:1071 bitmap_line_ydxi:1085 bitmap_line_xdyi:1097 
Calls in [bitmap_line_ydxi] to bitmap_plot:1113 
Calls in [bitmap_line_xdyi] to bitmap_plot:1140 
Calls in [bitmap_line_ydxd] to bitmap_plot:1167 
Calls in [bitmap_line_xdyd] to bitmap_plot:1194 

Created 188 initial phi equivalence classes
Coalesced [131] menu::c#4 = menu::c#1
Coalesced [132] menu::i#3 = menu::i#1
Coalesced [141] print_str_lines::str#11 = print_str_lines::str#2
Coalesced [142] print_char_cursor#104 = print_char_cursor#2
Coalesced [149] print_char_cursor#107 = print_char_cursor#26
Coalesced [154] print_str_lines::str#10 = print_str_lines::str#0
Not coalescing [155] print_char_cursor#103 = print_line_cursor#2
Coalesced [156] print_line_cursor#99 = print_line_cursor#2
Coalesced (already) [157] print_str_lines::str#12 = print_str_lines::str#0
Coalesced [158] print_char_cursor#105 = print_char_cursor#38
Coalesced (already) [159] print_char_cursor#106 = print_char_cursor#37
Coalesced [185] mode_stdchar::col#6 = mode_stdchar::col#3
Coalesced [186] mode_stdchar::ch#6 = mode_stdchar::ch#3
Coalesced [206] mode_stdchar::cy#5 = mode_stdchar::cy#1
Coalesced [207] mode_stdchar::col#5 = mode_stdchar::col#1
Coalesced [208] mode_stdchar::ch#5 = mode_stdchar::ch#1
Coalesced [209] mode_stdchar::cx#3 = mode_stdchar::cx#1
Coalesced (already) [210] mode_stdchar::col#7 = mode_stdchar::col#1
Coalesced (already) [211] mode_stdchar::ch#7 = mode_stdchar::ch#1
Coalesced [212] mode_stdchar::i#3 = mode_stdchar::i#1
Coalesced [232] mode_ecmchar::col#6 = mode_ecmchar::col#3
Coalesced [233] mode_ecmchar::ch#6 = mode_ecmchar::ch#3
Coalesced [253] mode_ecmchar::cy#5 = mode_ecmchar::cy#1
Coalesced [254] mode_ecmchar::col#5 = mode_ecmchar::col#1
Coalesced [255] mode_ecmchar::ch#5 = mode_ecmchar::ch#1
Coalesced [256] mode_ecmchar::cx#3 = mode_ecmchar::cx#1
Coalesced (already) [257] mode_ecmchar::col#7 = mode_ecmchar::col#1
Coalesced (already) [258] mode_ecmchar::ch#7 = mode_ecmchar::ch#1
Coalesced [259] mode_ecmchar::i#3 = mode_ecmchar::i#1
Coalesced [278] mode_mcchar::col#6 = mode_mcchar::col#3
Coalesced [279] mode_mcchar::ch#6 = mode_mcchar::ch#3
Coalesced [299] mode_mcchar::cy#5 = mode_mcchar::cy#1
Coalesced [300] mode_mcchar::col#5 = mode_mcchar::col#1
Coalesced [301] mode_mcchar::ch#5 = mode_mcchar::ch#1
Coalesced [302] mode_mcchar::cx#3 = mode_mcchar::cx#1
Coalesced (already) [303] mode_mcchar::col#7 = mode_mcchar::col#1
Coalesced (already) [304] mode_mcchar::ch#7 = mode_mcchar::ch#1
Coalesced [305] mode_mcchar::i#3 = mode_mcchar::i#1
Coalesced [320] mode_stdbitmap::ch#6 = mode_stdbitmap::ch#3
Coalesced [350] mode_stdbitmap::l#5 = mode_stdbitmap::l#1
Coalesced [351] mode_stdbitmap::cy#5 = mode_stdbitmap::cy#1
Coalesced [352] mode_stdbitmap::ch#5 = mode_stdbitmap::ch#1
Coalesced [353] mode_stdbitmap::cx#3 = mode_stdbitmap::cx#1
Coalesced (already) [354] mode_stdbitmap::ch#7 = mode_stdbitmap::ch#1
Coalesced [355] mode_stdbitmap::i#3 = mode_stdbitmap::i#1
Coalesced [372] mode_hicolstdchar::col#6 = mode_hicolstdchar::col#3
Coalesced [373] mode_hicolstdchar::ch#6 = mode_hicolstdchar::ch#3
Coalesced [391] mode_hicolstdchar::cy#5 = mode_hicolstdchar::cy#1
Coalesced [392] mode_hicolstdchar::col#5 = mode_hicolstdchar::col#1
Coalesced [393] mode_hicolstdchar::ch#5 = mode_hicolstdchar::ch#1
Coalesced [394] mode_hicolstdchar::cx#3 = mode_hicolstdchar::cx#1
Coalesced (already) [395] mode_hicolstdchar::col#7 = mode_hicolstdchar::col#1
Coalesced (already) [396] mode_hicolstdchar::ch#7 = mode_hicolstdchar::ch#1
Coalesced [397] mode_hicolstdchar::i#3 = mode_hicolstdchar::i#1
Coalesced [417] mode_hicolecmchar::col#6 = mode_hicolecmchar::col#3
Coalesced [418] mode_hicolecmchar::ch#6 = mode_hicolecmchar::ch#3
Coalesced [436] mode_hicolecmchar::cy#5 = mode_hicolecmchar::cy#1
Coalesced [437] mode_hicolecmchar::col#5 = mode_hicolecmchar::col#1
Coalesced [438] mode_hicolecmchar::ch#5 = mode_hicolecmchar::ch#1
Coalesced [439] mode_hicolecmchar::cx#3 = mode_hicolecmchar::cx#1
Coalesced (already) [440] mode_hicolecmchar::col#7 = mode_hicolecmchar::col#1
Coalesced (already) [441] mode_hicolecmchar::ch#7 = mode_hicolecmchar::ch#1
Coalesced [442] mode_hicolecmchar::i#3 = mode_hicolecmchar::i#1
Coalesced [461] mode_hicolmcchar::col#6 = mode_hicolmcchar::col#3
Coalesced [462] mode_hicolmcchar::ch#6 = mode_hicolmcchar::ch#3
Coalesced [480] mode_hicolmcchar::cy#5 = mode_hicolmcchar::cy#1
Coalesced [481] mode_hicolmcchar::col#5 = mode_hicolmcchar::col#1
Coalesced [482] mode_hicolmcchar::ch#5 = mode_hicolmcchar::ch#1
Coalesced [483] mode_hicolmcchar::cx#3 = mode_hicolmcchar::cx#1
Coalesced (already) [484] mode_hicolmcchar::col#7 = mode_hicolmcchar::col#1
Coalesced (already) [485] mode_hicolmcchar::ch#7 = mode_hicolmcchar::ch#1
Coalesced [486] mode_hicolmcchar::i#3 = mode_hicolmcchar::i#1
Coalesced [510] mode_sixsfred2::col#6 = mode_sixsfred2::col#3
Coalesced [524] mode_sixsfred2::gfxa#6 = mode_sixsfred2::gfxa#3
Coalesced [536] mode_sixsfred2::gfxb#6 = mode_sixsfred2::gfxb#3
Coalesced [548] mode_sixsfred2::gfxb#5 = mode_sixsfred2::gfxb#1
Coalesced [549] mode_sixsfred2::by#5 = mode_sixsfred2::by#1
Coalesced (already) [550] mode_sixsfred2::gfxb#7 = mode_sixsfred2::gfxb#1
Coalesced [551] mode_sixsfred2::bx#3 = mode_sixsfred2::bx#1
Coalesced [552] mode_sixsfred2::ay#5 = mode_sixsfred2::ay#1
Coalesced [553] mode_sixsfred2::gfxa#5 = mode_sixsfred2::gfxa#1
Coalesced (already) [554] mode_sixsfred2::gfxa#7 = mode_sixsfred2::gfxa#1
Coalesced [555] mode_sixsfred2::ax#3 = mode_sixsfred2::ax#1
Coalesced [556] mode_sixsfred2::cy#5 = mode_sixsfred2::cy#1
Coalesced [557] mode_sixsfred2::col#5 = mode_sixsfred2::col#1
Coalesced [558] mode_sixsfred2::cx#3 = mode_sixsfred2::cx#1
Coalesced (already) [559] mode_sixsfred2::col#7 = mode_sixsfred2::col#1
Coalesced [560] mode_sixsfred2::i#3 = mode_sixsfred2::i#1
Coalesced [586] mode_twoplanebitmap::col#6 = mode_twoplanebitmap::col#3
Coalesced [600] mode_twoplanebitmap::gfxa#11 = mode_twoplanebitmap::gfxa#7
Coalesced [606] mode_twoplanebitmap::gfxa#12 = mode_twoplanebitmap::gfxa#2
Coalesced [614] mode_twoplanebitmap::gfxb#6 = mode_twoplanebitmap::gfxb#3
Coalesced [626] mode_twoplanebitmap::gfxb#5 = mode_twoplanebitmap::gfxb#1
Coalesced [627] mode_twoplanebitmap::by#5 = mode_twoplanebitmap::by#1
Coalesced (already) [628] mode_twoplanebitmap::gfxb#7 = mode_twoplanebitmap::gfxb#1
Coalesced [629] mode_twoplanebitmap::bx#3 = mode_twoplanebitmap::bx#1
Coalesced [630] mode_twoplanebitmap::ay#8 = mode_twoplanebitmap::ay#1
Coalesced [631] mode_twoplanebitmap::gfxa#9 = mode_twoplanebitmap::gfxa#6
Coalesced (already) [632] mode_twoplanebitmap::gfxa#10 = mode_twoplanebitmap::gfxa#6
Coalesced [633] mode_twoplanebitmap::ax#6 = mode_twoplanebitmap::ax#1
Coalesced [636] mode_twoplanebitmap::gfxa#13 = mode_twoplanebitmap::gfxa#1
Coalesced [637] mode_twoplanebitmap::cy#5 = mode_twoplanebitmap::cy#1
Coalesced [638] mode_twoplanebitmap::col#5 = mode_twoplanebitmap::col#1
Coalesced [639] mode_twoplanebitmap::cx#3 = mode_twoplanebitmap::cx#1
Coalesced (already) [640] mode_twoplanebitmap::col#7 = mode_twoplanebitmap::col#1
Coalesced [641] mode_twoplanebitmap::i#3 = mode_twoplanebitmap::i#1
Coalesced [665] mode_sixsfred::col#6 = mode_sixsfred::col#3
Coalesced [677] mode_sixsfred::gfxa#6 = mode_sixsfred::gfxa#3
Coalesced [689] mode_sixsfred::gfxb#6 = mode_sixsfred::gfxb#3
Coalesced [701] mode_sixsfred::gfxb#5 = mode_sixsfred::gfxb#1
Coalesced [702] mode_sixsfred::by#5 = mode_sixsfred::by#1
Coalesced (already) [703] mode_sixsfred::gfxb#7 = mode_sixsfred::gfxb#1
Coalesced [704] mode_sixsfred::bx#3 = mode_sixsfred::bx#1
Coalesced [705] mode_sixsfred::ay#5 = mode_sixsfred::ay#1
Coalesced [706] mode_sixsfred::gfxa#5 = mode_sixsfred::gfxa#1
Coalesced (already) [707] mode_sixsfred::gfxa#7 = mode_sixsfred::gfxa#1
Coalesced [708] mode_sixsfred::ax#3 = mode_sixsfred::ax#1
Coalesced [709] mode_sixsfred::cy#5 = mode_sixsfred::cy#1
Coalesced [710] mode_sixsfred::col#5 = mode_sixsfred::col#1
Coalesced [711] mode_sixsfred::cx#3 = mode_sixsfred::cx#1
Coalesced (already) [712] mode_sixsfred::col#7 = mode_sixsfred::col#1
Coalesced [713] mode_sixsfred::i#3 = mode_sixsfred::i#1
Coalesced [736] mode_8bpppixelcell::gfxa#6 = mode_8bpppixelcell::gfxa#3
Coalesced [750] mode_8bpppixelcell::chargen#11 = mode_8bpppixelcell::chargen#4
Coalesced [751] mode_8bpppixelcell::gfxb#11 = mode_8bpppixelcell::gfxb#7
Coalesced [752] mode_8bpppixelcell::col#11 = mode_8bpppixelcell::col#7
Coalesced [756] mode_8bpppixelcell::bits#6 = mode_8bpppixelcell::bits#0
Coalesced [757] mode_8bpppixelcell::gfxb#13 = mode_8bpppixelcell::gfxb#5
Coalesced [758] mode_8bpppixelcell::col#13 = mode_8bpppixelcell::col#5
Not coalescing [762] mode_8bpppixelcell::c#3 = mode_8bpppixelcell::col#2
Coalesced [778] mode_8bpppixelcell::chargen#9 = mode_8bpppixelcell::chargen#1
Coalesced [779] mode_8bpppixelcell::gfxb#9 = mode_8bpppixelcell::gfxb#1
Coalesced [780] mode_8bpppixelcell::col#9 = mode_8bpppixelcell::col#1
Coalesced [781] mode_8bpppixelcell::ch#9 = mode_8bpppixelcell::ch#1
Coalesced (already) [782] mode_8bpppixelcell::chargen#10 = mode_8bpppixelcell::chargen#1
Coalesced (already) [783] mode_8bpppixelcell::gfxb#10 = mode_8bpppixelcell::gfxb#1
Coalesced (already) [784] mode_8bpppixelcell::col#10 = mode_8bpppixelcell::col#1
Coalesced [785] mode_8bpppixelcell::cr#7 = mode_8bpppixelcell::cr#1
Coalesced [786] mode_8bpppixelcell::bits#5 = mode_8bpppixelcell::bits#1
Coalesced (already) [787] mode_8bpppixelcell::gfxb#12 = mode_8bpppixelcell::gfxb#1
Coalesced (already) [788] mode_8bpppixelcell::col#12 = mode_8bpppixelcell::col#1
Coalesced [789] mode_8bpppixelcell::cp#5 = mode_8bpppixelcell::cp#1
Coalesced [790] mode_8bpppixelcell::ay#5 = mode_8bpppixelcell::ay#1
Coalesced [791] mode_8bpppixelcell::gfxa#5 = mode_8bpppixelcell::gfxa#1
Coalesced [792] mode_8bpppixelcell::ax#3 = mode_8bpppixelcell::ax#1
Coalesced (already) [793] mode_8bpppixelcell::gfxa#7 = mode_8bpppixelcell::gfxa#1
Coalesced [794] mode_8bpppixelcell::i#3 = mode_8bpppixelcell::i#1
Coalesced [813] mode_8bppchunkybmm::gfxb#8 = mode_8bppchunkybmm::gfxb#5
Coalesced [814] mode_8bppchunkybmm::gfxbCpuBank#11 = mode_8bppchunkybmm::gfxbCpuBank#7
Coalesced [818] dtvSetCpuBankSegment1::cpuBankIdx#4 = dtvSetCpuBankSegment1::cpuBankIdx#1
Coalesced [821] mode_8bppchunkybmm::gfxbCpuBank#13 = mode_8bppchunkybmm::gfxbCpuBank#2
Coalesced [837] mode_8bppchunkybmm::gfxb#7 = mode_8bppchunkybmm::gfxb#1
Coalesced [838] mode_8bppchunkybmm::y#8 = mode_8bppchunkybmm::y#1
Coalesced [839] mode_8bppchunkybmm::gfxbCpuBank#10 = mode_8bppchunkybmm::gfxbCpuBank#8
Coalesced (already) [840] mode_8bppchunkybmm::gfxb#9 = mode_8bppchunkybmm::gfxb#1
Coalesced [841] mode_8bppchunkybmm::x#6 = mode_8bppchunkybmm::x#1
Coalesced (already) [842] mode_8bppchunkybmm::gfxbCpuBank#12 = mode_8bppchunkybmm::gfxbCpuBank#8
Coalesced [843] mode_8bppchunkybmm::gfxb#10 = mode_8bppchunkybmm::gfxb#3
Coalesced (already) [844] mode_8bppchunkybmm::gfxbCpuBank#14 = mode_8bppchunkybmm::gfxbCpuBank#4
Coalesced [845] mode_8bppchunkybmm::i#3 = mode_8bppchunkybmm::i#1
Coalesced [854] memset::dst#4 = memset::dst#1
Coalesced [858] print_line_cursor#100 = print_line_cursor#1
Coalesced (already) [864] print_line_cursor#101 = print_line_cursor#2
Coalesced [869] dtv_control#293 = dtv_control#146
Coalesced [884] mode_ctrl::ctrl#29 = mode_ctrl::ctrl#1
Coalesced [891] mode_ctrl::ctrl#31 = mode_ctrl::ctrl#2
Coalesced [898] mode_ctrl::ctrl#33 = mode_ctrl::ctrl#3
Coalesced [905] mode_ctrl::ctrl#35 = mode_ctrl::ctrl#4
Coalesced [912] mode_ctrl::ctrl#37 = mode_ctrl::ctrl#5
Coalesced [919] mode_ctrl::ctrl#39 = mode_ctrl::ctrl#6
Coalesced [931] dtv_control#295 = dtv_control#16
Coalesced (already) [932] dtv_control#294 = dtv_control#116
Coalesced [933] mode_ctrl::ctrl#41 = mode_ctrl::ctrl#22
Coalesced [934] mode_ctrl::ctrl#40 = mode_ctrl::ctrl#13
Coalesced [935] mode_ctrl::ctrl#38 = mode_ctrl::ctrl#12
Coalesced [936] mode_ctrl::ctrl#36 = mode_ctrl::ctrl#11
Coalesced [937] mode_ctrl::ctrl#34 = mode_ctrl::ctrl#10
Coalesced [938] mode_ctrl::ctrl#32 = mode_ctrl::ctrl#17
Coalesced [939] mode_ctrl::ctrl#30 = mode_ctrl::ctrl#0
Coalesced [962] bitmap_init::yoffs#7 = bitmap_init::yoffs#1
Coalesced [967] bitmap_init::y#5 = bitmap_init::y#1
Coalesced [968] bitmap_init::yoffs#5 = bitmap_init::yoffs#4
Coalesced (already) [969] bitmap_init::yoffs#6 = bitmap_init::yoffs#2
Coalesced [970] bitmap_init::x#5 = bitmap_init::x#1
Coalesced [971] bitmap_init::bits#5 = bitmap_init::bits#4
Coalesced [972] bitmap_init::bits#6 = bitmap_init::bits#1
Coalesced [976] bitmap_clear::bitmap#7 = bitmap_clear::bitmap#3
Coalesced [985] bitmap_clear::bitmap#6 = bitmap_clear::bitmap#1
Coalesced [986] bitmap_clear::y#5 = bitmap_clear::y#1
Coalesced (already) [987] bitmap_clear::bitmap#8 = bitmap_clear::bitmap#1
Coalesced [988] bitmap_clear::x#3 = bitmap_clear::x#1
Coalesced [999] bitmap_line_ydxi::xd#8 = bitmap_line_ydxi::xd#0
Coalesced [1000] bitmap_line_ydxi::x#9 = bitmap_line_ydxi::x#0
Coalesced [1001] bitmap_line_ydxi::y#9 = bitmap_line_ydxi::y#0
Coalesced [1002] bitmap_line_ydxi::yd#8 = bitmap_line_ydxi::yd#0
Coalesced [1003] bitmap_line_ydxi::y1#8 = bitmap_line_ydxi::y1#0
Coalesced [1012] bitmap_line_xdyi::yd#8 = bitmap_line_xdyi::yd#0
Coalesced [1013] bitmap_line_xdyi::x#9 = bitmap_line_xdyi::x#0
Coalesced [1014] bitmap_line_xdyi::y#9 = bitmap_line_xdyi::y#0
Coalesced [1015] bitmap_line_xdyi::xd#8 = bitmap_line_xdyi::xd#0
Coalesced [1016] bitmap_line_xdyi::x1#8 = bitmap_line_xdyi::x1#0
Coalesced [1026] bitmap_line_ydxd::xd#7 = bitmap_line_ydxd::xd#0
Coalesced [1027] bitmap_line_ydxd::x#8 = bitmap_line_ydxd::x#0
Coalesced [1028] bitmap_line_ydxd::y#9 = bitmap_line_ydxd::y#0
Coalesced [1029] bitmap_line_ydxd::yd#7 = bitmap_line_ydxd::yd#0
Coalesced [1030] bitmap_line_ydxd::y1#7 = bitmap_line_ydxd::y1#0
Coalesced [1038] bitmap_line_xdyd::yd#8 = bitmap_line_xdyd::yd#0
Coalesced [1039] bitmap_line_xdyd::x#9 = bitmap_line_xdyd::x#0
Coalesced [1040] bitmap_line_xdyd::y#9 = bitmap_line_xdyd::y#0
Coalesced [1041] bitmap_line_xdyd::xd#8 = bitmap_line_xdyd::xd#0
Coalesced [1042] bitmap_line_xdyd::x1#8 = bitmap_line_xdyd::x1#0
Coalesced [1054] bitmap_line_ydxd::xd#8 = bitmap_line_ydxd::xd#1
Coalesced [1055] bitmap_line_ydxd::x#9 = bitmap_line_ydxd::x#1
Coalesced [1056] bitmap_line_ydxd::y#10 = bitmap_line_ydxd::y#1
Coalesced [1057] bitmap_line_ydxd::yd#8 = bitmap_line_ydxd::yd#1
Coalesced [1058] bitmap_line_ydxd::y1#8 = bitmap_line_ydxd::y1#1
Coalesced [1066] bitmap_line_xdyd::yd#7 = bitmap_line_xdyd::yd#1
Coalesced [1067] bitmap_line_xdyd::x#8 = bitmap_line_xdyd::x#1
Coalesced [1068] bitmap_line_xdyd::y#8 = bitmap_line_xdyd::y#1
Coalesced [1069] bitmap_line_xdyd::xd#7 = bitmap_line_xdyd::xd#1
Coalesced [1070] bitmap_line_xdyd::x1#7 = bitmap_line_xdyd::x1#1
Coalesced [1080] bitmap_line_ydxi::xd#7 = bitmap_line_ydxi::xd#1
Coalesced [1081] bitmap_line_ydxi::x#8 = bitmap_line_ydxi::x#1
Coalesced [1082] bitmap_line_ydxi::y#8 = bitmap_line_ydxi::y#1
Coalesced [1083] bitmap_line_ydxi::yd#7 = bitmap_line_ydxi::yd#1
Coalesced [1084] bitmap_line_ydxi::y1#7 = bitmap_line_ydxi::y1#1
Coalesced [1092] bitmap_line_xdyi::yd#7 = bitmap_line_xdyi::yd#1
Coalesced [1093] bitmap_line_xdyi::x#8 = bitmap_line_xdyi::x#1
Coalesced [1094] bitmap_line_xdyi::y#8 = bitmap_line_xdyi::y#1
Coalesced [1095] bitmap_line_xdyi::xd#7 = bitmap_line_xdyi::xd#1
Coalesced [1096] bitmap_line_xdyi::x1#7 = bitmap_line_xdyi::x1#1
Coalesced [1105] bitmap_line_ydxi::x#10 = bitmap_line_ydxi::x#5
Coalesced [1106] bitmap_line_ydxi::y#10 = bitmap_line_ydxi::y#6
Coalesced [1107] bitmap_line_ydxi::e#7 = bitmap_line_ydxi::e#0
Coalesced [1111] bitmap_plot::x#8 = bitmap_plot::x#2
Coalesced [1112] bitmap_plot::y#8 = bitmap_plot::y#2
Coalesced [1119] bitmap_line_ydxi::x#12 = bitmap_line_ydxi::x#2
Coalesced [1120] bitmap_line_ydxi::e#9 = bitmap_line_ydxi::e#2
Coalesced [1125] bitmap_line_ydxi::x#11 = bitmap_line_ydxi::x#6
Coalesced [1126] bitmap_line_ydxi::y#11 = bitmap_line_ydxi::y#2
Coalesced [1127] bitmap_line_ydxi::e#8 = bitmap_line_ydxi::e#6
Coalesced (already) [1128] bitmap_line_ydxi::x#13 = bitmap_line_ydxi::x#3
Coalesced [1129] bitmap_line_ydxi::e#10 = bitmap_line_ydxi::e#1
Coalesced [1132] bitmap_line_xdyi::x#10 = bitmap_line_xdyi::x#6
Coalesced [1133] bitmap_line_xdyi::y#10 = bitmap_line_xdyi::y#5
Coalesced [1134] bitmap_line_xdyi::e#7 = bitmap_line_xdyi::e#0
Coalesced [1138] bitmap_plot::x#6 = bitmap_plot::x#0
Coalesced [1139] bitmap_plot::y#6 = bitmap_plot::y#0
Coalesced [1146] bitmap_line_xdyi::y#12 = bitmap_line_xdyi::y#2
Coalesced [1147] bitmap_line_xdyi::e#9 = bitmap_line_xdyi::e#2
Coalesced [1152] bitmap_line_xdyi::x#11 = bitmap_line_xdyi::x#2
Coalesced [1153] bitmap_line_xdyi::y#11 = bitmap_line_xdyi::y#6
Coalesced [1154] bitmap_line_xdyi::e#8 = bitmap_line_xdyi::e#6
Coalesced (already) [1155] bitmap_line_xdyi::y#13 = bitmap_line_xdyi::y#3
Coalesced [1156] bitmap_line_xdyi::e#10 = bitmap_line_xdyi::e#1
Coalesced [1159] bitmap_line_ydxd::x#10 = bitmap_line_ydxd::x#5
Coalesced [1160] bitmap_line_ydxd::y#11 = bitmap_line_ydxd::y#7
Coalesced [1161] bitmap_line_ydxd::e#7 = bitmap_line_ydxd::e#0
Coalesced [1165] bitmap_plot::x#7 = bitmap_plot::x#3
Coalesced [1166] bitmap_plot::y#7 = bitmap_plot::y#3
Coalesced [1173] bitmap_line_ydxd::x#12 = bitmap_line_ydxd::x#2
Coalesced [1174] bitmap_line_ydxd::e#9 = bitmap_line_ydxd::e#2
Coalesced [1179] bitmap_line_ydxd::x#11 = bitmap_line_ydxd::x#6
Coalesced [1180] bitmap_line_ydxd::y#12 = bitmap_line_ydxd::y#3
Coalesced [1181] bitmap_line_ydxd::e#8 = bitmap_line_ydxd::e#6
Coalesced (already) [1182] bitmap_line_ydxd::x#13 = bitmap_line_ydxd::x#3
Coalesced [1183] bitmap_line_ydxd::e#10 = bitmap_line_ydxd::e#1
Coalesced [1186] bitmap_line_xdyd::x#10 = bitmap_line_xdyd::x#6
Coalesced [1187] bitmap_line_xdyd::y#10 = bitmap_line_xdyd::y#5
Coalesced [1188] bitmap_line_xdyd::e#7 = bitmap_line_xdyd::e#0
Coalesced [1192] bitmap_plot::x#5 = bitmap_plot::x#1
Coalesced [1193] bitmap_plot::y#5 = bitmap_plot::y#1
Coalesced [1200] bitmap_line_xdyd::y#12 = bitmap_line_xdyd::y#2
Coalesced [1201] bitmap_line_xdyd::e#9 = bitmap_line_xdyd::e#2
Coalesced [1206] bitmap_line_xdyd::x#11 = bitmap_line_xdyd::x#2
Coalesced [1207] bitmap_line_xdyd::y#11 = bitmap_line_xdyd::y#6
Coalesced [1208] bitmap_line_xdyd::e#8 = bitmap_line_xdyd::e#6
Coalesced (already) [1209] bitmap_line_xdyd::y#13 = bitmap_line_xdyd::y#3
Coalesced [1210] bitmap_line_xdyd::e#10 = bitmap_line_xdyd::e#1
Coalesced down to 125 phi equivalence classes
Culled Empty Block label main::@1
Culled Empty Block label main::@3
Culled Empty Block label menu::@2
Culled Empty Block label menu::@33
Culled Empty Block label menu::@6
Culled Empty Block label menu::@36
Culled Empty Block label menu::@38
Culled Empty Block label menu::@40
Culled Empty Block label menu::@42
Culled Empty Block label menu::@44
Culled Empty Block label menu::@46
Culled Empty Block label menu::@48
Culled Empty Block label menu::@50
Culled Empty Block label menu::@52
Culled Empty Block label menu::@54
Culled Empty Block label menu::@56
Culled Empty Block label menu::@57
Culled Empty Block label menu::@58
Culled Empty Block label print_cls::@1
Culled Empty Block label print_str_lines::@8
Culled Empty Block label print_str_lines::@6
Culled Empty Block label print_str_lines::@9
Culled Empty Block label print_str_lines::@10
Culled Empty Block label mode_stdchar::@7
Culled Empty Block label mode_stdchar::@9
Culled Empty Block label mode_stdchar::@10
Culled Empty Block label mode_stdchar::@8
Culled Empty Block label mode_ecmchar::@7
Culled Empty Block label mode_ecmchar::@9
Culled Empty Block label mode_ecmchar::@10
Culled Empty Block label mode_ecmchar::@8
Culled Empty Block label mode_mcchar::@7
Culled Empty Block label mode_mcchar::@9
Culled Empty Block label mode_mcchar::@10
Culled Empty Block label mode_mcchar::@8
Culled Empty Block label mode_stdbitmap::@11
Culled Empty Block label mode_stdbitmap::@13
Culled Empty Block label mode_stdbitmap::@15
Culled Empty Block label mode_stdbitmap::@16
Culled Empty Block label mode_stdbitmap::@14
Culled Empty Block label mode_hicolstdchar::@7
Culled Empty Block label mode_hicolstdchar::@9
Culled Empty Block label mode_hicolstdchar::@10
Culled Empty Block label mode_hicolstdchar::@8
Culled Empty Block label mode_hicolecmchar::@7
Culled Empty Block label mode_hicolecmchar::@9
Culled Empty Block label mode_hicolecmchar::@10
Culled Empty Block label mode_hicolecmchar::@8
Culled Empty Block label mode_hicolmcchar::@7
Culled Empty Block label mode_hicolmcchar::@9
Culled Empty Block label mode_hicolmcchar::@10
Culled Empty Block label mode_hicolmcchar::@8
Culled Empty Block label mode_sixsfred2::@6
Culled Empty Block label mode_sixsfred2::@10
Culled Empty Block label mode_sixsfred2::@15
Culled Empty Block label mode_sixsfred2::@21
Culled Empty Block label mode_sixsfred2::@22
Culled Empty Block label mode_sixsfred2::@19
Culled Empty Block label mode_sixsfred2::@20
Culled Empty Block label mode_sixsfred2::@17
Culled Empty Block label mode_sixsfred2::@18
Culled Empty Block label mode_sixsfred2::@16
Culled Empty Block label mode_twoplanebitmap::@6
Culled Empty Block label mode_twoplanebitmap::@13
Culled Empty Block label mode_twoplanebitmap::@18
Culled Empty Block label mode_twoplanebitmap::@24
Culled Empty Block label mode_twoplanebitmap::@25
Culled Empty Block label mode_twoplanebitmap::@22
Culled Empty Block label mode_twoplanebitmap::@23
Culled Empty Block label mode_twoplanebitmap::@20
Culled Empty Block label mode_twoplanebitmap::@21
Culled Empty Block label mode_twoplanebitmap::@19
Culled Empty Block label mode_sixsfred::@6
Culled Empty Block label mode_sixsfred::@10
Culled Empty Block label mode_sixsfred::@15
Culled Empty Block label mode_sixsfred::@21
Culled Empty Block label mode_sixsfred::@22
Culled Empty Block label mode_sixsfred::@19
Culled Empty Block label mode_sixsfred::@20
Culled Empty Block label mode_sixsfred::@17
Culled Empty Block label mode_sixsfred::@18
Culled Empty Block label mode_sixsfred::@16
Culled Empty Block label mode_8bpppixelcell::@2
Culled Empty Block label mode_8bpppixelcell::@15
Culled Empty Block label mode_8bpppixelcell::@19
Culled Empty Block label mode_8bpppixelcell::@20
Culled Empty Block label mode_8bpppixelcell::@21
Culled Empty Block label mode_8bpppixelcell::@17
Culled Empty Block label mode_8bpppixelcell::@18
Culled Empty Block label mode_8bpppixelcell::@16
Culled Empty Block label mode_8bppchunkybmm::@9
Culled Empty Block label mode_8bppchunkybmm::@12
Culled Empty Block label mode_8bppchunkybmm::@14
Culled Empty Block label mode_8bppchunkybmm::@15
Culled Empty Block label mode_8bppchunkybmm::@16
Culled Empty Block label mode_8bppchunkybmm::@13
Culled Empty Block label memset::@2
Culled Empty Block label memset::@1
Culled Empty Block label print_ln::@2
Culled Empty Block label print_ln::@3
Culled Empty Block label mode_ctrl::@18
Culled Empty Block label mode_ctrl::@28
Culled Empty Block label mode_ctrl::@34
Culled Empty Block label mode_ctrl::@33
Culled Empty Block label mode_ctrl::@32
Culled Empty Block label mode_ctrl::@31
Culled Empty Block label mode_ctrl::@30
Culled Empty Block label mode_ctrl::@29
Culled Empty Block label bitmap_init::@3
Culled Empty Block label bitmap_init::@4
Culled Empty Block label bitmap_init::@10
Culled Empty Block label bitmap_init::@11
Culled Empty Block label bitmap_init::@8
Culled Empty Block label bitmap_clear::@4
Culled Empty Block label bitmap_clear::@5
Culled Empty Block label bitmap_line::@16
Culled Empty Block label bitmap_line::@15
Culled Empty Block label bitmap_line::@18
Culled Empty Block label bitmap_line::@17
Culled Empty Block label bitmap_line::@20
Culled Empty Block label bitmap_line::@19
Culled Empty Block label bitmap_line::@22
Culled Empty Block label bitmap_line::@21
Culled Empty Block label bitmap_line_ydxi::@5
Culled Empty Block label bitmap_line_ydxi::@6
Culled Empty Block label bitmap_line_xdyi::@5
Culled Empty Block label bitmap_line_xdyi::@6
Culled Empty Block label bitmap_line_ydxd::@5
Culled Empty Block label bitmap_line_ydxd::@6
Culled Empty Block label bitmap_line_xdyd::@5
Culled Empty Block label bitmap_line_xdyd::@6
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block print_str_lines::@7 to print_str_lines::@6
Renumbering block bitmap_init::@5 to bitmap_init::@3
Renumbering block bitmap_init::@6 to bitmap_init::@4
Renumbering block bitmap_init::@7 to bitmap_init::@5
Renumbering block bitmap_init::@9 to bitmap_init::@6
Renumbering block main::@2 to main::@1
Renumbering block menu::@3 to menu::@2
Renumbering block menu::@4 to menu::@3
Renumbering block menu::@5 to menu::@4
Renumbering block menu::@7 to menu::@5
Renumbering block menu::@8 to menu::@6
Renumbering block menu::@9 to menu::@7
Renumbering block menu::@10 to menu::@8
Renumbering block menu::@11 to menu::@9
Renumbering block menu::@12 to menu::@10
Renumbering block menu::@13 to menu::@11
Renumbering block menu::@14 to menu::@12
Renumbering block menu::@15 to menu::@13
Renumbering block menu::@16 to menu::@14
Renumbering block menu::@17 to menu::@15
Renumbering block menu::@18 to menu::@16
Renumbering block menu::@19 to menu::@17
Renumbering block menu::@20 to menu::@18
Renumbering block menu::@21 to menu::@19
Renumbering block menu::@22 to menu::@20
Renumbering block menu::@23 to menu::@21
Renumbering block menu::@24 to menu::@22
Renumbering block menu::@25 to menu::@23
Renumbering block menu::@26 to menu::@24
Renumbering block menu::@27 to menu::@25
Renumbering block menu::@28 to menu::@26
Renumbering block menu::@29 to menu::@27
Renumbering block menu::@30 to menu::@28
Renumbering block menu::@31 to menu::@29
Renumbering block menu::@32 to menu::@30
Renumbering block menu::@34 to menu::@31
Renumbering block menu::@35 to menu::@32
Renumbering block menu::@37 to menu::@33
Renumbering block menu::@39 to menu::@34
Renumbering block menu::@41 to menu::@35
Renumbering block menu::@43 to menu::@36
Renumbering block menu::@45 to menu::@37
Renumbering block menu::@47 to menu::@38
Renumbering block menu::@49 to menu::@39
Renumbering block menu::@51 to menu::@40
Renumbering block menu::@53 to menu::@41
Renumbering block menu::@55 to menu::@42
Renumbering block mode_ctrl::@19 to mode_ctrl::@18
Renumbering block mode_ctrl::@20 to mode_ctrl::@19
Renumbering block mode_ctrl::@21 to mode_ctrl::@20
Renumbering block mode_ctrl::@22 to mode_ctrl::@21
Renumbering block mode_ctrl::@23 to mode_ctrl::@22
Renumbering block mode_ctrl::@24 to mode_ctrl::@23
Renumbering block mode_ctrl::@25 to mode_ctrl::@24
Renumbering block mode_ctrl::@26 to mode_ctrl::@25
Renumbering block mode_ctrl::@27 to mode_ctrl::@26
Renumbering block mode_ctrl::@35 to mode_ctrl::@27
Renumbering block mode_stdbitmap::@12 to mode_stdbitmap::@11
Renumbering block mode_twoplanebitmap::@7 to mode_twoplanebitmap::@6
Renumbering block mode_twoplanebitmap::@8 to mode_twoplanebitmap::@7
Renumbering block mode_twoplanebitmap::@9 to mode_twoplanebitmap::@8
Renumbering block mode_twoplanebitmap::@10 to mode_twoplanebitmap::@9
Renumbering block mode_twoplanebitmap::@11 to mode_twoplanebitmap::@10
Renumbering block mode_twoplanebitmap::@12 to mode_twoplanebitmap::@11
Renumbering block mode_twoplanebitmap::@14 to mode_twoplanebitmap::@12
Renumbering block mode_twoplanebitmap::@15 to mode_twoplanebitmap::@13
Renumbering block mode_twoplanebitmap::@16 to mode_twoplanebitmap::@14
Renumbering block mode_twoplanebitmap::@17 to mode_twoplanebitmap::@15
Renumbering block mode_sixsfred::@7 to mode_sixsfred::@6
Renumbering block mode_sixsfred::@8 to mode_sixsfred::@7
Renumbering block mode_sixsfred::@9 to mode_sixsfred::@8
Renumbering block mode_sixsfred::@11 to mode_sixsfred::@9
Renumbering block mode_sixsfred::@12 to mode_sixsfred::@10
Renumbering block mode_sixsfred::@13 to mode_sixsfred::@11
Renumbering block mode_sixsfred::@14 to mode_sixsfred::@12
Renumbering block mode_sixsfred2::@7 to mode_sixsfred2::@6
Renumbering block mode_sixsfred2::@8 to mode_sixsfred2::@7
Renumbering block mode_sixsfred2::@9 to mode_sixsfred2::@8
Renumbering block mode_sixsfred2::@11 to mode_sixsfred2::@9
Renumbering block mode_sixsfred2::@12 to mode_sixsfred2::@10
Renumbering block mode_sixsfred2::@13 to mode_sixsfred2::@11
Renumbering block mode_sixsfred2::@14 to mode_sixsfred2::@12
Renumbering block mode_8bpppixelcell::@3 to mode_8bpppixelcell::@2
Renumbering block mode_8bpppixelcell::@4 to mode_8bpppixelcell::@3
Renumbering block mode_8bpppixelcell::@5 to mode_8bpppixelcell::@4
Renumbering block mode_8bpppixelcell::@6 to mode_8bpppixelcell::@5
Renumbering block mode_8bpppixelcell::@7 to mode_8bpppixelcell::@6
Renumbering block mode_8bpppixelcell::@8 to mode_8bpppixelcell::@7
Renumbering block mode_8bpppixelcell::@9 to mode_8bpppixelcell::@8
Renumbering block mode_8bpppixelcell::@10 to mode_8bpppixelcell::@9
Renumbering block mode_8bpppixelcell::@11 to mode_8bpppixelcell::@10
Renumbering block mode_8bpppixelcell::@12 to mode_8bpppixelcell::@11
Renumbering block mode_8bpppixelcell::@13 to mode_8bpppixelcell::@12
Renumbering block mode_8bpppixelcell::@14 to mode_8bpppixelcell::@13
Renumbering block mode_8bppchunkybmm::@10 to mode_8bppchunkybmm::@9
Renumbering block mode_8bppchunkybmm::@11 to mode_8bppchunkybmm::@10
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of menu::@29
Adding NOP phi() at start of menu::@30
Adding NOP phi() at start of menu::@5
Adding NOP phi() at start of menu::@17
Adding NOP phi() at start of menu::@6
Adding NOP phi() at start of menu::@18
Adding NOP phi() at start of menu::@7
Adding NOP phi() at start of menu::@19
Adding NOP phi() at start of menu::@8
Adding NOP phi() at start of menu::@20
Adding NOP phi() at start of menu::@9
Adding NOP phi() at start of menu::@21
Adding NOP phi() at start of menu::@10
Adding NOP phi() at start of menu::@22
Adding NOP phi() at start of menu::@11
Adding NOP phi() at start of menu::@23
Adding NOP phi() at start of menu::@12
Adding NOP phi() at start of menu::@24
Adding NOP phi() at start of menu::@13
Adding NOP phi() at start of menu::@25
Adding NOP phi() at start of menu::@14
Adding NOP phi() at start of menu::@26
Adding NOP phi() at start of menu::@15
Adding NOP phi() at start of menu::@27
Adding NOP phi() at start of menu::@16
Adding NOP phi() at start of menu::@28
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_str_lines
Adding NOP phi() at start of print_str_lines::@5
Adding NOP phi() at start of mode_stdchar::@6
Adding NOP phi() at start of mode_ecmchar::@6
Adding NOP phi() at start of mode_mcchar::@6
Adding NOP phi() at start of mode_stdbitmap::@6
Adding NOP phi() at start of mode_stdbitmap::@10
Adding NOP phi() at start of mode_stdbitmap::@9
Adding NOP phi() at start of mode_hicolstdchar::@6
Adding NOP phi() at start of mode_hicolecmchar::@6
Adding NOP phi() at start of mode_hicolmcchar::@6
Adding NOP phi() at start of mode_sixsfred2::@12
Adding NOP phi() at start of mode_twoplanebitmap::@15
Adding NOP phi() at start of mode_sixsfred::@12
Adding NOP phi() at start of mode_8bppchunkybmm::@2
Adding NOP phi() at start of mode_8bppchunkybmm::@8
Adding NOP phi() at start of mode_8bppchunkybmm::@10
Adding NOP phi() at start of memset
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of mode_ctrl::@3
Adding NOP phi() at start of mode_ctrl::@27
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@6

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  [2] *PROCPORT = PROCPORT_RAM_IO
  [3] *DTV_FEATURE = DTV_FEATURE_ENABLE
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [4] phi()
  [5] call menu 
  to:main::@1

void menu()
menu: scope:[menu]  from main::@1
  [6] *DTV_GRAPHICS_VIC_BANK = 0
  [7] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
  [8] *DTV_COLOR_BANK_HI = 0
  [9] *DTV_CONTROL = 0
  [10] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  [11] *((byte*)CIA2) = 3^(byte)(word)menu::CHARSET/$4000
  [12] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
  [13] *VIC_CONTROL2 = VIC_CSEL
  [14] *VIC_MEMORY = (byte)(word)menu::CHARSET&$3fff/$400
  to:menu::@1
menu::@1: scope:[menu]  from menu menu::@1
  [15] menu::i#2 = phi( menu/0, menu::@1/menu::i#1 )
  [16] DTV_PALETTE[menu::i#2] = DTV_PALETTE_DEFAULT[menu::i#2]
  [17] menu::i#1 = ++ menu::i#2
  [18] if(menu::i#1!=$10) goto menu::@1
  to:menu::@2
menu::@2: scope:[menu]  from menu::@1 menu::@3
  [19] menu::c#2 = phi( menu::@1/COLS, menu::@3/menu::c#1 )
  [20] if(menu::c#2!=COLS+$3e8) goto menu::@3
  to:menu::@4
menu::@4: scope:[menu]  from menu::@2
  [21] *BG_COLOR = 0
  [22] *BORDER_COLOR = 0
  to:menu::@29
menu::@29: scope:[menu]  from menu::@4
  [23] phi()
  [24] call print_cls 
  to:menu::@30
menu::@30: scope:[menu]  from menu::@29
  [25] phi()
  [26] call print_str_lines 
  to:menu::@5
menu::@5: scope:[menu]  from menu::@30 menu::@42
  [27] phi()
  [28] call keyboard_key_pressed 
  [29] keyboard_key_pressed::return#2 = keyboard_key_pressed::return#0
  to:menu::@31
menu::@31: scope:[menu]  from menu::@5
  [30] menu::$5 = keyboard_key_pressed::return#2
  [31] if(menu::$5==0) goto menu::@6
  to:menu::@17
menu::@17: scope:[menu]  from menu::@31
  [32] phi()
  [33] call mode_stdchar 
  to:menu::@return
menu::@return: scope:[menu]  from menu::@17 menu::@18 menu::@19 menu::@20 menu::@21 menu::@22 menu::@23 menu::@24 menu::@25 menu::@26 menu::@27 menu::@28
  [34] return 
  to:@return
menu::@6: scope:[menu]  from menu::@31
  [35] phi()
  [36] call keyboard_key_pressed 
  [37] keyboard_key_pressed::return#24 = keyboard_key_pressed::return#0
  to:menu::@32
menu::@32: scope:[menu]  from menu::@6
  [38] menu::$9 = keyboard_key_pressed::return#24
  [39] if(menu::$9==0) goto menu::@7
  to:menu::@18
menu::@18: scope:[menu]  from menu::@32
  [40] phi()
  [41] call mode_ecmchar 
  to:menu::@return
menu::@7: scope:[menu]  from menu::@32
  [42] phi()
  [43] call keyboard_key_pressed 
  [44] keyboard_key_pressed::return#25 = keyboard_key_pressed::return#0
  to:menu::@33
menu::@33: scope:[menu]  from menu::@7
  [45] menu::$13 = keyboard_key_pressed::return#25
  [46] if(menu::$13==0) goto menu::@8
  to:menu::@19
menu::@19: scope:[menu]  from menu::@33
  [47] phi()
  [48] call mode_mcchar 
  to:menu::@return
menu::@8: scope:[menu]  from menu::@33
  [49] phi()
  [50] call keyboard_key_pressed 
  [51] keyboard_key_pressed::return#26 = keyboard_key_pressed::return#0
  to:menu::@34
menu::@34: scope:[menu]  from menu::@8
  [52] menu::$17 = keyboard_key_pressed::return#26
  [53] if(menu::$17==0) goto menu::@9
  to:menu::@20
menu::@20: scope:[menu]  from menu::@34
  [54] phi()
  [55] call mode_stdbitmap 
  to:menu::@return
menu::@9: scope:[menu]  from menu::@34
  [56] phi()
  [57] call keyboard_key_pressed 
  [58] keyboard_key_pressed::return#27 = keyboard_key_pressed::return#0
  to:menu::@35
menu::@35: scope:[menu]  from menu::@9
  [59] menu::$21 = keyboard_key_pressed::return#27
  [60] if(menu::$21==0) goto menu::@10
  to:menu::@21
menu::@21: scope:[menu]  from menu::@35
  [61] phi()
  [62] call mode_hicolstdchar 
  to:menu::@return
menu::@10: scope:[menu]  from menu::@35
  [63] phi()
  [64] call keyboard_key_pressed 
  [65] keyboard_key_pressed::return#28 = keyboard_key_pressed::return#0
  to:menu::@36
menu::@36: scope:[menu]  from menu::@10
  [66] menu::$25 = keyboard_key_pressed::return#28
  [67] if(menu::$25==0) goto menu::@11
  to:menu::@22
menu::@22: scope:[menu]  from menu::@36
  [68] phi()
  [69] call mode_hicolecmchar 
  to:menu::@return
menu::@11: scope:[menu]  from menu::@36
  [70] phi()
  [71] call keyboard_key_pressed 
  [72] keyboard_key_pressed::return#29 = keyboard_key_pressed::return#0
  to:menu::@37
menu::@37: scope:[menu]  from menu::@11
  [73] menu::$29 = keyboard_key_pressed::return#29
  [74] if(menu::$29==0) goto menu::@12
  to:menu::@23
menu::@23: scope:[menu]  from menu::@37
  [75] phi()
  [76] call mode_hicolmcchar 
  to:menu::@return
menu::@12: scope:[menu]  from menu::@37
  [77] phi()
  [78] call keyboard_key_pressed 
  [79] keyboard_key_pressed::return#30 = keyboard_key_pressed::return#0
  to:menu::@38
menu::@38: scope:[menu]  from menu::@12
  [80] menu::$33 = keyboard_key_pressed::return#30
  [81] if(menu::$33==0) goto menu::@13
  to:menu::@24
menu::@24: scope:[menu]  from menu::@38
  [82] phi()
  [83] call mode_sixsfred2 
  to:menu::@return
menu::@13: scope:[menu]  from menu::@38
  [84] phi()
  [85] call keyboard_key_pressed 
  [86] keyboard_key_pressed::return#10 = keyboard_key_pressed::return#0
  to:menu::@39
menu::@39: scope:[menu]  from menu::@13
  [87] menu::$37 = keyboard_key_pressed::return#10
  [88] if(menu::$37==0) goto menu::@14
  to:menu::@25
menu::@25: scope:[menu]  from menu::@39
  [89] phi()
  [90] call mode_twoplanebitmap 
  to:menu::@return
menu::@14: scope:[menu]  from menu::@39
  [91] phi()
  [92] call keyboard_key_pressed 
  [93] keyboard_key_pressed::return#11 = keyboard_key_pressed::return#0
  to:menu::@40
menu::@40: scope:[menu]  from menu::@14
  [94] menu::$41 = keyboard_key_pressed::return#11
  [95] if(menu::$41==0) goto menu::@15
  to:menu::@26
menu::@26: scope:[menu]  from menu::@40
  [96] phi()
  [97] call mode_sixsfred 
  to:menu::@return
menu::@15: scope:[menu]  from menu::@40
  [98] phi()
  [99] call keyboard_key_pressed 
  [100] keyboard_key_pressed::return#12 = keyboard_key_pressed::return#0
  to:menu::@41
menu::@41: scope:[menu]  from menu::@15
  [101] menu::$45 = keyboard_key_pressed::return#12
  [102] if(menu::$45==0) goto menu::@16
  to:menu::@27
menu::@27: scope:[menu]  from menu::@41
  [103] phi()
  [104] call mode_8bpppixelcell 
  to:menu::@return
menu::@16: scope:[menu]  from menu::@41
  [105] phi()
  [106] call keyboard_key_pressed 
  [107] keyboard_key_pressed::return#13 = keyboard_key_pressed::return#0
  to:menu::@42
menu::@42: scope:[menu]  from menu::@16
  [108] menu::$49 = keyboard_key_pressed::return#13
  [109] if(menu::$49==0) goto menu::@5
  to:menu::@28
menu::@28: scope:[menu]  from menu::@42
  [110] phi()
  [111] call mode_8bppchunkybmm 
  to:menu::@return
menu::@3: scope:[menu]  from menu::@2
  [112] *menu::c#2 = LIGHT_GREEN
  [113] menu::c#1 = ++ menu::c#2
  to:menu::@2

void print_cls()
print_cls: scope:[print_cls]  from menu::@29
  [114] phi()
  [115] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [116] return 
  to:@return

void print_str_lines(byte* print_str_lines::str)
print_str_lines: scope:[print_str_lines]  from menu::@30
  [117] phi()
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@6
  [118] print_line_cursor#1 = phi( print_str_lines/menu::SCREEN, print_str_lines::@6/print_line_cursor#2 )
  [118] print_char_cursor#2 = phi( print_str_lines/menu::SCREEN, print_str_lines::@6/print_char_cursor#103 )
  [118] print_str_lines::str#2 = phi( print_str_lines/MENU_TEXT, print_str_lines::@6/print_str_lines::str#0 )
  [119] if(0!=*print_str_lines::str#2) goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  [120] return 
  to:@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@3
  [121] print_char_cursor#37 = phi( print_str_lines::@1/print_char_cursor#2, print_str_lines::@3/print_char_cursor#38 )
  [121] print_str_lines::str#3 = phi( print_str_lines::@1/print_str_lines::str#2, print_str_lines::@3/print_str_lines::str#0 )
  [122] print_str_lines::ch#0 = *print_str_lines::str#3
  [123] print_str_lines::str#0 = ++ print_str_lines::str#3
  [124] if(0==print_str_lines::ch#0) goto print_str_lines::@3
  to:print_str_lines::@4
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2
  [125] print_char::ch#0 = print_str_lines::ch#0
  [126] call print_char 
  to:print_str_lines::@3
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@4
  [127] print_char_cursor#38 = phi( print_str_lines::@2/print_char_cursor#37, print_str_lines::@4/print_char_cursor#26 )
  [128] if(0!=print_str_lines::ch#0) goto print_str_lines::@2
  to:print_str_lines::@5
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@3
  [129] phi()
  [130] call print_ln 
  to:print_str_lines::@6
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@5
  [131] print_char_cursor#103 = print_line_cursor#2
  to:print_str_lines::@1

byte keyboard_key_pressed(byte keyboard_key_pressed::key)
keyboard_key_pressed: scope:[keyboard_key_pressed]  from menu::@10 menu::@11 menu::@12 menu::@13 menu::@14 menu::@15 menu::@16 menu::@5 menu::@6 menu::@7 menu::@8 menu::@9 mode_ctrl::@10 mode_ctrl::@3 mode_ctrl::@4 mode_ctrl::@5 mode_ctrl::@6 mode_ctrl::@7 mode_ctrl::@8 mode_ctrl::@9
  [132] keyboard_key_pressed::key#20 = phi( menu::@8/KEY_4, menu::@9/KEY_6, menu::@10/KEY_7, menu::@11/KEY_8, menu::@12/KEY_A, menu::@13/KEY_B, menu::@14/KEY_C, menu::@15/KEY_D, menu::@16/KEY_E, menu::@5/KEY_1, menu::@6/KEY_2, menu::@7/KEY_3, mode_ctrl::@10/KEY_0, mode_ctrl::@3/KEY_SPACE, mode_ctrl::@4/KEY_L, mode_ctrl::@5/KEY_H, mode_ctrl::@6/KEY_O, mode_ctrl::@7/KEY_B, mode_ctrl::@8/KEY_U, mode_ctrl::@9/KEY_C )
  [133] keyboard_key_pressed::colidx#0 = keyboard_key_pressed::key#20 & 7
  [134] keyboard_key_pressed::rowidx#0 = keyboard_key_pressed::key#20 >> 3
  [135] keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0
  [136] call keyboard_matrix_read 
  [137] keyboard_matrix_read::return#2 = keyboard_matrix_read::return#0
  to:keyboard_key_pressed::@1
keyboard_key_pressed::@1: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  [138] keyboard_key_pressed::$2 = keyboard_matrix_read::return#2
  [139] keyboard_key_pressed::return#0 = keyboard_key_pressed::$2 & keyboard_matrix_col_bitmask[keyboard_key_pressed::colidx#0]
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@1
  [140] return 
  to:@return

void mode_stdchar()
mode_stdchar: scope:[mode_stdchar]  from menu::@17
  [141] *DTV_GRAPHICS_VIC_BANK = 0
  [142] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
  [143] *DTV_COLOR_BANK_HI = 0
  [144] *DTV_CONTROL = 0
  [145] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  [146] *((byte*)CIA2) = 3^(byte)(word)mode_stdchar::CHARSET/$4000
  [147] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
  [148] *VIC_CONTROL2 = VIC_CSEL
  [149] *VIC_MEMORY = (byte)(word)mode_stdchar::CHARSET&$3fff/$400
  to:mode_stdchar::@1
mode_stdchar::@1: scope:[mode_stdchar]  from mode_stdchar mode_stdchar::@1
  [150] mode_stdchar::i#2 = phi( mode_stdchar/0, mode_stdchar::@1/mode_stdchar::i#1 )
  [151] DTV_PALETTE[mode_stdchar::i#2] = DTV_PALETTE_DEFAULT[mode_stdchar::i#2]
  [152] mode_stdchar::i#1 = ++ mode_stdchar::i#2
  [153] if(mode_stdchar::i#1!=$10) goto mode_stdchar::@1
  to:mode_stdchar::@2
mode_stdchar::@2: scope:[mode_stdchar]  from mode_stdchar::@1
  [154] *BG_COLOR = 0
  [155] *BORDER_COLOR = 0
  to:mode_stdchar::@3
mode_stdchar::@3: scope:[mode_stdchar]  from mode_stdchar::@2 mode_stdchar::@5
  [156] mode_stdchar::ch#3 = phi( mode_stdchar::@2/mode_stdchar::SCREEN, mode_stdchar::@5/mode_stdchar::ch#1 )
  [156] mode_stdchar::col#3 = phi( mode_stdchar::@2/mode_stdchar::COLORS, mode_stdchar::@5/mode_stdchar::col#1 )
  [156] mode_stdchar::cy#4 = phi( mode_stdchar::@2/0, mode_stdchar::@5/mode_stdchar::cy#1 )
  to:mode_stdchar::@4
mode_stdchar::@4: scope:[mode_stdchar]  from mode_stdchar::@3 mode_stdchar::@4
  [157] mode_stdchar::ch#2 = phi( mode_stdchar::@3/mode_stdchar::ch#3, mode_stdchar::@4/mode_stdchar::ch#1 )
  [157] mode_stdchar::col#2 = phi( mode_stdchar::@3/mode_stdchar::col#3, mode_stdchar::@4/mode_stdchar::col#1 )
  [157] mode_stdchar::cx#2 = phi( mode_stdchar::@3/0, mode_stdchar::@4/mode_stdchar::cx#1 )
  [158] mode_stdchar::$2 = mode_stdchar::cx#2 + mode_stdchar::cy#4
  [159] mode_stdchar::$3 = mode_stdchar::$2 & $f
  [160] *mode_stdchar::col#2 = mode_stdchar::$3
  [161] mode_stdchar::col#1 = ++ mode_stdchar::col#2
  [162] mode_stdchar::$4 = mode_stdchar::cy#4 & $f
  [163] mode_stdchar::$5 = mode_stdchar::$4 << 4
  [164] mode_stdchar::$6 = mode_stdchar::cx#2 & $f
  [165] mode_stdchar::$7 = mode_stdchar::$5 | mode_stdchar::$6
  [166] *mode_stdchar::ch#2 = mode_stdchar::$7
  [167] mode_stdchar::ch#1 = ++ mode_stdchar::ch#2
  [168] mode_stdchar::cx#1 = ++ mode_stdchar::cx#2
  [169] if(mode_stdchar::cx#1!=$28) goto mode_stdchar::@4
  to:mode_stdchar::@5
mode_stdchar::@5: scope:[mode_stdchar]  from mode_stdchar::@4
  [170] mode_stdchar::cy#1 = ++ mode_stdchar::cy#4
  [171] if(mode_stdchar::cy#1!=$19) goto mode_stdchar::@3
  to:mode_stdchar::@6
mode_stdchar::@6: scope:[mode_stdchar]  from mode_stdchar::@5
  [172] phi()
  [173] call mode_ctrl 
  to:mode_stdchar::@return
mode_stdchar::@return: scope:[mode_stdchar]  from mode_stdchar::@6
  [174] return 
  to:@return

void mode_ecmchar()
mode_ecmchar: scope:[mode_ecmchar]  from menu::@18
  [175] *DTV_GRAPHICS_VIC_BANK = 0
  [176] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
  [177] *DTV_COLOR_BANK_HI = 0
  [178] *DTV_CONTROL = 0
  [179] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  [180] *((byte*)CIA2) = 3^(byte)(word)mode_ecmchar::CHARSET/$4000
  [181] *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3
  [182] *VIC_CONTROL2 = VIC_CSEL
  [183] *VIC_MEMORY = (byte)(word)mode_ecmchar::CHARSET&$3fff/$400
  to:mode_ecmchar::@1
mode_ecmchar::@1: scope:[mode_ecmchar]  from mode_ecmchar mode_ecmchar::@1
  [184] mode_ecmchar::i#2 = phi( mode_ecmchar/0, mode_ecmchar::@1/mode_ecmchar::i#1 )
  [185] DTV_PALETTE[mode_ecmchar::i#2] = DTV_PALETTE_DEFAULT[mode_ecmchar::i#2]
  [186] mode_ecmchar::i#1 = ++ mode_ecmchar::i#2
  [187] if(mode_ecmchar::i#1!=$10) goto mode_ecmchar::@1
  to:mode_ecmchar::@2
mode_ecmchar::@2: scope:[mode_ecmchar]  from mode_ecmchar::@1
  [188] *BORDER_COLOR = 0
  [189] *BG_COLOR = 0
  [190] *BG_COLOR1 = 2
  [191] *BG_COLOR2 = 5
  [192] *BG_COLOR3 = 6
  to:mode_ecmchar::@3
mode_ecmchar::@3: scope:[mode_ecmchar]  from mode_ecmchar::@2 mode_ecmchar::@5
  [193] mode_ecmchar::ch#3 = phi( mode_ecmchar::@2/mode_ecmchar::SCREEN, mode_ecmchar::@5/mode_ecmchar::ch#1 )
  [193] mode_ecmchar::col#3 = phi( mode_ecmchar::@2/mode_ecmchar::COLORS, mode_ecmchar::@5/mode_ecmchar::col#1 )
  [193] mode_ecmchar::cy#4 = phi( mode_ecmchar::@2/0, mode_ecmchar::@5/mode_ecmchar::cy#1 )
  to:mode_ecmchar::@4
mode_ecmchar::@4: scope:[mode_ecmchar]  from mode_ecmchar::@3 mode_ecmchar::@4
  [194] mode_ecmchar::ch#2 = phi( mode_ecmchar::@3/mode_ecmchar::ch#3, mode_ecmchar::@4/mode_ecmchar::ch#1 )
  [194] mode_ecmchar::col#2 = phi( mode_ecmchar::@3/mode_ecmchar::col#3, mode_ecmchar::@4/mode_ecmchar::col#1 )
  [194] mode_ecmchar::cx#2 = phi( mode_ecmchar::@3/0, mode_ecmchar::@4/mode_ecmchar::cx#1 )
  [195] mode_ecmchar::$2 = mode_ecmchar::cx#2 + mode_ecmchar::cy#4
  [196] mode_ecmchar::$3 = mode_ecmchar::$2 & $f
  [197] *mode_ecmchar::col#2 = mode_ecmchar::$3
  [198] mode_ecmchar::col#1 = ++ mode_ecmchar::col#2
  [199] mode_ecmchar::$4 = mode_ecmchar::cy#4 & $f
  [200] mode_ecmchar::$5 = mode_ecmchar::$4 << 4
  [201] mode_ecmchar::$6 = mode_ecmchar::cx#2 & $f
  [202] mode_ecmchar::$7 = mode_ecmchar::$5 | mode_ecmchar::$6
  [203] *mode_ecmchar::ch#2 = mode_ecmchar::$7
  [204] mode_ecmchar::ch#1 = ++ mode_ecmchar::ch#2
  [205] mode_ecmchar::cx#1 = ++ mode_ecmchar::cx#2
  [206] if(mode_ecmchar::cx#1!=$28) goto mode_ecmchar::@4
  to:mode_ecmchar::@5
mode_ecmchar::@5: scope:[mode_ecmchar]  from mode_ecmchar::@4
  [207] mode_ecmchar::cy#1 = ++ mode_ecmchar::cy#4
  [208] if(mode_ecmchar::cy#1!=$19) goto mode_ecmchar::@3
  to:mode_ecmchar::@6
mode_ecmchar::@6: scope:[mode_ecmchar]  from mode_ecmchar::@5
  [209] phi()
  [210] call mode_ctrl 
  to:mode_ecmchar::@return
mode_ecmchar::@return: scope:[mode_ecmchar]  from mode_ecmchar::@6
  [211] return 
  to:@return

void mode_mcchar()
mode_mcchar: scope:[mode_mcchar]  from menu::@19
  [212] *DTV_GRAPHICS_VIC_BANK = 0
  [213] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400
  [214] *DTV_COLOR_BANK_HI = 0
  [215] *DTV_CONTROL = 0
  [216] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  [217] *((byte*)CIA2) = 3^(byte)(word)mode_mcchar::CHARSET/$4000
  [218] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
  [219] *VIC_CONTROL2 = VIC_CSEL|VIC_MCM
  [220] *VIC_MEMORY = (byte)(word)mode_mcchar::CHARSET&$3fff/$400
  to:mode_mcchar::@1
mode_mcchar::@1: scope:[mode_mcchar]  from mode_mcchar mode_mcchar::@1
  [221] mode_mcchar::i#2 = phi( mode_mcchar/0, mode_mcchar::@1/mode_mcchar::i#1 )
  [222] DTV_PALETTE[mode_mcchar::i#2] = DTV_PALETTE_DEFAULT[mode_mcchar::i#2]
  [223] mode_mcchar::i#1 = ++ mode_mcchar::i#2
  [224] if(mode_mcchar::i#1!=$10) goto mode_mcchar::@1
  to:mode_mcchar::@2
mode_mcchar::@2: scope:[mode_mcchar]  from mode_mcchar::@1
  [225] *BORDER_COLOR = 0
  [226] *BG_COLOR = BLACK
  [227] *BG_COLOR1 = GREEN
  [228] *BG_COLOR2 = BLUE
  to:mode_mcchar::@3
mode_mcchar::@3: scope:[mode_mcchar]  from mode_mcchar::@2 mode_mcchar::@5
  [229] mode_mcchar::ch#3 = phi( mode_mcchar::@2/mode_mcchar::SCREEN, mode_mcchar::@5/mode_mcchar::ch#1 )
  [229] mode_mcchar::col#3 = phi( mode_mcchar::@2/mode_mcchar::COLORS, mode_mcchar::@5/mode_mcchar::col#1 )
  [229] mode_mcchar::cy#4 = phi( mode_mcchar::@2/0, mode_mcchar::@5/mode_mcchar::cy#1 )
  to:mode_mcchar::@4
mode_mcchar::@4: scope:[mode_mcchar]  from mode_mcchar::@3 mode_mcchar::@4
  [230] mode_mcchar::ch#2 = phi( mode_mcchar::@3/mode_mcchar::ch#3, mode_mcchar::@4/mode_mcchar::ch#1 )
  [230] mode_mcchar::col#2 = phi( mode_mcchar::@3/mode_mcchar::col#3, mode_mcchar::@4/mode_mcchar::col#1 )
  [230] mode_mcchar::cx#2 = phi( mode_mcchar::@3/0, mode_mcchar::@4/mode_mcchar::cx#1 )
  [231] mode_mcchar::$2 = mode_mcchar::cx#2 + mode_mcchar::cy#4
  [232] mode_mcchar::$3 = mode_mcchar::$2 & $f
  [233] *mode_mcchar::col#2 = mode_mcchar::$3
  [234] mode_mcchar::col#1 = ++ mode_mcchar::col#2
  [235] mode_mcchar::$4 = mode_mcchar::cy#4 & $f
  [236] mode_mcchar::$5 = mode_mcchar::$4 << 4
  [237] mode_mcchar::$6 = mode_mcchar::cx#2 & $f
  [238] mode_mcchar::$7 = mode_mcchar::$5 | mode_mcchar::$6
  [239] *mode_mcchar::ch#2 = mode_mcchar::$7
  [240] mode_mcchar::ch#1 = ++ mode_mcchar::ch#2
  [241] mode_mcchar::cx#1 = ++ mode_mcchar::cx#2
  [242] if(mode_mcchar::cx#1!=$28) goto mode_mcchar::@4
  to:mode_mcchar::@5
mode_mcchar::@5: scope:[mode_mcchar]  from mode_mcchar::@4
  [243] mode_mcchar::cy#1 = ++ mode_mcchar::cy#4
  [244] if(mode_mcchar::cy#1!=$19) goto mode_mcchar::@3
  to:mode_mcchar::@6
mode_mcchar::@6: scope:[mode_mcchar]  from mode_mcchar::@5
  [245] phi()
  [246] call mode_ctrl 
  to:mode_mcchar::@return
mode_mcchar::@return: scope:[mode_mcchar]  from mode_mcchar::@6
  [247] return 
  to:@return

void mode_stdbitmap()
mode_stdbitmap: scope:[mode_stdbitmap]  from menu::@20
  [248] *DTV_GRAPHICS_VIC_BANK = 0
  [249] *DTV_CONTROL = 0
  [250] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  [251] *((byte*)CIA2) = 3^(byte)(word)mode_stdbitmap::BITMAP/$4000
  [252] *VIC_CONTROL = VIC_BMM|VIC_DEN|VIC_RSEL|3
  [253] *VIC_CONTROL2 = VIC_CSEL
  [254] *VIC_MEMORY = (byte)(word)mode_stdbitmap::BITMAP&$3fff/$400
  to:mode_stdbitmap::@1
mode_stdbitmap::@1: scope:[mode_stdbitmap]  from mode_stdbitmap mode_stdbitmap::@1
  [255] mode_stdbitmap::i#2 = phi( mode_stdbitmap/0, mode_stdbitmap::@1/mode_stdbitmap::i#1 )
  [256] DTV_PALETTE[mode_stdbitmap::i#2] = DTV_PALETTE_DEFAULT[mode_stdbitmap::i#2]
  [257] mode_stdbitmap::i#1 = ++ mode_stdbitmap::i#2
  [258] if(mode_stdbitmap::i#1!=$10) goto mode_stdbitmap::@1
  to:mode_stdbitmap::@2
mode_stdbitmap::@2: scope:[mode_stdbitmap]  from mode_stdbitmap::@1
  [259] *BG_COLOR = BLACK
  [260] *BORDER_COLOR = BLACK
  to:mode_stdbitmap::@3
mode_stdbitmap::@3: scope:[mode_stdbitmap]  from mode_stdbitmap::@2 mode_stdbitmap::@5
  [261] mode_stdbitmap::ch#3 = phi( mode_stdbitmap::@2/mode_stdbitmap::SCREEN, mode_stdbitmap::@5/mode_stdbitmap::ch#1 )
  [261] mode_stdbitmap::cy#4 = phi( mode_stdbitmap::@2/0, mode_stdbitmap::@5/mode_stdbitmap::cy#1 )
  to:mode_stdbitmap::@4
mode_stdbitmap::@4: scope:[mode_stdbitmap]  from mode_stdbitmap::@3 mode_stdbitmap::@4
  [262] mode_stdbitmap::ch#2 = phi( mode_stdbitmap::@3/mode_stdbitmap::ch#3, mode_stdbitmap::@4/mode_stdbitmap::ch#1 )
  [262] mode_stdbitmap::cx#2 = phi( mode_stdbitmap::@3/0, mode_stdbitmap::@4/mode_stdbitmap::cx#1 )
  [263] mode_stdbitmap::$4 = mode_stdbitmap::cx#2 + mode_stdbitmap::cy#4
  [264] mode_stdbitmap::col#0 = mode_stdbitmap::$4 & $f
  [265] mode_stdbitmap::col2#0 = $f - mode_stdbitmap::col#0
  [266] mode_stdbitmap::$7 = mode_stdbitmap::col#0 << 4
  [267] mode_stdbitmap::$8 = mode_stdbitmap::$7 | mode_stdbitmap::col2#0
  [268] *mode_stdbitmap::ch#2 = mode_stdbitmap::$8
  [269] mode_stdbitmap::ch#1 = ++ mode_stdbitmap::ch#2
  [270] mode_stdbitmap::cx#1 = ++ mode_stdbitmap::cx#2
  [271] if(mode_stdbitmap::cx#1!=$28) goto mode_stdbitmap::@4
  to:mode_stdbitmap::@5
mode_stdbitmap::@5: scope:[mode_stdbitmap]  from mode_stdbitmap::@4
  [272] mode_stdbitmap::cy#1 = ++ mode_stdbitmap::cy#4
  [273] if(mode_stdbitmap::cy#1!=$19) goto mode_stdbitmap::@3
  to:mode_stdbitmap::@6
mode_stdbitmap::@6: scope:[mode_stdbitmap]  from mode_stdbitmap::@5
  [274] phi()
  [275] call bitmap_init 
  to:mode_stdbitmap::@10
mode_stdbitmap::@10: scope:[mode_stdbitmap]  from mode_stdbitmap::@6
  [276] phi()
  [277] call bitmap_clear 
  to:mode_stdbitmap::@7
mode_stdbitmap::@7: scope:[mode_stdbitmap]  from mode_stdbitmap::@10 mode_stdbitmap::@11
  [278] mode_stdbitmap::l#2 = phi( mode_stdbitmap::@10/0, mode_stdbitmap::@11/mode_stdbitmap::l#1 )
  [279] if(mode_stdbitmap::l#2<mode_stdbitmap::lines_cnt) goto mode_stdbitmap::@8
  to:mode_stdbitmap::@9
mode_stdbitmap::@9: scope:[mode_stdbitmap]  from mode_stdbitmap::@7
  [280] phi()
  [281] call mode_ctrl 
  to:mode_stdbitmap::@return
mode_stdbitmap::@return: scope:[mode_stdbitmap]  from mode_stdbitmap::@9
  [282] return 
  to:@return
mode_stdbitmap::@8: scope:[mode_stdbitmap]  from mode_stdbitmap::@7
  [283] bitmap_line::x0#0 = mode_stdbitmap::lines_x[mode_stdbitmap::l#2]
  [284] bitmap_line::x1#0 = (mode_stdbitmap::lines_x+1)[mode_stdbitmap::l#2]
  [285] bitmap_line::y0#0 = mode_stdbitmap::lines_y[mode_stdbitmap::l#2]
  [286] bitmap_line::y1#0 = (mode_stdbitmap::lines_y+1)[mode_stdbitmap::l#2]
  [287] call bitmap_line 
  to:mode_stdbitmap::@11
mode_stdbitmap::@11: scope:[mode_stdbitmap]  from mode_stdbitmap::@8
  [288] mode_stdbitmap::l#1 = ++ mode_stdbitmap::l#2
  to:mode_stdbitmap::@7

void mode_hicolstdchar()
mode_hicolstdchar: scope:[mode_hicolstdchar]  from menu::@21
  [289] *DTV_GRAPHICS_VIC_BANK = 0
  [290] *DTV_COLOR_BANK_LO = <(word)mode_hicolstdchar::COLORS/$400
  [291] *DTV_COLOR_BANK_HI = 0
  [292] *DTV_CONTROL = DTV_HIGHCOLOR
  [293] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  [294] *((byte*)CIA2) = 3^(byte)(word)mode_hicolstdchar::CHARSET/$4000
  [295] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
  [296] *VIC_CONTROL2 = VIC_CSEL
  [297] *VIC_MEMORY = (byte)(word)mode_hicolstdchar::CHARSET&$3fff/$400
  to:mode_hicolstdchar::@1
mode_hicolstdchar::@1: scope:[mode_hicolstdchar]  from mode_hicolstdchar mode_hicolstdchar::@1
  [298] mode_hicolstdchar::i#2 = phi( mode_hicolstdchar/0, mode_hicolstdchar::@1/mode_hicolstdchar::i#1 )
  [299] DTV_PALETTE[mode_hicolstdchar::i#2] = mode_hicolstdchar::i#2
  [300] mode_hicolstdchar::i#1 = ++ mode_hicolstdchar::i#2
  [301] if(mode_hicolstdchar::i#1!=$10) goto mode_hicolstdchar::@1
  to:mode_hicolstdchar::@2
mode_hicolstdchar::@2: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@1
  [302] *BG_COLOR = 0
  [303] *BORDER_COLOR = 0
  to:mode_hicolstdchar::@3
mode_hicolstdchar::@3: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@2 mode_hicolstdchar::@5
  [304] mode_hicolstdchar::ch#3 = phi( mode_hicolstdchar::@2/mode_hicolstdchar::SCREEN, mode_hicolstdchar::@5/mode_hicolstdchar::ch#1 )
  [304] mode_hicolstdchar::col#3 = phi( mode_hicolstdchar::@2/mode_hicolstdchar::COLORS, mode_hicolstdchar::@5/mode_hicolstdchar::col#1 )
  [304] mode_hicolstdchar::cy#4 = phi( mode_hicolstdchar::@2/0, mode_hicolstdchar::@5/mode_hicolstdchar::cy#1 )
  to:mode_hicolstdchar::@4
mode_hicolstdchar::@4: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@3 mode_hicolstdchar::@4
  [305] mode_hicolstdchar::ch#2 = phi( mode_hicolstdchar::@3/mode_hicolstdchar::ch#3, mode_hicolstdchar::@4/mode_hicolstdchar::ch#1 )
  [305] mode_hicolstdchar::col#2 = phi( mode_hicolstdchar::@3/mode_hicolstdchar::col#3, mode_hicolstdchar::@4/mode_hicolstdchar::col#1 )
  [305] mode_hicolstdchar::cx#2 = phi( mode_hicolstdchar::@3/0, mode_hicolstdchar::@4/mode_hicolstdchar::cx#1 )
  [306] mode_hicolstdchar::$2 = mode_hicolstdchar::cy#4 & $f
  [307] mode_hicolstdchar::$3 = mode_hicolstdchar::$2 << 4
  [308] mode_hicolstdchar::$4 = mode_hicolstdchar::cx#2 & $f
  [309] mode_hicolstdchar::v#0 = mode_hicolstdchar::$3 | mode_hicolstdchar::$4
  [310] *mode_hicolstdchar::col#2 = mode_hicolstdchar::v#0
  [311] mode_hicolstdchar::col#1 = ++ mode_hicolstdchar::col#2
  [312] *mode_hicolstdchar::ch#2 = mode_hicolstdchar::v#0
  [313] mode_hicolstdchar::ch#1 = ++ mode_hicolstdchar::ch#2
  [314] mode_hicolstdchar::cx#1 = ++ mode_hicolstdchar::cx#2
  [315] if(mode_hicolstdchar::cx#1!=$28) goto mode_hicolstdchar::@4
  to:mode_hicolstdchar::@5
mode_hicolstdchar::@5: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@4
  [316] mode_hicolstdchar::cy#1 = ++ mode_hicolstdchar::cy#4
  [317] if(mode_hicolstdchar::cy#1!=$19) goto mode_hicolstdchar::@3
  to:mode_hicolstdchar::@6
mode_hicolstdchar::@6: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@5
  [318] phi()
  [319] call mode_ctrl 
  to:mode_hicolstdchar::@return
mode_hicolstdchar::@return: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@6
  [320] return 
  to:@return

void mode_hicolecmchar()
mode_hicolecmchar: scope:[mode_hicolecmchar]  from menu::@22
  [321] *DTV_GRAPHICS_VIC_BANK = 0
  [322] *DTV_COLOR_BANK_LO = <(word)mode_hicolecmchar::COLORS/$400
  [323] *DTV_COLOR_BANK_HI = 0
  [324] *DTV_CONTROL = DTV_HIGHCOLOR
  [325] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  [326] *((byte*)CIA2) = 3^(byte)(word)mode_hicolecmchar::CHARSET/$4000
  [327] *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3
  [328] *VIC_CONTROL2 = VIC_CSEL
  [329] *VIC_MEMORY = (byte)(word)mode_hicolecmchar::CHARSET&$3fff/$400
  to:mode_hicolecmchar::@1
mode_hicolecmchar::@1: scope:[mode_hicolecmchar]  from mode_hicolecmchar mode_hicolecmchar::@1
  [330] mode_hicolecmchar::i#2 = phi( mode_hicolecmchar/0, mode_hicolecmchar::@1/mode_hicolecmchar::i#1 )
  [331] DTV_PALETTE[mode_hicolecmchar::i#2] = mode_hicolecmchar::i#2
  [332] mode_hicolecmchar::i#1 = ++ mode_hicolecmchar::i#2
  [333] if(mode_hicolecmchar::i#1!=$10) goto mode_hicolecmchar::@1
  to:mode_hicolecmchar::@2
mode_hicolecmchar::@2: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@1
  [334] *BORDER_COLOR = 0
  [335] *BG_COLOR = $50
  [336] *BG_COLOR1 = $54
  [337] *BG_COLOR2 = $58
  [338] *BG_COLOR3 = $5c
  to:mode_hicolecmchar::@3
mode_hicolecmchar::@3: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@2 mode_hicolecmchar::@5
  [339] mode_hicolecmchar::ch#3 = phi( mode_hicolecmchar::@2/mode_hicolecmchar::SCREEN, mode_hicolecmchar::@5/mode_hicolecmchar::ch#1 )
  [339] mode_hicolecmchar::col#3 = phi( mode_hicolecmchar::@2/mode_hicolecmchar::COLORS, mode_hicolecmchar::@5/mode_hicolecmchar::col#1 )
  [339] mode_hicolecmchar::cy#4 = phi( mode_hicolecmchar::@2/0, mode_hicolecmchar::@5/mode_hicolecmchar::cy#1 )
  to:mode_hicolecmchar::@4
mode_hicolecmchar::@4: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@3 mode_hicolecmchar::@4
  [340] mode_hicolecmchar::ch#2 = phi( mode_hicolecmchar::@3/mode_hicolecmchar::ch#3, mode_hicolecmchar::@4/mode_hicolecmchar::ch#1 )
  [340] mode_hicolecmchar::col#2 = phi( mode_hicolecmchar::@3/mode_hicolecmchar::col#3, mode_hicolecmchar::@4/mode_hicolecmchar::col#1 )
  [340] mode_hicolecmchar::cx#2 = phi( mode_hicolecmchar::@3/0, mode_hicolecmchar::@4/mode_hicolecmchar::cx#1 )
  [341] mode_hicolecmchar::$2 = mode_hicolecmchar::cy#4 & $f
  [342] mode_hicolecmchar::$3 = mode_hicolecmchar::$2 << 4
  [343] mode_hicolecmchar::$4 = mode_hicolecmchar::cx#2 & $f
  [344] mode_hicolecmchar::v#0 = mode_hicolecmchar::$3 | mode_hicolecmchar::$4
  [345] *mode_hicolecmchar::col#2 = mode_hicolecmchar::v#0
  [346] mode_hicolecmchar::col#1 = ++ mode_hicolecmchar::col#2
  [347] *mode_hicolecmchar::ch#2 = mode_hicolecmchar::v#0
  [348] mode_hicolecmchar::ch#1 = ++ mode_hicolecmchar::ch#2
  [349] mode_hicolecmchar::cx#1 = ++ mode_hicolecmchar::cx#2
  [350] if(mode_hicolecmchar::cx#1!=$28) goto mode_hicolecmchar::@4
  to:mode_hicolecmchar::@5
mode_hicolecmchar::@5: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@4
  [351] mode_hicolecmchar::cy#1 = ++ mode_hicolecmchar::cy#4
  [352] if(mode_hicolecmchar::cy#1!=$19) goto mode_hicolecmchar::@3
  to:mode_hicolecmchar::@6
mode_hicolecmchar::@6: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@5
  [353] phi()
  [354] call mode_ctrl 
  to:mode_hicolecmchar::@return
mode_hicolecmchar::@return: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@6
  [355] return 
  to:@return

void mode_hicolmcchar()
mode_hicolmcchar: scope:[mode_hicolmcchar]  from menu::@23
  [356] *DTV_GRAPHICS_VIC_BANK = 0
  [357] *DTV_COLOR_BANK_LO = <(word)mode_hicolmcchar::COLORS/$400
  [358] *DTV_COLOR_BANK_HI = 0
  [359] *DTV_CONTROL = DTV_HIGHCOLOR
  [360] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  [361] *((byte*)CIA2) = 3^(byte)(word)mode_hicolmcchar::CHARSET/$4000
  [362] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
  [363] *VIC_CONTROL2 = VIC_CSEL|VIC_MCM
  [364] *VIC_MEMORY = (byte)(word)mode_hicolmcchar::CHARSET&$3fff/$400
  to:mode_hicolmcchar::@1
mode_hicolmcchar::@1: scope:[mode_hicolmcchar]  from mode_hicolmcchar mode_hicolmcchar::@1
  [365] mode_hicolmcchar::i#2 = phi( mode_hicolmcchar/0, mode_hicolmcchar::@1/mode_hicolmcchar::i#1 )
  [366] DTV_PALETTE[mode_hicolmcchar::i#2] = mode_hicolmcchar::i#2
  [367] mode_hicolmcchar::i#1 = ++ mode_hicolmcchar::i#2
  [368] if(mode_hicolmcchar::i#1!=$10) goto mode_hicolmcchar::@1
  to:mode_hicolmcchar::@2
mode_hicolmcchar::@2: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@1
  [369] *BORDER_COLOR = 0
  [370] *BG_COLOR = $50
  [371] *BG_COLOR1 = $54
  [372] *BG_COLOR2 = $58
  to:mode_hicolmcchar::@3
mode_hicolmcchar::@3: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@2 mode_hicolmcchar::@5
  [373] mode_hicolmcchar::ch#3 = phi( mode_hicolmcchar::@2/mode_hicolmcchar::SCREEN, mode_hicolmcchar::@5/mode_hicolmcchar::ch#1 )
  [373] mode_hicolmcchar::col#3 = phi( mode_hicolmcchar::@2/mode_hicolmcchar::COLORS, mode_hicolmcchar::@5/mode_hicolmcchar::col#1 )
  [373] mode_hicolmcchar::cy#4 = phi( mode_hicolmcchar::@2/0, mode_hicolmcchar::@5/mode_hicolmcchar::cy#1 )
  to:mode_hicolmcchar::@4
mode_hicolmcchar::@4: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@3 mode_hicolmcchar::@4
  [374] mode_hicolmcchar::ch#2 = phi( mode_hicolmcchar::@3/mode_hicolmcchar::ch#3, mode_hicolmcchar::@4/mode_hicolmcchar::ch#1 )
  [374] mode_hicolmcchar::col#2 = phi( mode_hicolmcchar::@3/mode_hicolmcchar::col#3, mode_hicolmcchar::@4/mode_hicolmcchar::col#1 )
  [374] mode_hicolmcchar::cx#2 = phi( mode_hicolmcchar::@3/0, mode_hicolmcchar::@4/mode_hicolmcchar::cx#1 )
  [375] mode_hicolmcchar::$2 = mode_hicolmcchar::cy#4 & $f
  [376] mode_hicolmcchar::$3 = mode_hicolmcchar::$2 << 4
  [377] mode_hicolmcchar::$4 = mode_hicolmcchar::cx#2 & $f
  [378] mode_hicolmcchar::v#0 = mode_hicolmcchar::$3 | mode_hicolmcchar::$4
  [379] *mode_hicolmcchar::col#2 = mode_hicolmcchar::v#0
  [380] mode_hicolmcchar::col#1 = ++ mode_hicolmcchar::col#2
  [381] *mode_hicolmcchar::ch#2 = mode_hicolmcchar::v#0
  [382] mode_hicolmcchar::ch#1 = ++ mode_hicolmcchar::ch#2
  [383] mode_hicolmcchar::cx#1 = ++ mode_hicolmcchar::cx#2
  [384] if(mode_hicolmcchar::cx#1!=$28) goto mode_hicolmcchar::@4
  to:mode_hicolmcchar::@5
mode_hicolmcchar::@5: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@4
  [385] mode_hicolmcchar::cy#1 = ++ mode_hicolmcchar::cy#4
  [386] if(mode_hicolmcchar::cy#1!=$19) goto mode_hicolmcchar::@3
  to:mode_hicolmcchar::@6
mode_hicolmcchar::@6: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@5
  [387] phi()
  [388] call mode_ctrl 
  to:mode_hicolmcchar::@return
mode_hicolmcchar::@return: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@6
  [389] return 
  to:@return

void mode_sixsfred2()
mode_sixsfred2: scope:[mode_sixsfred2]  from menu::@24
  [390] *DTV_CONTROL = DTV_LINEAR
  [391] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
  [392] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL
  [393] *DTV_PLANEA_START_LO = 0
  [394] *DTV_PLANEA_START_MI = >mode_sixsfred2::PLANEA
  [395] *DTV_PLANEA_START_HI = 0
  [396] *DTV_PLANEA_STEP = 1
  [397] *DTV_PLANEA_MODULO_LO = 0
  [398] *DTV_PLANEA_MODULO_HI = 0
  [399] *DTV_PLANEB_START_LO = 0
  [400] *DTV_PLANEB_START_MI = >mode_sixsfred2::PLANEB
  [401] *DTV_PLANEB_START_HI = 0
  [402] *DTV_PLANEB_STEP = 1
  [403] *DTV_PLANEB_MODULO_LO = 0
  [404] *DTV_PLANEB_MODULO_HI = 0
  [405] *DTV_COLOR_BANK_LO = <mode_sixsfred2::COLORS/$400
  [406] *DTV_COLOR_BANK_HI = 0
  to:mode_sixsfred2::@1
mode_sixsfred2::@1: scope:[mode_sixsfred2]  from mode_sixsfred2 mode_sixsfred2::@1
  [407] mode_sixsfred2::i#2 = phi( mode_sixsfred2/0, mode_sixsfred2::@1/mode_sixsfred2::i#1 )
  [408] DTV_PALETTE[mode_sixsfred2::i#2] = mode_sixsfred2::i#2
  [409] mode_sixsfred2::i#1 = ++ mode_sixsfred2::i#2
  [410] if(mode_sixsfred2::i#1!=$10) goto mode_sixsfred2::@1
  to:mode_sixsfred2::@2
mode_sixsfred2::@2: scope:[mode_sixsfred2]  from mode_sixsfred2::@1
  [411] *BORDER_COLOR = 0
  to:mode_sixsfred2::@3
mode_sixsfred2::@3: scope:[mode_sixsfred2]  from mode_sixsfred2::@2 mode_sixsfred2::@5
  [412] mode_sixsfred2::col#3 = phi( mode_sixsfred2::@2/mode_sixsfred2::COLORS, mode_sixsfred2::@5/mode_sixsfred2::col#1 )
  [412] mode_sixsfred2::cy#4 = phi( mode_sixsfred2::@2/0, mode_sixsfred2::@5/mode_sixsfred2::cy#1 )
  to:mode_sixsfred2::@4
mode_sixsfred2::@4: scope:[mode_sixsfred2]  from mode_sixsfred2::@3 mode_sixsfred2::@4
  [413] mode_sixsfred2::col#2 = phi( mode_sixsfred2::@3/mode_sixsfred2::col#3, mode_sixsfred2::@4/mode_sixsfred2::col#1 )
  [413] mode_sixsfred2::cx#2 = phi( mode_sixsfred2::@3/0, mode_sixsfred2::@4/mode_sixsfred2::cx#1 )
  [414] mode_sixsfred2::$2 = mode_sixsfred2::cx#2 & 3
  [415] mode_sixsfred2::$3 = mode_sixsfred2::$2 << 4
  [416] mode_sixsfred2::$4 = mode_sixsfred2::cy#4 & 3
  [417] mode_sixsfred2::$5 = mode_sixsfred2::$3 | mode_sixsfred2::$4
  [418] *mode_sixsfred2::col#2 = mode_sixsfred2::$5
  [419] mode_sixsfred2::col#1 = ++ mode_sixsfred2::col#2
  [420] mode_sixsfred2::cx#1 = ++ mode_sixsfred2::cx#2
  [421] if(mode_sixsfred2::cx#1!=$28) goto mode_sixsfred2::@4
  to:mode_sixsfred2::@5
mode_sixsfred2::@5: scope:[mode_sixsfred2]  from mode_sixsfred2::@4
  [422] mode_sixsfred2::cy#1 = ++ mode_sixsfred2::cy#4
  [423] if(mode_sixsfred2::cy#1!=$19) goto mode_sixsfred2::@3
  to:mode_sixsfred2::@6
mode_sixsfred2::@6: scope:[mode_sixsfred2]  from mode_sixsfred2::@5 mode_sixsfred2::@8
  [424] mode_sixsfred2::gfxa#3 = phi( mode_sixsfred2::@5/mode_sixsfred2::PLANEA, mode_sixsfred2::@8/mode_sixsfred2::gfxa#1 )
  [424] mode_sixsfred2::ay#4 = phi( mode_sixsfred2::@5/0, mode_sixsfred2::@8/mode_sixsfred2::ay#1 )
  to:mode_sixsfred2::@7
mode_sixsfred2::@7: scope:[mode_sixsfred2]  from mode_sixsfred2::@6 mode_sixsfred2::@7
  [425] mode_sixsfred2::ax#2 = phi( mode_sixsfred2::@6/0, mode_sixsfred2::@7/mode_sixsfred2::ax#1 )
  [425] mode_sixsfred2::gfxa#2 = phi( mode_sixsfred2::@6/mode_sixsfred2::gfxa#3, mode_sixsfred2::@7/mode_sixsfred2::gfxa#1 )
  [426] mode_sixsfred2::$8 = mode_sixsfred2::ay#4 >> 1
  [427] mode_sixsfred2::row#0 = mode_sixsfred2::$8 & 3
  [428] *mode_sixsfred2::gfxa#2 = mode_sixsfred2::row_bitmask[mode_sixsfred2::row#0]
  [429] mode_sixsfred2::gfxa#1 = ++ mode_sixsfred2::gfxa#2
  [430] mode_sixsfred2::ax#1 = ++ mode_sixsfred2::ax#2
  [431] if(mode_sixsfred2::ax#1!=$28) goto mode_sixsfred2::@7
  to:mode_sixsfred2::@8
mode_sixsfred2::@8: scope:[mode_sixsfred2]  from mode_sixsfred2::@7
  [432] mode_sixsfred2::ay#1 = ++ mode_sixsfred2::ay#4
  [433] if(mode_sixsfred2::ay#1!=$c8) goto mode_sixsfred2::@6
  to:mode_sixsfred2::@9
mode_sixsfred2::@9: scope:[mode_sixsfred2]  from mode_sixsfred2::@11 mode_sixsfred2::@8
  [434] mode_sixsfred2::by#4 = phi( mode_sixsfred2::@8/0, mode_sixsfred2::@11/mode_sixsfred2::by#1 )
  [434] mode_sixsfred2::gfxb#3 = phi( mode_sixsfred2::@8/mode_sixsfred2::PLANEB, mode_sixsfred2::@11/mode_sixsfred2::gfxb#1 )
  to:mode_sixsfred2::@10
mode_sixsfred2::@10: scope:[mode_sixsfred2]  from mode_sixsfred2::@10 mode_sixsfred2::@9
  [435] mode_sixsfred2::bx#2 = phi( mode_sixsfred2::@9/0, mode_sixsfred2::@10/mode_sixsfred2::bx#1 )
  [435] mode_sixsfred2::gfxb#2 = phi( mode_sixsfred2::@9/mode_sixsfred2::gfxb#3, mode_sixsfred2::@10/mode_sixsfred2::gfxb#1 )
  [436] *mode_sixsfred2::gfxb#2 = $1b
  [437] mode_sixsfred2::gfxb#1 = ++ mode_sixsfred2::gfxb#2
  [438] mode_sixsfred2::bx#1 = ++ mode_sixsfred2::bx#2
  [439] if(mode_sixsfred2::bx#1!=$28) goto mode_sixsfred2::@10
  to:mode_sixsfred2::@11
mode_sixsfred2::@11: scope:[mode_sixsfred2]  from mode_sixsfred2::@10
  [440] mode_sixsfred2::by#1 = ++ mode_sixsfred2::by#4
  [441] if(mode_sixsfred2::by#1!=$c8) goto mode_sixsfred2::@9
  to:mode_sixsfred2::@12
mode_sixsfred2::@12: scope:[mode_sixsfred2]  from mode_sixsfred2::@11
  [442] phi()
  [443] call mode_ctrl 
  to:mode_sixsfred2::@return
mode_sixsfred2::@return: scope:[mode_sixsfred2]  from mode_sixsfred2::@12
  [444] return 
  to:@return

void mode_twoplanebitmap()
mode_twoplanebitmap: scope:[mode_twoplanebitmap]  from menu::@25
  [445] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR
  [446] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
  [447] *VIC_CONTROL2 = VIC_CSEL
  [448] *DTV_PLANEA_START_LO = 0
  [449] *DTV_PLANEA_START_MI = >mode_twoplanebitmap::PLANEA
  [450] *DTV_PLANEA_START_HI = 0
  [451] *DTV_PLANEA_STEP = 1
  [452] *DTV_PLANEA_MODULO_LO = 0
  [453] *DTV_PLANEA_MODULO_HI = 0
  [454] *DTV_PLANEB_START_LO = 0
  [455] *DTV_PLANEB_START_MI = >mode_twoplanebitmap::PLANEB
  [456] *DTV_PLANEB_START_HI = 0
  [457] *DTV_PLANEB_STEP = 1
  [458] *DTV_PLANEB_MODULO_LO = 0
  [459] *DTV_PLANEB_MODULO_HI = 0
  [460] *DTV_COLOR_BANK_LO = <mode_twoplanebitmap::COLORS/$400
  [461] *DTV_COLOR_BANK_HI = 0
  to:mode_twoplanebitmap::@1
mode_twoplanebitmap::@1: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap mode_twoplanebitmap::@1
  [462] mode_twoplanebitmap::i#2 = phi( mode_twoplanebitmap/0, mode_twoplanebitmap::@1/mode_twoplanebitmap::i#1 )
  [463] DTV_PALETTE[mode_twoplanebitmap::i#2] = mode_twoplanebitmap::i#2
  [464] mode_twoplanebitmap::i#1 = ++ mode_twoplanebitmap::i#2
  [465] if(mode_twoplanebitmap::i#1!=$10) goto mode_twoplanebitmap::@1
  to:mode_twoplanebitmap::@2
mode_twoplanebitmap::@2: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@1
  [466] *BORDER_COLOR = 0
  [467] *BG_COLOR = $70
  [468] *BG_COLOR1 = $d4
  to:mode_twoplanebitmap::@3
mode_twoplanebitmap::@3: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@2 mode_twoplanebitmap::@5
  [469] mode_twoplanebitmap::col#3 = phi( mode_twoplanebitmap::@2/mode_twoplanebitmap::COLORS, mode_twoplanebitmap::@5/mode_twoplanebitmap::col#1 )
  [469] mode_twoplanebitmap::cy#4 = phi( mode_twoplanebitmap::@2/0, mode_twoplanebitmap::@5/mode_twoplanebitmap::cy#1 )
  to:mode_twoplanebitmap::@4
mode_twoplanebitmap::@4: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@3 mode_twoplanebitmap::@4
  [470] mode_twoplanebitmap::col#2 = phi( mode_twoplanebitmap::@3/mode_twoplanebitmap::col#3, mode_twoplanebitmap::@4/mode_twoplanebitmap::col#1 )
  [470] mode_twoplanebitmap::cx#2 = phi( mode_twoplanebitmap::@3/0, mode_twoplanebitmap::@4/mode_twoplanebitmap::cx#1 )
  [471] mode_twoplanebitmap::$2 = mode_twoplanebitmap::cy#4 & $f
  [472] mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2 << 4
  [473] mode_twoplanebitmap::$4 = mode_twoplanebitmap::cx#2 & $f
  [474] mode_twoplanebitmap::$5 = mode_twoplanebitmap::$3 | mode_twoplanebitmap::$4
  [475] *mode_twoplanebitmap::col#2 = mode_twoplanebitmap::$5
  [476] mode_twoplanebitmap::col#1 = ++ mode_twoplanebitmap::col#2
  [477] mode_twoplanebitmap::cx#1 = ++ mode_twoplanebitmap::cx#2
  [478] if(mode_twoplanebitmap::cx#1!=$28) goto mode_twoplanebitmap::@4
  to:mode_twoplanebitmap::@5
mode_twoplanebitmap::@5: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@4
  [479] mode_twoplanebitmap::cy#1 = ++ mode_twoplanebitmap::cy#4
  [480] if(mode_twoplanebitmap::cy#1!=$19) goto mode_twoplanebitmap::@3
  to:mode_twoplanebitmap::@6
mode_twoplanebitmap::@6: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@11 mode_twoplanebitmap::@5
  [481] mode_twoplanebitmap::gfxa#7 = phi( mode_twoplanebitmap::@11/mode_twoplanebitmap::gfxa#6, mode_twoplanebitmap::@5/mode_twoplanebitmap::PLANEA )
  [481] mode_twoplanebitmap::ay#5 = phi( mode_twoplanebitmap::@11/mode_twoplanebitmap::ay#1, mode_twoplanebitmap::@5/0 )
  to:mode_twoplanebitmap::@7
mode_twoplanebitmap::@7: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@6 mode_twoplanebitmap::@9
  [482] mode_twoplanebitmap::ax#2 = phi( mode_twoplanebitmap::@9/mode_twoplanebitmap::ax#1, mode_twoplanebitmap::@6/0 )
  [482] mode_twoplanebitmap::gfxa#3 = phi( mode_twoplanebitmap::@9/mode_twoplanebitmap::gfxa#6, mode_twoplanebitmap::@6/mode_twoplanebitmap::gfxa#7 )
  [483] mode_twoplanebitmap::$8 = mode_twoplanebitmap::ay#5 & 4
  [484] if(mode_twoplanebitmap::$8==0) goto mode_twoplanebitmap::@8
  to:mode_twoplanebitmap::@10
mode_twoplanebitmap::@10: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@7
  [485] *mode_twoplanebitmap::gfxa#3 = $ff
  [486] mode_twoplanebitmap::gfxa#2 = ++ mode_twoplanebitmap::gfxa#3
  to:mode_twoplanebitmap::@9
mode_twoplanebitmap::@9: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@10 mode_twoplanebitmap::@8
  [487] mode_twoplanebitmap::gfxa#6 = phi( mode_twoplanebitmap::@10/mode_twoplanebitmap::gfxa#2, mode_twoplanebitmap::@8/mode_twoplanebitmap::gfxa#1 )
  [488] mode_twoplanebitmap::ax#1 = ++ mode_twoplanebitmap::ax#2
  [489] if(mode_twoplanebitmap::ax#1!=$28) goto mode_twoplanebitmap::@7
  to:mode_twoplanebitmap::@11
mode_twoplanebitmap::@11: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@9
  [490] mode_twoplanebitmap::ay#1 = ++ mode_twoplanebitmap::ay#5
  [491] if(mode_twoplanebitmap::ay#1!=$c8) goto mode_twoplanebitmap::@6
  to:mode_twoplanebitmap::@12
mode_twoplanebitmap::@12: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@11 mode_twoplanebitmap::@14
  [492] mode_twoplanebitmap::by#4 = phi( mode_twoplanebitmap::@11/0, mode_twoplanebitmap::@14/mode_twoplanebitmap::by#1 )
  [492] mode_twoplanebitmap::gfxb#3 = phi( mode_twoplanebitmap::@11/mode_twoplanebitmap::PLANEB, mode_twoplanebitmap::@14/mode_twoplanebitmap::gfxb#1 )
  to:mode_twoplanebitmap::@13
mode_twoplanebitmap::@13: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@12 mode_twoplanebitmap::@13
  [493] mode_twoplanebitmap::bx#2 = phi( mode_twoplanebitmap::@12/0, mode_twoplanebitmap::@13/mode_twoplanebitmap::bx#1 )
  [493] mode_twoplanebitmap::gfxb#2 = phi( mode_twoplanebitmap::@12/mode_twoplanebitmap::gfxb#3, mode_twoplanebitmap::@13/mode_twoplanebitmap::gfxb#1 )
  [494] *mode_twoplanebitmap::gfxb#2 = $f
  [495] mode_twoplanebitmap::gfxb#1 = ++ mode_twoplanebitmap::gfxb#2
  [496] mode_twoplanebitmap::bx#1 = ++ mode_twoplanebitmap::bx#2
  [497] if(mode_twoplanebitmap::bx#1!=$28) goto mode_twoplanebitmap::@13
  to:mode_twoplanebitmap::@14
mode_twoplanebitmap::@14: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@13
  [498] mode_twoplanebitmap::by#1 = ++ mode_twoplanebitmap::by#4
  [499] if(mode_twoplanebitmap::by#1!=$c8) goto mode_twoplanebitmap::@12
  to:mode_twoplanebitmap::@15
mode_twoplanebitmap::@15: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@14
  [500] phi()
  [501] call mode_ctrl 
  to:mode_twoplanebitmap::@return
mode_twoplanebitmap::@return: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@15
  [502] return 
  to:@return
mode_twoplanebitmap::@8: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@7
  [503] *mode_twoplanebitmap::gfxa#3 = 0
  [504] mode_twoplanebitmap::gfxa#1 = ++ mode_twoplanebitmap::gfxa#3
  to:mode_twoplanebitmap::@9

void mode_sixsfred()
mode_sixsfred: scope:[mode_sixsfred]  from menu::@26
  [505] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR
  [506] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
  [507] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL
  [508] *DTV_PLANEA_START_LO = 0
  [509] *DTV_PLANEA_START_MI = >mode_sixsfred::PLANEA
  [510] *DTV_PLANEA_START_HI = 0
  [511] *DTV_PLANEA_STEP = 1
  [512] *DTV_PLANEA_MODULO_LO = 0
  [513] *DTV_PLANEA_MODULO_HI = 0
  [514] *DTV_PLANEB_START_LO = 0
  [515] *DTV_PLANEB_START_MI = >mode_sixsfred::PLANEB
  [516] *DTV_PLANEB_START_HI = 0
  [517] *DTV_PLANEB_STEP = 1
  [518] *DTV_PLANEB_MODULO_LO = 0
  [519] *DTV_PLANEB_MODULO_HI = 0
  [520] *DTV_COLOR_BANK_LO = <mode_sixsfred::COLORS/$400
  [521] *DTV_COLOR_BANK_HI = 0
  to:mode_sixsfred::@1
mode_sixsfred::@1: scope:[mode_sixsfred]  from mode_sixsfred mode_sixsfred::@1
  [522] mode_sixsfred::i#2 = phi( mode_sixsfred/0, mode_sixsfred::@1/mode_sixsfred::i#1 )
  [523] DTV_PALETTE[mode_sixsfred::i#2] = mode_sixsfred::i#2
  [524] mode_sixsfred::i#1 = ++ mode_sixsfred::i#2
  [525] if(mode_sixsfred::i#1!=$10) goto mode_sixsfred::@1
  to:mode_sixsfred::@2
mode_sixsfred::@2: scope:[mode_sixsfred]  from mode_sixsfred::@1
  [526] *BORDER_COLOR = 0
  to:mode_sixsfred::@3
mode_sixsfred::@3: scope:[mode_sixsfred]  from mode_sixsfred::@2 mode_sixsfred::@5
  [527] mode_sixsfred::col#3 = phi( mode_sixsfred::@2/mode_sixsfred::COLORS, mode_sixsfred::@5/mode_sixsfred::col#1 )
  [527] mode_sixsfred::cy#4 = phi( mode_sixsfred::@2/0, mode_sixsfred::@5/mode_sixsfred::cy#1 )
  to:mode_sixsfred::@4
mode_sixsfred::@4: scope:[mode_sixsfred]  from mode_sixsfred::@3 mode_sixsfred::@4
  [528] mode_sixsfred::col#2 = phi( mode_sixsfred::@3/mode_sixsfred::col#3, mode_sixsfred::@4/mode_sixsfred::col#1 )
  [528] mode_sixsfred::cx#2 = phi( mode_sixsfred::@3/0, mode_sixsfred::@4/mode_sixsfred::cx#1 )
  [529] mode_sixsfred::$2 = mode_sixsfred::cx#2 + mode_sixsfred::cy#4
  [530] mode_sixsfred::$3 = mode_sixsfred::$2 & $f
  [531] *mode_sixsfred::col#2 = mode_sixsfred::$3
  [532] mode_sixsfred::col#1 = ++ mode_sixsfred::col#2
  [533] mode_sixsfred::cx#1 = ++ mode_sixsfred::cx#2
  [534] if(mode_sixsfred::cx#1!=$28) goto mode_sixsfred::@4
  to:mode_sixsfred::@5
mode_sixsfred::@5: scope:[mode_sixsfred]  from mode_sixsfred::@4
  [535] mode_sixsfred::cy#1 = ++ mode_sixsfred::cy#4
  [536] if(mode_sixsfred::cy#1!=$19) goto mode_sixsfred::@3
  to:mode_sixsfred::@6
mode_sixsfred::@6: scope:[mode_sixsfred]  from mode_sixsfred::@5 mode_sixsfred::@8
  [537] mode_sixsfred::gfxa#3 = phi( mode_sixsfred::@5/mode_sixsfred::PLANEA, mode_sixsfred::@8/mode_sixsfred::gfxa#1 )
  [537] mode_sixsfred::ay#4 = phi( mode_sixsfred::@5/0, mode_sixsfred::@8/mode_sixsfred::ay#1 )
  to:mode_sixsfred::@7
mode_sixsfred::@7: scope:[mode_sixsfred]  from mode_sixsfred::@6 mode_sixsfred::@7
  [538] mode_sixsfred::ax#2 = phi( mode_sixsfred::@6/0, mode_sixsfred::@7/mode_sixsfred::ax#1 )
  [538] mode_sixsfred::gfxa#2 = phi( mode_sixsfred::@6/mode_sixsfred::gfxa#3, mode_sixsfred::@7/mode_sixsfred::gfxa#1 )
  [539] mode_sixsfred::$6 = mode_sixsfred::ay#4 >> 1
  [540] mode_sixsfred::row#0 = mode_sixsfred::$6 & 3
  [541] *mode_sixsfred::gfxa#2 = mode_sixsfred::row_bitmask[mode_sixsfred::row#0]
  [542] mode_sixsfred::gfxa#1 = ++ mode_sixsfred::gfxa#2
  [543] mode_sixsfred::ax#1 = ++ mode_sixsfred::ax#2
  [544] if(mode_sixsfred::ax#1!=$28) goto mode_sixsfred::@7
  to:mode_sixsfred::@8
mode_sixsfred::@8: scope:[mode_sixsfred]  from mode_sixsfred::@7
  [545] mode_sixsfred::ay#1 = ++ mode_sixsfred::ay#4
  [546] if(mode_sixsfred::ay#1!=$c8) goto mode_sixsfred::@6
  to:mode_sixsfred::@9
mode_sixsfred::@9: scope:[mode_sixsfred]  from mode_sixsfred::@11 mode_sixsfred::@8
  [547] mode_sixsfred::by#4 = phi( mode_sixsfred::@8/0, mode_sixsfred::@11/mode_sixsfred::by#1 )
  [547] mode_sixsfred::gfxb#3 = phi( mode_sixsfred::@8/mode_sixsfred::PLANEB, mode_sixsfred::@11/mode_sixsfred::gfxb#1 )
  to:mode_sixsfred::@10
mode_sixsfred::@10: scope:[mode_sixsfred]  from mode_sixsfred::@10 mode_sixsfred::@9
  [548] mode_sixsfred::bx#2 = phi( mode_sixsfred::@9/0, mode_sixsfred::@10/mode_sixsfred::bx#1 )
  [548] mode_sixsfred::gfxb#2 = phi( mode_sixsfred::@9/mode_sixsfred::gfxb#3, mode_sixsfred::@10/mode_sixsfred::gfxb#1 )
  [549] *mode_sixsfred::gfxb#2 = $1b
  [550] mode_sixsfred::gfxb#1 = ++ mode_sixsfred::gfxb#2
  [551] mode_sixsfred::bx#1 = ++ mode_sixsfred::bx#2
  [552] if(mode_sixsfred::bx#1!=$28) goto mode_sixsfred::@10
  to:mode_sixsfred::@11
mode_sixsfred::@11: scope:[mode_sixsfred]  from mode_sixsfred::@10
  [553] mode_sixsfred::by#1 = ++ mode_sixsfred::by#4
  [554] if(mode_sixsfred::by#1!=$c8) goto mode_sixsfred::@9
  to:mode_sixsfred::@12
mode_sixsfred::@12: scope:[mode_sixsfred]  from mode_sixsfred::@11
  [555] phi()
  [556] call mode_ctrl 
  to:mode_sixsfred::@return
mode_sixsfred::@return: scope:[mode_sixsfred]  from mode_sixsfred::@12
  [557] return 
  to:@return

void mode_8bpppixelcell()
mode_8bpppixelcell: scope:[mode_8bpppixelcell]  from menu::@27
  [558] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
  [559] *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3
  [560] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL
  [561] *DTV_PLANEA_START_LO = 0
  [562] *DTV_PLANEA_START_MI = >mode_8bpppixelcell::PLANEA
  [563] *DTV_PLANEA_START_HI = 0
  [564] *DTV_PLANEA_STEP = 1
  [565] *DTV_PLANEA_MODULO_LO = 0
  [566] *DTV_PLANEA_MODULO_HI = 0
  [567] *DTV_PLANEB_START_LO = 0
  [568] *DTV_PLANEB_START_MI = >mode_8bpppixelcell::PLANEB
  [569] *DTV_PLANEB_START_HI = 0
  [570] *DTV_PLANEB_STEP = 0
  [571] *DTV_PLANEB_MODULO_LO = 0
  [572] *DTV_PLANEB_MODULO_HI = 0
  [573] *BORDER_COLOR = 0
  to:mode_8bpppixelcell::@1
mode_8bpppixelcell::@1: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell mode_8bpppixelcell::@1
  [574] mode_8bpppixelcell::i#2 = phi( mode_8bpppixelcell/0, mode_8bpppixelcell::@1/mode_8bpppixelcell::i#1 )
  [575] DTV_PALETTE[mode_8bpppixelcell::i#2] = mode_8bpppixelcell::i#2
  [576] mode_8bpppixelcell::i#1 = ++ mode_8bpppixelcell::i#2
  [577] if(mode_8bpppixelcell::i#1!=$10) goto mode_8bpppixelcell::@1
  to:mode_8bpppixelcell::@2
mode_8bpppixelcell::@2: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@1 mode_8bpppixelcell::@4
  [578] mode_8bpppixelcell::gfxa#3 = phi( mode_8bpppixelcell::@1/mode_8bpppixelcell::PLANEA, mode_8bpppixelcell::@4/mode_8bpppixelcell::gfxa#1 )
  [578] mode_8bpppixelcell::ay#4 = phi( mode_8bpppixelcell::@1/0, mode_8bpppixelcell::@4/mode_8bpppixelcell::ay#1 )
  to:mode_8bpppixelcell::@3
mode_8bpppixelcell::@3: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@2 mode_8bpppixelcell::@3
  [579] mode_8bpppixelcell::gfxa#2 = phi( mode_8bpppixelcell::@2/mode_8bpppixelcell::gfxa#3, mode_8bpppixelcell::@3/mode_8bpppixelcell::gfxa#1 )
  [579] mode_8bpppixelcell::ax#2 = phi( mode_8bpppixelcell::@2/0, mode_8bpppixelcell::@3/mode_8bpppixelcell::ax#1 )
  [580] mode_8bpppixelcell::$2 = mode_8bpppixelcell::ay#4 & $f
  [581] mode_8bpppixelcell::$3 = mode_8bpppixelcell::$2 << 4
  [582] mode_8bpppixelcell::$4 = mode_8bpppixelcell::ax#2 & $f
  [583] mode_8bpppixelcell::$5 = mode_8bpppixelcell::$3 | mode_8bpppixelcell::$4
  [584] *mode_8bpppixelcell::gfxa#2 = mode_8bpppixelcell::$5
  [585] mode_8bpppixelcell::gfxa#1 = ++ mode_8bpppixelcell::gfxa#2
  [586] mode_8bpppixelcell::ax#1 = ++ mode_8bpppixelcell::ax#2
  [587] if(mode_8bpppixelcell::ax#1!=$28) goto mode_8bpppixelcell::@3
  to:mode_8bpppixelcell::@4
mode_8bpppixelcell::@4: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@3
  [588] mode_8bpppixelcell::ay#1 = ++ mode_8bpppixelcell::ay#4
  [589] if(mode_8bpppixelcell::ay#1!=$19) goto mode_8bpppixelcell::@2
  to:mode_8bpppixelcell::@5
mode_8bpppixelcell::@5: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@4
  [590] *PROCPORT = PROCPORT_RAM_CHARROM
  to:mode_8bpppixelcell::@6
mode_8bpppixelcell::@6: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@12 mode_8bpppixelcell::@5
  [591] mode_8bpppixelcell::ch#8 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::ch#1, mode_8bpppixelcell::@5/0 )
  [591] mode_8bpppixelcell::col#7 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::col#1, mode_8bpppixelcell::@5/0 )
  [591] mode_8bpppixelcell::gfxb#7 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::gfxb#1, mode_8bpppixelcell::@5/mode_8bpppixelcell::PLANEB )
  [591] mode_8bpppixelcell::chargen#4 = phi( mode_8bpppixelcell::@12/mode_8bpppixelcell::chargen#1, mode_8bpppixelcell::@5/mode_8bpppixelcell::CHARGEN )
  to:mode_8bpppixelcell::@7
mode_8bpppixelcell::@7: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@11 mode_8bpppixelcell::@6
  [592] mode_8bpppixelcell::cr#6 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::cr#1, mode_8bpppixelcell::@6/0 )
  [592] mode_8bpppixelcell::col#5 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::col#1, mode_8bpppixelcell::@6/mode_8bpppixelcell::col#7 )
  [592] mode_8bpppixelcell::gfxb#5 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::gfxb#1, mode_8bpppixelcell::@6/mode_8bpppixelcell::gfxb#7 )
  [592] mode_8bpppixelcell::chargen#2 = phi( mode_8bpppixelcell::@11/mode_8bpppixelcell::chargen#1, mode_8bpppixelcell::@6/mode_8bpppixelcell::chargen#4 )
  [593] mode_8bpppixelcell::bits#0 = *mode_8bpppixelcell::chargen#2
  [594] mode_8bpppixelcell::chargen#1 = ++ mode_8bpppixelcell::chargen#2
  to:mode_8bpppixelcell::@8
mode_8bpppixelcell::@8: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@7 mode_8bpppixelcell::@9
  [595] mode_8bpppixelcell::cp#2 = phi( mode_8bpppixelcell::@9/mode_8bpppixelcell::cp#1, mode_8bpppixelcell::@7/0 )
  [595] mode_8bpppixelcell::col#2 = phi( mode_8bpppixelcell::@9/mode_8bpppixelcell::col#1, mode_8bpppixelcell::@7/mode_8bpppixelcell::col#5 )
  [595] mode_8bpppixelcell::gfxb#2 = phi( mode_8bpppixelcell::@9/mode_8bpppixelcell::gfxb#1, mode_8bpppixelcell::@7/mode_8bpppixelcell::gfxb#5 )
  [595] mode_8bpppixelcell::bits#2 = phi( mode_8bpppixelcell::@9/mode_8bpppixelcell::bits#1, mode_8bpppixelcell::@7/mode_8bpppixelcell::bits#0 )
  [596] mode_8bpppixelcell::$8 = mode_8bpppixelcell::bits#2 & $80
  [597] if(mode_8bpppixelcell::$8==0) goto mode_8bpppixelcell::@9
  to:mode_8bpppixelcell::@10
mode_8bpppixelcell::@10: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@8
  [598] mode_8bpppixelcell::c#3 = mode_8bpppixelcell::col#2
  to:mode_8bpppixelcell::@9
mode_8bpppixelcell::@9: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@10 mode_8bpppixelcell::@8
  [599] mode_8bpppixelcell::c#2 = phi( mode_8bpppixelcell::@10/mode_8bpppixelcell::c#3, mode_8bpppixelcell::@8/0 )
  [600] *mode_8bpppixelcell::gfxb#2 = mode_8bpppixelcell::c#2
  [601] mode_8bpppixelcell::gfxb#1 = ++ mode_8bpppixelcell::gfxb#2
  [602] mode_8bpppixelcell::bits#1 = mode_8bpppixelcell::bits#2 << 1
  [603] mode_8bpppixelcell::col#1 = ++ mode_8bpppixelcell::col#2
  [604] mode_8bpppixelcell::cp#1 = ++ mode_8bpppixelcell::cp#2
  [605] if(mode_8bpppixelcell::cp#1!=8) goto mode_8bpppixelcell::@8
  to:mode_8bpppixelcell::@11
mode_8bpppixelcell::@11: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@9
  [606] mode_8bpppixelcell::cr#1 = ++ mode_8bpppixelcell::cr#6
  [607] if(mode_8bpppixelcell::cr#1!=8) goto mode_8bpppixelcell::@7
  to:mode_8bpppixelcell::@12
mode_8bpppixelcell::@12: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@11
  [608] mode_8bpppixelcell::ch#1 = ++ mode_8bpppixelcell::ch#8
  [609] if(mode_8bpppixelcell::ch#1!=0) goto mode_8bpppixelcell::@6
  to:mode_8bpppixelcell::@13
mode_8bpppixelcell::@13: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@12
  [610] *PROCPORT = PROCPORT_RAM_IO
  [611] call mode_ctrl 
  to:mode_8bpppixelcell::@return
mode_8bpppixelcell::@return: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@13
  [612] return 
  to:@return

void mode_8bppchunkybmm()
mode_8bppchunkybmm: scope:[mode_8bppchunkybmm]  from menu::@28
  [613] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
  [614] *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3
  [615] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL
  [616] *DTV_PLANEB_START_LO = 0
  [617] *DTV_PLANEB_START_MI = 0
  [618] *DTV_PLANEB_START_HI = <>mode_8bppchunkybmm::PLANEB
  [619] *DTV_PLANEB_STEP = 8
  [620] *DTV_PLANEB_MODULO_LO = 0
  [621] *DTV_PLANEB_MODULO_HI = 0
  [622] *BORDER_COLOR = 0
  to:mode_8bppchunkybmm::@1
mode_8bppchunkybmm::@1: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm mode_8bppchunkybmm::@1
  [623] mode_8bppchunkybmm::i#2 = phi( mode_8bppchunkybmm/0, mode_8bppchunkybmm::@1/mode_8bppchunkybmm::i#1 )
  [624] DTV_PALETTE[mode_8bppchunkybmm::i#2] = mode_8bppchunkybmm::i#2
  [625] mode_8bppchunkybmm::i#1 = ++ mode_8bppchunkybmm::i#2
  [626] if(mode_8bppchunkybmm::i#1!=$10) goto mode_8bppchunkybmm::@1
  to:mode_8bppchunkybmm::@2
mode_8bppchunkybmm::@2: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@1
  [627] phi()
  [628] call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@3
mode_8bppchunkybmm::@3: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@2 mode_8bppchunkybmm::@7
  [629] mode_8bppchunkybmm::gfxbCpuBank#7 = phi( mode_8bppchunkybmm::@7/mode_8bppchunkybmm::gfxbCpuBank#8, mode_8bppchunkybmm::@2/++(byte)mode_8bppchunkybmm::PLANEB/$4000 )
  [629] mode_8bppchunkybmm::y#6 = phi( mode_8bppchunkybmm::@7/mode_8bppchunkybmm::y#1, mode_8bppchunkybmm::@2/0 )
  [629] mode_8bppchunkybmm::gfxb#5 = phi( mode_8bppchunkybmm::@7/mode_8bppchunkybmm::gfxb#1, mode_8bppchunkybmm::@2/(byte*) 16384 )
  to:mode_8bppchunkybmm::@4
mode_8bppchunkybmm::@4: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@3 mode_8bppchunkybmm::@5
  [630] mode_8bppchunkybmm::gfxbCpuBank#4 = phi( mode_8bppchunkybmm::@3/mode_8bppchunkybmm::gfxbCpuBank#7, mode_8bppchunkybmm::@5/mode_8bppchunkybmm::gfxbCpuBank#8 )
  [630] mode_8bppchunkybmm::x#2 = phi( mode_8bppchunkybmm::@3/0, mode_8bppchunkybmm::@5/mode_8bppchunkybmm::x#1 )
  [630] mode_8bppchunkybmm::gfxb#3 = phi( mode_8bppchunkybmm::@3/mode_8bppchunkybmm::gfxb#5, mode_8bppchunkybmm::@5/mode_8bppchunkybmm::gfxb#1 )
  [631] if(mode_8bppchunkybmm::gfxb#3!=$8000) goto mode_8bppchunkybmm::@5
  to:mode_8bppchunkybmm::@6
mode_8bppchunkybmm::@6: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@4
  [632] dtvSetCpuBankSegment1::cpuBankIdx#1 = mode_8bppchunkybmm::gfxbCpuBank#4
  [633] call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@9
mode_8bppchunkybmm::@9: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@6
  [634] mode_8bppchunkybmm::gfxbCpuBank#2 = ++ mode_8bppchunkybmm::gfxbCpuBank#4
  to:mode_8bppchunkybmm::@5
mode_8bppchunkybmm::@5: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@4 mode_8bppchunkybmm::@9
  [635] mode_8bppchunkybmm::gfxbCpuBank#8 = phi( mode_8bppchunkybmm::@9/mode_8bppchunkybmm::gfxbCpuBank#2, mode_8bppchunkybmm::@4/mode_8bppchunkybmm::gfxbCpuBank#4 )
  [635] mode_8bppchunkybmm::gfxb#4 = phi( mode_8bppchunkybmm::@9/(byte*) 16384, mode_8bppchunkybmm::@4/mode_8bppchunkybmm::gfxb#3 )
  [636] mode_8bppchunkybmm::$7 = mode_8bppchunkybmm::x#2 + mode_8bppchunkybmm::y#6
  [637] mode_8bppchunkybmm::c#0 = (byte)mode_8bppchunkybmm::$7
  [638] *mode_8bppchunkybmm::gfxb#4 = mode_8bppchunkybmm::c#0
  [639] mode_8bppchunkybmm::gfxb#1 = ++ mode_8bppchunkybmm::gfxb#4
  [640] mode_8bppchunkybmm::x#1 = ++ mode_8bppchunkybmm::x#2
  [641] if(mode_8bppchunkybmm::x#1!=$140) goto mode_8bppchunkybmm::@4
  to:mode_8bppchunkybmm::@7
mode_8bppchunkybmm::@7: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@5
  [642] mode_8bppchunkybmm::y#1 = ++ mode_8bppchunkybmm::y#6
  [643] if(mode_8bppchunkybmm::y#1!=$c8) goto mode_8bppchunkybmm::@3
  to:mode_8bppchunkybmm::@8
mode_8bppchunkybmm::@8: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@7
  [644] phi()
  [645] call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@10
mode_8bppchunkybmm::@10: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@8
  [646] phi()
  [647] call mode_ctrl 
  to:mode_8bppchunkybmm::@return
mode_8bppchunkybmm::@return: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@10
  [648] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from print_cls
  [649] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [650] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [651] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [652] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [653] *memset::dst#2 = memset::c#0
  [654] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from print_str_lines::@4
  [655] *print_char_cursor#37 = print_char::ch#0
  [656] print_char_cursor#26 = ++ print_char_cursor#37
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [657] return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from print_str_lines::@5
  [658] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [659] print_line_cursor#19 = phi( print_ln/print_line_cursor#1, print_ln::@1/print_line_cursor#2 )
  [660] print_line_cursor#2 = print_line_cursor#19 + $28
  [661] if(print_line_cursor#2<print_char_cursor#38) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [662] return 
  to:@return

byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  [663] *((byte*)CIA1) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0]
  [664] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [665] return 
  to:@return

void mode_ctrl()
mode_ctrl: scope:[mode_ctrl]  from mode_8bppchunkybmm::@10 mode_8bpppixelcell::@13 mode_ecmchar::@6 mode_hicolecmchar::@6 mode_hicolmcchar::@6 mode_hicolstdchar::@6 mode_mcchar::@6 mode_sixsfred2::@12 mode_sixsfred::@12 mode_stdbitmap::@9 mode_stdchar::@6 mode_twoplanebitmap::@15
  [666] dtv_control#146 = phi( mode_8bppchunkybmm::@10/DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF, mode_8bpppixelcell::@13/DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY, mode_ecmchar::@6/0, mode_hicolecmchar::@6/DTV_HIGHCOLOR, mode_hicolmcchar::@6/DTV_HIGHCOLOR, mode_hicolstdchar::@6/DTV_HIGHCOLOR, mode_mcchar::@6/0, mode_sixsfred2::@12/DTV_LINEAR, mode_sixsfred::@12/DTV_HIGHCOLOR|DTV_LINEAR, mode_stdbitmap::@9/0, mode_stdchar::@6/0, mode_twoplanebitmap::@15/DTV_HIGHCOLOR|DTV_LINEAR )
  to:mode_ctrl::@1
mode_ctrl::@1: scope:[mode_ctrl]  from mode_ctrl mode_ctrl::@11 mode_ctrl::@18
  [667] dtv_control#116 = phi( mode_ctrl/dtv_control#146, mode_ctrl::@11/dtv_control#116, mode_ctrl::@18/dtv_control#16 )
  to:mode_ctrl::@2
mode_ctrl::@2: scope:[mode_ctrl]  from mode_ctrl::@1 mode_ctrl::@2
  [668] if(*RASTER!=$ff) goto mode_ctrl::@2
  to:mode_ctrl::@3
mode_ctrl::@3: scope:[mode_ctrl]  from mode_ctrl::@2
  [669] phi()
  [670] call keyboard_key_pressed 
  [671] keyboard_key_pressed::return#14 = keyboard_key_pressed::return#0
  to:mode_ctrl::@19
mode_ctrl::@19: scope:[mode_ctrl]  from mode_ctrl::@3
  [672] mode_ctrl::$1 = keyboard_key_pressed::return#14
  [673] if(mode_ctrl::$1==0) goto mode_ctrl::@4
  to:mode_ctrl::@return
mode_ctrl::@return: scope:[mode_ctrl]  from mode_ctrl::@19
  [674] return 
  to:@return
mode_ctrl::@4: scope:[mode_ctrl]  from mode_ctrl::@19
  [675] mode_ctrl::ctrl#0 = dtv_control#116
  [676] call keyboard_key_pressed 
  [677] keyboard_key_pressed::return#15 = keyboard_key_pressed::return#0
  to:mode_ctrl::@20
mode_ctrl::@20: scope:[mode_ctrl]  from mode_ctrl::@4
  [678] mode_ctrl::$4 = keyboard_key_pressed::return#15
  [679] if(mode_ctrl::$4==0) goto mode_ctrl::@5
  to:mode_ctrl::@12
mode_ctrl::@12: scope:[mode_ctrl]  from mode_ctrl::@20
  [680] mode_ctrl::ctrl#1 = mode_ctrl::ctrl#0 | DTV_LINEAR
  to:mode_ctrl::@5
mode_ctrl::@5: scope:[mode_ctrl]  from mode_ctrl::@12 mode_ctrl::@20
  [681] mode_ctrl::ctrl#17 = phi( mode_ctrl::@12/mode_ctrl::ctrl#1, mode_ctrl::@20/mode_ctrl::ctrl#0 )
  [682] call keyboard_key_pressed 
  [683] keyboard_key_pressed::return#16 = keyboard_key_pressed::return#0
  to:mode_ctrl::@21
mode_ctrl::@21: scope:[mode_ctrl]  from mode_ctrl::@5
  [684] mode_ctrl::$8 = keyboard_key_pressed::return#16
  [685] if(mode_ctrl::$8==0) goto mode_ctrl::@6
  to:mode_ctrl::@13
mode_ctrl::@13: scope:[mode_ctrl]  from mode_ctrl::@21
  [686] mode_ctrl::ctrl#2 = mode_ctrl::ctrl#17 | DTV_HIGHCOLOR
  to:mode_ctrl::@6
mode_ctrl::@6: scope:[mode_ctrl]  from mode_ctrl::@13 mode_ctrl::@21
  [687] mode_ctrl::ctrl#10 = phi( mode_ctrl::@13/mode_ctrl::ctrl#2, mode_ctrl::@21/mode_ctrl::ctrl#17 )
  [688] call keyboard_key_pressed 
  [689] keyboard_key_pressed::return#17 = keyboard_key_pressed::return#0
  to:mode_ctrl::@22
mode_ctrl::@22: scope:[mode_ctrl]  from mode_ctrl::@6
  [690] mode_ctrl::$12 = keyboard_key_pressed::return#17
  [691] if(mode_ctrl::$12==0) goto mode_ctrl::@7
  to:mode_ctrl::@14
mode_ctrl::@14: scope:[mode_ctrl]  from mode_ctrl::@22
  [692] mode_ctrl::ctrl#3 = mode_ctrl::ctrl#10 | DTV_OVERSCAN
  to:mode_ctrl::@7
mode_ctrl::@7: scope:[mode_ctrl]  from mode_ctrl::@14 mode_ctrl::@22
  [693] mode_ctrl::ctrl#11 = phi( mode_ctrl::@14/mode_ctrl::ctrl#3, mode_ctrl::@22/mode_ctrl::ctrl#10 )
  [694] call keyboard_key_pressed 
  [695] keyboard_key_pressed::return#18 = keyboard_key_pressed::return#0
  to:mode_ctrl::@23
mode_ctrl::@23: scope:[mode_ctrl]  from mode_ctrl::@7
  [696] mode_ctrl::$16 = keyboard_key_pressed::return#18
  [697] if(mode_ctrl::$16==0) goto mode_ctrl::@8
  to:mode_ctrl::@15
mode_ctrl::@15: scope:[mode_ctrl]  from mode_ctrl::@23
  [698] mode_ctrl::ctrl#4 = mode_ctrl::ctrl#11 | DTV_BORDER_OFF
  to:mode_ctrl::@8
mode_ctrl::@8: scope:[mode_ctrl]  from mode_ctrl::@15 mode_ctrl::@23
  [699] mode_ctrl::ctrl#12 = phi( mode_ctrl::@15/mode_ctrl::ctrl#4, mode_ctrl::@23/mode_ctrl::ctrl#11 )
  [700] call keyboard_key_pressed 
  [701] keyboard_key_pressed::return#19 = keyboard_key_pressed::return#0
  to:mode_ctrl::@24
mode_ctrl::@24: scope:[mode_ctrl]  from mode_ctrl::@8
  [702] mode_ctrl::$20 = keyboard_key_pressed::return#19
  [703] if(mode_ctrl::$20==0) goto mode_ctrl::@9
  to:mode_ctrl::@16
mode_ctrl::@16: scope:[mode_ctrl]  from mode_ctrl::@24
  [704] mode_ctrl::ctrl#5 = mode_ctrl::ctrl#12 | DTV_CHUNKY
  to:mode_ctrl::@9
mode_ctrl::@9: scope:[mode_ctrl]  from mode_ctrl::@16 mode_ctrl::@24
  [705] mode_ctrl::ctrl#13 = phi( mode_ctrl::@16/mode_ctrl::ctrl#5, mode_ctrl::@24/mode_ctrl::ctrl#12 )
  [706] call keyboard_key_pressed 
  [707] keyboard_key_pressed::return#20 = keyboard_key_pressed::return#0
  to:mode_ctrl::@25
mode_ctrl::@25: scope:[mode_ctrl]  from mode_ctrl::@9
  [708] mode_ctrl::$24 = keyboard_key_pressed::return#20
  [709] if(mode_ctrl::$24==0) goto mode_ctrl::@10
  to:mode_ctrl::@17
mode_ctrl::@17: scope:[mode_ctrl]  from mode_ctrl::@25
  [710] mode_ctrl::ctrl#6 = mode_ctrl::ctrl#13 | DTV_COLORRAM_OFF
  to:mode_ctrl::@10
mode_ctrl::@10: scope:[mode_ctrl]  from mode_ctrl::@17 mode_ctrl::@25
  [711] mode_ctrl::ctrl#22 = phi( mode_ctrl::@17/mode_ctrl::ctrl#6, mode_ctrl::@25/mode_ctrl::ctrl#13 )
  [712] call keyboard_key_pressed 
  [713] keyboard_key_pressed::return#21 = keyboard_key_pressed::return#0
  to:mode_ctrl::@26
mode_ctrl::@26: scope:[mode_ctrl]  from mode_ctrl::@10
  [714] mode_ctrl::$28 = keyboard_key_pressed::return#21
  [715] if(mode_ctrl::$28==0) goto mode_ctrl::@27
  to:mode_ctrl::@11
mode_ctrl::@27: scope:[mode_ctrl]  from mode_ctrl::@26
  [716] phi()
  to:mode_ctrl::@11
mode_ctrl::@11: scope:[mode_ctrl]  from mode_ctrl::@26 mode_ctrl::@27
  [717] mode_ctrl::ctrl#14 = phi( mode_ctrl::@26/0, mode_ctrl::@27/mode_ctrl::ctrl#22 )
  [718] if(mode_ctrl::ctrl#14==dtv_control#116) goto mode_ctrl::@1
  to:mode_ctrl::@18
mode_ctrl::@18: scope:[mode_ctrl]  from mode_ctrl::@11
  [719] dtv_control#16 = mode_ctrl::ctrl#14
  [720] *DTV_CONTROL = mode_ctrl::ctrl#14
  [721] *BORDER_COLOR = mode_ctrl::ctrl#14
  to:mode_ctrl::@1

void bitmap_init(byte* bitmap_init::bitmap)
bitmap_init: scope:[bitmap_init]  from mode_stdbitmap::@6
  [722] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [723] bitmap_init::bits#3 = phi( bitmap_init/$80, bitmap_init::@2/bitmap_init::bits#4 )
  [723] bitmap_init::x#2 = phi( bitmap_init/0, bitmap_init::@2/bitmap_init::x#1 )
  [724] bitmap_init::$0 = bitmap_init::x#2 & $f8
  [725] bitmap_plot_xlo[bitmap_init::x#2] = bitmap_init::$0
  [726] bitmap_plot_xhi[bitmap_init::x#2] = >mode_stdbitmap::BITMAP
  [727] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  [728] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
  [729] if(bitmap_init::bits#1!=0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [730] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [731] bitmap_init::bits#4 = phi( bitmap_init::@6/bitmap_init::bits#1, bitmap_init::@1/$80 )
  [732] bitmap_init::x#1 = ++ bitmap_init::x#2
  [733] if(bitmap_init::x#1!=0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [734] bitmap_init::yoffs#2 = phi( bitmap_init::@2/(byte*) 0, bitmap_init::@4/bitmap_init::yoffs#4 )
  [734] bitmap_init::y#2 = phi( bitmap_init::@2/0, bitmap_init::@4/bitmap_init::y#1 )
  [735] bitmap_init::$10 = bitmap_init::y#2 & 7
  [736] bitmap_init::$7 = < bitmap_init::yoffs#2
  [737] bitmap_init::$8 = bitmap_init::$10 | bitmap_init::$7
  [738] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$8
  [739] bitmap_init::$9 = > bitmap_init::yoffs#2
  [740] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$9
  [741] if(bitmap_init::$10!=7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [742] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [743] bitmap_init::yoffs#4 = phi( bitmap_init::@3/bitmap_init::yoffs#2, bitmap_init::@5/bitmap_init::yoffs#1 )
  [744] bitmap_init::y#1 = ++ bitmap_init::y#2
  [745] if(bitmap_init::y#1!=0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [746] return 
  to:@return

void bitmap_clear()
bitmap_clear: scope:[bitmap_clear]  from mode_stdbitmap::@10
  [747] bitmap_clear::bitmap#0 = *bitmap_plot_xhi w= *bitmap_plot_xlo
  [748] bitmap_clear::bitmap#5 = (byte*)bitmap_clear::bitmap#0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  [749] bitmap_clear::y#4 = phi( bitmap_clear/0, bitmap_clear::@3/bitmap_clear::y#1 )
  [749] bitmap_clear::bitmap#3 = phi( bitmap_clear/bitmap_clear::bitmap#5, bitmap_clear::@3/bitmap_clear::bitmap#1 )
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  [750] bitmap_clear::x#2 = phi( bitmap_clear::@1/0, bitmap_clear::@2/bitmap_clear::x#1 )
  [750] bitmap_clear::bitmap#2 = phi( bitmap_clear::@1/bitmap_clear::bitmap#3, bitmap_clear::@2/bitmap_clear::bitmap#1 )
  [751] *bitmap_clear::bitmap#2 = 0
  [752] bitmap_clear::bitmap#1 = ++ bitmap_clear::bitmap#2
  [753] bitmap_clear::x#1 = ++ bitmap_clear::x#2
  [754] if(bitmap_clear::x#1!=$c8) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  [755] bitmap_clear::y#1 = ++ bitmap_clear::y#4
  [756] if(bitmap_clear::y#1!=$28) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  [757] return 
  to:@return

void bitmap_line(byte bitmap_line::x0 , byte bitmap_line::x1 , byte bitmap_line::y0 , byte bitmap_line::y1)
bitmap_line: scope:[bitmap_line]  from mode_stdbitmap::@8
  [758] if(bitmap_line::x0#0<bitmap_line::x1#0) goto bitmap_line::@1
  to:bitmap_line::@2
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line
  [759] bitmap_line::xd#2 = bitmap_line::x0#0 - bitmap_line::x1#0
  [760] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@7
  to:bitmap_line::@3
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@2
  [761] bitmap_line::yd#2 = bitmap_line::y0#0 - bitmap_line::y1#0
  [762] if(bitmap_line::yd#2<bitmap_line::xd#2) goto bitmap_line::@8
  to:bitmap_line::@4
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@3
  [763] bitmap_line_ydxi::y#0 = bitmap_line::y1#0
  [764] bitmap_line_ydxi::x#0 = bitmap_line::x1#0
  [765] bitmap_line_ydxi::y1#0 = bitmap_line::y0#0
  [766] bitmap_line_ydxi::yd#0 = bitmap_line::yd#2
  [767] bitmap_line_ydxi::xd#0 = bitmap_line::xd#2
  [768] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@12 bitmap_line::@13 bitmap_line::@14 bitmap_line::@4 bitmap_line::@6 bitmap_line::@8 bitmap_line::@9
  [769] return 
  to:@return
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@3
  [770] bitmap_line_xdyi::x#0 = bitmap_line::x1#0
  [771] bitmap_line_xdyi::y#0 = bitmap_line::y1#0
  [772] bitmap_line_xdyi::x1#0 = bitmap_line::x0#0
  [773] bitmap_line_xdyi::xd#0 = bitmap_line::xd#2
  [774] bitmap_line_xdyi::yd#0 = bitmap_line::yd#2
  [775] call bitmap_line_xdyi 
  to:bitmap_line::@return
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@2
  [776] bitmap_line::yd#1 = bitmap_line::y1#0 - bitmap_line::y0#0
  [777] if(bitmap_line::yd#1<bitmap_line::xd#2) goto bitmap_line::@9
  to:bitmap_line::@10
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@7
  [778] bitmap_line_ydxd::y#0 = bitmap_line::y0#0
  [779] bitmap_line_ydxd::x#0 = bitmap_line::x0#0
  [780] bitmap_line_ydxd::y1#0 = bitmap_line::y1#0
  [781] bitmap_line_ydxd::yd#0 = bitmap_line::yd#1
  [782] bitmap_line_ydxd::xd#0 = bitmap_line::xd#2
  [783] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@7
  [784] bitmap_line_xdyd::x#0 = bitmap_line::x1#0
  [785] bitmap_line_xdyd::y#0 = bitmap_line::y1#0
  [786] bitmap_line_xdyd::x1#0 = bitmap_line::x0#0
  [787] bitmap_line_xdyd::xd#0 = bitmap_line::xd#2
  [788] bitmap_line_xdyd::yd#0 = bitmap_line::yd#1
  [789] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  [790] bitmap_line::xd#1 = bitmap_line::x1#0 - bitmap_line::x0#0
  [791] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@11
  to:bitmap_line::@5
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@1
  [792] bitmap_line::yd#10 = bitmap_line::y0#0 - bitmap_line::y1#0
  [793] if(bitmap_line::yd#10<bitmap_line::xd#1) goto bitmap_line::@12
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5
  [794] bitmap_line_ydxd::y#1 = bitmap_line::y1#0
  [795] bitmap_line_ydxd::x#1 = bitmap_line::x1#0
  [796] bitmap_line_ydxd::y1#1 = bitmap_line::y0#0
  [797] bitmap_line_ydxd::yd#1 = bitmap_line::yd#10
  [798] bitmap_line_ydxd::xd#1 = bitmap_line::xd#1
  [799] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line::@5
  [800] bitmap_line_xdyd::x#1 = bitmap_line::x0#0
  [801] bitmap_line_xdyd::y#1 = bitmap_line::y0#0
  [802] bitmap_line_xdyd::x1#1 = bitmap_line::x1#0
  [803] bitmap_line_xdyd::xd#1 = bitmap_line::xd#1
  [804] bitmap_line_xdyd::yd#1 = bitmap_line::yd#10
  [805] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@1
  [806] bitmap_line::yd#11 = bitmap_line::y1#0 - bitmap_line::y0#0
  [807] if(bitmap_line::yd#11<bitmap_line::xd#1) goto bitmap_line::@13
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@11
  [808] bitmap_line_ydxi::y#1 = bitmap_line::y0#0
  [809] bitmap_line_ydxi::x#1 = bitmap_line::x0#0
  [810] bitmap_line_ydxi::y1#1 = bitmap_line::y1#0
  [811] bitmap_line_ydxi::yd#1 = bitmap_line::yd#11
  [812] bitmap_line_ydxi::xd#1 = bitmap_line::xd#1
  [813] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@11
  [814] bitmap_line_xdyi::x#1 = bitmap_line::x0#0
  [815] bitmap_line_xdyi::y#1 = bitmap_line::y0#0
  [816] bitmap_line_xdyi::x1#1 = bitmap_line::x1#0
  [817] bitmap_line_xdyi::xd#1 = bitmap_line::xd#1
  [818] bitmap_line_xdyi::yd#1 = bitmap_line::yd#11
  [819] call bitmap_line_xdyi 
  to:bitmap_line::@return

void dtvSetCpuBankSegment1(byte dtvSetCpuBankSegment1::cpuBankIdx)
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from mode_8bppchunkybmm::@2 mode_8bppchunkybmm::@6 mode_8bppchunkybmm::@8
  [820] dtvSetCpuBankSegment1::cpuBankIdx#3 = phi( mode_8bppchunkybmm::@2/(byte)mode_8bppchunkybmm::PLANEB/$4000, mode_8bppchunkybmm::@6/dtvSetCpuBankSegment1::cpuBankIdx#1, mode_8bppchunkybmm::@8/(byte)$4000/$4000 )
  [821] *dtvSetCpuBankSegment1::cpuBank = dtvSetCpuBankSegment1::cpuBankIdx#3
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  [823] return 
  to:@return

void bitmap_line_ydxi(byte bitmap_line_ydxi::y , byte bitmap_line_ydxi::x , byte bitmap_line_ydxi::y1 , byte bitmap_line_ydxi::yd , byte bitmap_line_ydxi::xd)
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@14 bitmap_line::@4
  [824] bitmap_line_ydxi::y1#6 = phi( bitmap_line::@14/bitmap_line_ydxi::y1#1, bitmap_line::@4/bitmap_line_ydxi::y1#0 )
  [824] bitmap_line_ydxi::yd#5 = phi( bitmap_line::@14/bitmap_line_ydxi::yd#1, bitmap_line::@4/bitmap_line_ydxi::yd#0 )
  [824] bitmap_line_ydxi::y#6 = phi( bitmap_line::@14/bitmap_line_ydxi::y#1, bitmap_line::@4/bitmap_line_ydxi::y#0 )
  [824] bitmap_line_ydxi::x#5 = phi( bitmap_line::@14/bitmap_line_ydxi::x#1, bitmap_line::@4/bitmap_line_ydxi::x#0 )
  [824] bitmap_line_ydxi::xd#2 = phi( bitmap_line::@14/bitmap_line_ydxi::xd#1, bitmap_line::@4/bitmap_line_ydxi::xd#0 )
  [825] bitmap_line_ydxi::e#0 = bitmap_line_ydxi::xd#2 >> 1
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  [826] bitmap_line_ydxi::e#3 = phi( bitmap_line_ydxi/bitmap_line_ydxi::e#0, bitmap_line_ydxi::@2/bitmap_line_ydxi::e#6 )
  [826] bitmap_line_ydxi::y#3 = phi( bitmap_line_ydxi/bitmap_line_ydxi::y#6, bitmap_line_ydxi::@2/bitmap_line_ydxi::y#2 )
  [826] bitmap_line_ydxi::x#3 = phi( bitmap_line_ydxi/bitmap_line_ydxi::x#5, bitmap_line_ydxi::@2/bitmap_line_ydxi::x#6 )
  [827] bitmap_plot::x#2 = bitmap_line_ydxi::x#3
  [828] bitmap_plot::y#2 = bitmap_line_ydxi::y#3
  [829] call bitmap_plot 
  to:bitmap_line_ydxi::@4
bitmap_line_ydxi::@4: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  [830] bitmap_line_ydxi::y#2 = ++ bitmap_line_ydxi::y#3
  [831] bitmap_line_ydxi::e#1 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#2
  [832] if(bitmap_line_ydxi::yd#5>=bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@4
  [833] bitmap_line_ydxi::x#2 = ++ bitmap_line_ydxi::x#3
  [834] bitmap_line_ydxi::e#2 = bitmap_line_ydxi::e#1 - bitmap_line_ydxi::yd#5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4
  [835] bitmap_line_ydxi::e#6 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::e#2, bitmap_line_ydxi::@4/bitmap_line_ydxi::e#1 )
  [835] bitmap_line_ydxi::x#6 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::x#2, bitmap_line_ydxi::@4/bitmap_line_ydxi::x#3 )
  [836] bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#6 + 1
  [837] if(bitmap_line_ydxi::y#2!=bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  [838] return 
  to:@return

void bitmap_line_xdyi(byte bitmap_line_xdyi::x , byte bitmap_line_xdyi::y , byte bitmap_line_xdyi::x1 , byte bitmap_line_xdyi::xd , byte bitmap_line_xdyi::yd)
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@13 bitmap_line::@8
  [839] bitmap_line_xdyi::x1#6 = phi( bitmap_line::@13/bitmap_line_xdyi::x1#1, bitmap_line::@8/bitmap_line_xdyi::x1#0 )
  [839] bitmap_line_xdyi::xd#5 = phi( bitmap_line::@13/bitmap_line_xdyi::xd#1, bitmap_line::@8/bitmap_line_xdyi::xd#0 )
  [839] bitmap_line_xdyi::y#5 = phi( bitmap_line::@13/bitmap_line_xdyi::y#1, bitmap_line::@8/bitmap_line_xdyi::y#0 )
  [839] bitmap_line_xdyi::x#6 = phi( bitmap_line::@13/bitmap_line_xdyi::x#1, bitmap_line::@8/bitmap_line_xdyi::x#0 )
  [839] bitmap_line_xdyi::yd#2 = phi( bitmap_line::@13/bitmap_line_xdyi::yd#1, bitmap_line::@8/bitmap_line_xdyi::yd#0 )
  [840] bitmap_line_xdyi::e#0 = bitmap_line_xdyi::yd#2 >> 1
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  [841] bitmap_line_xdyi::e#3 = phi( bitmap_line_xdyi/bitmap_line_xdyi::e#0, bitmap_line_xdyi::@2/bitmap_line_xdyi::e#6 )
  [841] bitmap_line_xdyi::y#3 = phi( bitmap_line_xdyi/bitmap_line_xdyi::y#5, bitmap_line_xdyi::@2/bitmap_line_xdyi::y#6 )
  [841] bitmap_line_xdyi::x#3 = phi( bitmap_line_xdyi/bitmap_line_xdyi::x#6, bitmap_line_xdyi::@2/bitmap_line_xdyi::x#2 )
  [842] bitmap_plot::x#0 = bitmap_line_xdyi::x#3
  [843] bitmap_plot::y#0 = bitmap_line_xdyi::y#3
  [844] call bitmap_plot 
  to:bitmap_line_xdyi::@4
bitmap_line_xdyi::@4: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  [845] bitmap_line_xdyi::x#2 = ++ bitmap_line_xdyi::x#3
  [846] bitmap_line_xdyi::e#1 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#2
  [847] if(bitmap_line_xdyi::xd#5>=bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@4
  [848] bitmap_line_xdyi::y#2 = ++ bitmap_line_xdyi::y#3
  [849] bitmap_line_xdyi::e#2 = bitmap_line_xdyi::e#1 - bitmap_line_xdyi::xd#5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4
  [850] bitmap_line_xdyi::e#6 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::e#2, bitmap_line_xdyi::@4/bitmap_line_xdyi::e#1 )
  [850] bitmap_line_xdyi::y#6 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::y#2, bitmap_line_xdyi::@4/bitmap_line_xdyi::y#3 )
  [851] bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#6 + 1
  [852] if(bitmap_line_xdyi::x#2!=bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  [853] return 
  to:@return

void bitmap_line_ydxd(byte bitmap_line_ydxd::y , byte bitmap_line_ydxd::x , byte bitmap_line_ydxd::y1 , byte bitmap_line_ydxd::yd , byte bitmap_line_ydxd::xd)
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@10 bitmap_line::@6
  [854] bitmap_line_ydxd::y1#6 = phi( bitmap_line::@10/bitmap_line_ydxd::y1#0, bitmap_line::@6/bitmap_line_ydxd::y1#1 )
  [854] bitmap_line_ydxd::yd#5 = phi( bitmap_line::@10/bitmap_line_ydxd::yd#0, bitmap_line::@6/bitmap_line_ydxd::yd#1 )
  [854] bitmap_line_ydxd::y#7 = phi( bitmap_line::@10/bitmap_line_ydxd::y#0, bitmap_line::@6/bitmap_line_ydxd::y#1 )
  [854] bitmap_line_ydxd::x#5 = phi( bitmap_line::@10/bitmap_line_ydxd::x#0, bitmap_line::@6/bitmap_line_ydxd::x#1 )
  [854] bitmap_line_ydxd::xd#2 = phi( bitmap_line::@10/bitmap_line_ydxd::xd#0, bitmap_line::@6/bitmap_line_ydxd::xd#1 )
  [855] bitmap_line_ydxd::e#0 = bitmap_line_ydxd::xd#2 >> 1
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  [856] bitmap_line_ydxd::e#3 = phi( bitmap_line_ydxd/bitmap_line_ydxd::e#0, bitmap_line_ydxd::@2/bitmap_line_ydxd::e#6 )
  [856] bitmap_line_ydxd::y#2 = phi( bitmap_line_ydxd/bitmap_line_ydxd::y#7, bitmap_line_ydxd::@2/bitmap_line_ydxd::y#3 )
  [856] bitmap_line_ydxd::x#3 = phi( bitmap_line_ydxd/bitmap_line_ydxd::x#5, bitmap_line_ydxd::@2/bitmap_line_ydxd::x#6 )
  [857] bitmap_plot::x#3 = bitmap_line_ydxd::x#3
  [858] bitmap_plot::y#3 = bitmap_line_ydxd::y#2
  [859] call bitmap_plot 
  to:bitmap_line_ydxd::@4
bitmap_line_ydxd::@4: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  [860] bitmap_line_ydxd::y#3 = ++ bitmap_line_ydxd::y#2
  [861] bitmap_line_ydxd::e#1 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#2
  [862] if(bitmap_line_ydxd::yd#5>=bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@4
  [863] bitmap_line_ydxd::x#2 = -- bitmap_line_ydxd::x#3
  [864] bitmap_line_ydxd::e#2 = bitmap_line_ydxd::e#1 - bitmap_line_ydxd::yd#5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4
  [865] bitmap_line_ydxd::e#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::e#2, bitmap_line_ydxd::@4/bitmap_line_ydxd::e#1 )
  [865] bitmap_line_ydxd::x#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::x#2, bitmap_line_ydxd::@4/bitmap_line_ydxd::x#3 )
  [866] bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#6 + 1
  [867] if(bitmap_line_ydxd::y#3!=bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  [868] return 
  to:@return

void bitmap_line_xdyd(byte bitmap_line_xdyd::x , byte bitmap_line_xdyd::y , byte bitmap_line_xdyd::x1 , byte bitmap_line_xdyd::xd , byte bitmap_line_xdyd::yd)
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@12 bitmap_line::@9
  [869] bitmap_line_xdyd::x1#6 = phi( bitmap_line::@12/bitmap_line_xdyd::x1#1, bitmap_line::@9/bitmap_line_xdyd::x1#0 )
  [869] bitmap_line_xdyd::xd#5 = phi( bitmap_line::@12/bitmap_line_xdyd::xd#1, bitmap_line::@9/bitmap_line_xdyd::xd#0 )
  [869] bitmap_line_xdyd::y#5 = phi( bitmap_line::@12/bitmap_line_xdyd::y#1, bitmap_line::@9/bitmap_line_xdyd::y#0 )
  [869] bitmap_line_xdyd::x#6 = phi( bitmap_line::@12/bitmap_line_xdyd::x#1, bitmap_line::@9/bitmap_line_xdyd::x#0 )
  [869] bitmap_line_xdyd::yd#2 = phi( bitmap_line::@12/bitmap_line_xdyd::yd#1, bitmap_line::@9/bitmap_line_xdyd::yd#0 )
  [870] bitmap_line_xdyd::e#0 = bitmap_line_xdyd::yd#2 >> 1
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  [871] bitmap_line_xdyd::e#3 = phi( bitmap_line_xdyd/bitmap_line_xdyd::e#0, bitmap_line_xdyd::@2/bitmap_line_xdyd::e#6 )
  [871] bitmap_line_xdyd::y#3 = phi( bitmap_line_xdyd/bitmap_line_xdyd::y#5, bitmap_line_xdyd::@2/bitmap_line_xdyd::y#6 )
  [871] bitmap_line_xdyd::x#3 = phi( bitmap_line_xdyd/bitmap_line_xdyd::x#6, bitmap_line_xdyd::@2/bitmap_line_xdyd::x#2 )
  [872] bitmap_plot::x#1 = bitmap_line_xdyd::x#3
  [873] bitmap_plot::y#1 = bitmap_line_xdyd::y#3
  [874] call bitmap_plot 
  to:bitmap_line_xdyd::@4
bitmap_line_xdyd::@4: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  [875] bitmap_line_xdyd::x#2 = ++ bitmap_line_xdyd::x#3
  [876] bitmap_line_xdyd::e#1 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#2
  [877] if(bitmap_line_xdyd::xd#5>=bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@4
  [878] bitmap_line_xdyd::y#2 = -- bitmap_line_xdyd::y#3
  [879] bitmap_line_xdyd::e#2 = bitmap_line_xdyd::e#1 - bitmap_line_xdyd::xd#5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4
  [880] bitmap_line_xdyd::e#6 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::e#2, bitmap_line_xdyd::@4/bitmap_line_xdyd::e#1 )
  [880] bitmap_line_xdyd::y#6 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::y#2, bitmap_line_xdyd::@4/bitmap_line_xdyd::y#3 )
  [881] bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#6 + 1
  [882] if(bitmap_line_xdyd::x#2!=bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  [883] return 
  to:@return

void bitmap_plot(byte bitmap_plot::x , byte bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  [884] bitmap_plot::y#4 = phi( bitmap_line_xdyd::@1/bitmap_plot::y#1, bitmap_line_xdyi::@1/bitmap_plot::y#0, bitmap_line_ydxd::@1/bitmap_plot::y#3, bitmap_line_ydxi::@1/bitmap_plot::y#2 )
  [884] bitmap_plot::x#4 = phi( bitmap_line_xdyd::@1/bitmap_plot::x#1, bitmap_line_xdyi::@1/bitmap_plot::x#0, bitmap_line_ydxd::@1/bitmap_plot::x#3, bitmap_line_ydxi::@1/bitmap_plot::x#2 )
  [885] bitmap_plot::plotter_x#0 = bitmap_plot_xhi[bitmap_plot::x#4] w= bitmap_plot_xlo[bitmap_plot::x#4]
  [886] bitmap_plot::plotter_y#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4]
  [887] bitmap_plot::plotter#0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0
  [888] bitmap_plot::$1 = *((byte*)bitmap_plot::plotter#0) | bitmap_plot_bit[bitmap_plot::x#4]
  [889] *((byte*)bitmap_plot::plotter#0) = bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [890] return 
  to:@return

null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@11 blocks: mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@18 blocks: mode_ctrl::@18 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@27 mode_ctrl::@10 mode_ctrl::@17 mode_ctrl::@25 mode_ctrl::@9 mode_ctrl::@16 mode_ctrl::@24 mode_ctrl::@8 mode_ctrl::@15 mode_ctrl::@23 mode_ctrl::@7 mode_ctrl::@14 mode_ctrl::@22 mode_ctrl::@6 mode_ctrl::@13 mode_ctrl::@21 mode_ctrl::@5 mode_ctrl::@12 mode_ctrl::@20 mode_ctrl::@4 mode_ctrl::@19 mode_ctrl::@3 mode_ctrl::@2 mode_ctrl::@1  in scope keyboard_key_pressed

VARIABLE REGISTER WEIGHTS
void bitmap_clear()
byte* bitmap_clear::bitmap
word bitmap_clear::bitmap#0 10001.0
byte* bitmap_clear::bitmap#1 4200000.6
byte* bitmap_clear::bitmap#2 1.5500002E7
byte* bitmap_clear::bitmap#3 2010003.0
byte* bitmap_clear::bitmap#5 20002.0
byte bitmap_clear::x
byte bitmap_clear::x#1 1.50000015E7
byte bitmap_clear::x#2 6666667.333333333
byte bitmap_clear::y
byte bitmap_clear::y#1 1500001.5
byte bitmap_clear::y#4 333333.6666666667
void bitmap_init(byte* bitmap_init::bitmap)
byte~ bitmap_init::$0 2000002.0
byte~ bitmap_init::$10 500000.5
byte~ bitmap_init::$7 2000002.0
byte~ bitmap_init::$8 2000002.0
byte~ bitmap_init::$9 2000002.0
byte* bitmap_init::bitmap
byte bitmap_init::bits
byte bitmap_init::bits#1 1000001.0
byte bitmap_init::bits#3 600000.6000000001
byte bitmap_init::bits#4 666667.3333333334
byte bitmap_init::x
byte bitmap_init::x#1 1500001.5
byte bitmap_init::x#2 666667.3333333334
byte bitmap_init::y
byte bitmap_init::y#1 1500001.5
byte bitmap_init::y#2 500000.5
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#1 2000002.0
byte* bitmap_init::yoffs#2 625000.625
byte* bitmap_init::yoffs#4 1000001.0
void bitmap_line(byte bitmap_line::x0 , byte bitmap_line::x1 , byte bitmap_line::y0 , byte bitmap_line::y1)
byte bitmap_line::x0
byte bitmap_line::x0#0 395652.6086956522
byte bitmap_line::x1
byte bitmap_line::x1#0 413636.81818181823
byte bitmap_line::xd
byte bitmap_line::xd#1 350000.35
byte bitmap_line::xd#2 350000.35
byte bitmap_line::y0
byte bitmap_line::y0#0 576191.0952380954
byte bitmap_line::y1
byte bitmap_line::y1#0 605000.65
byte bitmap_line::yd
byte bitmap_line::yd#1 444444.8888888889
byte bitmap_line::yd#10 444444.8888888889
byte bitmap_line::yd#11 444444.8888888889
byte bitmap_line::yd#2 444444.8888888889
void bitmap_line_xdyd(byte bitmap_line_xdyd::x , byte bitmap_line_xdyd::y , byte bitmap_line_xdyd::x1 , byte bitmap_line_xdyd::xd , byte bitmap_line_xdyd::yd)
byte~ bitmap_line_xdyd::$6 2.0000000002E10
byte bitmap_line_xdyd::e
byte bitmap_line_xdyd::e#0 2.0000002E7
byte bitmap_line_xdyd::e#1 1.3333333334666666E10
byte bitmap_line_xdyd::e#2 2.0000000002E10
byte bitmap_line_xdyd::e#3 4.0020000006000004E9
byte bitmap_line_xdyd::e#6 1.0000000001E10
byte bitmap_line_xdyd::x
byte bitmap_line_xdyd::x#0 400000.4
byte bitmap_line_xdyd::x#1 400000.4
byte bitmap_line_xdyd::x#2 3.750000000375E9
byte bitmap_line_xdyd::x#3 7.502500001E9
byte bitmap_line_xdyd::x#6 6000001.5
byte bitmap_line_xdyd::x1
byte bitmap_line_xdyd::x1#0 666667.3333333334
byte bitmap_line_xdyd::x1#1 666667.3333333334
byte bitmap_line_xdyd::x1#6 7.144285716428571E8
byte bitmap_line_xdyd::xd
byte bitmap_line_xdyd::xd#0 1000001.0
byte bitmap_line_xdyd::xd#1 1000001.0
byte bitmap_line_xdyd::xd#5 1.428714286E9
byte bitmap_line_xdyd::y
byte bitmap_line_xdyd::y#0 500000.5
byte bitmap_line_xdyd::y#1 500000.5
byte bitmap_line_xdyd::y#2 1.0000000001E10
byte bitmap_line_xdyd::y#3 5.715714286428572E9
byte bitmap_line_xdyd::y#5 6000001.5
byte bitmap_line_xdyd::y#6 1.0000000001E10
byte bitmap_line_xdyd::yd
byte bitmap_line_xdyd::yd#0 2000002.0
byte bitmap_line_xdyd::yd#1 2000002.0
byte bitmap_line_xdyd::yd#2 7.151428574285713E8
void bitmap_line_xdyi(byte bitmap_line_xdyi::x , byte bitmap_line_xdyi::y , byte bitmap_line_xdyi::x1 , byte bitmap_line_xdyi::xd , byte bitmap_line_xdyi::yd)
byte~ bitmap_line_xdyi::$6 2.0000000002E10
byte bitmap_line_xdyi::e
byte bitmap_line_xdyi::e#0 2.0000002E7
byte bitmap_line_xdyi::e#1 1.3333333334666666E10
byte bitmap_line_xdyi::e#2 2.0000000002E10
byte bitmap_line_xdyi::e#3 4.0020000006000004E9
byte bitmap_line_xdyi::e#6 1.0000000001E10
byte bitmap_line_xdyi::x
byte bitmap_line_xdyi::x#0 400000.4
byte bitmap_line_xdyi::x#1 400000.4
byte bitmap_line_xdyi::x#2 3.750000000375E9
byte bitmap_line_xdyi::x#3 7.502500001E9
byte bitmap_line_xdyi::x#6 6000001.5
byte bitmap_line_xdyi::x1
byte bitmap_line_xdyi::x1#0 666667.3333333334
byte bitmap_line_xdyi::x1#1 666667.3333333334
byte bitmap_line_xdyi::x1#6 7.144285716428571E8
byte bitmap_line_xdyi::xd
byte bitmap_line_xdyi::xd#0 1000001.0
byte bitmap_line_xdyi::xd#1 1000001.0
byte bitmap_line_xdyi::xd#5 1.428714286E9
byte bitmap_line_xdyi::y
byte bitmap_line_xdyi::y#0 500000.5
byte bitmap_line_xdyi::y#1 500000.5
byte bitmap_line_xdyi::y#2 1.0000000001E10
byte bitmap_line_xdyi::y#3 5.715714286428572E9
byte bitmap_line_xdyi::y#5 6000001.5
byte bitmap_line_xdyi::y#6 1.0000000001E10
byte bitmap_line_xdyi::yd
byte bitmap_line_xdyi::yd#0 2000002.0
byte bitmap_line_xdyi::yd#1 2000002.0
byte bitmap_line_xdyi::yd#2 7.151428574285713E8
void bitmap_line_ydxd(byte bitmap_line_ydxd::y , byte bitmap_line_ydxd::x , byte bitmap_line_ydxd::y1 , byte bitmap_line_ydxd::yd , byte bitmap_line_ydxd::xd)
byte~ bitmap_line_ydxd::$6 2.0000000002E10
byte bitmap_line_ydxd::e
byte bitmap_line_ydxd::e#0 2.0000002E7
byte bitmap_line_ydxd::e#1 1.3333333334666666E10
byte bitmap_line_ydxd::e#2 2.0000000002E10
byte bitmap_line_ydxd::e#3 4.0020000006000004E9
byte bitmap_line_ydxd::e#6 1.0000000001E10
byte bitmap_line_ydxd::x
byte bitmap_line_ydxd::x#0 500000.5
byte bitmap_line_ydxd::x#1 500000.5
byte bitmap_line_ydxd::x#2 1.0000000001E10
byte bitmap_line_ydxd::x#3 5.715714286428572E9
byte bitmap_line_ydxd::x#5 6000001.5
byte bitmap_line_ydxd::x#6 1.0000000001E10
byte bitmap_line_ydxd::xd
byte bitmap_line_ydxd::xd#0 2000002.0
byte bitmap_line_ydxd::xd#1 2000002.0
byte bitmap_line_ydxd::xd#2 7.151428574285713E8
byte bitmap_line_ydxd::y
byte bitmap_line_ydxd::y#0 400000.4
byte bitmap_line_ydxd::y#1 400000.4
byte bitmap_line_ydxd::y#2 7.502500001E9
byte bitmap_line_ydxd::y#3 3.750000000375E9
byte bitmap_line_ydxd::y#7 6000001.5
byte bitmap_line_ydxd::y1
byte bitmap_line_ydxd::y1#0 666667.3333333334
byte bitmap_line_ydxd::y1#1 666667.3333333334
byte bitmap_line_ydxd::y1#6 7.144285716428571E8
byte bitmap_line_ydxd::yd
byte bitmap_line_ydxd::yd#0 1000001.0
byte bitmap_line_ydxd::yd#1 1000001.0
byte bitmap_line_ydxd::yd#5 1.428714286E9
void bitmap_line_ydxi(byte bitmap_line_ydxi::y , byte bitmap_line_ydxi::x , byte bitmap_line_ydxi::y1 , byte bitmap_line_ydxi::yd , byte bitmap_line_ydxi::xd)
byte~ bitmap_line_ydxi::$6 2.0000000002E10
byte bitmap_line_ydxi::e
byte bitmap_line_ydxi::e#0 2.0000002E7
byte bitmap_line_ydxi::e#1 1.3333333334666666E10
byte bitmap_line_ydxi::e#2 2.0000000002E10
byte bitmap_line_ydxi::e#3 4.0020000006000004E9
byte bitmap_line_ydxi::e#6 1.0000000001E10
byte bitmap_line_ydxi::x
byte bitmap_line_ydxi::x#0 500000.5
byte bitmap_line_ydxi::x#1 500000.5
byte bitmap_line_ydxi::x#2 1.0000000001E10
byte bitmap_line_ydxi::x#3 5.715714286428572E9
byte bitmap_line_ydxi::x#5 6000001.5
byte bitmap_line_ydxi::x#6 1.0000000001E10
byte bitmap_line_ydxi::xd
byte bitmap_line_ydxi::xd#0 2000002.0
byte bitmap_line_ydxi::xd#1 2000002.0
byte bitmap_line_ydxi::xd#2 7.151428574285713E8
byte bitmap_line_ydxi::y
byte bitmap_line_ydxi::y#0 400000.4
byte bitmap_line_ydxi::y#1 400000.4
byte bitmap_line_ydxi::y#2 3.750000000375E9
byte bitmap_line_ydxi::y#3 7.502500001E9
byte bitmap_line_ydxi::y#6 6000001.5
byte bitmap_line_ydxi::y1
byte bitmap_line_ydxi::y1#0 666667.3333333334
byte bitmap_line_ydxi::y1#1 666667.3333333334
byte bitmap_line_ydxi::y1#6 7.144285716428571E8
byte bitmap_line_ydxi::yd
byte bitmap_line_ydxi::yd#0 1000001.0
byte bitmap_line_ydxi::yd#1 1000001.0
byte bitmap_line_ydxi::yd#5 1.428714286E9
void bitmap_plot(byte bitmap_plot::x , byte bitmap_plot::y)
byte~ bitmap_plot::$1 2.00000000002E11
byte* bitmap_plot::plotter
word bitmap_plot::plotter#0 5.00000000005E10
word bitmap_plot::plotter_x
word bitmap_plot::plotter_x#0 1.00000000001E11
word bitmap_plot::plotter_y
word bitmap_plot::plotter_y#0 2.00000000002E11
byte bitmap_plot::x
byte bitmap_plot::x#0 1.0000000001E10
byte bitmap_plot::x#1 1.0000000001E10
byte bitmap_plot::x#2 1.0000000001E10
byte bitmap_plot::x#3 1.0000000001E10
byte bitmap_plot::x#4 8.500000000175E10
byte bitmap_plot::y
byte bitmap_plot::y#0 2.0000000002E10
byte bitmap_plot::y#1 2.0000000002E10
byte bitmap_plot::y#2 2.0000000002E10
byte bitmap_plot::y#3 2.0000000002E10
byte bitmap_plot::y#4 1.20000000003E11
void dtvSetCpuBankSegment1(byte dtvSetCpuBankSegment1::cpuBankIdx)
byte dtvSetCpuBankSegment1::cpuBankIdx
byte dtvSetCpuBankSegment1::cpuBankIdx#1 2000002.0
byte dtvSetCpuBankSegment1::cpuBankIdx#3 1.1000002E7
byte dtv_control
byte dtv_control#116 804117.7647058824
byte dtv_control#146 10001.0
byte dtv_control#16 666667.3333333334
byte keyboard_key_pressed(byte keyboard_key_pressed::key)
byte~ keyboard_key_pressed::$2 2.00000002E8
byte keyboard_key_pressed::colidx
byte keyboard_key_pressed::colidx#0 3.3333333666666668E7
byte keyboard_key_pressed::key
byte keyboard_key_pressed::key#20 1.00000001E8
byte keyboard_key_pressed::return
byte keyboard_key_pressed::return#0 8187273.681818182
byte keyboard_key_pressed::return#10 20002.0
byte keyboard_key_pressed::return#11 20002.0
byte keyboard_key_pressed::return#12 20002.0
byte keyboard_key_pressed::return#13 20002.0
byte keyboard_key_pressed::return#14 2.0000002E7
byte keyboard_key_pressed::return#15 2.0000002E7
byte keyboard_key_pressed::return#16 2.0000002E7
byte keyboard_key_pressed::return#17 2.0000002E7
byte keyboard_key_pressed::return#18 2.0000002E7
byte keyboard_key_pressed::return#19 2.0000002E7
byte keyboard_key_pressed::return#2 20002.0
byte keyboard_key_pressed::return#20 2.0000002E7
byte keyboard_key_pressed::return#21 2.0000002E7
byte keyboard_key_pressed::return#24 20002.0
byte keyboard_key_pressed::return#25 20002.0
byte keyboard_key_pressed::return#26 20002.0
byte keyboard_key_pressed::return#27 20002.0
byte keyboard_key_pressed::return#28 20002.0
byte keyboard_key_pressed::return#29 20002.0
byte keyboard_key_pressed::return#30 20002.0
byte keyboard_key_pressed::rowidx
byte keyboard_key_pressed::rowidx#0 2.00000002E8
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0 3.666666673333334E8
byte keyboard_matrix_read::return#2 2.00000002E8
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::rowid
byte keyboard_matrix_read::rowid#0 1.100000002E9
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte* memset::dst
byte* memset::dst#1 2000002.0
byte* memset::dst#2 1333334.6666666667
byte* memset::end
word memset::num
void* memset::return
void* memset::str
void menu()
byte~ menu::$13 20002.0
byte~ menu::$17 20002.0
byte~ menu::$21 20002.0
byte~ menu::$25 20002.0
byte~ menu::$29 20002.0
byte~ menu::$33 20002.0
byte~ menu::$37 20002.0
byte~ menu::$41 20002.0
byte~ menu::$45 20002.0
byte~ menu::$49 20002.0
byte~ menu::$5 20002.0
byte~ menu::$9 20002.0
byte* menu::c
byte* menu::c#1 20002.0
byte* menu::c#2 13334.666666666666
byte menu::i
byte menu::i#1 15001.5
byte menu::i#2 20002.0
void mode_8bppchunkybmm()
word~ mode_8bppchunkybmm::$7 1000001.0
byte mode_8bppchunkybmm::c
byte mode_8bppchunkybmm::c#0 2000002.0
byte* mode_8bppchunkybmm::gfxb
byte* mode_8bppchunkybmm::gfxb#1 420000.60000000003
byte* mode_8bppchunkybmm::gfxb#3 1550002.0
byte* mode_8bppchunkybmm::gfxb#4 750000.75
byte* mode_8bppchunkybmm::gfxb#5 200002.0
byte mode_8bppchunkybmm::gfxbCpuBank
byte mode_8bppchunkybmm::gfxbCpuBank#2 2000002.0
byte mode_8bppchunkybmm::gfxbCpuBank#4 1025001.25
byte mode_8bppchunkybmm::gfxbCpuBank#7 200002.0
byte mode_8bppchunkybmm::gfxbCpuBank#8 344444.8888888889
byte mode_8bppchunkybmm::i
byte mode_8bppchunkybmm::i#1 150001.5
byte mode_8bppchunkybmm::i#2 200002.0
word mode_8bppchunkybmm::x
word mode_8bppchunkybmm::x#1 1500001.5
word mode_8bppchunkybmm::x#2 300000.30000000005
byte mode_8bppchunkybmm::y
byte mode_8bppchunkybmm::y#1 150001.5
byte mode_8bppchunkybmm::y#6 92307.92307692306
void mode_8bpppixelcell()
byte~ mode_8bpppixelcell::$2 2000002.0
byte~ mode_8bpppixelcell::$3 1000001.0
byte~ mode_8bpppixelcell::$4 2000002.0
byte~ mode_8bpppixelcell::$5 2000002.0
byte~ mode_8bpppixelcell::$8 2.0000002E7
byte mode_8bpppixelcell::ax
byte mode_8bpppixelcell::ax#1 1500001.5
byte mode_8bpppixelcell::ax#2 428571.85714285716
byte mode_8bpppixelcell::ay
byte mode_8bpppixelcell::ay#1 150001.5
byte mode_8bpppixelcell::ay#4 120000.30000000002
byte mode_8bpppixelcell::bits
byte mode_8bpppixelcell::bits#0 1000001.0
byte mode_8bpppixelcell::bits#1 5000000.5
byte mode_8bpppixelcell::bits#2 4428572.0
byte mode_8bpppixelcell::c
byte mode_8bpppixelcell::c#2 2.0000002E7
byte mode_8bpppixelcell::c#3 2.0000002E7
byte mode_8bpppixelcell::ch
byte mode_8bpppixelcell::ch#1 150001.5
byte mode_8bpppixelcell::ch#8 11764.823529411764
byte* mode_8bpppixelcell::chargen
byte* mode_8bpppixelcell::chargen#1 131250.1875
byte* mode_8bpppixelcell::chargen#2 1550002.0
byte* mode_8bpppixelcell::chargen#4 200002.0
byte mode_8bpppixelcell::col
byte mode_8bpppixelcell::col#1 3014286.2857142854
byte mode_8bpppixelcell::col#2 3875000.5
byte mode_8bpppixelcell::col#5 700001.0
byte mode_8bpppixelcell::col#7 200002.0
byte mode_8bpppixelcell::cp
byte mode_8bpppixelcell::cp#1 1.50000015E7
byte mode_8bpppixelcell::cp#2 2222222.4444444445
byte mode_8bpppixelcell::cr
byte mode_8bpppixelcell::cr#1 1500001.5
byte mode_8bpppixelcell::cr#6 142857.2857142857
byte* mode_8bpppixelcell::gfxa
byte* mode_8bpppixelcell::gfxa#1 420000.60000000003
byte* mode_8bpppixelcell::gfxa#2 516667.3333333334
byte* mode_8bpppixelcell::gfxa#3 200002.0
byte* mode_8bpppixelcell::gfxb
byte* mode_8bpppixelcell::gfxb#1 2344444.888888889
byte* mode_8bpppixelcell::gfxb#2 5166667.333333333
byte* mode_8bpppixelcell::gfxb#5 700001.0
byte* mode_8bpppixelcell::gfxb#7 200002.0
byte mode_8bpppixelcell::i
byte mode_8bpppixelcell::i#1 150001.5
byte mode_8bpppixelcell::i#2 200002.0
void mode_ctrl()
byte~ mode_ctrl::$1 2.0000002E7
byte~ mode_ctrl::$12 2.0000002E7
byte~ mode_ctrl::$16 2.0000002E7
byte~ mode_ctrl::$20 2.0000002E7
byte~ mode_ctrl::$24 2.0000002E7
byte~ mode_ctrl::$28 2.0000002E7
byte~ mode_ctrl::$4 2.0000002E7
byte~ mode_ctrl::$8 2.0000002E7
byte mode_ctrl::ctrl
byte mode_ctrl::ctrl#0 6000000.6
byte mode_ctrl::ctrl#1 2.0000002E7
byte mode_ctrl::ctrl#10 8000000.8
byte mode_ctrl::ctrl#11 8000000.8
byte mode_ctrl::ctrl#12 8000000.8
byte mode_ctrl::ctrl#13 8000000.8
byte mode_ctrl::ctrl#14 5750001.25
byte mode_ctrl::ctrl#17 8000000.8
byte mode_ctrl::ctrl#2 2.0000002E7
byte mode_ctrl::ctrl#22 5000000.5
byte mode_ctrl::ctrl#3 2.0000002E7
byte mode_ctrl::ctrl#4 2.0000002E7
byte mode_ctrl::ctrl#5 2.0000002E7
byte mode_ctrl::ctrl#6 2.0000002E7
void mode_ecmchar()
byte~ mode_ecmchar::$2 2000002.0
byte~ mode_ecmchar::$3 2000002.0
byte~ mode_ecmchar::$4 2000002.0
byte~ mode_ecmchar::$5 1000001.0
byte~ mode_ecmchar::$6 2000002.0
byte~ mode_ecmchar::$7 2000002.0
byte* mode_ecmchar::ch
byte* mode_ecmchar::ch#1 420000.60000000003
byte* mode_ecmchar::ch#2 310000.4
byte* mode_ecmchar::ch#3 200002.0
byte* mode_ecmchar::col
byte* mode_ecmchar::col#1 190909.36363636365
byte* mode_ecmchar::col#2 775001.0
byte* mode_ecmchar::col#3 200002.0
byte mode_ecmchar::cx
byte mode_ecmchar::cx#1 1500001.5
byte mode_ecmchar::cx#2 363636.7272727273
byte mode_ecmchar::cy
byte mode_ecmchar::cy#1 150001.5
byte mode_ecmchar::cy#4 157143.14285714284
byte mode_ecmchar::i
byte mode_ecmchar::i#1 150001.5
byte mode_ecmchar::i#2 200002.0
void mode_hicolecmchar()
byte~ mode_hicolecmchar::$2 2000002.0
byte~ mode_hicolecmchar::$3 1000001.0
byte~ mode_hicolecmchar::$4 2000002.0
byte* mode_hicolecmchar::ch
byte* mode_hicolecmchar::ch#1 420000.60000000003
byte* mode_hicolecmchar::ch#2 387500.5
byte* mode_hicolecmchar::ch#3 200002.0
byte* mode_hicolecmchar::col
byte* mode_hicolecmchar::col#1 300000.4285714285
byte* mode_hicolecmchar::col#2 516667.3333333334
byte* mode_hicolecmchar::col#3 200002.0
byte mode_hicolecmchar::cx
byte mode_hicolecmchar::cx#1 1500001.5
byte mode_hicolecmchar::cx#2 333333.6666666666
byte mode_hicolecmchar::cy
byte mode_hicolecmchar::cy#1 150001.5
byte mode_hicolecmchar::cy#4 100000.25000000001
byte mode_hicolecmchar::i
byte mode_hicolecmchar::i#1 150001.5
byte mode_hicolecmchar::i#2 200002.0
byte mode_hicolecmchar::v
byte mode_hicolecmchar::v#0 1000001.0
void mode_hicolmcchar()
byte~ mode_hicolmcchar::$2 2000002.0
byte~ mode_hicolmcchar::$3 1000001.0
byte~ mode_hicolmcchar::$4 2000002.0
byte* mode_hicolmcchar::ch
byte* mode_hicolmcchar::ch#1 420000.60000000003
byte* mode_hicolmcchar::ch#2 387500.5
byte* mode_hicolmcchar::ch#3 200002.0
byte* mode_hicolmcchar::col
byte* mode_hicolmcchar::col#1 300000.4285714285
byte* mode_hicolmcchar::col#2 516667.3333333334
byte* mode_hicolmcchar::col#3 200002.0
byte mode_hicolmcchar::cx
byte mode_hicolmcchar::cx#1 1500001.5
byte mode_hicolmcchar::cx#2 333333.6666666666
byte mode_hicolmcchar::cy
byte mode_hicolmcchar::cy#1 150001.5
byte mode_hicolmcchar::cy#4 100000.25000000001
byte mode_hicolmcchar::i
byte mode_hicolmcchar::i#1 150001.5
byte mode_hicolmcchar::i#2 200002.0
byte mode_hicolmcchar::v
byte mode_hicolmcchar::v#0 1000001.0
void mode_hicolstdchar()
byte~ mode_hicolstdchar::$2 2000002.0
byte~ mode_hicolstdchar::$3 1000001.0
byte~ mode_hicolstdchar::$4 2000002.0
byte* mode_hicolstdchar::ch
byte* mode_hicolstdchar::ch#1 420000.60000000003
byte* mode_hicolstdchar::ch#2 387500.5
byte* mode_hicolstdchar::ch#3 200002.0
byte* mode_hicolstdchar::col
byte* mode_hicolstdchar::col#1 300000.4285714285
byte* mode_hicolstdchar::col#2 516667.3333333334
byte* mode_hicolstdchar::col#3 200002.0
byte mode_hicolstdchar::cx
byte mode_hicolstdchar::cx#1 1500001.5
byte mode_hicolstdchar::cx#2 333333.6666666666
byte mode_hicolstdchar::cy
byte mode_hicolstdchar::cy#1 150001.5
byte mode_hicolstdchar::cy#4 100000.25000000001
byte mode_hicolstdchar::i
byte mode_hicolstdchar::i#1 150001.5
byte mode_hicolstdchar::i#2 200002.0
byte mode_hicolstdchar::v
byte mode_hicolstdchar::v#0 1000001.0
void mode_mcchar()
byte~ mode_mcchar::$2 2000002.0
byte~ mode_mcchar::$3 2000002.0
byte~ mode_mcchar::$4 2000002.0
byte~ mode_mcchar::$5 1000001.0
byte~ mode_mcchar::$6 2000002.0
byte~ mode_mcchar::$7 2000002.0
byte* mode_mcchar::ch
byte* mode_mcchar::ch#1 420000.60000000003
byte* mode_mcchar::ch#2 310000.4
byte* mode_mcchar::ch#3 200002.0
byte* mode_mcchar::col
byte* mode_mcchar::col#1 190909.36363636365
byte* mode_mcchar::col#2 775001.0
byte* mode_mcchar::col#3 200002.0
byte mode_mcchar::cx
byte mode_mcchar::cx#1 1500001.5
byte mode_mcchar::cx#2 363636.7272727273
byte mode_mcchar::cy
byte mode_mcchar::cy#1 150001.5
byte mode_mcchar::cy#4 157143.14285714284
byte mode_mcchar::i
byte mode_mcchar::i#1 150001.5
byte mode_mcchar::i#2 200002.0
void mode_sixsfred()
byte~ mode_sixsfred::$2 2000002.0
byte~ mode_sixsfred::$3 2000002.0
byte~ mode_sixsfred::$6 2000002.0
byte mode_sixsfred::ax
byte mode_sixsfred::ax#1 1500001.5
byte mode_sixsfred::ax#2 400000.4
byte mode_sixsfred::ay
byte mode_sixsfred::ay#1 150001.5
byte mode_sixsfred::ay#4 150000.375
byte mode_sixsfred::bx
byte mode_sixsfred::bx#1 1500001.5
byte mode_sixsfred::bx#2 666667.3333333334
byte mode_sixsfred::by
byte mode_sixsfred::by#1 150001.5
byte mode_sixsfred::by#4 33333.666666666664
byte* mode_sixsfred::col
byte* mode_sixsfred::col#1 420000.60000000003
byte* mode_sixsfred::col#2 775001.0
byte* mode_sixsfred::col#3 200002.0
byte mode_sixsfred::cx
byte mode_sixsfred::cx#1 1500001.5
byte mode_sixsfred::cx#2 600000.6000000001
byte mode_sixsfred::cy
byte mode_sixsfred::cy#1 150001.5
byte mode_sixsfred::cy#4 150000.375
byte* mode_sixsfred::gfxa
byte* mode_sixsfred::gfxa#1 420000.60000000003
byte* mode_sixsfred::gfxa#2 775001.0
byte* mode_sixsfred::gfxa#3 200002.0
byte* mode_sixsfred::gfxb
byte* mode_sixsfred::gfxb#1 420000.60000000003
byte* mode_sixsfred::gfxb#2 1550002.0
byte* mode_sixsfred::gfxb#3 200002.0
byte mode_sixsfred::i
byte mode_sixsfred::i#1 150001.5
byte mode_sixsfred::i#2 200002.0
byte mode_sixsfred::row
byte mode_sixsfred::row#0 2000002.0
void mode_sixsfred2()
byte~ mode_sixsfred2::$2 2000002.0
byte~ mode_sixsfred2::$3 1000001.0
byte~ mode_sixsfred2::$4 2000002.0
byte~ mode_sixsfred2::$5 2000002.0
byte~ mode_sixsfred2::$8 2000002.0
byte mode_sixsfred2::ax
byte mode_sixsfred2::ax#1 1500001.5
byte mode_sixsfred2::ax#2 400000.4
byte mode_sixsfred2::ay
byte mode_sixsfred2::ay#1 150001.5
byte mode_sixsfred2::ay#4 150000.375
byte mode_sixsfred2::bx
byte mode_sixsfred2::bx#1 1500001.5
byte mode_sixsfred2::bx#2 666667.3333333334
byte mode_sixsfred2::by
byte mode_sixsfred2::by#1 150001.5
byte mode_sixsfred2::by#4 33333.666666666664
byte* mode_sixsfred2::col
byte* mode_sixsfred2::col#1 420000.60000000003
byte* mode_sixsfred2::col#2 516667.3333333334
byte* mode_sixsfred2::col#3 200002.0
byte mode_sixsfred2::cx
byte mode_sixsfred2::cx#1 1500001.5
byte mode_sixsfred2::cx#2 428571.85714285716
byte mode_sixsfred2::cy
byte mode_sixsfred2::cy#1 150001.5
byte mode_sixsfred2::cy#4 120000.30000000002
byte* mode_sixsfred2::gfxa
byte* mode_sixsfred2::gfxa#1 420000.60000000003
byte* mode_sixsfred2::gfxa#2 775001.0
byte* mode_sixsfred2::gfxa#3 200002.0
byte* mode_sixsfred2::gfxb
byte* mode_sixsfred2::gfxb#1 420000.60000000003
byte* mode_sixsfred2::gfxb#2 1550002.0
byte* mode_sixsfred2::gfxb#3 200002.0
byte mode_sixsfred2::i
byte mode_sixsfred2::i#1 150001.5
byte mode_sixsfred2::i#2 200002.0
byte mode_sixsfred2::row
byte mode_sixsfred2::row#0 2000002.0
void mode_stdbitmap()
byte~ mode_stdbitmap::$4 2000002.0
byte~ mode_stdbitmap::$7 2000002.0
byte~ mode_stdbitmap::$8 2000002.0
byte* mode_stdbitmap::ch
byte* mode_stdbitmap::ch#1 420000.60000000003
byte* mode_stdbitmap::ch#2 442857.7142857142
byte* mode_stdbitmap::ch#3 200002.0
byte mode_stdbitmap::col
byte mode_stdbitmap::col#0 1500001.5
byte mode_stdbitmap::col2
byte mode_stdbitmap::col2#0 1000001.0
byte mode_stdbitmap::cx
byte mode_stdbitmap::cx#1 1500001.5
byte mode_stdbitmap::cx#2 375000.375
byte mode_stdbitmap::cy
byte mode_stdbitmap::cy#1 150001.5
byte mode_stdbitmap::cy#4 109091.18181818182
byte mode_stdbitmap::i
byte mode_stdbitmap::i#1 150001.5
byte mode_stdbitmap::i#2 200002.0
byte mode_stdbitmap::l
byte mode_stdbitmap::l#1 200002.0
byte mode_stdbitmap::l#2 100001.0
void mode_stdchar()
byte~ mode_stdchar::$2 2000002.0
byte~ mode_stdchar::$3 2000002.0
byte~ mode_stdchar::$4 2000002.0
byte~ mode_stdchar::$5 1000001.0
byte~ mode_stdchar::$6 2000002.0
byte~ mode_stdchar::$7 2000002.0
byte* mode_stdchar::ch
byte* mode_stdchar::ch#1 420000.60000000003
byte* mode_stdchar::ch#2 310000.4
byte* mode_stdchar::ch#3 200002.0
byte* mode_stdchar::col
byte* mode_stdchar::col#1 190909.36363636365
byte* mode_stdchar::col#2 775001.0
byte* mode_stdchar::col#3 200002.0
byte mode_stdchar::cx
byte mode_stdchar::cx#1 1500001.5
byte mode_stdchar::cx#2 363636.7272727273
byte mode_stdchar::cy
byte mode_stdchar::cy#1 150001.5
byte mode_stdchar::cy#4 157143.14285714284
byte mode_stdchar::i
byte mode_stdchar::i#1 150001.5
byte mode_stdchar::i#2 200002.0
void mode_twoplanebitmap()
byte~ mode_twoplanebitmap::$2 2000002.0
byte~ mode_twoplanebitmap::$3 1000001.0
byte~ mode_twoplanebitmap::$4 2000002.0
byte~ mode_twoplanebitmap::$5 2000002.0
byte~ mode_twoplanebitmap::$8 2000002.0
byte mode_twoplanebitmap::ax
byte mode_twoplanebitmap::ax#1 1500001.5
byte mode_twoplanebitmap::ax#2 250000.25
byte mode_twoplanebitmap::ay
byte mode_twoplanebitmap::ay#1 150001.5
byte mode_twoplanebitmap::ay#5 109091.18181818182
byte mode_twoplanebitmap::bx
byte mode_twoplanebitmap::bx#1 1500001.5
byte mode_twoplanebitmap::bx#2 666667.3333333334
byte mode_twoplanebitmap::by
byte mode_twoplanebitmap::by#1 150001.5
byte mode_twoplanebitmap::by#4 33333.666666666664
byte* mode_twoplanebitmap::col
byte* mode_twoplanebitmap::col#1 420000.60000000003
byte* mode_twoplanebitmap::col#2 516667.3333333334
byte* mode_twoplanebitmap::col#3 200002.0
byte mode_twoplanebitmap::cx
byte mode_twoplanebitmap::cx#1 1500001.5
byte mode_twoplanebitmap::cx#2 428571.85714285716
byte mode_twoplanebitmap::cy
byte mode_twoplanebitmap::cy#1 150001.5
byte mode_twoplanebitmap::cy#4 120000.30000000002
byte* mode_twoplanebitmap::gfxa
byte* mode_twoplanebitmap::gfxa#1 2000002.0
byte* mode_twoplanebitmap::gfxa#2 2000002.0
byte* mode_twoplanebitmap::gfxa#3 1020001.2
byte* mode_twoplanebitmap::gfxa#6 620000.8
byte* mode_twoplanebitmap::gfxa#7 200002.0
byte* mode_twoplanebitmap::gfxb
byte* mode_twoplanebitmap::gfxb#1 420000.60000000003
byte* mode_twoplanebitmap::gfxb#2 1550002.0
byte* mode_twoplanebitmap::gfxb#3 200002.0
byte mode_twoplanebitmap::i
byte mode_twoplanebitmap::i#1 150001.5
byte mode_twoplanebitmap::i#2 200002.0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 1.1000002E7
byte* print_char_cursor
byte* print_char_cursor#103 200002.0
byte* print_char_cursor#2 100001.0
byte* print_char_cursor#26 3666667.333333333
byte* print_char_cursor#37 3683334.1666666665
byte* print_char_cursor#38 1.4328571485714287E8
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#1 91666.83333333334
byte* print_line_cursor#19 2.001000003E9
byte* print_line_cursor#2 6.00040001E8
void print_ln()
byte* print_screen
void print_str_lines(byte* print_str_lines::str)
byte print_str_lines::ch
byte print_str_lines::ch#0 666667.3333333334
byte* print_str_lines::str
byte* print_str_lines::str#0 233333.66666666666
byte* print_str_lines::str#2 150001.5
byte* print_str_lines::str#3 1550002.0

Initial phi equivalence classes
[ menu::i#2 menu::i#1 ]
[ menu::c#2 menu::c#1 ]
[ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
[ print_char_cursor#37 print_char_cursor#2 print_char_cursor#103 print_char_cursor#38 print_char_cursor#26 ]
[ keyboard_key_pressed::key#20 ]
[ mode_stdchar::i#2 mode_stdchar::i#1 ]
[ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
[ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
[ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ]
[ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ]
[ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
[ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
[ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
[ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ]
[ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ]
[ mode_mcchar::i#2 mode_mcchar::i#1 ]
[ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
[ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
[ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ]
[ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ]
[ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
[ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
[ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
[ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ]
[ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
[ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
[ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
[ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
[ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ]
[ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ]
[ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
[ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
[ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
[ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ]
[ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ]
[ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
[ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
[ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
[ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ]
[ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ]
[ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
[ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
[ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
[ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ]
[ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
[ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ]
[ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
[ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
[ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ]
[ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
[ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
[ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
[ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
[ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ]
[ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ]
[ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ]
[ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
[ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
[ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ]
[ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
[ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
[ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
[ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
[ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ]
[ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
[ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ]
[ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
[ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
[ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ]
[ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
[ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
[ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
[ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
[ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ]
[ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
[ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ]
[ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
[ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ]
[ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ]
[ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
[ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
[ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ]
[ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
[ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
[ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ]
[ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
[ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 ]
[ dtv_control#116 dtv_control#146 dtv_control#16 ]
[ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Added variable keyboard_key_pressed::return#2 to live range equivalence class [ keyboard_key_pressed::return#2 ]
Added variable menu::$5 to live range equivalence class [ menu::$5 ]
Added variable keyboard_key_pressed::return#24 to live range equivalence class [ keyboard_key_pressed::return#24 ]
Added variable menu::$9 to live range equivalence class [ menu::$9 ]
Added variable keyboard_key_pressed::return#25 to live range equivalence class [ keyboard_key_pressed::return#25 ]
Added variable menu::$13 to live range equivalence class [ menu::$13 ]
Added variable keyboard_key_pressed::return#26 to live range equivalence class [ keyboard_key_pressed::return#26 ]
Added variable menu::$17 to live range equivalence class [ menu::$17 ]
Added variable keyboard_key_pressed::return#27 to live range equivalence class [ keyboard_key_pressed::return#27 ]
Added variable menu::$21 to live range equivalence class [ menu::$21 ]
Added variable keyboard_key_pressed::return#28 to live range equivalence class [ keyboard_key_pressed::return#28 ]
Added variable menu::$25 to live range equivalence class [ menu::$25 ]
Added variable keyboard_key_pressed::return#29 to live range equivalence class [ keyboard_key_pressed::return#29 ]
Added variable menu::$29 to live range equivalence class [ menu::$29 ]
Added variable keyboard_key_pressed::return#30 to live range equivalence class [ keyboard_key_pressed::return#30 ]
Added variable menu::$33 to live range equivalence class [ menu::$33 ]
Added variable keyboard_key_pressed::return#10 to live range equivalence class [ keyboard_key_pressed::return#10 ]
Added variable menu::$37 to live range equivalence class [ menu::$37 ]
Added variable keyboard_key_pressed::return#11 to live range equivalence class [ keyboard_key_pressed::return#11 ]
Added variable menu::$41 to live range equivalence class [ menu::$41 ]
Added variable keyboard_key_pressed::return#12 to live range equivalence class [ keyboard_key_pressed::return#12 ]
Added variable menu::$45 to live range equivalence class [ menu::$45 ]
Added variable keyboard_key_pressed::return#13 to live range equivalence class [ keyboard_key_pressed::return#13 ]
Added variable menu::$49 to live range equivalence class [ menu::$49 ]
Added variable print_str_lines::ch#0 to live range equivalence class [ print_str_lines::ch#0 ]
Added variable print_char::ch#0 to live range equivalence class [ print_char::ch#0 ]
Added variable keyboard_key_pressed::colidx#0 to live range equivalence class [ keyboard_key_pressed::colidx#0 ]
Added variable keyboard_key_pressed::rowidx#0 to live range equivalence class [ keyboard_key_pressed::rowidx#0 ]
Added variable keyboard_matrix_read::rowid#0 to live range equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to live range equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_key_pressed::$2 to live range equivalence class [ keyboard_key_pressed::$2 ]
Added variable keyboard_key_pressed::return#0 to live range equivalence class [ keyboard_key_pressed::return#0 ]
Added variable mode_stdchar::$2 to live range equivalence class [ mode_stdchar::$2 ]
Added variable mode_stdchar::$3 to live range equivalence class [ mode_stdchar::$3 ]
Added variable mode_stdchar::$4 to live range equivalence class [ mode_stdchar::$4 ]
Added variable mode_stdchar::$5 to live range equivalence class [ mode_stdchar::$5 ]
Added variable mode_stdchar::$6 to live range equivalence class [ mode_stdchar::$6 ]
Added variable mode_stdchar::$7 to live range equivalence class [ mode_stdchar::$7 ]
Added variable mode_ecmchar::$2 to live range equivalence class [ mode_ecmchar::$2 ]
Added variable mode_ecmchar::$3 to live range equivalence class [ mode_ecmchar::$3 ]
Added variable mode_ecmchar::$4 to live range equivalence class [ mode_ecmchar::$4 ]
Added variable mode_ecmchar::$5 to live range equivalence class [ mode_ecmchar::$5 ]
Added variable mode_ecmchar::$6 to live range equivalence class [ mode_ecmchar::$6 ]
Added variable mode_ecmchar::$7 to live range equivalence class [ mode_ecmchar::$7 ]
Added variable mode_mcchar::$2 to live range equivalence class [ mode_mcchar::$2 ]
Added variable mode_mcchar::$3 to live range equivalence class [ mode_mcchar::$3 ]
Added variable mode_mcchar::$4 to live range equivalence class [ mode_mcchar::$4 ]
Added variable mode_mcchar::$5 to live range equivalence class [ mode_mcchar::$5 ]
Added variable mode_mcchar::$6 to live range equivalence class [ mode_mcchar::$6 ]
Added variable mode_mcchar::$7 to live range equivalence class [ mode_mcchar::$7 ]
Added variable mode_stdbitmap::$4 to live range equivalence class [ mode_stdbitmap::$4 ]
Added variable mode_stdbitmap::col#0 to live range equivalence class [ mode_stdbitmap::col#0 ]
Added variable mode_stdbitmap::col2#0 to live range equivalence class [ mode_stdbitmap::col2#0 ]
Added variable mode_stdbitmap::$7 to live range equivalence class [ mode_stdbitmap::$7 ]
Added variable mode_stdbitmap::$8 to live range equivalence class [ mode_stdbitmap::$8 ]
Added variable bitmap_line::x0#0 to live range equivalence class [ bitmap_line::x0#0 ]
Added variable bitmap_line::x1#0 to live range equivalence class [ bitmap_line::x1#0 ]
Added variable bitmap_line::y0#0 to live range equivalence class [ bitmap_line::y0#0 ]
Added variable bitmap_line::y1#0 to live range equivalence class [ bitmap_line::y1#0 ]
Added variable mode_hicolstdchar::$2 to live range equivalence class [ mode_hicolstdchar::$2 ]
Added variable mode_hicolstdchar::$3 to live range equivalence class [ mode_hicolstdchar::$3 ]
Added variable mode_hicolstdchar::$4 to live range equivalence class [ mode_hicolstdchar::$4 ]
Added variable mode_hicolstdchar::v#0 to live range equivalence class [ mode_hicolstdchar::v#0 ]
Added variable mode_hicolecmchar::$2 to live range equivalence class [ mode_hicolecmchar::$2 ]
Added variable mode_hicolecmchar::$3 to live range equivalence class [ mode_hicolecmchar::$3 ]
Added variable mode_hicolecmchar::$4 to live range equivalence class [ mode_hicolecmchar::$4 ]
Added variable mode_hicolecmchar::v#0 to live range equivalence class [ mode_hicolecmchar::v#0 ]
Added variable mode_hicolmcchar::$2 to live range equivalence class [ mode_hicolmcchar::$2 ]
Added variable mode_hicolmcchar::$3 to live range equivalence class [ mode_hicolmcchar::$3 ]
Added variable mode_hicolmcchar::$4 to live range equivalence class [ mode_hicolmcchar::$4 ]
Added variable mode_hicolmcchar::v#0 to live range equivalence class [ mode_hicolmcchar::v#0 ]
Added variable mode_sixsfred2::$2 to live range equivalence class [ mode_sixsfred2::$2 ]
Added variable mode_sixsfred2::$3 to live range equivalence class [ mode_sixsfred2::$3 ]
Added variable mode_sixsfred2::$4 to live range equivalence class [ mode_sixsfred2::$4 ]
Added variable mode_sixsfred2::$5 to live range equivalence class [ mode_sixsfred2::$5 ]
Added variable mode_sixsfred2::$8 to live range equivalence class [ mode_sixsfred2::$8 ]
Added variable mode_sixsfred2::row#0 to live range equivalence class [ mode_sixsfred2::row#0 ]
Added variable mode_twoplanebitmap::$2 to live range equivalence class [ mode_twoplanebitmap::$2 ]
Added variable mode_twoplanebitmap::$3 to live range equivalence class [ mode_twoplanebitmap::$3 ]
Added variable mode_twoplanebitmap::$4 to live range equivalence class [ mode_twoplanebitmap::$4 ]
Added variable mode_twoplanebitmap::$5 to live range equivalence class [ mode_twoplanebitmap::$5 ]
Added variable mode_twoplanebitmap::$8 to live range equivalence class [ mode_twoplanebitmap::$8 ]
Added variable mode_sixsfred::$2 to live range equivalence class [ mode_sixsfred::$2 ]
Added variable mode_sixsfred::$3 to live range equivalence class [ mode_sixsfred::$3 ]
Added variable mode_sixsfred::$6 to live range equivalence class [ mode_sixsfred::$6 ]
Added variable mode_sixsfred::row#0 to live range equivalence class [ mode_sixsfred::row#0 ]
Added variable mode_8bpppixelcell::$2 to live range equivalence class [ mode_8bpppixelcell::$2 ]
Added variable mode_8bpppixelcell::$3 to live range equivalence class [ mode_8bpppixelcell::$3 ]
Added variable mode_8bpppixelcell::$4 to live range equivalence class [ mode_8bpppixelcell::$4 ]
Added variable mode_8bpppixelcell::$5 to live range equivalence class [ mode_8bpppixelcell::$5 ]
Added variable mode_8bpppixelcell::$8 to live range equivalence class [ mode_8bpppixelcell::$8 ]
Added variable mode_8bppchunkybmm::$7 to live range equivalence class [ mode_8bppchunkybmm::$7 ]
Added variable mode_8bppchunkybmm::c#0 to live range equivalence class [ mode_8bppchunkybmm::c#0 ]
Added variable keyboard_matrix_read::return#0 to live range equivalence class [ keyboard_matrix_read::return#0 ]
Added variable keyboard_key_pressed::return#14 to live range equivalence class [ keyboard_key_pressed::return#14 ]
Added variable mode_ctrl::$1 to live range equivalence class [ mode_ctrl::$1 ]
Added variable keyboard_key_pressed::return#15 to live range equivalence class [ keyboard_key_pressed::return#15 ]
Added variable mode_ctrl::$4 to live range equivalence class [ mode_ctrl::$4 ]
Added variable keyboard_key_pressed::return#16 to live range equivalence class [ keyboard_key_pressed::return#16 ]
Added variable mode_ctrl::$8 to live range equivalence class [ mode_ctrl::$8 ]
Added variable keyboard_key_pressed::return#17 to live range equivalence class [ keyboard_key_pressed::return#17 ]
Added variable mode_ctrl::$12 to live range equivalence class [ mode_ctrl::$12 ]
Added variable keyboard_key_pressed::return#18 to live range equivalence class [ keyboard_key_pressed::return#18 ]
Added variable mode_ctrl::$16 to live range equivalence class [ mode_ctrl::$16 ]
Added variable keyboard_key_pressed::return#19 to live range equivalence class [ keyboard_key_pressed::return#19 ]
Added variable mode_ctrl::$20 to live range equivalence class [ mode_ctrl::$20 ]
Added variable keyboard_key_pressed::return#20 to live range equivalence class [ keyboard_key_pressed::return#20 ]
Added variable mode_ctrl::$24 to live range equivalence class [ mode_ctrl::$24 ]
Added variable keyboard_key_pressed::return#21 to live range equivalence class [ keyboard_key_pressed::return#21 ]
Added variable mode_ctrl::$28 to live range equivalence class [ mode_ctrl::$28 ]
Added variable bitmap_init::$0 to live range equivalence class [ bitmap_init::$0 ]
Added variable bitmap_init::$10 to live range equivalence class [ bitmap_init::$10 ]
Added variable bitmap_init::$7 to live range equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$8 to live range equivalence class [ bitmap_init::$8 ]
Added variable bitmap_init::$9 to live range equivalence class [ bitmap_init::$9 ]
Added variable bitmap_clear::bitmap#0 to live range equivalence class [ bitmap_clear::bitmap#0 ]
Added variable bitmap_line::xd#2 to live range equivalence class [ bitmap_line::xd#2 ]
Added variable bitmap_line::yd#2 to live range equivalence class [ bitmap_line::yd#2 ]
Added variable bitmap_line::yd#1 to live range equivalence class [ bitmap_line::yd#1 ]
Added variable bitmap_line::xd#1 to live range equivalence class [ bitmap_line::xd#1 ]
Added variable bitmap_line::yd#10 to live range equivalence class [ bitmap_line::yd#10 ]
Added variable bitmap_line::yd#11 to live range equivalence class [ bitmap_line::yd#11 ]
Added variable bitmap_line_ydxi::$6 to live range equivalence class [ bitmap_line_ydxi::$6 ]
Added variable bitmap_line_xdyi::$6 to live range equivalence class [ bitmap_line_xdyi::$6 ]
Added variable bitmap_line_ydxd::$6 to live range equivalence class [ bitmap_line_ydxd::$6 ]
Added variable bitmap_line_xdyd::$6 to live range equivalence class [ bitmap_line_xdyd::$6 ]
Added variable bitmap_plot::plotter_x#0 to live range equivalence class [ bitmap_plot::plotter_x#0 ]
Added variable bitmap_plot::plotter_y#0 to live range equivalence class [ bitmap_plot::plotter_y#0 ]
Added variable bitmap_plot::plotter#0 to live range equivalence class [ bitmap_plot::plotter#0 ]
Added variable bitmap_plot::$1 to live range equivalence class [ bitmap_plot::$1 ]
Complete equivalence classes
[ menu::i#2 menu::i#1 ]
[ menu::c#2 menu::c#1 ]
[ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
[ print_char_cursor#37 print_char_cursor#2 print_char_cursor#103 print_char_cursor#38 print_char_cursor#26 ]
[ keyboard_key_pressed::key#20 ]
[ mode_stdchar::i#2 mode_stdchar::i#1 ]
[ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
[ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
[ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ]
[ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ]
[ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
[ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
[ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
[ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ]
[ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ]
[ mode_mcchar::i#2 mode_mcchar::i#1 ]
[ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
[ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
[ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ]
[ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ]
[ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
[ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
[ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
[ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ]
[ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
[ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
[ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
[ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
[ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ]
[ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ]
[ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
[ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
[ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
[ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ]
[ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ]
[ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
[ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
[ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
[ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ]
[ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ]
[ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
[ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
[ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
[ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ]
[ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
[ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ]
[ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
[ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
[ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ]
[ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
[ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
[ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
[ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
[ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ]
[ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ]
[ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ]
[ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
[ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
[ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ]
[ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
[ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
[ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
[ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
[ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ]
[ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
[ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ]
[ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
[ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
[ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ]
[ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
[ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
[ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
[ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
[ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ]
[ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
[ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ]
[ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
[ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ]
[ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ]
[ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
[ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
[ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ]
[ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
[ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
[ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ]
[ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
[ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 ]
[ dtv_control#116 dtv_control#146 dtv_control#16 ]
[ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
[ keyboard_key_pressed::return#2 ]
[ menu::$5 ]
[ keyboard_key_pressed::return#24 ]
[ menu::$9 ]
[ keyboard_key_pressed::return#25 ]
[ menu::$13 ]
[ keyboard_key_pressed::return#26 ]
[ menu::$17 ]
[ keyboard_key_pressed::return#27 ]
[ menu::$21 ]
[ keyboard_key_pressed::return#28 ]
[ menu::$25 ]
[ keyboard_key_pressed::return#29 ]
[ menu::$29 ]
[ keyboard_key_pressed::return#30 ]
[ menu::$33 ]
[ keyboard_key_pressed::return#10 ]
[ menu::$37 ]
[ keyboard_key_pressed::return#11 ]
[ menu::$41 ]
[ keyboard_key_pressed::return#12 ]
[ menu::$45 ]
[ keyboard_key_pressed::return#13 ]
[ menu::$49 ]
[ print_str_lines::ch#0 ]
[ print_char::ch#0 ]
[ keyboard_key_pressed::colidx#0 ]
[ keyboard_key_pressed::rowidx#0 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_key_pressed::$2 ]
[ keyboard_key_pressed::return#0 ]
[ mode_stdchar::$2 ]
[ mode_stdchar::$3 ]
[ mode_stdchar::$4 ]
[ mode_stdchar::$5 ]
[ mode_stdchar::$6 ]
[ mode_stdchar::$7 ]
[ mode_ecmchar::$2 ]
[ mode_ecmchar::$3 ]
[ mode_ecmchar::$4 ]
[ mode_ecmchar::$5 ]
[ mode_ecmchar::$6 ]
[ mode_ecmchar::$7 ]
[ mode_mcchar::$2 ]
[ mode_mcchar::$3 ]
[ mode_mcchar::$4 ]
[ mode_mcchar::$5 ]
[ mode_mcchar::$6 ]
[ mode_mcchar::$7 ]
[ mode_stdbitmap::$4 ]
[ mode_stdbitmap::col#0 ]
[ mode_stdbitmap::col2#0 ]
[ mode_stdbitmap::$7 ]
[ mode_stdbitmap::$8 ]
[ bitmap_line::x0#0 ]
[ bitmap_line::x1#0 ]
[ bitmap_line::y0#0 ]
[ bitmap_line::y1#0 ]
[ mode_hicolstdchar::$2 ]
[ mode_hicolstdchar::$3 ]
[ mode_hicolstdchar::$4 ]
[ mode_hicolstdchar::v#0 ]
[ mode_hicolecmchar::$2 ]
[ mode_hicolecmchar::$3 ]
[ mode_hicolecmchar::$4 ]
[ mode_hicolecmchar::v#0 ]
[ mode_hicolmcchar::$2 ]
[ mode_hicolmcchar::$3 ]
[ mode_hicolmcchar::$4 ]
[ mode_hicolmcchar::v#0 ]
[ mode_sixsfred2::$2 ]
[ mode_sixsfred2::$3 ]
[ mode_sixsfred2::$4 ]
[ mode_sixsfred2::$5 ]
[ mode_sixsfred2::$8 ]
[ mode_sixsfred2::row#0 ]
[ mode_twoplanebitmap::$2 ]
[ mode_twoplanebitmap::$3 ]
[ mode_twoplanebitmap::$4 ]
[ mode_twoplanebitmap::$5 ]
[ mode_twoplanebitmap::$8 ]
[ mode_sixsfred::$2 ]
[ mode_sixsfred::$3 ]
[ mode_sixsfred::$6 ]
[ mode_sixsfred::row#0 ]
[ mode_8bpppixelcell::$2 ]
[ mode_8bpppixelcell::$3 ]
[ mode_8bpppixelcell::$4 ]
[ mode_8bpppixelcell::$5 ]
[ mode_8bpppixelcell::$8 ]
[ mode_8bppchunkybmm::$7 ]
[ mode_8bppchunkybmm::c#0 ]
[ keyboard_matrix_read::return#0 ]
[ keyboard_key_pressed::return#14 ]
[ mode_ctrl::$1 ]
[ keyboard_key_pressed::return#15 ]
[ mode_ctrl::$4 ]
[ keyboard_key_pressed::return#16 ]
[ mode_ctrl::$8 ]
[ keyboard_key_pressed::return#17 ]
[ mode_ctrl::$12 ]
[ keyboard_key_pressed::return#18 ]
[ mode_ctrl::$16 ]
[ keyboard_key_pressed::return#19 ]
[ mode_ctrl::$20 ]
[ keyboard_key_pressed::return#20 ]
[ mode_ctrl::$24 ]
[ keyboard_key_pressed::return#21 ]
[ mode_ctrl::$28 ]
[ bitmap_init::$0 ]
[ bitmap_init::$10 ]
[ bitmap_init::$7 ]
[ bitmap_init::$8 ]
[ bitmap_init::$9 ]
[ bitmap_clear::bitmap#0 ]
[ bitmap_line::xd#2 ]
[ bitmap_line::yd#2 ]
[ bitmap_line::yd#1 ]
[ bitmap_line::xd#1 ]
[ bitmap_line::yd#10 ]
[ bitmap_line::yd#11 ]
[ bitmap_line_ydxi::$6 ]
[ bitmap_line_xdyi::$6 ]
[ bitmap_line_ydxd::$6 ]
[ bitmap_line_xdyd::$6 ]
[ bitmap_plot::plotter_x#0 ]
[ bitmap_plot::plotter_y#0 ]
[ bitmap_plot::plotter#0 ]
[ bitmap_plot::$1 ]
Allocated zp[1]:2 [ menu::i#2 menu::i#1 ]
Allocated zp[2]:3 [ menu::c#2 menu::c#1 ]
Allocated zp[2]:5 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
Allocated zp[2]:7 [ print_char_cursor#37 print_char_cursor#2 print_char_cursor#103 print_char_cursor#38 print_char_cursor#26 ]
Allocated zp[1]:9 [ keyboard_key_pressed::key#20 ]
Allocated zp[1]:10 [ mode_stdchar::i#2 mode_stdchar::i#1 ]
Allocated zp[1]:11 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
Allocated zp[1]:12 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
Allocated zp[2]:13 [ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ]
Allocated zp[2]:15 [ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ]
Allocated zp[1]:17 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
Allocated zp[1]:18 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
Allocated zp[1]:19 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
Allocated zp[2]:20 [ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ]
Allocated zp[2]:22 [ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ]
Allocated zp[1]:24 [ mode_mcchar::i#2 mode_mcchar::i#1 ]
Allocated zp[1]:25 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
Allocated zp[1]:26 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
Allocated zp[2]:27 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ]
Allocated zp[2]:29 [ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ]
Allocated zp[1]:31 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
Allocated zp[1]:32 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
Allocated zp[1]:33 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
Allocated zp[2]:34 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ]
Allocated zp[1]:36 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
Allocated zp[1]:37 [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
Allocated zp[1]:38 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
Allocated zp[1]:39 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
Allocated zp[2]:40 [ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ]
Allocated zp[2]:42 [ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ]
Allocated zp[1]:44 [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
Allocated zp[1]:45 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
Allocated zp[1]:46 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
Allocated zp[2]:47 [ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ]
Allocated zp[2]:49 [ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ]
Allocated zp[1]:51 [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
Allocated zp[1]:52 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
Allocated zp[1]:53 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
Allocated zp[2]:54 [ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ]
Allocated zp[2]:56 [ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ]
Allocated zp[1]:58 [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
Allocated zp[1]:59 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
Allocated zp[1]:60 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
Allocated zp[2]:61 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ]
Allocated zp[1]:63 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
Allocated zp[2]:64 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ]
Allocated zp[1]:66 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
Allocated zp[1]:67 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
Allocated zp[2]:68 [ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ]
Allocated zp[1]:70 [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
Allocated zp[1]:71 [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
Allocated zp[1]:72 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
Allocated zp[1]:73 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
Allocated zp[2]:74 [ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ]
Allocated zp[1]:76 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ]
Allocated zp[2]:77 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ]
Allocated zp[1]:79 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
Allocated zp[1]:80 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Allocated zp[2]:81 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ]
Allocated zp[1]:83 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
Allocated zp[1]:84 [ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
Allocated zp[1]:85 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
Allocated zp[1]:86 [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
Allocated zp[2]:87 [ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ]
Allocated zp[1]:89 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
Allocated zp[2]:90 [ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ]
Allocated zp[1]:92 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
Allocated zp[1]:93 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
Allocated zp[2]:94 [ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ]
Allocated zp[1]:96 [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
Allocated zp[1]:97 [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
Allocated zp[1]:98 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
Allocated zp[1]:99 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
Allocated zp[2]:100 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ]
Allocated zp[1]:102 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
Allocated zp[2]:103 [ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ]
Allocated zp[1]:105 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
Allocated zp[1]:106 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ]
Allocated zp[2]:107 [ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ]
Allocated zp[1]:109 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
Allocated zp[1]:110 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
Allocated zp[1]:111 [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ]
Allocated zp[1]:112 [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
Allocated zp[1]:113 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
Allocated zp[2]:114 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ]
Allocated zp[1]:116 [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
Allocated zp[2]:117 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ]
Allocated zp[2]:119 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:121 [ print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 ]
Allocated zp[1]:123 [ dtv_control#116 dtv_control#146 dtv_control#16 ]
Allocated zp[1]:124 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
Allocated zp[1]:125 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp[1]:126 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp[1]:127 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp[2]:128 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp[1]:130 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Allocated zp[2]:131 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
Allocated zp[1]:133 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Allocated zp[1]:134 [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
Allocated zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Allocated zp[1]:136 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Allocated zp[1]:137 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Allocated zp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Allocated zp[1]:139 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Allocated zp[1]:140 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Allocated zp[1]:141 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Allocated zp[1]:142 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Allocated zp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Allocated zp[1]:144 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Allocated zp[1]:145 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Allocated zp[1]:146 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Allocated zp[1]:147 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Allocated zp[1]:148 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Allocated zp[1]:149 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Allocated zp[1]:150 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Allocated zp[1]:151 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Allocated zp[1]:152 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Allocated zp[1]:153 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Allocated zp[1]:154 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Allocated zp[1]:155 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Allocated zp[1]:156 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Allocated zp[1]:157 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Allocated zp[1]:158 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Allocated zp[1]:159 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Allocated zp[1]:160 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Allocated zp[1]:161 [ keyboard_key_pressed::return#2 ]
Allocated zp[1]:162 [ menu::$5 ]
Allocated zp[1]:163 [ keyboard_key_pressed::return#24 ]
Allocated zp[1]:164 [ menu::$9 ]
Allocated zp[1]:165 [ keyboard_key_pressed::return#25 ]
Allocated zp[1]:166 [ menu::$13 ]
Allocated zp[1]:167 [ keyboard_key_pressed::return#26 ]
Allocated zp[1]:168 [ menu::$17 ]
Allocated zp[1]:169 [ keyboard_key_pressed::return#27 ]
Allocated zp[1]:170 [ menu::$21 ]
Allocated zp[1]:171 [ keyboard_key_pressed::return#28 ]
Allocated zp[1]:172 [ menu::$25 ]
Allocated zp[1]:173 [ keyboard_key_pressed::return#29 ]
Allocated zp[1]:174 [ menu::$29 ]
Allocated zp[1]:175 [ keyboard_key_pressed::return#30 ]
Allocated zp[1]:176 [ menu::$33 ]
Allocated zp[1]:177 [ keyboard_key_pressed::return#10 ]
Allocated zp[1]:178 [ menu::$37 ]
Allocated zp[1]:179 [ keyboard_key_pressed::return#11 ]
Allocated zp[1]:180 [ menu::$41 ]
Allocated zp[1]:181 [ keyboard_key_pressed::return#12 ]
Allocated zp[1]:182 [ menu::$45 ]
Allocated zp[1]:183 [ keyboard_key_pressed::return#13 ]
Allocated zp[1]:184 [ menu::$49 ]
Allocated zp[1]:185 [ print_str_lines::ch#0 ]
Allocated zp[1]:186 [ print_char::ch#0 ]
Allocated zp[1]:187 [ keyboard_key_pressed::colidx#0 ]
Allocated zp[1]:188 [ keyboard_key_pressed::rowidx#0 ]
Allocated zp[1]:189 [ keyboard_matrix_read::rowid#0 ]
Allocated zp[1]:190 [ keyboard_matrix_read::return#2 ]
Allocated zp[1]:191 [ keyboard_key_pressed::$2 ]
Allocated zp[1]:192 [ keyboard_key_pressed::return#0 ]
Allocated zp[1]:193 [ mode_stdchar::$2 ]
Allocated zp[1]:194 [ mode_stdchar::$3 ]
Allocated zp[1]:195 [ mode_stdchar::$4 ]
Allocated zp[1]:196 [ mode_stdchar::$5 ]
Allocated zp[1]:197 [ mode_stdchar::$6 ]
Allocated zp[1]:198 [ mode_stdchar::$7 ]
Allocated zp[1]:199 [ mode_ecmchar::$2 ]
Allocated zp[1]:200 [ mode_ecmchar::$3 ]
Allocated zp[1]:201 [ mode_ecmchar::$4 ]
Allocated zp[1]:202 [ mode_ecmchar::$5 ]
Allocated zp[1]:203 [ mode_ecmchar::$6 ]
Allocated zp[1]:204 [ mode_ecmchar::$7 ]
Allocated zp[1]:205 [ mode_mcchar::$2 ]
Allocated zp[1]:206 [ mode_mcchar::$3 ]
Allocated zp[1]:207 [ mode_mcchar::$4 ]
Allocated zp[1]:208 [ mode_mcchar::$5 ]
Allocated zp[1]:209 [ mode_mcchar::$6 ]
Allocated zp[1]:210 [ mode_mcchar::$7 ]
Allocated zp[1]:211 [ mode_stdbitmap::$4 ]
Allocated zp[1]:212 [ mode_stdbitmap::col#0 ]
Allocated zp[1]:213 [ mode_stdbitmap::col2#0 ]
Allocated zp[1]:214 [ mode_stdbitmap::$7 ]
Allocated zp[1]:215 [ mode_stdbitmap::$8 ]
Allocated zp[1]:216 [ bitmap_line::x0#0 ]
Allocated zp[1]:217 [ bitmap_line::x1#0 ]
Allocated zp[1]:218 [ bitmap_line::y0#0 ]
Allocated zp[1]:219 [ bitmap_line::y1#0 ]
Allocated zp[1]:220 [ mode_hicolstdchar::$2 ]
Allocated zp[1]:221 [ mode_hicolstdchar::$3 ]
Allocated zp[1]:222 [ mode_hicolstdchar::$4 ]
Allocated zp[1]:223 [ mode_hicolstdchar::v#0 ]
Allocated zp[1]:224 [ mode_hicolecmchar::$2 ]
Allocated zp[1]:225 [ mode_hicolecmchar::$3 ]
Allocated zp[1]:226 [ mode_hicolecmchar::$4 ]
Allocated zp[1]:227 [ mode_hicolecmchar::v#0 ]
Allocated zp[1]:228 [ mode_hicolmcchar::$2 ]
Allocated zp[1]:229 [ mode_hicolmcchar::$3 ]
Allocated zp[1]:230 [ mode_hicolmcchar::$4 ]
Allocated zp[1]:231 [ mode_hicolmcchar::v#0 ]
Allocated zp[1]:232 [ mode_sixsfred2::$2 ]
Allocated zp[1]:233 [ mode_sixsfred2::$3 ]
Allocated zp[1]:234 [ mode_sixsfred2::$4 ]
Allocated zp[1]:235 [ mode_sixsfred2::$5 ]
Allocated zp[1]:236 [ mode_sixsfred2::$8 ]
Allocated zp[1]:237 [ mode_sixsfred2::row#0 ]
Allocated zp[1]:238 [ mode_twoplanebitmap::$2 ]
Allocated zp[1]:239 [ mode_twoplanebitmap::$3 ]
Allocated zp[1]:240 [ mode_twoplanebitmap::$4 ]
Allocated zp[1]:241 [ mode_twoplanebitmap::$5 ]
Allocated zp[1]:242 [ mode_twoplanebitmap::$8 ]
Allocated zp[1]:243 [ mode_sixsfred::$2 ]
Allocated zp[1]:244 [ mode_sixsfred::$3 ]
Allocated zp[1]:245 [ mode_sixsfred::$6 ]
Allocated zp[1]:246 [ mode_sixsfred::row#0 ]
Allocated zp[1]:247 [ mode_8bpppixelcell::$2 ]
Allocated zp[1]:248 [ mode_8bpppixelcell::$3 ]
Allocated zp[1]:249 [ mode_8bpppixelcell::$4 ]
Allocated zp[1]:250 [ mode_8bpppixelcell::$5 ]
Allocated zp[1]:251 [ mode_8bpppixelcell::$8 ]
Allocated zp[2]:252 [ mode_8bppchunkybmm::$7 ]
Allocated zp[1]:254 [ mode_8bppchunkybmm::c#0 ]
Allocated zp[1]:255 [ keyboard_matrix_read::return#0 ]
Allocated zp[1]:256 [ keyboard_key_pressed::return#14 ]
Allocated zp[1]:257 [ mode_ctrl::$1 ]
Allocated zp[1]:258 [ keyboard_key_pressed::return#15 ]
Allocated zp[1]:259 [ mode_ctrl::$4 ]
Allocated zp[1]:260 [ keyboard_key_pressed::return#16 ]
Allocated zp[1]:261 [ mode_ctrl::$8 ]
Allocated zp[1]:262 [ keyboard_key_pressed::return#17 ]
Allocated zp[1]:263 [ mode_ctrl::$12 ]
Allocated zp[1]:264 [ keyboard_key_pressed::return#18 ]
Allocated zp[1]:265 [ mode_ctrl::$16 ]
Allocated zp[1]:266 [ keyboard_key_pressed::return#19 ]
Allocated zp[1]:267 [ mode_ctrl::$20 ]
Allocated zp[1]:268 [ keyboard_key_pressed::return#20 ]
Allocated zp[1]:269 [ mode_ctrl::$24 ]
Allocated zp[1]:270 [ keyboard_key_pressed::return#21 ]
Allocated zp[1]:271 [ mode_ctrl::$28 ]
Allocated zp[1]:272 [ bitmap_init::$0 ]
Allocated zp[1]:273 [ bitmap_init::$10 ]
Allocated zp[1]:274 [ bitmap_init::$7 ]
Allocated zp[1]:275 [ bitmap_init::$8 ]
Allocated zp[1]:276 [ bitmap_init::$9 ]
Allocated zp[2]:277 [ bitmap_clear::bitmap#0 ]
Allocated zp[1]:279 [ bitmap_line::xd#2 ]
Allocated zp[1]:280 [ bitmap_line::yd#2 ]
Allocated zp[1]:281 [ bitmap_line::yd#1 ]
Allocated zp[1]:282 [ bitmap_line::xd#1 ]
Allocated zp[1]:283 [ bitmap_line::yd#10 ]
Allocated zp[1]:284 [ bitmap_line::yd#11 ]
Allocated zp[1]:285 [ bitmap_line_ydxi::$6 ]
Allocated zp[1]:286 [ bitmap_line_xdyi::$6 ]
Allocated zp[1]:287 [ bitmap_line_ydxd::$6 ]
Allocated zp[1]:288 [ bitmap_line_xdyd::$6 ]
Allocated zp[2]:289 [ bitmap_plot::plotter_x#0 ]
Allocated zp[2]:291 [ bitmap_plot::plotter_y#0 ]
Allocated zp[2]:293 [ bitmap_plot::plotter#0 ]
Allocated zp[1]:295 [ bitmap_plot::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:274 [ bitmap_init::$7 ] has ALU potential.
Statement [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *PROCPORT = PROCPORT_RAM_IO [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *DTV_FEATURE = DTV_FEATURE_ENABLE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [7] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [8] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [9] *DTV_CONTROL = 0 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [10] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [11] *((byte*)CIA2) = 3^(byte)(word)menu::CHARSET/$4000 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [12] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [13] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [14] *VIC_MEMORY = (byte)(word)menu::CHARSET&$3fff/$400 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [16] DTV_PALETTE[menu::i#2] = DTV_PALETTE_DEFAULT[menu::i#2] [ menu::i#2 ] ( menu:5 [ menu::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ menu::i#2 menu::i#1 ]
Statement [20] if(menu::c#2!=COLS+$3e8) goto menu::@3 [ menu::c#2 ] ( menu:5 [ menu::c#2 ] { }  ) always clobbers reg byte a 
Statement [21] *BG_COLOR = 0 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [22] *BORDER_COLOR = 0 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [112] *menu::c#2 = LIGHT_GREEN [ menu::c#2 ] ( menu:5 [ menu::c#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [119] if(0!=*print_str_lines::str#2) goto print_str_lines::@2 [ print_str_lines::str#2 print_char_cursor#2 print_line_cursor#1 ] ( menu:5::print_str_lines:26 [ print_str_lines::str#2 print_char_cursor#2 print_line_cursor#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [122] print_str_lines::ch#0 = *print_str_lines::str#3 [ print_line_cursor#1 print_str_lines::str#3 print_char_cursor#37 print_str_lines::ch#0 ] ( menu:5::print_str_lines:26 [ print_line_cursor#1 print_str_lines::str#3 print_char_cursor#37 print_str_lines::ch#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [131] print_char_cursor#103 = print_line_cursor#2 [ print_str_lines::str#0 print_char_cursor#103 print_line_cursor#2 ] ( menu:5::print_str_lines:26 [ print_str_lines::str#0 print_char_cursor#103 print_line_cursor#2 ] { }  ) always clobbers reg byte a 
Statement [134] keyboard_key_pressed::rowidx#0 = keyboard_key_pressed::key#20 >> 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( menu:5::keyboard_key_pressed:28 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:36 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#24 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:43 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#25 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:50 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#26 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:57 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#27 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:64 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#28 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:71 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#29 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:78 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#30 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:85 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#10 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:92 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#11 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:99 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#12 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:106 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#13 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:187 [ keyboard_key_pressed::colidx#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:123 [ dtv_control#116 dtv_control#146 dtv_control#16 ]
Removing always clobbered register reg byte a as potential for zp[1]:124 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
Statement [141] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [142] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [143] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [144] *DTV_CONTROL = 0 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [145] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [146] *((byte*)CIA2) = 3^(byte)(word)mode_stdchar::CHARSET/$4000 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [147] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [148] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [149] *VIC_MEMORY = (byte)(word)mode_stdchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [151] DTV_PALETTE[mode_stdchar::i#2] = DTV_PALETTE_DEFAULT[mode_stdchar::i#2] [ mode_stdchar::i#2 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ mode_stdchar::i#2 mode_stdchar::i#1 ]
Statement [154] *BG_COLOR = 0 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [155] *BORDER_COLOR = 0 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [158] mode_stdchar::$2 = mode_stdchar::cx#2 + mode_stdchar::cy#4 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$2 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:12 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
Statement [160] *mode_stdchar::col#2 = mode_stdchar::$3 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:11 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:12 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
Statement [162] mode_stdchar::$4 = mode_stdchar::cy#4 & $f [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$4 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$4 ] { }  ) always clobbers reg byte a 
Statement [163] mode_stdchar::$5 = mode_stdchar::$4 << 4 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$5 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$5 ] { }  ) always clobbers reg byte a 
Statement [164] mode_stdchar::$6 = mode_stdchar::cx#2 & $f [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$5 mode_stdchar::$6 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$5 mode_stdchar::$6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:196 [ mode_stdchar::$5 ]
Statement [166] *mode_stdchar::ch#2 = mode_stdchar::$7 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [175] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [176] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [177] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [178] *DTV_CONTROL = 0 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [179] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [180] *((byte*)CIA2) = 3^(byte)(word)mode_ecmchar::CHARSET/$4000 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [181] *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [182] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [183] *VIC_MEMORY = (byte)(word)mode_ecmchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [185] DTV_PALETTE[mode_ecmchar::i#2] = DTV_PALETTE_DEFAULT[mode_ecmchar::i#2] [ mode_ecmchar::i#2 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:17 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
Statement [188] *BORDER_COLOR = 0 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [189] *BG_COLOR = 0 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [190] *BG_COLOR1 = 2 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [191] *BG_COLOR2 = 5 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [192] *BG_COLOR3 = 6 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [195] mode_ecmchar::$2 = mode_ecmchar::cx#2 + mode_ecmchar::cy#4 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$2 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:18 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:19 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
Statement [197] *mode_ecmchar::col#2 = mode_ecmchar::$3 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:18 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:19 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
Statement [199] mode_ecmchar::$4 = mode_ecmchar::cy#4 & $f [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$4 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$4 ] { }  ) always clobbers reg byte a 
Statement [200] mode_ecmchar::$5 = mode_ecmchar::$4 << 4 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$5 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$5 ] { }  ) always clobbers reg byte a 
Statement [201] mode_ecmchar::$6 = mode_ecmchar::cx#2 & $f [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$5 mode_ecmchar::$6 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$5 mode_ecmchar::$6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:202 [ mode_ecmchar::$5 ]
Statement [203] *mode_ecmchar::ch#2 = mode_ecmchar::$7 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [212] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [213] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [214] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [215] *DTV_CONTROL = 0 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [216] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [217] *((byte*)CIA2) = 3^(byte)(word)mode_mcchar::CHARSET/$4000 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [218] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [219] *VIC_CONTROL2 = VIC_CSEL|VIC_MCM [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [220] *VIC_MEMORY = (byte)(word)mode_mcchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [222] DTV_PALETTE[mode_mcchar::i#2] = DTV_PALETTE_DEFAULT[mode_mcchar::i#2] [ mode_mcchar::i#2 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:24 [ mode_mcchar::i#2 mode_mcchar::i#1 ]
Statement [225] *BORDER_COLOR = 0 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [226] *BG_COLOR = BLACK [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [227] *BG_COLOR1 = GREEN [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [228] *BG_COLOR2 = BLUE [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [231] mode_mcchar::$2 = mode_mcchar::cx#2 + mode_mcchar::cy#4 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$2 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:25 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:26 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
Statement [233] *mode_mcchar::col#2 = mode_mcchar::$3 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:25 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:26 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
Statement [235] mode_mcchar::$4 = mode_mcchar::cy#4 & $f [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$4 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$4 ] { }  ) always clobbers reg byte a 
Statement [236] mode_mcchar::$5 = mode_mcchar::$4 << 4 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$5 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$5 ] { }  ) always clobbers reg byte a 
Statement [237] mode_mcchar::$6 = mode_mcchar::cx#2 & $f [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$5 mode_mcchar::$6 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$5 mode_mcchar::$6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:208 [ mode_mcchar::$5 ]
Statement [239] *mode_mcchar::ch#2 = mode_mcchar::$7 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [248] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [249] *DTV_CONTROL = 0 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [250] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [251] *((byte*)CIA2) = 3^(byte)(word)mode_stdbitmap::BITMAP/$4000 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [252] *VIC_CONTROL = VIC_BMM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [253] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [254] *VIC_MEMORY = (byte)(word)mode_stdbitmap::BITMAP&$3fff/$400 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [256] DTV_PALETTE[mode_stdbitmap::i#2] = DTV_PALETTE_DEFAULT[mode_stdbitmap::i#2] [ mode_stdbitmap::i#2 ] ( menu:5::mode_stdbitmap:55 [ mode_stdbitmap::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:31 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
Statement [259] *BG_COLOR = BLACK [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [260] *BORDER_COLOR = BLACK [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [263] mode_stdbitmap::$4 = mode_stdbitmap::cx#2 + mode_stdbitmap::cy#4 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::$4 ] ( menu:5::mode_stdbitmap:55 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:32 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:33 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
Statement [265] mode_stdbitmap::col2#0 = $f - mode_stdbitmap::col#0 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 mode_stdbitmap::col2#0 ] ( menu:5::mode_stdbitmap:55 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 mode_stdbitmap::col2#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:212 [ mode_stdbitmap::col#0 ]
Statement [266] mode_stdbitmap::$7 = mode_stdbitmap::col#0 << 4 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col2#0 mode_stdbitmap::$7 ] ( menu:5::mode_stdbitmap:55 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col2#0 mode_stdbitmap::$7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:213 [ mode_stdbitmap::col2#0 ]
Statement [268] *mode_stdbitmap::ch#2 = mode_stdbitmap::$8 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 ] ( menu:5::mode_stdbitmap:55 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:32 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:33 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
Statement [289] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [290] *DTV_COLOR_BANK_LO = <(word)mode_hicolstdchar::COLORS/$400 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [291] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [292] *DTV_CONTROL = DTV_HIGHCOLOR [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [293] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [294] *((byte*)CIA2) = 3^(byte)(word)mode_hicolstdchar::CHARSET/$4000 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [295] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [296] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [297] *VIC_MEMORY = (byte)(word)mode_hicolstdchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [302] *BG_COLOR = 0 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [303] *BORDER_COLOR = 0 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [307] mode_hicolstdchar::$3 = mode_hicolstdchar::$2 << 4 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$3 ] ( menu:5::mode_hicolstdchar:62 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:38 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:39 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
Statement [308] mode_hicolstdchar::$4 = mode_hicolstdchar::cx#2 & $f [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$3 mode_hicolstdchar::$4 ] ( menu:5::mode_hicolstdchar:62 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$3 mode_hicolstdchar::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:221 [ mode_hicolstdchar::$3 ]
Statement [310] *mode_hicolstdchar::col#2 = mode_hicolstdchar::v#0 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::v#0 ] ( menu:5::mode_hicolstdchar:62 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::v#0 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:38 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:39 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:223 [ mode_hicolstdchar::v#0 ]
Statement [312] *mode_hicolstdchar::ch#2 = mode_hicolstdchar::v#0 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::col#1 mode_hicolstdchar::cx#2 mode_hicolstdchar::ch#2 ] ( menu:5::mode_hicolstdchar:62 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::col#1 mode_hicolstdchar::cx#2 mode_hicolstdchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [321] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [322] *DTV_COLOR_BANK_LO = <(word)mode_hicolecmchar::COLORS/$400 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [323] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [324] *DTV_CONTROL = DTV_HIGHCOLOR [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [325] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [326] *((byte*)CIA2) = 3^(byte)(word)mode_hicolecmchar::CHARSET/$4000 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [327] *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [328] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [329] *VIC_MEMORY = (byte)(word)mode_hicolecmchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [334] *BORDER_COLOR = 0 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [335] *BG_COLOR = $50 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [336] *BG_COLOR1 = $54 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [337] *BG_COLOR2 = $58 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [338] *BG_COLOR3 = $5c [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [342] mode_hicolecmchar::$3 = mode_hicolecmchar::$2 << 4 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$3 ] ( menu:5::mode_hicolecmchar:69 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:45 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:46 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
Statement [343] mode_hicolecmchar::$4 = mode_hicolecmchar::cx#2 & $f [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$3 mode_hicolecmchar::$4 ] ( menu:5::mode_hicolecmchar:69 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$3 mode_hicolecmchar::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:225 [ mode_hicolecmchar::$3 ]
Statement [345] *mode_hicolecmchar::col#2 = mode_hicolecmchar::v#0 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::v#0 ] ( menu:5::mode_hicolecmchar:69 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::v#0 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:45 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:46 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:227 [ mode_hicolecmchar::v#0 ]
Statement [347] *mode_hicolecmchar::ch#2 = mode_hicolecmchar::v#0 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::col#1 mode_hicolecmchar::cx#2 mode_hicolecmchar::ch#2 ] ( menu:5::mode_hicolecmchar:69 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::col#1 mode_hicolecmchar::cx#2 mode_hicolecmchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [356] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [357] *DTV_COLOR_BANK_LO = <(word)mode_hicolmcchar::COLORS/$400 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [358] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [359] *DTV_CONTROL = DTV_HIGHCOLOR [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [360] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [361] *((byte*)CIA2) = 3^(byte)(word)mode_hicolmcchar::CHARSET/$4000 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [362] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [363] *VIC_CONTROL2 = VIC_CSEL|VIC_MCM [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [364] *VIC_MEMORY = (byte)(word)mode_hicolmcchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [369] *BORDER_COLOR = 0 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [370] *BG_COLOR = $50 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [371] *BG_COLOR1 = $54 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [372] *BG_COLOR2 = $58 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [376] mode_hicolmcchar::$3 = mode_hicolmcchar::$2 << 4 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$3 ] ( menu:5::mode_hicolmcchar:76 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:52 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:53 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
Statement [377] mode_hicolmcchar::$4 = mode_hicolmcchar::cx#2 & $f [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$3 mode_hicolmcchar::$4 ] ( menu:5::mode_hicolmcchar:76 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$3 mode_hicolmcchar::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:229 [ mode_hicolmcchar::$3 ]
Statement [379] *mode_hicolmcchar::col#2 = mode_hicolmcchar::v#0 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::v#0 ] ( menu:5::mode_hicolmcchar:76 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::v#0 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:52 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:53 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:231 [ mode_hicolmcchar::v#0 ]
Statement [381] *mode_hicolmcchar::ch#2 = mode_hicolmcchar::v#0 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::col#1 mode_hicolmcchar::cx#2 mode_hicolmcchar::ch#2 ] ( menu:5::mode_hicolmcchar:76 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::col#1 mode_hicolmcchar::cx#2 mode_hicolmcchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [390] *DTV_CONTROL = DTV_LINEAR [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [391] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [392] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [393] *DTV_PLANEA_START_LO = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [394] *DTV_PLANEA_START_MI = >mode_sixsfred2::PLANEA [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [395] *DTV_PLANEA_START_HI = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [396] *DTV_PLANEA_STEP = 1 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [397] *DTV_PLANEA_MODULO_LO = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [398] *DTV_PLANEA_MODULO_HI = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [399] *DTV_PLANEB_START_LO = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [400] *DTV_PLANEB_START_MI = >mode_sixsfred2::PLANEB [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [401] *DTV_PLANEB_START_HI = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [402] *DTV_PLANEB_STEP = 1 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [403] *DTV_PLANEB_MODULO_LO = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [404] *DTV_PLANEB_MODULO_HI = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [405] *DTV_COLOR_BANK_LO = <mode_sixsfred2::COLORS/$400 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [406] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [411] *BORDER_COLOR = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [415] mode_sixsfred2::$3 = mode_sixsfred2::$2 << 4 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$3 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:59 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:60 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
Statement [416] mode_sixsfred2::$4 = mode_sixsfred2::cy#4 & 3 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$3 mode_sixsfred2::$4 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$3 mode_sixsfred2::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:233 [ mode_sixsfred2::$3 ]
Statement [418] *mode_sixsfred2::col#2 = mode_sixsfred2::$5 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:59 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:60 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
Statement [426] mode_sixsfred2::$8 = mode_sixsfred2::ay#4 >> 1 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::$8 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::$8 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:63 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:66 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
Statement [428] *mode_sixsfred2::gfxa#2 = mode_sixsfred2::row_bitmask[mode_sixsfred2::row#0] [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:63 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:66 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
Statement [436] *mode_sixsfred2::gfxb#2 = $1b [ mode_sixsfred2::by#4 mode_sixsfred2::gfxb#2 mode_sixsfred2::bx#2 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::by#4 mode_sixsfred2::gfxb#2 mode_sixsfred2::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:67 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:67 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:70 [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:70 [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
Statement [445] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [446] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [447] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [448] *DTV_PLANEA_START_LO = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [449] *DTV_PLANEA_START_MI = >mode_twoplanebitmap::PLANEA [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [450] *DTV_PLANEA_START_HI = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [451] *DTV_PLANEA_STEP = 1 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [452] *DTV_PLANEA_MODULO_LO = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [453] *DTV_PLANEA_MODULO_HI = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [454] *DTV_PLANEB_START_LO = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [455] *DTV_PLANEB_START_MI = >mode_twoplanebitmap::PLANEB [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [456] *DTV_PLANEB_START_HI = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [457] *DTV_PLANEB_STEP = 1 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [458] *DTV_PLANEB_MODULO_LO = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [459] *DTV_PLANEB_MODULO_HI = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [460] *DTV_COLOR_BANK_LO = <mode_twoplanebitmap::COLORS/$400 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [461] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [466] *BORDER_COLOR = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [467] *BG_COLOR = $70 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [468] *BG_COLOR1 = $d4 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [472] mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2 << 4 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$3 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:72 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:73 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
Statement [473] mode_twoplanebitmap::$4 = mode_twoplanebitmap::cx#2 & $f [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$3 mode_twoplanebitmap::$4 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$3 mode_twoplanebitmap::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:239 [ mode_twoplanebitmap::$3 ]
Statement [475] *mode_twoplanebitmap::col#2 = mode_twoplanebitmap::$5 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:72 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:73 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
Statement [485] *mode_twoplanebitmap::gfxa#3 = $ff [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:76 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:76 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:79 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:79 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
Statement [494] *mode_twoplanebitmap::gfxb#2 = $f [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:80 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:80 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:83 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:83 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
Statement [503] *mode_twoplanebitmap::gfxa#3 = 0 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [505] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [506] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [507] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [508] *DTV_PLANEA_START_LO = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [509] *DTV_PLANEA_START_MI = >mode_sixsfred::PLANEA [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [510] *DTV_PLANEA_START_HI = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [511] *DTV_PLANEA_STEP = 1 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [512] *DTV_PLANEA_MODULO_LO = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [513] *DTV_PLANEA_MODULO_HI = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [514] *DTV_PLANEB_START_LO = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [515] *DTV_PLANEB_START_MI = >mode_sixsfred::PLANEB [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [516] *DTV_PLANEB_START_HI = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [517] *DTV_PLANEB_STEP = 1 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [518] *DTV_PLANEB_MODULO_LO = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [519] *DTV_PLANEB_MODULO_HI = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [520] *DTV_COLOR_BANK_LO = <mode_sixsfred::COLORS/$400 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [521] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [526] *BORDER_COLOR = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [529] mode_sixsfred::$2 = mode_sixsfred::cx#2 + mode_sixsfred::cy#4 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$2 ] ( menu:5::mode_sixsfred:97 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:85 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:86 [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
Statement [531] *mode_sixsfred::col#2 = mode_sixsfred::$3 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 ] ( menu:5::mode_sixsfred:97 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:85 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:86 [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
Statement [539] mode_sixsfred::$6 = mode_sixsfred::ay#4 >> 1 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::$6 ] ( menu:5::mode_sixsfred:97 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::$6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:89 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:92 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
Statement [541] *mode_sixsfred::gfxa#2 = mode_sixsfred::row_bitmask[mode_sixsfred::row#0] [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 ] ( menu:5::mode_sixsfred:97 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:89 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:92 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
Statement [549] *mode_sixsfred::gfxb#2 = $1b [ mode_sixsfred::by#4 mode_sixsfred::gfxb#2 mode_sixsfred::bx#2 ] ( menu:5::mode_sixsfred:97 [ mode_sixsfred::by#4 mode_sixsfred::gfxb#2 mode_sixsfred::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:93 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:93 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:96 [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:96 [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
Statement [558] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [559] *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [560] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [561] *DTV_PLANEA_START_LO = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [562] *DTV_PLANEA_START_MI = >mode_8bpppixelcell::PLANEA [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [563] *DTV_PLANEA_START_HI = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [564] *DTV_PLANEA_STEP = 1 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [565] *DTV_PLANEA_MODULO_LO = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [566] *DTV_PLANEA_MODULO_HI = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [567] *DTV_PLANEB_START_LO = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [568] *DTV_PLANEB_START_MI = >mode_8bpppixelcell::PLANEB [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [569] *DTV_PLANEB_START_HI = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [570] *DTV_PLANEB_STEP = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [571] *DTV_PLANEB_MODULO_LO = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [572] *DTV_PLANEB_MODULO_HI = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [573] *BORDER_COLOR = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [581] mode_8bpppixelcell::$3 = mode_8bpppixelcell::$2 << 4 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$3 ] ( menu:5::mode_8bpppixelcell:104 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:98 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:99 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
Statement [582] mode_8bpppixelcell::$4 = mode_8bpppixelcell::ax#2 & $f [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$3 mode_8bpppixelcell::$4 ] ( menu:5::mode_8bpppixelcell:104 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$3 mode_8bpppixelcell::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:248 [ mode_8bpppixelcell::$3 ]
Statement [584] *mode_8bpppixelcell::gfxa#2 = mode_8bpppixelcell::$5 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 ] ( menu:5::mode_8bpppixelcell:104 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:98 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:99 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
Statement [590] *PROCPORT = PROCPORT_RAM_CHARROM [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [593] mode_8bpppixelcell::bits#0 = *mode_8bpppixelcell::chargen#2 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::col#5 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#0 ] ( menu:5::mode_8bpppixelcell:104 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::col#5 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#0 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:102 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:102 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:109 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:109 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:105 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:105 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
Statement [600] *mode_8bpppixelcell::gfxb#2 = mode_8bpppixelcell::c#2 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 ] ( menu:5::mode_8bpppixelcell:104 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:106 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:110 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
Statement [610] *PROCPORT = PROCPORT_RAM_IO [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [613] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [614] *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [615] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [616] *DTV_PLANEB_START_LO = 0 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [617] *DTV_PLANEB_START_MI = 0 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [618] *DTV_PLANEB_START_HI = <>mode_8bppchunkybmm::PLANEB [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [619] *DTV_PLANEB_STEP = 8 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [620] *DTV_PLANEB_MODULO_LO = 0 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [621] *DTV_PLANEB_MODULO_HI = 0 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [622] *BORDER_COLOR = 0 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [631] if(mode_8bppchunkybmm::gfxb#3!=$8000) goto mode_8bppchunkybmm::@5 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxbCpuBank#4 ] ( menu:5::mode_8bppchunkybmm:111 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxbCpuBank#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:113 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:116 [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
Statement [636] mode_8bppchunkybmm::$7 = mode_8bppchunkybmm::x#2 + mode_8bppchunkybmm::y#6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::$7 ] ( menu:5::mode_8bppchunkybmm:111 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::$7 ] { }  ) always clobbers reg byte a 
Statement [637] mode_8bppchunkybmm::c#0 = (byte)mode_8bppchunkybmm::$7 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::c#0 ] ( menu:5::mode_8bppchunkybmm:111 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::c#0 ] { }  ) always clobbers reg byte a 
Statement [638] *mode_8bppchunkybmm::gfxb#4 = mode_8bppchunkybmm::c#0 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 ] ( menu:5::mode_8bppchunkybmm:111 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:113 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:116 [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
Statement [641] if(mode_8bppchunkybmm::x#1!=$140) goto mode_8bppchunkybmm::@4 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#1 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#1 ] ( menu:5::mode_8bppchunkybmm:111 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#1 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#1 ] { }  ) always clobbers reg byte a 
Statement [651] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( menu:5::print_cls:24::memset:115 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [653] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( menu:5::print_cls:24::memset:115 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [655] *print_char_cursor#37 = print_char::ch#0 [ print_char_cursor#37 ] ( menu:5::print_str_lines:26::print_char:126 [ print_line_cursor#1 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#37 ] { { print_char::ch#0 = print_str_lines::ch#0 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:185 [ print_str_lines::ch#0 ]
Statement [660] print_line_cursor#2 = print_line_cursor#19 + $28 [ print_line_cursor#2 print_char_cursor#38 ] ( menu:5::print_str_lines:26::print_ln:130 [ print_str_lines::str#0 print_line_cursor#2 print_char_cursor#38 ] { }  ) always clobbers reg byte a 
Statement [661] if(print_line_cursor#2<print_char_cursor#38) goto print_ln::@1 [ print_line_cursor#2 print_char_cursor#38 ] ( menu:5::print_str_lines:26::print_ln:130 [ print_str_lines::str#0 print_line_cursor#2 print_char_cursor#38 ] { }  ) always clobbers reg byte a 
Statement [663] *((byte*)CIA1) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0] [ ] ( menu:5::keyboard_key_pressed:28::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:36::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#24 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:43::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#25 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:50::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#26 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:57::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#27 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:64::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#28 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:71::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#29 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:78::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#30 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:85::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#10 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:92::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#11 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:99::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#12 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:106::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#13 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [664] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( menu:5::keyboard_key_pressed:28::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:36::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#24 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:43::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#25 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:50::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#26 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:57::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#27 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:64::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#28 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:71::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#29 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:78::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#30 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:85::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#10 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:92::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#11 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:99::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#12 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:106::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#13 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [668] if(*RASTER!=$ff) goto mode_ctrl::@2 [ dtv_control#116 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 ] { }  ) always clobbers reg byte a 
Statement [680] mode_ctrl::ctrl#1 = mode_ctrl::ctrl#0 | DTV_LINEAR [ dtv_control#116 mode_ctrl::ctrl#1 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  ) always clobbers reg byte a 
Statement [686] mode_ctrl::ctrl#2 = mode_ctrl::ctrl#17 | DTV_HIGHCOLOR [ dtv_control#116 mode_ctrl::ctrl#2 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  ) always clobbers reg byte a 
Statement [692] mode_ctrl::ctrl#3 = mode_ctrl::ctrl#10 | DTV_OVERSCAN [ dtv_control#116 mode_ctrl::ctrl#3 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  ) always clobbers reg byte a 
Statement [698] mode_ctrl::ctrl#4 = mode_ctrl::ctrl#11 | DTV_BORDER_OFF [ dtv_control#116 mode_ctrl::ctrl#4 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  ) always clobbers reg byte a 
Statement [704] mode_ctrl::ctrl#5 = mode_ctrl::ctrl#12 | DTV_CHUNKY [ dtv_control#116 mode_ctrl::ctrl#5 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  ) always clobbers reg byte a 
Statement [710] mode_ctrl::ctrl#6 = mode_ctrl::ctrl#13 | DTV_COLORRAM_OFF [ dtv_control#116 mode_ctrl::ctrl#6 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  ) always clobbers reg byte a 
Statement [726] bitmap_plot_xhi[bitmap_init::x#2] = >mode_stdbitmap::BITMAP [ bitmap_init::x#2 bitmap_init::bits#3 ] ( menu:5::mode_stdbitmap:55::bitmap_init:275 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:125 [ bitmap_init::x#2 bitmap_init::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:126 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Statement [727] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( menu:5::mode_stdbitmap:55::bitmap_init:275 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Statement [742] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( menu:5::mode_stdbitmap:55::bitmap_init:275 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:127 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [747] bitmap_clear::bitmap#0 = *bitmap_plot_xhi w= *bitmap_plot_xlo [ bitmap_clear::bitmap#0 ] ( menu:5::mode_stdbitmap:55::bitmap_clear:277 [ bitmap_clear::bitmap#0 ] { }  ) always clobbers reg byte a 
Statement [748] bitmap_clear::bitmap#5 = (byte*)bitmap_clear::bitmap#0 [ bitmap_clear::bitmap#5 ] ( menu:5::mode_stdbitmap:55::bitmap_clear:277 [ bitmap_clear::bitmap#5 ] { }  ) always clobbers reg byte a 
Statement [751] *bitmap_clear::bitmap#2 = 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( menu:5::mode_stdbitmap:55::bitmap_clear:277 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:130 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:130 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:133 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:133 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Statement [759] bitmap_line::xd#2 = bitmap_line::x0#0 - bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:36 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:216 [ bitmap_line::x0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:217 [ bitmap_line::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:218 [ bitmap_line::y0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:219 [ bitmap_line::y1#0 ]
Statement [761] bitmap_line::yd#2 = bitmap_line::y0#0 - bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:279 [ bitmap_line::xd#2 ]
Statement [776] bitmap_line::yd#1 = bitmap_line::y1#0 - bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] { }  ) always clobbers reg byte a 
Statement [790] bitmap_line::xd#1 = bitmap_line::x1#0 - bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] { }  ) always clobbers reg byte a 
Statement [792] bitmap_line::yd#10 = bitmap_line::y0#0 - bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:282 [ bitmap_line::xd#1 ]
Statement [806] bitmap_line::yd#11 = bitmap_line::y1#0 - bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] { }  ) always clobbers reg byte a 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [825] bitmap_line_ydxi::e#0 = bitmap_line_ydxi::xd#2 >> 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:139 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:136 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:137 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Statement [831] bitmap_line_ydxi::e#1 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [834] bitmap_line_ydxi::e#2 = bitmap_line_ydxi::e#1 - bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [840] bitmap_line_xdyi::e#0 = bitmap_line_xdyi::yd#2 >> 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:141 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:144 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:145 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:142 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Statement [846] bitmap_line_xdyi::e#1 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [849] bitmap_line_xdyi::e#2 = bitmap_line_xdyi::e#1 - bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [855] bitmap_line_ydxd::e#0 = bitmap_line_ydxd::xd#2 >> 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:147 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:150 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:151 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:148 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:149 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Statement [861] bitmap_line_ydxd::e#1 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [864] bitmap_line_ydxd::e#2 = bitmap_line_ydxd::e#1 - bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [870] bitmap_line_xdyd::e#0 = bitmap_line_xdyd::yd#2 >> 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:153 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:156 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:157 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:154 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:155 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Statement [876] bitmap_line_xdyd::e#1 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [879] bitmap_line_xdyd::e#2 = bitmap_line_xdyd::e#1 - bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [885] bitmap_plot::plotter_x#0 = bitmap_plot_xhi[bitmap_plot::x#4] w= bitmap_plot_xlo[bitmap_plot::x#4] [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:140 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:159 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:160 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:146 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:152 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:158 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Statement [886] bitmap_plot::plotter_y#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Statement [887] bitmap_plot::plotter#0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Statement [888] bitmap_plot::$1 = *((byte*)bitmap_plot::plotter#0) | bitmap_plot_bit[bitmap_plot::x#4] [ bitmap_plot::plotter#0 bitmap_plot::$1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:36 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:136 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:137 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:139 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:140 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:141 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:142 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:144 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:145 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:146 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:147 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:148 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:149 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:150 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:151 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte y as potential for zp[1]:152 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:153 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:154 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:155 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:156 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:157 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:158 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Statement [889] *((byte*)bitmap_plot::plotter#0) = bitmap_plot::$1 [ ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte y 
Statement [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *PROCPORT = PROCPORT_RAM_IO [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *DTV_FEATURE = DTV_FEATURE_ENABLE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [7] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [8] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [9] *DTV_CONTROL = 0 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [10] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [11] *((byte*)CIA2) = 3^(byte)(word)menu::CHARSET/$4000 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [12] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [13] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [14] *VIC_MEMORY = (byte)(word)menu::CHARSET&$3fff/$400 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [16] DTV_PALETTE[menu::i#2] = DTV_PALETTE_DEFAULT[menu::i#2] [ menu::i#2 ] ( menu:5 [ menu::i#2 ] { }  ) always clobbers reg byte a 
Statement [20] if(menu::c#2!=COLS+$3e8) goto menu::@3 [ menu::c#2 ] ( menu:5 [ menu::c#2 ] { }  ) always clobbers reg byte a 
Statement [21] *BG_COLOR = 0 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [22] *BORDER_COLOR = 0 [ ] ( menu:5 [ ] { }  ) always clobbers reg byte a 
Statement [112] *menu::c#2 = LIGHT_GREEN [ menu::c#2 ] ( menu:5 [ menu::c#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [119] if(0!=*print_str_lines::str#2) goto print_str_lines::@2 [ print_str_lines::str#2 print_char_cursor#2 print_line_cursor#1 ] ( menu:5::print_str_lines:26 [ print_str_lines::str#2 print_char_cursor#2 print_line_cursor#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [122] print_str_lines::ch#0 = *print_str_lines::str#3 [ print_line_cursor#1 print_str_lines::str#3 print_char_cursor#37 print_str_lines::ch#0 ] ( menu:5::print_str_lines:26 [ print_line_cursor#1 print_str_lines::str#3 print_char_cursor#37 print_str_lines::ch#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [131] print_char_cursor#103 = print_line_cursor#2 [ print_str_lines::str#0 print_char_cursor#103 print_line_cursor#2 ] ( menu:5::print_str_lines:26 [ print_str_lines::str#0 print_char_cursor#103 print_line_cursor#2 ] { }  ) always clobbers reg byte a 
Statement [134] keyboard_key_pressed::rowidx#0 = keyboard_key_pressed::key#20 >> 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( menu:5::keyboard_key_pressed:28 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:36 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#24 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:43 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#25 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:50 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#26 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:57 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#27 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:64 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#28 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:71 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#29 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:78 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#30 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:85 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#10 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:92 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#11 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:99 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#12 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:106 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#13 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:670 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:676 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:682 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:688 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:694 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:700 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:706 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:712 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [141] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [142] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [143] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [144] *DTV_CONTROL = 0 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [145] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [146] *((byte*)CIA2) = 3^(byte)(word)mode_stdchar::CHARSET/$4000 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [147] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [148] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [149] *VIC_MEMORY = (byte)(word)mode_stdchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [151] DTV_PALETTE[mode_stdchar::i#2] = DTV_PALETTE_DEFAULT[mode_stdchar::i#2] [ mode_stdchar::i#2 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::i#2 ] { }  ) always clobbers reg byte a 
Statement [154] *BG_COLOR = 0 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [155] *BORDER_COLOR = 0 [ ] ( menu:5::mode_stdchar:33 [ ] { }  ) always clobbers reg byte a 
Statement [158] mode_stdchar::$2 = mode_stdchar::cx#2 + mode_stdchar::cy#4 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$2 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$2 ] { }  ) always clobbers reg byte a 
Statement [160] *mode_stdchar::col#2 = mode_stdchar::$3 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [162] mode_stdchar::$4 = mode_stdchar::cy#4 & $f [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$4 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$4 ] { }  ) always clobbers reg byte a 
Statement [163] mode_stdchar::$5 = mode_stdchar::$4 << 4 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$5 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$5 ] { }  ) always clobbers reg byte a 
Statement [164] mode_stdchar::$6 = mode_stdchar::cx#2 & $f [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$5 mode_stdchar::$6 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$5 mode_stdchar::$6 ] { }  ) always clobbers reg byte a 
Statement [166] *mode_stdchar::ch#2 = mode_stdchar::$7 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 ] ( menu:5::mode_stdchar:33 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [175] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [176] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [177] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [178] *DTV_CONTROL = 0 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [179] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [180] *((byte*)CIA2) = 3^(byte)(word)mode_ecmchar::CHARSET/$4000 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [181] *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [182] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [183] *VIC_MEMORY = (byte)(word)mode_ecmchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [185] DTV_PALETTE[mode_ecmchar::i#2] = DTV_PALETTE_DEFAULT[mode_ecmchar::i#2] [ mode_ecmchar::i#2 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::i#2 ] { }  ) always clobbers reg byte a 
Statement [188] *BORDER_COLOR = 0 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [189] *BG_COLOR = 0 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [190] *BG_COLOR1 = 2 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [191] *BG_COLOR2 = 5 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [192] *BG_COLOR3 = 6 [ ] ( menu:5::mode_ecmchar:41 [ ] { }  ) always clobbers reg byte a 
Statement [195] mode_ecmchar::$2 = mode_ecmchar::cx#2 + mode_ecmchar::cy#4 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$2 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$2 ] { }  ) always clobbers reg byte a 
Statement [197] *mode_ecmchar::col#2 = mode_ecmchar::$3 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [199] mode_ecmchar::$4 = mode_ecmchar::cy#4 & $f [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$4 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$4 ] { }  ) always clobbers reg byte a 
Statement [200] mode_ecmchar::$5 = mode_ecmchar::$4 << 4 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$5 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$5 ] { }  ) always clobbers reg byte a 
Statement [201] mode_ecmchar::$6 = mode_ecmchar::cx#2 & $f [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$5 mode_ecmchar::$6 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$5 mode_ecmchar::$6 ] { }  ) always clobbers reg byte a 
Statement [203] *mode_ecmchar::ch#2 = mode_ecmchar::$7 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 ] ( menu:5::mode_ecmchar:41 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [212] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [213] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [214] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [215] *DTV_CONTROL = 0 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [216] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [217] *((byte*)CIA2) = 3^(byte)(word)mode_mcchar::CHARSET/$4000 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [218] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [219] *VIC_CONTROL2 = VIC_CSEL|VIC_MCM [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [220] *VIC_MEMORY = (byte)(word)mode_mcchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [222] DTV_PALETTE[mode_mcchar::i#2] = DTV_PALETTE_DEFAULT[mode_mcchar::i#2] [ mode_mcchar::i#2 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::i#2 ] { }  ) always clobbers reg byte a 
Statement [225] *BORDER_COLOR = 0 [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [226] *BG_COLOR = BLACK [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [227] *BG_COLOR1 = GREEN [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [228] *BG_COLOR2 = BLUE [ ] ( menu:5::mode_mcchar:48 [ ] { }  ) always clobbers reg byte a 
Statement [231] mode_mcchar::$2 = mode_mcchar::cx#2 + mode_mcchar::cy#4 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$2 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$2 ] { }  ) always clobbers reg byte a 
Statement [233] *mode_mcchar::col#2 = mode_mcchar::$3 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [235] mode_mcchar::$4 = mode_mcchar::cy#4 & $f [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$4 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$4 ] { }  ) always clobbers reg byte a 
Statement [236] mode_mcchar::$5 = mode_mcchar::$4 << 4 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$5 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$5 ] { }  ) always clobbers reg byte a 
Statement [237] mode_mcchar::$6 = mode_mcchar::cx#2 & $f [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$5 mode_mcchar::$6 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$5 mode_mcchar::$6 ] { }  ) always clobbers reg byte a 
Statement [239] *mode_mcchar::ch#2 = mode_mcchar::$7 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 ] ( menu:5::mode_mcchar:48 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [248] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [249] *DTV_CONTROL = 0 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [250] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [251] *((byte*)CIA2) = 3^(byte)(word)mode_stdbitmap::BITMAP/$4000 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [252] *VIC_CONTROL = VIC_BMM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [253] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [254] *VIC_MEMORY = (byte)(word)mode_stdbitmap::BITMAP&$3fff/$400 [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [256] DTV_PALETTE[mode_stdbitmap::i#2] = DTV_PALETTE_DEFAULT[mode_stdbitmap::i#2] [ mode_stdbitmap::i#2 ] ( menu:5::mode_stdbitmap:55 [ mode_stdbitmap::i#2 ] { }  ) always clobbers reg byte a 
Statement [259] *BG_COLOR = BLACK [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [260] *BORDER_COLOR = BLACK [ ] ( menu:5::mode_stdbitmap:55 [ ] { }  ) always clobbers reg byte a 
Statement [263] mode_stdbitmap::$4 = mode_stdbitmap::cx#2 + mode_stdbitmap::cy#4 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::$4 ] ( menu:5::mode_stdbitmap:55 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::$4 ] { }  ) always clobbers reg byte a 
Statement [265] mode_stdbitmap::col2#0 = $f - mode_stdbitmap::col#0 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 mode_stdbitmap::col2#0 ] ( menu:5::mode_stdbitmap:55 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 mode_stdbitmap::col2#0 ] { }  ) always clobbers reg byte a 
Statement [266] mode_stdbitmap::$7 = mode_stdbitmap::col#0 << 4 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col2#0 mode_stdbitmap::$7 ] ( menu:5::mode_stdbitmap:55 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col2#0 mode_stdbitmap::$7 ] { }  ) always clobbers reg byte a 
Statement [268] *mode_stdbitmap::ch#2 = mode_stdbitmap::$8 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 ] ( menu:5::mode_stdbitmap:55 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 ] { }  ) always clobbers reg byte y 
Statement [289] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [290] *DTV_COLOR_BANK_LO = <(word)mode_hicolstdchar::COLORS/$400 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [291] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [292] *DTV_CONTROL = DTV_HIGHCOLOR [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [293] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [294] *((byte*)CIA2) = 3^(byte)(word)mode_hicolstdchar::CHARSET/$4000 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [295] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [296] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [297] *VIC_MEMORY = (byte)(word)mode_hicolstdchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [302] *BG_COLOR = 0 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [303] *BORDER_COLOR = 0 [ ] ( menu:5::mode_hicolstdchar:62 [ ] { }  ) always clobbers reg byte a 
Statement [306] mode_hicolstdchar::$2 = mode_hicolstdchar::cy#4 & $f [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$2 ] ( menu:5::mode_hicolstdchar:62 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$2 ] { }  ) always clobbers reg byte a 
Statement [307] mode_hicolstdchar::$3 = mode_hicolstdchar::$2 << 4 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$3 ] ( menu:5::mode_hicolstdchar:62 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$3 ] { }  ) always clobbers reg byte a 
Statement [308] mode_hicolstdchar::$4 = mode_hicolstdchar::cx#2 & $f [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$3 mode_hicolstdchar::$4 ] ( menu:5::mode_hicolstdchar:62 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$3 mode_hicolstdchar::$4 ] { }  ) always clobbers reg byte a 
Statement [310] *mode_hicolstdchar::col#2 = mode_hicolstdchar::v#0 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::v#0 ] ( menu:5::mode_hicolstdchar:62 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::v#0 ] { }  ) always clobbers reg byte y 
Statement [312] *mode_hicolstdchar::ch#2 = mode_hicolstdchar::v#0 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::col#1 mode_hicolstdchar::cx#2 mode_hicolstdchar::ch#2 ] ( menu:5::mode_hicolstdchar:62 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::col#1 mode_hicolstdchar::cx#2 mode_hicolstdchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [321] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [322] *DTV_COLOR_BANK_LO = <(word)mode_hicolecmchar::COLORS/$400 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [323] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [324] *DTV_CONTROL = DTV_HIGHCOLOR [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [325] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [326] *((byte*)CIA2) = 3^(byte)(word)mode_hicolecmchar::CHARSET/$4000 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [327] *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [328] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [329] *VIC_MEMORY = (byte)(word)mode_hicolecmchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [334] *BORDER_COLOR = 0 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [335] *BG_COLOR = $50 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [336] *BG_COLOR1 = $54 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [337] *BG_COLOR2 = $58 [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [338] *BG_COLOR3 = $5c [ ] ( menu:5::mode_hicolecmchar:69 [ ] { }  ) always clobbers reg byte a 
Statement [341] mode_hicolecmchar::$2 = mode_hicolecmchar::cy#4 & $f [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$2 ] ( menu:5::mode_hicolecmchar:69 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$2 ] { }  ) always clobbers reg byte a 
Statement [342] mode_hicolecmchar::$3 = mode_hicolecmchar::$2 << 4 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$3 ] ( menu:5::mode_hicolecmchar:69 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$3 ] { }  ) always clobbers reg byte a 
Statement [343] mode_hicolecmchar::$4 = mode_hicolecmchar::cx#2 & $f [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$3 mode_hicolecmchar::$4 ] ( menu:5::mode_hicolecmchar:69 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$3 mode_hicolecmchar::$4 ] { }  ) always clobbers reg byte a 
Statement [345] *mode_hicolecmchar::col#2 = mode_hicolecmchar::v#0 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::v#0 ] ( menu:5::mode_hicolecmchar:69 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::v#0 ] { }  ) always clobbers reg byte y 
Statement [347] *mode_hicolecmchar::ch#2 = mode_hicolecmchar::v#0 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::col#1 mode_hicolecmchar::cx#2 mode_hicolecmchar::ch#2 ] ( menu:5::mode_hicolecmchar:69 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::col#1 mode_hicolecmchar::cx#2 mode_hicolecmchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [356] *DTV_GRAPHICS_VIC_BANK = 0 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [357] *DTV_COLOR_BANK_LO = <(word)mode_hicolmcchar::COLORS/$400 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [358] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [359] *DTV_CONTROL = DTV_HIGHCOLOR [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [360] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [361] *((byte*)CIA2) = 3^(byte)(word)mode_hicolmcchar::CHARSET/$4000 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [362] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [363] *VIC_CONTROL2 = VIC_CSEL|VIC_MCM [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [364] *VIC_MEMORY = (byte)(word)mode_hicolmcchar::CHARSET&$3fff/$400 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [369] *BORDER_COLOR = 0 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [370] *BG_COLOR = $50 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [371] *BG_COLOR1 = $54 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [372] *BG_COLOR2 = $58 [ ] ( menu:5::mode_hicolmcchar:76 [ ] { }  ) always clobbers reg byte a 
Statement [375] mode_hicolmcchar::$2 = mode_hicolmcchar::cy#4 & $f [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$2 ] ( menu:5::mode_hicolmcchar:76 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$2 ] { }  ) always clobbers reg byte a 
Statement [376] mode_hicolmcchar::$3 = mode_hicolmcchar::$2 << 4 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$3 ] ( menu:5::mode_hicolmcchar:76 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$3 ] { }  ) always clobbers reg byte a 
Statement [377] mode_hicolmcchar::$4 = mode_hicolmcchar::cx#2 & $f [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$3 mode_hicolmcchar::$4 ] ( menu:5::mode_hicolmcchar:76 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$3 mode_hicolmcchar::$4 ] { }  ) always clobbers reg byte a 
Statement [379] *mode_hicolmcchar::col#2 = mode_hicolmcchar::v#0 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::v#0 ] ( menu:5::mode_hicolmcchar:76 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::v#0 ] { }  ) always clobbers reg byte y 
Statement [381] *mode_hicolmcchar::ch#2 = mode_hicolmcchar::v#0 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::col#1 mode_hicolmcchar::cx#2 mode_hicolmcchar::ch#2 ] ( menu:5::mode_hicolmcchar:76 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::col#1 mode_hicolmcchar::cx#2 mode_hicolmcchar::ch#2 ] { }  ) always clobbers reg byte y 
Statement [390] *DTV_CONTROL = DTV_LINEAR [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [391] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [392] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [393] *DTV_PLANEA_START_LO = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [394] *DTV_PLANEA_START_MI = >mode_sixsfred2::PLANEA [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [395] *DTV_PLANEA_START_HI = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [396] *DTV_PLANEA_STEP = 1 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [397] *DTV_PLANEA_MODULO_LO = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [398] *DTV_PLANEA_MODULO_HI = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [399] *DTV_PLANEB_START_LO = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [400] *DTV_PLANEB_START_MI = >mode_sixsfred2::PLANEB [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [401] *DTV_PLANEB_START_HI = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [402] *DTV_PLANEB_STEP = 1 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [403] *DTV_PLANEB_MODULO_LO = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [404] *DTV_PLANEB_MODULO_HI = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [405] *DTV_COLOR_BANK_LO = <mode_sixsfred2::COLORS/$400 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [406] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [411] *BORDER_COLOR = 0 [ ] ( menu:5::mode_sixsfred2:83 [ ] { }  ) always clobbers reg byte a 
Statement [414] mode_sixsfred2::$2 = mode_sixsfred2::cx#2 & 3 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$2 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$2 ] { }  ) always clobbers reg byte a 
Statement [415] mode_sixsfred2::$3 = mode_sixsfred2::$2 << 4 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$3 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$3 ] { }  ) always clobbers reg byte a 
Statement [416] mode_sixsfred2::$4 = mode_sixsfred2::cy#4 & 3 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$3 mode_sixsfred2::$4 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$3 mode_sixsfred2::$4 ] { }  ) always clobbers reg byte a 
Statement [418] *mode_sixsfred2::col#2 = mode_sixsfred2::$5 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 ] { }  ) always clobbers reg byte y 
Statement [426] mode_sixsfred2::$8 = mode_sixsfred2::ay#4 >> 1 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::$8 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::$8 ] { }  ) always clobbers reg byte a 
Statement [428] *mode_sixsfred2::gfxa#2 = mode_sixsfred2::row_bitmask[mode_sixsfred2::row#0] [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [436] *mode_sixsfred2::gfxb#2 = $1b [ mode_sixsfred2::by#4 mode_sixsfred2::gfxb#2 mode_sixsfred2::bx#2 ] ( menu:5::mode_sixsfred2:83 [ mode_sixsfred2::by#4 mode_sixsfred2::gfxb#2 mode_sixsfred2::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [445] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [446] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [447] *VIC_CONTROL2 = VIC_CSEL [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [448] *DTV_PLANEA_START_LO = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [449] *DTV_PLANEA_START_MI = >mode_twoplanebitmap::PLANEA [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [450] *DTV_PLANEA_START_HI = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [451] *DTV_PLANEA_STEP = 1 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [452] *DTV_PLANEA_MODULO_LO = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [453] *DTV_PLANEA_MODULO_HI = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [454] *DTV_PLANEB_START_LO = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [455] *DTV_PLANEB_START_MI = >mode_twoplanebitmap::PLANEB [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [456] *DTV_PLANEB_START_HI = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [457] *DTV_PLANEB_STEP = 1 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [458] *DTV_PLANEB_MODULO_LO = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [459] *DTV_PLANEB_MODULO_HI = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [460] *DTV_COLOR_BANK_LO = <mode_twoplanebitmap::COLORS/$400 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [461] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [466] *BORDER_COLOR = 0 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [467] *BG_COLOR = $70 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [468] *BG_COLOR1 = $d4 [ ] ( menu:5::mode_twoplanebitmap:90 [ ] { }  ) always clobbers reg byte a 
Statement [471] mode_twoplanebitmap::$2 = mode_twoplanebitmap::cy#4 & $f [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$2 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$2 ] { }  ) always clobbers reg byte a 
Statement [472] mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2 << 4 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$3 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$3 ] { }  ) always clobbers reg byte a 
Statement [473] mode_twoplanebitmap::$4 = mode_twoplanebitmap::cx#2 & $f [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$3 mode_twoplanebitmap::$4 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$3 mode_twoplanebitmap::$4 ] { }  ) always clobbers reg byte a 
Statement [475] *mode_twoplanebitmap::col#2 = mode_twoplanebitmap::$5 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 ] { }  ) always clobbers reg byte y 
Statement [483] mode_twoplanebitmap::$8 = mode_twoplanebitmap::ay#5 & 4 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$8 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$8 ] { }  ) always clobbers reg byte a 
Statement [485] *mode_twoplanebitmap::gfxa#3 = $ff [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [494] *mode_twoplanebitmap::gfxb#2 = $f [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [503] *mode_twoplanebitmap::gfxa#3 = 0 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( menu:5::mode_twoplanebitmap:90 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [505] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [506] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [507] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [508] *DTV_PLANEA_START_LO = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [509] *DTV_PLANEA_START_MI = >mode_sixsfred::PLANEA [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [510] *DTV_PLANEA_START_HI = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [511] *DTV_PLANEA_STEP = 1 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [512] *DTV_PLANEA_MODULO_LO = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [513] *DTV_PLANEA_MODULO_HI = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [514] *DTV_PLANEB_START_LO = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [515] *DTV_PLANEB_START_MI = >mode_sixsfred::PLANEB [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [516] *DTV_PLANEB_START_HI = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [517] *DTV_PLANEB_STEP = 1 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [518] *DTV_PLANEB_MODULO_LO = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [519] *DTV_PLANEB_MODULO_HI = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [520] *DTV_COLOR_BANK_LO = <mode_sixsfred::COLORS/$400 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [521] *DTV_COLOR_BANK_HI = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [526] *BORDER_COLOR = 0 [ ] ( menu:5::mode_sixsfred:97 [ ] { }  ) always clobbers reg byte a 
Statement [529] mode_sixsfred::$2 = mode_sixsfred::cx#2 + mode_sixsfred::cy#4 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$2 ] ( menu:5::mode_sixsfred:97 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$2 ] { }  ) always clobbers reg byte a 
Statement [531] *mode_sixsfred::col#2 = mode_sixsfred::$3 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 ] ( menu:5::mode_sixsfred:97 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 ] { }  ) always clobbers reg byte y 
Statement [539] mode_sixsfred::$6 = mode_sixsfred::ay#4 >> 1 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::$6 ] ( menu:5::mode_sixsfred:97 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::$6 ] { }  ) always clobbers reg byte a 
Statement [541] *mode_sixsfred::gfxa#2 = mode_sixsfred::row_bitmask[mode_sixsfred::row#0] [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 ] ( menu:5::mode_sixsfred:97 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [549] *mode_sixsfred::gfxb#2 = $1b [ mode_sixsfred::by#4 mode_sixsfred::gfxb#2 mode_sixsfred::bx#2 ] ( menu:5::mode_sixsfred:97 [ mode_sixsfred::by#4 mode_sixsfred::gfxb#2 mode_sixsfred::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [558] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [559] *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [560] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [561] *DTV_PLANEA_START_LO = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [562] *DTV_PLANEA_START_MI = >mode_8bpppixelcell::PLANEA [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [563] *DTV_PLANEA_START_HI = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [564] *DTV_PLANEA_STEP = 1 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [565] *DTV_PLANEA_MODULO_LO = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [566] *DTV_PLANEA_MODULO_HI = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [567] *DTV_PLANEB_START_LO = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [568] *DTV_PLANEB_START_MI = >mode_8bpppixelcell::PLANEB [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [569] *DTV_PLANEB_START_HI = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [570] *DTV_PLANEB_STEP = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [571] *DTV_PLANEB_MODULO_LO = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [572] *DTV_PLANEB_MODULO_HI = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [573] *BORDER_COLOR = 0 [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [580] mode_8bpppixelcell::$2 = mode_8bpppixelcell::ay#4 & $f [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$2 ] ( menu:5::mode_8bpppixelcell:104 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$2 ] { }  ) always clobbers reg byte a 
Statement [581] mode_8bpppixelcell::$3 = mode_8bpppixelcell::$2 << 4 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$3 ] ( menu:5::mode_8bpppixelcell:104 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$3 ] { }  ) always clobbers reg byte a 
Statement [582] mode_8bpppixelcell::$4 = mode_8bpppixelcell::ax#2 & $f [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$3 mode_8bpppixelcell::$4 ] ( menu:5::mode_8bpppixelcell:104 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$3 mode_8bpppixelcell::$4 ] { }  ) always clobbers reg byte a 
Statement [584] *mode_8bpppixelcell::gfxa#2 = mode_8bpppixelcell::$5 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 ] ( menu:5::mode_8bpppixelcell:104 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 ] { }  ) always clobbers reg byte y 
Statement [590] *PROCPORT = PROCPORT_RAM_CHARROM [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [593] mode_8bpppixelcell::bits#0 = *mode_8bpppixelcell::chargen#2 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::col#5 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#0 ] ( menu:5::mode_8bpppixelcell:104 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::col#5 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [600] *mode_8bpppixelcell::gfxb#2 = mode_8bpppixelcell::c#2 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 ] ( menu:5::mode_8bpppixelcell:104 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 ] { }  ) always clobbers reg byte y 
Statement [610] *PROCPORT = PROCPORT_RAM_IO [ ] ( menu:5::mode_8bpppixelcell:104 [ ] { }  ) always clobbers reg byte a 
Statement [613] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [614] *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [615] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [616] *DTV_PLANEB_START_LO = 0 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [617] *DTV_PLANEB_START_MI = 0 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [618] *DTV_PLANEB_START_HI = <>mode_8bppchunkybmm::PLANEB [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [619] *DTV_PLANEB_STEP = 8 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [620] *DTV_PLANEB_MODULO_LO = 0 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [621] *DTV_PLANEB_MODULO_HI = 0 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [622] *BORDER_COLOR = 0 [ ] ( menu:5::mode_8bppchunkybmm:111 [ ] { }  ) always clobbers reg byte a 
Statement [631] if(mode_8bppchunkybmm::gfxb#3!=$8000) goto mode_8bppchunkybmm::@5 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxbCpuBank#4 ] ( menu:5::mode_8bppchunkybmm:111 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxbCpuBank#4 ] { }  ) always clobbers reg byte a 
Statement [636] mode_8bppchunkybmm::$7 = mode_8bppchunkybmm::x#2 + mode_8bppchunkybmm::y#6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::$7 ] ( menu:5::mode_8bppchunkybmm:111 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::$7 ] { }  ) always clobbers reg byte a 
Statement [637] mode_8bppchunkybmm::c#0 = (byte)mode_8bppchunkybmm::$7 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::c#0 ] ( menu:5::mode_8bppchunkybmm:111 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::c#0 ] { }  ) always clobbers reg byte a 
Statement [638] *mode_8bppchunkybmm::gfxb#4 = mode_8bppchunkybmm::c#0 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 ] ( menu:5::mode_8bppchunkybmm:111 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 ] { }  ) always clobbers reg byte y 
Statement [641] if(mode_8bppchunkybmm::x#1!=$140) goto mode_8bppchunkybmm::@4 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#1 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#1 ] ( menu:5::mode_8bppchunkybmm:111 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#1 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#1 ] { }  ) always clobbers reg byte a 
Statement [651] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( menu:5::print_cls:24::memset:115 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [653] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( menu:5::print_cls:24::memset:115 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [655] *print_char_cursor#37 = print_char::ch#0 [ print_char_cursor#37 ] ( menu:5::print_str_lines:26::print_char:126 [ print_line_cursor#1 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#37 ] { { print_char::ch#0 = print_str_lines::ch#0 } }  ) always clobbers reg byte y 
Statement [660] print_line_cursor#2 = print_line_cursor#19 + $28 [ print_line_cursor#2 print_char_cursor#38 ] ( menu:5::print_str_lines:26::print_ln:130 [ print_str_lines::str#0 print_line_cursor#2 print_char_cursor#38 ] { }  ) always clobbers reg byte a 
Statement [661] if(print_line_cursor#2<print_char_cursor#38) goto print_ln::@1 [ print_line_cursor#2 print_char_cursor#38 ] ( menu:5::print_str_lines:26::print_ln:130 [ print_str_lines::str#0 print_line_cursor#2 print_char_cursor#38 ] { }  ) always clobbers reg byte a 
Statement [663] *((byte*)CIA1) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0] [ ] ( menu:5::keyboard_key_pressed:28::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:36::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#24 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:43::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#25 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:50::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#26 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:57::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#27 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:64::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#28 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:71::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#29 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:78::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#30 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:85::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#10 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:92::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#11 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:99::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#12 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:106::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#13 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [664] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( menu:5::keyboard_key_pressed:28::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:36::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#24 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:43::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#25 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:50::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#26 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:57::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#27 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:64::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#28 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:71::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#29 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:78::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#30 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:85::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#10 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:92::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#11 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:99::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#12 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::keyboard_key_pressed:106::keyboard_matrix_read:136 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#13 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:670::keyboard_matrix_read:136 [ dtv_control#116 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#14 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:676::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#15 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:682::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#16 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:688::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#17 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:694::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#18 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:700::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#19 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:706::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#20 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdchar:33::mode_ctrl:173::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_ecmchar:41::mode_ctrl:210::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_mcchar:48::mode_ctrl:246::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_stdbitmap:55::mode_ctrl:281::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolstdchar:62::mode_ctrl:319::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolecmchar:69::mode_ctrl:354::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_hicolmcchar:76::mode_ctrl:388::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred2:83::mode_ctrl:443::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_sixsfred:97::mode_ctrl:556::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647::keyboard_key_pressed:712::keyboard_matrix_read:136 [ dtv_control#116 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#21 } { keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [668] if(*RASTER!=$ff) goto mode_ctrl::@2 [ dtv_control#116 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 ] { }  ) always clobbers reg byte a 
Statement [680] mode_ctrl::ctrl#1 = mode_ctrl::ctrl#0 | DTV_LINEAR [ dtv_control#116 mode_ctrl::ctrl#1 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#1 ] { }  ) always clobbers reg byte a 
Statement [686] mode_ctrl::ctrl#2 = mode_ctrl::ctrl#17 | DTV_HIGHCOLOR [ dtv_control#116 mode_ctrl::ctrl#2 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#2 ] { }  ) always clobbers reg byte a 
Statement [692] mode_ctrl::ctrl#3 = mode_ctrl::ctrl#10 | DTV_OVERSCAN [ dtv_control#116 mode_ctrl::ctrl#3 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#3 ] { }  ) always clobbers reg byte a 
Statement [698] mode_ctrl::ctrl#4 = mode_ctrl::ctrl#11 | DTV_BORDER_OFF [ dtv_control#116 mode_ctrl::ctrl#4 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#4 ] { }  ) always clobbers reg byte a 
Statement [704] mode_ctrl::ctrl#5 = mode_ctrl::ctrl#12 | DTV_CHUNKY [ dtv_control#116 mode_ctrl::ctrl#5 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#5 ] { }  ) always clobbers reg byte a 
Statement [710] mode_ctrl::ctrl#6 = mode_ctrl::ctrl#13 | DTV_COLORRAM_OFF [ dtv_control#116 mode_ctrl::ctrl#6 ] ( menu:5::mode_stdchar:33::mode_ctrl:173 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_ecmchar:41::mode_ctrl:210 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_mcchar:48::mode_ctrl:246 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_stdbitmap:55::mode_ctrl:281 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_hicolstdchar:62::mode_ctrl:319 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_hicolecmchar:69::mode_ctrl:354 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_hicolmcchar:76::mode_ctrl:388 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_sixsfred2:83::mode_ctrl:443 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_twoplanebitmap:90::mode_ctrl:501 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_sixsfred:97::mode_ctrl:556 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_8bpppixelcell:104::mode_ctrl:611 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  menu:5::mode_8bppchunkybmm:111::mode_ctrl:647 [ dtv_control#116 mode_ctrl::ctrl#6 ] { }  ) always clobbers reg byte a 
Statement [724] bitmap_init::$0 = bitmap_init::x#2 & $f8 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ( menu:5::mode_stdbitmap:55::bitmap_init:275 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] { }  ) always clobbers reg byte a 
Statement [726] bitmap_plot_xhi[bitmap_init::x#2] = >mode_stdbitmap::BITMAP [ bitmap_init::x#2 bitmap_init::bits#3 ] ( menu:5::mode_stdbitmap:55::bitmap_init:275 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Statement [727] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( menu:5::mode_stdbitmap:55::bitmap_init:275 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Statement [735] bitmap_init::$10 = bitmap_init::y#2 & 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ( menu:5::mode_stdbitmap:55::bitmap_init:275 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] { }  ) always clobbers reg byte a 
Statement [742] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( menu:5::mode_stdbitmap:55::bitmap_init:275 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Statement [747] bitmap_clear::bitmap#0 = *bitmap_plot_xhi w= *bitmap_plot_xlo [ bitmap_clear::bitmap#0 ] ( menu:5::mode_stdbitmap:55::bitmap_clear:277 [ bitmap_clear::bitmap#0 ] { }  ) always clobbers reg byte a 
Statement [748] bitmap_clear::bitmap#5 = (byte*)bitmap_clear::bitmap#0 [ bitmap_clear::bitmap#5 ] ( menu:5::mode_stdbitmap:55::bitmap_clear:277 [ bitmap_clear::bitmap#5 ] { }  ) always clobbers reg byte a 
Statement [751] *bitmap_clear::bitmap#2 = 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( menu:5::mode_stdbitmap:55::bitmap_clear:277 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [759] bitmap_line::xd#2 = bitmap_line::x0#0 - bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] { }  ) always clobbers reg byte a 
Statement [761] bitmap_line::yd#2 = bitmap_line::y0#0 - bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] { }  ) always clobbers reg byte a 
Statement [776] bitmap_line::yd#1 = bitmap_line::y1#0 - bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] { }  ) always clobbers reg byte a 
Statement [790] bitmap_line::xd#1 = bitmap_line::x1#0 - bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] { }  ) always clobbers reg byte a 
Statement [792] bitmap_line::yd#10 = bitmap_line::y0#0 - bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] { }  ) always clobbers reg byte a 
Statement [806] bitmap_line::yd#11 = bitmap_line::y1#0 - bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] { }  ) always clobbers reg byte a 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [825] bitmap_line_ydxi::e#0 = bitmap_line_ydxi::xd#2 >> 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [831] bitmap_line_ydxi::e#1 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [834] bitmap_line_ydxi::e#2 = bitmap_line_ydxi::e#1 - bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [840] bitmap_line_xdyi::e#0 = bitmap_line_xdyi::yd#2 >> 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [846] bitmap_line_xdyi::e#1 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [849] bitmap_line_xdyi::e#2 = bitmap_line_xdyi::e#1 - bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [855] bitmap_line_ydxd::e#0 = bitmap_line_ydxd::xd#2 >> 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [861] bitmap_line_ydxd::e#1 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [864] bitmap_line_ydxd::e#2 = bitmap_line_ydxd::e#1 - bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [870] bitmap_line_xdyd::e#0 = bitmap_line_xdyd::yd#2 >> 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [876] bitmap_line_xdyd::e#1 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [879] bitmap_line_xdyd::e#2 = bitmap_line_xdyd::e#1 - bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [885] bitmap_plot::plotter_x#0 = bitmap_plot_xhi[bitmap_plot::x#4] w= bitmap_plot_xlo[bitmap_plot::x#4] [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Statement [886] bitmap_plot::plotter_y#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Statement [887] bitmap_plot::plotter#0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Statement [888] bitmap_plot::$1 = *((byte*)bitmap_plot::plotter#0) | bitmap_plot_bit[bitmap_plot::x#4] [ bitmap_plot::plotter#0 bitmap_plot::$1 ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a reg byte y 
Statement [889] *((byte*)bitmap_plot::plotter#0) = bitmap_plot::$1 [ ] ( menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:768::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxi:813::bitmap_plot:829 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:775::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyi:819::bitmap_plot:844 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:783::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_ydxd:799::bitmap_plot:859 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:789::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  menu:5::mode_stdbitmap:55::bitmap_line:287::bitmap_line_xdyd:805::bitmap_plot:874 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte y 
Potential registers zp[1]:2 [ menu::i#2 menu::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ menu::c#2 menu::c#1 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ print_char_cursor#37 print_char_cursor#2 print_char_cursor#103 print_char_cursor#38 print_char_cursor#26 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ keyboard_key_pressed::key#20 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ mode_stdchar::i#2 mode_stdchar::i#1 ] : zp[1]:10 , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ] : zp[1]:11 , reg byte x , 
Potential registers zp[1]:12 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ] : zp[1]:12 , reg byte x , 
Potential registers zp[2]:13 [ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ] : zp[1]:17 , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ] : zp[1]:18 , reg byte x , 
Potential registers zp[1]:19 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ] : zp[1]:19 , reg byte x , 
Potential registers zp[2]:20 [ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ] : zp[2]:22 , 
Potential registers zp[1]:24 [ mode_mcchar::i#2 mode_mcchar::i#1 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ] : zp[1]:25 , reg byte x , 
Potential registers zp[1]:26 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ] : zp[1]:26 , reg byte x , 
Potential registers zp[2]:27 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ] : zp[2]:27 , 
Potential registers zp[2]:29 [ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ] : zp[2]:29 , 
Potential registers zp[1]:31 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ] : zp[1]:31 , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ] : zp[1]:32 , reg byte x , 
Potential registers zp[1]:33 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ] : zp[1]:33 , reg byte x , 
Potential registers zp[2]:34 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ] : zp[2]:34 , 
Potential registers zp[1]:36 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] : zp[1]:36 , reg byte x , 
Potential registers zp[1]:37 [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ] : zp[1]:38 , reg byte x , 
Potential registers zp[1]:39 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ] : zp[1]:39 , reg byte x , 
Potential registers zp[2]:40 [ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ] : zp[2]:42 , 
Potential registers zp[1]:44 [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ] : zp[1]:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] : zp[1]:45 , reg byte x , 
Potential registers zp[1]:46 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ] : zp[1]:46 , reg byte x , 
Potential registers zp[2]:47 [ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ] : zp[2]:47 , 
Potential registers zp[2]:49 [ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ] : zp[2]:49 , 
Potential registers zp[1]:51 [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ] : zp[1]:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ] : zp[1]:52 , reg byte x , 
Potential registers zp[1]:53 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ] : zp[1]:53 , reg byte x , 
Potential registers zp[2]:54 [ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ] : zp[2]:54 , 
Potential registers zp[2]:56 [ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ] : zp[2]:56 , 
Potential registers zp[1]:58 [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ] : zp[1]:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:59 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] : zp[1]:59 , reg byte x , 
Potential registers zp[1]:60 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ] : zp[1]:60 , reg byte x , 
Potential registers zp[2]:61 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ] : zp[2]:61 , 
Potential registers zp[1]:63 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] : zp[1]:63 , reg byte x , 
Potential registers zp[2]:64 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ] : zp[2]:64 , 
Potential registers zp[1]:66 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ] : zp[1]:66 , reg byte x , 
Potential registers zp[1]:67 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] : zp[1]:67 , reg byte x , 
Potential registers zp[2]:68 [ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] : zp[2]:68 , 
Potential registers zp[1]:70 [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ] : zp[1]:70 , reg byte x , 
Potential registers zp[1]:71 [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ] : zp[1]:72 , reg byte x , 
Potential registers zp[1]:73 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ] : zp[1]:73 , reg byte x , 
Potential registers zp[2]:74 [ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ] : zp[2]:74 , 
Potential registers zp[1]:76 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ] : zp[1]:76 , reg byte x , 
Potential registers zp[2]:77 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] : zp[2]:77 , 
Potential registers zp[1]:79 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ] : zp[1]:79 , reg byte x , 
Potential registers zp[1]:80 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] : zp[1]:80 , reg byte x , 
Potential registers zp[2]:81 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] : zp[2]:81 , 
Potential registers zp[1]:83 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ] : zp[1]:83 , reg byte x , 
Potential registers zp[1]:84 [ mode_sixsfred::i#2 mode_sixsfred::i#1 ] : zp[1]:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:85 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] : zp[1]:85 , reg byte x , 
Potential registers zp[1]:86 [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ] : zp[1]:86 , reg byte x , 
Potential registers zp[2]:87 [ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ] : zp[2]:87 , 
Potential registers zp[1]:89 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] : zp[1]:89 , reg byte x , 
Potential registers zp[2]:90 [ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ] : zp[2]:90 , 
Potential registers zp[1]:92 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ] : zp[1]:92 , reg byte x , 
Potential registers zp[1]:93 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ] : zp[1]:93 , reg byte x , 
Potential registers zp[2]:94 [ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ] : zp[2]:94 , 
Potential registers zp[1]:96 [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ] : zp[1]:96 , reg byte x , 
Potential registers zp[1]:97 [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ] : zp[1]:97 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:98 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ] : zp[1]:98 , reg byte x , 
Potential registers zp[1]:99 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ] : zp[1]:99 , reg byte x , 
Potential registers zp[2]:100 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ] : zp[2]:100 , 
Potential registers zp[1]:102 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ] : zp[1]:102 , reg byte x , 
Potential registers zp[2]:103 [ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ] : zp[2]:103 , 
Potential registers zp[1]:105 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ] : zp[1]:105 , reg byte x , 
Potential registers zp[1]:106 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ] : zp[1]:106 , reg byte a , reg byte x , 
Potential registers zp[2]:107 [ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ] : zp[2]:107 , 
Potential registers zp[1]:109 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] : zp[1]:109 , reg byte x , 
Potential registers zp[1]:110 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ] : zp[1]:110 , reg byte a , reg byte x , 
Potential registers zp[1]:111 [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ] : zp[1]:111 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:112 [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ] : zp[1]:112 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:113 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ] : zp[1]:113 , reg byte x , 
Potential registers zp[2]:114 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ] : zp[2]:114 , 
Potential registers zp[1]:116 [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ] : zp[1]:116 , reg byte x , 
Potential registers zp[2]:117 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ] : zp[2]:117 , 
Potential registers zp[2]:119 [ memset::dst#2 memset::dst#1 ] : zp[2]:119 , 
Potential registers zp[2]:121 [ print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 ] : zp[2]:121 , 
Potential registers zp[1]:123 [ dtv_control#116 dtv_control#146 dtv_control#16 ] : zp[1]:123 , reg byte x , reg byte y , 
Potential registers zp[1]:124 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ] : zp[1]:124 , reg byte x , reg byte y , 
Potential registers zp[1]:125 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp[1]:125 , reg byte x , reg byte y , 
Potential registers zp[1]:126 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp[1]:126 , reg byte x , reg byte y , 
Potential registers zp[1]:127 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp[1]:127 , reg byte x , reg byte y , 
Potential registers zp[2]:128 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp[2]:128 , 
Potential registers zp[1]:130 [ bitmap_clear::y#4 bitmap_clear::y#1 ] : zp[1]:130 , reg byte x , 
Potential registers zp[2]:131 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] : zp[2]:131 , 
Potential registers zp[1]:133 [ bitmap_clear::x#2 bitmap_clear::x#1 ] : zp[1]:133 , reg byte x , 
Potential registers zp[1]:134 [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ] : zp[1]:134 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] : zp[1]:135 , reg byte x , 
Potential registers zp[1]:136 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] : zp[1]:136 , reg byte x , 
Potential registers zp[1]:137 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] : zp[1]:137 , reg byte x , 
Potential registers zp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] : zp[1]:138 , reg byte x , 
Potential registers zp[1]:139 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] : zp[1]:139 , reg byte x , 
Potential registers zp[1]:140 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] : zp[1]:140 , reg byte x , 
Potential registers zp[1]:141 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] : zp[1]:141 , reg byte x , 
Potential registers zp[1]:142 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] : zp[1]:142 , reg byte x , 
Potential registers zp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] : zp[1]:143 , reg byte x , 
Potential registers zp[1]:144 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] : zp[1]:144 , reg byte x , 
Potential registers zp[1]:145 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] : zp[1]:145 , reg byte x , 
Potential registers zp[1]:146 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] : zp[1]:146 , reg byte x , 
Potential registers zp[1]:147 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] : zp[1]:147 , reg byte x , 
Potential registers zp[1]:148 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] : zp[1]:148 , reg byte x , 
Potential registers zp[1]:149 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] : zp[1]:149 , reg byte x , 
Potential registers zp[1]:150 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] : zp[1]:150 , reg byte x , 
Potential registers zp[1]:151 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] : zp[1]:151 , reg byte x , 
Potential registers zp[1]:152 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] : zp[1]:152 , reg byte x , 
Potential registers zp[1]:153 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] : zp[1]:153 , reg byte x , 
Potential registers zp[1]:154 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] : zp[1]:154 , reg byte x , 
Potential registers zp[1]:155 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] : zp[1]:155 , reg byte x , 
Potential registers zp[1]:156 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] : zp[1]:156 , reg byte x , 
Potential registers zp[1]:157 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] : zp[1]:157 , reg byte x , 
Potential registers zp[1]:158 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] : zp[1]:158 , reg byte x , 
Potential registers zp[1]:159 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] : zp[1]:159 , reg byte x , reg byte y , 
Potential registers zp[1]:160 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] : zp[1]:160 , reg byte x , reg byte y , 
Potential registers zp[1]:161 [ keyboard_key_pressed::return#2 ] : zp[1]:161 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:162 [ menu::$5 ] : zp[1]:162 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:163 [ keyboard_key_pressed::return#24 ] : zp[1]:163 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:164 [ menu::$9 ] : zp[1]:164 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:165 [ keyboard_key_pressed::return#25 ] : zp[1]:165 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:166 [ menu::$13 ] : zp[1]:166 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:167 [ keyboard_key_pressed::return#26 ] : zp[1]:167 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:168 [ menu::$17 ] : zp[1]:168 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:169 [ keyboard_key_pressed::return#27 ] : zp[1]:169 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:170 [ menu::$21 ] : zp[1]:170 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:171 [ keyboard_key_pressed::return#28 ] : zp[1]:171 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:172 [ menu::$25 ] : zp[1]:172 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:173 [ keyboard_key_pressed::return#29 ] : zp[1]:173 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:174 [ menu::$29 ] : zp[1]:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:175 [ keyboard_key_pressed::return#30 ] : zp[1]:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:176 [ menu::$33 ] : zp[1]:176 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:177 [ keyboard_key_pressed::return#10 ] : zp[1]:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:178 [ menu::$37 ] : zp[1]:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:179 [ keyboard_key_pressed::return#11 ] : zp[1]:179 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:180 [ menu::$41 ] : zp[1]:180 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:181 [ keyboard_key_pressed::return#12 ] : zp[1]:181 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:182 [ menu::$45 ] : zp[1]:182 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:183 [ keyboard_key_pressed::return#13 ] : zp[1]:183 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:184 [ menu::$49 ] : zp[1]:184 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:185 [ print_str_lines::ch#0 ] : zp[1]:185 , reg byte a , reg byte x , 
Potential registers zp[1]:186 [ print_char::ch#0 ] : zp[1]:186 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:187 [ keyboard_key_pressed::colidx#0 ] : zp[1]:187 , reg byte x , reg byte y , 
Potential registers zp[1]:188 [ keyboard_key_pressed::rowidx#0 ] : zp[1]:188 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:189 [ keyboard_matrix_read::rowid#0 ] : zp[1]:189 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:190 [ keyboard_matrix_read::return#2 ] : zp[1]:190 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:191 [ keyboard_key_pressed::$2 ] : zp[1]:191 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:192 [ keyboard_key_pressed::return#0 ] : zp[1]:192 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:193 [ mode_stdchar::$2 ] : zp[1]:193 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:194 [ mode_stdchar::$3 ] : zp[1]:194 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:195 [ mode_stdchar::$4 ] : zp[1]:195 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:196 [ mode_stdchar::$5 ] : zp[1]:196 , reg byte x , reg byte y , 
Potential registers zp[1]:197 [ mode_stdchar::$6 ] : zp[1]:197 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:198 [ mode_stdchar::$7 ] : zp[1]:198 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:199 [ mode_ecmchar::$2 ] : zp[1]:199 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:200 [ mode_ecmchar::$3 ] : zp[1]:200 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:201 [ mode_ecmchar::$4 ] : zp[1]:201 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:202 [ mode_ecmchar::$5 ] : zp[1]:202 , reg byte x , reg byte y , 
Potential registers zp[1]:203 [ mode_ecmchar::$6 ] : zp[1]:203 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:204 [ mode_ecmchar::$7 ] : zp[1]:204 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:205 [ mode_mcchar::$2 ] : zp[1]:205 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:206 [ mode_mcchar::$3 ] : zp[1]:206 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:207 [ mode_mcchar::$4 ] : zp[1]:207 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:208 [ mode_mcchar::$5 ] : zp[1]:208 , reg byte x , reg byte y , 
Potential registers zp[1]:209 [ mode_mcchar::$6 ] : zp[1]:209 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:210 [ mode_mcchar::$7 ] : zp[1]:210 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:211 [ mode_stdbitmap::$4 ] : zp[1]:211 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:212 [ mode_stdbitmap::col#0 ] : zp[1]:212 , reg byte x , reg byte y , 
Potential registers zp[1]:213 [ mode_stdbitmap::col2#0 ] : zp[1]:213 , reg byte x , reg byte y , 
Potential registers zp[1]:214 [ mode_stdbitmap::$7 ] : zp[1]:214 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:215 [ mode_stdbitmap::$8 ] : zp[1]:215 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:216 [ bitmap_line::x0#0 ] : zp[1]:216 , reg byte x , reg byte y , 
Potential registers zp[1]:217 [ bitmap_line::x1#0 ] : zp[1]:217 , reg byte x , reg byte y , 
Potential registers zp[1]:218 [ bitmap_line::y0#0 ] : zp[1]:218 , reg byte x , reg byte y , 
Potential registers zp[1]:219 [ bitmap_line::y1#0 ] : zp[1]:219 , reg byte x , reg byte y , 
Potential registers zp[1]:220 [ mode_hicolstdchar::$2 ] : zp[1]:220 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:221 [ mode_hicolstdchar::$3 ] : zp[1]:221 , reg byte x , reg byte y , 
Potential registers zp[1]:222 [ mode_hicolstdchar::$4 ] : zp[1]:222 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:223 [ mode_hicolstdchar::v#0 ] : zp[1]:223 , reg byte a , reg byte x , 
Potential registers zp[1]:224 [ mode_hicolecmchar::$2 ] : zp[1]:224 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:225 [ mode_hicolecmchar::$3 ] : zp[1]:225 , reg byte x , reg byte y , 
Potential registers zp[1]:226 [ mode_hicolecmchar::$4 ] : zp[1]:226 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:227 [ mode_hicolecmchar::v#0 ] : zp[1]:227 , reg byte a , reg byte x , 
Potential registers zp[1]:228 [ mode_hicolmcchar::$2 ] : zp[1]:228 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:229 [ mode_hicolmcchar::$3 ] : zp[1]:229 , reg byte x , reg byte y , 
Potential registers zp[1]:230 [ mode_hicolmcchar::$4 ] : zp[1]:230 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:231 [ mode_hicolmcchar::v#0 ] : zp[1]:231 , reg byte a , reg byte x , 
Potential registers zp[1]:232 [ mode_sixsfred2::$2 ] : zp[1]:232 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:233 [ mode_sixsfred2::$3 ] : zp[1]:233 , reg byte x , reg byte y , 
Potential registers zp[1]:234 [ mode_sixsfred2::$4 ] : zp[1]:234 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:235 [ mode_sixsfred2::$5 ] : zp[1]:235 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:236 [ mode_sixsfred2::$8 ] : zp[1]:236 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:237 [ mode_sixsfred2::row#0 ] : zp[1]:237 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:238 [ mode_twoplanebitmap::$2 ] : zp[1]:238 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:239 [ mode_twoplanebitmap::$3 ] : zp[1]:239 , reg byte x , reg byte y , 
Potential registers zp[1]:240 [ mode_twoplanebitmap::$4 ] : zp[1]:240 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:241 [ mode_twoplanebitmap::$5 ] : zp[1]:241 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:242 [ mode_twoplanebitmap::$8 ] : zp[1]:242 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:243 [ mode_sixsfred::$2 ] : zp[1]:243 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:244 [ mode_sixsfred::$3 ] : zp[1]:244 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:245 [ mode_sixsfred::$6 ] : zp[1]:245 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:246 [ mode_sixsfred::row#0 ] : zp[1]:246 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:247 [ mode_8bpppixelcell::$2 ] : zp[1]:247 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:248 [ mode_8bpppixelcell::$3 ] : zp[1]:248 , reg byte x , reg byte y , 
Potential registers zp[1]:249 [ mode_8bpppixelcell::$4 ] : zp[1]:249 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:250 [ mode_8bpppixelcell::$5 ] : zp[1]:250 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:251 [ mode_8bpppixelcell::$8 ] : zp[1]:251 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:252 [ mode_8bppchunkybmm::$7 ] : zp[2]:252 , 
Potential registers zp[1]:254 [ mode_8bppchunkybmm::c#0 ] : zp[1]:254 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:255 [ keyboard_matrix_read::return#0 ] : zp[1]:255 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:256 [ keyboard_key_pressed::return#14 ] : zp[1]:256 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:257 [ mode_ctrl::$1 ] : zp[1]:257 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:258 [ keyboard_key_pressed::return#15 ] : zp[1]:258 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:259 [ mode_ctrl::$4 ] : zp[1]:259 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:260 [ keyboard_key_pressed::return#16 ] : zp[1]:260 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:261 [ mode_ctrl::$8 ] : zp[1]:261 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:262 [ keyboard_key_pressed::return#17 ] : zp[1]:262 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:263 [ mode_ctrl::$12 ] : zp[1]:263 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:264 [ keyboard_key_pressed::return#18 ] : zp[1]:264 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:265 [ mode_ctrl::$16 ] : zp[1]:265 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:266 [ keyboard_key_pressed::return#19 ] : zp[1]:266 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:267 [ mode_ctrl::$20 ] : zp[1]:267 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:268 [ keyboard_key_pressed::return#20 ] : zp[1]:268 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:269 [ mode_ctrl::$24 ] : zp[1]:269 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:270 [ keyboard_key_pressed::return#21 ] : zp[1]:270 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:271 [ mode_ctrl::$28 ] : zp[1]:271 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:272 [ bitmap_init::$0 ] : zp[1]:272 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:273 [ bitmap_init::$10 ] : zp[1]:273 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:274 [ bitmap_init::$7 ] : zp[1]:274 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:275 [ bitmap_init::$8 ] : zp[1]:275 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:276 [ bitmap_init::$9 ] : zp[1]:276 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:277 [ bitmap_clear::bitmap#0 ] : zp[2]:277 , 
Potential registers zp[1]:279 [ bitmap_line::xd#2 ] : zp[1]:279 , reg byte x , reg byte y , 
Potential registers zp[1]:280 [ bitmap_line::yd#2 ] : zp[1]:280 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:281 [ bitmap_line::yd#1 ] : zp[1]:281 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:282 [ bitmap_line::xd#1 ] : zp[1]:282 , reg byte x , reg byte y , 
Potential registers zp[1]:283 [ bitmap_line::yd#10 ] : zp[1]:283 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:284 [ bitmap_line::yd#11 ] : zp[1]:284 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:285 [ bitmap_line_ydxi::$6 ] : zp[1]:285 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:286 [ bitmap_line_xdyi::$6 ] : zp[1]:286 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:287 [ bitmap_line_ydxd::$6 ] : zp[1]:287 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:288 [ bitmap_line_xdyd::$6 ] : zp[1]:288 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:289 [ bitmap_plot::plotter_x#0 ] : zp[2]:289 , 
Potential registers zp[2]:291 [ bitmap_plot::plotter_y#0 ] : zp[2]:291 , 
Potential registers zp[2]:293 [ bitmap_plot::plotter#0 ] : zp[2]:293 , 
Potential registers zp[1]:295 [ bitmap_plot::$1 ] : zp[1]:295 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [bitmap_plot] 200,000,000,011: zp[1]:160 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] 200,000,000,002: zp[2]:291 [ bitmap_plot::plotter_y#0 ] 200,000,000,002: zp[1]:295 [ bitmap_plot::$1 ] 125,000,000,005.75: zp[1]:159 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] 100,000,000,001: zp[2]:289 [ bitmap_plot::plotter_x#0 ] 50,000,000,000.5: zp[2]:293 [ bitmap_plot::plotter#0 ] 
Uplift Scope [bitmap_line_xdyi] 47,355,333,340.27: zp[1]:146 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 25,722,714,290.93: zp[1]:145 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] 20,000,000,002: zp[1]:286 [ bitmap_line_xdyi::$6 ] 11,259,300,003.67: zp[1]:144 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] 1,430,714,288: zp[1]:142 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] 719,142,861.43: zp[1]:141 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] 715,761,906.31: zp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Uplift Scope [bitmap_line_xdyd] 47,355,333,340.27: zp[1]:158 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 25,722,714,290.93: zp[1]:157 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] 20,000,000,002: zp[1]:288 [ bitmap_line_xdyd::$6 ] 11,259,300,003.67: zp[1]:156 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] 1,430,714,288: zp[1]:154 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] 719,142,861.43: zp[1]:153 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] 715,761,906.31: zp[1]:155 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Uplift Scope [bitmap_line_ydxi] 47,355,333,340.27: zp[1]:140 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 25,722,714,290.93: zp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] 20,000,000,002: zp[1]:285 [ bitmap_line_ydxi::$6 ] 11,259,300,003.67: zp[1]:139 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] 1,430,714,288: zp[1]:136 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] 719,142,861.43: zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] 715,761,906.31: zp[1]:137 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Uplift Scope [bitmap_line_ydxd] 47,355,333,340.27: zp[1]:152 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 25,722,714,290.93: zp[1]:150 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] 20,000,000,002: zp[1]:287 [ bitmap_line_ydxd::$6 ] 11,259,300,003.67: zp[1]:151 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 1,430,714,288: zp[1]:148 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 719,142,861.43: zp[1]:147 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 715,761,906.31: zp[1]:149 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Uplift Scope [] 2,601,131,670.83: zp[2]:121 [ print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 ] 150,935,719.36: zp[2]:7 [ print_char_cursor#37 print_char_cursor#2 print_char_cursor#103 print_char_cursor#38 print_char_cursor#26 ] 1,480,786.1: zp[1]:123 [ dtv_control#116 dtv_control#146 dtv_control#16 ] 
Uplift Scope [keyboard_matrix_read] 1,100,000,002: zp[1]:189 [ keyboard_matrix_read::rowid#0 ] 366,666,667.33: zp[1]:255 [ keyboard_matrix_read::return#0 ] 200,000,002: zp[1]:190 [ keyboard_matrix_read::return#2 ] 
Uplift Scope [keyboard_key_pressed] 200,000,002: zp[1]:188 [ keyboard_key_pressed::rowidx#0 ] 200,000,002: zp[1]:191 [ keyboard_key_pressed::$2 ] 100,000,001: zp[1]:9 [ keyboard_key_pressed::key#20 ] 33,333,333.67: zp[1]:187 [ keyboard_key_pressed::colidx#0 ] 20,000,002: zp[1]:256 [ keyboard_key_pressed::return#14 ] 20,000,002: zp[1]:258 [ keyboard_key_pressed::return#15 ] 20,000,002: zp[1]:260 [ keyboard_key_pressed::return#16 ] 20,000,002: zp[1]:262 [ keyboard_key_pressed::return#17 ] 20,000,002: zp[1]:264 [ keyboard_key_pressed::return#18 ] 20,000,002: zp[1]:266 [ keyboard_key_pressed::return#19 ] 20,000,002: zp[1]:268 [ keyboard_key_pressed::return#20 ] 20,000,002: zp[1]:270 [ keyboard_key_pressed::return#21 ] 8,187,273.68: zp[1]:192 [ keyboard_key_pressed::return#0 ] 20,002: zp[1]:161 [ keyboard_key_pressed::return#2 ] 20,002: zp[1]:163 [ keyboard_key_pressed::return#24 ] 20,002: zp[1]:165 [ keyboard_key_pressed::return#25 ] 20,002: zp[1]:167 [ keyboard_key_pressed::return#26 ] 20,002: zp[1]:169 [ keyboard_key_pressed::return#27 ] 20,002: zp[1]:171 [ keyboard_key_pressed::return#28 ] 20,002: zp[1]:173 [ keyboard_key_pressed::return#29 ] 20,002: zp[1]:175 [ keyboard_key_pressed::return#30 ] 20,002: zp[1]:177 [ keyboard_key_pressed::return#10 ] 20,002: zp[1]:179 [ keyboard_key_pressed::return#11 ] 20,002: zp[1]:181 [ keyboard_key_pressed::return#12 ] 20,002: zp[1]:183 [ keyboard_key_pressed::return#13 ] 
Uplift Scope [mode_ctrl] 176,750,018.35: zp[1]:124 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ] 20,000,002: zp[1]:257 [ mode_ctrl::$1 ] 20,000,002: zp[1]:259 [ mode_ctrl::$4 ] 20,000,002: zp[1]:261 [ mode_ctrl::$8 ] 20,000,002: zp[1]:263 [ mode_ctrl::$12 ] 20,000,002: zp[1]:265 [ mode_ctrl::$16 ] 20,000,002: zp[1]:267 [ mode_ctrl::$20 ] 20,000,002: zp[1]:269 [ mode_ctrl::$24 ] 20,000,002: zp[1]:271 [ mode_ctrl::$28 ] 
Uplift Scope [mode_8bpppixelcell] 40,000,004: zp[1]:111 [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ] 20,000,002: zp[1]:251 [ mode_8bpppixelcell::$8 ] 17,222,223.94: zp[1]:110 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ] 10,428,573.5: zp[1]:106 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ] 8,411,115.22: zp[2]:107 [ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ] 7,789,289.79: zp[1]:109 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] 2,000,002: zp[1]:247 [ mode_8bpppixelcell::$2 ] 2,000,002: zp[1]:249 [ mode_8bpppixelcell::$4 ] 2,000,002: zp[1]:250 [ mode_8bpppixelcell::$5 ] 1,928,573.36: zp[1]:99 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ] 1,881,254.19: zp[2]:103 [ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ] 1,642,858.79: zp[1]:105 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ] 1,136,669.93: zp[2]:100 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ] 1,000,001: zp[1]:248 [ mode_8bpppixelcell::$3 ] 350,003.5: zp[1]:97 [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ] 270,001.8: zp[1]:98 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ] 161,766.32: zp[1]:102 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ] 
Uplift Scope [bitmap_clear] 21,730,007.6: zp[2]:131 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] 21,666,668.83: zp[1]:133 [ bitmap_clear::x#2 bitmap_clear::x#1 ] 1,833,335.17: zp[1]:130 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 10,001: zp[2]:277 [ bitmap_clear::bitmap#0 ] 
Uplift Scope [mode_twoplanebitmap] 5,840,008: zp[2]:77 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] 2,170,004.6: zp[2]:81 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] 2,166,668.83: zp[1]:83 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ] 2,000,002: zp[1]:238 [ mode_twoplanebitmap::$2 ] 2,000,002: zp[1]:240 [ mode_twoplanebitmap::$4 ] 2,000,002: zp[1]:241 [ mode_twoplanebitmap::$5 ] 2,000,002: zp[1]:242 [ mode_twoplanebitmap::$8 ] 1,928,573.36: zp[1]:73 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ] 1,750,001.75: zp[1]:79 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ] 1,136,669.93: zp[2]:74 [ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ] 1,000,001: zp[1]:239 [ mode_twoplanebitmap::$3 ] 350,003.5: zp[1]:71 [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ] 270,001.8: zp[1]:72 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ] 259,092.68: zp[1]:76 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ] 183,335.17: zp[1]:80 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] 
Uplift Scope [mode_sixsfred2] 2,170,004.6: zp[2]:68 [ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] 2,166,668.83: zp[1]:70 [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ] 2,000,002: zp[1]:232 [ mode_sixsfred2::$2 ] 2,000,002: zp[1]:234 [ mode_sixsfred2::$4 ] 2,000,002: zp[1]:235 [ mode_sixsfred2::$5 ] 2,000,002: zp[1]:236 [ mode_sixsfred2::$8 ] 2,000,002: zp[1]:237 [ mode_sixsfred2::row#0 ] 1,928,573.36: zp[1]:60 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ] 1,900,001.9: zp[1]:66 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ] 1,395,003.6: zp[2]:64 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ] 1,136,669.93: zp[2]:61 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ] 1,000,001: zp[1]:233 [ mode_sixsfred2::$3 ] 350,003.5: zp[1]:58 [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ] 300,001.88: zp[1]:63 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] 270,001.8: zp[1]:59 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] 183,335.17: zp[1]:67 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] 
Uplift Scope [mode_sixsfred] 2,170,004.6: zp[2]:94 [ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ] 2,166,668.83: zp[1]:96 [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ] 2,100,002.1: zp[1]:86 [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ] 2,000,002: zp[1]:243 [ mode_sixsfred::$2 ] 2,000,002: zp[1]:244 [ mode_sixsfred::$3 ] 2,000,002: zp[1]:245 [ mode_sixsfred::$6 ] 2,000,002: zp[1]:246 [ mode_sixsfred::row#0 ] 1,900,001.9: zp[1]:92 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ] 1,395,003.6: zp[2]:87 [ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ] 1,395,003.6: zp[2]:90 [ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ] 350,003.5: zp[1]:84 [ mode_sixsfred::i#2 mode_sixsfred::i#1 ] 300,001.88: zp[1]:85 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] 300,001.88: zp[1]:89 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] 183,335.17: zp[1]:93 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ] 
Uplift Scope [bitmap_init] 3,625,003.62: zp[2]:128 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 2,266,668.93: zp[1]:126 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 2,166,668.83: zp[1]:125 [ bitmap_init::x#2 bitmap_init::x#1 ] 2,000,002: zp[1]:127 [ bitmap_init::y#2 bitmap_init::y#1 ] 2,000,002: zp[1]:272 [ bitmap_init::$0 ] 2,000,002: zp[1]:274 [ bitmap_init::$7 ] 2,000,002: zp[1]:275 [ bitmap_init::$8 ] 2,000,002: zp[1]:276 [ bitmap_init::$9 ] 500,000.5: zp[1]:273 [ bitmap_init::$10 ] 
Uplift Scope [mode_stdchar] 2,000,002: zp[1]:193 [ mode_stdchar::$2 ] 2,000,002: zp[1]:194 [ mode_stdchar::$3 ] 2,000,002: zp[1]:195 [ mode_stdchar::$4 ] 2,000,002: zp[1]:197 [ mode_stdchar::$6 ] 2,000,002: zp[1]:198 [ mode_stdchar::$7 ] 1,863,638.23: zp[1]:12 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ] 1,165,912.36: zp[2]:13 [ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ] 1,000,001: zp[1]:196 [ mode_stdchar::$5 ] 930,003: zp[2]:15 [ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ] 350,003.5: zp[1]:10 [ mode_stdchar::i#2 mode_stdchar::i#1 ] 307,144.64: zp[1]:11 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ] 
Uplift Scope [mode_ecmchar] 2,000,002: zp[1]:199 [ mode_ecmchar::$2 ] 2,000,002: zp[1]:200 [ mode_ecmchar::$3 ] 2,000,002: zp[1]:201 [ mode_ecmchar::$4 ] 2,000,002: zp[1]:203 [ mode_ecmchar::$6 ] 2,000,002: zp[1]:204 [ mode_ecmchar::$7 ] 1,863,638.23: zp[1]:19 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ] 1,165,912.36: zp[2]:20 [ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ] 1,000,001: zp[1]:202 [ mode_ecmchar::$5 ] 930,003: zp[2]:22 [ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ] 350,003.5: zp[1]:17 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ] 307,144.64: zp[1]:18 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ] 
Uplift Scope [mode_mcchar] 2,000,002: zp[1]:205 [ mode_mcchar::$2 ] 2,000,002: zp[1]:206 [ mode_mcchar::$3 ] 2,000,002: zp[1]:207 [ mode_mcchar::$4 ] 2,000,002: zp[1]:209 [ mode_mcchar::$6 ] 2,000,002: zp[1]:210 [ mode_mcchar::$7 ] 1,863,638.23: zp[1]:26 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ] 1,165,912.36: zp[2]:27 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ] 1,000,001: zp[1]:208 [ mode_mcchar::$5 ] 930,003: zp[2]:29 [ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ] 350,003.5: zp[1]:24 [ mode_mcchar::i#2 mode_mcchar::i#1 ] 307,144.64: zp[1]:25 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ] 
Uplift Scope [dtvSetCpuBankSegment1] 13,000,004: zp[1]:134 [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ] 
Uplift Scope [mode_stdbitmap] 2,000,002: zp[1]:211 [ mode_stdbitmap::$4 ] 2,000,002: zp[1]:214 [ mode_stdbitmap::$7 ] 2,000,002: zp[1]:215 [ mode_stdbitmap::$8 ] 1,875,001.88: zp[1]:33 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ] 1,500,001.5: zp[1]:212 [ mode_stdbitmap::col#0 ] 1,062,860.31: zp[2]:34 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ] 1,000,001: zp[1]:213 [ mode_stdbitmap::col2#0 ] 350,003.5: zp[1]:31 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ] 300,003: zp[1]:36 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] 259,092.68: zp[1]:32 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ] 
Uplift Scope [mode_8bppchunkybmm] 3,569,450.14: zp[1]:116 [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ] 2,920,005.35: zp[2]:117 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ] 2,000,002: zp[1]:254 [ mode_8bppchunkybmm::c#0 ] 1,800,001.8: zp[2]:114 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ] 1,000,001: zp[2]:252 [ mode_8bppchunkybmm::$7 ] 350,003.5: zp[1]:112 [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ] 242,309.42: zp[1]:113 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ] 
Uplift Scope [print_char] 11,000,002: zp[1]:186 [ print_char::ch#0 ] 
Uplift Scope [mode_hicolstdchar] 2,000,002: zp[1]:220 [ mode_hicolstdchar::$2 ] 2,000,002: zp[1]:222 [ mode_hicolstdchar::$4 ] 1,833,335.17: zp[1]:39 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ] 1,016,669.76: zp[2]:40 [ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ] 1,007,503.1: zp[2]:42 [ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ] 1,000,001: zp[1]:221 [ mode_hicolstdchar::$3 ] 1,000,001: zp[1]:223 [ mode_hicolstdchar::v#0 ] 350,003.5: zp[1]:37 [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ] 250,001.75: zp[1]:38 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ] 
Uplift Scope [mode_hicolecmchar] 2,000,002: zp[1]:224 [ mode_hicolecmchar::$2 ] 2,000,002: zp[1]:226 [ mode_hicolecmchar::$4 ] 1,833,335.17: zp[1]:46 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ] 1,016,669.76: zp[2]:47 [ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ] 1,007,503.1: zp[2]:49 [ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ] 1,000,001: zp[1]:225 [ mode_hicolecmchar::$3 ] 1,000,001: zp[1]:227 [ mode_hicolecmchar::v#0 ] 350,003.5: zp[1]:44 [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ] 250,001.75: zp[1]:45 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] 
Uplift Scope [mode_hicolmcchar] 2,000,002: zp[1]:228 [ mode_hicolmcchar::$2 ] 2,000,002: zp[1]:230 [ mode_hicolmcchar::$4 ] 1,833,335.17: zp[1]:53 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ] 1,016,669.76: zp[2]:54 [ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ] 1,007,503.1: zp[2]:56 [ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ] 1,000,001: zp[1]:229 [ mode_hicolmcchar::$3 ] 1,000,001: zp[1]:231 [ mode_hicolmcchar::v#0 ] 350,003.5: zp[1]:51 [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ] 250,001.75: zp[1]:52 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ] 
Uplift Scope [bitmap_line] 605,000.65: zp[1]:219 [ bitmap_line::y1#0 ] 576,191.1: zp[1]:218 [ bitmap_line::y0#0 ] 444,444.89: zp[1]:280 [ bitmap_line::yd#2 ] 444,444.89: zp[1]:281 [ bitmap_line::yd#1 ] 444,444.89: zp[1]:283 [ bitmap_line::yd#10 ] 444,444.89: zp[1]:284 [ bitmap_line::yd#11 ] 413,636.82: zp[1]:217 [ bitmap_line::x1#0 ] 395,652.61: zp[1]:216 [ bitmap_line::x0#0 ] 350,000.35: zp[1]:279 [ bitmap_line::xd#2 ] 350,000.35: zp[1]:282 [ bitmap_line::xd#1 ] 
Uplift Scope [memset] 3,333,336.67: zp[2]:119 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [print_str_lines] 1,933,337.17: zp[2]:5 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] 666,667.33: zp[1]:185 [ print_str_lines::ch#0 ] 
Uplift Scope [menu] 35,003.5: zp[1]:2 [ menu::i#2 menu::i#1 ] 33,336.67: zp[2]:3 [ menu::c#2 menu::c#1 ] 20,002: zp[1]:162 [ menu::$5 ] 20,002: zp[1]:164 [ menu::$9 ] 20,002: zp[1]:166 [ menu::$13 ] 20,002: zp[1]:168 [ menu::$17 ] 20,002: zp[1]:170 [ menu::$21 ] 20,002: zp[1]:172 [ menu::$25 ] 20,002: zp[1]:174 [ menu::$29 ] 20,002: zp[1]:176 [ menu::$33 ] 20,002: zp[1]:178 [ menu::$37 ] 20,002: zp[1]:180 [ menu::$41 ] 20,002: zp[1]:182 [ menu::$45 ] 20,002: zp[1]:184 [ menu::$49 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [main] 

Uplifting [bitmap_plot] best 3756189 combination reg byte x [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] zp[2]:291 [ bitmap_plot::plotter_y#0 ] reg byte a [ bitmap_plot::$1 ] zp[1]:159 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] zp[2]:289 [ bitmap_plot::plotter_x#0 ] zp[2]:293 [ bitmap_plot::plotter#0 ] 
Limited combination testing to 10 combinations of 36 possible.
Uplifting [bitmap_line_xdyi] best 3746183 combination zp[1]:146 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] reg byte x [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] reg byte a [ bitmap_line_xdyi::$6 ] zp[1]:144 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] zp[1]:142 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] zp[1]:141 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] zp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_xdyd] best 3736177 combination zp[1]:158 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] reg byte x [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] reg byte a [ bitmap_line_xdyd::$6 ] zp[1]:156 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] zp[1]:154 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] zp[1]:153 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] zp[1]:155 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_ydxi] best 3730177 combination zp[1]:140 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] zp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] reg byte x [ bitmap_line_ydxi::$6 ] zp[1]:139 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] zp[1]:136 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] zp[1]:137 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_ydxd] best 3724177 combination zp[1]:152 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] zp[1]:150 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] reg byte x [ bitmap_line_ydxd::$6 ] zp[1]:151 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] zp[1]:148 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] zp[1]:147 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] zp[1]:149 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [] best 3717841 combination zp[2]:121 [ print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 ] zp[2]:7 [ print_char_cursor#37 print_char_cursor#2 print_char_cursor#103 print_char_cursor#38 print_char_cursor#26 ] reg byte x [ dtv_control#116 dtv_control#146 dtv_control#16 ] 
Uplifting [keyboard_matrix_read] best 3717829 combination reg byte y [ keyboard_matrix_read::rowid#0 ] reg byte a [ keyboard_matrix_read::return#0 ] zp[1]:190 [ keyboard_matrix_read::return#2 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [mode_ctrl] best 3711829 combination zp[1]:124 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ] reg byte a [ mode_ctrl::$1 ] zp[1]:259 [ mode_ctrl::$4 ] zp[1]:261 [ mode_ctrl::$8 ] zp[1]:263 [ mode_ctrl::$12 ] zp[1]:265 [ mode_ctrl::$16 ] zp[1]:267 [ mode_ctrl::$20 ] zp[1]:269 [ mode_ctrl::$24 ] zp[1]:271 [ mode_ctrl::$28 ] 
Limited combination testing to 10 combinations of 196608 possible.
Uplifting [mode_8bpppixelcell] best 3561829 combination reg byte a [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ] reg byte a [ mode_8bpppixelcell::$8 ] zp[1]:110 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ] zp[1]:106 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ] zp[2]:107 [ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ] zp[1]:109 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] zp[1]:247 [ mode_8bpppixelcell::$2 ] zp[1]:249 [ mode_8bpppixelcell::$4 ] zp[1]:250 [ mode_8bpppixelcell::$5 ] zp[1]:99 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ] zp[2]:103 [ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ] zp[1]:105 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ] zp[2]:100 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ] zp[1]:248 [ mode_8bpppixelcell::$3 ] zp[1]:97 [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ] zp[1]:98 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ] zp[1]:102 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ] 
Limited combination testing to 10 combinations of 3538944 possible.
Uplifting [bitmap_clear] best 3552829 combination zp[2]:131 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ] zp[1]:130 [ bitmap_clear::y#4 bitmap_clear::y#1 ] zp[2]:277 [ bitmap_clear::bitmap#0 ] 
Uplifting [mode_twoplanebitmap] best 3537829 combination zp[2]:77 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] zp[2]:81 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] reg byte x [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ] reg byte a [ mode_twoplanebitmap::$2 ] zp[1]:240 [ mode_twoplanebitmap::$4 ] zp[1]:241 [ mode_twoplanebitmap::$5 ] zp[1]:242 [ mode_twoplanebitmap::$8 ] zp[1]:73 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ] zp[1]:79 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ] zp[2]:74 [ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ] zp[1]:239 [ mode_twoplanebitmap::$3 ] zp[1]:71 [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ] zp[1]:72 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ] zp[1]:76 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ] zp[1]:80 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] 
Limited combination testing to 10 combinations of 196608 possible.
Uplifting [mode_sixsfred2] best 3522829 combination zp[2]:68 [ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] reg byte x [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ] reg byte a [ mode_sixsfred2::$2 ] zp[1]:234 [ mode_sixsfred2::$4 ] zp[1]:235 [ mode_sixsfred2::$5 ] zp[1]:236 [ mode_sixsfred2::$8 ] zp[1]:237 [ mode_sixsfred2::row#0 ] zp[1]:60 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ] zp[1]:66 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ] zp[2]:64 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ] zp[2]:61 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ] zp[1]:233 [ mode_sixsfred2::$3 ] zp[1]:58 [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ] zp[1]:63 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] zp[1]:59 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] zp[1]:67 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] 
Limited combination testing to 10 combinations of 786432 possible.
Uplifting [mode_sixsfred] best 3497829 combination zp[2]:94 [ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ] reg byte x [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ] reg byte x [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ] reg byte a [ mode_sixsfred::$2 ] zp[1]:244 [ mode_sixsfred::$3 ] zp[1]:245 [ mode_sixsfred::$6 ] zp[1]:246 [ mode_sixsfred::row#0 ] zp[1]:92 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ] zp[2]:87 [ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ] zp[2]:90 [ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ] zp[1]:84 [ mode_sixsfred::i#2 mode_sixsfred::i#1 ] zp[1]:85 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] zp[1]:89 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] zp[1]:93 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ] 
Limited combination testing to 10 combinations of 65536 possible.
Uplifting [bitmap_init] best 3494829 combination zp[2]:128 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] zp[1]:127 [ bitmap_init::y#2 bitmap_init::y#1 ] zp[1]:272 [ bitmap_init::$0 ] zp[1]:274 [ bitmap_init::$7 ] zp[1]:275 [ bitmap_init::$8 ] zp[1]:276 [ bitmap_init::$9 ] zp[1]:273 [ bitmap_init::$10 ] 
Limited combination testing to 10 combinations of 34560 possible.
Uplifting [mode_stdchar] best 3482829 combination reg byte a [ mode_stdchar::$2 ] reg byte a [ mode_stdchar::$3 ] zp[1]:195 [ mode_stdchar::$4 ] zp[1]:197 [ mode_stdchar::$6 ] zp[1]:198 [ mode_stdchar::$7 ] zp[1]:12 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ] zp[2]:13 [ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ] zp[1]:196 [ mode_stdchar::$5 ] zp[2]:15 [ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ] zp[1]:10 [ mode_stdchar::i#2 mode_stdchar::i#1 ] zp[1]:11 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ] 
Limited combination testing to 10 combinations of 36864 possible.
Uplifting [mode_ecmchar] best 3470829 combination reg byte a [ mode_ecmchar::$2 ] reg byte a [ mode_ecmchar::$3 ] zp[1]:201 [ mode_ecmchar::$4 ] zp[1]:203 [ mode_ecmchar::$6 ] zp[1]:204 [ mode_ecmchar::$7 ] zp[1]:19 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ] zp[2]:20 [ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ] zp[1]:202 [ mode_ecmchar::$5 ] zp[2]:22 [ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ] zp[1]:17 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ] zp[1]:18 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ] 
Limited combination testing to 10 combinations of 36864 possible.
Uplifting [mode_mcchar] best 3458829 combination reg byte a [ mode_mcchar::$2 ] reg byte a [ mode_mcchar::$3 ] zp[1]:207 [ mode_mcchar::$4 ] zp[1]:209 [ mode_mcchar::$6 ] zp[1]:210 [ mode_mcchar::$7 ] zp[1]:26 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ] zp[2]:27 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ] zp[1]:208 [ mode_mcchar::$5 ] zp[2]:29 [ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ] zp[1]:24 [ mode_mcchar::i#2 mode_mcchar::i#1 ] zp[1]:25 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ] 
Limited combination testing to 10 combinations of 36864 possible.
Uplifting [dtvSetCpuBankSegment1] best 3455820 combination reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ] 
Uplifting [mode_stdbitmap] best 3443820 combination reg byte a [ mode_stdbitmap::$4 ] reg byte a [ mode_stdbitmap::$7 ] zp[1]:215 [ mode_stdbitmap::$8 ] zp[1]:33 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ] zp[1]:212 [ mode_stdbitmap::col#0 ] zp[2]:34 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ] zp[1]:213 [ mode_stdbitmap::col2#0 ] zp[1]:31 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ] zp[1]:36 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] zp[1]:32 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ] 
Limited combination testing to 10 combinations of 13824 possible.
Uplifting [mode_8bppchunkybmm] best 3433520 combination reg byte x [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ] zp[2]:117 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ] reg byte a [ mode_8bppchunkybmm::c#0 ] zp[2]:114 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ] zp[2]:252 [ mode_8bppchunkybmm::$7 ] zp[1]:112 [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ] zp[1]:113 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [print_char] best 3430517 combination reg byte a [ print_char::ch#0 ] 
Uplifting [mode_hicolstdchar] best 3418517 combination reg byte a [ mode_hicolstdchar::$2 ] reg byte a [ mode_hicolstdchar::$4 ] zp[1]:39 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ] zp[2]:40 [ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ] zp[2]:42 [ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ] zp[1]:221 [ mode_hicolstdchar::$3 ] zp[1]:223 [ mode_hicolstdchar::v#0 ] zp[1]:37 [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ] zp[1]:38 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ] 
Limited combination testing to 10 combinations of 2304 possible.
Uplifting [mode_hicolecmchar] best 3406517 combination reg byte a [ mode_hicolecmchar::$2 ] reg byte a [ mode_hicolecmchar::$4 ] zp[1]:46 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ] zp[2]:47 [ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ] zp[2]:49 [ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ] zp[1]:225 [ mode_hicolecmchar::$3 ] zp[1]:227 [ mode_hicolecmchar::v#0 ] zp[1]:44 [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ] zp[1]:45 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] 
Limited combination testing to 10 combinations of 2304 possible.
Uplifting [mode_hicolmcchar] best 3394517 combination reg byte a [ mode_hicolmcchar::$2 ] reg byte a [ mode_hicolmcchar::$4 ] zp[1]:53 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ] zp[2]:54 [ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ] zp[2]:56 [ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ] zp[1]:229 [ mode_hicolmcchar::$3 ] zp[1]:231 [ mode_hicolmcchar::v#0 ] zp[1]:51 [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ] zp[1]:52 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ] 
Limited combination testing to 10 combinations of 2304 possible.
Uplifting [bitmap_line] best 3394193 combination zp[1]:219 [ bitmap_line::y1#0 ] reg byte x [ bitmap_line::y0#0 ] zp[1]:280 [ bitmap_line::yd#2 ] zp[1]:281 [ bitmap_line::yd#1 ] zp[1]:283 [ bitmap_line::yd#10 ] zp[1]:284 [ bitmap_line::yd#11 ] zp[1]:217 [ bitmap_line::x1#0 ] zp[1]:216 [ bitmap_line::x0#0 ] zp[1]:279 [ bitmap_line::xd#2 ] zp[1]:282 [ bitmap_line::xd#1 ] 
Limited combination testing to 10 combinations of 186624 possible.
Uplifting [memset] best 3394193 combination zp[2]:119 [ memset::dst#2 memset::dst#1 ] 
Uplifting [print_str_lines] best 3382193 combination zp[2]:5 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] reg byte a [ print_str_lines::ch#0 ] 
Uplifting [menu] best 3380393 combination reg byte x [ menu::i#2 menu::i#1 ] zp[2]:3 [ menu::c#2 menu::c#1 ] reg byte a [ menu::$5 ] zp[1]:164 [ menu::$9 ] zp[1]:166 [ menu::$13 ] zp[1]:168 [ menu::$17 ] zp[1]:170 [ menu::$21 ] zp[1]:172 [ menu::$25 ] zp[1]:174 [ menu::$29 ] zp[1]:176 [ menu::$33 ] zp[1]:178 [ menu::$37 ] zp[1]:180 [ menu::$41 ] zp[1]:182 [ menu::$45 ] zp[1]:184 [ menu::$49 ] 
Limited combination testing to 10 combinations of 50331648 possible.
Uplifting [MOS6526_CIA] best 3380393 combination 
Uplifting [MOS6569_VICII] best 3380393 combination 
Uplifting [MOS6581_SID] best 3380393 combination 
Uplifting [RADIX] best 3380393 combination 
Uplifting [print_ln] best 3380393 combination 
Uplifting [print_cls] best 3380393 combination 
Uplifting [main] best 3380393 combination 
Attempting to uplift remaining variables inzp[1]:159 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Uplifting [bitmap_plot] best 3368387 combination reg byte y [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] 
Attempting to uplift remaining variables inzp[1]:140 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Uplifting [bitmap_line_ydxi] best 3368387 combination zp[1]:140 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 
Attempting to uplift remaining variables inzp[1]:146 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Uplifting [bitmap_line_xdyi] best 3368387 combination zp[1]:146 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 
Attempting to uplift remaining variables inzp[1]:152 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Uplifting [bitmap_line_ydxd] best 3368387 combination zp[1]:152 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 
Attempting to uplift remaining variables inzp[1]:158 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Uplifting [bitmap_line_xdyd] best 3368387 combination zp[1]:158 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 
Attempting to uplift remaining variables inzp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Uplifting [bitmap_line_ydxi] best 3368387 combination zp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] 
Attempting to uplift remaining variables inzp[1]:150 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Uplifting [bitmap_line_ydxd] best 3368387 combination zp[1]:150 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] 
Attempting to uplift remaining variables inzp[1]:139 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Uplifting [bitmap_line_ydxi] best 3368387 combination zp[1]:139 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] 
Attempting to uplift remaining variables inzp[1]:144 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Uplifting [bitmap_line_xdyi] best 3368387 combination zp[1]:144 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] 
Attempting to uplift remaining variables inzp[1]:151 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Uplifting [bitmap_line_ydxd] best 3368387 combination zp[1]:151 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 
Attempting to uplift remaining variables inzp[1]:156 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Uplifting [bitmap_line_xdyd] best 3368387 combination zp[1]:156 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] 
Attempting to uplift remaining variables inzp[1]:136 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Uplifting [bitmap_line_ydxi] best 3368387 combination zp[1]:136 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] 
Attempting to uplift remaining variables inzp[1]:142 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Uplifting [bitmap_line_xdyi] best 3368387 combination zp[1]:142 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] 
Attempting to uplift remaining variables inzp[1]:148 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Uplifting [bitmap_line_ydxd] best 3368387 combination zp[1]:148 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 
Attempting to uplift remaining variables inzp[1]:154 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Uplifting [bitmap_line_xdyd] best 3368387 combination zp[1]:154 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] 
Attempting to uplift remaining variables inzp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Uplifting [bitmap_line_ydxi] best 3368387 combination zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] 
Attempting to uplift remaining variables inzp[1]:141 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Uplifting [bitmap_line_xdyi] best 3368387 combination zp[1]:141 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] 
Attempting to uplift remaining variables inzp[1]:147 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Uplifting [bitmap_line_ydxd] best 3368387 combination zp[1]:147 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 
Attempting to uplift remaining variables inzp[1]:153 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Uplifting [bitmap_line_xdyd] best 3368387 combination zp[1]:153 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] 
Attempting to uplift remaining variables inzp[1]:137 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Uplifting [bitmap_line_ydxi] best 3368387 combination zp[1]:137 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Attempting to uplift remaining variables inzp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Uplifting [bitmap_line_xdyi] best 3368387 combination zp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:149 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Uplifting [bitmap_line_ydxd] best 3368387 combination zp[1]:149 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Attempting to uplift remaining variables inzp[1]:155 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Uplifting [bitmap_line_xdyd] best 3368387 combination zp[1]:155 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:188 [ keyboard_key_pressed::rowidx#0 ]
Uplifting [keyboard_key_pressed] best 3368383 combination reg byte a [ keyboard_key_pressed::rowidx#0 ] 
Attempting to uplift remaining variables inzp[1]:190 [ keyboard_matrix_read::return#2 ]
Uplifting [keyboard_matrix_read] best 3368377 combination reg byte a [ keyboard_matrix_read::return#2 ] 
Attempting to uplift remaining variables inzp[1]:191 [ keyboard_key_pressed::$2 ]
Uplifting [keyboard_key_pressed] best 3368371 combination reg byte a [ keyboard_key_pressed::$2 ] 
Attempting to uplift remaining variables inzp[1]:124 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
Uplifting [mode_ctrl] best 3368371 combination zp[1]:124 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ] 
Attempting to uplift remaining variables inzp[1]:9 [ keyboard_key_pressed::key#20 ]
Uplifting [keyboard_key_pressed] best 3368309 combination reg byte y [ keyboard_key_pressed::key#20 ] 
Attempting to uplift remaining variables inzp[1]:187 [ keyboard_key_pressed::colidx#0 ]
Uplifting [keyboard_key_pressed] best 3368309 combination zp[1]:187 [ keyboard_key_pressed::colidx#0 ] 
Attempting to uplift remaining variables inzp[1]:256 [ keyboard_key_pressed::return#14 ]
Uplifting [keyboard_key_pressed] best 3362309 combination reg byte a [ keyboard_key_pressed::return#14 ] 
Attempting to uplift remaining variables inzp[1]:258 [ keyboard_key_pressed::return#15 ]
Uplifting [keyboard_key_pressed] best 3356309 combination reg byte a [ keyboard_key_pressed::return#15 ] 
Attempting to uplift remaining variables inzp[1]:259 [ mode_ctrl::$4 ]
Uplifting [mode_ctrl] best 3350309 combination reg byte a [ mode_ctrl::$4 ] 
Attempting to uplift remaining variables inzp[1]:260 [ keyboard_key_pressed::return#16 ]
Uplifting [keyboard_key_pressed] best 3344309 combination reg byte a [ keyboard_key_pressed::return#16 ] 
Attempting to uplift remaining variables inzp[1]:261 [ mode_ctrl::$8 ]
Uplifting [mode_ctrl] best 3338309 combination reg byte a [ mode_ctrl::$8 ] 
Attempting to uplift remaining variables inzp[1]:262 [ keyboard_key_pressed::return#17 ]
Uplifting [keyboard_key_pressed] best 3332309 combination reg byte a [ keyboard_key_pressed::return#17 ] 
Attempting to uplift remaining variables inzp[1]:263 [ mode_ctrl::$12 ]
Uplifting [mode_ctrl] best 3326309 combination reg byte a [ mode_ctrl::$12 ] 
Attempting to uplift remaining variables inzp[1]:264 [ keyboard_key_pressed::return#18 ]
Uplifting [keyboard_key_pressed] best 3320309 combination reg byte a [ keyboard_key_pressed::return#18 ] 
Attempting to uplift remaining variables inzp[1]:265 [ mode_ctrl::$16 ]
Uplifting [mode_ctrl] best 3314309 combination reg byte a [ mode_ctrl::$16 ] 
Attempting to uplift remaining variables inzp[1]:266 [ keyboard_key_pressed::return#19 ]
Uplifting [keyboard_key_pressed] best 3308309 combination reg byte a [ keyboard_key_pressed::return#19 ] 
Attempting to uplift remaining variables inzp[1]:267 [ mode_ctrl::$20 ]
Uplifting [mode_ctrl] best 3302309 combination reg byte a [ mode_ctrl::$20 ] 
Attempting to uplift remaining variables inzp[1]:268 [ keyboard_key_pressed::return#20 ]
Uplifting [keyboard_key_pressed] best 3296309 combination reg byte a [ keyboard_key_pressed::return#20 ] 
Attempting to uplift remaining variables inzp[1]:269 [ mode_ctrl::$24 ]
Uplifting [mode_ctrl] best 3290309 combination reg byte a [ mode_ctrl::$24 ] 
Attempting to uplift remaining variables inzp[1]:270 [ keyboard_key_pressed::return#21 ]
Uplifting [keyboard_key_pressed] best 3284309 combination reg byte a [ keyboard_key_pressed::return#21 ] 
Attempting to uplift remaining variables inzp[1]:271 [ mode_ctrl::$28 ]
Uplifting [mode_ctrl] best 3278309 combination reg byte a [ mode_ctrl::$28 ] 
Attempting to uplift remaining variables inzp[1]:110 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
Uplifting [mode_8bpppixelcell] best 3188309 combination reg byte x [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ] 
Attempting to uplift remaining variables inzp[1]:106 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ]
Uplifting [mode_8bpppixelcell] best 3188309 combination zp[1]:106 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ] 
Attempting to uplift remaining variables inzp[1]:192 [ keyboard_key_pressed::return#0 ]
Uplifting [keyboard_key_pressed] best 3160706 combination reg byte a [ keyboard_key_pressed::return#0 ] 
Attempting to uplift remaining variables inzp[1]:109 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
Uplifting [mode_8bpppixelcell] best 3160706 combination zp[1]:109 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] 
Attempting to uplift remaining variables inzp[1]:127 [ bitmap_init::y#2 bitmap_init::y#1 ]
Uplifting [bitmap_init] best 3158906 combination reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] 
Attempting to uplift remaining variables inzp[1]:195 [ mode_stdchar::$4 ]
Uplifting [mode_stdchar] best 3152906 combination reg byte a [ mode_stdchar::$4 ] 
Attempting to uplift remaining variables inzp[1]:197 [ mode_stdchar::$6 ]
Uplifting [mode_stdchar] best 3146906 combination reg byte a [ mode_stdchar::$6 ] 
Attempting to uplift remaining variables inzp[1]:198 [ mode_stdchar::$7 ]
Uplifting [mode_stdchar] best 3140906 combination reg byte a [ mode_stdchar::$7 ] 
Attempting to uplift remaining variables inzp[1]:201 [ mode_ecmchar::$4 ]
Uplifting [mode_ecmchar] best 3134906 combination reg byte a [ mode_ecmchar::$4 ] 
Attempting to uplift remaining variables inzp[1]:203 [ mode_ecmchar::$6 ]
Uplifting [mode_ecmchar] best 3128906 combination reg byte a [ mode_ecmchar::$6 ] 
Attempting to uplift remaining variables inzp[1]:204 [ mode_ecmchar::$7 ]
Uplifting [mode_ecmchar] best 3122906 combination reg byte a [ mode_ecmchar::$7 ] 
Attempting to uplift remaining variables inzp[1]:207 [ mode_mcchar::$4 ]
Uplifting [mode_mcchar] best 3116906 combination reg byte a [ mode_mcchar::$4 ] 
Attempting to uplift remaining variables inzp[1]:209 [ mode_mcchar::$6 ]
Uplifting [mode_mcchar] best 3110906 combination reg byte a [ mode_mcchar::$6 ] 
Attempting to uplift remaining variables inzp[1]:210 [ mode_mcchar::$7 ]
Uplifting [mode_mcchar] best 3104906 combination reg byte a [ mode_mcchar::$7 ] 
Attempting to uplift remaining variables inzp[1]:215 [ mode_stdbitmap::$8 ]
Uplifting [mode_stdbitmap] best 3098906 combination reg byte a [ mode_stdbitmap::$8 ] 
Attempting to uplift remaining variables inzp[1]:234 [ mode_sixsfred2::$4 ]
Uplifting [mode_sixsfred2] best 3092906 combination reg byte a [ mode_sixsfred2::$4 ] 
Attempting to uplift remaining variables inzp[1]:235 [ mode_sixsfred2::$5 ]
Uplifting [mode_sixsfred2] best 3086906 combination reg byte a [ mode_sixsfred2::$5 ] 
Attempting to uplift remaining variables inzp[1]:236 [ mode_sixsfred2::$8 ]
Uplifting [mode_sixsfred2] best 3080906 combination reg byte a [ mode_sixsfred2::$8 ] 
Attempting to uplift remaining variables inzp[1]:237 [ mode_sixsfred2::row#0 ]
Uplifting [mode_sixsfred2] best 3076906 combination reg byte a [ mode_sixsfred2::row#0 ] 
Attempting to uplift remaining variables inzp[1]:240 [ mode_twoplanebitmap::$4 ]
Uplifting [mode_twoplanebitmap] best 3070906 combination reg byte a [ mode_twoplanebitmap::$4 ] 
Attempting to uplift remaining variables inzp[1]:241 [ mode_twoplanebitmap::$5 ]
Uplifting [mode_twoplanebitmap] best 3064906 combination reg byte a [ mode_twoplanebitmap::$5 ] 
Attempting to uplift remaining variables inzp[1]:242 [ mode_twoplanebitmap::$8 ]
Uplifting [mode_twoplanebitmap] best 3058906 combination reg byte a [ mode_twoplanebitmap::$8 ] 
Attempting to uplift remaining variables inzp[1]:244 [ mode_sixsfred::$3 ]
Uplifting [mode_sixsfred] best 3052906 combination reg byte a [ mode_sixsfred::$3 ] 
Attempting to uplift remaining variables inzp[1]:245 [ mode_sixsfred::$6 ]
Uplifting [mode_sixsfred] best 3046906 combination reg byte a [ mode_sixsfred::$6 ] 
Attempting to uplift remaining variables inzp[1]:246 [ mode_sixsfred::row#0 ]
Uplifting [mode_sixsfred] best 3042906 combination reg byte a [ mode_sixsfred::row#0 ] 
Attempting to uplift remaining variables inzp[1]:247 [ mode_8bpppixelcell::$2 ]
Uplifting [mode_8bpppixelcell] best 3036906 combination reg byte a [ mode_8bpppixelcell::$2 ] 
Attempting to uplift remaining variables inzp[1]:249 [ mode_8bpppixelcell::$4 ]
Uplifting [mode_8bpppixelcell] best 3030906 combination reg byte a [ mode_8bpppixelcell::$4 ] 
Attempting to uplift remaining variables inzp[1]:250 [ mode_8bpppixelcell::$5 ]
Uplifting [mode_8bpppixelcell] best 3024906 combination reg byte a [ mode_8bpppixelcell::$5 ] 
Attempting to uplift remaining variables inzp[1]:272 [ bitmap_init::$0 ]
Uplifting [bitmap_init] best 3024506 combination reg byte a [ bitmap_init::$0 ] 
Attempting to uplift remaining variables inzp[1]:274 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 3023906 combination reg byte a [ bitmap_init::$7 ] 
Attempting to uplift remaining variables inzp[1]:275 [ bitmap_init::$8 ]
Uplifting [bitmap_init] best 3023306 combination reg byte a [ bitmap_init::$8 ] 
Attempting to uplift remaining variables inzp[1]:276 [ bitmap_init::$9 ]
Uplifting [bitmap_init] best 3022706 combination reg byte a [ bitmap_init::$9 ] 
Attempting to uplift remaining variables inzp[1]:60 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
Uplifting [mode_sixsfred2] best 3012706 combination reg byte x [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:73 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
Uplifting [mode_twoplanebitmap] best 3002706 combination reg byte x [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:99 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
Uplifting [mode_8bpppixelcell] best 2992706 combination reg byte x [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ] 
Attempting to uplift remaining variables inzp[1]:66 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
Uplifting [mode_sixsfred2] best 2983706 combination reg byte x [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ] 
Attempting to uplift remaining variables inzp[1]:92 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
Uplifting [mode_sixsfred] best 2974706 combination reg byte x [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ] 
Attempting to uplift remaining variables inzp[1]:33 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
Uplifting [mode_stdbitmap] best 2964706 combination reg byte x [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:12 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
Uplifting [mode_stdchar] best 2953706 combination reg byte x [ mode_stdchar::cx#2 mode_stdchar::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:19 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
Uplifting [mode_ecmchar] best 2942706 combination reg byte x [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:26 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
Uplifting [mode_mcchar] best 2931706 combination reg byte x [ mode_mcchar::cx#2 mode_mcchar::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:130 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Uplifting [bitmap_clear] best 2931706 combination zp[1]:130 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 
Attempting to uplift remaining variables inzp[1]:39 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
Uplifting [mode_hicolstdchar] best 2921706 combination reg byte x [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:46 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
Uplifting [mode_hicolecmchar] best 2911706 combination reg byte x [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:53 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
Uplifting [mode_hicolmcchar] best 2901706 combination reg byte x [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:79 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
Uplifting [mode_twoplanebitmap] best 2892706 combination reg byte x [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ] 
Attempting to uplift remaining variables inzp[1]:105 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
Uplifting [mode_8bpppixelcell] best 2892706 combination zp[1]:105 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ] 
Attempting to uplift remaining variables inzp[1]:212 [ mode_stdbitmap::col#0 ]
Uplifting [mode_stdbitmap] best 2891706 combination reg byte y [ mode_stdbitmap::col#0 ] 
Attempting to uplift remaining variables inzp[1]:196 [ mode_stdchar::$5 ]
Uplifting [mode_stdchar] best 2891706 combination zp[1]:196 [ mode_stdchar::$5 ] 
Attempting to uplift remaining variables inzp[1]:202 [ mode_ecmchar::$5 ]
Uplifting [mode_ecmchar] best 2891706 combination zp[1]:202 [ mode_ecmchar::$5 ] 
Attempting to uplift remaining variables inzp[1]:208 [ mode_mcchar::$5 ]
Uplifting [mode_mcchar] best 2891706 combination zp[1]:208 [ mode_mcchar::$5 ] 
Attempting to uplift remaining variables inzp[1]:213 [ mode_stdbitmap::col2#0 ]
Uplifting [mode_stdbitmap] best 2891706 combination zp[1]:213 [ mode_stdbitmap::col2#0 ] 
Attempting to uplift remaining variables inzp[1]:221 [ mode_hicolstdchar::$3 ]
Uplifting [mode_hicolstdchar] best 2891706 combination zp[1]:221 [ mode_hicolstdchar::$3 ] 
Attempting to uplift remaining variables inzp[1]:223 [ mode_hicolstdchar::v#0 ]
Uplifting [mode_hicolstdchar] best 2882706 combination reg byte a [ mode_hicolstdchar::v#0 ] 
Attempting to uplift remaining variables inzp[1]:225 [ mode_hicolecmchar::$3 ]
Uplifting [mode_hicolecmchar] best 2882706 combination zp[1]:225 [ mode_hicolecmchar::$3 ] 
Attempting to uplift remaining variables inzp[1]:227 [ mode_hicolecmchar::v#0 ]
Uplifting [mode_hicolecmchar] best 2873706 combination reg byte a [ mode_hicolecmchar::v#0 ] 
Attempting to uplift remaining variables inzp[1]:229 [ mode_hicolmcchar::$3 ]
Uplifting [mode_hicolmcchar] best 2873706 combination zp[1]:229 [ mode_hicolmcchar::$3 ] 
Attempting to uplift remaining variables inzp[1]:231 [ mode_hicolmcchar::v#0 ]
Uplifting [mode_hicolmcchar] best 2864706 combination reg byte a [ mode_hicolmcchar::v#0 ] 
Attempting to uplift remaining variables inzp[1]:233 [ mode_sixsfred2::$3 ]
Uplifting [mode_sixsfred2] best 2864706 combination zp[1]:233 [ mode_sixsfred2::$3 ] 
Attempting to uplift remaining variables inzp[1]:239 [ mode_twoplanebitmap::$3 ]
Uplifting [mode_twoplanebitmap] best 2864706 combination zp[1]:239 [ mode_twoplanebitmap::$3 ] 
Attempting to uplift remaining variables inzp[1]:248 [ mode_8bpppixelcell::$3 ]
Uplifting [mode_8bpppixelcell] best 2864706 combination zp[1]:248 [ mode_8bpppixelcell::$3 ] 
Attempting to uplift remaining variables inzp[1]:219 [ bitmap_line::y1#0 ]
Uplifting [bitmap_line] best 2864706 combination zp[1]:219 [ bitmap_line::y1#0 ] 
Attempting to uplift remaining variables inzp[1]:273 [ bitmap_init::$10 ]
Uplifting [bitmap_init] best 2864706 combination zp[1]:273 [ bitmap_init::$10 ] 
Attempting to uplift remaining variables inzp[1]:280 [ bitmap_line::yd#2 ]
Uplifting [bitmap_line] best 2864696 combination reg byte y [ bitmap_line::yd#2 ] 
Attempting to uplift remaining variables inzp[1]:281 [ bitmap_line::yd#1 ]
Uplifting [bitmap_line] best 2864686 combination reg byte y [ bitmap_line::yd#1 ] 
Attempting to uplift remaining variables inzp[1]:283 [ bitmap_line::yd#10 ]
Uplifting [bitmap_line] best 2864676 combination reg byte y [ bitmap_line::yd#10 ] 
Attempting to uplift remaining variables inzp[1]:284 [ bitmap_line::yd#11 ]
Uplifting [bitmap_line] best 2864666 combination reg byte y [ bitmap_line::yd#11 ] 
Attempting to uplift remaining variables inzp[1]:217 [ bitmap_line::x1#0 ]
Uplifting [bitmap_line] best 2864666 combination zp[1]:217 [ bitmap_line::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:216 [ bitmap_line::x0#0 ]
Uplifting [bitmap_line] best 2864666 combination zp[1]:216 [ bitmap_line::x0#0 ] 
Attempting to uplift remaining variables inzp[1]:10 [ mode_stdchar::i#2 mode_stdchar::i#1 ]
Uplifting [mode_stdchar] best 2863466 combination reg byte x [ mode_stdchar::i#2 mode_stdchar::i#1 ] 
Attempting to uplift remaining variables inzp[1]:17 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
Uplifting [mode_ecmchar] best 2862266 combination reg byte x [ mode_ecmchar::i#2 mode_ecmchar::i#1 ] 
Attempting to uplift remaining variables inzp[1]:24 [ mode_mcchar::i#2 mode_mcchar::i#1 ]
Uplifting [mode_mcchar] best 2861066 combination reg byte x [ mode_mcchar::i#2 mode_mcchar::i#1 ] 
Attempting to uplift remaining variables inzp[1]:31 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
Uplifting [mode_stdbitmap] best 2859866 combination reg byte x [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ] 
Attempting to uplift remaining variables inzp[1]:37 [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
Uplifting [mode_hicolstdchar] best 2858666 combination reg byte x [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ] 
Attempting to uplift remaining variables inzp[1]:44 [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
Uplifting [mode_hicolecmchar] best 2857466 combination reg byte x [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ] 
Attempting to uplift remaining variables inzp[1]:51 [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
Uplifting [mode_hicolmcchar] best 2856266 combination reg byte x [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ] 
Attempting to uplift remaining variables inzp[1]:58 [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
Uplifting [mode_sixsfred2] best 2855066 combination reg byte x [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ] 
Attempting to uplift remaining variables inzp[1]:71 [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
Uplifting [mode_twoplanebitmap] best 2853866 combination reg byte x [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ] 
Attempting to uplift remaining variables inzp[1]:84 [ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
Uplifting [mode_sixsfred] best 2852666 combination reg byte x [ mode_sixsfred::i#2 mode_sixsfred::i#1 ] 
Attempting to uplift remaining variables inzp[1]:97 [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
Uplifting [mode_8bpppixelcell] best 2851466 combination reg byte x [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ] 
Attempting to uplift remaining variables inzp[1]:112 [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
Uplifting [mode_8bppchunkybmm] best 2850266 combination reg byte x [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ] 
Attempting to uplift remaining variables inzp[1]:279 [ bitmap_line::xd#2 ]
Uplifting [bitmap_line] best 2850266 combination zp[1]:279 [ bitmap_line::xd#2 ] 
Attempting to uplift remaining variables inzp[1]:282 [ bitmap_line::xd#1 ]
Uplifting [bitmap_line] best 2850266 combination zp[1]:282 [ bitmap_line::xd#1 ] 
Attempting to uplift remaining variables inzp[1]:11 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
Uplifting [mode_stdchar] best 2850266 combination zp[1]:11 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:18 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
Uplifting [mode_ecmchar] best 2850266 combination zp[1]:18 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:25 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
Uplifting [mode_mcchar] best 2850266 combination zp[1]:25 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:36 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
Uplifting [mode_stdbitmap] best 2850266 combination zp[1]:36 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] 
Attempting to uplift remaining variables inzp[1]:63 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
Uplifting [mode_sixsfred2] best 2850266 combination zp[1]:63 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] 
Attempting to uplift remaining variables inzp[1]:85 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
Uplifting [mode_sixsfred] best 2850266 combination zp[1]:85 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:89 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
Uplifting [mode_sixsfred] best 2850266 combination zp[1]:89 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] 
Attempting to uplift remaining variables inzp[1]:59 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
Uplifting [mode_sixsfred2] best 2850266 combination zp[1]:59 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:72 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
Uplifting [mode_twoplanebitmap] best 2850266 combination zp[1]:72 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:98 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
Uplifting [mode_8bpppixelcell] best 2850266 combination zp[1]:98 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ] 
Attempting to uplift remaining variables inzp[1]:32 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
Uplifting [mode_stdbitmap] best 2850266 combination zp[1]:32 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:76 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ]
Uplifting [mode_twoplanebitmap] best 2850266 combination zp[1]:76 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ] 
Attempting to uplift remaining variables inzp[1]:38 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
Uplifting [mode_hicolstdchar] best 2850266 combination zp[1]:38 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:45 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
Uplifting [mode_hicolecmchar] best 2850266 combination zp[1]:45 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:52 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
Uplifting [mode_hicolmcchar] best 2850266 combination zp[1]:52 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:113 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
Uplifting [mode_8bppchunkybmm] best 2850266 combination zp[1]:113 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ] 
Attempting to uplift remaining variables inzp[1]:67 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
Uplifting [mode_sixsfred2] best 2850266 combination zp[1]:67 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] 
Attempting to uplift remaining variables inzp[1]:80 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Uplifting [mode_twoplanebitmap] best 2850266 combination zp[1]:80 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] 
Attempting to uplift remaining variables inzp[1]:93 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
Uplifting [mode_sixsfred] best 2850266 combination zp[1]:93 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ] 
Attempting to uplift remaining variables inzp[1]:102 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
Uplifting [mode_8bpppixelcell] best 2850266 combination zp[1]:102 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ] 
Attempting to uplift remaining variables inzp[1]:161 [ keyboard_key_pressed::return#2 ]
Uplifting [keyboard_key_pressed] best 2849666 combination reg byte a [ keyboard_key_pressed::return#2 ] 
Attempting to uplift remaining variables inzp[1]:163 [ keyboard_key_pressed::return#24 ]
Uplifting [keyboard_key_pressed] best 2849066 combination reg byte a [ keyboard_key_pressed::return#24 ] 
Attempting to uplift remaining variables inzp[1]:164 [ menu::$9 ]
Uplifting [menu] best 2848466 combination reg byte a [ menu::$9 ] 
Attempting to uplift remaining variables inzp[1]:165 [ keyboard_key_pressed::return#25 ]
Uplifting [keyboard_key_pressed] best 2847866 combination reg byte a [ keyboard_key_pressed::return#25 ] 
Attempting to uplift remaining variables inzp[1]:166 [ menu::$13 ]
Uplifting [menu] best 2847266 combination reg byte a [ menu::$13 ] 
Attempting to uplift remaining variables inzp[1]:167 [ keyboard_key_pressed::return#26 ]
Uplifting [keyboard_key_pressed] best 2846666 combination reg byte a [ keyboard_key_pressed::return#26 ] 
Attempting to uplift remaining variables inzp[1]:168 [ menu::$17 ]
Uplifting [menu] best 2846066 combination reg byte a [ menu::$17 ] 
Attempting to uplift remaining variables inzp[1]:169 [ keyboard_key_pressed::return#27 ]
Uplifting [keyboard_key_pressed] best 2845466 combination reg byte a [ keyboard_key_pressed::return#27 ] 
Attempting to uplift remaining variables inzp[1]:170 [ menu::$21 ]
Uplifting [menu] best 2844866 combination reg byte a [ menu::$21 ] 
Attempting to uplift remaining variables inzp[1]:171 [ keyboard_key_pressed::return#28 ]
Uplifting [keyboard_key_pressed] best 2844266 combination reg byte a [ keyboard_key_pressed::return#28 ] 
Attempting to uplift remaining variables inzp[1]:172 [ menu::$25 ]
Uplifting [menu] best 2843666 combination reg byte a [ menu::$25 ] 
Attempting to uplift remaining variables inzp[1]:173 [ keyboard_key_pressed::return#29 ]
Uplifting [keyboard_key_pressed] best 2843066 combination reg byte a [ keyboard_key_pressed::return#29 ] 
Attempting to uplift remaining variables inzp[1]:174 [ menu::$29 ]
Uplifting [menu] best 2842466 combination reg byte a [ menu::$29 ] 
Attempting to uplift remaining variables inzp[1]:175 [ keyboard_key_pressed::return#30 ]
Uplifting [keyboard_key_pressed] best 2841866 combination reg byte a [ keyboard_key_pressed::return#30 ] 
Attempting to uplift remaining variables inzp[1]:176 [ menu::$33 ]
Uplifting [menu] best 2841266 combination reg byte a [ menu::$33 ] 
Attempting to uplift remaining variables inzp[1]:177 [ keyboard_key_pressed::return#10 ]
Uplifting [keyboard_key_pressed] best 2840666 combination reg byte a [ keyboard_key_pressed::return#10 ] 
Attempting to uplift remaining variables inzp[1]:178 [ menu::$37 ]
Uplifting [menu] best 2840066 combination reg byte a [ menu::$37 ] 
Attempting to uplift remaining variables inzp[1]:179 [ keyboard_key_pressed::return#11 ]
Uplifting [keyboard_key_pressed] best 2839466 combination reg byte a [ keyboard_key_pressed::return#11 ] 
Attempting to uplift remaining variables inzp[1]:180 [ menu::$41 ]
Uplifting [menu] best 2838866 combination reg byte a [ menu::$41 ] 
Attempting to uplift remaining variables inzp[1]:181 [ keyboard_key_pressed::return#12 ]
Uplifting [keyboard_key_pressed] best 2838266 combination reg byte a [ keyboard_key_pressed::return#12 ] 
Attempting to uplift remaining variables inzp[1]:182 [ menu::$45 ]
Uplifting [menu] best 2837666 combination reg byte a [ menu::$45 ] 
Attempting to uplift remaining variables inzp[1]:183 [ keyboard_key_pressed::return#13 ]
Uplifting [keyboard_key_pressed] best 2837066 combination reg byte a [ keyboard_key_pressed::return#13 ] 
Attempting to uplift remaining variables inzp[1]:184 [ menu::$49 ]
Uplifting [menu] best 2836466 combination reg byte a [ menu::$49 ] 
Coalescing zero page register [ zp[2]:131 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] ] with [ zp[2]:277 [ bitmap_clear::bitmap#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] ] with [ zp[1]:279 [ bitmap_line::xd#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 ] ] with [ zp[1]:282 [ bitmap_line::xd#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:137 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] ] with [ zp[1]:219 [ bitmap_line::y1#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] ] with [ zp[1]:216 [ bitmap_line::x0#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] ] with [ zp[1]:217 [ bitmap_line::x1#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:289 [ bitmap_plot::plotter_x#0 ] ] with [ zp[2]:293 [ bitmap_plot::plotter#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 ] ] with [ zp[1]:142 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] ] - score: 2
Coalescing zero page register [ zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] ] with [ zp[1]:147 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ] - score: 2
Coalescing zero page register [ zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ] with [ zp[1]:154 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] ] - score: 2
Coalescing zero page register [ zp[1]:137 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 ] ] with [ zp[1]:149 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 bitmap_line::x0#0 ] ] with [ zp[1]:150 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 bitmap_line::x0#0 bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] ] with [ zp[1]:155 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ print_char_cursor#37 print_char_cursor#2 print_char_cursor#103 print_char_cursor#38 print_char_cursor#26 ] ] with [ zp[2]:3 [ menu::c#2 menu::c#1 ] ]
Coalescing zero page register [ zp[2]:13 [ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ] ] with [ zp[2]:5 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] ]
Coalescing zero page register [ zp[1]:18 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ] ] with [ zp[1]:11 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ] ]
Coalescing zero page register [ zp[2]:20 [ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ] ] with [ zp[2]:15 [ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ] ]
Coalescing zero page register [ zp[2]:27 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ] ] with [ zp[2]:22 [ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ] ]
Coalescing zero page register [ zp[1]:32 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ] ] with [ zp[1]:25 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ] ]
Coalescing zero page register [ zp[2]:34 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ] ] with [ zp[2]:29 [ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ] ]
Coalescing zero page register [ zp[1]:38 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ] ] with [ zp[1]:36 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] ]
Coalescing zero page register [ zp[2]:47 [ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ] ] with [ zp[2]:40 [ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ] ]
Coalescing zero page register [ zp[2]:49 [ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ] ] with [ zp[2]:42 [ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ] ]
Coalescing zero page register [ zp[1]:52 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ] ] with [ zp[1]:45 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] ]
Coalescing zero page register [ zp[2]:61 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ] ] with [ zp[2]:54 [ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ] ]
Coalescing zero page register [ zp[2]:64 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ] ] with [ zp[2]:56 [ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ] ]
Coalescing zero page register [ zp[1]:72 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ] ] with [ zp[1]:59 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] ]
Coalescing zero page register [ zp[2]:74 [ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ] ] with [ zp[2]:68 [ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] ]
Coalescing zero page register [ zp[1]:76 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ] ] with [ zp[1]:63 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] ]
Coalescing zero page register [ zp[1]:80 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] ] with [ zp[1]:67 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] ]
Coalescing zero page register [ zp[2]:87 [ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ] ] with [ zp[2]:77 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] ]
Coalescing zero page register [ zp[2]:90 [ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ] ] with [ zp[2]:81 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] ]
Coalescing zero page register [ zp[1]:98 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ] ] with [ zp[1]:85 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] ]
Coalescing zero page register [ zp[2]:100 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ] ] with [ zp[2]:94 [ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ] ]
Coalescing zero page register [ zp[1]:102 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ] ] with [ zp[1]:89 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] ]
Coalescing zero page register [ zp[1]:105 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ] ] with [ zp[1]:93 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ] ]
Coalescing zero page register [ zp[1]:113 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ] ] with [ zp[1]:106 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ] ]
Coalescing zero page register [ zp[2]:114 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ] ] with [ zp[2]:103 [ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ] ]
Coalescing zero page register [ zp[2]:117 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ] ] with [ zp[2]:107 [ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ] ]
Coalescing zero page register [ zp[2]:121 [ print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 ] ] with [ zp[2]:119 [ memset::dst#2 memset::dst#1 ] ]
Coalescing zero page register [ zp[1]:130 [ bitmap_clear::y#4 bitmap_clear::y#1 ] ] with [ zp[1]:109 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] ]
Coalescing zero page register [ zp[2]:131 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 ] ] with [ zp[2]:128 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ]
Coalescing zero page register [ zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] ] with [ zp[1]:124 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ] ]
Coalescing zero page register [ zp[1]:141 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] ] with [ zp[1]:136 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] ]
Coalescing zero page register [ zp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x1#0 ] ] with [ zp[1]:140 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] ]
Coalescing zero page register [ zp[1]:144 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] ] with [ zp[1]:139 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] ]
Coalescing zero page register [ zp[1]:148 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] ] with [ zp[1]:146 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] ]
Coalescing zero page register [ zp[1]:153 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] ] with [ zp[1]:151 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] ]
Coalescing zero page register [ zp[1]:156 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] ] with [ zp[1]:152 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] ]
Coalescing zero page register [ zp[1]:187 [ keyboard_key_pressed::colidx#0 ] ] with [ zp[1]:137 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ]
Coalescing zero page register [ zp[1]:196 [ mode_stdchar::$5 ] ] with [ zp[1]:138 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 bitmap_line::x0#0 bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] ]
Coalescing zero page register [ zp[1]:202 [ mode_ecmchar::$5 ] ] with [ zp[1]:158 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ]
Coalescing zero page register [ zp[1]:213 [ mode_stdbitmap::col2#0 ] ] with [ zp[1]:208 [ mode_mcchar::$5 ] ]
Coalescing zero page register [ zp[1]:225 [ mode_hicolecmchar::$3 ] ] with [ zp[1]:221 [ mode_hicolstdchar::$3 ] ]
Coalescing zero page register [ zp[1]:233 [ mode_sixsfred2::$3 ] ] with [ zp[1]:229 [ mode_hicolmcchar::$3 ] ]
Coalescing zero page register [ zp[1]:248 [ mode_8bpppixelcell::$3 ] ] with [ zp[1]:239 [ mode_twoplanebitmap::$3 ] ]
Coalescing zero page register [ zp[2]:289 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 ] ] with [ zp[2]:252 [ mode_8bppchunkybmm::$7 ] ]
Coalescing zero page register [ zp[2]:27 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ] ] with [ zp[2]:13 [ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] ]
Coalescing zero page register [ zp[1]:32 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_mcchar::cy#4 mode_mcchar::cy#1 ] ] with [ zp[1]:18 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 mode_stdchar::cy#4 mode_stdchar::cy#1 ] ]
Coalescing zero page register [ zp[2]:34 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ] ] with [ zp[2]:20 [ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ] ]
Coalescing zero page register [ zp[1]:52 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] ] with [ zp[1]:38 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] ]
Coalescing zero page register [ zp[2]:61 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ] ] with [ zp[2]:47 [ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ] ]
Coalescing zero page register [ zp[2]:64 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ] ] with [ zp[2]:49 [ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ] ]
Coalescing zero page register [ zp[1]:98 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] ] with [ zp[1]:72 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] ]
Coalescing zero page register [ zp[2]:100 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ] ] with [ zp[2]:74 [ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] ]
Coalescing zero page register [ zp[1]:102 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] ] with [ zp[1]:76 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] ]
Coalescing zero page register [ zp[1]:105 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 mode_sixsfred::by#4 mode_sixsfred::by#1 ] ] with [ zp[1]:80 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] ]
Coalescing zero page register [ zp[2]:114 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ] ] with [ zp[2]:87 [ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] ]
Coalescing zero page register [ zp[2]:117 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ] ] with [ zp[2]:90 [ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] ]
Coalescing zero page register [ zp[2]:131 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ] with [ zp[2]:121 [ print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 memset::dst#2 memset::dst#1 ] ]
Coalescing zero page register [ zp[1]:141 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] ] with [ zp[1]:113 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ] ]
Coalescing zero page register [ zp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x1#0 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] ] with [ zp[1]:130 [ bitmap_clear::y#4 bitmap_clear::y#1 mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] ]
Coalescing zero page register [ zp[1]:153 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] ] with [ zp[1]:144 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] ]
Coalescing zero page register [ zp[1]:202 [ mode_ecmchar::$5 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ] with [ zp[1]:148 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] ]
Coalescing zero page register [ zp[1]:213 [ mode_stdbitmap::col2#0 mode_mcchar::$5 ] ] with [ zp[1]:135 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ] ]
Coalescing zero page register [ zp[1]:225 [ mode_hicolecmchar::$3 mode_hicolstdchar::$3 ] ] with [ zp[1]:156 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] ]
Coalescing zero page register [ zp[1]:233 [ mode_sixsfred2::$3 mode_hicolmcchar::$3 ] ] with [ zp[1]:187 [ keyboard_key_pressed::colidx#0 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ]
Coalescing zero page register [ zp[1]:248 [ mode_8bpppixelcell::$3 mode_twoplanebitmap::$3 ] ] with [ zp[1]:196 [ mode_stdchar::$5 bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 bitmap_line::x0#0 bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] ]
Coalescing zero page register [ zp[2]:61 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ] ] with [ zp[2]:27 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] ]
Coalescing zero page register [ zp[2]:64 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ] ] with [ zp[2]:34 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ] ]
Coalescing zero page register [ zp[1]:98 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] ] with [ zp[1]:32 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_mcchar::cy#4 mode_mcchar::cy#1 mode_ecmchar::cy#4 mode_ecmchar::cy#1 mode_stdchar::cy#4 mode_stdchar::cy#1 ] ]
Coalescing zero page register [ zp[1]:102 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] ] with [ zp[1]:52 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] ]
Coalescing zero page register [ zp[2]:131 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 memset::dst#2 memset::dst#1 ] ] with [ zp[2]:100 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] ]
Coalescing zero page register [ zp[1]:153 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] ] with [ zp[1]:105 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] ]
Coalescing zero page register [ zp[1]:225 [ mode_hicolecmchar::$3 mode_hicolstdchar::$3 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] ] with [ zp[1]:141 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ] ]
Coalescing zero page register [ zp[1]:273 [ bitmap_init::$10 ] ] with [ zp[1]:143 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x1#0 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_clear::y#4 bitmap_clear::y#1 mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] ]
Coalescing zero page register [ zp[2]:291 [ bitmap_plot::plotter_y#0 ] ] with [ zp[2]:114 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] ]
Coalescing zero page register [ zp[2]:117 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] ] with [ zp[2]:61 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] ]
Coalescing zero page register [ zp[2]:289 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 mode_8bppchunkybmm::$7 ] ] with [ zp[2]:131 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 memset::dst#2 memset::dst#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] ]
Allocated (was zp[2]:7) zp[2]:2 [ print_char_cursor#37 print_char_cursor#2 print_char_cursor#103 print_char_cursor#38 print_char_cursor#26 menu::c#2 menu::c#1 ]
Allocated (was zp[2]:64) zp[2]:4 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ]
Allocated (was zp[1]:98) zp[1]:6 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_mcchar::cy#4 mode_mcchar::cy#1 mode_ecmchar::cy#4 mode_ecmchar::cy#1 mode_stdchar::cy#4 mode_stdchar::cy#1 ]
Allocated (was zp[1]:102) zp[1]:7 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
Allocated (was zp[2]:117) zp[2]:8 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
Allocated (was zp[1]:153) zp[1]:10 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
Allocated (was zp[1]:202) zp[1]:11 [ mode_ecmchar::$5 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Allocated (was zp[1]:213) zp[1]:12 [ mode_stdbitmap::col2#0 mode_mcchar::$5 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
Allocated (was zp[1]:225) zp[1]:13 [ mode_hicolecmchar::$3 mode_hicolstdchar::$3 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ]
Allocated (was zp[1]:233) zp[1]:14 [ mode_sixsfred2::$3 mode_hicolmcchar::$3 keyboard_key_pressed::colidx#0 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Allocated (was zp[1]:248) zp[1]:15 [ mode_8bpppixelcell::$3 mode_twoplanebitmap::$3 mode_stdchar::$5 bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 bitmap_line::x0#0 bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Allocated (was zp[1]:273) zp[1]:16 [ bitmap_init::$10 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x1#0 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_clear::y#4 bitmap_clear::y#1 mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
Allocated (was zp[2]:289) zp[2]:17 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 mode_8bppchunkybmm::$7 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 memset::dst#2 memset::dst#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ]
Allocated (was zp[2]:291) zp[2]:19 [ bitmap_plot::plotter_y#0 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Exploring C64DTV Screen Modes
// C64 DTV version 2 Registers and Constants
//
// Sources
// (J) https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide
// (H) http://dtvhacking.cbm8bit.com/dtv_wiki/images/d/d9/Dtv_registers_full.txt
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  // The colors of the C64
  .const BLACK = 0
  .const GREEN = 5
  .const BLUE = 6
  .const LIGHT_GREEN = $d
  .const DTV_FEATURE_ENABLE = 1
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  .const KEY_3 = 8
  .const KEY_A = $a
  .const KEY_4 = $b
  .const KEY_E = $e
  .const KEY_D = $12
  .const KEY_6 = $13
  .const KEY_C = $14
  .const KEY_7 = $18
  .const KEY_8 = $1b
  .const KEY_B = $1c
  .const KEY_H = $1d
  .const KEY_U = $1e
  .const KEY_0 = $23
  .const KEY_O = $26
  .const KEY_L = $2a
  .const KEY_1 = $38
  .const KEY_2 = $3b
  .const KEY_SPACE = $3c
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .label RASTER = $d012
  .label BORDER_COLOR = $d020
  .label BG_COLOR = $d021
  .label BG_COLOR1 = $d022
  .label BG_COLOR2 = $d023
  .label BG_COLOR3 = $d024
  .label VIC_CONTROL = $d011
  .label VIC_CONTROL2 = $d016
  .label VIC_MEMORY = $d018
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .label print_char_cursor = 2
  .label print_line_cursor = $11
  // main
main: {
    // asm { sei  }
    sei
    // [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [2] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [3] *DTV_FEATURE = DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // [4] phi from main main::@1 to main::@1 [phi:main/main::@1->main::@1]
  __b1_from_main:
  __b1_from___b1:
    jmp __b1
    // main::@1
  __b1:
    // [5] call menu 
    jsr menu
    jmp __b1_from___b1
}
  // menu
menu: {
    .label SCREEN = $8000
    .label CHARSET = $9800
    .label c = 2
    // [6] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // Charset ROM
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [7] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // [8] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [9] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
    // [10] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [11] *((byte*)CIA2) = 3^(byte)(word)menu::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // [12] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [13] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // [14] *VIC_MEMORY = (byte)(word)menu::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [15] phi from menu to menu::@1 [phi:menu->menu::@1]
  __b1_from_menu:
    // [15] phi menu::i#2 = 0 [phi:menu->menu::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - default
    // [15] phi from menu::@1 to menu::@1 [phi:menu::@1->menu::@1]
  __b1_from___b1:
    // [15] phi menu::i#2 = menu::i#1 [phi:menu::@1->menu::@1#0] -- register_copy 
    jmp __b1
    // menu::@1
  __b1:
    // [16] DTV_PALETTE[menu::i#2] = DTV_PALETTE_DEFAULT[menu::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // [17] menu::i#1 = ++ menu::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [18] if(menu::i#1!=$10) goto menu::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    // [19] phi from menu::@1 to menu::@2 [phi:menu::@1->menu::@2]
  __b2_from___b1:
    // [19] phi menu::c#2 = COLS [phi:menu::@1->menu::@2#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z c
    lda #>COLS
    sta.z c+1
    jmp __b2
  // Char Colors
    // menu::@2
  __b2:
    // [20] if(menu::c#2!=COLS+$3e8) goto menu::@3 -- pbuz1_neq_pbuc1_then_la1 
    lda.z c+1
    cmp #>COLS+$3e8
    bne __b3
    lda.z c
    cmp #<COLS+$3e8
    bne __b3
    jmp __b4
    // menu::@4
  __b4:
    // [21] *BG_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BG_COLOR
    // [22] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDER_COLOR
    // [23] phi from menu::@4 to menu::@29 [phi:menu::@4->menu::@29]
  __b29_from___b4:
    jmp __b29
    // menu::@29
  __b29:
    // [24] call print_cls 
    // [114] phi from menu::@29 to print_cls [phi:menu::@29->print_cls]
  print_cls_from___b29:
    jsr print_cls
    // [25] phi from menu::@29 to menu::@30 [phi:menu::@29->menu::@30]
  __b30_from___b29:
    jmp __b30
    // menu::@30
  __b30:
    // [26] call print_str_lines 
    // [117] phi from menu::@30 to print_str_lines [phi:menu::@30->print_str_lines]
  print_str_lines_from___b30:
    jsr print_str_lines
    // [27] phi from menu::@30 menu::@42 to menu::@5 [phi:menu::@30/menu::@42->menu::@5]
  __b5_from___b30:
  __b5_from___b42:
    jmp __b5
    // menu::@5
  __b5:
    // [28] call keyboard_key_pressed 
    // [132] phi from menu::@5 to keyboard_key_pressed [phi:menu::@5->keyboard_key_pressed]
  keyboard_key_pressed_from___b5:
    // [132] phi keyboard_key_pressed::key#20 = KEY_1 [phi:menu::@5->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_1
    jsr keyboard_key_pressed
    // [29] keyboard_key_pressed::return#2 = keyboard_key_pressed::return#0
    jmp __b31
    // menu::@31
  __b31:
    // [30] menu::$5 = keyboard_key_pressed::return#2
    // [31] if(menu::$5==0) goto menu::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b6_from___b31
    // [32] phi from menu::@31 to menu::@17 [phi:menu::@31->menu::@17]
  __b17_from___b31:
    jmp __b17
    // menu::@17
  __b17:
    // [33] call mode_stdchar 
    jsr mode_stdchar
    jmp __breturn
    // menu::@return
  __breturn:
    // [34] return 
    rts
    // [35] phi from menu::@31 to menu::@6 [phi:menu::@31->menu::@6]
  __b6_from___b31:
    jmp __b6
    // menu::@6
  __b6:
    // [36] call keyboard_key_pressed 
    // [132] phi from menu::@6 to keyboard_key_pressed [phi:menu::@6->keyboard_key_pressed]
  keyboard_key_pressed_from___b6:
    // [132] phi keyboard_key_pressed::key#20 = KEY_2 [phi:menu::@6->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_2
    jsr keyboard_key_pressed
    // [37] keyboard_key_pressed::return#24 = keyboard_key_pressed::return#0
    jmp __b32
    // menu::@32
  __b32:
    // [38] menu::$9 = keyboard_key_pressed::return#24
    // [39] if(menu::$9==0) goto menu::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b7_from___b32
    // [40] phi from menu::@32 to menu::@18 [phi:menu::@32->menu::@18]
  __b18_from___b32:
    jmp __b18
    // menu::@18
  __b18:
    // [41] call mode_ecmchar 
    jsr mode_ecmchar
    jmp __breturn
    // [42] phi from menu::@32 to menu::@7 [phi:menu::@32->menu::@7]
  __b7_from___b32:
    jmp __b7
    // menu::@7
  __b7:
    // [43] call keyboard_key_pressed 
    // [132] phi from menu::@7 to keyboard_key_pressed [phi:menu::@7->keyboard_key_pressed]
  keyboard_key_pressed_from___b7:
    // [132] phi keyboard_key_pressed::key#20 = KEY_3 [phi:menu::@7->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_3
    jsr keyboard_key_pressed
    // [44] keyboard_key_pressed::return#25 = keyboard_key_pressed::return#0
    jmp __b33
    // menu::@33
  __b33:
    // [45] menu::$13 = keyboard_key_pressed::return#25
    // [46] if(menu::$13==0) goto menu::@8 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b8_from___b33
    // [47] phi from menu::@33 to menu::@19 [phi:menu::@33->menu::@19]
  __b19_from___b33:
    jmp __b19
    // menu::@19
  __b19:
    // [48] call mode_mcchar 
    jsr mode_mcchar
    jmp __breturn
    // [49] phi from menu::@33 to menu::@8 [phi:menu::@33->menu::@8]
  __b8_from___b33:
    jmp __b8
    // menu::@8
  __b8:
    // [50] call keyboard_key_pressed 
    // [132] phi from menu::@8 to keyboard_key_pressed [phi:menu::@8->keyboard_key_pressed]
  keyboard_key_pressed_from___b8:
    // [132] phi keyboard_key_pressed::key#20 = KEY_4 [phi:menu::@8->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_4
    jsr keyboard_key_pressed
    // [51] keyboard_key_pressed::return#26 = keyboard_key_pressed::return#0
    jmp __b34
    // menu::@34
  __b34:
    // [52] menu::$17 = keyboard_key_pressed::return#26
    // [53] if(menu::$17==0) goto menu::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b9_from___b34
    // [54] phi from menu::@34 to menu::@20 [phi:menu::@34->menu::@20]
  __b20_from___b34:
    jmp __b20
    // menu::@20
  __b20:
    // [55] call mode_stdbitmap 
    jsr mode_stdbitmap
    jmp __breturn
    // [56] phi from menu::@34 to menu::@9 [phi:menu::@34->menu::@9]
  __b9_from___b34:
    jmp __b9
    // menu::@9
  __b9:
    // [57] call keyboard_key_pressed 
    // [132] phi from menu::@9 to keyboard_key_pressed [phi:menu::@9->keyboard_key_pressed]
  keyboard_key_pressed_from___b9:
    // [132] phi keyboard_key_pressed::key#20 = KEY_6 [phi:menu::@9->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_6
    jsr keyboard_key_pressed
    // [58] keyboard_key_pressed::return#27 = keyboard_key_pressed::return#0
    jmp __b35
    // menu::@35
  __b35:
    // [59] menu::$21 = keyboard_key_pressed::return#27
    // [60] if(menu::$21==0) goto menu::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10_from___b35
    // [61] phi from menu::@35 to menu::@21 [phi:menu::@35->menu::@21]
  __b21_from___b35:
    jmp __b21
    // menu::@21
  __b21:
    // [62] call mode_hicolstdchar 
    jsr mode_hicolstdchar
    jmp __breturn
    // [63] phi from menu::@35 to menu::@10 [phi:menu::@35->menu::@10]
  __b10_from___b35:
    jmp __b10
    // menu::@10
  __b10:
    // [64] call keyboard_key_pressed 
    // [132] phi from menu::@10 to keyboard_key_pressed [phi:menu::@10->keyboard_key_pressed]
  keyboard_key_pressed_from___b10:
    // [132] phi keyboard_key_pressed::key#20 = KEY_7 [phi:menu::@10->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_7
    jsr keyboard_key_pressed
    // [65] keyboard_key_pressed::return#28 = keyboard_key_pressed::return#0
    jmp __b36
    // menu::@36
  __b36:
    // [66] menu::$25 = keyboard_key_pressed::return#28
    // [67] if(menu::$25==0) goto menu::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b11_from___b36
    // [68] phi from menu::@36 to menu::@22 [phi:menu::@36->menu::@22]
  __b22_from___b36:
    jmp __b22
    // menu::@22
  __b22:
    // [69] call mode_hicolecmchar 
    jsr mode_hicolecmchar
    jmp __breturn
    // [70] phi from menu::@36 to menu::@11 [phi:menu::@36->menu::@11]
  __b11_from___b36:
    jmp __b11
    // menu::@11
  __b11:
    // [71] call keyboard_key_pressed 
    // [132] phi from menu::@11 to keyboard_key_pressed [phi:menu::@11->keyboard_key_pressed]
  keyboard_key_pressed_from___b11:
    // [132] phi keyboard_key_pressed::key#20 = KEY_8 [phi:menu::@11->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_8
    jsr keyboard_key_pressed
    // [72] keyboard_key_pressed::return#29 = keyboard_key_pressed::return#0
    jmp __b37
    // menu::@37
  __b37:
    // [73] menu::$29 = keyboard_key_pressed::return#29
    // [74] if(menu::$29==0) goto menu::@12 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b12_from___b37
    // [75] phi from menu::@37 to menu::@23 [phi:menu::@37->menu::@23]
  __b23_from___b37:
    jmp __b23
    // menu::@23
  __b23:
    // [76] call mode_hicolmcchar 
    jsr mode_hicolmcchar
    jmp __breturn
    // [77] phi from menu::@37 to menu::@12 [phi:menu::@37->menu::@12]
  __b12_from___b37:
    jmp __b12
    // menu::@12
  __b12:
    // [78] call keyboard_key_pressed 
    // [132] phi from menu::@12 to keyboard_key_pressed [phi:menu::@12->keyboard_key_pressed]
  keyboard_key_pressed_from___b12:
    // [132] phi keyboard_key_pressed::key#20 = KEY_A [phi:menu::@12->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_A
    jsr keyboard_key_pressed
    // [79] keyboard_key_pressed::return#30 = keyboard_key_pressed::return#0
    jmp __b38
    // menu::@38
  __b38:
    // [80] menu::$33 = keyboard_key_pressed::return#30
    // [81] if(menu::$33==0) goto menu::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b13_from___b38
    // [82] phi from menu::@38 to menu::@24 [phi:menu::@38->menu::@24]
  __b24_from___b38:
    jmp __b24
    // menu::@24
  __b24:
    // [83] call mode_sixsfred2 
    jsr mode_sixsfred2
    jmp __breturn
    // [84] phi from menu::@38 to menu::@13 [phi:menu::@38->menu::@13]
  __b13_from___b38:
    jmp __b13
    // menu::@13
  __b13:
    // [85] call keyboard_key_pressed 
    // [132] phi from menu::@13 to keyboard_key_pressed [phi:menu::@13->keyboard_key_pressed]
  keyboard_key_pressed_from___b13:
    // [132] phi keyboard_key_pressed::key#20 = KEY_B [phi:menu::@13->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_B
    jsr keyboard_key_pressed
    // [86] keyboard_key_pressed::return#10 = keyboard_key_pressed::return#0
    jmp __b39
    // menu::@39
  __b39:
    // [87] menu::$37 = keyboard_key_pressed::return#10
    // [88] if(menu::$37==0) goto menu::@14 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b14_from___b39
    // [89] phi from menu::@39 to menu::@25 [phi:menu::@39->menu::@25]
  __b25_from___b39:
    jmp __b25
    // menu::@25
  __b25:
    // [90] call mode_twoplanebitmap 
    jsr mode_twoplanebitmap
    jmp __breturn
    // [91] phi from menu::@39 to menu::@14 [phi:menu::@39->menu::@14]
  __b14_from___b39:
    jmp __b14
    // menu::@14
  __b14:
    // [92] call keyboard_key_pressed 
    // [132] phi from menu::@14 to keyboard_key_pressed [phi:menu::@14->keyboard_key_pressed]
  keyboard_key_pressed_from___b14:
    // [132] phi keyboard_key_pressed::key#20 = KEY_C [phi:menu::@14->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_C
    jsr keyboard_key_pressed
    // [93] keyboard_key_pressed::return#11 = keyboard_key_pressed::return#0
    jmp __b40
    // menu::@40
  __b40:
    // [94] menu::$41 = keyboard_key_pressed::return#11
    // [95] if(menu::$41==0) goto menu::@15 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b15_from___b40
    // [96] phi from menu::@40 to menu::@26 [phi:menu::@40->menu::@26]
  __b26_from___b40:
    jmp __b26
    // menu::@26
  __b26:
    // [97] call mode_sixsfred 
    jsr mode_sixsfred
    jmp __breturn
    // [98] phi from menu::@40 to menu::@15 [phi:menu::@40->menu::@15]
  __b15_from___b40:
    jmp __b15
    // menu::@15
  __b15:
    // [99] call keyboard_key_pressed 
    // [132] phi from menu::@15 to keyboard_key_pressed [phi:menu::@15->keyboard_key_pressed]
  keyboard_key_pressed_from___b15:
    // [132] phi keyboard_key_pressed::key#20 = KEY_D [phi:menu::@15->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_D
    jsr keyboard_key_pressed
    // [100] keyboard_key_pressed::return#12 = keyboard_key_pressed::return#0
    jmp __b41
    // menu::@41
  __b41:
    // [101] menu::$45 = keyboard_key_pressed::return#12
    // [102] if(menu::$45==0) goto menu::@16 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b16_from___b41
    // [103] phi from menu::@41 to menu::@27 [phi:menu::@41->menu::@27]
  __b27_from___b41:
    jmp __b27
    // menu::@27
  __b27:
    // [104] call mode_8bpppixelcell 
    jsr mode_8bpppixelcell
    jmp __breturn
    // [105] phi from menu::@41 to menu::@16 [phi:menu::@41->menu::@16]
  __b16_from___b41:
    jmp __b16
    // menu::@16
  __b16:
    // [106] call keyboard_key_pressed 
    // [132] phi from menu::@16 to keyboard_key_pressed [phi:menu::@16->keyboard_key_pressed]
  keyboard_key_pressed_from___b16:
    // [132] phi keyboard_key_pressed::key#20 = KEY_E [phi:menu::@16->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_E
    jsr keyboard_key_pressed
    // [107] keyboard_key_pressed::return#13 = keyboard_key_pressed::return#0
    jmp __b42
    // menu::@42
  __b42:
    // [108] menu::$49 = keyboard_key_pressed::return#13
    // [109] if(menu::$49==0) goto menu::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b5_from___b42
    // [110] phi from menu::@42 to menu::@28 [phi:menu::@42->menu::@28]
  __b28_from___b42:
    jmp __b28
    // menu::@28
  __b28:
    // [111] call mode_8bppchunkybmm 
    jsr mode_8bppchunkybmm
    jmp __breturn
    // menu::@3
  __b3:
    // [112] *menu::c#2 = LIGHT_GREEN -- _deref_pbuz1=vbuc1 
    lda #LIGHT_GREEN
    ldy #0
    sta (c),y
    // [113] menu::c#1 = ++ menu::c#2 -- pbuz1=_inc_pbuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [19] phi from menu::@3 to menu::@2 [phi:menu::@3->menu::@2]
  __b2_from___b3:
    // [19] phi menu::c#2 = menu::c#1 [phi:menu::@3->menu::@2#0] -- register_copy 
    jmp __b2
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [115] call memset 
    // [649] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [116] return 
    rts
}
  // print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zp(8) str)
print_str_lines: {
    .label str = 8
    // [118] phi from print_str_lines to print_str_lines::@1 [phi:print_str_lines->print_str_lines::@1]
  __b1_from_print_str_lines:
    // [118] phi print_line_cursor#1 = menu::SCREEN [phi:print_str_lines->print_str_lines::@1#0] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta.z print_line_cursor
    lda #>menu.SCREEN
    sta.z print_line_cursor+1
    // [118] phi print_char_cursor#2 = menu::SCREEN [phi:print_str_lines->print_str_lines::@1#1] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta.z print_char_cursor
    lda #>menu.SCREEN
    sta.z print_char_cursor+1
    // [118] phi print_str_lines::str#2 = MENU_TEXT [phi:print_str_lines->print_str_lines::@1#2] -- pbuz1=pbuc1 
    lda #<MENU_TEXT
    sta.z str
    lda #>MENU_TEXT
    sta.z str+1
    jmp __b1
    // print_str_lines::@1
  __b1:
    // [119] if(0!=*print_str_lines::str#2) goto print_str_lines::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2_from___b1
    jmp __breturn
    // print_str_lines::@return
  __breturn:
    // [120] return 
    rts
    // [121] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [121] phi print_char_cursor#37 = print_char_cursor#2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
    // [121] phi print_str_lines::str#3 = print_str_lines::str#2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    jmp __b2
    // print_str_lines::@2
  __b2:
    // [122] print_str_lines::ch#0 = *print_str_lines::str#3 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [123] print_str_lines::str#0 = ++ print_str_lines::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [124] if(0==print_str_lines::ch#0) goto print_str_lines::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // print_str_lines::@4
  __b4:
    // [125] print_char::ch#0 = print_str_lines::ch#0
    // [126] call print_char 
    jsr print_char
    // [127] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [127] phi print_char_cursor#38 = print_char_cursor#37 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    jmp __b3
    // print_str_lines::@3
  __b3:
    // [128] if(0!=print_str_lines::ch#0) goto print_str_lines::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2_from___b3
    // [129] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
  __b5_from___b3:
    jmp __b5
    // print_str_lines::@5
  __b5:
    // [130] call print_ln 
    // [658] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b6
    // print_str_lines::@6
  __b6:
    // [131] print_char_cursor#103 = print_line_cursor#2 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [118] phi from print_str_lines::@6 to print_str_lines::@1 [phi:print_str_lines::@6->print_str_lines::@1]
  __b1_from___b6:
    // [118] phi print_line_cursor#1 = print_line_cursor#2 [phi:print_str_lines::@6->print_str_lines::@1#0] -- register_copy 
    // [118] phi print_char_cursor#2 = print_char_cursor#103 [phi:print_str_lines::@6->print_str_lines::@1#1] -- register_copy 
    // [118] phi print_str_lines::str#2 = print_str_lines::str#0 [phi:print_str_lines::@6->print_str_lines::@1#2] -- register_copy 
    jmp __b1
}
  // keyboard_key_pressed
// Determines whether a specific key is currently pressed by accessing the matrix directly
// The key is a keyboard code defined from the keyboard matrix by %00rrrccc, where rrr is the row ID (0-7) and ccc is the column ID (0-7)
// All keys exist as as KEY_XXX constants.
// Returns zero if the key is not pressed and a non-zero value if the key is currently pressed
// keyboard_key_pressed(byte register(Y) key)
keyboard_key_pressed: {
    .label colidx = $e
    // [133] keyboard_key_pressed::colidx#0 = keyboard_key_pressed::key#20 & 7 -- vbuz1=vbuyy_band_vbuc1 
    tya
    and #7
    sta.z colidx
    // [134] keyboard_key_pressed::rowidx#0 = keyboard_key_pressed::key#20 >> 3 -- vbuaa=vbuyy_ror_3 
    tya
    lsr
    lsr
    lsr
    // [135] keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 -- vbuyy=vbuaa 
    tay
    // [136] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [137] keyboard_matrix_read::return#2 = keyboard_matrix_read::return#0
    jmp __b1
    // keyboard_key_pressed::@1
  __b1:
    // [138] keyboard_key_pressed::$2 = keyboard_matrix_read::return#2
    // [139] keyboard_key_pressed::return#0 = keyboard_key_pressed::$2 & keyboard_matrix_col_bitmask[keyboard_key_pressed::colidx#0] -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuz1 
    ldy.z colidx
    and keyboard_matrix_col_bitmask,y
    jmp __breturn
    // keyboard_key_pressed::@return
  __breturn:
    // [140] return 
    rts
}
  // mode_stdchar
// Standard Character Mode (LINEAR/HICOL/CHUNK/COLDIS/ECM/MCM/BMM = 0)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// Pixel Shifter (1)
// - 0: 4bpp BG_COLORor0[3:0]
// - 1: 4bpp ColorData[3:0]
mode_stdchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label __5 = $f
    // Char Colors and screen chars
    .label col = 8
    .label ch = 4
    .label cy = 6
    // [141] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [142] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // [143] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [144] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
    // [145] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [146] *((byte*)CIA2) = 3^(byte)(word)mode_stdchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // [147] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [148] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // [149] *VIC_MEMORY = (byte)(word)mode_stdchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [150] phi from mode_stdchar to mode_stdchar::@1 [phi:mode_stdchar->mode_stdchar::@1]
  __b1_from_mode_stdchar:
    // [150] phi mode_stdchar::i#2 = 0 [phi:mode_stdchar->mode_stdchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - default
    // [150] phi from mode_stdchar::@1 to mode_stdchar::@1 [phi:mode_stdchar::@1->mode_stdchar::@1]
  __b1_from___b1:
    // [150] phi mode_stdchar::i#2 = mode_stdchar::i#1 [phi:mode_stdchar::@1->mode_stdchar::@1#0] -- register_copy 
    jmp __b1
    // mode_stdchar::@1
  __b1:
    // [151] DTV_PALETTE[mode_stdchar::i#2] = DTV_PALETTE_DEFAULT[mode_stdchar::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // [152] mode_stdchar::i#1 = ++ mode_stdchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [153] if(mode_stdchar::i#1!=$10) goto mode_stdchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // mode_stdchar::@2
  __b2:
    // [154] *BG_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BG_COLOR
    // [155] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDER_COLOR
    // [156] phi from mode_stdchar::@2 to mode_stdchar::@3 [phi:mode_stdchar::@2->mode_stdchar::@3]
  __b3_from___b2:
    // [156] phi mode_stdchar::ch#3 = mode_stdchar::SCREEN [phi:mode_stdchar::@2->mode_stdchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [156] phi mode_stdchar::col#3 = mode_stdchar::COLORS [phi:mode_stdchar::@2->mode_stdchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [156] phi mode_stdchar::cy#4 = 0 [phi:mode_stdchar::@2->mode_stdchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b3
    // [156] phi from mode_stdchar::@5 to mode_stdchar::@3 [phi:mode_stdchar::@5->mode_stdchar::@3]
  __b3_from___b5:
    // [156] phi mode_stdchar::ch#3 = mode_stdchar::ch#1 [phi:mode_stdchar::@5->mode_stdchar::@3#0] -- register_copy 
    // [156] phi mode_stdchar::col#3 = mode_stdchar::col#1 [phi:mode_stdchar::@5->mode_stdchar::@3#1] -- register_copy 
    // [156] phi mode_stdchar::cy#4 = mode_stdchar::cy#1 [phi:mode_stdchar::@5->mode_stdchar::@3#2] -- register_copy 
    jmp __b3
    // mode_stdchar::@3
  __b3:
    // [157] phi from mode_stdchar::@3 to mode_stdchar::@4 [phi:mode_stdchar::@3->mode_stdchar::@4]
  __b4_from___b3:
    // [157] phi mode_stdchar::ch#2 = mode_stdchar::ch#3 [phi:mode_stdchar::@3->mode_stdchar::@4#0] -- register_copy 
    // [157] phi mode_stdchar::col#2 = mode_stdchar::col#3 [phi:mode_stdchar::@3->mode_stdchar::@4#1] -- register_copy 
    // [157] phi mode_stdchar::cx#2 = 0 [phi:mode_stdchar::@3->mode_stdchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
    // [157] phi from mode_stdchar::@4 to mode_stdchar::@4 [phi:mode_stdchar::@4->mode_stdchar::@4]
  __b4_from___b4:
    // [157] phi mode_stdchar::ch#2 = mode_stdchar::ch#1 [phi:mode_stdchar::@4->mode_stdchar::@4#0] -- register_copy 
    // [157] phi mode_stdchar::col#2 = mode_stdchar::col#1 [phi:mode_stdchar::@4->mode_stdchar::@4#1] -- register_copy 
    // [157] phi mode_stdchar::cx#2 = mode_stdchar::cx#1 [phi:mode_stdchar::@4->mode_stdchar::@4#2] -- register_copy 
    jmp __b4
    // mode_stdchar::@4
  __b4:
    // [158] mode_stdchar::$2 = mode_stdchar::cx#2 + mode_stdchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // [159] mode_stdchar::$3 = mode_stdchar::$2 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [160] *mode_stdchar::col#2 = mode_stdchar::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // [161] mode_stdchar::col#1 = ++ mode_stdchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [162] mode_stdchar::$4 = mode_stdchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // [163] mode_stdchar::$5 = mode_stdchar::$4 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __5
    // [164] mode_stdchar::$6 = mode_stdchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [165] mode_stdchar::$7 = mode_stdchar::$5 | mode_stdchar::$6 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __5
    // [166] *mode_stdchar::ch#2 = mode_stdchar::$7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [167] mode_stdchar::ch#1 = ++ mode_stdchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [168] mode_stdchar::cx#1 = ++ mode_stdchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [169] if(mode_stdchar::cx#1!=$28) goto mode_stdchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4_from___b4
    jmp __b5
    // mode_stdchar::@5
  __b5:
    // [170] mode_stdchar::cy#1 = ++ mode_stdchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [171] if(mode_stdchar::cy#1!=$19) goto mode_stdchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3_from___b5
    // [172] phi from mode_stdchar::@5 to mode_stdchar::@6 [phi:mode_stdchar::@5->mode_stdchar::@6]
  __b6_from___b5:
    jmp __b6
    // mode_stdchar::@6
  __b6:
    // [173] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_stdchar::@6 to mode_ctrl [phi:mode_stdchar::@6->mode_ctrl]
  mode_ctrl_from___b6:
    // [666] phi dtv_control#146 = 0 [phi:mode_stdchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #0
    jsr mode_ctrl
    jmp __breturn
    // mode_stdchar::@return
  __breturn:
    // [174] return 
    rts
}
  // mode_ecmchar
// Extended Background Color Character Mode (LINEAR/HICOL/CHUNK/COLDIS/MCM/BMM = 0, ECM = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & "00" & CharData[5:0] & RowCounter[2:0] ) 
// GfxData Pixel Shifter (1)
//  - 0: 4bpp Background Color
//    - CharData[7:6] 00: 4bpp BG_COLORor0[3:0]
//    - CharData[7:6] 01: 4bpp BG_COLORor1[3:0]
//    - CharData[7:6] 10: 4bpp BG_COLORor2[3:0]
//    - CharData[7:6] 11: 4bpp BG_COLORor3[3:0]
//  - 1: 4bpp ColorData[3:0]
mode_ecmchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label __5 = $b
    // Char Colors and screen chars
    .label col = 4
    .label ch = 8
    .label cy = 6
    // [175] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [176] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // [177] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [178] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
    // [179] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [180] *((byte*)CIA2) = 3^(byte)(word)mode_ecmchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // [181] *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|VIC_ECM|3
    sta VIC_CONTROL
    // [182] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // [183] *VIC_MEMORY = (byte)(word)mode_ecmchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [184] phi from mode_ecmchar to mode_ecmchar::@1 [phi:mode_ecmchar->mode_ecmchar::@1]
  __b1_from_mode_ecmchar:
    // [184] phi mode_ecmchar::i#2 = 0 [phi:mode_ecmchar->mode_ecmchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - default
    // [184] phi from mode_ecmchar::@1 to mode_ecmchar::@1 [phi:mode_ecmchar::@1->mode_ecmchar::@1]
  __b1_from___b1:
    // [184] phi mode_ecmchar::i#2 = mode_ecmchar::i#1 [phi:mode_ecmchar::@1->mode_ecmchar::@1#0] -- register_copy 
    jmp __b1
    // mode_ecmchar::@1
  __b1:
    // [185] DTV_PALETTE[mode_ecmchar::i#2] = DTV_PALETTE_DEFAULT[mode_ecmchar::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // [186] mode_ecmchar::i#1 = ++ mode_ecmchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [187] if(mode_ecmchar::i#1!=$10) goto mode_ecmchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // mode_ecmchar::@2
  __b2:
    // [188] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // [189] *BG_COLOR = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BG_COLOR
    // [190] *BG_COLOR1 = 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR1
    // [191] *BG_COLOR2 = 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR2
    // [192] *BG_COLOR3 = 6 -- _deref_pbuc1=vbuc2 
    lda #6
    sta BG_COLOR3
    // [193] phi from mode_ecmchar::@2 to mode_ecmchar::@3 [phi:mode_ecmchar::@2->mode_ecmchar::@3]
  __b3_from___b2:
    // [193] phi mode_ecmchar::ch#3 = mode_ecmchar::SCREEN [phi:mode_ecmchar::@2->mode_ecmchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [193] phi mode_ecmchar::col#3 = mode_ecmchar::COLORS [phi:mode_ecmchar::@2->mode_ecmchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [193] phi mode_ecmchar::cy#4 = 0 [phi:mode_ecmchar::@2->mode_ecmchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b3
    // [193] phi from mode_ecmchar::@5 to mode_ecmchar::@3 [phi:mode_ecmchar::@5->mode_ecmchar::@3]
  __b3_from___b5:
    // [193] phi mode_ecmchar::ch#3 = mode_ecmchar::ch#1 [phi:mode_ecmchar::@5->mode_ecmchar::@3#0] -- register_copy 
    // [193] phi mode_ecmchar::col#3 = mode_ecmchar::col#1 [phi:mode_ecmchar::@5->mode_ecmchar::@3#1] -- register_copy 
    // [193] phi mode_ecmchar::cy#4 = mode_ecmchar::cy#1 [phi:mode_ecmchar::@5->mode_ecmchar::@3#2] -- register_copy 
    jmp __b3
    // mode_ecmchar::@3
  __b3:
    // [194] phi from mode_ecmchar::@3 to mode_ecmchar::@4 [phi:mode_ecmchar::@3->mode_ecmchar::@4]
  __b4_from___b3:
    // [194] phi mode_ecmchar::ch#2 = mode_ecmchar::ch#3 [phi:mode_ecmchar::@3->mode_ecmchar::@4#0] -- register_copy 
    // [194] phi mode_ecmchar::col#2 = mode_ecmchar::col#3 [phi:mode_ecmchar::@3->mode_ecmchar::@4#1] -- register_copy 
    // [194] phi mode_ecmchar::cx#2 = 0 [phi:mode_ecmchar::@3->mode_ecmchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
    // [194] phi from mode_ecmchar::@4 to mode_ecmchar::@4 [phi:mode_ecmchar::@4->mode_ecmchar::@4]
  __b4_from___b4:
    // [194] phi mode_ecmchar::ch#2 = mode_ecmchar::ch#1 [phi:mode_ecmchar::@4->mode_ecmchar::@4#0] -- register_copy 
    // [194] phi mode_ecmchar::col#2 = mode_ecmchar::col#1 [phi:mode_ecmchar::@4->mode_ecmchar::@4#1] -- register_copy 
    // [194] phi mode_ecmchar::cx#2 = mode_ecmchar::cx#1 [phi:mode_ecmchar::@4->mode_ecmchar::@4#2] -- register_copy 
    jmp __b4
    // mode_ecmchar::@4
  __b4:
    // [195] mode_ecmchar::$2 = mode_ecmchar::cx#2 + mode_ecmchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // [196] mode_ecmchar::$3 = mode_ecmchar::$2 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [197] *mode_ecmchar::col#2 = mode_ecmchar::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // [198] mode_ecmchar::col#1 = ++ mode_ecmchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [199] mode_ecmchar::$4 = mode_ecmchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // [200] mode_ecmchar::$5 = mode_ecmchar::$4 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __5
    // [201] mode_ecmchar::$6 = mode_ecmchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [202] mode_ecmchar::$7 = mode_ecmchar::$5 | mode_ecmchar::$6 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __5
    // [203] *mode_ecmchar::ch#2 = mode_ecmchar::$7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [204] mode_ecmchar::ch#1 = ++ mode_ecmchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [205] mode_ecmchar::cx#1 = ++ mode_ecmchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [206] if(mode_ecmchar::cx#1!=$28) goto mode_ecmchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4_from___b4
    jmp __b5
    // mode_ecmchar::@5
  __b5:
    // [207] mode_ecmchar::cy#1 = ++ mode_ecmchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [208] if(mode_ecmchar::cy#1!=$19) goto mode_ecmchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3_from___b5
    // [209] phi from mode_ecmchar::@5 to mode_ecmchar::@6 [phi:mode_ecmchar::@5->mode_ecmchar::@6]
  __b6_from___b5:
    jmp __b6
    // mode_ecmchar::@6
  __b6:
    // [210] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_ecmchar::@6 to mode_ctrl [phi:mode_ecmchar::@6->mode_ctrl]
  mode_ctrl_from___b6:
    // [666] phi dtv_control#146 = 0 [phi:mode_ecmchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #0
    jsr mode_ctrl
    jmp __breturn
    // mode_ecmchar::@return
  __breturn:
    // [211] return 
    rts
}
  // mode_mcchar
// Multicolor Character Mode (LINEAR/HICOL/CHUNK/COLDIS/BMM/ECM = 0, MCM = 1)
// Resolution: 160x200 (320x200)
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// GfxData Pixel Shifter (1) if ColorData[3:3] = 0:
//  - 0: 4bpp BG_COLORor0[3:0]
//  - 1: 4bpp ColorData[2:0]
// GfxData Pixel Shifter (2) if ColorData[3:3] = 1:
//  - 00: 4bpp BG_COLORor0[3:0]
//  - 01: 4bpp BG_COLORor1[3:0]
//  - 10: 4bpp BG_COLORor2[3:0]
//  - 11: 4bpp ColorData[2:0]// Standard Character Mode (LINEAR/HICOL/CHUNK/COLDIS/ECM/MCM/BMM = 0)
mode_mcchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label __5 = $c
    // Char Colors and screen chars
    .label col = 8
    .label ch = 4
    .label cy = 6
    // [212] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [213] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // [214] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [215] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
    // [216] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [217] *((byte*)CIA2) = 3^(byte)(word)mode_mcchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // [218] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [219] *VIC_CONTROL2 = VIC_CSEL|VIC_MCM -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL|VIC_MCM
    sta VIC_CONTROL2
    // [220] *VIC_MEMORY = (byte)(word)mode_mcchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [221] phi from mode_mcchar to mode_mcchar::@1 [phi:mode_mcchar->mode_mcchar::@1]
  __b1_from_mode_mcchar:
    // [221] phi mode_mcchar::i#2 = 0 [phi:mode_mcchar->mode_mcchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - default
    // [221] phi from mode_mcchar::@1 to mode_mcchar::@1 [phi:mode_mcchar::@1->mode_mcchar::@1]
  __b1_from___b1:
    // [221] phi mode_mcchar::i#2 = mode_mcchar::i#1 [phi:mode_mcchar::@1->mode_mcchar::@1#0] -- register_copy 
    jmp __b1
    // mode_mcchar::@1
  __b1:
    // [222] DTV_PALETTE[mode_mcchar::i#2] = DTV_PALETTE_DEFAULT[mode_mcchar::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // [223] mode_mcchar::i#1 = ++ mode_mcchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [224] if(mode_mcchar::i#1!=$10) goto mode_mcchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // mode_mcchar::@2
  __b2:
    // [225] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // [226] *BG_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    // [227] *BG_COLOR1 = GREEN -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BG_COLOR1
    // [228] *BG_COLOR2 = BLUE -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BG_COLOR2
    // [229] phi from mode_mcchar::@2 to mode_mcchar::@3 [phi:mode_mcchar::@2->mode_mcchar::@3]
  __b3_from___b2:
    // [229] phi mode_mcchar::ch#3 = mode_mcchar::SCREEN [phi:mode_mcchar::@2->mode_mcchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [229] phi mode_mcchar::col#3 = mode_mcchar::COLORS [phi:mode_mcchar::@2->mode_mcchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [229] phi mode_mcchar::cy#4 = 0 [phi:mode_mcchar::@2->mode_mcchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b3
    // [229] phi from mode_mcchar::@5 to mode_mcchar::@3 [phi:mode_mcchar::@5->mode_mcchar::@3]
  __b3_from___b5:
    // [229] phi mode_mcchar::ch#3 = mode_mcchar::ch#1 [phi:mode_mcchar::@5->mode_mcchar::@3#0] -- register_copy 
    // [229] phi mode_mcchar::col#3 = mode_mcchar::col#1 [phi:mode_mcchar::@5->mode_mcchar::@3#1] -- register_copy 
    // [229] phi mode_mcchar::cy#4 = mode_mcchar::cy#1 [phi:mode_mcchar::@5->mode_mcchar::@3#2] -- register_copy 
    jmp __b3
    // mode_mcchar::@3
  __b3:
    // [230] phi from mode_mcchar::@3 to mode_mcchar::@4 [phi:mode_mcchar::@3->mode_mcchar::@4]
  __b4_from___b3:
    // [230] phi mode_mcchar::ch#2 = mode_mcchar::ch#3 [phi:mode_mcchar::@3->mode_mcchar::@4#0] -- register_copy 
    // [230] phi mode_mcchar::col#2 = mode_mcchar::col#3 [phi:mode_mcchar::@3->mode_mcchar::@4#1] -- register_copy 
    // [230] phi mode_mcchar::cx#2 = 0 [phi:mode_mcchar::@3->mode_mcchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
    // [230] phi from mode_mcchar::@4 to mode_mcchar::@4 [phi:mode_mcchar::@4->mode_mcchar::@4]
  __b4_from___b4:
    // [230] phi mode_mcchar::ch#2 = mode_mcchar::ch#1 [phi:mode_mcchar::@4->mode_mcchar::@4#0] -- register_copy 
    // [230] phi mode_mcchar::col#2 = mode_mcchar::col#1 [phi:mode_mcchar::@4->mode_mcchar::@4#1] -- register_copy 
    // [230] phi mode_mcchar::cx#2 = mode_mcchar::cx#1 [phi:mode_mcchar::@4->mode_mcchar::@4#2] -- register_copy 
    jmp __b4
    // mode_mcchar::@4
  __b4:
    // [231] mode_mcchar::$2 = mode_mcchar::cx#2 + mode_mcchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // [232] mode_mcchar::$3 = mode_mcchar::$2 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [233] *mode_mcchar::col#2 = mode_mcchar::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // [234] mode_mcchar::col#1 = ++ mode_mcchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [235] mode_mcchar::$4 = mode_mcchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // [236] mode_mcchar::$5 = mode_mcchar::$4 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __5
    // [237] mode_mcchar::$6 = mode_mcchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [238] mode_mcchar::$7 = mode_mcchar::$5 | mode_mcchar::$6 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __5
    // [239] *mode_mcchar::ch#2 = mode_mcchar::$7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [240] mode_mcchar::ch#1 = ++ mode_mcchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [241] mode_mcchar::cx#1 = ++ mode_mcchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [242] if(mode_mcchar::cx#1!=$28) goto mode_mcchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4_from___b4
    jmp __b5
    // mode_mcchar::@5
  __b5:
    // [243] mode_mcchar::cy#1 = ++ mode_mcchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [244] if(mode_mcchar::cy#1!=$19) goto mode_mcchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3_from___b5
    // [245] phi from mode_mcchar::@5 to mode_mcchar::@6 [phi:mode_mcchar::@5->mode_mcchar::@6]
  __b6_from___b5:
    jmp __b6
    // mode_mcchar::@6
  __b6:
    // [246] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_mcchar::@6 to mode_ctrl [phi:mode_mcchar::@6->mode_ctrl]
  mode_ctrl_from___b6:
    // [666] phi dtv_control#146 = 0 [phi:mode_mcchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #0
    jsr mode_ctrl
    jmp __breturn
    // mode_mcchar::@return
  __breturn:
    // [247] return 
    rts
}
  // mode_stdbitmap
// Standard Bitmap Mode (LINEAR/HICOL/CHUNK/COLDIS/MCM/ECM = 0, BMM = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:2] & Matrix[9:0] & RowCounter[2:0] )
// Pixel Shifter (1)
//  - 0: 4bpp CharData[3:0]
//  - 1: 4bpp CharData[7:4]
mode_stdbitmap: {
    .const lines_cnt = 9
    .label SCREEN = $4000
    .label BITMAP = $6000
    .label col2 = $c
    // Bitmap Colors
    .label ch = 4
    .label cy = 6
    .label l = 7
    // [248] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [249] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
    // [250] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [251] *((byte*)CIA2) = 3^(byte)(word)mode_stdbitmap::BITMAP/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^BITMAP/$4000
    sta CIA2
    // [252] *VIC_CONTROL = VIC_BMM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [253] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // [254] *VIC_MEMORY = (byte)(word)mode_stdbitmap::BITMAP&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(BITMAP&$3fff)/$400
    sta VIC_MEMORY
    // [255] phi from mode_stdbitmap to mode_stdbitmap::@1 [phi:mode_stdbitmap->mode_stdbitmap::@1]
  __b1_from_mode_stdbitmap:
    // [255] phi mode_stdbitmap::i#2 = 0 [phi:mode_stdbitmap->mode_stdbitmap::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - default
    // [255] phi from mode_stdbitmap::@1 to mode_stdbitmap::@1 [phi:mode_stdbitmap::@1->mode_stdbitmap::@1]
  __b1_from___b1:
    // [255] phi mode_stdbitmap::i#2 = mode_stdbitmap::i#1 [phi:mode_stdbitmap::@1->mode_stdbitmap::@1#0] -- register_copy 
    jmp __b1
    // mode_stdbitmap::@1
  __b1:
    // [256] DTV_PALETTE[mode_stdbitmap::i#2] = DTV_PALETTE_DEFAULT[mode_stdbitmap::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // [257] mode_stdbitmap::i#1 = ++ mode_stdbitmap::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [258] if(mode_stdbitmap::i#1!=$10) goto mode_stdbitmap::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // mode_stdbitmap::@2
  __b2:
    // [259] *BG_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #BLACK
    sta BG_COLOR
    // [260] *BORDER_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDER_COLOR
    // [261] phi from mode_stdbitmap::@2 to mode_stdbitmap::@3 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3]
  __b3_from___b2:
    // [261] phi mode_stdbitmap::ch#3 = mode_stdbitmap::SCREEN [phi:mode_stdbitmap::@2->mode_stdbitmap::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [261] phi mode_stdbitmap::cy#4 = 0 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b3
    // [261] phi from mode_stdbitmap::@5 to mode_stdbitmap::@3 [phi:mode_stdbitmap::@5->mode_stdbitmap::@3]
  __b3_from___b5:
    // [261] phi mode_stdbitmap::ch#3 = mode_stdbitmap::ch#1 [phi:mode_stdbitmap::@5->mode_stdbitmap::@3#0] -- register_copy 
    // [261] phi mode_stdbitmap::cy#4 = mode_stdbitmap::cy#1 [phi:mode_stdbitmap::@5->mode_stdbitmap::@3#1] -- register_copy 
    jmp __b3
    // mode_stdbitmap::@3
  __b3:
    // [262] phi from mode_stdbitmap::@3 to mode_stdbitmap::@4 [phi:mode_stdbitmap::@3->mode_stdbitmap::@4]
  __b4_from___b3:
    // [262] phi mode_stdbitmap::ch#2 = mode_stdbitmap::ch#3 [phi:mode_stdbitmap::@3->mode_stdbitmap::@4#0] -- register_copy 
    // [262] phi mode_stdbitmap::cx#2 = 0 [phi:mode_stdbitmap::@3->mode_stdbitmap::@4#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
    // [262] phi from mode_stdbitmap::@4 to mode_stdbitmap::@4 [phi:mode_stdbitmap::@4->mode_stdbitmap::@4]
  __b4_from___b4:
    // [262] phi mode_stdbitmap::ch#2 = mode_stdbitmap::ch#1 [phi:mode_stdbitmap::@4->mode_stdbitmap::@4#0] -- register_copy 
    // [262] phi mode_stdbitmap::cx#2 = mode_stdbitmap::cx#1 [phi:mode_stdbitmap::@4->mode_stdbitmap::@4#1] -- register_copy 
    jmp __b4
    // mode_stdbitmap::@4
  __b4:
    // [263] mode_stdbitmap::$4 = mode_stdbitmap::cx#2 + mode_stdbitmap::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // [264] mode_stdbitmap::col#0 = mode_stdbitmap::$4 & $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
    // [265] mode_stdbitmap::col2#0 = $f - mode_stdbitmap::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc #$f
    sta.z col2
    // [266] mode_stdbitmap::$7 = mode_stdbitmap::col#0 << 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
    // [267] mode_stdbitmap::$8 = mode_stdbitmap::$7 | mode_stdbitmap::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z col2
    // [268] *mode_stdbitmap::ch#2 = mode_stdbitmap::$8 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [269] mode_stdbitmap::ch#1 = ++ mode_stdbitmap::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [270] mode_stdbitmap::cx#1 = ++ mode_stdbitmap::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [271] if(mode_stdbitmap::cx#1!=$28) goto mode_stdbitmap::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4_from___b4
    jmp __b5
    // mode_stdbitmap::@5
  __b5:
    // [272] mode_stdbitmap::cy#1 = ++ mode_stdbitmap::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [273] if(mode_stdbitmap::cy#1!=$19) goto mode_stdbitmap::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3_from___b5
    // [274] phi from mode_stdbitmap::@5 to mode_stdbitmap::@6 [phi:mode_stdbitmap::@5->mode_stdbitmap::@6]
  __b6_from___b5:
    jmp __b6
    // mode_stdbitmap::@6
  __b6:
    // [275] call bitmap_init 
  // Draw some lines on the bitmap
    // [722] phi from mode_stdbitmap::@6 to bitmap_init [phi:mode_stdbitmap::@6->bitmap_init]
  bitmap_init_from___b6:
    jsr bitmap_init
    // [276] phi from mode_stdbitmap::@6 to mode_stdbitmap::@10 [phi:mode_stdbitmap::@6->mode_stdbitmap::@10]
  __b10_from___b6:
    jmp __b10
    // mode_stdbitmap::@10
  __b10:
    // [277] call bitmap_clear 
    jsr bitmap_clear
    // [278] phi from mode_stdbitmap::@10 to mode_stdbitmap::@7 [phi:mode_stdbitmap::@10->mode_stdbitmap::@7]
  __b7_from___b10:
    // [278] phi mode_stdbitmap::l#2 = 0 [phi:mode_stdbitmap::@10->mode_stdbitmap::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b7
    // mode_stdbitmap::@7
  __b7:
    // [279] if(mode_stdbitmap::l#2<mode_stdbitmap::lines_cnt) goto mode_stdbitmap::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b8
    // [280] phi from mode_stdbitmap::@7 to mode_stdbitmap::@9 [phi:mode_stdbitmap::@7->mode_stdbitmap::@9]
  __b9_from___b7:
    jmp __b9
    // mode_stdbitmap::@9
  __b9:
    // [281] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_stdbitmap::@9 to mode_ctrl [phi:mode_stdbitmap::@9->mode_ctrl]
  mode_ctrl_from___b9:
    // [666] phi dtv_control#146 = 0 [phi:mode_stdbitmap::@9->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #0
    jsr mode_ctrl
    jmp __breturn
    // mode_stdbitmap::@return
  __breturn:
    // [282] return 
    rts
    // mode_stdbitmap::@8
  __b8:
    // [283] bitmap_line::x0#0 = mode_stdbitmap::lines_x[mode_stdbitmap::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x0
    // [284] bitmap_line::x1#0 = (mode_stdbitmap::lines_x+1)[mode_stdbitmap::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x+1,y
    sta.z bitmap_line.x1
    // [285] bitmap_line::y0#0 = mode_stdbitmap::lines_y[mode_stdbitmap::l#2] -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z l
    ldx lines_y,y
    // [286] bitmap_line::y1#0 = (mode_stdbitmap::lines_y+1)[mode_stdbitmap::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_y+1,y
    sta.z bitmap_line.y1
    // [287] call bitmap_line 
    jsr bitmap_line
    jmp __b11
    // mode_stdbitmap::@11
  __b11:
    // [288] mode_stdbitmap::l#1 = ++ mode_stdbitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [278] phi from mode_stdbitmap::@11 to mode_stdbitmap::@7 [phi:mode_stdbitmap::@11->mode_stdbitmap::@7]
  __b7_from___b11:
    // [278] phi mode_stdbitmap::l#2 = mode_stdbitmap::l#1 [phi:mode_stdbitmap::@11->mode_stdbitmap::@7#0] -- register_copy 
    jmp __b7
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
  // mode_hicolstdchar
// High Color Standard Character Mode (LINEAR/CHUNK/COLDIS/ECM/MCM/BMM = 0, HICOL = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// Pixel Shifter (1)
//  - 0: 8bpp BG_COLORor0[7:0]
//  - 1: 8bpp ColorData[7:0]
mode_hicolstdchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label __3 = $d
    // Char Colors and screen chars
    .label col = 8
    .label ch = 4
    .label cy = 7
    // [289] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [290] *DTV_COLOR_BANK_LO = <(word)mode_hicolstdchar::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // [291] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [292] *DTV_CONTROL = DTV_HIGHCOLOR -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
    // [293] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [294] *((byte*)CIA2) = 3^(byte)(word)mode_hicolstdchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // [295] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [296] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // [297] *VIC_MEMORY = (byte)(word)mode_hicolstdchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [298] phi from mode_hicolstdchar to mode_hicolstdchar::@1 [phi:mode_hicolstdchar->mode_hicolstdchar::@1]
  __b1_from_mode_hicolstdchar:
    // [298] phi mode_hicolstdchar::i#2 = 0 [phi:mode_hicolstdchar->mode_hicolstdchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - Grey Tones
    // [298] phi from mode_hicolstdchar::@1 to mode_hicolstdchar::@1 [phi:mode_hicolstdchar::@1->mode_hicolstdchar::@1]
  __b1_from___b1:
    // [298] phi mode_hicolstdchar::i#2 = mode_hicolstdchar::i#1 [phi:mode_hicolstdchar::@1->mode_hicolstdchar::@1#0] -- register_copy 
    jmp __b1
    // mode_hicolstdchar::@1
  __b1:
    // [299] DTV_PALETTE[mode_hicolstdchar::i#2] = mode_hicolstdchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // [300] mode_hicolstdchar::i#1 = ++ mode_hicolstdchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [301] if(mode_hicolstdchar::i#1!=$10) goto mode_hicolstdchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // mode_hicolstdchar::@2
  __b2:
    // [302] *BG_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BG_COLOR
    // [303] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDER_COLOR
    // [304] phi from mode_hicolstdchar::@2 to mode_hicolstdchar::@3 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3]
  __b3_from___b2:
    // [304] phi mode_hicolstdchar::ch#3 = mode_hicolstdchar::SCREEN [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [304] phi mode_hicolstdchar::col#3 = mode_hicolstdchar::COLORS [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [304] phi mode_hicolstdchar::cy#4 = 0 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b3
    // [304] phi from mode_hicolstdchar::@5 to mode_hicolstdchar::@3 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@3]
  __b3_from___b5:
    // [304] phi mode_hicolstdchar::ch#3 = mode_hicolstdchar::ch#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@3#0] -- register_copy 
    // [304] phi mode_hicolstdchar::col#3 = mode_hicolstdchar::col#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@3#1] -- register_copy 
    // [304] phi mode_hicolstdchar::cy#4 = mode_hicolstdchar::cy#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@3#2] -- register_copy 
    jmp __b3
    // mode_hicolstdchar::@3
  __b3:
    // [305] phi from mode_hicolstdchar::@3 to mode_hicolstdchar::@4 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@4]
  __b4_from___b3:
    // [305] phi mode_hicolstdchar::ch#2 = mode_hicolstdchar::ch#3 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@4#0] -- register_copy 
    // [305] phi mode_hicolstdchar::col#2 = mode_hicolstdchar::col#3 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@4#1] -- register_copy 
    // [305] phi mode_hicolstdchar::cx#2 = 0 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
    // [305] phi from mode_hicolstdchar::@4 to mode_hicolstdchar::@4 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@4]
  __b4_from___b4:
    // [305] phi mode_hicolstdchar::ch#2 = mode_hicolstdchar::ch#1 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@4#0] -- register_copy 
    // [305] phi mode_hicolstdchar::col#2 = mode_hicolstdchar::col#1 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@4#1] -- register_copy 
    // [305] phi mode_hicolstdchar::cx#2 = mode_hicolstdchar::cx#1 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@4#2] -- register_copy 
    jmp __b4
    // mode_hicolstdchar::@4
  __b4:
    // [306] mode_hicolstdchar::$2 = mode_hicolstdchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // [307] mode_hicolstdchar::$3 = mode_hicolstdchar::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // [308] mode_hicolstdchar::$4 = mode_hicolstdchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [309] mode_hicolstdchar::v#0 = mode_hicolstdchar::$3 | mode_hicolstdchar::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // [310] *mode_hicolstdchar::col#2 = mode_hicolstdchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // [311] mode_hicolstdchar::col#1 = ++ mode_hicolstdchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [312] *mode_hicolstdchar::ch#2 = mode_hicolstdchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [313] mode_hicolstdchar::ch#1 = ++ mode_hicolstdchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [314] mode_hicolstdchar::cx#1 = ++ mode_hicolstdchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [315] if(mode_hicolstdchar::cx#1!=$28) goto mode_hicolstdchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4_from___b4
    jmp __b5
    // mode_hicolstdchar::@5
  __b5:
    // [316] mode_hicolstdchar::cy#1 = ++ mode_hicolstdchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [317] if(mode_hicolstdchar::cy#1!=$19) goto mode_hicolstdchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3_from___b5
    // [318] phi from mode_hicolstdchar::@5 to mode_hicolstdchar::@6 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@6]
  __b6_from___b5:
    jmp __b6
    // mode_hicolstdchar::@6
  __b6:
    // [319] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_hicolstdchar::@6 to mode_ctrl [phi:mode_hicolstdchar::@6->mode_ctrl]
  mode_ctrl_from___b6:
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR [phi:mode_hicolstdchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR
    jsr mode_ctrl
    jmp __breturn
    // mode_hicolstdchar::@return
  __breturn:
    // [320] return 
    rts
}
  // mode_hicolecmchar
// High Color Extended Background Color Character Mode (LINEAR/CHUNK/COLDIS/MCM/BMM = 0, ECM/HICOL = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & "00" & CharData[5:0] & RowCounter[2:0] )
// GfxData Pixel Shifter (1)
//  - 0: 8bpp Background Color
//    - CharData[7:6] 00: 8bpp BG_COLORor0[7:0]
//    - CharData[7:6] 01: 8bpp BG_COLORor1[7:0]
//    - CharData[7:6] 10: 8bpp BG_COLORor2[7:0]
//    - CharData[7:6] 11: 8bpp BG_COLORor3[7:0]
//  - 1: 8bpp ColorData[7:0]
mode_hicolecmchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label __3 = $d
    // Char Colors and screen chars
    .label col = 8
    .label ch = 4
    .label cy = 7
    // [321] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [322] *DTV_COLOR_BANK_LO = <(word)mode_hicolecmchar::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // [323] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [324] *DTV_CONTROL = DTV_HIGHCOLOR -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
    // [325] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [326] *((byte*)CIA2) = 3^(byte)(word)mode_hicolecmchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // [327] *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|VIC_ECM|3
    sta VIC_CONTROL
    // [328] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // [329] *VIC_MEMORY = (byte)(word)mode_hicolecmchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [330] phi from mode_hicolecmchar to mode_hicolecmchar::@1 [phi:mode_hicolecmchar->mode_hicolecmchar::@1]
  __b1_from_mode_hicolecmchar:
    // [330] phi mode_hicolecmchar::i#2 = 0 [phi:mode_hicolecmchar->mode_hicolecmchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - Grey Tones
    // [330] phi from mode_hicolecmchar::@1 to mode_hicolecmchar::@1 [phi:mode_hicolecmchar::@1->mode_hicolecmchar::@1]
  __b1_from___b1:
    // [330] phi mode_hicolecmchar::i#2 = mode_hicolecmchar::i#1 [phi:mode_hicolecmchar::@1->mode_hicolecmchar::@1#0] -- register_copy 
    jmp __b1
    // mode_hicolecmchar::@1
  __b1:
    // [331] DTV_PALETTE[mode_hicolecmchar::i#2] = mode_hicolecmchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // [332] mode_hicolecmchar::i#1 = ++ mode_hicolecmchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [333] if(mode_hicolecmchar::i#1!=$10) goto mode_hicolecmchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // mode_hicolecmchar::@2
  __b2:
    // [334] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // [335] *BG_COLOR = $50 -- _deref_pbuc1=vbuc2 
    lda #$50
    sta BG_COLOR
    // [336] *BG_COLOR1 = $54 -- _deref_pbuc1=vbuc2 
    lda #$54
    sta BG_COLOR1
    // [337] *BG_COLOR2 = $58 -- _deref_pbuc1=vbuc2 
    lda #$58
    sta BG_COLOR2
    // [338] *BG_COLOR3 = $5c -- _deref_pbuc1=vbuc2 
    lda #$5c
    sta BG_COLOR3
    // [339] phi from mode_hicolecmchar::@2 to mode_hicolecmchar::@3 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3]
  __b3_from___b2:
    // [339] phi mode_hicolecmchar::ch#3 = mode_hicolecmchar::SCREEN [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [339] phi mode_hicolecmchar::col#3 = mode_hicolecmchar::COLORS [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [339] phi mode_hicolecmchar::cy#4 = 0 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b3
    // [339] phi from mode_hicolecmchar::@5 to mode_hicolecmchar::@3 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@3]
  __b3_from___b5:
    // [339] phi mode_hicolecmchar::ch#3 = mode_hicolecmchar::ch#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@3#0] -- register_copy 
    // [339] phi mode_hicolecmchar::col#3 = mode_hicolecmchar::col#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@3#1] -- register_copy 
    // [339] phi mode_hicolecmchar::cy#4 = mode_hicolecmchar::cy#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@3#2] -- register_copy 
    jmp __b3
    // mode_hicolecmchar::@3
  __b3:
    // [340] phi from mode_hicolecmchar::@3 to mode_hicolecmchar::@4 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@4]
  __b4_from___b3:
    // [340] phi mode_hicolecmchar::ch#2 = mode_hicolecmchar::ch#3 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@4#0] -- register_copy 
    // [340] phi mode_hicolecmchar::col#2 = mode_hicolecmchar::col#3 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@4#1] -- register_copy 
    // [340] phi mode_hicolecmchar::cx#2 = 0 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
    // [340] phi from mode_hicolecmchar::@4 to mode_hicolecmchar::@4 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@4]
  __b4_from___b4:
    // [340] phi mode_hicolecmchar::ch#2 = mode_hicolecmchar::ch#1 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@4#0] -- register_copy 
    // [340] phi mode_hicolecmchar::col#2 = mode_hicolecmchar::col#1 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@4#1] -- register_copy 
    // [340] phi mode_hicolecmchar::cx#2 = mode_hicolecmchar::cx#1 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@4#2] -- register_copy 
    jmp __b4
    // mode_hicolecmchar::@4
  __b4:
    // [341] mode_hicolecmchar::$2 = mode_hicolecmchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // [342] mode_hicolecmchar::$3 = mode_hicolecmchar::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // [343] mode_hicolecmchar::$4 = mode_hicolecmchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [344] mode_hicolecmchar::v#0 = mode_hicolecmchar::$3 | mode_hicolecmchar::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // [345] *mode_hicolecmchar::col#2 = mode_hicolecmchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // [346] mode_hicolecmchar::col#1 = ++ mode_hicolecmchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [347] *mode_hicolecmchar::ch#2 = mode_hicolecmchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [348] mode_hicolecmchar::ch#1 = ++ mode_hicolecmchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [349] mode_hicolecmchar::cx#1 = ++ mode_hicolecmchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [350] if(mode_hicolecmchar::cx#1!=$28) goto mode_hicolecmchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4_from___b4
    jmp __b5
    // mode_hicolecmchar::@5
  __b5:
    // [351] mode_hicolecmchar::cy#1 = ++ mode_hicolecmchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [352] if(mode_hicolecmchar::cy#1!=$19) goto mode_hicolecmchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3_from___b5
    // [353] phi from mode_hicolecmchar::@5 to mode_hicolecmchar::@6 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@6]
  __b6_from___b5:
    jmp __b6
    // mode_hicolecmchar::@6
  __b6:
    // [354] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_hicolecmchar::@6 to mode_ctrl [phi:mode_hicolecmchar::@6->mode_ctrl]
  mode_ctrl_from___b6:
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR [phi:mode_hicolecmchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR
    jsr mode_ctrl
    jmp __breturn
    // mode_hicolecmchar::@return
  __breturn:
    // [355] return 
    rts
}
  // mode_hicolmcchar
// High Color Multicolor Character Mode (LINEAR/CHUNK/COLDIS/BMM/ECM = 0, MCM/HICOL = 1)
// Resolution: 160x200 (320x200)
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
//GfxData Pixel Shifter (1) if ColorData[3:3] = 0:
// - 0: 8bpp BG_COLORor0[7:0]
// - 1: 8bpp ColorData[7:4] "0" & Color[2:0]
//GfxData Pixel Shifter (2) if ColorData[3:3] = 1:
// - 00: 8bpp BG_COLORor0[7:0]
// - 01: 8bpp BG_COLORor1[7:0]
// - 10: 8bpp BG_COLORor2[7:0]
// - 11: 8bpp ColorData[7:4] "0" & Color[2:0]
mode_hicolmcchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label __3 = $e
    // Char Colors and screen chars
    .label col = 8
    .label ch = 4
    .label cy = 7
    // [356] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [357] *DTV_COLOR_BANK_LO = <(word)mode_hicolmcchar::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // [358] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [359] *DTV_CONTROL = DTV_HIGHCOLOR -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
    // [360] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [361] *((byte*)CIA2) = 3^(byte)(word)mode_hicolmcchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // [362] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [363] *VIC_CONTROL2 = VIC_CSEL|VIC_MCM -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL|VIC_MCM
    sta VIC_CONTROL2
    // [364] *VIC_MEMORY = (byte)(word)mode_hicolmcchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [365] phi from mode_hicolmcchar to mode_hicolmcchar::@1 [phi:mode_hicolmcchar->mode_hicolmcchar::@1]
  __b1_from_mode_hicolmcchar:
    // [365] phi mode_hicolmcchar::i#2 = 0 [phi:mode_hicolmcchar->mode_hicolmcchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - Grey Tones
    // [365] phi from mode_hicolmcchar::@1 to mode_hicolmcchar::@1 [phi:mode_hicolmcchar::@1->mode_hicolmcchar::@1]
  __b1_from___b1:
    // [365] phi mode_hicolmcchar::i#2 = mode_hicolmcchar::i#1 [phi:mode_hicolmcchar::@1->mode_hicolmcchar::@1#0] -- register_copy 
    jmp __b1
    // mode_hicolmcchar::@1
  __b1:
    // [366] DTV_PALETTE[mode_hicolmcchar::i#2] = mode_hicolmcchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // [367] mode_hicolmcchar::i#1 = ++ mode_hicolmcchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [368] if(mode_hicolmcchar::i#1!=$10) goto mode_hicolmcchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // mode_hicolmcchar::@2
  __b2:
    // [369] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // [370] *BG_COLOR = $50 -- _deref_pbuc1=vbuc2 
    lda #$50
    sta BG_COLOR
    // [371] *BG_COLOR1 = $54 -- _deref_pbuc1=vbuc2 
    lda #$54
    sta BG_COLOR1
    // [372] *BG_COLOR2 = $58 -- _deref_pbuc1=vbuc2 
    lda #$58
    sta BG_COLOR2
    // [373] phi from mode_hicolmcchar::@2 to mode_hicolmcchar::@3 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3]
  __b3_from___b2:
    // [373] phi mode_hicolmcchar::ch#3 = mode_hicolmcchar::SCREEN [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [373] phi mode_hicolmcchar::col#3 = mode_hicolmcchar::COLORS [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [373] phi mode_hicolmcchar::cy#4 = 0 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b3
    // [373] phi from mode_hicolmcchar::@5 to mode_hicolmcchar::@3 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@3]
  __b3_from___b5:
    // [373] phi mode_hicolmcchar::ch#3 = mode_hicolmcchar::ch#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@3#0] -- register_copy 
    // [373] phi mode_hicolmcchar::col#3 = mode_hicolmcchar::col#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@3#1] -- register_copy 
    // [373] phi mode_hicolmcchar::cy#4 = mode_hicolmcchar::cy#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@3#2] -- register_copy 
    jmp __b3
    // mode_hicolmcchar::@3
  __b3:
    // [374] phi from mode_hicolmcchar::@3 to mode_hicolmcchar::@4 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@4]
  __b4_from___b3:
    // [374] phi mode_hicolmcchar::ch#2 = mode_hicolmcchar::ch#3 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@4#0] -- register_copy 
    // [374] phi mode_hicolmcchar::col#2 = mode_hicolmcchar::col#3 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@4#1] -- register_copy 
    // [374] phi mode_hicolmcchar::cx#2 = 0 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
    // [374] phi from mode_hicolmcchar::@4 to mode_hicolmcchar::@4 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@4]
  __b4_from___b4:
    // [374] phi mode_hicolmcchar::ch#2 = mode_hicolmcchar::ch#1 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@4#0] -- register_copy 
    // [374] phi mode_hicolmcchar::col#2 = mode_hicolmcchar::col#1 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@4#1] -- register_copy 
    // [374] phi mode_hicolmcchar::cx#2 = mode_hicolmcchar::cx#1 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@4#2] -- register_copy 
    jmp __b4
    // mode_hicolmcchar::@4
  __b4:
    // [375] mode_hicolmcchar::$2 = mode_hicolmcchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // [376] mode_hicolmcchar::$3 = mode_hicolmcchar::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // [377] mode_hicolmcchar::$4 = mode_hicolmcchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [378] mode_hicolmcchar::v#0 = mode_hicolmcchar::$3 | mode_hicolmcchar::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // [379] *mode_hicolmcchar::col#2 = mode_hicolmcchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // [380] mode_hicolmcchar::col#1 = ++ mode_hicolmcchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [381] *mode_hicolmcchar::ch#2 = mode_hicolmcchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [382] mode_hicolmcchar::ch#1 = ++ mode_hicolmcchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [383] mode_hicolmcchar::cx#1 = ++ mode_hicolmcchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [384] if(mode_hicolmcchar::cx#1!=$28) goto mode_hicolmcchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4_from___b4
    jmp __b5
    // mode_hicolmcchar::@5
  __b5:
    // [385] mode_hicolmcchar::cy#1 = ++ mode_hicolmcchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [386] if(mode_hicolmcchar::cy#1!=$19) goto mode_hicolmcchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3_from___b5
    // [387] phi from mode_hicolmcchar::@5 to mode_hicolmcchar::@6 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@6]
  __b6_from___b5:
    jmp __b6
    // mode_hicolmcchar::@6
  __b6:
    // [388] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_hicolmcchar::@6 to mode_ctrl [phi:mode_hicolmcchar::@6->mode_ctrl]
  mode_ctrl_from___b6:
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR [phi:mode_hicolmcchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR
    jsr mode_ctrl
    jmp __breturn
    // mode_hicolmcchar::@return
  __breturn:
    // [389] return 
    rts
}
  // mode_sixsfred2
// Sixs Fred Mode 2 - 8bpp Packed Bitmap - Generated from the two DTV linear graphics plane counters
// Two Plane MultiColor Bitmap - 8bpp Packed Bitmap (CHUNK/COLDIS/HICOL = 0, ECM/BMM/MCM/LINEAR = 1)
// Resolution: 160x200
// Linear Adressing
// PlaneA Pixel Shifter (2), PlaneB Pixel Shifter (2):
// - 8bpp color (PlaneB[1:0],ColorData[5:4],PlaneA[1:0],ColorData[1:0])
mode_sixsfred2: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label __3 = $e
    // Colors for high 4 bits of 8bpp
    .label col = 8
    .label cy = 6
    // Graphics for Plane A () - horizontal stripes every 2 pixels
    .label gfxa = 4
    .label ay = 7
    // Graphics for Plane B - vertical stripes every 2 pixels
    .label gfxb = $11
    .label by = $a
    // [390] *DTV_CONTROL = DTV_LINEAR -- _deref_pbuc1=vbuc2 
    lda #DTV_LINEAR
    sta DTV_CONTROL
    // [391] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [392] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
    // [393] *DTV_PLANEA_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #0
    sta DTV_PLANEA_START_LO
    // [394] *DTV_PLANEA_START_MI = >mode_sixsfred2::PLANEA -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
    // [395] *DTV_PLANEA_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [396] *DTV_PLANEA_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
    // [397] *DTV_PLANEA_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
    // [398] *DTV_PLANEA_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // [399] *DTV_PLANEB_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #0
    sta DTV_PLANEB_START_LO
    // [400] *DTV_PLANEB_START_MI = >mode_sixsfred2::PLANEB -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
    // [401] *DTV_PLANEB_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
    // [402] *DTV_PLANEB_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
    // [403] *DTV_PLANEB_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
    // [404] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // [405] *DTV_COLOR_BANK_LO = <mode_sixsfred2::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // [406] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [407] phi from mode_sixsfred2 to mode_sixsfred2::@1 [phi:mode_sixsfred2->mode_sixsfred2::@1]
  __b1_from_mode_sixsfred2:
    // [407] phi mode_sixsfred2::i#2 = 0 [phi:mode_sixsfred2->mode_sixsfred2::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - Grey Tones
    // [407] phi from mode_sixsfred2::@1 to mode_sixsfred2::@1 [phi:mode_sixsfred2::@1->mode_sixsfred2::@1]
  __b1_from___b1:
    // [407] phi mode_sixsfred2::i#2 = mode_sixsfred2::i#1 [phi:mode_sixsfred2::@1->mode_sixsfred2::@1#0] -- register_copy 
    jmp __b1
    // mode_sixsfred2::@1
  __b1:
    // [408] DTV_PALETTE[mode_sixsfred2::i#2] = mode_sixsfred2::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // [409] mode_sixsfred2::i#1 = ++ mode_sixsfred2::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [410] if(mode_sixsfred2::i#1!=$10) goto mode_sixsfred2::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // mode_sixsfred2::@2
  __b2:
    // [411] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // [412] phi from mode_sixsfred2::@2 to mode_sixsfred2::@3 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3]
  __b3_from___b2:
    // [412] phi mode_sixsfred2::col#3 = mode_sixsfred2::COLORS [phi:mode_sixsfred2::@2->mode_sixsfred2::@3#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [412] phi mode_sixsfred2::cy#4 = 0 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b3
    // [412] phi from mode_sixsfred2::@5 to mode_sixsfred2::@3 [phi:mode_sixsfred2::@5->mode_sixsfred2::@3]
  __b3_from___b5:
    // [412] phi mode_sixsfred2::col#3 = mode_sixsfred2::col#1 [phi:mode_sixsfred2::@5->mode_sixsfred2::@3#0] -- register_copy 
    // [412] phi mode_sixsfred2::cy#4 = mode_sixsfred2::cy#1 [phi:mode_sixsfred2::@5->mode_sixsfred2::@3#1] -- register_copy 
    jmp __b3
    // mode_sixsfred2::@3
  __b3:
    // [413] phi from mode_sixsfred2::@3 to mode_sixsfred2::@4 [phi:mode_sixsfred2::@3->mode_sixsfred2::@4]
  __b4_from___b3:
    // [413] phi mode_sixsfred2::col#2 = mode_sixsfred2::col#3 [phi:mode_sixsfred2::@3->mode_sixsfred2::@4#0] -- register_copy 
    // [413] phi mode_sixsfred2::cx#2 = 0 [phi:mode_sixsfred2::@3->mode_sixsfred2::@4#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
    // [413] phi from mode_sixsfred2::@4 to mode_sixsfred2::@4 [phi:mode_sixsfred2::@4->mode_sixsfred2::@4]
  __b4_from___b4:
    // [413] phi mode_sixsfred2::col#2 = mode_sixsfred2::col#1 [phi:mode_sixsfred2::@4->mode_sixsfred2::@4#0] -- register_copy 
    // [413] phi mode_sixsfred2::cx#2 = mode_sixsfred2::cx#1 [phi:mode_sixsfred2::@4->mode_sixsfred2::@4#1] -- register_copy 
    jmp __b4
    // mode_sixsfred2::@4
  __b4:
    // [414] mode_sixsfred2::$2 = mode_sixsfred2::cx#2 & 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
    // [415] mode_sixsfred2::$3 = mode_sixsfred2::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // [416] mode_sixsfred2::$4 = mode_sixsfred2::cy#4 & 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and.z cy
    // [417] mode_sixsfred2::$5 = mode_sixsfred2::$3 | mode_sixsfred2::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // [418] *mode_sixsfred2::col#2 = mode_sixsfred2::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // [419] mode_sixsfred2::col#1 = ++ mode_sixsfred2::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [420] mode_sixsfred2::cx#1 = ++ mode_sixsfred2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [421] if(mode_sixsfred2::cx#1!=$28) goto mode_sixsfred2::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4_from___b4
    jmp __b5
    // mode_sixsfred2::@5
  __b5:
    // [422] mode_sixsfred2::cy#1 = ++ mode_sixsfred2::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [423] if(mode_sixsfred2::cy#1!=$19) goto mode_sixsfred2::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3_from___b5
    // [424] phi from mode_sixsfred2::@5 to mode_sixsfred2::@6 [phi:mode_sixsfred2::@5->mode_sixsfred2::@6]
  __b6_from___b5:
    // [424] phi mode_sixsfred2::gfxa#3 = mode_sixsfred2::PLANEA [phi:mode_sixsfred2::@5->mode_sixsfred2::@6#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta.z gfxa
    lda #>PLANEA
    sta.z gfxa+1
    // [424] phi mode_sixsfred2::ay#4 = 0 [phi:mode_sixsfred2::@5->mode_sixsfred2::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b6
    // [424] phi from mode_sixsfred2::@8 to mode_sixsfred2::@6 [phi:mode_sixsfred2::@8->mode_sixsfred2::@6]
  __b6_from___b8:
    // [424] phi mode_sixsfred2::gfxa#3 = mode_sixsfred2::gfxa#1 [phi:mode_sixsfred2::@8->mode_sixsfred2::@6#0] -- register_copy 
    // [424] phi mode_sixsfred2::ay#4 = mode_sixsfred2::ay#1 [phi:mode_sixsfred2::@8->mode_sixsfred2::@6#1] -- register_copy 
    jmp __b6
    // mode_sixsfred2::@6
  __b6:
    // [425] phi from mode_sixsfred2::@6 to mode_sixsfred2::@7 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7]
  __b7_from___b6:
    // [425] phi mode_sixsfred2::ax#2 = 0 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7#0] -- vbuxx=vbuc1 
    ldx #0
    // [425] phi mode_sixsfred2::gfxa#2 = mode_sixsfred2::gfxa#3 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7#1] -- register_copy 
    jmp __b7
    // [425] phi from mode_sixsfred2::@7 to mode_sixsfred2::@7 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7]
  __b7_from___b7:
    // [425] phi mode_sixsfred2::ax#2 = mode_sixsfred2::ax#1 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7#0] -- register_copy 
    // [425] phi mode_sixsfred2::gfxa#2 = mode_sixsfred2::gfxa#1 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7#1] -- register_copy 
    jmp __b7
    // mode_sixsfred2::@7
  __b7:
    // [426] mode_sixsfred2::$8 = mode_sixsfred2::ay#4 >> 1 -- vbuaa=vbuz1_ror_1 
    lda.z ay
    lsr
    // [427] mode_sixsfred2::row#0 = mode_sixsfred2::$8 & 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
    // [428] *mode_sixsfred2::gfxa#2 = mode_sixsfred2::row_bitmask[mode_sixsfred2::row#0] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // [429] mode_sixsfred2::gfxa#1 = ++ mode_sixsfred2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [430] mode_sixsfred2::ax#1 = ++ mode_sixsfred2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [431] if(mode_sixsfred2::ax#1!=$28) goto mode_sixsfred2::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b7_from___b7
    jmp __b8
    // mode_sixsfred2::@8
  __b8:
    // [432] mode_sixsfred2::ay#1 = ++ mode_sixsfred2::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [433] if(mode_sixsfred2::ay#1!=$c8) goto mode_sixsfred2::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b6_from___b8
    // [434] phi from mode_sixsfred2::@8 to mode_sixsfred2::@9 [phi:mode_sixsfred2::@8->mode_sixsfred2::@9]
  __b9_from___b8:
    // [434] phi mode_sixsfred2::by#4 = 0 [phi:mode_sixsfred2::@8->mode_sixsfred2::@9#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [434] phi mode_sixsfred2::gfxb#3 = mode_sixsfred2::PLANEB [phi:mode_sixsfred2::@8->mode_sixsfred2::@9#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta.z gfxb
    lda #>PLANEB
    sta.z gfxb+1
    jmp __b9
    // [434] phi from mode_sixsfred2::@11 to mode_sixsfred2::@9 [phi:mode_sixsfred2::@11->mode_sixsfred2::@9]
  __b9_from___b11:
    // [434] phi mode_sixsfred2::by#4 = mode_sixsfred2::by#1 [phi:mode_sixsfred2::@11->mode_sixsfred2::@9#0] -- register_copy 
    // [434] phi mode_sixsfred2::gfxb#3 = mode_sixsfred2::gfxb#1 [phi:mode_sixsfred2::@11->mode_sixsfred2::@9#1] -- register_copy 
    jmp __b9
    // mode_sixsfred2::@9
  __b9:
    // [435] phi from mode_sixsfred2::@9 to mode_sixsfred2::@10 [phi:mode_sixsfred2::@9->mode_sixsfred2::@10]
  __b10_from___b9:
    // [435] phi mode_sixsfred2::bx#2 = 0 [phi:mode_sixsfred2::@9->mode_sixsfred2::@10#0] -- vbuxx=vbuc1 
    ldx #0
    // [435] phi mode_sixsfred2::gfxb#2 = mode_sixsfred2::gfxb#3 [phi:mode_sixsfred2::@9->mode_sixsfred2::@10#1] -- register_copy 
    jmp __b10
    // [435] phi from mode_sixsfred2::@10 to mode_sixsfred2::@10 [phi:mode_sixsfred2::@10->mode_sixsfred2::@10]
  __b10_from___b10:
    // [435] phi mode_sixsfred2::bx#2 = mode_sixsfred2::bx#1 [phi:mode_sixsfred2::@10->mode_sixsfred2::@10#0] -- register_copy 
    // [435] phi mode_sixsfred2::gfxb#2 = mode_sixsfred2::gfxb#1 [phi:mode_sixsfred2::@10->mode_sixsfred2::@10#1] -- register_copy 
    jmp __b10
    // mode_sixsfred2::@10
  __b10:
    // [436] *mode_sixsfred2::gfxb#2 = $1b -- _deref_pbuz1=vbuc1 
    lda #$1b
    ldy #0
    sta (gfxb),y
    // [437] mode_sixsfred2::gfxb#1 = ++ mode_sixsfred2::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [438] mode_sixsfred2::bx#1 = ++ mode_sixsfred2::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [439] if(mode_sixsfred2::bx#1!=$28) goto mode_sixsfred2::@10 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b10_from___b10
    jmp __b11
    // mode_sixsfred2::@11
  __b11:
    // [440] mode_sixsfred2::by#1 = ++ mode_sixsfred2::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [441] if(mode_sixsfred2::by#1!=$c8) goto mode_sixsfred2::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b9_from___b11
    // [442] phi from mode_sixsfred2::@11 to mode_sixsfred2::@12 [phi:mode_sixsfred2::@11->mode_sixsfred2::@12]
  __b12_from___b11:
    jmp __b12
    // mode_sixsfred2::@12
  __b12:
    // [443] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_sixsfred2::@12 to mode_ctrl [phi:mode_sixsfred2::@12->mode_ctrl]
  mode_ctrl_from___b12:
    // [666] phi dtv_control#146 = DTV_LINEAR [phi:mode_sixsfred2::@12->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_LINEAR
    jsr mode_ctrl
    jmp __breturn
    // mode_sixsfred2::@return
  __breturn:
    // [444] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
  // mode_twoplanebitmap
// Two Plane Bitmap - generated from the two DTV linear graphics plane counters
// Two Plane Bitmap Mode (CHUNK/COLDIS/MCM = 0, ECM/BMM/HICOL/LINEAR = 1)
// Resolution: 320x200
// Linear Adressing
// GfxData/PlaneA Pixel Shifter (1), CharData/PlaneB Pixel Shifter (1):
// - Plane A = 0 Plane B = 0: 8bpp BG_COLORor0[7:0]
// - Plane A = 0 Plane B = 1: 8bpp "0000" & ColorData[7:4]
// - Plane A = 1 Plane B = 0: 8bpp "0000" & ColorData[3:0]
// - Plane A = 1 Plane B = 1: 8bpp BG_COLORor1[7:0]
mode_twoplanebitmap: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label __3 = $f
    // Color for bits 11
    // Colors for bits 01 / 10
    .label col = $11
    .label cy = 6
    // Graphics for Plane A - horizontal stripes
    .label gfxa = $13
    .label ay = 7
    // Graphics for Plane B - vertical stripes
    .label gfxb = 8
    .label by = $a
    // [445] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta DTV_CONTROL
    // [446] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [447] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // [448] *DTV_PLANEA_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #0
    sta DTV_PLANEA_START_LO
    // [449] *DTV_PLANEA_START_MI = >mode_twoplanebitmap::PLANEA -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
    // [450] *DTV_PLANEA_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [451] *DTV_PLANEA_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
    // [452] *DTV_PLANEA_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
    // [453] *DTV_PLANEA_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // [454] *DTV_PLANEB_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #0
    sta DTV_PLANEB_START_LO
    // [455] *DTV_PLANEB_START_MI = >mode_twoplanebitmap::PLANEB -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
    // [456] *DTV_PLANEB_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
    // [457] *DTV_PLANEB_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
    // [458] *DTV_PLANEB_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
    // [459] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // [460] *DTV_COLOR_BANK_LO = <mode_twoplanebitmap::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // [461] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [462] phi from mode_twoplanebitmap to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1]
  __b1_from_mode_twoplanebitmap:
    // [462] phi mode_twoplanebitmap::i#2 = 0 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - Grey Tones
    // [462] phi from mode_twoplanebitmap::@1 to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1]
  __b1_from___b1:
    // [462] phi mode_twoplanebitmap::i#2 = mode_twoplanebitmap::i#1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1#0] -- register_copy 
    jmp __b1
    // mode_twoplanebitmap::@1
  __b1:
    // [463] DTV_PALETTE[mode_twoplanebitmap::i#2] = mode_twoplanebitmap::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // [464] mode_twoplanebitmap::i#1 = ++ mode_twoplanebitmap::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [465] if(mode_twoplanebitmap::i#1!=$10) goto mode_twoplanebitmap::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // mode_twoplanebitmap::@2
  __b2:
    // [466] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // [467] *BG_COLOR = $70 -- _deref_pbuc1=vbuc2 
    lda #$70
    sta BG_COLOR
    // [468] *BG_COLOR1 = $d4 -- _deref_pbuc1=vbuc2 
    // Color for bits 00
    lda #$d4
    sta BG_COLOR1
    // [469] phi from mode_twoplanebitmap::@2 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3]
  __b3_from___b2:
    // [469] phi mode_twoplanebitmap::col#3 = mode_twoplanebitmap::COLORS [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [469] phi mode_twoplanebitmap::cy#4 = 0 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b3
    // [469] phi from mode_twoplanebitmap::@5 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3]
  __b3_from___b5:
    // [469] phi mode_twoplanebitmap::col#3 = mode_twoplanebitmap::col#1 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3#0] -- register_copy 
    // [469] phi mode_twoplanebitmap::cy#4 = mode_twoplanebitmap::cy#1 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3#1] -- register_copy 
    jmp __b3
    // mode_twoplanebitmap::@3
  __b3:
    // [470] phi from mode_twoplanebitmap::@3 to mode_twoplanebitmap::@4 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@4]
  __b4_from___b3:
    // [470] phi mode_twoplanebitmap::col#2 = mode_twoplanebitmap::col#3 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@4#0] -- register_copy 
    // [470] phi mode_twoplanebitmap::cx#2 = 0 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@4#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
    // [470] phi from mode_twoplanebitmap::@4 to mode_twoplanebitmap::@4 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@4]
  __b4_from___b4:
    // [470] phi mode_twoplanebitmap::col#2 = mode_twoplanebitmap::col#1 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@4#0] -- register_copy 
    // [470] phi mode_twoplanebitmap::cx#2 = mode_twoplanebitmap::cx#1 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@4#1] -- register_copy 
    jmp __b4
    // mode_twoplanebitmap::@4
  __b4:
    // [471] mode_twoplanebitmap::$2 = mode_twoplanebitmap::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // [472] mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // [473] mode_twoplanebitmap::$4 = mode_twoplanebitmap::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [474] mode_twoplanebitmap::$5 = mode_twoplanebitmap::$3 | mode_twoplanebitmap::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // [475] *mode_twoplanebitmap::col#2 = mode_twoplanebitmap::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // [476] mode_twoplanebitmap::col#1 = ++ mode_twoplanebitmap::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [477] mode_twoplanebitmap::cx#1 = ++ mode_twoplanebitmap::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [478] if(mode_twoplanebitmap::cx#1!=$28) goto mode_twoplanebitmap::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4_from___b4
    jmp __b5
    // mode_twoplanebitmap::@5
  __b5:
    // [479] mode_twoplanebitmap::cy#1 = ++ mode_twoplanebitmap::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [480] if(mode_twoplanebitmap::cy#1!=$19) goto mode_twoplanebitmap::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3_from___b5
    // [481] phi from mode_twoplanebitmap::@5 to mode_twoplanebitmap::@6 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@6]
  __b6_from___b5:
    // [481] phi mode_twoplanebitmap::gfxa#7 = mode_twoplanebitmap::PLANEA [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@6#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta.z gfxa
    lda #>PLANEA
    sta.z gfxa+1
    // [481] phi mode_twoplanebitmap::ay#5 = 0 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b6
    // [481] phi from mode_twoplanebitmap::@11 to mode_twoplanebitmap::@6 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@6]
  __b6_from___b11:
    // [481] phi mode_twoplanebitmap::gfxa#7 = mode_twoplanebitmap::gfxa#6 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@6#0] -- register_copy 
    // [481] phi mode_twoplanebitmap::ay#5 = mode_twoplanebitmap::ay#1 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@6#1] -- register_copy 
    jmp __b6
    // mode_twoplanebitmap::@6
  __b6:
    // [482] phi from mode_twoplanebitmap::@6 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7]
  __b7_from___b6:
    // [482] phi mode_twoplanebitmap::ax#2 = 0 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#0] -- vbuxx=vbuc1 
    ldx #0
    // [482] phi mode_twoplanebitmap::gfxa#3 = mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#1] -- register_copy 
    jmp __b7
    // [482] phi from mode_twoplanebitmap::@9 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@7]
  __b7_from___b9:
    // [482] phi mode_twoplanebitmap::ax#2 = mode_twoplanebitmap::ax#1 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@7#0] -- register_copy 
    // [482] phi mode_twoplanebitmap::gfxa#3 = mode_twoplanebitmap::gfxa#6 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@7#1] -- register_copy 
    jmp __b7
    // mode_twoplanebitmap::@7
  __b7:
    // [483] mode_twoplanebitmap::$8 = mode_twoplanebitmap::ay#5 & 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and.z ay
    // [484] if(mode_twoplanebitmap::$8==0) goto mode_twoplanebitmap::@8 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b8
    jmp __b10
    // mode_twoplanebitmap::@10
  __b10:
    // [485] *mode_twoplanebitmap::gfxa#3 = $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
    // [486] mode_twoplanebitmap::gfxa#2 = ++ mode_twoplanebitmap::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [487] phi from mode_twoplanebitmap::@10 mode_twoplanebitmap::@8 to mode_twoplanebitmap::@9 [phi:mode_twoplanebitmap::@10/mode_twoplanebitmap::@8->mode_twoplanebitmap::@9]
  __b9_from___b10:
  __b9_from___b8:
    // [487] phi mode_twoplanebitmap::gfxa#6 = mode_twoplanebitmap::gfxa#2 [phi:mode_twoplanebitmap::@10/mode_twoplanebitmap::@8->mode_twoplanebitmap::@9#0] -- register_copy 
    jmp __b9
    // mode_twoplanebitmap::@9
  __b9:
    // [488] mode_twoplanebitmap::ax#1 = ++ mode_twoplanebitmap::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [489] if(mode_twoplanebitmap::ax#1!=$28) goto mode_twoplanebitmap::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b7_from___b9
    jmp __b11
    // mode_twoplanebitmap::@11
  __b11:
    // [490] mode_twoplanebitmap::ay#1 = ++ mode_twoplanebitmap::ay#5 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [491] if(mode_twoplanebitmap::ay#1!=$c8) goto mode_twoplanebitmap::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b6_from___b11
    // [492] phi from mode_twoplanebitmap::@11 to mode_twoplanebitmap::@12 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@12]
  __b12_from___b11:
    // [492] phi mode_twoplanebitmap::by#4 = 0 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@12#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [492] phi mode_twoplanebitmap::gfxb#3 = mode_twoplanebitmap::PLANEB [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@12#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta.z gfxb
    lda #>PLANEB
    sta.z gfxb+1
    jmp __b12
    // [492] phi from mode_twoplanebitmap::@14 to mode_twoplanebitmap::@12 [phi:mode_twoplanebitmap::@14->mode_twoplanebitmap::@12]
  __b12_from___b14:
    // [492] phi mode_twoplanebitmap::by#4 = mode_twoplanebitmap::by#1 [phi:mode_twoplanebitmap::@14->mode_twoplanebitmap::@12#0] -- register_copy 
    // [492] phi mode_twoplanebitmap::gfxb#3 = mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@14->mode_twoplanebitmap::@12#1] -- register_copy 
    jmp __b12
    // mode_twoplanebitmap::@12
  __b12:
    // [493] phi from mode_twoplanebitmap::@12 to mode_twoplanebitmap::@13 [phi:mode_twoplanebitmap::@12->mode_twoplanebitmap::@13]
  __b13_from___b12:
    // [493] phi mode_twoplanebitmap::bx#2 = 0 [phi:mode_twoplanebitmap::@12->mode_twoplanebitmap::@13#0] -- vbuxx=vbuc1 
    ldx #0
    // [493] phi mode_twoplanebitmap::gfxb#2 = mode_twoplanebitmap::gfxb#3 [phi:mode_twoplanebitmap::@12->mode_twoplanebitmap::@13#1] -- register_copy 
    jmp __b13
    // [493] phi from mode_twoplanebitmap::@13 to mode_twoplanebitmap::@13 [phi:mode_twoplanebitmap::@13->mode_twoplanebitmap::@13]
  __b13_from___b13:
    // [493] phi mode_twoplanebitmap::bx#2 = mode_twoplanebitmap::bx#1 [phi:mode_twoplanebitmap::@13->mode_twoplanebitmap::@13#0] -- register_copy 
    // [493] phi mode_twoplanebitmap::gfxb#2 = mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@13->mode_twoplanebitmap::@13#1] -- register_copy 
    jmp __b13
    // mode_twoplanebitmap::@13
  __b13:
    // [494] *mode_twoplanebitmap::gfxb#2 = $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
    // [495] mode_twoplanebitmap::gfxb#1 = ++ mode_twoplanebitmap::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [496] mode_twoplanebitmap::bx#1 = ++ mode_twoplanebitmap::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [497] if(mode_twoplanebitmap::bx#1!=$28) goto mode_twoplanebitmap::@13 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b13_from___b13
    jmp __b14
    // mode_twoplanebitmap::@14
  __b14:
    // [498] mode_twoplanebitmap::by#1 = ++ mode_twoplanebitmap::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [499] if(mode_twoplanebitmap::by#1!=$c8) goto mode_twoplanebitmap::@12 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b12_from___b14
    // [500] phi from mode_twoplanebitmap::@14 to mode_twoplanebitmap::@15 [phi:mode_twoplanebitmap::@14->mode_twoplanebitmap::@15]
  __b15_from___b14:
    jmp __b15
    // mode_twoplanebitmap::@15
  __b15:
    // [501] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_twoplanebitmap::@15 to mode_ctrl [phi:mode_twoplanebitmap::@15->mode_ctrl]
  mode_ctrl_from___b15:
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR|DTV_LINEAR [phi:mode_twoplanebitmap::@15->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR|DTV_LINEAR
    jsr mode_ctrl
    jmp __breturn
    // mode_twoplanebitmap::@return
  __breturn:
    // [502] return 
    rts
    // mode_twoplanebitmap::@8
  __b8:
    // [503] *mode_twoplanebitmap::gfxa#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
    // [504] mode_twoplanebitmap::gfxa#1 = ++ mode_twoplanebitmap::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    jmp __b9_from___b8
}
  // mode_sixsfred
// Sixs Fred Mode - 8bpp Packed Bitmap - Generated from the two DTV linear graphics plane counters
// Two Plane MultiColor Bitmap - 8bpp Packed Bitmap (CHUNK/COLDIS = 0, ECM/BMM/MCM/HICOL/LINEAR = 1)
// Resolution: 160x200
// Linear Adressing
// GfxData/PlaneA Pixel Shifter (2), CharData/PlaneB Pixel Shifter (2):
// - 8bpp color (ColorData[3:0],CharData/PlaneB[1:0], GfxData/PlaneA[1:0])
mode_sixsfred: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    // Colors for high 4 bits of 8bpp
    .label col = $13
    .label cy = 6
    // Graphics for Plane A () - horizontal stripes every 2 pixels
    .label gfxa = 8
    .label ay = 7
    // Graphics for Plane B - vertical stripes every 2 pixels
    .label gfxb = $11
    .label by = $a
    // [505] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta DTV_CONTROL
    // [506] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [507] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
    // [508] *DTV_PLANEA_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #0
    sta DTV_PLANEA_START_LO
    // [509] *DTV_PLANEA_START_MI = >mode_sixsfred::PLANEA -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
    // [510] *DTV_PLANEA_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [511] *DTV_PLANEA_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
    // [512] *DTV_PLANEA_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
    // [513] *DTV_PLANEA_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // [514] *DTV_PLANEB_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #0
    sta DTV_PLANEB_START_LO
    // [515] *DTV_PLANEB_START_MI = >mode_sixsfred::PLANEB -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
    // [516] *DTV_PLANEB_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
    // [517] *DTV_PLANEB_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
    // [518] *DTV_PLANEB_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
    // [519] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // [520] *DTV_COLOR_BANK_LO = <mode_sixsfred::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // [521] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [522] phi from mode_sixsfred to mode_sixsfred::@1 [phi:mode_sixsfred->mode_sixsfred::@1]
  __b1_from_mode_sixsfred:
    // [522] phi mode_sixsfred::i#2 = 0 [phi:mode_sixsfred->mode_sixsfred::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - Grey Tones
    // [522] phi from mode_sixsfred::@1 to mode_sixsfred::@1 [phi:mode_sixsfred::@1->mode_sixsfred::@1]
  __b1_from___b1:
    // [522] phi mode_sixsfred::i#2 = mode_sixsfred::i#1 [phi:mode_sixsfred::@1->mode_sixsfred::@1#0] -- register_copy 
    jmp __b1
    // mode_sixsfred::@1
  __b1:
    // [523] DTV_PALETTE[mode_sixsfred::i#2] = mode_sixsfred::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // [524] mode_sixsfred::i#1 = ++ mode_sixsfred::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [525] if(mode_sixsfred::i#1!=$10) goto mode_sixsfred::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // mode_sixsfred::@2
  __b2:
    // [526] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // [527] phi from mode_sixsfred::@2 to mode_sixsfred::@3 [phi:mode_sixsfred::@2->mode_sixsfred::@3]
  __b3_from___b2:
    // [527] phi mode_sixsfred::col#3 = mode_sixsfred::COLORS [phi:mode_sixsfred::@2->mode_sixsfred::@3#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [527] phi mode_sixsfred::cy#4 = 0 [phi:mode_sixsfred::@2->mode_sixsfred::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b3
    // [527] phi from mode_sixsfred::@5 to mode_sixsfred::@3 [phi:mode_sixsfred::@5->mode_sixsfred::@3]
  __b3_from___b5:
    // [527] phi mode_sixsfred::col#3 = mode_sixsfred::col#1 [phi:mode_sixsfred::@5->mode_sixsfred::@3#0] -- register_copy 
    // [527] phi mode_sixsfred::cy#4 = mode_sixsfred::cy#1 [phi:mode_sixsfred::@5->mode_sixsfred::@3#1] -- register_copy 
    jmp __b3
    // mode_sixsfred::@3
  __b3:
    // [528] phi from mode_sixsfred::@3 to mode_sixsfred::@4 [phi:mode_sixsfred::@3->mode_sixsfred::@4]
  __b4_from___b3:
    // [528] phi mode_sixsfred::col#2 = mode_sixsfred::col#3 [phi:mode_sixsfred::@3->mode_sixsfred::@4#0] -- register_copy 
    // [528] phi mode_sixsfred::cx#2 = 0 [phi:mode_sixsfred::@3->mode_sixsfred::@4#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
    // [528] phi from mode_sixsfred::@4 to mode_sixsfred::@4 [phi:mode_sixsfred::@4->mode_sixsfred::@4]
  __b4_from___b4:
    // [528] phi mode_sixsfred::col#2 = mode_sixsfred::col#1 [phi:mode_sixsfred::@4->mode_sixsfred::@4#0] -- register_copy 
    // [528] phi mode_sixsfred::cx#2 = mode_sixsfred::cx#1 [phi:mode_sixsfred::@4->mode_sixsfred::@4#1] -- register_copy 
    jmp __b4
    // mode_sixsfred::@4
  __b4:
    // [529] mode_sixsfred::$2 = mode_sixsfred::cx#2 + mode_sixsfred::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // [530] mode_sixsfred::$3 = mode_sixsfred::$2 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [531] *mode_sixsfred::col#2 = mode_sixsfred::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // [532] mode_sixsfred::col#1 = ++ mode_sixsfred::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [533] mode_sixsfred::cx#1 = ++ mode_sixsfred::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [534] if(mode_sixsfred::cx#1!=$28) goto mode_sixsfred::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4_from___b4
    jmp __b5
    // mode_sixsfred::@5
  __b5:
    // [535] mode_sixsfred::cy#1 = ++ mode_sixsfred::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [536] if(mode_sixsfred::cy#1!=$19) goto mode_sixsfred::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3_from___b5
    // [537] phi from mode_sixsfred::@5 to mode_sixsfred::@6 [phi:mode_sixsfred::@5->mode_sixsfred::@6]
  __b6_from___b5:
    // [537] phi mode_sixsfred::gfxa#3 = mode_sixsfred::PLANEA [phi:mode_sixsfred::@5->mode_sixsfred::@6#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta.z gfxa
    lda #>PLANEA
    sta.z gfxa+1
    // [537] phi mode_sixsfred::ay#4 = 0 [phi:mode_sixsfred::@5->mode_sixsfred::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b6
    // [537] phi from mode_sixsfred::@8 to mode_sixsfred::@6 [phi:mode_sixsfred::@8->mode_sixsfred::@6]
  __b6_from___b8:
    // [537] phi mode_sixsfred::gfxa#3 = mode_sixsfred::gfxa#1 [phi:mode_sixsfred::@8->mode_sixsfred::@6#0] -- register_copy 
    // [537] phi mode_sixsfred::ay#4 = mode_sixsfred::ay#1 [phi:mode_sixsfred::@8->mode_sixsfred::@6#1] -- register_copy 
    jmp __b6
    // mode_sixsfred::@6
  __b6:
    // [538] phi from mode_sixsfred::@6 to mode_sixsfred::@7 [phi:mode_sixsfred::@6->mode_sixsfred::@7]
  __b7_from___b6:
    // [538] phi mode_sixsfred::ax#2 = 0 [phi:mode_sixsfred::@6->mode_sixsfred::@7#0] -- vbuxx=vbuc1 
    ldx #0
    // [538] phi mode_sixsfred::gfxa#2 = mode_sixsfred::gfxa#3 [phi:mode_sixsfred::@6->mode_sixsfred::@7#1] -- register_copy 
    jmp __b7
    // [538] phi from mode_sixsfred::@7 to mode_sixsfred::@7 [phi:mode_sixsfred::@7->mode_sixsfred::@7]
  __b7_from___b7:
    // [538] phi mode_sixsfred::ax#2 = mode_sixsfred::ax#1 [phi:mode_sixsfred::@7->mode_sixsfred::@7#0] -- register_copy 
    // [538] phi mode_sixsfred::gfxa#2 = mode_sixsfred::gfxa#1 [phi:mode_sixsfred::@7->mode_sixsfred::@7#1] -- register_copy 
    jmp __b7
    // mode_sixsfred::@7
  __b7:
    // [539] mode_sixsfred::$6 = mode_sixsfred::ay#4 >> 1 -- vbuaa=vbuz1_ror_1 
    lda.z ay
    lsr
    // [540] mode_sixsfred::row#0 = mode_sixsfred::$6 & 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
    // [541] *mode_sixsfred::gfxa#2 = mode_sixsfred::row_bitmask[mode_sixsfred::row#0] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // [542] mode_sixsfred::gfxa#1 = ++ mode_sixsfred::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [543] mode_sixsfred::ax#1 = ++ mode_sixsfred::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [544] if(mode_sixsfred::ax#1!=$28) goto mode_sixsfred::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b7_from___b7
    jmp __b8
    // mode_sixsfred::@8
  __b8:
    // [545] mode_sixsfred::ay#1 = ++ mode_sixsfred::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [546] if(mode_sixsfred::ay#1!=$c8) goto mode_sixsfred::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b6_from___b8
    // [547] phi from mode_sixsfred::@8 to mode_sixsfred::@9 [phi:mode_sixsfred::@8->mode_sixsfred::@9]
  __b9_from___b8:
    // [547] phi mode_sixsfred::by#4 = 0 [phi:mode_sixsfred::@8->mode_sixsfred::@9#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [547] phi mode_sixsfred::gfxb#3 = mode_sixsfred::PLANEB [phi:mode_sixsfred::@8->mode_sixsfred::@9#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta.z gfxb
    lda #>PLANEB
    sta.z gfxb+1
    jmp __b9
    // [547] phi from mode_sixsfred::@11 to mode_sixsfred::@9 [phi:mode_sixsfred::@11->mode_sixsfred::@9]
  __b9_from___b11:
    // [547] phi mode_sixsfred::by#4 = mode_sixsfred::by#1 [phi:mode_sixsfred::@11->mode_sixsfred::@9#0] -- register_copy 
    // [547] phi mode_sixsfred::gfxb#3 = mode_sixsfred::gfxb#1 [phi:mode_sixsfred::@11->mode_sixsfred::@9#1] -- register_copy 
    jmp __b9
    // mode_sixsfred::@9
  __b9:
    // [548] phi from mode_sixsfred::@9 to mode_sixsfred::@10 [phi:mode_sixsfred::@9->mode_sixsfred::@10]
  __b10_from___b9:
    // [548] phi mode_sixsfred::bx#2 = 0 [phi:mode_sixsfred::@9->mode_sixsfred::@10#0] -- vbuxx=vbuc1 
    ldx #0
    // [548] phi mode_sixsfred::gfxb#2 = mode_sixsfred::gfxb#3 [phi:mode_sixsfred::@9->mode_sixsfred::@10#1] -- register_copy 
    jmp __b10
    // [548] phi from mode_sixsfred::@10 to mode_sixsfred::@10 [phi:mode_sixsfred::@10->mode_sixsfred::@10]
  __b10_from___b10:
    // [548] phi mode_sixsfred::bx#2 = mode_sixsfred::bx#1 [phi:mode_sixsfred::@10->mode_sixsfred::@10#0] -- register_copy 
    // [548] phi mode_sixsfred::gfxb#2 = mode_sixsfred::gfxb#1 [phi:mode_sixsfred::@10->mode_sixsfred::@10#1] -- register_copy 
    jmp __b10
    // mode_sixsfred::@10
  __b10:
    // [549] *mode_sixsfred::gfxb#2 = $1b -- _deref_pbuz1=vbuc1 
    lda #$1b
    ldy #0
    sta (gfxb),y
    // [550] mode_sixsfred::gfxb#1 = ++ mode_sixsfred::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [551] mode_sixsfred::bx#1 = ++ mode_sixsfred::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [552] if(mode_sixsfred::bx#1!=$28) goto mode_sixsfred::@10 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b10_from___b10
    jmp __b11
    // mode_sixsfred::@11
  __b11:
    // [553] mode_sixsfred::by#1 = ++ mode_sixsfred::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [554] if(mode_sixsfred::by#1!=$c8) goto mode_sixsfred::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b9_from___b11
    // [555] phi from mode_sixsfred::@11 to mode_sixsfred::@12 [phi:mode_sixsfred::@11->mode_sixsfred::@12]
  __b12_from___b11:
    jmp __b12
    // mode_sixsfred::@12
  __b12:
    // [556] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_sixsfred::@12 to mode_ctrl [phi:mode_sixsfred::@12->mode_ctrl]
  mode_ctrl_from___b12:
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR|DTV_LINEAR [phi:mode_sixsfred::@12->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR|DTV_LINEAR
    jsr mode_ctrl
    jmp __breturn
    // mode_sixsfred::@return
  __breturn:
    // [557] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
  // mode_8bpppixelcell
//8bpp Pixel Cell Mode (BMM/COLDIS = 0, ECM/MCM/HICOL/LINEAR/CHUNK = 1)
//Pixel Cell Adressing
//CharData[8]: (PlaneA[21:0])
//GfxData[8]: (PlaneB[21:14] & CharData[7:0] & RowCounter[3:0] & PixelCounter[7:0] )
//GfxData Pixel Shifter (8):
//- 8bpp color GfxData[7:0]
//Pixel cell mode can be thought of as a text mode that uses a 8x8 pixel 8bpp font (64 bytes/char).
//The characters come from counter A and the font (or "cells") from counter B.
//Counter B step and modulo should be set to 0, counter A modulo to 0 and counter A step to 1 for normal operation.
mode_8bpppixelcell: {
    // 8BPP Pixel Cell Screen (contains 40x25=1000 chars)
    .label PLANEA = $3c00
    // 8BPP Pixel Cell Charset (contains 256 64 byte chars)
    .label PLANEB = $4000
    .label CHARGEN = $d000
    .label __3 = $f
    // Screen Chars for Plane A (screen) - 16x16 repeating
    .label gfxa = $11
    .label ay = 6
    .label bits = $d
    .label chargen = $13
    .label gfxb = 8
    .label col = $10
    .label cr = $a
    .label ch = 7
    // [558] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
    sta DTV_CONTROL
    // [559] *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [560] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
    // [561] *DTV_PLANEA_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #0
    sta DTV_PLANEA_START_LO
    // [562] *DTV_PLANEA_START_MI = >mode_8bpppixelcell::PLANEA -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
    // [563] *DTV_PLANEA_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [564] *DTV_PLANEA_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
    // [565] *DTV_PLANEA_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
    // [566] *DTV_PLANEA_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // [567] *DTV_PLANEB_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #0
    sta DTV_PLANEB_START_LO
    // [568] *DTV_PLANEB_START_MI = >mode_8bpppixelcell::PLANEB -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
    // [569] *DTV_PLANEB_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
    // [570] *DTV_PLANEB_STEP = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_STEP
    // [571] *DTV_PLANEB_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
    // [572] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // [573] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Border color
    lda #0
    sta BORDER_COLOR
    // [574] phi from mode_8bpppixelcell to mode_8bpppixelcell::@1 [phi:mode_8bpppixelcell->mode_8bpppixelcell::@1]
  __b1_from_mode_8bpppixelcell:
    // [574] phi mode_8bpppixelcell::i#2 = 0 [phi:mode_8bpppixelcell->mode_8bpppixelcell::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - Grey Tones
    // [574] phi from mode_8bpppixelcell::@1 to mode_8bpppixelcell::@1 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@1]
  __b1_from___b1:
    // [574] phi mode_8bpppixelcell::i#2 = mode_8bpppixelcell::i#1 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@1#0] -- register_copy 
    jmp __b1
    // mode_8bpppixelcell::@1
  __b1:
    // [575] DTV_PALETTE[mode_8bpppixelcell::i#2] = mode_8bpppixelcell::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // [576] mode_8bpppixelcell::i#1 = ++ mode_8bpppixelcell::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [577] if(mode_8bpppixelcell::i#1!=$10) goto mode_8bpppixelcell::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    // [578] phi from mode_8bpppixelcell::@1 to mode_8bpppixelcell::@2 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2]
  __b2_from___b1:
    // [578] phi mode_8bpppixelcell::gfxa#3 = mode_8bpppixelcell::PLANEA [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta.z gfxa
    lda #>PLANEA
    sta.z gfxa+1
    // [578] phi mode_8bpppixelcell::ay#4 = 0 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b2
    // [578] phi from mode_8bpppixelcell::@4 to mode_8bpppixelcell::@2 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@2]
  __b2_from___b4:
    // [578] phi mode_8bpppixelcell::gfxa#3 = mode_8bpppixelcell::gfxa#1 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@2#0] -- register_copy 
    // [578] phi mode_8bpppixelcell::ay#4 = mode_8bpppixelcell::ay#1 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@2#1] -- register_copy 
    jmp __b2
    // mode_8bpppixelcell::@2
  __b2:
    // [579] phi from mode_8bpppixelcell::@2 to mode_8bpppixelcell::@3 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3]
  __b3_from___b2:
    // [579] phi mode_8bpppixelcell::gfxa#2 = mode_8bpppixelcell::gfxa#3 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3#0] -- register_copy 
    // [579] phi mode_8bpppixelcell::ax#2 = 0 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [579] phi from mode_8bpppixelcell::@3 to mode_8bpppixelcell::@3 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3]
  __b3_from___b3:
    // [579] phi mode_8bpppixelcell::gfxa#2 = mode_8bpppixelcell::gfxa#1 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3#0] -- register_copy 
    // [579] phi mode_8bpppixelcell::ax#2 = mode_8bpppixelcell::ax#1 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3#1] -- register_copy 
    jmp __b3
    // mode_8bpppixelcell::@3
  __b3:
    // [580] mode_8bpppixelcell::$2 = mode_8bpppixelcell::ay#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z ay
    // [581] mode_8bpppixelcell::$3 = mode_8bpppixelcell::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // [582] mode_8bpppixelcell::$4 = mode_8bpppixelcell::ax#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [583] mode_8bpppixelcell::$5 = mode_8bpppixelcell::$3 | mode_8bpppixelcell::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // [584] *mode_8bpppixelcell::gfxa#2 = mode_8bpppixelcell::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
    // [585] mode_8bpppixelcell::gfxa#1 = ++ mode_8bpppixelcell::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [586] mode_8bpppixelcell::ax#1 = ++ mode_8bpppixelcell::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [587] if(mode_8bpppixelcell::ax#1!=$28) goto mode_8bpppixelcell::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b3_from___b3
    jmp __b4
    // mode_8bpppixelcell::@4
  __b4:
    // [588] mode_8bpppixelcell::ay#1 = ++ mode_8bpppixelcell::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [589] if(mode_8bpppixelcell::ay#1!=$19) goto mode_8bpppixelcell::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z ay
    bne __b2_from___b4
    jmp __b5
    // mode_8bpppixelcell::@5
  __b5:
    // [590] *PROCPORT = PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    // 8bpp cells for Plane B (charset) - ROM charset with 256 colors
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [591] phi from mode_8bpppixelcell::@5 to mode_8bpppixelcell::@6 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6]
  __b6_from___b5:
    // [591] phi mode_8bpppixelcell::ch#8 = 0 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ch
    // [591] phi mode_8bpppixelcell::col#7 = 0 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z col
    // [591] phi mode_8bpppixelcell::gfxb#7 = mode_8bpppixelcell::PLANEB [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#2] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta.z gfxb
    lda #>PLANEB
    sta.z gfxb+1
    // [591] phi mode_8bpppixelcell::chargen#4 = mode_8bpppixelcell::CHARGEN [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    jmp __b6
    // [591] phi from mode_8bpppixelcell::@12 to mode_8bpppixelcell::@6 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@6]
  __b6_from___b12:
    // [591] phi mode_8bpppixelcell::ch#8 = mode_8bpppixelcell::ch#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@6#0] -- register_copy 
    // [591] phi mode_8bpppixelcell::col#7 = mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@6#1] -- register_copy 
    // [591] phi mode_8bpppixelcell::gfxb#7 = mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@6#2] -- register_copy 
    // [591] phi mode_8bpppixelcell::chargen#4 = mode_8bpppixelcell::chargen#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@6#3] -- register_copy 
    jmp __b6
    // mode_8bpppixelcell::@6
  __b6:
    // [592] phi from mode_8bpppixelcell::@6 to mode_8bpppixelcell::@7 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7]
  __b7_from___b6:
    // [592] phi mode_8bpppixelcell::cr#6 = 0 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cr
    // [592] phi mode_8bpppixelcell::col#5 = mode_8bpppixelcell::col#7 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7#1] -- register_copy 
    // [592] phi mode_8bpppixelcell::gfxb#5 = mode_8bpppixelcell::gfxb#7 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7#2] -- register_copy 
    // [592] phi mode_8bpppixelcell::chargen#2 = mode_8bpppixelcell::chargen#4 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7#3] -- register_copy 
    jmp __b7
    // [592] phi from mode_8bpppixelcell::@11 to mode_8bpppixelcell::@7 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7]
  __b7_from___b11:
    // [592] phi mode_8bpppixelcell::cr#6 = mode_8bpppixelcell::cr#1 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7#0] -- register_copy 
    // [592] phi mode_8bpppixelcell::col#5 = mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7#1] -- register_copy 
    // [592] phi mode_8bpppixelcell::gfxb#5 = mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7#2] -- register_copy 
    // [592] phi mode_8bpppixelcell::chargen#2 = mode_8bpppixelcell::chargen#1 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7#3] -- register_copy 
    jmp __b7
    // mode_8bpppixelcell::@7
  __b7:
    // [593] mode_8bpppixelcell::bits#0 = *mode_8bpppixelcell::chargen#2 -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta.z bits
    // [594] mode_8bpppixelcell::chargen#1 = ++ mode_8bpppixelcell::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [595] phi from mode_8bpppixelcell::@7 to mode_8bpppixelcell::@8 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@8]
  __b8_from___b7:
    // [595] phi mode_8bpppixelcell::cp#2 = 0 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@8#0] -- vbuxx=vbuc1 
    ldx #0
    // [595] phi mode_8bpppixelcell::col#2 = mode_8bpppixelcell::col#5 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@8#1] -- register_copy 
    // [595] phi mode_8bpppixelcell::gfxb#2 = mode_8bpppixelcell::gfxb#5 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@8#2] -- register_copy 
    // [595] phi mode_8bpppixelcell::bits#2 = mode_8bpppixelcell::bits#0 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@8#3] -- register_copy 
    jmp __b8
    // [595] phi from mode_8bpppixelcell::@9 to mode_8bpppixelcell::@8 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@8]
  __b8_from___b9:
    // [595] phi mode_8bpppixelcell::cp#2 = mode_8bpppixelcell::cp#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@8#0] -- register_copy 
    // [595] phi mode_8bpppixelcell::col#2 = mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@8#1] -- register_copy 
    // [595] phi mode_8bpppixelcell::gfxb#2 = mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@8#2] -- register_copy 
    // [595] phi mode_8bpppixelcell::bits#2 = mode_8bpppixelcell::bits#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@8#3] -- register_copy 
    jmp __b8
    // mode_8bpppixelcell::@8
  __b8:
    // [596] mode_8bpppixelcell::$8 = mode_8bpppixelcell::bits#2 & $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z bits
    // [597] if(mode_8bpppixelcell::$8==0) goto mode_8bpppixelcell::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b9_from___b8
    jmp __b10
    // mode_8bpppixelcell::@10
  __b10:
    // [598] mode_8bpppixelcell::c#3 = mode_8bpppixelcell::col#2 -- vbuaa=vbuz1 
    lda.z col
    // [599] phi from mode_8bpppixelcell::@10 to mode_8bpppixelcell::@9 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@9]
  __b9_from___b10:
    // [599] phi mode_8bpppixelcell::c#2 = mode_8bpppixelcell::c#3 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@9#0] -- register_copy 
    jmp __b9
    // [599] phi from mode_8bpppixelcell::@8 to mode_8bpppixelcell::@9 [phi:mode_8bpppixelcell::@8->mode_8bpppixelcell::@9]
  __b9_from___b8:
    // [599] phi mode_8bpppixelcell::c#2 = 0 [phi:mode_8bpppixelcell::@8->mode_8bpppixelcell::@9#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b9
    // mode_8bpppixelcell::@9
  __b9:
    // [600] *mode_8bpppixelcell::gfxb#2 = mode_8bpppixelcell::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
    // [601] mode_8bpppixelcell::gfxb#1 = ++ mode_8bpppixelcell::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [602] mode_8bpppixelcell::bits#1 = mode_8bpppixelcell::bits#2 << 1 -- vbuz1=vbuz1_rol_1 
    asl.z bits
    // [603] mode_8bpppixelcell::col#1 = ++ mode_8bpppixelcell::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // [604] mode_8bpppixelcell::cp#1 = ++ mode_8bpppixelcell::cp#2 -- vbuxx=_inc_vbuxx 
    inx
    // [605] if(mode_8bpppixelcell::cp#1!=8) goto mode_8bpppixelcell::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b8_from___b9
    jmp __b11
    // mode_8bpppixelcell::@11
  __b11:
    // [606] mode_8bpppixelcell::cr#1 = ++ mode_8bpppixelcell::cr#6 -- vbuz1=_inc_vbuz1 
    inc.z cr
    // [607] if(mode_8bpppixelcell::cr#1!=8) goto mode_8bpppixelcell::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cr
    bne __b7_from___b11
    jmp __b12
    // mode_8bpppixelcell::@12
  __b12:
    // [608] mode_8bpppixelcell::ch#1 = ++ mode_8bpppixelcell::ch#8 -- vbuz1=_inc_vbuz1 
    inc.z ch
    // [609] if(mode_8bpppixelcell::ch#1!=0) goto mode_8bpppixelcell::@6 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b6_from___b12
    jmp __b13
    // mode_8bpppixelcell::@13
  __b13:
    // [610] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [611] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_8bpppixelcell::@13 to mode_ctrl [phi:mode_8bpppixelcell::@13->mode_ctrl]
  mode_ctrl_from___b13:
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY [phi:mode_8bpppixelcell::@13->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
    jsr mode_ctrl
    jmp __breturn
    // mode_8bpppixelcell::@return
  __breturn:
    // [612] return 
    rts
}
  // mode_8bppchunkybmm
//Chunky 8bpp Bitmap Mode (BMM = 0, ECM/MCM/HICOL/LINEAR/CHUNK/COLDIS = 1)
// Resolution: 320x200
// Linear Adressing
// CharData/PlaneB Pixel Shifter (8):
// - 8bpp color PlaneB[7:0]
// To set up a linear video frame buffer the step size must be set to 8.
mode_8bppchunkybmm: {
    // 8BPP Chunky Bitmap (contains 8bpp pixels)
    .const PLANEB = $20000
    .label __7 = $11
    .label gfxb = 8
    .label x = $13
    .label y = $d
    // [613] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
    sta DTV_CONTROL
    // [614] *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [615] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
    // [616] *DTV_PLANEB_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #0
    sta DTV_PLANEB_START_LO
    // [617] *DTV_PLANEB_START_MI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_MI
    // [618] *DTV_PLANEB_START_HI = <>mode_8bppchunkybmm::PLANEB -- _deref_pbuc1=vbuc2 
    lda #<PLANEB>>$10
    sta DTV_PLANEB_START_HI
    // [619] *DTV_PLANEB_STEP = 8 -- _deref_pbuc1=vbuc2 
    lda #8
    sta DTV_PLANEB_STEP
    // [620] *DTV_PLANEB_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
    // [621] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // [622] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Border color
    lda #0
    sta BORDER_COLOR
    // [623] phi from mode_8bppchunkybmm to mode_8bppchunkybmm::@1 [phi:mode_8bppchunkybmm->mode_8bppchunkybmm::@1]
  __b1_from_mode_8bppchunkybmm:
    // [623] phi mode_8bppchunkybmm::i#2 = 0 [phi:mode_8bppchunkybmm->mode_8bppchunkybmm::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - Grey Tones
    // [623] phi from mode_8bppchunkybmm::@1 to mode_8bppchunkybmm::@1 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@1]
  __b1_from___b1:
    // [623] phi mode_8bppchunkybmm::i#2 = mode_8bppchunkybmm::i#1 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@1#0] -- register_copy 
    jmp __b1
    // mode_8bppchunkybmm::@1
  __b1:
    // [624] DTV_PALETTE[mode_8bppchunkybmm::i#2] = mode_8bppchunkybmm::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // [625] mode_8bppchunkybmm::i#1 = ++ mode_8bppchunkybmm::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [626] if(mode_8bppchunkybmm::i#1!=$10) goto mode_8bppchunkybmm::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    // [627] phi from mode_8bppchunkybmm::@1 to mode_8bppchunkybmm::@2 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@2]
  __b2_from___b1:
    jmp __b2
    // mode_8bppchunkybmm::@2
  __b2:
    // [628] call dtvSetCpuBankSegment1 
    // [820] phi from mode_8bppchunkybmm::@2 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@2->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b2:
    // [820] phi dtvSetCpuBankSegment1::cpuBankIdx#3 = (byte)mode_8bppchunkybmm::PLANEB/$4000 [phi:mode_8bppchunkybmm::@2->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANEB/$4000
    jsr dtvSetCpuBankSegment1
    // [629] phi from mode_8bppchunkybmm::@2 to mode_8bppchunkybmm::@3 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3]
  __b3_from___b2:
    // [629] phi mode_8bppchunkybmm::gfxbCpuBank#7 = ++(byte)mode_8bppchunkybmm::PLANEB/$4000 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#0] -- vbuxx=vbuc1 
    ldx #PLANEB/$4000+1
    // [629] phi mode_8bppchunkybmm::y#6 = 0 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [629] phi mode_8bppchunkybmm::gfxb#5 = (byte*) 16384 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b3
    // [629] phi from mode_8bppchunkybmm::@7 to mode_8bppchunkybmm::@3 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@3]
  __b3_from___b7:
    // [629] phi mode_8bppchunkybmm::gfxbCpuBank#7 = mode_8bppchunkybmm::gfxbCpuBank#8 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@3#0] -- register_copy 
    // [629] phi mode_8bppchunkybmm::y#6 = mode_8bppchunkybmm::y#1 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@3#1] -- register_copy 
    // [629] phi mode_8bppchunkybmm::gfxb#5 = mode_8bppchunkybmm::gfxb#1 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@3#2] -- register_copy 
    jmp __b3
    // mode_8bppchunkybmm::@3
  __b3:
    // [630] phi from mode_8bppchunkybmm::@3 to mode_8bppchunkybmm::@4 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4]
  __b4_from___b3:
    // [630] phi mode_8bppchunkybmm::gfxbCpuBank#4 = mode_8bppchunkybmm::gfxbCpuBank#7 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#0] -- register_copy 
    // [630] phi mode_8bppchunkybmm::x#2 = 0 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [630] phi mode_8bppchunkybmm::gfxb#3 = mode_8bppchunkybmm::gfxb#5 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#2] -- register_copy 
    jmp __b4
    // [630] phi from mode_8bppchunkybmm::@5 to mode_8bppchunkybmm::@4 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@4]
  __b4_from___b5:
    // [630] phi mode_8bppchunkybmm::gfxbCpuBank#4 = mode_8bppchunkybmm::gfxbCpuBank#8 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@4#0] -- register_copy 
    // [630] phi mode_8bppchunkybmm::x#2 = mode_8bppchunkybmm::x#1 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@4#1] -- register_copy 
    // [630] phi mode_8bppchunkybmm::gfxb#3 = mode_8bppchunkybmm::gfxb#1 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@4#2] -- register_copy 
    jmp __b4
    // mode_8bppchunkybmm::@4
  __b4:
    // [631] if(mode_8bppchunkybmm::gfxb#3!=$8000) goto mode_8bppchunkybmm::@5 -- pbuz1_neq_vwuc1_then_la1 
    lda.z gfxb+1
    cmp #>$8000
    bne __b5_from___b4
    lda.z gfxb
    cmp #<$8000
    bne __b5_from___b4
    jmp __b6
    // mode_8bppchunkybmm::@6
  __b6:
    // [632] dtvSetCpuBankSegment1::cpuBankIdx#1 = mode_8bppchunkybmm::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
    // [633] call dtvSetCpuBankSegment1 
    // [820] phi from mode_8bppchunkybmm::@6 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b6:
    // [820] phi dtvSetCpuBankSegment1::cpuBankIdx#3 = dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:mode_8bppchunkybmm::@6->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp __b9
    // mode_8bppchunkybmm::@9
  __b9:
    // [634] mode_8bppchunkybmm::gfxbCpuBank#2 = ++ mode_8bppchunkybmm::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
    // [635] phi from mode_8bppchunkybmm::@9 to mode_8bppchunkybmm::@5 [phi:mode_8bppchunkybmm::@9->mode_8bppchunkybmm::@5]
  __b5_from___b9:
    // [635] phi mode_8bppchunkybmm::gfxbCpuBank#8 = mode_8bppchunkybmm::gfxbCpuBank#2 [phi:mode_8bppchunkybmm::@9->mode_8bppchunkybmm::@5#0] -- register_copy 
    // [635] phi mode_8bppchunkybmm::gfxb#4 = (byte*) 16384 [phi:mode_8bppchunkybmm::@9->mode_8bppchunkybmm::@5#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b5
    // [635] phi from mode_8bppchunkybmm::@4 to mode_8bppchunkybmm::@5 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@5]
  __b5_from___b4:
    // [635] phi mode_8bppchunkybmm::gfxbCpuBank#8 = mode_8bppchunkybmm::gfxbCpuBank#4 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@5#0] -- register_copy 
    // [635] phi mode_8bppchunkybmm::gfxb#4 = mode_8bppchunkybmm::gfxb#3 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@5#1] -- register_copy 
    jmp __b5
    // mode_8bppchunkybmm::@5
  __b5:
    // [636] mode_8bppchunkybmm::$7 = mode_8bppchunkybmm::x#2 + mode_8bppchunkybmm::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z y
    clc
    adc.z x
    sta.z __7
    lda #0
    adc.z x+1
    sta.z __7+1
    // [637] mode_8bppchunkybmm::c#0 = (byte)mode_8bppchunkybmm::$7 -- vbuaa=_byte_vwuz1 
    lda.z __7
    // [638] *mode_8bppchunkybmm::gfxb#4 = mode_8bppchunkybmm::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
    // [639] mode_8bppchunkybmm::gfxb#1 = ++ mode_8bppchunkybmm::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [640] mode_8bppchunkybmm::x#1 = ++ mode_8bppchunkybmm::x#2 -- vwuz1=_inc_vwuz1 
    inc.z x
    bne !+
    inc.z x+1
  !:
    // [641] if(mode_8bppchunkybmm::x#1!=$140) goto mode_8bppchunkybmm::@4 -- vwuz1_neq_vwuc1_then_la1 
    lda.z x+1
    cmp #>$140
    bne __b4_from___b5
    lda.z x
    cmp #<$140
    bne __b4_from___b5
    jmp __b7
    // mode_8bppchunkybmm::@7
  __b7:
    // [642] mode_8bppchunkybmm::y#1 = ++ mode_8bppchunkybmm::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [643] if(mode_8bppchunkybmm::y#1!=$c8) goto mode_8bppchunkybmm::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z y
    bne __b3_from___b7
    // [644] phi from mode_8bppchunkybmm::@7 to mode_8bppchunkybmm::@8 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@8]
  __b8_from___b7:
    jmp __b8
    // mode_8bppchunkybmm::@8
  __b8:
    // [645] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [820] phi from mode_8bppchunkybmm::@8 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b8:
    // [820] phi dtvSetCpuBankSegment1::cpuBankIdx#3 = (byte)$4000/$4000 [phi:mode_8bppchunkybmm::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // [646] phi from mode_8bppchunkybmm::@8 to mode_8bppchunkybmm::@10 [phi:mode_8bppchunkybmm::@8->mode_8bppchunkybmm::@10]
  __b10_from___b8:
    jmp __b10
    // mode_8bppchunkybmm::@10
  __b10:
    // [647] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_8bppchunkybmm::@10 to mode_ctrl [phi:mode_8bppchunkybmm::@10->mode_ctrl]
  mode_ctrl_from___b10:
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF [phi:mode_8bppchunkybmm::@10->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
    jsr mode_ctrl
    jmp __breturn
    // mode_8bppchunkybmm::@return
  __breturn:
    // [648] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = menu.SCREEN
    .label end = str+num
    .label dst = $11
    // [650] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [650] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [651] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [652] return 
    rts
    // memset::@2
  __b2:
    // [653] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [654] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [650] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [650] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [655] *print_char_cursor#37 = print_char::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [656] print_char_cursor#26 = ++ print_char_cursor#37 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [657] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [659] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [659] phi print_line_cursor#19 = print_line_cursor#1 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [660] print_line_cursor#2 = print_line_cursor#19 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [661] if(print_line_cursor#2<print_char_cursor#38) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [662] return 
    rts
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(Y) rowid)
keyboard_matrix_read: {
    // [663] *((byte*)CIA1) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0] -- _deref_pbuc1=pbuc2_derefidx_vbuyy 
    lda keyboard_matrix_row_bitmask,y
    sta CIA1
    // [664] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    jmp __breturn
    // keyboard_matrix_read::@return
  __breturn:
    // [665] return 
    rts
}
  // mode_ctrl
// Allow the user to control the DTV graphics using different keys
mode_ctrl: {
    // DTV Graphics Mode - Reset
    .label ctrl = $c
    // [667] phi from mode_ctrl mode_ctrl::@11 mode_ctrl::@18 to mode_ctrl::@1 [phi:mode_ctrl/mode_ctrl::@11/mode_ctrl::@18->mode_ctrl::@1]
  __b1_from_mode_ctrl:
  __b1_from___b11:
  __b1_from___b18:
    // [667] phi dtv_control#116 = dtv_control#146 [phi:mode_ctrl/mode_ctrl::@11/mode_ctrl::@18->mode_ctrl::@1#0] -- register_copy 
    jmp __b1
    // mode_ctrl::@1
  __b1:
    jmp __b2
  // Wait for the raster
    // mode_ctrl::@2
  __b2:
    // [668] if(*RASTER!=$ff) goto mode_ctrl::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    // [669] phi from mode_ctrl::@2 to mode_ctrl::@3 [phi:mode_ctrl::@2->mode_ctrl::@3]
  __b3_from___b2:
    jmp __b3
    // mode_ctrl::@3
  __b3:
    // [670] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@3 to keyboard_key_pressed [phi:mode_ctrl::@3->keyboard_key_pressed]
  keyboard_key_pressed_from___b3:
    // [132] phi keyboard_key_pressed::key#20 = KEY_SPACE [phi:mode_ctrl::@3->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_SPACE
    jsr keyboard_key_pressed
    // [671] keyboard_key_pressed::return#14 = keyboard_key_pressed::return#0
    jmp __b19
    // mode_ctrl::@19
  __b19:
    // [672] mode_ctrl::$1 = keyboard_key_pressed::return#14
    // [673] if(mode_ctrl::$1==0) goto mode_ctrl::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b4
    jmp __breturn
    // mode_ctrl::@return
  __breturn:
    // [674] return 
    rts
    // mode_ctrl::@4
  __b4:
    // [675] mode_ctrl::ctrl#0 = dtv_control#116 -- vbuz1=vbuxx 
    // Read the current control byte
    stx.z ctrl
    // [676] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@4 to keyboard_key_pressed [phi:mode_ctrl::@4->keyboard_key_pressed]
  keyboard_key_pressed_from___b4:
    // [132] phi keyboard_key_pressed::key#20 = KEY_L [phi:mode_ctrl::@4->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_L
    jsr keyboard_key_pressed
    // [677] keyboard_key_pressed::return#15 = keyboard_key_pressed::return#0
    jmp __b20
    // mode_ctrl::@20
  __b20:
    // [678] mode_ctrl::$4 = keyboard_key_pressed::return#15
    // [679] if(mode_ctrl::$4==0) goto mode_ctrl::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b5_from___b20
    jmp __b12
    // mode_ctrl::@12
  __b12:
    // [680] mode_ctrl::ctrl#1 = mode_ctrl::ctrl#0 | DTV_LINEAR -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_LINEAR
    ora.z ctrl
    sta.z ctrl
    // [681] phi from mode_ctrl::@12 mode_ctrl::@20 to mode_ctrl::@5 [phi:mode_ctrl::@12/mode_ctrl::@20->mode_ctrl::@5]
  __b5_from___b12:
  __b5_from___b20:
    // [681] phi mode_ctrl::ctrl#17 = mode_ctrl::ctrl#1 [phi:mode_ctrl::@12/mode_ctrl::@20->mode_ctrl::@5#0] -- register_copy 
    jmp __b5
    // mode_ctrl::@5
  __b5:
    // [682] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@5 to keyboard_key_pressed [phi:mode_ctrl::@5->keyboard_key_pressed]
  keyboard_key_pressed_from___b5:
    // [132] phi keyboard_key_pressed::key#20 = KEY_H [phi:mode_ctrl::@5->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_H
    jsr keyboard_key_pressed
    // [683] keyboard_key_pressed::return#16 = keyboard_key_pressed::return#0
    jmp __b21
    // mode_ctrl::@21
  __b21:
    // [684] mode_ctrl::$8 = keyboard_key_pressed::return#16
    // [685] if(mode_ctrl::$8==0) goto mode_ctrl::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b6_from___b21
    jmp __b13
    // mode_ctrl::@13
  __b13:
    // [686] mode_ctrl::ctrl#2 = mode_ctrl::ctrl#17 | DTV_HIGHCOLOR -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_HIGHCOLOR
    ora.z ctrl
    sta.z ctrl
    // [687] phi from mode_ctrl::@13 mode_ctrl::@21 to mode_ctrl::@6 [phi:mode_ctrl::@13/mode_ctrl::@21->mode_ctrl::@6]
  __b6_from___b13:
  __b6_from___b21:
    // [687] phi mode_ctrl::ctrl#10 = mode_ctrl::ctrl#2 [phi:mode_ctrl::@13/mode_ctrl::@21->mode_ctrl::@6#0] -- register_copy 
    jmp __b6
    // mode_ctrl::@6
  __b6:
    // [688] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@6 to keyboard_key_pressed [phi:mode_ctrl::@6->keyboard_key_pressed]
  keyboard_key_pressed_from___b6:
    // [132] phi keyboard_key_pressed::key#20 = KEY_O [phi:mode_ctrl::@6->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_O
    jsr keyboard_key_pressed
    // [689] keyboard_key_pressed::return#17 = keyboard_key_pressed::return#0
    jmp __b22
    // mode_ctrl::@22
  __b22:
    // [690] mode_ctrl::$12 = keyboard_key_pressed::return#17
    // [691] if(mode_ctrl::$12==0) goto mode_ctrl::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b7_from___b22
    jmp __b14
    // mode_ctrl::@14
  __b14:
    // [692] mode_ctrl::ctrl#3 = mode_ctrl::ctrl#10 | DTV_OVERSCAN -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_OVERSCAN
    ora.z ctrl
    sta.z ctrl
    // [693] phi from mode_ctrl::@14 mode_ctrl::@22 to mode_ctrl::@7 [phi:mode_ctrl::@14/mode_ctrl::@22->mode_ctrl::@7]
  __b7_from___b14:
  __b7_from___b22:
    // [693] phi mode_ctrl::ctrl#11 = mode_ctrl::ctrl#3 [phi:mode_ctrl::@14/mode_ctrl::@22->mode_ctrl::@7#0] -- register_copy 
    jmp __b7
    // mode_ctrl::@7
  __b7:
    // [694] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@7 to keyboard_key_pressed [phi:mode_ctrl::@7->keyboard_key_pressed]
  keyboard_key_pressed_from___b7:
    // [132] phi keyboard_key_pressed::key#20 = KEY_B [phi:mode_ctrl::@7->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_B
    jsr keyboard_key_pressed
    // [695] keyboard_key_pressed::return#18 = keyboard_key_pressed::return#0
    jmp __b23
    // mode_ctrl::@23
  __b23:
    // [696] mode_ctrl::$16 = keyboard_key_pressed::return#18
    // [697] if(mode_ctrl::$16==0) goto mode_ctrl::@8 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b8_from___b23
    jmp __b15
    // mode_ctrl::@15
  __b15:
    // [698] mode_ctrl::ctrl#4 = mode_ctrl::ctrl#11 | DTV_BORDER_OFF -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_BORDER_OFF
    ora.z ctrl
    sta.z ctrl
    // [699] phi from mode_ctrl::@15 mode_ctrl::@23 to mode_ctrl::@8 [phi:mode_ctrl::@15/mode_ctrl::@23->mode_ctrl::@8]
  __b8_from___b15:
  __b8_from___b23:
    // [699] phi mode_ctrl::ctrl#12 = mode_ctrl::ctrl#4 [phi:mode_ctrl::@15/mode_ctrl::@23->mode_ctrl::@8#0] -- register_copy 
    jmp __b8
    // mode_ctrl::@8
  __b8:
    // [700] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@8 to keyboard_key_pressed [phi:mode_ctrl::@8->keyboard_key_pressed]
  keyboard_key_pressed_from___b8:
    // [132] phi keyboard_key_pressed::key#20 = KEY_U [phi:mode_ctrl::@8->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_U
    jsr keyboard_key_pressed
    // [701] keyboard_key_pressed::return#19 = keyboard_key_pressed::return#0
    jmp __b24
    // mode_ctrl::@24
  __b24:
    // [702] mode_ctrl::$20 = keyboard_key_pressed::return#19
    // [703] if(mode_ctrl::$20==0) goto mode_ctrl::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b9_from___b24
    jmp __b16
    // mode_ctrl::@16
  __b16:
    // [704] mode_ctrl::ctrl#5 = mode_ctrl::ctrl#12 | DTV_CHUNKY -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_CHUNKY
    ora.z ctrl
    sta.z ctrl
    // [705] phi from mode_ctrl::@16 mode_ctrl::@24 to mode_ctrl::@9 [phi:mode_ctrl::@16/mode_ctrl::@24->mode_ctrl::@9]
  __b9_from___b16:
  __b9_from___b24:
    // [705] phi mode_ctrl::ctrl#13 = mode_ctrl::ctrl#5 [phi:mode_ctrl::@16/mode_ctrl::@24->mode_ctrl::@9#0] -- register_copy 
    jmp __b9
    // mode_ctrl::@9
  __b9:
    // [706] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@9 to keyboard_key_pressed [phi:mode_ctrl::@9->keyboard_key_pressed]
  keyboard_key_pressed_from___b9:
    // [132] phi keyboard_key_pressed::key#20 = KEY_C [phi:mode_ctrl::@9->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_C
    jsr keyboard_key_pressed
    // [707] keyboard_key_pressed::return#20 = keyboard_key_pressed::return#0
    jmp __b25
    // mode_ctrl::@25
  __b25:
    // [708] mode_ctrl::$24 = keyboard_key_pressed::return#20
    // [709] if(mode_ctrl::$24==0) goto mode_ctrl::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10_from___b25
    jmp __b17
    // mode_ctrl::@17
  __b17:
    // [710] mode_ctrl::ctrl#6 = mode_ctrl::ctrl#13 | DTV_COLORRAM_OFF -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_COLORRAM_OFF
    ora.z ctrl
    sta.z ctrl
    // [711] phi from mode_ctrl::@17 mode_ctrl::@25 to mode_ctrl::@10 [phi:mode_ctrl::@17/mode_ctrl::@25->mode_ctrl::@10]
  __b10_from___b17:
  __b10_from___b25:
    // [711] phi mode_ctrl::ctrl#22 = mode_ctrl::ctrl#6 [phi:mode_ctrl::@17/mode_ctrl::@25->mode_ctrl::@10#0] -- register_copy 
    jmp __b10
    // mode_ctrl::@10
  __b10:
    // [712] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@10 to keyboard_key_pressed [phi:mode_ctrl::@10->keyboard_key_pressed]
  keyboard_key_pressed_from___b10:
    // [132] phi keyboard_key_pressed::key#20 = KEY_0 [phi:mode_ctrl::@10->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_0
    jsr keyboard_key_pressed
    // [713] keyboard_key_pressed::return#21 = keyboard_key_pressed::return#0
    jmp __b26
    // mode_ctrl::@26
  __b26:
    // [714] mode_ctrl::$28 = keyboard_key_pressed::return#21
    // [715] if(mode_ctrl::$28==0) goto mode_ctrl::@27 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b27_from___b26
    // [717] phi from mode_ctrl::@26 to mode_ctrl::@11 [phi:mode_ctrl::@26->mode_ctrl::@11]
  __b11_from___b26:
    // [717] phi mode_ctrl::ctrl#14 = 0 [phi:mode_ctrl::@26->mode_ctrl::@11#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ctrl
    jmp __b11
    // [716] phi from mode_ctrl::@26 to mode_ctrl::@27 [phi:mode_ctrl::@26->mode_ctrl::@27]
  __b27_from___b26:
    jmp __b27
    // mode_ctrl::@27
  __b27:
    // [717] phi from mode_ctrl::@27 to mode_ctrl::@11 [phi:mode_ctrl::@27->mode_ctrl::@11]
  __b11_from___b27:
    // [717] phi mode_ctrl::ctrl#14 = mode_ctrl::ctrl#22 [phi:mode_ctrl::@27->mode_ctrl::@11#0] -- register_copy 
    jmp __b11
    // mode_ctrl::@11
  __b11:
    // [718] if(mode_ctrl::ctrl#14==dtv_control#116) goto mode_ctrl::@1 -- vbuz1_eq_vbuxx_then_la1 
    cpx.z ctrl
    beq __b1_from___b11
    jmp __b18
    // mode_ctrl::@18
  __b18:
    // [719] dtv_control#16 = mode_ctrl::ctrl#14 -- vbuxx=vbuz1 
    ldx.z ctrl
    // [720] *DTV_CONTROL = mode_ctrl::ctrl#14 -- _deref_pbuc1=vbuz1 
    lda.z ctrl
    sta DTV_CONTROL
    // [721] *BORDER_COLOR = mode_ctrl::ctrl#14 -- _deref_pbuc1=vbuz1 
    lda.z ctrl
    sta BORDER_COLOR
    jmp __b1_from___b18
}
  // bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label __10 = $10
    .label yoffs = $11
    // [723] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [723] phi bitmap_init::bits#3 = $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
    // [723] phi bitmap_init::x#2 = 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [723] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [723] phi bitmap_init::bits#3 = bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [723] phi bitmap_init::x#2 = bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [724] bitmap_init::$0 = bitmap_init::x#2 & $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
    // [725] bitmap_plot_xlo[bitmap_init::x#2] = bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
    // [726] bitmap_plot_xhi[bitmap_init::x#2] = >mode_stdbitmap::BITMAP -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>mode_stdbitmap.BITMAP
    sta bitmap_plot_xhi,x
    // [727] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
    // [728] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
    // [729] if(bitmap_init::bits#1!=0) goto bitmap_init::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b6_from___b1
    // [731] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [731] phi bitmap_init::bits#4 = $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    jmp __b2
    // [730] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [731] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [731] phi bitmap_init::bits#4 = bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [732] bitmap_init::x#1 = ++ bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [733] if(bitmap_init::x#1!=0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    // [734] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [734] phi bitmap_init::yoffs#2 = (byte*) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    lda #>0
    sta.z yoffs+1
    // [734] phi bitmap_init::y#2 = 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [734] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [734] phi bitmap_init::yoffs#2 = bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [734] phi bitmap_init::y#2 = bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [735] bitmap_init::$10 = bitmap_init::y#2 & 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __10
    // [736] bitmap_init::$7 = < bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // [737] bitmap_init::$8 = bitmap_init::$10 | bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __10
    // [738] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // [739] bitmap_init::$9 = > bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // [740] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // [741] if(bitmap_init::$10!=7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __10
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [742] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [743] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [743] phi bitmap_init::yoffs#4 = bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [744] bitmap_init::y#1 = ++ bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [745] if(bitmap_init::y#1!=0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [746] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $11
    .label y = $10
    // [747] bitmap_clear::bitmap#0 = *bitmap_plot_xhi w= *bitmap_plot_xlo -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta.z bitmap
    lda bitmap_plot_xhi
    sta.z bitmap+1
    // [748] bitmap_clear::bitmap#5 = (byte*)bitmap_clear::bitmap#0
    // [749] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    // [749] phi bitmap_clear::y#4 = 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [749] phi bitmap_clear::bitmap#3 = bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // [749] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  __b1_from___b3:
    // [749] phi bitmap_clear::y#4 = bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
    // [749] phi bitmap_clear::bitmap#3 = bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [750] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  __b2_from___b1:
    // [750] phi bitmap_clear::x#2 = 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [750] phi bitmap_clear::bitmap#2 = bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // [750] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  __b2_from___b2:
    // [750] phi bitmap_clear::x#2 = bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
    // [750] phi bitmap_clear::bitmap#2 = bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // bitmap_clear::@2
  __b2:
    // [751] *bitmap_clear::bitmap#2 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
    // [752] bitmap_clear::bitmap#1 = ++ bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc.z bitmap
    bne !+
    inc.z bitmap+1
  !:
    // [753] bitmap_clear::x#1 = ++ bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [754] if(bitmap_clear::x#1!=$c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne __b2_from___b2
    jmp __b3
    // bitmap_clear::@3
  __b3:
    // [755] bitmap_clear::y#1 = ++ bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [756] if(bitmap_clear::y#1!=$28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z y
    bne __b1_from___b3
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [757] return 
    rts
}
  // bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zp($f) x0, byte zp($10) x1, byte register(X) y0, byte zp($e) y1)
bitmap_line: {
    .label xd = $c
    .label x0 = $f
    .label x1 = $10
    .label y1 = $e
    // [758] if(bitmap_line::x0#0<bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x0
    cmp.z x1
    bcc __b1
    jmp __b2
    // bitmap_line::@2
  __b2:
    // [759] bitmap_line::xd#2 = bitmap_line::x0#0 - bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x0
    sec
    sbc.z x1
    sta.z xd
    // [760] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@7 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z y1
    bcc __b7
    jmp __b3
    // bitmap_line::@3
  __b3:
    // [761] bitmap_line::yd#2 = bitmap_line::y0#0 - bitmap_line::y1#0 -- vbuyy=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z y1
    tay
    // [762] if(bitmap_line::yd#2<bitmap_line::xd#2) goto bitmap_line::@8 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b8
    jmp __b4
    // bitmap_line::@4
  __b4:
    // [763] bitmap_line_ydxi::y#0 = bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxi.y
    // [764] bitmap_line_ydxi::x#0 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_ydxi.x
    // [765] bitmap_line_ydxi::y1#0 = bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxi.y1
    // [766] bitmap_line_ydxi::yd#0 = bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [767] bitmap_line_ydxi::xd#0 = bitmap_line::xd#2
    // [768] call bitmap_line_ydxi 
    // [824] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b4:
    // [824] phi bitmap_line_ydxi::y1#6 = bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
    // [824] phi bitmap_line_ydxi::yd#5 = bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
    // [824] phi bitmap_line_ydxi::y#6 = bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
    // [824] phi bitmap_line_ydxi::x#5 = bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
    // [824] phi bitmap_line_ydxi::xd#2 = bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@return
  __breturn:
    // [769] return 
    rts
    // bitmap_line::@8
  __b8:
    // [770] bitmap_line_xdyi::x#0 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x
    // [771] bitmap_line_xdyi::y#0 = bitmap_line::y1#0 -- vbuxx=vbuz1 
    ldx.z y1
    // [772] bitmap_line_xdyi::x1#0 = bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x1
    // [773] bitmap_line_xdyi::xd#0 = bitmap_line::xd#2
    // [774] bitmap_line_xdyi::yd#0 = bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [775] call bitmap_line_xdyi 
    // [839] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b8:
    // [839] phi bitmap_line_xdyi::x1#6 = bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
    // [839] phi bitmap_line_xdyi::xd#5 = bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
    // [839] phi bitmap_line_xdyi::y#5 = bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
    // [839] phi bitmap_line_xdyi::x#6 = bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
    // [839] phi bitmap_line_xdyi::yd#2 = bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
    // bitmap_line::@7
  __b7:
    // [776] bitmap_line::yd#1 = bitmap_line::y1#0 - bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z y1
    tay
    // [777] if(bitmap_line::yd#1<bitmap_line::xd#2) goto bitmap_line::@9 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b9
    jmp __b10
    // bitmap_line::@10
  __b10:
    // [778] bitmap_line_ydxd::y#0 = bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxd.y
    // [779] bitmap_line_ydxd::x#0 = bitmap_line::x0#0
    // [780] bitmap_line_ydxd::y1#0 = bitmap_line::y1#0
    // [781] bitmap_line_ydxd::yd#0 = bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [782] bitmap_line_ydxd::xd#0 = bitmap_line::xd#2
    // [783] call bitmap_line_ydxd 
    // [854] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b10:
    // [854] phi bitmap_line_ydxd::y1#6 = bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
    // [854] phi bitmap_line_ydxd::yd#5 = bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
    // [854] phi bitmap_line_ydxd::y#7 = bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
    // [854] phi bitmap_line_ydxd::x#5 = bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
    // [854] phi bitmap_line_ydxd::xd#2 = bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@9
  __b9:
    // [784] bitmap_line_xdyd::x#0 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x
    // [785] bitmap_line_xdyd::y#0 = bitmap_line::y1#0 -- vbuxx=vbuz1 
    ldx.z y1
    // [786] bitmap_line_xdyd::x1#0 = bitmap_line::x0#0
    // [787] bitmap_line_xdyd::xd#0 = bitmap_line::xd#2
    // [788] bitmap_line_xdyd::yd#0 = bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [789] call bitmap_line_xdyd 
    // [869] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b9:
    // [869] phi bitmap_line_xdyd::x1#6 = bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
    // [869] phi bitmap_line_xdyd::xd#5 = bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
    // [869] phi bitmap_line_xdyd::y#5 = bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
    // [869] phi bitmap_line_xdyd::x#6 = bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
    // [869] phi bitmap_line_xdyd::yd#2 = bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@1
  __b1:
    // [790] bitmap_line::xd#1 = bitmap_line::x1#0 - bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x0
    sta.z xd
    // [791] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@11 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z y1
    bcc __b11
    jmp __b5
    // bitmap_line::@5
  __b5:
    // [792] bitmap_line::yd#10 = bitmap_line::y0#0 - bitmap_line::y1#0 -- vbuyy=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z y1
    tay
    // [793] if(bitmap_line::yd#10<bitmap_line::xd#1) goto bitmap_line::@12 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b12
    jmp __b6
    // bitmap_line::@6
  __b6:
    // [794] bitmap_line_ydxd::y#1 = bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y
    // [795] bitmap_line_ydxd::x#1 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_ydxd.x
    // [796] bitmap_line_ydxd::y1#1 = bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxd.y1
    // [797] bitmap_line_ydxd::yd#1 = bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [798] bitmap_line_ydxd::xd#1 = bitmap_line::xd#1
    // [799] call bitmap_line_ydxd 
    // [854] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b6:
    // [854] phi bitmap_line_ydxd::y1#6 = bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
    // [854] phi bitmap_line_ydxd::yd#5 = bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
    // [854] phi bitmap_line_ydxd::y#7 = bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
    // [854] phi bitmap_line_ydxd::x#5 = bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
    // [854] phi bitmap_line_ydxd::xd#2 = bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@12
  __b12:
    // [800] bitmap_line_xdyd::x#1 = bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x
    // [801] bitmap_line_xdyd::y#1 = bitmap_line::y0#0
    // [802] bitmap_line_xdyd::x1#1 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x1
    // [803] bitmap_line_xdyd::xd#1 = bitmap_line::xd#1
    // [804] bitmap_line_xdyd::yd#1 = bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [805] call bitmap_line_xdyd 
    // [869] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b12:
    // [869] phi bitmap_line_xdyd::x1#6 = bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
    // [869] phi bitmap_line_xdyd::xd#5 = bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
    // [869] phi bitmap_line_xdyd::y#5 = bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
    // [869] phi bitmap_line_xdyd::x#6 = bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
    // [869] phi bitmap_line_xdyd::yd#2 = bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@11
  __b11:
    // [806] bitmap_line::yd#11 = bitmap_line::y1#0 - bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z y1
    tay
    // [807] if(bitmap_line::yd#11<bitmap_line::xd#1) goto bitmap_line::@13 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b13
    jmp __b14
    // bitmap_line::@14
  __b14:
    // [808] bitmap_line_ydxi::y#1 = bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxi.y
    // [809] bitmap_line_ydxi::x#1 = bitmap_line::x0#0
    // [810] bitmap_line_ydxi::y1#1 = bitmap_line::y1#0
    // [811] bitmap_line_ydxi::yd#1 = bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [812] bitmap_line_ydxi::xd#1 = bitmap_line::xd#1
    // [813] call bitmap_line_ydxi 
    // [824] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b14:
    // [824] phi bitmap_line_ydxi::y1#6 = bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
    // [824] phi bitmap_line_ydxi::yd#5 = bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
    // [824] phi bitmap_line_ydxi::y#6 = bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
    // [824] phi bitmap_line_ydxi::x#5 = bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
    // [824] phi bitmap_line_ydxi::xd#2 = bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@13
  __b13:
    // [814] bitmap_line_xdyi::x#1 = bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x
    // [815] bitmap_line_xdyi::y#1 = bitmap_line::y0#0
    // [816] bitmap_line_xdyi::x1#1 = bitmap_line::x1#0
    // [817] bitmap_line_xdyi::xd#1 = bitmap_line::xd#1
    // [818] bitmap_line_xdyi::yd#1 = bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [819] call bitmap_line_xdyi 
    // [839] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b13:
    // [839] phi bitmap_line_xdyi::x1#6 = bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
    // [839] phi bitmap_line_xdyi::xd#5 = bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
    // [839] phi bitmap_line_xdyi::y#5 = bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
    // [839] phi bitmap_line_xdyi::x#6 = bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
    // [839] phi bitmap_line_xdyi::yd#2 = bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
}
  // dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    // [821] *dtvSetCpuBankSegment1::cpuBank = dtvSetCpuBankSegment1::cpuBankIdx#3 -- _deref_pbuc1=vbuaa 
    sta cpuBank
    // asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda.z $ff
    .byte $32, $00
    jmp __breturn
    // dtvSetCpuBankSegment1::@return
  __breturn:
    // [823] return 
    rts
}
  // bitmap_line_ydxi
// bitmap_line_ydxi(byte zp($a) y, byte zp($f) x, byte zp($e) y1, byte zp($d) yd, byte zp($c) xd)
bitmap_line_ydxi: {
    .label y = $a
    .label x = $f
    .label y1 = $e
    .label yd = $d
    .label xd = $c
    .label e = $10
    // [825] bitmap_line_ydxi::e#0 = bitmap_line_ydxi::xd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [826] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  __b1_from_bitmap_line_ydxi:
  __b1_from___b2:
    // [826] phi bitmap_line_ydxi::e#3 = bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
    // [826] phi bitmap_line_ydxi::y#3 = bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
    // [826] phi bitmap_line_ydxi::x#3 = bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxi::@1
  __b1:
    // [827] bitmap_plot::x#2 = bitmap_line_ydxi::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [828] bitmap_plot::y#2 = bitmap_line_ydxi::y#3 -- vbuxx=vbuz1 
    ldx.z y
    // [829] call bitmap_plot 
    // [884] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [884] phi bitmap_plot::y#4 = bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
    // [884] phi bitmap_plot::x#4 = bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxi::@4
  __b4:
    // [830] bitmap_line_ydxi::y#2 = ++ bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [831] bitmap_line_ydxi::e#1 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [832] if(bitmap_line_ydxi::yd#5>=bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxi::@3
  __b3:
    // [833] bitmap_line_ydxi::x#2 = ++ bitmap_line_ydxi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [834] bitmap_line_ydxi::e#2 = bitmap_line_ydxi::e#1 - bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [835] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [835] phi bitmap_line_ydxi::e#6 = bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
    // [835] phi bitmap_line_ydxi::x#6 = bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxi::@2
  __b2:
    // [836] bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#6 + 1 -- vbuxx=vbuz1_plus_1 
    ldx.z y1
    inx
    // [837] if(bitmap_line_ydxi::y#2!=bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z y
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxi::@return
  __breturn:
    // [838] return 
    rts
}
  // bitmap_line_xdyi
// bitmap_line_xdyi(byte zp($a) x, byte register(X) y, byte zp($10) x1, byte zp($c) xd, byte zp($d) yd)
bitmap_line_xdyi: {
    .label x = $a
    .label x1 = $10
    .label xd = $c
    .label yd = $d
    .label e = $b
    // [840] bitmap_line_xdyi::e#0 = bitmap_line_xdyi::yd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [841] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  __b1_from_bitmap_line_xdyi:
  __b1_from___b2:
    // [841] phi bitmap_line_xdyi::e#3 = bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
    // [841] phi bitmap_line_xdyi::y#3 = bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
    // [841] phi bitmap_line_xdyi::x#3 = bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyi::@1
  __b1:
    // [842] bitmap_plot::x#0 = bitmap_line_xdyi::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [843] bitmap_plot::y#0 = bitmap_line_xdyi::y#3
    // [844] call bitmap_plot 
    // [884] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [884] phi bitmap_plot::y#4 = bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
    // [884] phi bitmap_plot::x#4 = bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyi::@4
  __b4:
    // [845] bitmap_line_xdyi::x#2 = ++ bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [846] bitmap_line_xdyi::e#1 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [847] if(bitmap_line_xdyi::xd#5>=bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyi::@3
  __b3:
    // [848] bitmap_line_xdyi::y#2 = ++ bitmap_line_xdyi::y#3 -- vbuxx=_inc_vbuxx 
    inx
    // [849] bitmap_line_xdyi::e#2 = bitmap_line_xdyi::e#1 - bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [850] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [850] phi bitmap_line_xdyi::e#6 = bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
    // [850] phi bitmap_line_xdyi::y#6 = bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyi::@2
  __b2:
    // [851] bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#6 + 1 -- vbuaa=vbuz1_plus_1 
    lda.z x1
    clc
    adc #1
    // [852] if(bitmap_line_xdyi::x#2!=bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z x
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyi::@return
  __breturn:
    // [853] return 
    rts
}
  // bitmap_line_ydxd
// bitmap_line_ydxd(byte zp($a) y, byte zp($f) x, byte zp($e) y1, byte zp($b) yd, byte zp($c) xd)
bitmap_line_ydxd: {
    .label y = $a
    .label x = $f
    .label y1 = $e
    .label yd = $b
    .label xd = $c
    .label e = $d
    // [855] bitmap_line_ydxd::e#0 = bitmap_line_ydxd::xd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [856] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  __b1_from_bitmap_line_ydxd:
  __b1_from___b2:
    // [856] phi bitmap_line_ydxd::e#3 = bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
    // [856] phi bitmap_line_ydxd::y#2 = bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
    // [856] phi bitmap_line_ydxd::x#3 = bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxd::@1
  __b1:
    // [857] bitmap_plot::x#3 = bitmap_line_ydxd::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [858] bitmap_plot::y#3 = bitmap_line_ydxd::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [859] call bitmap_plot 
    // [884] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [884] phi bitmap_plot::y#4 = bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
    // [884] phi bitmap_plot::x#4 = bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxd::@4
  __b4:
    // [860] bitmap_line_ydxd::y#3 = ++ bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [861] bitmap_line_ydxd::e#1 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [862] if(bitmap_line_ydxd::yd#5>=bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxd::@3
  __b3:
    // [863] bitmap_line_ydxd::x#2 = -- bitmap_line_ydxd::x#3 -- vbuz1=_dec_vbuz1 
    dec.z x
    // [864] bitmap_line_ydxd::e#2 = bitmap_line_ydxd::e#1 - bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [865] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [865] phi bitmap_line_ydxd::e#6 = bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
    // [865] phi bitmap_line_ydxd::x#6 = bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxd::@2
  __b2:
    // [866] bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#6 + 1 -- vbuxx=vbuz1_plus_1 
    ldx.z y1
    inx
    // [867] if(bitmap_line_ydxd::y#3!=bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z y
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxd::@return
  __breturn:
    // [868] return 
    rts
}
  // bitmap_line_xdyd
// bitmap_line_xdyd(byte zp($d) x, byte register(X) y, byte zp($f) x1, byte zp($c) xd, byte zp($a) yd)
bitmap_line_xdyd: {
    .label x = $d
    .label x1 = $f
    .label xd = $c
    .label yd = $a
    .label e = $b
    // [870] bitmap_line_xdyd::e#0 = bitmap_line_xdyd::yd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [871] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  __b1_from_bitmap_line_xdyd:
  __b1_from___b2:
    // [871] phi bitmap_line_xdyd::e#3 = bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
    // [871] phi bitmap_line_xdyd::y#3 = bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
    // [871] phi bitmap_line_xdyd::x#3 = bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyd::@1
  __b1:
    // [872] bitmap_plot::x#1 = bitmap_line_xdyd::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [873] bitmap_plot::y#1 = bitmap_line_xdyd::y#3
    // [874] call bitmap_plot 
    // [884] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [884] phi bitmap_plot::y#4 = bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
    // [884] phi bitmap_plot::x#4 = bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyd::@4
  __b4:
    // [875] bitmap_line_xdyd::x#2 = ++ bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [876] bitmap_line_xdyd::e#1 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [877] if(bitmap_line_xdyd::xd#5>=bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyd::@3
  __b3:
    // [878] bitmap_line_xdyd::y#2 = -- bitmap_line_xdyd::y#3 -- vbuxx=_dec_vbuxx 
    dex
    // [879] bitmap_line_xdyd::e#2 = bitmap_line_xdyd::e#1 - bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [880] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [880] phi bitmap_line_xdyd::e#6 = bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
    // [880] phi bitmap_line_xdyd::y#6 = bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyd::@2
  __b2:
    // [881] bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#6 + 1 -- vbuaa=vbuz1_plus_1 
    lda.z x1
    clc
    adc #1
    // [882] if(bitmap_line_xdyd::x#2!=bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z x
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyd::@return
  __breturn:
    // [883] return 
    rts
}
  // bitmap_plot
// bitmap_plot(byte register(Y) x, byte register(X) y)
bitmap_plot: {
    .label plotter_x = $11
    .label plotter_y = $13
    .label plotter = $11
    // [885] bitmap_plot::plotter_x#0 = bitmap_plot_xhi[bitmap_plot::x#4] w= bitmap_plot_xlo[bitmap_plot::x#4] -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_xhi,y
    sta.z plotter_x+1
    lda bitmap_plot_xlo,y
    sta.z plotter_x
    // [886] bitmap_plot::plotter_y#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta.z plotter_y+1
    lda bitmap_plot_ylo,x
    sta.z plotter_y
    // [887] bitmap_plot::plotter#0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter+1
    adc.z plotter_y+1
    sta.z plotter+1
    // [888] bitmap_plot::$1 = *((byte*)bitmap_plot::plotter#0) | bitmap_plot_bit[bitmap_plot::x#4] -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuyy 
    lda bitmap_plot_bit,y
    ldy #0
    ora (plotter),y
    // [889] *((byte*)bitmap_plot::plotter#0) = bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (plotter),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [890] return 
    rts
}
  // File Data
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  MENU_TEXT: .text "C64DTV Graphics Modes            CCLHBME@                                 OHIIMCC@                                 LUNCMMM@----------------------------------------@1. Standard Char             (V) 0000000@2. Extended Color Char       (V) 0000001@3. Multicolor Char           (V) 0000010@4. Standard Bitmap           (V) 0000100@5. Multicolor Bitmap         (V) 0000110@6. High Color Standard Char  (H) 0001000@7. High Extended Color Char  (H) 0001001@8. High Multicolor Char      (H) 0001010@9. High Multicolor Bitmap    (H) 0001110@a. Sixs Fred 2               (D) 0010111@b. Two Plane Bitmap          (D) 0011101@c. Sixs Fred (2 Plane MC BM) (D) 0011111@d. 8bpp Pixel Cell           (D) 0111011@e. Chunky 8bpp Bitmap        (D) 1111011@----------------------------------------@    (V) vicII (H) vicII+hicol (D) c64dtv@"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b29
Removing instruction jmp __b30
Removing instruction jmp __b5
Removing instruction jmp __b31
Removing instruction jmp __b17
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b32
Removing instruction jmp __b18
Removing instruction jmp __b7
Removing instruction jmp __b33
Removing instruction jmp __b19
Removing instruction jmp __b8
Removing instruction jmp __b34
Removing instruction jmp __b20
Removing instruction jmp __b9
Removing instruction jmp __b35
Removing instruction jmp __b21
Removing instruction jmp __b10
Removing instruction jmp __b36
Removing instruction jmp __b22
Removing instruction jmp __b11
Removing instruction jmp __b37
Removing instruction jmp __b23
Removing instruction jmp __b12
Removing instruction jmp __b38
Removing instruction jmp __b24
Removing instruction jmp __b13
Removing instruction jmp __b39
Removing instruction jmp __b25
Removing instruction jmp __b14
Removing instruction jmp __b40
Removing instruction jmp __b26
Removing instruction jmp __b15
Removing instruction jmp __b41
Removing instruction jmp __b27
Removing instruction jmp __b16
Removing instruction jmp __b42
Removing instruction jmp __b28
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b10
Removing instruction jmp __b7
Removing instruction jmp __b9
Removing instruction jmp __breturn
Removing instruction jmp __b11
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b10
Removing instruction jmp __b9
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b10
Removing instruction jmp __b9
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b9
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b19
Removing instruction jmp __breturn
Removing instruction jmp __b20
Removing instruction jmp __b12
Removing instruction jmp __b5
Removing instruction jmp __b21
Removing instruction jmp __b13
Removing instruction jmp __b6
Removing instruction jmp __b22
Removing instruction jmp __b14
Removing instruction jmp __b7
Removing instruction jmp __b23
Removing instruction jmp __b15
Removing instruction jmp __b8
Removing instruction jmp __b24
Removing instruction jmp __b16
Removing instruction jmp __b9
Removing instruction jmp __b25
Removing instruction jmp __b17
Removing instruction jmp __b10
Removing instruction jmp __b26
Removing instruction jmp __b27
Removing instruction jmp __b11
Removing instruction jmp __b18
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b10
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b14
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #BLACK
Removing instruction ldy.z l
Removing instruction ldy.z l
Removing instruction ldy.z l
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #>0
Replacing instruction lda.z ctrl with TXA
Replacing instruction lda.z ctrl with TXA
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Replacing instruction ldy #0 with TAY
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b6_from___b31 with __b6
Replacing label __b7_from___b32 with __b7
Replacing label __b8_from___b33 with __b8
Replacing label __b9_from___b34 with __b9
Replacing label __b10_from___b35 with __b10
Replacing label __b11_from___b36 with __b11
Replacing label __b12_from___b37 with __b12
Replacing label __b13_from___b38 with __b13
Replacing label __b14_from___b39 with __b14
Replacing label __b15_from___b40 with __b15
Replacing label __b16_from___b41 with __b16
Replacing label __b5_from___b42 with __b5
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b1 with __b1
Replacing label __b4_from___b4 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b4_from___b4 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b4_from___b4 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b4_from___b4 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b4_from___b4 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b4_from___b4 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b4_from___b4 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b4_from___b4 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b7_from___b7 with __b7
Replacing label __b6_from___b8 with __b6
Replacing label __b10_from___b10 with __b10
Replacing label __b9_from___b11 with __b9
Replacing label __b1_from___b1 with __b1
Replacing label __b4_from___b4 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b7_from___b9 with __b7
Replacing label __b6_from___b11 with __b6
Replacing label __b13_from___b13 with __b13
Replacing label __b12_from___b14 with __b12
Replacing label __b9_from___b8 with __b9
Replacing label __b1_from___b1 with __b1
Replacing label __b4_from___b4 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b7_from___b7 with __b7
Replacing label __b6_from___b8 with __b6
Replacing label __b10_from___b10 with __b10
Replacing label __b9_from___b11 with __b9
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from___b3 with __b3
Replacing label __b2_from___b4 with __b2
Replacing label __b8_from___b9 with __b8
Replacing label __b7_from___b11 with __b7
Replacing label __b6_from___b12 with __b6
Replacing label __b1_from___b1 with __b1
Replacing label __b5_from___b4 with __b5
Replacing label __b5_from___b4 with __b5
Replacing label __b4_from___b5 with __b4
Replacing label __b4_from___b5 with __b4
Replacing label __b3_from___b7 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b5_from___b20 with __b5
Replacing label __b6_from___b21 with __b6
Replacing label __b7_from___b22 with __b7
Replacing label __b8_from___b23 with __b8
Replacing label __b9_from___b24 with __b9
Replacing label __b10_from___b25 with __b10
Replacing label __b27_from___b26 with __b11
Replacing label __b1_from___b11 with __b1
Replacing label __b1_from___b18 with __b1
Replacing label __b6_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from_main:
Removing instruction __b1_from___b1:
Removing instruction __b1_from___b1:
Removing instruction __b29_from___b4:
Removing instruction print_cls_from___b29:
Removing instruction __b30_from___b29:
Removing instruction print_str_lines_from___b30:
Removing instruction __b5_from___b30:
Removing instruction __b5_from___b42:
Removing instruction keyboard_key_pressed_from___b5:
Removing instruction __b17_from___b31:
Removing instruction __b6_from___b31:
Removing instruction keyboard_key_pressed_from___b6:
Removing instruction __b18_from___b32:
Removing instruction __b7_from___b32:
Removing instruction keyboard_key_pressed_from___b7:
Removing instruction __b19_from___b33:
Removing instruction __b8_from___b33:
Removing instruction keyboard_key_pressed_from___b8:
Removing instruction __b20_from___b34:
Removing instruction __b9_from___b34:
Removing instruction keyboard_key_pressed_from___b9:
Removing instruction __b21_from___b35:
Removing instruction __b10_from___b35:
Removing instruction keyboard_key_pressed_from___b10:
Removing instruction __b22_from___b36:
Removing instruction __b11_from___b36:
Removing instruction keyboard_key_pressed_from___b11:
Removing instruction __b23_from___b37:
Removing instruction __b12_from___b37:
Removing instruction keyboard_key_pressed_from___b12:
Removing instruction __b24_from___b38:
Removing instruction __b13_from___b38:
Removing instruction keyboard_key_pressed_from___b13:
Removing instruction __b25_from___b39:
Removing instruction __b14_from___b39:
Removing instruction keyboard_key_pressed_from___b14:
Removing instruction __b26_from___b40:
Removing instruction __b15_from___b40:
Removing instruction keyboard_key_pressed_from___b15:
Removing instruction __b27_from___b41:
Removing instruction __b16_from___b41:
Removing instruction keyboard_key_pressed_from___b16:
Removing instruction __b28_from___b42:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b5_from___b3:
Removing instruction print_ln_from___b5:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b10_from___b6:
Removing instruction __b9_from___b7:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __b6_from___b8:
Removing instruction __b7_from___b6:
Removing instruction __b7_from___b7:
Removing instruction __b9_from___b11:
Removing instruction __b10_from___b9:
Removing instruction __b10_from___b10:
Removing instruction __b12_from___b11:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __b6_from___b11:
Removing instruction __b7_from___b6:
Removing instruction __b7_from___b9:
Removing instruction __b9_from___b10:
Removing instruction __b9_from___b8:
Removing instruction __b12_from___b14:
Removing instruction __b13_from___b12:
Removing instruction __b13_from___b13:
Removing instruction __b15_from___b14:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __b6_from___b8:
Removing instruction __b7_from___b6:
Removing instruction __b7_from___b7:
Removing instruction __b9_from___b11:
Removing instruction __b10_from___b9:
Removing instruction __b10_from___b10:
Removing instruction __b12_from___b11:
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b3:
Removing instruction __b6_from___b12:
Removing instruction __b7_from___b6:
Removing instruction __b7_from___b11:
Removing instruction __b8_from___b9:
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b1:
Removing instruction dtvSetCpuBankSegment1_from___b2:
Removing instruction __b3_from___b7:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b5_from___b4:
Removing instruction __b8_from___b7:
Removing instruction __b10_from___b8:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b1_from_mode_ctrl:
Removing instruction __b1_from___b11:
Removing instruction __b1_from___b18:
Removing instruction __b3_from___b2:
Removing instruction keyboard_key_pressed_from___b3:
Removing instruction __b5_from___b12:
Removing instruction __b5_from___b20:
Removing instruction keyboard_key_pressed_from___b5:
Removing instruction __b6_from___b13:
Removing instruction __b6_from___b21:
Removing instruction keyboard_key_pressed_from___b6:
Removing instruction __b7_from___b14:
Removing instruction __b7_from___b22:
Removing instruction keyboard_key_pressed_from___b7:
Removing instruction __b8_from___b15:
Removing instruction __b8_from___b23:
Removing instruction keyboard_key_pressed_from___b8:
Removing instruction __b9_from___b16:
Removing instruction __b9_from___b24:
Removing instruction keyboard_key_pressed_from___b9:
Removing instruction __b10_from___b17:
Removing instruction __b10_from___b25:
Removing instruction keyboard_key_pressed_from___b10:
Removing instruction __b27_from___b26:
Removing instruction __b27:
Removing instruction __b11_from___b27:
Removing instruction __b1_from___b2:
Removing instruction __b6_from___b1:
Removing instruction __b6:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from_bitmap_line_ydxi:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_xdyi:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_ydxd:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_xdyd:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_menu:
Removing instruction __b2_from___b1:
Removing instruction __b4:
Removing instruction __b29:
Removing instruction __b30:
Removing instruction __b31:
Removing instruction __b17:
Removing instruction __b32:
Removing instruction __b18:
Removing instruction __b33:
Removing instruction __b19:
Removing instruction __b34:
Removing instruction __b20:
Removing instruction __b35:
Removing instruction __b21:
Removing instruction __b36:
Removing instruction __b22:
Removing instruction __b37:
Removing instruction __b23:
Removing instruction __b38:
Removing instruction __b24:
Removing instruction __b39:
Removing instruction __b25:
Removing instruction __b40:
Removing instruction __b26:
Removing instruction __b41:
Removing instruction __b27:
Removing instruction __b42:
Removing instruction __b28:
Removing instruction __b2_from___b3:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_print_str_lines:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b1_from___b6:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_mode_stdchar:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction mode_ctrl_from___b6:
Removing instruction __breturn:
Removing instruction __b1_from_mode_ecmchar:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction mode_ctrl_from___b6:
Removing instruction __breturn:
Removing instruction __b1_from_mode_mcchar:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction mode_ctrl_from___b6:
Removing instruction __breturn:
Removing instruction __b1_from_mode_stdbitmap:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction bitmap_init_from___b6:
Removing instruction __b10:
Removing instruction __b7_from___b10:
Removing instruction __b9:
Removing instruction mode_ctrl_from___b9:
Removing instruction __breturn:
Removing instruction __b11:
Removing instruction __b7_from___b11:
Removing instruction __b1_from_mode_hicolstdchar:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction mode_ctrl_from___b6:
Removing instruction __breturn:
Removing instruction __b1_from_mode_hicolecmchar:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction mode_ctrl_from___b6:
Removing instruction __breturn:
Removing instruction __b1_from_mode_hicolmcchar:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction mode_ctrl_from___b6:
Removing instruction __breturn:
Removing instruction __b1_from_mode_sixsfred2:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b6_from___b5:
Removing instruction __b8:
Removing instruction __b9_from___b8:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction mode_ctrl_from___b12:
Removing instruction __breturn:
Removing instruction __b1_from_mode_twoplanebitmap:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b6_from___b5:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12_from___b11:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction mode_ctrl_from___b15:
Removing instruction __breturn:
Removing instruction __b1_from_mode_sixsfred:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b6_from___b5:
Removing instruction __b8:
Removing instruction __b9_from___b8:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction mode_ctrl_from___b12:
Removing instruction __breturn:
Removing instruction __b1_from_mode_8bpppixelcell:
Removing instruction __b2_from___b1:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6_from___b5:
Removing instruction __b8_from___b7:
Removing instruction __b10:
Removing instruction __b9_from___b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction mode_ctrl_from___b13:
Removing instruction __breturn:
Removing instruction __b1_from_mode_8bppchunkybmm:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b6:
Removing instruction dtvSetCpuBankSegment1_from___b6:
Removing instruction __b9:
Removing instruction __b5_from___b9:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction dtvSetCpuBankSegment1_from___b8:
Removing instruction __b10:
Removing instruction mode_ctrl_from___b10:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b19:
Removing instruction __breturn:
Removing instruction keyboard_key_pressed_from___b4:
Removing instruction __b20:
Removing instruction __b12:
Removing instruction __b21:
Removing instruction __b13:
Removing instruction __b22:
Removing instruction __b14:
Removing instruction __b23:
Removing instruction __b15:
Removing instruction __b24:
Removing instruction __b16:
Removing instruction __b25:
Removing instruction __b17:
Removing instruction __b26:
Removing instruction __b11_from___b26:
Removing instruction __b18:
Removing instruction __b1_from_bitmap_init:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1_from_bitmap_clear:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction bitmap_line_ydxi_from___b4:
Removing instruction bitmap_line_xdyi_from___b8:
Removing instruction __b10:
Removing instruction bitmap_line_ydxd_from___b10:
Removing instruction bitmap_line_xdyd_from___b9:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction bitmap_line_ydxd_from___b6:
Removing instruction bitmap_line_xdyd_from___b12:
Removing instruction __b14:
Removing instruction bitmap_line_ydxi_from___b14:
Removing instruction bitmap_line_xdyi_from___b13:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b9_from___b8 to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b11
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Replacing instruction ldx #0 with TAX
Replacing instruction ldx #0 with TAX
Replacing instruction ldx #0 with TAX
Replacing instruction ldx #0 with TAX
Removing instruction lda.z x0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [254] beq __b5 to bne
Fixing long branch [163] bne __b3 to beq
Fixing long branch [168] bne __b3 to beq

FINAL SYMBOL TABLE
const nomodify byte* BG_COLOR = (byte*) 53281
const nomodify byte* BG_COLOR1 = (byte*) 53282
const nomodify byte* BG_COLOR2 = (byte*) 53283
const nomodify byte* BG_COLOR3 = (byte*) 53284
const nomodify byte BLACK = 0
const nomodify byte BLUE = 6
const nomodify byte* BORDER_COLOR = (byte*) 53280
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*) 56320
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*) 56576
const nomodify byte* COLS = (byte*) 55296
const nomodify byte DTV_BORDER_OFF = 2
const nomodify byte DTV_CHUNKY = $40
const nomodify byte DTV_COLORRAM_OFF = $10
const nomodify dword DTV_COLOR_BANK_DEFAULT = $1d800
const nomodify byte* DTV_COLOR_BANK_HI = (byte*) 53303
const nomodify byte* DTV_COLOR_BANK_LO = (byte*) 53302
const nomodify byte* DTV_CONTROL = (byte*) 53308
const nomodify byte* DTV_FEATURE = (byte*) 53311
const nomodify byte DTV_FEATURE_ENABLE = 1
const nomodify byte* DTV_GRAPHICS_VIC_BANK = (byte*) 53309
const nomodify byte DTV_HIGHCOLOR = 4
const nomodify byte DTV_LINEAR = 1
const nomodify byte DTV_OVERSCAN = 8
const nomodify byte* DTV_PALETTE = (byte*) 53760
const byte* DTV_PALETTE_DEFAULT[$10]  = { 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a }
const nomodify byte* DTV_PLANEA_MODULO_HI = (byte*) 53305
const nomodify byte* DTV_PLANEA_MODULO_LO = (byte*) 53304
const nomodify byte* DTV_PLANEA_START_HI = (byte*) 53317
const nomodify byte* DTV_PLANEA_START_LO = (byte*) 53306
const nomodify byte* DTV_PLANEA_START_MI = (byte*) 53307
const nomodify byte* DTV_PLANEA_STEP = (byte*) 53318
const nomodify byte* DTV_PLANEB_MODULO_HI = (byte*) 53320
const nomodify byte* DTV_PLANEB_MODULO_LO = (byte*) 53319
const nomodify byte* DTV_PLANEB_START_HI = (byte*) 53323
const nomodify byte* DTV_PLANEB_START_LO = (byte*) 53321
const nomodify byte* DTV_PLANEB_START_MI = (byte*) 53322
const nomodify byte* DTV_PLANEB_STEP = (byte*) 53324
const nomodify byte GREEN = 5
const nomodify byte KEY_0 = $23
const nomodify byte KEY_1 = $38
const nomodify byte KEY_2 = $3b
const nomodify byte KEY_3 = 8
const nomodify byte KEY_4 = $b
const nomodify byte KEY_6 = $13
const nomodify byte KEY_7 = $18
const nomodify byte KEY_8 = $1b
const nomodify byte KEY_A = $a
const nomodify byte KEY_B = $1c
const nomodify byte KEY_C = $14
const nomodify byte KEY_D = $12
const nomodify byte KEY_E = $e
const nomodify byte KEY_H = $1d
const nomodify byte KEY_L = $2a
const nomodify byte KEY_O = $26
const nomodify byte KEY_SPACE = $3c
const nomodify byte KEY_U = $1e
const nomodify byte LIGHT_GREEN = $d
const byte* MENU_TEXT[]  = "C64DTV Graphics Modes            CCLHBME@                                 OHIIMCC@                                 LUNCMMM@----------------------------------------@1. Standard Char             (V) 0000000@2. Extended Color Char       (V) 0000001@3. Multicolor Char           (V) 0000010@4. Standard Bitmap           (V) 0000100@5. Multicolor Bitmap         (V) 0000110@6. High Color Standard Char  (H) 0001000@7. High Extended Color Char  (H) 0001001@8. High Multicolor Char      (H) 0001010@9. High Multicolor Bitmap    (H) 0001110@a. Sixs Fred 2               (D) 0010111@b. Two Plane Bitmap          (D) 0011101@c. Sixs Fred (2 Plane MC BM) (D) 0011111@d. 8bpp Pixel Cell           (D) 0111011@e. Chunky 8bpp Bitmap        (D) 1111011@----------------------------------------@    (V) vicII (H) vicII+hicol (D) c64dtv@"
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
const nomodify byte* PROCPORT = (byte*) 1
const nomodify byte* PROCPORT_DDR = (byte*) 0
const nomodify byte PROCPORT_DDR_MEMORY_MASK = 7
const nomodify byte PROCPORT_RAM_CHARROM = 1
const nomodify byte PROCPORT_RAM_IO = 5
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte* RASTER = (byte*) 53266
const nomodify byte VIC_BMM = $20
const nomodify byte* VIC_CONTROL = (byte*) 53265
const nomodify byte* VIC_CONTROL2 = (byte*) 53270
const nomodify byte VIC_CSEL = 8
const nomodify byte VIC_DEN = $10
const nomodify byte VIC_ECM = $40
const nomodify byte VIC_MCM = $10
const nomodify byte* VIC_MEMORY = (byte*) 53272
const nomodify byte VIC_RSEL = 8
void bitmap_clear()
byte* bitmap_clear::bitmap
word bitmap_clear::bitmap#0 bitmap zp[2]:17 10001.0
byte* bitmap_clear::bitmap#1 bitmap zp[2]:17 4200000.6
byte* bitmap_clear::bitmap#2 bitmap zp[2]:17 1.5500002E7
byte* bitmap_clear::bitmap#3 bitmap zp[2]:17 2010003.0
byte* bitmap_clear::bitmap#5 bitmap zp[2]:17 20002.0
byte bitmap_clear::x
byte bitmap_clear::x#1 reg byte x 1.50000015E7
byte bitmap_clear::x#2 reg byte x 6666667.333333333
byte bitmap_clear::y
byte bitmap_clear::y#1 y zp[1]:16 1500001.5
byte bitmap_clear::y#4 y zp[1]:16 333333.6666666667
void bitmap_init(byte* bitmap_init::bitmap)
byte~ bitmap_init::$0 reg byte a 2000002.0
byte~ bitmap_init::$10 zp[1]:16 500000.5
byte~ bitmap_init::$7 reg byte a 2000002.0
byte~ bitmap_init::$8 reg byte a 2000002.0
byte~ bitmap_init::$9 reg byte a 2000002.0
byte* bitmap_init::bitmap
byte bitmap_init::bits
byte bitmap_init::bits#1 reg byte y 1000001.0
byte bitmap_init::bits#3 reg byte y 600000.6000000001
byte bitmap_init::bits#4 reg byte y 666667.3333333334
byte bitmap_init::x
byte bitmap_init::x#1 reg byte x 1500001.5
byte bitmap_init::x#2 reg byte x 666667.3333333334
byte bitmap_init::y
byte bitmap_init::y#1 reg byte x 1500001.5
byte bitmap_init::y#2 reg byte x 500000.5
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#1 yoffs zp[2]:17 2000002.0
byte* bitmap_init::yoffs#2 yoffs zp[2]:17 625000.625
byte* bitmap_init::yoffs#4 yoffs zp[2]:17 1000001.0
void bitmap_line(byte bitmap_line::x0 , byte bitmap_line::x1 , byte bitmap_line::y0 , byte bitmap_line::y1)
byte bitmap_line::x0
byte bitmap_line::x0#0 x0 zp[1]:15 395652.6086956522
byte bitmap_line::x1
byte bitmap_line::x1#0 x1 zp[1]:16 413636.81818181823
byte bitmap_line::xd
byte bitmap_line::xd#1 xd zp[1]:12 350000.35
byte bitmap_line::xd#2 xd zp[1]:12 350000.35
byte bitmap_line::y0
byte bitmap_line::y0#0 reg byte x 576191.0952380954
byte bitmap_line::y1
byte bitmap_line::y1#0 y1 zp[1]:14 605000.65
byte bitmap_line::yd
byte bitmap_line::yd#1 reg byte y 444444.8888888889
byte bitmap_line::yd#10 reg byte y 444444.8888888889
byte bitmap_line::yd#11 reg byte y 444444.8888888889
byte bitmap_line::yd#2 reg byte y 444444.8888888889
void bitmap_line_xdyd(byte bitmap_line_xdyd::x , byte bitmap_line_xdyd::y , byte bitmap_line_xdyd::x1 , byte bitmap_line_xdyd::xd , byte bitmap_line_xdyd::yd)
byte~ bitmap_line_xdyd::$6 reg byte a 2.0000000002E10
byte bitmap_line_xdyd::e
byte bitmap_line_xdyd::e#0 e zp[1]:11 2.0000002E7
byte bitmap_line_xdyd::e#1 e zp[1]:11 1.3333333334666666E10
byte bitmap_line_xdyd::e#2 e zp[1]:11 2.0000000002E10
byte bitmap_line_xdyd::e#3 e zp[1]:11 4.0020000006000004E9
byte bitmap_line_xdyd::e#6 e zp[1]:11 1.0000000001E10
byte bitmap_line_xdyd::x
byte bitmap_line_xdyd::x#0 x zp[1]:13 400000.4
byte bitmap_line_xdyd::x#1 x zp[1]:13 400000.4
byte bitmap_line_xdyd::x#2 x zp[1]:13 3.750000000375E9
byte bitmap_line_xdyd::x#3 x zp[1]:13 7.502500001E9
byte bitmap_line_xdyd::x#6 x zp[1]:13 6000001.5
byte bitmap_line_xdyd::x1
byte bitmap_line_xdyd::x1#0 x1 zp[1]:15 666667.3333333334
byte bitmap_line_xdyd::x1#1 x1 zp[1]:15 666667.3333333334
byte bitmap_line_xdyd::x1#6 x1 zp[1]:15 7.144285716428571E8
byte bitmap_line_xdyd::xd
byte bitmap_line_xdyd::xd#0 xd zp[1]:12 1000001.0
byte bitmap_line_xdyd::xd#1 xd zp[1]:12 1000001.0
byte bitmap_line_xdyd::xd#5 xd zp[1]:12 1.428714286E9
byte bitmap_line_xdyd::y
byte bitmap_line_xdyd::y#0 reg byte x 500000.5
byte bitmap_line_xdyd::y#1 reg byte x 500000.5
byte bitmap_line_xdyd::y#2 reg byte x 1.0000000001E10
byte bitmap_line_xdyd::y#3 reg byte x 5.715714286428572E9
byte bitmap_line_xdyd::y#5 reg byte x 6000001.5
byte bitmap_line_xdyd::y#6 reg byte x 1.0000000001E10
byte bitmap_line_xdyd::yd
byte bitmap_line_xdyd::yd#0 yd zp[1]:10 2000002.0
byte bitmap_line_xdyd::yd#1 yd zp[1]:10 2000002.0
byte bitmap_line_xdyd::yd#2 yd zp[1]:10 7.151428574285713E8
void bitmap_line_xdyi(byte bitmap_line_xdyi::x , byte bitmap_line_xdyi::y , byte bitmap_line_xdyi::x1 , byte bitmap_line_xdyi::xd , byte bitmap_line_xdyi::yd)
byte~ bitmap_line_xdyi::$6 reg byte a 2.0000000002E10
byte bitmap_line_xdyi::e
byte bitmap_line_xdyi::e#0 e zp[1]:11 2.0000002E7
byte bitmap_line_xdyi::e#1 e zp[1]:11 1.3333333334666666E10
byte bitmap_line_xdyi::e#2 e zp[1]:11 2.0000000002E10
byte bitmap_line_xdyi::e#3 e zp[1]:11 4.0020000006000004E9
byte bitmap_line_xdyi::e#6 e zp[1]:11 1.0000000001E10
byte bitmap_line_xdyi::x
byte bitmap_line_xdyi::x#0 x zp[1]:10 400000.4
byte bitmap_line_xdyi::x#1 x zp[1]:10 400000.4
byte bitmap_line_xdyi::x#2 x zp[1]:10 3.750000000375E9
byte bitmap_line_xdyi::x#3 x zp[1]:10 7.502500001E9
byte bitmap_line_xdyi::x#6 x zp[1]:10 6000001.5
byte bitmap_line_xdyi::x1
byte bitmap_line_xdyi::x1#0 x1 zp[1]:16 666667.3333333334
byte bitmap_line_xdyi::x1#1 x1 zp[1]:16 666667.3333333334
byte bitmap_line_xdyi::x1#6 x1 zp[1]:16 7.144285716428571E8
byte bitmap_line_xdyi::xd
byte bitmap_line_xdyi::xd#0 xd zp[1]:12 1000001.0
byte bitmap_line_xdyi::xd#1 xd zp[1]:12 1000001.0
byte bitmap_line_xdyi::xd#5 xd zp[1]:12 1.428714286E9
byte bitmap_line_xdyi::y
byte bitmap_line_xdyi::y#0 reg byte x 500000.5
byte bitmap_line_xdyi::y#1 reg byte x 500000.5
byte bitmap_line_xdyi::y#2 reg byte x 1.0000000001E10
byte bitmap_line_xdyi::y#3 reg byte x 5.715714286428572E9
byte bitmap_line_xdyi::y#5 reg byte x 6000001.5
byte bitmap_line_xdyi::y#6 reg byte x 1.0000000001E10
byte bitmap_line_xdyi::yd
byte bitmap_line_xdyi::yd#0 yd zp[1]:13 2000002.0
byte bitmap_line_xdyi::yd#1 yd zp[1]:13 2000002.0
byte bitmap_line_xdyi::yd#2 yd zp[1]:13 7.151428574285713E8
void bitmap_line_ydxd(byte bitmap_line_ydxd::y , byte bitmap_line_ydxd::x , byte bitmap_line_ydxd::y1 , byte bitmap_line_ydxd::yd , byte bitmap_line_ydxd::xd)
byte~ bitmap_line_ydxd::$6 reg byte x 2.0000000002E10
byte bitmap_line_ydxd::e
byte bitmap_line_ydxd::e#0 e zp[1]:13 2.0000002E7
byte bitmap_line_ydxd::e#1 e zp[1]:13 1.3333333334666666E10
byte bitmap_line_ydxd::e#2 e zp[1]:13 2.0000000002E10
byte bitmap_line_ydxd::e#3 e zp[1]:13 4.0020000006000004E9
byte bitmap_line_ydxd::e#6 e zp[1]:13 1.0000000001E10
byte bitmap_line_ydxd::x
byte bitmap_line_ydxd::x#0 x zp[1]:15 500000.5
byte bitmap_line_ydxd::x#1 x zp[1]:15 500000.5
byte bitmap_line_ydxd::x#2 x zp[1]:15 1.0000000001E10
byte bitmap_line_ydxd::x#3 x zp[1]:15 5.715714286428572E9
byte bitmap_line_ydxd::x#5 x zp[1]:15 6000001.5
byte bitmap_line_ydxd::x#6 x zp[1]:15 1.0000000001E10
byte bitmap_line_ydxd::xd
byte bitmap_line_ydxd::xd#0 xd zp[1]:12 2000002.0
byte bitmap_line_ydxd::xd#1 xd zp[1]:12 2000002.0
byte bitmap_line_ydxd::xd#2 xd zp[1]:12 7.151428574285713E8
byte bitmap_line_ydxd::y
byte bitmap_line_ydxd::y#0 y zp[1]:10 400000.4
byte bitmap_line_ydxd::y#1 y zp[1]:10 400000.4
byte bitmap_line_ydxd::y#2 y zp[1]:10 7.502500001E9
byte bitmap_line_ydxd::y#3 y zp[1]:10 3.750000000375E9
byte bitmap_line_ydxd::y#7 y zp[1]:10 6000001.5
byte bitmap_line_ydxd::y1
byte bitmap_line_ydxd::y1#0 y1 zp[1]:14 666667.3333333334
byte bitmap_line_ydxd::y1#1 y1 zp[1]:14 666667.3333333334
byte bitmap_line_ydxd::y1#6 y1 zp[1]:14 7.144285716428571E8
byte bitmap_line_ydxd::yd
byte bitmap_line_ydxd::yd#0 yd zp[1]:11 1000001.0
byte bitmap_line_ydxd::yd#1 yd zp[1]:11 1000001.0
byte bitmap_line_ydxd::yd#5 yd zp[1]:11 1.428714286E9
void bitmap_line_ydxi(byte bitmap_line_ydxi::y , byte bitmap_line_ydxi::x , byte bitmap_line_ydxi::y1 , byte bitmap_line_ydxi::yd , byte bitmap_line_ydxi::xd)
byte~ bitmap_line_ydxi::$6 reg byte x 2.0000000002E10
byte bitmap_line_ydxi::e
byte bitmap_line_ydxi::e#0 e zp[1]:16 2.0000002E7
byte bitmap_line_ydxi::e#1 e zp[1]:16 1.3333333334666666E10
byte bitmap_line_ydxi::e#2 e zp[1]:16 2.0000000002E10
byte bitmap_line_ydxi::e#3 e zp[1]:16 4.0020000006000004E9
byte bitmap_line_ydxi::e#6 e zp[1]:16 1.0000000001E10
byte bitmap_line_ydxi::x
byte bitmap_line_ydxi::x#0 x zp[1]:15 500000.5
byte bitmap_line_ydxi::x#1 x zp[1]:15 500000.5
byte bitmap_line_ydxi::x#2 x zp[1]:15 1.0000000001E10
byte bitmap_line_ydxi::x#3 x zp[1]:15 5.715714286428572E9
byte bitmap_line_ydxi::x#5 x zp[1]:15 6000001.5
byte bitmap_line_ydxi::x#6 x zp[1]:15 1.0000000001E10
byte bitmap_line_ydxi::xd
byte bitmap_line_ydxi::xd#0 xd zp[1]:12 2000002.0
byte bitmap_line_ydxi::xd#1 xd zp[1]:12 2000002.0
byte bitmap_line_ydxi::xd#2 xd zp[1]:12 7.151428574285713E8
byte bitmap_line_ydxi::y
byte bitmap_line_ydxi::y#0 y zp[1]:10 400000.4
byte bitmap_line_ydxi::y#1 y zp[1]:10 400000.4
byte bitmap_line_ydxi::y#2 y zp[1]:10 3.750000000375E9
byte bitmap_line_ydxi::y#3 y zp[1]:10 7.502500001E9
byte bitmap_line_ydxi::y#6 y zp[1]:10 6000001.5
byte bitmap_line_ydxi::y1
byte bitmap_line_ydxi::y1#0 y1 zp[1]:14 666667.3333333334
byte bitmap_line_ydxi::y1#1 y1 zp[1]:14 666667.3333333334
byte bitmap_line_ydxi::y1#6 y1 zp[1]:14 7.144285716428571E8
byte bitmap_line_ydxi::yd
byte bitmap_line_ydxi::yd#0 yd zp[1]:13 1000001.0
byte bitmap_line_ydxi::yd#1 yd zp[1]:13 1000001.0
byte bitmap_line_ydxi::yd#5 yd zp[1]:13 1.428714286E9
void bitmap_plot(byte bitmap_plot::x , byte bitmap_plot::y)
byte~ bitmap_plot::$1 reg byte a 2.00000000002E11
byte* bitmap_plot::plotter
word bitmap_plot::plotter#0 plotter zp[2]:17 5.00000000005E10
word bitmap_plot::plotter_x
word bitmap_plot::plotter_x#0 plotter_x zp[2]:17 1.00000000001E11
word bitmap_plot::plotter_y
word bitmap_plot::plotter_y#0 plotter_y zp[2]:19 2.00000000002E11
byte bitmap_plot::x
byte bitmap_plot::x#0 reg byte y 1.0000000001E10
byte bitmap_plot::x#1 reg byte y 1.0000000001E10
byte bitmap_plot::x#2 reg byte y 1.0000000001E10
byte bitmap_plot::x#3 reg byte y 1.0000000001E10
byte bitmap_plot::x#4 reg byte y 8.500000000175E10
byte bitmap_plot::y
byte bitmap_plot::y#0 reg byte x 2.0000000002E10
byte bitmap_plot::y#1 reg byte x 2.0000000002E10
byte bitmap_plot::y#2 reg byte x 2.0000000002E10
byte bitmap_plot::y#3 reg byte x 2.0000000002E10
byte bitmap_plot::y#4 reg byte x 1.20000000003E11
const to_nomodify byte* bitmap_plot_bit[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_xhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_xlo[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_yhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_ylo[$100]  = { fill( $100, 0) }
void dtvSetCpuBankSegment1(byte dtvSetCpuBankSegment1::cpuBankIdx)
const byte* dtvSetCpuBankSegment1::cpuBank = (byte*) 255
byte dtvSetCpuBankSegment1::cpuBankIdx
byte dtvSetCpuBankSegment1::cpuBankIdx#1 reg byte a 2000002.0
byte dtvSetCpuBankSegment1::cpuBankIdx#3 reg byte a 1.1000002E7
byte dtv_control
byte dtv_control#116 reg byte x 804117.7647058824
byte dtv_control#146 reg byte x 10001.0
byte dtv_control#16 reg byte x 666667.3333333334
byte keyboard_key_pressed(byte keyboard_key_pressed::key)
byte~ keyboard_key_pressed::$2 reg byte a 2.00000002E8
byte keyboard_key_pressed::colidx
byte keyboard_key_pressed::colidx#0 colidx zp[1]:14 3.3333333666666668E7
byte keyboard_key_pressed::key
byte keyboard_key_pressed::key#20 reg byte y 1.00000001E8
byte keyboard_key_pressed::return
byte keyboard_key_pressed::return#0 reg byte a 8187273.681818182
byte keyboard_key_pressed::return#10 reg byte a 20002.0
byte keyboard_key_pressed::return#11 reg byte a 20002.0
byte keyboard_key_pressed::return#12 reg byte a 20002.0
byte keyboard_key_pressed::return#13 reg byte a 20002.0
byte keyboard_key_pressed::return#14 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#15 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#16 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#17 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#18 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#19 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#2 reg byte a 20002.0
byte keyboard_key_pressed::return#20 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#21 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#24 reg byte a 20002.0
byte keyboard_key_pressed::return#25 reg byte a 20002.0
byte keyboard_key_pressed::return#26 reg byte a 20002.0
byte keyboard_key_pressed::return#27 reg byte a 20002.0
byte keyboard_key_pressed::return#28 reg byte a 20002.0
byte keyboard_key_pressed::return#29 reg byte a 20002.0
byte keyboard_key_pressed::return#30 reg byte a 20002.0
byte keyboard_key_pressed::rowidx
byte keyboard_key_pressed::rowidx#0 reg byte a 2.00000002E8
const byte* keyboard_matrix_col_bitmask[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0 reg byte a 3.666666673333334E8
byte keyboard_matrix_read::return#2 reg byte a 2.00000002E8
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::rowid
byte keyboard_matrix_read::rowid#0 reg byte y 1.100000002E9
const byte* keyboard_matrix_row_bitmask[8]  = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:17 2000002.0
byte* memset::dst#2 dst zp[2]:17 1333334.6666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)menu::SCREEN
void menu()
byte~ menu::$13 reg byte a 20002.0
byte~ menu::$17 reg byte a 20002.0
byte~ menu::$21 reg byte a 20002.0
byte~ menu::$25 reg byte a 20002.0
byte~ menu::$29 reg byte a 20002.0
byte~ menu::$33 reg byte a 20002.0
byte~ menu::$37 reg byte a 20002.0
byte~ menu::$41 reg byte a 20002.0
byte~ menu::$45 reg byte a 20002.0
byte~ menu::$49 reg byte a 20002.0
byte~ menu::$5 reg byte a 20002.0
byte~ menu::$9 reg byte a 20002.0
const nomodify byte* menu::CHARSET = (byte*) 38912
const nomodify byte* menu::SCREEN = (byte*) 32768
byte* menu::c
byte* menu::c#1 c zp[2]:2 20002.0
byte* menu::c#2 c zp[2]:2 13334.666666666666
byte menu::i
byte menu::i#1 reg byte x 15001.5
byte menu::i#2 reg byte x 20002.0
void mode_8bppchunkybmm()
word~ mode_8bppchunkybmm::$7 zp[2]:17 1000001.0
const nomodify dword mode_8bppchunkybmm::PLANEB = $20000
byte mode_8bppchunkybmm::c
byte mode_8bppchunkybmm::c#0 reg byte a 2000002.0
byte* mode_8bppchunkybmm::gfxb
byte* mode_8bppchunkybmm::gfxb#1 gfxb zp[2]:8 420000.60000000003
byte* mode_8bppchunkybmm::gfxb#3 gfxb zp[2]:8 1550002.0
byte* mode_8bppchunkybmm::gfxb#4 gfxb zp[2]:8 750000.75
byte* mode_8bppchunkybmm::gfxb#5 gfxb zp[2]:8 200002.0
byte mode_8bppchunkybmm::gfxbCpuBank
byte mode_8bppchunkybmm::gfxbCpuBank#2 reg byte x 2000002.0
byte mode_8bppchunkybmm::gfxbCpuBank#4 reg byte x 1025001.25
byte mode_8bppchunkybmm::gfxbCpuBank#7 reg byte x 200002.0
byte mode_8bppchunkybmm::gfxbCpuBank#8 reg byte x 344444.8888888889
byte mode_8bppchunkybmm::i
byte mode_8bppchunkybmm::i#1 reg byte x 150001.5
byte mode_8bppchunkybmm::i#2 reg byte x 200002.0
word mode_8bppchunkybmm::x
word mode_8bppchunkybmm::x#1 x zp[2]:19 1500001.5
word mode_8bppchunkybmm::x#2 x zp[2]:19 300000.30000000005
byte mode_8bppchunkybmm::y
byte mode_8bppchunkybmm::y#1 y zp[1]:13 150001.5
byte mode_8bppchunkybmm::y#6 y zp[1]:13 92307.92307692306
void mode_8bpppixelcell()
byte~ mode_8bpppixelcell::$2 reg byte a 2000002.0
byte~ mode_8bpppixelcell::$3 zp[1]:15 1000001.0
byte~ mode_8bpppixelcell::$4 reg byte a 2000002.0
byte~ mode_8bpppixelcell::$5 reg byte a 2000002.0
byte~ mode_8bpppixelcell::$8 reg byte a 2.0000002E7
const byte* mode_8bpppixelcell::CHARGEN = (byte*) 53248
const nomodify byte* mode_8bpppixelcell::PLANEA = (byte*) 15360
const nomodify byte* mode_8bpppixelcell::PLANEB = (byte*) 16384
byte mode_8bpppixelcell::ax
byte mode_8bpppixelcell::ax#1 reg byte x 1500001.5
byte mode_8bpppixelcell::ax#2 reg byte x 428571.85714285716
byte mode_8bpppixelcell::ay
byte mode_8bpppixelcell::ay#1 ay zp[1]:6 150001.5
byte mode_8bpppixelcell::ay#4 ay zp[1]:6 120000.30000000002
byte mode_8bpppixelcell::bits
byte mode_8bpppixelcell::bits#0 bits zp[1]:13 1000001.0
byte mode_8bpppixelcell::bits#1 bits zp[1]:13 5000000.5
byte mode_8bpppixelcell::bits#2 bits zp[1]:13 4428572.0
byte mode_8bpppixelcell::c
byte mode_8bpppixelcell::c#2 reg byte a 2.0000002E7
byte mode_8bpppixelcell::c#3 reg byte a 2.0000002E7
byte mode_8bpppixelcell::ch
byte mode_8bpppixelcell::ch#1 ch zp[1]:7 150001.5
byte mode_8bpppixelcell::ch#8 ch zp[1]:7 11764.823529411764
byte* mode_8bpppixelcell::chargen
byte* mode_8bpppixelcell::chargen#1 chargen zp[2]:19 131250.1875
byte* mode_8bpppixelcell::chargen#2 chargen zp[2]:19 1550002.0
byte* mode_8bpppixelcell::chargen#4 chargen zp[2]:19 200002.0
byte mode_8bpppixelcell::col
byte mode_8bpppixelcell::col#1 col zp[1]:16 3014286.2857142854
byte mode_8bpppixelcell::col#2 col zp[1]:16 3875000.5
byte mode_8bpppixelcell::col#5 col zp[1]:16 700001.0
byte mode_8bpppixelcell::col#7 col zp[1]:16 200002.0
byte mode_8bpppixelcell::cp
byte mode_8bpppixelcell::cp#1 reg byte x 1.50000015E7
byte mode_8bpppixelcell::cp#2 reg byte x 2222222.4444444445
byte mode_8bpppixelcell::cr
byte mode_8bpppixelcell::cr#1 cr zp[1]:10 1500001.5
byte mode_8bpppixelcell::cr#6 cr zp[1]:10 142857.2857142857
byte* mode_8bpppixelcell::gfxa
byte* mode_8bpppixelcell::gfxa#1 gfxa zp[2]:17 420000.60000000003
byte* mode_8bpppixelcell::gfxa#2 gfxa zp[2]:17 516667.3333333334
byte* mode_8bpppixelcell::gfxa#3 gfxa zp[2]:17 200002.0
byte* mode_8bpppixelcell::gfxb
byte* mode_8bpppixelcell::gfxb#1 gfxb zp[2]:8 2344444.888888889
byte* mode_8bpppixelcell::gfxb#2 gfxb zp[2]:8 5166667.333333333
byte* mode_8bpppixelcell::gfxb#5 gfxb zp[2]:8 700001.0
byte* mode_8bpppixelcell::gfxb#7 gfxb zp[2]:8 200002.0
byte mode_8bpppixelcell::i
byte mode_8bpppixelcell::i#1 reg byte x 150001.5
byte mode_8bpppixelcell::i#2 reg byte x 200002.0
void mode_ctrl()
byte~ mode_ctrl::$1 reg byte a 2.0000002E7
byte~ mode_ctrl::$12 reg byte a 2.0000002E7
byte~ mode_ctrl::$16 reg byte a 2.0000002E7
byte~ mode_ctrl::$20 reg byte a 2.0000002E7
byte~ mode_ctrl::$24 reg byte a 2.0000002E7
byte~ mode_ctrl::$28 reg byte a 2.0000002E7
byte~ mode_ctrl::$4 reg byte a 2.0000002E7
byte~ mode_ctrl::$8 reg byte a 2.0000002E7
byte mode_ctrl::ctrl
byte mode_ctrl::ctrl#0 ctrl zp[1]:12 6000000.6
byte mode_ctrl::ctrl#1 ctrl zp[1]:12 2.0000002E7
byte mode_ctrl::ctrl#10 ctrl zp[1]:12 8000000.8
byte mode_ctrl::ctrl#11 ctrl zp[1]:12 8000000.8
byte mode_ctrl::ctrl#12 ctrl zp[1]:12 8000000.8
byte mode_ctrl::ctrl#13 ctrl zp[1]:12 8000000.8
byte mode_ctrl::ctrl#14 ctrl zp[1]:12 5750001.25
byte mode_ctrl::ctrl#17 ctrl zp[1]:12 8000000.8
byte mode_ctrl::ctrl#2 ctrl zp[1]:12 2.0000002E7
byte mode_ctrl::ctrl#22 ctrl zp[1]:12 5000000.5
byte mode_ctrl::ctrl#3 ctrl zp[1]:12 2.0000002E7
byte mode_ctrl::ctrl#4 ctrl zp[1]:12 2.0000002E7
byte mode_ctrl::ctrl#5 ctrl zp[1]:12 2.0000002E7
byte mode_ctrl::ctrl#6 ctrl zp[1]:12 2.0000002E7
void mode_ecmchar()
byte~ mode_ecmchar::$2 reg byte a 2000002.0
byte~ mode_ecmchar::$3 reg byte a 2000002.0
byte~ mode_ecmchar::$4 reg byte a 2000002.0
byte~ mode_ecmchar::$5 zp[1]:11 1000001.0
byte~ mode_ecmchar::$6 reg byte a 2000002.0
byte~ mode_ecmchar::$7 reg byte a 2000002.0
const nomodify byte* mode_ecmchar::CHARSET = (byte*) 36864
const nomodify byte* mode_ecmchar::COLORS = (byte*) 55296
const nomodify byte* mode_ecmchar::SCREEN = (byte*) 32768
byte* mode_ecmchar::ch
byte* mode_ecmchar::ch#1 ch zp[2]:8 420000.60000000003
byte* mode_ecmchar::ch#2 ch zp[2]:8 310000.4
byte* mode_ecmchar::ch#3 ch zp[2]:8 200002.0
byte* mode_ecmchar::col
byte* mode_ecmchar::col#1 col zp[2]:4 190909.36363636365
byte* mode_ecmchar::col#2 col zp[2]:4 775001.0
byte* mode_ecmchar::col#3 col zp[2]:4 200002.0
byte mode_ecmchar::cx
byte mode_ecmchar::cx#1 reg byte x 1500001.5
byte mode_ecmchar::cx#2 reg byte x 363636.7272727273
byte mode_ecmchar::cy
byte mode_ecmchar::cy#1 cy zp[1]:6 150001.5
byte mode_ecmchar::cy#4 cy zp[1]:6 157143.14285714284
byte mode_ecmchar::i
byte mode_ecmchar::i#1 reg byte x 150001.5
byte mode_ecmchar::i#2 reg byte x 200002.0
void mode_hicolecmchar()
byte~ mode_hicolecmchar::$2 reg byte a 2000002.0
byte~ mode_hicolecmchar::$3 zp[1]:13 1000001.0
byte~ mode_hicolecmchar::$4 reg byte a 2000002.0
const nomodify byte* mode_hicolecmchar::CHARSET = (byte*) 36864
const nomodify byte* mode_hicolecmchar::COLORS = (byte*) 33792
const nomodify byte* mode_hicolecmchar::SCREEN = (byte*) 32768
byte* mode_hicolecmchar::ch
byte* mode_hicolecmchar::ch#1 ch zp[2]:4 420000.60000000003
byte* mode_hicolecmchar::ch#2 ch zp[2]:4 387500.5
byte* mode_hicolecmchar::ch#3 ch zp[2]:4 200002.0
byte* mode_hicolecmchar::col
byte* mode_hicolecmchar::col#1 col zp[2]:8 300000.4285714285
byte* mode_hicolecmchar::col#2 col zp[2]:8 516667.3333333334
byte* mode_hicolecmchar::col#3 col zp[2]:8 200002.0
byte mode_hicolecmchar::cx
byte mode_hicolecmchar::cx#1 reg byte x 1500001.5
byte mode_hicolecmchar::cx#2 reg byte x 333333.6666666666
byte mode_hicolecmchar::cy
byte mode_hicolecmchar::cy#1 cy zp[1]:7 150001.5
byte mode_hicolecmchar::cy#4 cy zp[1]:7 100000.25000000001
byte mode_hicolecmchar::i
byte mode_hicolecmchar::i#1 reg byte x 150001.5
byte mode_hicolecmchar::i#2 reg byte x 200002.0
byte mode_hicolecmchar::v
byte mode_hicolecmchar::v#0 reg byte a 1000001.0
void mode_hicolmcchar()
byte~ mode_hicolmcchar::$2 reg byte a 2000002.0
byte~ mode_hicolmcchar::$3 zp[1]:14 1000001.0
byte~ mode_hicolmcchar::$4 reg byte a 2000002.0
const nomodify byte* mode_hicolmcchar::CHARSET = (byte*) 36864
const nomodify byte* mode_hicolmcchar::COLORS = (byte*) 33792
const nomodify byte* mode_hicolmcchar::SCREEN = (byte*) 32768
byte* mode_hicolmcchar::ch
byte* mode_hicolmcchar::ch#1 ch zp[2]:4 420000.60000000003
byte* mode_hicolmcchar::ch#2 ch zp[2]:4 387500.5
byte* mode_hicolmcchar::ch#3 ch zp[2]:4 200002.0
byte* mode_hicolmcchar::col
byte* mode_hicolmcchar::col#1 col zp[2]:8 300000.4285714285
byte* mode_hicolmcchar::col#2 col zp[2]:8 516667.3333333334
byte* mode_hicolmcchar::col#3 col zp[2]:8 200002.0
byte mode_hicolmcchar::cx
byte mode_hicolmcchar::cx#1 reg byte x 1500001.5
byte mode_hicolmcchar::cx#2 reg byte x 333333.6666666666
byte mode_hicolmcchar::cy
byte mode_hicolmcchar::cy#1 cy zp[1]:7 150001.5
byte mode_hicolmcchar::cy#4 cy zp[1]:7 100000.25000000001
byte mode_hicolmcchar::i
byte mode_hicolmcchar::i#1 reg byte x 150001.5
byte mode_hicolmcchar::i#2 reg byte x 200002.0
byte mode_hicolmcchar::v
byte mode_hicolmcchar::v#0 reg byte a 1000001.0
void mode_hicolstdchar()
byte~ mode_hicolstdchar::$2 reg byte a 2000002.0
byte~ mode_hicolstdchar::$3 zp[1]:13 1000001.0
byte~ mode_hicolstdchar::$4 reg byte a 2000002.0
const nomodify byte* mode_hicolstdchar::CHARSET = (byte*) 36864
const nomodify byte* mode_hicolstdchar::COLORS = (byte*) 33792
const nomodify byte* mode_hicolstdchar::SCREEN = (byte*) 32768
byte* mode_hicolstdchar::ch
byte* mode_hicolstdchar::ch#1 ch zp[2]:4 420000.60000000003
byte* mode_hicolstdchar::ch#2 ch zp[2]:4 387500.5
byte* mode_hicolstdchar::ch#3 ch zp[2]:4 200002.0
byte* mode_hicolstdchar::col
byte* mode_hicolstdchar::col#1 col zp[2]:8 300000.4285714285
byte* mode_hicolstdchar::col#2 col zp[2]:8 516667.3333333334
byte* mode_hicolstdchar::col#3 col zp[2]:8 200002.0
byte mode_hicolstdchar::cx
byte mode_hicolstdchar::cx#1 reg byte x 1500001.5
byte mode_hicolstdchar::cx#2 reg byte x 333333.6666666666
byte mode_hicolstdchar::cy
byte mode_hicolstdchar::cy#1 cy zp[1]:7 150001.5
byte mode_hicolstdchar::cy#4 cy zp[1]:7 100000.25000000001
byte mode_hicolstdchar::i
byte mode_hicolstdchar::i#1 reg byte x 150001.5
byte mode_hicolstdchar::i#2 reg byte x 200002.0
byte mode_hicolstdchar::v
byte mode_hicolstdchar::v#0 reg byte a 1000001.0
void mode_mcchar()
byte~ mode_mcchar::$2 reg byte a 2000002.0
byte~ mode_mcchar::$3 reg byte a 2000002.0
byte~ mode_mcchar::$4 reg byte a 2000002.0
byte~ mode_mcchar::$5 zp[1]:12 1000001.0
byte~ mode_mcchar::$6 reg byte a 2000002.0
byte~ mode_mcchar::$7 reg byte a 2000002.0
const nomodify byte* mode_mcchar::CHARSET = (byte*) 36864
const nomodify byte* mode_mcchar::COLORS = (byte*) 55296
const nomodify byte* mode_mcchar::SCREEN = (byte*) 32768
byte* mode_mcchar::ch
byte* mode_mcchar::ch#1 ch zp[2]:4 420000.60000000003
byte* mode_mcchar::ch#2 ch zp[2]:4 310000.4
byte* mode_mcchar::ch#3 ch zp[2]:4 200002.0
byte* mode_mcchar::col
byte* mode_mcchar::col#1 col zp[2]:8 190909.36363636365
byte* mode_mcchar::col#2 col zp[2]:8 775001.0
byte* mode_mcchar::col#3 col zp[2]:8 200002.0
byte mode_mcchar::cx
byte mode_mcchar::cx#1 reg byte x 1500001.5
byte mode_mcchar::cx#2 reg byte x 363636.7272727273
byte mode_mcchar::cy
byte mode_mcchar::cy#1 cy zp[1]:6 150001.5
byte mode_mcchar::cy#4 cy zp[1]:6 157143.14285714284
byte mode_mcchar::i
byte mode_mcchar::i#1 reg byte x 150001.5
byte mode_mcchar::i#2 reg byte x 200002.0
void mode_sixsfred()
byte~ mode_sixsfred::$2 reg byte a 2000002.0
byte~ mode_sixsfred::$3 reg byte a 2000002.0
byte~ mode_sixsfred::$6 reg byte a 2000002.0
const nomodify byte* mode_sixsfred::COLORS = (byte*) 32768
const nomodify byte* mode_sixsfred::PLANEA = (byte*) 16384
const nomodify byte* mode_sixsfred::PLANEB = (byte*) 24576
byte mode_sixsfred::ax
byte mode_sixsfred::ax#1 reg byte x 1500001.5
byte mode_sixsfred::ax#2 reg byte x 400000.4
byte mode_sixsfred::ay
byte mode_sixsfred::ay#1 ay zp[1]:7 150001.5
byte mode_sixsfred::ay#4 ay zp[1]:7 150000.375
byte mode_sixsfred::bx
byte mode_sixsfred::bx#1 reg byte x 1500001.5
byte mode_sixsfred::bx#2 reg byte x 666667.3333333334
byte mode_sixsfred::by
byte mode_sixsfred::by#1 by zp[1]:10 150001.5
byte mode_sixsfred::by#4 by zp[1]:10 33333.666666666664
byte* mode_sixsfred::col
byte* mode_sixsfred::col#1 col zp[2]:19 420000.60000000003
byte* mode_sixsfred::col#2 col zp[2]:19 775001.0
byte* mode_sixsfred::col#3 col zp[2]:19 200002.0
byte mode_sixsfred::cx
byte mode_sixsfred::cx#1 reg byte x 1500001.5
byte mode_sixsfred::cx#2 reg byte x 600000.6000000001
byte mode_sixsfred::cy
byte mode_sixsfred::cy#1 cy zp[1]:6 150001.5
byte mode_sixsfred::cy#4 cy zp[1]:6 150000.375
byte* mode_sixsfred::gfxa
byte* mode_sixsfred::gfxa#1 gfxa zp[2]:8 420000.60000000003
byte* mode_sixsfred::gfxa#2 gfxa zp[2]:8 775001.0
byte* mode_sixsfred::gfxa#3 gfxa zp[2]:8 200002.0
byte* mode_sixsfred::gfxb
byte* mode_sixsfred::gfxb#1 gfxb zp[2]:17 420000.60000000003
byte* mode_sixsfred::gfxb#2 gfxb zp[2]:17 1550002.0
byte* mode_sixsfred::gfxb#3 gfxb zp[2]:17 200002.0
byte mode_sixsfred::i
byte mode_sixsfred::i#1 reg byte x 150001.5
byte mode_sixsfred::i#2 reg byte x 200002.0
byte mode_sixsfred::row
byte mode_sixsfred::row#0 reg byte a 2000002.0
const byte* mode_sixsfred::row_bitmask[]  = { 0, $55, $aa, $ff }
void mode_sixsfred2()
byte~ mode_sixsfred2::$2 reg byte a 2000002.0
byte~ mode_sixsfred2::$3 zp[1]:14 1000001.0
byte~ mode_sixsfred2::$4 reg byte a 2000002.0
byte~ mode_sixsfred2::$5 reg byte a 2000002.0
byte~ mode_sixsfred2::$8 reg byte a 2000002.0
const nomodify byte* mode_sixsfred2::COLORS = (byte*) 32768
const nomodify byte* mode_sixsfred2::PLANEA = (byte*) 16384
const nomodify byte* mode_sixsfred2::PLANEB = (byte*) 24576
byte mode_sixsfred2::ax
byte mode_sixsfred2::ax#1 reg byte x 1500001.5
byte mode_sixsfred2::ax#2 reg byte x 400000.4
byte mode_sixsfred2::ay
byte mode_sixsfred2::ay#1 ay zp[1]:7 150001.5
byte mode_sixsfred2::ay#4 ay zp[1]:7 150000.375
byte mode_sixsfred2::bx
byte mode_sixsfred2::bx#1 reg byte x 1500001.5
byte mode_sixsfred2::bx#2 reg byte x 666667.3333333334
byte mode_sixsfred2::by
byte mode_sixsfred2::by#1 by zp[1]:10 150001.5
byte mode_sixsfred2::by#4 by zp[1]:10 33333.666666666664
byte* mode_sixsfred2::col
byte* mode_sixsfred2::col#1 col zp[2]:8 420000.60000000003
byte* mode_sixsfred2::col#2 col zp[2]:8 516667.3333333334
byte* mode_sixsfred2::col#3 col zp[2]:8 200002.0
byte mode_sixsfred2::cx
byte mode_sixsfred2::cx#1 reg byte x 1500001.5
byte mode_sixsfred2::cx#2 reg byte x 428571.85714285716
byte mode_sixsfred2::cy
byte mode_sixsfred2::cy#1 cy zp[1]:6 150001.5
byte mode_sixsfred2::cy#4 cy zp[1]:6 120000.30000000002
byte* mode_sixsfred2::gfxa
byte* mode_sixsfred2::gfxa#1 gfxa zp[2]:4 420000.60000000003
byte* mode_sixsfred2::gfxa#2 gfxa zp[2]:4 775001.0
byte* mode_sixsfred2::gfxa#3 gfxa zp[2]:4 200002.0
byte* mode_sixsfred2::gfxb
byte* mode_sixsfred2::gfxb#1 gfxb zp[2]:17 420000.60000000003
byte* mode_sixsfred2::gfxb#2 gfxb zp[2]:17 1550002.0
byte* mode_sixsfred2::gfxb#3 gfxb zp[2]:17 200002.0
byte mode_sixsfred2::i
byte mode_sixsfred2::i#1 reg byte x 150001.5
byte mode_sixsfred2::i#2 reg byte x 200002.0
byte mode_sixsfred2::row
byte mode_sixsfred2::row#0 reg byte a 2000002.0
const byte* mode_sixsfred2::row_bitmask[]  = { 0, $55, $aa, $ff }
void mode_stdbitmap()
byte~ mode_stdbitmap::$4 reg byte a 2000002.0
byte~ mode_stdbitmap::$7 reg byte a 2000002.0
byte~ mode_stdbitmap::$8 reg byte a 2000002.0
const nomodify byte* mode_stdbitmap::BITMAP = (byte*) 24576
const nomodify byte* mode_stdbitmap::SCREEN = (byte*) 16384
byte* mode_stdbitmap::ch
byte* mode_stdbitmap::ch#1 ch zp[2]:4 420000.60000000003
byte* mode_stdbitmap::ch#2 ch zp[2]:4 442857.7142857142
byte* mode_stdbitmap::ch#3 ch zp[2]:4 200002.0
byte mode_stdbitmap::col
byte mode_stdbitmap::col#0 reg byte y 1500001.5
byte mode_stdbitmap::col2
byte mode_stdbitmap::col2#0 col2 zp[1]:12 1000001.0
byte mode_stdbitmap::cx
byte mode_stdbitmap::cx#1 reg byte x 1500001.5
byte mode_stdbitmap::cx#2 reg byte x 375000.375
byte mode_stdbitmap::cy
byte mode_stdbitmap::cy#1 cy zp[1]:6 150001.5
byte mode_stdbitmap::cy#4 cy zp[1]:6 109091.18181818182
byte mode_stdbitmap::i
byte mode_stdbitmap::i#1 reg byte x 150001.5
byte mode_stdbitmap::i#2 reg byte x 200002.0
byte mode_stdbitmap::l
byte mode_stdbitmap::l#1 l zp[1]:7 200002.0
byte mode_stdbitmap::l#2 l zp[1]:7 100001.0
const byte mode_stdbitmap::lines_cnt = 9
const byte* mode_stdbitmap::lines_x[]  = { 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80 }
const byte* mode_stdbitmap::lines_y[]  = { 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0 }
void mode_stdchar()
byte~ mode_stdchar::$2 reg byte a 2000002.0
byte~ mode_stdchar::$3 reg byte a 2000002.0
byte~ mode_stdchar::$4 reg byte a 2000002.0
byte~ mode_stdchar::$5 zp[1]:15 1000001.0
byte~ mode_stdchar::$6 reg byte a 2000002.0
byte~ mode_stdchar::$7 reg byte a 2000002.0
const nomodify byte* mode_stdchar::CHARSET = (byte*) 36864
const nomodify byte* mode_stdchar::COLORS = (byte*) 55296
const nomodify byte* mode_stdchar::SCREEN = (byte*) 32768
byte* mode_stdchar::ch
byte* mode_stdchar::ch#1 ch zp[2]:4 420000.60000000003
byte* mode_stdchar::ch#2 ch zp[2]:4 310000.4
byte* mode_stdchar::ch#3 ch zp[2]:4 200002.0
byte* mode_stdchar::col
byte* mode_stdchar::col#1 col zp[2]:8 190909.36363636365
byte* mode_stdchar::col#2 col zp[2]:8 775001.0
byte* mode_stdchar::col#3 col zp[2]:8 200002.0
byte mode_stdchar::cx
byte mode_stdchar::cx#1 reg byte x 1500001.5
byte mode_stdchar::cx#2 reg byte x 363636.7272727273
byte mode_stdchar::cy
byte mode_stdchar::cy#1 cy zp[1]:6 150001.5
byte mode_stdchar::cy#4 cy zp[1]:6 157143.14285714284
byte mode_stdchar::i
byte mode_stdchar::i#1 reg byte x 150001.5
byte mode_stdchar::i#2 reg byte x 200002.0
void mode_twoplanebitmap()
byte~ mode_twoplanebitmap::$2 reg byte a 2000002.0
byte~ mode_twoplanebitmap::$3 zp[1]:15 1000001.0
byte~ mode_twoplanebitmap::$4 reg byte a 2000002.0
byte~ mode_twoplanebitmap::$5 reg byte a 2000002.0
byte~ mode_twoplanebitmap::$8 reg byte a 2000002.0
const nomodify byte* mode_twoplanebitmap::COLORS = (byte*) 32768
const nomodify byte* mode_twoplanebitmap::PLANEA = (byte*) 16384
const nomodify byte* mode_twoplanebitmap::PLANEB = (byte*) 24576
byte mode_twoplanebitmap::ax
byte mode_twoplanebitmap::ax#1 reg byte x 1500001.5
byte mode_twoplanebitmap::ax#2 reg byte x 250000.25
byte mode_twoplanebitmap::ay
byte mode_twoplanebitmap::ay#1 ay zp[1]:7 150001.5
byte mode_twoplanebitmap::ay#5 ay zp[1]:7 109091.18181818182
byte mode_twoplanebitmap::bx
byte mode_twoplanebitmap::bx#1 reg byte x 1500001.5
byte mode_twoplanebitmap::bx#2 reg byte x 666667.3333333334
byte mode_twoplanebitmap::by
byte mode_twoplanebitmap::by#1 by zp[1]:10 150001.5
byte mode_twoplanebitmap::by#4 by zp[1]:10 33333.666666666664
byte* mode_twoplanebitmap::col
byte* mode_twoplanebitmap::col#1 col zp[2]:17 420000.60000000003
byte* mode_twoplanebitmap::col#2 col zp[2]:17 516667.3333333334
byte* mode_twoplanebitmap::col#3 col zp[2]:17 200002.0
byte mode_twoplanebitmap::cx
byte mode_twoplanebitmap::cx#1 reg byte x 1500001.5
byte mode_twoplanebitmap::cx#2 reg byte x 428571.85714285716
byte mode_twoplanebitmap::cy
byte mode_twoplanebitmap::cy#1 cy zp[1]:6 150001.5
byte mode_twoplanebitmap::cy#4 cy zp[1]:6 120000.30000000002
byte* mode_twoplanebitmap::gfxa
byte* mode_twoplanebitmap::gfxa#1 gfxa zp[2]:19 2000002.0
byte* mode_twoplanebitmap::gfxa#2 gfxa zp[2]:19 2000002.0
byte* mode_twoplanebitmap::gfxa#3 gfxa zp[2]:19 1020001.2
byte* mode_twoplanebitmap::gfxa#6 gfxa zp[2]:19 620000.8
byte* mode_twoplanebitmap::gfxa#7 gfxa zp[2]:19 200002.0
byte* mode_twoplanebitmap::gfxb
byte* mode_twoplanebitmap::gfxb#1 gfxb zp[2]:8 420000.60000000003
byte* mode_twoplanebitmap::gfxb#2 gfxb zp[2]:8 1550002.0
byte* mode_twoplanebitmap::gfxb#3 gfxb zp[2]:8 200002.0
byte mode_twoplanebitmap::i
byte mode_twoplanebitmap::i#1 reg byte x 150001.5
byte mode_twoplanebitmap::i#2 reg byte x 200002.0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 1.1000002E7
byte* print_char_cursor
byte* print_char_cursor#103 print_char_cursor zp[2]:2 200002.0
byte* print_char_cursor#2 print_char_cursor zp[2]:2 100001.0
byte* print_char_cursor#26 print_char_cursor zp[2]:2 3666667.333333333
byte* print_char_cursor#37 print_char_cursor zp[2]:2 3683334.1666666665
byte* print_char_cursor#38 print_char_cursor zp[2]:2 1.4328571485714287E8
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#1 print_line_cursor zp[2]:17 91666.83333333334
byte* print_line_cursor#19 print_line_cursor zp[2]:17 2.001000003E9
byte* print_line_cursor#2 print_line_cursor zp[2]:17 6.00040001E8
void print_ln()
byte* print_screen
void print_str_lines(byte* print_str_lines::str)
byte print_str_lines::ch
byte print_str_lines::ch#0 reg byte a 666667.3333333334
byte* print_str_lines::str
byte* print_str_lines::str#0 str zp[2]:8 233333.66666666666
byte* print_str_lines::str#2 str zp[2]:8 150001.5
byte* print_str_lines::str#3 str zp[2]:8 1550002.0

reg byte x [ menu::i#2 menu::i#1 ]
zp[2]:2 [ print_char_cursor#37 print_char_cursor#2 print_char_cursor#103 print_char_cursor#38 print_char_cursor#26 menu::c#2 menu::c#1 ]
reg byte y [ keyboard_key_pressed::key#20 ]
reg byte x [ mode_stdchar::i#2 mode_stdchar::i#1 ]
reg byte x [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
reg byte x [ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
reg byte x [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
reg byte x [ mode_mcchar::i#2 mode_mcchar::i#1 ]
reg byte x [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
reg byte x [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
reg byte x [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
reg byte x [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
reg byte x [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
reg byte x [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
reg byte x [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
reg byte x [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
reg byte x [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
reg byte x [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
reg byte x [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
zp[2]:4 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ]
reg byte x [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
reg byte x [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
reg byte x [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
reg byte x [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
reg byte x [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
reg byte x [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
reg byte x [ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
reg byte x [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
reg byte x [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
reg byte x [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
reg byte x [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
zp[1]:6 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_mcchar::cy#4 mode_mcchar::cy#1 mode_ecmchar::cy#4 mode_ecmchar::cy#1 mode_stdchar::cy#4 mode_stdchar::cy#1 ]
reg byte x [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
zp[1]:7 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
reg byte x [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
reg byte a [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ]
reg byte x [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
reg byte x [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
zp[2]:8 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
reg byte x [ dtv_control#116 dtv_control#146 dtv_control#16 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
reg byte x [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
zp[1]:10 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
reg byte x [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
reg byte y [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
reg byte x [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ menu::$5 ]
reg byte a [ keyboard_key_pressed::return#24 ]
reg byte a [ menu::$9 ]
reg byte a [ keyboard_key_pressed::return#25 ]
reg byte a [ menu::$13 ]
reg byte a [ keyboard_key_pressed::return#26 ]
reg byte a [ menu::$17 ]
reg byte a [ keyboard_key_pressed::return#27 ]
reg byte a [ menu::$21 ]
reg byte a [ keyboard_key_pressed::return#28 ]
reg byte a [ menu::$25 ]
reg byte a [ keyboard_key_pressed::return#29 ]
reg byte a [ menu::$29 ]
reg byte a [ keyboard_key_pressed::return#30 ]
reg byte a [ menu::$33 ]
reg byte a [ keyboard_key_pressed::return#10 ]
reg byte a [ menu::$37 ]
reg byte a [ keyboard_key_pressed::return#11 ]
reg byte a [ menu::$41 ]
reg byte a [ keyboard_key_pressed::return#12 ]
reg byte a [ menu::$45 ]
reg byte a [ keyboard_key_pressed::return#13 ]
reg byte a [ menu::$49 ]
reg byte a [ print_str_lines::ch#0 ]
reg byte a [ print_char::ch#0 ]
reg byte a [ keyboard_key_pressed::rowidx#0 ]
reg byte y [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ mode_stdchar::$2 ]
reg byte a [ mode_stdchar::$3 ]
reg byte a [ mode_stdchar::$4 ]
reg byte a [ mode_stdchar::$6 ]
reg byte a [ mode_stdchar::$7 ]
reg byte a [ mode_ecmchar::$2 ]
reg byte a [ mode_ecmchar::$3 ]
reg byte a [ mode_ecmchar::$4 ]
zp[1]:11 [ mode_ecmchar::$5 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
reg byte a [ mode_ecmchar::$6 ]
reg byte a [ mode_ecmchar::$7 ]
reg byte a [ mode_mcchar::$2 ]
reg byte a [ mode_mcchar::$3 ]
reg byte a [ mode_mcchar::$4 ]
reg byte a [ mode_mcchar::$6 ]
reg byte a [ mode_mcchar::$7 ]
reg byte a [ mode_stdbitmap::$4 ]
reg byte y [ mode_stdbitmap::col#0 ]
zp[1]:12 [ mode_stdbitmap::col2#0 mode_mcchar::$5 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
reg byte a [ mode_stdbitmap::$7 ]
reg byte a [ mode_stdbitmap::$8 ]
reg byte x [ bitmap_line::y0#0 ]
reg byte a [ mode_hicolstdchar::$2 ]
reg byte a [ mode_hicolstdchar::$4 ]
reg byte a [ mode_hicolstdchar::v#0 ]
reg byte a [ mode_hicolecmchar::$2 ]
zp[1]:13 [ mode_hicolecmchar::$3 mode_hicolstdchar::$3 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ]
reg byte a [ mode_hicolecmchar::$4 ]
reg byte a [ mode_hicolecmchar::v#0 ]
reg byte a [ mode_hicolmcchar::$2 ]
reg byte a [ mode_hicolmcchar::$4 ]
reg byte a [ mode_hicolmcchar::v#0 ]
reg byte a [ mode_sixsfred2::$2 ]
zp[1]:14 [ mode_sixsfred2::$3 mode_hicolmcchar::$3 keyboard_key_pressed::colidx#0 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
reg byte a [ mode_sixsfred2::$4 ]
reg byte a [ mode_sixsfred2::$5 ]
reg byte a [ mode_sixsfred2::$8 ]
reg byte a [ mode_sixsfred2::row#0 ]
reg byte a [ mode_twoplanebitmap::$2 ]
reg byte a [ mode_twoplanebitmap::$4 ]
reg byte a [ mode_twoplanebitmap::$5 ]
reg byte a [ mode_twoplanebitmap::$8 ]
reg byte a [ mode_sixsfred::$2 ]
reg byte a [ mode_sixsfred::$3 ]
reg byte a [ mode_sixsfred::$6 ]
reg byte a [ mode_sixsfred::row#0 ]
reg byte a [ mode_8bpppixelcell::$2 ]
zp[1]:15 [ mode_8bpppixelcell::$3 mode_twoplanebitmap::$3 mode_stdchar::$5 bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 bitmap_line::x0#0 bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
reg byte a [ mode_8bpppixelcell::$4 ]
reg byte a [ mode_8bpppixelcell::$5 ]
reg byte a [ mode_8bpppixelcell::$8 ]
reg byte a [ mode_8bppchunkybmm::c#0 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ keyboard_key_pressed::return#14 ]
reg byte a [ mode_ctrl::$1 ]
reg byte a [ keyboard_key_pressed::return#15 ]
reg byte a [ mode_ctrl::$4 ]
reg byte a [ keyboard_key_pressed::return#16 ]
reg byte a [ mode_ctrl::$8 ]
reg byte a [ keyboard_key_pressed::return#17 ]
reg byte a [ mode_ctrl::$12 ]
reg byte a [ keyboard_key_pressed::return#18 ]
reg byte a [ mode_ctrl::$16 ]
reg byte a [ keyboard_key_pressed::return#19 ]
reg byte a [ mode_ctrl::$20 ]
reg byte a [ keyboard_key_pressed::return#20 ]
reg byte a [ mode_ctrl::$24 ]
reg byte a [ keyboard_key_pressed::return#21 ]
reg byte a [ mode_ctrl::$28 ]
reg byte a [ bitmap_init::$0 ]
zp[1]:16 [ bitmap_init::$10 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x1#0 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_clear::y#4 bitmap_clear::y#1 mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
reg byte a [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$8 ]
reg byte a [ bitmap_init::$9 ]
reg byte y [ bitmap_line::yd#2 ]
reg byte y [ bitmap_line::yd#1 ]
reg byte y [ bitmap_line::yd#10 ]
reg byte y [ bitmap_line::yd#11 ]
reg byte x [ bitmap_line_ydxi::$6 ]
reg byte a [ bitmap_line_xdyi::$6 ]
reg byte x [ bitmap_line_ydxd::$6 ]
reg byte a [ bitmap_line_xdyd::$6 ]
zp[2]:17 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 mode_8bppchunkybmm::$7 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 memset::dst#2 memset::dst#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ]
zp[2]:19 [ bitmap_plot::plotter_y#0 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ]
reg byte a [ bitmap_plot::$1 ]


FINAL ASSEMBLER
Score: 2307914

  // File Comments
// Exploring C64DTV Screen Modes
// C64 DTV version 2 Registers and Constants
//
// Sources
// (J) https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide
// (H) http://dtvhacking.cbm8bit.com/dtv_wiki/images/d/d9/Dtv_registers_full.txt
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  // The colors of the C64
  .const BLACK = 0
  .const GREEN = 5
  .const BLUE = 6
  .const LIGHT_GREEN = $d
  .const DTV_FEATURE_ENABLE = 1
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  .const KEY_3 = 8
  .const KEY_A = $a
  .const KEY_4 = $b
  .const KEY_E = $e
  .const KEY_D = $12
  .const KEY_6 = $13
  .const KEY_C = $14
  .const KEY_7 = $18
  .const KEY_8 = $1b
  .const KEY_B = $1c
  .const KEY_H = $1d
  .const KEY_U = $1e
  .const KEY_0 = $23
  .const KEY_O = $26
  .const KEY_L = $2a
  .const KEY_1 = $38
  .const KEY_2 = $3b
  .const KEY_SPACE = $3c
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .label RASTER = $d012
  .label BORDER_COLOR = $d020
  .label BG_COLOR = $d021
  .label BG_COLOR1 = $d022
  .label BG_COLOR2 = $d023
  .label BG_COLOR3 = $d024
  .label VIC_CONTROL = $d011
  .label VIC_CONTROL2 = $d016
  .label VIC_MEMORY = $d018
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .label print_char_cursor = 2
  .label print_line_cursor = $11
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [2] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // *DTV_FEATURE = DTV_FEATURE_ENABLE
    // [3] *DTV_FEATURE = DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // [4] phi from main main::@1 to main::@1 [phi:main/main::@1->main::@1]
    // main::@1
  __b1:
    // menu()
    // [5] call menu 
    jsr menu
    jmp __b1
}
  // menu
menu: {
    .label SCREEN = $8000
    .label CHARSET = $9800
    .label c = 2
    // *DTV_GRAPHICS_VIC_BANK = (byte)((dword)CHARSET/$10000)
    // [6] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // Charset ROM
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // *DTV_COLOR_BANK_LO = <((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [7] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [8] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // *DTV_CONTROL = 0
    // [9] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Mode
    sta DTV_CONTROL
    // CIA2->PORT_A_DDR = %00000011
    // [10] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)CHARSET/$4000)
    // [11] *((byte*)CIA2) = 3^(byte)(word)menu::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
    // [12] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_CSEL
    // [13] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // *VIC_MEMORY =  (byte)((((word)SCREEN&$3fff)/$40)|(((word)CHARSET&$3fff)/$400))
    // [14] *VIC_MEMORY = (byte)(word)menu::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [15] phi from menu to menu::@1 [phi:menu->menu::@1]
    // [15] phi menu::i#2 = 0 [phi:menu->menu::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - default
    // [15] phi from menu::@1 to menu::@1 [phi:menu::@1->menu::@1]
    // [15] phi menu::i#2 = menu::i#1 [phi:menu::@1->menu::@1#0] -- register_copy 
    // menu::@1
  __b1:
    // DTV_PALETTE[i] = DTV_PALETTE_DEFAULT[i]
    // [16] DTV_PALETTE[menu::i#2] = DTV_PALETTE_DEFAULT[menu::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [17] menu::i#1 = ++ menu::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [18] if(menu::i#1!=$10) goto menu::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // [19] phi from menu::@1 to menu::@2 [phi:menu::@1->menu::@2]
    // [19] phi menu::c#2 = COLS [phi:menu::@1->menu::@2#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z c
    lda #>COLS
    sta.z c+1
  // Char Colors
    // menu::@2
  __b2:
    // for(byte* c=COLS;c!=COLS+1000;c++)
    // [20] if(menu::c#2!=COLS+$3e8) goto menu::@3 -- pbuz1_neq_pbuc1_then_la1 
    lda.z c+1
    cmp #>COLS+$3e8
    beq !__b3+
    jmp __b3
  !__b3:
    lda.z c
    cmp #<COLS+$3e8
    beq !__b3+
    jmp __b3
  !__b3:
    // menu::@4
    // *BG_COLOR = 0
    // [21] *BG_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BG_COLOR
    // *BORDER_COLOR = 0
    // [22] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    sta BORDER_COLOR
    // [23] phi from menu::@4 to menu::@29 [phi:menu::@4->menu::@29]
    // menu::@29
    // print_cls()
    // [24] call print_cls 
    // [114] phi from menu::@29 to print_cls [phi:menu::@29->print_cls]
    jsr print_cls
    // [25] phi from menu::@29 to menu::@30 [phi:menu::@29->menu::@30]
    // menu::@30
    // print_str_lines(MENU_TEXT)
    // [26] call print_str_lines 
    // [117] phi from menu::@30 to print_str_lines [phi:menu::@30->print_str_lines]
    jsr print_str_lines
    // [27] phi from menu::@30 menu::@42 to menu::@5 [phi:menu::@30/menu::@42->menu::@5]
    // menu::@5
  __b5:
    // keyboard_key_pressed(KEY_1)
    // [28] call keyboard_key_pressed 
    // [132] phi from menu::@5 to keyboard_key_pressed [phi:menu::@5->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_1 [phi:menu::@5->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_1
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_1)
    // [29] keyboard_key_pressed::return#2 = keyboard_key_pressed::return#0
    // menu::@31
    // [30] menu::$5 = keyboard_key_pressed::return#2
    // if(keyboard_key_pressed(KEY_1)!=0)
    // [31] if(menu::$5==0) goto menu::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b6
    // [32] phi from menu::@31 to menu::@17 [phi:menu::@31->menu::@17]
    // menu::@17
    // mode_stdchar()
    // [33] call mode_stdchar 
    jsr mode_stdchar
    // menu::@return
    // }
    // [34] return 
    rts
    // [35] phi from menu::@31 to menu::@6 [phi:menu::@31->menu::@6]
    // menu::@6
  __b6:
    // keyboard_key_pressed(KEY_2)
    // [36] call keyboard_key_pressed 
    // [132] phi from menu::@6 to keyboard_key_pressed [phi:menu::@6->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_2 [phi:menu::@6->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_2
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_2)
    // [37] keyboard_key_pressed::return#24 = keyboard_key_pressed::return#0
    // menu::@32
    // [38] menu::$9 = keyboard_key_pressed::return#24
    // if(keyboard_key_pressed(KEY_2)!=0)
    // [39] if(menu::$9==0) goto menu::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b7
    // [40] phi from menu::@32 to menu::@18 [phi:menu::@32->menu::@18]
    // menu::@18
    // mode_ecmchar()
    // [41] call mode_ecmchar 
    jsr mode_ecmchar
    rts
    // [42] phi from menu::@32 to menu::@7 [phi:menu::@32->menu::@7]
    // menu::@7
  __b7:
    // keyboard_key_pressed(KEY_3)
    // [43] call keyboard_key_pressed 
    // [132] phi from menu::@7 to keyboard_key_pressed [phi:menu::@7->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_3 [phi:menu::@7->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_3
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_3)
    // [44] keyboard_key_pressed::return#25 = keyboard_key_pressed::return#0
    // menu::@33
    // [45] menu::$13 = keyboard_key_pressed::return#25
    // if(keyboard_key_pressed(KEY_3)!=0)
    // [46] if(menu::$13==0) goto menu::@8 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b8
    // [47] phi from menu::@33 to menu::@19 [phi:menu::@33->menu::@19]
    // menu::@19
    // mode_mcchar()
    // [48] call mode_mcchar 
    jsr mode_mcchar
    rts
    // [49] phi from menu::@33 to menu::@8 [phi:menu::@33->menu::@8]
    // menu::@8
  __b8:
    // keyboard_key_pressed(KEY_4)
    // [50] call keyboard_key_pressed 
    // [132] phi from menu::@8 to keyboard_key_pressed [phi:menu::@8->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_4 [phi:menu::@8->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_4
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_4)
    // [51] keyboard_key_pressed::return#26 = keyboard_key_pressed::return#0
    // menu::@34
    // [52] menu::$17 = keyboard_key_pressed::return#26
    // if(keyboard_key_pressed(KEY_4)!=0)
    // [53] if(menu::$17==0) goto menu::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b9
    // [54] phi from menu::@34 to menu::@20 [phi:menu::@34->menu::@20]
    // menu::@20
    // mode_stdbitmap()
    // [55] call mode_stdbitmap 
    jsr mode_stdbitmap
    rts
    // [56] phi from menu::@34 to menu::@9 [phi:menu::@34->menu::@9]
    // menu::@9
  __b9:
    // keyboard_key_pressed(KEY_6)
    // [57] call keyboard_key_pressed 
    // [132] phi from menu::@9 to keyboard_key_pressed [phi:menu::@9->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_6 [phi:menu::@9->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_6
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_6)
    // [58] keyboard_key_pressed::return#27 = keyboard_key_pressed::return#0
    // menu::@35
    // [59] menu::$21 = keyboard_key_pressed::return#27
    // if(keyboard_key_pressed(KEY_6)!=0)
    // [60] if(menu::$21==0) goto menu::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10
    // [61] phi from menu::@35 to menu::@21 [phi:menu::@35->menu::@21]
    // menu::@21
    // mode_hicolstdchar()
    // [62] call mode_hicolstdchar 
    jsr mode_hicolstdchar
    rts
    // [63] phi from menu::@35 to menu::@10 [phi:menu::@35->menu::@10]
    // menu::@10
  __b10:
    // keyboard_key_pressed(KEY_7)
    // [64] call keyboard_key_pressed 
    // [132] phi from menu::@10 to keyboard_key_pressed [phi:menu::@10->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_7 [phi:menu::@10->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_7
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_7)
    // [65] keyboard_key_pressed::return#28 = keyboard_key_pressed::return#0
    // menu::@36
    // [66] menu::$25 = keyboard_key_pressed::return#28
    // if(keyboard_key_pressed(KEY_7)!=0)
    // [67] if(menu::$25==0) goto menu::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b11
    // [68] phi from menu::@36 to menu::@22 [phi:menu::@36->menu::@22]
    // menu::@22
    // mode_hicolecmchar()
    // [69] call mode_hicolecmchar 
    jsr mode_hicolecmchar
    rts
    // [70] phi from menu::@36 to menu::@11 [phi:menu::@36->menu::@11]
    // menu::@11
  __b11:
    // keyboard_key_pressed(KEY_8)
    // [71] call keyboard_key_pressed 
    // [132] phi from menu::@11 to keyboard_key_pressed [phi:menu::@11->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_8 [phi:menu::@11->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_8
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_8)
    // [72] keyboard_key_pressed::return#29 = keyboard_key_pressed::return#0
    // menu::@37
    // [73] menu::$29 = keyboard_key_pressed::return#29
    // if(keyboard_key_pressed(KEY_8)!=0)
    // [74] if(menu::$29==0) goto menu::@12 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b12
    // [75] phi from menu::@37 to menu::@23 [phi:menu::@37->menu::@23]
    // menu::@23
    // mode_hicolmcchar()
    // [76] call mode_hicolmcchar 
    jsr mode_hicolmcchar
    rts
    // [77] phi from menu::@37 to menu::@12 [phi:menu::@37->menu::@12]
    // menu::@12
  __b12:
    // keyboard_key_pressed(KEY_A)
    // [78] call keyboard_key_pressed 
    // [132] phi from menu::@12 to keyboard_key_pressed [phi:menu::@12->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_A [phi:menu::@12->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_A
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_A)
    // [79] keyboard_key_pressed::return#30 = keyboard_key_pressed::return#0
    // menu::@38
    // [80] menu::$33 = keyboard_key_pressed::return#30
    // if(keyboard_key_pressed(KEY_A)!=0)
    // [81] if(menu::$33==0) goto menu::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b13
    // [82] phi from menu::@38 to menu::@24 [phi:menu::@38->menu::@24]
    // menu::@24
    // mode_sixsfred2()
    // [83] call mode_sixsfred2 
    jsr mode_sixsfred2
    rts
    // [84] phi from menu::@38 to menu::@13 [phi:menu::@38->menu::@13]
    // menu::@13
  __b13:
    // keyboard_key_pressed(KEY_B)
    // [85] call keyboard_key_pressed 
    // [132] phi from menu::@13 to keyboard_key_pressed [phi:menu::@13->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_B [phi:menu::@13->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_B
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_B)
    // [86] keyboard_key_pressed::return#10 = keyboard_key_pressed::return#0
    // menu::@39
    // [87] menu::$37 = keyboard_key_pressed::return#10
    // if(keyboard_key_pressed(KEY_B)!=0)
    // [88] if(menu::$37==0) goto menu::@14 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b14
    // [89] phi from menu::@39 to menu::@25 [phi:menu::@39->menu::@25]
    // menu::@25
    // mode_twoplanebitmap()
    // [90] call mode_twoplanebitmap 
    jsr mode_twoplanebitmap
    rts
    // [91] phi from menu::@39 to menu::@14 [phi:menu::@39->menu::@14]
    // menu::@14
  __b14:
    // keyboard_key_pressed(KEY_C)
    // [92] call keyboard_key_pressed 
    // [132] phi from menu::@14 to keyboard_key_pressed [phi:menu::@14->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_C [phi:menu::@14->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_C
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_C)
    // [93] keyboard_key_pressed::return#11 = keyboard_key_pressed::return#0
    // menu::@40
    // [94] menu::$41 = keyboard_key_pressed::return#11
    // if(keyboard_key_pressed(KEY_C)!=0)
    // [95] if(menu::$41==0) goto menu::@15 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b15
    // [96] phi from menu::@40 to menu::@26 [phi:menu::@40->menu::@26]
    // menu::@26
    // mode_sixsfred()
    // [97] call mode_sixsfred 
    jsr mode_sixsfred
    rts
    // [98] phi from menu::@40 to menu::@15 [phi:menu::@40->menu::@15]
    // menu::@15
  __b15:
    // keyboard_key_pressed(KEY_D)
    // [99] call keyboard_key_pressed 
    // [132] phi from menu::@15 to keyboard_key_pressed [phi:menu::@15->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_D [phi:menu::@15->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_D
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_D)
    // [100] keyboard_key_pressed::return#12 = keyboard_key_pressed::return#0
    // menu::@41
    // [101] menu::$45 = keyboard_key_pressed::return#12
    // if(keyboard_key_pressed(KEY_D)!=0)
    // [102] if(menu::$45==0) goto menu::@16 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b16
    // [103] phi from menu::@41 to menu::@27 [phi:menu::@41->menu::@27]
    // menu::@27
    // mode_8bpppixelcell()
    // [104] call mode_8bpppixelcell 
    jsr mode_8bpppixelcell
    rts
    // [105] phi from menu::@41 to menu::@16 [phi:menu::@41->menu::@16]
    // menu::@16
  __b16:
    // keyboard_key_pressed(KEY_E)
    // [106] call keyboard_key_pressed 
    // [132] phi from menu::@16 to keyboard_key_pressed [phi:menu::@16->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_E [phi:menu::@16->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_E
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_E)
    // [107] keyboard_key_pressed::return#13 = keyboard_key_pressed::return#0
    // menu::@42
    // [108] menu::$49 = keyboard_key_pressed::return#13
    // if(keyboard_key_pressed(KEY_E)!=0)
    // [109] if(menu::$49==0) goto menu::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    bne !__b5+
    jmp __b5
  !__b5:
    // [110] phi from menu::@42 to menu::@28 [phi:menu::@42->menu::@28]
    // menu::@28
    // mode_8bppchunkybmm()
    // [111] call mode_8bppchunkybmm 
    jsr mode_8bppchunkybmm
    rts
    // menu::@3
  __b3:
    // *c=LIGHT_GREEN
    // [112] *menu::c#2 = LIGHT_GREEN -- _deref_pbuz1=vbuc1 
    lda #LIGHT_GREEN
    ldy #0
    sta (c),y
    // for(byte* c=COLS;c!=COLS+1000;c++)
    // [113] menu::c#1 = ++ menu::c#2 -- pbuz1=_inc_pbuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [19] phi from menu::@3 to menu::@2 [phi:menu::@3->menu::@2]
    // [19] phi menu::c#2 = menu::c#1 [phi:menu::@3->menu::@2#0] -- register_copy 
    jmp __b2
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [115] call memset 
    // [649] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [116] return 
    rts
}
  // print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zp(8) str)
print_str_lines: {
    .label str = 8
    // [118] phi from print_str_lines to print_str_lines::@1 [phi:print_str_lines->print_str_lines::@1]
    // [118] phi print_line_cursor#1 = menu::SCREEN [phi:print_str_lines->print_str_lines::@1#0] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta.z print_line_cursor
    lda #>menu.SCREEN
    sta.z print_line_cursor+1
    // [118] phi print_char_cursor#2 = menu::SCREEN [phi:print_str_lines->print_str_lines::@1#1] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta.z print_char_cursor
    lda #>menu.SCREEN
    sta.z print_char_cursor+1
    // [118] phi print_str_lines::str#2 = MENU_TEXT [phi:print_str_lines->print_str_lines::@1#2] -- pbuz1=pbuc1 
    lda #<MENU_TEXT
    sta.z str
    lda #>MENU_TEXT
    sta.z str+1
    // print_str_lines::@1
  __b1:
    // while(*str)
    // [119] if(0!=*print_str_lines::str#2) goto print_str_lines::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str_lines::@return
    // }
    // [120] return 
    rts
    // [121] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
    // [121] phi print_char_cursor#37 = print_char_cursor#2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
    // [121] phi print_str_lines::str#3 = print_str_lines::str#2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    // print_str_lines::@2
  __b2:
    // ch = *(str++)
    // [122] print_str_lines::ch#0 = *print_str_lines::str#3 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [123] print_str_lines::str#0 = ++ print_str_lines::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // if(ch)
    // [124] if(0==print_str_lines::ch#0) goto print_str_lines::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b3
    // print_str_lines::@4
    // print_char(ch)
    // [125] print_char::ch#0 = print_str_lines::ch#0
    // [126] call print_char 
    jsr print_char
    // [127] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
    // [127] phi print_char_cursor#38 = print_char_cursor#37 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    // print_str_lines::@3
  __b3:
    // while (ch)
    // [128] if(0!=print_str_lines::ch#0) goto print_str_lines::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // [129] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
    // print_str_lines::@5
    // print_ln()
    // [130] call print_ln 
    // [658] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
    jsr print_ln
    // print_str_lines::@6
    // [131] print_char_cursor#103 = print_line_cursor#2 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [118] phi from print_str_lines::@6 to print_str_lines::@1 [phi:print_str_lines::@6->print_str_lines::@1]
    // [118] phi print_line_cursor#1 = print_line_cursor#2 [phi:print_str_lines::@6->print_str_lines::@1#0] -- register_copy 
    // [118] phi print_char_cursor#2 = print_char_cursor#103 [phi:print_str_lines::@6->print_str_lines::@1#1] -- register_copy 
    // [118] phi print_str_lines::str#2 = print_str_lines::str#0 [phi:print_str_lines::@6->print_str_lines::@1#2] -- register_copy 
    jmp __b1
}
  // keyboard_key_pressed
// Determines whether a specific key is currently pressed by accessing the matrix directly
// The key is a keyboard code defined from the keyboard matrix by %00rrrccc, where rrr is the row ID (0-7) and ccc is the column ID (0-7)
// All keys exist as as KEY_XXX constants.
// Returns zero if the key is not pressed and a non-zero value if the key is currently pressed
// keyboard_key_pressed(byte register(Y) key)
keyboard_key_pressed: {
    .label colidx = $e
    // colidx = key&7
    // [133] keyboard_key_pressed::colidx#0 = keyboard_key_pressed::key#20 & 7 -- vbuz1=vbuyy_band_vbuc1 
    tya
    and #7
    sta.z colidx
    // rowidx = key>>3
    // [134] keyboard_key_pressed::rowidx#0 = keyboard_key_pressed::key#20 >> 3 -- vbuaa=vbuyy_ror_3 
    tya
    lsr
    lsr
    lsr
    // keyboard_matrix_read(rowidx)
    // [135] keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0 -- vbuyy=vbuaa 
    tay
    // [136] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [137] keyboard_matrix_read::return#2 = keyboard_matrix_read::return#0
    // keyboard_key_pressed::@1
    // [138] keyboard_key_pressed::$2 = keyboard_matrix_read::return#2
    // keyboard_matrix_read(rowidx) & keyboard_matrix_col_bitmask[colidx]
    // [139] keyboard_key_pressed::return#0 = keyboard_key_pressed::$2 & keyboard_matrix_col_bitmask[keyboard_key_pressed::colidx#0] -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuz1 
    ldy.z colidx
    and keyboard_matrix_col_bitmask,y
    // keyboard_key_pressed::@return
    // }
    // [140] return 
    rts
}
  // mode_stdchar
// Standard Character Mode (LINEAR/HICOL/CHUNK/COLDIS/ECM/MCM/BMM = 0)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// Pixel Shifter (1)
// - 0: 4bpp BG_COLORor0[3:0]
// - 1: 4bpp ColorData[3:0]
mode_stdchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label __5 = $f
    // Char Colors and screen chars
    .label col = 8
    .label ch = 4
    .label cy = 6
    // *DTV_GRAPHICS_VIC_BANK = (byte)((dword)CHARSET/$10000)
    // [141] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // *DTV_COLOR_BANK_LO = <((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [142] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [143] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // *DTV_CONTROL = 0
    // [144] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_CONTROL
    // CIA2->PORT_A_DDR = %00000011
    // [145] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)CHARSET/$4000)
    // [146] *((byte*)CIA2) = 3^(byte)(word)mode_stdchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
    // [147] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_CSEL
    // [148] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // *VIC_MEMORY =  (byte)((((word)SCREEN&$3fff)/$40)|(((word)CHARSET&$3fff)/$400))
    // [149] *VIC_MEMORY = (byte)(word)mode_stdchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [150] phi from mode_stdchar to mode_stdchar::@1 [phi:mode_stdchar->mode_stdchar::@1]
    // [150] phi mode_stdchar::i#2 = 0 [phi:mode_stdchar->mode_stdchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - default
    // [150] phi from mode_stdchar::@1 to mode_stdchar::@1 [phi:mode_stdchar::@1->mode_stdchar::@1]
    // [150] phi mode_stdchar::i#2 = mode_stdchar::i#1 [phi:mode_stdchar::@1->mode_stdchar::@1#0] -- register_copy 
    // mode_stdchar::@1
  __b1:
    // DTV_PALETTE[i] = DTV_PALETTE_DEFAULT[i]
    // [151] DTV_PALETTE[mode_stdchar::i#2] = DTV_PALETTE_DEFAULT[mode_stdchar::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [152] mode_stdchar::i#1 = ++ mode_stdchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [153] if(mode_stdchar::i#1!=$10) goto mode_stdchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // mode_stdchar::@2
    // *BG_COLOR = 0
    // [154] *BG_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BG_COLOR
    // *BORDER_COLOR = 0
    // [155] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    sta BORDER_COLOR
    // [156] phi from mode_stdchar::@2 to mode_stdchar::@3 [phi:mode_stdchar::@2->mode_stdchar::@3]
    // [156] phi mode_stdchar::ch#3 = mode_stdchar::SCREEN [phi:mode_stdchar::@2->mode_stdchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [156] phi mode_stdchar::col#3 = mode_stdchar::COLORS [phi:mode_stdchar::@2->mode_stdchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [156] phi mode_stdchar::cy#4 = 0 [phi:mode_stdchar::@2->mode_stdchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [156] phi from mode_stdchar::@5 to mode_stdchar::@3 [phi:mode_stdchar::@5->mode_stdchar::@3]
    // [156] phi mode_stdchar::ch#3 = mode_stdchar::ch#1 [phi:mode_stdchar::@5->mode_stdchar::@3#0] -- register_copy 
    // [156] phi mode_stdchar::col#3 = mode_stdchar::col#1 [phi:mode_stdchar::@5->mode_stdchar::@3#1] -- register_copy 
    // [156] phi mode_stdchar::cy#4 = mode_stdchar::cy#1 [phi:mode_stdchar::@5->mode_stdchar::@3#2] -- register_copy 
    // mode_stdchar::@3
  __b3:
    // [157] phi from mode_stdchar::@3 to mode_stdchar::@4 [phi:mode_stdchar::@3->mode_stdchar::@4]
    // [157] phi mode_stdchar::ch#2 = mode_stdchar::ch#3 [phi:mode_stdchar::@3->mode_stdchar::@4#0] -- register_copy 
    // [157] phi mode_stdchar::col#2 = mode_stdchar::col#3 [phi:mode_stdchar::@3->mode_stdchar::@4#1] -- register_copy 
    // [157] phi mode_stdchar::cx#2 = 0 [phi:mode_stdchar::@3->mode_stdchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    // [157] phi from mode_stdchar::@4 to mode_stdchar::@4 [phi:mode_stdchar::@4->mode_stdchar::@4]
    // [157] phi mode_stdchar::ch#2 = mode_stdchar::ch#1 [phi:mode_stdchar::@4->mode_stdchar::@4#0] -- register_copy 
    // [157] phi mode_stdchar::col#2 = mode_stdchar::col#1 [phi:mode_stdchar::@4->mode_stdchar::@4#1] -- register_copy 
    // [157] phi mode_stdchar::cx#2 = mode_stdchar::cx#1 [phi:mode_stdchar::@4->mode_stdchar::@4#2] -- register_copy 
    // mode_stdchar::@4
  __b4:
    // cx+cy
    // [158] mode_stdchar::$2 = mode_stdchar::cx#2 + mode_stdchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // (cx+cy)&$f
    // [159] mode_stdchar::$3 = mode_stdchar::$2 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // *col++ = (cx+cy)&$f
    // [160] *mode_stdchar::col#2 = mode_stdchar::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // *col++ = (cx+cy)&$f;
    // [161] mode_stdchar::col#1 = ++ mode_stdchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // cy&$f
    // [162] mode_stdchar::$4 = mode_stdchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // (cy&$f)*$10
    // [163] mode_stdchar::$5 = mode_stdchar::$4 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __5
    // cx&$f
    // [164] mode_stdchar::$6 = mode_stdchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // (cy&$f)*$10|(cx&$f)
    // [165] mode_stdchar::$7 = mode_stdchar::$5 | mode_stdchar::$6 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __5
    // *ch++ = (cy&$f)*$10|(cx&$f)
    // [166] *mode_stdchar::ch#2 = mode_stdchar::$7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cy&$f)*$10|(cx&$f);
    // [167] mode_stdchar::ch#1 = ++ mode_stdchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [168] mode_stdchar::cx#1 = ++ mode_stdchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [169] if(mode_stdchar::cx#1!=$28) goto mode_stdchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4
    // mode_stdchar::@5
    // for(byte cy: 0..24 )
    // [170] mode_stdchar::cy#1 = ++ mode_stdchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [171] if(mode_stdchar::cy#1!=$19) goto mode_stdchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3
    // [172] phi from mode_stdchar::@5 to mode_stdchar::@6 [phi:mode_stdchar::@5->mode_stdchar::@6]
    // mode_stdchar::@6
    // mode_ctrl()
    // [173] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_stdchar::@6 to mode_ctrl [phi:mode_stdchar::@6->mode_ctrl]
    // [666] phi dtv_control#146 = 0 [phi:mode_stdchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #0
    jsr mode_ctrl
    // mode_stdchar::@return
    // }
    // [174] return 
    rts
}
  // mode_ecmchar
// Extended Background Color Character Mode (LINEAR/HICOL/CHUNK/COLDIS/MCM/BMM = 0, ECM = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & "00" & CharData[5:0] & RowCounter[2:0] ) 
// GfxData Pixel Shifter (1)
//  - 0: 4bpp Background Color
//    - CharData[7:6] 00: 4bpp BG_COLORor0[3:0]
//    - CharData[7:6] 01: 4bpp BG_COLORor1[3:0]
//    - CharData[7:6] 10: 4bpp BG_COLORor2[3:0]
//    - CharData[7:6] 11: 4bpp BG_COLORor3[3:0]
//  - 1: 4bpp ColorData[3:0]
mode_ecmchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label __5 = $b
    // Char Colors and screen chars
    .label col = 4
    .label ch = 8
    .label cy = 6
    // *DTV_GRAPHICS_VIC_BANK = (byte)((dword)CHARSET/$10000)
    // [175] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // *DTV_COLOR_BANK_LO = <((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [176] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [177] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // *DTV_CONTROL = 0
    // [178] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_CONTROL
    // CIA2->PORT_A_DDR = %00000011
    // [179] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)CHARSET/$4000)
    // [180] *((byte*)CIA2) = 3^(byte)(word)mode_ecmchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3
    // [181] *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|VIC_ECM|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_CSEL
    // [182] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // *VIC_MEMORY =  (byte)((((word)SCREEN&$3fff)/$40)|(((word)CHARSET&$3fff)/$400))
    // [183] *VIC_MEMORY = (byte)(word)mode_ecmchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [184] phi from mode_ecmchar to mode_ecmchar::@1 [phi:mode_ecmchar->mode_ecmchar::@1]
    // [184] phi mode_ecmchar::i#2 = 0 [phi:mode_ecmchar->mode_ecmchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - default
    // [184] phi from mode_ecmchar::@1 to mode_ecmchar::@1 [phi:mode_ecmchar::@1->mode_ecmchar::@1]
    // [184] phi mode_ecmchar::i#2 = mode_ecmchar::i#1 [phi:mode_ecmchar::@1->mode_ecmchar::@1#0] -- register_copy 
    // mode_ecmchar::@1
  __b1:
    // DTV_PALETTE[i] = DTV_PALETTE_DEFAULT[i]
    // [185] DTV_PALETTE[mode_ecmchar::i#2] = DTV_PALETTE_DEFAULT[mode_ecmchar::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [186] mode_ecmchar::i#1 = ++ mode_ecmchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [187] if(mode_ecmchar::i#1!=$10) goto mode_ecmchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // mode_ecmchar::@2
    // *BORDER_COLOR = 0
    // [188] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // *BG_COLOR = 0
    // [189] *BG_COLOR = 0 -- _deref_pbuc1=vbuc2 
    sta BG_COLOR
    // *BG_COLOR1 = 2
    // [190] *BG_COLOR1 = 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR1
    // *BG_COLOR2 = 5
    // [191] *BG_COLOR2 = 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR2
    // *BG_COLOR3 = 6
    // [192] *BG_COLOR3 = 6 -- _deref_pbuc1=vbuc2 
    lda #6
    sta BG_COLOR3
    // [193] phi from mode_ecmchar::@2 to mode_ecmchar::@3 [phi:mode_ecmchar::@2->mode_ecmchar::@3]
    // [193] phi mode_ecmchar::ch#3 = mode_ecmchar::SCREEN [phi:mode_ecmchar::@2->mode_ecmchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [193] phi mode_ecmchar::col#3 = mode_ecmchar::COLORS [phi:mode_ecmchar::@2->mode_ecmchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [193] phi mode_ecmchar::cy#4 = 0 [phi:mode_ecmchar::@2->mode_ecmchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [193] phi from mode_ecmchar::@5 to mode_ecmchar::@3 [phi:mode_ecmchar::@5->mode_ecmchar::@3]
    // [193] phi mode_ecmchar::ch#3 = mode_ecmchar::ch#1 [phi:mode_ecmchar::@5->mode_ecmchar::@3#0] -- register_copy 
    // [193] phi mode_ecmchar::col#3 = mode_ecmchar::col#1 [phi:mode_ecmchar::@5->mode_ecmchar::@3#1] -- register_copy 
    // [193] phi mode_ecmchar::cy#4 = mode_ecmchar::cy#1 [phi:mode_ecmchar::@5->mode_ecmchar::@3#2] -- register_copy 
    // mode_ecmchar::@3
  __b3:
    // [194] phi from mode_ecmchar::@3 to mode_ecmchar::@4 [phi:mode_ecmchar::@3->mode_ecmchar::@4]
    // [194] phi mode_ecmchar::ch#2 = mode_ecmchar::ch#3 [phi:mode_ecmchar::@3->mode_ecmchar::@4#0] -- register_copy 
    // [194] phi mode_ecmchar::col#2 = mode_ecmchar::col#3 [phi:mode_ecmchar::@3->mode_ecmchar::@4#1] -- register_copy 
    // [194] phi mode_ecmchar::cx#2 = 0 [phi:mode_ecmchar::@3->mode_ecmchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    // [194] phi from mode_ecmchar::@4 to mode_ecmchar::@4 [phi:mode_ecmchar::@4->mode_ecmchar::@4]
    // [194] phi mode_ecmchar::ch#2 = mode_ecmchar::ch#1 [phi:mode_ecmchar::@4->mode_ecmchar::@4#0] -- register_copy 
    // [194] phi mode_ecmchar::col#2 = mode_ecmchar::col#1 [phi:mode_ecmchar::@4->mode_ecmchar::@4#1] -- register_copy 
    // [194] phi mode_ecmchar::cx#2 = mode_ecmchar::cx#1 [phi:mode_ecmchar::@4->mode_ecmchar::@4#2] -- register_copy 
    // mode_ecmchar::@4
  __b4:
    // cx+cy
    // [195] mode_ecmchar::$2 = mode_ecmchar::cx#2 + mode_ecmchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // (cx+cy)&$f
    // [196] mode_ecmchar::$3 = mode_ecmchar::$2 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // *col++ = (cx+cy)&$f
    // [197] *mode_ecmchar::col#2 = mode_ecmchar::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // *col++ = (cx+cy)&$f;
    // [198] mode_ecmchar::col#1 = ++ mode_ecmchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // cy&$f
    // [199] mode_ecmchar::$4 = mode_ecmchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // (cy&$f)*$10
    // [200] mode_ecmchar::$5 = mode_ecmchar::$4 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __5
    // cx&$f
    // [201] mode_ecmchar::$6 = mode_ecmchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // (cy&$f)*$10|(cx&$f)
    // [202] mode_ecmchar::$7 = mode_ecmchar::$5 | mode_ecmchar::$6 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __5
    // *ch++ = (cy&$f)*$10|(cx&$f)
    // [203] *mode_ecmchar::ch#2 = mode_ecmchar::$7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cy&$f)*$10|(cx&$f);
    // [204] mode_ecmchar::ch#1 = ++ mode_ecmchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [205] mode_ecmchar::cx#1 = ++ mode_ecmchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [206] if(mode_ecmchar::cx#1!=$28) goto mode_ecmchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4
    // mode_ecmchar::@5
    // for(byte cy: 0..24 )
    // [207] mode_ecmchar::cy#1 = ++ mode_ecmchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [208] if(mode_ecmchar::cy#1!=$19) goto mode_ecmchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3
    // [209] phi from mode_ecmchar::@5 to mode_ecmchar::@6 [phi:mode_ecmchar::@5->mode_ecmchar::@6]
    // mode_ecmchar::@6
    // mode_ctrl()
    // [210] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_ecmchar::@6 to mode_ctrl [phi:mode_ecmchar::@6->mode_ctrl]
    // [666] phi dtv_control#146 = 0 [phi:mode_ecmchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #0
    jsr mode_ctrl
    // mode_ecmchar::@return
    // }
    // [211] return 
    rts
}
  // mode_mcchar
// Multicolor Character Mode (LINEAR/HICOL/CHUNK/COLDIS/BMM/ECM = 0, MCM = 1)
// Resolution: 160x200 (320x200)
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// GfxData Pixel Shifter (1) if ColorData[3:3] = 0:
//  - 0: 4bpp BG_COLORor0[3:0]
//  - 1: 4bpp ColorData[2:0]
// GfxData Pixel Shifter (2) if ColorData[3:3] = 1:
//  - 00: 4bpp BG_COLORor0[3:0]
//  - 01: 4bpp BG_COLORor1[3:0]
//  - 10: 4bpp BG_COLORor2[3:0]
//  - 11: 4bpp ColorData[2:0]// Standard Character Mode (LINEAR/HICOL/CHUNK/COLDIS/ECM/MCM/BMM = 0)
mode_mcchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label __5 = $c
    // Char Colors and screen chars
    .label col = 8
    .label ch = 4
    .label cy = 6
    // *DTV_GRAPHICS_VIC_BANK = (byte)((dword)CHARSET/$10000)
    // [212] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // *DTV_COLOR_BANK_LO = <((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [213] *DTV_COLOR_BANK_LO = <(word)DTV_COLOR_BANK_DEFAULT/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [214] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // *DTV_CONTROL = 0
    // [215] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_CONTROL
    // CIA2->PORT_A_DDR = %00000011
    // [216] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)CHARSET/$4000)
    // [217] *((byte*)CIA2) = 3^(byte)(word)mode_mcchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
    // [218] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_CSEL|VIC_MCM
    // [219] *VIC_CONTROL2 = VIC_CSEL|VIC_MCM -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL|VIC_MCM
    sta VIC_CONTROL2
    // *VIC_MEMORY =  (byte)((((word)SCREEN&$3fff)/$40)|(((word)CHARSET&$3fff)/$400))
    // [220] *VIC_MEMORY = (byte)(word)mode_mcchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [221] phi from mode_mcchar to mode_mcchar::@1 [phi:mode_mcchar->mode_mcchar::@1]
    // [221] phi mode_mcchar::i#2 = 0 [phi:mode_mcchar->mode_mcchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - default
    // [221] phi from mode_mcchar::@1 to mode_mcchar::@1 [phi:mode_mcchar::@1->mode_mcchar::@1]
    // [221] phi mode_mcchar::i#2 = mode_mcchar::i#1 [phi:mode_mcchar::@1->mode_mcchar::@1#0] -- register_copy 
    // mode_mcchar::@1
  __b1:
    // DTV_PALETTE[i] = DTV_PALETTE_DEFAULT[i]
    // [222] DTV_PALETTE[mode_mcchar::i#2] = DTV_PALETTE_DEFAULT[mode_mcchar::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [223] mode_mcchar::i#1 = ++ mode_mcchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [224] if(mode_mcchar::i#1!=$10) goto mode_mcchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // mode_mcchar::@2
    // *BORDER_COLOR = 0
    // [225] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // *BG_COLOR = BLACK
    // [226] *BG_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    // *BG_COLOR1 = GREEN
    // [227] *BG_COLOR1 = GREEN -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BG_COLOR1
    // *BG_COLOR2 = BLUE
    // [228] *BG_COLOR2 = BLUE -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BG_COLOR2
    // [229] phi from mode_mcchar::@2 to mode_mcchar::@3 [phi:mode_mcchar::@2->mode_mcchar::@3]
    // [229] phi mode_mcchar::ch#3 = mode_mcchar::SCREEN [phi:mode_mcchar::@2->mode_mcchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [229] phi mode_mcchar::col#3 = mode_mcchar::COLORS [phi:mode_mcchar::@2->mode_mcchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [229] phi mode_mcchar::cy#4 = 0 [phi:mode_mcchar::@2->mode_mcchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [229] phi from mode_mcchar::@5 to mode_mcchar::@3 [phi:mode_mcchar::@5->mode_mcchar::@3]
    // [229] phi mode_mcchar::ch#3 = mode_mcchar::ch#1 [phi:mode_mcchar::@5->mode_mcchar::@3#0] -- register_copy 
    // [229] phi mode_mcchar::col#3 = mode_mcchar::col#1 [phi:mode_mcchar::@5->mode_mcchar::@3#1] -- register_copy 
    // [229] phi mode_mcchar::cy#4 = mode_mcchar::cy#1 [phi:mode_mcchar::@5->mode_mcchar::@3#2] -- register_copy 
    // mode_mcchar::@3
  __b3:
    // [230] phi from mode_mcchar::@3 to mode_mcchar::@4 [phi:mode_mcchar::@3->mode_mcchar::@4]
    // [230] phi mode_mcchar::ch#2 = mode_mcchar::ch#3 [phi:mode_mcchar::@3->mode_mcchar::@4#0] -- register_copy 
    // [230] phi mode_mcchar::col#2 = mode_mcchar::col#3 [phi:mode_mcchar::@3->mode_mcchar::@4#1] -- register_copy 
    // [230] phi mode_mcchar::cx#2 = 0 [phi:mode_mcchar::@3->mode_mcchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    // [230] phi from mode_mcchar::@4 to mode_mcchar::@4 [phi:mode_mcchar::@4->mode_mcchar::@4]
    // [230] phi mode_mcchar::ch#2 = mode_mcchar::ch#1 [phi:mode_mcchar::@4->mode_mcchar::@4#0] -- register_copy 
    // [230] phi mode_mcchar::col#2 = mode_mcchar::col#1 [phi:mode_mcchar::@4->mode_mcchar::@4#1] -- register_copy 
    // [230] phi mode_mcchar::cx#2 = mode_mcchar::cx#1 [phi:mode_mcchar::@4->mode_mcchar::@4#2] -- register_copy 
    // mode_mcchar::@4
  __b4:
    // cx+cy
    // [231] mode_mcchar::$2 = mode_mcchar::cx#2 + mode_mcchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // (cx+cy)&$f
    // [232] mode_mcchar::$3 = mode_mcchar::$2 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // *col++ = (cx+cy)&$f
    // [233] *mode_mcchar::col#2 = mode_mcchar::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // *col++ = (cx+cy)&$f;
    // [234] mode_mcchar::col#1 = ++ mode_mcchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // cy&$f
    // [235] mode_mcchar::$4 = mode_mcchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // (cy&$f)*$10
    // [236] mode_mcchar::$5 = mode_mcchar::$4 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __5
    // cx&$f
    // [237] mode_mcchar::$6 = mode_mcchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // (cy&$f)*$10|(cx&$f)
    // [238] mode_mcchar::$7 = mode_mcchar::$5 | mode_mcchar::$6 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __5
    // *ch++ = (cy&$f)*$10|(cx&$f)
    // [239] *mode_mcchar::ch#2 = mode_mcchar::$7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cy&$f)*$10|(cx&$f);
    // [240] mode_mcchar::ch#1 = ++ mode_mcchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [241] mode_mcchar::cx#1 = ++ mode_mcchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [242] if(mode_mcchar::cx#1!=$28) goto mode_mcchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4
    // mode_mcchar::@5
    // for(byte cy: 0..24 )
    // [243] mode_mcchar::cy#1 = ++ mode_mcchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [244] if(mode_mcchar::cy#1!=$19) goto mode_mcchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3
    // [245] phi from mode_mcchar::@5 to mode_mcchar::@6 [phi:mode_mcchar::@5->mode_mcchar::@6]
    // mode_mcchar::@6
    // mode_ctrl()
    // [246] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_mcchar::@6 to mode_ctrl [phi:mode_mcchar::@6->mode_ctrl]
    // [666] phi dtv_control#146 = 0 [phi:mode_mcchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #0
    jsr mode_ctrl
    // mode_mcchar::@return
    // }
    // [247] return 
    rts
}
  // mode_stdbitmap
// Standard Bitmap Mode (LINEAR/HICOL/CHUNK/COLDIS/MCM/ECM = 0, BMM = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:2] & Matrix[9:0] & RowCounter[2:0] )
// Pixel Shifter (1)
//  - 0: 4bpp CharData[3:0]
//  - 1: 4bpp CharData[7:4]
mode_stdbitmap: {
    .const lines_cnt = 9
    .label SCREEN = $4000
    .label BITMAP = $6000
    .label col2 = $c
    // Bitmap Colors
    .label ch = 4
    .label cy = 6
    .label l = 7
    // *DTV_GRAPHICS_VIC_BANK = (byte)((dword)BITMAP/$10000)
    // [248] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // *DTV_CONTROL = 0
    // [249] *DTV_CONTROL = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_CONTROL
    // CIA2->PORT_A_DDR = %00000011
    // [250] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)BITMAP/$4000)
    // [251] *((byte*)CIA2) = 3^(byte)(word)mode_stdbitmap::BITMAP/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^BITMAP/$4000
    sta CIA2
    // *VIC_CONTROL = VIC_BMM|VIC_DEN|VIC_RSEL|3
    // [252] *VIC_CONTROL = VIC_BMM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_CSEL
    // [253] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // *VIC_MEMORY =  (byte)((((word)SCREEN&$3fff)/$40)|(((word)BITMAP&$3fff)/$400))
    // [254] *VIC_MEMORY = (byte)(word)mode_stdbitmap::BITMAP&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(BITMAP&$3fff)/$400
    sta VIC_MEMORY
    // [255] phi from mode_stdbitmap to mode_stdbitmap::@1 [phi:mode_stdbitmap->mode_stdbitmap::@1]
    // [255] phi mode_stdbitmap::i#2 = 0 [phi:mode_stdbitmap->mode_stdbitmap::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - default
    // [255] phi from mode_stdbitmap::@1 to mode_stdbitmap::@1 [phi:mode_stdbitmap::@1->mode_stdbitmap::@1]
    // [255] phi mode_stdbitmap::i#2 = mode_stdbitmap::i#1 [phi:mode_stdbitmap::@1->mode_stdbitmap::@1#0] -- register_copy 
    // mode_stdbitmap::@1
  __b1:
    // DTV_PALETTE[i] = DTV_PALETTE_DEFAULT[i]
    // [256] DTV_PALETTE[mode_stdbitmap::i#2] = DTV_PALETTE_DEFAULT[mode_stdbitmap::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [257] mode_stdbitmap::i#1 = ++ mode_stdbitmap::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [258] if(mode_stdbitmap::i#1!=$10) goto mode_stdbitmap::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // mode_stdbitmap::@2
    // *BG_COLOR = BLACK
    // [259] *BG_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #BLACK
    sta BG_COLOR
    // *BORDER_COLOR = BLACK
    // [260] *BORDER_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    sta BORDER_COLOR
    // [261] phi from mode_stdbitmap::@2 to mode_stdbitmap::@3 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3]
    // [261] phi mode_stdbitmap::ch#3 = mode_stdbitmap::SCREEN [phi:mode_stdbitmap::@2->mode_stdbitmap::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [261] phi mode_stdbitmap::cy#4 = 0 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [261] phi from mode_stdbitmap::@5 to mode_stdbitmap::@3 [phi:mode_stdbitmap::@5->mode_stdbitmap::@3]
    // [261] phi mode_stdbitmap::ch#3 = mode_stdbitmap::ch#1 [phi:mode_stdbitmap::@5->mode_stdbitmap::@3#0] -- register_copy 
    // [261] phi mode_stdbitmap::cy#4 = mode_stdbitmap::cy#1 [phi:mode_stdbitmap::@5->mode_stdbitmap::@3#1] -- register_copy 
    // mode_stdbitmap::@3
  __b3:
    // [262] phi from mode_stdbitmap::@3 to mode_stdbitmap::@4 [phi:mode_stdbitmap::@3->mode_stdbitmap::@4]
    // [262] phi mode_stdbitmap::ch#2 = mode_stdbitmap::ch#3 [phi:mode_stdbitmap::@3->mode_stdbitmap::@4#0] -- register_copy 
    // [262] phi mode_stdbitmap::cx#2 = 0 [phi:mode_stdbitmap::@3->mode_stdbitmap::@4#1] -- vbuxx=vbuc1 
    ldx #0
    // [262] phi from mode_stdbitmap::@4 to mode_stdbitmap::@4 [phi:mode_stdbitmap::@4->mode_stdbitmap::@4]
    // [262] phi mode_stdbitmap::ch#2 = mode_stdbitmap::ch#1 [phi:mode_stdbitmap::@4->mode_stdbitmap::@4#0] -- register_copy 
    // [262] phi mode_stdbitmap::cx#2 = mode_stdbitmap::cx#1 [phi:mode_stdbitmap::@4->mode_stdbitmap::@4#1] -- register_copy 
    // mode_stdbitmap::@4
  __b4:
    // cx+cy
    // [263] mode_stdbitmap::$4 = mode_stdbitmap::cx#2 + mode_stdbitmap::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // col = (cx+cy)&$f
    // [264] mode_stdbitmap::col#0 = mode_stdbitmap::$4 & $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
    // col2 = ($f-col)
    // [265] mode_stdbitmap::col2#0 = $f - mode_stdbitmap::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc #$f
    sta.z col2
    // col*$10
    // [266] mode_stdbitmap::$7 = mode_stdbitmap::col#0 << 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
    // col*$10 | col2
    // [267] mode_stdbitmap::$8 = mode_stdbitmap::$7 | mode_stdbitmap::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z col2
    // *ch++ = col*$10 | col2
    // [268] *mode_stdbitmap::ch#2 = mode_stdbitmap::$8 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = col*$10 | col2;
    // [269] mode_stdbitmap::ch#1 = ++ mode_stdbitmap::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [270] mode_stdbitmap::cx#1 = ++ mode_stdbitmap::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [271] if(mode_stdbitmap::cx#1!=$28) goto mode_stdbitmap::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4
    // mode_stdbitmap::@5
    // for(byte cy: 0..24 )
    // [272] mode_stdbitmap::cy#1 = ++ mode_stdbitmap::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [273] if(mode_stdbitmap::cy#1!=$19) goto mode_stdbitmap::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3
    // [274] phi from mode_stdbitmap::@5 to mode_stdbitmap::@6 [phi:mode_stdbitmap::@5->mode_stdbitmap::@6]
    // mode_stdbitmap::@6
    // bitmap_init(BITMAP)
    // [275] call bitmap_init 
  // Draw some lines on the bitmap
    // [722] phi from mode_stdbitmap::@6 to bitmap_init [phi:mode_stdbitmap::@6->bitmap_init]
    jsr bitmap_init
    // [276] phi from mode_stdbitmap::@6 to mode_stdbitmap::@10 [phi:mode_stdbitmap::@6->mode_stdbitmap::@10]
    // mode_stdbitmap::@10
    // bitmap_clear()
    // [277] call bitmap_clear 
    jsr bitmap_clear
    // [278] phi from mode_stdbitmap::@10 to mode_stdbitmap::@7 [phi:mode_stdbitmap::@10->mode_stdbitmap::@7]
    // [278] phi mode_stdbitmap::l#2 = 0 [phi:mode_stdbitmap::@10->mode_stdbitmap::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // mode_stdbitmap::@7
  __b7:
    // for(byte l=0; l<lines_cnt;l++)
    // [279] if(mode_stdbitmap::l#2<mode_stdbitmap::lines_cnt) goto mode_stdbitmap::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b8
    // [280] phi from mode_stdbitmap::@7 to mode_stdbitmap::@9 [phi:mode_stdbitmap::@7->mode_stdbitmap::@9]
    // mode_stdbitmap::@9
    // mode_ctrl()
    // [281] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_stdbitmap::@9 to mode_ctrl [phi:mode_stdbitmap::@9->mode_ctrl]
    // [666] phi dtv_control#146 = 0 [phi:mode_stdbitmap::@9->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #0
    jsr mode_ctrl
    // mode_stdbitmap::@return
    // }
    // [282] return 
    rts
    // mode_stdbitmap::@8
  __b8:
    // bitmap_line(lines_x[l], lines_x[l+1], lines_y[l], lines_y[l+1])
    // [283] bitmap_line::x0#0 = mode_stdbitmap::lines_x[mode_stdbitmap::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x0
    // [284] bitmap_line::x1#0 = (mode_stdbitmap::lines_x+1)[mode_stdbitmap::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_x+1,y
    sta.z bitmap_line.x1
    // [285] bitmap_line::y0#0 = mode_stdbitmap::lines_y[mode_stdbitmap::l#2] -- vbuxx=pbuc1_derefidx_vbuz1 
    ldx lines_y,y
    // [286] bitmap_line::y1#0 = (mode_stdbitmap::lines_y+1)[mode_stdbitmap::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_y+1,y
    sta.z bitmap_line.y1
    // [287] call bitmap_line 
    jsr bitmap_line
    // mode_stdbitmap::@11
    // for(byte l=0; l<lines_cnt;l++)
    // [288] mode_stdbitmap::l#1 = ++ mode_stdbitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [278] phi from mode_stdbitmap::@11 to mode_stdbitmap::@7 [phi:mode_stdbitmap::@11->mode_stdbitmap::@7]
    // [278] phi mode_stdbitmap::l#2 = mode_stdbitmap::l#1 [phi:mode_stdbitmap::@11->mode_stdbitmap::@7#0] -- register_copy 
    jmp __b7
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
  // mode_hicolstdchar
// High Color Standard Character Mode (LINEAR/CHUNK/COLDIS/ECM/MCM/BMM = 0, HICOL = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// Pixel Shifter (1)
//  - 0: 8bpp BG_COLORor0[7:0]
//  - 1: 8bpp ColorData[7:0]
mode_hicolstdchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label __3 = $d
    // Char Colors and screen chars
    .label col = 8
    .label ch = 4
    .label cy = 7
    // *DTV_GRAPHICS_VIC_BANK = (byte)((dword)CHARSET/$10000)
    // [289] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // *DTV_COLOR_BANK_LO = <((word)(COLORS/$400))
    // [290] *DTV_COLOR_BANK_LO = <(word)mode_hicolstdchar::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >((word)(COLORS/$400))
    // [291] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // *DTV_CONTROL = DTV_HIGHCOLOR
    // [292] *DTV_CONTROL = DTV_HIGHCOLOR -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
    // CIA2->PORT_A_DDR = %00000011
    // [293] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)CHARSET/$4000)
    // [294] *((byte*)CIA2) = 3^(byte)(word)mode_hicolstdchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
    // [295] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_CSEL
    // [296] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // *VIC_MEMORY =  (byte)((((word)SCREEN&$3fff)/$40)|(((word)CHARSET&$3fff)/$400))
    // [297] *VIC_MEMORY = (byte)(word)mode_hicolstdchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [298] phi from mode_hicolstdchar to mode_hicolstdchar::@1 [phi:mode_hicolstdchar->mode_hicolstdchar::@1]
    // [298] phi mode_hicolstdchar::i#2 = 0 [phi:mode_hicolstdchar->mode_hicolstdchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
    // [298] phi from mode_hicolstdchar::@1 to mode_hicolstdchar::@1 [phi:mode_hicolstdchar::@1->mode_hicolstdchar::@1]
    // [298] phi mode_hicolstdchar::i#2 = mode_hicolstdchar::i#1 [phi:mode_hicolstdchar::@1->mode_hicolstdchar::@1#0] -- register_copy 
    // mode_hicolstdchar::@1
  __b1:
    // DTV_PALETTE[i] = i
    // [299] DTV_PALETTE[mode_hicolstdchar::i#2] = mode_hicolstdchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [300] mode_hicolstdchar::i#1 = ++ mode_hicolstdchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [301] if(mode_hicolstdchar::i#1!=$10) goto mode_hicolstdchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // mode_hicolstdchar::@2
    // *BG_COLOR = 0
    // [302] *BG_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BG_COLOR
    // *BORDER_COLOR = 0
    // [303] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    sta BORDER_COLOR
    // [304] phi from mode_hicolstdchar::@2 to mode_hicolstdchar::@3 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3]
    // [304] phi mode_hicolstdchar::ch#3 = mode_hicolstdchar::SCREEN [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [304] phi mode_hicolstdchar::col#3 = mode_hicolstdchar::COLORS [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [304] phi mode_hicolstdchar::cy#4 = 0 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [304] phi from mode_hicolstdchar::@5 to mode_hicolstdchar::@3 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@3]
    // [304] phi mode_hicolstdchar::ch#3 = mode_hicolstdchar::ch#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@3#0] -- register_copy 
    // [304] phi mode_hicolstdchar::col#3 = mode_hicolstdchar::col#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@3#1] -- register_copy 
    // [304] phi mode_hicolstdchar::cy#4 = mode_hicolstdchar::cy#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@3#2] -- register_copy 
    // mode_hicolstdchar::@3
  __b3:
    // [305] phi from mode_hicolstdchar::@3 to mode_hicolstdchar::@4 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@4]
    // [305] phi mode_hicolstdchar::ch#2 = mode_hicolstdchar::ch#3 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@4#0] -- register_copy 
    // [305] phi mode_hicolstdchar::col#2 = mode_hicolstdchar::col#3 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@4#1] -- register_copy 
    // [305] phi mode_hicolstdchar::cx#2 = 0 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    // [305] phi from mode_hicolstdchar::@4 to mode_hicolstdchar::@4 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@4]
    // [305] phi mode_hicolstdchar::ch#2 = mode_hicolstdchar::ch#1 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@4#0] -- register_copy 
    // [305] phi mode_hicolstdchar::col#2 = mode_hicolstdchar::col#1 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@4#1] -- register_copy 
    // [305] phi mode_hicolstdchar::cx#2 = mode_hicolstdchar::cx#1 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@4#2] -- register_copy 
    // mode_hicolstdchar::@4
  __b4:
    // cy&$f
    // [306] mode_hicolstdchar::$2 = mode_hicolstdchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // (cy&$f)*$10
    // [307] mode_hicolstdchar::$3 = mode_hicolstdchar::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // cx&$f
    // [308] mode_hicolstdchar::$4 = mode_hicolstdchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // v = (cy&$f)*$10|(cx&$f)
    // [309] mode_hicolstdchar::v#0 = mode_hicolstdchar::$3 | mode_hicolstdchar::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // *col++ = v
    // [310] *mode_hicolstdchar::col#2 = mode_hicolstdchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // *col++ = v;
    // [311] mode_hicolstdchar::col#1 = ++ mode_hicolstdchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // *ch++ = v
    // [312] *mode_hicolstdchar::ch#2 = mode_hicolstdchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = v;
    // [313] mode_hicolstdchar::ch#1 = ++ mode_hicolstdchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [314] mode_hicolstdchar::cx#1 = ++ mode_hicolstdchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [315] if(mode_hicolstdchar::cx#1!=$28) goto mode_hicolstdchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4
    // mode_hicolstdchar::@5
    // for(byte cy: 0..24 )
    // [316] mode_hicolstdchar::cy#1 = ++ mode_hicolstdchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [317] if(mode_hicolstdchar::cy#1!=$19) goto mode_hicolstdchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3
    // [318] phi from mode_hicolstdchar::@5 to mode_hicolstdchar::@6 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@6]
    // mode_hicolstdchar::@6
    // mode_ctrl()
    // [319] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_hicolstdchar::@6 to mode_ctrl [phi:mode_hicolstdchar::@6->mode_ctrl]
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR [phi:mode_hicolstdchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR
    jsr mode_ctrl
    // mode_hicolstdchar::@return
    // }
    // [320] return 
    rts
}
  // mode_hicolecmchar
// High Color Extended Background Color Character Mode (LINEAR/CHUNK/COLDIS/MCM/BMM = 0, ECM/HICOL = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & "00" & CharData[5:0] & RowCounter[2:0] )
// GfxData Pixel Shifter (1)
//  - 0: 8bpp Background Color
//    - CharData[7:6] 00: 8bpp BG_COLORor0[7:0]
//    - CharData[7:6] 01: 8bpp BG_COLORor1[7:0]
//    - CharData[7:6] 10: 8bpp BG_COLORor2[7:0]
//    - CharData[7:6] 11: 8bpp BG_COLORor3[7:0]
//  - 1: 8bpp ColorData[7:0]
mode_hicolecmchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label __3 = $d
    // Char Colors and screen chars
    .label col = 8
    .label ch = 4
    .label cy = 7
    // *DTV_GRAPHICS_VIC_BANK = (byte)((dword)CHARSET/$10000)
    // [321] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // *DTV_COLOR_BANK_LO = <((word)(COLORS/$400))
    // [322] *DTV_COLOR_BANK_LO = <(word)mode_hicolecmchar::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >((word)(COLORS/$400))
    // [323] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // *DTV_CONTROL = DTV_HIGHCOLOR
    // [324] *DTV_CONTROL = DTV_HIGHCOLOR -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
    // CIA2->PORT_A_DDR = %00000011
    // [325] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)CHARSET/$4000)
    // [326] *((byte*)CIA2) = 3^(byte)(word)mode_hicolecmchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3
    // [327] *VIC_CONTROL = VIC_DEN|VIC_RSEL|VIC_ECM|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|VIC_ECM|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_CSEL
    // [328] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // *VIC_MEMORY =  (byte)((((word)SCREEN&$3fff)/$40)|(((word)CHARSET&$3fff)/$400))
    // [329] *VIC_MEMORY = (byte)(word)mode_hicolecmchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [330] phi from mode_hicolecmchar to mode_hicolecmchar::@1 [phi:mode_hicolecmchar->mode_hicolecmchar::@1]
    // [330] phi mode_hicolecmchar::i#2 = 0 [phi:mode_hicolecmchar->mode_hicolecmchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
    // [330] phi from mode_hicolecmchar::@1 to mode_hicolecmchar::@1 [phi:mode_hicolecmchar::@1->mode_hicolecmchar::@1]
    // [330] phi mode_hicolecmchar::i#2 = mode_hicolecmchar::i#1 [phi:mode_hicolecmchar::@1->mode_hicolecmchar::@1#0] -- register_copy 
    // mode_hicolecmchar::@1
  __b1:
    // DTV_PALETTE[i] = i
    // [331] DTV_PALETTE[mode_hicolecmchar::i#2] = mode_hicolecmchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [332] mode_hicolecmchar::i#1 = ++ mode_hicolecmchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [333] if(mode_hicolecmchar::i#1!=$10) goto mode_hicolecmchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // mode_hicolecmchar::@2
    // *BORDER_COLOR = 0
    // [334] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // *BG_COLOR = $50
    // [335] *BG_COLOR = $50 -- _deref_pbuc1=vbuc2 
    lda #$50
    sta BG_COLOR
    // *BG_COLOR1 = $54
    // [336] *BG_COLOR1 = $54 -- _deref_pbuc1=vbuc2 
    lda #$54
    sta BG_COLOR1
    // *BG_COLOR2 = $58
    // [337] *BG_COLOR2 = $58 -- _deref_pbuc1=vbuc2 
    lda #$58
    sta BG_COLOR2
    // *BG_COLOR3 = $5c
    // [338] *BG_COLOR3 = $5c -- _deref_pbuc1=vbuc2 
    lda #$5c
    sta BG_COLOR3
    // [339] phi from mode_hicolecmchar::@2 to mode_hicolecmchar::@3 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3]
    // [339] phi mode_hicolecmchar::ch#3 = mode_hicolecmchar::SCREEN [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [339] phi mode_hicolecmchar::col#3 = mode_hicolecmchar::COLORS [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [339] phi mode_hicolecmchar::cy#4 = 0 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [339] phi from mode_hicolecmchar::@5 to mode_hicolecmchar::@3 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@3]
    // [339] phi mode_hicolecmchar::ch#3 = mode_hicolecmchar::ch#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@3#0] -- register_copy 
    // [339] phi mode_hicolecmchar::col#3 = mode_hicolecmchar::col#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@3#1] -- register_copy 
    // [339] phi mode_hicolecmchar::cy#4 = mode_hicolecmchar::cy#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@3#2] -- register_copy 
    // mode_hicolecmchar::@3
  __b3:
    // [340] phi from mode_hicolecmchar::@3 to mode_hicolecmchar::@4 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@4]
    // [340] phi mode_hicolecmchar::ch#2 = mode_hicolecmchar::ch#3 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@4#0] -- register_copy 
    // [340] phi mode_hicolecmchar::col#2 = mode_hicolecmchar::col#3 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@4#1] -- register_copy 
    // [340] phi mode_hicolecmchar::cx#2 = 0 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    // [340] phi from mode_hicolecmchar::@4 to mode_hicolecmchar::@4 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@4]
    // [340] phi mode_hicolecmchar::ch#2 = mode_hicolecmchar::ch#1 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@4#0] -- register_copy 
    // [340] phi mode_hicolecmchar::col#2 = mode_hicolecmchar::col#1 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@4#1] -- register_copy 
    // [340] phi mode_hicolecmchar::cx#2 = mode_hicolecmchar::cx#1 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@4#2] -- register_copy 
    // mode_hicolecmchar::@4
  __b4:
    // cy&$f
    // [341] mode_hicolecmchar::$2 = mode_hicolecmchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // (cy&$f)*$10
    // [342] mode_hicolecmchar::$3 = mode_hicolecmchar::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // cx&$f
    // [343] mode_hicolecmchar::$4 = mode_hicolecmchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // v = (cy&$f)*$10|(cx&$f)
    // [344] mode_hicolecmchar::v#0 = mode_hicolecmchar::$3 | mode_hicolecmchar::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // *col++ = v
    // [345] *mode_hicolecmchar::col#2 = mode_hicolecmchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // *col++ = v;
    // [346] mode_hicolecmchar::col#1 = ++ mode_hicolecmchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // *ch++ = v
    // [347] *mode_hicolecmchar::ch#2 = mode_hicolecmchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = v;
    // [348] mode_hicolecmchar::ch#1 = ++ mode_hicolecmchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [349] mode_hicolecmchar::cx#1 = ++ mode_hicolecmchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [350] if(mode_hicolecmchar::cx#1!=$28) goto mode_hicolecmchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4
    // mode_hicolecmchar::@5
    // for(byte cy: 0..24 )
    // [351] mode_hicolecmchar::cy#1 = ++ mode_hicolecmchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [352] if(mode_hicolecmchar::cy#1!=$19) goto mode_hicolecmchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3
    // [353] phi from mode_hicolecmchar::@5 to mode_hicolecmchar::@6 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@6]
    // mode_hicolecmchar::@6
    // mode_ctrl()
    // [354] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_hicolecmchar::@6 to mode_ctrl [phi:mode_hicolecmchar::@6->mode_ctrl]
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR [phi:mode_hicolecmchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR
    jsr mode_ctrl
    // mode_hicolecmchar::@return
    // }
    // [355] return 
    rts
}
  // mode_hicolmcchar
// High Color Multicolor Character Mode (LINEAR/CHUNK/COLDIS/BMM/ECM = 0, MCM/HICOL = 1)
// Resolution: 160x200 (320x200)
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
//GfxData Pixel Shifter (1) if ColorData[3:3] = 0:
// - 0: 8bpp BG_COLORor0[7:0]
// - 1: 8bpp ColorData[7:4] "0" & Color[2:0]
//GfxData Pixel Shifter (2) if ColorData[3:3] = 1:
// - 00: 8bpp BG_COLORor0[7:0]
// - 01: 8bpp BG_COLORor1[7:0]
// - 10: 8bpp BG_COLORor2[7:0]
// - 11: 8bpp ColorData[7:4] "0" & Color[2:0]
mode_hicolmcchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label __3 = $e
    // Char Colors and screen chars
    .label col = 8
    .label ch = 4
    .label cy = 7
    // *DTV_GRAPHICS_VIC_BANK = (byte)((dword)CHARSET/$10000)
    // [356] *DTV_GRAPHICS_VIC_BANK = 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // *DTV_COLOR_BANK_LO = <((word)(COLORS/$400))
    // [357] *DTV_COLOR_BANK_LO = <(word)mode_hicolmcchar::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >((word)(COLORS/$400))
    // [358] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // *DTV_CONTROL = DTV_HIGHCOLOR
    // [359] *DTV_CONTROL = DTV_HIGHCOLOR -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
    // CIA2->PORT_A_DDR = %00000011
    // [360] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)CHARSET/$4000)
    // [361] *((byte*)CIA2) = 3^(byte)(word)mode_hicolmcchar::CHARSET/$4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2
    // *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
    // [362] *VIC_CONTROL = VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_CSEL|VIC_MCM
    // [363] *VIC_CONTROL2 = VIC_CSEL|VIC_MCM -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL|VIC_MCM
    sta VIC_CONTROL2
    // *VIC_MEMORY =  (byte)((((word)SCREEN&$3fff)/$40)|(((word)CHARSET&$3fff)/$400))
    // [364] *VIC_MEMORY = (byte)(word)mode_hicolmcchar::CHARSET&$3fff/$400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [365] phi from mode_hicolmcchar to mode_hicolmcchar::@1 [phi:mode_hicolmcchar->mode_hicolmcchar::@1]
    // [365] phi mode_hicolmcchar::i#2 = 0 [phi:mode_hicolmcchar->mode_hicolmcchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
    // [365] phi from mode_hicolmcchar::@1 to mode_hicolmcchar::@1 [phi:mode_hicolmcchar::@1->mode_hicolmcchar::@1]
    // [365] phi mode_hicolmcchar::i#2 = mode_hicolmcchar::i#1 [phi:mode_hicolmcchar::@1->mode_hicolmcchar::@1#0] -- register_copy 
    // mode_hicolmcchar::@1
  __b1:
    // DTV_PALETTE[i] = i
    // [366] DTV_PALETTE[mode_hicolmcchar::i#2] = mode_hicolmcchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [367] mode_hicolmcchar::i#1 = ++ mode_hicolmcchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [368] if(mode_hicolmcchar::i#1!=$10) goto mode_hicolmcchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // mode_hicolmcchar::@2
    // *BORDER_COLOR = 0
    // [369] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // *BG_COLOR = $50
    // [370] *BG_COLOR = $50 -- _deref_pbuc1=vbuc2 
    lda #$50
    sta BG_COLOR
    // *BG_COLOR1 = $54
    // [371] *BG_COLOR1 = $54 -- _deref_pbuc1=vbuc2 
    lda #$54
    sta BG_COLOR1
    // *BG_COLOR2 = $58
    // [372] *BG_COLOR2 = $58 -- _deref_pbuc1=vbuc2 
    lda #$58
    sta BG_COLOR2
    // [373] phi from mode_hicolmcchar::@2 to mode_hicolmcchar::@3 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3]
    // [373] phi mode_hicolmcchar::ch#3 = mode_hicolmcchar::SCREEN [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z ch
    lda #>SCREEN
    sta.z ch+1
    // [373] phi mode_hicolmcchar::col#3 = mode_hicolmcchar::COLORS [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [373] phi mode_hicolmcchar::cy#4 = 0 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [373] phi from mode_hicolmcchar::@5 to mode_hicolmcchar::@3 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@3]
    // [373] phi mode_hicolmcchar::ch#3 = mode_hicolmcchar::ch#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@3#0] -- register_copy 
    // [373] phi mode_hicolmcchar::col#3 = mode_hicolmcchar::col#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@3#1] -- register_copy 
    // [373] phi mode_hicolmcchar::cy#4 = mode_hicolmcchar::cy#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@3#2] -- register_copy 
    // mode_hicolmcchar::@3
  __b3:
    // [374] phi from mode_hicolmcchar::@3 to mode_hicolmcchar::@4 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@4]
    // [374] phi mode_hicolmcchar::ch#2 = mode_hicolmcchar::ch#3 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@4#0] -- register_copy 
    // [374] phi mode_hicolmcchar::col#2 = mode_hicolmcchar::col#3 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@4#1] -- register_copy 
    // [374] phi mode_hicolmcchar::cx#2 = 0 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@4#2] -- vbuxx=vbuc1 
    ldx #0
    // [374] phi from mode_hicolmcchar::@4 to mode_hicolmcchar::@4 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@4]
    // [374] phi mode_hicolmcchar::ch#2 = mode_hicolmcchar::ch#1 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@4#0] -- register_copy 
    // [374] phi mode_hicolmcchar::col#2 = mode_hicolmcchar::col#1 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@4#1] -- register_copy 
    // [374] phi mode_hicolmcchar::cx#2 = mode_hicolmcchar::cx#1 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@4#2] -- register_copy 
    // mode_hicolmcchar::@4
  __b4:
    // cy&$f
    // [375] mode_hicolmcchar::$2 = mode_hicolmcchar::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // (cy&$f)*$10
    // [376] mode_hicolmcchar::$3 = mode_hicolmcchar::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // cx&$f
    // [377] mode_hicolmcchar::$4 = mode_hicolmcchar::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // v = (cy&$f)*$10|(cx&$f)
    // [378] mode_hicolmcchar::v#0 = mode_hicolmcchar::$3 | mode_hicolmcchar::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // *col++ = v
    // [379] *mode_hicolmcchar::col#2 = mode_hicolmcchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // *col++ = v;
    // [380] mode_hicolmcchar::col#1 = ++ mode_hicolmcchar::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // *ch++ = v
    // [381] *mode_hicolmcchar::ch#2 = mode_hicolmcchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = v;
    // [382] mode_hicolmcchar::ch#1 = ++ mode_hicolmcchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [383] mode_hicolmcchar::cx#1 = ++ mode_hicolmcchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [384] if(mode_hicolmcchar::cx#1!=$28) goto mode_hicolmcchar::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4
    // mode_hicolmcchar::@5
    // for(byte cy: 0..24 )
    // [385] mode_hicolmcchar::cy#1 = ++ mode_hicolmcchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [386] if(mode_hicolmcchar::cy#1!=$19) goto mode_hicolmcchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3
    // [387] phi from mode_hicolmcchar::@5 to mode_hicolmcchar::@6 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@6]
    // mode_hicolmcchar::@6
    // mode_ctrl()
    // [388] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_hicolmcchar::@6 to mode_ctrl [phi:mode_hicolmcchar::@6->mode_ctrl]
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR [phi:mode_hicolmcchar::@6->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR
    jsr mode_ctrl
    // mode_hicolmcchar::@return
    // }
    // [389] return 
    rts
}
  // mode_sixsfred2
// Sixs Fred Mode 2 - 8bpp Packed Bitmap - Generated from the two DTV linear graphics plane counters
// Two Plane MultiColor Bitmap - 8bpp Packed Bitmap (CHUNK/COLDIS/HICOL = 0, ECM/BMM/MCM/LINEAR = 1)
// Resolution: 160x200
// Linear Adressing
// PlaneA Pixel Shifter (2), PlaneB Pixel Shifter (2):
// - 8bpp color (PlaneB[1:0],ColorData[5:4],PlaneA[1:0],ColorData[1:0])
mode_sixsfred2: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label __3 = $e
    // Colors for high 4 bits of 8bpp
    .label col = 8
    .label cy = 6
    // Graphics for Plane A () - horizontal stripes every 2 pixels
    .label gfxa = 4
    .label ay = 7
    // Graphics for Plane B - vertical stripes every 2 pixels
    .label gfxb = $11
    .label by = $a
    // *DTV_CONTROL = DTV_LINEAR
    // [390] *DTV_CONTROL = DTV_LINEAR -- _deref_pbuc1=vbuc2 
    lda #DTV_LINEAR
    sta DTV_CONTROL
    // *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    // [391] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_MCM|VIC_CSEL
    // [392] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
    // *DTV_PLANEA_START_LO = <PLANEA
    // [393] *DTV_PLANEA_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #0
    sta DTV_PLANEA_START_LO
    // *DTV_PLANEA_START_MI = >PLANEA
    // [394] *DTV_PLANEA_START_MI = >mode_sixsfred2::PLANEA -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
    // *DTV_PLANEA_START_HI = 0
    // [395] *DTV_PLANEA_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // *DTV_PLANEA_STEP = 1
    // [396] *DTV_PLANEA_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
    // *DTV_PLANEA_MODULO_LO = 0
    // [397] *DTV_PLANEA_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
    // *DTV_PLANEA_MODULO_HI = 0
    // [398] *DTV_PLANEA_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEA_MODULO_HI
    // *DTV_PLANEB_START_LO = <PLANEB
    // [399] *DTV_PLANEB_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    sta DTV_PLANEB_START_LO
    // *DTV_PLANEB_START_MI = >PLANEB
    // [400] *DTV_PLANEB_START_MI = >mode_sixsfred2::PLANEB -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
    // *DTV_PLANEB_START_HI = 0
    // [401] *DTV_PLANEB_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
    // *DTV_PLANEB_STEP = 1
    // [402] *DTV_PLANEB_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
    // *DTV_PLANEB_MODULO_LO = 0
    // [403] *DTV_PLANEB_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
    // *DTV_PLANEB_MODULO_HI = 0
    // [404] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
    // *DTV_COLOR_BANK_LO = <(COLORS/$400)
    // [405] *DTV_COLOR_BANK_LO = <mode_sixsfred2::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >(COLORS/$400)
    // [406] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [407] phi from mode_sixsfred2 to mode_sixsfred2::@1 [phi:mode_sixsfred2->mode_sixsfred2::@1]
    // [407] phi mode_sixsfred2::i#2 = 0 [phi:mode_sixsfred2->mode_sixsfred2::@1#0] -- vbuxx=vbuc1 
    tax
  // DTV Palette - Grey Tones
    // [407] phi from mode_sixsfred2::@1 to mode_sixsfred2::@1 [phi:mode_sixsfred2::@1->mode_sixsfred2::@1]
    // [407] phi mode_sixsfred2::i#2 = mode_sixsfred2::i#1 [phi:mode_sixsfred2::@1->mode_sixsfred2::@1#0] -- register_copy 
    // mode_sixsfred2::@1
  __b1:
    // DTV_PALETTE[i] = i
    // [408] DTV_PALETTE[mode_sixsfred2::i#2] = mode_sixsfred2::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [409] mode_sixsfred2::i#1 = ++ mode_sixsfred2::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [410] if(mode_sixsfred2::i#1!=$10) goto mode_sixsfred2::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // mode_sixsfred2::@2
    // *BORDER_COLOR = $00
    // [411] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // [412] phi from mode_sixsfred2::@2 to mode_sixsfred2::@3 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3]
    // [412] phi mode_sixsfred2::col#3 = mode_sixsfred2::COLORS [phi:mode_sixsfred2::@2->mode_sixsfred2::@3#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [412] phi mode_sixsfred2::cy#4 = 0 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [412] phi from mode_sixsfred2::@5 to mode_sixsfred2::@3 [phi:mode_sixsfred2::@5->mode_sixsfred2::@3]
    // [412] phi mode_sixsfred2::col#3 = mode_sixsfred2::col#1 [phi:mode_sixsfred2::@5->mode_sixsfred2::@3#0] -- register_copy 
    // [412] phi mode_sixsfred2::cy#4 = mode_sixsfred2::cy#1 [phi:mode_sixsfred2::@5->mode_sixsfred2::@3#1] -- register_copy 
    // mode_sixsfred2::@3
  __b3:
    // [413] phi from mode_sixsfred2::@3 to mode_sixsfred2::@4 [phi:mode_sixsfred2::@3->mode_sixsfred2::@4]
    // [413] phi mode_sixsfred2::col#2 = mode_sixsfred2::col#3 [phi:mode_sixsfred2::@3->mode_sixsfred2::@4#0] -- register_copy 
    // [413] phi mode_sixsfred2::cx#2 = 0 [phi:mode_sixsfred2::@3->mode_sixsfred2::@4#1] -- vbuxx=vbuc1 
    ldx #0
    // [413] phi from mode_sixsfred2::@4 to mode_sixsfred2::@4 [phi:mode_sixsfred2::@4->mode_sixsfred2::@4]
    // [413] phi mode_sixsfred2::col#2 = mode_sixsfred2::col#1 [phi:mode_sixsfred2::@4->mode_sixsfred2::@4#0] -- register_copy 
    // [413] phi mode_sixsfred2::cx#2 = mode_sixsfred2::cx#1 [phi:mode_sixsfred2::@4->mode_sixsfred2::@4#1] -- register_copy 
    // mode_sixsfred2::@4
  __b4:
    // cx&3
    // [414] mode_sixsfred2::$2 = mode_sixsfred2::cx#2 & 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
    // (cx&3)*$10
    // [415] mode_sixsfred2::$3 = mode_sixsfred2::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // cy&3
    // [416] mode_sixsfred2::$4 = mode_sixsfred2::cy#4 & 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and.z cy
    // (cx&3)*$10|(cy&3)
    // [417] mode_sixsfred2::$5 = mode_sixsfred2::$3 | mode_sixsfred2::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // *col++ = (cx&3)*$10|(cy&3)
    // [418] *mode_sixsfred2::col#2 = mode_sixsfred2::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // *col++ = (cx&3)*$10|(cy&3);
    // [419] mode_sixsfred2::col#1 = ++ mode_sixsfred2::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // for(byte cx: 0..39)
    // [420] mode_sixsfred2::cx#1 = ++ mode_sixsfred2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [421] if(mode_sixsfred2::cx#1!=$28) goto mode_sixsfred2::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4
    // mode_sixsfred2::@5
    // for(byte cy: 0..24 )
    // [422] mode_sixsfred2::cy#1 = ++ mode_sixsfred2::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [423] if(mode_sixsfred2::cy#1!=$19) goto mode_sixsfred2::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3
    // [424] phi from mode_sixsfred2::@5 to mode_sixsfred2::@6 [phi:mode_sixsfred2::@5->mode_sixsfred2::@6]
    // [424] phi mode_sixsfred2::gfxa#3 = mode_sixsfred2::PLANEA [phi:mode_sixsfred2::@5->mode_sixsfred2::@6#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta.z gfxa
    lda #>PLANEA
    sta.z gfxa+1
    // [424] phi mode_sixsfred2::ay#4 = 0 [phi:mode_sixsfred2::@5->mode_sixsfred2::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    // [424] phi from mode_sixsfred2::@8 to mode_sixsfred2::@6 [phi:mode_sixsfred2::@8->mode_sixsfred2::@6]
    // [424] phi mode_sixsfred2::gfxa#3 = mode_sixsfred2::gfxa#1 [phi:mode_sixsfred2::@8->mode_sixsfred2::@6#0] -- register_copy 
    // [424] phi mode_sixsfred2::ay#4 = mode_sixsfred2::ay#1 [phi:mode_sixsfred2::@8->mode_sixsfred2::@6#1] -- register_copy 
    // mode_sixsfred2::@6
  __b6:
    // [425] phi from mode_sixsfred2::@6 to mode_sixsfred2::@7 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7]
    // [425] phi mode_sixsfred2::ax#2 = 0 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7#0] -- vbuxx=vbuc1 
    ldx #0
    // [425] phi mode_sixsfred2::gfxa#2 = mode_sixsfred2::gfxa#3 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7#1] -- register_copy 
    // [425] phi from mode_sixsfred2::@7 to mode_sixsfred2::@7 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7]
    // [425] phi mode_sixsfred2::ax#2 = mode_sixsfred2::ax#1 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7#0] -- register_copy 
    // [425] phi mode_sixsfred2::gfxa#2 = mode_sixsfred2::gfxa#1 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7#1] -- register_copy 
    // mode_sixsfred2::@7
  __b7:
    // ay/2
    // [426] mode_sixsfred2::$8 = mode_sixsfred2::ay#4 >> 1 -- vbuaa=vbuz1_ror_1 
    lda.z ay
    lsr
    // row = (ay/2) & 3
    // [427] mode_sixsfred2::row#0 = mode_sixsfred2::$8 & 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
    // *gfxa++ = row_bitmask[row]
    // [428] *mode_sixsfred2::gfxa#2 = mode_sixsfred2::row_bitmask[mode_sixsfred2::row#0] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // *gfxa++ = row_bitmask[row];
    // [429] mode_sixsfred2::gfxa#1 = ++ mode_sixsfred2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // for (byte ax : 0..39)
    // [430] mode_sixsfred2::ax#1 = ++ mode_sixsfred2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [431] if(mode_sixsfred2::ax#1!=$28) goto mode_sixsfred2::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b7
    // mode_sixsfred2::@8
    // for(byte ay : 0..199)
    // [432] mode_sixsfred2::ay#1 = ++ mode_sixsfred2::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [433] if(mode_sixsfred2::ay#1!=$c8) goto mode_sixsfred2::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b6
    // [434] phi from mode_sixsfred2::@8 to mode_sixsfred2::@9 [phi:mode_sixsfred2::@8->mode_sixsfred2::@9]
    // [434] phi mode_sixsfred2::by#4 = 0 [phi:mode_sixsfred2::@8->mode_sixsfred2::@9#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [434] phi mode_sixsfred2::gfxb#3 = mode_sixsfred2::PLANEB [phi:mode_sixsfred2::@8->mode_sixsfred2::@9#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta.z gfxb
    lda #>PLANEB
    sta.z gfxb+1
    // [434] phi from mode_sixsfred2::@11 to mode_sixsfred2::@9 [phi:mode_sixsfred2::@11->mode_sixsfred2::@9]
    // [434] phi mode_sixsfred2::by#4 = mode_sixsfred2::by#1 [phi:mode_sixsfred2::@11->mode_sixsfred2::@9#0] -- register_copy 
    // [434] phi mode_sixsfred2::gfxb#3 = mode_sixsfred2::gfxb#1 [phi:mode_sixsfred2::@11->mode_sixsfred2::@9#1] -- register_copy 
    // mode_sixsfred2::@9
  __b9:
    // [435] phi from mode_sixsfred2::@9 to mode_sixsfred2::@10 [phi:mode_sixsfred2::@9->mode_sixsfred2::@10]
    // [435] phi mode_sixsfred2::bx#2 = 0 [phi:mode_sixsfred2::@9->mode_sixsfred2::@10#0] -- vbuxx=vbuc1 
    ldx #0
    // [435] phi mode_sixsfred2::gfxb#2 = mode_sixsfred2::gfxb#3 [phi:mode_sixsfred2::@9->mode_sixsfred2::@10#1] -- register_copy 
    // [435] phi from mode_sixsfred2::@10 to mode_sixsfred2::@10 [phi:mode_sixsfred2::@10->mode_sixsfred2::@10]
    // [435] phi mode_sixsfred2::bx#2 = mode_sixsfred2::bx#1 [phi:mode_sixsfred2::@10->mode_sixsfred2::@10#0] -- register_copy 
    // [435] phi mode_sixsfred2::gfxb#2 = mode_sixsfred2::gfxb#1 [phi:mode_sixsfred2::@10->mode_sixsfred2::@10#1] -- register_copy 
    // mode_sixsfred2::@10
  __b10:
    // *gfxb++ = %00011011
    // [436] *mode_sixsfred2::gfxb#2 = $1b -- _deref_pbuz1=vbuc1 
    lda #$1b
    ldy #0
    sta (gfxb),y
    // *gfxb++ = %00011011;
    // [437] mode_sixsfred2::gfxb#1 = ++ mode_sixsfred2::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for ( byte bx : 0..39)
    // [438] mode_sixsfred2::bx#1 = ++ mode_sixsfred2::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [439] if(mode_sixsfred2::bx#1!=$28) goto mode_sixsfred2::@10 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b10
    // mode_sixsfred2::@11
    // for(byte by : 0..199)
    // [440] mode_sixsfred2::by#1 = ++ mode_sixsfred2::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [441] if(mode_sixsfred2::by#1!=$c8) goto mode_sixsfred2::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b9
    // [442] phi from mode_sixsfred2::@11 to mode_sixsfred2::@12 [phi:mode_sixsfred2::@11->mode_sixsfred2::@12]
    // mode_sixsfred2::@12
    // mode_ctrl()
    // [443] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_sixsfred2::@12 to mode_ctrl [phi:mode_sixsfred2::@12->mode_ctrl]
    // [666] phi dtv_control#146 = DTV_LINEAR [phi:mode_sixsfred2::@12->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_LINEAR
    jsr mode_ctrl
    // mode_sixsfred2::@return
    // }
    // [444] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
  // mode_twoplanebitmap
// Two Plane Bitmap - generated from the two DTV linear graphics plane counters
// Two Plane Bitmap Mode (CHUNK/COLDIS/MCM = 0, ECM/BMM/HICOL/LINEAR = 1)
// Resolution: 320x200
// Linear Adressing
// GfxData/PlaneA Pixel Shifter (1), CharData/PlaneB Pixel Shifter (1):
// - Plane A = 0 Plane B = 0: 8bpp BG_COLORor0[7:0]
// - Plane A = 0 Plane B = 1: 8bpp "0000" & ColorData[7:4]
// - Plane A = 1 Plane B = 0: 8bpp "0000" & ColorData[3:0]
// - Plane A = 1 Plane B = 1: 8bpp BG_COLORor1[7:0]
mode_twoplanebitmap: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label __3 = $f
    // Color for bits 11
    // Colors for bits 01 / 10
    .label col = $11
    .label cy = 6
    // Graphics for Plane A - horizontal stripes
    .label gfxa = $13
    .label ay = 7
    // Graphics for Plane B - vertical stripes
    .label gfxb = 8
    .label by = $a
    // *DTV_CONTROL = DTV_HIGHCOLOR | DTV_LINEAR
    // [445] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta DTV_CONTROL
    // *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    // [446] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_CSEL
    // [447] *VIC_CONTROL2 = VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // *DTV_PLANEA_START_LO = <PLANEA
    // [448] *DTV_PLANEA_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #0
    sta DTV_PLANEA_START_LO
    // *DTV_PLANEA_START_MI = >PLANEA
    // [449] *DTV_PLANEA_START_MI = >mode_twoplanebitmap::PLANEA -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
    // *DTV_PLANEA_START_HI = 0
    // [450] *DTV_PLANEA_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // *DTV_PLANEA_STEP = 1
    // [451] *DTV_PLANEA_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
    // *DTV_PLANEA_MODULO_LO = 0
    // [452] *DTV_PLANEA_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
    // *DTV_PLANEA_MODULO_HI = 0
    // [453] *DTV_PLANEA_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEA_MODULO_HI
    // *DTV_PLANEB_START_LO = <PLANEB
    // [454] *DTV_PLANEB_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    sta DTV_PLANEB_START_LO
    // *DTV_PLANEB_START_MI = >PLANEB
    // [455] *DTV_PLANEB_START_MI = >mode_twoplanebitmap::PLANEB -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
    // *DTV_PLANEB_START_HI = 0
    // [456] *DTV_PLANEB_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
    // *DTV_PLANEB_STEP = 1
    // [457] *DTV_PLANEB_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
    // *DTV_PLANEB_MODULO_LO = 0
    // [458] *DTV_PLANEB_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
    // *DTV_PLANEB_MODULO_HI = 0
    // [459] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
    // *DTV_COLOR_BANK_LO = <(COLORS/$400)
    // [460] *DTV_COLOR_BANK_LO = <mode_twoplanebitmap::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >(COLORS/$400)
    // [461] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [462] phi from mode_twoplanebitmap to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1]
    // [462] phi mode_twoplanebitmap::i#2 = 0 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1#0] -- vbuxx=vbuc1 
    tax
  // DTV Palette - Grey Tones
    // [462] phi from mode_twoplanebitmap::@1 to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1]
    // [462] phi mode_twoplanebitmap::i#2 = mode_twoplanebitmap::i#1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1#0] -- register_copy 
    // mode_twoplanebitmap::@1
  __b1:
    // DTV_PALETTE[i] = i
    // [463] DTV_PALETTE[mode_twoplanebitmap::i#2] = mode_twoplanebitmap::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [464] mode_twoplanebitmap::i#1 = ++ mode_twoplanebitmap::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [465] if(mode_twoplanebitmap::i#1!=$10) goto mode_twoplanebitmap::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // mode_twoplanebitmap::@2
    // *BORDER_COLOR = $00
    // [466] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // *BG_COLOR = $70
    // [467] *BG_COLOR = $70 -- _deref_pbuc1=vbuc2 
    lda #$70
    sta BG_COLOR
    // *BG_COLOR1 = $d4
    // [468] *BG_COLOR1 = $d4 -- _deref_pbuc1=vbuc2 
    // Color for bits 00
    lda #$d4
    sta BG_COLOR1
    // [469] phi from mode_twoplanebitmap::@2 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3]
    // [469] phi mode_twoplanebitmap::col#3 = mode_twoplanebitmap::COLORS [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [469] phi mode_twoplanebitmap::cy#4 = 0 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [469] phi from mode_twoplanebitmap::@5 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3]
    // [469] phi mode_twoplanebitmap::col#3 = mode_twoplanebitmap::col#1 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3#0] -- register_copy 
    // [469] phi mode_twoplanebitmap::cy#4 = mode_twoplanebitmap::cy#1 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3#1] -- register_copy 
    // mode_twoplanebitmap::@3
  __b3:
    // [470] phi from mode_twoplanebitmap::@3 to mode_twoplanebitmap::@4 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@4]
    // [470] phi mode_twoplanebitmap::col#2 = mode_twoplanebitmap::col#3 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@4#0] -- register_copy 
    // [470] phi mode_twoplanebitmap::cx#2 = 0 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@4#1] -- vbuxx=vbuc1 
    ldx #0
    // [470] phi from mode_twoplanebitmap::@4 to mode_twoplanebitmap::@4 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@4]
    // [470] phi mode_twoplanebitmap::col#2 = mode_twoplanebitmap::col#1 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@4#0] -- register_copy 
    // [470] phi mode_twoplanebitmap::cx#2 = mode_twoplanebitmap::cx#1 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@4#1] -- register_copy 
    // mode_twoplanebitmap::@4
  __b4:
    // cy & $f
    // [471] mode_twoplanebitmap::$2 = mode_twoplanebitmap::cy#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // (cy & $f)*$10
    // [472] mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // cx &$f
    // [473] mode_twoplanebitmap::$4 = mode_twoplanebitmap::cx#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // (cy & $f)*$10 | (cx &$f)
    // [474] mode_twoplanebitmap::$5 = mode_twoplanebitmap::$3 | mode_twoplanebitmap::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // *col++ = (cy & $f)*$10 | (cx &$f)
    // [475] *mode_twoplanebitmap::col#2 = mode_twoplanebitmap::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // *col++ = (cy & $f)*$10 | (cx &$f);
    // [476] mode_twoplanebitmap::col#1 = ++ mode_twoplanebitmap::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // for(byte cx: 0..39)
    // [477] mode_twoplanebitmap::cx#1 = ++ mode_twoplanebitmap::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [478] if(mode_twoplanebitmap::cx#1!=$28) goto mode_twoplanebitmap::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4
    // mode_twoplanebitmap::@5
    // for(byte cy: 0..24 )
    // [479] mode_twoplanebitmap::cy#1 = ++ mode_twoplanebitmap::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [480] if(mode_twoplanebitmap::cy#1!=$19) goto mode_twoplanebitmap::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3
    // [481] phi from mode_twoplanebitmap::@5 to mode_twoplanebitmap::@6 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@6]
    // [481] phi mode_twoplanebitmap::gfxa#7 = mode_twoplanebitmap::PLANEA [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@6#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta.z gfxa
    lda #>PLANEA
    sta.z gfxa+1
    // [481] phi mode_twoplanebitmap::ay#5 = 0 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    // [481] phi from mode_twoplanebitmap::@11 to mode_twoplanebitmap::@6 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@6]
    // [481] phi mode_twoplanebitmap::gfxa#7 = mode_twoplanebitmap::gfxa#6 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@6#0] -- register_copy 
    // [481] phi mode_twoplanebitmap::ay#5 = mode_twoplanebitmap::ay#1 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@6#1] -- register_copy 
    // mode_twoplanebitmap::@6
  __b6:
    // [482] phi from mode_twoplanebitmap::@6 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7]
    // [482] phi mode_twoplanebitmap::ax#2 = 0 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#0] -- vbuxx=vbuc1 
    ldx #0
    // [482] phi mode_twoplanebitmap::gfxa#3 = mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#1] -- register_copy 
    // [482] phi from mode_twoplanebitmap::@9 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@7]
    // [482] phi mode_twoplanebitmap::ax#2 = mode_twoplanebitmap::ax#1 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@7#0] -- register_copy 
    // [482] phi mode_twoplanebitmap::gfxa#3 = mode_twoplanebitmap::gfxa#6 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@7#1] -- register_copy 
    // mode_twoplanebitmap::@7
  __b7:
    // ay&4
    // [483] mode_twoplanebitmap::$8 = mode_twoplanebitmap::ay#5 & 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and.z ay
    // if((ay&4)==0)
    // [484] if(mode_twoplanebitmap::$8==0) goto mode_twoplanebitmap::@8 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b8
    // mode_twoplanebitmap::@10
    // *gfxa++ = %11111111
    // [485] *mode_twoplanebitmap::gfxa#3 = $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
    // *gfxa++ = %11111111;
    // [486] mode_twoplanebitmap::gfxa#2 = ++ mode_twoplanebitmap::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [487] phi from mode_twoplanebitmap::@10 mode_twoplanebitmap::@8 to mode_twoplanebitmap::@9 [phi:mode_twoplanebitmap::@10/mode_twoplanebitmap::@8->mode_twoplanebitmap::@9]
    // [487] phi mode_twoplanebitmap::gfxa#6 = mode_twoplanebitmap::gfxa#2 [phi:mode_twoplanebitmap::@10/mode_twoplanebitmap::@8->mode_twoplanebitmap::@9#0] -- register_copy 
    // mode_twoplanebitmap::@9
  __b9:
    // for (byte ax : 0..39)
    // [488] mode_twoplanebitmap::ax#1 = ++ mode_twoplanebitmap::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [489] if(mode_twoplanebitmap::ax#1!=$28) goto mode_twoplanebitmap::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b7
    // mode_twoplanebitmap::@11
    // for(byte ay : 0..199)
    // [490] mode_twoplanebitmap::ay#1 = ++ mode_twoplanebitmap::ay#5 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [491] if(mode_twoplanebitmap::ay#1!=$c8) goto mode_twoplanebitmap::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b6
    // [492] phi from mode_twoplanebitmap::@11 to mode_twoplanebitmap::@12 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@12]
    // [492] phi mode_twoplanebitmap::by#4 = 0 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@12#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [492] phi mode_twoplanebitmap::gfxb#3 = mode_twoplanebitmap::PLANEB [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@12#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta.z gfxb
    lda #>PLANEB
    sta.z gfxb+1
    // [492] phi from mode_twoplanebitmap::@14 to mode_twoplanebitmap::@12 [phi:mode_twoplanebitmap::@14->mode_twoplanebitmap::@12]
    // [492] phi mode_twoplanebitmap::by#4 = mode_twoplanebitmap::by#1 [phi:mode_twoplanebitmap::@14->mode_twoplanebitmap::@12#0] -- register_copy 
    // [492] phi mode_twoplanebitmap::gfxb#3 = mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@14->mode_twoplanebitmap::@12#1] -- register_copy 
    // mode_twoplanebitmap::@12
  __b12:
    // [493] phi from mode_twoplanebitmap::@12 to mode_twoplanebitmap::@13 [phi:mode_twoplanebitmap::@12->mode_twoplanebitmap::@13]
    // [493] phi mode_twoplanebitmap::bx#2 = 0 [phi:mode_twoplanebitmap::@12->mode_twoplanebitmap::@13#0] -- vbuxx=vbuc1 
    ldx #0
    // [493] phi mode_twoplanebitmap::gfxb#2 = mode_twoplanebitmap::gfxb#3 [phi:mode_twoplanebitmap::@12->mode_twoplanebitmap::@13#1] -- register_copy 
    // [493] phi from mode_twoplanebitmap::@13 to mode_twoplanebitmap::@13 [phi:mode_twoplanebitmap::@13->mode_twoplanebitmap::@13]
    // [493] phi mode_twoplanebitmap::bx#2 = mode_twoplanebitmap::bx#1 [phi:mode_twoplanebitmap::@13->mode_twoplanebitmap::@13#0] -- register_copy 
    // [493] phi mode_twoplanebitmap::gfxb#2 = mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@13->mode_twoplanebitmap::@13#1] -- register_copy 
    // mode_twoplanebitmap::@13
  __b13:
    // *gfxb++ = %00001111
    // [494] *mode_twoplanebitmap::gfxb#2 = $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
    // *gfxb++ = %00001111;
    // [495] mode_twoplanebitmap::gfxb#1 = ++ mode_twoplanebitmap::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for ( byte bx : 0..39)
    // [496] mode_twoplanebitmap::bx#1 = ++ mode_twoplanebitmap::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [497] if(mode_twoplanebitmap::bx#1!=$28) goto mode_twoplanebitmap::@13 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b13
    // mode_twoplanebitmap::@14
    // for(byte by : 0..199)
    // [498] mode_twoplanebitmap::by#1 = ++ mode_twoplanebitmap::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [499] if(mode_twoplanebitmap::by#1!=$c8) goto mode_twoplanebitmap::@12 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b12
    // [500] phi from mode_twoplanebitmap::@14 to mode_twoplanebitmap::@15 [phi:mode_twoplanebitmap::@14->mode_twoplanebitmap::@15]
    // mode_twoplanebitmap::@15
    // mode_ctrl()
    // [501] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_twoplanebitmap::@15 to mode_ctrl [phi:mode_twoplanebitmap::@15->mode_ctrl]
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR|DTV_LINEAR [phi:mode_twoplanebitmap::@15->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR|DTV_LINEAR
    jsr mode_ctrl
    // mode_twoplanebitmap::@return
    // }
    // [502] return 
    rts
    // mode_twoplanebitmap::@8
  __b8:
    // *gfxa++ = %00000000
    // [503] *mode_twoplanebitmap::gfxa#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (gfxa),y
    // *gfxa++ = %00000000;
    // [504] mode_twoplanebitmap::gfxa#1 = ++ mode_twoplanebitmap::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    jmp __b9
}
  // mode_sixsfred
// Sixs Fred Mode - 8bpp Packed Bitmap - Generated from the two DTV linear graphics plane counters
// Two Plane MultiColor Bitmap - 8bpp Packed Bitmap (CHUNK/COLDIS = 0, ECM/BMM/MCM/HICOL/LINEAR = 1)
// Resolution: 160x200
// Linear Adressing
// GfxData/PlaneA Pixel Shifter (2), CharData/PlaneB Pixel Shifter (2):
// - 8bpp color (ColorData[3:0],CharData/PlaneB[1:0], GfxData/PlaneA[1:0])
mode_sixsfred: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    // Colors for high 4 bits of 8bpp
    .label col = $13
    .label cy = 6
    // Graphics for Plane A () - horizontal stripes every 2 pixels
    .label gfxa = 8
    .label ay = 7
    // Graphics for Plane B - vertical stripes every 2 pixels
    .label gfxb = $11
    .label by = $a
    // *DTV_CONTROL = DTV_HIGHCOLOR | DTV_LINEAR
    // [505] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta DTV_CONTROL
    // *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    // [506] *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_MCM|VIC_CSEL
    // [507] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
    // *DTV_PLANEA_START_LO = <PLANEA
    // [508] *DTV_PLANEA_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #0
    sta DTV_PLANEA_START_LO
    // *DTV_PLANEA_START_MI = >PLANEA
    // [509] *DTV_PLANEA_START_MI = >mode_sixsfred::PLANEA -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
    // *DTV_PLANEA_START_HI = 0
    // [510] *DTV_PLANEA_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // *DTV_PLANEA_STEP = 1
    // [511] *DTV_PLANEA_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
    // *DTV_PLANEA_MODULO_LO = 0
    // [512] *DTV_PLANEA_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
    // *DTV_PLANEA_MODULO_HI = 0
    // [513] *DTV_PLANEA_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEA_MODULO_HI
    // *DTV_PLANEB_START_LO = <PLANEB
    // [514] *DTV_PLANEB_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    sta DTV_PLANEB_START_LO
    // *DTV_PLANEB_START_MI = >PLANEB
    // [515] *DTV_PLANEB_START_MI = >mode_sixsfred::PLANEB -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
    // *DTV_PLANEB_START_HI = 0
    // [516] *DTV_PLANEB_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
    // *DTV_PLANEB_STEP = 1
    // [517] *DTV_PLANEB_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
    // *DTV_PLANEB_MODULO_LO = 0
    // [518] *DTV_PLANEB_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
    // *DTV_PLANEB_MODULO_HI = 0
    // [519] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
    // *DTV_COLOR_BANK_LO = <(COLORS/$400)
    // [520] *DTV_COLOR_BANK_LO = <mode_sixsfred::COLORS/$400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >(COLORS/$400)
    // [521] *DTV_COLOR_BANK_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [522] phi from mode_sixsfred to mode_sixsfred::@1 [phi:mode_sixsfred->mode_sixsfred::@1]
    // [522] phi mode_sixsfred::i#2 = 0 [phi:mode_sixsfred->mode_sixsfred::@1#0] -- vbuxx=vbuc1 
    tax
  // DTV Palette - Grey Tones
    // [522] phi from mode_sixsfred::@1 to mode_sixsfred::@1 [phi:mode_sixsfred::@1->mode_sixsfred::@1]
    // [522] phi mode_sixsfred::i#2 = mode_sixsfred::i#1 [phi:mode_sixsfred::@1->mode_sixsfred::@1#0] -- register_copy 
    // mode_sixsfred::@1
  __b1:
    // DTV_PALETTE[i] = i
    // [523] DTV_PALETTE[mode_sixsfred::i#2] = mode_sixsfred::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [524] mode_sixsfred::i#1 = ++ mode_sixsfred::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [525] if(mode_sixsfred::i#1!=$10) goto mode_sixsfred::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // mode_sixsfred::@2
    // *BORDER_COLOR = $00
    // [526] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDER_COLOR
    // [527] phi from mode_sixsfred::@2 to mode_sixsfred::@3 [phi:mode_sixsfred::@2->mode_sixsfred::@3]
    // [527] phi mode_sixsfred::col#3 = mode_sixsfred::COLORS [phi:mode_sixsfred::@2->mode_sixsfred::@3#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    // [527] phi mode_sixsfred::cy#4 = 0 [phi:mode_sixsfred::@2->mode_sixsfred::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [527] phi from mode_sixsfred::@5 to mode_sixsfred::@3 [phi:mode_sixsfred::@5->mode_sixsfred::@3]
    // [527] phi mode_sixsfred::col#3 = mode_sixsfred::col#1 [phi:mode_sixsfred::@5->mode_sixsfred::@3#0] -- register_copy 
    // [527] phi mode_sixsfred::cy#4 = mode_sixsfred::cy#1 [phi:mode_sixsfred::@5->mode_sixsfred::@3#1] -- register_copy 
    // mode_sixsfred::@3
  __b3:
    // [528] phi from mode_sixsfred::@3 to mode_sixsfred::@4 [phi:mode_sixsfred::@3->mode_sixsfred::@4]
    // [528] phi mode_sixsfred::col#2 = mode_sixsfred::col#3 [phi:mode_sixsfred::@3->mode_sixsfred::@4#0] -- register_copy 
    // [528] phi mode_sixsfred::cx#2 = 0 [phi:mode_sixsfred::@3->mode_sixsfred::@4#1] -- vbuxx=vbuc1 
    ldx #0
    // [528] phi from mode_sixsfred::@4 to mode_sixsfred::@4 [phi:mode_sixsfred::@4->mode_sixsfred::@4]
    // [528] phi mode_sixsfred::col#2 = mode_sixsfred::col#1 [phi:mode_sixsfred::@4->mode_sixsfred::@4#0] -- register_copy 
    // [528] phi mode_sixsfred::cx#2 = mode_sixsfred::cx#1 [phi:mode_sixsfred::@4->mode_sixsfred::@4#1] -- register_copy 
    // mode_sixsfred::@4
  __b4:
    // cx+cy
    // [529] mode_sixsfred::$2 = mode_sixsfred::cx#2 + mode_sixsfred::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // (cx+cy) & $f
    // [530] mode_sixsfred::$3 = mode_sixsfred::$2 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // *col++ = (cx+cy) & $f
    // [531] *mode_sixsfred::col#2 = mode_sixsfred::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // *col++ = (cx+cy) & $f;
    // [532] mode_sixsfred::col#1 = ++ mode_sixsfred::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // for(byte cx: 0..39)
    // [533] mode_sixsfred::cx#1 = ++ mode_sixsfred::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [534] if(mode_sixsfred::cx#1!=$28) goto mode_sixsfred::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4
    // mode_sixsfred::@5
    // for(byte cy: 0..24 )
    // [535] mode_sixsfred::cy#1 = ++ mode_sixsfred::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [536] if(mode_sixsfred::cy#1!=$19) goto mode_sixsfred::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b3
    // [537] phi from mode_sixsfred::@5 to mode_sixsfred::@6 [phi:mode_sixsfred::@5->mode_sixsfred::@6]
    // [537] phi mode_sixsfred::gfxa#3 = mode_sixsfred::PLANEA [phi:mode_sixsfred::@5->mode_sixsfred::@6#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta.z gfxa
    lda #>PLANEA
    sta.z gfxa+1
    // [537] phi mode_sixsfred::ay#4 = 0 [phi:mode_sixsfred::@5->mode_sixsfred::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    // [537] phi from mode_sixsfred::@8 to mode_sixsfred::@6 [phi:mode_sixsfred::@8->mode_sixsfred::@6]
    // [537] phi mode_sixsfred::gfxa#3 = mode_sixsfred::gfxa#1 [phi:mode_sixsfred::@8->mode_sixsfred::@6#0] -- register_copy 
    // [537] phi mode_sixsfred::ay#4 = mode_sixsfred::ay#1 [phi:mode_sixsfred::@8->mode_sixsfred::@6#1] -- register_copy 
    // mode_sixsfred::@6
  __b6:
    // [538] phi from mode_sixsfred::@6 to mode_sixsfred::@7 [phi:mode_sixsfred::@6->mode_sixsfred::@7]
    // [538] phi mode_sixsfred::ax#2 = 0 [phi:mode_sixsfred::@6->mode_sixsfred::@7#0] -- vbuxx=vbuc1 
    ldx #0
    // [538] phi mode_sixsfred::gfxa#2 = mode_sixsfred::gfxa#3 [phi:mode_sixsfred::@6->mode_sixsfred::@7#1] -- register_copy 
    // [538] phi from mode_sixsfred::@7 to mode_sixsfred::@7 [phi:mode_sixsfred::@7->mode_sixsfred::@7]
    // [538] phi mode_sixsfred::ax#2 = mode_sixsfred::ax#1 [phi:mode_sixsfred::@7->mode_sixsfred::@7#0] -- register_copy 
    // [538] phi mode_sixsfred::gfxa#2 = mode_sixsfred::gfxa#1 [phi:mode_sixsfred::@7->mode_sixsfred::@7#1] -- register_copy 
    // mode_sixsfred::@7
  __b7:
    // ay/2
    // [539] mode_sixsfred::$6 = mode_sixsfred::ay#4 >> 1 -- vbuaa=vbuz1_ror_1 
    lda.z ay
    lsr
    // row = (ay/2) & 3
    // [540] mode_sixsfred::row#0 = mode_sixsfred::$6 & 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
    // *gfxa++ = row_bitmask[row]
    // [541] *mode_sixsfred::gfxa#2 = mode_sixsfred::row_bitmask[mode_sixsfred::row#0] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // *gfxa++ = row_bitmask[row];
    // [542] mode_sixsfred::gfxa#1 = ++ mode_sixsfred::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // for (byte ax : 0..39)
    // [543] mode_sixsfred::ax#1 = ++ mode_sixsfred::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [544] if(mode_sixsfred::ax#1!=$28) goto mode_sixsfred::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b7
    // mode_sixsfred::@8
    // for(byte ay : 0..199)
    // [545] mode_sixsfred::ay#1 = ++ mode_sixsfred::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [546] if(mode_sixsfred::ay#1!=$c8) goto mode_sixsfred::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b6
    // [547] phi from mode_sixsfred::@8 to mode_sixsfred::@9 [phi:mode_sixsfred::@8->mode_sixsfred::@9]
    // [547] phi mode_sixsfred::by#4 = 0 [phi:mode_sixsfred::@8->mode_sixsfred::@9#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [547] phi mode_sixsfred::gfxb#3 = mode_sixsfred::PLANEB [phi:mode_sixsfred::@8->mode_sixsfred::@9#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta.z gfxb
    lda #>PLANEB
    sta.z gfxb+1
    // [547] phi from mode_sixsfred::@11 to mode_sixsfred::@9 [phi:mode_sixsfred::@11->mode_sixsfred::@9]
    // [547] phi mode_sixsfred::by#4 = mode_sixsfred::by#1 [phi:mode_sixsfred::@11->mode_sixsfred::@9#0] -- register_copy 
    // [547] phi mode_sixsfred::gfxb#3 = mode_sixsfred::gfxb#1 [phi:mode_sixsfred::@11->mode_sixsfred::@9#1] -- register_copy 
    // mode_sixsfred::@9
  __b9:
    // [548] phi from mode_sixsfred::@9 to mode_sixsfred::@10 [phi:mode_sixsfred::@9->mode_sixsfred::@10]
    // [548] phi mode_sixsfred::bx#2 = 0 [phi:mode_sixsfred::@9->mode_sixsfred::@10#0] -- vbuxx=vbuc1 
    ldx #0
    // [548] phi mode_sixsfred::gfxb#2 = mode_sixsfred::gfxb#3 [phi:mode_sixsfred::@9->mode_sixsfred::@10#1] -- register_copy 
    // [548] phi from mode_sixsfred::@10 to mode_sixsfred::@10 [phi:mode_sixsfred::@10->mode_sixsfred::@10]
    // [548] phi mode_sixsfred::bx#2 = mode_sixsfred::bx#1 [phi:mode_sixsfred::@10->mode_sixsfred::@10#0] -- register_copy 
    // [548] phi mode_sixsfred::gfxb#2 = mode_sixsfred::gfxb#1 [phi:mode_sixsfred::@10->mode_sixsfred::@10#1] -- register_copy 
    // mode_sixsfred::@10
  __b10:
    // *gfxb++ = %00011011
    // [549] *mode_sixsfred::gfxb#2 = $1b -- _deref_pbuz1=vbuc1 
    lda #$1b
    ldy #0
    sta (gfxb),y
    // *gfxb++ = %00011011;
    // [550] mode_sixsfred::gfxb#1 = ++ mode_sixsfred::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for ( byte bx : 0..39)
    // [551] mode_sixsfred::bx#1 = ++ mode_sixsfred::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [552] if(mode_sixsfred::bx#1!=$28) goto mode_sixsfred::@10 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b10
    // mode_sixsfred::@11
    // for(byte by : 0..199)
    // [553] mode_sixsfred::by#1 = ++ mode_sixsfred::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [554] if(mode_sixsfred::by#1!=$c8) goto mode_sixsfred::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b9
    // [555] phi from mode_sixsfred::@11 to mode_sixsfred::@12 [phi:mode_sixsfred::@11->mode_sixsfred::@12]
    // mode_sixsfred::@12
    // mode_ctrl()
    // [556] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_sixsfred::@12 to mode_ctrl [phi:mode_sixsfred::@12->mode_ctrl]
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR|DTV_LINEAR [phi:mode_sixsfred::@12->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR|DTV_LINEAR
    jsr mode_ctrl
    // mode_sixsfred::@return
    // }
    // [557] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
  // mode_8bpppixelcell
//8bpp Pixel Cell Mode (BMM/COLDIS = 0, ECM/MCM/HICOL/LINEAR/CHUNK = 1)
//Pixel Cell Adressing
//CharData[8]: (PlaneA[21:0])
//GfxData[8]: (PlaneB[21:14] & CharData[7:0] & RowCounter[3:0] & PixelCounter[7:0] )
//GfxData Pixel Shifter (8):
//- 8bpp color GfxData[7:0]
//Pixel cell mode can be thought of as a text mode that uses a 8x8 pixel 8bpp font (64 bytes/char).
//The characters come from counter A and the font (or "cells") from counter B.
//Counter B step and modulo should be set to 0, counter A modulo to 0 and counter A step to 1 for normal operation.
mode_8bpppixelcell: {
    // 8BPP Pixel Cell Screen (contains 40x25=1000 chars)
    .label PLANEA = $3c00
    // 8BPP Pixel Cell Charset (contains 256 64 byte chars)
    .label PLANEB = $4000
    .label CHARGEN = $d000
    .label __3 = $f
    // Screen Chars for Plane A (screen) - 16x16 repeating
    .label gfxa = $11
    .label ay = 6
    .label bits = $d
    .label chargen = $13
    .label gfxb = 8
    .label col = $10
    .label cr = $a
    .label ch = 7
    // *DTV_CONTROL = DTV_HIGHCOLOR | DTV_LINEAR | DTV_CHUNKY
    // [558] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
    sta DTV_CONTROL
    // *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3
    // [559] *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_MCM|VIC_CSEL
    // [560] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
    // *DTV_PLANEA_START_LO = <PLANEA
    // [561] *DTV_PLANEA_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #0
    sta DTV_PLANEA_START_LO
    // *DTV_PLANEA_START_MI = >PLANEA
    // [562] *DTV_PLANEA_START_MI = >mode_8bpppixelcell::PLANEA -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
    // *DTV_PLANEA_START_HI = 0
    // [563] *DTV_PLANEA_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // *DTV_PLANEA_STEP = 1
    // [564] *DTV_PLANEA_STEP = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
    // *DTV_PLANEA_MODULO_LO = 0
    // [565] *DTV_PLANEA_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
    // *DTV_PLANEA_MODULO_HI = 0
    // [566] *DTV_PLANEA_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEA_MODULO_HI
    // *DTV_PLANEB_START_LO = <PLANEB
    // [567] *DTV_PLANEB_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    sta DTV_PLANEB_START_LO
    // *DTV_PLANEB_START_MI = >PLANEB
    // [568] *DTV_PLANEB_START_MI = >mode_8bpppixelcell::PLANEB -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
    // *DTV_PLANEB_START_HI = 0
    // [569] *DTV_PLANEB_START_HI = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
    // *DTV_PLANEB_STEP = 0
    // [570] *DTV_PLANEB_STEP = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_STEP
    // *DTV_PLANEB_MODULO_LO = 0
    // [571] *DTV_PLANEB_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_LO
    // *DTV_PLANEB_MODULO_HI = 0
    // [572] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
    // *BORDER_COLOR = $00
    // [573] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Border color
    sta BORDER_COLOR
    // [574] phi from mode_8bpppixelcell to mode_8bpppixelcell::@1 [phi:mode_8bpppixelcell->mode_8bpppixelcell::@1]
    // [574] phi mode_8bpppixelcell::i#2 = 0 [phi:mode_8bpppixelcell->mode_8bpppixelcell::@1#0] -- vbuxx=vbuc1 
    tax
  // DTV Palette - Grey Tones
    // [574] phi from mode_8bpppixelcell::@1 to mode_8bpppixelcell::@1 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@1]
    // [574] phi mode_8bpppixelcell::i#2 = mode_8bpppixelcell::i#1 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@1#0] -- register_copy 
    // mode_8bpppixelcell::@1
  __b1:
    // DTV_PALETTE[i] = i
    // [575] DTV_PALETTE[mode_8bpppixelcell::i#2] = mode_8bpppixelcell::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [576] mode_8bpppixelcell::i#1 = ++ mode_8bpppixelcell::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [577] if(mode_8bpppixelcell::i#1!=$10) goto mode_8bpppixelcell::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // [578] phi from mode_8bpppixelcell::@1 to mode_8bpppixelcell::@2 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2]
    // [578] phi mode_8bpppixelcell::gfxa#3 = mode_8bpppixelcell::PLANEA [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta.z gfxa
    lda #>PLANEA
    sta.z gfxa+1
    // [578] phi mode_8bpppixelcell::ay#4 = 0 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    // [578] phi from mode_8bpppixelcell::@4 to mode_8bpppixelcell::@2 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@2]
    // [578] phi mode_8bpppixelcell::gfxa#3 = mode_8bpppixelcell::gfxa#1 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@2#0] -- register_copy 
    // [578] phi mode_8bpppixelcell::ay#4 = mode_8bpppixelcell::ay#1 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@2#1] -- register_copy 
    // mode_8bpppixelcell::@2
  __b2:
    // [579] phi from mode_8bpppixelcell::@2 to mode_8bpppixelcell::@3 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3]
    // [579] phi mode_8bpppixelcell::gfxa#2 = mode_8bpppixelcell::gfxa#3 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3#0] -- register_copy 
    // [579] phi mode_8bpppixelcell::ax#2 = 0 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3#1] -- vbuxx=vbuc1 
    ldx #0
    // [579] phi from mode_8bpppixelcell::@3 to mode_8bpppixelcell::@3 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3]
    // [579] phi mode_8bpppixelcell::gfxa#2 = mode_8bpppixelcell::gfxa#1 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3#0] -- register_copy 
    // [579] phi mode_8bpppixelcell::ax#2 = mode_8bpppixelcell::ax#1 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3#1] -- register_copy 
    // mode_8bpppixelcell::@3
  __b3:
    // ay & $f
    // [580] mode_8bpppixelcell::$2 = mode_8bpppixelcell::ay#4 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z ay
    // (ay & $f)*$10
    // [581] mode_8bpppixelcell::$3 = mode_8bpppixelcell::$2 << 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __3
    // ax & $f
    // [582] mode_8bpppixelcell::$4 = mode_8bpppixelcell::ax#2 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // (ay & $f)*$10 | (ax & $f)
    // [583] mode_8bpppixelcell::$5 = mode_8bpppixelcell::$3 | mode_8bpppixelcell::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __3
    // *gfxa++ = (ay & $f)*$10 | (ax & $f)
    // [584] *mode_8bpppixelcell::gfxa#2 = mode_8bpppixelcell::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
    // *gfxa++ = (ay & $f)*$10 | (ax & $f);
    // [585] mode_8bpppixelcell::gfxa#1 = ++ mode_8bpppixelcell::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // for (byte ax : 0..39)
    // [586] mode_8bpppixelcell::ax#1 = ++ mode_8bpppixelcell::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [587] if(mode_8bpppixelcell::ax#1!=$28) goto mode_8bpppixelcell::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b3
    // mode_8bpppixelcell::@4
    // for(byte ay : 0..24)
    // [588] mode_8bpppixelcell::ay#1 = ++ mode_8bpppixelcell::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [589] if(mode_8bpppixelcell::ay#1!=$19) goto mode_8bpppixelcell::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z ay
    bne __b2
    // mode_8bpppixelcell::@5
    // *PROCPORT = PROCPORT_RAM_CHARROM
    // [590] *PROCPORT = PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    // 8bpp cells for Plane B (charset) - ROM charset with 256 colors
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [591] phi from mode_8bpppixelcell::@5 to mode_8bpppixelcell::@6 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6]
    // [591] phi mode_8bpppixelcell::ch#8 = 0 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ch
    // [591] phi mode_8bpppixelcell::col#7 = 0 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#1] -- vbuz1=vbuc1 
    sta.z col
    // [591] phi mode_8bpppixelcell::gfxb#7 = mode_8bpppixelcell::PLANEB [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#2] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta.z gfxb
    lda #>PLANEB
    sta.z gfxb+1
    // [591] phi mode_8bpppixelcell::chargen#4 = mode_8bpppixelcell::CHARGEN [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    // [591] phi from mode_8bpppixelcell::@12 to mode_8bpppixelcell::@6 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@6]
    // [591] phi mode_8bpppixelcell::ch#8 = mode_8bpppixelcell::ch#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@6#0] -- register_copy 
    // [591] phi mode_8bpppixelcell::col#7 = mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@6#1] -- register_copy 
    // [591] phi mode_8bpppixelcell::gfxb#7 = mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@6#2] -- register_copy 
    // [591] phi mode_8bpppixelcell::chargen#4 = mode_8bpppixelcell::chargen#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@6#3] -- register_copy 
    // mode_8bpppixelcell::@6
  __b6:
    // [592] phi from mode_8bpppixelcell::@6 to mode_8bpppixelcell::@7 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7]
    // [592] phi mode_8bpppixelcell::cr#6 = 0 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cr
    // [592] phi mode_8bpppixelcell::col#5 = mode_8bpppixelcell::col#7 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7#1] -- register_copy 
    // [592] phi mode_8bpppixelcell::gfxb#5 = mode_8bpppixelcell::gfxb#7 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7#2] -- register_copy 
    // [592] phi mode_8bpppixelcell::chargen#2 = mode_8bpppixelcell::chargen#4 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7#3] -- register_copy 
    // [592] phi from mode_8bpppixelcell::@11 to mode_8bpppixelcell::@7 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7]
    // [592] phi mode_8bpppixelcell::cr#6 = mode_8bpppixelcell::cr#1 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7#0] -- register_copy 
    // [592] phi mode_8bpppixelcell::col#5 = mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7#1] -- register_copy 
    // [592] phi mode_8bpppixelcell::gfxb#5 = mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7#2] -- register_copy 
    // [592] phi mode_8bpppixelcell::chargen#2 = mode_8bpppixelcell::chargen#1 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7#3] -- register_copy 
    // mode_8bpppixelcell::@7
  __b7:
    // bits = *chargen++
    // [593] mode_8bpppixelcell::bits#0 = *mode_8bpppixelcell::chargen#2 -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta.z bits
    // [594] mode_8bpppixelcell::chargen#1 = ++ mode_8bpppixelcell::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [595] phi from mode_8bpppixelcell::@7 to mode_8bpppixelcell::@8 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@8]
    // [595] phi mode_8bpppixelcell::cp#2 = 0 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@8#0] -- vbuxx=vbuc1 
    ldx #0
    // [595] phi mode_8bpppixelcell::col#2 = mode_8bpppixelcell::col#5 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@8#1] -- register_copy 
    // [595] phi mode_8bpppixelcell::gfxb#2 = mode_8bpppixelcell::gfxb#5 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@8#2] -- register_copy 
    // [595] phi mode_8bpppixelcell::bits#2 = mode_8bpppixelcell::bits#0 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@8#3] -- register_copy 
    // [595] phi from mode_8bpppixelcell::@9 to mode_8bpppixelcell::@8 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@8]
    // [595] phi mode_8bpppixelcell::cp#2 = mode_8bpppixelcell::cp#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@8#0] -- register_copy 
    // [595] phi mode_8bpppixelcell::col#2 = mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@8#1] -- register_copy 
    // [595] phi mode_8bpppixelcell::gfxb#2 = mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@8#2] -- register_copy 
    // [595] phi mode_8bpppixelcell::bits#2 = mode_8bpppixelcell::bits#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@8#3] -- register_copy 
    // mode_8bpppixelcell::@8
  __b8:
    // bits & $80
    // [596] mode_8bpppixelcell::$8 = mode_8bpppixelcell::bits#2 & $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z bits
    // if((bits & $80) != 0)
    // [597] if(mode_8bpppixelcell::$8==0) goto mode_8bpppixelcell::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b4
    // mode_8bpppixelcell::@10
    // [598] mode_8bpppixelcell::c#3 = mode_8bpppixelcell::col#2 -- vbuaa=vbuz1 
    lda.z col
    // [599] phi from mode_8bpppixelcell::@10 to mode_8bpppixelcell::@9 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@9]
    // [599] phi mode_8bpppixelcell::c#2 = mode_8bpppixelcell::c#3 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@9#0] -- register_copy 
    jmp __b9
    // [599] phi from mode_8bpppixelcell::@8 to mode_8bpppixelcell::@9 [phi:mode_8bpppixelcell::@8->mode_8bpppixelcell::@9]
  __b4:
    // [599] phi mode_8bpppixelcell::c#2 = 0 [phi:mode_8bpppixelcell::@8->mode_8bpppixelcell::@9#0] -- vbuaa=vbuc1 
    lda #0
    // mode_8bpppixelcell::@9
  __b9:
    // *gfxb++ = c
    // [600] *mode_8bpppixelcell::gfxb#2 = mode_8bpppixelcell::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
    // *gfxb++ = c;
    // [601] mode_8bpppixelcell::gfxb#1 = ++ mode_8bpppixelcell::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // bits = bits*2
    // [602] mode_8bpppixelcell::bits#1 = mode_8bpppixelcell::bits#2 << 1 -- vbuz1=vbuz1_rol_1 
    asl.z bits
    // col++;
    // [603] mode_8bpppixelcell::col#1 = ++ mode_8bpppixelcell::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // for ( byte cp : 0..7)
    // [604] mode_8bpppixelcell::cp#1 = ++ mode_8bpppixelcell::cp#2 -- vbuxx=_inc_vbuxx 
    inx
    // [605] if(mode_8bpppixelcell::cp#1!=8) goto mode_8bpppixelcell::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b8
    // mode_8bpppixelcell::@11
    // for ( byte cr : 0..7)
    // [606] mode_8bpppixelcell::cr#1 = ++ mode_8bpppixelcell::cr#6 -- vbuz1=_inc_vbuz1 
    inc.z cr
    // [607] if(mode_8bpppixelcell::cr#1!=8) goto mode_8bpppixelcell::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cr
    bne __b7
    // mode_8bpppixelcell::@12
    // for(byte ch : $00..$ff)
    // [608] mode_8bpppixelcell::ch#1 = ++ mode_8bpppixelcell::ch#8 -- vbuz1=_inc_vbuz1 
    inc.z ch
    // [609] if(mode_8bpppixelcell::ch#1!=0) goto mode_8bpppixelcell::@6 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b6
    // mode_8bpppixelcell::@13
    // *PROCPORT = PROCPORT_RAM_IO
    // [610] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // mode_ctrl()
    // [611] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_8bpppixelcell::@13 to mode_ctrl [phi:mode_8bpppixelcell::@13->mode_ctrl]
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY [phi:mode_8bpppixelcell::@13->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
    jsr mode_ctrl
    // mode_8bpppixelcell::@return
    // }
    // [612] return 
    rts
}
  // mode_8bppchunkybmm
//Chunky 8bpp Bitmap Mode (BMM = 0, ECM/MCM/HICOL/LINEAR/CHUNK/COLDIS = 1)
// Resolution: 320x200
// Linear Adressing
// CharData/PlaneB Pixel Shifter (8):
// - 8bpp color PlaneB[7:0]
// To set up a linear video frame buffer the step size must be set to 8.
mode_8bppchunkybmm: {
    // 8BPP Chunky Bitmap (contains 8bpp pixels)
    .const PLANEB = $20000
    .label __7 = $11
    .label gfxb = 8
    .label x = $13
    .label y = $d
    // *DTV_CONTROL = DTV_HIGHCOLOR | DTV_LINEAR | DTV_CHUNKY | DTV_COLORRAM_OFF
    // [613] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
    sta DTV_CONTROL
    // *VIC_CONTROL = VIC_ECM | VIC_DEN | VIC_RSEL | 3
    // [614] *VIC_CONTROL = VIC_ECM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_MCM | VIC_CSEL
    // [615] *VIC_CONTROL2 = VIC_MCM|VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
    // *DTV_PLANEB_START_LO = < < PLANEB
    // [616] *DTV_PLANEB_START_LO = 0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #0
    sta DTV_PLANEB_START_LO
    // *DTV_PLANEB_START_MI = > < PLANEB
    // [617] *DTV_PLANEB_START_MI = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_START_MI
    // *DTV_PLANEB_START_HI = < > PLANEB
    // [618] *DTV_PLANEB_START_HI = <>mode_8bppchunkybmm::PLANEB -- _deref_pbuc1=vbuc2 
    lda #<PLANEB>>$10
    sta DTV_PLANEB_START_HI
    // *DTV_PLANEB_STEP = 8
    // [619] *DTV_PLANEB_STEP = 8 -- _deref_pbuc1=vbuc2 
    lda #8
    sta DTV_PLANEB_STEP
    // *DTV_PLANEB_MODULO_LO = 0
    // [620] *DTV_PLANEB_MODULO_LO = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
    // *DTV_PLANEB_MODULO_HI = 0
    // [621] *DTV_PLANEB_MODULO_HI = 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
    // *BORDER_COLOR = $00
    // [622] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Border color
    sta BORDER_COLOR
    // [623] phi from mode_8bppchunkybmm to mode_8bppchunkybmm::@1 [phi:mode_8bppchunkybmm->mode_8bppchunkybmm::@1]
    // [623] phi mode_8bppchunkybmm::i#2 = 0 [phi:mode_8bppchunkybmm->mode_8bppchunkybmm::@1#0] -- vbuxx=vbuc1 
    tax
  // DTV Palette - Grey Tones
    // [623] phi from mode_8bppchunkybmm::@1 to mode_8bppchunkybmm::@1 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@1]
    // [623] phi mode_8bppchunkybmm::i#2 = mode_8bppchunkybmm::i#1 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@1#0] -- register_copy 
    // mode_8bppchunkybmm::@1
  __b1:
    // DTV_PALETTE[i] = i
    // [624] DTV_PALETTE[mode_8bppchunkybmm::i#2] = mode_8bppchunkybmm::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [625] mode_8bppchunkybmm::i#1 = ++ mode_8bppchunkybmm::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [626] if(mode_8bppchunkybmm::i#1!=$10) goto mode_8bppchunkybmm::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // [627] phi from mode_8bppchunkybmm::@1 to mode_8bppchunkybmm::@2 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@2]
    // mode_8bppchunkybmm::@2
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [628] call dtvSetCpuBankSegment1 
    // [820] phi from mode_8bppchunkybmm::@2 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@2->dtvSetCpuBankSegment1]
    // [820] phi dtvSetCpuBankSegment1::cpuBankIdx#3 = (byte)mode_8bppchunkybmm::PLANEB/$4000 [phi:mode_8bppchunkybmm::@2->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANEB/$4000
    jsr dtvSetCpuBankSegment1
    // [629] phi from mode_8bppchunkybmm::@2 to mode_8bppchunkybmm::@3 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3]
    // [629] phi mode_8bppchunkybmm::gfxbCpuBank#7 = ++(byte)mode_8bppchunkybmm::PLANEB/$4000 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#0] -- vbuxx=vbuc1 
    ldx #PLANEB/$4000+1
    // [629] phi mode_8bppchunkybmm::y#6 = 0 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [629] phi mode_8bppchunkybmm::gfxb#5 = (byte*) 16384 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    // [629] phi from mode_8bppchunkybmm::@7 to mode_8bppchunkybmm::@3 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@3]
    // [629] phi mode_8bppchunkybmm::gfxbCpuBank#7 = mode_8bppchunkybmm::gfxbCpuBank#8 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@3#0] -- register_copy 
    // [629] phi mode_8bppchunkybmm::y#6 = mode_8bppchunkybmm::y#1 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@3#1] -- register_copy 
    // [629] phi mode_8bppchunkybmm::gfxb#5 = mode_8bppchunkybmm::gfxb#1 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@3#2] -- register_copy 
    // mode_8bppchunkybmm::@3
  __b3:
    // [630] phi from mode_8bppchunkybmm::@3 to mode_8bppchunkybmm::@4 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4]
    // [630] phi mode_8bppchunkybmm::gfxbCpuBank#4 = mode_8bppchunkybmm::gfxbCpuBank#7 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#0] -- register_copy 
    // [630] phi mode_8bppchunkybmm::x#2 = 0 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    sta.z x+1
    // [630] phi mode_8bppchunkybmm::gfxb#3 = mode_8bppchunkybmm::gfxb#5 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#2] -- register_copy 
    // [630] phi from mode_8bppchunkybmm::@5 to mode_8bppchunkybmm::@4 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@4]
    // [630] phi mode_8bppchunkybmm::gfxbCpuBank#4 = mode_8bppchunkybmm::gfxbCpuBank#8 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@4#0] -- register_copy 
    // [630] phi mode_8bppchunkybmm::x#2 = mode_8bppchunkybmm::x#1 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@4#1] -- register_copy 
    // [630] phi mode_8bppchunkybmm::gfxb#3 = mode_8bppchunkybmm::gfxb#1 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@4#2] -- register_copy 
    // mode_8bppchunkybmm::@4
  __b4:
    // if(gfxb==$8000)
    // [631] if(mode_8bppchunkybmm::gfxb#3!=$8000) goto mode_8bppchunkybmm::@5 -- pbuz1_neq_vwuc1_then_la1 
    lda.z gfxb+1
    cmp #>$8000
    bne __b5
    lda.z gfxb
    cmp #<$8000
    bne __b5
    // mode_8bppchunkybmm::@6
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [632] dtvSetCpuBankSegment1::cpuBankIdx#1 = mode_8bppchunkybmm::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
    // [633] call dtvSetCpuBankSegment1 
    // [820] phi from mode_8bppchunkybmm::@6 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@6->dtvSetCpuBankSegment1]
    // [820] phi dtvSetCpuBankSegment1::cpuBankIdx#3 = dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:mode_8bppchunkybmm::@6->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    // mode_8bppchunkybmm::@9
    // dtvSetCpuBankSegment1(gfxbCpuBank++);
    // [634] mode_8bppchunkybmm::gfxbCpuBank#2 = ++ mode_8bppchunkybmm::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
    // [635] phi from mode_8bppchunkybmm::@9 to mode_8bppchunkybmm::@5 [phi:mode_8bppchunkybmm::@9->mode_8bppchunkybmm::@5]
    // [635] phi mode_8bppchunkybmm::gfxbCpuBank#8 = mode_8bppchunkybmm::gfxbCpuBank#2 [phi:mode_8bppchunkybmm::@9->mode_8bppchunkybmm::@5#0] -- register_copy 
    // [635] phi mode_8bppchunkybmm::gfxb#4 = (byte*) 16384 [phi:mode_8bppchunkybmm::@9->mode_8bppchunkybmm::@5#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    // [635] phi from mode_8bppchunkybmm::@4 to mode_8bppchunkybmm::@5 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@5]
    // [635] phi mode_8bppchunkybmm::gfxbCpuBank#8 = mode_8bppchunkybmm::gfxbCpuBank#4 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@5#0] -- register_copy 
    // [635] phi mode_8bppchunkybmm::gfxb#4 = mode_8bppchunkybmm::gfxb#3 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@5#1] -- register_copy 
    // mode_8bppchunkybmm::@5
  __b5:
    // x+y
    // [636] mode_8bppchunkybmm::$7 = mode_8bppchunkybmm::x#2 + mode_8bppchunkybmm::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z y
    clc
    adc.z x
    sta.z __7
    lda #0
    adc.z x+1
    sta.z __7+1
    // c = (byte)(x+y)
    // [637] mode_8bppchunkybmm::c#0 = (byte)mode_8bppchunkybmm::$7 -- vbuaa=_byte_vwuz1 
    lda.z __7
    // *gfxb++ = c
    // [638] *mode_8bppchunkybmm::gfxb#4 = mode_8bppchunkybmm::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
    // *gfxb++ = c;
    // [639] mode_8bppchunkybmm::gfxb#1 = ++ mode_8bppchunkybmm::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for (word x : 0..319)
    // [640] mode_8bppchunkybmm::x#1 = ++ mode_8bppchunkybmm::x#2 -- vwuz1=_inc_vwuz1 
    inc.z x
    bne !+
    inc.z x+1
  !:
    // [641] if(mode_8bppchunkybmm::x#1!=$140) goto mode_8bppchunkybmm::@4 -- vwuz1_neq_vwuc1_then_la1 
    lda.z x+1
    cmp #>$140
    bne __b4
    lda.z x
    cmp #<$140
    bne __b4
    // mode_8bppchunkybmm::@7
    // for(byte y : 0..199)
    // [642] mode_8bppchunkybmm::y#1 = ++ mode_8bppchunkybmm::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [643] if(mode_8bppchunkybmm::y#1!=$c8) goto mode_8bppchunkybmm::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z y
    bne __b3
    // [644] phi from mode_8bppchunkybmm::@7 to mode_8bppchunkybmm::@8 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@8]
    // mode_8bppchunkybmm::@8
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [645] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [820] phi from mode_8bppchunkybmm::@8 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@8->dtvSetCpuBankSegment1]
    // [820] phi dtvSetCpuBankSegment1::cpuBankIdx#3 = (byte)$4000/$4000 [phi:mode_8bppchunkybmm::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // [646] phi from mode_8bppchunkybmm::@8 to mode_8bppchunkybmm::@10 [phi:mode_8bppchunkybmm::@8->mode_8bppchunkybmm::@10]
    // mode_8bppchunkybmm::@10
    // mode_ctrl()
    // [647] call mode_ctrl 
  // Leave control to the user until exit
    // [666] phi from mode_8bppchunkybmm::@10 to mode_ctrl [phi:mode_8bppchunkybmm::@10->mode_ctrl]
    // [666] phi dtv_control#146 = DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF [phi:mode_8bppchunkybmm::@10->mode_ctrl#0] -- vbuxx=vbuc1 
    ldx #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
    jsr mode_ctrl
    // mode_8bppchunkybmm::@return
    // }
    // [648] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = menu.SCREEN
    .label end = str+num
    .label dst = $11
    // [650] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [650] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [651] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [652] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [653] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [654] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [650] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [650] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [655] *print_char_cursor#37 = print_char::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [656] print_char_cursor#26 = ++ print_char_cursor#37 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [657] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [659] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [659] phi print_line_cursor#19 = print_line_cursor#1 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [660] print_line_cursor#2 = print_line_cursor#19 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [661] if(print_line_cursor#2<print_char_cursor#38) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [662] return 
    rts
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(Y) rowid)
keyboard_matrix_read: {
    // CIA1->PORT_A = keyboard_matrix_row_bitmask[rowid]
    // [663] *((byte*)CIA1) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0] -- _deref_pbuc1=pbuc2_derefidx_vbuyy 
    lda keyboard_matrix_row_bitmask,y
    sta CIA1
    // ~CIA1->PORT_B
    // [664] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    // keyboard_matrix_read::@return
    // }
    // [665] return 
    rts
}
  // mode_ctrl
// Allow the user to control the DTV graphics using different keys
mode_ctrl: {
    // DTV Graphics Mode - Reset
    .label ctrl = $c
    // [667] phi from mode_ctrl mode_ctrl::@11 mode_ctrl::@18 to mode_ctrl::@1 [phi:mode_ctrl/mode_ctrl::@11/mode_ctrl::@18->mode_ctrl::@1]
    // [667] phi dtv_control#116 = dtv_control#146 [phi:mode_ctrl/mode_ctrl::@11/mode_ctrl::@18->mode_ctrl::@1#0] -- register_copy 
    // mode_ctrl::@1
  __b1:
  // Wait for the raster
    // mode_ctrl::@2
  __b2:
    // while(*RASTER!=$ff)
    // [668] if(*RASTER!=$ff) goto mode_ctrl::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    // [669] phi from mode_ctrl::@2 to mode_ctrl::@3 [phi:mode_ctrl::@2->mode_ctrl::@3]
    // mode_ctrl::@3
    // keyboard_key_pressed(KEY_SPACE)
    // [670] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@3 to keyboard_key_pressed [phi:mode_ctrl::@3->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_SPACE [phi:mode_ctrl::@3->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_SPACE
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_SPACE)
    // [671] keyboard_key_pressed::return#14 = keyboard_key_pressed::return#0
    // mode_ctrl::@19
    // [672] mode_ctrl::$1 = keyboard_key_pressed::return#14
    // if(keyboard_key_pressed(KEY_SPACE)!=0)
    // [673] if(mode_ctrl::$1==0) goto mode_ctrl::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b4
    // mode_ctrl::@return
    // }
    // [674] return 
    rts
    // mode_ctrl::@4
  __b4:
    // ctrl = dtv_control
    // [675] mode_ctrl::ctrl#0 = dtv_control#116 -- vbuz1=vbuxx 
    // Read the current control byte
    stx.z ctrl
    // keyboard_key_pressed(KEY_L)
    // [676] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@4 to keyboard_key_pressed [phi:mode_ctrl::@4->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_L [phi:mode_ctrl::@4->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_L
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_L)
    // [677] keyboard_key_pressed::return#15 = keyboard_key_pressed::return#0
    // mode_ctrl::@20
    // [678] mode_ctrl::$4 = keyboard_key_pressed::return#15
    // if(keyboard_key_pressed(KEY_L)!=0)
    // [679] if(mode_ctrl::$4==0) goto mode_ctrl::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b5
    // mode_ctrl::@12
    // ctrl = ctrl|DTV_LINEAR
    // [680] mode_ctrl::ctrl#1 = mode_ctrl::ctrl#0 | DTV_LINEAR -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_LINEAR
    ora.z ctrl
    sta.z ctrl
    // [681] phi from mode_ctrl::@12 mode_ctrl::@20 to mode_ctrl::@5 [phi:mode_ctrl::@12/mode_ctrl::@20->mode_ctrl::@5]
    // [681] phi mode_ctrl::ctrl#17 = mode_ctrl::ctrl#1 [phi:mode_ctrl::@12/mode_ctrl::@20->mode_ctrl::@5#0] -- register_copy 
    // mode_ctrl::@5
  __b5:
    // keyboard_key_pressed(KEY_H)
    // [682] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@5 to keyboard_key_pressed [phi:mode_ctrl::@5->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_H [phi:mode_ctrl::@5->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_H
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_H)
    // [683] keyboard_key_pressed::return#16 = keyboard_key_pressed::return#0
    // mode_ctrl::@21
    // [684] mode_ctrl::$8 = keyboard_key_pressed::return#16
    // if(keyboard_key_pressed(KEY_H)!=0)
    // [685] if(mode_ctrl::$8==0) goto mode_ctrl::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b6
    // mode_ctrl::@13
    // ctrl = ctrl|DTV_HIGHCOLOR
    // [686] mode_ctrl::ctrl#2 = mode_ctrl::ctrl#17 | DTV_HIGHCOLOR -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_HIGHCOLOR
    ora.z ctrl
    sta.z ctrl
    // [687] phi from mode_ctrl::@13 mode_ctrl::@21 to mode_ctrl::@6 [phi:mode_ctrl::@13/mode_ctrl::@21->mode_ctrl::@6]
    // [687] phi mode_ctrl::ctrl#10 = mode_ctrl::ctrl#2 [phi:mode_ctrl::@13/mode_ctrl::@21->mode_ctrl::@6#0] -- register_copy 
    // mode_ctrl::@6
  __b6:
    // keyboard_key_pressed(KEY_O)
    // [688] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@6 to keyboard_key_pressed [phi:mode_ctrl::@6->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_O [phi:mode_ctrl::@6->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_O
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_O)
    // [689] keyboard_key_pressed::return#17 = keyboard_key_pressed::return#0
    // mode_ctrl::@22
    // [690] mode_ctrl::$12 = keyboard_key_pressed::return#17
    // if(keyboard_key_pressed(KEY_O)!=0)
    // [691] if(mode_ctrl::$12==0) goto mode_ctrl::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b7
    // mode_ctrl::@14
    // ctrl = ctrl|DTV_OVERSCAN
    // [692] mode_ctrl::ctrl#3 = mode_ctrl::ctrl#10 | DTV_OVERSCAN -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_OVERSCAN
    ora.z ctrl
    sta.z ctrl
    // [693] phi from mode_ctrl::@14 mode_ctrl::@22 to mode_ctrl::@7 [phi:mode_ctrl::@14/mode_ctrl::@22->mode_ctrl::@7]
    // [693] phi mode_ctrl::ctrl#11 = mode_ctrl::ctrl#3 [phi:mode_ctrl::@14/mode_ctrl::@22->mode_ctrl::@7#0] -- register_copy 
    // mode_ctrl::@7
  __b7:
    // keyboard_key_pressed(KEY_B)
    // [694] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@7 to keyboard_key_pressed [phi:mode_ctrl::@7->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_B [phi:mode_ctrl::@7->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_B
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_B)
    // [695] keyboard_key_pressed::return#18 = keyboard_key_pressed::return#0
    // mode_ctrl::@23
    // [696] mode_ctrl::$16 = keyboard_key_pressed::return#18
    // if(keyboard_key_pressed(KEY_B)!=0)
    // [697] if(mode_ctrl::$16==0) goto mode_ctrl::@8 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b8
    // mode_ctrl::@15
    // ctrl = ctrl|DTV_BORDER_OFF
    // [698] mode_ctrl::ctrl#4 = mode_ctrl::ctrl#11 | DTV_BORDER_OFF -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_BORDER_OFF
    ora.z ctrl
    sta.z ctrl
    // [699] phi from mode_ctrl::@15 mode_ctrl::@23 to mode_ctrl::@8 [phi:mode_ctrl::@15/mode_ctrl::@23->mode_ctrl::@8]
    // [699] phi mode_ctrl::ctrl#12 = mode_ctrl::ctrl#4 [phi:mode_ctrl::@15/mode_ctrl::@23->mode_ctrl::@8#0] -- register_copy 
    // mode_ctrl::@8
  __b8:
    // keyboard_key_pressed(KEY_U)
    // [700] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@8 to keyboard_key_pressed [phi:mode_ctrl::@8->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_U [phi:mode_ctrl::@8->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_U
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_U)
    // [701] keyboard_key_pressed::return#19 = keyboard_key_pressed::return#0
    // mode_ctrl::@24
    // [702] mode_ctrl::$20 = keyboard_key_pressed::return#19
    // if(keyboard_key_pressed(KEY_U)!=0)
    // [703] if(mode_ctrl::$20==0) goto mode_ctrl::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b9
    // mode_ctrl::@16
    // ctrl = ctrl|DTV_CHUNKY
    // [704] mode_ctrl::ctrl#5 = mode_ctrl::ctrl#12 | DTV_CHUNKY -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_CHUNKY
    ora.z ctrl
    sta.z ctrl
    // [705] phi from mode_ctrl::@16 mode_ctrl::@24 to mode_ctrl::@9 [phi:mode_ctrl::@16/mode_ctrl::@24->mode_ctrl::@9]
    // [705] phi mode_ctrl::ctrl#13 = mode_ctrl::ctrl#5 [phi:mode_ctrl::@16/mode_ctrl::@24->mode_ctrl::@9#0] -- register_copy 
    // mode_ctrl::@9
  __b9:
    // keyboard_key_pressed(KEY_C)
    // [706] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@9 to keyboard_key_pressed [phi:mode_ctrl::@9->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_C [phi:mode_ctrl::@9->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_C
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_C)
    // [707] keyboard_key_pressed::return#20 = keyboard_key_pressed::return#0
    // mode_ctrl::@25
    // [708] mode_ctrl::$24 = keyboard_key_pressed::return#20
    // if(keyboard_key_pressed(KEY_C)!=0)
    // [709] if(mode_ctrl::$24==0) goto mode_ctrl::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10
    // mode_ctrl::@17
    // ctrl = ctrl|DTV_COLORRAM_OFF
    // [710] mode_ctrl::ctrl#6 = mode_ctrl::ctrl#13 | DTV_COLORRAM_OFF -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_COLORRAM_OFF
    ora.z ctrl
    sta.z ctrl
    // [711] phi from mode_ctrl::@17 mode_ctrl::@25 to mode_ctrl::@10 [phi:mode_ctrl::@17/mode_ctrl::@25->mode_ctrl::@10]
    // [711] phi mode_ctrl::ctrl#22 = mode_ctrl::ctrl#6 [phi:mode_ctrl::@17/mode_ctrl::@25->mode_ctrl::@10#0] -- register_copy 
    // mode_ctrl::@10
  __b10:
    // keyboard_key_pressed(KEY_0)
    // [712] call keyboard_key_pressed 
    // [132] phi from mode_ctrl::@10 to keyboard_key_pressed [phi:mode_ctrl::@10->keyboard_key_pressed]
    // [132] phi keyboard_key_pressed::key#20 = KEY_0 [phi:mode_ctrl::@10->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_0
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_0)
    // [713] keyboard_key_pressed::return#21 = keyboard_key_pressed::return#0
    // mode_ctrl::@26
    // [714] mode_ctrl::$28 = keyboard_key_pressed::return#21
    // if(keyboard_key_pressed(KEY_0)!=0)
    // [715] if(mode_ctrl::$28==0) goto mode_ctrl::@27 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b11
    // [717] phi from mode_ctrl::@26 to mode_ctrl::@11 [phi:mode_ctrl::@26->mode_ctrl::@11]
    // [717] phi mode_ctrl::ctrl#14 = 0 [phi:mode_ctrl::@26->mode_ctrl::@11#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ctrl
    // [716] phi from mode_ctrl::@26 to mode_ctrl::@27 [phi:mode_ctrl::@26->mode_ctrl::@27]
    // mode_ctrl::@27
    // [717] phi from mode_ctrl::@27 to mode_ctrl::@11 [phi:mode_ctrl::@27->mode_ctrl::@11]
    // [717] phi mode_ctrl::ctrl#14 = mode_ctrl::ctrl#22 [phi:mode_ctrl::@27->mode_ctrl::@11#0] -- register_copy 
    // mode_ctrl::@11
  __b11:
    // if(ctrl != dtv_control)
    // [718] if(mode_ctrl::ctrl#14==dtv_control#116) goto mode_ctrl::@1 -- vbuz1_eq_vbuxx_then_la1 
    cpx.z ctrl
    beq __b1
    // mode_ctrl::@18
    // dtv_control = ctrl
    // [719] dtv_control#16 = mode_ctrl::ctrl#14 -- vbuxx=vbuz1 
    ldx.z ctrl
    // *DTV_CONTROL = ctrl
    // [720] *DTV_CONTROL = mode_ctrl::ctrl#14 -- _deref_pbuc1=vbuz1 
    txa
    sta DTV_CONTROL
    // *BORDER_COLOR = ctrl
    // [721] *BORDER_COLOR = mode_ctrl::ctrl#14 -- _deref_pbuc1=vbuz1 
    txa
    sta BORDER_COLOR
    jmp __b1
}
  // bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label __10 = $10
    .label yoffs = $11
    // [723] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
    // [723] phi bitmap_init::bits#3 = $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
    // [723] phi bitmap_init::x#2 = 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [723] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
    // [723] phi bitmap_init::bits#3 = bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [723] phi bitmap_init::x#2 = bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    // bitmap_init::@1
  __b1:
    // x&$f8
    // [724] bitmap_init::$0 = bitmap_init::x#2 & $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
    // bitmap_plot_xlo[x] = x&$f8
    // [725] bitmap_plot_xlo[bitmap_init::x#2] = bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
    // bitmap_plot_xhi[x] = >bitmap
    // [726] bitmap_plot_xhi[bitmap_init::x#2] = >mode_stdbitmap::BITMAP -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>mode_stdbitmap.BITMAP
    sta bitmap_plot_xhi,x
    // bitmap_plot_bit[x] = bits
    // [727] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
    // bits = bits>>1
    // [728] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
    // if(bits==0)
    // [729] if(bitmap_init::bits#1!=0) goto bitmap_init::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b2
    // [731] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
    // [731] phi bitmap_init::bits#4 = $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    // [730] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
    // bitmap_init::@6
    // [731] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
    // [731] phi bitmap_init::bits#4 = bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    // bitmap_init::@2
  __b2:
    // for(char x : 0..255)
    // [732] bitmap_init::x#1 = ++ bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [733] if(bitmap_init::x#1!=0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [734] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
    // [734] phi bitmap_init::yoffs#2 = (byte*) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    sta.z yoffs+1
    // [734] phi bitmap_init::y#2 = 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    tax
    // [734] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
    // [734] phi bitmap_init::yoffs#2 = bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [734] phi bitmap_init::y#2 = bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    // bitmap_init::@3
  __b3:
    // y&$7
    // [735] bitmap_init::$10 = bitmap_init::y#2 & 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __10
    // <yoffs
    // [736] bitmap_init::$7 = < bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // y&$7 | <yoffs
    // [737] bitmap_init::$8 = bitmap_init::$10 | bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __10
    // bitmap_plot_ylo[y] = y&$7 | <yoffs
    // [738] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // >yoffs
    // [739] bitmap_init::$9 = > bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // bitmap_plot_yhi[y] = >yoffs
    // [740] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // if((y&$7)==7)
    // [741] if(bitmap_init::$10!=7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __10
    bne __b4
    // bitmap_init::@5
    // yoffs = yoffs + 40*8
    // [742] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [743] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
    // [743] phi bitmap_init::yoffs#4 = bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    // bitmap_init::@4
  __b4:
    // for(char y : 0..255)
    // [744] bitmap_init::y#1 = ++ bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [745] if(bitmap_init::y#1!=0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // bitmap_init::@return
    // }
    // [746] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $11
    .label y = $10
    // bitmap = (char*) { bitmap_plot_xhi[0], bitmap_plot_xlo[0] }
    // [747] bitmap_clear::bitmap#0 = *bitmap_plot_xhi w= *bitmap_plot_xlo -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta.z bitmap
    lda bitmap_plot_xhi
    sta.z bitmap+1
    // [748] bitmap_clear::bitmap#5 = (byte*)bitmap_clear::bitmap#0
    // [749] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
    // [749] phi bitmap_clear::y#4 = 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [749] phi bitmap_clear::bitmap#3 = bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    // [749] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
    // [749] phi bitmap_clear::y#4 = bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
    // [749] phi bitmap_clear::bitmap#3 = bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    // bitmap_clear::@1
  __b1:
    // [750] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
    // [750] phi bitmap_clear::x#2 = 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [750] phi bitmap_clear::bitmap#2 = bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    // [750] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
    // [750] phi bitmap_clear::x#2 = bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
    // [750] phi bitmap_clear::bitmap#2 = bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    // bitmap_clear::@2
  __b2:
    // *bitmap++ = 0
    // [751] *bitmap_clear::bitmap#2 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (bitmap),y
    // *bitmap++ = 0;
    // [752] bitmap_clear::bitmap#1 = ++ bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc.z bitmap
    bne !+
    inc.z bitmap+1
  !:
    // for( char x: 0..199 )
    // [753] bitmap_clear::x#1 = ++ bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [754] if(bitmap_clear::x#1!=$c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne __b2
    // bitmap_clear::@3
    // for( char y: 0..39 )
    // [755] bitmap_clear::y#1 = ++ bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [756] if(bitmap_clear::y#1!=$28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z y
    bne __b1
    // bitmap_clear::@return
    // }
    // [757] return 
    rts
}
  // bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zp($f) x0, byte zp($10) x1, byte register(X) y0, byte zp($e) y1)
bitmap_line: {
    .label xd = $c
    .label x0 = $f
    .label x1 = $10
    .label y1 = $e
    // if(x0<x1)
    // [758] if(bitmap_line::x0#0<bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x0
    cmp.z x1
    bcc __b1
    // bitmap_line::@2
    // xd = x0-x1
    // [759] bitmap_line::xd#2 = bitmap_line::x0#0 - bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    sec
    sbc.z x1
    sta.z xd
    // if(y0<y1)
    // [760] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@7 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z y1
    bcc __b7
    // bitmap_line::@3
    // yd = y0-y1
    // [761] bitmap_line::yd#2 = bitmap_line::y0#0 - bitmap_line::y1#0 -- vbuyy=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z y1
    tay
    // if(yd<xd)
    // [762] if(bitmap_line::yd#2<bitmap_line::xd#2) goto bitmap_line::@8 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b8
    // bitmap_line::@4
    // bitmap_line_ydxi(y1, x1, y0, yd, xd)
    // [763] bitmap_line_ydxi::y#0 = bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxi.y
    // [764] bitmap_line_ydxi::x#0 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_ydxi.x
    // [765] bitmap_line_ydxi::y1#0 = bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxi.y1
    // [766] bitmap_line_ydxi::yd#0 = bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [767] bitmap_line_ydxi::xd#0 = bitmap_line::xd#2
    // [768] call bitmap_line_ydxi 
    // [824] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
    // [824] phi bitmap_line_ydxi::y1#6 = bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
    // [824] phi bitmap_line_ydxi::yd#5 = bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
    // [824] phi bitmap_line_ydxi::y#6 = bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
    // [824] phi bitmap_line_ydxi::x#5 = bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
    // [824] phi bitmap_line_ydxi::xd#2 = bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    // bitmap_line::@return
    // }
    // [769] return 
    rts
    // bitmap_line::@8
  __b8:
    // bitmap_line_xdyi(x1, y1, x0, xd, yd)
    // [770] bitmap_line_xdyi::x#0 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x
    // [771] bitmap_line_xdyi::y#0 = bitmap_line::y1#0 -- vbuxx=vbuz1 
    ldx.z y1
    // [772] bitmap_line_xdyi::x1#0 = bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x1
    // [773] bitmap_line_xdyi::xd#0 = bitmap_line::xd#2
    // [774] bitmap_line_xdyi::yd#0 = bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [775] call bitmap_line_xdyi 
    // [839] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
    // [839] phi bitmap_line_xdyi::x1#6 = bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
    // [839] phi bitmap_line_xdyi::xd#5 = bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
    // [839] phi bitmap_line_xdyi::y#5 = bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
    // [839] phi bitmap_line_xdyi::x#6 = bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
    // [839] phi bitmap_line_xdyi::yd#2 = bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    rts
    // bitmap_line::@7
  __b7:
    // yd = y1-y0
    // [776] bitmap_line::yd#1 = bitmap_line::y1#0 - bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z y1
    tay
    // if(yd<xd)
    // [777] if(bitmap_line::yd#1<bitmap_line::xd#2) goto bitmap_line::@9 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b9
    // bitmap_line::@10
    // bitmap_line_ydxd(y0, x0, y1, yd, xd)
    // [778] bitmap_line_ydxd::y#0 = bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxd.y
    // [779] bitmap_line_ydxd::x#0 = bitmap_line::x0#0
    // [780] bitmap_line_ydxd::y1#0 = bitmap_line::y1#0
    // [781] bitmap_line_ydxd::yd#0 = bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [782] bitmap_line_ydxd::xd#0 = bitmap_line::xd#2
    // [783] call bitmap_line_ydxd 
    // [854] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
    // [854] phi bitmap_line_ydxd::y1#6 = bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
    // [854] phi bitmap_line_ydxd::yd#5 = bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
    // [854] phi bitmap_line_ydxd::y#7 = bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
    // [854] phi bitmap_line_ydxd::x#5 = bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
    // [854] phi bitmap_line_ydxd::xd#2 = bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    rts
    // bitmap_line::@9
  __b9:
    // bitmap_line_xdyd(x1, y1, x0, xd, yd)
    // [784] bitmap_line_xdyd::x#0 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x
    // [785] bitmap_line_xdyd::y#0 = bitmap_line::y1#0 -- vbuxx=vbuz1 
    ldx.z y1
    // [786] bitmap_line_xdyd::x1#0 = bitmap_line::x0#0
    // [787] bitmap_line_xdyd::xd#0 = bitmap_line::xd#2
    // [788] bitmap_line_xdyd::yd#0 = bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [789] call bitmap_line_xdyd 
    // [869] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
    // [869] phi bitmap_line_xdyd::x1#6 = bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
    // [869] phi bitmap_line_xdyd::xd#5 = bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
    // [869] phi bitmap_line_xdyd::y#5 = bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
    // [869] phi bitmap_line_xdyd::x#6 = bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
    // [869] phi bitmap_line_xdyd::yd#2 = bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    rts
    // bitmap_line::@1
  __b1:
    // xd = x1-x0
    // [790] bitmap_line::xd#1 = bitmap_line::x1#0 - bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x0
    sta.z xd
    // if(y0<y1)
    // [791] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@11 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z y1
    bcc __b11
    // bitmap_line::@5
    // yd = y0-y1
    // [792] bitmap_line::yd#10 = bitmap_line::y0#0 - bitmap_line::y1#0 -- vbuyy=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z y1
    tay
    // if(yd<xd)
    // [793] if(bitmap_line::yd#10<bitmap_line::xd#1) goto bitmap_line::@12 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b12
    // bitmap_line::@6
    // bitmap_line_ydxd(y1, x1, y0, yd, xd)
    // [794] bitmap_line_ydxd::y#1 = bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y
    // [795] bitmap_line_ydxd::x#1 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_ydxd.x
    // [796] bitmap_line_ydxd::y1#1 = bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxd.y1
    // [797] bitmap_line_ydxd::yd#1 = bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [798] bitmap_line_ydxd::xd#1 = bitmap_line::xd#1
    // [799] call bitmap_line_ydxd 
    // [854] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
    // [854] phi bitmap_line_ydxd::y1#6 = bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
    // [854] phi bitmap_line_ydxd::yd#5 = bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
    // [854] phi bitmap_line_ydxd::y#7 = bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
    // [854] phi bitmap_line_ydxd::x#5 = bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
    // [854] phi bitmap_line_ydxd::xd#2 = bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    rts
    // bitmap_line::@12
  __b12:
    // bitmap_line_xdyd(x0, y0, x1, xd, yd)
    // [800] bitmap_line_xdyd::x#1 = bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x
    // [801] bitmap_line_xdyd::y#1 = bitmap_line::y0#0
    // [802] bitmap_line_xdyd::x1#1 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x1
    // [803] bitmap_line_xdyd::xd#1 = bitmap_line::xd#1
    // [804] bitmap_line_xdyd::yd#1 = bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [805] call bitmap_line_xdyd 
    // [869] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
    // [869] phi bitmap_line_xdyd::x1#6 = bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
    // [869] phi bitmap_line_xdyd::xd#5 = bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
    // [869] phi bitmap_line_xdyd::y#5 = bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
    // [869] phi bitmap_line_xdyd::x#6 = bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
    // [869] phi bitmap_line_xdyd::yd#2 = bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    rts
    // bitmap_line::@11
  __b11:
    // yd = y1-y0
    // [806] bitmap_line::yd#11 = bitmap_line::y1#0 - bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z y1
    tay
    // if(yd<xd)
    // [807] if(bitmap_line::yd#11<bitmap_line::xd#1) goto bitmap_line::@13 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b13
    // bitmap_line::@14
    // bitmap_line_ydxi(y0, x0, y1, yd, xd)
    // [808] bitmap_line_ydxi::y#1 = bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxi.y
    // [809] bitmap_line_ydxi::x#1 = bitmap_line::x0#0
    // [810] bitmap_line_ydxi::y1#1 = bitmap_line::y1#0
    // [811] bitmap_line_ydxi::yd#1 = bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [812] bitmap_line_ydxi::xd#1 = bitmap_line::xd#1
    // [813] call bitmap_line_ydxi 
    // [824] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
    // [824] phi bitmap_line_ydxi::y1#6 = bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
    // [824] phi bitmap_line_ydxi::yd#5 = bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
    // [824] phi bitmap_line_ydxi::y#6 = bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
    // [824] phi bitmap_line_ydxi::x#5 = bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
    // [824] phi bitmap_line_ydxi::xd#2 = bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    rts
    // bitmap_line::@13
  __b13:
    // bitmap_line_xdyi(x0, y0, x1, xd, yd)
    // [814] bitmap_line_xdyi::x#1 = bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x
    // [815] bitmap_line_xdyi::y#1 = bitmap_line::y0#0
    // [816] bitmap_line_xdyi::x1#1 = bitmap_line::x1#0
    // [817] bitmap_line_xdyi::xd#1 = bitmap_line::xd#1
    // [818] bitmap_line_xdyi::yd#1 = bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [819] call bitmap_line_xdyi 
    // [839] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
    // [839] phi bitmap_line_xdyi::x1#6 = bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
    // [839] phi bitmap_line_xdyi::xd#5 = bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
    // [839] phi bitmap_line_xdyi::y#5 = bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
    // [839] phi bitmap_line_xdyi::x#6 = bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
    // [839] phi bitmap_line_xdyi::yd#2 = bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    rts
}
  // dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    // *cpuBank = cpuBankIdx
    // [821] *dtvSetCpuBankSegment1::cpuBank = dtvSetCpuBankSegment1::cpuBankIdx#3 -- _deref_pbuc1=vbuaa 
    sta cpuBank
    // asm
    // asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda.z $ff
    .byte $32, $00
    // dtvSetCpuBankSegment1::@return
    // }
    // [823] return 
    rts
}
  // bitmap_line_ydxi
// bitmap_line_ydxi(byte zp($a) y, byte zp($f) x, byte zp($e) y1, byte zp($d) yd, byte zp($c) xd)
bitmap_line_ydxi: {
    .label y = $a
    .label x = $f
    .label y1 = $e
    .label yd = $d
    .label xd = $c
    .label e = $10
    // e = xd>>1
    // [825] bitmap_line_ydxi::e#0 = bitmap_line_ydxi::xd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [826] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
    // [826] phi bitmap_line_ydxi::e#3 = bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
    // [826] phi bitmap_line_ydxi::y#3 = bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
    // [826] phi bitmap_line_ydxi::x#3 = bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    // bitmap_line_ydxi::@1
  __b1:
    // bitmap_plot(x,y)
    // [827] bitmap_plot::x#2 = bitmap_line_ydxi::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [828] bitmap_plot::y#2 = bitmap_line_ydxi::y#3 -- vbuxx=vbuz1 
    ldx.z y
    // [829] call bitmap_plot 
    // [884] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
    // [884] phi bitmap_plot::y#4 = bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
    // [884] phi bitmap_plot::x#4 = bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_ydxi::@4
    // y++;
    // [830] bitmap_line_ydxi::y#2 = ++ bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // e = e+xd
    // [831] bitmap_line_ydxi::e#1 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // if(yd<e)
    // [832] if(bitmap_line_ydxi::yd#5>=bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2
    // bitmap_line_ydxi::@3
    // x++;
    // [833] bitmap_line_ydxi::x#2 = ++ bitmap_line_ydxi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // e = e - yd
    // [834] bitmap_line_ydxi::e#2 = bitmap_line_ydxi::e#1 - bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [835] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
    // [835] phi bitmap_line_ydxi::e#6 = bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
    // [835] phi bitmap_line_ydxi::x#6 = bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    // bitmap_line_ydxi::@2
  __b2:
    // y1+1
    // [836] bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#6 + 1 -- vbuxx=vbuz1_plus_1 
    ldx.z y1
    inx
    // while (y!=(y1+1))
    // [837] if(bitmap_line_ydxi::y#2!=bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z y
    bne __b1
    // bitmap_line_ydxi::@return
    // }
    // [838] return 
    rts
}
  // bitmap_line_xdyi
// bitmap_line_xdyi(byte zp($a) x, byte register(X) y, byte zp($10) x1, byte zp($c) xd, byte zp($d) yd)
bitmap_line_xdyi: {
    .label x = $a
    .label x1 = $10
    .label xd = $c
    .label yd = $d
    .label e = $b
    // e = yd>>1
    // [840] bitmap_line_xdyi::e#0 = bitmap_line_xdyi::yd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [841] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
    // [841] phi bitmap_line_xdyi::e#3 = bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
    // [841] phi bitmap_line_xdyi::y#3 = bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
    // [841] phi bitmap_line_xdyi::x#3 = bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    // bitmap_line_xdyi::@1
  __b1:
    // bitmap_plot(x,y)
    // [842] bitmap_plot::x#0 = bitmap_line_xdyi::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [843] bitmap_plot::y#0 = bitmap_line_xdyi::y#3
    // [844] call bitmap_plot 
    // [884] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
    // [884] phi bitmap_plot::y#4 = bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
    // [884] phi bitmap_plot::x#4 = bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_xdyi::@4
    // x++;
    // [845] bitmap_line_xdyi::x#2 = ++ bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // e = e+yd
    // [846] bitmap_line_xdyi::e#1 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // if(xd<e)
    // [847] if(bitmap_line_xdyi::xd#5>=bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2
    // bitmap_line_xdyi::@3
    // y++;
    // [848] bitmap_line_xdyi::y#2 = ++ bitmap_line_xdyi::y#3 -- vbuxx=_inc_vbuxx 
    inx
    // e = e - xd
    // [849] bitmap_line_xdyi::e#2 = bitmap_line_xdyi::e#1 - bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [850] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
    // [850] phi bitmap_line_xdyi::e#6 = bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
    // [850] phi bitmap_line_xdyi::y#6 = bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    // bitmap_line_xdyi::@2
  __b2:
    // x1+1
    // [851] bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#6 + 1 -- vbuaa=vbuz1_plus_1 
    lda.z x1
    clc
    adc #1
    // while (x!=(x1+1))
    // [852] if(bitmap_line_xdyi::x#2!=bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z x
    bne __b1
    // bitmap_line_xdyi::@return
    // }
    // [853] return 
    rts
}
  // bitmap_line_ydxd
// bitmap_line_ydxd(byte zp($a) y, byte zp($f) x, byte zp($e) y1, byte zp($b) yd, byte zp($c) xd)
bitmap_line_ydxd: {
    .label y = $a
    .label x = $f
    .label y1 = $e
    .label yd = $b
    .label xd = $c
    .label e = $d
    // e = xd>>1
    // [855] bitmap_line_ydxd::e#0 = bitmap_line_ydxd::xd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [856] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
    // [856] phi bitmap_line_ydxd::e#3 = bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
    // [856] phi bitmap_line_ydxd::y#2 = bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
    // [856] phi bitmap_line_ydxd::x#3 = bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    // bitmap_line_ydxd::@1
  __b1:
    // bitmap_plot(x,y)
    // [857] bitmap_plot::x#3 = bitmap_line_ydxd::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [858] bitmap_plot::y#3 = bitmap_line_ydxd::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [859] call bitmap_plot 
    // [884] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
    // [884] phi bitmap_plot::y#4 = bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
    // [884] phi bitmap_plot::x#4 = bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_ydxd::@4
    // y = y++;
    // [860] bitmap_line_ydxd::y#3 = ++ bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // e = e+xd
    // [861] bitmap_line_ydxd::e#1 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // if(yd<e)
    // [862] if(bitmap_line_ydxd::yd#5>=bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2
    // bitmap_line_ydxd::@3
    // x--;
    // [863] bitmap_line_ydxd::x#2 = -- bitmap_line_ydxd::x#3 -- vbuz1=_dec_vbuz1 
    dec.z x
    // e = e - yd
    // [864] bitmap_line_ydxd::e#2 = bitmap_line_ydxd::e#1 - bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [865] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
    // [865] phi bitmap_line_ydxd::e#6 = bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
    // [865] phi bitmap_line_ydxd::x#6 = bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    // bitmap_line_ydxd::@2
  __b2:
    // y1+1
    // [866] bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#6 + 1 -- vbuxx=vbuz1_plus_1 
    ldx.z y1
    inx
    // while (y!=(y1+1))
    // [867] if(bitmap_line_ydxd::y#3!=bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z y
    bne __b1
    // bitmap_line_ydxd::@return
    // }
    // [868] return 
    rts
}
  // bitmap_line_xdyd
// bitmap_line_xdyd(byte zp($d) x, byte register(X) y, byte zp($f) x1, byte zp($c) xd, byte zp($a) yd)
bitmap_line_xdyd: {
    .label x = $d
    .label x1 = $f
    .label xd = $c
    .label yd = $a
    .label e = $b
    // e = yd>>1
    // [870] bitmap_line_xdyd::e#0 = bitmap_line_xdyd::yd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [871] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
    // [871] phi bitmap_line_xdyd::e#3 = bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
    // [871] phi bitmap_line_xdyd::y#3 = bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
    // [871] phi bitmap_line_xdyd::x#3 = bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    // bitmap_line_xdyd::@1
  __b1:
    // bitmap_plot(x,y)
    // [872] bitmap_plot::x#1 = bitmap_line_xdyd::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [873] bitmap_plot::y#1 = bitmap_line_xdyd::y#3
    // [874] call bitmap_plot 
    // [884] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
    // [884] phi bitmap_plot::y#4 = bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
    // [884] phi bitmap_plot::x#4 = bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_xdyd::@4
    // x++;
    // [875] bitmap_line_xdyd::x#2 = ++ bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // e = e+yd
    // [876] bitmap_line_xdyd::e#1 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // if(xd<e)
    // [877] if(bitmap_line_xdyd::xd#5>=bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2
    // bitmap_line_xdyd::@3
    // y--;
    // [878] bitmap_line_xdyd::y#2 = -- bitmap_line_xdyd::y#3 -- vbuxx=_dec_vbuxx 
    dex
    // e = e - xd
    // [879] bitmap_line_xdyd::e#2 = bitmap_line_xdyd::e#1 - bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [880] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
    // [880] phi bitmap_line_xdyd::e#6 = bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
    // [880] phi bitmap_line_xdyd::y#6 = bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    // bitmap_line_xdyd::@2
  __b2:
    // x1+1
    // [881] bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#6 + 1 -- vbuaa=vbuz1_plus_1 
    lda.z x1
    clc
    adc #1
    // while (x!=(x1+1))
    // [882] if(bitmap_line_xdyd::x#2!=bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z x
    bne __b1
    // bitmap_line_xdyd::@return
    // }
    // [883] return 
    rts
}
  // bitmap_plot
// bitmap_plot(byte register(Y) x, byte register(X) y)
bitmap_plot: {
    .label plotter_x = $11
    .label plotter_y = $13
    .label plotter = $11
    // plotter_x = { bitmap_plot_xhi[x], bitmap_plot_xlo[x] }
    // [885] bitmap_plot::plotter_x#0 = bitmap_plot_xhi[bitmap_plot::x#4] w= bitmap_plot_xlo[bitmap_plot::x#4] -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_xhi,y
    sta.z plotter_x+1
    lda bitmap_plot_xlo,y
    sta.z plotter_x
    // plotter_y = { bitmap_plot_yhi[y], bitmap_plot_ylo[y] }
    // [886] bitmap_plot::plotter_y#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta.z plotter_y+1
    lda bitmap_plot_ylo,x
    sta.z plotter_y
    // plotter_x+plotter_y
    // [887] bitmap_plot::plotter#0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter+1
    adc.z plotter_y+1
    sta.z plotter+1
    // *plotter | bitmap_plot_bit[x]
    // [888] bitmap_plot::$1 = *((byte*)bitmap_plot::plotter#0) | bitmap_plot_bit[bitmap_plot::x#4] -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuyy 
    lda bitmap_plot_bit,y
    ldy #0
    ora (plotter),y
    // *plotter = *plotter | bitmap_plot_bit[x]
    // [889] *((byte*)bitmap_plot::plotter#0) = bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    sta (plotter),y
    // bitmap_plot::@return
    // }
    // [890] return 
    rts
}
  // File Data
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  MENU_TEXT: .text "C64DTV Graphics Modes            CCLHBME@                                 OHIIMCC@                                 LUNCMMM@----------------------------------------@1. Standard Char             (V) 0000000@2. Extended Color Char       (V) 0000001@3. Multicolor Char           (V) 0000010@4. Standard Bitmap           (V) 0000100@5. Multicolor Bitmap         (V) 0000110@6. High Color Standard Char  (H) 0001000@7. High Extended Color Char  (H) 0001001@8. High Multicolor Char      (H) 0001010@9. High Multicolor Bitmap    (H) 0001110@a. Sixs Fred 2               (D) 0010111@b. Two Plane Bitmap          (D) 0011101@c. Sixs Fred (2 Plane MC BM) (D) 0011111@d. 8bpp Pixel Cell           (D) 0111011@e. Chunky 8bpp Bitmap        (D) 1111011@----------------------------------------@    (V) vicII (H) vicII+hicol (D) c64dtv@"
  .byte 0

