Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  fileCur#13 = phi( __start::@1/fileCur#15 )
  fileTop#5 = phi( __start::@1/fileTop#12 )
  main::$0 = fileTop#5 == filesEnd
  main::$1 = ! main::$0
  if(main::$1) goto main::@1
  to:main::@4
main::@1: scope:[main]  from main main::@4
  fileTop#13 = phi( main/fileTop#5, main::@4/fileTop#0 )
  fileCur#6 = phi( main/fileCur#13, main::@4/fileCur#14 )
  main::$2 = file <= fileCur#6
  main::$3 = ! main::$2
  if(main::$3) goto main::@2
  to:main::@5
main::@4: scope:[main]  from main
  fileCur#14 = phi( main/fileCur#13 )
  fileTop#6 = phi( main/fileTop#5 )
  fileTop#0 = -- fileTop#6
  to:main::@1
main::@2: scope:[main]  from main::@1 main::@5
  fileTop#7 = phi( main::@1/fileTop#13, main::@5/fileTop#14 )
  fileCur#7 = phi( main::@1/fileCur#6, main::@5/fileCur#0 )
  main::$4 = fileCur#7 < fileTop#7
  main::$5 = ! main::$4
  if(main::$5) goto main::@3
  to:main::@6
main::@5: scope:[main]  from main::@1
  fileTop#14 = phi( main::@1/fileTop#13 )
  fileCur#8 = phi( main::@1/fileCur#6 )
  fileCur#0 = -- fileCur#8
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@6
  fileTop#15 = phi( main::@2/fileTop#7, main::@6/fileTop#8 )
  fileCur#9 = phi( main::@2/fileCur#7, main::@6/fileCur#1 )
  SCREEN[0] = *fileCur#9
  to:main::@return
main::@6: scope:[main]  from main::@2
  fileTop#8 = phi( main::@2/fileTop#7 )
  fileCur#1 = fileTop#8
  to:main::@3
main::@return: scope:[main]  from main::@3
  fileCur#10 = phi( main::@3/fileCur#9 )
  fileTop#9 = phi( main::@3/fileTop#15 )
  fileTop#1 = fileTop#9
  fileCur#2 = fileCur#10
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  fileCur#3 = (byte*)$1005
  fileTop#2 = (byte*)$1010
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  fileCur#15 = phi( __start::__init1/fileCur#3 )
  fileTop#12 = phi( __start::__init1/fileTop#2 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  fileCur#11 = phi( __start::@1/fileCur#2 )
  fileTop#10 = phi( __start::@1/fileTop#1 )
  fileTop#3 = fileTop#10
  fileCur#4 = fileCur#11
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  fileTop#11 = phi( __start::@2/fileTop#3 )
  fileCur#12 = phi( __start::@2/fileCur#4 )
  fileCur#5 = fileCur#12
  fileTop#4 = fileTop#11
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
const byte* file = (byte*)$1000
byte* fileCur
byte* fileCur#0
byte* fileCur#1
byte* fileCur#10
byte* fileCur#11
byte* fileCur#12
byte* fileCur#13
byte* fileCur#14
byte* fileCur#15
byte* fileCur#2
byte* fileCur#3
byte* fileCur#4
byte* fileCur#5
byte* fileCur#6
byte* fileCur#7
byte* fileCur#8
byte* fileCur#9
byte* fileTop
byte* fileTop#0
byte* fileTop#1
byte* fileTop#10
byte* fileTop#11
byte* fileTop#12
byte* fileTop#13
byte* fileTop#14
byte* fileTop#15
byte* fileTop#2
byte* fileTop#3
byte* fileTop#4
byte* fileTop#5
byte* fileTop#6
byte* fileTop#7
byte* fileTop#8
byte* fileTop#9
const byte* filesEnd = (byte*)$1010
void main()
bool~ main::$0
bool~ main::$1
bool~ main::$2
bool~ main::$3
bool~ main::$4
bool~ main::$5

Adding number conversion cast (unumber) 0 in SCREEN[0] = *fileCur#9
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 4112
Simplifying constant pointer cast (byte*) 4096
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 4101
Simplifying constant pointer cast (byte*) 4112
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [2] main::$1 = fileTop#5 != filesEnd from [1] main::$0 = fileTop#5 == filesEnd
Inversing boolean not [6] main::$3 = file > fileCur#6 from [5] main::$2 = file <= fileCur#6
Inversing boolean not [12] main::$5 = fileCur#7 >= fileTop#7 from [11] main::$4 = fileCur#7 < fileTop#7
Successful SSA optimization Pass2UnaryNotSimplification
Alias fileTop#5 = fileTop#6 
Alias fileCur#13 = fileCur#14 
Alias fileCur#6 = fileCur#8 
Alias fileTop#13 = fileTop#14 
Alias fileTop#7 = fileTop#8 fileCur#1 
Alias fileTop#1 = fileTop#9 fileTop#15 
Alias fileCur#10 = fileCur#9 fileCur#2 
Alias fileTop#12 = fileTop#2 
Alias fileCur#15 = fileCur#3 
Alias fileTop#10 = fileTop#3 fileTop#11 fileTop#4 
Alias fileCur#11 = fileCur#4 fileCur#12 fileCur#5 
Successful SSA optimization Pass2AliasElimination
Alias fileCur#13 = fileCur#6 
Alias fileTop#1 = fileTop#7 fileTop#13 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values fileTop#5 fileTop#12
Identical Phi Values fileCur#13 fileCur#15
Identical Phi Values fileTop#10 fileTop#1
Identical Phi Values fileCur#11 fileCur#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$1 [2] if(fileTop#12!=filesEnd) goto main::@1
Simple Condition main::$3 [5] if(file>fileCur#15) goto main::@2
Simple Condition main::$5 [9] if(fileCur#7>=fileTop#1) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant fileCur#15 = (byte*) 4101
Constant fileTop#12 = (byte*) 4112
Successful SSA optimization Pass2ConstantIdentification
Removing PHI-reference to removed block (main) in block main::@1
if() condition always false - eliminating [2] if(fileTop#12!=filesEnd) goto main::@1
Removing PHI-reference to removed block (main::@1) in block main::@2
if() condition always false - eliminating [5] if(file>fileCur#15) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero SCREEN in [12] SCREEN[0] = *fileCur#10
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant filesEnd
Eliminating unused constant file
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Alias fileTop#0 = fileTop#1 
Alias fileCur#0 = fileCur#7 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] fileTop#0 = -- fileTop#12
Constant right-side identified [2] fileCur#0 = -- fileCur#15
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant fileTop#0 = --fileTop#12
Constant fileCur#0 = --fileCur#15
Successful SSA optimization Pass2ConstantIdentification
Removing PHI-reference to removed block (main::@2) in block main::@3
if() condition always false - eliminating [1] if(fileCur#0>=fileTop#0) goto main::@3
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant fileCur#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant fileCur#15
Successful SSA optimization PassNEliminateUnusedVars
Identical Phi Values fileCur#10 fileTop#0
Successful SSA optimization Pass2IdenticalPhiElimination
Inlining constant with different constant siblings fileTop#12
Inlining constant with different constant siblings fileTop#0
Constant inlined fileTop#12 = (byte*) 4112
Constant inlined fileTop#0 = --(byte*) 4112
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@6
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label main::@1
Culled Empty Block label main::@5
Culled Empty Block label main::@2
Culled Empty Block label main::@6
Renumbering block main::@3 to main::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main
  [1] *SCREEN = *(--(byte*) 4112)
  to:main::@return
main::@return: scope:[main]  from main::@1
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte* fileCur
byte* fileTop
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *SCREEN = *(--(byte*) 4112) [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 47 combination 
Uplifting [] best 47 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    jmp __b1
    // main::@1
  __b1:
    // [1] *SCREEN = *(--(byte*) 4112) -- _deref_pbuc1=_deref_pbuc2 
    lda $1010-1
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
byte* fileCur
byte* fileTop
void main()



FINAL ASSEMBLER
Score: 14

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // main::@1
    // SCREEN[0] = *fileCur
    // [1] *SCREEN = *(--(byte*) 4112) -- _deref_pbuc1=_deref_pbuc2 
    lda $1010-1
    sta SCREEN
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

