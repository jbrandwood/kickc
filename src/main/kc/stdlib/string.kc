// Standard C strings.h - functions to manipulate C strings and arrays.

// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
void* memcpy( void* destination, void* source, word num ) {
    byte* src = source;
    byte* dst = destination;
    for( word i=0; i<num; i++) *dst++ = *src++;
    return destination;
}

// Move block of memory
// Copies the values of num bytes from the location pointed by source to the memory block pointed by destination. Copying takes place as if an intermediate buffer were used, allowing the destination and source to overlap.
void* memmove( void* destination, void* source, word num ) {
    if((word)destination<(word)source) {
        memcpy(destination, source, num);
    } else {
        // copy backwards
        byte* src = source+num;
        byte* dst = destination+num;
        for( word i=0; i<num; i++) *--dst = *--src;
    }
    return destination;
}

// Copies the C string pointed by source into the array pointed by destination, including the terminating null character (and stopping at that point).
byte* strcpy( byte* destination, byte* source ) {
    byte* src = source;
    byte* dst = destination;
    while(*src) *dst++ = *src++;
    *dst = 0;
    return destination;
}