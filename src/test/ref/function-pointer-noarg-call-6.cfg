@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte*) main::cols#2 ← phi( main/(byte*) 55296 main::@2/(byte*) main::cols#1 )
  [6] if((byte*) main::cols#2<(word)(number) $d800+(number) $3e8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call fn1 
  [10] *((byte*) main::cols#2) ← ++ *((byte*) main::cols#2)
  [11] (byte*) main::cols#1 ← ++ (byte*) main::cols#2
  to:main::@1

(void()) fn1()
fn1: scope:[fn1]  from main::@2
  [12] phi()
  to:fn1::@1
fn1::@1: scope:[fn1]  from fn1 fn1::@2
  [13] (byte*) fn1::screen#2 ← phi( fn1/(byte*) 1024 fn1::@2/(byte*) fn1::screen#1 )
  [14] if((byte*) fn1::screen#2<(word)(number) $400+(number) $3e8) goto fn1::@2
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1::@1
  [15] return 
  to:@return
fn1::@2: scope:[fn1]  from fn1::@1
  [16] *((byte*) fn1::screen#2) ← ++ *((byte*) fn1::screen#2)
  [17] (byte*) fn1::screen#1 ← ++ (byte*) fn1::screen#2
  to:fn1::@1
