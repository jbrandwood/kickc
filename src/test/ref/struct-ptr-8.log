
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$0 = 2 + main::i#2
  main::$4 = main::i#2 * SIZEOF_STRUCT_POINT
  ((byte*)points+OFFSET_STRUCT_POINT_X)[main::$4] = main::$0
  main::$1 = 3 + main::i#2
  main::$5 = main::i#2 * SIZEOF_STRUCT_POINT
  ((byte*)points+OFFSET_STRUCT_POINT_Y)[main::$5] = main::$1
  main::i#1 = main::i#2 + rangenext(0,1)
  main::$2 = main::i#1 != rangelast(0,1)
  if(main::$2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::idx#0 = 0
  main::i1#0 = 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  main::idx#4 = phi( main::@2/main::idx#0, main::@3/main::idx#3 )
  main::i1#2 = phi( main::@2/main::i1#0, main::@3/main::i1#1 )
  main::$6 = main::i1#2 * SIZEOF_STRUCT_POINT
  main::SCREEN[main::idx#4] = ((byte*)points+OFFSET_STRUCT_POINT_X)[main::$6]
  main::idx#1 = ++ main::idx#4
  main::$7 = main::i1#2 * SIZEOF_STRUCT_POINT
  main::SCREEN[main::idx#1] = ((byte*)points+OFFSET_STRUCT_POINT_Y)[main::$7]
  main::idx#2 = ++ main::idx#1
  main::SCREEN[main::idx#2] = ' '
  main::idx#3 = ++ main::idx#2
  main::i1#1 = main::i1#2 + rangenext(0,1)
  main::$3 = main::i1#1 != rangelast(0,1)
  if(main::$3) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const byte OFFSET_STRUCT_POINT_X = 0
const byte OFFSET_STRUCT_POINT_Y = 1
const byte SIZEOF_STRUCT_POINT = 2
void __start()
void main()
number~ main::$0
number~ main::$1
bool~ main::$2
bool~ main::$3
byte~ main::$4
byte~ main::$5
byte~ main::$6
byte~ main::$7
const nomodify byte* main::SCREEN = (byte*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i1
byte main::i1#0
byte main::i1#1
byte main::i1#2
byte main::idx
byte main::idx#0
byte main::idx#1
byte main::idx#2
byte main::idx#3
byte main::idx#4
const struct Point* points[2]  = { fill( 2, 0) }

Adding number conversion cast (unumber) 2 in main::$0 = 2 + main::i#2
Adding number conversion cast (unumber) main::$0 in main::$0 = (unumber)2 + main::i#2
Adding number conversion cast (unumber) 3 in main::$1 = 3 + main::i#2
Adding number conversion cast (unumber) main::$1 in main::$1 = (unumber)3 + main::i#2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 2
Finalized unsigned number type 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = 2 + main::i#2
Inferred type updated to byte in main::$1 = 3 + main::i#2
Identified duplicate assignment right side [6] main::$5 = main::i#2 * SIZEOF_STRUCT_POINT
Identified duplicate assignment right side [17] main::$7 = main::i1#2 * SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition main::$2 [10] if(main::i#1!=rangelast(0,1)) goto main::@1
Simple Condition main::$3 [24] if(main::i1#1!=rangelast(0,1)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant main::idx#0 = 0
Constant main::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,1)) goto main::@1 to 2
Resolved ranged next value [22] main::i1#1 = ++ main::i1#2 to ++
Resolved ranged comparison value [24] if(main::i1#1!=rangelast(0,1)) goto main::@3 to 2
Simplifying expression containing zero (byte*)points in [4] ((byte*)points+OFFSET_STRUCT_POINT_X)[main::$4] = main::$0
Simplifying expression containing zero (byte*)points in [15] main::SCREEN[main::idx#4] = ((byte*)points+OFFSET_STRUCT_POINT_X)[main::$6]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 2 in [8] if(main::i#1!=2) goto main::@1
Adding number conversion cast (unumber) 2 in [19] if(main::i1#1!=2) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 2
Finalized unsigned number type 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::$5 = main::$4 
Alias main::$7 = main::$6 
Successful SSA optimization Pass2AliasElimination
Rewriting multiplication to use shift [2] main::$5 = main::i#2 * SIZEOF_STRUCT_POINT
Rewriting multiplication to use shift [9] main::$7 = main::i1#2 * SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::idx#0
Inlining constant with var siblings main::i1#0
Constant inlined main::i#0 = 0
Constant inlined main::i1#0 = 0
Constant inlined main::idx#0 = 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant SIZEOF_STRUCT_POINT
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@4(between main::@1 and main::@1)
Added new block during phi lifting main::@5(between main::@3 and main::@3)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [21] main::i1#3 = main::i1#1
Coalesced [22] main::idx#5 = main::idx#3
Coalesced [23] main::i#3 = main::i#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@2
Culled Empty Block label main::@5
Culled Empty Block label main::@4
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::$0 = 2 + main::i#2
  [3] main::$5 = main::i#2 << 1
  [4] ((byte*)points)[main::$5] = main::$0
  [5] main::$1 = 3 + main::i#2
  [6] ((byte*)points+OFFSET_STRUCT_POINT_Y)[main::$5] = main::$1
  [7] main::i#1 = ++ main::i#2
  [8] if(main::i#1!=2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [9] main::idx#4 = phi( main::@1/0, main::@2/main::idx#3 )
  [9] main::i1#2 = phi( main::@1/0, main::@2/main::i1#1 )
  [10] main::$7 = main::i1#2 << 1
  [11] main::SCREEN[main::idx#4] = ((byte*)points)[main::$7]
  [12] main::idx#1 = ++ main::idx#4
  [13] main::SCREEN[main::idx#1] = ((byte*)points+OFFSET_STRUCT_POINT_Y)[main::$7]
  [14] main::idx#2 = ++ main::idx#1
  [15] main::SCREEN[main::idx#2] = ' '
  [16] main::idx#3 = ++ main::idx#2
  [17] main::i1#1 = ++ main::i1#2
  [18] if(main::i1#1!=2) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [19] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$0 11.0
byte~ main::$1 22.0
byte~ main::$5 11.0
byte~ main::$7 11.0
byte main::i
byte main::i#1 16.5
byte main::i#2 9.166666666666666
byte main::i1
byte main::i1#1 16.5
byte main::i1#2 4.125
byte main::idx
byte main::idx#1 16.5
byte main::idx#2 16.5
byte main::idx#3 7.333333333333333
byte main::idx#4 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::idx#4 main::idx#3 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable main::$7 to live range equivalence class [ main::$7 ]
Added variable main::idx#1 to live range equivalence class [ main::idx#1 ]
Added variable main::idx#2 to live range equivalence class [ main::idx#2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::idx#4 main::idx#3 ]
[ main::$0 ]
[ main::$5 ]
[ main::$1 ]
[ main::$7 ]
[ main::idx#1 ]
[ main::idx#2 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::i1#2 main::i1#1 ]
Allocated zp[1]:4 [ main::idx#4 main::idx#3 ]
Allocated zp[1]:5 [ main::$0 ]
Allocated zp[1]:6 [ main::$5 ]
Allocated zp[1]:7 [ main::$1 ]
Allocated zp[1]:8 [ main::$7 ]
Allocated zp[1]:9 [ main::idx#1 ]
Allocated zp[1]:10 [ main::idx#2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] main::$5 = main::i#2 << 1 [ main::i#2 main::$0 main::$5 ] (  [ main::i#2 main::$0 main::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::$0 ]
Statement [4] ((byte*)points)[main::$5] = main::$0 [ main::i#2 main::$5 ] (  [ main::i#2 main::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::$5 ]
Statement [5] main::$1 = 3 + main::i#2 [ main::i#2 main::$5 main::$1 ] (  [ main::i#2 main::$5 main::$1 ] { }  ) always clobbers reg byte a 
Statement [10] main::$7 = main::i1#2 << 1 [ main::i1#2 main::idx#4 main::$7 ] (  [ main::i1#2 main::idx#4 main::$7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i1#2 main::i1#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::idx#4 main::idx#3 ]
Statement [11] main::SCREEN[main::idx#4] = ((byte*)points)[main::$7] [ main::i1#2 main::idx#4 main::$7 ] (  [ main::i1#2 main::idx#4 main::$7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::$7 ]
Statement [13] main::SCREEN[main::idx#1] = ((byte*)points+OFFSET_STRUCT_POINT_Y)[main::$7] [ main::i1#2 main::idx#1 ] (  [ main::i1#2 main::idx#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ main::idx#1 ]
Statement [15] main::SCREEN[main::idx#2] = ' ' [ main::i1#2 main::idx#2 ] (  [ main::i1#2 main::idx#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ main::idx#2 ]
Statement [2] main::$0 = 2 + main::i#2 [ main::i#2 main::$0 ] (  [ main::i#2 main::$0 ] { }  ) always clobbers reg byte a 
Statement [3] main::$5 = main::i#2 << 1 [ main::i#2 main::$0 main::$5 ] (  [ main::i#2 main::$0 main::$5 ] { }  ) always clobbers reg byte a 
Statement [4] ((byte*)points)[main::$5] = main::$0 [ main::i#2 main::$5 ] (  [ main::i#2 main::$5 ] { }  ) always clobbers reg byte a 
Statement [5] main::$1 = 3 + main::i#2 [ main::i#2 main::$5 main::$1 ] (  [ main::i#2 main::$5 main::$1 ] { }  ) always clobbers reg byte a 
Statement [10] main::$7 = main::i1#2 << 1 [ main::i1#2 main::idx#4 main::$7 ] (  [ main::i1#2 main::idx#4 main::$7 ] { }  ) always clobbers reg byte a 
Statement [11] main::SCREEN[main::idx#4] = ((byte*)points)[main::$7] [ main::i1#2 main::idx#4 main::$7 ] (  [ main::i1#2 main::idx#4 main::$7 ] { }  ) always clobbers reg byte a 
Statement [13] main::SCREEN[main::idx#1] = ((byte*)points+OFFSET_STRUCT_POINT_Y)[main::$7] [ main::i1#2 main::idx#1 ] (  [ main::i1#2 main::idx#1 ] { }  ) always clobbers reg byte a 
Statement [15] main::SCREEN[main::idx#2] = ' ' [ main::i1#2 main::idx#2 ] (  [ main::i1#2 main::idx#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i1#2 main::i1#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::idx#4 main::idx#3 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$0 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::$5 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$1 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::$7 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ main::idx#1 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ main::idx#2 ] : zp[1]:10 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 25.67: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:7 [ main::$1 ] 20.62: zp[1]:3 [ main::i1#2 main::i1#1 ] 18.33: zp[1]:4 [ main::idx#4 main::idx#3 ] 16.5: zp[1]:9 [ main::idx#1 ] 16.5: zp[1]:10 [ main::idx#2 ] 11: zp[1]:5 [ main::$0 ] 11: zp[1]:6 [ main::$5 ] 11: zp[1]:8 [ main::$7 ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [main] best 1586 combination zp[1]:2 [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] zp[1]:3 [ main::i1#2 main::i1#1 ] reg byte x [ main::idx#4 main::idx#3 ] zp[1]:9 [ main::idx#1 ] zp[1]:10 [ main::idx#2 ] zp[1]:5 [ main::$0 ] zp[1]:6 [ main::$5 ] zp[1]:8 [ main::$7 ] 
Limited combination testing to 100 combinations of 26244 possible.
Uplifting [Point] best 1586 combination 
Uplifting [] best 1586 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 1586 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::i1#2 main::i1#1 ]
Uplifting [main] best 1586 combination zp[1]:3 [ main::i1#2 main::i1#1 ] 
Attempting to uplift remaining variables inzp[1]:9 [ main::idx#1 ]
Uplifting [main] best 1496 combination reg byte x [ main::idx#1 ] 
Attempting to uplift remaining variables inzp[1]:10 [ main::idx#2 ]
Uplifting [main] best 1406 combination reg byte x [ main::idx#2 ] 
Attempting to uplift remaining variables inzp[1]:5 [ main::$0 ]
Uplifting [main] best 1366 combination reg byte x [ main::$0 ] 
Attempting to uplift remaining variables inzp[1]:6 [ main::$5 ]
Uplifting [main] best 1296 combination reg byte y [ main::$5 ] 
Attempting to uplift remaining variables inzp[1]:8 [ main::$7 ]
Uplifting [main] best 1226 combination reg byte y [ main::$7 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct -  variable array access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // main
main: {
    .label SCREEN = $400
    .label i = 2
    .label i1 = 3
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$0 = 2 + main::i#2 -- vbuxx=vbuc1_plus_vbuz1 
    lax.z i
    axs #-[2]
    // [3] main::$5 = main::i#2 << 1 -- vbuyy=vbuz1_rol_1 
    lda.z i
    asl
    tay
    // [4] ((byte*)points)[main::$5] = main::$0 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta points,y
    // [5] main::$1 = 3 + main::i#2 -- vbuaa=vbuc1_plus_vbuz1 
    lda #3
    clc
    adc.z i
    // [6] ((byte*)points+OFFSET_STRUCT_POINT_Y)[main::$5] = main::$1 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta points+OFFSET_STRUCT_POINT_Y,y
    // [7] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [8] if(main::i#1!=2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i
    bne __b1_from___b1
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [9] phi main::idx#4 = 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [9] phi main::i1#2 = 0 [phi:main::@1->main::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    jmp __b2
    // [9] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [9] phi main::idx#4 = main::idx#3 [phi:main::@2->main::@2#0] -- register_copy 
    // [9] phi main::i1#2 = main::i1#1 [phi:main::@2->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [10] main::$7 = main::i1#2 << 1 -- vbuyy=vbuz1_rol_1 
    lda.z i1
    asl
    tay
    // [11] main::SCREEN[main::idx#4] = ((byte*)points)[main::$7] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points,y
    sta SCREEN,x
    // [12] main::idx#1 = ++ main::idx#4 -- vbuxx=_inc_vbuxx 
    inx
    // [13] main::SCREEN[main::idx#1] = ((byte*)points+OFFSET_STRUCT_POINT_Y)[main::$7] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN,x
    // [14] main::idx#2 = ++ main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // [15] main::SCREEN[main::idx#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [16] main::idx#3 = ++ main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [17] main::i1#1 = ++ main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [18] if(main::i1#1!=2) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i1
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [19] return 
    rts
}
  // File Data
  points: .fill 2*2, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const byte OFFSET_STRUCT_POINT_Y = 1
void main()
byte~ main::$0 reg byte x 11.0
byte~ main::$1 reg byte a 22.0
byte~ main::$5 reg byte y 11.0
byte~ main::$7 reg byte y 11.0
const nomodify byte* main::SCREEN = (byte*) 1024
byte main::i
byte main::i#1 i zp[1]:2 16.5
byte main::i#2 i zp[1]:2 9.166666666666666
byte main::i1
byte main::i1#1 i1 zp[1]:3 16.5
byte main::i1#2 i1 zp[1]:3 4.125
byte main::idx
byte main::idx#1 reg byte x 16.5
byte main::idx#2 reg byte x 16.5
byte main::idx#3 reg byte x 7.333333333333333
byte main::idx#4 reg byte x 11.0
const struct Point* points[2]  = { fill( 2, 0) }

zp[1]:2 [ main::i#2 main::i#1 ]
zp[1]:3 [ main::i1#2 main::i1#1 ]
reg byte x [ main::idx#4 main::idx#3 ]
reg byte x [ main::$0 ]
reg byte y [ main::$5 ]
reg byte a [ main::$1 ]
reg byte y [ main::$7 ]
reg byte x [ main::idx#1 ]
reg byte x [ main::idx#2 ]


FINAL ASSEMBLER
Score: 1076

  // File Comments
// Minimal struct -  variable array access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // main
main: {
    .label SCREEN = $400
    .label i = 2
    .label i1 = 3
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // 2+i
    // [2] main::$0 = 2 + main::i#2 -- vbuxx=vbuc1_plus_vbuz1 
    lax.z i
    axs #-[2]
    // points[i].x = 2+i
    // [3] main::$5 = main::i#2 << 1 -- vbuyy=vbuz1_rol_1 
    lda.z i
    asl
    tay
    // [4] ((byte*)points)[main::$5] = main::$0 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta points,y
    // 3+i
    // [5] main::$1 = 3 + main::i#2 -- vbuaa=vbuc1_plus_vbuz1 
    lda #3
    clc
    adc.z i
    // points[i].y = 3+i
    // [6] ((byte*)points+OFFSET_STRUCT_POINT_Y)[main::$5] = main::$1 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta points+OFFSET_STRUCT_POINT_Y,y
    // for( byte i: 0..1)
    // [7] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [8] if(main::i#1!=2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i
    bne __b1
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [9] phi main::idx#4 = 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [9] phi main::i1#2 = 0 [phi:main::@1->main::@2#1] -- vbuz1=vbuc1 
    txa
    sta.z i1
    // [9] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [9] phi main::idx#4 = main::idx#3 [phi:main::@2->main::@2#0] -- register_copy 
    // [9] phi main::i1#2 = main::i1#1 [phi:main::@2->main::@2#1] -- register_copy 
    // main::@2
  __b2:
    // SCREEN[idx++] = points[i].x
    // [10] main::$7 = main::i1#2 << 1 -- vbuyy=vbuz1_rol_1 
    lda.z i1
    asl
    tay
    // [11] main::SCREEN[main::idx#4] = ((byte*)points)[main::$7] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points,y
    sta SCREEN,x
    // SCREEN[idx++] = points[i].x;
    // [12] main::idx#1 = ++ main::idx#4 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = points[i].y
    // [13] main::SCREEN[main::idx#1] = ((byte*)points+OFFSET_STRUCT_POINT_Y)[main::$7] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN,x
    // SCREEN[idx++] = points[i].y;
    // [14] main::idx#2 = ++ main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = ' '
    // [15] main::SCREEN[main::idx#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // SCREEN[idx++] = ' ';
    // [16] main::idx#3 = ++ main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // for( byte i: 0..1)
    // [17] main::i1#1 = ++ main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [18] if(main::i1#1!=2) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i1
    bne __b2
    // main::@return
    // }
    // [19] return 
    rts
}
  // File Data
  points: .fill 2*2, 0

