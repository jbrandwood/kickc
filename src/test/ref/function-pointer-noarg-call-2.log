Resolved forward reference fn1 to (void()) fn1()
Resolved forward reference fn2 to (void()) fn2()

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (void()*) main::f#0 ← (void()*) 0
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#4 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← ++ (byte) main::i#2
  (number~) main::$0 ← (byte) main::i#1 & (number) 1
  (bool~) main::$1 ← (number~) main::$0 == (number) 0
  if((bool~) main::$1) goto main::@3
  to:main::@5
main::@3: scope:[main]  from main::@2
  (byte) main::i#5 ← phi( main::@2/(byte) main::i#1 )
  (void()*) main::f#1 ← &(void()) fn1()
  to:main::@4
main::@5: scope:[main]  from main::@2
  (byte) main::i#6 ← phi( main::@2/(byte) main::i#1 )
  (void()*) main::f#2 ← &(void()) fn2()
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@5
  (byte) main::i#4 ← phi( main::@3/(byte) main::i#5 main::@5/(byte) main::i#6 )
  (void()*) main::f#3 ← phi( main::@3/(void()*) main::f#1 main::@5/(void()*) main::f#2 )
  call *((void()*) main::f#3) 
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) fn1()
fn1: scope:[fn1]  from
  *((const nomodify byte*) fn1::BORDER_COLOR) ← ++ *((const nomodify byte*) fn1::BORDER_COLOR)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  return 
  to:@return

(void()) fn2()
fn2: scope:[fn2]  from
  *((const nomodify byte*) fn2::BG_COLOR) ← ++ *((const nomodify byte*) fn2::BG_COLOR)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) fn1()
(label) fn1::@return
(const nomodify byte*) fn1::BORDER_COLOR = (byte*)(number) $d020
(void()) fn2()
(label) fn2::@return
(const nomodify byte*) fn2::BG_COLOR = (byte*)(number) $d021
(void()) main()
(number~) main::$0
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(void()*) main::f
(void()*) main::f#0
(void()*) main::f#1
(void()*) main::f#2
(void()*) main::f#3
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6

Adding number conversion cast (unumber) 1 in (number~) main::$0 ← (byte) main::i#1 & (number) 1
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (byte) main::i#1 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) main::$1 ← (unumber~) main::$0 == (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) main::i#1 & (byte) 1
Alias main::i#2 = main::i#3 
Alias main::i#1 = main::i#5 main::i#6 
Successful SSA optimization Pass2AliasElimination
Alias main::i#1 = main::i#4 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$1 [7] if((byte~) main::$0==(byte) 0) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const void()*) main::f#0 = (void()*) 0
Constant (const byte) main::i#0 = 0
Constant (const void()*) main::f#1 = &fn1
Constant (const void()*) main::f#2 = &fn2
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [3] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const void()*) main::f#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const void()*) main::f#1
Inlining constant with var siblings (const void()*) main::f#2
Constant inlined main::i#0 = (byte) 0
Constant inlined main::f#2 = &(void()) fn2()
Constant inlined main::f#1 = &(void()) fn1()
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@3
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [12] main::i#7 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@5
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3

FINAL CONTROL FLOW GRAPH

(void()) fn2()
fn2: scope:[fn2]  from
  [0] *((const nomodify byte*) fn2::BG_COLOR) ← ++ *((const nomodify byte*) fn2::BG_COLOR)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  [1] return 
  to:@return

(void()) fn1()
fn1: scope:[fn1]  from
  [2] *((const nomodify byte*) fn1::BORDER_COLOR) ← ++ *((const nomodify byte*) fn1::BORDER_COLOR)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [3] return 
  to:@return

(void()) main()
main: scope:[main]  from
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@4/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] (byte) main::i#1 ← ++ (byte) main::i#2
  [7] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1
  [8] if((byte~) main::$0==(byte) 0) goto main::@3
  to:main::@4
main::@3: scope:[main]  from main::@2
  [9] phi()
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@3
  [10] (void()*) main::f#3 ← phi( main::@3/&(void()) fn1() main::@2/&(void()) fn2() )
  [11] call *((void()*) main::f#3) 
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) fn1()
(void()) fn2()
(void()) main()
(byte~) main::$0 22.0
(void()*) main::f
(void()*) main::f#3
(byte) main::i
(byte) main::i#1 5.5
(byte) main::i#2 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::f#3 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::f#3 ]
[ main::$0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ main::f#3 ]
Allocated zp[1]:5 [ main::$0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests creating, assigning and calling pointers to non-args no-return functions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // fn2
fn2: {
    .label BG_COLOR = $d021
    // [0] *((const nomodify byte*) fn2::BG_COLOR) ← ++ *((const nomodify byte*) fn2::BG_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    jmp __breturn
    // fn2::@return
  __breturn:
    // [1] return 
    rts
}
  // fn1
fn1: {
    .label BORDER_COLOR = $d020
    // [2] *((const nomodify byte*) fn1::BORDER_COLOR) ← ++ *((const nomodify byte*) fn1::BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    jmp __breturn
    // fn1::@return
  __breturn:
    // [3] return 
    rts
}
  // main
main: {
    .label __0 = 5
    .label i = 2
    .label f = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [7] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z i
    sta.z __0
    // [8] if((byte~) main::$0==(byte) 0) goto main::@3 -- vbuz1_eq_0_then_la1 
    lda.z __0
    cmp #0
    beq __b3_from___b2
    // [10] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    // [10] phi (void()*) main::f#3 = &(void()) fn2() [phi:main::@2->main::@4#0] -- pprz1=pprc1 
    lda #<fn2
    sta.z f
    lda #>fn2
    sta.z f+1
    jmp __b4
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    // [10] phi (void()*) main::f#3 = &(void()) fn1() [phi:main::@3->main::@4#0] -- pprz1=pprc1 
    lda #<fn1
    sta.z f
    lda #>fn1
    sta.z f+1
    jmp __b4
    // main::@4
  __b4:
    // [11] call *((void()*) main::f#3) 
    jsr bi_f
    // [5] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
  bi_f:
    jmp (f)
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [11] call *((void()*) main::f#3)  [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [7] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1 [ main::i#1 main::$0 ] (  [ main::i#1 main::$0 ] { }  ) always clobbers reg byte a 
Statement [11] call *((void()*) main::f#3)  [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , 
Potential registers zp[2]:3 [ main::f#3 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ main::$0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:5 [ main::$0 ] 0: zp[2]:3 [ main::f#3 ] 
Uplift Scope [fn1] 
Uplift Scope [fn2] 
Uplift Scope [] 

Uplifting [main] best 715 combination zp[1]:2 [ main::i#2 main::i#1 ] reg byte a [ main::$0 ] zp[2]:3 [ main::f#3 ] 
Uplifting [fn1] best 715 combination 
Uplifting [fn2] best 715 combination 
Uplifting [] best 715 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 715 combination zp[1]:2 [ main::i#2 main::i#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests creating, assigning and calling pointers to non-args no-return functions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // fn2
fn2: {
    .label BG_COLOR = $d021
    // [0] *((const nomodify byte*) fn2::BG_COLOR) ← ++ *((const nomodify byte*) fn2::BG_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    jmp __breturn
    // fn2::@return
  __breturn:
    // [1] return 
    rts
}
  // fn1
fn1: {
    .label BORDER_COLOR = $d020
    // [2] *((const nomodify byte*) fn1::BORDER_COLOR) ← ++ *((const nomodify byte*) fn1::BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    jmp __breturn
    // fn1::@return
  __breturn:
    // [3] return 
    rts
}
  // main
main: {
    .label i = 2
    .label f = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [7] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z i
    // [8] if((byte~) main::$0==(byte) 0) goto main::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    // [10] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    // [10] phi (void()*) main::f#3 = &(void()) fn2() [phi:main::@2->main::@4#0] -- pprz1=pprc1 
    lda #<fn2
    sta.z f
    lda #>fn2
    sta.z f+1
    jmp __b4
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    // [10] phi (void()*) main::f#3 = &(void()) fn1() [phi:main::@3->main::@4#0] -- pprz1=pprc1 
    lda #<fn1
    sta.z f
    lda #>fn1
    sta.z f+1
    jmp __b4
    // main::@4
  __b4:
    // [11] call *((void()*) main::f#3) 
    jsr bi_f
    // [5] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
  bi_f:
    jmp (f)
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b3_from___b2 with __b3
Replacing label __b1 with __b2
Removing instruction __b1:
Removing instruction __b3_from___b2:
Removing instruction __b4_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __b4_from___b2:
Removing instruction __b1_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) fn1()
(label) fn1::@return
(const nomodify byte*) fn1::BORDER_COLOR = (byte*) 53280
(void()) fn2()
(label) fn2::@return
(const nomodify byte*) fn2::BG_COLOR = (byte*) 53281
(void()) main()
(byte~) main::$0 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(void()*) main::f
(void()*) main::f#3 f zp[2]:3
(byte) main::i
(byte) main::i#1 i zp[1]:2 5.5
(byte) main::i#2 i zp[1]:2 22.0

zp[1]:2 [ main::i#2 main::i#1 ]
zp[2]:3 [ main::f#3 ]
reg byte a [ main::$0 ]


FINAL ASSEMBLER
Score: 589

  // File Comments
// Tests creating, assigning and calling pointers to non-args no-return functions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // fn2
fn2: {
    .label BG_COLOR = $d021
    // (*BG_COLOR)++;
    // [0] *((const nomodify byte*) fn2::BG_COLOR) ← ++ *((const nomodify byte*) fn2::BG_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // fn2::@return
    // }
    // [1] return 
    rts
}
  // fn1
fn1: {
    .label BORDER_COLOR = $d020
    // (*BORDER_COLOR)++;
    // [2] *((const nomodify byte*) fn1::BORDER_COLOR) ← ++ *((const nomodify byte*) fn1::BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    // fn1::@return
    // }
    // [3] return 
    rts
}
  // main
main: {
    .label i = 2
    .label f = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
    // main::@2
  __b2:
    // ++i;
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // i&1
    // [7] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z i
    // if((i&1)==0)
    // [8] if((byte~) main::$0==(byte) 0) goto main::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // [10] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // [10] phi (void()*) main::f#3 = &(void()) fn2() [phi:main::@2->main::@4#0] -- pprz1=pprc1 
    lda #<fn2
    sta.z f
    lda #>fn2
    sta.z f+1
    jmp __b4
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
  __b3:
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // [10] phi (void()*) main::f#3 = &(void()) fn1() [phi:main::@3->main::@4#0] -- pprz1=pprc1 
    lda #<fn1
    sta.z f
    lda #>fn1
    sta.z f+1
    // main::@4
  __b4:
    // (*f)()
    // [11] call *((void()*) main::f#3) 
    jsr bi_f
    // [5] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b2
  bi_f:
    jmp (f)
}
  // File Data

