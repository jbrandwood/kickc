Converting variable modified inside __stackcall procedure main() to load/store idx
Adding parameter assignment in __stackcall procedure get::i = param(get::i)
Adding parameter assignment in __stackcall procedure print::v = param(print::v)
Inlined call call __init 
Eliminating unused variable with no statement main::$1
Calling convention __stackcall adding prepare/execute/finalize for main::v = call get(main::i)
Calling convention __stackcall adding prepare/execute/finalize for call print(main::v)
Calling convention __stackcall adding prepare/execute/finalize for call main 
Calling convention STACK_CALL replacing param(get::i) with stackidx(byte,get::OFFSET_STACK_I)
Calling convention STACK_CALL replacing param(print::v) with stackidx(struct Vector,print::OFFSET_STACK_V)
Calling convention STACK_CALL adding stack return stackidx(struct Vector,get::OFFSET_STACK_RETURN_0) = get::return
Calling convention STACK_CALL adding stack pull main::v = stackpull(struct Vector)
Calling convention STACK_CALL adding stack push stackpush(byte) = main::i
Calling convention STACK_CALL adding stack push stackpush(struct Vector) = main::v
Removing C-classic struct-unwound assignment get::v = struct-unwound {*((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_X), *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_Y), *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_X), *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y)}
Removing C-classic struct-unwound assignment get::return = struct-unwound {*(&get::return)}

CONTROL FLOW GRAPH SSA

__stackcall void main()
main: scope:[main]  from
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$0 = main::i#2 < 5
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  stackpush(byte) = main::i#3
  sideeffect stackpushbytes(3)
  callexecute get 
  main::v = stackpull(struct Vector)
  stackpush(struct Vector) = main::v
  callexecute print 
  sideeffect stackpullbytes(4)
  main::i#1 = ++ main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

__stackcall struct Vector get(byte get::i)
get: scope:[get]  from
  get::i#0 = stackidx(byte,get::OFFSET_STACK_I)
  get::$0 = get::i#0 / 2
  get::$1 = get::i#0 + 1
  get::$2 = get::i#0 * 2
  *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_X) = get::i#0
  *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_Y) = get::$0
  *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_X) = get::$1
  *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y) = get::$2
  *(&get::return) = memcpy(*(&get::v), struct Vector, SIZEOF_STRUCT_VECTOR)
  to:get::@return
get::@return: scope:[get]  from get
  stackidx(struct Vector,get::OFFSET_STACK_RETURN_0) = get::return
  return 
  to:@return

__stackcall void print(struct Vector print::v)
print: scope:[print]  from
  print::v = stackidx(struct Vector,print::OFFSET_STACK_V)
  SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_X)
  idx = ++ idx
  SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_Y)
  idx = ++ idx
  SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_X)
  idx = ++ idx
  SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y)
  idx = ++ idx
  SCREEN[idx] = ' '
  idx = ++ idx
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  callexecute main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte OFFSET_STRUCT_POINT_X = 0
constant byte OFFSET_STRUCT_POINT_Y = 1
constant byte OFFSET_STRUCT_VECTOR_P1 = 0
constant byte OFFSET_STRUCT_VECTOR_P2 = 2
constant byte* const SCREEN = (byte*)$400
constant byte SIZEOF_STRUCT_VECTOR = 4
constant word STACK_BASE = $103
void __start()
__stackcall struct Vector get(byte get::i)
number~ get::$0
number~ get::$1
number~ get::$2
constant byte get::OFFSET_STACK_I = 0
constant byte get::OFFSET_STACK_RETURN_0 = 0
byte get::i
byte get::i#0
struct Vector get::return loadstore
struct Vector get::v loadstore
byte idx loadstore
__stackcall void main()
bool~ main::$0
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
struct Vector main::v loadstore
__stackcall void print(struct Vector print::v)
constant byte print::OFFSET_STACK_V = 0
struct Vector print::v loadstore

Adding number conversion cast (unumber) 5 in main::$0 = main::i#2 < 5
Adding number conversion cast (unumber) 2 in get::$0 = get::i#0 / 2
Adding number conversion cast (unumber) get::$0 in get::$0 = get::i#0 / (unumber)2
Adding number conversion cast (unumber) 1 in get::$1 = get::i#0 + 1
Adding number conversion cast (unumber) get::$1 in get::$1 = get::i#0 + (unumber)1
Adding number conversion cast (unumber) 2 in get::$2 = get::i#0 * 2
Adding number conversion cast (unumber) get::$2 in get::$2 = get::i#0 * (unumber)2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 5
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in get::$0 = get::i#0 / 2
Inferred type updated to byte in get::$1 = get::i#0 + 1
Inferred type updated to byte in get::$2 = get::i#0 * 2
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [3] if(main::i#2<5) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero (byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P1 in [17] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_X) = get::i#0
Simplifying expression containing zero (struct Point*)&get::v in [17] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P1) = get::i#0
Simplifying expression containing zero (struct Point*)&get::v in [18] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_Y) = get::$0
Simplifying expression containing zero (byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2 in [19] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_X) = get::$1
Simplifying expression containing zero (byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P1 in [25] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (struct Point*)&print::v in [25] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P1)
Simplifying expression containing zero (struct Point*)&print::v in [27] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_Y)
Simplifying expression containing zero (byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2 in [29] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_X)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_VECTOR_P1
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Rewriting division to use shift [12] get::$0 = get::i#0 / 2
Rewriting multiplication to use shift [14] get::$2 = get::i#0 * 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main
CALL GRAPH
Calls in [__start] to main:3 
Calls in [main] to get:34 print:37 

Created 1 initial phi equivalence classes
Coalesced [40] main::i#4 = main::i#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] callexecute main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

__stackcall void print(struct Vector print::v)
print: scope:[print]  from
  [5] print::v = stackidx(struct Vector,print::OFFSET_STACK_V)
  [6] SCREEN[idx] = *((byte*)(struct Point*)&print::v)
  [7] idx = ++ idx
  [8] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_POINT_Y)
  [9] idx = ++ idx
  [10] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2)
  [11] idx = ++ idx
  [12] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y)
  [13] idx = ++ idx
  [14] SCREEN[idx] = ' '
  [15] idx = ++ idx
  to:print::@return
print::@return: scope:[print]  from print
  [16] return 
  to:@return

__stackcall struct Vector get(byte get::i)
get: scope:[get]  from
  [17] get::i#0 = stackidx(byte,get::OFFSET_STACK_I)
  [18] get::$0 = get::i#0 >> 1
  [19] get::$1 = get::i#0 + 1
  [20] get::$2 = get::i#0 << 1
  [21] *((byte*)(struct Point*)&get::v) = get::i#0
  [22] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_POINT_Y) = get::$0
  [23] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2) = get::$1
  [24] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y) = get::$2
  [25] *(&get::return) = memcpy(*(&get::v), struct Vector, SIZEOF_STRUCT_VECTOR)
  to:get::@return
get::@return: scope:[get]  from get
  [26] stackidx(struct Vector,get::OFFSET_STACK_RETURN_0) = get::return
  [27] return 
  to:@return

__stackcall void main()
main: scope:[main]  from
  [28] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [29] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [30] if(main::i#2<5) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [31] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [32] stackpush(byte) = main::i#2
  sideeffect stackpushbytes(3)
  [34] callexecute get 
  [35] main::v = stackpull(struct Vector)
  [36] stackpush(struct Vector) = main::v
  [37] callexecute print 
  sideeffect stackpullbytes(4)
  [39] main::i#1 = ++ main::i#2
  to:main::@1

null depth in calling loop Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  in scope print
null depth in calling loop Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  in scope get

VARIABLE REGISTER WEIGHTS
void __start()
__stackcall struct Vector get(byte get::i)
byte~ get::$0 500.5
byte~ get::$1 500.5
byte~ get::$2 500.5
byte get::i
byte get::i#0 1251.25
struct Vector get::return loadstore 40.04
struct Vector get::v loadstore
byte idx loadstore 600.68
__stackcall void main()
byte main::i
byte main::i#1 202.0
byte main::i#2 44.888888888888886
struct Vector main::v loadstore 202.0
__stackcall void print(struct Vector print::v)
struct Vector print::v loadstore 143.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable idx to live range equivalence class [ idx ]
Added variable print::v to live range equivalence class [ print::v ]
Added variable get::i#0 to live range equivalence class [ get::i#0 ]
Added variable get::$0 to live range equivalence class [ get::$0 ]
Added variable get::$1 to live range equivalence class [ get::$1 ]
Added variable get::$2 to live range equivalence class [ get::$2 ]
Added variable main::v to live range equivalence class [ main::v ]
Added variable get::return to live range equivalence class [ get::return ]
Added variable get::v to live range equivalence class [ get::v ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ idx ]
[ print::v ]
[ get::i#0 ]
[ get::$0 ]
[ get::$1 ]
[ get::$2 ]
[ main::v ]
[ get::return ]
[ get::v ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ idx ]
Allocated zp[4]:4 [ print::v ]
Allocated zp[1]:8 [ get::i#0 ]
Allocated zp[1]:9 [ get::$0 ]
Allocated zp[1]:10 [ get::$1 ]
Allocated zp[1]:11 [ get::$2 ]
Allocated zp[4]:12 [ main::v ]
Allocated zp[4]:16 [ get::return ]
Allocated zp[4]:20 [ get::v ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] idx = 0 [ idx get::v get::return ] (  [ idx get::v get::return ] { }  ) always clobbers reg byte a 
Statement [5] print::v = stackidx(struct Vector,print::OFFSET_STACK_V) [ idx print::v ] ( main:3::print:37 [ get::v get::return main::i#2 idx print::v ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [6] SCREEN[idx] = *((byte*)(struct Point*)&print::v) [ idx print::v ] ( main:3::print:37 [ get::v get::return main::i#2 idx print::v ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [8] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_POINT_Y) [ idx print::v ] ( main:3::print:37 [ get::v get::return main::i#2 idx print::v ] { }  ) always clobbers reg byte a reg byte y 
Statement [10] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2) [ idx print::v ] ( main:3::print:37 [ get::v get::return main::i#2 idx print::v ] { }  ) always clobbers reg byte a reg byte y 
Statement [12] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y) [ idx ] ( main:3::print:37 [ get::v get::return main::i#2 idx ] { }  ) always clobbers reg byte a reg byte y 
Statement [14] SCREEN[idx] = ' ' [ idx ] ( main:3::print:37 [ get::v get::return main::i#2 idx ] { }  ) always clobbers reg byte a reg byte y 
Statement [17] get::i#0 = stackidx(byte,get::OFFSET_STACK_I) [ get::i#0 get::v get::return ] ( main:3::get:34 [ idx main::i#2 get::i#0 get::v get::return ] { }  ) always clobbers reg byte a reg byte x 
Statement [18] get::$0 = get::i#0 >> 1 [ get::i#0 get::$0 get::v get::return ] ( main:3::get:34 [ idx main::i#2 get::i#0 get::$0 get::v get::return ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ get::i#0 ]
Statement [20] get::$2 = get::i#0 << 1 [ get::i#0 get::$0 get::$1 get::$2 get::v get::return ] ( main:3::get:34 [ idx main::i#2 get::i#0 get::$0 get::$1 get::$2 get::v get::return ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ get::$0 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ get::$1 ]
Statement [25] *(&get::return) = memcpy(*(&get::v), struct Vector, SIZEOF_STRUCT_VECTOR) [ get::v get::return ] ( main:3::get:34 [ idx main::i#2 get::v get::return ] { }  ) always clobbers reg byte a reg byte y 
Statement [26] stackidx(struct Vector,get::OFFSET_STACK_RETURN_0) = get::return [ get::v get::return ] ( main:3::get:34 [ idx main::i#2 get::v get::return ] { }  ) always clobbers reg byte a reg byte x 
Statement [30] if(main::i#2<5) goto main::@2 [ idx get::v get::return main::i#2 ] ( main:3 [ idx get::v get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement [32] stackpush(byte) = main::i#2 [ idx get::v get::return main::i#2 ] ( main:3 [ idx get::v get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement [35] main::v = stackpull(struct Vector) [ idx get::v get::return main::i#2 main::v ] ( main:3 [ idx get::v get::return main::i#2 main::v ] { }  ) always clobbers reg byte a 
Statement [36] stackpush(struct Vector) = main::v [ idx get::v get::return main::i#2 ] ( main:3 [ idx get::v get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes(4) always clobbers reg byte a reg byte x 
Statement [1] idx = 0 [ idx get::v get::return ] (  [ idx get::v get::return ] { }  ) always clobbers reg byte a 
Statement [5] print::v = stackidx(struct Vector,print::OFFSET_STACK_V) [ idx print::v ] ( main:3::print:37 [ get::v get::return main::i#2 idx print::v ] { }  ) always clobbers reg byte a reg byte x 
Statement [6] SCREEN[idx] = *((byte*)(struct Point*)&print::v) [ idx print::v ] ( main:3::print:37 [ get::v get::return main::i#2 idx print::v ] { }  ) always clobbers reg byte a reg byte y 
Statement [8] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_POINT_Y) [ idx print::v ] ( main:3::print:37 [ get::v get::return main::i#2 idx print::v ] { }  ) always clobbers reg byte a reg byte y 
Statement [10] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2) [ idx print::v ] ( main:3::print:37 [ get::v get::return main::i#2 idx print::v ] { }  ) always clobbers reg byte a reg byte y 
Statement [12] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y) [ idx ] ( main:3::print:37 [ get::v get::return main::i#2 idx ] { }  ) always clobbers reg byte a reg byte y 
Statement [14] SCREEN[idx] = ' ' [ idx ] ( main:3::print:37 [ get::v get::return main::i#2 idx ] { }  ) always clobbers reg byte a reg byte y 
Statement [17] get::i#0 = stackidx(byte,get::OFFSET_STACK_I) [ get::i#0 get::v get::return ] ( main:3::get:34 [ idx main::i#2 get::i#0 get::v get::return ] { }  ) always clobbers reg byte a reg byte x 
Statement [18] get::$0 = get::i#0 >> 1 [ get::i#0 get::$0 get::v get::return ] ( main:3::get:34 [ idx main::i#2 get::i#0 get::$0 get::v get::return ] { }  ) always clobbers reg byte a 
Statement [20] get::$2 = get::i#0 << 1 [ get::i#0 get::$0 get::$1 get::$2 get::v get::return ] ( main:3::get:34 [ idx main::i#2 get::i#0 get::$0 get::$1 get::$2 get::v get::return ] { }  ) always clobbers reg byte a 
Statement [25] *(&get::return) = memcpy(*(&get::v), struct Vector, SIZEOF_STRUCT_VECTOR) [ get::v get::return ] ( main:3::get:34 [ idx main::i#2 get::v get::return ] { }  ) always clobbers reg byte a reg byte y 
Statement [26] stackidx(struct Vector,get::OFFSET_STACK_RETURN_0) = get::return [ get::v get::return ] ( main:3::get:34 [ idx main::i#2 get::v get::return ] { }  ) always clobbers reg byte a reg byte x 
Statement [30] if(main::i#2<5) goto main::@2 [ idx get::v get::return main::i#2 ] ( main:3 [ idx get::v get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement [32] stackpush(byte) = main::i#2 [ idx get::v get::return main::i#2 ] ( main:3 [ idx get::v get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement [35] main::v = stackpull(struct Vector) [ idx get::v get::return main::i#2 main::v ] ( main:3 [ idx get::v get::return main::i#2 main::v ] { }  ) always clobbers reg byte a 
Statement [36] stackpush(struct Vector) = main::v [ idx get::v get::return main::i#2 ] ( main:3 [ idx get::v get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes(4) always clobbers reg byte a reg byte x 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ idx ] : zp[1]:3 , 
Potential registers zp[4]:4 [ print::v ] : zp[4]:4 , 
Potential registers zp[1]:8 [ get::i#0 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ get::$0 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ get::$1 ] : zp[1]:10 , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ get::$2 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:12 [ main::v ] : zp[4]:12 , 
Potential registers zp[4]:16 [ get::return ] : zp[4]:16 , 
Potential registers zp[4]:20 [ get::v ] : zp[4]:20 , 

REGISTER UPLIFT SCOPES
Uplift Scope [get] 1,251.25: zp[1]:8 [ get::i#0 ] 500.5: zp[1]:9 [ get::$0 ] 500.5: zp[1]:10 [ get::$1 ] 500.5: zp[1]:11 [ get::$2 ] 40.04: zp[4]:16 [ get::return ] 0: zp[4]:20 [ get::v ] 
Uplift Scope [] 600.68: zp[1]:3 [ idx ] 
Uplift Scope [main] 246.89: zp[1]:2 [ main::i#2 main::i#1 ] 202: zp[4]:12 [ main::v ] 
Uplift Scope [print] 143: zp[4]:4 [ print::v ] 
Uplift Scope [Point] 
Uplift Scope [Vector] 
Uplift Scope [__start] 

Uplifting [get] best 1425 combination reg byte y [ get::i#0 ] zp[1]:9 [ get::$0 ] reg byte x [ get::$1 ] zp[1]:11 [ get::$2 ] zp[4]:16 [ get::return ] zp[4]:20 [ get::v ] 
Limited combination testing to 100 combinations of 108 possible.
Uplifting [] best 1425 combination zp[1]:3 [ idx ] 
Uplifting [main] best 1425 combination zp[1]:2 [ main::i#2 main::i#1 ] zp[4]:12 [ main::v ] 
Uplifting [print] best 1425 combination zp[4]:4 [ print::v ] 
Uplifting [Point] best 1425 combination 
Uplifting [Vector] best 1425 combination 
Uplifting [__start] best 1425 combination 
Attempting to uplift remaining variables inzp[1]:3 [ idx ]
Uplifting [] best 1425 combination zp[1]:3 [ idx ] 
Attempting to uplift remaining variables inzp[1]:9 [ get::$0 ]
Uplifting [get] best 1425 combination zp[1]:9 [ get::$0 ] 
Attempting to uplift remaining variables inzp[1]:11 [ get::$2 ]
Uplifting [get] best 1425 combination zp[1]:11 [ get::$2 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 1425 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Coalescing zero page register [ zp[4]:12 [ main::v ] ] with [ zp[4]:4 [ print::v ] ]
Allocated (was zp[1]:9) zp[1]:4 [ get::$0 ]
Allocated (was zp[1]:11) zp[1]:5 [ get::$2 ]
Allocated (was zp[4]:12) zp[4]:6 [ main::v print::v ]
Allocated (was zp[4]:16) zp[4]:10 [ get::return ]
Allocated (was zp[4]:20) zp[4]:14 [ get::v ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a procedure with calling convention stack
// Returning and passing struct of struct  values
  // Upstart
  // Commodore 64 PRG executable file
.file [name="procedure-callingconvention-stack-11.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_VECTOR_P2 = 2
  .const SIZEOF_STRUCT_VECTOR = 4
  .const STACK_BASE = $103
  .label SCREEN = $400
  .label idx = 3
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] callexecute main  -- jsr 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // print
// print(struct Vector zp(6) v)
print: {
    .const OFFSET_STACK_V = 0
    .label v = 6
    // [5] print::v = stackidx(struct Vector,print::OFFSET_STACK_V) -- vssz1=_stackidxstruct_4_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V,x
    sta.z v
    lda STACK_BASE+OFFSET_STACK_V+1,x
    sta.z v+1
    lda STACK_BASE+OFFSET_STACK_V+2,x
    sta.z v+2
    lda STACK_BASE+OFFSET_STACK_V+3,x
    sta.z v+3
    // [6] SCREEN[idx] = *((byte*)(struct Point*)&print::v) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda.z v
    ldy.z idx
    sta SCREEN,y
    // [7] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [8] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_POINT_Y) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda v+OFFSET_STRUCT_POINT_Y
    ldy.z idx
    sta SCREEN,y
    // [9] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [10] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda v+OFFSET_STRUCT_VECTOR_P2
    ldy.z idx
    sta SCREEN,y
    // [11] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [12] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y
    ldy.z idx
    sta SCREEN,y
    // [13] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [14] SCREEN[idx] = ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy.z idx
    sta SCREEN,y
    // [15] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __breturn
    // print::@return
  __breturn:
    // [16] return 
    rts
}
  // get
// get(byte register(Y) i)
get: {
    .const OFFSET_STACK_I = 0
    .const OFFSET_STACK_RETURN_0 = 0
    .label return = $a
    .label v = $e
    .label __0 = 4
    .label __2 = 5
    // [17] get::i#0 = stackidx(byte,get::OFFSET_STACK_I) -- vbuyy=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_I,x
    tay
    // [18] get::$0 = get::i#0 >> 1 -- vbuz1=vbuyy_ror_1 
    tya
    lsr
    sta.z __0
    // [19] get::$1 = get::i#0 + 1 -- vbuxx=vbuyy_plus_1 
    tya
    tax
    inx
    // [20] get::$2 = get::i#0 << 1 -- vbuz1=vbuyy_rol_1 
    tya
    asl
    sta.z __2
    // [21] *((byte*)(struct Point*)&get::v) = get::i#0 -- _deref_pbuc1=vbuyy 
    sty.z v
    // [22] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_POINT_Y) = get::$0 -- _deref_pbuc1=vbuz1 
    lda.z __0
    sta v+OFFSET_STRUCT_POINT_Y
    // [23] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2) = get::$1 -- _deref_pbuc1=vbuxx 
    stx v+OFFSET_STRUCT_VECTOR_P2
    // [24] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y) = get::$2 -- _deref_pbuc1=vbuz1 
    lda.z __2
    sta v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y
    // [25] *(&get::return) = memcpy(*(&get::v), struct Vector, SIZEOF_STRUCT_VECTOR) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_VECTOR
  !:
    lda v-1,y
    sta return-1,y
    dey
    bne !-
    jmp __breturn
    // get::@return
  __breturn:
    // [26] stackidx(struct Vector,get::OFFSET_STACK_RETURN_0) = get::return -- _stackidxstruct_4_vbuc1=vssz1 
    tsx
    lda.z return
    sta STACK_BASE+OFFSET_STACK_RETURN_0,x
    lda.z return+1
    sta STACK_BASE+OFFSET_STACK_RETURN_0+1,x
    lda.z return+2
    sta STACK_BASE+OFFSET_STACK_RETURN_0+2,x
    lda.z return+3
    sta STACK_BASE+OFFSET_STACK_RETURN_0+3,x
    // [27] return 
    rts
}
  // main
main: {
    .label v = 6
    .label i = 2
    // [29] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [29] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [30] if(main::i#2<5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [31] return 
    rts
    // main::@2
  __b2:
    // [32] stackpush(byte) = main::i#2 -- _stackpushbyte_=vbuz1 
    lda.z i
    pha
    // sideeffect stackpushbytes(3) -- _stackpushbyte_3 
    pha
    pha
    pha
    // [34] callexecute get  -- jsr 
    jsr get
    // [35] main::v = stackpull(struct Vector) -- vssz1=_stackpullstruct_4_ 
    pla
    sta.z v
    pla
    sta.z v+1
    pla
    sta.z v+2
    pla
    sta.z v+3
    // [36] stackpush(struct Vector) = main::v -- _stackpushstruct_4_=vssz1 
    lda.z v+3
    pha
    lda.z v+2
    pha
    lda.z v+1
    pha
    lda.z v
    pha
    // [37] callexecute print  -- jsr 
    jsr print
    // sideeffect stackpullbytes(4) -- _stackpullbyte_4 
    tsx
    txa
    axs #-4
    txs
    // [39] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [29] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [29] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z v+3
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from___init1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant byte OFFSET_STRUCT_POINT_Y = 1
constant byte OFFSET_STRUCT_VECTOR_P2 = 2
constant byte* const SCREEN = (byte*) 1024
constant byte SIZEOF_STRUCT_VECTOR = 4
constant word STACK_BASE = $103
void __start()
__stackcall struct Vector get(byte get::i)
byte~ get::$0 zp[1]:4 500.5
byte~ get::$1 reg byte x 500.5
byte~ get::$2 zp[1]:5 500.5
constant byte get::OFFSET_STACK_I = 0
constant byte get::OFFSET_STACK_RETURN_0 = 0
byte get::i
byte get::i#0 reg byte y 1251.25
struct Vector get::return loadstore zp[4]:10 40.04
struct Vector get::v loadstore zp[4]:14
byte idx loadstore zp[1]:3 600.68
__stackcall void main()
byte main::i
byte main::i#1 i zp[1]:2 202.0
byte main::i#2 i zp[1]:2 44.888888888888886
struct Vector main::v loadstore zp[4]:6 202.0
__stackcall void print(struct Vector print::v)
constant byte print::OFFSET_STACK_V = 0
struct Vector print::v loadstore zp[4]:6 143.0

zp[1]:2 [ main::i#2 main::i#1 ]
zp[1]:3 [ idx ]
reg byte y [ get::i#0 ]
zp[1]:4 [ get::$0 ]
reg byte x [ get::$1 ]
zp[1]:5 [ get::$2 ]
zp[4]:6 [ main::v print::v ]
zp[4]:10 [ get::return ]
zp[4]:14 [ get::v ]


FINAL ASSEMBLER
Score: 1293

  // File Comments
// Test a procedure with calling convention stack
// Returning and passing struct of struct  values
  // Upstart
  // Commodore 64 PRG executable file
.file [name="procedure-callingconvention-stack-11.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_VECTOR_P2 = 2
  .const SIZEOF_STRUCT_VECTOR = 4
  .const STACK_BASE = $103
  .label SCREEN = $400
  .label idx = 3
.segment Code
  // __start
__start: {
    // __start::__init1
    // char idx = 0
    // [1] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] callexecute main  -- jsr 
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // print
// print(struct Vector zp(6) v)
print: {
    .const OFFSET_STACK_V = 0
    .label v = 6
    // [5] print::v = stackidx(struct Vector,print::OFFSET_STACK_V) -- vssz1=_stackidxstruct_4_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V,x
    sta.z v
    lda STACK_BASE+OFFSET_STACK_V+1,x
    sta.z v+1
    lda STACK_BASE+OFFSET_STACK_V+2,x
    sta.z v+2
    lda STACK_BASE+OFFSET_STACK_V+3,x
    sta.z v+3
    // SCREEN[idx++] = v.p1.x
    // [6] SCREEN[idx] = *((byte*)(struct Point*)&print::v) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda.z v
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = v.p1.x;
    // [7] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // SCREEN[idx++] = v.p1.y
    // [8] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_POINT_Y) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda v+OFFSET_STRUCT_POINT_Y
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = v.p1.y;
    // [9] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // SCREEN[idx++] = v.p2.x
    // [10] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda v+OFFSET_STRUCT_VECTOR_P2
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = v.p2.x;
    // [11] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // SCREEN[idx++] = v.p2.y
    // [12] SCREEN[idx] = *((byte*)(struct Point*)&print::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = v.p2.y;
    // [13] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // SCREEN[idx++] = ' '
    // [14] SCREEN[idx] = ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = ' ';
    // [15] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // print::@return
    // }
    // [16] return 
    rts
}
  // get
// get(byte register(Y) i)
get: {
    .const OFFSET_STACK_I = 0
    .const OFFSET_STACK_RETURN_0 = 0
    .label return = $a
    .label v = $e
    .label __0 = 4
    .label __2 = 5
    // [17] get::i#0 = stackidx(byte,get::OFFSET_STACK_I) -- vbuyy=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_I,x
    tay
    // i/2
    // [18] get::$0 = get::i#0 >> 1 -- vbuz1=vbuyy_ror_1 
    tya
    lsr
    sta.z __0
    // i+1
    // [19] get::$1 = get::i#0 + 1 -- vbuxx=vbuyy_plus_1 
    tya
    tax
    inx
    // i*2
    // [20] get::$2 = get::i#0 << 1 -- vbuz1=vbuyy_rol_1 
    tya
    asl
    sta.z __2
    // struct Vector v = { {i, i/2}, {i+1, i*2} }
    // [21] *((byte*)(struct Point*)&get::v) = get::i#0 -- _deref_pbuc1=vbuyy 
    sty.z v
    // [22] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_POINT_Y) = get::$0 -- _deref_pbuc1=vbuz1 
    lda.z __0
    sta v+OFFSET_STRUCT_POINT_Y
    // [23] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2) = get::$1 -- _deref_pbuc1=vbuxx 
    stx v+OFFSET_STRUCT_VECTOR_P2
    // [24] *((byte*)(struct Point*)&get::v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y) = get::$2 -- _deref_pbuc1=vbuz1 
    lda.z __2
    sta v+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y
    // return v;
    // [25] *(&get::return) = memcpy(*(&get::v), struct Vector, SIZEOF_STRUCT_VECTOR) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_VECTOR
  !:
    lda v-1,y
    sta return-1,y
    dey
    bne !-
    // get::@return
    // }
    // [26] stackidx(struct Vector,get::OFFSET_STACK_RETURN_0) = get::return -- _stackidxstruct_4_vbuc1=vssz1 
    tsx
    lda.z return
    sta STACK_BASE+OFFSET_STACK_RETURN_0,x
    lda.z return+1
    sta STACK_BASE+OFFSET_STACK_RETURN_0+1,x
    lda.z return+2
    sta STACK_BASE+OFFSET_STACK_RETURN_0+2,x
    lda.z return+3
    sta STACK_BASE+OFFSET_STACK_RETURN_0+3,x
    // [27] return 
    rts
}
  // main
main: {
    .label v = 6
    .label i = 2
    // [29] phi from main to main::@1 [phi:main->main::@1]
    // [29] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
  __b1:
    // for(char i=0;i<5;i++)
    // [30] if(main::i#2<5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    // main::@return
    // }
    // [31] return 
    rts
    // main::@2
  __b2:
    // struct Vector v = get(i)
    // [32] stackpush(byte) = main::i#2 -- _stackpushbyte_=vbuz1 
    lda.z i
    pha
    // sideeffect stackpushbytes(3) -- _stackpushbyte_3 
    pha
    pha
    pha
    // [34] callexecute get  -- jsr 
    jsr get
    // [35] main::v = stackpull(struct Vector) -- vssz1=_stackpullstruct_4_ 
    pla
    sta.z v
    pla
    sta.z v+1
    pla
    sta.z v+2
    pla
    sta.z v+3
    // print(v)
    // [36] stackpush(struct Vector) = main::v -- _stackpushstruct_4_=vssz1 
    pha
    lda.z v+2
    pha
    lda.z v+1
    pha
    lda.z v
    pha
    // [37] callexecute print  -- jsr 
    jsr print
    // sideeffect stackpullbytes(4) -- _stackpullbyte_4 
    tsx
    txa
    axs #-4
    txs
    // for(char i=0;i<5;i++)
    // [39] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [29] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [29] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

