
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::j#0 = 'g'
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::j#3 = phi( main/main::j#0, main::@2/main::j#1 )
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$1 = main::i#2 < $a
  if(main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  main::j#2 = phi( main::@1/main::j#3 )
  main::SCREEN[main::i#3] = main::j#2
  main::i#1 = ++ main::i#3
  main::j#1 = ++ main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool main::$1
__constant char * const main::SCREEN = (char *)$400
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::j
char main::j#0
char main::j#1
char main::j#2
char main::j#3

Adding number conversion cast (unumber) $a in main::$1 = main::i#2 < $a
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $a
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::j#2 = main::j#3 
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [4] if(main::i#2<$a) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::j#0 = 'g'
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::j#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::j#0 = 'g'
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [7] main::i#4 = main::i#1
Coalesced [8] main::j#4 = main::j#1
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::j#2 = phi( main/'g', main::@2/main::j#1 )
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] if(main::i#2<$a) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] main::SCREEN[main::i#2] = main::j#2
  [5] main::i#1 = ++ main::i#2
  [6] main::j#1 = ++ main::j#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
char main::i
char main::i#1 // 11.0
char main::i#2 // 14.666666666666666
char main::j
char main::j#1 // 22.0
char main::j#2 // 8.25

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Allocated zp[1]:2 [ main::j#2 main::j#1 ]
Allocated zp[1]:3 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:3 [ main::i#2 main::i#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:2 [ main::j#2 main::j#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 30.25: zp[1]:2 [ main::j#2 main::j#1 ] 25.67: zp[1]:3 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 291 combination reg byte a [ main::j#2 main::j#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 291 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests comma-expressions in for()-statement
  // Upstart
  // Commodore 64 PRG executable file
.file [name="comma-expr-for.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::j#2 = 'g' [phi:main->main::@1#0] -- vbuaa=vbuc1 
    lda #'g'
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i#2<$a) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] main::SCREEN[main::i#2] = main::j#2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] main::j#1 = ++ main::j#2 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::j#2 = main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
__constant char * const main::SCREEN = (char *) 1024
char main::i
char main::i#1 // reg byte x 11.0
char main::i#2 // reg byte x 14.666666666666666
char main::j
char main::j#1 // reg byte a 22.0
char main::j#2 // reg byte a 8.25

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::j#2 main::j#1 ]


FINAL ASSEMBLER
Score: 231

  // File Comments
// Tests comma-expressions in for()-statement
  // Upstart
  // Commodore 64 PRG executable file
.file [name="comma-expr-for.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::j#2 = 'g' [phi:main->main::@1#0] -- vbuaa=vbuc1 
    lda #'g'
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // for( byte i=0; j<10, i<10; i++, j++)
    // [2] if(main::i#2<$a) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc __b2
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // SCREEN[i] = j
    // [4] main::SCREEN[main::i#2] = main::j#2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // for( byte i=0; j<10, i<10; i++, j++)
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] main::j#1 = ++ main::j#2 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::j#2 = main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

