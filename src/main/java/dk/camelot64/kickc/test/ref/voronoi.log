// The screen
byte *SCREEN = $0400;
byte *COLORS = $D800;

byte FILL = 230;

// The total number of voronoi points
byte numpoints = 6;

// Points to create the Voronoi from
byte[] XPOS = {5, 15, 6, 34, 21 ,31};
byte[] YPOS = {5, 8, 14, 2, 17, 22};
byte[] COLS = {1, 2, 3, 4, 5, 7};

void main() {
  initscreen();
  do {
    render();
    animate();
  } while(true);
}

void animate() {
    XPOS[0] = XPOS[0]+1;
    if(XPOS[0]==40) {
      XPOS[0] = 0;
    }
    YPOS[0] = YPOS[0]+1;
    if(YPOS[0]==25) {
      YPOS[0] = 0;
    }
    XPOS[1] = XPOS[1]-1;
    if(XPOS[1]==255) {
      XPOS[1] = 40;
    }
    YPOS[2] = YPOS[2]+1;
    if(YPOS[2]==25) {
      YPOS[2] = 0;
    }
    YPOS[3] = YPOS[3]-1;
    if(YPOS[3]==255) {
      YPOS[3] = 25;
      XPOS[3] = XPOS[3]+7;
      if(XPOS[3]>=40) {
        XPOS[3] = XPOS[3]-40;
      }
    }
}

void initscreen() {
  for( byte* screen = SCREEN; screen<SCREEN+$03e8; ++screen) {
    *screen = FILL;
  }
}

void render() {
  byte* colline = COLORS;
  for( byte y : 0.. 24) {
    for( byte x : 0..39) {
      byte col = findcol(x, y);
      colline[x] = col;
    }
    colline = colline+40;
  }
}

byte findcol(byte x, byte y) {
  byte mindiff = 255;
  byte mincol = 0;
  for( byte i=0; i<numpoints; ++i) {
     byte xp = XPOS[i];
     byte yp = YPOS[i];
     if(x==xp) {
       if(y==yp) {
         return 0;
       }
     }
     byte diff;
     if(x<xp) {
       diff = xp-x;
     } else {
       diff = x-xp;
     }
     if(y<yp) {
       diff = diff + (yp-y);
     } else {
       diff = diff + (y-yp);
     }
     if(diff<mindiff) {
       mindiff=diff;
       mincol = COLS[i];
     }
  }
  return mincol;
}



Adding pre/post-modifier (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
Adding pre/post-modifier (byte) findcol::i ← ++ (byte) findcol::i
PROGRAM
  (byte*) SCREEN ← (word/signed word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte/word/signed word) 230
  (byte) numpoints ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
proc (void()) main()
  (void~) main::$0 ← call initscreen 
main::@1:
  (void~) main::$1 ← call render 
  (void~) main::$2 ← call animate 
  if(true) goto main::@1
main::@return:
  return 
endproc // main()
proc (void()) animate()
  (byte~) animate::$0 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte/signed byte/word/signed word) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
animate::@1:
  (byte~) animate::$5 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
animate::@2:
  (byte~) animate::$10 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte/word/signed word) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
animate::@3:
  (byte~) animate::$15 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
animate::@4:
  (byte~) animate::$20 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte/word/signed word) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte/signed byte/word/signed word) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  (byte~) animate::$30 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
animate::@6:
animate::@5:
animate::@return:
  return 
endproc // animate()
proc (void()) initscreen()
  (byte*) initscreen::screen ← (byte*) SCREEN
initscreen::@1:
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
initscreen::@return:
  return 
endproc // initscreen()
proc (void()) render()
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte/signed byte/word/signed word) 0
render::@1:
  (byte) render::x ← (byte/signed byte/word/signed word) 0
render::@2:
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte/signed byte/word/signed word) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
render::@return:
  return 
endproc // render()
proc (byte()) findcol((byte) findcol::x , (byte) findcol::y)
  (byte) findcol::mindiff ← (byte/word/signed word) 255
  (byte) findcol::mincol ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i ← (byte/signed byte/word/signed word) 0
findcol::@1:
  (byte~) findcol::$0 ← (byte[]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  (byte) findcol::return ← (byte/signed byte/word/signed word) 0
  goto findcol::@return
findcol::@3:
findcol::@2:
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  goto findcol::@5
findcol::@4:
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
findcol::@5:
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  goto findcol::@7
findcol::@6:
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
findcol::@7:
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
findcol::@8:
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  (byte) findcol::return ← (byte) findcol::mincol
  goto findcol::@return
findcol::@return:
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
endproc // findcol()
  call main 

SYMBOLS
(byte*) COLORS
(byte[]) COLS
(byte) FILL
(byte*) SCREEN
(byte[]) XPOS
(byte[]) YPOS
(void()) animate()
(byte~) animate::$0
(byte~) animate::$1
(byte~) animate::$10
(byte~) animate::$11
(byte~) animate::$12
(boolean~) animate::$13
(boolean~) animate::$14
(byte~) animate::$15
(byte~) animate::$16
(byte~) animate::$17
(boolean~) animate::$18
(boolean~) animate::$19
(byte~) animate::$2
(byte~) animate::$20
(byte~) animate::$21
(byte~) animate::$22
(boolean~) animate::$23
(boolean~) animate::$24
(byte~) animate::$25
(byte~) animate::$26
(byte~) animate::$27
(boolean~) animate::$28
(boolean~) animate::$29
(boolean~) animate::$3
(byte~) animate::$30
(byte~) animate::$31
(boolean~) animate::$4
(byte~) animate::$5
(byte~) animate::$6
(byte~) animate::$7
(boolean~) animate::$8
(boolean~) animate::$9
(label) animate::@1
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$0
(byte~) findcol::$1
(boolean~) findcol::$10
(boolean~) findcol::$11
(byte~) findcol::$12
(byte~) findcol::$13
(byte~) findcol::$14
(byte~) findcol::$15
(boolean~) findcol::$16
(boolean~) findcol::$17
(byte~) findcol::$18
(boolean~) findcol::$19
(boolean~) findcol::$2
(boolean~) findcol::$3
(boolean~) findcol::$4
(boolean~) findcol::$5
(boolean~) findcol::$6
(boolean~) findcol::$7
(byte~) findcol::$8
(byte~) findcol::$9
(label) findcol::@1
(label) findcol::@2
(label) findcol::@3
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::i
(byte) findcol::mincol
(byte) findcol::mindiff
(byte) findcol::return
(byte) findcol::x
(byte) findcol::xp
(byte) findcol::y
(byte) findcol::yp
(void()) initscreen()
(byte*~) initscreen::$0
(boolean~) initscreen::$1
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$2
(label) main::@1
(label) main::@return
(byte) numpoints
(void()) render()
(byte~) render::$0
(boolean~) render::$1
(byte*~) render::$2
(boolean~) render::$3
(label) render::@1
(label) render::@2
(label) render::@return
(byte) render::col
(byte*) render::colline
(byte) render::x
(byte) render::y

Promoting word/signed word to byte* in SCREEN ← ((byte*)) 1024
Promoting word to byte* in COLORS ← ((byte*)) 55296
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS ← ((byte*)) (word) 55296
  (byte) FILL ← (byte/word/signed word) 230
  (byte) numpoints ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@1
main: scope:[main]  from
  (void~) main::$0 ← call initscreen 
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$1 ← call render 
  (void~) main::$2 ← call animate 
  if(true) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
animate: scope:[animate]  from
  (byte~) animate::$0 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte/signed byte/word/signed word) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte/word/signed word) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte/word/signed word) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4 animate::@6
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte/signed byte/word/signed word) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11 animate::@12
  to:animate::@5
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@6
animate::@return: scope:[animate]  from animate::@5
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
initscreen: scope:[initscreen]  from
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@2
initscreen::@2: scope:[initscreen]  from initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@2
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
render: scope:[render]  from
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte) render::x ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@2
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte/signed byte/word/signed word) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@4
render::@4: scope:[render]  from render::@3
  to:render::@return
render::@return: scope:[render]  from render::@4
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
findcol: scope:[findcol]  from
  (byte) findcol::mindiff ← (byte/word/signed word) 255
  (byte) findcol::mincol ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte~) findcol::$0 ← (byte[]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@11 findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17 findcol::@18
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@return
findcol::@11: scope:[findcol]  from
  to:findcol::@3
findcol::@4: scope:[findcol]  from findcol::@13 findcol::@2
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@13: scope:[findcol]  from
  to:findcol::@4
findcol::@6: scope:[findcol]  from findcol::@15 findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@15: scope:[findcol]  from
  to:findcol::@6
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
findcol::@18: scope:[findcol]  from
  to:findcol::@return
@5: scope:[]  from @4
  call main 
  to:@end
@end: scope:[]  from @5

Removing empty block main::@2
Removing empty block @1
Removing empty block @2
Removing empty block initscreen::@2
Removing empty block @3
Removing empty block render::@4
Removing empty block @4
Removing empty block findcol::@11
Removing empty block findcol::@13
Removing empty block findcol::@15
Removing empty block findcol::@18
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS ← ((byte*)) (word) 55296
  (byte) FILL ← (byte/word/signed word) 230
  (byte) numpoints ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@5
main: scope:[main]  from
  (void~) main::$0 ← call initscreen 
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$1 ← call render 
  (void~) main::$2 ← call animate 
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
animate: scope:[animate]  from
  (byte~) animate::$0 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte/signed byte/word/signed word) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte/word/signed word) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte/word/signed word) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte/signed byte/word/signed word) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
initscreen: scope:[initscreen]  from
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte) render::x ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@2
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte/signed byte/word/signed word) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from
  (byte) findcol::mindiff ← (byte/word/signed word) 255
  (byte) findcol::mincol ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte~) findcol::$0 ← (byte[]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
@5: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @5

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS ← ((byte*)) (word) 55296
  (byte) FILL ← (byte/word/signed word) 230
  (byte) numpoints ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@5
main: scope:[main]  from @5
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte~) animate::$0 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte/signed byte/word/signed word) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte/word/signed word) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte/word/signed word) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  *((byte[]) YPOS + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte/signed byte/word/signed word) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[]) XPOS *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte) render::x ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) findcol::x ← (byte) render::x
  (byte) findcol::y ← (byte) render::y
  (byte) findcol::return ← call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte~) render::$0 ← (byte) findcol::return
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*~) render::$2 ← (byte*) render::colline + (byte/signed byte/word/signed word) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte) findcol::mindiff ← (byte/word/signed word) 255
  (byte) findcol::mincol ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte~) findcol::$0 ← (byte[]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
@5: scope:[]  from @begin
  call main param-assignment
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS#0 ← ((byte*)) (word) 55296
  (byte) FILL#0 ← (byte/word/signed word) 230
  (byte) numpoints#0 ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS#0 ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@5
main: scope:[main]  from @5
  (byte[]) COLS#22 ← phi( @5/(byte[]) COLS#24 )
  (byte) numpoints#22 ← phi( @5/(byte) numpoints#24 )
  (byte[]) YPOS#28 ← phi( @5/(byte[]) YPOS#31 )
  (byte[]) XPOS#26 ← phi( @5/(byte[]) XPOS#30 )
  (byte*) COLORS#5 ← phi( @5/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( @5/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( @5/(byte*) SCREEN#4 )
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte[]) COLS#20 ← phi( main/(byte[]) COLS#22 )
  (byte) numpoints#20 ← phi( main/(byte) numpoints#22 )
  (byte[]) YPOS#23 ← phi( main/(byte[]) YPOS#28 )
  (byte[]) XPOS#20 ← phi( main/(byte[]) XPOS#26 )
  (byte*) COLORS#3 ← phi( main/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  (byte[]) COLS#19 ← phi( main::@3/(byte[]) COLS#20 main::@5/(byte[]) COLS#21 )
  (byte) numpoints#19 ← phi( main::@3/(byte) numpoints#20 main::@5/(byte) numpoints#21 )
  (byte[]) YPOS#18 ← phi( main::@3/(byte[]) YPOS#23 main::@5/(byte[]) YPOS#24 )
  (byte[]) XPOS#14 ← phi( main::@3/(byte[]) XPOS#20 main::@5/(byte[]) XPOS#21 )
  (byte*) COLORS#2 ← phi( main::@3/(byte*) COLORS#3 main::@5/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  (byte[]) COLS#23 ← phi( main::@1/(byte[]) COLS#19 )
  (byte) numpoints#23 ← phi( main::@1/(byte) numpoints#19 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[]) YPOS#14 ← phi( main::@1/(byte[]) YPOS#18 )
  (byte[]) XPOS#8 ← phi( main::@1/(byte[]) XPOS#14 )
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte[]) COLS#21 ← phi( main::@4/(byte[]) COLS#23 )
  (byte) numpoints#21 ← phi( main::@4/(byte) numpoints#23 )
  (byte[]) YPOS#24 ← phi( main::@4/(byte[]) YPOS#14 )
  (byte[]) XPOS#21 ← phi( main::@4/(byte[]) XPOS#8 )
  (byte*) COLORS#4 ← phi( main::@4/(byte*) COLORS#6 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte[]) YPOS#8 ← phi( main::@4/(byte[]) YPOS#14 )
  (byte[]) XPOS#1 ← phi( main::@4/(byte[]) XPOS#8 )
  (byte~) animate::$0 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte/signed byte/word/signed word) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[]) XPOS#9 ← phi( animate/(byte[]) XPOS#1 animate::@7/(byte[]) XPOS#2 )
  (byte[]) YPOS#1 ← phi( animate/(byte[]) YPOS#8 animate::@7/(byte[]) YPOS#9 )
  (byte~) animate::$5 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[]) YPOS#9 ← phi( animate/(byte[]) YPOS#8 )
  (byte[]) XPOS#2 ← phi( animate/(byte[]) XPOS#1 )
  *((byte[]) XPOS#2 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[]) YPOS#10 ← phi( animate::@1/(byte[]) YPOS#1 animate::@8/(byte[]) YPOS#2 )
  (byte[]) XPOS#3 ← phi( animate::@1/(byte[]) XPOS#9 animate::@8/(byte[]) XPOS#10 )
  (byte~) animate::$10 ← (byte[]) XPOS#3 *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#3 + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS#3 *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte/word/signed word) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[]) XPOS#10 ← phi( animate::@1/(byte[]) XPOS#9 )
  (byte[]) YPOS#2 ← phi( animate::@1/(byte[]) YPOS#1 )
  *((byte[]) YPOS#2 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[]) XPOS#16 ← phi( animate::@2/(byte[]) XPOS#3 animate::@9/(byte[]) XPOS#4 )
  (byte[]) YPOS#3 ← phi( animate::@2/(byte[]) YPOS#10 animate::@9/(byte[]) YPOS#11 )
  (byte~) animate::$15 ← (byte[]) YPOS#3 *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#3 + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS#3 *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[]) YPOS#11 ← phi( animate::@2/(byte[]) YPOS#10 )
  (byte[]) XPOS#4 ← phi( animate::@2/(byte[]) XPOS#3 )
  *((byte[]) XPOS#4 + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[]) XPOS#11 ← phi( animate::@10/(byte[]) XPOS#15 animate::@3/(byte[]) XPOS#16 )
  (byte[]) YPOS#4 ← phi( animate::@10/(byte[]) YPOS#5 animate::@3/(byte[]) YPOS#3 )
  (byte~) animate::$20 ← (byte[]) YPOS#4 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#4 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS#4 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte/word/signed word) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[]) XPOS#15 ← phi( animate::@3/(byte[]) XPOS#16 )
  (byte[]) YPOS#5 ← phi( animate::@3/(byte[]) YPOS#3 )
  *((byte[]) YPOS#5 + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  (byte[]) XPOS#5 ← phi( animate::@4/(byte[]) XPOS#11 )
  (byte[]) YPOS#6 ← phi( animate::@4/(byte[]) YPOS#4 )
  *((byte[]) YPOS#6 + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS#5 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS#5 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS#5 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte/signed byte/word/signed word) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte[]) XPOS#6 ← phi( animate::@11/(byte[]) XPOS#5 )
  (byte~) animate::$30 ← (byte[]) XPOS#6 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS#6 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte) FILL#2 ← phi( main/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[]) COLS#17 ← phi( main::@1/(byte[]) COLS#19 )
  (byte) numpoints#17 ← phi( main::@1/(byte) numpoints#19 )
  (byte[]) YPOS#25 ← phi( main::@1/(byte[]) YPOS#18 )
  (byte[]) XPOS#27 ← phi( main::@1/(byte[]) XPOS#14 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(byte[]) COLS#17 render::@3/(byte[]) COLS#18 )
  (byte) numpoints#15 ← phi( render/(byte) numpoints#17 render::@3/(byte) numpoints#18 )
  (byte[]) YPOS#19 ← phi( render/(byte[]) YPOS#25 render::@3/(byte[]) YPOS#26 )
  (byte[]) XPOS#22 ← phi( render/(byte[]) XPOS#27 render::@3/(byte[]) XPOS#28 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[]) COLS#14 ← phi( render::@1/(byte[]) COLS#15 render::@5/(byte[]) COLS#16 )
  (byte) numpoints#14 ← phi( render::@1/(byte) numpoints#15 render::@5/(byte) numpoints#16 )
  (byte[]) YPOS#15 ← phi( render::@1/(byte[]) YPOS#19 render::@5/(byte[]) YPOS#20 )
  (byte[]) XPOS#17 ← phi( render::@1/(byte[]) XPOS#22 render::@5/(byte[]) XPOS#23 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  (byte) findcol::return#0 ← call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[]) COLS#16 ← phi( render::@2/(byte[]) COLS#14 )
  (byte) numpoints#16 ← phi( render::@2/(byte) numpoints#14 )
  (byte[]) YPOS#20 ← phi( render::@2/(byte[]) YPOS#15 )
  (byte[]) XPOS#23 ← phi( render::@2/(byte[]) XPOS#17 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[]) COLS#18 ← phi( render::@5/(byte[]) COLS#16 )
  (byte) numpoints#18 ← phi( render::@5/(byte) numpoints#16 )
  (byte[]) YPOS#26 ← phi( render::@5/(byte[]) YPOS#20 )
  (byte[]) XPOS#28 ← phi( render::@5/(byte[]) XPOS#23 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte/signed byte/word/signed word) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[]) COLS#11 ← phi( render::@2/(byte[]) COLS#14 )
  (byte) numpoints#12 ← phi( render::@2/(byte) numpoints#14 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[]) YPOS#12 ← phi( render::@2/(byte[]) YPOS#15 )
  (byte[]) XPOS#12 ← phi( render::@2/(byte[]) XPOS#17 )
  (byte) findcol::mindiff#0 ← (byte/word/signed word) 255
  (byte) findcol::mincol#0 ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i#0 ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[]) COLS#9 ← phi( findcol/(byte[]) COLS#11 findcol::@8/(byte[]) COLS#12 )
  (byte) numpoints#10 ← phi( findcol/(byte) numpoints#12 findcol::@8/(byte) numpoints#1 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[]) YPOS#7 ← phi( findcol/(byte[]) YPOS#12 findcol::@8/(byte[]) YPOS#13 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[]) XPOS#7 ← phi( findcol/(byte[]) XPOS#12 findcol::@8/(byte[]) XPOS#13 )
  (byte~) findcol::$0 ← (byte[]) XPOS#7 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[]) YPOS#7 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[]) YPOS#32 ← phi( findcol::@1/(byte[]) YPOS#7 findcol::@3/(byte[]) YPOS#33 )
  (byte[]) XPOS#33 ← phi( findcol::@1/(byte[]) XPOS#7 findcol::@3/(byte[]) XPOS#34 )
  (byte[]) COLS#8 ← phi( findcol::@1/(byte[]) COLS#9 findcol::@3/(byte[]) COLS#10 )
  (byte) numpoints#9 ← phi( findcol::@1/(byte) numpoints#10 findcol::@3/(byte) numpoints#11 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[]) YPOS#34 ← phi( findcol::@1/(byte[]) YPOS#7 )
  (byte[]) XPOS#35 ← phi( findcol::@1/(byte[]) XPOS#7 )
  (byte[]) COLS#13 ← phi( findcol::@1/(byte[]) COLS#9 )
  (byte) numpoints#13 ← phi( findcol::@1/(byte) numpoints#10 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[]) YPOS#33 ← phi( findcol::@9/(byte[]) YPOS#34 )
  (byte[]) XPOS#34 ← phi( findcol::@9/(byte[]) XPOS#35 )
  (byte[]) COLS#10 ← phi( findcol::@9/(byte[]) COLS#13 )
  (byte) numpoints#11 ← phi( findcol::@9/(byte) numpoints#13 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return (byte) findcol::return#2
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[]) YPOS#30 ← phi( findcol::@2/(byte[]) YPOS#32 )
  (byte[]) XPOS#32 ← phi( findcol::@2/(byte[]) XPOS#33 )
  (byte[]) COLS#7 ← phi( findcol::@2/(byte[]) COLS#8 )
  (byte) numpoints#8 ← phi( findcol::@2/(byte) numpoints#9 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[]) YPOS#29 ← phi( findcol::@2/(byte[]) YPOS#32 )
  (byte[]) XPOS#31 ← phi( findcol::@2/(byte[]) XPOS#33 )
  (byte[]) COLS#6 ← phi( findcol::@2/(byte[]) COLS#8 )
  (byte) numpoints#7 ← phi( findcol::@2/(byte) numpoints#9 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[]) YPOS#27 ← phi( findcol::@12/(byte[]) YPOS#29 findcol::@4/(byte[]) YPOS#30 )
  (byte[]) XPOS#29 ← phi( findcol::@12/(byte[]) XPOS#31 findcol::@4/(byte[]) XPOS#32 )
  (byte[]) COLS#5 ← phi( findcol::@12/(byte[]) COLS#6 findcol::@4/(byte[]) COLS#7 )
  (byte) numpoints#6 ← phi( findcol::@12/(byte) numpoints#7 findcol::@4/(byte) numpoints#8 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[]) YPOS#22 ← phi( findcol::@5/(byte[]) YPOS#27 )
  (byte[]) XPOS#25 ← phi( findcol::@5/(byte[]) XPOS#29 )
  (byte[]) COLS#4 ← phi( findcol::@5/(byte[]) COLS#5 )
  (byte) numpoints#5 ← phi( findcol::@5/(byte) numpoints#6 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[]) YPOS#21 ← phi( findcol::@5/(byte[]) YPOS#27 )
  (byte[]) XPOS#24 ← phi( findcol::@5/(byte[]) XPOS#29 )
  (byte[]) COLS#3 ← phi( findcol::@5/(byte[]) COLS#5 )
  (byte) numpoints#4 ← phi( findcol::@5/(byte) numpoints#6 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[]) YPOS#17 ← phi( findcol::@14/(byte[]) YPOS#21 findcol::@6/(byte[]) YPOS#22 )
  (byte[]) XPOS#19 ← phi( findcol::@14/(byte[]) XPOS#24 findcol::@6/(byte[]) XPOS#25 )
  (byte[]) COLS#2 ← phi( findcol::@14/(byte[]) COLS#3 findcol::@6/(byte[]) COLS#4 )
  (byte) numpoints#3 ← phi( findcol::@14/(byte) numpoints#4 findcol::@6/(byte) numpoints#5 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[]) COLS#12 ← phi( findcol::@16/(byte[]) COLS#1 findcol::@7/(byte[]) COLS#2 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[]) YPOS#13 ← phi( findcol::@16/(byte[]) YPOS#16 findcol::@7/(byte[]) YPOS#17 )
  (byte[]) XPOS#13 ← phi( findcol::@16/(byte[]) XPOS#18 findcol::@7/(byte[]) XPOS#19 )
  (byte) numpoints#1 ← phi( findcol::@16/(byte) numpoints#2 findcol::@7/(byte) numpoints#3 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#1
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[]) YPOS#16 ← phi( findcol::@7/(byte[]) YPOS#17 )
  (byte[]) XPOS#18 ← phi( findcol::@7/(byte[]) XPOS#19 )
  (byte) numpoints#2 ← phi( findcol::@7/(byte) numpoints#3 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[]) COLS#1 ← phi( findcol::@7/(byte[]) COLS#2 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[]) COLS#1 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@5: scope:[]  from @begin
  (byte[]) COLS#24 ← phi( @begin/(byte[]) COLS#0 )
  (byte) numpoints#24 ← phi( @begin/(byte) numpoints#0 )
  (byte[]) YPOS#31 ← phi( @begin/(byte[]) YPOS#0 )
  (byte[]) XPOS#30 ← phi( @begin/(byte[]) XPOS#0 )
  (byte*) COLORS#7 ← phi( @begin/(byte*) COLORS#0 )
  (byte) FILL#4 ← phi( @begin/(byte) FILL#0 )
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS#0 ← ((byte*)) (word) 55296
  (byte) FILL#0 ← (byte/word/signed word) 230
  (byte) numpoints#0 ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS#0 ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@5
main: scope:[main]  from @5
  (byte[]) COLS#22 ← phi( @5/(byte[]) COLS#24 )
  (byte) numpoints#22 ← phi( @5/(byte) numpoints#24 )
  (byte[]) YPOS#28 ← phi( @5/(byte[]) YPOS#31 )
  (byte[]) XPOS#26 ← phi( @5/(byte[]) XPOS#30 )
  (byte*) COLORS#5 ← phi( @5/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( @5/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( @5/(byte*) SCREEN#4 )
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte[]) COLS#20 ← phi( main/(byte[]) COLS#22 )
  (byte) numpoints#20 ← phi( main/(byte) numpoints#22 )
  (byte[]) YPOS#23 ← phi( main/(byte[]) YPOS#28 )
  (byte[]) XPOS#20 ← phi( main/(byte[]) XPOS#26 )
  (byte*) COLORS#3 ← phi( main/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  (byte[]) COLS#19 ← phi( main::@3/(byte[]) COLS#20 main::@5/(byte[]) COLS#21 )
  (byte) numpoints#19 ← phi( main::@3/(byte) numpoints#20 main::@5/(byte) numpoints#21 )
  (byte[]) YPOS#18 ← phi( main::@3/(byte[]) YPOS#23 main::@5/(byte[]) YPOS#24 )
  (byte[]) XPOS#14 ← phi( main::@3/(byte[]) XPOS#20 main::@5/(byte[]) XPOS#21 )
  (byte*) COLORS#2 ← phi( main::@3/(byte*) COLORS#3 main::@5/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  (byte[]) COLS#23 ← phi( main::@1/(byte[]) COLS#19 )
  (byte) numpoints#23 ← phi( main::@1/(byte) numpoints#19 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[]) YPOS#14 ← phi( main::@1/(byte[]) YPOS#18 )
  (byte[]) XPOS#8 ← phi( main::@1/(byte[]) XPOS#14 )
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte[]) COLS#21 ← phi( main::@4/(byte[]) COLS#23 )
  (byte) numpoints#21 ← phi( main::@4/(byte) numpoints#23 )
  (byte[]) YPOS#24 ← phi( main::@4/(byte[]) YPOS#14 )
  (byte[]) XPOS#21 ← phi( main::@4/(byte[]) XPOS#8 )
  (byte*) COLORS#4 ← phi( main::@4/(byte*) COLORS#6 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte[]) YPOS#8 ← phi( main::@4/(byte[]) YPOS#14 )
  (byte[]) XPOS#1 ← phi( main::@4/(byte[]) XPOS#8 )
  (byte~) animate::$0 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte/signed byte/word/signed word) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[]) XPOS#9 ← phi( animate/(byte[]) XPOS#1 animate::@7/(byte[]) XPOS#2 )
  (byte[]) YPOS#1 ← phi( animate/(byte[]) YPOS#8 animate::@7/(byte[]) YPOS#9 )
  (byte~) animate::$5 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[]) YPOS#9 ← phi( animate/(byte[]) YPOS#8 )
  (byte[]) XPOS#2 ← phi( animate/(byte[]) XPOS#1 )
  *((byte[]) XPOS#2 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[]) YPOS#10 ← phi( animate::@1/(byte[]) YPOS#1 animate::@8/(byte[]) YPOS#2 )
  (byte[]) XPOS#3 ← phi( animate::@1/(byte[]) XPOS#9 animate::@8/(byte[]) XPOS#10 )
  (byte~) animate::$10 ← (byte[]) XPOS#3 *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#3 + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS#3 *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte/word/signed word) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[]) XPOS#10 ← phi( animate::@1/(byte[]) XPOS#9 )
  (byte[]) YPOS#2 ← phi( animate::@1/(byte[]) YPOS#1 )
  *((byte[]) YPOS#2 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[]) XPOS#16 ← phi( animate::@2/(byte[]) XPOS#3 animate::@9/(byte[]) XPOS#4 )
  (byte[]) YPOS#3 ← phi( animate::@2/(byte[]) YPOS#10 animate::@9/(byte[]) YPOS#11 )
  (byte~) animate::$15 ← (byte[]) YPOS#3 *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#3 + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS#3 *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[]) YPOS#11 ← phi( animate::@2/(byte[]) YPOS#10 )
  (byte[]) XPOS#4 ← phi( animate::@2/(byte[]) XPOS#3 )
  *((byte[]) XPOS#4 + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[]) XPOS#11 ← phi( animate::@10/(byte[]) XPOS#15 animate::@3/(byte[]) XPOS#16 )
  (byte[]) YPOS#4 ← phi( animate::@10/(byte[]) YPOS#5 animate::@3/(byte[]) YPOS#3 )
  (byte~) animate::$20 ← (byte[]) YPOS#4 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#4 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS#4 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte/word/signed word) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[]) XPOS#15 ← phi( animate::@3/(byte[]) XPOS#16 )
  (byte[]) YPOS#5 ← phi( animate::@3/(byte[]) YPOS#3 )
  *((byte[]) YPOS#5 + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  (byte[]) XPOS#5 ← phi( animate::@4/(byte[]) XPOS#11 )
  (byte[]) YPOS#6 ← phi( animate::@4/(byte[]) YPOS#4 )
  *((byte[]) YPOS#6 + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS#5 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS#5 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS#5 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte/signed byte/word/signed word) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte[]) XPOS#6 ← phi( animate::@11/(byte[]) XPOS#5 )
  (byte~) animate::$30 ← (byte[]) XPOS#6 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS#6 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte) FILL#2 ← phi( main/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[]) COLS#17 ← phi( main::@1/(byte[]) COLS#19 )
  (byte) numpoints#17 ← phi( main::@1/(byte) numpoints#19 )
  (byte[]) YPOS#25 ← phi( main::@1/(byte[]) YPOS#18 )
  (byte[]) XPOS#27 ← phi( main::@1/(byte[]) XPOS#14 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(byte[]) COLS#17 render::@3/(byte[]) COLS#18 )
  (byte) numpoints#15 ← phi( render/(byte) numpoints#17 render::@3/(byte) numpoints#18 )
  (byte[]) YPOS#19 ← phi( render/(byte[]) YPOS#25 render::@3/(byte[]) YPOS#26 )
  (byte[]) XPOS#22 ← phi( render/(byte[]) XPOS#27 render::@3/(byte[]) XPOS#28 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[]) COLS#14 ← phi( render::@1/(byte[]) COLS#15 render::@5/(byte[]) COLS#16 )
  (byte) numpoints#14 ← phi( render::@1/(byte) numpoints#15 render::@5/(byte) numpoints#16 )
  (byte[]) YPOS#15 ← phi( render::@1/(byte[]) YPOS#19 render::@5/(byte[]) YPOS#20 )
  (byte[]) XPOS#17 ← phi( render::@1/(byte[]) XPOS#22 render::@5/(byte[]) XPOS#23 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[]) COLS#16 ← phi( render::@2/(byte[]) COLS#14 )
  (byte) numpoints#16 ← phi( render::@2/(byte) numpoints#14 )
  (byte[]) YPOS#20 ← phi( render::@2/(byte[]) YPOS#15 )
  (byte[]) XPOS#23 ← phi( render::@2/(byte[]) XPOS#17 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[]) COLS#18 ← phi( render::@5/(byte[]) COLS#16 )
  (byte) numpoints#18 ← phi( render::@5/(byte) numpoints#16 )
  (byte[]) YPOS#26 ← phi( render::@5/(byte[]) YPOS#20 )
  (byte[]) XPOS#28 ← phi( render::@5/(byte[]) XPOS#23 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte/signed byte/word/signed word) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[]) COLS#11 ← phi( render::@2/(byte[]) COLS#14 )
  (byte) numpoints#12 ← phi( render::@2/(byte) numpoints#14 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[]) YPOS#12 ← phi( render::@2/(byte[]) YPOS#15 )
  (byte[]) XPOS#12 ← phi( render::@2/(byte[]) XPOS#17 )
  (byte) findcol::mindiff#0 ← (byte/word/signed word) 255
  (byte) findcol::mincol#0 ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i#0 ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[]) COLS#9 ← phi( findcol/(byte[]) COLS#11 findcol::@8/(byte[]) COLS#12 )
  (byte) numpoints#10 ← phi( findcol/(byte) numpoints#12 findcol::@8/(byte) numpoints#1 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[]) YPOS#7 ← phi( findcol/(byte[]) YPOS#12 findcol::@8/(byte[]) YPOS#13 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[]) XPOS#7 ← phi( findcol/(byte[]) XPOS#12 findcol::@8/(byte[]) XPOS#13 )
  (byte~) findcol::$0 ← (byte[]) XPOS#7 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[]) YPOS#7 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[]) YPOS#32 ← phi( findcol::@1/(byte[]) YPOS#7 findcol::@3/(byte[]) YPOS#33 )
  (byte[]) XPOS#33 ← phi( findcol::@1/(byte[]) XPOS#7 findcol::@3/(byte[]) XPOS#34 )
  (byte[]) COLS#8 ← phi( findcol::@1/(byte[]) COLS#9 findcol::@3/(byte[]) COLS#10 )
  (byte) numpoints#9 ← phi( findcol::@1/(byte) numpoints#10 findcol::@3/(byte) numpoints#11 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[]) YPOS#34 ← phi( findcol::@1/(byte[]) YPOS#7 )
  (byte[]) XPOS#35 ← phi( findcol::@1/(byte[]) XPOS#7 )
  (byte[]) COLS#13 ← phi( findcol::@1/(byte[]) COLS#9 )
  (byte) numpoints#13 ← phi( findcol::@1/(byte) numpoints#10 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[]) YPOS#33 ← phi( findcol::@9/(byte[]) YPOS#34 )
  (byte[]) XPOS#34 ← phi( findcol::@9/(byte[]) XPOS#35 )
  (byte[]) COLS#10 ← phi( findcol::@9/(byte[]) COLS#13 )
  (byte) numpoints#11 ← phi( findcol::@9/(byte) numpoints#13 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[]) YPOS#30 ← phi( findcol::@2/(byte[]) YPOS#32 )
  (byte[]) XPOS#32 ← phi( findcol::@2/(byte[]) XPOS#33 )
  (byte[]) COLS#7 ← phi( findcol::@2/(byte[]) COLS#8 )
  (byte) numpoints#8 ← phi( findcol::@2/(byte) numpoints#9 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[]) YPOS#29 ← phi( findcol::@2/(byte[]) YPOS#32 )
  (byte[]) XPOS#31 ← phi( findcol::@2/(byte[]) XPOS#33 )
  (byte[]) COLS#6 ← phi( findcol::@2/(byte[]) COLS#8 )
  (byte) numpoints#7 ← phi( findcol::@2/(byte) numpoints#9 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[]) YPOS#27 ← phi( findcol::@12/(byte[]) YPOS#29 findcol::@4/(byte[]) YPOS#30 )
  (byte[]) XPOS#29 ← phi( findcol::@12/(byte[]) XPOS#31 findcol::@4/(byte[]) XPOS#32 )
  (byte[]) COLS#5 ← phi( findcol::@12/(byte[]) COLS#6 findcol::@4/(byte[]) COLS#7 )
  (byte) numpoints#6 ← phi( findcol::@12/(byte) numpoints#7 findcol::@4/(byte) numpoints#8 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[]) YPOS#22 ← phi( findcol::@5/(byte[]) YPOS#27 )
  (byte[]) XPOS#25 ← phi( findcol::@5/(byte[]) XPOS#29 )
  (byte[]) COLS#4 ← phi( findcol::@5/(byte[]) COLS#5 )
  (byte) numpoints#5 ← phi( findcol::@5/(byte) numpoints#6 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[]) YPOS#21 ← phi( findcol::@5/(byte[]) YPOS#27 )
  (byte[]) XPOS#24 ← phi( findcol::@5/(byte[]) XPOS#29 )
  (byte[]) COLS#3 ← phi( findcol::@5/(byte[]) COLS#5 )
  (byte) numpoints#4 ← phi( findcol::@5/(byte) numpoints#6 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[]) YPOS#17 ← phi( findcol::@14/(byte[]) YPOS#21 findcol::@6/(byte[]) YPOS#22 )
  (byte[]) XPOS#19 ← phi( findcol::@14/(byte[]) XPOS#24 findcol::@6/(byte[]) XPOS#25 )
  (byte[]) COLS#2 ← phi( findcol::@14/(byte[]) COLS#3 findcol::@6/(byte[]) COLS#4 )
  (byte) numpoints#3 ← phi( findcol::@14/(byte) numpoints#4 findcol::@6/(byte) numpoints#5 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[]) COLS#12 ← phi( findcol::@16/(byte[]) COLS#1 findcol::@7/(byte[]) COLS#2 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[]) YPOS#13 ← phi( findcol::@16/(byte[]) YPOS#16 findcol::@7/(byte[]) YPOS#17 )
  (byte[]) XPOS#13 ← phi( findcol::@16/(byte[]) XPOS#18 findcol::@7/(byte[]) XPOS#19 )
  (byte) numpoints#1 ← phi( findcol::@16/(byte) numpoints#2 findcol::@7/(byte) numpoints#3 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#1
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[]) YPOS#16 ← phi( findcol::@7/(byte[]) YPOS#17 )
  (byte[]) XPOS#18 ← phi( findcol::@7/(byte[]) XPOS#19 )
  (byte) numpoints#2 ← phi( findcol::@7/(byte) numpoints#3 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[]) COLS#1 ← phi( findcol::@7/(byte[]) COLS#2 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[]) COLS#1 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@5: scope:[]  from @begin
  (byte[]) COLS#24 ← phi( @begin/(byte[]) COLS#0 )
  (byte) numpoints#24 ← phi( @begin/(byte) numpoints#0 )
  (byte[]) YPOS#31 ← phi( @begin/(byte[]) YPOS#0 )
  (byte[]) XPOS#30 ← phi( @begin/(byte[]) XPOS#0 )
  (byte*) COLORS#7 ← phi( @begin/(byte*) COLORS#0 )
  (byte) FILL#4 ← phi( @begin/(byte) FILL#0 )
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6

INITIAL SSA SYMBOL TABLE
(label) @5
(label) @6
(label) @begin
(label) @end
(byte*) COLORS
(byte*) COLORS#0
(byte*) COLORS#1
(byte*) COLORS#2
(byte*) COLORS#3
(byte*) COLORS#4
(byte*) COLORS#5
(byte*) COLORS#6
(byte*) COLORS#7
(byte[]) COLS
(byte[]) COLS#0
(byte[]) COLS#1
(byte[]) COLS#10
(byte[]) COLS#11
(byte[]) COLS#12
(byte[]) COLS#13
(byte[]) COLS#14
(byte[]) COLS#15
(byte[]) COLS#16
(byte[]) COLS#17
(byte[]) COLS#18
(byte[]) COLS#19
(byte[]) COLS#2
(byte[]) COLS#20
(byte[]) COLS#21
(byte[]) COLS#22
(byte[]) COLS#23
(byte[]) COLS#24
(byte[]) COLS#3
(byte[]) COLS#4
(byte[]) COLS#5
(byte[]) COLS#6
(byte[]) COLS#7
(byte[]) COLS#8
(byte[]) COLS#9
(byte) FILL
(byte) FILL#0
(byte) FILL#1
(byte) FILL#2
(byte) FILL#3
(byte) FILL#4
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte[]) XPOS
(byte[]) XPOS#0
(byte[]) XPOS#1
(byte[]) XPOS#10
(byte[]) XPOS#11
(byte[]) XPOS#12
(byte[]) XPOS#13
(byte[]) XPOS#14
(byte[]) XPOS#15
(byte[]) XPOS#16
(byte[]) XPOS#17
(byte[]) XPOS#18
(byte[]) XPOS#19
(byte[]) XPOS#2
(byte[]) XPOS#20
(byte[]) XPOS#21
(byte[]) XPOS#22
(byte[]) XPOS#23
(byte[]) XPOS#24
(byte[]) XPOS#25
(byte[]) XPOS#26
(byte[]) XPOS#27
(byte[]) XPOS#28
(byte[]) XPOS#29
(byte[]) XPOS#3
(byte[]) XPOS#30
(byte[]) XPOS#31
(byte[]) XPOS#32
(byte[]) XPOS#33
(byte[]) XPOS#34
(byte[]) XPOS#35
(byte[]) XPOS#4
(byte[]) XPOS#5
(byte[]) XPOS#6
(byte[]) XPOS#7
(byte[]) XPOS#8
(byte[]) XPOS#9
(byte[]) YPOS
(byte[]) YPOS#0
(byte[]) YPOS#1
(byte[]) YPOS#10
(byte[]) YPOS#11
(byte[]) YPOS#12
(byte[]) YPOS#13
(byte[]) YPOS#14
(byte[]) YPOS#15
(byte[]) YPOS#16
(byte[]) YPOS#17
(byte[]) YPOS#18
(byte[]) YPOS#19
(byte[]) YPOS#2
(byte[]) YPOS#20
(byte[]) YPOS#21
(byte[]) YPOS#22
(byte[]) YPOS#23
(byte[]) YPOS#24
(byte[]) YPOS#25
(byte[]) YPOS#26
(byte[]) YPOS#27
(byte[]) YPOS#28
(byte[]) YPOS#29
(byte[]) YPOS#3
(byte[]) YPOS#30
(byte[]) YPOS#31
(byte[]) YPOS#32
(byte[]) YPOS#33
(byte[]) YPOS#34
(byte[]) YPOS#4
(byte[]) YPOS#5
(byte[]) YPOS#6
(byte[]) YPOS#7
(byte[]) YPOS#8
(byte[]) YPOS#9
(void()) animate()
(byte~) animate::$0
(byte~) animate::$1
(byte~) animate::$10
(byte~) animate::$11
(byte~) animate::$12
(boolean~) animate::$13
(boolean~) animate::$14
(byte~) animate::$15
(byte~) animate::$16
(byte~) animate::$17
(boolean~) animate::$18
(boolean~) animate::$19
(byte~) animate::$2
(byte~) animate::$20
(byte~) animate::$21
(byte~) animate::$22
(boolean~) animate::$23
(boolean~) animate::$24
(byte~) animate::$25
(byte~) animate::$26
(byte~) animate::$27
(boolean~) animate::$28
(boolean~) animate::$29
(boolean~) animate::$3
(byte~) animate::$30
(byte~) animate::$31
(boolean~) animate::$4
(byte~) animate::$5
(byte~) animate::$6
(byte~) animate::$7
(boolean~) animate::$8
(boolean~) animate::$9
(label) animate::@1
(label) animate::@10
(label) animate::@11
(label) animate::@12
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$0
(byte~) findcol::$1
(boolean~) findcol::$10
(boolean~) findcol::$11
(byte~) findcol::$12
(byte~) findcol::$13
(byte~) findcol::$14
(byte~) findcol::$15
(boolean~) findcol::$16
(boolean~) findcol::$17
(byte~) findcol::$18
(boolean~) findcol::$19
(boolean~) findcol::$2
(boolean~) findcol::$3
(boolean~) findcol::$4
(boolean~) findcol::$5
(boolean~) findcol::$6
(boolean~) findcol::$7
(byte~) findcol::$8
(byte~) findcol::$9
(label) findcol::@1
(label) findcol::@10
(label) findcol::@12
(label) findcol::@14
(label) findcol::@16
(label) findcol::@17
(label) findcol::@2
(label) findcol::@3
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#0
(byte) findcol::diff#1
(byte) findcol::diff#2
(byte) findcol::diff#3
(byte) findcol::diff#4
(byte) findcol::diff#5
(byte) findcol::diff#6
(byte) findcol::diff#7
(byte) findcol::diff#8
(byte) findcol::i
(byte) findcol::i#0
(byte) findcol::i#1
(byte) findcol::i#10
(byte) findcol::i#11
(byte) findcol::i#12
(byte) findcol::i#13
(byte) findcol::i#2
(byte) findcol::i#3
(byte) findcol::i#4
(byte) findcol::i#5
(byte) findcol::i#6
(byte) findcol::i#7
(byte) findcol::i#8
(byte) findcol::i#9
(byte) findcol::mincol
(byte) findcol::mincol#0
(byte) findcol::mincol#1
(byte) findcol::mincol#10
(byte) findcol::mincol#11
(byte) findcol::mincol#12
(byte) findcol::mincol#13
(byte) findcol::mincol#2
(byte) findcol::mincol#3
(byte) findcol::mincol#4
(byte) findcol::mincol#5
(byte) findcol::mincol#6
(byte) findcol::mincol#7
(byte) findcol::mincol#8
(byte) findcol::mincol#9
(byte) findcol::mindiff
(byte) findcol::mindiff#0
(byte) findcol::mindiff#1
(byte) findcol::mindiff#10
(byte) findcol::mindiff#11
(byte) findcol::mindiff#12
(byte) findcol::mindiff#2
(byte) findcol::mindiff#3
(byte) findcol::mindiff#4
(byte) findcol::mindiff#5
(byte) findcol::mindiff#6
(byte) findcol::mindiff#7
(byte) findcol::mindiff#8
(byte) findcol::mindiff#9
(byte) findcol::return
(byte) findcol::return#0
(byte) findcol::return#1
(byte) findcol::return#2
(byte) findcol::return#3
(byte) findcol::return#4
(byte) findcol::return#5
(byte) findcol::x
(byte) findcol::x#0
(byte) findcol::x#1
(byte) findcol::x#10
(byte) findcol::x#11
(byte) findcol::x#12
(byte) findcol::x#13
(byte) findcol::x#2
(byte) findcol::x#3
(byte) findcol::x#4
(byte) findcol::x#5
(byte) findcol::x#6
(byte) findcol::x#7
(byte) findcol::x#8
(byte) findcol::x#9
(byte) findcol::xp
(byte) findcol::xp#0
(byte) findcol::xp#1
(byte) findcol::xp#2
(byte) findcol::xp#3
(byte) findcol::xp#4
(byte) findcol::xp#5
(byte) findcol::y
(byte) findcol::y#0
(byte) findcol::y#1
(byte) findcol::y#10
(byte) findcol::y#11
(byte) findcol::y#12
(byte) findcol::y#13
(byte) findcol::y#2
(byte) findcol::y#3
(byte) findcol::y#4
(byte) findcol::y#5
(byte) findcol::y#6
(byte) findcol::y#7
(byte) findcol::y#8
(byte) findcol::y#9
(byte) findcol::yp
(byte) findcol::yp#0
(byte) findcol::yp#1
(byte) findcol::yp#2
(byte) findcol::yp#3
(byte) findcol::yp#4
(byte) findcol::yp#5
(byte) findcol::yp#6
(byte) findcol::yp#7
(byte) findcol::yp#8
(void()) initscreen()
(byte*~) initscreen::$0
(boolean~) initscreen::$1
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#0
(byte*) initscreen::screen#1
(byte*) initscreen::screen#2
(void()) main()
(label) main::@1
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) numpoints
(byte) numpoints#0
(byte) numpoints#1
(byte) numpoints#10
(byte) numpoints#11
(byte) numpoints#12
(byte) numpoints#13
(byte) numpoints#14
(byte) numpoints#15
(byte) numpoints#16
(byte) numpoints#17
(byte) numpoints#18
(byte) numpoints#19
(byte) numpoints#2
(byte) numpoints#20
(byte) numpoints#21
(byte) numpoints#22
(byte) numpoints#23
(byte) numpoints#24
(byte) numpoints#3
(byte) numpoints#4
(byte) numpoints#5
(byte) numpoints#6
(byte) numpoints#7
(byte) numpoints#8
(byte) numpoints#9
(void()) render()
(byte~) render::$0
(boolean~) render::$1
(byte*~) render::$2
(boolean~) render::$3
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@5
(label) render::@return
(byte) render::col
(byte) render::col#0
(byte*) render::colline
(byte*) render::colline#0
(byte*) render::colline#1
(byte*) render::colline#2
(byte*) render::colline#3
(byte*) render::colline#4
(byte*) render::colline#5
(byte) render::x
(byte) render::x#0
(byte) render::x#1
(byte) render::x#2
(byte) render::x#3
(byte) render::y
(byte) render::y#0
(byte) render::y#1
(byte) render::y#2
(byte) render::y#3
(byte) render::y#4
(byte) render::y#5

Culled Empty Block (label) animate::@5
Culled Empty Block (label) animate::@6
Culled Empty Block (label) @6
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS#0 ← ((byte*)) (word) 55296
  (byte) FILL#0 ← (byte/word/signed word) 230
  (byte) numpoints#0 ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS#0 ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@5
main: scope:[main]  from @5
  (byte[]) COLS#22 ← phi( @5/(byte[]) COLS#24 )
  (byte) numpoints#22 ← phi( @5/(byte) numpoints#24 )
  (byte[]) YPOS#28 ← phi( @5/(byte[]) YPOS#31 )
  (byte[]) XPOS#26 ← phi( @5/(byte[]) XPOS#30 )
  (byte*) COLORS#5 ← phi( @5/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( @5/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( @5/(byte*) SCREEN#4 )
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte[]) COLS#20 ← phi( main/(byte[]) COLS#22 )
  (byte) numpoints#20 ← phi( main/(byte) numpoints#22 )
  (byte[]) YPOS#23 ← phi( main/(byte[]) YPOS#28 )
  (byte[]) XPOS#20 ← phi( main/(byte[]) XPOS#26 )
  (byte*) COLORS#3 ← phi( main/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  (byte[]) COLS#19 ← phi( main::@3/(byte[]) COLS#20 main::@5/(byte[]) COLS#21 )
  (byte) numpoints#19 ← phi( main::@3/(byte) numpoints#20 main::@5/(byte) numpoints#21 )
  (byte[]) YPOS#18 ← phi( main::@3/(byte[]) YPOS#23 main::@5/(byte[]) YPOS#24 )
  (byte[]) XPOS#14 ← phi( main::@3/(byte[]) XPOS#20 main::@5/(byte[]) XPOS#21 )
  (byte*) COLORS#2 ← phi( main::@3/(byte*) COLORS#3 main::@5/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  (byte[]) COLS#23 ← phi( main::@1/(byte[]) COLS#19 )
  (byte) numpoints#23 ← phi( main::@1/(byte) numpoints#19 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[]) YPOS#14 ← phi( main::@1/(byte[]) YPOS#18 )
  (byte[]) XPOS#8 ← phi( main::@1/(byte[]) XPOS#14 )
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte[]) COLS#21 ← phi( main::@4/(byte[]) COLS#23 )
  (byte) numpoints#21 ← phi( main::@4/(byte) numpoints#23 )
  (byte[]) YPOS#24 ← phi( main::@4/(byte[]) YPOS#14 )
  (byte[]) XPOS#21 ← phi( main::@4/(byte[]) XPOS#8 )
  (byte*) COLORS#4 ← phi( main::@4/(byte*) COLORS#6 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte[]) YPOS#8 ← phi( main::@4/(byte[]) YPOS#14 )
  (byte[]) XPOS#1 ← phi( main::@4/(byte[]) XPOS#8 )
  (byte~) animate::$0 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte/signed byte/word/signed word) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[]) XPOS#9 ← phi( animate/(byte[]) XPOS#1 animate::@7/(byte[]) XPOS#2 )
  (byte[]) YPOS#1 ← phi( animate/(byte[]) YPOS#8 animate::@7/(byte[]) YPOS#9 )
  (byte~) animate::$5 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[]) YPOS#9 ← phi( animate/(byte[]) YPOS#8 )
  (byte[]) XPOS#2 ← phi( animate/(byte[]) XPOS#1 )
  *((byte[]) XPOS#2 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[]) YPOS#10 ← phi( animate::@1/(byte[]) YPOS#1 animate::@8/(byte[]) YPOS#2 )
  (byte[]) XPOS#3 ← phi( animate::@1/(byte[]) XPOS#9 animate::@8/(byte[]) XPOS#10 )
  (byte~) animate::$10 ← (byte[]) XPOS#3 *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#3 + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS#3 *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte/word/signed word) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[]) XPOS#10 ← phi( animate::@1/(byte[]) XPOS#9 )
  (byte[]) YPOS#2 ← phi( animate::@1/(byte[]) YPOS#1 )
  *((byte[]) YPOS#2 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[]) XPOS#16 ← phi( animate::@2/(byte[]) XPOS#3 animate::@9/(byte[]) XPOS#4 )
  (byte[]) YPOS#3 ← phi( animate::@2/(byte[]) YPOS#10 animate::@9/(byte[]) YPOS#11 )
  (byte~) animate::$15 ← (byte[]) YPOS#3 *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#3 + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS#3 *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte/signed byte/word/signed word) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[]) YPOS#11 ← phi( animate::@2/(byte[]) YPOS#10 )
  (byte[]) XPOS#4 ← phi( animate::@2/(byte[]) XPOS#3 )
  *((byte[]) XPOS#4 + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[]) XPOS#11 ← phi( animate::@10/(byte[]) XPOS#15 animate::@3/(byte[]) XPOS#16 )
  (byte[]) YPOS#4 ← phi( animate::@10/(byte[]) YPOS#5 animate::@3/(byte[]) YPOS#3 )
  (byte~) animate::$20 ← (byte[]) YPOS#4 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#4 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS#4 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte/word/signed word) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[]) XPOS#15 ← phi( animate::@3/(byte[]) XPOS#16 )
  (byte[]) YPOS#5 ← phi( animate::@3/(byte[]) YPOS#3 )
  *((byte[]) YPOS#5 + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  (byte[]) XPOS#5 ← phi( animate::@4/(byte[]) XPOS#11 )
  (byte[]) YPOS#6 ← phi( animate::@4/(byte[]) YPOS#4 )
  *((byte[]) YPOS#6 + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS#5 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS#5 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS#5 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte/signed byte/word/signed word) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte[]) XPOS#6 ← phi( animate::@11/(byte[]) XPOS#5 )
  (byte~) animate::$30 ← (byte[]) XPOS#6 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS#6 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte) FILL#2 ← phi( main/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[]) COLS#17 ← phi( main::@1/(byte[]) COLS#19 )
  (byte) numpoints#17 ← phi( main::@1/(byte) numpoints#19 )
  (byte[]) YPOS#25 ← phi( main::@1/(byte[]) YPOS#18 )
  (byte[]) XPOS#27 ← phi( main::@1/(byte[]) XPOS#14 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(byte[]) COLS#17 render::@3/(byte[]) COLS#18 )
  (byte) numpoints#15 ← phi( render/(byte) numpoints#17 render::@3/(byte) numpoints#18 )
  (byte[]) YPOS#19 ← phi( render/(byte[]) YPOS#25 render::@3/(byte[]) YPOS#26 )
  (byte[]) XPOS#22 ← phi( render/(byte[]) XPOS#27 render::@3/(byte[]) XPOS#28 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[]) COLS#14 ← phi( render::@1/(byte[]) COLS#15 render::@5/(byte[]) COLS#16 )
  (byte) numpoints#14 ← phi( render::@1/(byte) numpoints#15 render::@5/(byte) numpoints#16 )
  (byte[]) YPOS#15 ← phi( render::@1/(byte[]) YPOS#19 render::@5/(byte[]) YPOS#20 )
  (byte[]) XPOS#17 ← phi( render::@1/(byte[]) XPOS#22 render::@5/(byte[]) XPOS#23 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[]) COLS#16 ← phi( render::@2/(byte[]) COLS#14 )
  (byte) numpoints#16 ← phi( render::@2/(byte) numpoints#14 )
  (byte[]) YPOS#20 ← phi( render::@2/(byte[]) YPOS#15 )
  (byte[]) XPOS#23 ← phi( render::@2/(byte[]) XPOS#17 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[]) COLS#18 ← phi( render::@5/(byte[]) COLS#16 )
  (byte) numpoints#18 ← phi( render::@5/(byte) numpoints#16 )
  (byte[]) YPOS#26 ← phi( render::@5/(byte[]) YPOS#20 )
  (byte[]) XPOS#28 ← phi( render::@5/(byte[]) XPOS#23 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte/signed byte/word/signed word) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[]) COLS#11 ← phi( render::@2/(byte[]) COLS#14 )
  (byte) numpoints#12 ← phi( render::@2/(byte) numpoints#14 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[]) YPOS#12 ← phi( render::@2/(byte[]) YPOS#15 )
  (byte[]) XPOS#12 ← phi( render::@2/(byte[]) XPOS#17 )
  (byte) findcol::mindiff#0 ← (byte/word/signed word) 255
  (byte) findcol::mincol#0 ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i#0 ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[]) COLS#9 ← phi( findcol/(byte[]) COLS#11 findcol::@8/(byte[]) COLS#12 )
  (byte) numpoints#10 ← phi( findcol/(byte) numpoints#12 findcol::@8/(byte) numpoints#1 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[]) YPOS#7 ← phi( findcol/(byte[]) YPOS#12 findcol::@8/(byte[]) YPOS#13 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[]) XPOS#7 ← phi( findcol/(byte[]) XPOS#12 findcol::@8/(byte[]) XPOS#13 )
  (byte~) findcol::$0 ← (byte[]) XPOS#7 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[]) YPOS#7 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[]) YPOS#32 ← phi( findcol::@1/(byte[]) YPOS#7 findcol::@3/(byte[]) YPOS#33 )
  (byte[]) XPOS#33 ← phi( findcol::@1/(byte[]) XPOS#7 findcol::@3/(byte[]) XPOS#34 )
  (byte[]) COLS#8 ← phi( findcol::@1/(byte[]) COLS#9 findcol::@3/(byte[]) COLS#10 )
  (byte) numpoints#9 ← phi( findcol::@1/(byte) numpoints#10 findcol::@3/(byte) numpoints#11 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[]) YPOS#34 ← phi( findcol::@1/(byte[]) YPOS#7 )
  (byte[]) XPOS#35 ← phi( findcol::@1/(byte[]) XPOS#7 )
  (byte[]) COLS#13 ← phi( findcol::@1/(byte[]) COLS#9 )
  (byte) numpoints#13 ← phi( findcol::@1/(byte) numpoints#10 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[]) YPOS#33 ← phi( findcol::@9/(byte[]) YPOS#34 )
  (byte[]) XPOS#34 ← phi( findcol::@9/(byte[]) XPOS#35 )
  (byte[]) COLS#10 ← phi( findcol::@9/(byte[]) COLS#13 )
  (byte) numpoints#11 ← phi( findcol::@9/(byte) numpoints#13 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[]) YPOS#30 ← phi( findcol::@2/(byte[]) YPOS#32 )
  (byte[]) XPOS#32 ← phi( findcol::@2/(byte[]) XPOS#33 )
  (byte[]) COLS#7 ← phi( findcol::@2/(byte[]) COLS#8 )
  (byte) numpoints#8 ← phi( findcol::@2/(byte) numpoints#9 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[]) YPOS#29 ← phi( findcol::@2/(byte[]) YPOS#32 )
  (byte[]) XPOS#31 ← phi( findcol::@2/(byte[]) XPOS#33 )
  (byte[]) COLS#6 ← phi( findcol::@2/(byte[]) COLS#8 )
  (byte) numpoints#7 ← phi( findcol::@2/(byte) numpoints#9 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[]) YPOS#27 ← phi( findcol::@12/(byte[]) YPOS#29 findcol::@4/(byte[]) YPOS#30 )
  (byte[]) XPOS#29 ← phi( findcol::@12/(byte[]) XPOS#31 findcol::@4/(byte[]) XPOS#32 )
  (byte[]) COLS#5 ← phi( findcol::@12/(byte[]) COLS#6 findcol::@4/(byte[]) COLS#7 )
  (byte) numpoints#6 ← phi( findcol::@12/(byte) numpoints#7 findcol::@4/(byte) numpoints#8 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[]) YPOS#22 ← phi( findcol::@5/(byte[]) YPOS#27 )
  (byte[]) XPOS#25 ← phi( findcol::@5/(byte[]) XPOS#29 )
  (byte[]) COLS#4 ← phi( findcol::@5/(byte[]) COLS#5 )
  (byte) numpoints#5 ← phi( findcol::@5/(byte) numpoints#6 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[]) YPOS#21 ← phi( findcol::@5/(byte[]) YPOS#27 )
  (byte[]) XPOS#24 ← phi( findcol::@5/(byte[]) XPOS#29 )
  (byte[]) COLS#3 ← phi( findcol::@5/(byte[]) COLS#5 )
  (byte) numpoints#4 ← phi( findcol::@5/(byte) numpoints#6 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[]) YPOS#17 ← phi( findcol::@14/(byte[]) YPOS#21 findcol::@6/(byte[]) YPOS#22 )
  (byte[]) XPOS#19 ← phi( findcol::@14/(byte[]) XPOS#24 findcol::@6/(byte[]) XPOS#25 )
  (byte[]) COLS#2 ← phi( findcol::@14/(byte[]) COLS#3 findcol::@6/(byte[]) COLS#4 )
  (byte) numpoints#3 ← phi( findcol::@14/(byte) numpoints#4 findcol::@6/(byte) numpoints#5 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[]) COLS#12 ← phi( findcol::@16/(byte[]) COLS#1 findcol::@7/(byte[]) COLS#2 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[]) YPOS#13 ← phi( findcol::@16/(byte[]) YPOS#16 findcol::@7/(byte[]) YPOS#17 )
  (byte[]) XPOS#13 ← phi( findcol::@16/(byte[]) XPOS#18 findcol::@7/(byte[]) XPOS#19 )
  (byte) numpoints#1 ← phi( findcol::@16/(byte) numpoints#2 findcol::@7/(byte) numpoints#3 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#1
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[]) YPOS#16 ← phi( findcol::@7/(byte[]) YPOS#17 )
  (byte[]) XPOS#18 ← phi( findcol::@7/(byte[]) XPOS#19 )
  (byte) numpoints#2 ← phi( findcol::@7/(byte) numpoints#3 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[]) COLS#1 ← phi( findcol::@7/(byte[]) COLS#2 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[]) COLS#1 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@5: scope:[]  from @begin
  (byte[]) COLS#24 ← phi( @begin/(byte[]) COLS#0 )
  (byte) numpoints#24 ← phi( @begin/(byte) numpoints#0 )
  (byte[]) YPOS#31 ← phi( @begin/(byte[]) YPOS#0 )
  (byte[]) XPOS#30 ← phi( @begin/(byte[]) XPOS#0 )
  (byte*) COLORS#7 ← phi( @begin/(byte*) COLORS#0 )
  (byte) FILL#4 ← phi( @begin/(byte) FILL#0 )
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Inversing boolean not (boolean~) animate::$4 ← (byte~) animate::$2 != (byte/signed byte/word/signed word) 40 from (boolean~) animate::$3 ← (byte~) animate::$2 == (byte/signed byte/word/signed word) 40
Inversing boolean not (boolean~) animate::$9 ← (byte~) animate::$7 != (byte/signed byte/word/signed word) 25 from (boolean~) animate::$8 ← (byte~) animate::$7 == (byte/signed byte/word/signed word) 25
Inversing boolean not (boolean~) animate::$14 ← (byte~) animate::$12 != (byte/word/signed word) 255 from (boolean~) animate::$13 ← (byte~) animate::$12 == (byte/word/signed word) 255
Inversing boolean not (boolean~) animate::$19 ← (byte~) animate::$17 != (byte/signed byte/word/signed word) 25 from (boolean~) animate::$18 ← (byte~) animate::$17 == (byte/signed byte/word/signed word) 25
Inversing boolean not (boolean~) animate::$24 ← (byte~) animate::$22 != (byte/word/signed word) 255 from (boolean~) animate::$23 ← (byte~) animate::$22 == (byte/word/signed word) 255
Inversing boolean not (boolean~) animate::$29 ← (byte~) animate::$27 < (byte/signed byte/word/signed word) 40 from (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte/signed byte/word/signed word) 40
Inversing boolean not (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0 from (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
Inversing boolean not (boolean~) findcol::$7 ← (byte) findcol::x#2 >= (byte) findcol::xp#1 from (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
Inversing boolean not (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#1 from (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
Inversing boolean not (boolean~) findcol::$11 ← (byte) findcol::y#2 >= (byte) findcol::yp#2 from (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
Inversing boolean not (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#2 from (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS#0 ← ((byte*)) (word) 55296
  (byte) FILL#0 ← (byte/word/signed word) 230
  (byte) numpoints#0 ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS#0 ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@5
main: scope:[main]  from @5
  (byte[]) COLS#22 ← phi( @5/(byte[]) COLS#24 )
  (byte) numpoints#22 ← phi( @5/(byte) numpoints#24 )
  (byte[]) YPOS#28 ← phi( @5/(byte[]) YPOS#31 )
  (byte[]) XPOS#26 ← phi( @5/(byte[]) XPOS#30 )
  (byte*) COLORS#5 ← phi( @5/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( @5/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( @5/(byte*) SCREEN#4 )
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte[]) COLS#20 ← phi( main/(byte[]) COLS#22 )
  (byte) numpoints#20 ← phi( main/(byte) numpoints#22 )
  (byte[]) YPOS#23 ← phi( main/(byte[]) YPOS#28 )
  (byte[]) XPOS#20 ← phi( main/(byte[]) XPOS#26 )
  (byte*) COLORS#3 ← phi( main/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  (byte[]) COLS#19 ← phi( main::@3/(byte[]) COLS#20 main::@5/(byte[]) COLS#21 )
  (byte) numpoints#19 ← phi( main::@3/(byte) numpoints#20 main::@5/(byte) numpoints#21 )
  (byte[]) YPOS#18 ← phi( main::@3/(byte[]) YPOS#23 main::@5/(byte[]) YPOS#24 )
  (byte[]) XPOS#14 ← phi( main::@3/(byte[]) XPOS#20 main::@5/(byte[]) XPOS#21 )
  (byte*) COLORS#2 ← phi( main::@3/(byte*) COLORS#3 main::@5/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  (byte[]) COLS#23 ← phi( main::@1/(byte[]) COLS#19 )
  (byte) numpoints#23 ← phi( main::@1/(byte) numpoints#19 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[]) YPOS#14 ← phi( main::@1/(byte[]) YPOS#18 )
  (byte[]) XPOS#8 ← phi( main::@1/(byte[]) XPOS#14 )
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte[]) COLS#21 ← phi( main::@4/(byte[]) COLS#23 )
  (byte) numpoints#21 ← phi( main::@4/(byte) numpoints#23 )
  (byte[]) YPOS#24 ← phi( main::@4/(byte[]) YPOS#14 )
  (byte[]) XPOS#21 ← phi( main::@4/(byte[]) XPOS#8 )
  (byte*) COLORS#4 ← phi( main::@4/(byte*) COLORS#6 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte[]) YPOS#8 ← phi( main::@4/(byte[]) YPOS#14 )
  (byte[]) XPOS#1 ← phi( main::@4/(byte[]) XPOS#8 )
  (byte~) animate::$0 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte/signed byte/word/signed word) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[]) XPOS#9 ← phi( animate/(byte[]) XPOS#1 animate::@7/(byte[]) XPOS#2 )
  (byte[]) YPOS#1 ← phi( animate/(byte[]) YPOS#8 animate::@7/(byte[]) YPOS#9 )
  (byte~) animate::$5 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte/signed byte/word/signed word) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[]) YPOS#9 ← phi( animate/(byte[]) YPOS#8 )
  (byte[]) XPOS#2 ← phi( animate/(byte[]) XPOS#1 )
  *((byte[]) XPOS#2 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[]) YPOS#10 ← phi( animate::@1/(byte[]) YPOS#1 animate::@8/(byte[]) YPOS#2 )
  (byte[]) XPOS#3 ← phi( animate::@1/(byte[]) XPOS#9 animate::@8/(byte[]) XPOS#10 )
  (byte~) animate::$10 ← (byte[]) XPOS#3 *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#3 + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS#3 *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte/word/signed word) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[]) XPOS#10 ← phi( animate::@1/(byte[]) XPOS#9 )
  (byte[]) YPOS#2 ← phi( animate::@1/(byte[]) YPOS#1 )
  *((byte[]) YPOS#2 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[]) XPOS#16 ← phi( animate::@2/(byte[]) XPOS#3 animate::@9/(byte[]) XPOS#4 )
  (byte[]) YPOS#3 ← phi( animate::@2/(byte[]) YPOS#10 animate::@9/(byte[]) YPOS#11 )
  (byte~) animate::$15 ← (byte[]) YPOS#3 *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#3 + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS#3 *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte/signed byte/word/signed word) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[]) YPOS#11 ← phi( animate::@2/(byte[]) YPOS#10 )
  (byte[]) XPOS#4 ← phi( animate::@2/(byte[]) XPOS#3 )
  *((byte[]) XPOS#4 + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[]) XPOS#11 ← phi( animate::@10/(byte[]) XPOS#15 animate::@3/(byte[]) XPOS#16 )
  (byte[]) YPOS#4 ← phi( animate::@10/(byte[]) YPOS#5 animate::@3/(byte[]) YPOS#3 )
  (byte~) animate::$20 ← (byte[]) YPOS#4 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#4 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS#4 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte/word/signed word) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[]) XPOS#15 ← phi( animate::@3/(byte[]) XPOS#16 )
  (byte[]) YPOS#5 ← phi( animate::@3/(byte[]) YPOS#3 )
  *((byte[]) YPOS#5 + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  (byte[]) XPOS#5 ← phi( animate::@4/(byte[]) XPOS#11 )
  (byte[]) YPOS#6 ← phi( animate::@4/(byte[]) YPOS#4 )
  *((byte[]) YPOS#6 + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS#5 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS#5 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS#5 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte/signed byte/word/signed word) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte[]) XPOS#6 ← phi( animate::@11/(byte[]) XPOS#5 )
  (byte~) animate::$30 ← (byte[]) XPOS#6 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS#6 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte) FILL#2 ← phi( main/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[]) COLS#17 ← phi( main::@1/(byte[]) COLS#19 )
  (byte) numpoints#17 ← phi( main::@1/(byte) numpoints#19 )
  (byte[]) YPOS#25 ← phi( main::@1/(byte[]) YPOS#18 )
  (byte[]) XPOS#27 ← phi( main::@1/(byte[]) XPOS#14 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(byte[]) COLS#17 render::@3/(byte[]) COLS#18 )
  (byte) numpoints#15 ← phi( render/(byte) numpoints#17 render::@3/(byte) numpoints#18 )
  (byte[]) YPOS#19 ← phi( render/(byte[]) YPOS#25 render::@3/(byte[]) YPOS#26 )
  (byte[]) XPOS#22 ← phi( render/(byte[]) XPOS#27 render::@3/(byte[]) XPOS#28 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[]) COLS#14 ← phi( render::@1/(byte[]) COLS#15 render::@5/(byte[]) COLS#16 )
  (byte) numpoints#14 ← phi( render::@1/(byte) numpoints#15 render::@5/(byte) numpoints#16 )
  (byte[]) YPOS#15 ← phi( render::@1/(byte[]) YPOS#19 render::@5/(byte[]) YPOS#20 )
  (byte[]) XPOS#17 ← phi( render::@1/(byte[]) XPOS#22 render::@5/(byte[]) XPOS#23 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[]) COLS#16 ← phi( render::@2/(byte[]) COLS#14 )
  (byte) numpoints#16 ← phi( render::@2/(byte) numpoints#14 )
  (byte[]) YPOS#20 ← phi( render::@2/(byte[]) YPOS#15 )
  (byte[]) XPOS#23 ← phi( render::@2/(byte[]) XPOS#17 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[]) COLS#18 ← phi( render::@5/(byte[]) COLS#16 )
  (byte) numpoints#18 ← phi( render::@5/(byte) numpoints#16 )
  (byte[]) YPOS#26 ← phi( render::@5/(byte[]) YPOS#20 )
  (byte[]) XPOS#28 ← phi( render::@5/(byte[]) XPOS#23 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte/signed byte/word/signed word) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[]) COLS#11 ← phi( render::@2/(byte[]) COLS#14 )
  (byte) numpoints#12 ← phi( render::@2/(byte) numpoints#14 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[]) YPOS#12 ← phi( render::@2/(byte[]) YPOS#15 )
  (byte[]) XPOS#12 ← phi( render::@2/(byte[]) XPOS#17 )
  (byte) findcol::mindiff#0 ← (byte/word/signed word) 255
  (byte) findcol::mincol#0 ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i#0 ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[]) COLS#9 ← phi( findcol/(byte[]) COLS#11 findcol::@8/(byte[]) COLS#12 )
  (byte) numpoints#10 ← phi( findcol/(byte) numpoints#12 findcol::@8/(byte) numpoints#1 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[]) YPOS#7 ← phi( findcol/(byte[]) YPOS#12 findcol::@8/(byte[]) YPOS#13 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[]) XPOS#7 ← phi( findcol/(byte[]) XPOS#12 findcol::@8/(byte[]) XPOS#13 )
  (byte~) findcol::$0 ← (byte[]) XPOS#7 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[]) YPOS#7 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[]) YPOS#32 ← phi( findcol::@1/(byte[]) YPOS#7 findcol::@3/(byte[]) YPOS#33 )
  (byte[]) XPOS#33 ← phi( findcol::@1/(byte[]) XPOS#7 findcol::@3/(byte[]) XPOS#34 )
  (byte[]) COLS#8 ← phi( findcol::@1/(byte[]) COLS#9 findcol::@3/(byte[]) COLS#10 )
  (byte) numpoints#9 ← phi( findcol::@1/(byte) numpoints#10 findcol::@3/(byte) numpoints#11 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$7 ← (byte) findcol::x#2 >= (byte) findcol::xp#1
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[]) YPOS#34 ← phi( findcol::@1/(byte[]) YPOS#7 )
  (byte[]) XPOS#35 ← phi( findcol::@1/(byte[]) XPOS#7 )
  (byte[]) COLS#13 ← phi( findcol::@1/(byte[]) COLS#9 )
  (byte) numpoints#13 ← phi( findcol::@1/(byte) numpoints#10 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#1
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[]) YPOS#33 ← phi( findcol::@9/(byte[]) YPOS#34 )
  (byte[]) XPOS#34 ← phi( findcol::@9/(byte[]) XPOS#35 )
  (byte[]) COLS#10 ← phi( findcol::@9/(byte[]) COLS#13 )
  (byte) numpoints#11 ← phi( findcol::@9/(byte) numpoints#13 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[]) YPOS#30 ← phi( findcol::@2/(byte[]) YPOS#32 )
  (byte[]) XPOS#32 ← phi( findcol::@2/(byte[]) XPOS#33 )
  (byte[]) COLS#7 ← phi( findcol::@2/(byte[]) COLS#8 )
  (byte) numpoints#8 ← phi( findcol::@2/(byte) numpoints#9 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[]) YPOS#29 ← phi( findcol::@2/(byte[]) YPOS#32 )
  (byte[]) XPOS#31 ← phi( findcol::@2/(byte[]) XPOS#33 )
  (byte[]) COLS#6 ← phi( findcol::@2/(byte[]) COLS#8 )
  (byte) numpoints#7 ← phi( findcol::@2/(byte) numpoints#9 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[]) YPOS#27 ← phi( findcol::@12/(byte[]) YPOS#29 findcol::@4/(byte[]) YPOS#30 )
  (byte[]) XPOS#29 ← phi( findcol::@12/(byte[]) XPOS#31 findcol::@4/(byte[]) XPOS#32 )
  (byte[]) COLS#5 ← phi( findcol::@12/(byte[]) COLS#6 findcol::@4/(byte[]) COLS#7 )
  (byte) numpoints#6 ← phi( findcol::@12/(byte) numpoints#7 findcol::@4/(byte) numpoints#8 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$11 ← (byte) findcol::y#2 >= (byte) findcol::yp#2
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[]) YPOS#22 ← phi( findcol::@5/(byte[]) YPOS#27 )
  (byte[]) XPOS#25 ← phi( findcol::@5/(byte[]) XPOS#29 )
  (byte[]) COLS#4 ← phi( findcol::@5/(byte[]) COLS#5 )
  (byte) numpoints#5 ← phi( findcol::@5/(byte) numpoints#6 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[]) YPOS#21 ← phi( findcol::@5/(byte[]) YPOS#27 )
  (byte[]) XPOS#24 ← phi( findcol::@5/(byte[]) XPOS#29 )
  (byte[]) COLS#3 ← phi( findcol::@5/(byte[]) COLS#5 )
  (byte) numpoints#4 ← phi( findcol::@5/(byte) numpoints#6 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[]) YPOS#17 ← phi( findcol::@14/(byte[]) YPOS#21 findcol::@6/(byte[]) YPOS#22 )
  (byte[]) XPOS#19 ← phi( findcol::@14/(byte[]) XPOS#24 findcol::@6/(byte[]) XPOS#25 )
  (byte[]) COLS#2 ← phi( findcol::@14/(byte[]) COLS#3 findcol::@6/(byte[]) COLS#4 )
  (byte) numpoints#3 ← phi( findcol::@14/(byte) numpoints#4 findcol::@6/(byte) numpoints#5 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#2
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[]) COLS#12 ← phi( findcol::@16/(byte[]) COLS#1 findcol::@7/(byte[]) COLS#2 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[]) YPOS#13 ← phi( findcol::@16/(byte[]) YPOS#16 findcol::@7/(byte[]) YPOS#17 )
  (byte[]) XPOS#13 ← phi( findcol::@16/(byte[]) XPOS#18 findcol::@7/(byte[]) XPOS#19 )
  (byte) numpoints#1 ← phi( findcol::@16/(byte) numpoints#2 findcol::@7/(byte) numpoints#3 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#1
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[]) YPOS#16 ← phi( findcol::@7/(byte[]) YPOS#17 )
  (byte[]) XPOS#18 ← phi( findcol::@7/(byte[]) XPOS#19 )
  (byte) numpoints#2 ← phi( findcol::@7/(byte) numpoints#3 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[]) COLS#1 ← phi( findcol::@7/(byte[]) COLS#2 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[]) COLS#1 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@5: scope:[]  from @begin
  (byte[]) COLS#24 ← phi( @begin/(byte[]) COLS#0 )
  (byte) numpoints#24 ← phi( @begin/(byte) numpoints#0 )
  (byte[]) YPOS#31 ← phi( @begin/(byte[]) YPOS#0 )
  (byte[]) XPOS#30 ← phi( @begin/(byte[]) XPOS#0 )
  (byte*) COLORS#7 ← phi( @begin/(byte*) COLORS#0 )
  (byte) FILL#4 ← phi( @begin/(byte) FILL#0 )
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Not aliassing across scopes: SCREEN#3 SCREEN#4
Not aliassing across scopes: FILL#3 FILL#4
Not aliassing across scopes: COLORS#5 COLORS#7
Not aliassing across scopes: XPOS#26 XPOS#30
Not aliassing across scopes: YPOS#28 YPOS#31
Not aliassing across scopes: numpoints#22 numpoints#24
Not aliassing across scopes: COLS#22 COLS#24
Not aliassing across scopes: XPOS#1 XPOS#8
Not aliassing across scopes: YPOS#8 YPOS#14
Not aliassing across scopes: SCREEN#1 SCREEN#3
Not aliassing across scopes: FILL#2 FILL#3
Not aliassing across scopes: initscreen::screen#0 SCREEN#1
Not aliassing across scopes: COLORS#1 COLORS#2
Not aliassing across scopes: XPOS#27 XPOS#14
Not aliassing across scopes: YPOS#25 YPOS#18
Not aliassing across scopes: numpoints#17 numpoints#19
Not aliassing across scopes: COLS#17 COLS#19
Not aliassing across scopes: render::colline#0 COLORS#1
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: findcol::return#0 findcol::return#2
Not aliassing across scopes: render::$0 findcol::return#4
Not aliassing across scopes: XPOS#12 XPOS#17
Not aliassing across scopes: YPOS#12 YPOS#15
Not aliassing across scopes: findcol::x#5 findcol::x#0
Not aliassing across scopes: findcol::y#8 findcol::y#0
Not aliassing across scopes: numpoints#12 numpoints#14
Not aliassing across scopes: COLS#11 COLS#14
Alias (byte*) COLORS#3 = (byte*) COLORS#5 
Alias (byte[]) XPOS#20 = (byte[]) XPOS#26 
Alias (byte[]) YPOS#23 = (byte[]) YPOS#28 
Alias (byte) numpoints#20 = (byte) numpoints#22 
Alias (byte[]) COLS#20 = (byte[]) COLS#22 
Alias (byte[]) XPOS#14 = (byte[]) XPOS#8 (byte[]) XPOS#21 
Alias (byte[]) YPOS#14 = (byte[]) YPOS#18 (byte[]) YPOS#24 
Alias (byte*) COLORS#2 = (byte*) COLORS#6 (byte*) COLORS#4 
Alias (byte) numpoints#19 = (byte) numpoints#23 (byte) numpoints#21 
Alias (byte[]) COLS#19 = (byte[]) COLS#23 (byte[]) COLS#21 
Alias (byte[]) XPOS#1 = (byte[]) XPOS#2 
Alias (byte[]) YPOS#8 = (byte[]) YPOS#9 
Alias (byte[]) YPOS#1 = (byte[]) YPOS#2 
Alias (byte[]) XPOS#10 = (byte[]) XPOS#9 
Alias (byte[]) XPOS#3 = (byte[]) XPOS#4 
Alias (byte[]) YPOS#10 = (byte[]) YPOS#11 
Alias (byte[]) YPOS#3 = (byte[]) YPOS#5 
Alias (byte[]) XPOS#15 = (byte[]) XPOS#16 
Alias (byte[]) YPOS#4 = (byte[]) YPOS#6 
Alias (byte[]) XPOS#11 = (byte[]) XPOS#5 (byte[]) XPOS#6 
Alias (byte) findcol::return#0 = (byte) findcol::return#4 
Alias (byte*) render::colline#2 = (byte*) render::colline#4 (byte*) render::colline#3 
Alias (byte) render::x#2 = (byte) render::x#3 
Alias (byte) render::y#2 = (byte) render::y#5 (byte) render::y#3 
Alias (byte[]) XPOS#17 = (byte[]) XPOS#23 (byte[]) XPOS#28 
Alias (byte[]) YPOS#15 = (byte[]) YPOS#20 (byte[]) YPOS#26 
Alias (byte) numpoints#14 = (byte) numpoints#16 (byte) numpoints#18 
Alias (byte[]) COLS#14 = (byte[]) COLS#16 (byte[]) COLS#18 
Alias (byte) render::col#0 = (byte~) render::$0 
Alias (byte*) render::colline#1 = (byte*~) render::$2 
Alias (byte) findcol::xp#0 = (byte~) findcol::$0 (byte) findcol::xp#5 (byte) findcol::xp#4 
Alias (byte) findcol::yp#0 = (byte~) findcol::$1 (byte) findcol::yp#1 (byte) findcol::yp#8 
Alias (byte) findcol::y#1 = (byte) findcol::y#5 (byte) findcol::y#11 
Alias (byte) findcol::x#1 = (byte) findcol::x#8 (byte) findcol::x#7 
Alias (byte) findcol::mindiff#10 = (byte) findcol::mindiff#12 (byte) findcol::mindiff#9 
Alias (byte) findcol::i#12 = (byte) findcol::i#13 (byte) findcol::i#2 
Alias (byte) numpoints#10 = (byte) numpoints#13 (byte) numpoints#11 
Alias (byte[]) COLS#10 = (byte[]) COLS#13 (byte[]) COLS#9 
Alias (byte[]) XPOS#34 = (byte[]) XPOS#35 (byte[]) XPOS#7 
Alias (byte[]) YPOS#33 = (byte[]) YPOS#34 (byte[]) YPOS#7 
Alias (byte) findcol::mincol#11 = (byte) findcol::mincol#13 (byte) findcol::mincol#12 
Alias (byte) findcol::return#2 = (byte) findcol::return#5 
Alias (byte) findcol::x#2 = (byte) findcol::x#3 (byte) findcol::x#4 
Alias (byte) findcol::xp#1 = (byte) findcol::xp#2 (byte) findcol::xp#3 
Alias (byte) findcol::y#10 = (byte) findcol::y#7 (byte) findcol::y#6 
Alias (byte) findcol::yp#5 = (byte) findcol::yp#6 (byte) findcol::yp#7 
Alias (byte) findcol::mindiff#6 = (byte) findcol::mindiff#7 (byte) findcol::mindiff#8 
Alias (byte) findcol::i#10 = (byte) findcol::i#11 (byte) findcol::i#9 
Alias (byte) numpoints#7 = (byte) numpoints#8 (byte) numpoints#9 
Alias (byte[]) COLS#6 = (byte[]) COLS#7 (byte[]) COLS#8 
Alias (byte[]) XPOS#31 = (byte[]) XPOS#32 (byte[]) XPOS#33 
Alias (byte[]) YPOS#29 = (byte[]) YPOS#30 (byte[]) YPOS#32 
Alias (byte) findcol::mincol#10 = (byte) findcol::mincol#9 (byte) findcol::mincol#8 
Alias (byte) findcol::diff#0 = (byte~) findcol::$9 
Alias (byte) findcol::diff#1 = (byte~) findcol::$8 
Alias (byte) findcol::y#2 = (byte) findcol::y#3 (byte) findcol::y#4 
Alias (byte) findcol::yp#2 = (byte) findcol::yp#3 (byte) findcol::yp#4 
Alias (byte) findcol::diff#4 = (byte) findcol::diff#8 (byte) findcol::diff#5 
Alias (byte) findcol::mindiff#3 = (byte) findcol::mindiff#4 (byte) findcol::mindiff#5 
Alias (byte) findcol::i#6 = (byte) findcol::i#7 (byte) findcol::i#8 
Alias (byte) numpoints#4 = (byte) numpoints#5 (byte) numpoints#6 
Alias (byte[]) COLS#3 = (byte[]) COLS#4 (byte[]) COLS#5 
Alias (byte[]) XPOS#24 = (byte[]) XPOS#25 (byte[]) XPOS#29 
Alias (byte[]) YPOS#21 = (byte[]) YPOS#22 (byte[]) YPOS#27 
Alias (byte) findcol::x#11 = (byte) findcol::x#12 (byte) findcol::x#13 
Alias (byte) findcol::mincol#5 = (byte) findcol::mincol#6 (byte) findcol::mincol#7 
Alias (byte) findcol::diff#2 = (byte~) findcol::$15 
Alias (byte) findcol::diff#3 = (byte~) findcol::$13 
Alias (byte) findcol::diff#6 = (byte) findcol::diff#7 (byte) findcol::mindiff#1 
Alias (byte[]) COLS#1 = (byte[]) COLS#2 
Alias (byte) findcol::i#4 = (byte) findcol::i#5 
Alias (byte) numpoints#2 = (byte) numpoints#3 
Alias (byte[]) XPOS#18 = (byte[]) XPOS#19 
Alias (byte[]) YPOS#16 = (byte[]) YPOS#17 
Alias (byte) findcol::x#10 = (byte) findcol::x#9 
Alias (byte) findcol::y#12 = (byte) findcol::y#13 
Alias (byte) findcol::mincol#1 = (byte~) findcol::$18 
Alias (byte) findcol::mincol#2 = (byte) findcol::mincol#3 (byte) findcol::return#3 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#4 
Alias (byte) FILL#0 = (byte) FILL#4 
Alias (byte*) COLORS#0 = (byte*) COLORS#7 
Alias (byte[]) XPOS#0 = (byte[]) XPOS#30 
Alias (byte[]) YPOS#0 = (byte[]) YPOS#31 
Alias (byte) numpoints#0 = (byte) numpoints#24 
Alias (byte[]) COLS#0 = (byte[]) COLS#24 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS#0 ← ((byte*)) (word) 55296
  (byte) FILL#0 ← (byte/word/signed word) 230
  (byte) numpoints#0 ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS#0 ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@5
main: scope:[main]  from @5
  (byte[]) COLS#20 ← phi( @5/(byte[]) COLS#0 )
  (byte) numpoints#20 ← phi( @5/(byte) numpoints#0 )
  (byte[]) YPOS#23 ← phi( @5/(byte[]) YPOS#0 )
  (byte[]) XPOS#20 ← phi( @5/(byte[]) XPOS#0 )
  (byte*) COLORS#3 ← phi( @5/(byte*) COLORS#0 )
  (byte) FILL#3 ← phi( @5/(byte) FILL#0 )
  (byte*) SCREEN#3 ← phi( @5/(byte*) SCREEN#0 )
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  (byte[]) COLS#19 ← phi( main::@3/(byte[]) COLS#20 main::@5/(byte[]) COLS#19 )
  (byte) numpoints#19 ← phi( main::@3/(byte) numpoints#20 main::@5/(byte) numpoints#19 )
  (byte[]) YPOS#14 ← phi( main::@3/(byte[]) YPOS#23 main::@5/(byte[]) YPOS#14 )
  (byte[]) XPOS#14 ← phi( main::@3/(byte[]) XPOS#20 main::@5/(byte[]) XPOS#14 )
  (byte*) COLORS#2 ← phi( main::@3/(byte*) COLORS#3 main::@5/(byte*) COLORS#2 )
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte[]) YPOS#8 ← phi( main::@4/(byte[]) YPOS#14 )
  (byte[]) XPOS#1 ← phi( main::@4/(byte[]) XPOS#14 )
  (byte~) animate::$0 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte/signed byte/word/signed word) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[]) XPOS#10 ← phi( animate/(byte[]) XPOS#1 animate::@7/(byte[]) XPOS#1 )
  (byte[]) YPOS#1 ← phi( animate/(byte[]) YPOS#8 animate::@7/(byte[]) YPOS#8 )
  (byte~) animate::$5 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte/signed byte/word/signed word) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[]) YPOS#10 ← phi( animate::@1/(byte[]) YPOS#1 animate::@8/(byte[]) YPOS#1 )
  (byte[]) XPOS#3 ← phi( animate::@1/(byte[]) XPOS#10 animate::@8/(byte[]) XPOS#10 )
  (byte~) animate::$10 ← (byte[]) XPOS#3 *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#3 + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS#3 *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte/word/signed word) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[]) XPOS#15 ← phi( animate::@2/(byte[]) XPOS#3 animate::@9/(byte[]) XPOS#3 )
  (byte[]) YPOS#3 ← phi( animate::@2/(byte[]) YPOS#10 animate::@9/(byte[]) YPOS#10 )
  (byte~) animate::$15 ← (byte[]) YPOS#3 *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#3 + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS#3 *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte/signed byte/word/signed word) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[]) XPOS#3 + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[]) XPOS#11 ← phi( animate::@10/(byte[]) XPOS#15 animate::@3/(byte[]) XPOS#15 )
  (byte[]) YPOS#4 ← phi( animate::@10/(byte[]) YPOS#3 animate::@3/(byte[]) YPOS#3 )
  (byte~) animate::$20 ← (byte[]) YPOS#4 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#4 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS#4 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte/word/signed word) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[]) YPOS#3 + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[]) YPOS#4 + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS#11 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS#11 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS#11 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte/signed byte/word/signed word) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[]) XPOS#11 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS#11 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte) FILL#2 ← phi( main/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[]) COLS#17 ← phi( main::@1/(byte[]) COLS#19 )
  (byte) numpoints#17 ← phi( main::@1/(byte) numpoints#19 )
  (byte[]) YPOS#25 ← phi( main::@1/(byte[]) YPOS#14 )
  (byte[]) XPOS#27 ← phi( main::@1/(byte[]) XPOS#14 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(byte[]) COLS#17 render::@3/(byte[]) COLS#14 )
  (byte) numpoints#15 ← phi( render/(byte) numpoints#17 render::@3/(byte) numpoints#14 )
  (byte[]) YPOS#19 ← phi( render/(byte[]) YPOS#25 render::@3/(byte[]) YPOS#15 )
  (byte[]) XPOS#22 ← phi( render/(byte[]) XPOS#27 render::@3/(byte[]) XPOS#17 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[]) COLS#14 ← phi( render::@1/(byte[]) COLS#15 render::@5/(byte[]) COLS#14 )
  (byte) numpoints#14 ← phi( render::@1/(byte) numpoints#15 render::@5/(byte) numpoints#14 )
  (byte[]) YPOS#15 ← phi( render::@1/(byte[]) YPOS#19 render::@5/(byte[]) YPOS#15 )
  (byte[]) XPOS#17 ← phi( render::@1/(byte[]) XPOS#22 render::@5/(byte[]) XPOS#17 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#2 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[]) COLS#11 ← phi( render::@2/(byte[]) COLS#14 )
  (byte) numpoints#12 ← phi( render::@2/(byte) numpoints#14 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[]) YPOS#12 ← phi( render::@2/(byte[]) YPOS#15 )
  (byte[]) XPOS#12 ← phi( render::@2/(byte[]) XPOS#17 )
  (byte) findcol::mindiff#0 ← (byte/word/signed word) 255
  (byte) findcol::mincol#0 ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i#0 ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[]) COLS#10 ← phi( findcol/(byte[]) COLS#11 findcol::@8/(byte[]) COLS#12 )
  (byte) numpoints#10 ← phi( findcol/(byte) numpoints#12 findcol::@8/(byte) numpoints#1 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[]) YPOS#33 ← phi( findcol/(byte[]) YPOS#12 findcol::@8/(byte[]) YPOS#13 )
  (byte) findcol::i#12 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[]) XPOS#34 ← phi( findcol/(byte[]) XPOS#12 findcol::@8/(byte[]) XPOS#13 )
  (byte) findcol::xp#0 ← (byte[]) XPOS#34 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[]) YPOS#33 *idx (byte) findcol::i#12
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#11 )
  (byte[]) YPOS#29 ← phi( findcol::@1/(byte[]) YPOS#33 findcol::@3/(byte[]) YPOS#33 )
  (byte[]) XPOS#31 ← phi( findcol::@1/(byte[]) XPOS#34 findcol::@3/(byte[]) XPOS#34 )
  (byte[]) COLS#6 ← phi( findcol::@1/(byte[]) COLS#10 findcol::@3/(byte[]) COLS#10 )
  (byte) numpoints#7 ← phi( findcol::@1/(byte) numpoints#10 findcol::@3/(byte) numpoints#10 )
  (byte) findcol::i#10 ← phi( findcol::@1/(byte) findcol::i#12 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#6 ← phi( findcol::@1/(byte) findcol::mindiff#10 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#5 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#0 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#1 findcol::@3/(byte) findcol::y#1 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#0 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#1 )
  (boolean~) findcol::$7 ← (byte) findcol::x#2 >= (byte) findcol::xp#1
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#0
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#2 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#2 - (byte) findcol::xp#1
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#1 - (byte) findcol::x#2
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#5 ← phi( findcol::@12/(byte) findcol::mincol#10 findcol::@4/(byte) findcol::mincol#10 )
  (byte) findcol::x#11 ← phi( findcol::@12/(byte) findcol::x#2 findcol::@4/(byte) findcol::x#2 )
  (byte[]) YPOS#21 ← phi( findcol::@12/(byte[]) YPOS#29 findcol::@4/(byte[]) YPOS#29 )
  (byte[]) XPOS#24 ← phi( findcol::@12/(byte[]) XPOS#31 findcol::@4/(byte[]) XPOS#31 )
  (byte[]) COLS#3 ← phi( findcol::@12/(byte[]) COLS#6 findcol::@4/(byte[]) COLS#6 )
  (byte) numpoints#4 ← phi( findcol::@12/(byte) numpoints#7 findcol::@4/(byte) numpoints#7 )
  (byte) findcol::i#6 ← phi( findcol::@12/(byte) findcol::i#10 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#3 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#6 )
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#5 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#10 findcol::@4/(byte) findcol::y#10 )
  (boolean~) findcol::$11 ← (byte) findcol::y#2 >= (byte) findcol::yp#2
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#2 - (byte) findcol::yp#2
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#2 - (byte) findcol::y#2
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#12 ← phi( findcol::@14/(byte) findcol::y#2 findcol::@6/(byte) findcol::y#2 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#5 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#11 )
  (byte[]) YPOS#16 ← phi( findcol::@14/(byte[]) YPOS#21 findcol::@6/(byte[]) YPOS#21 )
  (byte[]) XPOS#18 ← phi( findcol::@14/(byte[]) XPOS#24 findcol::@6/(byte[]) XPOS#24 )
  (byte[]) COLS#1 ← phi( findcol::@14/(byte[]) COLS#3 findcol::@6/(byte[]) COLS#3 )
  (byte) numpoints#2 ← phi( findcol::@14/(byte) numpoints#4 findcol::@6/(byte) numpoints#4 )
  (byte) findcol::i#4 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#6 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#3 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#2
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[]) COLS#12 ← phi( findcol::@16/(byte[]) COLS#1 findcol::@7/(byte[]) COLS#1 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#12 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#10 findcol::@7/(byte) findcol::x#10 )
  (byte[]) YPOS#13 ← phi( findcol::@16/(byte[]) YPOS#16 findcol::@7/(byte[]) YPOS#16 )
  (byte[]) XPOS#13 ← phi( findcol::@16/(byte[]) XPOS#18 findcol::@7/(byte[]) XPOS#18 )
  (byte) numpoints#1 ← phi( findcol::@16/(byte) numpoints#2 findcol::@7/(byte) numpoints#2 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#4 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#1
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[]) COLS#1 *idx (byte) findcol::i#4
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Not aliassing across scopes: SCREEN#3 SCREEN#0
Not aliassing across scopes: FILL#3 FILL#0
Not aliassing across scopes: COLORS#3 COLORS#0
Not aliassing across scopes: XPOS#20 XPOS#0
Not aliassing across scopes: YPOS#23 YPOS#0
Not aliassing across scopes: numpoints#20 numpoints#0
Not aliassing across scopes: COLS#20 COLS#0
Not aliassing across scopes: XPOS#1 XPOS#14
Not aliassing across scopes: YPOS#8 YPOS#14
Not aliassing across scopes: SCREEN#1 SCREEN#3
Not aliassing across scopes: FILL#2 FILL#3
Not aliassing across scopes: initscreen::screen#0 SCREEN#1
Not aliassing across scopes: COLORS#1 COLORS#2
Not aliassing across scopes: XPOS#27 XPOS#14
Not aliassing across scopes: YPOS#25 YPOS#14
Not aliassing across scopes: numpoints#17 numpoints#19
Not aliassing across scopes: COLS#17 COLS#19
Not aliassing across scopes: render::colline#0 COLORS#1
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: findcol::return#0 findcol::return#2
Not aliassing across scopes: render::col#0 findcol::return#0
Not aliassing across scopes: XPOS#12 XPOS#17
Not aliassing across scopes: YPOS#12 YPOS#15
Not aliassing across scopes: findcol::x#5 findcol::x#0
Not aliassing across scopes: findcol::y#8 findcol::y#0
Not aliassing across scopes: numpoints#12 numpoints#14
Not aliassing across scopes: COLS#11 COLS#14
Alias (byte[]) YPOS#1 = (byte[]) YPOS#8 (byte[]) YPOS#10 (byte[]) YPOS#3 (byte[]) YPOS#4 
Alias (byte[]) XPOS#1 = (byte[]) XPOS#10 (byte[]) XPOS#3 (byte[]) XPOS#15 (byte[]) XPOS#11 
Alias (byte) findcol::x#1 = (byte) findcol::x#2 (byte) findcol::x#11 (byte) findcol::x#10 (byte) findcol::x#6 
Alias (byte) findcol::xp#0 = (byte) findcol::xp#1 
Alias (byte) findcol::y#1 = (byte) findcol::y#10 (byte) findcol::y#2 (byte) findcol::y#12 (byte) findcol::y#9 
Alias (byte) findcol::yp#0 = (byte) findcol::yp#5 (byte) findcol::yp#2 
Alias (byte) findcol::mindiff#10 = (byte) findcol::mindiff#6 (byte) findcol::mindiff#3 (byte) findcol::mindiff#2 
Alias (byte) findcol::i#10 = (byte) findcol::i#12 (byte) findcol::i#6 (byte) findcol::i#4 (byte) findcol::i#3 
Alias (byte) numpoints#1 = (byte) numpoints#7 (byte) numpoints#10 (byte) numpoints#4 (byte) numpoints#2 
Alias (byte[]) COLS#1 = (byte[]) COLS#6 (byte[]) COLS#10 (byte[]) COLS#3 (byte[]) COLS#12 
Alias (byte[]) XPOS#13 = (byte[]) XPOS#31 (byte[]) XPOS#34 (byte[]) XPOS#24 (byte[]) XPOS#18 
Alias (byte[]) YPOS#13 = (byte[]) YPOS#29 (byte[]) YPOS#33 (byte[]) YPOS#21 (byte[]) YPOS#16 
Alias (byte) findcol::mincol#10 = (byte) findcol::mincol#11 (byte) findcol::mincol#5 (byte) findcol::mincol#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS#0 ← ((byte*)) (word) 55296
  (byte) FILL#0 ← (byte/word/signed word) 230
  (byte) numpoints#0 ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS#0 ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@5
main: scope:[main]  from @5
  (byte[]) COLS#20 ← phi( @5/(byte[]) COLS#0 )
  (byte) numpoints#20 ← phi( @5/(byte) numpoints#0 )
  (byte[]) YPOS#23 ← phi( @5/(byte[]) YPOS#0 )
  (byte[]) XPOS#20 ← phi( @5/(byte[]) XPOS#0 )
  (byte*) COLORS#3 ← phi( @5/(byte*) COLORS#0 )
  (byte) FILL#3 ← phi( @5/(byte) FILL#0 )
  (byte*) SCREEN#3 ← phi( @5/(byte*) SCREEN#0 )
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  (byte[]) COLS#19 ← phi( main::@3/(byte[]) COLS#20 main::@5/(byte[]) COLS#19 )
  (byte) numpoints#19 ← phi( main::@3/(byte) numpoints#20 main::@5/(byte) numpoints#19 )
  (byte[]) YPOS#14 ← phi( main::@3/(byte[]) YPOS#23 main::@5/(byte[]) YPOS#14 )
  (byte[]) XPOS#14 ← phi( main::@3/(byte[]) XPOS#20 main::@5/(byte[]) XPOS#14 )
  (byte*) COLORS#2 ← phi( main::@3/(byte*) COLORS#3 main::@5/(byte*) COLORS#2 )
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte[]) YPOS#1 ← phi( main::@4/(byte[]) YPOS#14 )
  (byte[]) XPOS#1 ← phi( main::@4/(byte[]) XPOS#14 )
  (byte~) animate::$0 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte/signed byte/word/signed word) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte/signed byte/word/signed word) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte/word/signed word) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte/signed byte/word/signed word) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte/word/signed word) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte/signed byte/word/signed word) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte) FILL#2 ← phi( main/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[]) COLS#17 ← phi( main::@1/(byte[]) COLS#19 )
  (byte) numpoints#17 ← phi( main::@1/(byte) numpoints#19 )
  (byte[]) YPOS#25 ← phi( main::@1/(byte[]) YPOS#14 )
  (byte[]) XPOS#27 ← phi( main::@1/(byte[]) XPOS#14 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(byte[]) COLS#17 render::@3/(byte[]) COLS#14 )
  (byte) numpoints#15 ← phi( render/(byte) numpoints#17 render::@3/(byte) numpoints#14 )
  (byte[]) YPOS#19 ← phi( render/(byte[]) YPOS#25 render::@3/(byte[]) YPOS#15 )
  (byte[]) XPOS#22 ← phi( render/(byte[]) XPOS#27 render::@3/(byte[]) XPOS#17 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[]) COLS#14 ← phi( render::@1/(byte[]) COLS#15 render::@5/(byte[]) COLS#14 )
  (byte) numpoints#14 ← phi( render::@1/(byte) numpoints#15 render::@5/(byte) numpoints#14 )
  (byte[]) YPOS#15 ← phi( render::@1/(byte[]) YPOS#19 render::@5/(byte[]) YPOS#15 )
  (byte[]) XPOS#17 ← phi( render::@1/(byte[]) XPOS#22 render::@5/(byte[]) XPOS#17 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#2 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[]) COLS#11 ← phi( render::@2/(byte[]) COLS#14 )
  (byte) numpoints#12 ← phi( render::@2/(byte) numpoints#14 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[]) YPOS#12 ← phi( render::@2/(byte[]) YPOS#15 )
  (byte[]) XPOS#12 ← phi( render::@2/(byte[]) XPOS#17 )
  (byte) findcol::mindiff#0 ← (byte/word/signed word) 255
  (byte) findcol::mincol#0 ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i#0 ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#10 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[]) COLS#1 ← phi( findcol/(byte[]) COLS#11 findcol::@8/(byte[]) COLS#1 )
  (byte) numpoints#1 ← phi( findcol/(byte) numpoints#12 findcol::@8/(byte) numpoints#1 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#1 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#1 )
  (byte[]) YPOS#13 ← phi( findcol/(byte[]) YPOS#12 findcol::@8/(byte[]) YPOS#13 )
  (byte) findcol::i#10 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[]) XPOS#13 ← phi( findcol/(byte[]) XPOS#12 findcol::@8/(byte[]) XPOS#13 )
  (byte) findcol::xp#0 ← (byte[]) XPOS#13 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (byte[]) YPOS#13 *idx (byte) findcol::i#10
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$7 ← (byte) findcol::x#1 >= (byte) findcol::xp#0
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#0
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#2 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (boolean~) findcol::$11 ← (byte) findcol::y#1 >= (byte) findcol::yp#0
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#10
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#1
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[]) COLS#1 *idx (byte) findcol::i#10
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Not aliassing across scopes: SCREEN#3 SCREEN#0
Not aliassing across scopes: FILL#3 FILL#0
Not aliassing across scopes: COLORS#3 COLORS#0
Not aliassing across scopes: XPOS#20 XPOS#0
Not aliassing across scopes: YPOS#23 YPOS#0
Not aliassing across scopes: numpoints#20 numpoints#0
Not aliassing across scopes: COLS#20 COLS#0
Not aliassing across scopes: XPOS#1 XPOS#14
Not aliassing across scopes: YPOS#1 YPOS#14
Not aliassing across scopes: SCREEN#1 SCREEN#3
Not aliassing across scopes: FILL#2 FILL#3
Not aliassing across scopes: initscreen::screen#0 SCREEN#1
Not aliassing across scopes: COLORS#1 COLORS#2
Not aliassing across scopes: XPOS#27 XPOS#14
Not aliassing across scopes: YPOS#25 YPOS#14
Not aliassing across scopes: numpoints#17 numpoints#19
Not aliassing across scopes: COLS#17 COLS#19
Not aliassing across scopes: render::colline#0 COLORS#1
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: findcol::return#0 findcol::return#2
Not aliassing across scopes: render::col#0 findcol::return#0
Not aliassing across scopes: XPOS#12 XPOS#17
Not aliassing across scopes: YPOS#12 YPOS#15
Not aliassing across scopes: findcol::x#5 findcol::x#0
Not aliassing across scopes: findcol::y#8 findcol::y#0
Not aliassing across scopes: numpoints#12 numpoints#14
Not aliassing across scopes: COLS#11 COLS#14
Self Phi Eliminated (byte*) COLORS#2
Self Phi Eliminated (byte[]) XPOS#14
Self Phi Eliminated (byte[]) YPOS#14
Self Phi Eliminated (byte) numpoints#19
Self Phi Eliminated (byte[]) COLS#19
Self Phi Eliminated (byte) FILL#1
Self Phi Eliminated (byte*) SCREEN#2
Self Phi Eliminated (byte) render::y#2
Self Phi Eliminated (byte*) render::colline#2
Self Phi Eliminated (byte[]) XPOS#17
Self Phi Eliminated (byte[]) YPOS#15
Self Phi Eliminated (byte) numpoints#14
Self Phi Eliminated (byte[]) COLS#14
Self Phi Eliminated (byte[]) XPOS#13
Self Phi Eliminated (byte[]) YPOS#13
Self Phi Eliminated (byte) findcol::x#1
Self Phi Eliminated (byte) findcol::y#1
Self Phi Eliminated (byte) numpoints#1
Self Phi Eliminated (byte[]) COLS#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS#0 ← ((byte*)) (word) 55296
  (byte) FILL#0 ← (byte/word/signed word) 230
  (byte) numpoints#0 ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS#0 ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@5
main: scope:[main]  from @5
  (byte[]) COLS#20 ← phi( @5/(byte[]) COLS#0 )
  (byte) numpoints#20 ← phi( @5/(byte) numpoints#0 )
  (byte[]) YPOS#23 ← phi( @5/(byte[]) YPOS#0 )
  (byte[]) XPOS#20 ← phi( @5/(byte[]) XPOS#0 )
  (byte*) COLORS#3 ← phi( @5/(byte*) COLORS#0 )
  (byte) FILL#3 ← phi( @5/(byte) FILL#0 )
  (byte*) SCREEN#3 ← phi( @5/(byte*) SCREEN#0 )
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  (byte[]) COLS#19 ← phi( main::@3/(byte[]) COLS#20 )
  (byte) numpoints#19 ← phi( main::@3/(byte) numpoints#20 )
  (byte[]) YPOS#14 ← phi( main::@3/(byte[]) YPOS#23 )
  (byte[]) XPOS#14 ← phi( main::@3/(byte[]) XPOS#20 )
  (byte*) COLORS#2 ← phi( main::@3/(byte*) COLORS#3 )
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte[]) YPOS#1 ← phi( main::@4/(byte[]) YPOS#14 )
  (byte[]) XPOS#1 ← phi( main::@4/(byte[]) XPOS#14 )
  (byte~) animate::$0 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte/signed byte/word/signed word) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte/signed byte/word/signed word) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte/word/signed word) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte/signed byte/word/signed word) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS#1 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte/word/signed word) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[]) YPOS#1 + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte/signed byte/word/signed word) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[]) XPOS#1 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS#1 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte) FILL#2 ← phi( main/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[]) COLS#17 ← phi( main::@1/(byte[]) COLS#19 )
  (byte) numpoints#17 ← phi( main::@1/(byte) numpoints#19 )
  (byte[]) YPOS#25 ← phi( main::@1/(byte[]) YPOS#14 )
  (byte[]) XPOS#27 ← phi( main::@1/(byte[]) XPOS#14 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(byte[]) COLS#17 render::@3/(byte[]) COLS#14 )
  (byte) numpoints#15 ← phi( render/(byte) numpoints#17 render::@3/(byte) numpoints#14 )
  (byte[]) YPOS#19 ← phi( render/(byte[]) YPOS#25 render::@3/(byte[]) YPOS#15 )
  (byte[]) XPOS#22 ← phi( render/(byte[]) XPOS#27 render::@3/(byte[]) XPOS#17 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[]) COLS#14 ← phi( render::@1/(byte[]) COLS#15 )
  (byte) numpoints#14 ← phi( render::@1/(byte) numpoints#15 )
  (byte[]) YPOS#15 ← phi( render::@1/(byte[]) YPOS#19 )
  (byte[]) XPOS#17 ← phi( render::@1/(byte[]) XPOS#22 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[]) COLS#11 ← phi( render::@2/(byte[]) COLS#14 )
  (byte) numpoints#12 ← phi( render::@2/(byte) numpoints#14 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[]) YPOS#12 ← phi( render::@2/(byte[]) YPOS#15 )
  (byte[]) XPOS#12 ← phi( render::@2/(byte[]) XPOS#17 )
  (byte) findcol::mindiff#0 ← (byte/word/signed word) 255
  (byte) findcol::mincol#0 ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i#0 ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#10 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[]) COLS#1 ← phi( findcol/(byte[]) COLS#11 )
  (byte) numpoints#1 ← phi( findcol/(byte) numpoints#12 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#8 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 )
  (byte[]) YPOS#13 ← phi( findcol/(byte[]) YPOS#12 )
  (byte) findcol::i#10 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[]) XPOS#13 ← phi( findcol/(byte[]) XPOS#12 )
  (byte) findcol::xp#0 ← (byte[]) XPOS#13 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (byte[]) YPOS#13 *idx (byte) findcol::i#10
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$7 ← (byte) findcol::x#1 >= (byte) findcol::xp#0
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#0
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#2 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (boolean~) findcol::$11 ← (byte) findcol::y#1 >= (byte) findcol::yp#0
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#10
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#1
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[]) COLS#1 *idx (byte) findcol::i#10
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Redundant Phi (byte*) SCREEN#3 (byte*) SCREEN#0
Redundant Phi (byte) FILL#3 (byte) FILL#0
Redundant Phi (byte*) COLORS#3 (byte*) COLORS#0
Redundant Phi (byte[]) XPOS#20 (byte[]) XPOS#0
Redundant Phi (byte[]) YPOS#23 (byte[]) YPOS#0
Redundant Phi (byte) numpoints#20 (byte) numpoints#0
Redundant Phi (byte[]) COLS#20 (byte[]) COLS#0
Redundant Phi (byte*) COLORS#2 (byte*) COLORS#3
Redundant Phi (byte[]) XPOS#14 (byte[]) XPOS#20
Redundant Phi (byte[]) YPOS#14 (byte[]) YPOS#23
Redundant Phi (byte) numpoints#19 (byte) numpoints#20
Redundant Phi (byte[]) COLS#19 (byte[]) COLS#20
Redundant Phi (byte[]) XPOS#1 (byte[]) XPOS#14
Redundant Phi (byte[]) YPOS#1 (byte[]) YPOS#14
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#3
Redundant Phi (byte) FILL#2 (byte) FILL#3
Redundant Phi (byte) FILL#1 (byte) FILL#2
Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#1
Redundant Phi (byte*) COLORS#1 (byte*) COLORS#2
Redundant Phi (byte[]) XPOS#27 (byte[]) XPOS#14
Redundant Phi (byte[]) YPOS#25 (byte[]) YPOS#14
Redundant Phi (byte) numpoints#17 (byte) numpoints#19
Redundant Phi (byte[]) COLS#17 (byte[]) COLS#19
Redundant Phi (byte) render::y#2 (byte) render::y#4
Redundant Phi (byte*) render::colline#2 (byte*) render::colline#5
Redundant Phi (byte[]) XPOS#17 (byte[]) XPOS#22
Redundant Phi (byte[]) YPOS#15 (byte[]) YPOS#19
Redundant Phi (byte) numpoints#14 (byte) numpoints#15
Redundant Phi (byte[]) COLS#14 (byte[]) COLS#15
Redundant Phi (byte[]) XPOS#12 (byte[]) XPOS#17
Redundant Phi (byte[]) YPOS#12 (byte[]) YPOS#15
Redundant Phi (byte) findcol::x#5 (byte) findcol::x#0
Redundant Phi (byte) findcol::y#8 (byte) findcol::y#0
Redundant Phi (byte) numpoints#12 (byte) numpoints#14
Redundant Phi (byte[]) COLS#11 (byte[]) COLS#14
Redundant Phi (byte[]) XPOS#13 (byte[]) XPOS#12
Redundant Phi (byte[]) YPOS#13 (byte[]) YPOS#12
Redundant Phi (byte) findcol::x#1 (byte) findcol::x#5
Redundant Phi (byte) findcol::y#1 (byte) findcol::y#8
Redundant Phi (byte) numpoints#1 (byte) numpoints#12
Redundant Phi (byte[]) COLS#1 (byte[]) COLS#11
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS#0 ← ((byte*)) (word) 55296
  (byte) FILL#0 ← (byte/word/signed word) 230
  (byte) numpoints#0 ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS#0 ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@5
main: scope:[main]  from @5
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte~) animate::$0 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte/signed byte/word/signed word) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte/signed byte/word/signed word) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte/word/signed word) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte/signed byte/word/signed word) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte/word/signed word) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte/signed byte/word/signed word) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#0
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#0 + (word/signed word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#0
  (byte) render::y#0 ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(byte[]) COLS#0 render::@3/(byte[]) COLS#15 )
  (byte) numpoints#15 ← phi( render/(byte) numpoints#0 render::@3/(byte) numpoints#15 )
  (byte[]) YPOS#19 ← phi( render/(byte[]) YPOS#0 render::@3/(byte[]) YPOS#19 )
  (byte[]) XPOS#22 ← phi( render/(byte[]) XPOS#0 render::@3/(byte[]) XPOS#22 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#4
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 != (byte/signed byte/word/signed word) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#4
  (boolean~) render::$3 ← (byte) render::y#1 != (byte/signed byte/word/signed word) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte) findcol::mindiff#0 ← (byte/word/signed word) 255
  (byte) findcol::mincol#0 ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i#0 ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#10 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#10 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[]) XPOS#22 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (byte[]) YPOS#19 *idx (byte) findcol::i#10
  (boolean~) findcol::$3 ← (byte) findcol::x#0 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$7 ← (byte) findcol::x#0 >= (byte) findcol::xp#0
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$5 ← (byte) findcol::y#0 != (byte) findcol::yp#0
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#2 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (boolean~) findcol::$11 ← (byte) findcol::y#0 >= (byte) findcol::yp#0
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#10
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#15
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[]) COLS#15 *idx (byte) findcol::i#10
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Simple Condition (boolean~) animate::$4 if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1
Simple Condition (boolean~) animate::$9 if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2
Simple Condition (boolean~) animate::$14 if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3
Simple Condition (boolean~) animate::$19 if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4
Simple Condition (boolean~) animate::$24 if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return
Simple Condition (boolean~) animate::$29 if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return
Simple Condition (boolean~) initscreen::$1 if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
Simple Condition (boolean~) render::$1 if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2
Simple Condition (boolean~) render::$3 if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1
Simple Condition (boolean~) findcol::$3 if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
Simple Condition (boolean~) findcol::$7 if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
Simple Condition (boolean~) findcol::$5 if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@3
Simple Condition (boolean~) findcol::$11 if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
Simple Condition (boolean~) findcol::$17 if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
Simple Condition (boolean~) findcol::$19 if((byte) findcol::i#1<(byte) numpoints#15) goto findcol::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte*) COLORS#0 ← ((byte*)) (word) 55296
  (byte) FILL#0 ← (byte/word/signed word) 230
  (byte) numpoints#0 ← (byte/signed byte/word/signed word) 6
  (byte[]) XPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
  (byte[]) YPOS#0 ← { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
  (byte[]) COLS#0 ← { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
  to:@5
main: scope:[main]  from @5
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte~) animate::$0 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 0
  if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 0
  if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 1
  if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 2
  if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 3
  if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#0
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#0 + (word/signed word) 1000
  if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#0
  (byte) render::y#0 ← (byte/signed byte/word/signed word) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(byte[]) COLS#0 render::@3/(byte[]) COLS#15 )
  (byte) numpoints#15 ← phi( render/(byte) numpoints#0 render::@3/(byte) numpoints#15 )
  (byte[]) YPOS#19 ← phi( render/(byte[]) YPOS#0 render::@3/(byte[]) YPOS#19 )
  (byte[]) XPOS#22 ← phi( render/(byte[]) XPOS#0 render::@3/(byte[]) XPOS#22 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte/signed byte/word/signed word) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#4
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#4
  if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte) findcol::mindiff#0 ← (byte/word/signed word) 255
  (byte) findcol::mincol#0 ← (byte/signed byte/word/signed word) 0
  (byte) findcol::i#0 ← (byte/signed byte/word/signed word) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#10 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#10 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[]) XPOS#22 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (byte[]) YPOS#19 *idx (byte) findcol::i#10
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte/signed byte/word/signed word) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#2 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  if((byte) findcol::i#1<(byte) numpoints#15) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[]) COLS#15 *idx (byte) findcol::i#10
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte*) COLORS#0 = ((byte*))55296
Constant (const byte) FILL#0 = 230
Constant (const byte) numpoints#0 = 6
Constant (const byte[]) XPOS#0 = { 5, 15, 6, 34, 21, 31 }
Constant (const byte[]) YPOS#0 = { 5, 8, 14, 2, 17, 22 }
Constant (const byte[]) COLS#0 = { 1, 2, 3, 4, 5, 7 }
Constant (const byte) render::y#0 = 0
Constant (const byte) render::x#0 = 0
Constant (const byte) findcol::mindiff#0 = 255
Constant (const byte) findcol::mincol#0 = 0
Constant (const byte) findcol::i#0 = 0
Constant (const byte) findcol::return#1 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte~) animate::$0 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 0
  if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 0
  if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 1
  if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 2
  if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 3
  if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte*) initscreen::screen#0 ← (const byte*) SCREEN#0
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (const byte*) SCREEN#0 + (word/signed word) 1000
  if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (const byte*) COLORS#0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(const byte[]) COLS#0 render::@3/(byte[]) COLS#15 )
  (byte) numpoints#15 ← phi( render/(const byte) numpoints#0 render::@3/(byte) numpoints#15 )
  (byte[]) YPOS#19 ← phi( render/(const byte[]) YPOS#0 render::@3/(byte[]) YPOS#19 )
  (byte[]) XPOS#22 ← phi( render/(const byte[]) XPOS#0 render::@3/(byte[]) XPOS#22 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#4
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#4
  if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#10 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#10 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[]) XPOS#22 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (byte[]) YPOS#19 *idx (byte) findcol::i#10
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#2 ← phi( findcol::@10/(const byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  if((byte) findcol::i#1<(byte) numpoints#15) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[]) COLS#15 *idx (byte) findcol::i#10
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Constant (const byte*) initscreen::screen#0 = SCREEN#0
Constant (const byte*) initscreen::$0 = SCREEN#0+1000
Constant (const byte*) render::colline#0 = COLORS#0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte~) animate::$0 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 0
  if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 0
  if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 1
  if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 2
  if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (const byte[]) YPOS#0 *idx (byte/signed byte/word/signed word) 3
  if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[]) YPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (const byte[]) XPOS#0 *idx (byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((const byte[]) XPOS#0 + (byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(const byte[]) COLS#0 render::@3/(byte[]) COLS#15 )
  (byte) numpoints#15 ← phi( render/(const byte) numpoints#0 render::@3/(byte) numpoints#15 )
  (byte[]) YPOS#19 ← phi( render/(const byte[]) YPOS#0 render::@3/(byte[]) YPOS#19 )
  (byte[]) XPOS#22 ← phi( render/(const byte[]) XPOS#0 render::@3/(byte[]) XPOS#22 )
  (byte*) render::colline#5 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#4
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#4
  if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#10 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#10 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[]) XPOS#22 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (byte[]) YPOS#19 *idx (byte) findcol::i#10
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#2 ← phi( findcol::@10/(const byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  if((byte) findcol::i#1<(byte) numpoints#15) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[]) COLS#15 *idx (byte) findcol::i#10
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Consolidated referenced array index constant in assignment animate::$0
Consolidated assigned array index constant in assignment *(XPOS#0+0)
Consolidated referenced array index constant in assignment animate::$2
Consolidated referenced array index constant in assignment animate::$5
Consolidated assigned array index constant in assignment *(YPOS#0+0)
Consolidated referenced array index constant in assignment animate::$7
Consolidated assigned array index constant in assignment *(XPOS#0+0)
Consolidated referenced array index constant in assignment animate::$10
Consolidated assigned array index constant in assignment *(XPOS#0+1)
Consolidated referenced array index constant in assignment animate::$12
Consolidated assigned array index constant in assignment *(YPOS#0+0)
Consolidated referenced array index constant in assignment animate::$15
Consolidated assigned array index constant in assignment *(YPOS#0+2)
Consolidated referenced array index constant in assignment animate::$17
Consolidated assigned array index constant in assignment *(XPOS#0+1)
Consolidated referenced array index constant in assignment animate::$20
Consolidated assigned array index constant in assignment *(YPOS#0+3)
Consolidated referenced array index constant in assignment animate::$22
Consolidated assigned array index constant in assignment *(YPOS#0+2)
Consolidated assigned array index constant in assignment *(YPOS#0+3)
Consolidated referenced array index constant in assignment animate::$25
Consolidated assigned array index constant in assignment *(XPOS#0+3)
Consolidated referenced array index constant in assignment animate::$27
Consolidated referenced array index constant in assignment animate::$30
Consolidated assigned array index constant in assignment *(XPOS#0+3)
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  call initscreen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(const byte[]) COLS#0 render::@3/(byte[]) COLS#15 )
  (byte) numpoints#15 ← phi( render/(const byte) numpoints#0 render::@3/(byte) numpoints#15 )
  (byte[]) YPOS#19 ← phi( render/(const byte[]) YPOS#0 render::@3/(byte[]) YPOS#19 )
  (byte[]) XPOS#22 ← phi( render/(const byte[]) XPOS#0 render::@3/(byte[]) XPOS#22 )
  (byte*) render::colline#5 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#4
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#4
  if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#10 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#10 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[]) XPOS#22 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (byte[]) YPOS#19 *idx (byte) findcol::i#10
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#2 ← phi( findcol::@10/(const byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  if((byte) findcol::i#1<(byte) numpoints#15) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[]) COLS#15 *idx (byte) findcol::i#10
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Culled Empty Block (label) main::@3
Culled Empty Block (label) findcol::@3
Culled Empty Block (label) findcol::@10
Culled Empty Block (label) findcol::@17
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@5
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(const byte[]) COLS#0 render::@3/(byte[]) COLS#15 )
  (byte) numpoints#15 ← phi( render/(const byte) numpoints#0 render::@3/(byte) numpoints#15 )
  (byte[]) YPOS#19 ← phi( render/(const byte[]) YPOS#0 render::@3/(byte[]) YPOS#19 )
  (byte[]) XPOS#22 ← phi( render/(const byte[]) XPOS#0 render::@3/(byte[]) XPOS#22 )
  (byte*) render::colline#5 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#4
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#4
  if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#10 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#10 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[]) XPOS#22 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (byte[]) YPOS#19 *idx (byte) findcol::i#10
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#2 ← phi( findcol::@9/(const byte) findcol::return#1 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  if((byte) findcol::i#1<(byte) numpoints#15) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[]) COLS#15 *idx (byte) findcol::i#10
  to:findcol::@8
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#4
Not aliassing across scopes: findcol::return#0 findcol::return#2
Not aliassing across scopes: render::col#0 findcol::return#0
Self Phi Eliminated (byte[]) XPOS#22
Self Phi Eliminated (byte[]) YPOS#19
Self Phi Eliminated (byte) numpoints#15
Self Phi Eliminated (byte[]) COLS#15
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@5
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[]) COLS#15 ← phi( render/(const byte[]) COLS#0 )
  (byte) numpoints#15 ← phi( render/(const byte) numpoints#0 )
  (byte[]) YPOS#19 ← phi( render/(const byte[]) YPOS#0 )
  (byte[]) XPOS#22 ← phi( render/(const byte[]) XPOS#0 )
  (byte*) render::colline#5 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#4
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#4
  if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#10 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#10 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[]) XPOS#22 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (byte[]) YPOS#19 *idx (byte) findcol::i#10
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#2 ← phi( findcol::@9/(const byte) findcol::return#1 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  if((byte) findcol::i#1<(byte) numpoints#15) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[]) COLS#15 *idx (byte) findcol::i#10
  to:findcol::@8
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Redundant Phi (byte[]) XPOS#22 (const byte[]) XPOS#0
Redundant Phi (byte[]) YPOS#19 (const byte[]) YPOS#0
Redundant Phi (byte) numpoints#15 (const byte) numpoints#0
Redundant Phi (byte[]) COLS#15 (const byte[]) COLS#0
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@5
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte*) render::colline#5 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#4
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#4
  if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#10 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#10 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#2 ← phi( findcol::@9/(const byte) findcol::return#1 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10
  to:findcol::@8
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#10
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#10
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#10
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#4
Not aliassing across scopes: findcol::return#0 findcol::return#2
Not aliassing across scopes: render::col#0 findcol::return#0
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#10
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#10
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#10
Inlining constant with var siblings (const byte*) initscreen::screen#0
Inlining constant with var siblings (const byte*) initscreen::screen#0
Inlining constant with var siblings (const byte) render::y#0
Inlining constant with var siblings (const byte) render::y#0
Inlining constant with var siblings (const byte) render::x#0
Inlining constant with var siblings (const byte) render::x#0
Inlining constant with var siblings (const byte*) render::colline#0
Inlining constant with var siblings (const byte*) render::colline#0
Inlining constant with var siblings (const byte) findcol::mindiff#0
Inlining constant with var siblings (const byte) findcol::mindiff#0
Inlining constant with var siblings (const byte) findcol::mincol#0
Inlining constant with var siblings (const byte) findcol::mincol#0
Inlining constant with var siblings (const byte) findcol::mincol#0
Inlining constant with var siblings (const byte) findcol::i#0
Inlining constant with var siblings (const byte) findcol::i#0
Inlining constant with var siblings (const byte) findcol::return#1
Inlining constant with var siblings (const byte) findcol::return#1
Constant inlined findcol::i#0 = (byte/signed byte/word/signed word) 0
Constant inlined render::colline#0 = (const byte*) COLORS#0
Constant inlined render::x#0 = (byte/signed byte/word/signed word) 0
Constant inlined initscreen::screen#0 = (const byte*) SCREEN#0
Constant inlined findcol::return#1 = (byte/signed byte/word/signed word) 0
Constant inlined render::y#0 = (byte/signed byte/word/signed word) 0
Constant inlined findcol::mincol#0 = (byte/signed byte/word/signed word) 0
Constant inlined findcol::mindiff#0 = (byte/word/signed word) 255
Constant inlined initscreen::$0 = (const byte*) SCREEN#0+(word/signed word) 1000
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@5
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte*) render::colline#5 ← phi( render/(const byte*) COLORS#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte/signed byte/word/signed word) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte/signed byte/word/signed word) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#4
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#4
  if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#10 ← phi( findcol/(byte/signed byte/word/signed word) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte/word/signed word) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#10 ← phi( findcol/(byte/signed byte/word/signed word) 0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#2 ← phi( findcol::@9/(byte/signed byte/word/signed word) 0 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10
  to:findcol::@8
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

FINAL SYMBOL TABLE
(label) @5
(label) @begin
(label) @end
(byte*) COLORS
(const byte*) COLORS#0 = ((byte*))(word) 55296
(byte[]) COLS
(const byte[]) COLS#0 = { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
(byte) FILL
(const byte) FILL#0 = (byte/word/signed word) 230
(byte*) SCREEN
(const byte*) SCREEN#0 = ((byte*))(word/signed word) 1024
(byte[]) XPOS
(const byte[]) XPOS#0 = { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
(byte[]) YPOS
(const byte[]) YPOS#0 = { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
(void()) animate()
(byte~) animate::$0
(byte~) animate::$1
(byte~) animate::$10
(byte~) animate::$11
(byte~) animate::$12
(byte~) animate::$15
(byte~) animate::$16
(byte~) animate::$17
(byte~) animate::$2
(byte~) animate::$20
(byte~) animate::$21
(byte~) animate::$22
(byte~) animate::$25
(byte~) animate::$26
(byte~) animate::$27
(byte~) animate::$30
(byte~) animate::$31
(byte~) animate::$5
(byte~) animate::$6
(byte~) animate::$7
(label) animate::@1
(label) animate::@10
(label) animate::@11
(label) animate::@12
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$12
(byte~) findcol::$14
(label) findcol::@1
(label) findcol::@12
(label) findcol::@14
(label) findcol::@16
(label) findcol::@2
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#0
(byte) findcol::diff#1
(byte) findcol::diff#2
(byte) findcol::diff#3
(byte) findcol::diff#4
(byte) findcol::diff#6
(byte) findcol::i
(byte) findcol::i#1
(byte) findcol::i#10
(byte) findcol::mincol
(byte) findcol::mincol#1
(byte) findcol::mincol#10
(byte) findcol::mincol#2
(byte) findcol::mindiff
(byte) findcol::mindiff#10
(byte) findcol::mindiff#11
(byte) findcol::return
(byte) findcol::return#0
(byte) findcol::return#2
(byte) findcol::x
(byte) findcol::x#0
(byte) findcol::xp
(byte) findcol::xp#0
(byte) findcol::y
(byte) findcol::y#0
(byte) findcol::yp
(byte) findcol::yp#0
(void()) initscreen()
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#1
(byte*) initscreen::screen#2
(void()) main()
(label) main::@1
(label) main::@4
(label) main::@5
(label) main::@return
(byte) numpoints
(const byte) numpoints#0 = (byte/signed byte/word/signed word) 6
(void()) render()
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@5
(label) render::@return
(byte) render::col
(byte) render::col#0
(byte*) render::colline
(byte*) render::colline#1
(byte*) render::colline#5
(byte) render::x
(byte) render::x#1
(byte) render::x#2
(byte) render::y
(byte) render::y#1
(byte) render::y#4

Block Sequence Planned @begin @5 @end main main::@1 main::@4 main::@5 main::@return animate animate::@7 animate::@1 animate::@8 animate::@2 animate::@9 animate::@3 animate::@10 animate::@4 animate::@11 animate::@12 animate::@return render render::@1 render::@2 render::@5 render::@3 render::@return findcol findcol::@1 findcol::@9 findcol::@return findcol::@2 findcol::@12 findcol::@5 findcol::@14 findcol::@7 findcol::@16 findcol::@8 findcol::@6 findcol::@4 initscreen initscreen::@1 initscreen::@return 
Added new block during phi lifting render::@6(between render::@3 and render::@1)
Added new block during phi lifting render::@7(between render::@5 and render::@2)
Added new block during phi lifting findcol::@19(between findcol::@8 and findcol::@1)
Added new block during phi lifting findcol::@20(between findcol::@8 and findcol::@return)
Added new block during phi lifting findcol::@21(between findcol::@7 and findcol::@8)
Added new block during phi lifting initscreen::@3(between initscreen::@1 and initscreen::@1)
Block Sequence Planned @begin @5 @end main main::@1 main::@4 main::@5 main::@return animate animate::@7 animate::@1 animate::@8 animate::@2 animate::@9 animate::@3 animate::@10 animate::@4 animate::@11 animate::@12 animate::@return render render::@1 render::@2 render::@5 render::@3 render::@return render::@6 render::@7 findcol findcol::@1 findcol::@9 findcol::@return findcol::@2 findcol::@12 findcol::@5 findcol::@14 findcol::@7 findcol::@16 findcol::@8 findcol::@20 findcol::@19 findcol::@21 findcol::@6 findcol::@4 initscreen initscreen::@1 initscreen::@return initscreen::@3 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@5
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5
main: scope:[main]  from @5
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@5
  call render param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1
  to:animate::@7
animate::@7: scope:[animate]  from animate
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0
  if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1
  if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2
  if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25
  (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40
  *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@6
  (byte*) render::colline#5 ← phi( render/(const byte*) COLORS#0 render::@6/(byte*~) render::colline#6 )
  (byte) render::y#4 ← phi( render/(byte/signed byte/word/signed word) 0 render::@6/(byte~) render::y#6 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@7
  (byte) render::x#2 ← phi( render::@1/(byte/signed byte/word/signed word) 0 render::@7/(byte~) render::x#4 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#4
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@7
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40
  (byte) render::y#1 ← ++ (byte) render::y#4
  if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@6
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
render::@6: scope:[render]  from render::@3
  (byte~) render::y#6 ← (byte) render::y#1
  (byte*~) render::colline#6 ← (byte*) render::colline#1
  to:render::@1
render::@7: scope:[render]  from render::@5
  (byte~) render::x#4 ← (byte) render::x#1
  to:render::@2
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  (byte) findcol::mincol#10 ← phi( findcol/(byte/signed byte/word/signed word) 0 findcol::@19/(byte~) findcol::mincol#14 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte/word/signed word) 255 findcol::@19/(byte~) findcol::mindiff#13 )
  (byte) findcol::i#10 ← phi( findcol/(byte/signed byte/word/signed word) 0 findcol::@19/(byte~) findcol::i#14 )
  (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10
  (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@20 findcol::@9
  (byte) findcol::return#2 ← phi( findcol::@9/(byte/signed byte/word/signed word) 0 findcol::@20/(byte~) findcol::mincol#15 )
  return 
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  (byte~) findcol::diff#9 ← (byte) findcol::diff#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte~) findcol::diff#9 findcol::@4/(byte~) findcol::diff#10 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  (byte~) findcol::diff#11 ← (byte) findcol::diff#3
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte~) findcol::diff#11 findcol::@6/(byte~) findcol::diff#12 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10
  (byte~) findcol::mincol#16 ← (byte) findcol::mincol#1
  (byte~) findcol::diff#13 ← (byte) findcol::diff#6
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte~) findcol::diff#13 findcol::@21/(byte~) findcol::mindiff#14 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte~) findcol::mincol#16 findcol::@21/(byte~) findcol::mincol#17 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19
  to:findcol::@20
findcol::@20: scope:[findcol]  from findcol::@8
  (byte~) findcol::mincol#15 ← (byte) findcol::mincol#2
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  (byte~) findcol::i#14 ← (byte) findcol::i#1
  (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11
  (byte~) findcol::mincol#14 ← (byte) findcol::mincol#2
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  (byte~) findcol::mincol#17 ← (byte) findcol::mincol#10
  (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte~) findcol::diff#12 ← (byte) findcol::diff#2
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  (byte~) findcol::diff#10 ← (byte) findcol::diff#0
  to:findcol::@5
initscreen: scope:[initscreen]  from main
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@3
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@3/(byte*~) initscreen::screen#3 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@3
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
initscreen::@3: scope:[initscreen]  from initscreen::@1
  (byte*~) initscreen::screen#3 ← (byte*) initscreen::screen#1
  to:initscreen::@1

Adding NOP phi() at start of @begin
Adding NOP phi() at start of @5
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of render
Adding NOP phi() at start of findcol
Adding NOP phi() at start of initscreen
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to initscreen:5 render:7 animate:9 
Calls in [render] to findcol:56 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] phi() [ ]
  to:@5
@5: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @5
  [3] phi() [ ]
main: scope:[main]  from @5
  [4] phi() [ ]
  [5] call initscreen param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [6] phi() [ ]
  [7] call render param-assignment [ ]
  to:main::@4
main::@4: scope:[main]  from main::@1
  [8] phi() [ ]
  [9] call animate param-assignment [ ]
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] if(true) goto main::@1 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@5
  [11] return  [ ]
  to:@return
animate: scope:[animate]  from main::@4
  [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ]
  [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ]
  [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ]
  [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ]
  [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ]
  to:animate::@7
animate::@7: scope:[animate]  from animate
  [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ]
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ]
  [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ]
  [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ]
  [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ]
  [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ]
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ]
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ]
  [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ]
  [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ]
  [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ]
  [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ]
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ]
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ]
  [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ]
  [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ]
  [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ]
  [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ]
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ]
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ]
  [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ]
  [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ]
  [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ]
  [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ]
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ]
  [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ]
  [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ]
  [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ]
  [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ]
  [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ]
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ]
  [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ]
  [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ]
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  [50] return  [ ]
  to:@return
render: scope:[render]  from main::@1
  [51] phi() [ ]
  to:render::@1
render::@1: scope:[render]  from render render::@6
  [52] (byte*) render::colline#5 ← phi( render/(const byte*) COLORS#0 render::@6/(byte*~) render::colline#6 ) [ render::y#4 render::colline#5 ]
  [52] (byte) render::y#4 ← phi( render/(byte/signed byte/word/signed word) 0 render::@6/(byte~) render::y#6 ) [ render::y#4 render::colline#5 ]
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@7
  [53] (byte) render::x#2 ← phi( render::@1/(byte/signed byte/word/signed word) 0 render::@7/(byte~) render::x#4 ) [ render::y#4 render::colline#5 render::x#2 ]
  [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ]
  [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ]
  [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ]
  [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ]
  to:render::@5
render::@5: scope:[render]  from render::@2
  [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ]
  [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ]
  [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ]
  [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@7 [ render::y#4 render::colline#5 render::x#1 ]
  to:render::@3
render::@3: scope:[render]  from render::@5
  [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ]
  [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::colline#1 render::y#1 ]
  [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@6 [ render::colline#1 render::y#1 ]
  to:render::@return
render::@return: scope:[render]  from render::@3
  [65] return  [ ]
  to:@return
render::@6: scope:[render]  from render::@3
  [66] (byte~) render::y#6 ← (byte) render::y#1 [ render::y#6 render::colline#1 ]
  [67] (byte*~) render::colline#6 ← (byte*) render::colline#1 [ render::y#6 render::colline#6 ]
  to:render::@1
render::@7: scope:[render]  from render::@5
  [68] (byte~) render::x#4 ← (byte) render::x#1 [ render::y#4 render::colline#5 render::x#4 ]
  to:render::@2
findcol: scope:[findcol]  from render::@2
  [69] phi() [ findcol::x#0 findcol::y#0 ]
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  [70] (byte) findcol::mincol#10 ← phi( findcol/(byte/signed byte/word/signed word) 0 findcol::@19/(byte~) findcol::mincol#14 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ]
  [70] (byte) findcol::mindiff#10 ← phi( findcol/(byte/word/signed word) 255 findcol::@19/(byte~) findcol::mindiff#13 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ]
  [70] (byte) findcol::i#10 ← phi( findcol/(byte/signed byte/word/signed word) 0 findcol::@19/(byte~) findcol::i#14 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ]
  [71] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ]
  [72] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ]
  [73] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  [74] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@20 findcol::@9
  [75] (byte) findcol::return#2 ← phi( findcol::@9/(byte/signed byte/word/signed word) 0 findcol::@20/(byte~) findcol::mincol#15 ) [ findcol::return#2 ]
  [76] return  [ findcol::return#2 ]
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  [77] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  [78] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ]
  [79] (byte~) findcol::diff#9 ← (byte) findcol::diff#1 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#9 ]
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  [80] (byte) findcol::diff#4 ← phi( findcol::@12/(byte~) findcol::diff#9 findcol::@4/(byte~) findcol::diff#10 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ]
  [81] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ]
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  [82] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ]
  [83] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ]
  [84] (byte~) findcol::diff#11 ← (byte) findcol::diff#3 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#11 ]
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  [85] (byte) findcol::diff#6 ← phi( findcol::@14/(byte~) findcol::diff#11 findcol::@6/(byte~) findcol::diff#12 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ]
  [86] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ]
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  [87] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ]
  [88] (byte~) findcol::mincol#16 ← (byte) findcol::mincol#1 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#16 ]
  [89] (byte~) findcol::diff#13 ← (byte) findcol::diff#6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#16 findcol::diff#13 ]
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  [90] (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte~) findcol::diff#13 findcol::@21/(byte~) findcol::mindiff#14 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#2 findcol::mindiff#11 ]
  [90] (byte) findcol::mincol#2 ← phi( findcol::@16/(byte~) findcol::mincol#16 findcol::@21/(byte~) findcol::mincol#17 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#2 findcol::mindiff#11 ]
  [91] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::mincol#2 findcol::mindiff#11 findcol::i#1 ]
  [92] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::mincol#2 findcol::mindiff#11 findcol::i#1 ]
  to:findcol::@20
findcol::@20: scope:[findcol]  from findcol::@8
  [93] (byte~) findcol::mincol#15 ← (byte) findcol::mincol#2 [ findcol::mincol#15 ]
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  [94] (byte~) findcol::i#14 ← (byte) findcol::i#1 [ findcol::x#0 findcol::y#0 findcol::i#14 findcol::mincol#2 findcol::mindiff#11 ]
  [95] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#14 findcol::mindiff#13 findcol::mincol#2 ]
  [96] (byte~) findcol::mincol#14 ← (byte) findcol::mincol#2 [ findcol::x#0 findcol::y#0 findcol::i#14 findcol::mindiff#13 findcol::mincol#14 ]
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  [97] (byte~) findcol::mincol#17 ← (byte) findcol::mincol#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#17 ]
  [98] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#17 findcol::mindiff#14 ]
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  [99] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ]
  [100] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ]
  [101] (byte~) findcol::diff#12 ← (byte) findcol::diff#2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#12 ]
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  [102] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ]
  [103] (byte~) findcol::diff#10 ← (byte) findcol::diff#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#10 ]
  to:findcol::@5
initscreen: scope:[initscreen]  from main
  [104] phi() [ ]
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@3
  [105] (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@3/(byte*~) initscreen::screen#3 ) [ initscreen::screen#2 ]
  [106] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ]
  [107] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ]
  [108] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@3 [ initscreen::screen#1 ]
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [109] return  [ ]
  to:@return
initscreen::@3: scope:[initscreen]  from initscreen::@1
  [110] (byte*~) initscreen::screen#3 ← (byte*) initscreen::screen#1 [ initscreen::screen#3 ]
  to:initscreen::@1

Created 12 initial phi equivalence classes
Coalesced [66] render::y#6 ← render::y#1
Coalesced [67] render::colline#6 ← render::colline#1
Coalesced [68] render::x#4 ← render::x#1
Coalesced [79] findcol::diff#9 ← findcol::diff#1
Coalesced [84] findcol::diff#11 ← findcol::diff#3
Coalesced [88] findcol::mincol#16 ← findcol::mincol#1
Coalesced [89] findcol::diff#13 ← findcol::diff#6
Coalesced [93] findcol::mincol#15 ← findcol::mincol#2
Coalesced [94] findcol::i#14 ← findcol::i#1
Not coalescing [95] findcol::mindiff#13 ← findcol::mindiff#11
Coalesced [96] findcol::mincol#14 ← findcol::mincol#2
Coalesced (already) [97] findcol::mincol#17 ← findcol::mincol#10
Not coalescing [98] findcol::mindiff#14 ← findcol::mindiff#10
Coalesced [101] findcol::diff#12 ← findcol::diff#2
Coalesced [103] findcol::diff#10 ← findcol::diff#0
Coalesced [110] initscreen::screen#3 ← initscreen::screen#1
Coalesced down to 9 phi equivalence classes
Culled Empty Block (label) render::@6
Culled Empty Block (label) render::@7
Culled Empty Block (label) findcol::@20
Culled Empty Block (label) initscreen::@3
Block Sequence Planned @begin @5 @end main main::@1 main::@4 main::@5 main::@return animate animate::@7 animate::@1 animate::@8 animate::@2 animate::@9 animate::@3 animate::@10 animate::@4 animate::@11 animate::@12 animate::@return render render::@1 render::@2 render::@5 render::@3 render::@return findcol findcol::@1 findcol::@9 findcol::@return findcol::@2 findcol::@12 findcol::@5 findcol::@14 findcol::@7 findcol::@16 findcol::@8 findcol::@19 findcol::@21 findcol::@6 findcol::@4 initscreen initscreen::@1 initscreen::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @5
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of render
Adding NOP phi() at start of findcol
Adding NOP phi() at start of initscreen
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  [0] phi() [ ]
  to:@5
@5: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @5
  [3] phi() [ ]
main: scope:[main]  from @5
  [4] phi() [ ]
  [5] call initscreen param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [6] phi() [ ]
  [7] call render param-assignment [ ]
  to:main::@4
main::@4: scope:[main]  from main::@1
  [8] phi() [ ]
  [9] call animate param-assignment [ ]
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] if(true) goto main::@1 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@5
  [11] return  [ ]
  to:@return
animate: scope:[animate]  from main::@4
  [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ]
  [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ]
  [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ]
  [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ]
  [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ]
  to:animate::@7
animate::@7: scope:[animate]  from animate
  [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ]
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ]
  [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ]
  [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ]
  [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ]
  [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ]
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ]
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ]
  [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ]
  [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ]
  [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ]
  [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ]
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ]
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ]
  [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ]
  [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ]
  [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ]
  [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ]
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ]
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ]
  [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ]
  [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ]
  [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ]
  [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ]
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ]
  [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ]
  [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ]
  [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ]
  [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ]
  [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ]
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ]
  [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ]
  [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ]
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  [50] return  [ ]
  to:@return
render: scope:[render]  from main::@1
  [51] phi() [ ]
  to:render::@1
render::@1: scope:[render]  from render render::@3
  [52] (byte*) render::colline#5 ← phi( render/(const byte*) COLORS#0 render::@3/(byte*) render::colline#1 ) [ render::y#4 render::colline#5 ]
  [52] (byte) render::y#4 ← phi( render/(byte/signed byte/word/signed word) 0 render::@3/(byte) render::y#1 ) [ render::y#4 render::colline#5 ]
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  [53] (byte) render::x#2 ← phi( render::@1/(byte/signed byte/word/signed word) 0 render::@5/(byte) render::x#1 ) [ render::y#4 render::colline#5 render::x#2 ]
  [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ]
  [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ]
  [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ]
  [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ]
  to:render::@5
render::@5: scope:[render]  from render::@2
  [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ]
  [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ]
  [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ]
  [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2 [ render::y#4 render::colline#5 render::x#1 ]
  to:render::@3
render::@3: scope:[render]  from render::@5
  [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ]
  [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::y#1 render::colline#1 ]
  [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1 [ render::y#1 render::colline#1 ]
  to:render::@return
render::@return: scope:[render]  from render::@3
  [65] return  [ ]
  to:@return
findcol: scope:[findcol]  from render::@2
  [66] phi() [ findcol::x#0 findcol::y#0 ]
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  [67] (byte) findcol::mincol#10 ← phi( findcol/(byte/signed byte/word/signed word) 0 findcol::@19/(byte) findcol::mincol#2 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ]
  [67] (byte) findcol::mindiff#10 ← phi( findcol/(byte/word/signed word) 255 findcol::@19/(byte~) findcol::mindiff#13 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ]
  [67] (byte) findcol::i#10 ← phi( findcol/(byte/signed byte/word/signed word) 0 findcol::@19/(byte) findcol::i#1 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ]
  [68] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ]
  [69] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ]
  [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  [72] (byte) findcol::return#2 ← phi( findcol::@9/(byte/signed byte/word/signed word) 0 findcol::@8/(byte) findcol::mincol#2 ) [ findcol::return#2 ]
  [73] return  [ findcol::return#2 ]
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ]
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  [76] (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ]
  [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ]
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ]
  [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ]
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  [80] (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ]
  [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ]
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  [82] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ]
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  [83] (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@21/(byte~) findcol::mindiff#14 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#2 findcol::mindiff#11 ]
  [83] (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@21/(byte) findcol::mincol#10 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#2 findcol::mindiff#11 ]
  [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ]
  [85] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ]
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ]
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ]
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ]
  [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ]
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ]
  to:findcol::@5
initscreen: scope:[initscreen]  from main
  [91] phi() [ ]
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  [92] (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@1/(byte*) initscreen::screen#1 ) [ initscreen::screen#2 ]
  [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ]
  [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ]
  [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ]
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [96] return  [ ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@5
@5: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @5
  [3] phi() [ ] ( )
main: scope:[main]  from @5
  [4] phi() [ ] ( main:2 [ ] )
  [5] call initscreen param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [6] phi() [ ] ( main:2 [ ] )
  [7] call render param-assignment [ ] ( main:2 [ ] )
  to:main::@4
main::@4: scope:[main]  from main::@1
  [8] phi() [ ] ( main:2 [ ] )
  [9] call animate param-assignment [ ] ( main:2 [ ] )
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] if(true) goto main::@1 [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@5
  [11] return  [ ] ( main:2 [ ] )
  to:@return
animate: scope:[animate]  from main::@4
  [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ] ( main:2::animate:9 [ animate::$0 ] )
  [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ] ( main:2::animate:9 [ animate::$1 ] )
  [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ] ( main:2::animate:9 [ ] )
  [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ] ( main:2::animate:9 [ animate::$2 ] )
  [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ] ( main:2::animate:9 [ ] )
  to:animate::@7
animate::@7: scope:[animate]  from animate
  [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] )
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ] ( main:2::animate:9 [ animate::$5 ] )
  [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ] ( main:2::animate:9 [ animate::$6 ] )
  [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ] ( main:2::animate:9 [ ] )
  [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ] ( main:2::animate:9 [ animate::$7 ] )
  [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ] ( main:2::animate:9 [ ] )
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] )
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ] ( main:2::animate:9 [ animate::$10 ] )
  [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ] ( main:2::animate:9 [ animate::$11 ] )
  [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ] ( main:2::animate:9 [ ] )
  [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ] ( main:2::animate:9 [ animate::$12 ] )
  [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ] ( main:2::animate:9 [ ] )
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] )
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] )
  [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ] ( main:2::animate:9 [ animate::$16 ] )
  [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ] ( main:2::animate:9 [ ] )
  [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ] ( main:2::animate:9 [ animate::$17 ] )
  [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ] ( main:2::animate:9 [ ] )
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] )
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ] ( main:2::animate:9 [ animate::$20 ] )
  [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ] ( main:2::animate:9 [ animate::$21 ] )
  [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ] ( main:2::animate:9 [ ] )
  [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ] ( main:2::animate:9 [ animate::$22 ] )
  [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ] ( main:2::animate:9 [ ] )
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] )
  [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ] ( main:2::animate:9 [ animate::$25 ] )
  [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] )
  [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ] ( main:2::animate:9 [ ] )
  [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ] ( main:2::animate:9 [ animate::$27 ] )
  [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ] ( main:2::animate:9 [ ] )
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ] ( main:2::animate:9 [ animate::$30 ] )
  [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] )
  [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ] ( main:2::animate:9 [ ] )
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  [50] return  [ ] ( main:2::animate:9 [ ] )
  to:@return
render: scope:[render]  from main::@1
  [51] phi() [ ] ( main:2::render:7 [ ] )
  to:render::@1
render::@1: scope:[render]  from render render::@3
  [52] (byte*) render::colline#5 ← phi( render/(const byte*) COLORS#0 render::@3/(byte*) render::colline#1 ) [ render::y#4 render::colline#5 ] ( main:2::render:7 [ render::y#4 render::colline#5 ] )
  [52] (byte) render::y#4 ← phi( render/(byte/signed byte/word/signed word) 0 render::@3/(byte) render::y#1 ) [ render::y#4 render::colline#5 ] ( main:2::render:7 [ render::y#4 render::colline#5 ] )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  [53] (byte) render::x#2 ← phi( render::@1/(byte/signed byte/word/signed word) 0 render::@5/(byte) render::x#1 ) [ render::y#4 render::colline#5 render::x#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 ] )
  [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] )
  [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] )
  [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] )
  to:render::@5
render::@5: scope:[render]  from render::@2
  [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] )
  [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 ] )
  [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] )
  [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] )
  to:render::@3
render::@3: scope:[render]  from render::@5
  [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] )
  [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] )
  [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] )
  to:render::@return
render::@return: scope:[render]  from render::@3
  [65] return  [ ] ( main:2::render:7 [ ] )
  to:@return
findcol: scope:[findcol]  from render::@2
  [66] phi() [ findcol::x#0 findcol::y#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] )
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  [67] (byte) findcol::mincol#10 ← phi( findcol/(byte/signed byte/word/signed word) 0 findcol::@19/(byte) findcol::mincol#2 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ] )
  [67] (byte) findcol::mindiff#10 ← phi( findcol/(byte/word/signed word) 255 findcol::@19/(byte~) findcol::mindiff#13 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ] )
  [67] (byte) findcol::i#10 ← phi( findcol/(byte/signed byte/word/signed word) 0 findcol::@19/(byte) findcol::i#1 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 ] )
  [68] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] )
  [69] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] )
  [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] )
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] )
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  [72] (byte) findcol::return#2 ← phi( findcol::@9/(byte/signed byte/word/signed word) 0 findcol::@8/(byte) findcol::mincol#2 ) [ findcol::return#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  [73] return  [ findcol::return#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] )
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] )
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  [76] (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] )
  [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] )
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] )
  [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] )
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  [80] (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] )
  [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] )
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  [82] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] )
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  [83] (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@21/(byte~) findcol::mindiff#14 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#2 findcol::mindiff#11 ] )
  [83] (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@21/(byte) findcol::mincol#10 ) [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#2 findcol::mindiff#11 ] )
  [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] )
  [85] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] )
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] )
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] )
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] )
  [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] )
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] )
  to:findcol::@5
initscreen: scope:[initscreen]  from main
  [91] phi() [ ] ( main:2::initscreen:5 [ ] )
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  [92] (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@1/(byte*) initscreen::screen#1 ) [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] )
  [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] )
  [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] )
  [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] )
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [96] return  [ ] ( main:2::initscreen:5 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@5 dominated by  @begin @5 
@end dominated by  @end @begin @5 
main dominated by  main @begin @5 
main::@1 dominated by  main main::@1 @begin @5 
main::@4 dominated by  main main::@1 main::@4 @begin @5 
main::@5 dominated by  main main::@1 main::@5 main::@4 @begin @5 
main::@return dominated by  main::@return main main::@1 main::@5 main::@4 @begin @5 
animate dominated by  main animate main::@1 main::@4 @begin @5 
animate::@7 dominated by  main animate main::@1 animate::@7 main::@4 @begin @5 
animate::@1 dominated by  main animate animate::@1 main::@1 main::@4 @begin @5 
animate::@8 dominated by  main animate animate::@1 main::@1 animate::@8 main::@4 @begin @5 
animate::@2 dominated by  main animate animate::@2 animate::@1 main::@1 main::@4 @begin @5 
animate::@9 dominated by  main animate animate::@2 animate::@1 main::@1 animate::@9 main::@4 @begin @5 
animate::@3 dominated by  main animate animate::@2 animate::@1 animate::@3 main::@1 main::@4 @begin @5 
animate::@10 dominated by  main animate animate::@2 animate::@1 animate::@3 main::@1 main::@4 @begin @5 animate::@10 
animate::@4 dominated by  main animate animate::@2 animate::@1 animate::@4 animate::@3 main::@1 main::@4 @begin @5 
animate::@11 dominated by  main animate animate::@2 animate::@1 animate::@4 animate::@3 main::@1 main::@4 @begin @5 animate::@11 
animate::@12 dominated by  animate::@12 main animate animate::@2 animate::@1 animate::@4 animate::@3 main::@1 main::@4 @begin @5 animate::@11 
animate::@return dominated by  main animate animate::@2 animate::@1 animate::@4 animate::@3 main::@1 main::@4 @begin @5 animate::@return 
render dominated by  main main::@1 render @begin @5 
render::@1 dominated by  main main::@1 render::@1 render @begin @5 
render::@2 dominated by  main render::@2 main::@1 render::@1 render @begin @5 
render::@5 dominated by  main render::@5 render::@2 main::@1 render::@1 render @begin @5 
render::@3 dominated by  main render::@5 render::@3 render::@2 main::@1 render::@1 render @begin @5 
render::@return dominated by  main render::@5 render::@3 render::@2 main::@1 render::@1 render render::@return @begin @5 
findcol dominated by  findcol main render::@2 main::@1 render::@1 render @begin @5 
findcol::@1 dominated by  findcol findcol::@1 main render::@2 main::@1 render::@1 render @begin @5 
findcol::@9 dominated by  findcol findcol::@1 main render::@2 main::@1 render::@1 render @begin @5 findcol::@9 
findcol::@return dominated by  findcol findcol::@1 main render::@2 main::@1 render::@1 render @begin @5 findcol::@return 
findcol::@2 dominated by  findcol findcol::@2 findcol::@1 main render::@2 main::@1 render::@1 render @begin @5 
findcol::@12 dominated by  findcol findcol::@2 findcol::@1 findcol::@12 main render::@2 main::@1 render::@1 render @begin @5 
findcol::@5 dominated by  findcol findcol::@2 findcol::@1 findcol::@5 main render::@2 main::@1 render::@1 render @begin @5 
findcol::@14 dominated by  findcol findcol::@2 findcol::@1 findcol::@14 findcol::@5 main render::@2 main::@1 render::@1 render @begin @5 
findcol::@7 dominated by  findcol findcol::@2 findcol::@1 findcol::@7 findcol::@5 main render::@2 main::@1 render::@1 render @begin @5 
findcol::@16 dominated by  findcol::@16 findcol findcol::@2 findcol::@1 findcol::@7 findcol::@5 main render::@2 main::@1 render::@1 render @begin @5 
findcol::@8 dominated by  findcol findcol::@2 findcol::@1 findcol::@8 findcol::@7 findcol::@5 main render::@2 main::@1 render::@1 render @begin @5 
findcol::@19 dominated by  findcol findcol::@2 findcol::@1 findcol::@8 findcol::@7 findcol::@5 main render::@2 main::@1 render::@1 render @begin @5 findcol::@19 
findcol::@21 dominated by  findcol findcol::@2 findcol::@1 findcol::@7 findcol::@5 main render::@2 main::@1 render::@1 render @begin findcol::@21 @5 
findcol::@6 dominated by  findcol findcol::@2 findcol::@1 findcol::@6 findcol::@5 main render::@2 main::@1 render::@1 render @begin @5 
findcol::@4 dominated by  findcol::@4 findcol findcol::@2 findcol::@1 main render::@2 main::@1 render::@1 render @begin @5 
initscreen dominated by  main @begin initscreen @5 
initscreen::@1 dominated by  main @begin initscreen @5 initscreen::@1 
initscreen::@return dominated by  main @begin initscreen initscreen::@return @5 initscreen::@1 

Found back edge: Loop head: main::@1 tails: main::@5 blocks: null
Found back edge: Loop head: render::@2 tails: render::@5 blocks: null
Found back edge: Loop head: render::@1 tails: render::@3 blocks: null
Found back edge: Loop head: findcol::@1 tails: findcol::@19 blocks: null
Found back edge: Loop head: initscreen::@1 tails: initscreen::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@4 main::@1 
Populated: Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
Populated: Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Populated: Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9 
Populated: Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@4 main::@1 
Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9 
Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@4 main::@1 
Found 1 loops in scope [initscreen]
  Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 
Found 2 loops in scope [render]
  Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
  Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Found 0 loops in scope [animate]
Found 1 loops in scope [findcol]
  Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@4 main::@1  depth: 1
Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2  depth: 3
Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1  depth: 2
Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9  depth: 4
Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) COLORS
(byte[]) COLS
(byte) FILL
(byte*) SCREEN
(byte[]) XPOS
(byte[]) YPOS
(void()) animate()
(byte~) animate::$0 4.0
(byte~) animate::$1 4.0
(byte~) animate::$10 4.0
(byte~) animate::$11 4.0
(byte~) animate::$12 4.0
(byte~) animate::$15 4.0
(byte~) animate::$16 4.0
(byte~) animate::$17 4.0
(byte~) animate::$2 4.0
(byte~) animate::$20 4.0
(byte~) animate::$21 4.0
(byte~) animate::$22 4.0
(byte~) animate::$25 4.0
(byte~) animate::$26 4.0
(byte~) animate::$27 4.0
(byte~) animate::$30 4.0
(byte~) animate::$31 4.0
(byte~) animate::$5 4.0
(byte~) animate::$6 4.0
(byte~) animate::$7 4.0
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$12 20002.0
(byte~) findcol::$14 20002.0
(byte) findcol::diff
(byte) findcol::diff#0 20002.0
(byte) findcol::diff#1 20002.0
(byte) findcol::diff#2 20002.0
(byte) findcol::diff#3 20002.0
(byte) findcol::diff#4 10001.0
(byte) findcol::diff#6 13334.666666666666
(byte) findcol::i
(byte) findcol::i#1 10001.0
(byte) findcol::i#10 2631.842105263158
(byte) findcol::mincol
(byte) findcol::mincol#1 20002.0
(byte) findcol::mincol#10 1176.5882352941176
(byte) findcol::mincol#2 10001.0
(byte) findcol::mindiff
(byte) findcol::mindiff#10 1875.1875
(byte) findcol::mindiff#11 10001.0
(byte~) findcol::mindiff#13 20002.0
(byte~) findcol::mindiff#14 20002.0
(byte) findcol::return
(byte) findcol::return#0 2002.0
(byte) findcol::return#2 3667.333333333333
(byte) findcol::x
(byte) findcol::x#0 1640.2
(byte) findcol::xp
(byte) findcol::xp#0 10001.0
(byte) findcol::y
(byte) findcol::y#0 1708.5416666666665
(byte) findcol::yp
(byte) findcol::yp#0 6250.625
(void()) initscreen()
(byte*) initscreen::screen
(byte*) initscreen::screen#1 16.5
(byte*) initscreen::screen#2 16.5
(void()) main()
(byte) numpoints
(void()) render()
(byte) render::col
(byte) render::col#0 2002.0
(byte*) render::colline
(byte*) render::colline#1 67.33333333333333
(byte*) render::colline#5 120.29999999999998
(byte) render::x
(byte) render::x#1 1501.5
(byte) render::x#2 572.0
(byte) render::y
(byte) render::y#1 151.5
(byte) render::y#4 109.36363636363637

Initial phi equivalence classes
[ render::y#4 render::y#1 ]
[ render::colline#5 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#10 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#13 ]
[ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
[ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
[ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
[ initscreen::screen#2 initscreen::screen#1 ]
Added variable animate::$0 to zero page equivalence class [ animate::$0 ]
Added variable animate::$1 to zero page equivalence class [ animate::$1 ]
Added variable animate::$2 to zero page equivalence class [ animate::$2 ]
Added variable animate::$5 to zero page equivalence class [ animate::$5 ]
Added variable animate::$6 to zero page equivalence class [ animate::$6 ]
Added variable animate::$7 to zero page equivalence class [ animate::$7 ]
Added variable animate::$10 to zero page equivalence class [ animate::$10 ]
Added variable animate::$11 to zero page equivalence class [ animate::$11 ]
Added variable animate::$12 to zero page equivalence class [ animate::$12 ]
Added variable animate::$15 to zero page equivalence class [ animate::$15 ]
Added variable animate::$16 to zero page equivalence class [ animate::$16 ]
Added variable animate::$17 to zero page equivalence class [ animate::$17 ]
Added variable animate::$20 to zero page equivalence class [ animate::$20 ]
Added variable animate::$21 to zero page equivalence class [ animate::$21 ]
Added variable animate::$22 to zero page equivalence class [ animate::$22 ]
Added variable animate::$25 to zero page equivalence class [ animate::$25 ]
Added variable animate::$26 to zero page equivalence class [ animate::$26 ]
Added variable animate::$27 to zero page equivalence class [ animate::$27 ]
Added variable animate::$30 to zero page equivalence class [ animate::$30 ]
Added variable animate::$31 to zero page equivalence class [ animate::$31 ]
Added variable findcol::x#0 to zero page equivalence class [ findcol::x#0 ]
Added variable findcol::y#0 to zero page equivalence class [ findcol::y#0 ]
Added variable findcol::return#0 to zero page equivalence class [ findcol::return#0 ]
Added variable render::col#0 to zero page equivalence class [ render::col#0 ]
Added variable findcol::xp#0 to zero page equivalence class [ findcol::xp#0 ]
Added variable findcol::yp#0 to zero page equivalence class [ findcol::yp#0 ]
Added variable findcol::$12 to zero page equivalence class [ findcol::$12 ]
Added variable findcol::$14 to zero page equivalence class [ findcol::$14 ]
Complete equivalence classes
[ render::y#4 render::y#1 ]
[ render::colline#5 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#10 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#13 ]
[ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
[ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
[ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
[ initscreen::screen#2 initscreen::screen#1 ]
[ animate::$0 ]
[ animate::$1 ]
[ animate::$2 ]
[ animate::$5 ]
[ animate::$6 ]
[ animate::$7 ]
[ animate::$10 ]
[ animate::$11 ]
[ animate::$12 ]
[ animate::$15 ]
[ animate::$16 ]
[ animate::$17 ]
[ animate::$20 ]
[ animate::$21 ]
[ animate::$22 ]
[ animate::$25 ]
[ animate::$26 ]
[ animate::$27 ]
[ animate::$30 ]
[ animate::$31 ]
[ findcol::x#0 ]
[ findcol::y#0 ]
[ findcol::return#0 ]
[ render::col#0 ]
[ findcol::xp#0 ]
[ findcol::yp#0 ]
[ findcol::$12 ]
[ findcol::$14 ]
Allocated zp ZP_BYTE:2 [ render::y#4 render::y#1 ]
Allocated zp ZP_PTR_BYTE:3 [ render::colline#5 render::colline#1 ]
Allocated zp ZP_BYTE:5 [ render::x#2 render::x#1 ]
Allocated zp ZP_BYTE:6 [ findcol::i#10 findcol::i#1 ]
Allocated zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Allocated zp ZP_BYTE:8 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
Allocated zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
Allocated zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
Allocated zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ]
Allocated zp ZP_BYTE:13 [ animate::$0 ]
Allocated zp ZP_BYTE:14 [ animate::$1 ]
Allocated zp ZP_BYTE:15 [ animate::$2 ]
Allocated zp ZP_BYTE:16 [ animate::$5 ]
Allocated zp ZP_BYTE:17 [ animate::$6 ]
Allocated zp ZP_BYTE:18 [ animate::$7 ]
Allocated zp ZP_BYTE:19 [ animate::$10 ]
Allocated zp ZP_BYTE:20 [ animate::$11 ]
Allocated zp ZP_BYTE:21 [ animate::$12 ]
Allocated zp ZP_BYTE:22 [ animate::$15 ]
Allocated zp ZP_BYTE:23 [ animate::$16 ]
Allocated zp ZP_BYTE:24 [ animate::$17 ]
Allocated zp ZP_BYTE:25 [ animate::$20 ]
Allocated zp ZP_BYTE:26 [ animate::$21 ]
Allocated zp ZP_BYTE:27 [ animate::$22 ]
Allocated zp ZP_BYTE:28 [ animate::$25 ]
Allocated zp ZP_BYTE:29 [ animate::$26 ]
Allocated zp ZP_BYTE:30 [ animate::$27 ]
Allocated zp ZP_BYTE:31 [ animate::$30 ]
Allocated zp ZP_BYTE:32 [ animate::$31 ]
Allocated zp ZP_BYTE:33 [ findcol::x#0 ]
Allocated zp ZP_BYTE:34 [ findcol::y#0 ]
Allocated zp ZP_BYTE:35 [ findcol::return#0 ]
Allocated zp ZP_BYTE:36 [ render::col#0 ]
Allocated zp ZP_BYTE:37 [ findcol::xp#0 ]
Allocated zp ZP_BYTE:38 [ findcol::yp#0 ]
Allocated zp ZP_BYTE:39 [ findcol::$12 ]
Allocated zp ZP_BYTE:40 [ findcol::$14 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const numpoints = 6
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @5 [phi:@begin->@5]
b5_from_bbegin:
  jmp b5
//SEG4 @5
b5:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @5 to main [phi:@5->main]
main_from_b5:
  jsr main
//SEG7 [3] phi from @5 to @end [phi:@5->@end]
bend_from_b5:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call initscreen param-assignment [ ] ( main:2 [ ] )
  //SEG11 [91] phi from main to initscreen [phi:main->initscreen]
  initscreen_from_main:
    jsr initscreen
  //SEG12 [6] phi from main main::@5 to main::@1 [phi:main/main::@5->main::@1]
  b1_from_main:
  b1_from_b5:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call render param-assignment [ ] ( main:2 [ ] )
  //SEG15 [51] phi from main::@1 to render [phi:main::@1->render]
  render_from_b1:
    jsr render
  //SEG16 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  b4_from_b1:
    jmp b4
  //SEG17 main::@4
  b4:
  //SEG18 [9] call animate param-assignment [ ] ( main:2 [ ] )
    jsr animate
    jmp b5
  //SEG19 main::@5
  b5:
  //SEG20 [10] if(true) goto main::@1 [ ] ( main:2 [ ] ) -- true_then_la1 
    jmp b1_from_b5
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [11] return  [ ] ( main:2 [ ] )
    rts
}
//SEG23 animate
animate: {
    .label _0 = $d
    .label _1 = $e
    .label _2 = $f
    .label _5 = $10
    .label _6 = $11
    .label _7 = $12
    .label _10 = $13
    .label _11 = $14
    .label _12 = $15
    .label _15 = $16
    .label _16 = $17
    .label _17 = $18
    .label _20 = $19
    .label _21 = $1a
    .label _22 = $1b
    .label _25 = $1c
    .label _26 = $1d
    .label _27 = $1e
    .label _30 = $1f
    .label _31 = $20
  //SEG24 [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ] ( main:2::animate:9 [ animate::$0 ] ) -- zpby1=_deref_cowo1 
    lda XPOS+0
    sta _0
  //SEG25 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ] ( main:2::animate:9 [ animate::$1 ] ) -- zpby1=zpby2_plus_1 
    lda _0
    clc
    adc #1
    sta _1
  //SEG26 [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=zpby1 
    lda _1
    sta XPOS+0
  //SEG27 [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ] ( main:2::animate:9 [ animate::$2 ] ) -- zpby1=_deref_cowo1 
    lda XPOS+0
    sta _2
  //SEG28 [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ] ( main:2::animate:9 [ ] ) -- zpby1_neq_coby1_then_la1 
    lda _2
    cmp #$28
    bne b1
    jmp b7
  //SEG29 animate::@7
  b7:
  //SEG30 [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta XPOS+0
    jmp b1
  //SEG31 animate::@1
  b1:
  //SEG32 [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ] ( main:2::animate:9 [ animate::$5 ] ) -- zpby1=_deref_cowo1 
    lda YPOS+0
    sta _5
  //SEG33 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ] ( main:2::animate:9 [ animate::$6 ] ) -- zpby1=zpby2_plus_1 
    lda _5
    clc
    adc #1
    sta _6
  //SEG34 [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=zpby1 
    lda _6
    sta YPOS+0
  //SEG35 [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ] ( main:2::animate:9 [ animate::$7 ] ) -- zpby1=_deref_cowo1 
    lda YPOS+0
    sta _7
  //SEG36 [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ] ( main:2::animate:9 [ ] ) -- zpby1_neq_coby1_then_la1 
    lda _7
    cmp #$19
    bne b2
    jmp b8
  //SEG37 animate::@8
  b8:
  //SEG38 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+0
    jmp b2
  //SEG39 animate::@2
  b2:
  //SEG40 [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ] ( main:2::animate:9 [ animate::$10 ] ) -- zpby1=_deref_cowo1 
    lda XPOS+1
    sta _10
  //SEG41 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ] ( main:2::animate:9 [ animate::$11 ] ) -- zpby1=zpby2_minus_1 
    lda _10
    sec
    sbc #1
    sta _11
  //SEG42 [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=zpby1 
    lda _11
    sta XPOS+1
  //SEG43 [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ] ( main:2::animate:9 [ animate::$12 ] ) -- zpby1=_deref_cowo1 
    lda XPOS+1
    sta _12
  //SEG44 [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ] ( main:2::animate:9 [ ] ) -- zpby1_neq_coby1_then_la1 
    lda _12
    cmp #$ff
    bne b3
    jmp b9
  //SEG45 animate::@9
  b9:
  //SEG46 [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$28
    sta XPOS+1
    jmp b3
  //SEG47 animate::@3
  b3:
  //SEG48 [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] ) -- zpby1=_deref_cowo1 
    lda YPOS+2
    sta _15
  //SEG49 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ] ( main:2::animate:9 [ animate::$16 ] ) -- zpby1=zpby2_plus_1 
    lda _15
    clc
    adc #1
    sta _16
  //SEG50 [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=zpby1 
    lda _16
    sta YPOS+2
  //SEG51 [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ] ( main:2::animate:9 [ animate::$17 ] ) -- zpby1=_deref_cowo1 
    lda YPOS+2
    sta _17
  //SEG52 [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ] ( main:2::animate:9 [ ] ) -- zpby1_neq_coby1_then_la1 
    lda _17
    cmp #$19
    bne b4
    jmp b10
  //SEG53 animate::@10
  b10:
  //SEG54 [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+2
    jmp b4
  //SEG55 animate::@4
  b4:
  //SEG56 [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ] ( main:2::animate:9 [ animate::$20 ] ) -- zpby1=_deref_cowo1 
    lda YPOS+3
    sta _20
  //SEG57 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ] ( main:2::animate:9 [ animate::$21 ] ) -- zpby1=zpby2_minus_1 
    lda _20
    sec
    sbc #1
    sta _21
  //SEG58 [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=zpby1 
    lda _21
    sta YPOS+3
  //SEG59 [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ] ( main:2::animate:9 [ animate::$22 ] ) -- zpby1=_deref_cowo1 
    lda YPOS+3
    sta _22
  //SEG60 [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- zpby1_neq_coby1_then_la1 
    lda _22
    cmp #$ff
    bne breturn
    jmp b11
  //SEG61 animate::@11
  b11:
  //SEG62 [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG63 [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ] ( main:2::animate:9 [ animate::$25 ] ) -- zpby1=_deref_cowo1 
    lda XPOS+3
    sta _25
  //SEG64 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] ) -- zpby1=zpby2_plus_coby1 
    lda _25
    clc
    adc #7
    sta _26
  //SEG65 [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=zpby1 
    lda _26
    sta XPOS+3
  //SEG66 [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ] ( main:2::animate:9 [ animate::$27 ] ) -- zpby1=_deref_cowo1 
    lda XPOS+3
    sta _27
  //SEG67 [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- zpby1_lt_coby1_then_la1 
    lda _27
    cmp #$28
    bcc breturn
    jmp b12
  //SEG68 animate::@12
  b12:
  //SEG69 [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ] ( main:2::animate:9 [ animate::$30 ] ) -- zpby1=_deref_cowo1 
    lda XPOS+3
    sta _30
  //SEG70 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] ) -- zpby1=zpby2_minus_coby1 
    lda _30
    sec
    sbc #$28
    sta _31
  //SEG71 [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=zpby1 
    lda _31
    sta XPOS+3
    jmp breturn
  //SEG72 animate::@return
  breturn:
  //SEG73 [50] return  [ ] ( main:2::animate:9 [ ] )
    rts
}
//SEG74 render
render: {
    .label col = $24
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG75 [52] phi from render to render::@1 [phi:render->render::@1]
  b1_from_render:
  //SEG76 [52] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG77 [52] phi (byte) render::y#4 = (byte/signed byte/word/signed word) 0 [phi:render->render::@1#1] -- zpby1=coby1 
    lda #0
    sta y
    jmp b1
  //SEG78 [52] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  b1_from_b3:
  //SEG79 [52] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG80 [52] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
    jmp b1
  //SEG81 render::@1
  b1:
  //SEG82 [53] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  b2_from_b1:
  //SEG83 [53] phi (byte) render::x#2 = (byte/signed byte/word/signed word) 0 [phi:render::@1->render::@2#0] -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG84 [53] phi from render::@5 to render::@2 [phi:render::@5->render::@2]
  b2_from_b5:
  //SEG85 [53] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@5->render::@2#0] -- register_copy 
    jmp b2
  //SEG86 render::@2
  b2:
  //SEG87 [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] ) -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG88 [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] ) -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG89 [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  //SEG90 [66] phi from render::@2 to findcol [phi:render::@2->findcol]
  findcol_from_b2:
    jsr findcol
  //SEG91 [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ) -- zpby1=zpby2 
    lda findcol.return_2
    sta findcol.return
    jmp b5
  //SEG92 render::@5
  b5:
  //SEG93 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] ) -- zpby1=zpby2 
    lda findcol.return
    sta col
  //SEG94 [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 ] ) -- zpptrby1_derefidx_zpby1=zpby2 
    lda col
    ldy x
    sta (colline),y
  //SEG95 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1=_inc_zpby1 
    inc x
  //SEG96 [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2_from_b5
    jmp b3
  //SEG97 render::@3
  b3:
  //SEG98 [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG99 [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1=_inc_zpby1 
    inc y
  //SEG100 [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1_from_b3
    jmp breturn
  //SEG101 render::@return
  breturn:
  //SEG102 [65] return  [ ] ( main:2::render:7 [ ] )
    rts
}
//SEG103 findcol
findcol: {
    .label _12 = $27
    .label _14 = $28
    .label x = $21
    .label y = $22
    .label return = $23
    .label xp = $25
    .label yp = $26
    .label return_2 = 8
    .label diff = 9
    .label diff_2 = $a
    .label diff_3 = $a
    .label i = 6
    .label mincol = 8
    .label diff_6 = $a
    .label mindiff = 7
    .label mindiff_11 = $a
    .label mindiff_14 = $a
  //SEG104 [67] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  b1_from_findcol:
  //SEG105 [67] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#0] -- zpby1=coby1 
    lda #0
    sta mincol
  //SEG106 [67] phi (byte) findcol::mindiff#10 = (byte/word/signed word) 255 [phi:findcol->findcol::@1#1] -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG107 [67] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#2] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG108 findcol::@1
  b1:
  //SEG109 [68] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ) -- zpby1=cowo1_derefidx_zpby2 
    ldx i
    lda XPOS,x
    sta xp
  //SEG110 [69] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1=cowo1_derefidx_zpby2 
    ldx i
    lda YPOS,x
    sta yp
  //SEG111 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
    jmp b9
  //SEG112 findcol::@9
  b9:
  //SEG113 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG114 [72] phi from findcol::@9 to findcol::@return [phi:findcol::@9->findcol::@return]
  breturn_from_b9:
  //SEG115 [72] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word) 0 [phi:findcol::@9->findcol::@return#0] -- zpby1=coby1 
    lda #0
    sta return_2
    jmp breturn
  //SEG116 findcol::@return
  breturn:
  //SEG117 [73] return  [ findcol::return#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
    rts
  //SEG118 findcol::@2
  b2:
  //SEG119 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
    jmp b12
  //SEG120 findcol::@12
  b12:
  //SEG121 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) -- zpby1=zpby2_minus_zpby3 
    lda xp
    sec
    sbc x
    sta diff
  //SEG122 [76] phi from findcol::@12 findcol::@4 to findcol::@5 [phi:findcol::@12/findcol::@4->findcol::@5]
  b5_from_b12:
  b5_from_b4:
  //SEG123 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 [phi:findcol::@12/findcol::@4->findcol::@5#0] -- register_copy 
    jmp b5
  //SEG124 findcol::@5
  b5:
  //SEG125 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ) -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
    jmp b14
  //SEG126 findcol::@14
  b14:
  //SEG127 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ) -- zpby1=zpby2_minus_zpby3 
    lda yp
    sec
    sbc y
    sta _12
  //SEG128 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) -- zpby1=zpby2_plus_zpby3 
    lda diff
    clc
    adc _12
    sta diff_3
  //SEG129 [80] phi from findcol::@14 findcol::@6 to findcol::@7 [phi:findcol::@14/findcol::@6->findcol::@7]
  b7_from_b14:
  b7_from_b6:
  //SEG130 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 [phi:findcol::@14/findcol::@6->findcol::@7#0] -- register_copy 
    jmp b7
  //SEG131 findcol::@7
  b7:
  //SEG132 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ) -- zpby1_ge_zpby2_then_la1 
    lda diff_6
    cmp mindiff
    bcs b21
    jmp b16
  //SEG133 findcol::@16
  b16:
  //SEG134 [82] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ) -- zpby1=cowo1_derefidx_zpby2 
    ldx i
    lda COLS,x
    sta mincol
  //SEG135 [83] phi from findcol::@16 findcol::@21 to findcol::@8 [phi:findcol::@16/findcol::@21->findcol::@8]
  b8_from_b16:
  b8_from_b21:
  //SEG136 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 [phi:findcol::@16/findcol::@21->findcol::@8#0] -- register_copy 
  //SEG137 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@16/findcol::@21->findcol::@8#1] -- register_copy 
    jmp b8
  //SEG138 findcol::@8
  b8:
  //SEG139 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- zpby1=_inc_zpby1 
    inc i
  //SEG140 [85] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- zpby1_lt_coby1_then_la1 
    lda i
    cmp #numpoints
    bcc b19
  //SEG141 [72] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  breturn_from_b8:
  //SEG142 [72] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@8->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG143 findcol::@19
  b19:
  //SEG144 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ) -- zpby1=zpby2 
    lda mindiff_11
    sta mindiff
  //SEG145 [67] phi from findcol::@19 to findcol::@1 [phi:findcol::@19->findcol::@1]
  b1_from_b19:
  //SEG146 [67] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@19->findcol::@1#0] -- register_copy 
  //SEG147 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@19->findcol::@1#1] -- register_copy 
  //SEG148 [67] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@19->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG149 findcol::@21
  b21:
  //SEG150 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ) -- zpby1=zpby2 
    lda mindiff
    sta mindiff_14
    jmp b8_from_b21
  //SEG151 findcol::@6
  b6:
  //SEG152 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ) -- zpby1=zpby2_minus_zpby3 
    lda y
    sec
    sbc yp
    sta _14
  //SEG153 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ) -- zpby1=zpby2_plus_zpby3 
    lda diff
    clc
    adc _14
    sta diff_2
    jmp b7_from_b6
  //SEG154 findcol::@4
  b4:
  //SEG155 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ) -- zpby1=zpby2_minus_zpby3 
    lda x
    sec
    sbc xp
    sta diff
    jmp b5_from_b4
}
//SEG156 initscreen
initscreen: {
    .label screen = $b
  //SEG157 [92] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  b1_from_initscreen:
  //SEG158 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG159 [92] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  b1_from_b1:
  //SEG160 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
    jmp b1
  //SEG161 initscreen::@1
  b1:
  //SEG162 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) -- _deref_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG163 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG164 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG165 initscreen::@return
  breturn:
  //SEG166 [96] return  [ ] ( main:2::initscreen:5 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:13 [ animate::$0 ] has ALU potential.
Equivalence Class zp ZP_BYTE:16 [ animate::$5 ] has ALU potential.
Equivalence Class zp ZP_BYTE:22 [ animate::$15 ] has ALU potential.
Equivalence Class zp ZP_BYTE:28 [ animate::$25 ] has ALU potential.
Statement [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] ) always clobbers reg byte a 
Statement [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] ) always clobbers reg byte a 
Statement [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ render::y#4 render::y#1 ]
Statement [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ render::x#2 render::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ findcol::x#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:34 [ findcol::y#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ findcol::i#10 findcol::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:38 [ findcol::yp#0 ]
Statement [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
Statement [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) always clobbers reg byte a 
Statement [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ) always clobbers reg byte a 
Statement [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ) always clobbers reg byte a 
Statement [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ) always clobbers reg byte a 
Statement [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) always clobbers reg byte a reg byte y 
Statement [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) always clobbers reg byte a 
Statement [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] ) always clobbers reg byte a 
Statement [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] ) always clobbers reg byte a 
Statement [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) always clobbers reg byte a 
Statement [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) always clobbers reg byte a 
Statement [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ) always clobbers reg byte a 
Statement [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) always clobbers reg byte a 
Statement [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ) always clobbers reg byte a 
Statement [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ) always clobbers reg byte a 
Statement [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ) always clobbers reg byte a 
Statement [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) always clobbers reg byte a reg byte y 
Statement [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ render::y#4 render::y#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:3 [ render::colline#5 render::colline#1 ] : zp ZP_PTR_BYTE:3 , 
Potential registers zp ZP_BYTE:5 [ render::x#2 render::x#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ findcol::i#10 findcol::i#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] : zp ZP_PTR_BYTE:11 , 
Potential registers zp ZP_BYTE:13 [ animate::$0 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:14 [ animate::$1 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ animate::$2 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ animate::$5 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:17 [ animate::$6 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ animate::$7 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ animate::$10 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ animate::$11 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ animate::$12 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ animate::$15 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:23 [ animate::$16 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ animate::$17 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ animate::$20 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ animate::$21 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ animate::$22 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ animate::$25 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:29 [ animate::$26 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ animate::$27 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ animate::$30 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ animate::$31 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ findcol::x#0 ] : zp ZP_BYTE:33 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ findcol::y#0 ] : zp ZP_BYTE:34 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ findcol::return#0 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ render::col#0 ] : zp ZP_BYTE:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ findcol::xp#0 ] : zp ZP_BYTE:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ findcol::yp#0 ] : zp ZP_BYTE:38 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ findcol::$12 ] : zp ZP_BYTE:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ findcol::$14 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [findcol] 83,341.67: zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ] 50,005: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] 34,846.92: zp ZP_BYTE:8 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ] 21,877.19: zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] 20,002: zp ZP_BYTE:39 [ findcol::$12 ] 20,002: zp ZP_BYTE:40 [ findcol::$14 ] 12,632.84: zp ZP_BYTE:6 [ findcol::i#10 findcol::i#1 ] 10,001: zp ZP_BYTE:37 [ findcol::xp#0 ] 6,250.62: zp ZP_BYTE:38 [ findcol::yp#0 ] 2,002: zp ZP_BYTE:35 [ findcol::return#0 ] 1,708.54: zp ZP_BYTE:34 [ findcol::y#0 ] 1,640.2: zp ZP_BYTE:33 [ findcol::x#0 ] 
Uplift Scope [render] 2,073.5: zp ZP_BYTE:5 [ render::x#2 render::x#1 ] 2,002: zp ZP_BYTE:36 [ render::col#0 ] 260.86: zp ZP_BYTE:2 [ render::y#4 render::y#1 ] 187.63: zp ZP_PTR_BYTE:3 [ render::colline#5 render::colline#1 ] 
Uplift Scope [animate] 4: zp ZP_BYTE:13 [ animate::$0 ] 4: zp ZP_BYTE:14 [ animate::$1 ] 4: zp ZP_BYTE:15 [ animate::$2 ] 4: zp ZP_BYTE:16 [ animate::$5 ] 4: zp ZP_BYTE:17 [ animate::$6 ] 4: zp ZP_BYTE:18 [ animate::$7 ] 4: zp ZP_BYTE:19 [ animate::$10 ] 4: zp ZP_BYTE:20 [ animate::$11 ] 4: zp ZP_BYTE:21 [ animate::$12 ] 4: zp ZP_BYTE:22 [ animate::$15 ] 4: zp ZP_BYTE:23 [ animate::$16 ] 4: zp ZP_BYTE:24 [ animate::$17 ] 4: zp ZP_BYTE:25 [ animate::$20 ] 4: zp ZP_BYTE:26 [ animate::$21 ] 4: zp ZP_BYTE:27 [ animate::$22 ] 4: zp ZP_BYTE:28 [ animate::$25 ] 4: zp ZP_BYTE:29 [ animate::$26 ] 4: zp ZP_BYTE:30 [ animate::$27 ] 4: zp ZP_BYTE:31 [ animate::$30 ] 4: zp ZP_BYTE:32 [ animate::$31 ] 
Uplift Scope [initscreen] 33: zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplift attempts [findcol] 10000/2239488 (limiting to 10000)
Uplifting [findcol] best 1714313 combination reg byte a [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ] zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte y [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ] zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] reg byte a [ findcol::$12 ] reg byte a [ findcol::$14 ] reg byte x [ findcol::i#10 findcol::i#1 ] zp ZP_BYTE:37 [ findcol::xp#0 ] zp ZP_BYTE:38 [ findcol::yp#0 ] zp ZP_BYTE:35 [ findcol::return#0 ] zp ZP_BYTE:34 [ findcol::y#0 ] zp ZP_BYTE:33 [ findcol::x#0 ] 
Limited combination testing to 10000 combinations of 2239488 possible.
Uplifting [render] best 1708313 combination zp ZP_BYTE:5 [ render::x#2 render::x#1 ] reg byte a [ render::col#0 ] zp ZP_BYTE:2 [ render::y#4 render::y#1 ] zp ZP_PTR_BYTE:3 [ render::colline#5 render::colline#1 ] 
Uplifting [initscreen] best 1708313 combination zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplifting [main] best 1708313 combination 
Uplifting [] best 1708313 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
Uplifting [findcol] best 1708313 combination zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Uplifting [findcol] best 1708313 combination zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ findcol::xp#0 ]
Uplifting [findcol] best 1708313 combination zp ZP_BYTE:37 [ findcol::xp#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:38 [ findcol::yp#0 ]
Uplifting [findcol] best 1708313 combination zp ZP_BYTE:38 [ findcol::yp#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ render::x#2 render::x#1 ]
Uplifting [render] best 1708313 combination zp ZP_BYTE:5 [ render::x#2 render::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ findcol::return#0 ]
Uplifting [findcol] best 1704313 combination reg byte a [ findcol::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ findcol::y#0 ]
Uplifting [findcol] best 1704313 combination zp ZP_BYTE:34 [ findcol::y#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ findcol::x#0 ]
Uplifting [findcol] best 1704313 combination zp ZP_BYTE:33 [ findcol::x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ render::y#4 render::y#1 ]
Uplifting [render] best 1704313 combination zp ZP_BYTE:2 [ render::y#4 render::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ animate::$0 ]
Uplifting [animate] best 1704307 combination reg byte a [ animate::$0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ animate::$1 ]
Uplifting [animate] best 1704301 combination reg byte a [ animate::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ animate::$2 ]
Uplifting [animate] best 1704295 combination reg byte a [ animate::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ animate::$5 ]
Uplifting [animate] best 1704289 combination reg byte a [ animate::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ animate::$6 ]
Uplifting [animate] best 1704283 combination reg byte a [ animate::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ animate::$7 ]
Uplifting [animate] best 1704277 combination reg byte a [ animate::$7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ animate::$10 ]
Uplifting [animate] best 1704271 combination reg byte x [ animate::$10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ animate::$11 ]
Uplifting [animate] best 1704263 combination reg byte x [ animate::$11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ animate::$12 ]
Uplifting [animate] best 1704257 combination reg byte a [ animate::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ animate::$15 ]
Uplifting [animate] best 1704251 combination reg byte a [ animate::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:23 [ animate::$16 ]
Uplifting [animate] best 1704245 combination reg byte a [ animate::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ animate::$17 ]
Uplifting [animate] best 1704239 combination reg byte a [ animate::$17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ animate::$20 ]
Uplifting [animate] best 1704233 combination reg byte x [ animate::$20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ animate::$21 ]
Uplifting [animate] best 1704225 combination reg byte x [ animate::$21 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ animate::$22 ]
Uplifting [animate] best 1704219 combination reg byte a [ animate::$22 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ animate::$25 ]
Uplifting [animate] best 1704213 combination reg byte a [ animate::$25 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ animate::$26 ]
Uplifting [animate] best 1704207 combination reg byte a [ animate::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:30 [ animate::$27 ]
Uplifting [animate] best 1704201 combination reg byte a [ animate::$27 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ animate::$30 ]
Uplifting [animate] best 1704195 combination reg byte a [ animate::$30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ animate::$31 ]
Uplifting [animate] best 1704189 combination reg byte a [ animate::$31 ] 
Coalescing zero page register [ zp ZP_BYTE:2 [ render::y#4 render::y#1 ] ] with [ zp ZP_BYTE:34 [ findcol::y#0 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:3 [ render::colline#5 render::colline#1 ] ] with [ zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ render::x#2 render::x#1 ] ] with [ zp ZP_BYTE:33 [ findcol::x#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] ] with [ zp ZP_BYTE:37 [ findcol::xp#0 ] ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:6 [ findcol::mindiff#10 findcol::mindiff#13 ]
Allocated (was zp ZP_BYTE:9) zp ZP_BYTE:7 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 findcol::xp#0 ]
Allocated (was zp ZP_BYTE:38) zp ZP_BYTE:8 [ findcol::yp#0 ]
Removing instruction jmp b5
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b8
Removing instruction jmp b2
Removing instruction jmp b9
Removing instruction jmp b3
Removing instruction jmp b10
Removing instruction jmp b4
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp b12
Removing instruction jmp b5
Removing instruction jmp b14
Removing instruction jmp b7
Removing instruction jmp b16
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const numpoints = 6
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @5 [phi:@begin->@5]
b5_from_bbegin:
//SEG4 @5
b5:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @5 to main [phi:@5->main]
main_from_b5:
  jsr main
//SEG7 [3] phi from @5 to @end [phi:@5->@end]
bend_from_b5:
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call initscreen param-assignment [ ] ( main:2 [ ] )
  //SEG11 [91] phi from main to initscreen [phi:main->initscreen]
  initscreen_from_main:
    jsr initscreen
  //SEG12 [6] phi from main main::@5 to main::@1 [phi:main/main::@5->main::@1]
  b1_from_main:
  b1_from_b5:
  //SEG13 main::@1
  b1:
  //SEG14 [7] call render param-assignment [ ] ( main:2 [ ] )
  //SEG15 [51] phi from main::@1 to render [phi:main::@1->render]
  render_from_b1:
    jsr render
  //SEG16 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  b4_from_b1:
  //SEG17 main::@4
  b4:
  //SEG18 [9] call animate param-assignment [ ] ( main:2 [ ] )
    jsr animate
  //SEG19 main::@5
  b5:
  //SEG20 [10] if(true) goto main::@1 [ ] ( main:2 [ ] ) -- true_then_la1 
    jmp b1_from_b5
  //SEG21 main::@return
  breturn:
  //SEG22 [11] return  [ ] ( main:2 [ ] )
    rts
}
//SEG23 animate
animate: {
  //SEG24 [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ] ( main:2::animate:9 [ animate::$0 ] ) -- aby=_deref_cowo1 
    lda XPOS+0
  //SEG25 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ] ( main:2::animate:9 [ animate::$1 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG26 [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+0
  //SEG27 [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ] ( main:2::animate:9 [ animate::$2 ] ) -- aby=_deref_cowo1 
    lda XPOS+0
  //SEG28 [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG29 animate::@7
  b7:
  //SEG30 [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG31 animate::@1
  b1:
  //SEG32 [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ] ( main:2::animate:9 [ animate::$5 ] ) -- aby=_deref_cowo1 
    lda YPOS+0
  //SEG33 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ] ( main:2::animate:9 [ animate::$6 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG34 [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+0
  //SEG35 [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ] ( main:2::animate:9 [ animate::$7 ] ) -- aby=_deref_cowo1 
    lda YPOS+0
  //SEG36 [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG37 animate::@8
  b8:
  //SEG38 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG39 animate::@2
  b2:
  //SEG40 [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ] ( main:2::animate:9 [ animate::$10 ] ) -- xby=_deref_cowo1 
    ldx XPOS+1
  //SEG41 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ] ( main:2::animate:9 [ animate::$11 ] ) -- xby=xby_minus_1 
    dex
  //SEG42 [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx XPOS+1
  //SEG43 [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ] ( main:2::animate:9 [ animate::$12 ] ) -- aby=_deref_cowo1 
    lda XPOS+1
  //SEG44 [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG45 animate::@9
  b9:
  //SEG46 [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG47 animate::@3
  b3:
  //SEG48 [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] ) -- aby=_deref_cowo1 
    lda YPOS+2
  //SEG49 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ] ( main:2::animate:9 [ animate::$16 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG50 [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+2
  //SEG51 [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ] ( main:2::animate:9 [ animate::$17 ] ) -- aby=_deref_cowo1 
    lda YPOS+2
  //SEG52 [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG53 animate::@10
  b10:
  //SEG54 [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG55 animate::@4
  b4:
  //SEG56 [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ] ( main:2::animate:9 [ animate::$20 ] ) -- xby=_deref_cowo1 
    ldx YPOS+3
  //SEG57 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ] ( main:2::animate:9 [ animate::$21 ] ) -- xby=xby_minus_1 
    dex
  //SEG58 [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx YPOS+3
  //SEG59 [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ] ( main:2::animate:9 [ animate::$22 ] ) -- aby=_deref_cowo1 
    lda YPOS+3
  //SEG60 [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG61 animate::@11
  b11:
  //SEG62 [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG63 [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ] ( main:2::animate:9 [ animate::$25 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG64 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] ) -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG65 [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG66 [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ] ( main:2::animate:9 [ animate::$27 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG67 [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG68 animate::@12
  b12:
  //SEG69 [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ] ( main:2::animate:9 [ animate::$30 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG70 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] ) -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG71 [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG72 animate::@return
  breturn:
  //SEG73 [50] return  [ ] ( main:2::animate:9 [ ] )
    rts
}
//SEG74 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG75 [52] phi from render to render::@1 [phi:render->render::@1]
  b1_from_render:
  //SEG76 [52] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG77 [52] phi (byte) render::y#4 = (byte/signed byte/word/signed word) 0 [phi:render->render::@1#1] -- zpby1=coby1 
    lda #0
    sta y
    jmp b1
  //SEG78 [52] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  b1_from_b3:
  //SEG79 [52] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG80 [52] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
  //SEG81 render::@1
  b1:
  //SEG82 [53] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  b2_from_b1:
  //SEG83 [53] phi (byte) render::x#2 = (byte/signed byte/word/signed word) 0 [phi:render::@1->render::@2#0] -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG84 [53] phi from render::@5 to render::@2 [phi:render::@5->render::@2]
  b2_from_b5:
  //SEG85 [53] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@5->render::@2#0] -- register_copy 
  //SEG86 render::@2
  b2:
  //SEG87 [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] )
    // (byte) findcol::x#0 = (byte) render::x#2  // register copy zp ZP_BYTE:5
  //SEG88 [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] )
    // (byte) findcol::y#0 = (byte) render::y#4  // register copy zp ZP_BYTE:2
  //SEG89 [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  //SEG90 [66] phi from render::@2 to findcol [phi:render::@2->findcol]
  findcol_from_b2:
    jsr findcol
  //SEG91 [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ) -- aby=yby 
    tya
  //SEG92 render::@5
  b5:
  //SEG93 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] )
    // (byte) render::col#0 = (byte) findcol::return#0  // register copy reg byte a
  //SEG94 [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 ] ) -- zpptrby1_derefidx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG95 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1=_inc_zpby1 
    inc x
  //SEG96 [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2_from_b5
  //SEG97 render::@3
  b3:
  //SEG98 [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG99 [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1=_inc_zpby1 
    inc y
  //SEG100 [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1_from_b3
  //SEG101 render::@return
  breturn:
  //SEG102 [65] return  [ ] ( main:2::render:7 [ ] )
    rts
}
//SEG103 findcol
findcol: {
    .label x = 5
    .label y = 2
    .label xp = 7
    .label yp = 8
    .label diff = 7
    .label mindiff = 6
  //SEG104 [67] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  b1_from_findcol:
  //SEG105 [67] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#0] -- yby=coby1 
    ldy #0
  //SEG106 [67] phi (byte) findcol::mindiff#10 = (byte/word/signed word) 255 [phi:findcol->findcol::@1#1] -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG107 [67] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#2] -- xby=coby1 
    ldx #0
  //SEG108 findcol::@1
  b1:
  //SEG109 [68] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda XPOS,x
    sta xp
  //SEG110 [69] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda YPOS,x
    sta yp
  //SEG111 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG112 findcol::@9
  b9:
  //SEG113 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG114 [72] phi from findcol::@9 to findcol::@return [phi:findcol::@9->findcol::@return]
  breturn_from_b9:
  //SEG115 [72] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word) 0 [phi:findcol::@9->findcol::@return#0] -- yby=coby1 
    ldy #0
  //SEG116 findcol::@return
  breturn:
  //SEG117 [73] return  [ findcol::return#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
    rts
  //SEG118 findcol::@2
  b2:
  //SEG119 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG120 findcol::@12
  b12:
  //SEG121 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG122 [76] phi from findcol::@12 findcol::@4 to findcol::@5 [phi:findcol::@12/findcol::@4->findcol::@5]
  b5_from_b12:
  b5_from_b4:
  //SEG123 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 [phi:findcol::@12/findcol::@4->findcol::@5#0] -- register_copy 
  //SEG124 findcol::@5
  b5:
  //SEG125 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ) -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG126 findcol::@14
  b14:
  //SEG127 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ) -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG128 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG129 [80] phi from findcol::@14 findcol::@6 to findcol::@7 [phi:findcol::@14/findcol::@6->findcol::@7]
  b7_from_b14:
  b7_from_b6:
  //SEG130 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 [phi:findcol::@14/findcol::@6->findcol::@7#0] -- register_copy 
  //SEG131 findcol::@7
  b7:
  //SEG132 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ) -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG133 findcol::@16
  b16:
  //SEG134 [82] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ) -- yby=cowo1_derefidx_xby 
    ldy COLS,x
  //SEG135 [83] phi from findcol::@16 findcol::@21 to findcol::@8 [phi:findcol::@16/findcol::@21->findcol::@8]
  b8_from_b16:
  b8_from_b21:
  //SEG136 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 [phi:findcol::@16/findcol::@21->findcol::@8#0] -- register_copy 
  //SEG137 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@16/findcol::@21->findcol::@8#1] -- register_copy 
  //SEG138 findcol::@8
  b8:
  //SEG139 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby=_inc_xby 
    inx
  //SEG140 [85] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby_lt_coby1_then_la1 
    cpx #numpoints
    bcc b19
  //SEG141 [72] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  breturn_from_b8:
  //SEG142 [72] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@8->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG143 findcol::@19
  b19:
  //SEG144 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ) -- zpby1=aby 
    sta mindiff
  //SEG145 [67] phi from findcol::@19 to findcol::@1 [phi:findcol::@19->findcol::@1]
  b1_from_b19:
  //SEG146 [67] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@19->findcol::@1#0] -- register_copy 
  //SEG147 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@19->findcol::@1#1] -- register_copy 
  //SEG148 [67] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@19->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG149 findcol::@21
  b21:
  //SEG150 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ) -- aby=zpby1 
    lda mindiff
    jmp b8_from_b21
  //SEG151 findcol::@6
  b6:
  //SEG152 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ) -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG153 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7_from_b6
  //SEG154 findcol::@4
  b4:
  //SEG155 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ) -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5_from_b4
}
//SEG156 initscreen
initscreen: {
    .label screen = 3
  //SEG157 [92] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  b1_from_initscreen:
  //SEG158 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG159 [92] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  b1_from_b1:
  //SEG160 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
  //SEG161 initscreen::@1
  b1:
  //SEG162 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) -- _deref_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG163 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG164 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1_from_b1
  !:
  //SEG165 initscreen::@return
  breturn:
  //SEG166 [96] return  [ ] ( main:2::initscreen:5 [ ] )
    rts
}

Removing instruction lda XPOS+0
Removing instruction lda YPOS+0
Replacing instruction lda XPOS+1 with TXA
Removing instruction lda YPOS+2
Replacing instruction lda YPOS+3 with TXA
Removing instruction lda XPOS+3
Succesful ASM optimization Pass5UnnecesaryLoadElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const numpoints = 6
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @5 [phi:@begin->@5]
b5_from_bbegin:
//SEG4 @5
b5:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @5 to main [phi:@5->main]
main_from_b5:
  jsr main
//SEG7 [3] phi from @5 to @end [phi:@5->@end]
bend_from_b5:
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call initscreen param-assignment [ ] ( main:2 [ ] )
  //SEG11 [91] phi from main to initscreen [phi:main->initscreen]
  initscreen_from_main:
    jsr initscreen
  //SEG12 [6] phi from main main::@5 to main::@1 [phi:main/main::@5->main::@1]
  b1_from_main:
  b1_from_b5:
  //SEG13 main::@1
  b1:
  //SEG14 [7] call render param-assignment [ ] ( main:2 [ ] )
  //SEG15 [51] phi from main::@1 to render [phi:main::@1->render]
  render_from_b1:
    jsr render
  //SEG16 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  b4_from_b1:
  //SEG17 main::@4
  b4:
  //SEG18 [9] call animate param-assignment [ ] ( main:2 [ ] )
    jsr animate
  //SEG19 main::@5
  b5:
  //SEG20 [10] if(true) goto main::@1 [ ] ( main:2 [ ] ) -- true_then_la1 
    jmp b1_from_b5
  //SEG21 main::@return
  breturn:
  //SEG22 [11] return  [ ] ( main:2 [ ] )
    rts
}
//SEG23 animate
animate: {
  //SEG24 [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ] ( main:2::animate:9 [ animate::$0 ] ) -- aby=_deref_cowo1 
    lda XPOS+0
  //SEG25 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ] ( main:2::animate:9 [ animate::$1 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG26 [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+0
  //SEG27 [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ] ( main:2::animate:9 [ animate::$2 ] ) -- aby=_deref_cowo1 
  //SEG28 [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG29 animate::@7
  b7:
  //SEG30 [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG31 animate::@1
  b1:
  //SEG32 [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ] ( main:2::animate:9 [ animate::$5 ] ) -- aby=_deref_cowo1 
    lda YPOS+0
  //SEG33 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ] ( main:2::animate:9 [ animate::$6 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG34 [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+0
  //SEG35 [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ] ( main:2::animate:9 [ animate::$7 ] ) -- aby=_deref_cowo1 
  //SEG36 [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG37 animate::@8
  b8:
  //SEG38 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG39 animate::@2
  b2:
  //SEG40 [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ] ( main:2::animate:9 [ animate::$10 ] ) -- xby=_deref_cowo1 
    ldx XPOS+1
  //SEG41 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ] ( main:2::animate:9 [ animate::$11 ] ) -- xby=xby_minus_1 
    dex
  //SEG42 [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx XPOS+1
  //SEG43 [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ] ( main:2::animate:9 [ animate::$12 ] ) -- aby=_deref_cowo1 
    txa
  //SEG44 [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG45 animate::@9
  b9:
  //SEG46 [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG47 animate::@3
  b3:
  //SEG48 [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] ) -- aby=_deref_cowo1 
    lda YPOS+2
  //SEG49 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ] ( main:2::animate:9 [ animate::$16 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG50 [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+2
  //SEG51 [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ] ( main:2::animate:9 [ animate::$17 ] ) -- aby=_deref_cowo1 
  //SEG52 [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG53 animate::@10
  b10:
  //SEG54 [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG55 animate::@4
  b4:
  //SEG56 [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ] ( main:2::animate:9 [ animate::$20 ] ) -- xby=_deref_cowo1 
    ldx YPOS+3
  //SEG57 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ] ( main:2::animate:9 [ animate::$21 ] ) -- xby=xby_minus_1 
    dex
  //SEG58 [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx YPOS+3
  //SEG59 [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ] ( main:2::animate:9 [ animate::$22 ] ) -- aby=_deref_cowo1 
    txa
  //SEG60 [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG61 animate::@11
  b11:
  //SEG62 [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG63 [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ] ( main:2::animate:9 [ animate::$25 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG64 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] ) -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG65 [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG66 [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ] ( main:2::animate:9 [ animate::$27 ] ) -- aby=_deref_cowo1 
  //SEG67 [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG68 animate::@12
  b12:
  //SEG69 [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ] ( main:2::animate:9 [ animate::$30 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG70 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] ) -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG71 [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG72 animate::@return
  breturn:
  //SEG73 [50] return  [ ] ( main:2::animate:9 [ ] )
    rts
}
//SEG74 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG75 [52] phi from render to render::@1 [phi:render->render::@1]
  b1_from_render:
  //SEG76 [52] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG77 [52] phi (byte) render::y#4 = (byte/signed byte/word/signed word) 0 [phi:render->render::@1#1] -- zpby1=coby1 
    lda #0
    sta y
    jmp b1
  //SEG78 [52] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  b1_from_b3:
  //SEG79 [52] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG80 [52] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
  //SEG81 render::@1
  b1:
  //SEG82 [53] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  b2_from_b1:
  //SEG83 [53] phi (byte) render::x#2 = (byte/signed byte/word/signed word) 0 [phi:render::@1->render::@2#0] -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG84 [53] phi from render::@5 to render::@2 [phi:render::@5->render::@2]
  b2_from_b5:
  //SEG85 [53] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@5->render::@2#0] -- register_copy 
  //SEG86 render::@2
  b2:
  //SEG87 [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] )
    // (byte) findcol::x#0 = (byte) render::x#2  // register copy zp ZP_BYTE:5
  //SEG88 [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] )
    // (byte) findcol::y#0 = (byte) render::y#4  // register copy zp ZP_BYTE:2
  //SEG89 [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  //SEG90 [66] phi from render::@2 to findcol [phi:render::@2->findcol]
  findcol_from_b2:
    jsr findcol
  //SEG91 [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ) -- aby=yby 
    tya
  //SEG92 render::@5
  b5:
  //SEG93 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] )
    // (byte) render::col#0 = (byte) findcol::return#0  // register copy reg byte a
  //SEG94 [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 ] ) -- zpptrby1_derefidx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG95 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1=_inc_zpby1 
    inc x
  //SEG96 [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2_from_b5
  //SEG97 render::@3
  b3:
  //SEG98 [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG99 [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1=_inc_zpby1 
    inc y
  //SEG100 [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1_from_b3
  //SEG101 render::@return
  breturn:
  //SEG102 [65] return  [ ] ( main:2::render:7 [ ] )
    rts
}
//SEG103 findcol
findcol: {
    .label x = 5
    .label y = 2
    .label xp = 7
    .label yp = 8
    .label diff = 7
    .label mindiff = 6
  //SEG104 [67] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  b1_from_findcol:
  //SEG105 [67] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#0] -- yby=coby1 
    ldy #0
  //SEG106 [67] phi (byte) findcol::mindiff#10 = (byte/word/signed word) 255 [phi:findcol->findcol::@1#1] -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG107 [67] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#2] -- xby=coby1 
    ldx #0
  //SEG108 findcol::@1
  b1:
  //SEG109 [68] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda XPOS,x
    sta xp
  //SEG110 [69] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda YPOS,x
    sta yp
  //SEG111 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG112 findcol::@9
  b9:
  //SEG113 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG114 [72] phi from findcol::@9 to findcol::@return [phi:findcol::@9->findcol::@return]
  breturn_from_b9:
  //SEG115 [72] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word) 0 [phi:findcol::@9->findcol::@return#0] -- yby=coby1 
    ldy #0
  //SEG116 findcol::@return
  breturn:
  //SEG117 [73] return  [ findcol::return#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
    rts
  //SEG118 findcol::@2
  b2:
  //SEG119 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG120 findcol::@12
  b12:
  //SEG121 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG122 [76] phi from findcol::@12 findcol::@4 to findcol::@5 [phi:findcol::@12/findcol::@4->findcol::@5]
  b5_from_b12:
  b5_from_b4:
  //SEG123 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 [phi:findcol::@12/findcol::@4->findcol::@5#0] -- register_copy 
  //SEG124 findcol::@5
  b5:
  //SEG125 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ) -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG126 findcol::@14
  b14:
  //SEG127 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ) -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG128 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG129 [80] phi from findcol::@14 findcol::@6 to findcol::@7 [phi:findcol::@14/findcol::@6->findcol::@7]
  b7_from_b14:
  b7_from_b6:
  //SEG130 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 [phi:findcol::@14/findcol::@6->findcol::@7#0] -- register_copy 
  //SEG131 findcol::@7
  b7:
  //SEG132 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ) -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG133 findcol::@16
  b16:
  //SEG134 [82] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ) -- yby=cowo1_derefidx_xby 
    ldy COLS,x
  //SEG135 [83] phi from findcol::@16 findcol::@21 to findcol::@8 [phi:findcol::@16/findcol::@21->findcol::@8]
  b8_from_b16:
  b8_from_b21:
  //SEG136 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 [phi:findcol::@16/findcol::@21->findcol::@8#0] -- register_copy 
  //SEG137 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@16/findcol::@21->findcol::@8#1] -- register_copy 
  //SEG138 findcol::@8
  b8:
  //SEG139 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby=_inc_xby 
    inx
  //SEG140 [85] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby_lt_coby1_then_la1 
    cpx #numpoints
    bcc b19
  //SEG141 [72] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  breturn_from_b8:
  //SEG142 [72] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@8->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG143 findcol::@19
  b19:
  //SEG144 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ) -- zpby1=aby 
    sta mindiff
  //SEG145 [67] phi from findcol::@19 to findcol::@1 [phi:findcol::@19->findcol::@1]
  b1_from_b19:
  //SEG146 [67] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@19->findcol::@1#0] -- register_copy 
  //SEG147 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@19->findcol::@1#1] -- register_copy 
  //SEG148 [67] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@19->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG149 findcol::@21
  b21:
  //SEG150 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ) -- aby=zpby1 
    lda mindiff
    jmp b8_from_b21
  //SEG151 findcol::@6
  b6:
  //SEG152 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ) -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG153 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7_from_b6
  //SEG154 findcol::@4
  b4:
  //SEG155 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ) -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5_from_b4
}
//SEG156 initscreen
initscreen: {
    .label screen = 3
  //SEG157 [92] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  b1_from_initscreen:
  //SEG158 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG159 [92] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  b1_from_b1:
  //SEG160 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
  //SEG161 initscreen::@1
  b1:
  //SEG162 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) -- _deref_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG163 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG164 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1_from_b1
  !:
  //SEG165 initscreen::@return
  breturn:
  //SEG166 [96] return  [ ] ( main:2::initscreen:5 [ ] )
    rts
}

Replacing label b1_from_b5 with b1
Replacing label b2_from_b5 with b2
Replacing label b1_from_b3 with b1
Replacing label b8_from_b21 with b8
Replacing label b7_from_b6 with b7
Replacing label b5_from_b4 with b5
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b5_from_bbegin:
Removing instruction main_from_b5:
Removing instruction bend_from_b5:
Removing instruction b1_from_main:
Removing instruction b1_from_b5:
Removing instruction render_from_b1:
Removing instruction b4_from_b1:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction b5_from_b12:
Removing instruction b5_from_b4:
Removing instruction b7_from_b14:
Removing instruction b7_from_b6:
Removing instruction b8_from_b16:
Removing instruction b8_from_b21:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const numpoints = 6
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7
//SEG2 @begin
//SEG3 [1] phi from @begin to @5 [phi:@begin->@5]
//SEG4 @5
b5:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @5 to main [phi:@5->main]
  jsr main
//SEG7 [3] phi from @5 to @end [phi:@5->@end]
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call initscreen param-assignment [ ] ( main:2 [ ] )
  //SEG11 [91] phi from main to initscreen [phi:main->initscreen]
  initscreen_from_main:
    jsr initscreen
  //SEG12 [6] phi from main main::@5 to main::@1 [phi:main/main::@5->main::@1]
  //SEG13 main::@1
  b1:
  //SEG14 [7] call render param-assignment [ ] ( main:2 [ ] )
  //SEG15 [51] phi from main::@1 to render [phi:main::@1->render]
    jsr render
  //SEG16 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  //SEG17 main::@4
  b4:
  //SEG18 [9] call animate param-assignment [ ] ( main:2 [ ] )
    jsr animate
  //SEG19 main::@5
  b5:
  //SEG20 [10] if(true) goto main::@1 [ ] ( main:2 [ ] ) -- true_then_la1 
    jmp b1
  //SEG21 main::@return
  breturn:
  //SEG22 [11] return  [ ] ( main:2 [ ] )
    rts
}
//SEG23 animate
animate: {
  //SEG24 [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ] ( main:2::animate:9 [ animate::$0 ] ) -- aby=_deref_cowo1 
    lda XPOS+0
  //SEG25 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ] ( main:2::animate:9 [ animate::$1 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG26 [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+0
  //SEG27 [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ] ( main:2::animate:9 [ animate::$2 ] ) -- aby=_deref_cowo1 
  //SEG28 [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG29 animate::@7
  b7:
  //SEG30 [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG31 animate::@1
  b1:
  //SEG32 [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ] ( main:2::animate:9 [ animate::$5 ] ) -- aby=_deref_cowo1 
    lda YPOS+0
  //SEG33 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ] ( main:2::animate:9 [ animate::$6 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG34 [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+0
  //SEG35 [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ] ( main:2::animate:9 [ animate::$7 ] ) -- aby=_deref_cowo1 
  //SEG36 [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG37 animate::@8
  b8:
  //SEG38 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG39 animate::@2
  b2:
  //SEG40 [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ] ( main:2::animate:9 [ animate::$10 ] ) -- xby=_deref_cowo1 
    ldx XPOS+1
  //SEG41 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ] ( main:2::animate:9 [ animate::$11 ] ) -- xby=xby_minus_1 
    dex
  //SEG42 [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx XPOS+1
  //SEG43 [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ] ( main:2::animate:9 [ animate::$12 ] ) -- aby=_deref_cowo1 
    txa
  //SEG44 [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG45 animate::@9
  b9:
  //SEG46 [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG47 animate::@3
  b3:
  //SEG48 [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] ) -- aby=_deref_cowo1 
    lda YPOS+2
  //SEG49 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ] ( main:2::animate:9 [ animate::$16 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG50 [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+2
  //SEG51 [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ] ( main:2::animate:9 [ animate::$17 ] ) -- aby=_deref_cowo1 
  //SEG52 [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG53 animate::@10
  b10:
  //SEG54 [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG55 animate::@4
  b4:
  //SEG56 [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ] ( main:2::animate:9 [ animate::$20 ] ) -- xby=_deref_cowo1 
    ldx YPOS+3
  //SEG57 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ] ( main:2::animate:9 [ animate::$21 ] ) -- xby=xby_minus_1 
    dex
  //SEG58 [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx YPOS+3
  //SEG59 [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ] ( main:2::animate:9 [ animate::$22 ] ) -- aby=_deref_cowo1 
    txa
  //SEG60 [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG61 animate::@11
  b11:
  //SEG62 [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG63 [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ] ( main:2::animate:9 [ animate::$25 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG64 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] ) -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG65 [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG66 [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ] ( main:2::animate:9 [ animate::$27 ] ) -- aby=_deref_cowo1 
  //SEG67 [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG68 animate::@12
  b12:
  //SEG69 [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ] ( main:2::animate:9 [ animate::$30 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG70 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] ) -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG71 [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG72 animate::@return
  breturn:
  //SEG73 [50] return  [ ] ( main:2::animate:9 [ ] )
    rts
}
//SEG74 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG75 [52] phi from render to render::@1 [phi:render->render::@1]
  b1_from_render:
  //SEG76 [52] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG77 [52] phi (byte) render::y#4 = (byte/signed byte/word/signed word) 0 [phi:render->render::@1#1] -- zpby1=coby1 
    lda #0
    sta y
    jmp b1
  //SEG78 [52] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  //SEG79 [52] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG80 [52] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
  //SEG81 render::@1
  b1:
  //SEG82 [53] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  //SEG83 [53] phi (byte) render::x#2 = (byte/signed byte/word/signed word) 0 [phi:render::@1->render::@2#0] -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG84 [53] phi from render::@5 to render::@2 [phi:render::@5->render::@2]
  //SEG85 [53] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@5->render::@2#0] -- register_copy 
  //SEG86 render::@2
  b2:
  //SEG87 [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] )
    // (byte) findcol::x#0 = (byte) render::x#2  // register copy zp ZP_BYTE:5
  //SEG88 [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] )
    // (byte) findcol::y#0 = (byte) render::y#4  // register copy zp ZP_BYTE:2
  //SEG89 [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  //SEG90 [66] phi from render::@2 to findcol [phi:render::@2->findcol]
  findcol_from_b2:
    jsr findcol
  //SEG91 [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ) -- aby=yby 
    tya
  //SEG92 render::@5
  b5:
  //SEG93 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] )
    // (byte) render::col#0 = (byte) findcol::return#0  // register copy reg byte a
  //SEG94 [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 ] ) -- zpptrby1_derefidx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG95 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1=_inc_zpby1 
    inc x
  //SEG96 [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG97 render::@3
  b3:
  //SEG98 [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG99 [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1=_inc_zpby1 
    inc y
  //SEG100 [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG101 render::@return
  breturn:
  //SEG102 [65] return  [ ] ( main:2::render:7 [ ] )
    rts
}
//SEG103 findcol
findcol: {
    .label x = 5
    .label y = 2
    .label xp = 7
    .label yp = 8
    .label diff = 7
    .label mindiff = 6
  //SEG104 [67] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  b1_from_findcol:
  //SEG105 [67] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#0] -- yby=coby1 
    ldy #0
  //SEG106 [67] phi (byte) findcol::mindiff#10 = (byte/word/signed word) 255 [phi:findcol->findcol::@1#1] -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG107 [67] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#2] -- xby=coby1 
    ldx #0
  //SEG108 findcol::@1
  b1:
  //SEG109 [68] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda XPOS,x
    sta xp
  //SEG110 [69] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda YPOS,x
    sta yp
  //SEG111 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG112 findcol::@9
  b9:
  //SEG113 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG114 [72] phi from findcol::@9 to findcol::@return [phi:findcol::@9->findcol::@return]
  breturn_from_b9:
  //SEG115 [72] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word) 0 [phi:findcol::@9->findcol::@return#0] -- yby=coby1 
    ldy #0
  //SEG116 findcol::@return
  breturn:
  //SEG117 [73] return  [ findcol::return#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
    rts
  //SEG118 findcol::@2
  b2:
  //SEG119 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG120 findcol::@12
  b12:
  //SEG121 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG122 [76] phi from findcol::@12 findcol::@4 to findcol::@5 [phi:findcol::@12/findcol::@4->findcol::@5]
  //SEG123 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 [phi:findcol::@12/findcol::@4->findcol::@5#0] -- register_copy 
  //SEG124 findcol::@5
  b5:
  //SEG125 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ) -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG126 findcol::@14
  b14:
  //SEG127 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ) -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG128 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG129 [80] phi from findcol::@14 findcol::@6 to findcol::@7 [phi:findcol::@14/findcol::@6->findcol::@7]
  //SEG130 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 [phi:findcol::@14/findcol::@6->findcol::@7#0] -- register_copy 
  //SEG131 findcol::@7
  b7:
  //SEG132 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ) -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG133 findcol::@16
  b16:
  //SEG134 [82] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ) -- yby=cowo1_derefidx_xby 
    ldy COLS,x
  //SEG135 [83] phi from findcol::@16 findcol::@21 to findcol::@8 [phi:findcol::@16/findcol::@21->findcol::@8]
  //SEG136 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 [phi:findcol::@16/findcol::@21->findcol::@8#0] -- register_copy 
  //SEG137 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@16/findcol::@21->findcol::@8#1] -- register_copy 
  //SEG138 findcol::@8
  b8:
  //SEG139 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby=_inc_xby 
    inx
  //SEG140 [85] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby_lt_coby1_then_la1 
    cpx #numpoints
    bcc b19
  //SEG141 [72] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  breturn_from_b8:
  //SEG142 [72] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@8->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG143 findcol::@19
  b19:
  //SEG144 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ) -- zpby1=aby 
    sta mindiff
  //SEG145 [67] phi from findcol::@19 to findcol::@1 [phi:findcol::@19->findcol::@1]
  b1_from_b19:
  //SEG146 [67] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@19->findcol::@1#0] -- register_copy 
  //SEG147 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@19->findcol::@1#1] -- register_copy 
  //SEG148 [67] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@19->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG149 findcol::@21
  b21:
  //SEG150 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ) -- aby=zpby1 
    lda mindiff
    jmp b8
  //SEG151 findcol::@6
  b6:
  //SEG152 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ) -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG153 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7
  //SEG154 findcol::@4
  b4:
  //SEG155 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ) -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5
}
//SEG156 initscreen
initscreen: {
    .label screen = 3
  //SEG157 [92] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  b1_from_initscreen:
  //SEG158 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG159 [92] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  //SEG160 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
  //SEG161 initscreen::@1
  b1:
  //SEG162 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) -- _deref_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG163 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG164 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG165 initscreen::@return
  breturn:
  //SEG166 [96] return  [ ] ( main:2::initscreen:5 [ ] )
    rts
}

Removing instruction b5:
Removing instruction bend:
Removing instruction initscreen_from_main:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b1_from_render:
Removing instruction findcol_from_b2:
Removing instruction b5:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_findcol:
Removing instruction b9:
Removing instruction breturn_from_b9:
Removing instruction b12:
Removing instruction b14:
Removing instruction b16:
Removing instruction breturn_from_b8:
Removing instruction b1_from_b19:
Removing instruction b1_from_initscreen:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const numpoints = 6
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7
//SEG2 @begin
//SEG3 [1] phi from @begin to @5 [phi:@begin->@5]
//SEG4 @5
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @5 to main [phi:@5->main]
  jsr main
//SEG7 [3] phi from @5 to @end [phi:@5->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call initscreen param-assignment [ ] ( main:2 [ ] )
  //SEG11 [91] phi from main to initscreen [phi:main->initscreen]
    jsr initscreen
  //SEG12 [6] phi from main main::@5 to main::@1 [phi:main/main::@5->main::@1]
  //SEG13 main::@1
  b1:
  //SEG14 [7] call render param-assignment [ ] ( main:2 [ ] )
  //SEG15 [51] phi from main::@1 to render [phi:main::@1->render]
    jsr render
  //SEG16 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  //SEG17 main::@4
  //SEG18 [9] call animate param-assignment [ ] ( main:2 [ ] )
    jsr animate
  //SEG19 main::@5
  //SEG20 [10] if(true) goto main::@1 [ ] ( main:2 [ ] ) -- true_then_la1 
    jmp b1
  //SEG21 main::@return
  //SEG22 [11] return  [ ] ( main:2 [ ] )
    rts
}
//SEG23 animate
animate: {
  //SEG24 [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ] ( main:2::animate:9 [ animate::$0 ] ) -- aby=_deref_cowo1 
    lda XPOS+0
  //SEG25 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ] ( main:2::animate:9 [ animate::$1 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG26 [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+0
  //SEG27 [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ] ( main:2::animate:9 [ animate::$2 ] ) -- aby=_deref_cowo1 
  //SEG28 [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG29 animate::@7
  //SEG30 [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG31 animate::@1
  b1:
  //SEG32 [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ] ( main:2::animate:9 [ animate::$5 ] ) -- aby=_deref_cowo1 
    lda YPOS+0
  //SEG33 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ] ( main:2::animate:9 [ animate::$6 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG34 [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+0
  //SEG35 [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ] ( main:2::animate:9 [ animate::$7 ] ) -- aby=_deref_cowo1 
  //SEG36 [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG37 animate::@8
  //SEG38 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG39 animate::@2
  b2:
  //SEG40 [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ] ( main:2::animate:9 [ animate::$10 ] ) -- xby=_deref_cowo1 
    ldx XPOS+1
  //SEG41 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ] ( main:2::animate:9 [ animate::$11 ] ) -- xby=xby_minus_1 
    dex
  //SEG42 [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx XPOS+1
  //SEG43 [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ] ( main:2::animate:9 [ animate::$12 ] ) -- aby=_deref_cowo1 
    txa
  //SEG44 [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG45 animate::@9
  //SEG46 [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG47 animate::@3
  b3:
  //SEG48 [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] ) -- aby=_deref_cowo1 
    lda YPOS+2
  //SEG49 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ] ( main:2::animate:9 [ animate::$16 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG50 [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+2
  //SEG51 [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ] ( main:2::animate:9 [ animate::$17 ] ) -- aby=_deref_cowo1 
  //SEG52 [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG53 animate::@10
  //SEG54 [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG55 animate::@4
  b4:
  //SEG56 [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ] ( main:2::animate:9 [ animate::$20 ] ) -- xby=_deref_cowo1 
    ldx YPOS+3
  //SEG57 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ] ( main:2::animate:9 [ animate::$21 ] ) -- xby=xby_minus_1 
    dex
  //SEG58 [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx YPOS+3
  //SEG59 [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ] ( main:2::animate:9 [ animate::$22 ] ) -- aby=_deref_cowo1 
    txa
  //SEG60 [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG61 animate::@11
  //SEG62 [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG63 [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ] ( main:2::animate:9 [ animate::$25 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG64 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] ) -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG65 [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG66 [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ] ( main:2::animate:9 [ animate::$27 ] ) -- aby=_deref_cowo1 
  //SEG67 [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG68 animate::@12
  //SEG69 [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ] ( main:2::animate:9 [ animate::$30 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG70 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] ) -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG71 [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG72 animate::@return
  breturn:
  //SEG73 [50] return  [ ] ( main:2::animate:9 [ ] )
    rts
}
//SEG74 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG75 [52] phi from render to render::@1 [phi:render->render::@1]
  //SEG76 [52] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG77 [52] phi (byte) render::y#4 = (byte/signed byte/word/signed word) 0 [phi:render->render::@1#1] -- zpby1=coby1 
    lda #0
    sta y
    jmp b1
  //SEG78 [52] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  //SEG79 [52] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG80 [52] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
  //SEG81 render::@1
  b1:
  //SEG82 [53] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  //SEG83 [53] phi (byte) render::x#2 = (byte/signed byte/word/signed word) 0 [phi:render::@1->render::@2#0] -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG84 [53] phi from render::@5 to render::@2 [phi:render::@5->render::@2]
  //SEG85 [53] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@5->render::@2#0] -- register_copy 
  //SEG86 render::@2
  b2:
  //SEG87 [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] )
    // (byte) findcol::x#0 = (byte) render::x#2  // register copy zp ZP_BYTE:5
  //SEG88 [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] )
    // (byte) findcol::y#0 = (byte) render::y#4  // register copy zp ZP_BYTE:2
  //SEG89 [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  //SEG90 [66] phi from render::@2 to findcol [phi:render::@2->findcol]
    jsr findcol
  //SEG91 [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ) -- aby=yby 
    tya
  //SEG92 render::@5
  //SEG93 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] )
    // (byte) render::col#0 = (byte) findcol::return#0  // register copy reg byte a
  //SEG94 [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 ] ) -- zpptrby1_derefidx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG95 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1=_inc_zpby1 
    inc x
  //SEG96 [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG97 render::@3
  //SEG98 [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG99 [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1=_inc_zpby1 
    inc y
  //SEG100 [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG101 render::@return
  //SEG102 [65] return  [ ] ( main:2::render:7 [ ] )
    rts
}
//SEG103 findcol
findcol: {
    .label x = 5
    .label y = 2
    .label xp = 7
    .label yp = 8
    .label diff = 7
    .label mindiff = 6
  //SEG104 [67] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  //SEG105 [67] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#0] -- yby=coby1 
    ldy #0
  //SEG106 [67] phi (byte) findcol::mindiff#10 = (byte/word/signed word) 255 [phi:findcol->findcol::@1#1] -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG107 [67] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#2] -- xby=coby1 
    ldx #0
  //SEG108 findcol::@1
  b1:
  //SEG109 [68] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda XPOS,x
    sta xp
  //SEG110 [69] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda YPOS,x
    sta yp
  //SEG111 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG112 findcol::@9
  //SEG113 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG114 [72] phi from findcol::@9 to findcol::@return [phi:findcol::@9->findcol::@return]
  //SEG115 [72] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word) 0 [phi:findcol::@9->findcol::@return#0] -- yby=coby1 
    ldy #0
  //SEG116 findcol::@return
  breturn:
  //SEG117 [73] return  [ findcol::return#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
    rts
  //SEG118 findcol::@2
  b2:
  //SEG119 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG120 findcol::@12
  //SEG121 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG122 [76] phi from findcol::@12 findcol::@4 to findcol::@5 [phi:findcol::@12/findcol::@4->findcol::@5]
  //SEG123 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 [phi:findcol::@12/findcol::@4->findcol::@5#0] -- register_copy 
  //SEG124 findcol::@5
  b5:
  //SEG125 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ) -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG126 findcol::@14
  //SEG127 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ) -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG128 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG129 [80] phi from findcol::@14 findcol::@6 to findcol::@7 [phi:findcol::@14/findcol::@6->findcol::@7]
  //SEG130 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 [phi:findcol::@14/findcol::@6->findcol::@7#0] -- register_copy 
  //SEG131 findcol::@7
  b7:
  //SEG132 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ) -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG133 findcol::@16
  //SEG134 [82] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ) -- yby=cowo1_derefidx_xby 
    ldy COLS,x
  //SEG135 [83] phi from findcol::@16 findcol::@21 to findcol::@8 [phi:findcol::@16/findcol::@21->findcol::@8]
  //SEG136 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 [phi:findcol::@16/findcol::@21->findcol::@8#0] -- register_copy 
  //SEG137 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@16/findcol::@21->findcol::@8#1] -- register_copy 
  //SEG138 findcol::@8
  b8:
  //SEG139 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby=_inc_xby 
    inx
  //SEG140 [85] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby_lt_coby1_then_la1 
    cpx #numpoints
    bcc b19
  //SEG141 [72] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  //SEG142 [72] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@8->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG143 findcol::@19
  b19:
  //SEG144 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ) -- zpby1=aby 
    sta mindiff
  //SEG145 [67] phi from findcol::@19 to findcol::@1 [phi:findcol::@19->findcol::@1]
  //SEG146 [67] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@19->findcol::@1#0] -- register_copy 
  //SEG147 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@19->findcol::@1#1] -- register_copy 
  //SEG148 [67] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@19->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG149 findcol::@21
  b21:
  //SEG150 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ) -- aby=zpby1 
    lda mindiff
    jmp b8
  //SEG151 findcol::@6
  b6:
  //SEG152 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ) -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG153 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7
  //SEG154 findcol::@4
  b4:
  //SEG155 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ) -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5
}
//SEG156 initscreen
initscreen: {
    .label screen = 3
  //SEG157 [92] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  //SEG158 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG159 [92] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  //SEG160 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
  //SEG161 initscreen::@1
  b1:
  //SEG162 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) -- _deref_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG163 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG164 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG165 initscreen::@return
  //SEG166 [96] return  [ ] ( main:2::initscreen:5 [ ] )
    rts
}

Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const numpoints = 6
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7
//SEG2 @begin
//SEG3 [1] phi from @begin to @5 [phi:@begin->@5]
//SEG4 @5
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @5 to main [phi:@5->main]
  jsr main
//SEG7 [3] phi from @5 to @end [phi:@5->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call initscreen param-assignment [ ] ( main:2 [ ] )
  //SEG11 [91] phi from main to initscreen [phi:main->initscreen]
    jsr initscreen
  //SEG12 [6] phi from main main::@5 to main::@1 [phi:main/main::@5->main::@1]
  //SEG13 main::@1
  b1:
  //SEG14 [7] call render param-assignment [ ] ( main:2 [ ] )
  //SEG15 [51] phi from main::@1 to render [phi:main::@1->render]
    jsr render
  //SEG16 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  //SEG17 main::@4
  //SEG18 [9] call animate param-assignment [ ] ( main:2 [ ] )
    jsr animate
  //SEG19 main::@5
  //SEG20 [10] if(true) goto main::@1 [ ] ( main:2 [ ] ) -- true_then_la1 
    jmp b1
  //SEG21 main::@return
  //SEG22 [11] return  [ ] ( main:2 [ ] )
}
//SEG23 animate
animate: {
  //SEG24 [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ] ( main:2::animate:9 [ animate::$0 ] ) -- aby=_deref_cowo1 
    lda XPOS+0
  //SEG25 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ] ( main:2::animate:9 [ animate::$1 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG26 [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+0
  //SEG27 [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ] ( main:2::animate:9 [ animate::$2 ] ) -- aby=_deref_cowo1 
  //SEG28 [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG29 animate::@7
  //SEG30 [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG31 animate::@1
  b1:
  //SEG32 [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ] ( main:2::animate:9 [ animate::$5 ] ) -- aby=_deref_cowo1 
    lda YPOS+0
  //SEG33 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ] ( main:2::animate:9 [ animate::$6 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG34 [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+0
  //SEG35 [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ] ( main:2::animate:9 [ animate::$7 ] ) -- aby=_deref_cowo1 
  //SEG36 [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG37 animate::@8
  //SEG38 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG39 animate::@2
  b2:
  //SEG40 [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ] ( main:2::animate:9 [ animate::$10 ] ) -- xby=_deref_cowo1 
    ldx XPOS+1
  //SEG41 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ] ( main:2::animate:9 [ animate::$11 ] ) -- xby=xby_minus_1 
    dex
  //SEG42 [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx XPOS+1
  //SEG43 [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ] ( main:2::animate:9 [ animate::$12 ] ) -- aby=_deref_cowo1 
    txa
  //SEG44 [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG45 animate::@9
  //SEG46 [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG47 animate::@3
  b3:
  //SEG48 [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] ) -- aby=_deref_cowo1 
    lda YPOS+2
  //SEG49 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ] ( main:2::animate:9 [ animate::$16 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG50 [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+2
  //SEG51 [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ] ( main:2::animate:9 [ animate::$17 ] ) -- aby=_deref_cowo1 
  //SEG52 [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG53 animate::@10
  //SEG54 [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG55 animate::@4
  b4:
  //SEG56 [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ] ( main:2::animate:9 [ animate::$20 ] ) -- xby=_deref_cowo1 
    ldx YPOS+3
  //SEG57 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ] ( main:2::animate:9 [ animate::$21 ] ) -- xby=xby_minus_1 
    dex
  //SEG58 [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx YPOS+3
  //SEG59 [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ] ( main:2::animate:9 [ animate::$22 ] ) -- aby=_deref_cowo1 
    txa
  //SEG60 [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG61 animate::@11
  //SEG62 [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG63 [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ] ( main:2::animate:9 [ animate::$25 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG64 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] ) -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG65 [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG66 [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ] ( main:2::animate:9 [ animate::$27 ] ) -- aby=_deref_cowo1 
  //SEG67 [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG68 animate::@12
  //SEG69 [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ] ( main:2::animate:9 [ animate::$30 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG70 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] ) -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG71 [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG72 animate::@return
  breturn:
  //SEG73 [50] return  [ ] ( main:2::animate:9 [ ] )
    rts
}
//SEG74 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG75 [52] phi from render to render::@1 [phi:render->render::@1]
  //SEG76 [52] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG77 [52] phi (byte) render::y#4 = (byte/signed byte/word/signed word) 0 [phi:render->render::@1#1] -- zpby1=coby1 
    lda #0
    sta y
    jmp b1
  //SEG78 [52] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  //SEG79 [52] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG80 [52] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
  //SEG81 render::@1
  b1:
  //SEG82 [53] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  //SEG83 [53] phi (byte) render::x#2 = (byte/signed byte/word/signed word) 0 [phi:render::@1->render::@2#0] -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG84 [53] phi from render::@5 to render::@2 [phi:render::@5->render::@2]
  //SEG85 [53] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@5->render::@2#0] -- register_copy 
  //SEG86 render::@2
  b2:
  //SEG87 [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] )
    // (byte) findcol::x#0 = (byte) render::x#2  // register copy zp ZP_BYTE:5
  //SEG88 [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] )
    // (byte) findcol::y#0 = (byte) render::y#4  // register copy zp ZP_BYTE:2
  //SEG89 [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  //SEG90 [66] phi from render::@2 to findcol [phi:render::@2->findcol]
    jsr findcol
  //SEG91 [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ) -- aby=yby 
    tya
  //SEG92 render::@5
  //SEG93 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] )
    // (byte) render::col#0 = (byte) findcol::return#0  // register copy reg byte a
  //SEG94 [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 ] ) -- zpptrby1_derefidx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG95 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1=_inc_zpby1 
    inc x
  //SEG96 [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG97 render::@3
  //SEG98 [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG99 [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1=_inc_zpby1 
    inc y
  //SEG100 [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG101 render::@return
  //SEG102 [65] return  [ ] ( main:2::render:7 [ ] )
    rts
}
//SEG103 findcol
findcol: {
    .label x = 5
    .label y = 2
    .label xp = 7
    .label yp = 8
    .label diff = 7
    .label mindiff = 6
  //SEG104 [67] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  //SEG105 [67] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#0] -- yby=coby1 
    ldy #0
  //SEG106 [67] phi (byte) findcol::mindiff#10 = (byte/word/signed word) 255 [phi:findcol->findcol::@1#1] -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG107 [67] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#2] -- xby=coby1 
    ldx #0
  //SEG108 findcol::@1
  b1:
  //SEG109 [68] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda XPOS,x
    sta xp
  //SEG110 [69] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda YPOS,x
    sta yp
  //SEG111 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG112 findcol::@9
  //SEG113 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG114 [72] phi from findcol::@9 to findcol::@return [phi:findcol::@9->findcol::@return]
  //SEG115 [72] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word) 0 [phi:findcol::@9->findcol::@return#0] -- yby=coby1 
    ldy #0
  //SEG116 findcol::@return
  breturn:
  //SEG117 [73] return  [ findcol::return#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
    rts
  //SEG118 findcol::@2
  b2:
  //SEG119 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG120 findcol::@12
  //SEG121 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG122 [76] phi from findcol::@12 findcol::@4 to findcol::@5 [phi:findcol::@12/findcol::@4->findcol::@5]
  //SEG123 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 [phi:findcol::@12/findcol::@4->findcol::@5#0] -- register_copy 
  //SEG124 findcol::@5
  b5:
  //SEG125 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ) -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG126 findcol::@14
  //SEG127 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ) -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG128 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG129 [80] phi from findcol::@14 findcol::@6 to findcol::@7 [phi:findcol::@14/findcol::@6->findcol::@7]
  //SEG130 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 [phi:findcol::@14/findcol::@6->findcol::@7#0] -- register_copy 
  //SEG131 findcol::@7
  b7:
  //SEG132 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ) -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG133 findcol::@16
  //SEG134 [82] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ) -- yby=cowo1_derefidx_xby 
    ldy COLS,x
  //SEG135 [83] phi from findcol::@16 findcol::@21 to findcol::@8 [phi:findcol::@16/findcol::@21->findcol::@8]
  //SEG136 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 [phi:findcol::@16/findcol::@21->findcol::@8#0] -- register_copy 
  //SEG137 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@16/findcol::@21->findcol::@8#1] -- register_copy 
  //SEG138 findcol::@8
  b8:
  //SEG139 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby=_inc_xby 
    inx
  //SEG140 [85] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby_lt_coby1_then_la1 
    cpx #numpoints
    bcc b19
  //SEG141 [72] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  //SEG142 [72] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@8->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG143 findcol::@19
  b19:
  //SEG144 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ) -- zpby1=aby 
    sta mindiff
  //SEG145 [67] phi from findcol::@19 to findcol::@1 [phi:findcol::@19->findcol::@1]
  //SEG146 [67] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@19->findcol::@1#0] -- register_copy 
  //SEG147 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@19->findcol::@1#1] -- register_copy 
  //SEG148 [67] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@19->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG149 findcol::@21
  b21:
  //SEG150 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ) -- aby=zpby1 
    lda mindiff
    jmp b8
  //SEG151 findcol::@6
  b6:
  //SEG152 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ) -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG153 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7
  //SEG154 findcol::@4
  b4:
  //SEG155 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ) -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5
}
//SEG156 initscreen
initscreen: {
    .label screen = 3
  //SEG157 [92] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  //SEG158 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG159 [92] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  //SEG160 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
  //SEG161 initscreen::@1
  b1:
  //SEG162 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) -- _deref_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG163 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG164 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG165 initscreen::@return
  //SEG166 [96] return  [ ] ( main:2::initscreen:5 [ ] )
    rts
}

Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const numpoints = 6
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7
//SEG2 @begin
//SEG3 [1] phi from @begin to @5 [phi:@begin->@5]
//SEG4 @5
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @5 to main [phi:@5->main]
  jsr main
//SEG7 [3] phi from @5 to @end [phi:@5->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call initscreen param-assignment [ ] ( main:2 [ ] )
  //SEG11 [91] phi from main to initscreen [phi:main->initscreen]
    jsr initscreen
  //SEG12 [6] phi from main main::@5 to main::@1 [phi:main/main::@5->main::@1]
  //SEG13 main::@1
  b1:
  //SEG14 [7] call render param-assignment [ ] ( main:2 [ ] )
  //SEG15 [51] phi from main::@1 to render [phi:main::@1->render]
    jsr render
  //SEG16 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  //SEG17 main::@4
  //SEG18 [9] call animate param-assignment [ ] ( main:2 [ ] )
    jsr animate
  //SEG19 main::@5
  //SEG20 [10] if(true) goto main::@1 [ ] ( main:2 [ ] ) -- true_then_la1 
    jmp b1
  //SEG21 main::@return
  //SEG22 [11] return  [ ] ( main:2 [ ] )
}
//SEG23 animate
animate: {
  //SEG24 [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ] ( main:2::animate:9 [ animate::$0 ] ) -- aby=_deref_cowo1 
    lda XPOS+0
  //SEG25 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ] ( main:2::animate:9 [ animate::$1 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG26 [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+0
  //SEG27 [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ] ( main:2::animate:9 [ animate::$2 ] ) -- aby=_deref_cowo1 
  //SEG28 [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG29 animate::@7
  //SEG30 [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG31 animate::@1
  b1:
  //SEG32 [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ] ( main:2::animate:9 [ animate::$5 ] ) -- aby=_deref_cowo1 
    lda YPOS+0
  //SEG33 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ] ( main:2::animate:9 [ animate::$6 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG34 [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+0
  //SEG35 [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ] ( main:2::animate:9 [ animate::$7 ] ) -- aby=_deref_cowo1 
  //SEG36 [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG37 animate::@8
  //SEG38 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG39 animate::@2
  b2:
  //SEG40 [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ] ( main:2::animate:9 [ animate::$10 ] ) -- xby=_deref_cowo1 
    ldx XPOS+1
  //SEG41 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ] ( main:2::animate:9 [ animate::$11 ] ) -- xby=xby_minus_1 
    dex
  //SEG42 [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx XPOS+1
  //SEG43 [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ] ( main:2::animate:9 [ animate::$12 ] ) -- aby=_deref_cowo1 
    txa
  //SEG44 [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG45 animate::@9
  //SEG46 [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG47 animate::@3
  b3:
  //SEG48 [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] ) -- aby=_deref_cowo1 
    lda YPOS+2
  //SEG49 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ] ( main:2::animate:9 [ animate::$16 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG50 [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+2
  //SEG51 [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ] ( main:2::animate:9 [ animate::$17 ] ) -- aby=_deref_cowo1 
  //SEG52 [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG53 animate::@10
  //SEG54 [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG55 animate::@4
  b4:
  //SEG56 [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ] ( main:2::animate:9 [ animate::$20 ] ) -- xby=_deref_cowo1 
    ldx YPOS+3
  //SEG57 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ] ( main:2::animate:9 [ animate::$21 ] ) -- xby=xby_minus_1 
    dex
  //SEG58 [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx YPOS+3
  //SEG59 [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ] ( main:2::animate:9 [ animate::$22 ] ) -- aby=_deref_cowo1 
    txa
  //SEG60 [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG61 animate::@11
  //SEG62 [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG63 [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ] ( main:2::animate:9 [ animate::$25 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG64 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] ) -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG65 [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG66 [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ] ( main:2::animate:9 [ animate::$27 ] ) -- aby=_deref_cowo1 
  //SEG67 [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG68 animate::@12
  //SEG69 [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ] ( main:2::animate:9 [ animate::$30 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG70 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] ) -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG71 [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG72 animate::@return
  breturn:
  //SEG73 [50] return  [ ] ( main:2::animate:9 [ ] )
    rts
}
//SEG74 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG75 [52] phi from render to render::@1 [phi:render->render::@1]
  //SEG76 [52] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG77 [52] phi (byte) render::y#4 = (byte/signed byte/word/signed word) 0 [phi:render->render::@1#1] -- zpby1=coby1 
    lda #0
    sta y
  //SEG78 [52] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  //SEG79 [52] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG80 [52] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
  //SEG81 render::@1
  b1:
  //SEG82 [53] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  //SEG83 [53] phi (byte) render::x#2 = (byte/signed byte/word/signed word) 0 [phi:render::@1->render::@2#0] -- zpby1=coby1 
    lda #0
    sta x
  //SEG84 [53] phi from render::@5 to render::@2 [phi:render::@5->render::@2]
  //SEG85 [53] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@5->render::@2#0] -- register_copy 
  //SEG86 render::@2
  b2:
  //SEG87 [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] )
    // (byte) findcol::x#0 = (byte) render::x#2  // register copy zp ZP_BYTE:5
  //SEG88 [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] )
    // (byte) findcol::y#0 = (byte) render::y#4  // register copy zp ZP_BYTE:2
  //SEG89 [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  //SEG90 [66] phi from render::@2 to findcol [phi:render::@2->findcol]
    jsr findcol
  //SEG91 [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ) -- aby=yby 
    tya
  //SEG92 render::@5
  //SEG93 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] )
    // (byte) render::col#0 = (byte) findcol::return#0  // register copy reg byte a
  //SEG94 [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 ] ) -- zpptrby1_derefidx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG95 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1=_inc_zpby1 
    inc x
  //SEG96 [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG97 render::@3
  //SEG98 [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG99 [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1=_inc_zpby1 
    inc y
  //SEG100 [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG101 render::@return
  //SEG102 [65] return  [ ] ( main:2::render:7 [ ] )
    rts
}
//SEG103 findcol
findcol: {
    .label x = 5
    .label y = 2
    .label xp = 7
    .label yp = 8
    .label diff = 7
    .label mindiff = 6
  //SEG104 [67] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  //SEG105 [67] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#0] -- yby=coby1 
    ldy #0
  //SEG106 [67] phi (byte) findcol::mindiff#10 = (byte/word/signed word) 255 [phi:findcol->findcol::@1#1] -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG107 [67] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#2] -- xby=coby1 
    ldx #0
  //SEG108 findcol::@1
  b1:
  //SEG109 [68] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda XPOS,x
    sta xp
  //SEG110 [69] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda YPOS,x
    sta yp
  //SEG111 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG112 findcol::@9
  //SEG113 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG114 [72] phi from findcol::@9 to findcol::@return [phi:findcol::@9->findcol::@return]
  //SEG115 [72] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word) 0 [phi:findcol::@9->findcol::@return#0] -- yby=coby1 
    ldy #0
  //SEG116 findcol::@return
  breturn:
  //SEG117 [73] return  [ findcol::return#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
    rts
  //SEG118 findcol::@2
  b2:
  //SEG119 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG120 findcol::@12
  //SEG121 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG122 [76] phi from findcol::@12 findcol::@4 to findcol::@5 [phi:findcol::@12/findcol::@4->findcol::@5]
  //SEG123 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 [phi:findcol::@12/findcol::@4->findcol::@5#0] -- register_copy 
  //SEG124 findcol::@5
  b5:
  //SEG125 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ) -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG126 findcol::@14
  //SEG127 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ) -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG128 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG129 [80] phi from findcol::@14 findcol::@6 to findcol::@7 [phi:findcol::@14/findcol::@6->findcol::@7]
  //SEG130 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 [phi:findcol::@14/findcol::@6->findcol::@7#0] -- register_copy 
  //SEG131 findcol::@7
  b7:
  //SEG132 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ) -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG133 findcol::@16
  //SEG134 [82] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ) -- yby=cowo1_derefidx_xby 
    ldy COLS,x
  //SEG135 [83] phi from findcol::@16 findcol::@21 to findcol::@8 [phi:findcol::@16/findcol::@21->findcol::@8]
  //SEG136 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 [phi:findcol::@16/findcol::@21->findcol::@8#0] -- register_copy 
  //SEG137 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@16/findcol::@21->findcol::@8#1] -- register_copy 
  //SEG138 findcol::@8
  b8:
  //SEG139 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby=_inc_xby 
    inx
  //SEG140 [85] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby_lt_coby1_then_la1 
    cpx #numpoints
    bcc b19
  //SEG141 [72] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  //SEG142 [72] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@8->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG143 findcol::@19
  b19:
  //SEG144 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ) -- zpby1=aby 
    sta mindiff
  //SEG145 [67] phi from findcol::@19 to findcol::@1 [phi:findcol::@19->findcol::@1]
  //SEG146 [67] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@19->findcol::@1#0] -- register_copy 
  //SEG147 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@19->findcol::@1#1] -- register_copy 
  //SEG148 [67] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@19->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG149 findcol::@21
  b21:
  //SEG150 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ) -- aby=zpby1 
    lda mindiff
    jmp b8
  //SEG151 findcol::@6
  b6:
  //SEG152 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ) -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG153 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7
  //SEG154 findcol::@4
  b4:
  //SEG155 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ) -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5
}
//SEG156 initscreen
initscreen: {
    .label screen = 3
  //SEG157 [92] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  //SEG158 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
  //SEG159 [92] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  //SEG160 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
  //SEG161 initscreen::@1
  b1:
  //SEG162 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) -- _deref_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG163 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG164 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG165 initscreen::@return
  //SEG166 [96] return  [ ] ( main:2::initscreen:5 [ ] )
    rts
}

Removing instruction lda XPOS+3
Succesful ASM optimization Pass5UnnecesaryLoadElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const numpoints = 6
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7
//SEG2 @begin
//SEG3 [1] phi from @begin to @5 [phi:@begin->@5]
//SEG4 @5
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @5 to main [phi:@5->main]
  jsr main
//SEG7 [3] phi from @5 to @end [phi:@5->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call initscreen param-assignment [ ] ( main:2 [ ] )
  //SEG11 [91] phi from main to initscreen [phi:main->initscreen]
    jsr initscreen
  //SEG12 [6] phi from main main::@5 to main::@1 [phi:main/main::@5->main::@1]
  //SEG13 main::@1
  b1:
  //SEG14 [7] call render param-assignment [ ] ( main:2 [ ] )
  //SEG15 [51] phi from main::@1 to render [phi:main::@1->render]
    jsr render
  //SEG16 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  //SEG17 main::@4
  //SEG18 [9] call animate param-assignment [ ] ( main:2 [ ] )
    jsr animate
  //SEG19 main::@5
  //SEG20 [10] if(true) goto main::@1 [ ] ( main:2 [ ] ) -- true_then_la1 
    jmp b1
  //SEG21 main::@return
  //SEG22 [11] return  [ ] ( main:2 [ ] )
}
//SEG23 animate
animate: {
  //SEG24 [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ] ( main:2::animate:9 [ animate::$0 ] ) -- aby=_deref_cowo1 
    lda XPOS+0
  //SEG25 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ] ( main:2::animate:9 [ animate::$1 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG26 [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+0
  //SEG27 [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ] ( main:2::animate:9 [ animate::$2 ] ) -- aby=_deref_cowo1 
  //SEG28 [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG29 animate::@7
  //SEG30 [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG31 animate::@1
  b1:
  //SEG32 [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ] ( main:2::animate:9 [ animate::$5 ] ) -- aby=_deref_cowo1 
    lda YPOS+0
  //SEG33 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ] ( main:2::animate:9 [ animate::$6 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG34 [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+0
  //SEG35 [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ] ( main:2::animate:9 [ animate::$7 ] ) -- aby=_deref_cowo1 
  //SEG36 [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG37 animate::@8
  //SEG38 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG39 animate::@2
  b2:
  //SEG40 [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ] ( main:2::animate:9 [ animate::$10 ] ) -- xby=_deref_cowo1 
    ldx XPOS+1
  //SEG41 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ] ( main:2::animate:9 [ animate::$11 ] ) -- xby=xby_minus_1 
    dex
  //SEG42 [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx XPOS+1
  //SEG43 [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ] ( main:2::animate:9 [ animate::$12 ] ) -- aby=_deref_cowo1 
    txa
  //SEG44 [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG45 animate::@9
  //SEG46 [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG47 animate::@3
  b3:
  //SEG48 [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] ) -- aby=_deref_cowo1 
    lda YPOS+2
  //SEG49 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ] ( main:2::animate:9 [ animate::$16 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG50 [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+2
  //SEG51 [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ] ( main:2::animate:9 [ animate::$17 ] ) -- aby=_deref_cowo1 
  //SEG52 [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG53 animate::@10
  //SEG54 [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG55 animate::@4
  b4:
  //SEG56 [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ] ( main:2::animate:9 [ animate::$20 ] ) -- xby=_deref_cowo1 
    ldx YPOS+3
  //SEG57 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ] ( main:2::animate:9 [ animate::$21 ] ) -- xby=xby_minus_1 
    dex
  //SEG58 [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx YPOS+3
  //SEG59 [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ] ( main:2::animate:9 [ animate::$22 ] ) -- aby=_deref_cowo1 
    txa
  //SEG60 [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG61 animate::@11
  //SEG62 [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG63 [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ] ( main:2::animate:9 [ animate::$25 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG64 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] ) -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG65 [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG66 [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ] ( main:2::animate:9 [ animate::$27 ] ) -- aby=_deref_cowo1 
  //SEG67 [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG68 animate::@12
  //SEG69 [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ] ( main:2::animate:9 [ animate::$30 ] ) -- aby=_deref_cowo1 
  //SEG70 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] ) -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG71 [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG72 animate::@return
  breturn:
  //SEG73 [50] return  [ ] ( main:2::animate:9 [ ] )
    rts
}
//SEG74 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG75 [52] phi from render to render::@1 [phi:render->render::@1]
  //SEG76 [52] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG77 [52] phi (byte) render::y#4 = (byte/signed byte/word/signed word) 0 [phi:render->render::@1#1] -- zpby1=coby1 
    lda #0
    sta y
  //SEG78 [52] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  //SEG79 [52] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG80 [52] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
  //SEG81 render::@1
  b1:
  //SEG82 [53] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  //SEG83 [53] phi (byte) render::x#2 = (byte/signed byte/word/signed word) 0 [phi:render::@1->render::@2#0] -- zpby1=coby1 
    lda #0
    sta x
  //SEG84 [53] phi from render::@5 to render::@2 [phi:render::@5->render::@2]
  //SEG85 [53] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@5->render::@2#0] -- register_copy 
  //SEG86 render::@2
  b2:
  //SEG87 [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] )
    // (byte) findcol::x#0 = (byte) render::x#2  // register copy zp ZP_BYTE:5
  //SEG88 [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] )
    // (byte) findcol::y#0 = (byte) render::y#4  // register copy zp ZP_BYTE:2
  //SEG89 [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  //SEG90 [66] phi from render::@2 to findcol [phi:render::@2->findcol]
    jsr findcol
  //SEG91 [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ) -- aby=yby 
    tya
  //SEG92 render::@5
  //SEG93 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] )
    // (byte) render::col#0 = (byte) findcol::return#0  // register copy reg byte a
  //SEG94 [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 ] ) -- zpptrby1_derefidx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG95 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1=_inc_zpby1 
    inc x
  //SEG96 [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG97 render::@3
  //SEG98 [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG99 [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1=_inc_zpby1 
    inc y
  //SEG100 [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG101 render::@return
  //SEG102 [65] return  [ ] ( main:2::render:7 [ ] )
    rts
}
//SEG103 findcol
findcol: {
    .label x = 5
    .label y = 2
    .label xp = 7
    .label yp = 8
    .label diff = 7
    .label mindiff = 6
  //SEG104 [67] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  //SEG105 [67] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#0] -- yby=coby1 
    ldy #0
  //SEG106 [67] phi (byte) findcol::mindiff#10 = (byte/word/signed word) 255 [phi:findcol->findcol::@1#1] -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG107 [67] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#2] -- xby=coby1 
    ldx #0
  //SEG108 findcol::@1
  b1:
  //SEG109 [68] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda XPOS,x
    sta xp
  //SEG110 [69] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda YPOS,x
    sta yp
  //SEG111 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG112 findcol::@9
  //SEG113 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG114 [72] phi from findcol::@9 to findcol::@return [phi:findcol::@9->findcol::@return]
  //SEG115 [72] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word) 0 [phi:findcol::@9->findcol::@return#0] -- yby=coby1 
    ldy #0
  //SEG116 findcol::@return
  breturn:
  //SEG117 [73] return  [ findcol::return#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
    rts
  //SEG118 findcol::@2
  b2:
  //SEG119 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG120 findcol::@12
  //SEG121 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG122 [76] phi from findcol::@12 findcol::@4 to findcol::@5 [phi:findcol::@12/findcol::@4->findcol::@5]
  //SEG123 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 [phi:findcol::@12/findcol::@4->findcol::@5#0] -- register_copy 
  //SEG124 findcol::@5
  b5:
  //SEG125 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ) -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG126 findcol::@14
  //SEG127 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ) -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG128 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG129 [80] phi from findcol::@14 findcol::@6 to findcol::@7 [phi:findcol::@14/findcol::@6->findcol::@7]
  //SEG130 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 [phi:findcol::@14/findcol::@6->findcol::@7#0] -- register_copy 
  //SEG131 findcol::@7
  b7:
  //SEG132 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ) -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG133 findcol::@16
  //SEG134 [82] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ) -- yby=cowo1_derefidx_xby 
    ldy COLS,x
  //SEG135 [83] phi from findcol::@16 findcol::@21 to findcol::@8 [phi:findcol::@16/findcol::@21->findcol::@8]
  //SEG136 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 [phi:findcol::@16/findcol::@21->findcol::@8#0] -- register_copy 
  //SEG137 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@16/findcol::@21->findcol::@8#1] -- register_copy 
  //SEG138 findcol::@8
  b8:
  //SEG139 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby=_inc_xby 
    inx
  //SEG140 [85] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby_lt_coby1_then_la1 
    cpx #numpoints
    bcc b19
  //SEG141 [72] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  //SEG142 [72] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@8->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG143 findcol::@19
  b19:
  //SEG144 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ) -- zpby1=aby 
    sta mindiff
  //SEG145 [67] phi from findcol::@19 to findcol::@1 [phi:findcol::@19->findcol::@1]
  //SEG146 [67] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@19->findcol::@1#0] -- register_copy 
  //SEG147 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@19->findcol::@1#1] -- register_copy 
  //SEG148 [67] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@19->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG149 findcol::@21
  b21:
  //SEG150 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ) -- aby=zpby1 
    lda mindiff
    jmp b8
  //SEG151 findcol::@6
  b6:
  //SEG152 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ) -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG153 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7
  //SEG154 findcol::@4
  b4:
  //SEG155 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ) -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5
}
//SEG156 initscreen
initscreen: {
    .label screen = 3
  //SEG157 [92] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  //SEG158 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
  //SEG159 [92] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  //SEG160 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
  //SEG161 initscreen::@1
  b1:
  //SEG162 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) -- _deref_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG163 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG164 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG165 initscreen::@return
  //SEG166 [96] return  [ ] ( main:2::initscreen:5 [ ] )
    rts
}

FINAL SYMBOL TABLE
(label) @5
(label) @begin
(label) @end
(byte*) COLORS
(const byte*) COLORS#0 COLORS = ((byte*))(word) 55296
(byte[]) COLS
(const byte[]) COLS#0 COLS = { (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 4, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 7 }
(byte) FILL
(const byte) FILL#0 FILL = (byte/word/signed word) 230
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word) 1024
(byte[]) XPOS
(const byte[]) XPOS#0 XPOS = { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 6, (byte/signed byte/word/signed word) 34, (byte/signed byte/word/signed word) 21, (byte/signed byte/word/signed word) 31 }
(byte[]) YPOS
(const byte[]) YPOS#0 YPOS = { (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 8, (byte/signed byte/word/signed word) 14, (byte/signed byte/word/signed word) 2, (byte/signed byte/word/signed word) 17, (byte/signed byte/word/signed word) 22 }
(void()) animate()
(byte~) animate::$0 reg byte a 4.0
(byte~) animate::$1 reg byte a 4.0
(byte~) animate::$10 reg byte x 4.0
(byte~) animate::$11 reg byte x 4.0
(byte~) animate::$12 reg byte a 4.0
(byte~) animate::$15 reg byte a 4.0
(byte~) animate::$16 reg byte a 4.0
(byte~) animate::$17 reg byte a 4.0
(byte~) animate::$2 reg byte a 4.0
(byte~) animate::$20 reg byte x 4.0
(byte~) animate::$21 reg byte x 4.0
(byte~) animate::$22 reg byte a 4.0
(byte~) animate::$25 reg byte a 4.0
(byte~) animate::$26 reg byte a 4.0
(byte~) animate::$27 reg byte a 4.0
(byte~) animate::$30 reg byte a 4.0
(byte~) animate::$31 reg byte a 4.0
(byte~) animate::$5 reg byte a 4.0
(byte~) animate::$6 reg byte a 4.0
(byte~) animate::$7 reg byte a 4.0
(label) animate::@1
(label) animate::@10
(label) animate::@11
(label) animate::@12
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$12 reg byte a 20002.0
(byte~) findcol::$14 reg byte a 20002.0
(label) findcol::@1
(label) findcol::@12
(label) findcol::@14
(label) findcol::@16
(label) findcol::@19
(label) findcol::@2
(label) findcol::@21
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#0 diff zp ZP_BYTE:7 20002.0
(byte) findcol::diff#1 diff zp ZP_BYTE:7 20002.0
(byte) findcol::diff#2 reg byte a 20002.0
(byte) findcol::diff#3 reg byte a 20002.0
(byte) findcol::diff#4 diff zp ZP_BYTE:7 10001.0
(byte) findcol::diff#6 reg byte a 13334.666666666666
(byte) findcol::i
(byte) findcol::i#1 reg byte x 10001.0
(byte) findcol::i#10 reg byte x 2631.842105263158
(byte) findcol::mincol
(byte) findcol::mincol#1 reg byte y 20002.0
(byte) findcol::mincol#10 reg byte y 1176.5882352941176
(byte) findcol::mincol#2 reg byte y 10001.0
(byte) findcol::mindiff
(byte) findcol::mindiff#10 mindiff zp ZP_BYTE:6 1875.1875
(byte) findcol::mindiff#11 reg byte a 10001.0
(byte~) findcol::mindiff#13 mindiff zp ZP_BYTE:6 20002.0
(byte~) findcol::mindiff#14 reg byte a 20002.0
(byte) findcol::return
(byte) findcol::return#0 reg byte a 2002.0
(byte) findcol::return#2 reg byte y 3667.333333333333
(byte) findcol::x
(byte) findcol::x#0 x zp ZP_BYTE:5 1640.2
(byte) findcol::xp
(byte) findcol::xp#0 xp zp ZP_BYTE:7 10001.0
(byte) findcol::y
(byte) findcol::y#0 y zp ZP_BYTE:2 1708.5416666666665
(byte) findcol::yp
(byte) findcol::yp#0 yp zp ZP_BYTE:8 6250.625
(void()) initscreen()
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#1 screen zp ZP_PTR_BYTE:3 16.5
(byte*) initscreen::screen#2 screen zp ZP_PTR_BYTE:3 16.5
(void()) main()
(label) main::@1
(label) main::@4
(label) main::@5
(label) main::@return
(byte) numpoints
(const byte) numpoints#0 numpoints = (byte/signed byte/word/signed word) 6
(void()) render()
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@5
(label) render::@return
(byte) render::col
(byte) render::col#0 reg byte a 2002.0
(byte*) render::colline
(byte*) render::colline#1 colline zp ZP_PTR_BYTE:3 67.33333333333333
(byte*) render::colline#5 colline zp ZP_PTR_BYTE:3 120.29999999999998
(byte) render::x
(byte) render::x#1 x zp ZP_BYTE:5 1501.5
(byte) render::x#2 x zp ZP_BYTE:5 572.0
(byte) render::y
(byte) render::y#1 y zp ZP_BYTE:2 151.5
(byte) render::y#4 y zp ZP_BYTE:2 109.36363636363637

zp ZP_BYTE:2 [ render::y#4 render::y#1 findcol::y#0 ]
zp ZP_PTR_BYTE:3 [ render::colline#5 render::colline#1 initscreen::screen#2 initscreen::screen#1 ]
zp ZP_BYTE:5 [ render::x#2 render::x#1 findcol::x#0 ]
reg byte x [ findcol::i#10 findcol::i#1 ]
zp ZP_BYTE:6 [ findcol::mindiff#10 findcol::mindiff#13 ]
reg byte y [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
zp ZP_BYTE:7 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 findcol::xp#0 ]
reg byte a [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
reg byte a [ animate::$0 ]
reg byte a [ animate::$1 ]
reg byte a [ animate::$2 ]
reg byte a [ animate::$5 ]
reg byte a [ animate::$6 ]
reg byte a [ animate::$7 ]
reg byte x [ animate::$10 ]
reg byte x [ animate::$11 ]
reg byte a [ animate::$12 ]
reg byte a [ animate::$15 ]
reg byte a [ animate::$16 ]
reg byte a [ animate::$17 ]
reg byte x [ animate::$20 ]
reg byte x [ animate::$21 ]
reg byte a [ animate::$22 ]
reg byte a [ animate::$25 ]
reg byte a [ animate::$26 ]
reg byte a [ animate::$27 ]
reg byte a [ animate::$30 ]
reg byte a [ animate::$31 ]
reg byte a [ findcol::return#0 ]
reg byte a [ render::col#0 ]
zp ZP_BYTE:8 [ findcol::yp#0 ]
reg byte a [ findcol::$12 ]
reg byte a [ findcol::$14 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const numpoints = 6
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7
//SEG2 @begin
//SEG3 [1] phi from @begin to @5 [phi:@begin->@5]
//SEG4 @5
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @5 to main [phi:@5->main]
  jsr main
//SEG7 [3] phi from @5 to @end [phi:@5->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call initscreen param-assignment [ ] ( main:2 [ ] )
  //SEG11 [91] phi from main to initscreen [phi:main->initscreen]
    jsr initscreen
  //SEG12 [6] phi from main main::@5 to main::@1 [phi:main/main::@5->main::@1]
  //SEG13 main::@1
  b1:
  //SEG14 [7] call render param-assignment [ ] ( main:2 [ ] )
  //SEG15 [51] phi from main::@1 to render [phi:main::@1->render]
    jsr render
  //SEG16 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  //SEG17 main::@4
  //SEG18 [9] call animate param-assignment [ ] ( main:2 [ ] )
    jsr animate
  //SEG19 main::@5
  //SEG20 [10] if(true) goto main::@1 [ ] ( main:2 [ ] ) -- true_then_la1 
    jmp b1
  //SEG21 main::@return
  //SEG22 [11] return  [ ] ( main:2 [ ] )
}
//SEG23 animate
animate: {
  //SEG24 [12] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$0 ] ( main:2::animate:9 [ animate::$0 ] ) -- aby=_deref_cowo1 
    lda XPOS+0
  //SEG25 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte/signed byte/word/signed word) 1 [ animate::$1 ] ( main:2::animate:9 [ animate::$1 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG26 [14] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$1 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+0
  //SEG27 [15] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$2 ] ( main:2::animate:9 [ animate::$2 ] ) -- aby=_deref_cowo1 
  //SEG28 [16] if((byte~) animate::$2!=(byte/signed byte/word/signed word) 40) goto animate::@1 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG29 animate::@7
  //SEG30 [17] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG31 animate::@1
  b1:
  //SEG32 [18] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$5 ] ( main:2::animate:9 [ animate::$5 ] ) -- aby=_deref_cowo1 
    lda YPOS+0
  //SEG33 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte/signed byte/word/signed word) 1 [ animate::$6 ] ( main:2::animate:9 [ animate::$6 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG34 [20] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte~) animate::$6 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+0
  //SEG35 [21] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0 [ animate::$7 ] ( main:2::animate:9 [ animate::$7 ] ) -- aby=_deref_cowo1 
  //SEG36 [22] if((byte~) animate::$7!=(byte/signed byte/word/signed word) 25) goto animate::@2 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG37 animate::@8
  //SEG38 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 0) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG39 animate::@2
  b2:
  //SEG40 [24] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$10 ] ( main:2::animate:9 [ animate::$10 ] ) -- xby=_deref_cowo1 
    ldx XPOS+1
  //SEG41 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte/signed byte/word/signed word) 1 [ animate::$11 ] ( main:2::animate:9 [ animate::$11 ] ) -- xby=xby_minus_1 
    dex
  //SEG42 [26] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte~) animate::$11 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx XPOS+1
  //SEG43 [27] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1 [ animate::$12 ] ( main:2::animate:9 [ animate::$12 ] ) -- aby=_deref_cowo1 
    txa
  //SEG44 [28] if((byte~) animate::$12!=(byte/word/signed word) 255) goto animate::@3 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG45 animate::@9
  //SEG46 [29] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 1) ← (byte/signed byte/word/signed word) 40 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG47 animate::@3
  b3:
  //SEG48 [30] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] ) -- aby=_deref_cowo1 
    lda YPOS+2
  //SEG49 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte/signed byte/word/signed word) 1 [ animate::$16 ] ( main:2::animate:9 [ animate::$16 ] ) -- aby=aby_plus_1 
    clc
    adc #1
  //SEG50 [32] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte~) animate::$16 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta YPOS+2
  //SEG51 [33] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2 [ animate::$17 ] ( main:2::animate:9 [ animate::$17 ] ) -- aby=_deref_cowo1 
  //SEG52 [34] if((byte~) animate::$17!=(byte/signed byte/word/signed word) 25) goto animate::@4 [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG53 animate::@10
  //SEG54 [35] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 2) ← (byte/signed byte/word/signed word) 0 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG55 animate::@4
  b4:
  //SEG56 [36] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$20 ] ( main:2::animate:9 [ animate::$20 ] ) -- xby=_deref_cowo1 
    ldx YPOS+3
  //SEG57 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte/signed byte/word/signed word) 1 [ animate::$21 ] ( main:2::animate:9 [ animate::$21 ] ) -- xby=xby_minus_1 
    dex
  //SEG58 [38] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$21 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=xby 
    stx YPOS+3
  //SEG59 [39] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$22 ] ( main:2::animate:9 [ animate::$22 ] ) -- aby=_deref_cowo1 
    txa
  //SEG60 [40] if((byte~) animate::$22!=(byte/word/signed word) 255) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG61 animate::@11
  //SEG62 [41] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word) 3) ← (byte/signed byte/word/signed word) 25 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG63 [42] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$25 ] ( main:2::animate:9 [ animate::$25 ] ) -- aby=_deref_cowo1 
    lda XPOS+3
  //SEG64 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte/signed byte/word/signed word) 7 [ animate::$26 ] ( main:2::animate:9 [ animate::$26 ] ) -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG65 [44] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$26 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG66 [45] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$27 ] ( main:2::animate:9 [ animate::$27 ] ) -- aby=_deref_cowo1 
  //SEG67 [46] if((byte~) animate::$27<(byte/signed byte/word/signed word) 40) goto animate::@return [ ] ( main:2::animate:9 [ ] ) -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG68 animate::@12
  //SEG69 [47] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3 [ animate::$30 ] ( main:2::animate:9 [ animate::$30 ] ) -- aby=_deref_cowo1 
  //SEG70 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte/signed byte/word/signed word) 40 [ animate::$31 ] ( main:2::animate:9 [ animate::$31 ] ) -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG71 [49] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word) 3) ← (byte~) animate::$31 [ ] ( main:2::animate:9 [ ] ) -- _deref_cowo1=aby 
    sta XPOS+3
  //SEG72 animate::@return
  breturn:
  //SEG73 [50] return  [ ] ( main:2::animate:9 [ ] )
    rts
}
//SEG74 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG75 [52] phi from render to render::@1 [phi:render->render::@1]
  //SEG76 [52] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG77 [52] phi (byte) render::y#4 = (byte/signed byte/word/signed word) 0 [phi:render->render::@1#1] -- zpby1=coby1 
    lda #0
    sta y
  //SEG78 [52] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  //SEG79 [52] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG80 [52] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
  //SEG81 render::@1
  b1:
  //SEG82 [53] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  //SEG83 [53] phi (byte) render::x#2 = (byte/signed byte/word/signed word) 0 [phi:render::@1->render::@2#0] -- zpby1=coby1 
    lda #0
    sta x
  //SEG84 [53] phi from render::@5 to render::@2 [phi:render::@5->render::@2]
  //SEG85 [53] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@5->render::@2#0] -- register_copy 
  //SEG86 render::@2
  b2:
  //SEG87 [54] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 ] )
    // (byte) findcol::x#0 = (byte) render::x#2  // register copy zp ZP_BYTE:5
  //SEG88 [55] (byte) findcol::y#0 ← (byte) render::y#4 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 ] )
    // (byte) findcol::y#0 = (byte) render::y#4  // register copy zp ZP_BYTE:2
  //SEG89 [56] call findcol param-assignment [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
  //SEG90 [66] phi from render::@2 to findcol [phi:render::@2->findcol]
    jsr findcol
  //SEG91 [57] (byte) findcol::return#0 ← (byte) findcol::return#2 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 findcol::return#0 ] ) -- aby=yby 
    tya
  //SEG92 render::@5
  //SEG93 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 render::col#0 ] )
    // (byte) render::col#0 = (byte) findcol::return#0  // register copy reg byte a
  //SEG94 [59] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#4 render::colline#5 render::x#2 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#2 ] ) -- zpptrby1_derefidx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG95 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1=_inc_zpby1 
    inc x
  //SEG96 [61] if((byte) render::x#1!=(byte/signed byte/word/signed word) 40) goto render::@2 [ render::y#4 render::colline#5 render::x#1 ] ( main:2::render:7 [ render::y#4 render::colline#5 render::x#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG97 render::@3
  //SEG98 [62] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word) 40 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG99 [63] (byte) render::y#1 ← ++ (byte) render::y#4 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1=_inc_zpby1 
    inc y
  //SEG100 [64] if((byte) render::y#1!=(byte/signed byte/word/signed word) 25) goto render::@1 [ render::y#1 render::colline#1 ] ( main:2::render:7 [ render::y#1 render::colline#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG101 render::@return
  //SEG102 [65] return  [ ] ( main:2::render:7 [ ] )
    rts
}
//SEG103 findcol
findcol: {
    .label x = 5
    .label y = 2
    .label xp = 7
    .label yp = 8
    .label diff = 7
    .label mindiff = 6
  //SEG104 [67] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  //SEG105 [67] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#0] -- yby=coby1 
    ldy #0
  //SEG106 [67] phi (byte) findcol::mindiff#10 = (byte/word/signed word) 255 [phi:findcol->findcol::@1#1] -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG107 [67] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word) 0 [phi:findcol->findcol::@1#2] -- xby=coby1 
    ldx #0
  //SEG108 findcol::@1
  b1:
  //SEG109 [68] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda XPOS,x
    sta xp
  //SEG110 [69] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1=cowo1_derefidx_xby 
    lda YPOS,x
    sta yp
  //SEG111 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG112 findcol::@9
  //SEG113 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG114 [72] phi from findcol::@9 to findcol::@return [phi:findcol::@9->findcol::@return]
  //SEG115 [72] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word) 0 [phi:findcol::@9->findcol::@return#0] -- yby=coby1 
    ldy #0
  //SEG116 findcol::@return
  breturn:
  //SEG117 [73] return  [ findcol::return#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::return#2 ] )
    rts
  //SEG118 findcol::@2
  b2:
  //SEG119 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::xp#0 findcol::yp#0 ] ) -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG120 findcol::@12
  //SEG121 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG122 [76] phi from findcol::@12 findcol::@4 to findcol::@5 [phi:findcol::@12/findcol::@4->findcol::@5]
  //SEG123 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 [phi:findcol::@12/findcol::@4->findcol::@5#0] -- register_copy 
  //SEG124 findcol::@5
  b5:
  //SEG125 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#4 ] ) -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG126 findcol::@14
  //SEG127 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$12 ] ) -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG128 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG129 [80] phi from findcol::@14 findcol::@6 to findcol::@7 [phi:findcol::@14/findcol::@6->findcol::@7]
  //SEG130 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 [phi:findcol::@14/findcol::@6->findcol::@7#0] -- register_copy 
  //SEG131 findcol::@7
  b7:
  //SEG132 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#6 ] ) -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG133 findcol::@16
  //SEG134 [82] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::diff#6 findcol::mincol#1 ] ) -- yby=cowo1_derefidx_xby 
    ldy COLS,x
  //SEG135 [83] phi from findcol::@16 findcol::@21 to findcol::@8 [phi:findcol::@16/findcol::@21->findcol::@8]
  //SEG136 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 [phi:findcol::@16/findcol::@21->findcol::@8#0] -- register_copy 
  //SEG137 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@16/findcol::@21->findcol::@8#1] -- register_copy 
  //SEG138 findcol::@8
  b8:
  //SEG139 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby=_inc_xby 
    inx
  //SEG140 [85] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ] ) -- xby_lt_coby1_then_la1 
    cpx #numpoints
    bcc b19
  //SEG141 [72] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  //SEG142 [72] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@8->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG143 findcol::@19
  b19:
  //SEG144 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ] ) -- zpby1=aby 
    sta mindiff
  //SEG145 [67] phi from findcol::@19 to findcol::@1 [phi:findcol::@19->findcol::@1]
  //SEG146 [67] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@19->findcol::@1#0] -- register_copy 
  //SEG147 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@19->findcol::@1#1] -- register_copy 
  //SEG148 [67] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@19->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG149 findcol::@21
  b21:
  //SEG150 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#14 ] ) -- aby=zpby1 
    lda mindiff
    jmp b8
  //SEG151 findcol::@6
  b6:
  //SEG152 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 findcol::$14 ] ) -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG153 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#2 ] ) -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7
  //SEG154 findcol::@4
  b4:
  //SEG155 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ( main:2::render:7::findcol:56 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#0 ] ) -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5
}
//SEG156 initscreen
initscreen: {
    .label screen = 3
  //SEG157 [92] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  //SEG158 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
  //SEG159 [92] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  //SEG160 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
  //SEG161 initscreen::@1
  b1:
  //SEG162 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) -- _deref_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG163 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG164 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG165 initscreen::@return
  //SEG166 [96] return  [ ] ( main:2::initscreen:5 [ ] )
    rts
}

