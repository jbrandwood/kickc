Fixing pointer increment (signed word*) sin16s_gen::sintab ← ++ (signed word*) sin16s_gen::sintab
Fixing pointer increment (signed word*) sin16s_gen2::sintab ← ++ (signed word*) sin16s_gen2::sintab
Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_lines::str)
Warning! Adding boolean cast to non-boolean condition (byte) print_str_lines::ch
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_at::str)
Warning! Adding boolean cast to non-boolean sub-expression (byte) print_str_lines::ch
Identified constant variable (byte*) HEAP_TOP
Identified constant variable (word) main::tabsize
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) divr16u::@7
Culled Empty Block (label) @3
Culled Empty Block (label) div16u::@1
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) mul8u::@5
Culled Empty Block (label) mul8u::@6
Culled Empty Block (label) mul8u::@8
Culled Empty Block (label) mul8u::@9
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) mul8su::@3
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) sin8s::@9
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) mulu8_sel::@1
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) memset::@7
Culled Empty Block (label) memset::@6
Culled Empty Block (label) memset::@8
Culled Empty Block (label) memset::@9
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) print_str::@4
Culled Empty Block (label) print_str::@3
Culled Empty Block (label) print_str::@5
Culled Empty Block (label) print_str::@6
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) @37
Culled Empty Block (label) print_sword::@4
Culled Empty Block (label) @38
Culled Empty Block (label) print_sbyte::@4
Culled Empty Block (label) @39
Culled Empty Block (label) @40
Culled Empty Block (label) @41
Culled Empty Block (label) @42
Culled Empty Block (label) @43
Culled Empty Block (label) @44
Culled Empty Block (label) @45
Culled Empty Block (label) @46
Culled Empty Block (label) @47
Culled Empty Block (label) @48
Culled Empty Block (label) @50
Culled Empty Block (label) @51
Culled Empty Block (label) @52
Culled Empty Block (label) @53
Culled Empty Block (label) @54
Culled Empty Block (label) @55
Culled Empty Block (label) @56
Culled Empty Block (label) @57
Culled Empty Block (label) sin8u_table::@4
Culled Empty Block (label) sin8u_table::@3
Culled Empty Block (label) sin8u_table::@5
Culled Empty Block (label) sin8u_table::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@13

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u
  (word) divr16u::divisor#5 ← phi( div16u/(word) divr16u::divisor#0 )
  (word) divr16u::dividend#4 ← phi( div16u/(word) divr16u::dividend#1 )
  (word) divr16u::rem#8 ← phi( div16u/(word) divr16u::rem#3 )
  (word) divr16u::quotient#0 ← (number) 0
  (byte) divr16u::i#0 ← (byte) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#3 ← phi( divr16u/(word) divr16u::divisor#5 divr16u::@3/(word) divr16u::divisor#6 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#4 divr16u::@3/(word) divr16u::dividend#5 )
  (word) divr16u::rem#4 ← phi( divr16u/(word) divr16u::rem#8 divr16u::@3/(word) divr16u::rem#9 )
  (word~) divr16u::$0 ← (word) divr16u::rem#4 << (number) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
  (bool~) divr16u::$3 ← (number~) divr16u::$2 != (number) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#1 ← phi( divr16u::@1/(word) divr16u::divisor#3 divr16u::@4/(word) divr16u::divisor#4 )
  (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#3 ← phi( divr16u::@1/(word) divr16u::dividend#2 divr16u::@4/(word) divr16u::dividend#6 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (number) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#4 ← phi( divr16u::@1/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#6 ← phi( divr16u::@1/(word) divr16u::dividend#2 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (number~) divr16u::$5 ← (word) divr16u::rem#6 | (number) 1
  (word) divr16u::rem#1 ← (number~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#6 ← phi( divr16u::@2/(word) divr16u::divisor#1 divr16u::@5/(word) divr16u::divisor#2 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#5 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#7 )
  (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#7 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#2 ← phi( divr16u::@2/(word) divr16u::divisor#1 )
  (word) divr16u::rem#7 ← phi( divr16u::@2/(word) divr16u::rem#5 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#7 - (word) divr16u::divisor#2
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) divr16u::return#3 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#3
  return 
  to:@return

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from sin8u_table
  (word) div16u::divisor#1 ← phi( sin8u_table/(word) div16u::divisor#0 )
  (word) div16u::dividend#1 ← phi( sin8u_table/(word) div16u::dividend#0 )
  (word) divr16u::dividend#1 ← (word) div16u::dividend#1
  (word) divr16u::divisor#0 ← (word) div16u::divisor#1
  (word) divr16u::rem#3 ← (number) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u
  (word) divr16u::return#4 ← phi( div16u/(word) divr16u::return#2 )
  (word~) div16u::$0 ← (word) divr16u::return#4
  (word) div16u::return#0 ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@2
  (word) div16u::return#3 ← phi( div16u::@2/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#3
  return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  (byte) mul8u::a#6 ← phi( mul8su/(byte) mul8u::a#1 mulu8_sel/(byte) mul8u::a#2 )
  (byte) mul8u::b#2 ← phi( mul8su/(byte) mul8u::b#0 mulu8_sel/(byte) mul8u::b#1 )
  (word) mul8u::res#0 ← (number) 0
  (word) mul8u::mb#0 ← (byte) mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (word) mul8u::mb#5 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 )
  (word) mul8u::res#4 ← phi( mul8u/(word) mul8u::res#0 mul8u::@4/(word) mul8u::res#6 )
  (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@4/(byte) mul8u::a#0 )
  (bool~) mul8u::$0 ← (byte) mul8u::a#3 != (number) 0
  if((bool~) mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#5 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::mb#4 ← phi( mul8u::@1/(word) mul8u::mb#5 )
  (byte) mul8u::a#4 ← phi( mul8u::@1/(byte) mul8u::a#3 )
  (number~) mul8u::$1 ← (byte) mul8u::a#4 & (number) 1
  (bool~) mul8u::$2 ← (number~) mul8u::$1 != (number) 0
  (bool~) mul8u::$3 ← ! (bool~) mul8u::$2
  if((bool~) mul8u::$3) goto mul8u::@4
  to:mul8u::@7
mul8u::@3: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#2 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::return#0 ← (word) mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@7
  (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#5 mul8u::@7/(word) mul8u::res#1 )
  (word) mul8u::mb#2 ← phi( mul8u::@2/(word) mul8u::mb#4 mul8u::@7/(word) mul8u::mb#3 )
  (byte) mul8u::a#5 ← phi( mul8u::@2/(byte) mul8u::a#4 mul8u::@7/(byte) mul8u::a#7 )
  (byte~) mul8u::$5 ← (byte) mul8u::a#5 >> (number) 1
  (byte) mul8u::a#0 ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
  (word) mul8u::mb#1 ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@7: scope:[mul8u]  from mul8u::@2
  (byte) mul8u::a#7 ← phi( mul8u::@2/(byte) mul8u::a#4 )
  (word) mul8u::mb#3 ← phi( mul8u::@2/(word) mul8u::mb#4 )
  (word) mul8u::res#3 ← phi( mul8u::@2/(word) mul8u::res#5 )
  (word~) mul8u::$4 ← (word) mul8u::res#3 + (word) mul8u::mb#3
  (word) mul8u::res#1 ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  (word) mul8u::return#4 ← phi( mul8u::@3/(word) mul8u::return#0 )
  (word) mul8u::return#1 ← (word) mul8u::return#4
  return 
  to:@return

(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
mul8su: scope:[mul8su]  from sin8u_table::@19
  (byte) mul8su::b#1 ← phi( sin8u_table::@19/(byte) mul8su::b#0 )
  (signed byte) mul8su::a#1 ← phi( sin8u_table::@19/(signed byte) mul8su::a#0 )
  (byte~) mul8su::$0 ← ((byte)) (signed byte) mul8su::a#1
  (byte~) mul8su::$1 ← ((byte)) (byte) mul8su::b#1
  (byte) mul8u::a#1 ← (byte~) mul8su::$0
  (byte) mul8u::b#0 ← (byte~) mul8su::$1
  call mul8u 
  (word) mul8u::return#2 ← (word) mul8u::return#1
  to:mul8su::@4
mul8su::@4: scope:[mul8su]  from mul8su
  (byte) mul8su::b#3 ← phi( mul8su/(byte) mul8su::b#1 )
  (signed byte) mul8su::a#2 ← phi( mul8su/(signed byte) mul8su::a#1 )
  (word) mul8u::return#5 ← phi( mul8su/(word) mul8u::return#2 )
  (word~) mul8su::$2 ← (word) mul8u::return#5
  (word) mul8su::m#0 ← (word~) mul8su::$2
  (bool~) mul8su::$3 ← (signed byte) mul8su::a#2 < (number) 0
  (bool~) mul8su::$4 ← ! (bool~) mul8su::$3
  if((bool~) mul8su::$4) goto mul8su::@1
  to:mul8su::@2
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@4
  (word) mul8su::m#2 ← phi( mul8su::@2/(word) mul8su::m#1 mul8su::@4/(word) mul8su::m#0 )
  (signed word~) mul8su::$5 ← ((signed word)) (word) mul8su::m#2
  (signed word) mul8su::return#0 ← (signed word~) mul8su::$5
  to:mul8su::@return
mul8su::@2: scope:[mul8su]  from mul8su::@4
  (byte) mul8su::b#2 ← phi( mul8su::@4/(byte) mul8su::b#3 )
  (word) mul8su::m#3 ← phi( mul8su::@4/(word) mul8su::m#0 )
  (byte~) mul8su::$7 ← > (word) mul8su::m#3
  (byte~) mul8su::$8 ← ((byte)) (byte) mul8su::b#2
  (byte~) mul8su::$9 ← (byte~) mul8su::$7 - (byte~) mul8su::$8
  (byte~) mul8su::$10 ← (byte~) mul8su::$9
  (word) mul8su::m#1 ← (word) mul8su::m#3 hi= (byte~) mul8su::$10
  to:mul8su::@1
mul8su::@return: scope:[mul8su]  from mul8su::@1
  (signed word) mul8su::return#3 ← phi( mul8su::@1/(signed word) mul8su::return#0 )
  (signed word) mul8su::return#1 ← (signed word) mul8su::return#3
  return 
  to:@return
@13: scope:[]  from @begin
  (word) PI2_u4f12 ← (number) $6488
  (word) PI_u4f12 ← (number) $3244
  (word) PI_HALF_u4f12 ← (number) $1922
  to:@32

(signed byte()) sin8s((word) sin8s::x)
sin8s: scope:[sin8s]  from sin8u_table::@2
  (word) sin8s::x#3 ← phi( sin8u_table::@2/(word) sin8s::x#2 )
  (byte) sin8s::isUpper#0 ← (number) 0
  (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (word) PI_u4f12
  (bool~) sin8s::$1 ← ! (bool~) sin8s::$0
  if((bool~) sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) sin8s::isUpper#0 sin8s::@5/(byte) sin8s::isUpper#1 )
  (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#3 sin8s::@5/(word) sin8s::x#0 )
  (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (word) PI_HALF_u4f12
  (bool~) sin8s::$3 ← ! (bool~) sin8s::$2
  if((bool~) sin8s::$3) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  (word) sin8s::x#5 ← phi( sin8s/(word) sin8s::x#3 )
  (word~) sin8s::$19 ← (word) sin8s::x#5 - (word) PI_u4f12
  (word) sin8s::x#0 ← (word~) sin8s::$19
  (byte) sin8s::isUpper#1 ← (number) 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  (byte) sin8s::isUpper#9 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 sin8s::@6/(byte) sin8s::isUpper#11 )
  (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#1 )
  (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
  (byte~) sin8s::$5 ← > (word~) sin8s::$4
  (byte) sin8s::x1#0 ← (byte~) sin8s::$5
  (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::select#0 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#6
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@2
  (byte) sin8s::isUpper#8 ← phi( sin8s::@2/(byte) sin8s::isUpper#9 )
  (byte) sin8s::x1#1 ← phi( sin8s::@2/(byte) sin8s::x1#0 )
  (byte) mulu8_sel::return#7 ← phi( sin8s::@2/(byte) mulu8_sel::return#0 )
  (byte~) sin8s::$6 ← (byte) mulu8_sel::return#7
  (byte) sin8s::x2#0 ← (byte~) sin8s::$6
  (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#1
  (byte) mulu8_sel::select#1 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#6
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  (byte) sin8s::isUpper#7 ← phi( sin8s::@10/(byte) sin8s::isUpper#8 )
  (byte) sin8s::x1#4 ← phi( sin8s::@10/(byte) sin8s::x1#1 )
  (byte) mulu8_sel::return#8 ← phi( sin8s::@10/(byte) mulu8_sel::return#1 )
  (byte~) sin8s::$7 ← (byte) mulu8_sel::return#8
  (byte) sin8s::x3#0 ← (byte~) sin8s::$7
  (byte) sin8s::DIV_6 ← (number) $2b
  (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  (byte) mulu8_sel::v2#2 ← (byte) sin8s::DIV_6
  (byte) mulu8_sel::select#2 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#6
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  (byte) sin8s::isUpper#6 ← phi( sin8s::@11/(byte) sin8s::isUpper#7 )
  (byte) sin8s::x3#1 ← phi( sin8s::@11/(byte) sin8s::x3#0 )
  (byte) sin8s::x1#2 ← phi( sin8s::@11/(byte) sin8s::x1#4 )
  (byte) mulu8_sel::return#9 ← phi( sin8s::@11/(byte) mulu8_sel::return#2 )
  (byte~) sin8s::$8 ← (byte) mulu8_sel::return#9
  (byte) sin8s::x3_6#0 ← (byte~) sin8s::$8
  (byte~) sin8s::$9 ← (byte) sin8s::x1#2 - (byte) sin8s::x3_6#0
  (byte) sin8s::usinx#0 ← (byte~) sin8s::$9
  (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#1
  (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#2
  (byte) mulu8_sel::select#3 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#3 ← (byte) mulu8_sel::return#6
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  (byte) sin8s::isUpper#5 ← phi( sin8s::@12/(byte) sin8s::isUpper#6 )
  (byte) sin8s::usinx#7 ← phi( sin8s::@12/(byte) sin8s::usinx#0 )
  (byte) sin8s::x1#3 ← phi( sin8s::@12/(byte) sin8s::x1#2 )
  (byte) mulu8_sel::return#10 ← phi( sin8s::@12/(byte) mulu8_sel::return#3 )
  (byte~) sin8s::$10 ← (byte) mulu8_sel::return#10
  (byte) sin8s::x4#0 ← (byte~) sin8s::$10
  (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#3
  (byte) mulu8_sel::select#4 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#4 ← (byte) mulu8_sel::return#6
  to:sin8s::@14
sin8s::@14: scope:[sin8s]  from sin8s::@13
  (byte) sin8s::isUpper#3 ← phi( sin8s::@13/(byte) sin8s::isUpper#5 )
  (byte) sin8s::usinx#3 ← phi( sin8s::@13/(byte) sin8s::usinx#7 )
  (byte) mulu8_sel::return#11 ← phi( sin8s::@13/(byte) mulu8_sel::return#4 )
  (byte~) sin8s::$11 ← (byte) mulu8_sel::return#11
  (byte) sin8s::x5#0 ← (byte~) sin8s::$11
  (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
  (byte) sin8s::x5_128#0 ← (byte~) sin8s::$12
  (byte~) sin8s::$13 ← (byte) sin8s::usinx#3 + (byte) sin8s::x5_128#0
  (byte) sin8s::usinx#1 ← (byte~) sin8s::$13
  (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
  (bool~) sin8s::$15 ← ! (bool~) sin8s::$14
  if((bool~) sin8s::$15) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  (byte) sin8s::isUpper#11 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 )
  (word) sin8s::x#7 ← phi( sin8s::@1/(word) sin8s::x#4 )
  (word~) sin8s::$20 ← (word) PI_u4f12 - (word) sin8s::x#7
  (word) sin8s::x#1 ← (word~) sin8s::$20
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@14 sin8s::@7
  (byte) sin8s::isUpper#2 ← phi( sin8s::@14/(byte) sin8s::isUpper#3 sin8s::@7/(byte) sin8s::isUpper#4 )
  (byte) sin8s::usinx#4 ← phi( sin8s::@14/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  (signed byte~) sin8s::$16 ← ((signed byte)) (byte) sin8s::usinx#4
  (signed byte) sin8s::sinx#0 ← (signed byte~) sin8s::$16
  (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (number) 0
  (bool~) sin8s::$18 ← ! (bool~) sin8s::$17
  if((bool~) sin8s::$18) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@14
  (byte) sin8s::isUpper#4 ← phi( sin8s::@14/(byte) sin8s::isUpper#3 )
  (byte) sin8s::usinx#5 ← phi( sin8s::@14/(byte) sin8s::usinx#1 )
  (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#5
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  (signed byte) sin8s::sinx#2 ← phi( sin8s::@3/(signed byte) sin8s::sinx#0 sin8s::@8/(signed byte) sin8s::sinx#1 )
  (signed byte) sin8s::return#0 ← (signed byte) sin8s::sinx#2
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  (byte) sin8s::usinx#6 ← phi( sin8s::@3/(byte) sin8s::usinx#4 )
  (signed byte~) sin8s::$21 ← ((signed byte)) (byte) sin8s::usinx#6
  (signed byte~) sin8s::$22 ← - (signed byte~) sin8s::$21
  (signed byte) sin8s::sinx#1 ← (signed byte~) sin8s::$22
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4
  (signed byte) sin8s::return#3 ← phi( sin8s::@4/(signed byte) sin8s::return#0 )
  (signed byte) sin8s::return#1 ← (signed byte) sin8s::return#3
  return 
  to:@return

(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@13 sin8s::@2
  (byte) mulu8_sel::select#6 ← phi( sin8s::@10/(byte) mulu8_sel::select#1 sin8s::@11/(byte) mulu8_sel::select#2 sin8s::@12/(byte) mulu8_sel::select#3 sin8s::@13/(byte) mulu8_sel::select#4 sin8s::@2/(byte) mulu8_sel::select#0 )
  (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(byte) mulu8_sel::v2#1 sin8s::@11/(byte) mulu8_sel::v2#2 sin8s::@12/(byte) mulu8_sel::v2#3 sin8s::@13/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 )
  (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#1 sin8s::@11/(byte) mulu8_sel::v1#2 sin8s::@12/(byte) mulu8_sel::v1#3 sin8s::@13/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 )
  (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
  (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5
  call mul8u 
  (word) mul8u::return#3 ← (word) mul8u::return#1
  to:mulu8_sel::@2
mulu8_sel::@2: scope:[mulu8_sel]  from mulu8_sel
  (byte) mulu8_sel::select#5 ← phi( mulu8_sel/(byte) mulu8_sel::select#6 )
  (word) mul8u::return#6 ← phi( mulu8_sel/(word) mul8u::return#3 )
  (word~) mulu8_sel::$0 ← (word) mul8u::return#6
  (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  (byte~) mulu8_sel::$2 ← > (word~) mulu8_sel::$1
  (byte) mulu8_sel::return#5 ← (byte~) mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@2
  (byte) mulu8_sel::return#12 ← phi( mulu8_sel::@2/(byte) mulu8_sel::return#5 )
  (byte) mulu8_sel::return#6 ← (byte) mulu8_sel::return#12
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@4/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#2
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@5
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@5/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@5/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@5/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@5/(byte*) memset::dst#1 )
  (bool~) memset::$4 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@5
  to:memset::@1
memset::@5: scope:[memset]  from memset::@4
  (void*) memset::str#5 ← phi( memset::@4/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@4/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@4
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@32: scope:[]  from @13
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@49

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from sin8u_table::@11 sin8u_table::@13 sin8u_table::@15 sin8u_table::@20 sin8u_table::@22 sin8u_table::@24 sin8u_table::@26 sin8u_table::@7 sin8u_table::@9
  (byte*) print_char_cursor#109 ← phi( sin8u_table::@11/(byte*) print_char_cursor#29 sin8u_table::@13/(byte*) print_char_cursor#31 sin8u_table::@15/(byte*) print_char_cursor#33 sin8u_table::@20/(byte*) print_char_cursor#106 sin8u_table::@22/(byte*) print_char_cursor#38 sin8u_table::@24/(byte*) print_char_cursor#40 sin8u_table::@26/(byte*) print_char_cursor#42 sin8u_table::@7/(byte*) print_char_cursor#105 sin8u_table::@9/(byte*) print_char_cursor#27 )
  (byte*) print_str::str#12 ← phi( sin8u_table::@11/(byte*) print_str::str#3 sin8u_table::@13/(byte*) print_str::str#4 sin8u_table::@15/(byte*) print_str::str#5 sin8u_table::@20/(byte*) print_str::str#6 sin8u_table::@22/(byte*) print_str::str#7 sin8u_table::@24/(byte*) print_str::str#8 sin8u_table::@26/(byte*) print_str::str#9 sin8u_table::@7/(byte*) print_str::str#1 sin8u_table::@9/(byte*) print_str::str#2 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#94 ← phi( print_str/(byte*) print_char_cursor#109 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← (number) 0 != *((byte*) print_str::str#10)
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#48 ← phi( print_str::@1/(byte*) print_char_cursor#94 )
  (byte*) print_str::str#11 ← phi( print_str::@1/(byte*) print_str::str#10 )
  *((byte*) print_char_cursor#48) ← *((byte*) print_str::str#11)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#48
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#11
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#49 ← phi( print_str::@1/(byte*) print_char_cursor#94 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#49
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from sin8u_table::@17 sin8u_table::@28
  (byte*) print_char_cursor#95 ← phi( sin8u_table::@17/(byte*) print_char_cursor#35 sin8u_table::@28/(byte*) print_char_cursor#44 )
  (byte*) print_line_cursor#23 ← phi( sin8u_table::@17/(byte*) print_line_cursor#25 sin8u_table::@28/(byte*) print_line_cursor#26 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#50 ← phi( print_ln/(byte*) print_char_cursor#95 print_ln::@1/(byte*) print_char_cursor#50 )
  (byte*) print_line_cursor#12 ← phi( print_ln/(byte*) print_line_cursor#23 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#12 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#50
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#13 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#13
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#51 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#14 ← phi( print_ln::@2/(byte*) print_line_cursor#13 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#51
  return 
  to:@return

(void()) print_sword((signed word) print_sword::w)
print_sword: scope:[print_sword]  from sin8u_table::@25
  (byte*) print_char_cursor#110 ← phi( sin8u_table::@25/(byte*) print_char_cursor#41 )
  (signed word) print_sword::w#2 ← phi( sin8u_table::@25/(signed word) print_sword::w#1 )
  (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (number) 0
  if((bool~) print_sword::$0) goto print_sword::@1
  to:print_sword::@3
print_sword::@1: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#5 ← phi( print_sword/(signed word) print_sword::w#2 )
  (byte*) print_char_cursor#96 ← phi( print_sword/(byte*) print_char_cursor#110 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sword::@5
print_sword::@5: scope:[print_sword]  from print_sword::@1
  (signed word) print_sword::w#3 ← phi( print_sword::@1/(signed word) print_sword::w#5 )
  (byte*) print_char_cursor#52 ← phi( print_sword::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#52
  (signed word~) print_sword::$5 ← - (signed word) print_sword::w#3
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$5
  to:print_sword::@2
print_sword::@3: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#7 ← phi( print_sword/(signed word) print_sword::w#2 )
  (byte*) print_char_cursor#97 ← phi( print_sword/(byte*) print_char_cursor#110 )
  (byte) print_char::ch#1 ← (byte) ' '
  call print_char 
  to:print_sword::@6
print_sword::@6: scope:[print_sword]  from print_sword::@3
  (signed word) print_sword::w#6 ← phi( print_sword::@3/(signed word) print_sword::w#7 )
  (byte*) print_char_cursor#53 ← phi( print_sword::@3/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#53
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword::@5 print_sword::@6
  (byte*) print_char_cursor#98 ← phi( print_sword::@5/(byte*) print_char_cursor#5 print_sword::@6/(byte*) print_char_cursor#6 )
  (signed word) print_sword::w#4 ← phi( print_sword::@5/(signed word) print_sword::w#0 print_sword::@6/(signed word) print_sword::w#6 )
  (word~) print_sword::$1 ← ((word)) (signed word) print_sword::w#4
  (word) print_word::w#0 ← (word~) print_sword::$1
  call print_word 
  to:print_sword::@7
print_sword::@7: scope:[print_sword]  from print_sword::@2
  (byte*) print_char_cursor#54 ← phi( print_sword::@2/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#54
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@7
  (byte*) print_char_cursor#55 ← phi( print_sword::@7/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#55
  return 
  to:@return

(void()) print_sbyte((signed byte) print_sbyte::b)
print_sbyte: scope:[print_sbyte]  from sin8u_table::@23
  (byte*) print_char_cursor#111 ← phi( sin8u_table::@23/(byte*) print_char_cursor#39 )
  (signed byte) print_sbyte::b#2 ← phi( sin8u_table::@23/(signed byte) print_sbyte::b#1 )
  (bool~) print_sbyte::$0 ← (signed byte) print_sbyte::b#2 < (number) 0
  if((bool~) print_sbyte::$0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#5 ← phi( print_sbyte/(signed byte) print_sbyte::b#2 )
  (byte*) print_char_cursor#99 ← phi( print_sbyte/(byte*) print_char_cursor#111 )
  (byte) print_char::ch#2 ← (byte) '-'
  call print_char 
  to:print_sbyte::@5
print_sbyte::@5: scope:[print_sbyte]  from print_sbyte::@1
  (signed byte) print_sbyte::b#3 ← phi( print_sbyte::@1/(signed byte) print_sbyte::b#5 )
  (byte*) print_char_cursor#56 ← phi( print_sbyte::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#56
  (signed byte~) print_sbyte::$5 ← - (signed byte) print_sbyte::b#3
  (signed byte) print_sbyte::b#0 ← (signed byte~) print_sbyte::$5
  to:print_sbyte::@2
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#7 ← phi( print_sbyte/(signed byte) print_sbyte::b#2 )
  (byte*) print_char_cursor#100 ← phi( print_sbyte/(byte*) print_char_cursor#111 )
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:print_sbyte::@6
print_sbyte::@6: scope:[print_sbyte]  from print_sbyte::@3
  (signed byte) print_sbyte::b#6 ← phi( print_sbyte::@3/(signed byte) print_sbyte::b#7 )
  (byte*) print_char_cursor#57 ← phi( print_sbyte::@3/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#57
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@5 print_sbyte::@6
  (byte*) print_char_cursor#101 ← phi( print_sbyte::@5/(byte*) print_char_cursor#9 print_sbyte::@6/(byte*) print_char_cursor#10 )
  (signed byte) print_sbyte::b#4 ← phi( print_sbyte::@5/(signed byte) print_sbyte::b#0 print_sbyte::@6/(signed byte) print_sbyte::b#6 )
  (byte~) print_sbyte::$1 ← ((byte)) (signed byte) print_sbyte::b#4
  (byte) print_byte::b#0 ← (byte~) print_sbyte::$1
  call print_byte 
  to:print_sbyte::@7
print_sbyte::@7: scope:[print_sbyte]  from print_sbyte::@2
  (byte*) print_char_cursor#58 ← phi( print_sbyte::@2/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#58
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@7
  (byte*) print_char_cursor#59 ← phi( print_sbyte::@7/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#59
  return 
  to:@return

(void()) print_word((word) print_word::w)
print_word: scope:[print_word]  from print_sword::@2 sin8u_table::@21 sin8u_table::@8
  (byte*) print_char_cursor#102 ← phi( print_sword::@2/(byte*) print_char_cursor#98 sin8u_table::@21/(byte*) print_char_cursor#37 sin8u_table::@8/(byte*) print_char_cursor#26 )
  (word) print_word::w#3 ← phi( print_sword::@2/(word) print_word::w#0 sin8u_table::@21/(word) print_word::w#2 sin8u_table::@8/(word) print_word::w#1 )
  (byte~) print_word::$0 ← > (word) print_word::w#3
  (byte) print_byte::b#1 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#4 ← phi( print_word/(word) print_word::w#3 )
  (byte*) print_char_cursor#60 ← phi( print_word/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#60
  (byte~) print_word::$2 ← < (word) print_word::w#4
  (byte) print_byte::b#2 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#61 ← phi( print_word::@1/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#61
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#62 ← phi( print_word::@2/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#62
  return 
  to:@return
@49: scope:[]  from @32
  (byte*) print_screen#5 ← phi( @32/(byte*) print_screen#0 )
  (byte*) print_char_cursor#114 ← phi( @32/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#31 ← phi( @32/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab ← (const string) $0
  to:@58

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from print_sbyte::@2 print_word print_word::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@14 sin8u_table::@16 sin8u_table::@27
  (byte*) print_char_cursor#103 ← phi( print_sbyte::@2/(byte*) print_char_cursor#101 print_word/(byte*) print_char_cursor#102 print_word::@1/(byte*) print_char_cursor#13 sin8u_table::@10/(byte*) print_char_cursor#28 sin8u_table::@12/(byte*) print_char_cursor#30 sin8u_table::@14/(byte*) print_char_cursor#32 sin8u_table::@16/(byte*) print_char_cursor#34 sin8u_table::@27/(byte*) print_char_cursor#43 )
  (byte) print_byte::b#8 ← phi( print_sbyte::@2/(byte) print_byte::b#0 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 sin8u_table::@10/(byte) print_byte::b#3 sin8u_table::@12/(byte) print_byte::b#4 sin8u_table::@14/(byte) print_byte::b#5 sin8u_table::@16/(byte) print_byte::b#6 sin8u_table::@27/(byte) print_byte::b#7 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (number) 4
  (byte) print_char::ch#4 ← *((byte[]) print_hextab + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#9 ← phi( print_byte/(byte) print_byte::b#8 )
  (byte*) print_char_cursor#63 ← phi( print_byte/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#63
  (number~) print_byte::$2 ← (byte) print_byte::b#9 & (number) $f
  (byte) print_char::ch#5 ← *((byte[]) print_hextab + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#64 ← phi( print_byte::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#64
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#65 ← phi( print_byte::@2/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#65
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3 print_sword::@1 print_sword::@3
  (byte*) print_char_cursor#66 ← phi( print_byte/(byte*) print_char_cursor#103 print_byte::@1/(byte*) print_char_cursor#16 print_sbyte::@1/(byte*) print_char_cursor#99 print_sbyte::@3/(byte*) print_char_cursor#100 print_sword::@1/(byte*) print_char_cursor#96 print_sword::@3/(byte*) print_char_cursor#97 )
  (byte) print_char::ch#6 ← phi( print_byte/(byte) print_char::ch#4 print_byte::@1/(byte) print_char::ch#5 print_sbyte::@1/(byte) print_char::ch#2 print_sbyte::@3/(byte) print_char::ch#3 print_sword::@1/(byte) print_char::ch#0 print_sword::@3/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#66) ← (byte) print_char::ch#6
  (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#66
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#67 ← phi( print_char/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#67
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#3 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#1
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#2
  (byte*) print_char_cursor#21 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#68 ← phi( print_cls::@1/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#15 ← phi( print_cls::@1/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#68
  return 
  to:@return

(void()) main()
main: scope:[main]  from @58
  (byte*) print_char_cursor#104 ← phi( @58/(byte*) print_char_cursor#108 )
  (byte*) print_line_cursor#24 ← phi( @58/(byte*) print_line_cursor#28 )
  (byte*) print_screen#3 ← phi( @58/(byte*) print_screen#4 )
  (word) main::tabsize ← (number) $14
  (byte[$14]) main::sintab ← { fill( $14, 0) }
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_char_cursor#69 ← phi( main/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#16 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#69
  (byte*) sin8u_table::sintab#0 ← (byte[$14]) main::sintab
  (word) sin8u_table::tabsize#0 ← (word) main::tabsize
  (byte) sin8u_table::min#0 ← (number) $a
  (byte) sin8u_table::max#0 ← (number) $ff
  call sin8u_table 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_line_cursor#17 ← phi( main::@1/(byte*) print_line_cursor#10 )
  (byte*) print_char_cursor#70 ← phi( main::@1/(byte*) print_char_cursor#46 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#70
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#17
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) print_char_cursor#71 ← phi( main::@2/(byte*) print_char_cursor#24 )
  (byte*) print_line_cursor#18 ← phi( main::@2/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#18
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#71
  return 
  to:@return

(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
sin8u_table: scope:[sin8u_table]  from main::@1
  (byte*) sin8u_table::sintab#27 ← phi( main::@1/(byte*) sin8u_table::sintab#0 )
  (byte*) print_line_cursor#50 ← phi( main::@1/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#112 ← phi( main::@1/(byte*) print_char_cursor#23 )
  (word) sin8u_table::tabsize#1 ← phi( main::@1/(word) sin8u_table::tabsize#0 )
  (byte) sin8u_table::min#1 ← phi( main::@1/(byte) sin8u_table::min#0 )
  (byte) sin8u_table::max#1 ← phi( main::@1/(byte) sin8u_table::max#0 )
  (byte~) sin8u_table::$0 ← (byte) sin8u_table::max#1 - (byte) sin8u_table::min#1
  (byte) sin8u_table::amplitude#0 ← (byte~) sin8u_table::$0
  (word~) sin8u_table::$1 ← ((word)) (byte) sin8u_table::min#1
  (word~) sin8u_table::$2 ← (word~) sin8u_table::$1 + (byte) sin8u_table::max#1
  (word) sin8u_table::sum#0 ← (word~) sin8u_table::$2
  (number~) sin8u_table::$3 ← (word) sin8u_table::sum#0 / (number) 2
  (number~) sin8u_table::$4 ← (number~) sin8u_table::$3 + (number) 1
  (byte~) sin8u_table::$5 ← ((byte)) (number~) sin8u_table::$4
  (byte) sin8u_table::mid#0 ← (byte~) sin8u_table::$5
  (word) div16u::dividend#0 ← (word) PI2_u4f12
  (word) div16u::divisor#0 ← (word) sin8u_table::tabsize#1
  call div16u 
  (word) div16u::return#2 ← (word) div16u::return#1
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table
  (byte*) sin8u_table::sintab#26 ← phi( sin8u_table/(byte*) sin8u_table::sintab#27 )
  (word) sin8u_table::tabsize#25 ← phi( sin8u_table/(word) sin8u_table::tabsize#1 )
  (byte*) print_line_cursor#48 ← phi( sin8u_table/(byte*) print_line_cursor#50 )
  (byte) sin8u_table::mid#21 ← phi( sin8u_table/(byte) sin8u_table::mid#0 )
  (byte) sin8u_table::amplitude#19 ← phi( sin8u_table/(byte) sin8u_table::amplitude#0 )
  (byte) sin8u_table::max#7 ← phi( sin8u_table/(byte) sin8u_table::max#1 )
  (byte) sin8u_table::min#5 ← phi( sin8u_table/(byte) sin8u_table::min#1 )
  (byte*) print_char_cursor#105 ← phi( sin8u_table/(byte*) print_char_cursor#112 )
  (word) div16u::return#4 ← phi( sin8u_table/(word) div16u::return#2 )
  (word~) sin8u_table::$6 ← (word) div16u::return#4
  (word) sin8u_table::step#0 ← (word~) sin8u_table::$6
  (byte*) print_str::str#1 ← (const string) sin8u_table::str
  call print_str 
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  (byte*) sin8u_table::sintab#25 ← phi( sin8u_table::@7/(byte*) sin8u_table::sintab#26 )
  (word) sin8u_table::tabsize#23 ← phi( sin8u_table::@7/(word) sin8u_table::tabsize#25 )
  (byte*) print_line_cursor#46 ← phi( sin8u_table::@7/(byte*) print_line_cursor#48 )
  (byte) sin8u_table::mid#19 ← phi( sin8u_table::@7/(byte) sin8u_table::mid#21 )
  (byte) sin8u_table::amplitude#16 ← phi( sin8u_table::@7/(byte) sin8u_table::amplitude#19 )
  (byte) sin8u_table::max#6 ← phi( sin8u_table::@7/(byte) sin8u_table::max#7 )
  (byte) sin8u_table::min#4 ← phi( sin8u_table::@7/(byte) sin8u_table::min#5 )
  (word) sin8u_table::step#1 ← phi( sin8u_table::@7/(word) sin8u_table::step#0 )
  (byte*) print_char_cursor#72 ← phi( sin8u_table::@7/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#72
  (word) print_word::w#1 ← (word) sin8u_table::step#1
  call print_word 
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  (word) sin8u_table::step#24 ← phi( sin8u_table::@8/(word) sin8u_table::step#1 )
  (byte*) sin8u_table::sintab#24 ← phi( sin8u_table::@8/(byte*) sin8u_table::sintab#25 )
  (word) sin8u_table::tabsize#21 ← phi( sin8u_table::@8/(word) sin8u_table::tabsize#23 )
  (byte*) print_line_cursor#44 ← phi( sin8u_table::@8/(byte*) print_line_cursor#46 )
  (byte) sin8u_table::mid#17 ← phi( sin8u_table::@8/(byte) sin8u_table::mid#19 )
  (byte) sin8u_table::amplitude#13 ← phi( sin8u_table::@8/(byte) sin8u_table::amplitude#16 )
  (byte) sin8u_table::max#5 ← phi( sin8u_table::@8/(byte) sin8u_table::max#6 )
  (byte) sin8u_table::min#3 ← phi( sin8u_table::@8/(byte) sin8u_table::min#4 )
  (byte*) print_char_cursor#73 ← phi( sin8u_table::@8/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#73
  (byte*) print_str::str#2 ← (const string) sin8u_table::str1
  call print_str 
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  (word) sin8u_table::step#23 ← phi( sin8u_table::@9/(word) sin8u_table::step#24 )
  (byte*) sin8u_table::sintab#22 ← phi( sin8u_table::@9/(byte*) sin8u_table::sintab#24 )
  (word) sin8u_table::tabsize#19 ← phi( sin8u_table::@9/(word) sin8u_table::tabsize#21 )
  (byte*) print_line_cursor#42 ← phi( sin8u_table::@9/(byte*) print_line_cursor#44 )
  (byte) sin8u_table::mid#15 ← phi( sin8u_table::@9/(byte) sin8u_table::mid#17 )
  (byte) sin8u_table::amplitude#10 ← phi( sin8u_table::@9/(byte) sin8u_table::amplitude#13 )
  (byte) sin8u_table::max#4 ← phi( sin8u_table::@9/(byte) sin8u_table::max#5 )
  (byte) sin8u_table::min#2 ← phi( sin8u_table::@9/(byte) sin8u_table::min#3 )
  (byte*) print_char_cursor#74 ← phi( sin8u_table::@9/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#74
  (byte) print_byte::b#3 ← (byte) sin8u_table::min#2
  call print_byte 
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  (word) sin8u_table::step#22 ← phi( sin8u_table::@10/(word) sin8u_table::step#23 )
  (byte*) sin8u_table::sintab#20 ← phi( sin8u_table::@10/(byte*) sin8u_table::sintab#22 )
  (word) sin8u_table::tabsize#17 ← phi( sin8u_table::@10/(word) sin8u_table::tabsize#19 )
  (byte*) print_line_cursor#40 ← phi( sin8u_table::@10/(byte*) print_line_cursor#42 )
  (byte) sin8u_table::mid#12 ← phi( sin8u_table::@10/(byte) sin8u_table::mid#15 )
  (byte) sin8u_table::amplitude#7 ← phi( sin8u_table::@10/(byte) sin8u_table::amplitude#10 )
  (byte) sin8u_table::max#3 ← phi( sin8u_table::@10/(byte) sin8u_table::max#4 )
  (byte*) print_char_cursor#75 ← phi( sin8u_table::@10/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#75
  (byte*) print_str::str#3 ← (const string) sin8u_table::str2
  call print_str 
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  (word) sin8u_table::step#21 ← phi( sin8u_table::@11/(word) sin8u_table::step#22 )
  (byte*) sin8u_table::sintab#18 ← phi( sin8u_table::@11/(byte*) sin8u_table::sintab#20 )
  (word) sin8u_table::tabsize#15 ← phi( sin8u_table::@11/(word) sin8u_table::tabsize#17 )
  (byte*) print_line_cursor#38 ← phi( sin8u_table::@11/(byte*) print_line_cursor#40 )
  (byte) sin8u_table::mid#9 ← phi( sin8u_table::@11/(byte) sin8u_table::mid#12 )
  (byte) sin8u_table::amplitude#5 ← phi( sin8u_table::@11/(byte) sin8u_table::amplitude#7 )
  (byte) sin8u_table::max#2 ← phi( sin8u_table::@11/(byte) sin8u_table::max#3 )
  (byte*) print_char_cursor#76 ← phi( sin8u_table::@11/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#76
  (byte) print_byte::b#4 ← (byte) sin8u_table::max#2
  call print_byte 
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@12
  (word) sin8u_table::step#20 ← phi( sin8u_table::@12/(word) sin8u_table::step#21 )
  (byte*) sin8u_table::sintab#16 ← phi( sin8u_table::@12/(byte*) sin8u_table::sintab#18 )
  (word) sin8u_table::tabsize#13 ← phi( sin8u_table::@12/(word) sin8u_table::tabsize#15 )
  (byte*) print_line_cursor#36 ← phi( sin8u_table::@12/(byte*) print_line_cursor#38 )
  (byte) sin8u_table::mid#7 ← phi( sin8u_table::@12/(byte) sin8u_table::mid#9 )
  (byte) sin8u_table::amplitude#3 ← phi( sin8u_table::@12/(byte) sin8u_table::amplitude#5 )
  (byte*) print_char_cursor#77 ← phi( sin8u_table::@12/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#77
  (byte*) print_str::str#4 ← (const string) sin8u_table::str3
  call print_str 
  to:sin8u_table::@14
sin8u_table::@14: scope:[sin8u_table]  from sin8u_table::@13
  (word) sin8u_table::step#19 ← phi( sin8u_table::@13/(word) sin8u_table::step#20 )
  (byte*) sin8u_table::sintab#14 ← phi( sin8u_table::@13/(byte*) sin8u_table::sintab#16 )
  (word) sin8u_table::tabsize#11 ← phi( sin8u_table::@13/(word) sin8u_table::tabsize#13 )
  (byte*) print_line_cursor#34 ← phi( sin8u_table::@13/(byte*) print_line_cursor#36 )
  (byte) sin8u_table::mid#5 ← phi( sin8u_table::@13/(byte) sin8u_table::mid#7 )
  (byte) sin8u_table::amplitude#1 ← phi( sin8u_table::@13/(byte) sin8u_table::amplitude#3 )
  (byte*) print_char_cursor#78 ← phi( sin8u_table::@13/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#78
  (byte) print_byte::b#5 ← (byte) sin8u_table::amplitude#1
  call print_byte 
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@14
  (word) sin8u_table::step#18 ← phi( sin8u_table::@14/(word) sin8u_table::step#19 )
  (byte*) sin8u_table::sintab#12 ← phi( sin8u_table::@14/(byte*) sin8u_table::sintab#14 )
  (byte) sin8u_table::amplitude#17 ← phi( sin8u_table::@14/(byte) sin8u_table::amplitude#1 )
  (word) sin8u_table::tabsize#9 ← phi( sin8u_table::@14/(word) sin8u_table::tabsize#11 )
  (byte*) print_line_cursor#32 ← phi( sin8u_table::@14/(byte*) print_line_cursor#34 )
  (byte) sin8u_table::mid#3 ← phi( sin8u_table::@14/(byte) sin8u_table::mid#5 )
  (byte*) print_char_cursor#79 ← phi( sin8u_table::@14/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#79
  (byte*) print_str::str#5 ← (const string) sin8u_table::str4
  call print_str 
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  (word) sin8u_table::step#17 ← phi( sin8u_table::@15/(word) sin8u_table::step#18 )
  (byte*) sin8u_table::sintab#10 ← phi( sin8u_table::@15/(byte*) sin8u_table::sintab#12 )
  (byte) sin8u_table::amplitude#14 ← phi( sin8u_table::@15/(byte) sin8u_table::amplitude#17 )
  (word) sin8u_table::tabsize#7 ← phi( sin8u_table::@15/(word) sin8u_table::tabsize#9 )
  (byte*) print_line_cursor#29 ← phi( sin8u_table::@15/(byte*) print_line_cursor#32 )
  (byte) sin8u_table::mid#1 ← phi( sin8u_table::@15/(byte) sin8u_table::mid#3 )
  (byte*) print_char_cursor#80 ← phi( sin8u_table::@15/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#80
  (byte) print_byte::b#6 ← (byte) sin8u_table::mid#1
  call print_byte 
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  (word) sin8u_table::step#16 ← phi( sin8u_table::@16/(word) sin8u_table::step#17 )
  (byte*) sin8u_table::sintab#8 ← phi( sin8u_table::@16/(byte*) sin8u_table::sintab#10 )
  (byte) sin8u_table::mid#13 ← phi( sin8u_table::@16/(byte) sin8u_table::mid#1 )
  (byte) sin8u_table::amplitude#11 ← phi( sin8u_table::@16/(byte) sin8u_table::amplitude#14 )
  (word) sin8u_table::tabsize#5 ← phi( sin8u_table::@16/(word) sin8u_table::tabsize#7 )
  (byte*) print_line_cursor#25 ← phi( sin8u_table::@16/(byte*) print_line_cursor#29 )
  (byte*) print_char_cursor#81 ← phi( sin8u_table::@16/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#81
  call print_ln 
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  (word) sin8u_table::step#15 ← phi( sin8u_table::@17/(word) sin8u_table::step#16 )
  (byte*) sin8u_table::sintab#6 ← phi( sin8u_table::@17/(byte*) sin8u_table::sintab#8 )
  (byte) sin8u_table::mid#10 ← phi( sin8u_table::@17/(byte) sin8u_table::mid#13 )
  (byte) sin8u_table::amplitude#8 ← phi( sin8u_table::@17/(byte) sin8u_table::amplitude#11 )
  (word) sin8u_table::tabsize#3 ← phi( sin8u_table::@17/(word) sin8u_table::tabsize#5 )
  (byte*) print_char_cursor#82 ← phi( sin8u_table::@17/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#19 ← phi( sin8u_table::@17/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#19
  (byte*) print_char_cursor#36 ← (byte*) print_char_cursor#82
  (word) sin8u_table::x#0 ← (number) 0
  (word) sin8u_table::i#0 ← (number) 0
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@18 sin8u_table::@29
  (word) sin8u_table::step#14 ← phi( sin8u_table::@18/(word) sin8u_table::step#15 sin8u_table::@29/(word) sin8u_table::step#2 )
  (byte*) sin8u_table::sintab#5 ← phi( sin8u_table::@18/(byte*) sin8u_table::sintab#6 sin8u_table::@29/(byte*) sin8u_table::sintab#7 )
  (byte) sin8u_table::mid#8 ← phi( sin8u_table::@18/(byte) sin8u_table::mid#10 sin8u_table::@29/(byte) sin8u_table::mid#11 )
  (byte) sin8u_table::amplitude#6 ← phi( sin8u_table::@18/(byte) sin8u_table::amplitude#8 sin8u_table::@29/(byte) sin8u_table::amplitude#9 )
  (byte*) print_line_cursor#27 ← phi( sin8u_table::@18/(byte*) print_line_cursor#8 sin8u_table::@29/(byte*) print_line_cursor#9 )
  (byte*) print_char_cursor#107 ← phi( sin8u_table::@18/(byte*) print_char_cursor#36 sin8u_table::@29/(byte*) print_char_cursor#45 )
  (word) sin8u_table::x#5 ← phi( sin8u_table::@18/(word) sin8u_table::x#0 sin8u_table::@29/(word) sin8u_table::x#1 )
  (word) sin8u_table::tabsize#2 ← phi( sin8u_table::@18/(word) sin8u_table::tabsize#3 sin8u_table::@29/(word) sin8u_table::tabsize#4 )
  (word) sin8u_table::i#2 ← phi( sin8u_table::@18/(word) sin8u_table::i#0 sin8u_table::@29/(word) sin8u_table::i#1 )
  (bool~) sin8u_table::$18 ← (word) sin8u_table::i#2 < (word) sin8u_table::tabsize#2
  if((bool~) sin8u_table::$18) goto sin8u_table::@2
  to:sin8u_table::@return
sin8u_table::@2: scope:[sin8u_table]  from sin8u_table::@1
  (word) sin8u_table::tabsize#26 ← phi( sin8u_table::@1/(word) sin8u_table::tabsize#2 )
  (word) sin8u_table::i#14 ← phi( sin8u_table::@1/(word) sin8u_table::i#2 )
  (word) sin8u_table::step#13 ← phi( sin8u_table::@1/(word) sin8u_table::step#14 )
  (byte*) print_line_cursor#49 ← phi( sin8u_table::@1/(byte*) print_line_cursor#27 )
  (byte*) print_char_cursor#115 ← phi( sin8u_table::@1/(byte*) print_char_cursor#107 )
  (byte*) sin8u_table::sintab#4 ← phi( sin8u_table::@1/(byte*) sin8u_table::sintab#5 )
  (byte) sin8u_table::mid#6 ← phi( sin8u_table::@1/(byte) sin8u_table::mid#8 )
  (byte) sin8u_table::amplitude#4 ← phi( sin8u_table::@1/(byte) sin8u_table::amplitude#6 )
  (word) sin8u_table::x#2 ← phi( sin8u_table::@1/(word) sin8u_table::x#5 )
  (word) sin8s::x#2 ← (word) sin8u_table::x#2
  call sin8s 
  (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#1
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@2
  (word) sin8u_table::tabsize#24 ← phi( sin8u_table::@2/(word) sin8u_table::tabsize#26 )
  (word) sin8u_table::i#13 ← phi( sin8u_table::@2/(word) sin8u_table::i#14 )
  (word) sin8u_table::step#12 ← phi( sin8u_table::@2/(word) sin8u_table::step#13 )
  (byte*) print_line_cursor#47 ← phi( sin8u_table::@2/(byte*) print_line_cursor#49 )
  (word) sin8u_table::x#8 ← phi( sin8u_table::@2/(word) sin8u_table::x#2 )
  (byte*) print_char_cursor#113 ← phi( sin8u_table::@2/(byte*) print_char_cursor#115 )
  (byte*) sin8u_table::sintab#3 ← phi( sin8u_table::@2/(byte*) sin8u_table::sintab#4 )
  (byte) sin8u_table::mid#4 ← phi( sin8u_table::@2/(byte) sin8u_table::mid#6 )
  (byte) sin8u_table::amplitude#2 ← phi( sin8u_table::@2/(byte) sin8u_table::amplitude#4 )
  (signed byte) sin8s::return#4 ← phi( sin8u_table::@2/(signed byte) sin8s::return#2 )
  (signed byte~) sin8u_table::$19 ← (signed byte) sin8s::return#4
  (signed byte) sin8u_table::sinx#0 ← (signed byte~) sin8u_table::$19
  (number~) sin8u_table::$20 ← (byte) sin8u_table::amplitude#2 + (number) 1
  (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0
  (byte) mul8su::b#0 ← (number~) sin8u_table::$20
  call mul8su 
  (signed word) mul8su::return#2 ← (signed word) mul8su::return#1
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  (byte) sin8u_table::amplitude#25 ← phi( sin8u_table::@19/(byte) sin8u_table::amplitude#2 )
  (word) sin8u_table::tabsize#22 ← phi( sin8u_table::@19/(word) sin8u_table::tabsize#24 )
  (word) sin8u_table::i#12 ← phi( sin8u_table::@19/(word) sin8u_table::i#13 )
  (word) sin8u_table::step#11 ← phi( sin8u_table::@19/(word) sin8u_table::step#12 )
  (byte*) print_line_cursor#45 ← phi( sin8u_table::@19/(byte*) print_line_cursor#47 )
  (signed byte) sin8u_table::sinx#4 ← phi( sin8u_table::@19/(signed byte) sin8u_table::sinx#0 )
  (word) sin8u_table::x#6 ← phi( sin8u_table::@19/(word) sin8u_table::x#8 )
  (byte*) print_char_cursor#106 ← phi( sin8u_table::@19/(byte*) print_char_cursor#113 )
  (byte*) sin8u_table::sintab#2 ← phi( sin8u_table::@19/(byte*) sin8u_table::sintab#3 )
  (byte) sin8u_table::mid#2 ← phi( sin8u_table::@19/(byte) sin8u_table::mid#4 )
  (signed word) mul8su::return#4 ← phi( sin8u_table::@19/(signed word) mul8su::return#2 )
  (signed word~) sin8u_table::$21 ← (signed word) mul8su::return#4
  (signed word) sin8u_table::sinx_sc#0 ← (signed word~) sin8u_table::$21
  (byte~) sin8u_table::$22 ← > (signed word) sin8u_table::sinx_sc#0
  (byte~) sin8u_table::$23 ← (byte) sin8u_table::mid#2 + (byte~) sin8u_table::$22
  (byte) sin8u_table::sinx_tr#0 ← (byte~) sin8u_table::$23
  *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0
  (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2
  (byte*) print_str::str#6 ← (const string) sin8u_table::str5
  call print_str 
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  (byte*) sin8u_table::sintab#23 ← phi( sin8u_table::@20/(byte*) sin8u_table::sintab#1 )
  (byte) sin8u_table::mid#25 ← phi( sin8u_table::@20/(byte) sin8u_table::mid#2 )
  (byte) sin8u_table::amplitude#24 ← phi( sin8u_table::@20/(byte) sin8u_table::amplitude#25 )
  (word) sin8u_table::tabsize#20 ← phi( sin8u_table::@20/(word) sin8u_table::tabsize#22 )
  (word) sin8u_table::i#11 ← phi( sin8u_table::@20/(word) sin8u_table::i#12 )
  (word) sin8u_table::step#10 ← phi( sin8u_table::@20/(word) sin8u_table::step#11 )
  (byte*) print_line_cursor#43 ← phi( sin8u_table::@20/(byte*) print_line_cursor#45 )
  (byte) sin8u_table::sinx_tr#7 ← phi( sin8u_table::@20/(byte) sin8u_table::sinx_tr#0 )
  (signed word) sin8u_table::sinx_sc#5 ← phi( sin8u_table::@20/(signed word) sin8u_table::sinx_sc#0 )
  (signed byte) sin8u_table::sinx#3 ← phi( sin8u_table::@20/(signed byte) sin8u_table::sinx#4 )
  (word) sin8u_table::x#3 ← phi( sin8u_table::@20/(word) sin8u_table::x#6 )
  (byte*) print_char_cursor#83 ← phi( sin8u_table::@20/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#37 ← (byte*) print_char_cursor#83
  (word) print_word::w#2 ← (word) sin8u_table::x#3
  call print_word 
  to:sin8u_table::@22
sin8u_table::@22: scope:[sin8u_table]  from sin8u_table::@21
  (byte*) sin8u_table::sintab#21 ← phi( sin8u_table::@21/(byte*) sin8u_table::sintab#23 )
  (byte) sin8u_table::mid#24 ← phi( sin8u_table::@21/(byte) sin8u_table::mid#25 )
  (byte) sin8u_table::amplitude#23 ← phi( sin8u_table::@21/(byte) sin8u_table::amplitude#24 )
  (word) sin8u_table::tabsize#18 ← phi( sin8u_table::@21/(word) sin8u_table::tabsize#20 )
  (word) sin8u_table::i#10 ← phi( sin8u_table::@21/(word) sin8u_table::i#11 )
  (word) sin8u_table::step#9 ← phi( sin8u_table::@21/(word) sin8u_table::step#10 )
  (word) sin8u_table::x#14 ← phi( sin8u_table::@21/(word) sin8u_table::x#3 )
  (byte*) print_line_cursor#41 ← phi( sin8u_table::@21/(byte*) print_line_cursor#43 )
  (byte) sin8u_table::sinx_tr#6 ← phi( sin8u_table::@21/(byte) sin8u_table::sinx_tr#7 )
  (signed word) sin8u_table::sinx_sc#4 ← phi( sin8u_table::@21/(signed word) sin8u_table::sinx_sc#5 )
  (signed byte) sin8u_table::sinx#2 ← phi( sin8u_table::@21/(signed byte) sin8u_table::sinx#3 )
  (byte*) print_char_cursor#84 ← phi( sin8u_table::@21/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#38 ← (byte*) print_char_cursor#84
  (byte*) print_str::str#7 ← (const string) sin8u_table::str6
  call print_str 
  to:sin8u_table::@23
sin8u_table::@23: scope:[sin8u_table]  from sin8u_table::@22
  (byte*) sin8u_table::sintab#19 ← phi( sin8u_table::@22/(byte*) sin8u_table::sintab#21 )
  (byte) sin8u_table::mid#23 ← phi( sin8u_table::@22/(byte) sin8u_table::mid#24 )
  (byte) sin8u_table::amplitude#22 ← phi( sin8u_table::@22/(byte) sin8u_table::amplitude#23 )
  (word) sin8u_table::tabsize#16 ← phi( sin8u_table::@22/(word) sin8u_table::tabsize#18 )
  (word) sin8u_table::i#9 ← phi( sin8u_table::@22/(word) sin8u_table::i#10 )
  (word) sin8u_table::step#8 ← phi( sin8u_table::@22/(word) sin8u_table::step#9 )
  (word) sin8u_table::x#13 ← phi( sin8u_table::@22/(word) sin8u_table::x#14 )
  (byte*) print_line_cursor#39 ← phi( sin8u_table::@22/(byte*) print_line_cursor#41 )
  (byte) sin8u_table::sinx_tr#5 ← phi( sin8u_table::@22/(byte) sin8u_table::sinx_tr#6 )
  (signed word) sin8u_table::sinx_sc#3 ← phi( sin8u_table::@22/(signed word) sin8u_table::sinx_sc#4 )
  (signed byte) sin8u_table::sinx#1 ← phi( sin8u_table::@22/(signed byte) sin8u_table::sinx#2 )
  (byte*) print_char_cursor#85 ← phi( sin8u_table::@22/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#39 ← (byte*) print_char_cursor#85
  (signed byte) print_sbyte::b#1 ← (signed byte) sin8u_table::sinx#1
  call print_sbyte 
  to:sin8u_table::@24
sin8u_table::@24: scope:[sin8u_table]  from sin8u_table::@23
  (byte*) sin8u_table::sintab#17 ← phi( sin8u_table::@23/(byte*) sin8u_table::sintab#19 )
  (byte) sin8u_table::mid#22 ← phi( sin8u_table::@23/(byte) sin8u_table::mid#23 )
  (byte) sin8u_table::amplitude#21 ← phi( sin8u_table::@23/(byte) sin8u_table::amplitude#22 )
  (word) sin8u_table::tabsize#14 ← phi( sin8u_table::@23/(word) sin8u_table::tabsize#16 )
  (word) sin8u_table::i#8 ← phi( sin8u_table::@23/(word) sin8u_table::i#9 )
  (word) sin8u_table::step#7 ← phi( sin8u_table::@23/(word) sin8u_table::step#8 )
  (word) sin8u_table::x#12 ← phi( sin8u_table::@23/(word) sin8u_table::x#13 )
  (byte*) print_line_cursor#37 ← phi( sin8u_table::@23/(byte*) print_line_cursor#39 )
  (byte) sin8u_table::sinx_tr#4 ← phi( sin8u_table::@23/(byte) sin8u_table::sinx_tr#5 )
  (signed word) sin8u_table::sinx_sc#2 ← phi( sin8u_table::@23/(signed word) sin8u_table::sinx_sc#3 )
  (byte*) print_char_cursor#86 ← phi( sin8u_table::@23/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#40 ← (byte*) print_char_cursor#86
  (byte*) print_str::str#8 ← (const string) sin8u_table::str7
  call print_str 
  to:sin8u_table::@25
sin8u_table::@25: scope:[sin8u_table]  from sin8u_table::@24
  (byte*) sin8u_table::sintab#15 ← phi( sin8u_table::@24/(byte*) sin8u_table::sintab#17 )
  (byte) sin8u_table::mid#20 ← phi( sin8u_table::@24/(byte) sin8u_table::mid#22 )
  (byte) sin8u_table::amplitude#20 ← phi( sin8u_table::@24/(byte) sin8u_table::amplitude#21 )
  (word) sin8u_table::tabsize#12 ← phi( sin8u_table::@24/(word) sin8u_table::tabsize#14 )
  (word) sin8u_table::i#7 ← phi( sin8u_table::@24/(word) sin8u_table::i#8 )
  (word) sin8u_table::step#6 ← phi( sin8u_table::@24/(word) sin8u_table::step#7 )
  (word) sin8u_table::x#11 ← phi( sin8u_table::@24/(word) sin8u_table::x#12 )
  (byte*) print_line_cursor#35 ← phi( sin8u_table::@24/(byte*) print_line_cursor#37 )
  (byte) sin8u_table::sinx_tr#3 ← phi( sin8u_table::@24/(byte) sin8u_table::sinx_tr#4 )
  (signed word) sin8u_table::sinx_sc#1 ← phi( sin8u_table::@24/(signed word) sin8u_table::sinx_sc#2 )
  (byte*) print_char_cursor#87 ← phi( sin8u_table::@24/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#41 ← (byte*) print_char_cursor#87
  (signed word) print_sword::w#1 ← (signed word) sin8u_table::sinx_sc#1
  call print_sword 
  to:sin8u_table::@26
sin8u_table::@26: scope:[sin8u_table]  from sin8u_table::@25
  (byte*) sin8u_table::sintab#13 ← phi( sin8u_table::@25/(byte*) sin8u_table::sintab#15 )
  (byte) sin8u_table::mid#18 ← phi( sin8u_table::@25/(byte) sin8u_table::mid#20 )
  (byte) sin8u_table::amplitude#18 ← phi( sin8u_table::@25/(byte) sin8u_table::amplitude#20 )
  (word) sin8u_table::tabsize#10 ← phi( sin8u_table::@25/(word) sin8u_table::tabsize#12 )
  (word) sin8u_table::i#6 ← phi( sin8u_table::@25/(word) sin8u_table::i#7 )
  (word) sin8u_table::step#5 ← phi( sin8u_table::@25/(word) sin8u_table::step#6 )
  (word) sin8u_table::x#10 ← phi( sin8u_table::@25/(word) sin8u_table::x#11 )
  (byte*) print_line_cursor#33 ← phi( sin8u_table::@25/(byte*) print_line_cursor#35 )
  (byte) sin8u_table::sinx_tr#2 ← phi( sin8u_table::@25/(byte) sin8u_table::sinx_tr#3 )
  (byte*) print_char_cursor#88 ← phi( sin8u_table::@25/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#42 ← (byte*) print_char_cursor#88
  (byte*) print_str::str#9 ← (const string) sin8u_table::str8
  call print_str 
  to:sin8u_table::@27
sin8u_table::@27: scope:[sin8u_table]  from sin8u_table::@26
  (byte*) sin8u_table::sintab#11 ← phi( sin8u_table::@26/(byte*) sin8u_table::sintab#13 )
  (byte) sin8u_table::mid#16 ← phi( sin8u_table::@26/(byte) sin8u_table::mid#18 )
  (byte) sin8u_table::amplitude#15 ← phi( sin8u_table::@26/(byte) sin8u_table::amplitude#18 )
  (word) sin8u_table::tabsize#8 ← phi( sin8u_table::@26/(word) sin8u_table::tabsize#10 )
  (word) sin8u_table::i#5 ← phi( sin8u_table::@26/(word) sin8u_table::i#6 )
  (word) sin8u_table::step#4 ← phi( sin8u_table::@26/(word) sin8u_table::step#5 )
  (word) sin8u_table::x#9 ← phi( sin8u_table::@26/(word) sin8u_table::x#10 )
  (byte*) print_line_cursor#30 ← phi( sin8u_table::@26/(byte*) print_line_cursor#33 )
  (byte) sin8u_table::sinx_tr#1 ← phi( sin8u_table::@26/(byte) sin8u_table::sinx_tr#2 )
  (byte*) print_char_cursor#89 ← phi( sin8u_table::@26/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#43 ← (byte*) print_char_cursor#89
  (byte) print_byte::b#7 ← (byte) sin8u_table::sinx_tr#1
  call print_byte 
  to:sin8u_table::@28
sin8u_table::@28: scope:[sin8u_table]  from sin8u_table::@27
  (byte*) sin8u_table::sintab#9 ← phi( sin8u_table::@27/(byte*) sin8u_table::sintab#11 )
  (byte) sin8u_table::mid#14 ← phi( sin8u_table::@27/(byte) sin8u_table::mid#16 )
  (byte) sin8u_table::amplitude#12 ← phi( sin8u_table::@27/(byte) sin8u_table::amplitude#15 )
  (word) sin8u_table::tabsize#6 ← phi( sin8u_table::@27/(word) sin8u_table::tabsize#8 )
  (word) sin8u_table::i#4 ← phi( sin8u_table::@27/(word) sin8u_table::i#5 )
  (word) sin8u_table::step#3 ← phi( sin8u_table::@27/(word) sin8u_table::step#4 )
  (word) sin8u_table::x#7 ← phi( sin8u_table::@27/(word) sin8u_table::x#9 )
  (byte*) print_line_cursor#26 ← phi( sin8u_table::@27/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#90 ← phi( sin8u_table::@27/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#44 ← (byte*) print_char_cursor#90
  call print_ln 
  to:sin8u_table::@29
sin8u_table::@29: scope:[sin8u_table]  from sin8u_table::@28
  (byte*) sin8u_table::sintab#7 ← phi( sin8u_table::@28/(byte*) sin8u_table::sintab#9 )
  (byte) sin8u_table::mid#11 ← phi( sin8u_table::@28/(byte) sin8u_table::mid#14 )
  (byte) sin8u_table::amplitude#9 ← phi( sin8u_table::@28/(byte) sin8u_table::amplitude#12 )
  (word) sin8u_table::tabsize#4 ← phi( sin8u_table::@28/(word) sin8u_table::tabsize#6 )
  (word) sin8u_table::i#3 ← phi( sin8u_table::@28/(word) sin8u_table::i#4 )
  (word) sin8u_table::step#2 ← phi( sin8u_table::@28/(word) sin8u_table::step#3 )
  (word) sin8u_table::x#4 ← phi( sin8u_table::@28/(word) sin8u_table::x#7 )
  (byte*) print_char_cursor#91 ← phi( sin8u_table::@28/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#20 ← phi( sin8u_table::@28/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#20
  (byte*) print_char_cursor#45 ← (byte*) print_char_cursor#91
  (word~) sin8u_table::$33 ← (word) sin8u_table::x#4 + (word) sin8u_table::step#2
  (word) sin8u_table::x#1 ← (word~) sin8u_table::$33
  (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#3
  to:sin8u_table::@1
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@1
  (byte*) print_line_cursor#21 ← phi( sin8u_table::@1/(byte*) print_line_cursor#27 )
  (byte*) print_char_cursor#92 ← phi( sin8u_table::@1/(byte*) print_char_cursor#107 )
  (byte*) print_char_cursor#46 ← (byte*) print_char_cursor#92
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#21
  return 
  to:@return
@58: scope:[]  from @49
  (byte*) print_screen#4 ← phi( @49/(byte*) print_screen#5 )
  (byte*) print_char_cursor#108 ← phi( @49/(byte*) print_char_cursor#114 )
  (byte*) print_line_cursor#28 ← phi( @49/(byte*) print_line_cursor#31 )
  call main 
  to:@59
@59: scope:[]  from @58
  (byte*) print_char_cursor#93 ← phi( @58/(byte*) print_char_cursor#25 )
  (byte*) print_line_cursor#22 ← phi( @58/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#22
  (byte*) print_char_cursor#47 ← (byte*) print_char_cursor#93
  to:@end
@end: scope:[]  from @59

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"z
(label) @13
(label) @32
(label) @49
(label) @58
(label) @59
(label) @begin
(label) @end
(word) PI2_u4f12
(word) PI_HALF_u4f12
(word) PI_u4f12
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@2
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(number~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(number~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[$14]) main::sintab
(word) main::tabsize
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@5
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$0
(byte~) mul8su::$1
(byte~) mul8su::$10
(word~) mul8su::$2
(bool~) mul8su::$3
(bool~) mul8su::$4
(signed word~) mul8su::$5
(byte~) mul8su::$7
(byte~) mul8su::$8
(byte~) mul8su::$9
(label) mul8su::@1
(label) mul8su::@2
(label) mul8su::@4
(label) mul8su::@return
(signed byte) mul8su::a
(signed byte) mul8su::a#0
(signed byte) mul8su::a#1
(signed byte) mul8su::a#2
(byte) mul8su::b
(byte) mul8su::b#0
(byte) mul8su::b#1
(byte) mul8su::b#2
(byte) mul8su::b#3
(word) mul8su::m
(word) mul8su::m#0
(word) mul8su::m#1
(word) mul8su::m#2
(word) mul8su::m#3
(signed word) mul8su::return
(signed word) mul8su::return#0
(signed word) mul8su::return#1
(signed word) mul8su::return#2
(signed word) mul8su::return#3
(signed word) mul8su::return#4
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(bool~) mul8u::$0
(number~) mul8u::$1
(bool~) mul8u::$2
(bool~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@7
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0
(byte) mul8u::a#1
(byte) mul8u::a#2
(byte) mul8u::a#3
(byte) mul8u::a#4
(byte) mul8u::a#5
(byte) mul8u::a#6
(byte) mul8u::a#7
(byte) mul8u::b
(byte) mul8u::b#0
(byte) mul8u::b#1
(byte) mul8u::b#2
(word) mul8u::mb
(word) mul8u::mb#0
(word) mul8u::mb#1
(word) mul8u::mb#2
(word) mul8u::mb#3
(word) mul8u::mb#4
(word) mul8u::mb#5
(word) mul8u::res
(word) mul8u::res#0
(word) mul8u::res#1
(word) mul8u::res#2
(word) mul8u::res#3
(word) mul8u::res#4
(word) mul8u::res#5
(word) mul8u::res#6
(word) mul8u::return
(word) mul8u::return#0
(word) mul8u::return#1
(word) mul8u::return#2
(word) mul8u::return#3
(word) mul8u::return#4
(word) mul8u::return#5
(word) mul8u::return#6
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0
(word~) mulu8_sel::$1
(byte~) mulu8_sel::$2
(label) mulu8_sel::@2
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0
(byte) mulu8_sel::return#1
(byte) mulu8_sel::return#10
(byte) mulu8_sel::return#11
(byte) mulu8_sel::return#12
(byte) mulu8_sel::return#2
(byte) mulu8_sel::return#3
(byte) mulu8_sel::return#4
(byte) mulu8_sel::return#5
(byte) mulu8_sel::return#6
(byte) mulu8_sel::return#7
(byte) mulu8_sel::return#8
(byte) mulu8_sel::return#9
(byte) mulu8_sel::select
(byte) mulu8_sel::select#0
(byte) mulu8_sel::select#1
(byte) mulu8_sel::select#2
(byte) mulu8_sel::select#3
(byte) mulu8_sel::select#4
(byte) mulu8_sel::select#5
(byte) mulu8_sel::select#6
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0
(byte) mulu8_sel::v1#1
(byte) mulu8_sel::v1#2
(byte) mulu8_sel::v1#3
(byte) mulu8_sel::v1#4
(byte) mulu8_sel::v1#5
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0
(byte) mulu8_sel::v2#1
(byte) mulu8_sel::v2#2
(byte) mulu8_sel::v2#3
(byte) mulu8_sel::v2#4
(byte) mulu8_sel::v2#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(byte) print_byte::b#5
(byte) print_byte::b#6
(byte) print_byte::b#7
(byte) print_byte::b#8
(byte) print_byte::b#9
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte) print_char::ch#6
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#103
(byte*) print_char_cursor#104
(byte*) print_char_cursor#105
(byte*) print_char_cursor#106
(byte*) print_char_cursor#107
(byte*) print_char_cursor#108
(byte*) print_char_cursor#109
(byte*) print_char_cursor#11
(byte*) print_char_cursor#110
(byte*) print_char_cursor#111
(byte*) print_char_cursor#112
(byte*) print_char_cursor#113
(byte*) print_char_cursor#114
(byte*) print_char_cursor#115
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(bool~) print_sbyte::$0
(byte~) print_sbyte::$1
(signed byte~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@5
(label) print_sbyte::@6
(label) print_sbyte::@7
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0
(signed byte) print_sbyte::b#1
(signed byte) print_sbyte::b#2
(signed byte) print_sbyte::b#3
(signed byte) print_sbyte::b#4
(signed byte) print_sbyte::b#5
(signed byte) print_sbyte::b#6
(signed byte) print_sbyte::b#7
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_sword((signed word) print_sword::w)
(bool~) print_sword::$0
(word~) print_sword::$1
(signed word~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@5
(label) print_sword::@6
(label) print_sword::@7
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(signed word) print_sword::w#6
(signed word) print_sword::w#7
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3
(word) print_word::w#4
(signed byte()) sin8s((word) sin8s::x)
(bool~) sin8s::$0
(bool~) sin8s::$1
(byte~) sin8s::$10
(byte~) sin8s::$11
(byte~) sin8s::$12
(byte~) sin8s::$13
(bool~) sin8s::$14
(bool~) sin8s::$15
(signed byte~) sin8s::$16
(bool~) sin8s::$17
(bool~) sin8s::$18
(word~) sin8s::$19
(bool~) sin8s::$2
(word~) sin8s::$20
(signed byte~) sin8s::$21
(signed byte~) sin8s::$22
(bool~) sin8s::$3
(word~) sin8s::$4
(byte~) sin8s::$5
(byte~) sin8s::$6
(byte~) sin8s::$7
(byte~) sin8s::$8
(byte~) sin8s::$9
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@return
(byte) sin8s::DIV_6
(byte) sin8s::isUpper
(byte) sin8s::isUpper#0
(byte) sin8s::isUpper#1
(byte) sin8s::isUpper#10
(byte) sin8s::isUpper#11
(byte) sin8s::isUpper#2
(byte) sin8s::isUpper#3
(byte) sin8s::isUpper#4
(byte) sin8s::isUpper#5
(byte) sin8s::isUpper#6
(byte) sin8s::isUpper#7
(byte) sin8s::isUpper#8
(byte) sin8s::isUpper#9
(signed byte) sin8s::return
(signed byte) sin8s::return#0
(signed byte) sin8s::return#1
(signed byte) sin8s::return#2
(signed byte) sin8s::return#3
(signed byte) sin8s::return#4
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#0
(signed byte) sin8s::sinx#1
(signed byte) sin8s::sinx#2
(byte) sin8s::usinx
(byte) sin8s::usinx#0
(byte) sin8s::usinx#1
(byte) sin8s::usinx#2
(byte) sin8s::usinx#3
(byte) sin8s::usinx#4
(byte) sin8s::usinx#5
(byte) sin8s::usinx#6
(byte) sin8s::usinx#7
(word) sin8s::x
(word) sin8s::x#0
(word) sin8s::x#1
(word) sin8s::x#2
(word) sin8s::x#3
(word) sin8s::x#4
(word) sin8s::x#5
(word) sin8s::x#6
(word) sin8s::x#7
(byte) sin8s::x1
(byte) sin8s::x1#0
(byte) sin8s::x1#1
(byte) sin8s::x1#2
(byte) sin8s::x1#3
(byte) sin8s::x1#4
(byte) sin8s::x2
(byte) sin8s::x2#0
(byte) sin8s::x3
(byte) sin8s::x3#0
(byte) sin8s::x3#1
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0
(byte) sin8s::x4
(byte) sin8s::x4#0
(byte) sin8s::x5
(byte) sin8s::x5#0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte~) sin8u_table::$0
(word~) sin8u_table::$1
(bool~) sin8u_table::$18
(signed byte~) sin8u_table::$19
(word~) sin8u_table::$2
(number~) sin8u_table::$20
(signed word~) sin8u_table::$21
(byte~) sin8u_table::$22
(byte~) sin8u_table::$23
(number~) sin8u_table::$3
(word~) sin8u_table::$33
(number~) sin8u_table::$4
(byte~) sin8u_table::$5
(word~) sin8u_table::$6
(label) sin8u_table::@1
(label) sin8u_table::@10
(label) sin8u_table::@11
(label) sin8u_table::@12
(label) sin8u_table::@13
(label) sin8u_table::@14
(label) sin8u_table::@15
(label) sin8u_table::@16
(label) sin8u_table::@17
(label) sin8u_table::@18
(label) sin8u_table::@19
(label) sin8u_table::@2
(label) sin8u_table::@20
(label) sin8u_table::@21
(label) sin8u_table::@22
(label) sin8u_table::@23
(label) sin8u_table::@24
(label) sin8u_table::@25
(label) sin8u_table::@26
(label) sin8u_table::@27
(label) sin8u_table::@28
(label) sin8u_table::@29
(label) sin8u_table::@7
(label) sin8u_table::@8
(label) sin8u_table::@9
(label) sin8u_table::@return
(byte) sin8u_table::amplitude
(byte) sin8u_table::amplitude#0
(byte) sin8u_table::amplitude#1
(byte) sin8u_table::amplitude#10
(byte) sin8u_table::amplitude#11
(byte) sin8u_table::amplitude#12
(byte) sin8u_table::amplitude#13
(byte) sin8u_table::amplitude#14
(byte) sin8u_table::amplitude#15
(byte) sin8u_table::amplitude#16
(byte) sin8u_table::amplitude#17
(byte) sin8u_table::amplitude#18
(byte) sin8u_table::amplitude#19
(byte) sin8u_table::amplitude#2
(byte) sin8u_table::amplitude#20
(byte) sin8u_table::amplitude#21
(byte) sin8u_table::amplitude#22
(byte) sin8u_table::amplitude#23
(byte) sin8u_table::amplitude#24
(byte) sin8u_table::amplitude#25
(byte) sin8u_table::amplitude#3
(byte) sin8u_table::amplitude#4
(byte) sin8u_table::amplitude#5
(byte) sin8u_table::amplitude#6
(byte) sin8u_table::amplitude#7
(byte) sin8u_table::amplitude#8
(byte) sin8u_table::amplitude#9
(word) sin8u_table::i
(word) sin8u_table::i#0
(word) sin8u_table::i#1
(word) sin8u_table::i#10
(word) sin8u_table::i#11
(word) sin8u_table::i#12
(word) sin8u_table::i#13
(word) sin8u_table::i#14
(word) sin8u_table::i#2
(word) sin8u_table::i#3
(word) sin8u_table::i#4
(word) sin8u_table::i#5
(word) sin8u_table::i#6
(word) sin8u_table::i#7
(word) sin8u_table::i#8
(word) sin8u_table::i#9
(byte) sin8u_table::max
(byte) sin8u_table::max#0
(byte) sin8u_table::max#1
(byte) sin8u_table::max#2
(byte) sin8u_table::max#3
(byte) sin8u_table::max#4
(byte) sin8u_table::max#5
(byte) sin8u_table::max#6
(byte) sin8u_table::max#7
(byte) sin8u_table::mid
(byte) sin8u_table::mid#0
(byte) sin8u_table::mid#1
(byte) sin8u_table::mid#10
(byte) sin8u_table::mid#11
(byte) sin8u_table::mid#12
(byte) sin8u_table::mid#13
(byte) sin8u_table::mid#14
(byte) sin8u_table::mid#15
(byte) sin8u_table::mid#16
(byte) sin8u_table::mid#17
(byte) sin8u_table::mid#18
(byte) sin8u_table::mid#19
(byte) sin8u_table::mid#2
(byte) sin8u_table::mid#20
(byte) sin8u_table::mid#21
(byte) sin8u_table::mid#22
(byte) sin8u_table::mid#23
(byte) sin8u_table::mid#24
(byte) sin8u_table::mid#25
(byte) sin8u_table::mid#3
(byte) sin8u_table::mid#4
(byte) sin8u_table::mid#5
(byte) sin8u_table::mid#6
(byte) sin8u_table::mid#7
(byte) sin8u_table::mid#8
(byte) sin8u_table::mid#9
(byte) sin8u_table::min
(byte) sin8u_table::min#0
(byte) sin8u_table::min#1
(byte) sin8u_table::min#2
(byte) sin8u_table::min#3
(byte) sin8u_table::min#4
(byte) sin8u_table::min#5
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#0
(byte*) sin8u_table::sintab#1
(byte*) sin8u_table::sintab#10
(byte*) sin8u_table::sintab#11
(byte*) sin8u_table::sintab#12
(byte*) sin8u_table::sintab#13
(byte*) sin8u_table::sintab#14
(byte*) sin8u_table::sintab#15
(byte*) sin8u_table::sintab#16
(byte*) sin8u_table::sintab#17
(byte*) sin8u_table::sintab#18
(byte*) sin8u_table::sintab#19
(byte*) sin8u_table::sintab#2
(byte*) sin8u_table::sintab#20
(byte*) sin8u_table::sintab#21
(byte*) sin8u_table::sintab#22
(byte*) sin8u_table::sintab#23
(byte*) sin8u_table::sintab#24
(byte*) sin8u_table::sintab#25
(byte*) sin8u_table::sintab#26
(byte*) sin8u_table::sintab#27
(byte*) sin8u_table::sintab#3
(byte*) sin8u_table::sintab#4
(byte*) sin8u_table::sintab#5
(byte*) sin8u_table::sintab#6
(byte*) sin8u_table::sintab#7
(byte*) sin8u_table::sintab#8
(byte*) sin8u_table::sintab#9
(signed byte) sin8u_table::sinx
(signed byte) sin8u_table::sinx#0
(signed byte) sin8u_table::sinx#1
(signed byte) sin8u_table::sinx#2
(signed byte) sin8u_table::sinx#3
(signed byte) sin8u_table::sinx#4
(signed word) sin8u_table::sinx_sc
(signed word) sin8u_table::sinx_sc#0
(signed word) sin8u_table::sinx_sc#1
(signed word) sin8u_table::sinx_sc#2
(signed word) sin8u_table::sinx_sc#3
(signed word) sin8u_table::sinx_sc#4
(signed word) sin8u_table::sinx_sc#5
(byte) sin8u_table::sinx_tr
(byte) sin8u_table::sinx_tr#0
(byte) sin8u_table::sinx_tr#1
(byte) sin8u_table::sinx_tr#2
(byte) sin8u_table::sinx_tr#3
(byte) sin8u_table::sinx_tr#4
(byte) sin8u_table::sinx_tr#5
(byte) sin8u_table::sinx_tr#6
(byte) sin8u_table::sinx_tr#7
(word) sin8u_table::step
(word) sin8u_table::step#0
(word) sin8u_table::step#1
(word) sin8u_table::step#10
(word) sin8u_table::step#11
(word) sin8u_table::step#12
(word) sin8u_table::step#13
(word) sin8u_table::step#14
(word) sin8u_table::step#15
(word) sin8u_table::step#16
(word) sin8u_table::step#17
(word) sin8u_table::step#18
(word) sin8u_table::step#19
(word) sin8u_table::step#2
(word) sin8u_table::step#20
(word) sin8u_table::step#21
(word) sin8u_table::step#22
(word) sin8u_table::step#23
(word) sin8u_table::step#24
(word) sin8u_table::step#3
(word) sin8u_table::step#4
(word) sin8u_table::step#5
(word) sin8u_table::step#6
(word) sin8u_table::step#7
(word) sin8u_table::step#8
(word) sin8u_table::step#9
(const string) sin8u_table::str = (string) "step:"
(const string) sin8u_table::str1 = (string) " min:"
(const string) sin8u_table::str2 = (string) " max:"
(const string) sin8u_table::str3 = (string) " ampl:"
(const string) sin8u_table::str4 = (string) " mid:"
(const string) sin8u_table::str5 = (string) "x: "
(const string) sin8u_table::str6 = (string) " sin: "
(const string) sin8u_table::str7 = (string) " scaled: "
(const string) sin8u_table::str8 = (string) " trans: "
(word) sin8u_table::sum
(word) sin8u_table::sum#0
(word) sin8u_table::tabsize
(word) sin8u_table::tabsize#0
(word) sin8u_table::tabsize#1
(word) sin8u_table::tabsize#10
(word) sin8u_table::tabsize#11
(word) sin8u_table::tabsize#12
(word) sin8u_table::tabsize#13
(word) sin8u_table::tabsize#14
(word) sin8u_table::tabsize#15
(word) sin8u_table::tabsize#16
(word) sin8u_table::tabsize#17
(word) sin8u_table::tabsize#18
(word) sin8u_table::tabsize#19
(word) sin8u_table::tabsize#2
(word) sin8u_table::tabsize#20
(word) sin8u_table::tabsize#21
(word) sin8u_table::tabsize#22
(word) sin8u_table::tabsize#23
(word) sin8u_table::tabsize#24
(word) sin8u_table::tabsize#25
(word) sin8u_table::tabsize#26
(word) sin8u_table::tabsize#3
(word) sin8u_table::tabsize#4
(word) sin8u_table::tabsize#5
(word) sin8u_table::tabsize#6
(word) sin8u_table::tabsize#7
(word) sin8u_table::tabsize#8
(word) sin8u_table::tabsize#9
(word) sin8u_table::x
(word) sin8u_table::x#0
(word) sin8u_table::x#1
(word) sin8u_table::x#10
(word) sin8u_table::x#11
(word) sin8u_table::x#12
(word) sin8u_table::x#13
(word) sin8u_table::x#14
(word) sin8u_table::x#2
(word) sin8u_table::x#3
(word) sin8u_table::x#4
(word) sin8u_table::x#5
(word) sin8u_table::x#6
(word) sin8u_table::x#7
(word) sin8u_table::x#8
(word) sin8u_table::x#9

Adding number conversion cast (unumber) 0 in (word) divr16u::quotient#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$0 ← (word) divr16u::rem#4 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
Adding number conversion cast (unumber) divr16u::$2 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr16u::$3 ← (unumber~) divr16u::$2 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (number) 1
Adding number conversion cast (unumber) 1 in (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr16u::$5 ← (word) divr16u::rem#6 | (number) 1
Adding number conversion cast (unumber) divr16u::$5 in (number~) divr16u::$5 ← (word) divr16u::rem#6 | (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) divr16u::rem#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) mul8u::res#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$0 ← (byte) mul8u::a#3 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul8u::$1 ← (byte) mul8u::a#4 & (number) 1
Adding number conversion cast (unumber) mul8u::$1 in (number~) mul8u::$1 ← (byte) mul8u::a#4 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$2 ← (unumber~) mul8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) mul8u::$5 ← (byte) mul8u::a#5 >> (number) 1
Adding number conversion cast (unumber) 1 in (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
Adding number conversion cast (snumber) 0 in (bool~) mul8su::$3 ← (signed byte) mul8su::a#2 < (number) 0
Adding number conversion cast (unumber) $6488 in (word) PI2_u4f12 ← (number) $6488
Adding number conversion cast (unumber) $3244 in (word) PI_u4f12 ← (number) $3244
Adding number conversion cast (unumber) $1922 in (word) PI_HALF_u4f12 ← (number) $1922
Adding number conversion cast (unumber) 0 in (byte) sin8s::isUpper#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) sin8s::isUpper#1 ← (number) 1
Adding number conversion cast (unumber) 3 in (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#1 ← (number) 1
Adding number conversion cast (unumber) $2b in (byte) sin8s::DIV_6 ← (number) $2b
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#2 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#4 ← (number) 0
Adding number conversion cast (unumber) 4 in (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
Adding number conversion cast (unumber) $80 in (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
Adding number conversion cast (unumber) 0 in (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$0 ← (number) 0 != *((byte*) print_str::str#10)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#12 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) print_sbyte::$0 ← (signed byte) print_sbyte::b#2 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#9 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#9 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) $14 in (word) main::tabsize ← (number) $14
Adding number conversion cast (unumber) $a in (byte) sin8u_table::min#0 ← (number) $a
Adding number conversion cast (unumber) $ff in (byte) sin8u_table::max#0 ← (number) $ff
Adding number conversion cast (unumber) 2 in (number~) sin8u_table::$3 ← (word) sin8u_table::sum#0 / (number) 2
Adding number conversion cast (unumber) sin8u_table::$3 in (number~) sin8u_table::$3 ← (word) sin8u_table::sum#0 / (unumber)(number) 2
Adding number conversion cast (unumber) 1 in (number~) sin8u_table::$4 ← (unumber~) sin8u_table::$3 + (number) 1
Adding number conversion cast (unumber) sin8u_table::$4 in (number~) sin8u_table::$4 ← (unumber~) sin8u_table::$3 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) sin8u_table::x#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) sin8u_table::i#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) sin8u_table::$20 ← (byte) sin8u_table::amplitude#2 + (number) 1
Adding number conversion cast (unumber) sin8u_table::$20 in (number~) sin8u_table::$20 ← (byte) sin8u_table::amplitude#2 + (unumber)(number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (word) divr16u::quotient#0 ← (unumber)(number) 0
Inlining cast (word) divr16u::rem#3 ← (unumber)(number) 0
Inlining cast (word) mul8u::res#0 ← (unumber)(number) 0
Inlining cast (byte~) mul8su::$0 ← (byte)(signed byte) mul8su::a#1
Inlining cast (byte~) mul8su::$1 ← (byte)(byte) mul8su::b#1
Inlining cast (signed word~) mul8su::$5 ← (signed word)(word) mul8su::m#2
Inlining cast (byte~) mul8su::$8 ← (byte)(byte) mul8su::b#2
Inlining cast (word) PI2_u4f12 ← (unumber)(number) $6488
Inlining cast (word) PI_u4f12 ← (unumber)(number) $3244
Inlining cast (word) PI_HALF_u4f12 ← (unumber)(number) $1922
Inlining cast (byte) sin8s::isUpper#0 ← (unumber)(number) 0
Inlining cast (byte) sin8s::isUpper#1 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#0 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#1 ← (unumber)(number) 1
Inlining cast (byte) sin8s::DIV_6 ← (unumber)(number) $2b
Inlining cast (byte) mulu8_sel::select#2 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#3 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#4 ← (unumber)(number) 0
Inlining cast (signed byte~) sin8s::$16 ← (signed byte)(byte) sin8s::usinx#4
Inlining cast (signed byte~) sin8s::$21 ← (signed byte)(byte) sin8s::usinx#6
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (word~) print_sword::$1 ← (word)(signed word) print_sword::w#4
Inlining cast (byte~) print_sbyte::$1 ← (byte)(signed byte) print_sbyte::b#4
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (word) main::tabsize ← (unumber)(number) $14
Inlining cast (byte) sin8u_table::min#0 ← (unumber)(number) $a
Inlining cast (byte) sin8u_table::max#0 ← (unumber)(number) $ff
Inlining cast (word~) sin8u_table::$1 ← (word)(byte) sin8u_table::min#1
Inlining cast (byte~) sin8u_table::$5 ← (byte)(unumber~) sin8u_table::$4
Inlining cast (word) sin8u_table::x#0 ← (unumber)(number) 0
Inlining cast (word) sin8u_table::i#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) mul8su::b#1
Simplifying constant integer cast 0
Simplifying constant integer cast (byte) mul8su::b#2
Simplifying constant integer cast $6488
Simplifying constant integer cast $3244
Simplifying constant integer cast $1922
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $2b
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $14
Simplifying constant integer cast $a
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized unsigned number type (word) $6488
Finalized unsigned number type (word) $3244
Finalized unsigned number type (word) $1922
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $2b
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
Inferred type updated to word in (unumber~) divr16u::$5 ← (word) divr16u::rem#6 | (byte) 1
Inferred type updated to byte in (unumber~) mul8u::$1 ← (byte) mul8u::a#4 & (byte) 1
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#9 & (byte) $f
Inferred type updated to word in (unumber~) sin8u_table::$3 ← (word) sin8u_table::sum#0 / (byte) 2
Inferred type updated to word in (unumber~) sin8u_table::$4 ← (word~) sin8u_table::$3 + (byte) 1
Inferred type updated to byte in (unumber~) sin8u_table::$20 ← (byte) sin8u_table::amplitude#2 + (byte) 1
Inversing boolean not [9] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte) 0 from [8] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte) 0
Inversing boolean not [17] (bool~) divr16u::$9 ← (word) divr16u::rem#5 < (word) divr16u::divisor#1 from [16] (bool~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
Inversing boolean not [56] (bool~) mul8u::$3 ← (byte~) mul8u::$1 == (byte) 0 from [55] (bool~) mul8u::$2 ← (byte~) mul8u::$1 != (byte) 0
Inversing boolean not [82] (bool~) mul8su::$4 ← (signed byte) mul8su::a#2 >= (signed byte) 0 from [81] (bool~) mul8su::$3 ← (signed byte) mul8su::a#2 < (signed byte) 0
Inversing boolean not [102] (bool~) sin8s::$1 ← (word) sin8s::x#3 < (word) PI_u4f12 from [101] (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (word) PI_u4f12
Inversing boolean not [106] (bool~) sin8s::$3 ← (word) sin8s::x#4 < (word) PI_HALF_u4f12 from [105] (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (word) PI_HALF_u4f12
Inversing boolean not [164] (bool~) sin8s::$15 ← (byte) sin8s::usinx#1 < (byte) $80 from [163] (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (byte) $80
Inversing boolean not [173] (bool~) sin8s::$18 ← (byte) sin8s::isUpper#2 == (byte) 0 from [172] (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (byte) 0
Inversing boolean not [201] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [200] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (word) divr16u::rem#0 = (word~) divr16u::$0 (word) divr16u::rem#6 
Alias (word) divr16u::dividend#0 = (word~) divr16u::$6 (word) divr16u::dividend#7 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$7 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#6 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#3 = (word) divr16u::divisor#4 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#1 = (word~) divr16u::$5 
Alias (word) divr16u::rem#5 = (word) divr16u::rem#7 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#2 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#2 = (word~) divr16u::$10 
Alias (word) divr16u::return#0 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#3 (word) divr16u::return#1 
Alias (word) divr16u::return#2 = (word) divr16u::return#4 
Alias (word) div16u::return#0 = (word~) div16u::$0 (word) div16u::return#3 (word) div16u::return#1 
Alias (word) mul8u::mb#0 = (byte) mul8u::b#2 
Alias (byte) mul8u::a#3 = (byte) mul8u::a#4 (byte) mul8u::a#7 
Alias (word) mul8u::mb#3 = (word) mul8u::mb#4 (word) mul8u::mb#5 
Alias (word) mul8u::res#2 = (word) mul8u::res#5 (word) mul8u::res#4 (word) mul8u::return#0 (word) mul8u::res#3 (word) mul8u::return#4 (word) mul8u::return#1 
Alias (byte) mul8u::a#0 = (byte~) mul8u::$5 
Alias (word) mul8u::mb#1 = (word~) mul8u::$6 
Alias (word) mul8u::res#1 = (word~) mul8u::$4 
Alias (byte) mul8su::b#1 = (byte~) mul8su::$1 (byte) mul8u::b#0 (byte) mul8su::b#3 (byte) mul8su::b#2 (byte~) mul8su::$8 
Alias (byte) mul8u::a#1 = (byte~) mul8su::$0 
Alias (word) mul8u::return#2 = (word) mul8u::return#5 
Alias (signed byte) mul8su::a#1 = (signed byte) mul8su::a#2 
Alias (word) mul8su::m#0 = (word~) mul8su::$2 (word) mul8su::m#3 
Alias (signed word) mul8su::return#0 = (signed word~) mul8su::$5 (signed word) mul8su::return#3 (signed word) mul8su::return#1 
Alias (byte~) mul8su::$10 = (byte~) mul8su::$9 
Alias (word) sin8s::x#3 = (word) sin8s::x#5 
Alias (word) sin8s::x#0 = (word~) sin8s::$19 
Alias (byte) sin8s::x1#0 = (byte~) sin8s::$5 (byte) sin8s::x1#1 (byte) sin8s::x1#4 (byte) sin8s::x1#2 (byte) sin8s::x1#3 
Alias (byte) mulu8_sel::return#0 = (byte) mulu8_sel::return#7 
Alias (byte) sin8s::isUpper#3 = (byte) sin8s::isUpper#8 (byte) sin8s::isUpper#9 (byte) sin8s::isUpper#7 (byte) sin8s::isUpper#6 (byte) sin8s::isUpper#5 (byte) sin8s::isUpper#4 
Alias (byte) sin8s::x2#0 = (byte~) sin8s::$6 
Alias (byte) mulu8_sel::return#1 = (byte) mulu8_sel::return#8 
Alias (byte) sin8s::x3#0 = (byte~) sin8s::$7 (byte) sin8s::x3#1 
Alias (byte) mulu8_sel::return#2 = (byte) mulu8_sel::return#9 
Alias (byte) sin8s::x3_6#0 = (byte~) sin8s::$8 
Alias (byte) sin8s::usinx#0 = (byte~) sin8s::$9 (byte) sin8s::usinx#7 (byte) sin8s::usinx#3 
Alias (byte) mulu8_sel::return#10 = (byte) mulu8_sel::return#3 
Alias (byte) sin8s::x4#0 = (byte~) sin8s::$10 
Alias (byte) mulu8_sel::return#11 = (byte) mulu8_sel::return#4 
Alias (byte) sin8s::x5#0 = (byte~) sin8s::$11 
Alias (byte) sin8s::x5_128#0 = (byte~) sin8s::$12 
Alias (byte) sin8s::usinx#1 = (byte~) sin8s::$13 (byte) sin8s::usinx#5 
Alias (word) sin8s::x#4 = (word) sin8s::x#7 
Alias (byte) sin8s::isUpper#10 = (byte) sin8s::isUpper#11 
Alias (word) sin8s::x#1 = (word~) sin8s::$20 
Alias (signed byte) sin8s::sinx#0 = (signed byte~) sin8s::$16 
Alias (signed byte) sin8s::return#0 = (signed byte) sin8s::sinx#2 (signed byte) sin8s::return#3 (signed byte) sin8s::return#1 
Alias (byte) sin8s::usinx#4 = (byte) sin8s::usinx#6 
Alias (signed byte) sin8s::sinx#1 = (signed byte~) sin8s::$22 
Alias (word) mul8u::return#3 = (word) mul8u::return#6 
Alias (byte) mulu8_sel::select#5 = (byte) mulu8_sel::select#6 
Alias (byte) mulu8_sel::return#12 = (byte) mulu8_sel::return#5 (byte~) mulu8_sel::$2 (byte) mulu8_sel::return#6 
Alias (void*) memset::return#0 = (void*) memset::str#1 (void*) memset::return#3 (void*) memset::return#1 
Alias (void*) memset::str#2 = (void*) memset::str#3 
Alias (word) memset::num#1 = (word) memset::num#2 
Alias (byte) memset::c#3 = (byte) memset::c#4 
Alias (byte*) memset::end#0 = (byte*~) memset::$3 
Alias (byte) memset::c#1 = (byte) memset::c#2 
Alias (byte*) memset::dst#2 = (byte*) memset::dst#3 
Alias (byte*) memset::end#1 = (byte*) memset::end#2 
Alias (void*) memset::str#4 = (void*) memset::str#5 
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#31 (byte*) print_char_cursor#114 (byte*) print_screen#5 (byte*) print_line_cursor#28 (byte*) print_char_cursor#108 (byte*) print_screen#4 
Alias (byte*) print_str::str#10 = (byte*) print_str::str#11 
Alias (byte*) print_char_cursor#2 = (byte*) print_char_cursor#48 (byte*) print_char_cursor#94 (byte*) print_char_cursor#49 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#13 (byte*) print_char_cursor#3 (byte*) print_line_cursor#14 (byte*) print_char_cursor#51 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (byte*) print_char_cursor#110 = (byte*) print_char_cursor#96 (byte*) print_char_cursor#97 
Alias (signed word) print_sword::w#2 = (signed word) print_sword::w#5 (signed word) print_sword::w#3 (signed word) print_sword::w#7 (signed word) print_sword::w#6 
Alias (byte*) print_char_cursor#5 = (byte*) print_char_cursor#52 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$5 
Alias (byte*) print_char_cursor#53 = (byte*) print_char_cursor#6 
Alias (word) print_word::w#0 = (word~) print_sword::$1 
Alias (byte*) print_char_cursor#54 = (byte*) print_char_cursor#7 (byte*) print_char_cursor#55 (byte*) print_char_cursor#8 
Alias (byte*) print_char_cursor#100 = (byte*) print_char_cursor#99 (byte*) print_char_cursor#111 
Alias (signed byte) print_sbyte::b#2 = (signed byte) print_sbyte::b#5 (signed byte) print_sbyte::b#3 (signed byte) print_sbyte::b#7 (signed byte) print_sbyte::b#6 
Alias (byte*) print_char_cursor#56 = (byte*) print_char_cursor#9 
Alias (signed byte) print_sbyte::b#0 = (signed byte~) print_sbyte::$5 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#57 
Alias (byte) print_byte::b#0 = (byte~) print_sbyte::$1 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#58 (byte*) print_char_cursor#59 (byte*) print_char_cursor#12 
Alias (byte) print_byte::b#1 = (byte~) print_word::$0 
Alias (word) print_word::w#3 = (word) print_word::w#4 
Alias (byte*) print_char_cursor#13 = (byte*) print_char_cursor#60 
Alias (byte) print_byte::b#2 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#61 (byte*) print_char_cursor#62 (byte*) print_char_cursor#15 
Alias (byte) print_byte::b#8 = (byte) print_byte::b#9 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#63 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#64 (byte*) print_char_cursor#65 (byte*) print_char_cursor#18 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#67 (byte*) print_char_cursor#20 
Alias (byte*) print_line_cursor#15 = (byte*) print_screen#2 (byte*) print_screen#1 (byte*) print_line_cursor#3 (byte*) print_char_cursor#21 (byte*) print_char_cursor#68 (byte*) print_line_cursor#4 (byte*) print_char_cursor#22 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#69 
Alias (byte*) print_char_cursor#24 = (byte*) print_char_cursor#70 (byte*) print_char_cursor#71 (byte*) print_char_cursor#25 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#6 (byte*) print_line_cursor#18 (byte*) print_line_cursor#7 
Alias (byte) sin8u_table::amplitude#0 = (byte~) sin8u_table::$0 (byte) sin8u_table::amplitude#19 (byte) sin8u_table::amplitude#16 (byte) sin8u_table::amplitude#13 (byte) sin8u_table::amplitude#10 (byte) sin8u_table::amplitude#7 (byte) sin8u_table::amplitude#5 (byte) sin8u_table::amplitude#3 (byte) sin8u_table::amplitude#1 (byte) sin8u_table::amplitude#17 (byte) sin8u_table::amplitude#14 (byte) sin8u_table::amplitude#11 (byte) sin8u_table::amplitude#8 
Alias (word) sin8u_table::sum#0 = (word~) sin8u_table::$2 
Alias (byte) sin8u_table::mid#0 = (byte~) sin8u_table::$5 (byte) sin8u_table::mid#21 (byte) sin8u_table::mid#19 (byte) sin8u_table::mid#17 (byte) sin8u_table::mid#15 (byte) sin8u_table::mid#12 (byte) sin8u_table::mid#9 (byte) sin8u_table::mid#7 (byte) sin8u_table::mid#5 (byte) sin8u_table::mid#3 (byte) sin8u_table::mid#1 (byte) sin8u_table::mid#13 (byte) sin8u_table::mid#10 
Alias (word) div16u::return#2 = (word) div16u::return#4 
Alias (byte*) print_char_cursor#105 = (byte*) print_char_cursor#112 
Alias (byte) sin8u_table::min#1 = (byte) sin8u_table::min#5 (byte) sin8u_table::min#4 (byte) sin8u_table::min#3 (byte) sin8u_table::min#2 
Alias (byte) sin8u_table::max#1 = (byte) sin8u_table::max#7 (byte) sin8u_table::max#6 (byte) sin8u_table::max#5 (byte) sin8u_table::max#4 (byte) sin8u_table::max#3 (byte) sin8u_table::max#2 
Alias (byte*) print_line_cursor#25 = (byte*) print_line_cursor#48 (byte*) print_line_cursor#50 (byte*) print_line_cursor#46 (byte*) print_line_cursor#44 (byte*) print_line_cursor#42 (byte*) print_line_cursor#40 (byte*) print_line_cursor#38 (byte*) print_line_cursor#36 (byte*) print_line_cursor#34 (byte*) print_line_cursor#32 (byte*) print_line_cursor#29 
Alias (word) sin8u_table::tabsize#1 = (word) sin8u_table::tabsize#25 (word) sin8u_table::tabsize#23 (word) sin8u_table::tabsize#21 (word) sin8u_table::tabsize#19 (word) sin8u_table::tabsize#17 (word) sin8u_table::tabsize#15 (word) sin8u_table::tabsize#13 (word) sin8u_table::tabsize#11 (word) sin8u_table::tabsize#9 (word) sin8u_table::tabsize#7 (word) sin8u_table::tabsize#5 (word) sin8u_table::tabsize#3 
Alias (byte*) sin8u_table::sintab#10 = (byte*) sin8u_table::sintab#26 (byte*) sin8u_table::sintab#27 (byte*) sin8u_table::sintab#25 (byte*) sin8u_table::sintab#24 (byte*) sin8u_table::sintab#22 (byte*) sin8u_table::sintab#20 (byte*) sin8u_table::sintab#18 (byte*) sin8u_table::sintab#16 (byte*) sin8u_table::sintab#14 (byte*) sin8u_table::sintab#12 (byte*) sin8u_table::sintab#8 (byte*) sin8u_table::sintab#6 
Alias (word) sin8u_table::step#0 = (word~) sin8u_table::$6 (word) sin8u_table::step#1 (word) sin8u_table::step#24 (word) sin8u_table::step#23 (word) sin8u_table::step#22 (word) sin8u_table::step#21 (word) sin8u_table::step#20 (word) sin8u_table::step#19 (word) sin8u_table::step#18 (word) sin8u_table::step#17 (word) sin8u_table::step#16 (word) sin8u_table::step#15 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#72 
Alias (byte*) print_char_cursor#27 = (byte*) print_char_cursor#73 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#74 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#75 
Alias (byte*) print_char_cursor#30 = (byte*) print_char_cursor#76 
Alias (byte*) print_char_cursor#31 = (byte*) print_char_cursor#77 
Alias (byte*) print_char_cursor#32 = (byte*) print_char_cursor#78 
Alias (byte*) print_char_cursor#33 = (byte*) print_char_cursor#79 
Alias (byte*) print_char_cursor#34 = (byte*) print_char_cursor#80 
Alias (byte*) print_char_cursor#35 = (byte*) print_char_cursor#81 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#8 
Alias (byte*) print_char_cursor#36 = (byte*) print_char_cursor#82 
Alias (word) sin8u_table::x#10 = (word) sin8u_table::x#2 (word) sin8u_table::x#5 (word) sin8u_table::x#8 (word) sin8u_table::x#6 (word) sin8u_table::x#3 (word) sin8u_table::x#14 (word) sin8u_table::x#13 (word) sin8u_table::x#12 (word) sin8u_table::x#11 (word) sin8u_table::x#9 (word) sin8u_table::x#7 (word) sin8u_table::x#4 
Alias (byte) sin8u_table::amplitude#12 = (byte) sin8u_table::amplitude#4 (byte) sin8u_table::amplitude#6 (byte) sin8u_table::amplitude#2 (byte) sin8u_table::amplitude#25 (byte) sin8u_table::amplitude#24 (byte) sin8u_table::amplitude#23 (byte) sin8u_table::amplitude#22 (byte) sin8u_table::amplitude#21 (byte) sin8u_table::amplitude#20 (byte) sin8u_table::amplitude#18 (byte) sin8u_table::amplitude#15 (byte) sin8u_table::amplitude#9 
Alias (byte) sin8u_table::mid#11 = (byte) sin8u_table::mid#6 (byte) sin8u_table::mid#8 (byte) sin8u_table::mid#4 (byte) sin8u_table::mid#2 (byte) sin8u_table::mid#25 (byte) sin8u_table::mid#24 (byte) sin8u_table::mid#23 (byte) sin8u_table::mid#22 (byte) sin8u_table::mid#20 (byte) sin8u_table::mid#18 (byte) sin8u_table::mid#16 (byte) sin8u_table::mid#14 
Alias (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#4 (byte*) sin8u_table::sintab#5 (byte*) sin8u_table::sintab#3 
Alias (byte*) print_char_cursor#106 = (byte*) print_char_cursor#115 (byte*) print_char_cursor#107 (byte*) print_char_cursor#113 (byte*) print_char_cursor#92 (byte*) print_char_cursor#46 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#49 (byte*) print_line_cursor#27 (byte*) print_line_cursor#47 (byte*) print_line_cursor#45 (byte*) print_line_cursor#43 (byte*) print_line_cursor#41 (byte*) print_line_cursor#39 (byte*) print_line_cursor#37 (byte*) print_line_cursor#35 (byte*) print_line_cursor#33 (byte*) print_line_cursor#30 (byte*) print_line_cursor#26 (byte*) print_line_cursor#21 
Alias (word) sin8u_table::step#10 = (word) sin8u_table::step#13 (word) sin8u_table::step#14 (word) sin8u_table::step#12 (word) sin8u_table::step#11 (word) sin8u_table::step#9 (word) sin8u_table::step#8 (word) sin8u_table::step#7 (word) sin8u_table::step#6 (word) sin8u_table::step#5 (word) sin8u_table::step#4 (word) sin8u_table::step#3 (word) sin8u_table::step#2 
Alias (word) sin8u_table::i#10 = (word) sin8u_table::i#14 (word) sin8u_table::i#2 (word) sin8u_table::i#13 (word) sin8u_table::i#12 (word) sin8u_table::i#11 (word) sin8u_table::i#9 (word) sin8u_table::i#8 (word) sin8u_table::i#7 (word) sin8u_table::i#6 (word) sin8u_table::i#5 (word) sin8u_table::i#4 (word) sin8u_table::i#3 
Alias (word) sin8u_table::tabsize#10 = (word) sin8u_table::tabsize#26 (word) sin8u_table::tabsize#2 (word) sin8u_table::tabsize#24 (word) sin8u_table::tabsize#22 (word) sin8u_table::tabsize#20 (word) sin8u_table::tabsize#18 (word) sin8u_table::tabsize#16 (word) sin8u_table::tabsize#14 (word) sin8u_table::tabsize#12 (word) sin8u_table::tabsize#8 (word) sin8u_table::tabsize#6 (word) sin8u_table::tabsize#4 
Alias (signed byte) sin8s::return#2 = (signed byte) sin8s::return#4 
Alias (signed byte) sin8u_table::sinx#0 = (signed byte~) sin8u_table::$19 (signed byte) sin8u_table::sinx#4 (signed byte) sin8u_table::sinx#3 (signed byte) sin8u_table::sinx#2 (signed byte) sin8u_table::sinx#1 
Alias (byte) mul8su::b#0 = (byte~) sin8u_table::$20 
Alias (signed word) mul8su::return#2 = (signed word) mul8su::return#4 
Alias (signed word) sin8u_table::sinx_sc#0 = (signed word~) sin8u_table::$21 (signed word) sin8u_table::sinx_sc#5 (signed word) sin8u_table::sinx_sc#4 (signed word) sin8u_table::sinx_sc#3 (signed word) sin8u_table::sinx_sc#2 (signed word) sin8u_table::sinx_sc#1 
Alias (byte) sin8u_table::sinx_tr#0 = (byte~) sin8u_table::$23 (byte) sin8u_table::sinx_tr#7 (byte) sin8u_table::sinx_tr#6 (byte) sin8u_table::sinx_tr#5 (byte) sin8u_table::sinx_tr#4 (byte) sin8u_table::sinx_tr#3 (byte) sin8u_table::sinx_tr#2 (byte) sin8u_table::sinx_tr#1 
Alias (byte*) sin8u_table::sintab#1 = (byte*) sin8u_table::sintab#23 (byte*) sin8u_table::sintab#21 (byte*) sin8u_table::sintab#19 (byte*) sin8u_table::sintab#17 (byte*) sin8u_table::sintab#15 (byte*) sin8u_table::sintab#13 (byte*) sin8u_table::sintab#11 (byte*) sin8u_table::sintab#9 (byte*) sin8u_table::sintab#7 
Alias (byte*) print_char_cursor#37 = (byte*) print_char_cursor#83 
Alias (byte*) print_char_cursor#38 = (byte*) print_char_cursor#84 
Alias (byte*) print_char_cursor#39 = (byte*) print_char_cursor#85 
Alias (byte*) print_char_cursor#40 = (byte*) print_char_cursor#86 
Alias (byte*) print_char_cursor#41 = (byte*) print_char_cursor#87 
Alias (byte*) print_char_cursor#42 = (byte*) print_char_cursor#88 
Alias (byte*) print_char_cursor#43 = (byte*) print_char_cursor#89 
Alias (byte*) print_char_cursor#44 = (byte*) print_char_cursor#90 
Alias (byte*) print_line_cursor#20 = (byte*) print_line_cursor#9 
Alias (byte*) print_char_cursor#45 = (byte*) print_char_cursor#91 
Alias (word) sin8u_table::x#1 = (word~) sin8u_table::$33 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#22 
Alias (byte*) print_char_cursor#47 = (byte*) print_char_cursor#93 
Successful SSA optimization Pass2AliasElimination
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#3 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#3 (word) divr16u::divisor#6 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#0 = (word) divr16u::dividend#5 
Alias (byte) mul8u::a#3 = (byte) mul8u::a#5 
Alias (word) mul8u::mb#2 = (word) mul8u::mb#3 
Alias (byte) sin8s::isUpper#10 = (byte) sin8s::isUpper#3 (byte) sin8s::isUpper#2 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) divr16u::rem#8 (word) divr16u::rem#3
Identical Phi Values (word) divr16u::dividend#4 (word) divr16u::dividend#1
Identical Phi Values (word) divr16u::divisor#5 (word) divr16u::divisor#0
Identical Phi Values (word) divr16u::divisor#1 (word) divr16u::divisor#5
Identical Phi Values (word) div16u::dividend#1 (word) div16u::dividend#0
Identical Phi Values (word) div16u::divisor#1 (word) div16u::divisor#0
Identical Phi Values (signed byte) mul8su::a#1 (signed byte) mul8su::a#0
Identical Phi Values (byte) mul8su::b#1 (byte) mul8su::b#0
Identical Phi Values (word) sin8s::x#3 (word) sin8s::x#2
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_char_cursor#50 (byte*) print_char_cursor#95
Identical Phi Values (signed word) print_sword::w#2 (signed word) print_sword::w#1
Identical Phi Values (byte*) print_char_cursor#110 (byte*) print_char_cursor#41
Identical Phi Values (byte*) print_char_cursor#5 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#53 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#54 (byte*) print_char_cursor#14
Identical Phi Values (signed byte) print_sbyte::b#2 (signed byte) print_sbyte::b#1
Identical Phi Values (byte*) print_char_cursor#100 (byte*) print_char_cursor#39
Identical Phi Values (byte*) print_char_cursor#56 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_screen#3
Identical Phi Values (byte*) print_screen#3 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#24 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#104 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#106
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#10
Identical Phi Values (byte) sin8u_table::max#1 (byte) sin8u_table::max#0
Identical Phi Values (byte) sin8u_table::min#1 (byte) sin8u_table::min#0
Identical Phi Values (word) sin8u_table::tabsize#1 (word) sin8u_table::tabsize#0
Identical Phi Values (byte*) print_char_cursor#105 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#25 (byte*) print_line_cursor#16
Identical Phi Values (byte*) sin8u_table::sintab#10 (byte*) sin8u_table::sintab#0
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#33 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#34 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#35 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#36 (byte*) print_line_cursor#1
Identical Phi Values (word) sin8u_table::tabsize#10 (word) sin8u_table::tabsize#1
Identical Phi Values (byte) sin8u_table::amplitude#12 (byte) sin8u_table::amplitude#0
Identical Phi Values (byte) sin8u_table::mid#11 (byte) sin8u_table::mid#0
Identical Phi Values (word) sin8u_table::step#10 (word) sin8u_table::step#0
Identical Phi Values (byte*) print_char_cursor#37 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#38 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#39 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#40 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#41 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#42 (byte*) print_char_cursor#54
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_line_cursor#20 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#45 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#17
Identical Phi Values (byte*) print_char_cursor#47 (byte*) print_char_cursor#24
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#95 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#98 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#101 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#106 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) divr16u::$4 [10] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [18] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [25] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) mul8u::$0 [52] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
Simple Condition (bool~) mul8u::$3 [57] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@4
Simple Condition (bool~) mul8su::$4 [83] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1
Simple Condition (bool~) sin8s::$1 [103] if((word) sin8s::x#2<(word) PI_u4f12) goto sin8s::@1
Simple Condition (bool~) sin8s::$3 [107] if((word) sin8s::x#4<(word) PI_HALF_u4f12) goto sin8s::@2
Simple Condition (bool~) sin8s::$15 [165] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
Simple Condition (bool~) sin8s::$18 [174] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@4
Simple Condition (bool~) memset::$1 [202] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [212] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@5
Simple Condition (bool~) print_str::$0 [225] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2
Simple Condition (bool~) print_ln::$1 [238] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1
Simple Condition (bool~) print_sword::$0 [247] if((signed word) print_sword::w#1<(signed byte) 0) goto print_sword::@1
Simple Condition (bool~) print_sbyte::$0 [271] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1
Simple Condition (bool~) sin8u_table::$18 [426] if((word) sin8u_table::i#10<(word) sin8u_table::tabsize#0) goto sin8u_table::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [344] (byte[$14]) main::sintab ← { fill( $14, 0) }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const word) mul8u::res#0 = 0
Constant (const word) PI2_u4f12 = $6488
Constant (const word) PI_u4f12 = $3244
Constant (const word) PI_HALF_u4f12 = $1922
Constant (const byte) sin8s::isUpper#0 = 0
Constant (const byte) sin8s::isUpper#1 = 1
Constant (const byte) mulu8_sel::select#0 = 0
Constant (const byte) mulu8_sel::select#1 = 1
Constant (const byte) sin8s::DIV_6 = $2b
Constant (const byte) mulu8_sel::select#2 = 1
Constant (const byte) mulu8_sel::select#3 = 0
Constant (const byte) mulu8_sel::select#4 = 0
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = ' '
Constant (const byte) print_char::ch#2 = '-'
Constant (const byte) print_char::ch#3 = ' '
Constant (const byte[]) print_hextab = $0
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const word) main::tabsize = $14
Constant (const byte[$14]) main::sintab = { fill( $14, 0) }
Constant (const byte) sin8u_table::min#0 = $a
Constant (const byte) sin8u_table::max#0 = $ff
Constant (const byte*) print_str::str#1 = sin8u_table::str
Constant (const byte*) print_str::str#2 = sin8u_table::str1
Constant (const byte*) print_str::str#3 = sin8u_table::str2
Constant (const byte*) print_str::str#4 = sin8u_table::str3
Constant (const byte*) print_str::str#5 = sin8u_table::str4
Constant (const word) sin8u_table::x#0 = 0
Constant (const word) sin8u_table::i#0 = 0
Constant (const byte*) print_str::str#6 = sin8u_table::str5
Constant (const byte*) print_str::str#7 = sin8u_table::str6
Constant (const byte*) print_str::str#8 = sin8u_table::str7
Constant (const byte*) print_str::str#9 = sin8u_table::str8
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) mulu8_sel::v2#2 = sin8s::DIV_6
Constant (const byte*) sin8u_table::sintab#0 = main::sintab
Constant (const word) sin8u_table::tabsize#0 = main::tabsize
Constant (const word) div16u::dividend#0 = PI2_u4f12
Constant (const byte) print_byte::b#3 = sin8u_table::min#0
Constant (const byte) print_byte::b#4 = sin8u_table::max#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::dividend#1 = div16u::dividend#0
Constant (const word) div16u::divisor#0 = sin8u_table::tabsize#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::divisor#0 = div16u::divisor#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (void*)print_line_cursor#0 in [330] (void*) memset::str#0 ← (void*)(const byte*) print_line_cursor#0
Constant value identified (word)sin8u_table::min#0 in [364] (word~) sin8u_table::$1 ← (word)(const byte) sin8u_table::min#0
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [202] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [23] divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value [25] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (number) $10
Eliminating unused variable (void*) memset::return#2 and assignment [150] (void*) memset::return#2 ← (void*) memset::str#0
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) $10 in if((byte) divr16u::i#1!=(number) $10) goto divr16u::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [154] (byte) sin8u_table::amplitude#0 ← (const byte) sin8u_table::max#0 - (const byte) sin8u_table::min#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const void*) memset::str#0 = (void*)print_line_cursor#0
Constant (const byte) sin8u_table::amplitude#0 = sin8u_table::max#0-sin8u_table::min#0
Constant (const word) sin8u_table::$1 = (word)sin8u_table::min#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) print_byte::b#5 = sin8u_table::amplitude#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)memset::str#0 in [94] (byte*~) memset::$2 ← (byte*)(const void*) memset::str#0
Constant value identified (byte*)memset::str#0 in [96] (byte*) memset::dst#0 ← (byte*)(const void*) memset::str#0
Successful SSA optimization Pass2ConstantValues
Constant right-side identified [153] (word) sin8u_table::sum#0 ← (const word) sin8u_table::$1 + (const byte) sin8u_table::max#0
Constant right-side identified [179] (byte) mul8su::b#0 ← (const byte) sin8u_table::amplitude#0 + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::$2 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const word) sin8u_table::sum#0 = sin8u_table::$1+sin8u_table::max#0
Constant (const byte) mul8su::b#0 = sin8u_table::amplitude#0+1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [94] (byte*) memset::end#0 ← (const byte*) memset::$2 + (const word) memset::num#0
Constant right-side identified [151] (word~) sin8u_table::$3 ← (const word) sin8u_table::sum#0 / (byte) 2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$2+memset::num#0
Constant (const word) sin8u_table::$3 = sin8u_table::sum#0/2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [150] (word~) sin8u_table::$4 ← (const word) sin8u_table::$3 + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) sin8u_table::$4 = sin8u_table::$3+1
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)sin8u_table::$4 in [151] (byte) sin8u_table::mid#0 ← (byte)(const word) sin8u_table::$4
Successful SSA optimization Pass2ConstantValues
Constant (const byte) sin8u_table::mid#0 = (byte)sin8u_table::$4
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) print_byte::b#6 = sin8u_table::mid#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [36] (signed word) mul8su::return#0 ← (signed word)(word) mul8su::m#2 keeping mul8su::m#2
Inlining Noop Cast [78] (signed byte) sin8s::sinx#0 ← (signed byte)(byte) sin8s::usinx#4 keeping sin8s::usinx#4
Inlining Noop Cast [82] (signed byte~) sin8s::$21 ← (signed byte)(byte) sin8s::usinx#4 keeping sin8s::usinx#4
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [173] (signed word) mul8su::return#2 ← (signed word)(word) mul8su::m#2 keeping mul8su::m#2
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::dividend#1
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const byte) sin8s::isUpper#0
Inlining constant with var siblings (const byte) sin8s::isUpper#1
Inlining constant with var siblings (const byte) mulu8_sel::select#0
Inlining constant with var siblings (const byte) mulu8_sel::select#1
Inlining constant with var siblings (const byte) mulu8_sel::select#2
Inlining constant with var siblings (const byte) mulu8_sel::select#3
Inlining constant with var siblings (const byte) mulu8_sel::select#4
Inlining constant with var siblings (const byte) mulu8_sel::v2#2
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte*) print_str::str#3
Inlining constant with var siblings (const byte*) print_str::str#4
Inlining constant with var siblings (const byte*) print_str::str#5
Inlining constant with var siblings (const byte*) print_str::str#6
Inlining constant with var siblings (const byte*) print_str::str#7
Inlining constant with var siblings (const byte*) print_str::str#8
Inlining constant with var siblings (const byte*) print_str::str#9
Inlining constant with var siblings (const byte) print_byte::b#3
Inlining constant with var siblings (const byte) print_byte::b#4
Inlining constant with var siblings (const byte) print_byte::b#5
Inlining constant with var siblings (const byte) print_byte::b#6
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const word) sin8u_table::x#0
Inlining constant with var siblings (const word) sin8u_table::i#0
Inlining constant with var siblings (const byte*) sin8u_table::sintab#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined divr16u::rem#3 = (byte) 0
Constant inlined divr16u::i#0 = (byte) 0
Constant inlined sin8u_table::i#0 = (byte) 0
Constant inlined sin8u_table::sintab#0 = (const byte[$14]) main::sintab
Constant inlined $0 = (const byte[]) print_hextab
Constant inlined sin8s::isUpper#1 = (byte) 1
Constant inlined sin8s::isUpper#0 = (byte) 0
Constant inlined sin8u_table::$4 = (const word) sin8u_table::sum#0/(byte) 2+(byte) 1
Constant inlined memset::$2 = (byte*)(const void*) memset::str#0
Constant inlined divr16u::quotient#0 = (byte) 0
Constant inlined div16u::divisor#0 = (const word) main::tabsize
Constant inlined sin8u_table::$1 = (word)(const byte) sin8u_table::min#0
Constant inlined sin8u_table::$3 = (const word) sin8u_table::sum#0/(byte) 2
Constant inlined mulu8_sel::select#0 = (byte) 0
Constant inlined div16u::dividend#0 = (const word) PI2_u4f12
Constant inlined mulu8_sel::select#2 = (byte) 1
Constant inlined divr16u::divisor#0 = (const word) main::tabsize
Constant inlined mulu8_sel::select#1 = (byte) 1
Constant inlined mulu8_sel::select#4 = (byte) 0
Constant inlined mulu8_sel::select#3 = (byte) 0
Constant inlined sin8u_table::tabsize#0 = (const word) main::tabsize
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined print_byte::b#4 = (const byte) sin8u_table::max#0
Constant inlined print_byte::b#3 = (const byte) sin8u_table::min#0
Constant inlined print_byte::b#6 = (const byte) sin8u_table::mid#0
Constant inlined print_byte::b#5 = (const byte) sin8u_table::amplitude#0
Constant inlined divr16u::dividend#1 = (const word) PI2_u4f12
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined print_char::ch#2 = (byte) '-'
Constant inlined mulu8_sel::v2#2 = (const byte) sin8s::DIV_6
Constant inlined print_str::str#9 = (const string) sin8u_table::str8
Constant inlined mul8u::res#0 = (byte) 0
Constant inlined print_char::ch#1 = (byte) ' '
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined print_str::str#4 = (const string) sin8u_table::str3
Constant inlined print_str::str#3 = (const string) sin8u_table::str2
Constant inlined print_str::str#2 = (const string) sin8u_table::str1
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined print_str::str#1 = (const string) sin8u_table::str
Constant inlined sin8u_table::x#0 = (byte) 0
Constant inlined print_str::str#8 = (const string) sin8u_table::str7
Constant inlined print_str::str#7 = (const string) sin8u_table::str6
Constant inlined print_str::str#6 = (const string) sin8u_table::str5
Constant inlined print_str::str#5 = (const string) sin8u_table::str4
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting mul8u::@10(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting mul8su::@5(between mul8su::@4 and mul8su::@1)
Added new block during phi lifting sin8s::@15(between sin8s and sin8s::@1)
Fixing phi predecessor for sin8s::isUpper#10 to new block ( sin8s -> sin8s::@15 ) during phi lifting.
Added new block during phi lifting sin8s::@16(between sin8s::@1 and sin8s::@2)
Added new block during phi lifting sin8s::@17(between sin8s::@14 and sin8s::@3)
Added new block during phi lifting sin8s::@18(between sin8s::@3 and sin8s::@4)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @13
Adding NOP phi() at start of @32
Adding NOP phi() at start of @49
Adding NOP phi() at start of @58
Adding NOP phi() at start of @59
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of sin8u_table
Adding NOP phi() at start of sin8u_table::@17
Adding NOP phi() at start of sin8u_table::@18
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_sword::@7
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_sbyte::@7
Adding NOP phi() at start of mul8u::@3
Adding NOP phi() at start of div16u
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of divr16u::@6
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [] to main:5 
Calls in [main] to print_cls:9 sin8u_table:11 
Calls in [sin8u_table] to div16u:15 print_str:18 print_word:22 print_str:24 print_byte:26 print_str:28 print_byte:30 print_str:32 print_byte:34 print_str:36 print_byte:38 print_ln:40 sin8s:46 mul8su:50 print_str:57 print_word:61 print_str:63 print_sbyte:65 print_str:67 print_sword:69 print_str:71 print_byte:75 print_ln:77 
Calls in [print_byte] to print_char:96 print_char:101 
Calls in [print_sword] to print_char:121 print_word:127 print_char:131 
Calls in [print_word] to print_byte:138 print_byte:142 
Calls in [print_sbyte] to print_char:147 print_byte:153 print_char:157 
Calls in [mul8su] to mul8u:162 
Calls in [sin8s] to mulu8_sel:205 mulu8_sel:212 mulu8_sel:217 mulu8_sel:225 mulu8_sel:232 
Calls in [mulu8_sel] to mul8u:255 
Calls in [div16u] to divr16u:262 
Calls in [print_cls] to memset:295 

Created 40 initial phi equivalence classes
Coalesced [20] print_word::w#7 ← print_word::w#1
Coalesced [21] print_char_cursor#128 ← print_char_cursor#2
Coalesced [23] print_char_cursor#123 ← print_char_cursor#19
Coalesced [25] print_char_cursor#132 ← print_char_cursor#2
Coalesced (already) [27] print_char_cursor#116 ← print_char_cursor#19
Coalesced (already) [29] print_char_cursor#133 ← print_char_cursor#2
Coalesced (already) [31] print_char_cursor#117 ← print_char_cursor#19
Coalesced (already) [33] print_char_cursor#134 ← print_char_cursor#2
Coalesced (already) [35] print_char_cursor#118 ← print_char_cursor#19
Coalesced (already) [37] print_char_cursor#135 ← print_char_cursor#2
Not coalescing [56] print_char_cursor#119 ← print_line_cursor#1
Coalesced [59] print_word::w#6 ← print_word::w#2
Coalesced (already) [60] print_char_cursor#127 ← print_char_cursor#2
Coalesced (already) [62] print_char_cursor#120 ← print_char_cursor#19
Coalesced (already) [66] print_char_cursor#121 ← print_char_cursor#19
Coalesced (already) [70] print_char_cursor#122 ← print_char_cursor#19
Coalesced [73] print_byte::b#13 ← print_byte::b#7
Coalesced (already) [74] print_char_cursor#136 ← print_char_cursor#2
Coalesced [76] print_line_cursor#51 ← print_line_cursor#1
Coalesced [80] sin8u_table::i#15 ← sin8u_table::i#1
Coalesced [81] sin8u_table::x#15 ← sin8u_table::x#1
Coalesced [82] sin8u_table::sintab#28 ← sin8u_table::sintab#1
Coalesced [84] print_line_cursor#52 ← print_line_cursor#23
Coalesced (already) [90] print_line_cursor#53 ← print_line_cursor#1
Coalesced [94] print_char::ch#7 ← print_char::ch#4
Coalesced [95] print_char_cursor#137 ← print_char_cursor#103
Coalesced [99] print_char::ch#8 ← print_char::ch#5
Coalesced [100] print_char_cursor#138 ← print_char_cursor#19
Coalesced [109] print_str::str#13 ← print_str::str#12
Coalesced (already) [110] print_char_cursor#124 ← print_char_cursor#109
Coalesced [117] print_str::str#14 ← print_str::str#0
Coalesced [118] print_char_cursor#125 ← print_char_cursor#1
Coalesced (already) [120] print_char_cursor#142 ← print_char_cursor#2
Coalesced [122] print_sword::w#9 ← print_sword::w#1
Coalesced [125] print_word::w#5 ← print_word::w#0
Coalesced (already) [126] print_char_cursor#126 ← print_char_cursor#19
Coalesced (already) [130] print_char_cursor#141 ← print_char_cursor#2
Coalesced [133] print_sword::w#8 ← print_sword::w#0
Coalesced [136] print_byte::b#11 ← print_byte::b#1
Coalesced (already) [137] print_char_cursor#130 ← print_char_cursor#102
Coalesced [140] print_byte::b#12 ← print_byte::b#2
Coalesced (already) [141] print_char_cursor#131 ← print_char_cursor#19
Coalesced (already) [146] print_char_cursor#140 ← print_char_cursor#2
Coalesced [148] print_sbyte::b#9 ← print_sbyte::b#1
Coalesced [151] print_byte::b#10 ← print_byte::b#0
Coalesced (already) [152] print_char_cursor#129 ← print_char_cursor#19
Coalesced (already) [156] print_char_cursor#139 ← print_char_cursor#2
Coalesced [159] print_sbyte::b#8 ← print_sbyte::b#0
Coalesced [161] mul8u::a#8 ← mul8u::a#1
Coalesced [169] mul8su::m#4 ← mul8su::m#1
Coalesced [172] mul8su::m#5 ← mul8su::m#0
Coalesced [174] mul8u::a#10 ← mul8u::a#6
Coalesced [175] mul8u::mb#7 ← mul8u::mb#0
Coalesced [183] mul8u::res#9 ← mul8u::res#1
Coalesced [187] mul8u::a#11 ← mul8u::a#0
Coalesced [188] mul8u::res#7 ← mul8u::res#6
Coalesced [189] mul8u::mb#8 ← mul8u::mb#1
Coalesced (already) [190] mul8u::res#8 ← mul8u::res#2
Coalesced [193] sin8s::x#9 ← sin8s::x#0
Coalesced [197] sin8s::x#11 ← sin8s::x#1
Coalesced [203] mulu8_sel::v1#10 ← mulu8_sel::v1#0
Coalesced [204] mulu8_sel::v2#9 ← mulu8_sel::v2#0
Coalesced [210] mulu8_sel::v1#6 ← mulu8_sel::v1#1
Coalesced [211] mulu8_sel::v2#6 ← mulu8_sel::v2#1
Coalesced [216] mulu8_sel::v1#7 ← mulu8_sel::v1#2
Coalesced [223] mulu8_sel::v1#8 ← mulu8_sel::v1#3
Coalesced [224] mulu8_sel::v2#7 ← mulu8_sel::v2#3
Coalesced [230] mulu8_sel::v1#9 ← mulu8_sel::v1#4
Coalesced [231] mulu8_sel::v2#8 ← mulu8_sel::v2#4
Coalesced [239] sin8s::usinx#9 ← sin8s::usinx#2
Coalesced [243] sin8s::return#6 ← sin8s::sinx#1
Coalesced [247] sin8s::usinx#8 ← sin8s::usinx#1
Coalesced [248] sin8s::x#10 ← sin8s::x#4
Coalesced [249] sin8s::x#8 ← sin8s::x#2
Coalesced [253] mul8u::mb#6 ← mul8u::b#1
Coalesced [254] mul8u::a#9 ← mul8u::a#2
Coalesced [273] divr16u::rem#12 ← divr16u::rem#1
Coalesced [280] divr16u::rem#14 ← divr16u::rem#2
Coalesced [281] divr16u::return#6 ← divr16u::quotient#2
Coalesced [287] divr16u::rem#10 ← divr16u::rem#9
Coalesced [288] divr16u::dividend#8 ← divr16u::dividend#0
Coalesced [289] divr16u::quotient#9 ← divr16u::return#0
Coalesced [290] divr16u::i#7 ← divr16u::i#1
Coalesced [291] divr16u::rem#13 ← divr16u::rem#5
Coalesced [292] divr16u::return#5 ← divr16u::quotient#1
Coalesced [293] divr16u::rem#11 ← divr16u::rem#0
Coalesced [306] memset::dst#4 ← memset::dst#1
Coalesced down to 27 phi equivalence classes
Culled Empty Block (label) @13
Culled Empty Block (label) @32
Culled Empty Block (label) @49
Culled Empty Block (label) @59
Culled Empty Block (label) main::@2
Culled Empty Block (label) sin8u_table::@18
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_sword::@6
Culled Empty Block (label) print_sword::@7
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_sbyte::@6
Culled Empty Block (label) print_sbyte::@7
Culled Empty Block (label) mul8su::@5
Culled Empty Block (label) mul8u::@3
Culled Empty Block (label) mul8u::@10
Culled Empty Block (label) sin8s::@17
Culled Empty Block (label) sin8s::@16
Culled Empty Block (label) sin8s::@15
Culled Empty Block (label) divr16u::@6
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block @58 to @1
Renumbering block div16u::@2 to div16u::@1
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@7 to mul8u::@4
Renumbering block mul8su::@4 to mul8su::@3
Renumbering block sin8s::@10 to sin8s::@9
Renumbering block sin8s::@11 to sin8s::@10
Renumbering block sin8s::@12 to sin8s::@11
Renumbering block sin8s::@13 to sin8s::@12
Renumbering block sin8s::@14 to sin8s::@13
Renumbering block sin8s::@18 to sin8s::@14
Renumbering block mulu8_sel::@2 to mulu8_sel::@1
Renumbering block memset::@4 to memset::@1
Renumbering block memset::@5 to memset::@2
Renumbering block print_sword::@5 to print_sword::@4
Renumbering block print_sbyte::@5 to print_sbyte::@4
Renumbering block sin8u_table::@7 to sin8u_table::@3
Renumbering block sin8u_table::@8 to sin8u_table::@4
Renumbering block sin8u_table::@9 to sin8u_table::@5
Renumbering block sin8u_table::@10 to sin8u_table::@6
Renumbering block sin8u_table::@11 to sin8u_table::@7
Renumbering block sin8u_table::@12 to sin8u_table::@8
Renumbering block sin8u_table::@13 to sin8u_table::@9
Renumbering block sin8u_table::@14 to sin8u_table::@10
Renumbering block sin8u_table::@15 to sin8u_table::@11
Renumbering block sin8u_table::@16 to sin8u_table::@12
Renumbering block sin8u_table::@17 to sin8u_table::@13
Renumbering block sin8u_table::@19 to sin8u_table::@14
Renumbering block sin8u_table::@20 to sin8u_table::@15
Renumbering block sin8u_table::@21 to sin8u_table::@16
Renumbering block sin8u_table::@22 to sin8u_table::@17
Renumbering block sin8u_table::@23 to sin8u_table::@18
Renumbering block sin8u_table::@24 to sin8u_table::@19
Renumbering block sin8u_table::@25 to sin8u_table::@20
Renumbering block sin8u_table::@26 to sin8u_table::@21
Renumbering block sin8u_table::@27 to sin8u_table::@22
Renumbering block sin8u_table::@28 to sin8u_table::@23
Renumbering block sin8u_table::@29 to sin8u_table::@24
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of sin8u_table
Adding NOP phi() at start of sin8u_table::@5
Adding NOP phi() at start of sin8u_table::@6
Adding NOP phi() at start of sin8u_table::@7
Adding NOP phi() at start of sin8u_table::@8
Adding NOP phi() at start of sin8u_table::@9
Adding NOP phi() at start of sin8u_table::@10
Adding NOP phi() at start of sin8u_table::@11
Adding NOP phi() at start of sin8u_table::@12
Adding NOP phi() at start of sin8u_table::@13
Adding NOP phi() at start of sin8u_table::@17
Adding NOP phi() at start of sin8u_table::@19
Adding NOP phi() at start of sin8u_table::@21
Adding NOP phi() at start of sin8u_table::@23
Adding NOP phi() at start of print_sword::@3
Adding NOP phi() at start of print_sword::@1
Adding NOP phi() at start of print_sbyte::@3
Adding NOP phi() at start of print_sbyte::@1
Adding NOP phi() at start of div16u
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call sin8u_table 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return

(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
sin8u_table: scope:[sin8u_table]  from main::@1
  [9] phi()
  [10] call div16u 
  [11] (word) div16u::return#2 ← (word) div16u::return#0
  to:sin8u_table::@3
sin8u_table::@3: scope:[sin8u_table]  from sin8u_table
  [12] (word) sin8u_table::step#0 ← (word) div16u::return#2
  [13] call print_str 
  to:sin8u_table::@4
sin8u_table::@4: scope:[sin8u_table]  from sin8u_table::@3
  [14] (word) print_word::w#1 ← (word) sin8u_table::step#0
  [15] call print_word 
  to:sin8u_table::@5
sin8u_table::@5: scope:[sin8u_table]  from sin8u_table::@4
  [16] phi()
  [17] call print_str 
  to:sin8u_table::@6
sin8u_table::@6: scope:[sin8u_table]  from sin8u_table::@5
  [18] phi()
  [19] call print_byte 
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table::@6
  [20] phi()
  [21] call print_str 
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  [22] phi()
  [23] call print_byte 
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  [24] phi()
  [25] call print_str 
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  [26] phi()
  [27] call print_byte 
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  [28] phi()
  [29] call print_str 
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  [30] phi()
  [31] call print_byte 
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@12
  [32] phi()
  [33] call print_ln 
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@13 sin8u_table::@24
  [34] (byte*) sin8u_table::sintab#2 ← phi( sin8u_table::@13/(const byte[$14]) main::sintab sin8u_table::@24/(byte*) sin8u_table::sintab#1 )
  [34] (word) sin8u_table::x#10 ← phi( sin8u_table::@13/(byte) 0 sin8u_table::@24/(word) sin8u_table::x#1 )
  [34] (word) sin8u_table::i#10 ← phi( sin8u_table::@13/(byte) 0 sin8u_table::@24/(word) sin8u_table::i#1 )
  [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2
  to:sin8u_table::@return
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@1
  [36] return 
  to:@return
sin8u_table::@2: scope:[sin8u_table]  from sin8u_table::@1
  [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10
  [38] call sin8s 
  [39] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0
  to:sin8u_table::@14
sin8u_table::@14: scope:[sin8u_table]  from sin8u_table::@2
  [40] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2
  [41] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0
  [42] call mul8su 
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@14
  [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2
  [44] (byte~) sin8u_table::$22 ← > (signed word) sin8u_table::sinx_sc#0
  [45] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$22
  [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0
  [47] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2
  [48] (byte*~) print_char_cursor#119 ← (byte*) print_line_cursor#1
  [49] call print_str 
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  [50] (word) print_word::w#2 ← (word) sin8u_table::x#10
  [51] call print_word 
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  [52] phi()
  [53] call print_str 
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  [54] (signed byte) print_sbyte::b#1 ← (signed byte) sin8u_table::sinx#0
  [55] call print_sbyte 
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@18
  [56] phi()
  [57] call print_str 
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  [58] (signed word) print_sword::w#1 ← (signed word) sin8u_table::sinx_sc#0
  [59] call print_sword 
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  [60] phi()
  [61] call print_str 
  to:sin8u_table::@22
sin8u_table::@22: scope:[sin8u_table]  from sin8u_table::@21
  [62] (byte) print_byte::b#7 ← (byte) sin8u_table::sinx_tr#0
  [63] call print_byte 
  to:sin8u_table::@23
sin8u_table::@23: scope:[sin8u_table]  from sin8u_table::@22
  [64] phi()
  [65] call print_ln 
  to:sin8u_table::@24
sin8u_table::@24: scope:[sin8u_table]  from sin8u_table::@23
  [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0
  [67] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10
  to:sin8u_table::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from sin8u_table::@13 sin8u_table::@23
  [68] (byte*) print_line_cursor#23 ← phi( sin8u_table::@13/(byte*) 1024 sin8u_table::@23/(byte*) print_line_cursor#1 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [69] (byte*) print_line_cursor#12 ← phi( print_ln/(byte*) print_line_cursor#23 print_ln::@1/(byte*) print_line_cursor#1 )
  [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28
  [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [72] return 
  to:@return

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from print_sbyte::@2 print_word print_word::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@22 sin8u_table::@6 sin8u_table::@8
  [73] (byte*) print_char_cursor#103 ← phi( print_sbyte::@2/(byte*) print_char_cursor#19 print_word/(byte*) print_char_cursor#102 print_word::@1/(byte*) print_char_cursor#19 sin8u_table::@6/(byte*) print_char_cursor#2 sin8u_table::@8/(byte*) print_char_cursor#2 sin8u_table::@10/(byte*) print_char_cursor#2 sin8u_table::@12/(byte*) print_char_cursor#2 sin8u_table::@22/(byte*) print_char_cursor#2 )
  [73] (byte) print_byte::b#8 ← phi( print_sbyte::@2/(byte) print_byte::b#0 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 sin8u_table::@6/(const byte) sin8u_table::min#0 sin8u_table::@8/(const byte) sin8u_table::max#0 sin8u_table::@10/(const byte) sin8u_table::amplitude#0 sin8u_table::@12/(const byte) sin8u_table::mid#0 sin8u_table::@22/(byte) print_byte::b#7 )
  [74] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4
  [75] (byte) print_char::ch#4 ← *((const byte[]) print_hextab + (byte~) print_byte::$0)
  [76] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [77] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f
  [78] (byte) print_char::ch#5 ← *((const byte[]) print_hextab + (byte~) print_byte::$2)
  [79] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [80] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3 print_sword::@1 print_sword::@3
  [81] (byte*) print_char_cursor#66 ← phi( print_byte/(byte*) print_char_cursor#103 print_byte::@1/(byte*) print_char_cursor#19 print_sbyte::@1/(byte*) print_char_cursor#2 print_sbyte::@3/(byte*) print_char_cursor#2 print_sword::@1/(byte*) print_char_cursor#2 print_sword::@3/(byte*) print_char_cursor#2 )
  [81] (byte) print_char::ch#6 ← phi( print_byte/(byte) print_char::ch#4 print_byte::@1/(byte) print_char::ch#5 print_sbyte::@1/(byte) '-' print_sbyte::@3/(byte) ' ' print_sword::@1/(byte) '-' print_sword::@3/(byte) ' ' )
  [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#6
  [83] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#66
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [84] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from sin8u_table::@11 sin8u_table::@15 sin8u_table::@17 sin8u_table::@19 sin8u_table::@21 sin8u_table::@3 sin8u_table::@5 sin8u_table::@7 sin8u_table::@9
  [85] (byte*) print_char_cursor#109 ← phi( sin8u_table::@7/(byte*) print_char_cursor#19 sin8u_table::@9/(byte*) print_char_cursor#19 sin8u_table::@11/(byte*) print_char_cursor#19 sin8u_table::@15/(byte*~) print_char_cursor#119 sin8u_table::@17/(byte*) print_char_cursor#19 sin8u_table::@19/(byte*) print_char_cursor#19 sin8u_table::@21/(byte*) print_char_cursor#19 sin8u_table::@3/(byte*) 1024 sin8u_table::@5/(byte*) print_char_cursor#19 )
  [85] (byte*) print_str::str#12 ← phi( sin8u_table::@7/(const string) sin8u_table::str2 sin8u_table::@9/(const string) sin8u_table::str3 sin8u_table::@11/(const string) sin8u_table::str4 sin8u_table::@15/(const string) sin8u_table::str5 sin8u_table::@17/(const string) sin8u_table::str6 sin8u_table::@19/(const string) sin8u_table::str7 sin8u_table::@21/(const string) sin8u_table::str8 sin8u_table::@3/(const string) sin8u_table::str sin8u_table::@5/(const string) sin8u_table::str1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [86] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#109 print_str::@2/(byte*) print_char_cursor#1 )
  [86] (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@2/(byte*) print_str::str#0 )
  [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [88] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [89] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10)
  [90] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10
  to:print_str::@1

(void()) print_sword((signed word) print_sword::w)
print_sword: scope:[print_sword]  from sin8u_table::@20
  [92] if((signed word) print_sword::w#1<(signed byte) 0) goto print_sword::@1
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword
  [93] phi()
  [94] call print_char 
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword::@3 print_sword::@4
  [95] (signed word) print_sword::w#4 ← phi( print_sword::@4/(signed word) print_sword::w#0 print_sword::@3/(signed word) print_sword::w#1 )
  [96] (word) print_word::w#0 ← (word)(signed word) print_sword::w#4
  [97] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@2
  [98] return 
  to:@return
print_sword::@1: scope:[print_sword]  from print_sword
  [99] phi()
  [100] call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@1
  [101] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1
  to:print_sword::@2

(void()) print_word((word) print_word::w)
print_word: scope:[print_word]  from print_sword::@2 sin8u_table::@16 sin8u_table::@4
  [102] (byte*) print_char_cursor#102 ← phi( print_sword::@2/(byte*) print_char_cursor#19 sin8u_table::@16/(byte*) print_char_cursor#2 sin8u_table::@4/(byte*) print_char_cursor#2 )
  [102] (word) print_word::w#3 ← phi( print_sword::@2/(word) print_word::w#0 sin8u_table::@16/(word) print_word::w#2 sin8u_table::@4/(word) print_word::w#1 )
  [103] (byte) print_byte::b#1 ← > (word) print_word::w#3
  [104] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [105] (byte) print_byte::b#2 ← < (word) print_word::w#3
  [106] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [107] return 
  to:@return

(void()) print_sbyte((signed byte) print_sbyte::b)
print_sbyte: scope:[print_sbyte]  from sin8u_table::@18
  [108] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  [109] phi()
  [110] call print_char 
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@3 print_sbyte::@4
  [111] (signed byte) print_sbyte::b#4 ← phi( print_sbyte::@4/(signed byte) print_sbyte::b#0 print_sbyte::@3/(signed byte) print_sbyte::b#1 )
  [112] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#4
  [113] call print_byte 
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@2
  [114] return 
  to:@return
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  [115] phi()
  [116] call print_char 
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@1
  [117] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1
  to:print_sbyte::@2

(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
mul8su: scope:[mul8su]  from sin8u_table::@14
  [118] (byte) mul8u::a#1 ← (byte)(signed byte) mul8su::a#0
  [119] call mul8u 
  [120] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mul8su::@3
mul8su::@3: scope:[mul8su]  from mul8su
  [121] (word) mul8su::m#0 ← (word) mul8u::return#2
  [122] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1
  to:mul8su::@2
mul8su::@2: scope:[mul8su]  from mul8su::@3
  [123] (byte~) mul8su::$7 ← > (word) mul8su::m#0
  [124] (byte~) mul8su::$10 ← (byte~) mul8su::$7 - (const byte) mul8su::b#0
  [125] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$10
  to:mul8su::@1
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@3
  [126] (word) mul8su::m#2 ← phi( mul8su::@2/(word) mul8su::m#1 mul8su::@3/(word) mul8su::m#0 )
  to:mul8su::@return
mul8su::@return: scope:[mul8su]  from mul8su::@1
  [127] return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  [128] (byte) mul8u::a#6 ← phi( mul8su/(byte) mul8u::a#1 mulu8_sel/(byte) mul8u::a#2 )
  [128] (word) mul8u::mb#0 ← phi( mul8su/(const byte) mul8su::b#0 mulu8_sel/(byte) mul8u::b#1 )
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [129] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [129] (word) mul8u::res#2 ← phi( mul8u/(byte) 0 mul8u::@3/(word) mul8u::res#6 )
  [129] (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@3/(byte) mul8u::a#0 )
  [130] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [131] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [132] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
  [133] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [134] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [135] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [136] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1
  [137] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1

(signed byte()) sin8s((word) sin8s::x)
sin8s: scope:[sin8s]  from sin8u_table::@2
  [138] if((word) sin8s::x#2<(const word) PI_u4f12) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [139] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [140] (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) 0 sin8s::@5/(byte) 1 )
  [140] (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#2 sin8s::@5/(word) sin8s::x#0 )
  [141] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [142] (word) sin8s::x#1 ← (const word) PI_u4f12 - (word) sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [143] (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#1 )
  [144] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3
  [145] (byte) sin8s::x1#0 ← > (word~) sin8s::$4
  [146] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  [147] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  [148] call mulu8_sel 
  [149] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [150] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  [151] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  [152] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0
  [153] call mulu8_sel 
  [154] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [155] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1
  [156] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  [157] call mulu8_sel 
  [158] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [159] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  [160] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0
  [161] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0
  [162] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0
  [163] call mulu8_sel 
  [164] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [165] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  [166] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  [167] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0
  [168] call mulu8_sel 
  [169] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [170] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  [171] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4
  [172] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0
  [173] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [174] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [175] (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  [176] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [177] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [178] (signed byte) sin8s::return#0 ← phi( sin8s::@14/(signed byte~) sin8s::return#5 sin8s::@8/(signed byte) sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [179] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [180] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4

(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [181] (byte) mulu8_sel::select#5 ← phi( sin8s::@9/(byte) 1 sin8s::@10/(byte) 1 sin8s::@11/(byte) 0 sin8s::@12/(byte) 0 sin8s::@2/(byte) 0 )
  [181] (byte) mulu8_sel::v2#5 ← phi( sin8s::@9/(byte) mulu8_sel::v2#1 sin8s::@10/(const byte) sin8s::DIV_6 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 )
  [181] (byte) mulu8_sel::v1#5 ← phi( sin8s::@9/(byte) mulu8_sel::v1#1 sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 )
  [182] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
  [183] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5
  [184] call mul8u 
  [185] (word) mul8u::return#3 ← (word) mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [186] (word~) mulu8_sel::$0 ← (word) mul8u::return#3
  [187] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  [188] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [189] return 
  to:@return

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from sin8u_table
  [190] phi()
  [191] call divr16u 
  [192] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [193] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [194] return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u
  [195] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [196] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [196] (word) divr16u::quotient#3 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::return#0 )
  [196] (word) divr16u::dividend#2 ← phi( divr16u/(const word) PI2_u4f12 divr16u::@3/(word) divr16u::dividend#0 )
  [196] (word) divr16u::rem#4 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::rem#9 )
  [197] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1
  [198] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  [199] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [200] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [201] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [202] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [203] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1
  [204] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [205] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [206] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [207] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [208] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [208] (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  [209] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [210] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [211] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [212] phi()
  [213] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [214] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [215] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [216] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [217] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [218] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [219] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [220] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 1.3333333333333333
(word) div16u::return#2 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 22.0
(byte~) divr16u::$2 22.0
(word) divr16u::dividend
(word) divr16u::dividend#0 2.75
(word) divr16u::dividend#2 4.714285714285714
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 16.5
(byte) divr16u::i#2 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 16.5
(word) divr16u::quotient#2 11.0
(word) divr16u::quotient#3 2.75
(word) divr16u::rem
(word) divr16u::rem#0 8.25
(word) divr16u::rem#1 22.0
(word) divr16u::rem#2 22.0
(word) divr16u::rem#4 22.0
(word) divr16u::rem#5 11.0
(word) divr16u::rem#9 11.0
(word) divr16u::return
(word) divr16u::return#0 7.000000000000001
(word) divr16u::return#2 4.0
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 22.0
(byte*) memset::dst#2 14.666666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$10 4.0
(byte~) mul8su::$7 4.0
(signed byte) mul8su::a
(signed byte) mul8su::a#0 2.6
(byte) mul8su::b
(word) mul8su::m
(word) mul8su::m#0 2.0
(word) mul8su::m#1 4.0
(word) mul8su::m#2 1.3333333333333333
(signed word) mul8su::return
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 202.0
(byte) mul8u::a
(byte) mul8u::a#0 101.0
(byte) mul8u::a#1 4.0
(byte) mul8u::a#2 2.0
(byte) mul8u::a#3 67.66666666666666
(byte) mul8u::a#6 6.0
(byte) mul8u::b
(byte) mul8u::b#1 4.0
(word) mul8u::mb
(word) mul8u::mb#0 4.0
(word) mul8u::mb#1 202.0
(word) mul8u::mb#2 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 202.0
(word) mul8u::res#2 43.85714285714286
(word) mul8u::res#6 101.0
(word) mul8u::return
(word) mul8u::return#2 4.0
(word) mul8u::return#3 4.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 4.0
(word~) mulu8_sel::$1 4.0
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 4.0
(byte) mulu8_sel::return#1 4.0
(byte) mulu8_sel::return#10 4.0
(byte) mulu8_sel::return#11 4.0
(byte) mulu8_sel::return#12 1.714285714285714
(byte) mulu8_sel::return#2 4.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 0.3333333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 2.0
(byte) mulu8_sel::v1#1 2.0
(byte) mulu8_sel::v1#2 4.0
(byte) mulu8_sel::v1#3 2.0
(byte) mulu8_sel::v1#4 2.0
(byte) mulu8_sel::v1#5 12.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 4.0
(byte) mulu8_sel::v2#1 4.0
(byte) mulu8_sel::v2#3 4.0
(byte) mulu8_sel::v2#4 4.0
(byte) mulu8_sel::v2#5 5.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 4.0
(byte) print_byte::b#7 22.0
(byte) print_byte::b#8 5.25
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#4 4.0
(byte) print_char::ch#5 4.0
(byte) print_char::ch#6 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 101.0
(byte*) print_char_cursor#102 8.5
(byte*) print_char_cursor#103 8.999999999999998
(byte*) print_char_cursor#109 54.0
(byte*~) print_char_cursor#119 22.0
(byte*) print_char_cursor#19 3.2340425531914887
(byte*) print_char_cursor#2 12.321428571428571
(byte*) print_char_cursor#66 8.0
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#1 8.783783783783784
(byte*) print_line_cursor#12 204.0
(byte*) print_line_cursor#23 13.0
(void()) print_ln()
(void()) print_sbyte((signed byte) print_sbyte::b)
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 4.0
(signed byte) print_sbyte::b#1 2.8333333333333335
(signed byte) print_sbyte::b#4 4.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#10 101.5
(byte*) print_str::str#12 2.0
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 2.8333333333333335
(signed word) print_sword::w#4 4.0
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#0 4.0
(word) print_word::w#1 4.0
(word) print_word::w#2 22.0
(word) print_word::w#3 6.333333333333334
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 4.0
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 0.05555555555555555
(signed byte) sin8s::return
(signed byte) sin8s::return#0 5.0
(signed byte) sin8s::return#2 22.0
(signed byte~) sin8s::return#5 4.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 4.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 0.3333333333333333
(byte) sin8s::usinx#1 4.0
(byte) sin8s::usinx#2 4.0
(byte) sin8s::usinx#4 2.0
(word) sin8s::x
(word) sin8s::x#0 4.0
(word) sin8s::x#1 4.0
(word) sin8s::x#2 8.5
(word) sin8s::x#4 5.0
(word) sin8s::x#6 6.0
(byte) sin8s::x1
(byte) sin8s::x1#0 0.6363636363636365
(byte) sin8s::x2
(byte) sin8s::x2#0 4.0
(byte) sin8s::x3
(byte) sin8s::x3#0 1.0
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 4.0
(byte) sin8s::x4
(byte) sin8s::x4#0 4.0
(byte) sin8s::x5
(byte) sin8s::x5#0 4.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 4.0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte~) sin8u_table::$22 22.0
(byte) sin8u_table::amplitude
(word) sin8u_table::i
(word) sin8u_table::i#1 22.0
(word) sin8u_table::i#10 1.03125
(byte) sin8u_table::max
(byte) sin8u_table::mid
(byte) sin8u_table::min
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#1 1.0476190476190477
(byte*) sin8u_table::sintab#2 2.75
(signed byte) sin8u_table::sinx
(signed byte) sin8u_table::sinx#0 2.357142857142857
(signed word) sin8u_table::sinx_sc
(signed word) sin8u_table::sinx_sc#0 2.1999999999999997
(byte) sin8u_table::sinx_tr
(byte) sin8u_table::sinx_tr#0 1.9411764705882355
(word) sin8u_table::step
(word) sin8u_table::step#0 0.2727272727272727
(word) sin8u_table::sum
(word) sin8u_table::tabsize
(word) sin8u_table::x
(word) sin8u_table::x#1 11.0
(word) sin8u_table::x#10 1.4193548387096775

Not consolidating phi with different size mul8u::mb#0 mul8u::b#1
Initial phi equivalence classes
[ sin8u_table::i#10 sin8u_table::i#1 ]
[ sin8u_table::x#10 sin8u_table::x#1 ]
[ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
[ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
[ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
[ print_char::ch#6 print_char::ch#4 print_char::ch#5 ]
[ print_char_cursor#109 print_char_cursor#66 print_char_cursor#103 print_char_cursor#19 print_char_cursor#102 print_char_cursor#2 print_char_cursor#119 print_char_cursor#1 ]
[ print_str::str#10 print_str::str#12 print_str::str#0 ]
[ print_sword::w#4 print_sword::w#0 print_sword::w#1 ]
[ print_word::w#3 print_word::w#0 print_word::w#2 print_word::w#1 ]
[ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
[ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
[ mul8u::b#1 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
[ mulu8_sel::select#5 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ memset::dst#2 memset::dst#1 ]
Added variable div16u::return#2 to zero page equivalence class [ div16u::return#2 ]
Added variable sin8u_table::step#0 to zero page equivalence class [ sin8u_table::step#0 ]
Added variable sin8s::return#2 to zero page equivalence class [ sin8s::return#2 ]
Added variable sin8u_table::sinx#0 to zero page equivalence class [ sin8u_table::sinx#0 ]
Added variable mul8su::a#0 to zero page equivalence class [ mul8su::a#0 ]
Added variable sin8u_table::sinx_sc#0 to zero page equivalence class [ sin8u_table::sinx_sc#0 ]
Added variable sin8u_table::$22 to zero page equivalence class [ sin8u_table::$22 ]
Added variable sin8u_table::sinx_tr#0 to zero page equivalence class [ sin8u_table::sinx_tr#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable mul8u::return#2 to zero page equivalence class [ mul8u::return#2 ]
Added variable mul8su::$7 to zero page equivalence class [ mul8su::$7 ]
Added variable mul8su::$10 to zero page equivalence class [ mul8su::$10 ]
Added variable mul8u::$1 to zero page equivalence class [ mul8u::$1 ]
Added variable sin8s::$4 to zero page equivalence class [ sin8s::$4 ]
Added variable sin8s::x1#0 to zero page equivalence class [ sin8s::x1#0 ]
Added variable mulu8_sel::return#0 to zero page equivalence class [ mulu8_sel::return#0 ]
Added variable sin8s::x2#0 to zero page equivalence class [ sin8s::x2#0 ]
Added variable mulu8_sel::return#1 to zero page equivalence class [ mulu8_sel::return#1 ]
Added variable sin8s::x3#0 to zero page equivalence class [ sin8s::x3#0 ]
Added variable mulu8_sel::return#2 to zero page equivalence class [ mulu8_sel::return#2 ]
Added variable sin8s::x3_6#0 to zero page equivalence class [ sin8s::x3_6#0 ]
Added variable sin8s::usinx#0 to zero page equivalence class [ sin8s::usinx#0 ]
Added variable mulu8_sel::return#10 to zero page equivalence class [ mulu8_sel::return#10 ]
Added variable sin8s::x4#0 to zero page equivalence class [ sin8s::x4#0 ]
Added variable mulu8_sel::return#11 to zero page equivalence class [ mulu8_sel::return#11 ]
Added variable sin8s::x5#0 to zero page equivalence class [ sin8s::x5#0 ]
Added variable sin8s::x5_128#0 to zero page equivalence class [ sin8s::x5_128#0 ]
Added variable mul8u::return#3 to zero page equivalence class [ mul8u::return#3 ]
Added variable mulu8_sel::$0 to zero page equivalence class [ mulu8_sel::$0 ]
Added variable mulu8_sel::$1 to zero page equivalence class [ mulu8_sel::$1 ]
Added variable mulu8_sel::return#12 to zero page equivalence class [ mulu8_sel::return#12 ]
Added variable divr16u::return#2 to zero page equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to zero page equivalence class [ div16u::return#0 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Complete equivalence classes
[ sin8u_table::i#10 sin8u_table::i#1 ]
[ sin8u_table::x#10 sin8u_table::x#1 ]
[ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
[ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
[ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
[ print_char::ch#6 print_char::ch#4 print_char::ch#5 ]
[ print_char_cursor#109 print_char_cursor#66 print_char_cursor#103 print_char_cursor#19 print_char_cursor#102 print_char_cursor#2 print_char_cursor#119 print_char_cursor#1 ]
[ print_str::str#10 print_str::str#12 print_str::str#0 ]
[ print_sword::w#4 print_sword::w#0 print_sword::w#1 ]
[ print_word::w#3 print_word::w#0 print_word::w#2 print_word::w#1 ]
[ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
[ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
[ mul8u::b#1 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
[ mulu8_sel::select#5 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ memset::dst#2 memset::dst#1 ]
[ div16u::return#2 ]
[ sin8u_table::step#0 ]
[ sin8s::return#2 ]
[ sin8u_table::sinx#0 ]
[ mul8su::a#0 ]
[ sin8u_table::sinx_sc#0 ]
[ sin8u_table::$22 ]
[ sin8u_table::sinx_tr#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ mul8u::return#2 ]
[ mul8su::$7 ]
[ mul8su::$10 ]
[ mul8u::$1 ]
[ sin8s::$4 ]
[ sin8s::x1#0 ]
[ mulu8_sel::return#0 ]
[ sin8s::x2#0 ]
[ mulu8_sel::return#1 ]
[ sin8s::x3#0 ]
[ mulu8_sel::return#2 ]
[ sin8s::x3_6#0 ]
[ sin8s::usinx#0 ]
[ mulu8_sel::return#10 ]
[ sin8s::x4#0 ]
[ mulu8_sel::return#11 ]
[ sin8s::x5#0 ]
[ sin8s::x5_128#0 ]
[ mul8u::return#3 ]
[ mulu8_sel::$0 ]
[ mulu8_sel::$1 ]
[ mulu8_sel::return#12 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
Allocated zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ]
Allocated zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ]
Allocated zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
Allocated zp[2]:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
Allocated zp[1]:10 [ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
Allocated zp[1]:11 [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ]
Allocated zp[2]:12 [ print_char_cursor#109 print_char_cursor#66 print_char_cursor#103 print_char_cursor#19 print_char_cursor#102 print_char_cursor#2 print_char_cursor#119 print_char_cursor#1 ]
Allocated zp[2]:14 [ print_str::str#10 print_str::str#12 print_str::str#0 ]
Allocated zp[2]:16 [ print_sword::w#4 print_sword::w#0 print_sword::w#1 ]
Allocated zp[2]:18 [ print_word::w#3 print_word::w#0 print_word::w#2 print_word::w#1 ]
Allocated zp[1]:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Allocated zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
Allocated zp[1]:23 [ mul8u::b#1 ]
Allocated zp[1]:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
Allocated zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp[2]:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp[1]:29 [ sin8s::isUpper#10 ]
Allocated zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
Allocated zp[1]:32 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
Allocated zp[1]:33 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
Allocated zp[1]:34 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
Allocated zp[1]:35 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
Allocated zp[1]:36 [ mulu8_sel::select#5 ]
Allocated zp[2]:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:39 [ divr16u::dividend#2 divr16u::dividend#0 ]
Allocated zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[1]:43 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[2]:44 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:46 [ div16u::return#2 ]
Allocated zp[2]:48 [ sin8u_table::step#0 ]
Allocated zp[1]:50 [ sin8s::return#2 ]
Allocated zp[1]:51 [ sin8u_table::sinx#0 ]
Allocated zp[1]:52 [ mul8su::a#0 ]
Allocated zp[2]:53 [ sin8u_table::sinx_sc#0 ]
Allocated zp[1]:55 [ sin8u_table::$22 ]
Allocated zp[1]:56 [ sin8u_table::sinx_tr#0 ]
Allocated zp[1]:57 [ print_byte::$0 ]
Allocated zp[1]:58 [ print_byte::$2 ]
Allocated zp[2]:59 [ mul8u::return#2 ]
Allocated zp[1]:61 [ mul8su::$7 ]
Allocated zp[1]:62 [ mul8su::$10 ]
Allocated zp[1]:63 [ mul8u::$1 ]
Allocated zp[2]:64 [ sin8s::$4 ]
Allocated zp[1]:66 [ sin8s::x1#0 ]
Allocated zp[1]:67 [ mulu8_sel::return#0 ]
Allocated zp[1]:68 [ sin8s::x2#0 ]
Allocated zp[1]:69 [ mulu8_sel::return#1 ]
Allocated zp[1]:70 [ sin8s::x3#0 ]
Allocated zp[1]:71 [ mulu8_sel::return#2 ]
Allocated zp[1]:72 [ sin8s::x3_6#0 ]
Allocated zp[1]:73 [ sin8s::usinx#0 ]
Allocated zp[1]:74 [ mulu8_sel::return#10 ]
Allocated zp[1]:75 [ sin8s::x4#0 ]
Allocated zp[1]:76 [ mulu8_sel::return#11 ]
Allocated zp[1]:77 [ sin8s::x5#0 ]
Allocated zp[1]:78 [ sin8s::x5_128#0 ]
Allocated zp[2]:79 [ mul8u::return#3 ]
Allocated zp[2]:81 [ mulu8_sel::$0 ]
Allocated zp[2]:83 [ mulu8_sel::$1 ]
Allocated zp[1]:85 [ mulu8_sel::return#12 ]
Allocated zp[2]:86 [ divr16u::return#2 ]
Allocated zp[2]:88 [ div16u::return#0 ]
Allocated zp[1]:90 [ divr16u::$1 ]
Allocated zp[1]:91 [ divr16u::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_char_cursor = $c
  .label print_line_cursor = 8
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label tabsize = $14
    // [5] call print_cls 
    // [212] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call sin8u_table 
    // [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
  sin8u_table_from___b1:
    jsr sin8u_table
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    sintab: .fill $14, 0
}
  // sin8u_table
// Generate unsigned byte sinus table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sinus points (the size of the table)
// min - the minimal value
// max - the maximal value
// sin8u_table(byte* zeropage(6) sintab)
sin8u_table: {
    .const min = $a
    .const max = $ff
    .label amplitude = max-min
    .const sum = min+max
    .const mid = sum/2+1
    .label __22 = $37
    .label step = $30
    .label sinx = $33
    .label sinx_sc = $35
    .label sinx_tr = $38
    .label sintab = 6
    .label x = 4
    .label i = 2
    // [10] call div16u 
    // [190] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
  div16u_from_sin8u_table:
    jsr div16u
    // [11] (word) div16u::return#2 ← (word) div16u::return#0 -- vwuz1=vwuz2 
    lda.z div16u.return
    sta.z div16u.return_2
    lda.z div16u.return+1
    sta.z div16u.return_2+1
    jmp __b3
    // sin8u_table::@3
  __b3:
    // [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 -- vwuz1=vwuz2 
    lda.z div16u.return_2
    sta.z step
    lda.z div16u.return_2+1
    sta.z step+1
    // [13] call print_str 
    // [85] phi from sin8u_table::@3 to print_str [phi:sin8u_table::@3->print_str]
  print_str_from___b3:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) 1024 [phi:sin8u_table::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str [phi:sin8u_table::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // sin8u_table::@4
  __b4:
    // [14] (word) print_word::w#1 ← (word) sin8u_table::step#0 -- vwuz1=vwuz2 
    lda.z step
    sta.z print_word.w
    lda.z step+1
    sta.z print_word.w+1
    // [15] call print_word 
    // [102] phi from sin8u_table::@4 to print_word [phi:sin8u_table::@4->print_word]
  print_word_from___b4:
    // [102] phi (byte*) print_char_cursor#102 = (byte*) print_char_cursor#2 [phi:sin8u_table::@4->print_word#0] -- register_copy 
    // [102] phi (word) print_word::w#3 = (word) print_word::w#1 [phi:sin8u_table::@4->print_word#1] -- register_copy 
    jsr print_word
    // [16] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
  __b5_from___b4:
    jmp __b5
    // sin8u_table::@5
  __b5:
    // [17] call print_str 
    // [85] phi from sin8u_table::@5 to print_str [phi:sin8u_table::@5->print_str]
  print_str_from___b5:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@5->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str1 [phi:sin8u_table::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [18] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
  __b6_from___b5:
    jmp __b6
    // sin8u_table::@6
  __b6:
    // [19] call print_byte 
    // [73] phi from sin8u_table::@6 to print_byte [phi:sin8u_table::@6->print_byte]
  print_byte_from___b6:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@6->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@6->print_byte#1] -- vbuz1=vbuc1 
    lda #min
    sta.z print_byte.b
    jsr print_byte
    // [20] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
  __b7_from___b6:
    jmp __b7
    // sin8u_table::@7
  __b7:
    // [21] call print_str 
    // [85] phi from sin8u_table::@7 to print_str [phi:sin8u_table::@7->print_str]
  print_str_from___b7:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@7->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str2 [phi:sin8u_table::@7->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [22] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
  __b8_from___b7:
    jmp __b8
    // sin8u_table::@8
  __b8:
    // [23] call print_byte 
    // [73] phi from sin8u_table::@8 to print_byte [phi:sin8u_table::@8->print_byte]
  print_byte_from___b8:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@8->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@8->print_byte#1] -- vbuz1=vbuc1 
    lda #max
    sta.z print_byte.b
    jsr print_byte
    // [24] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
  __b9_from___b8:
    jmp __b9
    // sin8u_table::@9
  __b9:
    // [25] call print_str 
    // [85] phi from sin8u_table::@9 to print_str [phi:sin8u_table::@9->print_str]
  print_str_from___b9:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@9->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str3 [phi:sin8u_table::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // [26] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
  __b10_from___b9:
    jmp __b10
    // sin8u_table::@10
  __b10:
    // [27] call print_byte 
    // [73] phi from sin8u_table::@10 to print_byte [phi:sin8u_table::@10->print_byte]
  print_byte_from___b10:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@10->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@10->print_byte#1] -- vbuz1=vbuc1 
    lda #amplitude
    sta.z print_byte.b
    jsr print_byte
    // [28] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
  __b11_from___b10:
    jmp __b11
    // sin8u_table::@11
  __b11:
    // [29] call print_str 
    // [85] phi from sin8u_table::@11 to print_str [phi:sin8u_table::@11->print_str]
  print_str_from___b11:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@11->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str4 [phi:sin8u_table::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    // [30] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
  __b12_from___b11:
    jmp __b12
    // sin8u_table::@12
  __b12:
    // [31] call print_byte 
    // [73] phi from sin8u_table::@12 to print_byte [phi:sin8u_table::@12->print_byte]
  print_byte_from___b12:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@12->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@12->print_byte#1] -- vbuz1=vbuc1 
    lda #mid
    sta.z print_byte.b
    jsr print_byte
    // [32] phi from sin8u_table::@12 to sin8u_table::@13 [phi:sin8u_table::@12->sin8u_table::@13]
  __b13_from___b12:
    jmp __b13
    // sin8u_table::@13
  __b13:
    // [33] call print_ln 
    // [68] phi from sin8u_table::@13 to print_ln [phi:sin8u_table::@13->print_ln]
  print_ln_from___b13:
    // [68] phi (byte*) print_line_cursor#23 = (byte*) 1024 [phi:sin8u_table::@13->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    jsr print_ln
    // [34] phi from sin8u_table::@13 to sin8u_table::@1 [phi:sin8u_table::@13->sin8u_table::@1]
  __b1_from___b13:
    // [34] phi (byte*) sin8u_table::sintab#2 = (const byte[$14]) main::sintab [phi:sin8u_table::@13->sin8u_table::@1#0] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta.z sintab
    lda #>main.sintab
    sta.z sintab+1
    // [34] phi (word) sin8u_table::x#10 = (byte) 0 [phi:sin8u_table::@13->sin8u_table::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [34] phi (word) sin8u_table::i#10 = (byte) 0 [phi:sin8u_table::@13->sin8u_table::@1#2] -- vwuz1=vbuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.12]
    // sin8u_table::@1
  __b1:
    // [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.tabsize
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.tabsize
    bcc __b2
  !:
    jmp __breturn
    // sin8u_table::@return
  __breturn:
    // [36] return 
    rts
    // sin8u_table::@2
  __b2:
    // [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [38] call sin8s 
    jsr sin8s
    // [39] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0 -- vbsz1=vbsz2 
    lda.z sin8s.return
    sta.z sin8s.return_2
    jmp __b14
    // sin8u_table::@14
  __b14:
    // [40] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2 -- vbsz1=vbsz2 
    lda.z sin8s.return_2
    sta.z sinx
    // [41] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0 -- vbsz1=vbsz2 
    lda.z sinx
    sta.z mul8su.a
    // [42] call mul8su 
    jsr mul8su
    jmp __b15
    // sin8u_table::@15
  __b15:
    // [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2 -- vwsz1=vwsz2 
    lda.z mul8su.m
    sta.z sinx_sc
    lda.z mul8su.m+1
    sta.z sinx_sc+1
    // [44] (byte~) sin8u_table::$22 ← > (signed word) sin8u_table::sinx_sc#0 -- vbuz1=_hi_vwsz2 
    lda.z sinx_sc+1
    sta.z __22
    // [45] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$22 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __22
    axs #-[mid]
    stx.z sinx_tr
    // [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 -- _deref_pbuz1=vbuz2 
    lda.z sinx_tr
    ldy #0
    sta (sintab),y
    // [47] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 -- pbuz1=_inc_pbuz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [48] (byte*~) print_char_cursor#119 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [49] call print_str 
    // [85] phi from sin8u_table::@15 to print_str [phi:sin8u_table::@15->print_str]
  print_str_from___b15:
    // [85] phi (byte*) print_char_cursor#109 = (byte*~) print_char_cursor#119 [phi:sin8u_table::@15->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str5 [phi:sin8u_table::@15->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str.str
    lda #>str5
    sta.z print_str.str+1
    jsr print_str
    jmp __b16
    // sin8u_table::@16
  __b16:
    // [50] (word) print_word::w#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z print_word.w
    lda.z x+1
    sta.z print_word.w+1
    // [51] call print_word 
    // [102] phi from sin8u_table::@16 to print_word [phi:sin8u_table::@16->print_word]
  print_word_from___b16:
    // [102] phi (byte*) print_char_cursor#102 = (byte*) print_char_cursor#2 [phi:sin8u_table::@16->print_word#0] -- register_copy 
    // [102] phi (word) print_word::w#3 = (word) print_word::w#2 [phi:sin8u_table::@16->print_word#1] -- register_copy 
    jsr print_word
    // [52] phi from sin8u_table::@16 to sin8u_table::@17 [phi:sin8u_table::@16->sin8u_table::@17]
  __b17_from___b16:
    jmp __b17
    // sin8u_table::@17
  __b17:
    // [53] call print_str 
    // [85] phi from sin8u_table::@17 to print_str [phi:sin8u_table::@17->print_str]
  print_str_from___b17:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@17->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str6 [phi:sin8u_table::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta.z print_str.str
    lda #>str6
    sta.z print_str.str+1
    jsr print_str
    jmp __b18
    // sin8u_table::@18
  __b18:
    // [54] (signed byte) print_sbyte::b#1 ← (signed byte) sin8u_table::sinx#0 -- vbsz1=vbsz2 
    lda.z sinx
    sta.z print_sbyte.b
    // [55] call print_sbyte 
    jsr print_sbyte
    // [56] phi from sin8u_table::@18 to sin8u_table::@19 [phi:sin8u_table::@18->sin8u_table::@19]
  __b19_from___b18:
    jmp __b19
    // sin8u_table::@19
  __b19:
    // [57] call print_str 
    // [85] phi from sin8u_table::@19 to print_str [phi:sin8u_table::@19->print_str]
  print_str_from___b19:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@19->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str7 [phi:sin8u_table::@19->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta.z print_str.str
    lda #>str7
    sta.z print_str.str+1
    jsr print_str
    jmp __b20
    // sin8u_table::@20
  __b20:
    // [58] (signed word) print_sword::w#1 ← (signed word) sin8u_table::sinx_sc#0 -- vwsz1=vwsz2 
    lda.z sinx_sc
    sta.z print_sword.w
    lda.z sinx_sc+1
    sta.z print_sword.w+1
    // [59] call print_sword 
    jsr print_sword
    // [60] phi from sin8u_table::@20 to sin8u_table::@21 [phi:sin8u_table::@20->sin8u_table::@21]
  __b21_from___b20:
    jmp __b21
    // sin8u_table::@21
  __b21:
    // [61] call print_str 
    // [85] phi from sin8u_table::@21 to print_str [phi:sin8u_table::@21->print_str]
  print_str_from___b21:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@21->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str8 [phi:sin8u_table::@21->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta.z print_str.str
    lda #>str8
    sta.z print_str.str+1
    jsr print_str
    jmp __b22
    // sin8u_table::@22
  __b22:
    // [62] (byte) print_byte::b#7 ← (byte) sin8u_table::sinx_tr#0 -- vbuz1=vbuz2 
    lda.z sinx_tr
    sta.z print_byte.b
    // [63] call print_byte 
    // [73] phi from sin8u_table::@22 to print_byte [phi:sin8u_table::@22->print_byte]
  print_byte_from___b22:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@22->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#7 [phi:sin8u_table::@22->print_byte#1] -- register_copy 
    jsr print_byte
    // [64] phi from sin8u_table::@22 to sin8u_table::@23 [phi:sin8u_table::@22->sin8u_table::@23]
  __b23_from___b22:
    jmp __b23
    // sin8u_table::@23
  __b23:
    // [65] call print_ln 
    // [68] phi from sin8u_table::@23 to print_ln [phi:sin8u_table::@23->print_ln]
  print_ln_from___b23:
    // [68] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:sin8u_table::@23->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b24
    // sin8u_table::@24
  __b24:
    // [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // [67] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [34] phi from sin8u_table::@24 to sin8u_table::@1 [phi:sin8u_table::@24->sin8u_table::@1]
  __b1_from___b24:
    // [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@24->sin8u_table::@1#0] -- register_copy 
    // [34] phi (word) sin8u_table::x#10 = (word) sin8u_table::x#1 [phi:sin8u_table::@24->sin8u_table::@1#1] -- register_copy 
    // [34] phi (word) sin8u_table::i#10 = (word) sin8u_table::i#1 [phi:sin8u_table::@24->sin8u_table::@1#2] -- register_copy 
    jmp __b1
    str: .text "step:"
    .byte 0
    str1: .text " min:"
    .byte 0
    str2: .text " max:"
    .byte 0
    str3: .text " ampl:"
    .byte 0
    str4: .text " mid:"
    .byte 0
    str5: .text "x: "
    .byte 0
    str6: .text " sin: "
    .byte 0
    str7: .text " scaled: "
    .byte 0
    str8: .text " trans: "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [69] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [69] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [72] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage($a) b)
print_byte: {
    .label __0 = $39
    .label __2 = $3a
    .label b = $a
    // [74] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [75] (byte) print_char::ch#4 ← *((const byte[]) print_hextab + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [76] call print_char 
    // [81] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#103 [phi:print_byte->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) print_char::ch#4 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_byte::@1
  __b1:
    // [77] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [78] (byte) print_char::ch#5 ← *((const byte[]) print_hextab + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [79] call print_char 
    // [81] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#19 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_byte::@return
  __breturn:
    // [80] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zeropage($b) ch)
print_char: {
    .label ch = $b
    // [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [83] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#66 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [84] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zeropage($e) str)
print_str: {
    .label str = $e
    // [86] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  __b1_from_print_str:
  __b1_from___b2:
    // [86] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#109 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [86] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [88] return 
    rts
    // print_str::@2
  __b2:
    // [89] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
    // [90] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage($10) w)
print_sword: {
    .label w = $10
    // [92] if((signed word) print_sword::w#1<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sword
    // [93] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
  __b3_from_print_sword:
    jmp __b3
    // print_sword::@3
  __b3:
    // [94] call print_char 
    // [81] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
  print_char_from___b3:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sword::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [95] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [95] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#1 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
    jmp __b2
    // print_sword::@2
  __b2:
    // [96] (word) print_word::w#0 ← (word)(signed word) print_sword::w#4 -- vwuz1=vwuz2 
    lda.z w
    sta.z print_word.w
    lda.z w+1
    sta.z print_word.w+1
    // [97] call print_word 
    // [102] phi from print_sword::@2 to print_word [phi:print_sword::@2->print_word]
  print_word_from___b2:
    // [102] phi (byte*) print_char_cursor#102 = (byte*) print_char_cursor#19 [phi:print_sword::@2->print_word#0] -- register_copy 
    // [102] phi (word) print_word::w#3 = (word) print_word::w#0 [phi:print_sword::@2->print_word#1] -- register_copy 
    jsr print_word
    jmp __breturn
    // print_sword::@return
  __breturn:
    // [98] return 
    rts
    // [99] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
  __b1_from_print_sword:
    jmp __b1
    // print_sword::@1
  __b1:
    // [100] call print_char 
    // [81] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sword::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_sword::@4
  __b4:
    // [101] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_word
// Print a word as HEX
// print_word(word zeropage($12) w)
print_word: {
    .label w = $12
    // [103] (byte) print_byte::b#1 ← > (word) print_word::w#3 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_byte.b
    // [104] call print_byte 
    // [73] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#102 [phi:print_word->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp __b1
    // print_word::@1
  __b1:
    // [105] (byte) print_byte::b#2 ← < (word) print_word::w#3 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_byte.b
    // [106] call print_byte 
    // [73] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from___b1:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#19 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp __breturn
    // print_word::@return
  __breturn:
    // [107] return 
    rts
}
  // print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage($14) b)
print_sbyte: {
    .label b = $14
    // [108] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1_from_print_sbyte
    // [109] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  __b3_from_print_sbyte:
    jmp __b3
    // print_sbyte::@3
  __b3:
    // [110] call print_char 
    // [81] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  print_char_from___b3:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sbyte::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [111] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [111] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    jmp __b2
    // print_sbyte::@2
  __b2:
    // [112] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#4 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_byte.b
    // [113] call print_byte 
    // [73] phi from print_sbyte::@2 to print_byte [phi:print_sbyte::@2->print_byte]
  print_byte_from___b2:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#19 [phi:print_sbyte::@2->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#0 [phi:print_sbyte::@2->print_byte#1] -- register_copy 
    jsr print_byte
    jmp __breturn
    // print_sbyte::@return
  __breturn:
    // [114] return 
    rts
    // [115] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  __b1_from_print_sbyte:
    jmp __b1
    // print_sbyte::@1
  __b1:
    // [116] call print_char 
    // [81] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sbyte::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_sbyte::@4
  __b4:
    // [117] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2_from___b4
}
  // mul8su
// Multiply a signed byte and an unsigned byte (into a signed word)
// Fixes offsets introduced by using unsigned multiplication
// mul8su(signed byte zeropage($34) a)
mul8su: {
    .const b = sin8u_table.amplitude+1
    .label __7 = $3d
    .label __10 = $3e
    .label m = $15
    .label a = $34
    // [118] (byte) mul8u::a#1 ← (byte)(signed byte) mul8su::a#0 -- vbuz1=vbuz2 
    lda.z a
    sta.z mul8u.a
    // [119] call mul8u 
    // [128] phi from mul8su to mul8u [phi:mul8su->mul8u]
  mul8u_from_mul8su:
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:mul8su->mul8u#0] -- register_copy 
    // [128] phi (word) mul8u::mb#0 = (const byte) mul8su::b#0 [phi:mul8su->mul8u#1] -- vwuz1=vbuc1 
    lda #<b
    sta.z mul8u.mb
    lda #>b
    sta.z mul8u.mb+1
    jsr mul8u
    // [120] (word) mul8u::return#2 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda.z mul8u.res
    sta.z mul8u.return
    lda.z mul8u.res+1
    sta.z mul8u.return+1
    jmp __b3
    // mul8su::@3
  __b3:
    // [121] (word) mul8su::m#0 ← (word) mul8u::return#2 -- vwuz1=vwuz2 
    lda.z mul8u.return
    sta.z m
    lda.z mul8u.return+1
    sta.z m+1
    // [122] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1 -- vbsz1_ge_0_then_la1 
    lda.z a
    cmp #0
    bpl __b1_from___b3
    jmp __b2
    // mul8su::@2
  __b2:
    // [123] (byte~) mul8su::$7 ← > (word) mul8su::m#0 -- vbuz1=_hi_vwuz2 
    lda.z m+1
    sta.z __7
    // [124] (byte~) mul8su::$10 ← (byte~) mul8su::$7 - (const byte) mul8su::b#0 -- vbuz1=vbuz2_minus_vbuc1 
    lax.z __7
    axs #b
    stx.z __10
    // [125] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$10 -- vwuz1=vwuz1_sethi_vbuz2 
    lda.z __10
    sta.z m+1
    // [126] phi from mul8su::@2 mul8su::@3 to mul8su::@1 [phi:mul8su::@2/mul8su::@3->mul8su::@1]
  __b1_from___b2:
  __b1_from___b3:
    // [126] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@3->mul8su::@1#0] -- register_copy 
    jmp __b1
    // mul8su::@1
  __b1:
    jmp __breturn
    // mul8su::@return
  __breturn:
    // [127] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte zeropage($18) a, byte zeropage($17) b)
mul8u: {
    .label __1 = $3f
    .label mb = $1b
    .label a = $18
    .label res = $19
    .label return = $3b
    .label b = $17
    .label return_3 = $4f
    // [129] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [129] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [129] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [129] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [130] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuz1_neq_0_then_la1 
    lda.z a
    cmp #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [131] return 
    rts
    // mul8u::@2
  __b2:
    // [132] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z a
    sta.z __1
    // [133] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuz1_eq_0_then_la1 
    lda.z __1
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [134] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [135] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [135] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [136] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z a
    // [137] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [129] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [129] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [129] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [129] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage($1e) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = $40
    .label x = $1e
    .label x1 = $42
    .label x2 = $44
    .label x3 = $46
    .label x3_6 = $48
    .label usinx = $49
    .label x4 = $4b
    .label x5 = $4d
    .label x5_128 = $4e
    .label usinx_1 = $20
    .label usinx_2 = $20
    .label return = $21
    .label sinx = $21
    .label return_2 = $32
    .label usinx_4 = $20
    .label isUpper = $1d
    // [138] if((word) sin8s::x#2<(const word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b1_from_sin8s
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b1_from_sin8s
  !:
    jmp __b5
    // sin8s::@5
  __b5:
    // [139] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [140] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  __b1_from___b5:
    // [140] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [140] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [140] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b1_from_sin8s:
    // [140] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [140] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp __b1
    // sin8s::@1
  __b1:
    // [141] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2_from___b1
  !:
    jmp __b6
    // sin8s::@6
  __b6:
    // [142] (word) sin8s::x#1 ← (const word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [143] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  __b2_from___b1:
  __b2_from___b6:
    // [143] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp __b2
    // sin8s::@2
  __b2:
    // [144] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // [145] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z __4+1
    sta.z x1
    // [146] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v1
    // [147] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [148] call mulu8_sel 
    // [181] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from___b2:
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [149] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_12
    sta.z mulu8_sel.return
    jmp __b9
    // sin8s::@9
  __b9:
    // [150] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return
    sta.z x2
    // [151] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuz1=vbuz2 
    lda.z x2
    sta.z mulu8_sel.v1
    // [152] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [153] call mulu8_sel 
    // [181] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from___b9:
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [154] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_12
    sta.z mulu8_sel.return_1
    jmp __b10
    // sin8s::@10
  __b10:
    // [155] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_1
    sta.z x3
    // [156] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda.z x3
    sta.z mulu8_sel.v1
    // [157] call mulu8_sel 
    // [181] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from___b10:
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuz1=vbuc1 
    lda #DIV_6
    sta.z mulu8_sel.v2
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [158] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_12
    sta.z mulu8_sel.return_2
    jmp __b11
    // sin8s::@11
  __b11:
    // [159] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_2
    sta.z x3_6
    // [160] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    // [161] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda.z x3
    sta.z mulu8_sel.v1
    // [162] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [163] call mulu8_sel 
    // [181] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from___b11:
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [164] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_12
    sta.z mulu8_sel.return_10
    jmp __b12
    // sin8s::@12
  __b12:
    // [165] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_10
    sta.z x4
    // [166] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuz1=vbuz2 
    lda.z x4
    sta.z mulu8_sel.v1
    // [167] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [168] call mulu8_sel 
    // [181] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from___b12:
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [169] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_12
    sta.z mulu8_sel.return_11
    jmp __b13
    // sin8s::@13
  __b13:
    // [170] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_11
    sta.z x5
    // [171] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z x5
    lsr
    lsr
    lsr
    lsr
    sta.z x5_128
    // [172] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z usinx
    clc
    adc.z x5_128
    sta.z usinx_1
    // [173] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z usinx_1
    cmp #$80
    bcc __b3_from___b13
    jmp __b7
    // sin8s::@7
  __b7:
    // [174] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuz1=_dec_vbuz1 
    dec.z usinx_2
    // [175] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  __b3_from___b13:
  __b3_from___b7:
    // [175] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp __b3
    // sin8s::@3
  __b3:
    // [176] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b14
    jmp __b8
    // sin8s::@8
  __b8:
    // [177] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsz1=_neg_vbsz2 
    lda.z usinx_4
    eor #$ff
    clc
    adc #1
    sta.z sinx
    // [178] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  __b4_from___b14:
  __b4_from___b8:
    // [178] phi (signed byte) sin8s::return#0 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp __b4
    // sin8s::@4
  __b4:
    jmp __breturn
    // sin8s::@return
  __breturn:
    // [179] return 
    rts
    // sin8s::@14
  __b14:
    // [180] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsz1=vbsz2 
    lda.z usinx_4
    sta.z return
    jmp __b4_from___b14
}
  // mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte zeropage($22) v1, byte zeropage($23) v2, byte zeropage($24) select)
mulu8_sel: {
    .label __0 = $51
    .label __1 = $53
    .label v1 = $22
    .label v2 = $23
    .label return = $43
    .label return_1 = $45
    .label return_2 = $47
    .label return_10 = $4a
    .label return_11 = $4c
    .label select = $24
    .label return_12 = $55
    // [182] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5 -- vbuz1=vbuz2 
    lda.z v1
    sta.z mul8u.a
    // [183] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 -- vbuz1=vbuz2 
    lda.z v2
    sta.z mul8u.b
    // [184] call mul8u 
    // [128] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
    // [128] phi (word) mul8u::mb#0 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- vwuz1=vbuz2 
    lda.z mul8u.b
    sta.z mul8u.mb
    lda #0
    sta.z mul8u.mb+1
    jsr mul8u
    // [185] (word) mul8u::return#3 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda.z mul8u.res
    sta.z mul8u.return_3
    lda.z mul8u.res+1
    sta.z mul8u.return_3+1
    jmp __b1
    // mulu8_sel::@1
  __b1:
    // [186] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 -- vwuz1=vwuz2 
    lda.z mul8u.return_3
    sta.z __0
    lda.z mul8u.return_3+1
    sta.z __0+1
    // [187] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz2_rol_vbuz3 
    lda.z __0
    sta.z __1
    lda.z __0+1
    sta.z __1+1
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // [188] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuz1=_hi_vwuz2 
    lda.z __1+1
    sta.z return_12
    jmp __breturn
    // mulu8_sel::@return
  __breturn:
    // [189] return 
    rts
}
  // div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $58
    .label return_2 = $2e
    // [191] call divr16u 
    // [195] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
    // [192] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z divr16u.return_2
    lda.z divr16u.return+1
    sta.z divr16u.return_2+1
    jmp __b1
    // div16u::@1
  __b1:
    // [193] (word) div16u::return#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda.z divr16u.return_2
    sta.z return
    lda.z divr16u.return_2+1
    sta.z return+1
    jmp __breturn
    // div16u::@return
  __breturn:
    // [194] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($27) dividend, word zeropage($25) rem)
divr16u: {
    .label __1 = $5a
    .label __2 = $5b
    .label rem = $25
    .label dividend = $27
    .label quotient = $29
    .label i = $2b
    .label return = $29
    .label return_2 = $56
    // [196] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [196] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [196] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [196] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [196] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp __b1
    // [196] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [196] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [196] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [196] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [196] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [197] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [198] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuz1=_hi_vwuz2 
    lda.z dividend+1
    sta.z __1
    // [199] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z __1
    sta.z __2
    // [200] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda.z __2
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [201] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [202] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [202] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [203] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [204] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [205] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.tabsize
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<main.tabsize
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [206] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [207] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.tabsize
    sta.z rem
    lda.z rem+1
    sbc #>main.tabsize
    sta.z rem+1
    // [208] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [208] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [208] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [209] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [210] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z i
    bne __b1_from___b3
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [211] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [213] call memset 
    // [215] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [214] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $2c
    // [216] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [216] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [217] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [218] return 
    rts
    // memset::@2
  __b2:
    // [219] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [220] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [216] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [216] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:55 [ sin8u_table::$22 ] has ALU potential.
Statement [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] ) always clobbers reg byte a 
Statement [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] ) always clobbers reg byte a 
Statement [14] (word) print_word::w#1 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_word::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_word::w#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:51 [ sin8u_table::sinx#0 ]
Statement [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:51 [ sin8u_table::sinx#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:56 [ sin8u_table::sinx_tr#0 ]
Statement [48] (byte*~) print_char_cursor#119 ← (byte*) print_line_cursor#1 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#119 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#119 print_line_cursor#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:56 [ sin8u_table::sinx_tr#0 ]
Statement [50] (word) print_word::w#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#2 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#2 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [58] (signed word) print_sword::w#1 ← (signed word) sin8u_table::sinx_sc#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sword::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sword::w#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#19 ] main:2::sin8u_table:7::print_ln:65 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#19 ] main:2::sin8u_table:7::print_ln:65 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [74] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4 [ print_byte::b#8 print_char_cursor#103 print_byte::$0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_byte:63 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:104 [ sin8u_table::step#0 print_word::w#3 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_word:51::print_byte:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:106 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_word:51::print_byte:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_sbyte:55::print_byte:113 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
Statement [77] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f [ print_char_cursor#19 print_byte::$2 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_byte:63 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:104 [ sin8u_table::step#0 print_word::w#3 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_word:51::print_byte:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:106 [ sin8u_table::step#0 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_word:51::print_byte:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_sbyte:55::print_byte:113 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_byte::$2 ] ) always clobbers reg byte a 
Statement [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#6 [ print_char_cursor#66 ] ( main:2::sin8u_table:7::print_byte:19::print_char:76 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:23::print_char:76 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:27::print_char:76 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:31::print_char:76 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:63::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:15::print_byte:104::print_char:76 [ sin8u_table::step#0 print_word::w#3 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:51::print_byte:104::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:104::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:15::print_byte:106::print_char:76 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:51::print_byte:106::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:106::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_sbyte:55::print_byte:113::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:19::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:23::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:27::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:31::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:63::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:15::print_byte:104::print_char:79 [ sin8u_table::step#0 print_word::w#3 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:51::print_byte:104::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:104::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:15::print_byte:106::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:51::print_byte:106::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:106::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sbyte:55::print_byte:113::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sword::w#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_char:100 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sword::w#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sbyte:55::print_char:110 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sbyte::b#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sbyte:55::print_char:116 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sbyte::b#1 print_char_cursor#66 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:10 [ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Statement [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 [ print_char_cursor#2 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:49 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:53 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:57 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:61 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [89] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) [ print_char_cursor#2 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:49 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:53 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:57 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:61 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [92] if((signed word) print_sword::w#1<(signed byte) 0) goto print_sword::@1 [ print_sword::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7::print_sword:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sword::w#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [96] (word) print_word::w#0 ← (word)(signed word) print_sword::w#4 [ print_char_cursor#19 print_word::w#0 ] ( main:2::sin8u_table:7::print_sword:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_word::w#0 ] ) always clobbers reg byte a 
Statement [101] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 [ print_char_cursor#19 print_sword::w#0 ] ( main:2::sin8u_table:7::print_sword:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [103] (byte) print_byte::b#1 ← > (word) print_word::w#3 [ print_byte::b#1 print_char_cursor#102 print_word::w#3 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 print_byte::b#1 print_char_cursor#102 print_word::w#3 ] main:2::sin8u_table:7::print_word:51 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#1 print_char_cursor#102 print_word::w#3 ] main:2::sin8u_table:7::print_sword:59::print_word:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#1 print_char_cursor#102 print_word::w#3 ] ) always clobbers reg byte a 
Statement [105] (byte) print_byte::b#2 ← < (word) print_word::w#3 [ print_char_cursor#19 print_byte::b#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 print_char_cursor#19 print_byte::b#2 ] main:2::sin8u_table:7::print_word:51 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_byte::b#2 ] main:2::sin8u_table:7::print_sword:59::print_word:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [117] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 [ print_char_cursor#19 print_sbyte::b#0 ] ( main:2::sin8u_table:7::print_sbyte:55 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [120] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:42 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::return#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:52 [ mul8su::a#0 ]
Statement [121] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:42 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8su::m#0 ] ) always clobbers reg byte a 
Statement [123] (byte~) mul8su::$7 ← > (word) mul8su::m#0 [ mul8su::m#0 mul8su::$7 ] ( main:2::sin8u_table:7::mul8su:42 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::m#0 mul8su::$7 ] ) always clobbers reg byte a 
Statement [134] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:42::mul8u:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:148::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:153::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:157::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:163::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:168::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:29 [ sin8s::isUpper#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:66 [ sin8s::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:36 [ mulu8_sel::select#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:70 [ sin8s::x3#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:73 [ sin8s::usinx#0 ]
Statement [138] if((word) sin8s::x#2<(const word) PI_u4f12) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#2 ] ) always clobbers reg byte a 
Statement [139] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [141] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] ) always clobbers reg byte a 
Statement [142] (word) sin8s::x#1 ← (const word) PI_u4f12 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] ) always clobbers reg byte a 
Statement [144] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::$4 ] ) always clobbers reg byte a 
Statement [145] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 ] ) always clobbers reg byte a 
Statement [160] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) always clobbers reg byte a 
Statement [171] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ) always clobbers reg byte a 
Statement [172] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) always clobbers reg byte a 
Statement [177] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::sinx#1 ] ) always clobbers reg byte a 
Statement [185] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:153 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:157 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:163 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:168 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] ) always clobbers reg byte a 
Statement [186] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:153 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:157 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:163 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:168 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] ) always clobbers reg byte a 
Statement [187] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:153 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:157 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:163 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:168 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) always clobbers reg byte a 
Statement [188] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:153 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:157 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:163 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:168 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) always clobbers reg byte a 
Statement [192] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] ) always clobbers reg byte a 
Statement [193] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] ) always clobbers reg byte a 
Statement [198] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:191 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:43 [ divr16u::i#2 divr16u::i#1 ]
Statement [201] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:191 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [205] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:191 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [207] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:191 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [217] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:213 [ memset::dst#2 ] ) always clobbers reg byte a 
Statement [219] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:213 [ memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] ) always clobbers reg byte a 
Statement [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] ) always clobbers reg byte a 
Statement [14] (word) print_word::w#1 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_word::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_word::w#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 ] ) always clobbers reg byte a reg byte y 
Statement [48] (byte*~) print_char_cursor#119 ← (byte*) print_line_cursor#1 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#119 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#119 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [50] (word) print_word::w#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#2 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#2 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [58] (signed word) print_sword::w#1 ← (signed word) sin8u_table::sinx_sc#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sword::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sword::w#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#19 ] main:2::sin8u_table:7::print_ln:65 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#19 ] main:2::sin8u_table:7::print_ln:65 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [74] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4 [ print_byte::b#8 print_char_cursor#103 print_byte::$0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_byte:63 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:104 [ sin8u_table::step#0 print_word::w#3 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_word:51::print_byte:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:106 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_word:51::print_byte:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] main:2::sin8u_table:7::print_sbyte:55::print_byte:113 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#103 print_byte::$0 ] ) always clobbers reg byte a 
Statement [77] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f [ print_char_cursor#19 print_byte::$2 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_byte:63 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:104 [ sin8u_table::step#0 print_word::w#3 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_word:51::print_byte:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:106 [ sin8u_table::step#0 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_word:51::print_byte:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_byte::$2 ] main:2::sin8u_table:7::print_sbyte:55::print_byte:113 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_byte::$2 ] ) always clobbers reg byte a 
Statement [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#6 [ print_char_cursor#66 ] ( main:2::sin8u_table:7::print_byte:19::print_char:76 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:23::print_char:76 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:27::print_char:76 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:31::print_char:76 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:63::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:15::print_byte:104::print_char:76 [ sin8u_table::step#0 print_word::w#3 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:51::print_byte:104::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:104::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:15::print_byte:106::print_char:76 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:51::print_byte:106::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:106::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_sbyte:55::print_byte:113::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:19::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:23::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:27::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:31::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] main:2::sin8u_table:7::print_byte:63::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:15::print_byte:104::print_char:79 [ sin8u_table::step#0 print_word::w#3 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:51::print_byte:104::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:104::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:15::print_byte:106::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] main:2::sin8u_table:7::print_word:51::print_byte:106::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_word:97::print_byte:106::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sbyte:55::print_byte:113::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sword::w#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sword:59::print_char:100 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sword::w#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sbyte:55::print_char:110 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sbyte::b#1 print_char_cursor#66 ] main:2::sin8u_table:7::print_sbyte:55::print_char:116 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sbyte::b#1 print_char_cursor#66 ] ) always clobbers reg byte y 
Statement [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 [ print_char_cursor#2 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:49 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:53 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:57 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:61 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [89] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) [ print_char_cursor#2 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:49 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:53 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:57 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:61 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [92] if((signed word) print_sword::w#1<(signed byte) 0) goto print_sword::@1 [ print_sword::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7::print_sword:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sword::w#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [96] (word) print_word::w#0 ← (word)(signed word) print_sword::w#4 [ print_char_cursor#19 print_word::w#0 ] ( main:2::sin8u_table:7::print_sword:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_word::w#0 ] ) always clobbers reg byte a 
Statement [101] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 [ print_char_cursor#19 print_sword::w#0 ] ( main:2::sin8u_table:7::print_sword:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [103] (byte) print_byte::b#1 ← > (word) print_word::w#3 [ print_byte::b#1 print_char_cursor#102 print_word::w#3 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 print_byte::b#1 print_char_cursor#102 print_word::w#3 ] main:2::sin8u_table:7::print_word:51 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#1 print_char_cursor#102 print_word::w#3 ] main:2::sin8u_table:7::print_sword:59::print_word:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#1 print_char_cursor#102 print_word::w#3 ] ) always clobbers reg byte a 
Statement [105] (byte) print_byte::b#2 ← < (word) print_word::w#3 [ print_char_cursor#19 print_byte::b#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 print_char_cursor#19 print_byte::b#2 ] main:2::sin8u_table:7::print_word:51 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_byte::b#2 ] main:2::sin8u_table:7::print_sword:59::print_word:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [117] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 [ print_char_cursor#19 print_sbyte::b#0 ] ( main:2::sin8u_table:7::print_sbyte:55 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [120] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:42 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::return#2 ] ) always clobbers reg byte a 
Statement [121] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:42 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8su::m#0 ] ) always clobbers reg byte a 
Statement [123] (byte~) mul8su::$7 ← > (word) mul8su::m#0 [ mul8su::m#0 mul8su::$7 ] ( main:2::sin8u_table:7::mul8su:42 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::m#0 mul8su::$7 ] ) always clobbers reg byte a 
Statement [132] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8u_table:7::mul8su:42::mul8u:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:148::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:153::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:157::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:163::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:168::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ) always clobbers reg byte a 
Statement [134] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:42::mul8u:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:148::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:153::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:157::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:163::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:168::mul8u:184 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Statement [138] if((word) sin8s::x#2<(const word) PI_u4f12) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#2 ] ) always clobbers reg byte a 
Statement [139] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [141] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] ) always clobbers reg byte a 
Statement [142] (word) sin8s::x#1 ← (const word) PI_u4f12 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] ) always clobbers reg byte a 
Statement [144] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::$4 ] ) always clobbers reg byte a 
Statement [145] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 ] ) always clobbers reg byte a 
Statement [160] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) always clobbers reg byte a 
Statement [171] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ) always clobbers reg byte a 
Statement [172] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) always clobbers reg byte a 
Statement [177] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::sinx#1 ] ) always clobbers reg byte a 
Statement [185] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:153 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:157 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:163 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:168 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] ) always clobbers reg byte a 
Statement [186] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:153 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:157 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:163 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:168 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] ) always clobbers reg byte a 
Statement [187] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:153 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:157 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:163 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:168 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) always clobbers reg byte a 
Statement [188] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:153 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:157 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:163 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:38::mulu8_sel:168 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) always clobbers reg byte a 
Statement [192] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] ) always clobbers reg byte a 
Statement [193] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] ) always clobbers reg byte a 
Statement [198] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:191 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [201] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:191 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [205] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:191 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [207] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:191 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [217] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:213 [ memset::dst#2 ] ) always clobbers reg byte a 
Statement [219] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:213 [ memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ] : zp[1]:10 , reg byte x , 
Potential registers zp[1]:11 [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:12 [ print_char_cursor#109 print_char_cursor#66 print_char_cursor#103 print_char_cursor#19 print_char_cursor#102 print_char_cursor#2 print_char_cursor#119 print_char_cursor#1 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ print_str::str#10 print_str::str#12 print_str::str#0 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ print_sword::w#4 print_sword::w#0 print_sword::w#1 ] : zp[2]:16 , 
Potential registers zp[2]:18 [ print_word::w#3 print_word::w#0 print_word::w#2 print_word::w#1 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] : zp[1]:20 , reg byte a , reg byte x , 
Potential registers zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ mul8u::b#1 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp[2]:27 , 
Potential registers zp[1]:29 [ sin8s::isUpper#10 ] : zp[1]:29 , reg byte x , reg byte y , 
Potential registers zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] : zp[2]:30 , 
Potential registers zp[1]:32 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ mulu8_sel::select#5 ] : zp[1]:36 , reg byte x , reg byte y , 
Potential registers zp[2]:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ divr16u::dividend#2 divr16u::dividend#0 ] : zp[2]:39 , 
Potential registers zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:41 , 
Potential registers zp[1]:43 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:43 , reg byte x , reg byte y , 
Potential registers zp[2]:44 [ memset::dst#2 memset::dst#1 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ div16u::return#2 ] : zp[2]:46 , 
Potential registers zp[2]:48 [ sin8u_table::step#0 ] : zp[2]:48 , 
Potential registers zp[1]:50 [ sin8s::return#2 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ sin8u_table::sinx#0 ] : zp[1]:51 , reg byte x , 
Potential registers zp[1]:52 [ mul8su::a#0 ] : zp[1]:52 , reg byte x , reg byte y , 
Potential registers zp[2]:53 [ sin8u_table::sinx_sc#0 ] : zp[2]:53 , 
Potential registers zp[1]:55 [ sin8u_table::$22 ] : zp[1]:55 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:56 [ sin8u_table::sinx_tr#0 ] : zp[1]:56 , reg byte x , 
Potential registers zp[1]:57 [ print_byte::$0 ] : zp[1]:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ print_byte::$2 ] : zp[1]:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:59 [ mul8u::return#2 ] : zp[2]:59 , 
Potential registers zp[1]:61 [ mul8su::$7 ] : zp[1]:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:62 [ mul8su::$10 ] : zp[1]:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:63 [ mul8u::$1 ] : zp[1]:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:64 [ sin8s::$4 ] : zp[2]:64 , 
Potential registers zp[1]:66 [ sin8s::x1#0 ] : zp[1]:66 , reg byte x , reg byte y , 
Potential registers zp[1]:67 [ mulu8_sel::return#0 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ sin8s::x2#0 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ mulu8_sel::return#1 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:70 [ sin8s::x3#0 ] : zp[1]:70 , reg byte x , reg byte y , 
Potential registers zp[1]:71 [ mulu8_sel::return#2 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ sin8s::x3_6#0 ] : zp[1]:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:73 [ sin8s::usinx#0 ] : zp[1]:73 , reg byte x , reg byte y , 
Potential registers zp[1]:74 [ mulu8_sel::return#10 ] : zp[1]:74 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:75 [ sin8s::x4#0 ] : zp[1]:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:76 [ mulu8_sel::return#11 ] : zp[1]:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:77 [ sin8s::x5#0 ] : zp[1]:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:78 [ sin8s::x5_128#0 ] : zp[1]:78 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:79 [ mul8u::return#3 ] : zp[2]:79 , 
Potential registers zp[2]:81 [ mulu8_sel::$0 ] : zp[2]:81 , 
Potential registers zp[2]:83 [ mulu8_sel::$1 ] : zp[2]:83 , 
Potential registers zp[1]:85 [ mulu8_sel::return#12 ] : zp[1]:85 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:86 [ divr16u::return#2 ] : zp[2]:86 , 
Potential registers zp[2]:88 [ div16u::return#0 ] : zp[2]:88 , 
Potential registers zp[1]:90 [ divr16u::$1 ] : zp[1]:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:91 [ divr16u::$2 ] : zp[1]:91 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 346.86: zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 249.57: zp[2]:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 202: zp[1]:63 [ mul8u::$1 ] 180.67: zp[1]:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] 4: zp[1]:23 [ mul8u::b#1 ] 4: zp[2]:59 [ mul8u::return#2 ] 4: zp[2]:79 [ mul8u::return#3 ] 
Uplift Scope [] 225.78: zp[2]:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ] 218.06: zp[2]:12 [ print_char_cursor#109 print_char_cursor#66 print_char_cursor#103 print_char_cursor#19 print_char_cursor#102 print_char_cursor#2 print_char_cursor#119 print_char_cursor#1 ] 
Uplift Scope [print_str] 305.5: zp[2]:14 [ print_str::str#10 print_str::str#12 print_str::str#0 ] 
Uplift Scope [divr16u] 96.25: zp[2]:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 37.25: zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 22: zp[1]:90 [ divr16u::$1 ] 22: zp[1]:91 [ divr16u::$2 ] 18.19: zp[1]:43 [ divr16u::i#2 divr16u::i#1 ] 7.46: zp[2]:39 [ divr16u::dividend#2 divr16u::dividend#0 ] 4: zp[2]:86 [ divr16u::return#2 ] 
Uplift Scope [sin8s] 27.5: zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] 22: zp[1]:50 [ sin8s::return#2 ] 13: zp[1]:33 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] 10: zp[1]:32 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] 4: zp[2]:64 [ sin8s::$4 ] 4: zp[1]:68 [ sin8s::x2#0 ] 4: zp[1]:72 [ sin8s::x3_6#0 ] 4: zp[1]:75 [ sin8s::x4#0 ] 4: zp[1]:77 [ sin8s::x5#0 ] 4: zp[1]:78 [ sin8s::x5_128#0 ] 1: zp[1]:70 [ sin8s::x3#0 ] 0.64: zp[1]:66 [ sin8s::x1#0 ] 0.33: zp[1]:73 [ sin8s::usinx#0 ] 0.06: zp[1]:29 [ sin8s::isUpper#10 ] 
Uplift Scope [mulu8_sel] 24: zp[1]:34 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] 21: zp[1]:35 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] 4: zp[1]:67 [ mulu8_sel::return#0 ] 4: zp[1]:69 [ mulu8_sel::return#1 ] 4: zp[1]:71 [ mulu8_sel::return#2 ] 4: zp[1]:74 [ mulu8_sel::return#10 ] 4: zp[1]:76 [ mulu8_sel::return#11 ] 4: zp[2]:81 [ mulu8_sel::$0 ] 4: zp[2]:83 [ mulu8_sel::$1 ] 1.71: zp[1]:85 [ mulu8_sel::return#12 ] 0.33: zp[1]:36 [ mulu8_sel::select#5 ] 
Uplift Scope [sin8u_table] 23.03: zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] 22: zp[1]:55 [ sin8u_table::$22 ] 12.42: zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ] 3.8: zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] 2.36: zp[1]:51 [ sin8u_table::sinx#0 ] 2.2: zp[2]:53 [ sin8u_table::sinx_sc#0 ] 1.94: zp[1]:56 [ sin8u_table::sinx_tr#0 ] 0.27: zp[2]:48 [ sin8u_table::step#0 ] 
Uplift Scope [print_byte] 39.25: zp[1]:10 [ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ] 4: zp[1]:57 [ print_byte::$0 ] 4: zp[1]:58 [ print_byte::$2 ] 
Uplift Scope [memset] 36.67: zp[2]:44 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [print_word] 36.33: zp[2]:18 [ print_word::w#3 print_word::w#0 print_word::w#2 print_word::w#1 ] 
Uplift Scope [mul8su] 7.33: zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] 4: zp[1]:61 [ mul8su::$7 ] 4: zp[1]:62 [ mul8su::$10 ] 2.6: zp[1]:52 [ mul8su::a#0 ] 
Uplift Scope [print_char] 14: zp[1]:11 [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ] 
Uplift Scope [print_sword] 10.83: zp[2]:16 [ print_sword::w#4 print_sword::w#0 print_sword::w#1 ] 
Uplift Scope [print_sbyte] 10.83: zp[1]:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Uplift Scope [div16u] 4: zp[2]:46 [ div16u::return#2 ] 1.33: zp[2]:88 [ div16u::return#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [main] 

Uplifting [mul8u] best 24172 combination zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp[2]:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] reg byte a [ mul8u::b#1 ] zp[2]:59 [ mul8u::return#2 ] zp[2]:79 [ mul8u::return#3 ] 
Uplifting [] best 24172 combination zp[2]:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ] zp[2]:12 [ print_char_cursor#109 print_char_cursor#66 print_char_cursor#103 print_char_cursor#19 print_char_cursor#102 print_char_cursor#2 print_char_cursor#119 print_char_cursor#1 ] 
Uplifting [print_str] best 24172 combination zp[2]:14 [ print_str::str#10 print_str::str#12 print_str::str#0 ] 
Uplifting [divr16u] best 23962 combination zp[2]:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:39 [ divr16u::dividend#2 divr16u::dividend#0 ] zp[2]:86 [ divr16u::return#2 ] 
Uplifting [sin8s] best 23857 combination zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] reg byte a [ sin8s::return#2 ] reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] zp[2]:64 [ sin8s::$4 ] zp[1]:68 [ sin8s::x2#0 ] zp[1]:72 [ sin8s::x3_6#0 ] zp[1]:75 [ sin8s::x4#0 ] zp[1]:77 [ sin8s::x5#0 ] zp[1]:78 [ sin8s::x5_128#0 ] zp[1]:70 [ sin8s::x3#0 ] zp[1]:66 [ sin8s::x1#0 ] zp[1]:73 [ sin8s::usinx#0 ] zp[1]:29 [ sin8s::isUpper#10 ] 
Limited combination testing to 100 combinations of 5308416 possible.
Uplifting [mulu8_sel] best 23811 combination reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] reg byte a [ mulu8_sel::return#0 ] reg byte a [ mulu8_sel::return#1 ] zp[1]:71 [ mulu8_sel::return#2 ] zp[1]:74 [ mulu8_sel::return#10 ] zp[1]:76 [ mulu8_sel::return#11 ] zp[2]:81 [ mulu8_sel::$0 ] zp[2]:83 [ mulu8_sel::$1 ] zp[1]:85 [ mulu8_sel::return#12 ] zp[1]:36 [ mulu8_sel::select#5 ] 
Limited combination testing to 100 combinations of 196608 possible.
Uplifting [sin8u_table] best 23701 combination zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] reg byte a [ sin8u_table::$22 ] zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ] zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] zp[1]:51 [ sin8u_table::sinx#0 ] zp[2]:53 [ sin8u_table::sinx_sc#0 ] reg byte x [ sin8u_table::sinx_tr#0 ] zp[2]:48 [ sin8u_table::step#0 ] 
Uplifting [print_byte] best 23693 combination zp[1]:10 [ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [memset] best 23693 combination zp[2]:44 [ memset::dst#2 memset::dst#1 ] 
Uplifting [print_word] best 23693 combination zp[2]:18 [ print_word::w#3 print_word::w#0 print_word::w#2 print_word::w#1 ] 
Uplifting [mul8su] best 23651 combination zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] reg byte a [ mul8su::$7 ] reg byte a [ mul8su::$10 ] reg byte y [ mul8su::a#0 ] 
Uplifting [print_char] best 23630 combination reg byte a [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ] 
Uplifting [print_sword] best 23630 combination zp[2]:16 [ print_sword::w#4 print_sword::w#0 print_sword::w#1 ] 
Uplifting [print_sbyte] best 23630 combination zp[1]:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Uplifting [div16u] best 23630 combination zp[2]:46 [ div16u::return#2 ] zp[2]:88 [ div16u::return#0 ] 
Uplifting [RADIX] best 23630 combination 
Uplifting [print_ln] best 23630 combination 
Uplifting [print_cls] best 23630 combination 
Uplifting [main] best 23630 combination 
Attempting to uplift remaining variables inzp[1]:10 [ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
Uplifting [print_byte] best 23630 combination zp[1]:10 [ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ] 
Attempting to uplift remaining variables inzp[1]:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Uplifting [print_sbyte] best 23630 combination zp[1]:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Attempting to uplift remaining variables inzp[1]:68 [ sin8s::x2#0 ]
Uplifting [sin8s] best 23626 combination reg byte a [ sin8s::x2#0 ] 
Attempting to uplift remaining variables inzp[1]:71 [ mulu8_sel::return#2 ]
Uplifting [mulu8_sel] best 23620 combination reg byte a [ mulu8_sel::return#2 ] 
Attempting to uplift remaining variables inzp[1]:72 [ sin8s::x3_6#0 ]
Uplifting [sin8s] best 23616 combination reg byte a [ sin8s::x3_6#0 ] 
Attempting to uplift remaining variables inzp[1]:74 [ mulu8_sel::return#10 ]
Uplifting [mulu8_sel] best 23610 combination reg byte a [ mulu8_sel::return#10 ] 
Attempting to uplift remaining variables inzp[1]:75 [ sin8s::x4#0 ]
Uplifting [sin8s] best 23606 combination reg byte a [ sin8s::x4#0 ] 
Attempting to uplift remaining variables inzp[1]:76 [ mulu8_sel::return#11 ]
Uplifting [mulu8_sel] best 23600 combination reg byte a [ mulu8_sel::return#11 ] 
Attempting to uplift remaining variables inzp[1]:77 [ sin8s::x5#0 ]
Uplifting [sin8s] best 23594 combination reg byte a [ sin8s::x5#0 ] 
Attempting to uplift remaining variables inzp[1]:78 [ sin8s::x5_128#0 ]
Uplifting [sin8s] best 23588 combination reg byte a [ sin8s::x5_128#0 ] 
Attempting to uplift remaining variables inzp[1]:51 [ sin8u_table::sinx#0 ]
Uplifting [sin8u_table] best 23588 combination zp[1]:51 [ sin8u_table::sinx#0 ] 
Attempting to uplift remaining variables inzp[1]:85 [ mulu8_sel::return#12 ]
Uplifting [mulu8_sel] best 23570 combination reg byte a [ mulu8_sel::return#12 ] 
Attempting to uplift remaining variables inzp[1]:70 [ sin8s::x3#0 ]
Uplifting [sin8s] best 23570 combination zp[1]:70 [ sin8s::x3#0 ] 
Attempting to uplift remaining variables inzp[1]:66 [ sin8s::x1#0 ]
Uplifting [sin8s] best 23570 combination zp[1]:66 [ sin8s::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:36 [ mulu8_sel::select#5 ]
Uplifting [mulu8_sel] best 23570 combination zp[1]:36 [ mulu8_sel::select#5 ] 
Attempting to uplift remaining variables inzp[1]:73 [ sin8s::usinx#0 ]
Uplifting [sin8s] best 23570 combination zp[1]:73 [ sin8s::usinx#0 ] 
Attempting to uplift remaining variables inzp[1]:29 [ sin8s::isUpper#10 ]
Uplifting [sin8s] best 23570 combination zp[1]:29 [ sin8s::isUpper#10 ] 
Coalescing zero page register [ zp[1]:10 [ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ] ] with [ zp[1]:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ print_sword::w#4 print_sword::w#0 print_sword::w#1 ] ] with [ zp[2]:18 [ print_word::w#3 print_word::w#0 print_word::w#2 print_word::w#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] ] with [ zp[2]:53 [ sin8u_table::sinx_sc#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 ] ] with [ zp[2]:59 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp[2]:79 [ mul8u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] ] with [ zp[2]:64 [ sin8s::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp[2]:86 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:46 [ div16u::return#2 ] ] with [ zp[2]:48 [ sin8u_table::step#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:46 [ div16u::return#2 sin8u_table::step#0 ] ] with [ zp[2]:88 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:81 [ mulu8_sel::$0 ] ] with [ zp[2]:83 [ mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#2 ] ] with [ zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp[2]:46 [ div16u::return#2 sin8u_table::step#0 div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 ] ] with [ zp[2]:81 [ mulu8_sel::$0 mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ print_sword::w#4 print_sword::w#0 print_sword::w#1 print_word::w#3 print_word::w#0 print_word::w#2 print_word::w#1 ] ] with [ zp[2]:14 [ print_str::str#10 print_str::str#12 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] ] with [ zp[2]:12 [ print_char_cursor#109 print_char_cursor#66 print_char_cursor#103 print_char_cursor#19 print_char_cursor#102 print_char_cursor#2 print_char_cursor#119 print_char_cursor#1 ] ]
Coalescing zero page register [ zp[1]:29 [ sin8s::isUpper#10 ] ] with [ zp[1]:10 [ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] ]
Coalescing zero page register [ zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 ] ] with [ zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 mulu8_sel::$0 mulu8_sel::$1 ] ]
Coalescing zero page register [ zp[2]:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] ]
Coalescing zero page register [ zp[2]:39 [ divr16u::dividend#2 divr16u::dividend#0 ] ] with [ zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ] ]
Coalescing zero page register [ zp[2]:44 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] ]
Coalescing zero page register [ zp[1]:51 [ sin8u_table::sinx#0 ] ] with [ zp[1]:36 [ mulu8_sel::select#5 ] ]
Allocated (was zp[2]:8) zp[2]:2 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
Allocated (was zp[2]:16) zp[2]:4 [ print_sword::w#4 print_sword::w#0 print_sword::w#1 print_word::w#3 print_word::w#0 print_word::w#2 print_word::w#1 print_str::str#10 print_str::str#12 print_str::str#0 ]
Allocated (was zp[2]:27) zp[2]:6 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_char_cursor#109 print_char_cursor#66 print_char_cursor#103 print_char_cursor#19 print_char_cursor#102 print_char_cursor#2 print_char_cursor#119 print_char_cursor#1 ]
Allocated (was zp[1]:29) zp[1]:8 [ sin8s::isUpper#10 print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Allocated (was zp[2]:30) zp[2]:9 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 mulu8_sel::$0 mulu8_sel::$1 ]
Allocated (was zp[2]:37) zp[2]:11 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 sin8u_table::i#10 sin8u_table::i#1 ]
Allocated (was zp[2]:39) zp[2]:13 [ divr16u::dividend#2 divr16u::dividend#0 sin8u_table::x#10 sin8u_table::x#1 ]
Allocated (was zp[2]:41) zp[2]:15 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
Allocated (was zp[2]:44) zp[2]:17 [ memset::dst#2 memset::dst#1 sin8u_table::sintab#2 sin8u_table::sintab#1 ]
Allocated (was zp[1]:51) zp[1]:19 [ sin8u_table::sinx#0 mulu8_sel::select#5 ]
Allocated (was zp[1]:66) zp[1]:20 [ sin8s::x1#0 ]
Allocated (was zp[1]:70) zp[1]:21 [ sin8s::x3#0 ]
Allocated (was zp[1]:73) zp[1]:22 [ sin8s::usinx#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_char_cursor = 6
  .label print_line_cursor = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label tabsize = $14
    // [5] call print_cls 
    // [212] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call sin8u_table 
    // [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
  sin8u_table_from___b1:
    jsr sin8u_table
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    sintab: .fill $14, 0
}
  // sin8u_table
// Generate unsigned byte sinus table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sinus points (the size of the table)
// min - the minimal value
// max - the maximal value
// sin8u_table(byte* zeropage($11) sintab)
sin8u_table: {
    .const min = $a
    .const max = $ff
    .label amplitude = max-min
    .const sum = min+max
    .const mid = sum/2+1
    .label step = $f
    .label sinx = $13
    .label sinx_sc = 9
    .label sintab = $11
    .label x = $d
    .label i = $b
    // [10] call div16u 
    // [190] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
  div16u_from_sin8u_table:
    jsr div16u
    // [11] (word) div16u::return#2 ← (word) div16u::return#0
    jmp __b3
    // sin8u_table::@3
  __b3:
    // [12] (word) sin8u_table::step#0 ← (word) div16u::return#2
    // [13] call print_str 
    // [85] phi from sin8u_table::@3 to print_str [phi:sin8u_table::@3->print_str]
  print_str_from___b3:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) 1024 [phi:sin8u_table::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str [phi:sin8u_table::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // sin8u_table::@4
  __b4:
    // [14] (word) print_word::w#1 ← (word) sin8u_table::step#0 -- vwuz1=vwuz2 
    lda.z step
    sta.z print_word.w
    lda.z step+1
    sta.z print_word.w+1
    // [15] call print_word 
    // [102] phi from sin8u_table::@4 to print_word [phi:sin8u_table::@4->print_word]
  print_word_from___b4:
    // [102] phi (byte*) print_char_cursor#102 = (byte*) print_char_cursor#2 [phi:sin8u_table::@4->print_word#0] -- register_copy 
    // [102] phi (word) print_word::w#3 = (word) print_word::w#1 [phi:sin8u_table::@4->print_word#1] -- register_copy 
    jsr print_word
    // [16] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
  __b5_from___b4:
    jmp __b5
    // sin8u_table::@5
  __b5:
    // [17] call print_str 
    // [85] phi from sin8u_table::@5 to print_str [phi:sin8u_table::@5->print_str]
  print_str_from___b5:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@5->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str1 [phi:sin8u_table::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [18] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
  __b6_from___b5:
    jmp __b6
    // sin8u_table::@6
  __b6:
    // [19] call print_byte 
    // [73] phi from sin8u_table::@6 to print_byte [phi:sin8u_table::@6->print_byte]
  print_byte_from___b6:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@6->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@6->print_byte#1] -- vbuz1=vbuc1 
    lda #min
    sta.z print_byte.b
    jsr print_byte
    // [20] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
  __b7_from___b6:
    jmp __b7
    // sin8u_table::@7
  __b7:
    // [21] call print_str 
    // [85] phi from sin8u_table::@7 to print_str [phi:sin8u_table::@7->print_str]
  print_str_from___b7:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@7->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str2 [phi:sin8u_table::@7->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [22] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
  __b8_from___b7:
    jmp __b8
    // sin8u_table::@8
  __b8:
    // [23] call print_byte 
    // [73] phi from sin8u_table::@8 to print_byte [phi:sin8u_table::@8->print_byte]
  print_byte_from___b8:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@8->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@8->print_byte#1] -- vbuz1=vbuc1 
    lda #max
    sta.z print_byte.b
    jsr print_byte
    // [24] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
  __b9_from___b8:
    jmp __b9
    // sin8u_table::@9
  __b9:
    // [25] call print_str 
    // [85] phi from sin8u_table::@9 to print_str [phi:sin8u_table::@9->print_str]
  print_str_from___b9:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@9->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str3 [phi:sin8u_table::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // [26] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
  __b10_from___b9:
    jmp __b10
    // sin8u_table::@10
  __b10:
    // [27] call print_byte 
    // [73] phi from sin8u_table::@10 to print_byte [phi:sin8u_table::@10->print_byte]
  print_byte_from___b10:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@10->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@10->print_byte#1] -- vbuz1=vbuc1 
    lda #amplitude
    sta.z print_byte.b
    jsr print_byte
    // [28] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
  __b11_from___b10:
    jmp __b11
    // sin8u_table::@11
  __b11:
    // [29] call print_str 
    // [85] phi from sin8u_table::@11 to print_str [phi:sin8u_table::@11->print_str]
  print_str_from___b11:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@11->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str4 [phi:sin8u_table::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    // [30] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
  __b12_from___b11:
    jmp __b12
    // sin8u_table::@12
  __b12:
    // [31] call print_byte 
    // [73] phi from sin8u_table::@12 to print_byte [phi:sin8u_table::@12->print_byte]
  print_byte_from___b12:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@12->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@12->print_byte#1] -- vbuz1=vbuc1 
    lda #mid
    sta.z print_byte.b
    jsr print_byte
    // [32] phi from sin8u_table::@12 to sin8u_table::@13 [phi:sin8u_table::@12->sin8u_table::@13]
  __b13_from___b12:
    jmp __b13
    // sin8u_table::@13
  __b13:
    // [33] call print_ln 
    // [68] phi from sin8u_table::@13 to print_ln [phi:sin8u_table::@13->print_ln]
  print_ln_from___b13:
    // [68] phi (byte*) print_line_cursor#23 = (byte*) 1024 [phi:sin8u_table::@13->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    jsr print_ln
    // [34] phi from sin8u_table::@13 to sin8u_table::@1 [phi:sin8u_table::@13->sin8u_table::@1]
  __b1_from___b13:
    // [34] phi (byte*) sin8u_table::sintab#2 = (const byte[$14]) main::sintab [phi:sin8u_table::@13->sin8u_table::@1#0] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta.z sintab
    lda #>main.sintab
    sta.z sintab+1
    // [34] phi (word) sin8u_table::x#10 = (byte) 0 [phi:sin8u_table::@13->sin8u_table::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [34] phi (word) sin8u_table::i#10 = (byte) 0 [phi:sin8u_table::@13->sin8u_table::@1#2] -- vwuz1=vbuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.12]
    // sin8u_table::@1
  __b1:
    // [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.tabsize
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.tabsize
    bcc __b2
  !:
    jmp __breturn
    // sin8u_table::@return
  __breturn:
    // [36] return 
    rts
    // sin8u_table::@2
  __b2:
    // [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [38] call sin8s 
    jsr sin8s
    // [39] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0
    jmp __b14
    // sin8u_table::@14
  __b14:
    // [40] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2 -- vbsz1=vbsaa 
    sta.z sinx
    // [41] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0 -- vbsyy=vbsz1 
    ldy.z sinx
    // [42] call mul8su 
    jsr mul8su
    jmp __b15
    // sin8u_table::@15
  __b15:
    // [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2
    // [44] (byte~) sin8u_table::$22 ← > (signed word) sin8u_table::sinx_sc#0 -- vbuaa=_hi_vwsz1 
    lda.z sinx_sc+1
    // [45] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$22 -- vbuxx=vbuc1_plus_vbuaa 
    tax
    axs #-[mid]
    // [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (sintab),y
    // [47] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 -- pbuz1=_inc_pbuz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [48] (byte*~) print_char_cursor#119 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [49] call print_str 
    // [85] phi from sin8u_table::@15 to print_str [phi:sin8u_table::@15->print_str]
  print_str_from___b15:
    // [85] phi (byte*) print_char_cursor#109 = (byte*~) print_char_cursor#119 [phi:sin8u_table::@15->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str5 [phi:sin8u_table::@15->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str.str
    lda #>str5
    sta.z print_str.str+1
    jsr print_str
    jmp __b16
    // sin8u_table::@16
  __b16:
    // [50] (word) print_word::w#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z print_word.w
    lda.z x+1
    sta.z print_word.w+1
    // [51] call print_word 
    // [102] phi from sin8u_table::@16 to print_word [phi:sin8u_table::@16->print_word]
  print_word_from___b16:
    // [102] phi (byte*) print_char_cursor#102 = (byte*) print_char_cursor#2 [phi:sin8u_table::@16->print_word#0] -- register_copy 
    // [102] phi (word) print_word::w#3 = (word) print_word::w#2 [phi:sin8u_table::@16->print_word#1] -- register_copy 
    jsr print_word
    // [52] phi from sin8u_table::@16 to sin8u_table::@17 [phi:sin8u_table::@16->sin8u_table::@17]
  __b17_from___b16:
    jmp __b17
    // sin8u_table::@17
  __b17:
    // [53] call print_str 
    // [85] phi from sin8u_table::@17 to print_str [phi:sin8u_table::@17->print_str]
  print_str_from___b17:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@17->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str6 [phi:sin8u_table::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta.z print_str.str
    lda #>str6
    sta.z print_str.str+1
    jsr print_str
    jmp __b18
    // sin8u_table::@18
  __b18:
    // [54] (signed byte) print_sbyte::b#1 ← (signed byte) sin8u_table::sinx#0 -- vbsz1=vbsz2 
    lda.z sinx
    sta.z print_sbyte.b
    // [55] call print_sbyte 
    jsr print_sbyte
    // [56] phi from sin8u_table::@18 to sin8u_table::@19 [phi:sin8u_table::@18->sin8u_table::@19]
  __b19_from___b18:
    jmp __b19
    // sin8u_table::@19
  __b19:
    // [57] call print_str 
    // [85] phi from sin8u_table::@19 to print_str [phi:sin8u_table::@19->print_str]
  print_str_from___b19:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@19->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str7 [phi:sin8u_table::@19->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta.z print_str.str
    lda #>str7
    sta.z print_str.str+1
    jsr print_str
    jmp __b20
    // sin8u_table::@20
  __b20:
    // [58] (signed word) print_sword::w#1 ← (signed word) sin8u_table::sinx_sc#0 -- vwsz1=vwsz2 
    lda.z sinx_sc
    sta.z print_sword.w
    lda.z sinx_sc+1
    sta.z print_sword.w+1
    // [59] call print_sword 
    jsr print_sword
    // [60] phi from sin8u_table::@20 to sin8u_table::@21 [phi:sin8u_table::@20->sin8u_table::@21]
  __b21_from___b20:
    jmp __b21
    // sin8u_table::@21
  __b21:
    // [61] call print_str 
    // [85] phi from sin8u_table::@21 to print_str [phi:sin8u_table::@21->print_str]
  print_str_from___b21:
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@21->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str8 [phi:sin8u_table::@21->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta.z print_str.str
    lda #>str8
    sta.z print_str.str+1
    jsr print_str
    jmp __b22
    // sin8u_table::@22
  __b22:
    // [62] (byte) print_byte::b#7 ← (byte) sin8u_table::sinx_tr#0 -- vbuz1=vbuxx 
    stx.z print_byte.b
    // [63] call print_byte 
    // [73] phi from sin8u_table::@22 to print_byte [phi:sin8u_table::@22->print_byte]
  print_byte_from___b22:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@22->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#7 [phi:sin8u_table::@22->print_byte#1] -- register_copy 
    jsr print_byte
    // [64] phi from sin8u_table::@22 to sin8u_table::@23 [phi:sin8u_table::@22->sin8u_table::@23]
  __b23_from___b22:
    jmp __b23
    // sin8u_table::@23
  __b23:
    // [65] call print_ln 
    // [68] phi from sin8u_table::@23 to print_ln [phi:sin8u_table::@23->print_ln]
  print_ln_from___b23:
    // [68] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:sin8u_table::@23->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b24
    // sin8u_table::@24
  __b24:
    // [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // [67] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [34] phi from sin8u_table::@24 to sin8u_table::@1 [phi:sin8u_table::@24->sin8u_table::@1]
  __b1_from___b24:
    // [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@24->sin8u_table::@1#0] -- register_copy 
    // [34] phi (word) sin8u_table::x#10 = (word) sin8u_table::x#1 [phi:sin8u_table::@24->sin8u_table::@1#1] -- register_copy 
    // [34] phi (word) sin8u_table::i#10 = (word) sin8u_table::i#1 [phi:sin8u_table::@24->sin8u_table::@1#2] -- register_copy 
    jmp __b1
    str: .text "step:"
    .byte 0
    str1: .text " min:"
    .byte 0
    str2: .text " max:"
    .byte 0
    str3: .text " ampl:"
    .byte 0
    str4: .text " mid:"
    .byte 0
    str5: .text "x: "
    .byte 0
    str6: .text " sin: "
    .byte 0
    str7: .text " scaled: "
    .byte 0
    str8: .text " trans: "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [69] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [69] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [72] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage(8) b)
print_byte: {
    .label b = 8
    // [74] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // [75] (byte) print_char::ch#4 ← *((const byte[]) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [76] call print_char 
    // [81] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#103 [phi:print_byte->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) print_char::ch#4 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_byte::@1
  __b1:
    // [77] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // [78] (byte) print_char::ch#5 ← *((const byte[]) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [79] call print_char 
    // [81] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#19 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_byte::@return
  __breturn:
    // [80] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [83] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#66 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [84] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zeropage(4) str)
print_str: {
    .label str = 4
    // [86] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  __b1_from_print_str:
  __b1_from___b2:
    // [86] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#109 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [86] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [88] return 
    rts
    // print_str::@2
  __b2:
    // [89] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
    // [90] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(4) w)
print_sword: {
    .label w = 4
    // [92] if((signed word) print_sword::w#1<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sword
    // [93] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
  __b3_from_print_sword:
    jmp __b3
    // print_sword::@3
  __b3:
    // [94] call print_char 
    // [81] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
  print_char_from___b3:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sword::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [95] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [95] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#1 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
    jmp __b2
    // print_sword::@2
  __b2:
    // [96] (word) print_word::w#0 ← (word)(signed word) print_sword::w#4
    // [97] call print_word 
    // [102] phi from print_sword::@2 to print_word [phi:print_sword::@2->print_word]
  print_word_from___b2:
    // [102] phi (byte*) print_char_cursor#102 = (byte*) print_char_cursor#19 [phi:print_sword::@2->print_word#0] -- register_copy 
    // [102] phi (word) print_word::w#3 = (word) print_word::w#0 [phi:print_sword::@2->print_word#1] -- register_copy 
    jsr print_word
    jmp __breturn
    // print_sword::@return
  __breturn:
    // [98] return 
    rts
    // [99] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
  __b1_from_print_sword:
    jmp __b1
    // print_sword::@1
  __b1:
    // [100] call print_char 
    // [81] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sword::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sword::@4
  __b4:
    // [101] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_word
// Print a word as HEX
// print_word(word zeropage(4) w)
print_word: {
    .label w = 4
    // [103] (byte) print_byte::b#1 ← > (word) print_word::w#3 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_byte.b
    // [104] call print_byte 
    // [73] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#102 [phi:print_word->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp __b1
    // print_word::@1
  __b1:
    // [105] (byte) print_byte::b#2 ← < (word) print_word::w#3 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_byte.b
    // [106] call print_byte 
    // [73] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from___b1:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#19 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp __breturn
    // print_word::@return
  __breturn:
    // [107] return 
    rts
}
  // print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage(8) b)
print_sbyte: {
    .label b = 8
    // [108] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1_from_print_sbyte
    // [109] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  __b3_from_print_sbyte:
    jmp __b3
    // print_sbyte::@3
  __b3:
    // [110] call print_char 
    // [81] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  print_char_from___b3:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sbyte::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [111] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [111] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    jmp __b2
    // print_sbyte::@2
  __b2:
    // [112] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#4
    // [113] call print_byte 
    // [73] phi from print_sbyte::@2 to print_byte [phi:print_sbyte::@2->print_byte]
  print_byte_from___b2:
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#19 [phi:print_sbyte::@2->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#0 [phi:print_sbyte::@2->print_byte#1] -- register_copy 
    jsr print_byte
    jmp __breturn
    // print_sbyte::@return
  __breturn:
    // [114] return 
    rts
    // [115] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  __b1_from_print_sbyte:
    jmp __b1
    // print_sbyte::@1
  __b1:
    // [116] call print_char 
    // [81] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sbyte::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sbyte::@4
  __b4:
    // [117] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2_from___b4
}
  // mul8su
// Multiply a signed byte and an unsigned byte (into a signed word)
// Fixes offsets introduced by using unsigned multiplication
// mul8su(signed byte register(Y) a)
mul8su: {
    .const b = sin8u_table.amplitude+1
    .label m = 9
    // [118] (byte) mul8u::a#1 ← (byte)(signed byte) mul8su::a#0 -- vbuxx=vbuyy 
    tya
    tax
    // [119] call mul8u 
    // [128] phi from mul8su to mul8u [phi:mul8su->mul8u]
  mul8u_from_mul8su:
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:mul8su->mul8u#0] -- register_copy 
    // [128] phi (word) mul8u::mb#0 = (const byte) mul8su::b#0 [phi:mul8su->mul8u#1] -- vwuz1=vbuc1 
    lda #<b
    sta.z mul8u.mb
    lda #>b
    sta.z mul8u.mb+1
    jsr mul8u
    // [120] (word) mul8u::return#2 ← (word) mul8u::res#2
    jmp __b3
    // mul8su::@3
  __b3:
    // [121] (word) mul8su::m#0 ← (word) mul8u::return#2
    // [122] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b1_from___b3
    jmp __b2
    // mul8su::@2
  __b2:
    // [123] (byte~) mul8su::$7 ← > (word) mul8su::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // [124] (byte~) mul8su::$10 ← (byte~) mul8su::$7 - (const byte) mul8su::b#0 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #b
    // [125] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$10 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [126] phi from mul8su::@2 mul8su::@3 to mul8su::@1 [phi:mul8su::@2/mul8su::@3->mul8su::@1]
  __b1_from___b2:
  __b1_from___b3:
    // [126] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@3->mul8su::@1#0] -- register_copy 
    jmp __b1
    // mul8su::@1
  __b1:
    jmp __breturn
    // mul8su::@return
  __breturn:
    // [127] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = 6
    .label res = 9
    .label return = 9
    // [129] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [129] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [129] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [129] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [130] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [131] return 
    rts
    // mul8u::@2
  __b2:
    // [132] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [133] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [134] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [135] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [135] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [136] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [137] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [129] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [129] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [129] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [129] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage(9) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = 9
    .label x = 9
    .label x1 = $14
    .label x3 = $15
    .label usinx = $16
    .label isUpper = 8
    // [138] if((word) sin8s::x#2<(const word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b1_from_sin8s
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b1_from_sin8s
  !:
    jmp __b5
    // sin8s::@5
  __b5:
    // [139] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [140] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  __b1_from___b5:
    // [140] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [140] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [140] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b1_from_sin8s:
    // [140] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [140] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp __b1
    // sin8s::@1
  __b1:
    // [141] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2_from___b1
  !:
    jmp __b6
    // sin8s::@6
  __b6:
    // [142] (word) sin8s::x#1 ← (const word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [143] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  __b2_from___b1:
  __b2_from___b6:
    // [143] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp __b2
    // sin8s::@2
  __b2:
    // [144] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // [145] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z __4+1
    sta.z x1
    // [146] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [147] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [148] call mulu8_sel 
    // [181] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from___b2:
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [149] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
    jmp __b9
    // sin8s::@9
  __b9:
    // [150] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
    // [151] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [152] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [153] call mulu8_sel 
    // [181] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from___b9:
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [154] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
    jmp __b10
    // sin8s::@10
  __b10:
    // [155] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // [156] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [157] call mulu8_sel 
    // [181] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from___b10:
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [158] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
    jmp __b11
    // sin8s::@11
  __b11:
    // [159] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
    // [160] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // [161] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [162] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [163] call mulu8_sel 
    // [181] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from___b11:
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [164] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
    jmp __b12
    // sin8s::@12
  __b12:
    // [165] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
    // [166] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [167] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [168] call mulu8_sel 
    // [181] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from___b12:
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [169] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
    jmp __b13
    // sin8s::@13
  __b13:
    // [170] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
    // [171] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [172] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // [173] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3_from___b13
    jmp __b7
    // sin8s::@7
  __b7:
    // [174] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [175] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  __b3_from___b13:
  __b3_from___b7:
    // [175] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp __b3
    // sin8s::@3
  __b3:
    // [176] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b14
    jmp __b8
    // sin8s::@8
  __b8:
    // [177] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [178] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  __b4_from___b14:
  __b4_from___b8:
    // [178] phi (signed byte) sin8s::return#0 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp __b4
    // sin8s::@4
  __b4:
    jmp __breturn
    // sin8s::@return
  __breturn:
    // [179] return 
    rts
    // sin8s::@14
  __b14:
    // [180] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    jmp __b4_from___b14
}
  // mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zeropage($13) select)
mulu8_sel: {
    .label __0 = 9
    .label __1 = 9
    .label select = $13
    // [182] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
    // [183] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [184] call mul8u 
    // [128] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
    // [128] phi (word) mul8u::mb#0 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- vwuz1=vbuaa 
    sta.z mul8u.mb
    lda #0
    sta.z mul8u.mb+1
    jsr mul8u
    // [185] (word) mul8u::return#3 ← (word) mul8u::res#2
    jmp __b1
    // mulu8_sel::@1
  __b1:
    // [186] (word~) mulu8_sel::$0 ← (word) mul8u::return#3
    // [187] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // [188] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda.z __1+1
    jmp __breturn
    // mulu8_sel::@return
  __breturn:
    // [189] return 
    rts
}
  // div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $f
    // [191] call divr16u 
    // [195] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
    // [192] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp __b1
    // div16u::@1
  __b1:
    // [193] (word) div16u::return#0 ← (word) divr16u::return#2
    jmp __breturn
    // div16u::@return
  __breturn:
    // [194] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($d) dividend, word zeropage($b) rem)
divr16u: {
    .label rem = $b
    .label dividend = $d
    .label quotient = $f
    .label return = $f
    // [196] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [196] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [196] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [196] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [196] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp __b1
    // [196] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [196] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [196] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [196] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [196] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [197] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [198] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // [199] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [200] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [201] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [202] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [202] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [203] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [204] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [205] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.tabsize
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<main.tabsize
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [206] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [207] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.tabsize
    sta.z rem
    lda.z rem+1
    sbc #>main.tabsize
    sta.z rem+1
    // [208] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [208] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [208] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [209] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [210] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [211] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [213] call memset 
    // [215] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [214] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $11
    // [216] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [216] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [217] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [218] return 
    rts
    // memset::@2
  __b2:
    // [219] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [220] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [216] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [216] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b18
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b21
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp __b24
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Replacing instruction ldy.z sinx with TAY
Removing instruction ldy #0
Removing instruction lda #>0
Replacing instruction ldx.z x1 with TAX
Replacing instruction ldy.z x1 with TAY
Replacing instruction ldx.z x3 with TAX
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __bbegin with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from_print_sword with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from_print_sbyte with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b13 with __b3
Replacing label __b4_from___b14 with __b4
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_main:
Removing instruction sin8u_table_from___b1:
Removing instruction print_str_from___b3:
Removing instruction __b5_from___b4:
Removing instruction print_str_from___b5:
Removing instruction __b6_from___b5:
Removing instruction print_byte_from___b6:
Removing instruction __b7_from___b6:
Removing instruction print_str_from___b7:
Removing instruction __b8_from___b7:
Removing instruction print_byte_from___b8:
Removing instruction __b9_from___b8:
Removing instruction print_str_from___b9:
Removing instruction __b10_from___b9:
Removing instruction print_byte_from___b10:
Removing instruction __b11_from___b10:
Removing instruction print_str_from___b11:
Removing instruction __b12_from___b11:
Removing instruction print_byte_from___b12:
Removing instruction __b13_from___b12:
Removing instruction print_ln_from___b13:
Removing instruction __b17_from___b16:
Removing instruction print_str_from___b17:
Removing instruction __b19_from___b18:
Removing instruction print_str_from___b19:
Removing instruction __b21_from___b20:
Removing instruction print_str_from___b21:
Removing instruction __b23_from___b22:
Removing instruction print_ln_from___b23:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b2:
Removing instruction __b3_from_print_sword:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_word_from___b2:
Removing instruction __b1_from_print_sword:
Removing instruction print_char_from___b1:
Removing instruction __b3_from_print_sbyte:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_byte_from___b2:
Removing instruction __b1_from_print_sbyte:
Removing instruction print_char_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b13:
Removing instruction __b3_from___b7:
Removing instruction __b4_from___b14:
Removing instruction __b4_from___b8:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction print_cls_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction div16u_from_sin8u_table:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction print_word_from___b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b1_from___b13:
Removing instruction __breturn:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction print_str_from___b15:
Removing instruction __b16:
Removing instruction print_word_from___b16:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction __b19:
Removing instruction __b20:
Removing instruction __b21:
Removing instruction __b22:
Removing instruction print_byte_from___b22:
Removing instruction __b23:
Removing instruction __b24:
Removing instruction __b1_from___b24:
Removing instruction __breturn:
Removing instruction print_char_from_print_byte:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction print_byte_from_print_word:
Removing instruction __b1:
Removing instruction print_byte_from___b1:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction mul8u_from_mul8su:
Removing instruction __b3:
Removing instruction __b2:
Removing instruction __b1_from_mul8u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b6:
Removing instruction mulu8_sel_from___b2:
Removing instruction __b9:
Removing instruction mulu8_sel_from___b9:
Removing instruction __b10:
Removing instruction mulu8_sel_from___b10:
Removing instruction __b11:
Removing instruction mulu8_sel_from___b11:
Removing instruction __b12:
Removing instruction mulu8_sel_from___b12:
Removing instruction __b13:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction mul8u_from_mulu8_sel:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction divr16u_from_div16u:
Removing instruction __b1:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp __b4
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from_sin8s to b1
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Removing instruction __b4:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const word) PI2_u4f12 PI2_u4f12 = (word) $6488
(const word) PI_HALF_u4f12 PI_HALF_u4f12 = (word) $1922
(const word) PI_u4f12 PI_u4f12 = (word) $3244
(const byte) RADIX::BINARY BINARY = (number) 2
(const byte) RADIX::DECIMAL DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL OCTAL = (number) 8
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 return zp[2]:15 1.3333333333333333
(word) div16u::return#2 return zp[2]:15 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 22.0
(byte~) divr16u::$2 reg byte a 22.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp[2]:13 2.75
(word) divr16u::dividend#2 dividend zp[2]:13 4.714285714285714
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 16.5
(byte) divr16u::i#2 reg byte x 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp[2]:15 16.5
(word) divr16u::quotient#2 quotient zp[2]:15 11.0
(word) divr16u::quotient#3 quotient zp[2]:15 2.75
(word) divr16u::rem
(word) divr16u::rem#0 rem zp[2]:11 8.25
(word) divr16u::rem#1 rem zp[2]:11 22.0
(word) divr16u::rem#2 rem zp[2]:11 22.0
(word) divr16u::rem#4 rem zp[2]:11 22.0
(word) divr16u::rem#5 rem zp[2]:11 11.0
(word) divr16u::rem#9 rem zp[2]:11 11.0
(word) divr16u::return
(word) divr16u::return#0 return zp[2]:15 7.000000000000001
(word) divr16u::return#2 return zp[2]:15 4.0
(void()) main()
(label) main::@1
(label) main::@return
(const byte[$14]) main::sintab sintab = { fill( $14, 0) }
(const word) main::tabsize tabsize = (byte) $14
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:17 22.0
(byte*) memset::dst#2 dst zp[2]:17 14.666666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$10 reg byte a 4.0
(byte~) mul8su::$7 reg byte a 4.0
(label) mul8su::@1
(label) mul8su::@2
(label) mul8su::@3
(label) mul8su::@return
(signed byte) mul8su::a
(signed byte) mul8su::a#0 reg byte y 2.6
(byte) mul8su::b
(const byte) mul8su::b#0 b = (const byte) sin8u_table::amplitude#0+(byte) 1
(word) mul8su::m
(word) mul8su::m#0 m zp[2]:9 2.0
(word) mul8su::m#1 m zp[2]:9 4.0
(word) mul8su::m#2 m zp[2]:9 1.3333333333333333
(signed word) mul8su::return
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 202.0
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 101.0
(byte) mul8u::a#1 reg byte x 4.0
(byte) mul8u::a#2 reg byte x 2.0
(byte) mul8u::a#3 reg byte x 67.66666666666666
(byte) mul8u::a#6 reg byte x 6.0
(byte) mul8u::b
(byte) mul8u::b#1 reg byte a 4.0
(word) mul8u::mb
(word) mul8u::mb#0 mb zp[2]:6 4.0
(word) mul8u::mb#1 mb zp[2]:6 202.0
(word) mul8u::mb#2 mb zp[2]:6 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 res zp[2]:9 202.0
(word) mul8u::res#2 res zp[2]:9 43.85714285714286
(word) mul8u::res#6 res zp[2]:9 101.0
(word) mul8u::return
(word) mul8u::return#2 return zp[2]:9 4.0
(word) mul8u::return#3 return zp[2]:9 4.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 $0 zp[2]:9 4.0
(word~) mulu8_sel::$1 $1 zp[2]:9 4.0
(label) mulu8_sel::@1
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 reg byte a 4.0
(byte) mulu8_sel::return#1 reg byte a 4.0
(byte) mulu8_sel::return#10 reg byte a 4.0
(byte) mulu8_sel::return#11 reg byte a 4.0
(byte) mulu8_sel::return#12 reg byte a 1.714285714285714
(byte) mulu8_sel::return#2 reg byte a 4.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 select zp[1]:19 0.3333333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 reg byte x 2.0
(byte) mulu8_sel::v1#1 reg byte x 2.0
(byte) mulu8_sel::v1#2 reg byte x 4.0
(byte) mulu8_sel::v1#3 reg byte x 2.0
(byte) mulu8_sel::v1#4 reg byte x 2.0
(byte) mulu8_sel::v1#5 reg byte x 12.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 reg byte y 4.0
(byte) mulu8_sel::v2#1 reg byte y 4.0
(byte) mulu8_sel::v2#3 reg byte y 4.0
(byte) mulu8_sel::v2#4 reg byte y 4.0
(byte) mulu8_sel::v2#5 reg byte y 5.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp[1]:8 4.0
(byte) print_byte::b#1 b zp[1]:8 4.0
(byte) print_byte::b#2 b zp[1]:8 4.0
(byte) print_byte::b#7 b zp[1]:8 22.0
(byte) print_byte::b#8 b zp[1]:8 5.25
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#4 reg byte a 4.0
(byte) print_char::ch#5 reg byte a 4.0
(byte) print_char::ch#6 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp[2]:6 101.0
(byte*) print_char_cursor#102 print_char_cursor zp[2]:6 8.5
(byte*) print_char_cursor#103 print_char_cursor zp[2]:6 8.999999999999998
(byte*) print_char_cursor#109 print_char_cursor zp[2]:6 54.0
(byte*~) print_char_cursor#119 print_char_cursor zp[2]:6 22.0
(byte*) print_char_cursor#19 print_char_cursor zp[2]:6 3.2340425531914887
(byte*) print_char_cursor#2 print_char_cursor zp[2]:6 12.321428571428571
(byte*) print_char_cursor#66 print_char_cursor zp[2]:6 8.0
(void()) print_cls()
(label) print_cls::@return
(const byte[]) print_hextab print_hextab = (string) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:2 8.783783783783784
(byte*) print_line_cursor#12 print_line_cursor zp[2]:2 204.0
(byte*) print_line_cursor#23 print_line_cursor zp[2]:2 13.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp[1]:8 4.0
(signed byte) print_sbyte::b#1 b zp[1]:8 2.8333333333333335
(signed byte) print_sbyte::b#4 b zp[1]:8 4.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:4 202.0
(byte*) print_str::str#10 str zp[2]:4 101.5
(byte*) print_str::str#12 str zp[2]:4 2.0
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp[2]:4 4.0
(signed word) print_sword::w#1 w zp[2]:4 2.8333333333333335
(signed word) print_sword::w#4 w zp[2]:4 4.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp[2]:4 4.0
(word) print_word::w#1 w zp[2]:4 4.0
(word) print_word::w#2 w zp[2]:4 22.0
(word) print_word::w#3 w zp[2]:4 6.333333333333334
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 $4 zp[2]:9 4.0
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@9
(label) sin8s::@return
(const byte) sin8s::DIV_6 DIV_6 = (byte) $2b
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 isUpper zp[1]:8 0.05555555555555555
(signed byte) sin8s::return
(signed byte) sin8s::return#0 reg byte a 5.0
(signed byte) sin8s::return#2 reg byte a 22.0
(signed byte~) sin8s::return#5 reg byte a 4.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 reg byte a 4.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 usinx zp[1]:22 0.3333333333333333
(byte) sin8s::usinx#1 reg byte x 4.0
(byte) sin8s::usinx#2 reg byte x 4.0
(byte) sin8s::usinx#4 reg byte x 2.0
(word) sin8s::x
(word) sin8s::x#0 x zp[2]:9 4.0
(word) sin8s::x#1 x zp[2]:9 4.0
(word) sin8s::x#2 x zp[2]:9 8.5
(word) sin8s::x#4 x zp[2]:9 5.0
(word) sin8s::x#6 x zp[2]:9 6.0
(byte) sin8s::x1
(byte) sin8s::x1#0 x1 zp[1]:20 0.6363636363636365
(byte) sin8s::x2
(byte) sin8s::x2#0 reg byte a 4.0
(byte) sin8s::x3
(byte) sin8s::x3#0 x3 zp[1]:21 1.0
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 reg byte a 4.0
(byte) sin8s::x4
(byte) sin8s::x4#0 reg byte a 4.0
(byte) sin8s::x5
(byte) sin8s::x5#0 reg byte a 4.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 reg byte a 4.0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte~) sin8u_table::$22 reg byte a 22.0
(label) sin8u_table::@1
(label) sin8u_table::@10
(label) sin8u_table::@11
(label) sin8u_table::@12
(label) sin8u_table::@13
(label) sin8u_table::@14
(label) sin8u_table::@15
(label) sin8u_table::@16
(label) sin8u_table::@17
(label) sin8u_table::@18
(label) sin8u_table::@19
(label) sin8u_table::@2
(label) sin8u_table::@20
(label) sin8u_table::@21
(label) sin8u_table::@22
(label) sin8u_table::@23
(label) sin8u_table::@24
(label) sin8u_table::@3
(label) sin8u_table::@4
(label) sin8u_table::@5
(label) sin8u_table::@6
(label) sin8u_table::@7
(label) sin8u_table::@8
(label) sin8u_table::@9
(label) sin8u_table::@return
(byte) sin8u_table::amplitude
(const byte) sin8u_table::amplitude#0 amplitude = (const byte) sin8u_table::max#0-(const byte) sin8u_table::min#0
(word) sin8u_table::i
(word) sin8u_table::i#1 i zp[2]:11 22.0
(word) sin8u_table::i#10 i zp[2]:11 1.03125
(byte) sin8u_table::max
(const byte) sin8u_table::max#0 max = (byte) $ff
(byte) sin8u_table::mid
(const byte) sin8u_table::mid#0 mid = (byte)(const word) sin8u_table::sum#0/(byte) 2+(byte) 1
(byte) sin8u_table::min
(const byte) sin8u_table::min#0 min = (byte) $a
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#1 sintab zp[2]:17 1.0476190476190477
(byte*) sin8u_table::sintab#2 sintab zp[2]:17 2.75
(signed byte) sin8u_table::sinx
(signed byte) sin8u_table::sinx#0 sinx zp[1]:19 2.357142857142857
(signed word) sin8u_table::sinx_sc
(signed word) sin8u_table::sinx_sc#0 sinx_sc zp[2]:9 2.1999999999999997
(byte) sin8u_table::sinx_tr
(byte) sin8u_table::sinx_tr#0 reg byte x 1.9411764705882355
(word) sin8u_table::step
(word) sin8u_table::step#0 step zp[2]:15 0.2727272727272727
(const string) sin8u_table::str str = (string) "step:"
(const string) sin8u_table::str1 str1 = (string) " min:"
(const string) sin8u_table::str2 str2 = (string) " max:"
(const string) sin8u_table::str3 str3 = (string) " ampl:"
(const string) sin8u_table::str4 str4 = (string) " mid:"
(const string) sin8u_table::str5 str5 = (string) "x: "
(const string) sin8u_table::str6 str6 = (string) " sin: "
(const string) sin8u_table::str7 str7 = (string) " scaled: "
(const string) sin8u_table::str8 str8 = (string) " trans: "
(word) sin8u_table::sum
(const word) sin8u_table::sum#0 sum = (word)(const byte) sin8u_table::min#0+(const byte) sin8u_table::max#0
(word) sin8u_table::tabsize
(word) sin8u_table::x
(word) sin8u_table::x#1 x zp[2]:13 11.0
(word) sin8u_table::x#10 x zp[2]:13 1.4193548387096775

zp[2]:2 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
reg byte a [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ]
zp[2]:4 [ print_sword::w#4 print_sword::w#0 print_sword::w#1 print_word::w#3 print_word::w#0 print_word::w#2 print_word::w#1 print_str::str#10 print_str::str#12 print_str::str#0 ]
reg byte a [ mul8u::b#1 ]
reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
zp[2]:6 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_char_cursor#109 print_char_cursor#66 print_char_cursor#103 print_char_cursor#19 print_char_cursor#102 print_char_cursor#2 print_char_cursor#119 print_char_cursor#1 ]
zp[1]:8 [ sin8s::isUpper#10 print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
zp[2]:9 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 mulu8_sel::$0 mulu8_sel::$1 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
zp[2]:11 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 sin8u_table::i#10 sin8u_table::i#1 ]
zp[2]:13 [ divr16u::dividend#2 divr16u::dividend#0 sin8u_table::x#10 sin8u_table::x#1 ]
zp[2]:15 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:17 [ memset::dst#2 memset::dst#1 sin8u_table::sintab#2 sin8u_table::sintab#1 ]
reg byte a [ sin8s::return#2 ]
zp[1]:19 [ sin8u_table::sinx#0 mulu8_sel::select#5 ]
reg byte y [ mul8su::a#0 ]
reg byte a [ sin8u_table::$22 ]
reg byte x [ sin8u_table::sinx_tr#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ mul8su::$7 ]
reg byte a [ mul8su::$10 ]
reg byte a [ mul8u::$1 ]
zp[1]:20 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:21 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:22 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]


FINAL ASSEMBLER
Score: 19664

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_char_cursor = 6
  .label print_line_cursor = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label tabsize = $14
    // print_cls()
    // [5] call print_cls 
    // [212] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // sin8u_table(sintab, tabsize, 10, 255)
    // [7] call sin8u_table 
    // [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
    jsr sin8u_table
    // main::@return
    // }
    // [8] return 
    rts
    sintab: .fill $14, 0
}
  // sin8u_table
// Generate unsigned byte sinus table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sinus points (the size of the table)
// min - the minimal value
// max - the maximal value
// sin8u_table(byte* zeropage($11) sintab)
sin8u_table: {
    .const min = $a
    .const max = $ff
    .label amplitude = max-min
    .const sum = min+max
    .const mid = sum/2+1
    .label step = $f
    .label sinx = $13
    .label sinx_sc = 9
    .label sintab = $11
    .label x = $d
    .label i = $b
    // div16u(PI2_u4f12, tabsize)
    // [10] call div16u 
    // [190] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
    jsr div16u
    // div16u(PI2_u4f12, tabsize)
    // [11] (word) div16u::return#2 ← (word) div16u::return#0
    // sin8u_table::@3
    // step = div16u(PI2_u4f12, tabsize)
    // [12] (word) sin8u_table::step#0 ← (word) div16u::return#2
    // print_str("step:")
    // [13] call print_str 
    // [85] phi from sin8u_table::@3 to print_str [phi:sin8u_table::@3->print_str]
    // [85] phi (byte*) print_char_cursor#109 = (byte*) 1024 [phi:sin8u_table::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str [phi:sin8u_table::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@4
    // print_word(step)
    // [14] (word) print_word::w#1 ← (word) sin8u_table::step#0 -- vwuz1=vwuz2 
    lda.z step
    sta.z print_word.w
    lda.z step+1
    sta.z print_word.w+1
    // [15] call print_word 
    // [102] phi from sin8u_table::@4 to print_word [phi:sin8u_table::@4->print_word]
    // [102] phi (byte*) print_char_cursor#102 = (byte*) print_char_cursor#2 [phi:sin8u_table::@4->print_word#0] -- register_copy 
    // [102] phi (word) print_word::w#3 = (word) print_word::w#1 [phi:sin8u_table::@4->print_word#1] -- register_copy 
    jsr print_word
    // [16] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
    // sin8u_table::@5
    // print_str(" min:")
    // [17] call print_str 
    // [85] phi from sin8u_table::@5 to print_str [phi:sin8u_table::@5->print_str]
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@5->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str1 [phi:sin8u_table::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [18] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
    // sin8u_table::@6
    // print_byte(min)
    // [19] call print_byte 
    // [73] phi from sin8u_table::@6 to print_byte [phi:sin8u_table::@6->print_byte]
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@6->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@6->print_byte#1] -- vbuz1=vbuc1 
    lda #min
    sta.z print_byte.b
    jsr print_byte
    // [20] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
    // sin8u_table::@7
    // print_str(" max:")
    // [21] call print_str 
    // [85] phi from sin8u_table::@7 to print_str [phi:sin8u_table::@7->print_str]
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@7->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str2 [phi:sin8u_table::@7->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [22] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
    // sin8u_table::@8
    // print_byte(max)
    // [23] call print_byte 
    // [73] phi from sin8u_table::@8 to print_byte [phi:sin8u_table::@8->print_byte]
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@8->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@8->print_byte#1] -- vbuz1=vbuc1 
    lda #max
    sta.z print_byte.b
    jsr print_byte
    // [24] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
    // sin8u_table::@9
    // print_str(" ampl:")
    // [25] call print_str 
    // [85] phi from sin8u_table::@9 to print_str [phi:sin8u_table::@9->print_str]
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@9->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str3 [phi:sin8u_table::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // [26] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
    // sin8u_table::@10
    // print_byte(amplitude)
    // [27] call print_byte 
    // [73] phi from sin8u_table::@10 to print_byte [phi:sin8u_table::@10->print_byte]
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@10->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@10->print_byte#1] -- vbuz1=vbuc1 
    lda #amplitude
    sta.z print_byte.b
    jsr print_byte
    // [28] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
    // sin8u_table::@11
    // print_str(" mid:")
    // [29] call print_str 
    // [85] phi from sin8u_table::@11 to print_str [phi:sin8u_table::@11->print_str]
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@11->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str4 [phi:sin8u_table::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    // [30] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
    // sin8u_table::@12
    // print_byte(mid)
    // [31] call print_byte 
    // [73] phi from sin8u_table::@12 to print_byte [phi:sin8u_table::@12->print_byte]
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@12->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@12->print_byte#1] -- vbuz1=vbuc1 
    lda #mid
    sta.z print_byte.b
    jsr print_byte
    // [32] phi from sin8u_table::@12 to sin8u_table::@13 [phi:sin8u_table::@12->sin8u_table::@13]
    // sin8u_table::@13
    // print_ln()
    // [33] call print_ln 
    // [68] phi from sin8u_table::@13 to print_ln [phi:sin8u_table::@13->print_ln]
    // [68] phi (byte*) print_line_cursor#23 = (byte*) 1024 [phi:sin8u_table::@13->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    jsr print_ln
    // [34] phi from sin8u_table::@13 to sin8u_table::@1 [phi:sin8u_table::@13->sin8u_table::@1]
    // [34] phi (byte*) sin8u_table::sintab#2 = (const byte[$14]) main::sintab [phi:sin8u_table::@13->sin8u_table::@1#0] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta.z sintab
    lda #>main.sintab
    sta.z sintab+1
    // [34] phi (word) sin8u_table::x#10 = (byte) 0 [phi:sin8u_table::@13->sin8u_table::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z x
    sta.z x+1
    // [34] phi (word) sin8u_table::i#10 = (byte) 0 [phi:sin8u_table::@13->sin8u_table::@1#2] -- vwuz1=vbuc1 
    sta.z i
    sta.z i+1
  // u[4.12]
    // sin8u_table::@1
  __b1:
    // for( word i=0; i<tabsize; i++)
    // [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.tabsize
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.tabsize
    bcc __b2
  !:
    // sin8u_table::@return
    // }
    // [36] return 
    rts
    // sin8u_table::@2
  __b2:
    // sin8s(x)
    // [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [38] call sin8s 
    jsr sin8s
    // [39] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0
    // sin8u_table::@14
    // sinx = sin8s(x)
    // [40] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2 -- vbsz1=vbsaa 
    sta.z sinx
    // mul8su(sinx, amplitude+1)
    // [41] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0 -- vbsyy=vbsz1 
    tay
    // [42] call mul8su 
    jsr mul8su
    // sin8u_table::@15
    // sinx_sc = mul8su(sinx, amplitude+1)
    // [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2
    // >sinx_sc
    // [44] (byte~) sin8u_table::$22 ← > (signed word) sin8u_table::sinx_sc#0 -- vbuaa=_hi_vwsz1 
    lda.z sinx_sc+1
    // sinx_tr = mid+>sinx_sc
    // [45] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$22 -- vbuxx=vbuc1_plus_vbuaa 
    tax
    axs #-[mid]
    // *sintab++ = sinx_tr
    // [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (sintab),y
    // *sintab++ = sinx_tr;
    // [47] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 -- pbuz1=_inc_pbuz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [48] (byte*~) print_char_cursor#119 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_str("x: ")
    // [49] call print_str 
    // [85] phi from sin8u_table::@15 to print_str [phi:sin8u_table::@15->print_str]
    // [85] phi (byte*) print_char_cursor#109 = (byte*~) print_char_cursor#119 [phi:sin8u_table::@15->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str5 [phi:sin8u_table::@15->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str.str
    lda #>str5
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@16
    // print_word(x)
    // [50] (word) print_word::w#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z print_word.w
    lda.z x+1
    sta.z print_word.w+1
    // [51] call print_word 
    // [102] phi from sin8u_table::@16 to print_word [phi:sin8u_table::@16->print_word]
    // [102] phi (byte*) print_char_cursor#102 = (byte*) print_char_cursor#2 [phi:sin8u_table::@16->print_word#0] -- register_copy 
    // [102] phi (word) print_word::w#3 = (word) print_word::w#2 [phi:sin8u_table::@16->print_word#1] -- register_copy 
    jsr print_word
    // [52] phi from sin8u_table::@16 to sin8u_table::@17 [phi:sin8u_table::@16->sin8u_table::@17]
    // sin8u_table::@17
    // print_str(" sin: ")
    // [53] call print_str 
    // [85] phi from sin8u_table::@17 to print_str [phi:sin8u_table::@17->print_str]
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@17->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str6 [phi:sin8u_table::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta.z print_str.str
    lda #>str6
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@18
    // print_sbyte(sinx)
    // [54] (signed byte) print_sbyte::b#1 ← (signed byte) sin8u_table::sinx#0 -- vbsz1=vbsz2 
    lda.z sinx
    sta.z print_sbyte.b
    // [55] call print_sbyte 
    jsr print_sbyte
    // [56] phi from sin8u_table::@18 to sin8u_table::@19 [phi:sin8u_table::@18->sin8u_table::@19]
    // sin8u_table::@19
    // print_str(" scaled: ")
    // [57] call print_str 
    // [85] phi from sin8u_table::@19 to print_str [phi:sin8u_table::@19->print_str]
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@19->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str7 [phi:sin8u_table::@19->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta.z print_str.str
    lda #>str7
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@20
    // print_sword(sinx_sc)
    // [58] (signed word) print_sword::w#1 ← (signed word) sin8u_table::sinx_sc#0 -- vwsz1=vwsz2 
    lda.z sinx_sc
    sta.z print_sword.w
    lda.z sinx_sc+1
    sta.z print_sword.w+1
    // [59] call print_sword 
    jsr print_sword
    // [60] phi from sin8u_table::@20 to sin8u_table::@21 [phi:sin8u_table::@20->sin8u_table::@21]
    // sin8u_table::@21
    // print_str(" trans: ")
    // [61] call print_str 
    // [85] phi from sin8u_table::@21 to print_str [phi:sin8u_table::@21->print_str]
    // [85] phi (byte*) print_char_cursor#109 = (byte*) print_char_cursor#19 [phi:sin8u_table::@21->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#12 = (const string) sin8u_table::str8 [phi:sin8u_table::@21->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta.z print_str.str
    lda #>str8
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@22
    // print_byte(sinx_tr)
    // [62] (byte) print_byte::b#7 ← (byte) sin8u_table::sinx_tr#0 -- vbuz1=vbuxx 
    stx.z print_byte.b
    // [63] call print_byte 
    // [73] phi from sin8u_table::@22 to print_byte [phi:sin8u_table::@22->print_byte]
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@22->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#7 [phi:sin8u_table::@22->print_byte#1] -- register_copy 
    jsr print_byte
    // [64] phi from sin8u_table::@22 to sin8u_table::@23 [phi:sin8u_table::@22->sin8u_table::@23]
    // sin8u_table::@23
    // print_ln()
    // [65] call print_ln 
    // [68] phi from sin8u_table::@23 to print_ln [phi:sin8u_table::@23->print_ln]
    // [68] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:sin8u_table::@23->print_ln#0] -- register_copy 
    jsr print_ln
    // sin8u_table::@24
    // x = x + step
    // [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // for( word i=0; i<tabsize; i++)
    // [67] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [34] phi from sin8u_table::@24 to sin8u_table::@1 [phi:sin8u_table::@24->sin8u_table::@1]
    // [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@24->sin8u_table::@1#0] -- register_copy 
    // [34] phi (word) sin8u_table::x#10 = (word) sin8u_table::x#1 [phi:sin8u_table::@24->sin8u_table::@1#1] -- register_copy 
    // [34] phi (word) sin8u_table::i#10 = (word) sin8u_table::i#1 [phi:sin8u_table::@24->sin8u_table::@1#2] -- register_copy 
    jmp __b1
    str: .text "step:"
    .byte 0
    str1: .text " min:"
    .byte 0
    str2: .text " max:"
    .byte 0
    str3: .text " ampl:"
    .byte 0
    str4: .text " mid:"
    .byte 0
    str5: .text "x: "
    .byte 0
    str6: .text " sin: "
    .byte 0
    str7: .text " scaled: "
    .byte 0
    str8: .text " trans: "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [69] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [69] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [72] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage(8) b)
print_byte: {
    .label b = 8
    // b>>4
    // [74] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [75] (byte) print_char::ch#4 ← *((const byte[]) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [76] call print_char 
    // [81] phi from print_byte to print_char [phi:print_byte->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#103 [phi:print_byte->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) print_char::ch#4 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@1
    // b&$f
    // [77] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // print_char(print_hextab[b&$f])
    // [78] (byte) print_char::ch#5 ← *((const byte[]) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [79] call print_char 
    // [81] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#19 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@return
    // }
    // [80] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [83] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#66 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [84] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zeropage(4) str)
print_str: {
    .label str = 4
    // [86] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
    // [86] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#109 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [86] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [88] return 
    rts
    // print_str::@2
  __b2:
    // *(print_char_cursor++) = *(str++)
    // [89] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
    // *(print_char_cursor++) = *(str++);
    // [90] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(4) w)
print_sword: {
    .label w = 4
    // if(w<0)
    // [92] if((signed word) print_sword::w#1<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [93] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
    // print_sword::@3
    // print_char(' ')
    // [94] call print_char 
    // [81] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sword::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [95] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
    // [95] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#1 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
    // print_sword::@2
  __b2:
    // print_word((word)w)
    // [96] (word) print_word::w#0 ← (word)(signed word) print_sword::w#4
    // [97] call print_word 
    // [102] phi from print_sword::@2 to print_word [phi:print_sword::@2->print_word]
    // [102] phi (byte*) print_char_cursor#102 = (byte*) print_char_cursor#19 [phi:print_sword::@2->print_word#0] -- register_copy 
    // [102] phi (word) print_word::w#3 = (word) print_word::w#0 [phi:print_sword::@2->print_word#1] -- register_copy 
    jsr print_word
    // print_sword::@return
    // }
    // [98] return 
    rts
    // [99] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
    // print_sword::@1
  __b1:
    // print_char('-')
    // [100] call print_char 
    // [81] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sword::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sword::@4
    // w = -w
    // [101] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // print_word
// Print a word as HEX
// print_word(word zeropage(4) w)
print_word: {
    .label w = 4
    // print_byte(>w)
    // [103] (byte) print_byte::b#1 ← > (word) print_word::w#3 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_byte.b
    // [104] call print_byte 
    // [73] phi from print_word to print_byte [phi:print_word->print_byte]
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#102 [phi:print_word->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    // print_word::@1
    // print_byte(<w)
    // [105] (byte) print_byte::b#2 ← < (word) print_word::w#3 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_byte.b
    // [106] call print_byte 
    // [73] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#19 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    // print_word::@return
    // }
    // [107] return 
    rts
}
  // print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage(8) b)
print_sbyte: {
    .label b = 8
    // if(b<0)
    // [108] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1
    // [109] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
    // print_sbyte::@3
    // print_char(' ')
    // [110] call print_char 
    // [81] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sbyte::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [111] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
    // [111] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    // print_sbyte::@2
  __b2:
    // print_byte((byte)b)
    // [112] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#4
    // [113] call print_byte 
    // [73] phi from print_sbyte::@2 to print_byte [phi:print_sbyte::@2->print_byte]
    // [73] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#19 [phi:print_sbyte::@2->print_byte#0] -- register_copy 
    // [73] phi (byte) print_byte::b#8 = (byte) print_byte::b#0 [phi:print_sbyte::@2->print_byte#1] -- register_copy 
    jsr print_byte
    // print_sbyte::@return
    // }
    // [114] return 
    rts
    // [115] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
    // print_sbyte::@1
  __b1:
    // print_char('-')
    // [116] call print_char 
    // [81] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sbyte::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sbyte::@4
    // b = -b
    // [117] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2
}
  // mul8su
// Multiply a signed byte and an unsigned byte (into a signed word)
// Fixes offsets introduced by using unsigned multiplication
// mul8su(signed byte register(Y) a)
mul8su: {
    .const b = sin8u_table.amplitude+1
    .label m = 9
    // mul8u((byte)a, (byte) b)
    // [118] (byte) mul8u::a#1 ← (byte)(signed byte) mul8su::a#0 -- vbuxx=vbuyy 
    tya
    tax
    // [119] call mul8u 
    // [128] phi from mul8su to mul8u [phi:mul8su->mul8u]
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:mul8su->mul8u#0] -- register_copy 
    // [128] phi (word) mul8u::mb#0 = (const byte) mul8su::b#0 [phi:mul8su->mul8u#1] -- vwuz1=vbuc1 
    lda #<b
    sta.z mul8u.mb
    lda #>b
    sta.z mul8u.mb+1
    jsr mul8u
    // mul8u((byte)a, (byte) b)
    // [120] (word) mul8u::return#2 ← (word) mul8u::res#2
    // mul8su::@3
    // m = mul8u((byte)a, (byte) b)
    // [121] (word) mul8su::m#0 ← (word) mul8u::return#2
    // if(a<0)
    // [122] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b1
    // mul8su::@2
    // >m
    // [123] (byte~) mul8su::$7 ← > (word) mul8su::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // >m = (>m)-(byte)b
    // [124] (byte~) mul8su::$10 ← (byte~) mul8su::$7 - (const byte) mul8su::b#0 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #b
    // [125] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$10 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [126] phi from mul8su::@2 mul8su::@3 to mul8su::@1 [phi:mul8su::@2/mul8su::@3->mul8su::@1]
    // [126] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@3->mul8su::@1#0] -- register_copy 
    // mul8su::@1
  __b1:
    // mul8su::@return
    // }
    // [127] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = 6
    .label res = 9
    .label return = 9
    // [129] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [129] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [129] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z res
    sta.z res+1
    // [129] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  __b1:
    // while(a!=0)
    // [130] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // mul8u::@return
    // }
    // [131] return 
    rts
    // mul8u::@2
  __b2:
    // a&1
    // [132] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [133] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul8u::@4
    // res = res + mb
    // [134] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [135] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [135] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  __b3:
    // a = a>>1
    // [136] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [137] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [129] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [129] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [129] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [129] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage(9) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = 9
    .label x = 9
    .label x1 = $14
    .label x3 = $15
    .label usinx = $16
    .label isUpper = 8
    // if(x >= PI_u4f12 )
    // [138] if((word) sin8s::x#2<(const word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc b1
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc b1
  !:
    // sin8s::@5
    // x = x - PI_u4f12
    // [139] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [140] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
    // [140] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [140] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [140] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b1:
    // [140] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [140] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    // sin8s::@1
  __b1:
    // if(x >= PI_HALF_u4f12 )
    // [141] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2
  !:
    // sin8s::@6
    // x = PI_u4f12 - x
    // [142] (word) sin8s::x#1 ← (const word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [143] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
    // [143] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    // sin8s::@2
  __b2:
    // x<<3
    // [144] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // x1 = >x<<3
    // [145] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z __4+1
    sta.z x1
    // mulu8_sel(x1, x1, 0)
    // [146] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    tax
    // [147] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    tay
    // [148] call mulu8_sel 
    // [181] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x1, x1, 0)
    // [149] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
    // sin8s::@9
    // x2 = mulu8_sel(x1, x1, 0)
    // [150] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
    // mulu8_sel(x2, x1, 1)
    // [151] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [152] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [153] call mulu8_sel 
    // [181] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x2, x1, 1)
    // [154] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
    // sin8s::@10
    // x3 = mulu8_sel(x2, x1, 1)
    // [155] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // mulu8_sel(x3, DIV_6, 1)
    // [156] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    tax
    // [157] call mulu8_sel 
    // [181] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, DIV_6, 1)
    // [158] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
    // sin8s::@11
    // x3_6 = mulu8_sel(x3, DIV_6, 1)
    // [159] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
    // usinx = x1 - x3_6
    // [160] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // mulu8_sel(x3, x1, 0)
    // [161] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [162] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [163] call mulu8_sel 
    // [181] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, x1, 0)
    // [164] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
    // sin8s::@12
    // x4 = mulu8_sel(x3, x1, 0)
    // [165] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
    // mulu8_sel(x4, x1, 0)
    // [166] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [167] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [168] call mulu8_sel 
    // [181] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
    // [181] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [181] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [181] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x4, x1, 0)
    // [169] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
    // sin8s::@13
    // x5 = mulu8_sel(x4, x1, 0)
    // [170] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
    // x5_128 = x5>>4
    // [171] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // usinx = usinx + x5_128
    // [172] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // if(usinx>=128)
    // [173] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3
    // sin8s::@7
    // usinx--;
    // [174] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [175] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
    // [175] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    // sin8s::@3
  __b3:
    // if(isUpper!=0)
    // [176] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b14
    // sin8s::@8
    // sinx = -(signed byte)usinx
    // [177] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [178] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
    // [178] phi (signed byte) sin8s::return#0 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    // sin8s::@4
    // sin8s::@return
    // }
    // [179] return 
    rts
    // sin8s::@14
  __b14:
    // [180] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    rts
}
  // mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zeropage($13) select)
mulu8_sel: {
    .label __0 = 9
    .label __1 = 9
    .label select = $13
    // mul8u(v1, v2)
    // [182] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
    // [183] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [184] call mul8u 
    // [128] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
    // [128] phi (word) mul8u::mb#0 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- vwuz1=vbuaa 
    sta.z mul8u.mb
    lda #0
    sta.z mul8u.mb+1
    jsr mul8u
    // mul8u(v1, v2)
    // [185] (word) mul8u::return#3 ← (word) mul8u::res#2
    // mulu8_sel::@1
    // [186] (word~) mulu8_sel::$0 ← (word) mul8u::return#3
    // mul8u(v1, v2)<<select
    // [187] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // >mul8u(v1, v2)<<select
    // [188] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda.z __1+1
    // mulu8_sel::@return
    // }
    // [189] return 
    rts
}
  // div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $f
    // divr16u(dividend, divisor, 0)
    // [191] call divr16u 
    // [195] phi from div16u to divr16u [phi:div16u->divr16u]
    jsr divr16u
    // divr16u(dividend, divisor, 0)
    // [192] (word) divr16u::return#2 ← (word) divr16u::return#0
    // div16u::@1
    // [193] (word) div16u::return#0 ← (word) divr16u::return#2
    // div16u::@return
    // }
    // [194] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($d) dividend, word zeropage($b) rem)
divr16u: {
    .label rem = $b
    .label dividend = $d
    .label quotient = $f
    .label return = $f
    // [196] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [196] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [196] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [196] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [196] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    txa
    sta.z rem
    sta.z rem+1
    // [196] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [196] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [196] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [196] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [196] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [197] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // >dividend
    // [198] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // >dividend & $80
    // [199] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (>dividend & $80) != 0 )
    // [200] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [201] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [202] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [202] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [203] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [204] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [205] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.tabsize
    bcc __b3
    bne !+
    lda.z rem
    cmp #<main.tabsize
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [206] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [207] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.tabsize
    sta.z rem
    lda.z rem+1
    sbc #>main.tabsize
    sta.z rem+1
    // [208] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [208] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [208] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( byte i : 0..15)
    // [209] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [210] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@return
    // }
    // [211] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [213] call memset 
    // [215] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [214] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $11
    // [216] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [216] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [217] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [218] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [219] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [220] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [216] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [216] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

