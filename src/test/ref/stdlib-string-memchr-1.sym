__constant char BINARY = 2
__constant char * const COLORRAM = (char *) 55296
__constant char DECIMAL = $a
__constant char * const DEFAULT_SCREEN = (char *) 1024
__constant char DIGITS[] = "0123456789abcdef"z
__constant const char GREEN = 5
__constant char HEXADECIMAL = $10
__constant const char LIGHT_BLUE = $e
__constant char OCTAL = 8
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant unsigned int RADIX_BINARY_VALUES[] = { $8000, $4000, $2000, $1000, $800, $400, $200, $100, $80, $40, $20, $10, 8, 4, 2 }
__constant unsigned int RADIX_DECIMAL_VALUES[] = { $2710, $3e8, $64, $a }
__constant unsigned int RADIX_HEXADECIMAL_VALUES[] = { $1000, $100, $10 }
__constant unsigned int RADIX_OCTAL_VALUES[] = { $8000, $1000, $200, $40, 8 }
__constant const char RED = 2
__constant char SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
__constant unsigned int STACK_BASE = $103
void __start()
void assert_ptr(void *expect , void *actual , char *message)
void *assert_ptr::actual
void *assert_ptr::actual#0 // actual zp[2]:2 11.2
void *assert_ptr::expect
__constant void *assert_ptr::expect#0 = (void *) 0 // expect
char *assert_ptr::message
__constant char assert_ptr::s[$1b] = "Assert failed. expected:0x"
__constant char assert_ptr::s1[$b] = " actual:0x"
void assert_uint(unsigned int expect , unsigned int actual , char *message)
unsigned int assert_uint::actual
unsigned int assert_uint::actual#0 // actual zp[2]:2 21.299999999999997
unsigned int assert_uint::expect
__constant unsigned int assert_uint::expect#0 = 8 // expect
char *assert_uint::message
__constant char assert_uint::s[$19] = "Assert failed. expected:"
__constant char assert_uint::s1[9] = " actual:"
void clrscr()
char clrscr::c
char clrscr::c#1 // reg byte y 20002.0
char clrscr::c#2 // reg byte y 12501.25
char clrscr::l
char clrscr::l#1 // reg byte x 2002.0
char clrscr::l#2 // reg byte x 333.6666666666667
char *clrscr::line_cols
char *clrscr::line_cols#1 // line_cols zp[2]:9 1001.0
char *clrscr::line_cols#5 // line_cols zp[2]:9 1500.375
char *clrscr::line_text
char *clrscr::line_text#1 // line_text zp[2]:4 667.3333333333334
char *clrscr::line_text#5 // line_text zp[2]:4 1714.7142857142858
void conio_c64_init()
__constant char * const conio_c64_init::BASIC_CURSOR_LINE = (char *) 214
char conio_c64_init::line
char conio_c64_init::line#0 // reg byte x 11.0
char conio_c64_init::line#2 // reg byte x 22.0
__loadstore char conio_cursor_x // zp[1]:14 18295.243902439026
__loadstore char conio_cursor_y // zp[1]:15 326532.7448979592
__loadstore char *conio_line_color // zp[2]:18 230210.51041666666
__loadstore char *conio_line_text // zp[2]:16 227837.20618556702
__loadstore char conio_textcolor // zp[1]:20 127987.417721519
__stackcall void cputc(char c)
__constant char cputc::OFFSET_STACK_C = 0
char cputc::c
char cputc::c#0 // reg byte a 150001.5
void cputln()
void cscroll()
void gotoxy(char x , char y)
char *gotoxy::$5 // zp[2]:25 202.0
char *gotoxy::$6 // zp[2]:21 202.0
unsigned int gotoxy::$7 // zp[2]:21 151.5
unsigned int gotoxy::$8 // zp[2]:23 202.0
unsigned int gotoxy::$9 // zp[2]:21 202.0
unsigned int gotoxy::line_offset
unsigned int gotoxy::line_offset#0 // line_offset zp[2]:21 101.0
char gotoxy::x
__constant char gotoxy::x#2 = 0 // x
char gotoxy::y
char gotoxy::y#2 // reg byte x 71.0
char gotoxy::y#4 // reg byte x 67.33333333333333
void main()
__constant char main::message[$a] = "finding a"
__constant char main::message1[$e] = "not finding a"
char *main::ptr
char *main::ptr#0 // ptr zp[2]:2 22.0
char *main::ptr2
char *main::ptr2#0 // ptr2 zp[2]:2 11.0
__constant char *main::str = "this is a test"
void * memchr(const void *str , char c , unsigned int n)
char memchr::c
char memchr::c#4 // c zp[1]:8 166.83333333333334
unsigned int memchr::i
unsigned int memchr::i#1 // i zp[2]:9 2002.0
unsigned int memchr::i#2 // i zp[2]:9 750.75
unsigned int memchr::n
unsigned int memchr::n#3 // n zp[2]:4 166.83333333333334
char *memchr::ptr
char *memchr::ptr#1 // ptr zp[2]:2 1001.0
char *memchr::ptr#2 // ptr zp[2]:2 1001.0
void *memchr::return
void *memchr::return#2 // return zp[2]:2 30.75
void *memchr::return#3 // return zp[2]:2 11.0
void *memchr::return#4 // return zp[2]:2 11.0
void *memchr::return#8 // return zp[2]:2 202.0
const void *memchr::str
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
void *memcpy::destination#2 // destination zp[2]:29
char *memcpy::dst
char *memcpy::dst#1 // dst zp[2]:29 1.000000001E9
char *memcpy::dst#2 // dst zp[2]:29 1.0333333346666667E9
char *memcpy::dst#4 // dst zp[2]:29 2.00000002E8
unsigned int memcpy::num
void *memcpy::return
void *memcpy::source
void *memcpy::source#2 // source zp[2]:6
char *memcpy::src
char *memcpy::src#1 // src zp[2]:6 2.000000002E9
char *memcpy::src#2 // src zp[2]:6 1.02500000125E9
char *memcpy::src#4 // src zp[2]:6 1.00000001E8
char *memcpy::src_end
char *memcpy::src_end#0 // src_end zp[2]:27 1.3750000025E8
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#1 // reg byte x 2.0000002E7
char memset::c#4 // reg byte x 1.4428571457142857E8
char *memset::dst
char *memset::dst#1 // dst zp[2]:6 2.000000002E9
char *memset::dst#2 // dst zp[2]:6 1.3666666683333335E9
char *memset::dst#4 // dst zp[2]:6 2.00000002E8
char *memset::end
char *memset::end#0 // end zp[2]:29 1.833333336666667E8
unsigned int memset::num
void *memset::return
void *memset::str
void *memset::str#3 // str zp[2]:6
__loadstore struct printf_buffer_number printf_buffer = {} // mem[12]
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
__constant char *printf_number_buffer::buffer_digits#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS // buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // reg byte a 7001.0
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_min_length
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_zero_padding
signed char printf_number_buffer::len
signed char printf_number_buffer::padding
void (*printf_number_buffer::putc)(char)
__constant void (*printf_number_buffer::putc#0)(char) = &cputc // putc
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 1000001.0
void (*printf_str::putc)(char)
void (*printf_str::putc#16)(char) // putc zp[2]:4
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:9 1000001.0
const char *printf_str::s#15 // s zp[2]:9 1550002.0
const char *printf_str::s#16 // s zp[2]:9 101002.0
const char *printf_str::s#2 // s zp[2]:9 2002.0
void printf_string(void (*putc)(char) , char *str , char format_min_length , char format_justify_left)
struct printf_format_string printf_string::format
char printf_string::format_justify_left
char printf_string::format_min_length
signed char printf_string::len
signed char printf_string::padding
void (*printf_string::putc)(char)
char *printf_string::str
char *printf_string::str#10 // str zp[2]:9 1001.0
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
char printf_uint::format_min_length
char printf_uint::format_radix
char printf_uint::format_radix#4 // reg byte x 333.6666666666667
char printf_uint::format_sign_always
char printf_uint::format_upper_case
char printf_uint::format_zero_padding
void (*printf_uint::putc)(char)
unsigned int printf_uint::uvalue
unsigned int printf_uint::uvalue#1 // uvalue zp[2]:4 202.0
unsigned int printf_uint::uvalue#3 // uvalue zp[2]:4 202.0
unsigned int printf_uint::uvalue#4 // uvalue zp[2]:4 601.5
__constant char s2[3] = ". "
__constant char s3[2] = "
"
__constant char s4[5] = "ok! "
char textcolor(char color)
char textcolor::color
char textcolor::color#4 // reg byte a 1001.0
char textcolor::old
char textcolor::return
void utoa(unsigned int value , char *buffer , char radix)
char utoa::$10 // reg byte a 200002.0
char utoa::$11 // reg byte x 20002.0
char utoa::$4 // reg byte a 200002.0
char *utoa::buffer
char *utoa::buffer#11 // buffer zp[2]:12 28000.4
char *utoa::buffer#14 // buffer zp[2]:12 150001.5
char *utoa::buffer#3 // buffer zp[2]:12 20002.0
char *utoa::buffer#4 // buffer zp[2]:12 200002.0
char utoa::digit
char utoa::digit#1 // digit zp[1]:11 200002.0
char utoa::digit#2 // digit zp[1]:11 26666.933333333334
unsigned int utoa::digit_value
unsigned int utoa::digit_value#0 // digit_value zp[2]:31 60000.600000000006
unsigned int *utoa::digit_values
unsigned int *utoa::digit_values#8 // digit_values zp[2]:9 5882.411764705882
char utoa::max_digits
char utoa::max_digits#7 // max_digits zp[1]:8 5882.411764705882
char utoa::radix
char utoa::radix#0 // reg byte x 10251.25
char utoa::started
char utoa::started#2 // reg byte x 42857.57142857143
char utoa::started#4 // reg byte x 100001.0
unsigned int utoa::value
unsigned int utoa::value#0 // value zp[2]:4 100001.0
unsigned int utoa::value#1 // value zp[2]:4 1571.7142857142858
unsigned int utoa::value#2 // value zp[2]:4 51250.625
unsigned int utoa::value#6 // value zp[2]:4 150001.5
unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
char *utoa_append::buffer
char *utoa_append::buffer#0 // buffer zp[2]:12 137500.25
char utoa_append::digit
char utoa_append::digit#1 // reg byte x 1.00000001E8
char utoa_append::digit#2 // reg byte x 1.005000015E8
unsigned int utoa_append::return
unsigned int utoa_append::return#0 // return zp[2]:4 200002.0
unsigned int utoa_append::sub
unsigned int utoa_append::sub#0 // sub zp[2]:31 3.33500005E7
unsigned int utoa_append::value
unsigned int utoa_append::value#0 // value zp[2]:4 366667.3333333334
unsigned int utoa_append::value#1 // value zp[2]:4 2.00000002E8
unsigned int utoa_append::value#2 // value zp[2]:4 5.018333416666667E7

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
zp[2]:2 [ memchr::ptr#2 memchr::ptr#1 memchr::return#2 memchr::return#8 memchr::return#3 main::ptr#0 memchr::return#4 main::ptr2#0 assert_uint::actual#0 assert_ptr::actual#0 ]
reg byte a [ textcolor::color#4 ]
zp[2]:4 [ printf_uint::uvalue#4 printf_uint::uvalue#3 printf_uint::uvalue#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_str::putc#16 memchr::n#3 clrscr::line_text#5 clrscr::line_text#1 ]
reg byte x [ printf_uint::format_radix#4 ]
zp[2]:6 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
reg byte x [ memset::c#4 memset::c#1 ]
zp[1]:8 [ utoa::max_digits#7 memchr::c#4 ]
zp[2]:9 [ utoa::digit_values#8 printf_str::s#15 printf_str::s#16 printf_str::s#2 printf_str::s#0 printf_string::str#10 memchr::i#2 memchr::i#1 clrscr::line_cols#5 clrscr::line_cols#1 ]
zp[1]:11 [ utoa::digit#2 utoa::digit#1 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:12 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:14 [ conio_cursor_x ]
zp[1]:15 [ conio_cursor_y ]
zp[2]:16 [ conio_line_text ]
zp[2]:18 [ conio_line_color ]
zp[1]:20 [ conio_textcolor ]
reg byte a [ cputc::c#0 ]
zp[2]:21 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:23 [ gotoxy::$8 ]
zp[2]:25 [ gotoxy::$5 ]
reg byte a [ printf_str::c#1 ]
reg byte x [ utoa::radix#0 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
zp[2]:27 [ memcpy::src_end#0 ]
zp[2]:29 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte a [ utoa::$4 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:31 [ utoa::digit_value#0 utoa_append::sub#0 ]
mem[12] [ printf_buffer ]
