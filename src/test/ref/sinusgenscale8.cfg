@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call sin8u_table 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return
sin8u_table: scope:[sin8u_table]  from main::@1
  [9] phi()
  [10] call div16u 
  [11] (word) div16u::return#2 ← (word) div16u::return#0
  to:sin8u_table::@2
sin8u_table::@2: scope:[sin8u_table]  from sin8u_table
  [12] (word) sin8u_table::step#0 ← (word) div16u::return#2
  [13] call print_str 
  to:sin8u_table::@3
sin8u_table::@3: scope:[sin8u_table]  from sin8u_table::@2
  [14] (word) print_word::w#1 ← (word) sin8u_table::step#0
  [15] call print_word 
  to:sin8u_table::@4
sin8u_table::@4: scope:[sin8u_table]  from sin8u_table::@3
  [16] phi()
  [17] call print_str 
  to:sin8u_table::@5
sin8u_table::@5: scope:[sin8u_table]  from sin8u_table::@4
  [18] phi()
  [19] call print_byte 
  to:sin8u_table::@6
sin8u_table::@6: scope:[sin8u_table]  from sin8u_table::@5
  [20] phi()
  [21] call print_str 
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table::@6
  [22] phi()
  [23] call print_byte 
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  [24] phi()
  [25] call print_str 
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  [26] phi()
  [27] call print_byte 
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  [28] phi()
  [29] call print_str 
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  [30] phi()
  [31] call print_byte 
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  [32] phi()
  [33] call print_ln 
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@12 sin8u_table::@23
  [34] (word) sin8u_table::i#10 ← phi( sin8u_table::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 sin8u_table::@23/(word) sin8u_table::i#1 )
  [34] (byte*) sin8u_table::sintab#2 ← phi( sin8u_table::@12/(const byte[$14]) main::sintab#0 sin8u_table::@23/(byte*) sin8u_table::sintab#1 )
  [34] (word) sin8u_table::x#10 ← phi( sin8u_table::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 sin8u_table::@23/(word) sin8u_table::x#1 )
  [35] (word) sin8s::x#2 ← (word) sin8u_table::x#10
  [36] call sin8s 
  [37] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@1
  [38] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2
  [39] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0
  [40] call mul8su 
  [41] (signed word) mul8su::return#2 ← (signed word)(word) mul8su::m#2
  to:sin8u_table::@14
sin8u_table::@14: scope:[sin8u_table]  from sin8u_table::@13
  [42] (signed word) sin8u_table::sinx_sc#0 ← (signed word) mul8su::return#2
  [43] (byte~) sin8u_table::$21 ← > (signed word) sin8u_table::sinx_sc#0
  [44] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$21
  [45] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0
  [46] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2
  [47] (byte*~) print_char_cursor#126 ← (byte*) print_line_cursor#1
  [48] call print_str 
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@14
  [49] (word) print_word::w#2 ← (word) sin8u_table::x#10
  [50] call print_word 
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  [51] phi()
  [52] call print_str 
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  [53] (signed byte) print_sbyte::b#1 ← (signed byte) sin8u_table::sinx#0
  [54] call print_sbyte 
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  [55] phi()
  [56] call print_str 
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@18
  [57] (signed word) print_sword::w#1 ← (signed word) sin8u_table::sinx_sc#0
  [58] call print_sword 
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  [59] phi()
  [60] call print_str 
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  [61] (byte) print_byte::b#7 ← (byte) sin8u_table::sinx_tr#0
  [62] call print_byte 
  to:sin8u_table::@22
sin8u_table::@22: scope:[sin8u_table]  from sin8u_table::@21
  [63] phi()
  [64] call print_ln 
  to:sin8u_table::@23
sin8u_table::@23: scope:[sin8u_table]  from sin8u_table::@22
  [65] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0
  [66] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10
  [67] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1
  to:sin8u_table::@return
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@23
  [68] return 
  to:@return
print_ln: scope:[print_ln]  from sin8u_table::@12 sin8u_table::@22
  [69] (byte*) print_line_cursor#23 ← phi( sin8u_table::@12/((byte*))(word/signed word/dword/signed dword) $400 sin8u_table::@22/(byte*) print_line_cursor#1 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [70] (byte*) print_line_cursor#12 ← phi( print_ln/(byte*) print_line_cursor#23 print_ln::@1/(byte*) print_line_cursor#1 )
  [71] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [72] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#18) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [73] return 
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@2 print_word print_word::@1 sin8u_table::@11 sin8u_table::@21 sin8u_table::@5 sin8u_table::@7 sin8u_table::@9
  [74] (byte*) print_char_cursor#100 ← phi( print_sbyte::@2/(byte*) print_char_cursor#18 print_word/(byte*) print_char_cursor#99 print_word::@1/(byte*) print_char_cursor#18 sin8u_table::@9/(byte*) print_char_cursor#2 sin8u_table::@11/(byte*) print_char_cursor#2 sin8u_table::@21/(byte*) print_char_cursor#2 sin8u_table::@5/(byte*) print_char_cursor#2 sin8u_table::@7/(byte*) print_char_cursor#2 )
  [74] (byte) print_byte::b#8 ← phi( print_sbyte::@2/(byte~) print_byte::b#10 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 sin8u_table::@9/(const byte) sin8u_table::amplitude#0 sin8u_table::@11/(const byte) sin8u_table::mid#0 sin8u_table::@21/(byte) print_byte::b#7 sin8u_table::@5/(const byte) sin8u_table::min#0 sin8u_table::@7/(const byte) sin8u_table::max#0 )
  [75] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [76] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [77] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [78] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [79] (byte) print_char::ch#4 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [80] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [81] return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3 print_sword::@2
  [82] (byte*) print_char_cursor#64 ← phi( print_byte/(byte*) print_char_cursor#100 print_byte::@1/(byte*) print_char_cursor#18 print_sbyte::@1/(byte*) print_char_cursor#2 print_sbyte::@3/(byte*) print_char_cursor#2 print_sword::@2/(byte*) print_char_cursor#2 )
  [82] (byte) print_char::ch#5 ← phi( print_byte/(byte) print_char::ch#3 print_byte::@1/(byte) print_char::ch#4 print_sbyte::@1/(byte) '-' print_sbyte::@3/(byte) ' ' print_sword::@2/(byte) '-' )
  [83] *((byte*) print_char_cursor#64) ← (byte) print_char::ch#5
  [84] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#64
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [85] return 
  to:@return
print_str: scope:[print_str]  from sin8u_table::@10 sin8u_table::@14 sin8u_table::@16 sin8u_table::@18 sin8u_table::@2 sin8u_table::@20 sin8u_table::@4 sin8u_table::@6 sin8u_table::@8
  [86] (byte*) print_char_cursor#105 ← phi( sin8u_table::@10/(byte*) print_char_cursor#18 sin8u_table::@14/(byte*~) print_char_cursor#126 sin8u_table::@16/(byte*) print_char_cursor#18 sin8u_table::@18/(byte*) print_char_cursor#18 sin8u_table::@20/(byte*) print_char_cursor#18 sin8u_table::@2/((byte*))(word/signed word/dword/signed dword) $400 sin8u_table::@4/(byte*) print_char_cursor#18 sin8u_table::@6/(byte*) print_char_cursor#18 sin8u_table::@8/(byte*) print_char_cursor#18 )
  [86] (byte*) print_str::str#12 ← phi( sin8u_table::@10/(const string) sin8u_table::str4 sin8u_table::@14/(const string) sin8u_table::str5 sin8u_table::@16/(const string) sin8u_table::str6 sin8u_table::@18/(const string) sin8u_table::str7 sin8u_table::@20/(const string) sin8u_table::str8 sin8u_table::@2/(const string) sin8u_table::str sin8u_table::@4/(const string) sin8u_table::str1 sin8u_table::@6/(const string) sin8u_table::str2 sin8u_table::@8/(const string) sin8u_table::str3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [87] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#105 print_str::@2/(byte*) print_char_cursor#1 )
  [87] (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@2/(byte*) print_str::str#0 )
  [88] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [89] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [90] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10)
  [91] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [92] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10
  to:print_str::@1
print_sword: scope:[print_sword]  from sin8u_table::@19
  [93] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword
  [94] phi()
  [95] call print_char 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@2
  [96] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1
  to:print_sword::@1
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@3
  [97] (byte*) print_char_cursor#94 ← phi( print_sword/(byte*) print_char_cursor#2 print_sword::@3/(byte*) print_char_cursor#18 )
  [97] (signed word) print_sword::w#3 ← phi( print_sword/(signed word) print_sword::w#1 print_sword::@3/(signed word) print_sword::w#0 )
  [98] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3
  [99] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@1
  [100] return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1 sin8u_table::@15 sin8u_table::@3
  [101] (byte*) print_char_cursor#99 ← phi( print_sword::@1/(byte*) print_char_cursor#94 sin8u_table::@15/(byte*) print_char_cursor#2 sin8u_table::@3/(byte*) print_char_cursor#2 )
  [101] (word) print_word::w#3 ← phi( print_sword::@1/(word~) print_word::w#5 sin8u_table::@15/(word) print_word::w#2 sin8u_table::@3/(word) print_word::w#1 )
  [102] (byte) print_byte::b#1 ← > (word) print_word::w#3
  [103] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [104] (byte) print_byte::b#2 ← < (word) print_word::w#3
  [105] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [106] return 
  to:@return
print_sbyte: scope:[print_sbyte]  from sin8u_table::@17
  [107] if((signed byte) print_sbyte::b#1<(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  [108] phi()
  [109] call print_char 
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@3 print_sbyte::@4
  [110] (signed byte) print_sbyte::b#4 ← phi( print_sbyte::@4/(signed byte) print_sbyte::b#0 print_sbyte::@3/(signed byte) print_sbyte::b#1 )
  [111] (byte~) print_byte::b#10 ← (byte)(signed byte) print_sbyte::b#4
  [112] call print_byte 
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@2
  [113] return 
  to:@return
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  [114] phi()
  [115] call print_char 
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@1
  [116] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1
  to:print_sbyte::@2
mul8su: scope:[mul8su]  from sin8u_table::@13
  [117] (byte~) mul8u::a#8 ← (byte)(signed byte) mul8su::a#0
  [118] call mul8u 
  [119] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mul8su::@3
mul8su::@3: scope:[mul8su]  from mul8su
  [120] (word) mul8su::m#0 ← (word) mul8u::return#2
  [121] if((signed byte) mul8su::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8su::@1
  to:mul8su::@2
mul8su::@2: scope:[mul8su]  from mul8su::@3
  [122] (byte~) mul8su::$7 ← > (word) mul8su::m#0
  [123] (byte~) mul8su::$10 ← (byte~) mul8su::$7 - ((byte))(const byte) mul8su::b#0
  [124] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$10
  to:mul8su::@1
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@3
  [125] (word) mul8su::m#2 ← phi( mul8su::@2/(word) mul8su::m#1 mul8su::@3/(word) mul8su::m#0 )
  to:mul8su::@return
mul8su::@return: scope:[mul8su]  from mul8su::@1
  [126] return 
  to:@return
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  [127] (byte) mul8u::a#6 ← phi( mul8su/(byte~) mul8u::a#8 mulu8_sel/(byte) mul8u::a#2 )
  [127] (byte) mul8u::b#2 ← phi( mul8su/((byte))(const byte) mul8su::b#0 mulu8_sel/(byte) mul8u::b#1 )
  [128] (word) mul8u::mb#0 ← ((word)) (byte) mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [129] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [129] (word) mul8u::res#2 ← phi( mul8u/(byte/signed byte/word/signed word/dword/signed dword) 0 mul8u::@3/(word) mul8u::res#6 )
  [129] (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@3/(byte) mul8u::a#0 )
  [130] if((byte) mul8u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [131] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [132] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1
  [133] if((byte~) mul8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [134] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [135] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [136] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [137] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:mul8u::@1
sin8s: scope:[sin8s]  from sin8u_table::@1
  [138] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [139] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [140] (byte) sin8s::isUpper#10 ← phi( sin8s/(byte/signed byte/word/signed word/dword/signed dword) 0 sin8s::@5/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [140] (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#2 sin8s::@5/(word) sin8s::x#0 )
  [141] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [142] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [143] (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#1 )
  [144] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3
  [145] (byte) sin8s::x1#0 ← > (word~) sin8s::$4
  [146] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  [147] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  [148] call mulu8_sel 
  [149] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [150] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  [151] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  [152] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0
  [153] call mulu8_sel 
  [154] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [155] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1
  [156] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  [157] call mulu8_sel 
  [158] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [159] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  [160] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0
  [161] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0
  [162] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0
  [163] call mulu8_sel 
  [164] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [165] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  [166] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  [167] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0
  [168] call mulu8_sel 
  [169] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [170] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  [171] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [172] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0
  [173] if((byte) sin8s::usinx#1<(byte/word/signed word/dword/signed dword) $80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [174] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [175] (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  [176] if((byte) sin8s::isUpper#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [177] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [178] (signed byte) sin8s::return#0 ← phi( sin8s::@14/(signed byte~) sin8s::return#5 sin8s::@8/(signed byte) sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [179] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [180] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [181] (byte) mulu8_sel::select#5 ← phi( sin8s::@9/(byte/signed byte/word/signed word/dword/signed dword) 1 sin8s::@10/(byte/signed byte/word/signed word/dword/signed dword) 1 sin8s::@11/(byte/signed byte/word/signed word/dword/signed dword) 0 sin8s::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 sin8s::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [181] (byte) mulu8_sel::v2#5 ← phi( sin8s::@9/(byte) mulu8_sel::v2#1 sin8s::@10/(const byte) sin8s::DIV_6#0 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 )
  [181] (byte) mulu8_sel::v1#5 ← phi( sin8s::@9/(byte) mulu8_sel::v1#1 sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 )
  [182] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
  [183] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5
  [184] call mul8u 
  [185] (word) mul8u::return#3 ← (word) mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [186] (word~) mulu8_sel::$0 ← (word) mul8u::return#3
  [187] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  [188] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [189] return 
  to:@return
div16u: scope:[div16u]  from sin8u_table
  [190] phi()
  [191] call divr16u 
  [192] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [193] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [194] return 
  to:@return
divr16u: scope:[divr16u]  from div16u
  [195] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [196] (byte) divr16u::i#2 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(byte) divr16u::i#1 )
  [196] (word) divr16u::quotient#3 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::return#0 )
  [196] (word) divr16u::dividend#2 ← phi( divr16u/(const word) PI2_u4f12#0 divr16u::@3/(word) divr16u::dividend#0 )
  [196] (word) divr16u::rem#4 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::rem#10 )
  [197] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [198] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  [199] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80
  [200] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [201] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [202] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [203] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [204] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [205] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [206] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [207] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [208] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [208] (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  [209] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [210] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [211] (word) rem16u#1 ← (word) divr16u::rem#10
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [212] return 
  to:@return
print_cls: scope:[print_cls]  from main
  [213] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [214] (byte*) print_cls::sc#2 ← phi( print_cls/((byte*))(word/signed word/dword/signed dword) $400 print_cls::@1/(byte*) print_cls::sc#1 )
  [215] *((byte*) print_cls::sc#2) ← (byte) ' '
  [216] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [217] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) $400+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [218] return 
  to:@return
