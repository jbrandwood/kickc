Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start::@1
  (byte) idx#15 ← phi( __start::@1/(byte) idx#16 )
  (byte*) print::m#0 ← (const byte*) msg1
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) idx#8 ← phi( main/(byte) idx#4 )
  (byte) idx#0 ← (byte) idx#8
  (byte*) print::m#1 ← (const byte*) msg2
  call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) idx#9 ← phi( main::@1/(byte) idx#4 )
  (byte) idx#1 ← (byte) idx#9
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) idx#10 ← phi( main::@2/(byte) idx#1 )
  (byte) idx#2 ← (byte) idx#10
  return 
  to:@return

(void()) print((byte*) print::m)
print: scope:[print]  from main main::@1
  (byte) idx#11 ← phi( main/(byte) idx#15 main::@1/(byte) idx#0 )
  (byte*) print::m#2 ← phi( main/(byte*) print::m#0 main::@1/(byte*) print::m#1 )
  (byte*~) print::$0 ← (byte*) print::m#2 + (number) 2
  *((const nomodify byte*) SCREEN + (byte) idx#11) ← *((byte*~) print::$0)
  (byte) idx#3 ← ++ (byte) idx#11
  to:print::@return
print::@return: scope:[print]  from print
  (byte) idx#12 ← phi( print/(byte) idx#3 )
  (byte) idx#4 ← (byte) idx#12
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte) idx#5 ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte) idx#16 ← phi( __start::__init1/(byte) idx#5 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte) idx#13 ← phi( __start::@1/(byte) idx#2 )
  (byte) idx#6 ← (byte) idx#13
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (byte) idx#14 ← phi( __start::@2/(byte) idx#6 )
  (byte) idx#7 ← (byte) idx#14
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#2
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) msg1[]  = { (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd' }
(const byte*) msg2[]  = { (byte) '1', (byte) '2', (byte) '3', (byte) '4' }
(void()) print((byte*) print::m)
(byte*~) print::$0
(label) print::@return
(byte*) print::m
(byte*) print::m#0
(byte*) print::m#1
(byte*) print::m#2

Adding number conversion cast (unumber) 2 in (byte*~) print::$0 ← (byte*) print::m#2 + (number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias idx#0 = idx#8 
Alias idx#1 = idx#9 idx#10 idx#2 
Alias idx#12 = idx#3 idx#4 
Alias idx#16 = idx#5 
Alias idx#13 = idx#6 idx#14 idx#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#15 (byte) idx#16
Identical Phi Values (byte) idx#0 (byte) idx#12
Identical Phi Values (byte) idx#1 (byte) idx#12
Identical Phi Values (byte) idx#13 (byte) idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte*) print::m#0 = msg1
Constant (const byte*) print::m#1 = msg2
Constant (const byte) idx#16 = 0
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [10] *((const nomodify byte*) SCREEN + (byte) idx#11) ← *((byte*~) print::$0)  -- *(print::m#2 + 2)
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable (byte*~) print::$0 and assignment [4] (byte*~) print::$0 ← (byte*) print::m#2 + (byte) 2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte*) print::m#0
Inlining constant with var siblings (const byte*) print::m#1
Inlining constant with var siblings (const byte) idx#16
Constant inlined print::m#1 = (const byte*) msg2
Constant inlined print::m#0 = (const byte*) msg1
Constant inlined idx#16 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [main] to print:1 print:3 

Created 2 initial phi equivalence classes
Coalesced [2] idx#17 ← idx#12
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

(void()) print((byte*) print::m)
print: scope:[print]  from main main::@1
  [5] (byte) idx#11 ← phi( main/(byte) 0 main::@1/(byte) idx#12 )
  [5] (byte*) print::m#2 ← phi( main/(const byte*) msg1 main::@1/(const byte*) msg2 )
  [6] *((const nomodify byte*) SCREEN + (byte) idx#11) ← *((byte*) print::m#2 + (byte) 2)
  [7] (byte) idx#12 ← ++ (byte) idx#11
  to:print::@return
print::@return: scope:[print]  from print
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) idx
(byte) idx#11 12.0
(byte) idx#12 3.25
(void()) main()
(void()) print((byte*) print::m)
(byte*) print::m
(byte*) print::m#2 11.0

Initial phi equivalence classes
[ print::m#2 ]
[ idx#11 idx#12 ]
Complete equivalence classes
[ print::m#2 ]
[ idx#11 idx#12 ]
Allocated zp[2]:2 [ print::m#2 ]
Allocated zp[1]:4 [ idx#11 idx#12 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests optimizing derefs of *(ptr+b) to ptr[b]
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx = 4
  // main
main: {
    // [1] call print 
    // [5] phi from main to print [phi:main->print]
  print_from_main:
    // [5] phi (byte) idx#11 = (byte) 0 [phi:main->print#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [5] phi (byte*) print::m#2 = (const byte*) msg1 [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.m
    lda #>msg1
    sta.z print.m+1
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print 
    // [5] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [5] phi (byte) idx#11 = (byte) idx#12 [phi:main::@1->print#0] -- register_copy 
    // [5] phi (byte*) print::m#2 = (const byte*) msg2 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z print.m
    lda #>msg2
    sta.z print.m+1
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print
// print(byte* zp(2) m)
print: {
    .label m = 2
    // [6] *((const nomodify byte*) SCREEN + (byte) idx#11) ← *((byte*) print::m#2 + (byte) 2) -- pbuc1_derefidx_vbuz1=pbuz2_derefidx_vbuc2 
    ldx.z idx
    ldy #2
    lda (m),y
    sta SCREEN,x
    // [7] (byte) idx#12 ← ++ (byte) idx#11 -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __breturn
    // print::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data
  msg1: .byte 'a', 'b', 'c', 'd'
  msg2: .byte '1', '2', '3', '4'

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((const nomodify byte*) SCREEN + (byte) idx#11) ← *((byte*) print::m#2 + (byte) 2) [ idx#11 ] ( print:1 [ idx#11 ] { }  print:3 [ idx#11 ] { { idx#11 = idx#12 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ idx#11 idx#12 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ idx#11 idx#12 ]
Statement [6] *((const nomodify byte*) SCREEN + (byte) idx#11) ← *((byte*) print::m#2 + (byte) 2) [ idx#11 ] ( print:1 [ idx#11 ] { }  print:3 [ idx#11 ] { { idx#11 = idx#12 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ print::m#2 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ idx#11 idx#12 ] : zp[1]:4 , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 15.25: zp[1]:4 [ idx#11 idx#12 ] 
Uplift Scope [print] 11: zp[2]:2 [ print::m#2 ] 
Uplift Scope [main] 

Uplifting [] best 69 combination reg byte x [ idx#11 idx#12 ] 
Uplifting [print] best 69 combination zp[2]:2 [ print::m#2 ] 
Uplifting [main] best 69 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests optimizing derefs of *(ptr+b) to ptr[b]
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] call print 
    // [5] phi from main to print [phi:main->print]
  print_from_main:
    // [5] phi (byte) idx#11 = (byte) 0 [phi:main->print#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte*) print::m#2 = (const byte*) msg1 [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.m
    lda #>msg1
    sta.z print.m+1
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print 
    // [5] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [5] phi (byte) idx#11 = (byte) idx#12 [phi:main::@1->print#0] -- register_copy 
    // [5] phi (byte*) print::m#2 = (const byte*) msg2 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z print.m
    lda #>msg2
    sta.z print.m+1
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print
// print(byte* zp(2) m)
print: {
    .label m = 2
    // [6] *((const nomodify byte*) SCREEN + (byte) idx#11) ← *((byte*) print::m#2 + (byte) 2) -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuc2 
    ldy #2
    lda (m),y
    sta SCREEN,x
    // [7] (byte) idx#12 ← ++ (byte) idx#11 -- vbuxx=_inc_vbuxx 
    inx
    jmp __breturn
    // print::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data
  msg1: .byte 'a', 'b', 'c', 'd'
  msg2: .byte '1', '2', '3', '4'

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction print_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(byte) idx
(byte) idx#11 reg byte x 12.0
(byte) idx#12 reg byte x 3.25
(void()) main()
(label) main::@1
(label) main::@return
(const byte*) msg1[]  = { (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd' }
(const byte*) msg2[]  = { (byte) '1', (byte) '2', (byte) '3', (byte) '4' }
(void()) print((byte*) print::m)
(label) print::@return
(byte*) print::m
(byte*) print::m#2 m zp[2]:2 11.0

zp[2]:2 [ print::m#2 ]
reg byte x [ idx#11 idx#12 ]


FINAL ASSEMBLER
Score: 60

  // File Comments
// Tests optimizing derefs of *(ptr+b) to ptr[b]
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // print(msg1)
    // [1] call print 
    // [5] phi from main to print [phi:main->print]
    // [5] phi (byte) idx#11 = (byte) 0 [phi:main->print#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte*) print::m#2 = (const byte*) msg1 [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.m
    lda #>msg1
    sta.z print.m+1
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print(msg2)
    // [3] call print 
    // [5] phi from main::@1 to print [phi:main::@1->print]
    // [5] phi (byte) idx#11 = (byte) idx#12 [phi:main::@1->print#0] -- register_copy 
    // [5] phi (byte*) print::m#2 = (const byte*) msg2 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z print.m
    lda #>msg2
    sta.z print.m+1
    jsr print
    // main::@return
    // }
    // [4] return 
    rts
}
  // print
// print(byte* zp(2) m)
print: {
    .label m = 2
    // SCREEN[idx++] = *(m+2)
    // [6] *((const nomodify byte*) SCREEN + (byte) idx#11) ← *((byte*) print::m#2 + (byte) 2) -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuc2 
    ldy #2
    lda (m),y
    sta SCREEN,x
    // SCREEN[idx++] = *(m+2);
    // [7] (byte) idx#12 ← ++ (byte) idx#11 -- vbuxx=_inc_vbuxx 
    inx
    // print::@return
    // }
    // [8] return 
    rts
}
  // File Data
  msg1: .byte 'a', 'b', 'c', 'd'
  msg2: .byte '1', '2', '3', '4'

