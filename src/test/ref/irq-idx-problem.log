Resolved forward reference table_driven_irq to interrupt(KERNEL_MIN)(void()) table_driven_irq()
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_ALL#0 ← (byte/signed byte/word/signed word/dword/signed dword) $30
  (byte) PROCPORT_RAM_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $35
  (byte) PROCPORT_RAM_CHARROM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $31
  (byte) PROCPORT_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $36
  (byte) PROCPORT_BASIC_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $37
  (byte*) CHARGEN#0 ← ((byte*)) (word/dword/signed dword) $d000
  (word) SPRITE_PTRS#0 ← (word/signed word/dword/signed dword) $3f8
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) $d000
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) $d001
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (word/dword/signed dword) $d010
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) $d012
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d015
  (byte*) SPRITES_EXPAND_Y#0 ← ((byte*)) (word/dword/signed dword) $d017
  (byte*) SPRITES_PRIORITY#0 ← ((byte*)) (word/dword/signed dword) $d01b
  (byte*) SPRITES_MC#0 ← ((byte*)) (word/dword/signed dword) $d01c
  (byte*) SPRITES_EXPAND_X#0 ← ((byte*)) (word/dword/signed dword) $d01d
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) $d020
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL1#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL2#0 ← ((byte*)) (word/dword/signed dword) $d022
  (byte*) BGCOL3#0 ← ((byte*)) (word/dword/signed dword) $d023
  (byte*) BGCOL4#0 ← ((byte*)) (word/dword/signed dword) $d024
  (byte*) SPRITES_MC1#0 ← ((byte*)) (word/dword/signed dword) $d025
  (byte*) SPRITES_MC2#0 ← ((byte*)) (word/dword/signed dword) $d026
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) $d027
  (byte*) VIC_CONTROL#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte*) D011#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte) VIC_RST8#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte) VIC_ECM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte) VIC_BMM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte*) D016#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte) VIC_MCM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_CSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) VIC_MEMORY#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) LIGHTPEN_X#0 ← ((byte*)) (word/dword/signed dword) $d013
  (byte*) LIGHTPEN_Y#0 ← ((byte*)) (word/dword/signed dword) $d014
  (byte*) IRQ_STATUS#0 ← ((byte*)) (word/dword/signed dword) $d019
  (byte*) IRQ_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d01a
  (byte) IRQ_RASTER#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) IRQ_COLLISION_BG#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) IRQ_COLLISION_SPRITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) IRQ_LIGHTPEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) COLS#0 ← ((byte*)) (word/dword/signed dword) $d800
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dc00
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dc01
  (byte*) CIA1_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc02
  (byte*) CIA1_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc03
  (byte*) CIA1_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dc0d
  (byte) CIA_INTERRUPT_CLEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dd00
  (byte*) CIA2_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dd01
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd02
  (byte*) CIA2_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd03
  (byte*) CIA2_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dd0d
  (void()**) KERNEL_IRQ#0 ← ((void()**)) (word/signed word/dword/signed dword) $314
  (void()**) HARDWARE_IRQ#0 ← ((void()**)) (word/dword/signed dword) $fffe
  (byte) BLACK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK#0 ← (byte/signed byte/word/signed word/dword/signed dword) $a
  (byte) DARK_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $b
  (byte) GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $c
  (byte) LIGHT_GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $d
  (byte) LIGHT_BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $e
  (byte) LIGHT_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f
  to:@4
@4: scope:[]  from @begin
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  to:@5
main: scope:[main]  from @6
  asm { sei  }
  *((byte*) CIA1_INTERRUPT#0) ← (byte) CIA_INTERRUPT_CLEAR#0
  *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f
  *((byte*) RASTER#0) ← (byte/signed byte/word/signed word/dword/signed dword) $60
  *((byte*) IRQ_ENABLE#0) ← (byte) IRQ_RASTER#0
  *((byte*) IRQ_STATUS#0) ← (byte) IRQ_RASTER#0
  (void()*~) main::$0 ← & interrupt(KERNEL_MIN)(void()) table_driven_irq()
  *((void()**) KERNEL_IRQ#0) ← (void()*~) main::$0
  asm { cli  }
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@5: scope:[]  from @4
  (byte*) VIC_BASE#0 ← ((byte*)) (word/dword/signed dword) $d000
  (byte) VIC_SIZE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $30
  (byte) IRQ_CHANGE_NEXT#0 ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  (byte[]) IRQ_CHANGE_IDX#0 ← { (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $21, (byte) IRQ_CHANGE_NEXT#0, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $21, (byte) IRQ_CHANGE_NEXT#0, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $21, (byte) IRQ_CHANGE_NEXT#0, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $21, (byte) IRQ_CHANGE_NEXT#0 }
  (byte[]) IRQ_CHANGE_VAL#0 ← { (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $63, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $80, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/word/signed word/dword/signed dword) $83, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $60 }
  (byte) irq_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@6
table_driven_irq: scope:[table_driven_irq]  from
  (byte) irq_idx#6 ← phi( @6/(byte) irq_idx#9 )
  to:table_driven_irq::@1
table_driven_irq::@1: scope:[table_driven_irq]  from table_driven_irq table_driven_irq::@8
  (byte) irq_idx#4 ← phi( table_driven_irq/(byte) irq_idx#6 table_driven_irq::@8/(byte) irq_idx#7 )
  (byte) table_driven_irq::idx#0 ← *((byte[]) IRQ_CHANGE_IDX#0 + (byte) irq_idx#4)
  (byte) table_driven_irq::val#0 ← *((byte[]) IRQ_CHANGE_VAL#0 + (byte) irq_idx#4)
  (byte) irq_idx#1 ← ++ (byte) irq_idx#4
  (bool~) table_driven_irq::$0 ← (byte) table_driven_irq::idx#0 < (byte) VIC_SIZE#0
  if((bool~) table_driven_irq::$0) goto table_driven_irq::@2
  to:table_driven_irq::@9
table_driven_irq::@2: scope:[table_driven_irq]  from table_driven_irq::@1
  (byte) irq_idx#11 ← phi( table_driven_irq::@1/(byte) irq_idx#1 )
  (byte) table_driven_irq::idx#1 ← phi( table_driven_irq::@1/(byte) table_driven_irq::idx#0 )
  (byte) table_driven_irq::val#1 ← phi( table_driven_irq::@1/(byte) table_driven_irq::val#0 )
  *((byte*) VIC_BASE#0 + (byte) table_driven_irq::idx#1) ← (byte) table_driven_irq::val#1
  to:table_driven_irq::@8
table_driven_irq::@9: scope:[table_driven_irq]  from table_driven_irq::@1
  (byte) irq_idx#13 ← phi( table_driven_irq::@1/(byte) irq_idx#1 )
  (byte) table_driven_irq::val#4 ← phi( table_driven_irq::@1/(byte) table_driven_irq::val#0 )
  (byte) table_driven_irq::idx#2 ← phi( table_driven_irq::@1/(byte) table_driven_irq::idx#0 )
  (byte/signed word/word/dword/signed dword~) table_driven_irq::$1 ← (byte) VIC_SIZE#0 + (byte/signed byte/word/signed word/dword/signed dword) 8
  (bool~) table_driven_irq::$2 ← (byte) table_driven_irq::idx#2 < (byte/signed word/word/dword/signed dword~) table_driven_irq::$1
  if((bool~) table_driven_irq::$2) goto table_driven_irq::@3
  to:table_driven_irq::@10
table_driven_irq::@3: scope:[table_driven_irq]  from table_driven_irq::@9
  (byte) irq_idx#12 ← phi( table_driven_irq::@9/(byte) irq_idx#13 )
  (byte) table_driven_irq::val#2 ← phi( table_driven_irq::@9/(byte) table_driven_irq::val#4 )
  (byte) table_driven_irq::idx#3 ← phi( table_driven_irq::@9/(byte) table_driven_irq::idx#2 )
  (word/signed word/dword/signed dword~) table_driven_irq::$5 ← (byte) table_driven_irq::idx#3 + (word/signed word/dword/signed dword) $3f8
  (word/signed word/dword/signed dword~) table_driven_irq::$6 ← (word/signed word/dword/signed dword~) table_driven_irq::$5 - (byte) VIC_SIZE#0
  *((byte*) SCREEN#0 + (word/signed word/dword/signed dword~) table_driven_irq::$6) ← (byte) table_driven_irq::val#2
  to:table_driven_irq::@8
table_driven_irq::@10: scope:[table_driven_irq]  from table_driven_irq::@9
  (byte) irq_idx#10 ← phi( table_driven_irq::@9/(byte) irq_idx#13 )
  (byte) table_driven_irq::val#3 ← phi( table_driven_irq::@9/(byte) table_driven_irq::val#4 )
  *((byte*) IRQ_STATUS#0) ← (byte) IRQ_RASTER#0
  *((byte*) RASTER#0) ← (byte) table_driven_irq::val#3
  (bool~) table_driven_irq::$3 ← (byte) table_driven_irq::val#3 < *((byte*) RASTER#0)
  (bool~) table_driven_irq::$4 ← ! (bool~) table_driven_irq::$3
  if((bool~) table_driven_irq::$4) goto table_driven_irq::@4
  to:table_driven_irq::@11
table_driven_irq::@4: scope:[table_driven_irq]  from table_driven_irq::@10
  (byte) irq_idx#8 ← phi( table_driven_irq::@10/(byte) irq_idx#10 )
  to:table_driven_irq::@return
table_driven_irq::@11: scope:[table_driven_irq]  from table_driven_irq::@10
  (byte) irq_idx#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:table_driven_irq::@return
table_driven_irq::@return: scope:[table_driven_irq]  from table_driven_irq::@11 table_driven_irq::@4 table_driven_irq::@8
  (byte) irq_idx#5 ← phi( table_driven_irq::@11/(byte) irq_idx#2 table_driven_irq::@4/(byte) irq_idx#8 table_driven_irq::@8/(byte) irq_idx#7 )
  (byte) irq_idx#3 ← (byte) irq_idx#5
  return 
  to:@return
table_driven_irq::@8: scope:[table_driven_irq]  from table_driven_irq::@2 table_driven_irq::@3
  (byte) irq_idx#7 ← phi( table_driven_irq::@2/(byte) irq_idx#11 table_driven_irq::@3/(byte) irq_idx#12 )
  if(true) goto table_driven_irq::@1
  to:table_driven_irq::@return
@6: scope:[]  from @5
  (byte) irq_idx#9 ← phi( @5/(byte) irq_idx#0 )
  call main 
  to:@7
@7: scope:[]  from @6
  to:@end
@end: scope:[]  from @7

SYMBOL TABLE SSA
(label) @4
(label) @5
(label) @6
(label) @7
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL1
(byte*) BGCOL1#0
(byte*) BGCOL2
(byte*) BGCOL2#0
(byte*) BGCOL3
(byte*) BGCOL3#0
(byte*) BGCOL4
(byte*) BGCOL4#0
(byte) BLACK
(byte) BLACK#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte) BROWN
(byte) BROWN#0
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) CIA1_INTERRUPT
(byte*) CIA1_INTERRUPT#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_A_DDR#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte*) CIA1_PORT_B_DDR
(byte*) CIA1_PORT_B_DDR#0
(byte*) CIA2_INTERRUPT
(byte*) CIA2_INTERRUPT#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B#0
(byte*) CIA2_PORT_B_DDR
(byte*) CIA2_PORT_B_DDR#0
(byte) CIA_INTERRUPT_CLEAR
(byte) CIA_INTERRUPT_CLEAR#0
(byte*) COLS
(byte*) COLS#0
(byte) CYAN
(byte) CYAN#0
(byte*) D011
(byte*) D011#0
(byte*) D016
(byte*) D016#0
(byte*) D018
(byte*) D018#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte) GREEN
(byte) GREEN#0
(byte) GREY
(byte) GREY#0
(void()**) HARDWARE_IRQ
(void()**) HARDWARE_IRQ#0
(byte[]) IRQ_CHANGE_IDX
(byte[]) IRQ_CHANGE_IDX#0
(byte) IRQ_CHANGE_NEXT
(byte) IRQ_CHANGE_NEXT#0
(byte[]) IRQ_CHANGE_VAL
(byte[]) IRQ_CHANGE_VAL#0
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_BG#0
(byte) IRQ_COLLISION_SPRITE
(byte) IRQ_COLLISION_SPRITE#0
(byte*) IRQ_ENABLE
(byte*) IRQ_ENABLE#0
(byte) IRQ_LIGHTPEN
(byte) IRQ_LIGHTPEN#0
(byte) IRQ_RASTER
(byte) IRQ_RASTER#0
(byte*) IRQ_STATUS
(byte*) IRQ_STATUS#0
(void()**) KERNEL_IRQ
(void()**) KERNEL_IRQ#0
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_X#0
(byte*) LIGHTPEN_Y
(byte*) LIGHTPEN_Y#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte) LIGHT_GREEN
(byte) LIGHT_GREEN#0
(byte) LIGHT_GREY
(byte) LIGHT_GREY#0
(byte) ORANGE
(byte) ORANGE#0
(byte) PINK
(byte) PINK#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte) PROCPORT_BASIC_KERNEL_IO
(byte) PROCPORT_BASIC_KERNEL_IO#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_KERNEL_IO#0
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_ALL#0
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_CHARROM#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte) PURPLE
(byte) PURPLE#0
(byte*) RASTER
(byte*) RASTER#0
(byte) RED
(byte) RED#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_X#0
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_EXPAND_Y#0
(byte*) SPRITES_MC
(byte*) SPRITES_MC#0
(byte*) SPRITES_MC1
(byte*) SPRITES_MC1#0
(byte*) SPRITES_MC2
(byte*) SPRITES_MC2#0
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_PRIORITY#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(word) SPRITE_PTRS
(word) SPRITE_PTRS#0
(byte*) VIC_BASE
(byte*) VIC_BASE#0
(byte) VIC_BMM
(byte) VIC_BMM#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte*) VIC_CONTROL2
(byte*) VIC_CONTROL2#0
(byte) VIC_CSEL
(byte) VIC_CSEL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte) VIC_MCM
(byte) VIC_MCM#0
(byte*) VIC_MEMORY
(byte*) VIC_MEMORY#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte) VIC_RST8
(byte) VIC_RST8#0
(byte) VIC_SIZE
(byte) VIC_SIZE#0
(byte) WHITE
(byte) WHITE#0
(byte) YELLOW
(byte) YELLOW#0
(byte) irq_idx
(byte) irq_idx#0
(byte) irq_idx#1
(byte) irq_idx#10
(byte) irq_idx#11
(byte) irq_idx#12
(byte) irq_idx#13
(byte) irq_idx#2
(byte) irq_idx#3
(byte) irq_idx#4
(byte) irq_idx#5
(byte) irq_idx#6
(byte) irq_idx#7
(byte) irq_idx#8
(byte) irq_idx#9
(void()) main()
(void()*~) main::$0
(label) main::@return
interrupt(KERNEL_MIN)(void()) table_driven_irq()
(bool~) table_driven_irq::$0
(byte/signed word/word/dword/signed dword~) table_driven_irq::$1
(bool~) table_driven_irq::$2
(bool~) table_driven_irq::$3
(bool~) table_driven_irq::$4
(word/signed word/dword/signed dword~) table_driven_irq::$5
(word/signed word/dword/signed dword~) table_driven_irq::$6
(label) table_driven_irq::@1
(label) table_driven_irq::@10
(label) table_driven_irq::@11
(label) table_driven_irq::@2
(label) table_driven_irq::@3
(label) table_driven_irq::@4
(label) table_driven_irq::@8
(label) table_driven_irq::@9
(label) table_driven_irq::@return
(byte) table_driven_irq::idx
(byte) table_driven_irq::idx#0
(byte) table_driven_irq::idx#1
(byte) table_driven_irq::idx#2
(byte) table_driven_irq::idx#3
(byte) table_driven_irq::val
(byte) table_driven_irq::val#0
(byte) table_driven_irq::val#1
(byte) table_driven_irq::val#2
(byte) table_driven_irq::val#3
(byte) table_driven_irq::val#4

Culled Empty Block (label) @7
Successful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not [117] (bool~) table_driven_irq::$4 ← (byte) table_driven_irq::val#3 >= *((byte*) RASTER#0) from [116] (bool~) table_driven_irq::$3 ← (byte) table_driven_irq::val#3 < *((byte*) RASTER#0)
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) table_driven_irq::val#0 = (byte) table_driven_irq::val#1 (byte) table_driven_irq::val#4 (byte) table_driven_irq::val#2 (byte) table_driven_irq::val#3 
Alias (byte) table_driven_irq::idx#0 = (byte) table_driven_irq::idx#1 (byte) table_driven_irq::idx#2 (byte) table_driven_irq::idx#3 
Alias (byte) irq_idx#1 = (byte) irq_idx#11 (byte) irq_idx#13 (byte) irq_idx#12 (byte) irq_idx#10 (byte) irq_idx#8 
Alias (byte) irq_idx#3 = (byte) irq_idx#5 
Alias (byte) irq_idx#0 = (byte) irq_idx#9 
Successful SSA optimization Pass2AliasElimination
Alias (byte) irq_idx#1 = (byte) irq_idx#7 
Successful SSA optimization Pass2AliasElimination
Redundant Phi (byte) irq_idx#6 (byte) irq_idx#0
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) table_driven_irq::$0 [102] if((byte) table_driven_irq::idx#0<(byte) VIC_SIZE#0) goto table_driven_irq::@2
Simple Condition (bool~) table_driven_irq::$2 [108] if((byte) table_driven_irq::idx#0<(byte/signed word/word/dword/signed dword~) table_driven_irq::$1) goto table_driven_irq::@3
Simple Condition (bool~) table_driven_irq::$4 [118] if((byte) table_driven_irq::val#0>=*((byte*) RASTER#0)) goto table_driven_irq::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) PROCPORT_DDR#0 = ((byte*))0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = ((byte*))1
Constant (const byte) PROCPORT_RAM_ALL#0 = $30
Constant (const byte) PROCPORT_RAM_IO#0 = $35
Constant (const byte) PROCPORT_RAM_CHARROM#0 = $31
Constant (const byte) PROCPORT_KERNEL_IO#0 = $36
Constant (const byte) PROCPORT_BASIC_KERNEL_IO#0 = $37
Constant (const byte*) CHARGEN#0 = ((byte*))$d000
Constant (const word) SPRITE_PTRS#0 = $3f8
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))$d000
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))$d001
Constant (const byte*) SPRITES_XMSB#0 = ((byte*))$d010
Constant (const byte*) RASTER#0 = ((byte*))$d012
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))$d015
Constant (const byte*) SPRITES_EXPAND_Y#0 = ((byte*))$d017
Constant (const byte*) SPRITES_PRIORITY#0 = ((byte*))$d01b
Constant (const byte*) SPRITES_MC#0 = ((byte*))$d01c
Constant (const byte*) SPRITES_EXPAND_X#0 = ((byte*))$d01d
Constant (const byte*) BORDERCOL#0 = ((byte*))$d020
Constant (const byte*) BGCOL#0 = ((byte*))$d021
Constant (const byte*) BGCOL1#0 = ((byte*))$d021
Constant (const byte*) BGCOL2#0 = ((byte*))$d022
Constant (const byte*) BGCOL3#0 = ((byte*))$d023
Constant (const byte*) BGCOL4#0 = ((byte*))$d024
Constant (const byte*) SPRITES_MC1#0 = ((byte*))$d025
Constant (const byte*) SPRITES_MC2#0 = ((byte*))$d026
Constant (const byte*) SPRITES_COLS#0 = ((byte*))$d027
Constant (const byte*) VIC_CONTROL#0 = ((byte*))$d011
Constant (const byte*) D011#0 = ((byte*))$d011
Constant (const byte) VIC_RST8#0 = $80
Constant (const byte) VIC_ECM#0 = $40
Constant (const byte) VIC_BMM#0 = $20
Constant (const byte) VIC_DEN#0 = $10
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) VIC_CONTROL2#0 = ((byte*))$d016
Constant (const byte*) D016#0 = ((byte*))$d016
Constant (const byte) VIC_MCM#0 = $10
Constant (const byte) VIC_CSEL#0 = 8
Constant (const byte*) D018#0 = ((byte*))$d018
Constant (const byte*) VIC_MEMORY#0 = ((byte*))$d018
Constant (const byte*) LIGHTPEN_X#0 = ((byte*))$d013
Constant (const byte*) LIGHTPEN_Y#0 = ((byte*))$d014
Constant (const byte*) IRQ_STATUS#0 = ((byte*))$d019
Constant (const byte*) IRQ_ENABLE#0 = ((byte*))$d01a
Constant (const byte) IRQ_RASTER#0 = 1
Constant (const byte) IRQ_COLLISION_BG#0 = 2
Constant (const byte) IRQ_COLLISION_SPRITE#0 = 4
Constant (const byte) IRQ_LIGHTPEN#0 = 8
Constant (const byte*) COLS#0 = ((byte*))$d800
Constant (const byte*) CIA1_PORT_A#0 = ((byte*))$dc00
Constant (const byte*) CIA1_PORT_B#0 = ((byte*))$dc01
Constant (const byte*) CIA1_PORT_A_DDR#0 = ((byte*))$dc02
Constant (const byte*) CIA1_PORT_B_DDR#0 = ((byte*))$dc03
Constant (const byte*) CIA1_INTERRUPT#0 = ((byte*))$dc0d
Constant (const byte) CIA_INTERRUPT_CLEAR#0 = $7f
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))$dd00
Constant (const byte*) CIA2_PORT_B#0 = ((byte*))$dd01
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))$dd02
Constant (const byte*) CIA2_PORT_B_DDR#0 = ((byte*))$dd03
Constant (const byte*) CIA2_INTERRUPT#0 = ((byte*))$dd0d
Constant (const void()**) KERNEL_IRQ#0 = ((void()**))$314
Constant (const void()**) HARDWARE_IRQ#0 = ((void()**))$fffe
Constant (const byte) BLACK#0 = 0
Constant (const byte) WHITE#0 = 1
Constant (const byte) RED#0 = 2
Constant (const byte) CYAN#0 = 3
Constant (const byte) PURPLE#0 = 4
Constant (const byte) GREEN#0 = 5
Constant (const byte) BLUE#0 = 6
Constant (const byte) YELLOW#0 = 7
Constant (const byte) ORANGE#0 = 8
Constant (const byte) BROWN#0 = 9
Constant (const byte) PINK#0 = $a
Constant (const byte) DARK_GREY#0 = $b
Constant (const byte) GREY#0 = $c
Constant (const byte) LIGHT_GREEN#0 = $d
Constant (const byte) LIGHT_BLUE#0 = $e
Constant (const byte) LIGHT_GREY#0 = $f
Constant (const byte*) SCREEN#0 = ((byte*))$400
Constant (const void()*) main::$0 = &table_driven_irq
Constant (const byte*) VIC_BASE#0 = ((byte*))$d000
Constant (const byte) VIC_SIZE#0 = $30
Constant (const byte) IRQ_CHANGE_NEXT#0 = $7f
Constant (const byte[]) IRQ_CHANGE_VAL#0 = { $b, $b, $63, 0, 0, $80, 7, 7, $83, 0, 0, $60 }
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte[]) IRQ_CHANGE_IDX#0 = { $20, $21, IRQ_CHANGE_NEXT#0, $20, $21, IRQ_CHANGE_NEXT#0, $20, $21, IRQ_CHANGE_NEXT#0, $20, $21, IRQ_CHANGE_NEXT#0 }
Constant (const byte/signed word/word/dword/signed dword) table_driven_irq::$1 = VIC_SIZE#0+8
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in assignment *(SCREEN#0+-VIC_SIZE#0 + table_driven_irq::$6)
Successful SSA optimization Pass2ConstantAdditionElimination
Removing PHI-reference to removed block (table_driven_irq::@8) in block table_driven_irq::@return
if() condition always true - replacing block destination [26] if(true) goto table_driven_irq::@1
Successful SSA optimization Pass2ConstantIfs
Successful SSA optimization PassNEliminateUnusedVars
Culled Empty Block (label) @4
Culled Empty Block (label) table_driven_irq::@4
Culled Empty Block (label) table_driven_irq::@8
Successful SSA optimization Pass2CullEmptyBlocks
Alias (word/signed word/dword/signed dword~) table_driven_irq::$6 = (word/signed word/dword/signed dword~) table_driven_irq::$5 
Successful SSA optimization Pass2AliasElimination
Consolidated array index constant in assignment *(SCREEN#0+-VIC_SIZE#0+$3f8 + table_driven_irq::$6)
Successful SSA optimization Pass2ConstantAdditionElimination
Inferred type updated to byte in [17] (word/signed word/dword/signed dword~) table_driven_irq::$6 ← (byte) table_driven_irq::idx#0
Alias (byte) table_driven_irq::idx#0 = (byte~) table_driven_irq::$6 
Successful SSA optimization Pass2AliasElimination
Constant inlined table_driven_irq::$1 = (const byte) VIC_SIZE#0+(byte/signed byte/word/signed word/dword/signed dword) 8
Constant inlined main::$0 = &interrupt(KERNEL_MIN)(void()) table_driven_irq()
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @6
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:3 

Created 1 initial phi equivalence classes
Coalesced [14] irq_idx#14 ← irq_idx#0
Coalesced [27] irq_idx#16 ← irq_idx#1
Coalesced (already) [29] irq_idx#15 ← irq_idx#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @6
Adding NOP phi() at start of @end
Adding NOP phi() at start of table_driven_irq

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@5
@5: scope:[]  from @begin
  [1] (byte) irq_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@6
@6: scope:[]  from @5
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @6
  [4] phi()
main: scope:[main]  from @6
  asm { sei  }
  [6] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  [7] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f
  [8] *((const byte*) RASTER#0) ← (byte/signed byte/word/signed word/dword/signed dword) $60
  [9] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [10] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  [11] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq()
  asm { cli  }
  to:main::@return
main::@return: scope:[main]  from main
  [13] return 
  to:@return
table_driven_irq: scope:[table_driven_irq]  from
  [14] phi()
  to:table_driven_irq::@1
table_driven_irq::@1: scope:[table_driven_irq]  from table_driven_irq table_driven_irq::@2 table_driven_irq::@3
  [15] (byte) irq_idx#4 ← phi( table_driven_irq/(byte) irq_idx#0 table_driven_irq::@2/(byte) irq_idx#1 table_driven_irq::@3/(byte) irq_idx#1 )
  [16] (byte) table_driven_irq::idx#0 ← *((const byte[]) IRQ_CHANGE_IDX#0 + (byte) irq_idx#4)
  [17] (byte) table_driven_irq::val#0 ← *((const byte[]) IRQ_CHANGE_VAL#0 + (byte) irq_idx#4)
  [18] (byte) irq_idx#1 ← ++ (byte) irq_idx#4
  [19] if((byte) table_driven_irq::idx#0<(const byte) VIC_SIZE#0) goto table_driven_irq::@2
  to:table_driven_irq::@9
table_driven_irq::@9: scope:[table_driven_irq]  from table_driven_irq::@1
  [20] if((byte) table_driven_irq::idx#0<(const byte) VIC_SIZE#0+(byte/signed byte/word/signed word/dword/signed dword) 8) goto table_driven_irq::@3
  to:table_driven_irq::@10
table_driven_irq::@10: scope:[table_driven_irq]  from table_driven_irq::@9
  [21] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  [22] *((const byte*) RASTER#0) ← (byte) table_driven_irq::val#0
  [23] if((byte) table_driven_irq::val#0>=*((const byte*) RASTER#0)) goto table_driven_irq::@return
  to:table_driven_irq::@11
table_driven_irq::@11: scope:[table_driven_irq]  from table_driven_irq::@10
  [24] (byte) irq_idx#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:table_driven_irq::@return
table_driven_irq::@return: scope:[table_driven_irq]  from table_driven_irq::@10 table_driven_irq::@11
  [25] return 
  to:@return
table_driven_irq::@3: scope:[table_driven_irq]  from table_driven_irq::@9
  [26] *((const byte*) SCREEN#0+-(const byte) VIC_SIZE#0+(word/signed word/dword/signed dword) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0
  to:table_driven_irq::@1
table_driven_irq::@2: scope:[table_driven_irq]  from table_driven_irq::@1
  [27] *((const byte*) VIC_BASE#0 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0
  to:table_driven_irq::@1


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte[]) IRQ_CHANGE_IDX
(byte) IRQ_CHANGE_NEXT
(byte[]) IRQ_CHANGE_VAL
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SCREEN
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte*) VIC_BASE
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) VIC_SIZE
(byte) WHITE
(byte) YELLOW
(byte) irq_idx
(byte) irq_idx#0 4.0
(byte) irq_idx#1 6.6000000000000005
(byte) irq_idx#2 20.0
(byte) irq_idx#4 19.0
(void()) main()
interrupt(KERNEL_MIN)(void()) table_driven_irq()
(byte) table_driven_irq::idx
(byte) table_driven_irq::idx#0 11.0
(byte) table_driven_irq::val
(byte) table_driven_irq::val#0 6.166666666666666

Initial phi equivalence classes
[ irq_idx#4 irq_idx#0 irq_idx#1 ]
Added variable table_driven_irq::idx#0 to zero page equivalence class [ table_driven_irq::idx#0 ]
Added variable table_driven_irq::val#0 to zero page equivalence class [ table_driven_irq::val#0 ]
Added variable irq_idx#2 to zero page equivalence class [ irq_idx#2 ]
Complete equivalence classes
[ irq_idx#4 irq_idx#0 irq_idx#1 ]
[ table_driven_irq::idx#0 ]
[ table_driven_irq::val#0 ]
[ irq_idx#2 ]
Allocated zp ZP_BYTE:2 [ irq_idx#4 irq_idx#0 irq_idx#1 ]
Allocated zp ZP_BYTE:3 [ table_driven_irq::idx#0 ]
Allocated zp ZP_BYTE:4 [ table_driven_irq::val#0 ]
Allocated zp ZP_BYTE:5 [ irq_idx#2 ]

INITIAL ASM
//SEG0 File Comments
// Test interrupt routine using a variable between calls (irq_idx)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  .label SCREEN = $400
  .label VIC_BASE = $d000
  .const VIC_SIZE = $30
  .const IRQ_CHANGE_NEXT = $7f
  .label irq_idx = 2
  .label irq_idx_2 = 5
//SEG3 @begin
bbegin:
  jmp b5
//SEG4 @5
b5:
//SEG5 [1] (byte) irq_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta irq_idx
//SEG6 [2] phi from @5 to @6 [phi:@5->@6]
b6_from_b5:
  jmp b6
//SEG7 @6
b6:
//SEG8 [3] call main 
  jsr main
//SEG9 [4] phi from @6 to @end [phi:@6->@end]
bend_from_b6:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
  //SEG14 [7] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to $60
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
  //SEG15 [8] *((const byte*) RASTER#0) ← (byte/signed byte/word/signed word/dword/signed dword) $60 -- _deref_pbuc1=vbuc2 
    lda #$60
    sta RASTER
  //SEG16 [9] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG17 [10] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG18 [11] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq() -- _deref_pptc1=pprc2 
    // Setup the table driven IRQ routine
    lda #<table_driven_irq
    sta KERNEL_IRQ
    lda #>table_driven_irq
    sta KERNEL_IRQ+1
  //SEG19 asm { cli  }
    cli
    jmp breturn
  //SEG20 main::@return
  breturn:
  //SEG21 [13] return 
    rts
}
//SEG22 table_driven_irq
table_driven_irq: {
    .label idx = 3
    .label val = 4
  //SEG23 entry interrupt(KERNEL_MIN)
  //SEG24 [15] phi from table_driven_irq table_driven_irq::@2 table_driven_irq::@3 to table_driven_irq::@1 [phi:table_driven_irq/table_driven_irq::@2/table_driven_irq::@3->table_driven_irq::@1]
  b1_from_table_driven_irq:
  b1_from_b2:
  b1_from_b3:
  //SEG25 [15] phi (byte) irq_idx#4 = (byte) irq_idx#0 [phi:table_driven_irq/table_driven_irq::@2/table_driven_irq::@3->table_driven_irq::@1#0] -- register_copy 
    jmp b1
  //SEG26 table_driven_irq::@1
  b1:
  //SEG27 [16] (byte) table_driven_irq::idx#0 ← *((const byte[]) IRQ_CHANGE_IDX#0 + (byte) irq_idx#4) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy irq_idx
    lda IRQ_CHANGE_IDX,y
    sta idx
  //SEG28 [17] (byte) table_driven_irq::val#0 ← *((const byte[]) IRQ_CHANGE_VAL#0 + (byte) irq_idx#4) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy irq_idx
    lda IRQ_CHANGE_VAL,y
    sta val
  //SEG29 [18] (byte) irq_idx#1 ← ++ (byte) irq_idx#4 -- vbuz1=_inc_vbuz1 
    inc irq_idx
  //SEG30 [19] if((byte) table_driven_irq::idx#0<(const byte) VIC_SIZE#0) goto table_driven_irq::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda idx
    cmp #VIC_SIZE
    bcc b2
    jmp b9
  //SEG31 table_driven_irq::@9
  b9:
  //SEG32 [20] if((byte) table_driven_irq::idx#0<(const byte) VIC_SIZE#0+(byte/signed byte/word/signed word/dword/signed dword) 8) goto table_driven_irq::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda idx
    cmp #VIC_SIZE+8
    bcc b3
    jmp b10
  //SEG33 table_driven_irq::@10
  b10:
  //SEG34 [21] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG35 [22] *((const byte*) RASTER#0) ← (byte) table_driven_irq::val#0 -- _deref_pbuc1=vbuz1 
    lda val
    sta RASTER
  //SEG36 [23] if((byte) table_driven_irq::val#0>=*((const byte*) RASTER#0)) goto table_driven_irq::@return -- vbuz1_ge__deref_pbuc1_then_la1 
    lda RASTER
    ldy val
    sta $ff
    cpy $ff
    bcs breturn
    jmp b11
  //SEG37 table_driven_irq::@11
  b11:
  //SEG38 [24] (byte) irq_idx#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_idx_2
    jmp breturn
  //SEG39 table_driven_irq::@return
  breturn:
  //SEG40 [25] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
  //SEG41 table_driven_irq::@3
  b3:
  //SEG42 [26] *((const byte*) SCREEN#0+-(const byte) VIC_SIZE#0+(word/signed word/dword/signed dword) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val
    ldy idx
    sta SCREEN+-VIC_SIZE+$3f8,y
    jmp b1_from_b3
  //SEG43 table_driven_irq::@2
  b2:
  //SEG44 [27] *((const byte*) VIC_BASE#0 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val
    ldy idx
    sta VIC_BASE,y
    jmp b1_from_b2
}
  IRQ_CHANGE_VAL: .byte $b, $b, $63, 0, 0, $80, 7, 7, $83, 0, 0, $60
  IRQ_CHANGE_IDX: .byte $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) irq_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [6] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) RASTER#0) ← (byte/signed byte/word/signed word/dword/signed dword) $60 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [11] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq() [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [16] (byte) table_driven_irq::idx#0 ← *((const byte[]) IRQ_CHANGE_IDX#0 + (byte) irq_idx#4) [ irq_idx#4 table_driven_irq::idx#0 ] (  [ irq_idx#4 table_driven_irq::idx#0 ] ) always clobbers reg byte y 
Statement [17] (byte) table_driven_irq::val#0 ← *((const byte[]) IRQ_CHANGE_VAL#0 + (byte) irq_idx#4) [ irq_idx#4 table_driven_irq::idx#0 table_driven_irq::val#0 ] (  [ irq_idx#4 table_driven_irq::idx#0 table_driven_irq::val#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ table_driven_irq::idx#0 ]
Statement [21] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ table_driven_irq::val#0 ] (  [ table_driven_irq::val#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ table_driven_irq::val#0 ]
Statement [24] (byte) irq_idx#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [26] *((const byte*) SCREEN#0+-(const byte) VIC_SIZE#0+(word/signed word/dword/signed dword) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 [ irq_idx#1 ] (  [ irq_idx#1 ] ) always clobbers reg byte a 
Statement [27] *((const byte*) VIC_BASE#0 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 [ irq_idx#1 ] (  [ irq_idx#1 ] ) always clobbers reg byte a 
Statement [1] (byte) irq_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [6] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) RASTER#0) ← (byte/signed byte/word/signed word/dword/signed dword) $60 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [11] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq() [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [16] (byte) table_driven_irq::idx#0 ← *((const byte[]) IRQ_CHANGE_IDX#0 + (byte) irq_idx#4) [ irq_idx#4 table_driven_irq::idx#0 ] (  [ irq_idx#4 table_driven_irq::idx#0 ] ) always clobbers reg byte y 
Statement [17] (byte) table_driven_irq::val#0 ← *((const byte[]) IRQ_CHANGE_VAL#0 + (byte) irq_idx#4) [ irq_idx#4 table_driven_irq::idx#0 table_driven_irq::val#0 ] (  [ irq_idx#4 table_driven_irq::idx#0 table_driven_irq::val#0 ] ) always clobbers reg byte y 
Statement [21] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ table_driven_irq::val#0 ] (  [ table_driven_irq::val#0 ] ) always clobbers reg byte a 
Statement [24] (byte) irq_idx#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [26] *((const byte*) SCREEN#0+-(const byte) VIC_SIZE#0+(word/signed word/dword/signed dword) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 [ irq_idx#1 ] (  [ irq_idx#1 ] ) always clobbers reg byte a 
Statement [27] *((const byte*) VIC_BASE#0 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 [ irq_idx#1 ] (  [ irq_idx#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ irq_idx#4 irq_idx#0 irq_idx#1 ] : zp ZP_BYTE:2 , 
Potential registers zp ZP_BYTE:3 [ table_driven_irq::idx#0 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:4 [ table_driven_irq::val#0 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ irq_idx#2 ] : zp ZP_BYTE:5 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 29.6: zp ZP_BYTE:2 [ irq_idx#4 irq_idx#0 irq_idx#1 ] 20: zp ZP_BYTE:5 [ irq_idx#2 ] 
Uplift Scope [table_driven_irq] 11: zp ZP_BYTE:3 [ table_driven_irq::idx#0 ] 6.17: zp ZP_BYTE:4 [ table_driven_irq::val#0 ] 
Uplift Scope [main] 

Uplifting [] best 928 combination zp ZP_BYTE:2 [ irq_idx#4 irq_idx#0 irq_idx#1 ] zp ZP_BYTE:5 [ irq_idx#2 ] 
Uplifting [table_driven_irq] best 762 combination reg byte a [ table_driven_irq::idx#0 ] reg byte x [ table_driven_irq::val#0 ] 
Uplifting [main] best 762 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ irq_idx#4 irq_idx#0 irq_idx#1 ]
Uplifting [] best 762 combination zp ZP_BYTE:2 [ irq_idx#4 irq_idx#0 irq_idx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ irq_idx#2 ]
Uplifting [] best 762 combination zp ZP_BYTE:5 [ irq_idx#2 ] 
Coalescing zero page register [ zp ZP_BYTE:2 [ irq_idx#4 irq_idx#0 irq_idx#1 ] ] with [ zp ZP_BYTE:5 [ irq_idx#2 ] ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Test interrupt routine using a variable between calls (irq_idx)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  .label SCREEN = $400
  .label VIC_BASE = $d000
  .const VIC_SIZE = $30
  .const IRQ_CHANGE_NEXT = $7f
  .label irq_idx = 2
//SEG3 @begin
bbegin:
  jmp b5
//SEG4 @5
b5:
//SEG5 [1] (byte) irq_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta irq_idx
//SEG6 [2] phi from @5 to @6 [phi:@5->@6]
b6_from_b5:
  jmp b6
//SEG7 @6
b6:
//SEG8 [3] call main 
  jsr main
//SEG9 [4] phi from @6 to @end [phi:@6->@end]
bend_from_b6:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
  //SEG14 [7] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to $60
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
  //SEG15 [8] *((const byte*) RASTER#0) ← (byte/signed byte/word/signed word/dword/signed dword) $60 -- _deref_pbuc1=vbuc2 
    lda #$60
    sta RASTER
  //SEG16 [9] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG17 [10] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG18 [11] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq() -- _deref_pptc1=pprc2 
    // Setup the table driven IRQ routine
    lda #<table_driven_irq
    sta KERNEL_IRQ
    lda #>table_driven_irq
    sta KERNEL_IRQ+1
  //SEG19 asm { cli  }
    cli
    jmp breturn
  //SEG20 main::@return
  breturn:
  //SEG21 [13] return 
    rts
}
//SEG22 table_driven_irq
table_driven_irq: {
  //SEG23 entry interrupt(KERNEL_MIN)
  //SEG24 [15] phi from table_driven_irq table_driven_irq::@2 table_driven_irq::@3 to table_driven_irq::@1 [phi:table_driven_irq/table_driven_irq::@2/table_driven_irq::@3->table_driven_irq::@1]
  b1_from_table_driven_irq:
  b1_from_b2:
  b1_from_b3:
  //SEG25 [15] phi (byte) irq_idx#4 = (byte) irq_idx#0 [phi:table_driven_irq/table_driven_irq::@2/table_driven_irq::@3->table_driven_irq::@1#0] -- register_copy 
    jmp b1
  //SEG26 table_driven_irq::@1
  b1:
  //SEG27 [16] (byte) table_driven_irq::idx#0 ← *((const byte[]) IRQ_CHANGE_IDX#0 + (byte) irq_idx#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy irq_idx
    lda IRQ_CHANGE_IDX,y
  //SEG28 [17] (byte) table_driven_irq::val#0 ← *((const byte[]) IRQ_CHANGE_VAL#0 + (byte) irq_idx#4) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy irq_idx
    ldx IRQ_CHANGE_VAL,y
  //SEG29 [18] (byte) irq_idx#1 ← ++ (byte) irq_idx#4 -- vbuz1=_inc_vbuz1 
    inc irq_idx
  //SEG30 [19] if((byte) table_driven_irq::idx#0<(const byte) VIC_SIZE#0) goto table_driven_irq::@2 -- vbuaa_lt_vbuc1_then_la1 
    cmp #VIC_SIZE
    bcc b2
    jmp b9
  //SEG31 table_driven_irq::@9
  b9:
  //SEG32 [20] if((byte) table_driven_irq::idx#0<(const byte) VIC_SIZE#0+(byte/signed byte/word/signed word/dword/signed dword) 8) goto table_driven_irq::@3 -- vbuaa_lt_vbuc1_then_la1 
    cmp #VIC_SIZE+8
    bcc b3
    jmp b10
  //SEG33 table_driven_irq::@10
  b10:
  //SEG34 [21] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG35 [22] *((const byte*) RASTER#0) ← (byte) table_driven_irq::val#0 -- _deref_pbuc1=vbuxx 
    stx RASTER
  //SEG36 [23] if((byte) table_driven_irq::val#0>=*((const byte*) RASTER#0)) goto table_driven_irq::@return -- vbuxx_ge__deref_pbuc1_then_la1 
    ldy RASTER
    sty $ff
    cpx $ff
    bcs breturn
    jmp b11
  //SEG37 table_driven_irq::@11
  b11:
  //SEG38 [24] (byte) irq_idx#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_idx
    jmp breturn
  //SEG39 table_driven_irq::@return
  breturn:
  //SEG40 [25] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
  //SEG41 table_driven_irq::@3
  b3:
  //SEG42 [26] *((const byte*) SCREEN#0+-(const byte) VIC_SIZE#0+(word/signed word/dword/signed dword) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuaa=vbuxx 
    tay
    txa
    sta SCREEN+-VIC_SIZE+$3f8,y
    jmp b1_from_b3
  //SEG43 table_driven_irq::@2
  b2:
  //SEG44 [27] *((const byte*) VIC_BASE#0 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuaa=vbuxx 
    tay
    txa
    sta VIC_BASE,y
    jmp b1_from_b2
}
  IRQ_CHANGE_VAL: .byte $b, $b, $63, 0, 0, $80, 7, 7, $83, 0, 0, $60
  IRQ_CHANGE_IDX: .byte $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp bend
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #IRQ_RASTER
Removing instruction ldy irq_idx
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b3 with b1
Replacing label b1_from_b2 with b1
Removing instruction b5:
Removing instruction b6_from_b5:
Removing instruction bend_from_b6:
Removing instruction b1_from_table_driven_irq:
Removing instruction b1_from_b2:
Removing instruction b1_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b6:
Removing instruction bend:
Removing instruction breturn:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to $ea81 in bcs breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [67] bcs $ea81 to bcc

FINAL SYMBOL TABLE
(label) @5
(label) @6
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(const byte*) CIA1_INTERRUPT#0 CIA1_INTERRUPT = ((byte*))(word/dword/signed dword) $dc0d
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(const byte) CIA_INTERRUPT_CLEAR#0 CIA_INTERRUPT_CLEAR = (byte/signed byte/word/signed word/dword/signed dword) $7f
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte[]) IRQ_CHANGE_IDX
(const byte[]) IRQ_CHANGE_IDX#0 IRQ_CHANGE_IDX = { (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $21, (const byte) IRQ_CHANGE_NEXT#0, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $21, (const byte) IRQ_CHANGE_NEXT#0, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $21, (const byte) IRQ_CHANGE_NEXT#0, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $21, (const byte) IRQ_CHANGE_NEXT#0 }
(byte) IRQ_CHANGE_NEXT
(const byte) IRQ_CHANGE_NEXT#0 IRQ_CHANGE_NEXT = (byte/signed byte/word/signed word/dword/signed dword) $7f
(byte[]) IRQ_CHANGE_VAL
(const byte[]) IRQ_CHANGE_VAL#0 IRQ_CHANGE_VAL = { (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $63, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $80, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/word/signed word/dword/signed dword) $83, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $60 }
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(const byte*) IRQ_ENABLE#0 IRQ_ENABLE = ((byte*))(word/dword/signed dword) $d01a
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(const byte) IRQ_RASTER#0 IRQ_RASTER = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte*) IRQ_STATUS
(const byte*) IRQ_STATUS#0 IRQ_STATUS = ((byte*))(word/dword/signed dword) $d019
(void()**) KERNEL_IRQ
(const void()**) KERNEL_IRQ#0 KERNEL_IRQ = ((void()**))(word/signed word/dword/signed dword) $314
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) $d012
(byte) RED
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte*) VIC_BASE
(const byte*) VIC_BASE#0 VIC_BASE = ((byte*))(word/dword/signed dword) $d000
(byte) VIC_BMM
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = ((byte*))(word/dword/signed dword) $d011
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) VIC_SIZE
(const byte) VIC_SIZE#0 VIC_SIZE = (byte/signed byte/word/signed word/dword/signed dword) $30
(byte) WHITE
(byte) YELLOW
(byte) irq_idx
(byte) irq_idx#0 irq_idx zp ZP_BYTE:2 4.0
(byte) irq_idx#1 irq_idx zp ZP_BYTE:2 6.6000000000000005
(byte) irq_idx#2 irq_idx zp ZP_BYTE:2 20.0
(byte) irq_idx#4 irq_idx zp ZP_BYTE:2 19.0
(void()) main()
(label) main::@return
interrupt(KERNEL_MIN)(void()) table_driven_irq()
(label) table_driven_irq::@1
(label) table_driven_irq::@10
(label) table_driven_irq::@11
(label) table_driven_irq::@2
(label) table_driven_irq::@3
(label) table_driven_irq::@9
(label) table_driven_irq::@return
(byte) table_driven_irq::idx
(byte) table_driven_irq::idx#0 reg byte a 11.0
(byte) table_driven_irq::val
(byte) table_driven_irq::val#0 reg byte x 6.166666666666666

zp ZP_BYTE:2 [ irq_idx#4 irq_idx#0 irq_idx#1 irq_idx#2 ]
reg byte a [ table_driven_irq::idx#0 ]
reg byte x [ table_driven_irq::val#0 ]


FINAL ASSEMBLER
Score: 598

//SEG0 File Comments
// Test interrupt routine using a variable between calls (irq_idx)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  .label SCREEN = $400
  .label VIC_BASE = $d000
  .const VIC_SIZE = $30
  .const IRQ_CHANGE_NEXT = $7f
  .label irq_idx = 2
//SEG3 @begin
bbegin:
//SEG4 @5
//SEG5 [1] (byte) irq_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta irq_idx
//SEG6 [2] phi from @5 to @6 [phi:@5->@6]
//SEG7 @6
//SEG8 [3] call main 
  jsr main
//SEG9 [4] phi from @6 to @end [phi:@6->@end]
//SEG10 @end
//SEG11 main
main: {
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
  //SEG14 [7] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to $60
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
  //SEG15 [8] *((const byte*) RASTER#0) ← (byte/signed byte/word/signed word/dword/signed dword) $60 -- _deref_pbuc1=vbuc2 
    lda #$60
    sta RASTER
  //SEG16 [9] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG17 [10] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ
    sta IRQ_STATUS
  //SEG18 [11] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq() -- _deref_pptc1=pprc2 
    // Setup the table driven IRQ routine
    lda #<table_driven_irq
    sta KERNEL_IRQ
    lda #>table_driven_irq
    sta KERNEL_IRQ+1
  //SEG19 asm { cli  }
    cli
  //SEG20 main::@return
  //SEG21 [13] return 
    rts
}
//SEG22 table_driven_irq
table_driven_irq: {
  //SEG23 entry interrupt(KERNEL_MIN)
  //SEG24 [15] phi from table_driven_irq table_driven_irq::@2 table_driven_irq::@3 to table_driven_irq::@1 [phi:table_driven_irq/table_driven_irq::@2/table_driven_irq::@3->table_driven_irq::@1]
  //SEG25 [15] phi (byte) irq_idx#4 = (byte) irq_idx#0 [phi:table_driven_irq/table_driven_irq::@2/table_driven_irq::@3->table_driven_irq::@1#0] -- register_copy 
  //SEG26 table_driven_irq::@1
  b1:
  //SEG27 [16] (byte) table_driven_irq::idx#0 ← *((const byte[]) IRQ_CHANGE_IDX#0 + (byte) irq_idx#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy irq_idx
    lda IRQ_CHANGE_IDX,y
  //SEG28 [17] (byte) table_driven_irq::val#0 ← *((const byte[]) IRQ_CHANGE_VAL#0 + (byte) irq_idx#4) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldx IRQ_CHANGE_VAL,y
  //SEG29 [18] (byte) irq_idx#1 ← ++ (byte) irq_idx#4 -- vbuz1=_inc_vbuz1 
    inc irq_idx
  //SEG30 [19] if((byte) table_driven_irq::idx#0<(const byte) VIC_SIZE#0) goto table_driven_irq::@2 -- vbuaa_lt_vbuc1_then_la1 
    cmp #VIC_SIZE
    bcc b2
  //SEG31 table_driven_irq::@9
  //SEG32 [20] if((byte) table_driven_irq::idx#0<(const byte) VIC_SIZE#0+(byte/signed byte/word/signed word/dword/signed dword) 8) goto table_driven_irq::@3 -- vbuaa_lt_vbuc1_then_la1 
    cmp #VIC_SIZE+8
    bcc b3
  //SEG33 table_driven_irq::@10
  //SEG34 [21] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG35 [22] *((const byte*) RASTER#0) ← (byte) table_driven_irq::val#0 -- _deref_pbuc1=vbuxx 
    stx RASTER
  //SEG36 [23] if((byte) table_driven_irq::val#0>=*((const byte*) RASTER#0)) goto table_driven_irq::@return -- vbuxx_ge__deref_pbuc1_then_la1 
    ldy RASTER
    sty $ff
    cpx $ff
    bcc !_ea81+
    jmp $ea81
  !_ea81:
  //SEG37 table_driven_irq::@11
  //SEG38 [24] (byte) irq_idx#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_idx
  //SEG39 table_driven_irq::@return
  //SEG40 [25] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
  //SEG41 table_driven_irq::@3
  b3:
  //SEG42 [26] *((const byte*) SCREEN#0+-(const byte) VIC_SIZE#0+(word/signed word/dword/signed dword) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuaa=vbuxx 
    tay
    txa
    sta SCREEN+-VIC_SIZE+$3f8,y
    jmp b1
  //SEG43 table_driven_irq::@2
  b2:
  //SEG44 [27] *((const byte*) VIC_BASE#0 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuaa=vbuxx 
    tay
    txa
    sta VIC_BASE,y
    jmp b1
}
  IRQ_CHANGE_VAL: .byte $b, $b, $63, 0, 0, $80, 7, 7, $83, 0, 0, $60
  IRQ_CHANGE_IDX: .byte $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT

