
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  asm { jmpqwe .byte0,25,51,76,102,128,153,179,204,230 qwe: lda#50  }
  *((byte*)$400) = 'c'
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { jmpqwe .byte0,25,51,76,102,128,153,179,204,230 qwe: lda#50  }
  [1] *((byte*) 1024) = 'c'
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement asm { jmpqwe .byte0,25,51,76,102,128,153,179,204,230 qwe: lda#50  } always clobbers reg byte a 
Statement [1] *((byte*) 1024) = 'c' [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 20 combination 
Uplifting [] best 20 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Example of inline ASM where a JMP is erronously culled during compilation
// https://gitlab.com/camelot/kickc/issues/302
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // asm { jmpqwe .byte0,25,51,76,102,128,153,179,204,230 qwe: lda#50  }
    jmp qwe
    .byte 0, 25, 51, 76, 102, 128, 153, 179, 204, 230
  qwe:
    lda #$32
    // [1] *((byte*) 1024) = 'c' -- _deref_pbuc1=vbuc2 
    lda #'c'
    sta $400
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()



FINAL ASSEMBLER
Score: 17

  // File Comments
// Example of inline ASM where a JMP is erronously culled during compilation
// https://gitlab.com/camelot/kickc/issues/302
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // asm
    // asm { jmpqwe .byte0,25,51,76,102,128,153,179,204,230 qwe: lda#50  }
    jmp qwe
    .byte 0, 25, 51, 76, 102, 128, 153, 179, 204, 230
  qwe:
    lda #$32
    // *((char*)0x0400) = 'c'
    // [1] *((byte*) 1024) = 'c' -- _deref_pbuc1=vbuc2 
    lda #'c'
    sta $400
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

