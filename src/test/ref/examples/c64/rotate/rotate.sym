constant struct MOS6526_CIA* const CIA2 = (struct MOS6526_CIA*) 56576
constant dword* const CIA2_TIMER_AB = (dword*) 56580
constant const byte CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
constant const byte CIA_TIMER_CONTROL_START = 1
constant const dword CLOCKS_PER_INIT = $12
constant byte* COS = SIN+$40
constant const byte GREEN = 5
constant const byte LIGHT_BLUE = $e
constant byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
constant byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
constant byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
constant byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
constant byte OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
constant byte OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB = $10
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant byte* SCREEN = (byte*) 1024
constant byte* SIN[$140]  = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
constant byte* SPRITE[]  = kickasm {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
constant byte* const SPRITES_COLOR = (byte*) 53287
constant byte* const SPRITES_XPOS = (byte*) 53248
constant byte* const SPRITES_YPOS = (byte*) 53249
constant struct MOS6569_VICII* const VICII = (struct MOS6569_VICII*) 53248
void anim()
signed word~ anim::$10 zp[2]:5 2002.0
signed word~ anim::$11 zp[2]:5 2002.0
signed word~ anim::$12 zp[2]:5 2002.0
byte~ anim::$14 reg byte a 1001.0
byte~ anim::$17 reg byte a 2002.0
byte~ anim::$21 reg byte a 2002.0
byte~ anim::$24 reg byte a 2002.0
dword~ anim::$26 zp[4]:17 202.0
signed word~ anim::$4 zp[2]:5 2002.0
signed word~ anim::$6 zp[2]:5 2002.0
signed word~ anim::$9 zp[2]:5 2002.0
byte anim::angle
byte anim::angle#1 angle zp[1]:3 25.25
byte anim::angle#9 angle zp[1]:3 4.488888888888889
signed byte anim::cos_a
dword anim::cyclecount
dword anim::cyclecount#0 cyclecount zp[4]:17 202.0
byte anim::i
byte anim::i#1 i zp[1]:4 1501.5
byte anim::i#10 i zp[1]:4 131.71052631578948
byte anim::i2
byte anim::i2#0 reg byte x 1001.0
signed byte anim::mulf8s_prepare1_a
signed byte anim::mulf8s_prepare2_a
signed byte anim::sin_a
byte anim::sprite_msb
byte anim::sprite_msb#1 sprite_msb zp[1]:2 1001.0
byte anim::sprite_msb#10 sprite_msb zp[1]:2 74.14814814814815
byte anim::sprite_msb#2 sprite_msb zp[1]:2 2002.0
byte anim::sprite_msb#5 sprite_msb zp[1]:2 344.8888888888889
signed byte anim::x
signed byte anim::x#0 x zp[1]:9 158.05263157894737
signed word anim::xpos
signed word anim::xpos#0 xpos zp[2]:15 333.6666666666667
signed word anim::xr
signed word anim::xr#0 xr zp[2]:11 182.0
signed word anim::xr#1 xr zp[2]:11 333.6666666666667
signed byte anim::y
signed byte anim::y#0 y zp[1]:10 231.0
byte anim::ypos
byte anim::ypos#0 reg byte y 500.5
signed word anim::yr
signed word anim::yr#0 yr zp[2]:13 166.83333333333334
signed word anim::yr#1 yr zp[2]:13 250.25
dword clock()
dword clock::return
dword clock::return#0 return zp[4]:17 275.5
dword clock::return#2 return zp[4]:17 202.0
dword clock::ticks
void clock_start()
void init()
byte init::i
byte init::i#1 reg byte x 151.5
byte init::i#2 reg byte x 134.66666666666666
byte* init::sprites_ptr
constant byte* init::sprites_ptr#0 sprites_ptr = SCREEN+$3f8
void main()
signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
byte~ mulf8s_prepared::$11 reg byte a 20002.0
byte~ mulf8s_prepared::$12 reg byte a 20002.0
byte~ mulf8s_prepared::$6 reg byte a 20002.0
byte~ mulf8s_prepared::$9 reg byte a 20002.0
signed byte mulf8s_prepared::b
signed byte mulf8s_prepared::b#0 reg byte y 2002.0
signed byte mulf8s_prepared::b#1 reg byte y 2002.0
signed byte mulf8s_prepared::b#2 reg byte y 2002.0
signed byte mulf8s_prepared::b#3 reg byte y 2002.0
signed byte mulf8s_prepared::b#4 reg byte y 1400.5
word mulf8s_prepared::m
word mulf8s_prepared::m#0 m zp[2]:5 10001.0
word mulf8s_prepared::m#1 m zp[2]:5 20002.0
word mulf8s_prepared::m#2 m zp[2]:5 20002.0
word mulf8s_prepared::m#4 m zp[2]:5 3333.6666666666665
word mulf8s_prepared::m#5 m zp[2]:5 12501.25
constant signed byte* const mulf8s_prepared::memA = (signed byte*) 253
signed word mulf8s_prepared::return
void mulf8u_prepare(byte mulf8u_prepare::a)
byte mulf8u_prepare::a
byte mulf8u_prepare::a#2 reg byte a 12003.0
byte mulf8u_prepare::a#3 reg byte a 2002.0
byte mulf8u_prepare::a#4 reg byte a 2002.0
constant byte* const mulf8u_prepare::memA = (byte*) 253
word mulf8u_prepared(byte mulf8u_prepared::b)
byte mulf8u_prepared::b
byte mulf8u_prepared::b#0 reg byte a 110002.0
constant byte* const mulf8u_prepared::memB = (byte*) 255
constant byte* const mulf8u_prepared::resL = (byte*) 254
word mulf8u_prepared::return
word mulf8u_prepared::return#0 return zp[2]:5 36667.33333333333
word mulf8u_prepared::return#2 return zp[2]:5 20002.0
void mulf_init()
byte~ mulf_init::$1 reg byte a 2002.0
byte~ mulf_init::$4 reg byte a 2002.0
byte~ mulf_init::$5 reg byte a 2002.0
byte mulf_init::c
byte mulf_init::c#1 c zp[1]:3 231.0
byte mulf_init::c#2 c zp[1]:3 1001.0
byte mulf_init::dir
byte mulf_init::dir#2 dir zp[1]:4 375.375
byte mulf_init::dir#4 dir zp[1]:4 1001.0
word mulf_init::sqr
word mulf_init::sqr#1 sqr zp[2]:11 1001.0
word mulf_init::sqr#2 sqr zp[2]:11 2002.0
word mulf_init::sqr#3 sqr zp[2]:11 834.1666666666667
word mulf_init::sqr#4 sqr zp[2]:11 500.5
byte* mulf_init::sqr1_hi
byte* mulf_init::sqr1_hi#1 sqr1_hi zp[2]:13 667.3333333333334
byte* mulf_init::sqr1_hi#2 sqr1_hi zp[2]:13 250.25
byte* mulf_init::sqr1_lo
byte* mulf_init::sqr1_lo#1 sqr1_lo zp[2]:5 2002.0
byte* mulf_init::sqr1_lo#2 sqr1_lo zp[2]:5 286.0
byte* mulf_init::sqr2_hi
byte* mulf_init::sqr2_hi#1 sqr2_hi zp[2]:7 333.6666666666667
byte* mulf_init::sqr2_hi#2 sqr2_hi zp[2]:7 750.75
byte* mulf_init::sqr2_lo
byte* mulf_init::sqr2_lo#1 sqr2_lo zp[2]:15 2002.0
byte* mulf_init::sqr2_lo#2 sqr2_lo zp[2]:15 444.8888888888889
byte mulf_init::x_2
byte mulf_init::x_2#1 reg byte x 1001.0
byte mulf_init::x_2#2 reg byte x 500.5
byte mulf_init::x_2#3 reg byte x 600.5999999999999
byte mulf_init::x_255
byte mulf_init::x_255#1 reg byte x 600.5999999999999
byte mulf_init::x_255#2 reg byte x 800.8
constant byte* mulf_sqr1_hi[$200]  = { fill( $200, 0) }
constant byte* mulf_sqr1_lo[$200]  = { fill( $200, 0) }
constant byte* mulf_sqr2_hi[$200]  = { fill( $200, 0) }
constant byte* mulf_sqr2_lo[$200]  = { fill( $200, 0) }
void print_char_at(byte print_char_at::ch , byte* print_char_at::at)
byte* print_char_at::at
byte* print_char_at::at#0 at zp[2]:7 200002.0
byte* print_char_at::at#1 at zp[2]:7 100001.0
byte* print_char_at::at#2 at zp[2]:7 1200003.0
byte print_char_at::ch
byte print_char_at::ch#0 reg byte x 100001.0
byte print_char_at::ch#1 reg byte x 200002.0
byte print_char_at::ch#2 reg byte x 1200003.0
constant const byte* print_hextab[]  = "0123456789abcdef"z
void print_uchar_at(byte print_uchar_at::b , byte* print_uchar_at::at)
byte~ print_uchar_at::$0 reg byte a 200002.0
byte~ print_uchar_at::$2 reg byte y 100001.0
byte* print_uchar_at::at
byte* print_uchar_at::at#0 at zp[2]:15 20002.0
byte* print_uchar_at::at#1 at zp[2]:15 20002.0
byte* print_uchar_at::at#2 at zp[2]:15 36667.33333333333
byte print_uchar_at::b
byte print_uchar_at::b#0 b zp[1]:9 10001.0
byte print_uchar_at::b#1 b zp[1]:9 10001.0
byte print_uchar_at::b#2 b zp[1]:9 44000.8
void print_uint_at(word print_uint_at::w , byte* print_uint_at::at)
byte* print_uint_at::at
byte* print_uint_at::at#2 at zp[2]:15 4000.4
word print_uint_at::w
word print_uint_at::w#0 w zp[2]:13 2002.0
word print_uint_at::w#1 w zp[2]:13 2002.0
word print_uint_at::w#2 w zp[2]:13 5501.0
void print_ulong_at(dword print_ulong_at::dw , byte* print_ulong_at::at)
byte* print_ulong_at::at
dword print_ulong_at::dw
dword print_ulong_at::dw#0 dw zp[4]:17 701.0
constant signed byte* xs[8]  = { -$46, -$46, -$46, 0, 0, $46, $46, $46 }
constant signed byte* ys[8]  = { -$46, 0, $46, -$46, $46, -$46, 0, $46 }

reg byte x [ init::i#2 init::i#1 ]
zp[1]:2 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
zp[1]:3 [ mulf_init::c#2 mulf_init::c#1 anim::angle#9 anim::angle#1 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp[1]:4 [ mulf_init::dir#2 mulf_init::dir#4 anim::i#10 anim::i#1 ]
reg byte a [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
reg byte y [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ]
zp[2]:5 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 anim::$12 mulf8u_prepared::return#0 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
reg byte x [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
zp[2]:7 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
zp[1]:9 [ anim::x#0 print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
zp[1]:10 [ anim::y#0 ]
zp[2]:11 [ anim::xr#0 anim::xr#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
zp[2]:13 [ anim::yr#0 anim::yr#1 print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
reg byte a [ anim::$14 ]
zp[2]:15 [ anim::xpos#0 print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
reg byte a [ anim::$17 ]
reg byte a [ anim::$21 ]
reg byte y [ anim::ypos#0 ]
reg byte x [ anim::i2#0 ]
reg byte a [ anim::$24 ]
zp[4]:17 [ clock::return#2 anim::$26 clock::return#0 anim::cyclecount#0 print_ulong_at::dw#0 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]
reg byte a [ mulf8u_prepared::b#0 ]
reg byte a [ mulf8s_prepared::$6 ]
reg byte a [ mulf8s_prepared::$11 ]
reg byte a [ mulf8s_prepared::$9 ]
reg byte a [ mulf8s_prepared::$12 ]
reg byte a [ print_uchar_at::$0 ]
reg byte y [ print_uchar_at::$2 ]
