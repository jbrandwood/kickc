
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  *(&(struct Point) main::point1) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT)
  (struct Point) main::point1 ← struct-unwound {*(&(struct Point) main::point1)}
  *(&(struct Point) main::point2) ← memcpy(*(&(const struct Point) $1), struct Point, (const byte) SIZEOF_STRUCT_POINT)
  (struct Point) main::point2 ← struct-unwound {*(&(struct Point) main::point2)}
  (byte) print::p_x#0 ← *((byte*)&(struct Point) main::point1+(const byte) OFFSET_STRUCT_POINT_X)
  (byte) print::p_y#0 ← *((byte*)&(struct Point) main::point1+(const byte) OFFSET_STRUCT_POINT_Y)
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) print::p_x#1 ← *((byte*)&(struct Point) main::point2+(const byte) OFFSET_STRUCT_POINT_X)
  (byte) print::p_y#1 ← *((byte*)&(struct Point) main::point2+(const byte) OFFSET_STRUCT_POINT_Y)
  call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

(void()) print((byte) print::p_x , (byte) print::p_y)
print: scope:[print]  from main main::@1
  (byte) print::p_y#2 ← phi( main/(byte) print::p_y#0 main::@1/(byte) print::p_y#1 )
  (byte) print::p_x#2 ← phi( main/(byte) print::p_x#0 main::@1/(byte) print::p_x#1 )
  *((const nomodify byte*) SCREEN + (number) 0) ← (byte) print::p_x#2
  *((const nomodify byte*) SCREEN + (number) 1) ← (byte) print::p_y#2
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(const struct Point) $0 = { x: (byte) 2, y: (byte) 3 }
(const struct Point) $1 = { x: (byte) 4, y: (byte) 5 }
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const byte) SIZEOF_STRUCT_POINT = (byte) 2
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(struct Point) main::point1 loadstore
(struct Point) main::point2 loadstore
(void()) print((byte) print::p_x , (byte) print::p_y)
(label) print::@return
(struct Point) print::p
(byte) print::p_x
(byte) print::p_x#0
(byte) print::p_x#1
(byte) print::p_x#2
(byte) print::p_y
(byte) print::p_y#0
(byte) print::p_y#1
(byte) print::p_y#2

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← (byte) print::p_x#2
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) SCREEN + (number) 1) ← (byte) print::p_y#2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Removing C-classic struct-unwound assignment [1] (struct Point) main::point1 ← struct-unwound {*(&(struct Point) main::point1)}
Removing C-classic struct-unwound assignment [3] (struct Point) main::point2 ← struct-unwound {*(&(struct Point) main::point2)}
Simplifying expression containing zero (byte*)&main::point1 in [4] (byte) print::p_x#0 ← *((byte*)&(struct Point) main::point1+(const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (byte*)&main::point2 in [7] (byte) print::p_x#1 ← *((byte*)&(struct Point) main::point2+(const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero SCREEN in [12] *((const nomodify byte*) SCREEN + (byte) 0) ← (byte) print::p_x#2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print:11 print:16 

Created 2 initial phi equivalence classes
Coalesced [9] print::p_x#3 ← print::p_x#0
Coalesced [10] print::p_y#3 ← print::p_y#0
Coalesced [14] print::p_x#4 ← print::p_x#1
Coalesced [15] print::p_y#4 ← print::p_y#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *(&(struct Point) main::point1) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT)
  [5] *(&(struct Point) main::point2) ← memcpy(*(&(const struct Point) $1), struct Point, (const byte) SIZEOF_STRUCT_POINT)
  [6] (byte) print::p_x#0 ← *((byte*)&(struct Point) main::point1)
  [7] (byte) print::p_y#0 ← *((byte*)&(struct Point) main::point1+(const byte) OFFSET_STRUCT_POINT_Y)
  [8] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [9] (byte) print::p_x#1 ← *((byte*)&(struct Point) main::point2)
  [10] (byte) print::p_y#1 ← *((byte*)&(struct Point) main::point2+(const byte) OFFSET_STRUCT_POINT_Y)
  [11] call print 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [12] return 
  to:@return

(void()) print((byte) print::p_x , (byte) print::p_y)
print: scope:[print]  from main main::@1
  [13] (byte) print::p_y#2 ← phi( main/(byte) print::p_y#0 main::@1/(byte) print::p_y#1 )
  [13] (byte) print::p_x#2 ← phi( main/(byte) print::p_x#0 main::@1/(byte) print::p_x#1 )
  [14] *((const nomodify byte*) SCREEN) ← (byte) print::p_x#2
  [15] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) print::p_y#2
  to:print::@return
print::@return: scope:[print]  from print
  [16] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(void()) main()
(struct Point) main::point1 loadstore
(struct Point) main::point2 loadstore
(void()) print((byte) print::p_x , (byte) print::p_y)
(struct Point) print::p
(byte) print::p_x
(byte) print::p_x#0 11.0
(byte) print::p_x#1 11.0
(byte) print::p_x#2 123.0
(byte) print::p_y
(byte) print::p_y#0 22.0
(byte) print::p_y#1 22.0
(byte) print::p_y#2 61.5

Initial phi equivalence classes
[ print::p_x#2 print::p_x#0 print::p_x#1 ]
[ print::p_y#2 print::p_y#0 print::p_y#1 ]
Added variable main::point1 to live range equivalence class [ main::point1 ]
Added variable main::point2 to live range equivalence class [ main::point2 ]
Complete equivalence classes
[ print::p_x#2 print::p_x#0 print::p_x#1 ]
[ print::p_y#2 print::p_y#0 print::p_y#1 ]
[ main::point1 ]
[ main::point2 ]
Allocated zp[1]:2 [ print::p_x#2 print::p_x#0 print::p_x#1 ]
Allocated zp[1]:3 [ print::p_y#2 print::p_y#0 print::p_y#1 ]
Allocated zp[2]:4 [ main::point1 ]
Allocated zp[2]:6 [ main::point2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct with C-Standard behavior - call parameter (not supported yet)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label point1 = 4
    .label point2 = 6
    // [4] *(&(struct Point) main::point1) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta point1-1,y
    dey
    bne !-
    // [5] *(&(struct Point) main::point2) ← memcpy(*(&(const struct Point) $1), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __1-1,y
    sta point2-1,y
    dey
    bne !-
    // [6] (byte) print::p_x#0 ← *((byte*)&(struct Point) main::point1) -- vbuz1=_deref_pbuc1 
    lda.z point1
    sta.z print.p_x
    // [7] (byte) print::p_y#0 ← *((byte*)&(struct Point) main::point1+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuz1=_deref_pbuc1 
    lda point1+OFFSET_STRUCT_POINT_Y
    sta.z print.p_y
    // [8] call print 
    // [13] phi from main to print [phi:main->print]
  print_from_main:
    // [13] phi (byte) print::p_y#2 = (byte) print::p_y#0 [phi:main->print#0] -- register_copy 
    // [13] phi (byte) print::p_x#2 = (byte) print::p_x#0 [phi:main->print#1] -- register_copy 
    jsr print
    jmp __b1
    // main::@1
  __b1:
    // [9] (byte) print::p_x#1 ← *((byte*)&(struct Point) main::point2) -- vbuz1=_deref_pbuc1 
    lda.z point2
    sta.z print.p_x
    // [10] (byte) print::p_y#1 ← *((byte*)&(struct Point) main::point2+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuz1=_deref_pbuc1 
    lda point2+OFFSET_STRUCT_POINT_Y
    sta.z print.p_y
    // [11] call print 
    // [13] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [13] phi (byte) print::p_y#2 = (byte) print::p_y#1 [phi:main::@1->print#0] -- register_copy 
    // [13] phi (byte) print::p_x#2 = (byte) print::p_x#1 [phi:main::@1->print#1] -- register_copy 
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // print
// print(byte zp(2) p_x, byte zp(3) p_y)
print: {
    .label p_x = 2
    .label p_y = 3
    // [14] *((const nomodify byte*) SCREEN) ← (byte) print::p_x#2 -- _deref_pbuc1=vbuz1 
    lda.z p_x
    sta SCREEN
    // [15] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) print::p_y#2 -- _deref_pbuc1=vbuz1 
    lda.z p_y
    sta SCREEN+1
    jmp __breturn
    // print::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data
  __0: .byte 2, 3
  __1: .byte 4, 5

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *(&(struct Point) main::point1) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT) [ main::point1 main::point2 ] ( main:2 [ main::point1 main::point2 ] { { print::p_x#0 = print::p_x#2 } { print::p_y#0 = print::p_y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [5] *(&(struct Point) main::point2) ← memcpy(*(&(const struct Point) $1), struct Point, (const byte) SIZEOF_STRUCT_POINT) [ main::point1 main::point2 ] ( main:2 [ main::point1 main::point2 ] { { print::p_x#0 = print::p_x#2 } { print::p_y#0 = print::p_y#2 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ print::p_x#2 print::p_x#0 print::p_x#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ print::p_y#2 print::p_y#0 print::p_y#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:4 [ main::point1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ main::point2 ] : zp[2]:6 , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 145: zp[1]:2 [ print::p_x#2 print::p_x#0 print::p_x#1 ] 105.5: zp[1]:3 [ print::p_y#2 print::p_y#0 print::p_y#1 ] 
Uplift Scope [Point] 
Uplift Scope [main] 0: zp[2]:4 [ main::point1 ] 0: zp[2]:6 [ main::point2 ] 
Uplift Scope [] 

Uplifting [print] best 99 combination reg byte x [ print::p_x#2 print::p_x#0 print::p_x#1 ] reg byte a [ print::p_y#2 print::p_y#0 print::p_y#1 ] 
Uplifting [Point] best 99 combination 
Uplifting [main] best 99 combination zp[2]:4 [ main::point1 ] zp[2]:6 [ main::point2 ] 
Uplifting [] best 99 combination 
Allocated (was zp[2]:4) zp[2]:2 [ main::point1 ]
Allocated (was zp[2]:6) zp[2]:4 [ main::point2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct with C-Standard behavior - call parameter (not supported yet)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label point1 = 2
    .label point2 = 4
    // [4] *(&(struct Point) main::point1) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta point1-1,y
    dey
    bne !-
    // [5] *(&(struct Point) main::point2) ← memcpy(*(&(const struct Point) $1), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __1-1,y
    sta point2-1,y
    dey
    bne !-
    // [6] (byte) print::p_x#0 ← *((byte*)&(struct Point) main::point1) -- vbuxx=_deref_pbuc1 
    ldx.z point1
    // [7] (byte) print::p_y#0 ← *((byte*)&(struct Point) main::point1+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuaa=_deref_pbuc1 
    lda point1+OFFSET_STRUCT_POINT_Y
    // [8] call print 
    // [13] phi from main to print [phi:main->print]
  print_from_main:
    // [13] phi (byte) print::p_y#2 = (byte) print::p_y#0 [phi:main->print#0] -- register_copy 
    // [13] phi (byte) print::p_x#2 = (byte) print::p_x#0 [phi:main->print#1] -- register_copy 
    jsr print
    jmp __b1
    // main::@1
  __b1:
    // [9] (byte) print::p_x#1 ← *((byte*)&(struct Point) main::point2) -- vbuxx=_deref_pbuc1 
    ldx.z point2
    // [10] (byte) print::p_y#1 ← *((byte*)&(struct Point) main::point2+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuaa=_deref_pbuc1 
    lda point2+OFFSET_STRUCT_POINT_Y
    // [11] call print 
    // [13] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [13] phi (byte) print::p_y#2 = (byte) print::p_y#1 [phi:main::@1->print#0] -- register_copy 
    // [13] phi (byte) print::p_x#2 = (byte) print::p_x#1 [phi:main::@1->print#1] -- register_copy 
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // print
// print(byte register(X) p_x, byte register(A) p_y)
print: {
    // [14] *((const nomodify byte*) SCREEN) ← (byte) print::p_x#2 -- _deref_pbuc1=vbuxx 
    stx SCREEN
    // [15] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) print::p_y#2 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
    jmp __breturn
    // print::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data
  __0: .byte 2, 3
  __1: .byte 4, 5

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction print_from_main:
Removing instruction __b1:
Removing instruction print_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const struct Point) $0 = { x: (byte) 2, y: (byte) 3 }
(const struct Point) $1 = { x: (byte) 4, y: (byte) 5 }
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const nomodify byte*) SCREEN = (byte*) 1024
(const byte) SIZEOF_STRUCT_POINT = (byte) 2
(void()) main()
(label) main::@1
(label) main::@return
(struct Point) main::point1 loadstore zp[2]:2
(struct Point) main::point2 loadstore zp[2]:4
(void()) print((byte) print::p_x , (byte) print::p_y)
(label) print::@return
(struct Point) print::p
(byte) print::p_x
(byte) print::p_x#0 reg byte x 11.0
(byte) print::p_x#1 reg byte x 11.0
(byte) print::p_x#2 reg byte x 123.0
(byte) print::p_y
(byte) print::p_y#0 reg byte a 22.0
(byte) print::p_y#1 reg byte a 22.0
(byte) print::p_y#2 reg byte a 61.5

reg byte x [ print::p_x#2 print::p_x#0 print::p_x#1 ]
reg byte a [ print::p_y#2 print::p_y#0 print::p_y#1 ]
zp[2]:2 [ main::point1 ]
zp[2]:4 [ main::point2 ]


FINAL ASSEMBLER
Score: 78

  // File Comments
// Minimal struct with C-Standard behavior - call parameter (not supported yet)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label point1 = 2
    .label point2 = 4
    // point1 = { 2, 3 }
    // [4] *(&(struct Point) main::point1) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta point1-1,y
    dey
    bne !-
    // point2 = { 4, 5 }
    // [5] *(&(struct Point) main::point2) ← memcpy(*(&(const struct Point) $1), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __1-1,y
    sta point2-1,y
    dey
    bne !-
    // print(point1)
    // [6] (byte) print::p_x#0 ← *((byte*)&(struct Point) main::point1) -- vbuxx=_deref_pbuc1 
    ldx.z point1
    // [7] (byte) print::p_y#0 ← *((byte*)&(struct Point) main::point1+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuaa=_deref_pbuc1 
    lda point1+OFFSET_STRUCT_POINT_Y
    // [8] call print 
    // [13] phi from main to print [phi:main->print]
    // [13] phi (byte) print::p_y#2 = (byte) print::p_y#0 [phi:main->print#0] -- register_copy 
    // [13] phi (byte) print::p_x#2 = (byte) print::p_x#0 [phi:main->print#1] -- register_copy 
    jsr print
    // main::@1
    // print(point2)
    // [9] (byte) print::p_x#1 ← *((byte*)&(struct Point) main::point2) -- vbuxx=_deref_pbuc1 
    ldx.z point2
    // [10] (byte) print::p_y#1 ← *((byte*)&(struct Point) main::point2+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuaa=_deref_pbuc1 
    lda point2+OFFSET_STRUCT_POINT_Y
    // [11] call print 
    // [13] phi from main::@1 to print [phi:main::@1->print]
    // [13] phi (byte) print::p_y#2 = (byte) print::p_y#1 [phi:main::@1->print#0] -- register_copy 
    // [13] phi (byte) print::p_x#2 = (byte) print::p_x#1 [phi:main::@1->print#1] -- register_copy 
    jsr print
    // main::@return
    // }
    // [12] return 
    rts
}
  // print
// print(byte register(X) p_x, byte register(A) p_y)
print: {
    // SCREEN[0] = p.x
    // [14] *((const nomodify byte*) SCREEN) ← (byte) print::p_x#2 -- _deref_pbuc1=vbuxx 
    stx SCREEN
    // SCREEN[1] = p.y
    // [15] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) print::p_y#2 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
    // print::@return
    // }
    // [16] return 
    rts
}
  // File Data
  __0: .byte 2, 3
  __1: .byte 4, 5

