Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte) ch#18 ← phi( _start::@1/(byte) ch#19 )
  (byte) line#17 ← phi( _start::@1/(byte) line#18 )
  call ln 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) ch#11 ← phi( main/(byte) ch#7 )
  (byte) line#9 ← phi( main/(byte) line#5 )
  (byte) line#0 ← (byte) line#9
  (byte) ch#0 ← (byte) ch#11
  (byte) ch#1 ← ++ (byte) ch#0
  call ln 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) ch#12 ← phi( main::@1/(byte) ch#7 )
  (byte) line#10 ← phi( main::@1/(byte) line#5 )
  (byte) line#1 ← (byte) line#10
  (byte) ch#2 ← (byte) ch#12
  (byte) ch#3 ← ++ (byte) ch#2
  call ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) ch#13 ← phi( main::@2/(byte) ch#7 )
  (byte) line#11 ← phi( main::@2/(byte) line#5 )
  (byte) line#2 ← (byte) line#11
  (byte) ch#4 ← (byte) ch#13
  *((const byte*) SCREEN) ← (byte) ch#4
  (byte*~) main::$3 ← (const byte*) SCREEN + (number) $28
  *((byte*~) main::$3) ← (byte) line#2
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte) ch#14 ← phi( main::@3/(byte) ch#4 )
  (byte) line#12 ← phi( main::@3/(byte) line#2 )
  (byte) line#3 ← (byte) line#12
  (byte) ch#5 ← (byte) ch#14
  return 
  to:@return

(void()) ln()
ln: scope:[ln]  from main main::@1 main::@2
  (byte) line#13 ← phi( main/(byte) line#17 main::@1/(byte) line#0 main::@2/(byte) line#1 )
  (number~) ln::$0 ← (byte) line#13 + (number) 2
  (byte) line#4 ← (number~) ln::$0
  (byte) ch#6 ← (byte) line#4
  to:ln::@return
ln::@return: scope:[ln]  from ln
  (byte) ch#15 ← phi( ln/(byte) ch#6 )
  (byte) line#14 ← phi( ln/(byte) line#4 )
  (byte) line#5 ← (byte) line#14
  (byte) ch#7 ← (byte) ch#15
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte) line#6 ← (byte) $40
  (byte) ch#8 ← (byte) line#6
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte) ch#19 ← phi( _start::_init1/(byte) ch#8 )
  (byte) line#18 ← phi( _start::_init1/(byte) line#6 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte) ch#16 ← phi( _start::@1/(byte) ch#5 )
  (byte) line#15 ← phi( _start::@1/(byte) line#3 )
  (byte) line#7 ← (byte) line#15
  (byte) ch#9 ← (byte) ch#16
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte) ch#17 ← phi( _start::@2/(byte) ch#9 )
  (byte) line#16 ← phi( _start::@2/(byte) line#7 )
  (byte) line#8 ← (byte) line#16
  (byte) ch#10 ← (byte) ch#17
  return 
  to:@return

SYMBOL TABLE SSA
(const byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(byte) ch
(byte) ch#0
(byte) ch#1
(byte) ch#10
(byte) ch#11
(byte) ch#12
(byte) ch#13
(byte) ch#14
(byte) ch#15
(byte) ch#16
(byte) ch#17
(byte) ch#18
(byte) ch#19
(byte) ch#2
(byte) ch#3
(byte) ch#4
(byte) ch#5
(byte) ch#6
(byte) ch#7
(byte) ch#8
(byte) ch#9
(byte) line
(byte) line#0
(byte) line#1
(byte) line#10
(byte) line#11
(byte) line#12
(byte) line#13
(byte) line#14
(byte) line#15
(byte) line#16
(byte) line#17
(byte) line#18
(byte) line#2
(byte) line#3
(byte) line#4
(byte) line#5
(byte) line#6
(byte) line#7
(byte) line#8
(byte) line#9
(void()) ln()
(number~) ln::$0
(label) ln::@return
(void()) main()
(byte*~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return

Adding number conversion cast (unumber) $28 in (byte*~) main::$3 ← (const byte*) SCREEN + (number) $28
Adding number conversion cast (unumber) 2 in (number~) ln::$0 ← (byte) line#13 + (number) 2
Adding number conversion cast (unumber) ln::$0 in (number~) ln::$0 ← (byte) line#13 + (unumber)(number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) ln::$0 ← (byte) line#13 + (byte) 2
Alias line#0 = line#9 
Alias ch#0 = ch#11 
Alias line#1 = line#10 
Alias ch#12 = ch#2 
Alias line#11 = line#2 line#12 line#3 
Alias ch#13 = ch#4 ch#14 ch#5 
Alias line#14 = line#4 ln::$0 ch#6 ch#15 line#5 ch#7 
Alias line#18 = ch#8 line#6 ch#19 
Alias line#15 = line#7 line#16 line#8 
Alias ch#10 = ch#9 ch#16 ch#17 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) line#17 (byte) line#18
Identical Phi Values (byte) ch#18 (byte) line#18
Identical Phi Values (byte) line#0 (byte) line#14
Identical Phi Values (byte) ch#0 (byte) line#14
Identical Phi Values (byte) line#1 (byte) line#14
Identical Phi Values (byte) ch#12 (byte) line#14
Identical Phi Values (byte) line#11 (byte) line#14
Identical Phi Values (byte) ch#13 (byte) line#14
Identical Phi Values (byte) line#15 (byte) line#11
Identical Phi Values (byte) ch#10 (byte) ch#13
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [10] (byte*~) main::$3 ← (const byte*) SCREEN + (byte) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$3 = SCREEN+$28
Constant (const byte) line#18 = $40
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused variable (byte) ch#1 and assignment [1] (byte) ch#1 ← ++ (byte) line#14
Eliminating unused variable (byte) ch#3 and assignment [3] (byte) ch#3 ← ++ (byte) line#14
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte) line#18
Constant inlined line#18 = (byte) $40
Constant inlined main::$3 = (const byte*) SCREEN+(byte) $28
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to ln:1 ln:3 ln:5 

Created 1 initial phi equivalence classes
Coalesced [2] line#19 ← line#14
Coalesced (already) [4] line#20 ← line#14
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call ln 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call ln 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] *((const byte*) SCREEN) ← (byte) line#14
  [7] *((const byte*) SCREEN+(byte) $28) ← (byte) line#14
  to:main::@return
main::@return: scope:[main]  from main::@3
  [8] return 
  to:@return

(void()) ln()
ln: scope:[ln]  from main main::@1 main::@2
  [9] (byte) line#13 ← phi( main/(byte) $40 main::@1/(byte) line#14 main::@2/(byte) line#14 )
  [10] (byte) line#14 ← (byte) line#13 + (byte) 2
  to:ln::@return
ln::@return: scope:[ln]  from ln
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) ch
(byte) line
(byte) line#13 15.0
(byte) line#14 2.375
(void()) ln()
(void()) main()

Initial phi equivalence classes
[ line#13 line#14 ]
Complete equivalence classes
[ line#13 line#14 ]
Allocated zp[1]:2 [ line#13 line#14 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label line = 2
  // main
main: {
    // [1] call ln 
    // [9] phi from main to ln [phi:main->ln]
  ln_from_main:
    // [9] phi (byte) line#13 = (byte) $40 [phi:main->ln#0] -- vbuz1=vbuc1 
    lda #$40
    sta.z line
    jsr ln
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call ln 
    // [9] phi from main::@1 to ln [phi:main::@1->ln]
  ln_from___b1:
    // [9] phi (byte) line#13 = (byte) line#14 [phi:main::@1->ln#0] -- register_copy 
    jsr ln
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call ln 
    // [9] phi from main::@2 to ln [phi:main::@2->ln]
  ln_from___b2:
    // [9] phi (byte) line#13 = (byte) line#14 [phi:main::@2->ln#0] -- register_copy 
    jsr ln
    jmp __b3
    // main::@3
  __b3:
    // [6] *((const byte*) SCREEN) ← (byte) line#14 -- _deref_pbuc1=vbuz1 
    lda.z line
    sta SCREEN
    // [7] *((const byte*) SCREEN+(byte) $28) ← (byte) line#14 -- _deref_pbuc1=vbuz1 
    lda.z line
    sta SCREEN+$28
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // ln
ln: {
    // [10] (byte) line#14 ← (byte) line#13 + (byte) 2 -- vbuz1=vbuz1_plus_2 
    lda.z line
    clc
    adc #2
    sta.z line
    jmp __breturn
    // ln::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ line#13 line#14 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 17.38: zp[1]:2 [ line#13 line#14 ] 
Uplift Scope [main] 
Uplift Scope [ln] 

Uplifting [] best 59 combination reg byte a [ line#13 line#14 ] 
Uplifting [main] best 59 combination 
Uplifting [ln] best 59 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] call ln 
    // [9] phi from main to ln [phi:main->ln]
  ln_from_main:
    // [9] phi (byte) line#13 = (byte) $40 [phi:main->ln#0] -- vbuaa=vbuc1 
    lda #$40
    jsr ln
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call ln 
    // [9] phi from main::@1 to ln [phi:main::@1->ln]
  ln_from___b1:
    // [9] phi (byte) line#13 = (byte) line#14 [phi:main::@1->ln#0] -- register_copy 
    jsr ln
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call ln 
    // [9] phi from main::@2 to ln [phi:main::@2->ln]
  ln_from___b2:
    // [9] phi (byte) line#13 = (byte) line#14 [phi:main::@2->ln#0] -- register_copy 
    jsr ln
    jmp __b3
    // main::@3
  __b3:
    // [6] *((const byte*) SCREEN) ← (byte) line#14 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [7] *((const byte*) SCREEN+(byte) $28) ← (byte) line#14 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$28
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // ln
ln: {
    // [10] (byte) line#14 ← (byte) line#13 + (byte) 2 -- vbuaa=vbuaa_plus_2 
    clc
    adc #2
    jmp __breturn
    // ln::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction ln_from___b1:
Removing instruction __b2_from___b1:
Removing instruction ln_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction ln_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte*) SCREEN = (byte*) 1024
(byte) ch
(byte) line
(byte) line#13 reg byte a 15.0
(byte) line#14 reg byte a 2.375
(void()) ln()
(label) ln::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return

reg byte a [ line#13 line#14 ]


FINAL ASSEMBLER
Score: 44

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // ln()
    // [1] call ln 
    // [9] phi from main to ln [phi:main->ln]
    // [9] phi (byte) line#13 = (byte) $40 [phi:main->ln#0] -- vbuaa=vbuc1 
    lda #$40
    jsr ln
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // ln()
    // [3] call ln 
    // [9] phi from main::@1 to ln [phi:main::@1->ln]
    // [9] phi (byte) line#13 = (byte) line#14 [phi:main::@1->ln#0] -- register_copy 
    jsr ln
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // ln()
    // [5] call ln 
    // [9] phi from main::@2 to ln [phi:main::@2->ln]
    // [9] phi (byte) line#13 = (byte) line#14 [phi:main::@2->ln#0] -- register_copy 
    jsr ln
    // main::@3
    // *SCREEN = ch
    // [6] *((const byte*) SCREEN) ← (byte) line#14 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // *(SCREEN+40) = line
    // [7] *((const byte*) SCREEN+(byte) $28) ← (byte) line#14 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$28
    // main::@return
    // }
    // [8] return 
    rts
}
  // ln
ln: {
    // line + $2
    // [10] (byte) line#14 ← (byte) line#13 + (byte) 2 -- vbuaa=vbuaa_plus_2 
    clc
    adc #2
    // ln::@return
    // }
    // [11] return 
    rts
}
  // File Data

