constant byte* HEX[]  = "0123456789abcdef"
constant byte* INPUT[]  = { 2, 1, 3, 4, 6, 5 }
constant byte SIZEOF_BYTE = 1
constant word STACK_BASE = $103
void __start()
void cout(byte cout::c)
byte cout::c
byte cout::c#0 reg byte x 20002.0
byte cout::c#1 reg byte x 20002.0
byte cout::c#7 reg byte x 120003.0
void exec(byte(byte,byte)* exec::collect)
byte(byte,byte)* exec::collect
byte(byte,byte)* exec::collect#10 collect zp[2]:3
byte exec::i
byte exec::i#1 i zp[1]:5 2002.0
byte exec::i#2 i zp[1]:5 400.4
byte exec::out
byte exec::out#0 out zp[1]:6 202.0
byte exec::out#1 out zp[1]:6 500.5
byte exec::out#2 out zp[1]:6 1051.5
byte idx
byte idx#0 idx zp[1]:7 5352.761904761905
byte idx#27 idx zp[1]:7 110654.0
byte idx#53 idx zp[1]:7 3701.0
byte idx#54 idx zp[1]:7 67.33333333333333
byte* line loadstore zp[2]:8 1757.982456140351
void ln()
void main()
byte main::i
byte main::i#1 i zp[1]:2 202.0
byte main::i#2 i zp[1]:2 67.33333333333333
__stackcall byte max(byte max::a , byte max::b)
constant byte max::OFFSET_STACK_A = 1
constant byte max::OFFSET_STACK_B = 0
constant byte max::OFFSET_STACK_RETURN_1 = 1
byte max::a
byte max::a#0 a zp[1]:11 2.0
byte max::b
byte max::b#0 reg byte a 3.0
byte max::return
byte max::return#2 reg byte a 6.0
byte max::return#4 reg byte a 4.0
__stackcall byte min(byte min::a , byte min::b)
constant byte min::OFFSET_STACK_A = 1
constant byte min::OFFSET_STACK_B = 0
constant byte min::OFFSET_STACK_RETURN_1 = 1
byte min::a
byte min::a#0 reg byte y 2.0
byte min::b
byte min::b#0 reg byte a 3.0
byte min::return
byte min::return#2 reg byte a 6.0
byte min::return#4 reg byte a 4.0
void print(byte print::i)
byte~ print::$0 reg byte a 20002.0
byte~ print::$2 reg byte a 20002.0
byte print::i
byte print::i#0 i zp[1]:6 202.0
byte print::i#1 i zp[1]:6 2002.0
byte print::i#2 i zp[1]:6 5276.0
__stackcall byte sum(byte sum::a , byte sum::b)
constant byte sum::OFFSET_STACK_A = 1
constant byte sum::OFFSET_STACK_B = 0
constant byte sum::OFFSET_STACK_RETURN_1 = 1
byte sum::a
byte sum::a#0 a zp[1]:12 2.0
byte sum::b
byte sum::b#0 reg byte a 4.0
byte sum::return
byte sum::return#0 reg byte a 4.0
__stackcall byte xor(byte xor::a , byte xor::b)
constant byte xor::OFFSET_STACK_A = 1
constant byte xor::OFFSET_STACK_B = 0
constant byte xor::OFFSET_STACK_RETURN_1 = 1
byte xor::a
byte xor::a#0 a zp[1]:10 2.0
byte xor::b
byte xor::b#0 reg byte a 4.0
byte xor::return
byte xor::return#0 reg byte a 4.0

reg byte a [ min::return#2 min::return#4 min::b#0 ]
reg byte a [ max::return#2 max::return#4 max::b#0 ]
zp[1]:2 [ main::i#2 main::i#1 ]
zp[2]:3 [ exec::collect#10 ]
zp[1]:5 [ exec::i#2 exec::i#1 ]
zp[1]:6 [ exec::out#2 exec::out#0 exec::out#1 print::i#2 print::i#1 print::i#0 ]
reg byte x [ cout::c#7 cout::c#0 cout::c#1 ]
zp[1]:7 [ idx#27 idx#53 idx#54 idx#0 ]
zp[2]:8 [ line ]
zp[1]:10 [ xor::a#0 ]
reg byte a [ xor::b#0 ]
reg byte a [ xor::return#0 ]
reg byte y [ min::a#0 ]
zp[1]:11 [ max::a#0 ]
zp[1]:12 [ sum::a#0 ]
reg byte a [ sum::b#0 ]
reg byte a [ sum::return#0 ]
reg byte a [ print::$0 ]
reg byte a [ print::$2 ]
