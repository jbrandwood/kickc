
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call malloc 
  to:main::@2
main::@2: scope:[main]  from main
  [2] (void*) main::buf1#0 ← (void*)(byte*) malloc::mem#0
  [3] call malloc 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [4] (void*) main::buf2#0 ← (void*)(byte*) malloc::mem#0
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@3
  [5] (byte) main::i#2 ← phi( main::@1/(byte) main::i#1 main::@3/(byte) 0 )
  [6] *((byte*)(void*) main::buf1#0 + (byte) main::i#2) ← (byte) main::i#2
  [7] (byte~) main::$4 ← (byte) $ff - (byte) main::i#2
  [8] *((byte*)(void*) main::buf2#0 + (byte) main::i#2) ← (byte~) main::$4
  [9] (byte) main::i#1 ← ++ (byte) main::i#2
  [10] if((byte) main::i#1!=(byte) $64) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@1
  [11] *((const byte*) main::screen) ← *((byte*)(void*) main::buf1#0)
  [12] *((const byte*) main::screen+(byte) 1) ← *((byte*)(void*) main::buf2#0)
  to:main::@return
main::@return: scope:[main]  from main::@4
  [13] return 
  to:@return

(void*()) malloc((word) malloc::size)
malloc: scope:[malloc]  from main main::@2
  [14] (byte*) heap_head#8 ← phi( main/(const byte*) HEAP_TOP main::@2/(byte*) heap_head#0 )
  [15] (byte*) malloc::mem#0 ← (byte*) heap_head#8 - (byte) $64
  [16] (byte*) heap_head#0 ← (byte*) malloc::mem#0
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  [17] return 
  to:@return
