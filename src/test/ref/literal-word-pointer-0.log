
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start
  (byte*) print::str#0 ← (const byte*) main::str
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) print((byte*) print::str)
print: scope:[print]  from main
  (byte*) print::str#1 ← phi( main/(byte*) print::str#0 )
  *((byte**)(number) $80) ← (byte*)(byte*) print::str#1
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) __start()
(label) __start::@1
(label) __start::@return
(void()) main()
(label) main::@1
(label) main::@return
(const byte*) main::str[(byte) 4]  = (byte*) "qwe"
(void()) print((byte*) print::str)
(label) print::@return
(byte*) print::str
(byte*) print::str#0
(byte*) print::str#1

Simplifying constant integer cast (byte*) print::str#1
Simplifying constant pointer cast (byte**) 128
Successful SSA optimization PassNCastSimplification
Identical Phi Values (byte*) print::str#1 (byte*) print::str#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte*) print::str#0 = main::str
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined print::str#0 = (const byte*) main::str
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [main] to print:1 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) main::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print 
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return

(void()) print((byte*) print::str)
print: scope:[print]  from main
  [3] *((byte**) 128) ← (const byte*) main::str
  to:print::@return
print::@return: scope:[print]  from print
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(void()) print((byte*) print::str)
(byte*) print::str

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests assigning a literal word pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // [1] call print 
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
    str: .text "qwe"
    .byte 0
}
  // print
print: {
    // [3] *((byte**) 128) ← (const byte*) main::str -- _deref_pptc1=pbuc2 
    lda #<main.str
    sta $80
    lda #>main.str
    sta $80+1
    jmp __breturn
    // print::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] *((byte**) 128) ← (const byte*) main::str [ ] ( print:1 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [print] 
Uplift Scope [] 

Uplifting [main] best 36 combination 
Uplifting [print] best 36 combination 
Uplifting [] best 36 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests assigning a literal word pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // [1] call print 
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
    str: .text "qwe"
    .byte 0
}
  // print
print: {
    // [3] *((byte**) 128) ← (const byte*) main::str -- _deref_pptc1=pbuc2 
    lda #<main.str
    sta $80
    lda #>main.str
    sta $80+1
    jmp __breturn
    // print::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(const byte*) main::str[(byte) 4]  = (byte*) "qwe"
(void()) print((byte*) print::str)
(label) print::@return
(byte*) print::str



FINAL ASSEMBLER
Score: 30

  // File Comments
// Tests assigning a literal word pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // print("qwe")
    // [1] call print 
    jsr print
    // main::@return
    // }
    // [2] return 
    rts
    str: .text "qwe"
    .byte 0
}
  // print
print: {
    // *(char**)0x80 = (char*)str
    // [3] *((byte**) 128) ← (const byte*) main::str -- _deref_pptc1=pbuc2 
    lda #<main.str
    sta $80
    lda #>main.str
    sta $80+1
    // print::@return
    // }
    // [4] return 
    rts
}
  // File Data

