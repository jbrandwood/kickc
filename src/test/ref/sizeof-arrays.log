
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::idx#0 = 0
  main::$0 = sizeof  main::ba
  main::$1 = main::$0 / SIZEOF_BYTE
  main::$2 = '0' + main::$1
  SCREEN[main::idx#0] = main::$2
  main::idx#1 = ++ main::idx#0
  main::$3 = sizeof  main::wa
  main::$4 = main::$3 / SIZEOF_WORD
  main::$5 = '0' + main::$4
  SCREEN[main::idx#1] = main::$5
  main::idx#2 = ++ main::idx#1
  main::$6 = sizeof  main::bb
  main::$7 = main::$6 / SIZEOF_BYTE
  main::$8 = '0' + main::$7
  SCREEN[main::idx#2] = main::$8
  main::idx#3 = ++ main::idx#2
  main::$9 = sizeof  main::wb
  main::$10 = main::$9 / SIZEOF_WORD
  main::$11 = '0' + main::$10
  SCREEN[main::idx#3] = main::$11
  main::idx#4 = ++ main::idx#3
  main::$12 = sizeof  main::sa
  main::$13 = main::$12 / SIZEOF_BYTE
  main::$14 = '0' + main::$13
  SCREEN[main::idx#4] = main::$14
  main::idx#5 = ++ main::idx#4
  main::$15 = sizeof  main::sb
  main::$16 = main::$15 / SIZEOF_BYTE
  main::$17 = '0' + main::$16
  SCREEN[main::idx#5] = main::$17
  main::idx#6 = ++ main::idx#5
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
const byte SIZEOF_BYTE = 1
const byte SIZEOF_WORD = 2
void __start()
void main()
byte~ main::$0
byte~ main::$1
byte~ main::$10
byte~ main::$11
byte~ main::$12
byte~ main::$13
byte~ main::$14
byte~ main::$15
byte~ main::$16
byte~ main::$17
byte~ main::$2
byte~ main::$3
byte~ main::$4
byte~ main::$5
byte~ main::$6
byte~ main::$7
byte~ main::$8
byte~ main::$9
const byte* main::ba[3]  = { fill( 3, 0) }
const byte* main::bb[main::sz+2]  = { fill( main::sz+2, 0) }
byte main::idx
byte main::idx#0
byte main::idx#1
byte main::idx#2
byte main::idx#3
byte main::idx#4
byte main::idx#5
byte main::idx#6
const byte* main::sa[]  = "camelot"
const byte* main::sb[]  = { 'a', 'b', 'c', 0 }
const nomodify byte main::sz = 7
const word* main::wa[3]  = { fill( 3, 0) }
const word* main::wb[]  = { 1, 2, 3, 4 }

Adding number conversion cast (unumber) 2 in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [1] main::$0 = sizeof  main::ba
Constant right-side identified [6] main::$3 = sizeof  main::wa
Constant right-side identified [11] main::$6 = sizeof  main::bb
Constant right-side identified [16] main::$9 = sizeof  main::wb
Constant right-side identified [21] main::$12 = sizeof  main::sa
Constant right-side identified [26] main::$15 = sizeof  main::sb
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#0 = 0
Constant main::$0 = sizeof main::ba
Constant main::$3 = sizeof main::wa
Constant main::$6 = sizeof main::bb
Constant main::$9 = sizeof main::wb
Constant main::$12 = sizeof main::sa
Constant main::$15 = sizeof main::sb
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [4] SCREEN[main::idx#0] = main::$2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable main::idx#6 and assignment [23] main::idx#6 = ++ main::idx#5
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Resolving array sizeof() sizeof main::ba
Resolving array sizeof() sizeof main::wa
Resolving array sizeof() sizeof main::bb
Resolving array sizeof() sizeof main::wb
Resolving string sizeof() sizeof main::sa
Resolving array sizeof() sizeof main::sb
Successful SSA optimization PassNSizeOfSimplification
Constant right-side identified [0] main::$1 = main::$0 / SIZEOF_BYTE
Constant right-side identified [3] main::idx#1 = ++ main::idx#0
Constant right-side identified [4] main::$4 = main::$3 / SIZEOF_WORD
Constant right-side identified [8] main::$7 = main::$6 / SIZEOF_BYTE
Constant right-side identified [12] main::$10 = main::$9 / SIZEOF_WORD
Constant right-side identified [16] main::$13 = main::$12 / SIZEOF_BYTE
Constant right-side identified [20] main::$16 = main::$15 / SIZEOF_BYTE
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$1 = main::$0/SIZEOF_BYTE
Constant main::idx#1 = ++main::idx#0
Constant main::$4 = main::$3/SIZEOF_WORD
Constant main::$7 = main::$6/SIZEOF_BYTE
Constant main::$10 = main::$9/SIZEOF_WORD
Constant main::$13 = main::$12/SIZEOF_BYTE
Constant main::$16 = main::$15/SIZEOF_BYTE
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant main::ba
Eliminating unused constant main::wa
Eliminating unused constant main::bb
Eliminating unused constant main::wb
Eliminating unused constant main::sa
Eliminating unused constant main::sb
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 3 in 
Adding number conversion cast (unumber) 3 in 
Adding number conversion cast (unumber) 4 in 
Adding number conversion cast (unumber) 8 in 
Adding number conversion cast (unumber) 4 in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] main::$2 = '0' + main::$1
Constant right-side identified [2] main::$5 = '0' + main::$4
Constant right-side identified [4] main::idx#2 = ++ main::idx#1
Constant right-side identified [5] main::$8 = '0' + main::$7
Constant right-side identified [8] main::$11 = '0' + main::$10
Constant right-side identified [11] main::$14 = '0' + main::$13
Constant right-side identified [14] main::$17 = '0' + main::$16
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$2 = '0'+main::$1
Constant main::$5 = '0'+main::$4
Constant main::idx#2 = ++main::idx#1
Constant main::$8 = '0'+main::$7
Constant main::$11 = '0'+main::$10
Constant main::$14 = '0'+main::$13
Constant main::$17 = '0'+main::$16
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [3] main::idx#3 = ++ main::idx#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#3 = ++main::idx#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [4] main::idx#4 = ++ main::idx#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [5] main::idx#5 = ++ main::idx#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings main::idx#0
Inlining constant with different constant siblings main::idx#1
Inlining constant with different constant siblings main::idx#2
Inlining constant with different constant siblings main::idx#3
Inlining constant with different constant siblings main::idx#4
Inlining constant with different constant siblings main::idx#5
Constant inlined main::$12 = 8*SIZEOF_BYTE
Constant inlined main::$13 = 8*SIZEOF_BYTE/SIZEOF_BYTE
Constant inlined main::$14 = '0'+8*SIZEOF_BYTE/SIZEOF_BYTE
Constant inlined main::$15 = 4*SIZEOF_BYTE
Constant inlined main::$10 = 4*SIZEOF_WORD/SIZEOF_WORD
Constant inlined main::$11 = '0'+4*SIZEOF_WORD/SIZEOF_WORD
Constant inlined main::idx#0 = 0
Constant inlined main::idx#1 = ++0
Constant inlined main::idx#2 = ++++0
Constant inlined main::$1 = 3*SIZEOF_BYTE/SIZEOF_BYTE
Constant inlined main::$16 = 4*SIZEOF_BYTE/SIZEOF_BYTE
Constant inlined main::idx#3 = ++++++0
Constant inlined main::$2 = '0'+3*SIZEOF_BYTE/SIZEOF_BYTE
Constant inlined main::$17 = '0'+4*SIZEOF_BYTE/SIZEOF_BYTE
Constant inlined main::idx#4 = ++++++++0
Constant inlined main::idx#5 = ++++++++++0
Constant inlined main::$0 = 3*SIZEOF_BYTE
Constant inlined main::$5 = '0'+3*SIZEOF_WORD/SIZEOF_WORD
Constant inlined main::$6 = main::sz+2*SIZEOF_BYTE
Constant inlined main::$3 = 3*SIZEOF_WORD
Constant inlined main::$4 = 3*SIZEOF_WORD/SIZEOF_WORD
Constant inlined main::$9 = 4*SIZEOF_WORD
Constant inlined main::$7 = main::sz+2*SIZEOF_BYTE/SIZEOF_BYTE
Constant inlined main::$8 = '0'+main::sz+2*SIZEOF_BYTE/SIZEOF_BYTE
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+++0)
Consolidated array index constant in *(SCREEN+++++0)
Consolidated array index constant in *(SCREEN+++++++0)
Consolidated array index constant in *(SCREEN+++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Successful SSA optimization Pass2ConstantSimplification
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *SCREEN = '0'+3*SIZEOF_BYTE/SIZEOF_BYTE
  [1] *(SCREEN+1) = '0'+3*SIZEOF_WORD/SIZEOF_WORD
  [2] *(SCREEN+2) = '0'+main::sz+2*SIZEOF_BYTE/SIZEOF_BYTE
  [3] *(SCREEN+3) = '0'+4*SIZEOF_WORD/SIZEOF_WORD
  [4] *(SCREEN+4) = '0'+8*SIZEOF_BYTE/SIZEOF_BYTE
  [5] *(SCREEN+5) = '0'+4*SIZEOF_BYTE/SIZEOF_BYTE
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::idx

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *SCREEN = '0'+3*SIZEOF_BYTE/SIZEOF_BYTE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(SCREEN+1) = '0'+3*SIZEOF_WORD/SIZEOF_WORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *(SCREEN+2) = '0'+main::sz+2*SIZEOF_BYTE/SIZEOF_BYTE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *(SCREEN+3) = '0'+4*SIZEOF_WORD/SIZEOF_WORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *(SCREEN+4) = '0'+8*SIZEOF_BYTE/SIZEOF_BYTE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *(SCREEN+5) = '0'+4*SIZEOF_BYTE/SIZEOF_BYTE [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests the sizeof() operator on arrays
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sizeof-arrays.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_WORD = 2
  .label SCREEN = $400
.segment Code
  // main
main: {
    .const sz = 7
    // [0] *SCREEN = '0'+3*SIZEOF_BYTE/SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN
    // [1] *(SCREEN+1) = '0'+3*SIZEOF_WORD/SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_WORD/SIZEOF_WORD
    sta SCREEN+1
    // [2] *(SCREEN+2) = '0'+main::sz+2*SIZEOF_BYTE/SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+(sz+2)*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+2
    // [3] *(SCREEN+3) = '0'+4*SIZEOF_WORD/SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_WORD/SIZEOF_WORD
    sta SCREEN+3
    // [4] *(SCREEN+4) = '0'+8*SIZEOF_BYTE/SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+8*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+4
    // [5] *(SCREEN+5) = '0'+4*SIZEOF_BYTE/SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+5
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
const byte SIZEOF_BYTE = 1
const byte SIZEOF_WORD = 2
void main()
byte main::idx
const nomodify byte main::sz = 7



FINAL ASSEMBLER
Score: 42

  // File Comments
// Tests the sizeof() operator on arrays
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sizeof-arrays.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_WORD = 2
  .label SCREEN = $400
.segment Code
  // main
main: {
    .const sz = 7
    // SCREEN[idx++] = '0'+sizeof(ba)/sizeof(byte)
    // [0] *SCREEN = '0'+3*SIZEOF_BYTE/SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN
    // SCREEN[idx++] = '0'+sizeof(wa)/sizeof(word)
    // [1] *(SCREEN+1) = '0'+3*SIZEOF_WORD/SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_WORD/SIZEOF_WORD
    sta SCREEN+1
    // SCREEN[idx++] = '0'+sizeof(bb)/sizeof(byte)
    // [2] *(SCREEN+2) = '0'+main::sz+2*SIZEOF_BYTE/SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+(sz+2)*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+2
    // SCREEN[idx++] = '0'+sizeof(wb)/sizeof(word)
    // [3] *(SCREEN+3) = '0'+4*SIZEOF_WORD/SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_WORD/SIZEOF_WORD
    sta SCREEN+3
    // SCREEN[idx++] = '0'+sizeof(sa)/sizeof(byte)
    // [4] *(SCREEN+4) = '0'+8*SIZEOF_BYTE/SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+8*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+4
    // SCREEN[idx++] = '0'+sizeof(sb)/sizeof(byte)
    // [5] *(SCREEN+5) = '0'+4*SIZEOF_BYTE/SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+5
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

