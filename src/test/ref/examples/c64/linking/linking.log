Loading link script "linking.ld"
Resolved forward reference base to base
Resolved forward reference base to base
Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  base[main::i#2] = main::i#2
  main::i#1 = main::i#2 + rangenext(0,$ff)
  main::$0 = main::i#1 != rangelast(0,$ff)
  if(main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  if(true) goto main::@3
  to:main::@return
main::@3: scope:[main]  from main::@2
  fillscreen::c#0 = *BG_COLOR
  call fillscreen
  to:main::@4
main::@4: scope:[main]  from main::@3
  *BG_COLOR = ++ *BG_COLOR
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void fillscreen(char c)
fillscreen: scope:[fillscreen]  from main::@3
  fillscreen::c#3 = phi( main::@3/fillscreen::c#0 )
  fillscreen::i#0 = 0
  fillscreen::screen#0 = SCREEN
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen fillscreen::@2
  fillscreen::i#3 = phi( fillscreen/fillscreen::i#0, fillscreen::@2/fillscreen::i#1 )
  fillscreen::c#2 = phi( fillscreen/fillscreen::c#3, fillscreen::@2/fillscreen::c#1 )
  fillscreen::screen#2 = phi( fillscreen/fillscreen::screen#0, fillscreen::@2/fillscreen::screen#1 )
  fillscreen::$0 = SCREEN + $3e8
  fillscreen::$1 = fillscreen::screen#2 < fillscreen::$0
  if(fillscreen::$1) goto fillscreen::@2
  to:fillscreen::@return
fillscreen::@2: scope:[fillscreen]  from fillscreen::@1
  fillscreen::screen#3 = phi( fillscreen::@1/fillscreen::screen#2 )
  fillscreen::i#2 = phi( fillscreen::@1/fillscreen::i#3 )
  fillscreen::c#1 = phi( fillscreen::@1/fillscreen::c#2 )
  fillscreen::$2 = fillscreen::c#1 + base[fillscreen::i#2]
  *fillscreen::screen#3 = fillscreen::$2
  fillscreen::i#1 = ++ fillscreen::i#2
  fillscreen::screen#1 = ++ fillscreen::screen#3
  to:fillscreen::@1
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant char *BG_COLOR = (char *)$d021
__constant char *SCREEN = (char *)$400
void __start()
__constant char base[$100] = { fill( $100, 0) }
void fillscreen(char c)
char *fillscreen::$0
bool fillscreen::$1
char fillscreen::$2
char fillscreen::c
char fillscreen::c#0
char fillscreen::c#1
char fillscreen::c#2
char fillscreen::c#3
char fillscreen::i
char fillscreen::i#0
char fillscreen::i#1
char fillscreen::i#2
char fillscreen::i#3
char *fillscreen::screen
char *fillscreen::screen#0
char *fillscreen::screen#1
char *fillscreen::screen#2
char *fillscreen::screen#3
void main()
bool main::$0
char main::i
char main::i#0
char main::i#1
char main::i#2

Adding number conversion cast (unumber) $3e8 in fillscreen::$0 = SCREEN + $3e8
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 53281
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $3e8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (unsigned int) $3e8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias fillscreen::c#1 = fillscreen::c#2 
Alias fillscreen::i#2 = fillscreen::i#3 
Alias fillscreen::screen#2 = fillscreen::screen#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values fillscreen::c#3 fillscreen::c#0
Identical Phi Values fillscreen::c#1 fillscreen::c#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$0 [5] if(main::i#1!=rangelast(0,$ff)) goto main::@1
Simple Condition fillscreen::$1 [17] if(fillscreen::screen#2<fillscreen::$0) goto fillscreen::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [15] fillscreen::$0 = SCREEN + $3e8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#0 = 0
Constant fillscreen::i#0 = 0
Constant fillscreen::screen#0 = SCREEN
Constant fillscreen::$0 = SCREEN+$3e8
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [6] if(true) goto main::@3
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [3] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [5] if(main::i#1!=rangelast(0,$ff)) goto main::@1 to 0
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [3] if(main::i#1!=0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Inlining constant with var siblings fillscreen::i#0
Inlining constant with var siblings fillscreen::screen#0
Constant inlined fillscreen::i#0 = 0
Constant inlined main::i#0 = 0
Constant inlined fillscreen::screen#0 = SCREEN
Constant inlined fillscreen::$0 = SCREEN+$3e8
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (unsigned int) $100
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@5(between main::@1 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of fillscreen
CALL GRAPH
Calls in [main] to fillscreen:7 

Created 3 initial phi equivalence classes
Coalesced [9] main::i#3 = main::i#1
Coalesced [18] fillscreen::screen#4 = fillscreen::screen#1
Coalesced [19] fillscreen::i#4 = fillscreen::i#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@2
Culled Empty Block label main::@5
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of fillscreen

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] base[main::i#2] = main::i#2
  [3] main::i#1 = ++ main::i#2
  [4] if(main::i#1!=0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [5] fillscreen::c#0 = *BG_COLOR
  [6] call fillscreen
  to:main::@3
main::@3: scope:[main]  from main::@2
  [7] *BG_COLOR = ++ *BG_COLOR
  to:main::@2

void fillscreen(char c)
fillscreen: scope:[fillscreen]  from main::@2
  [8] phi()
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen fillscreen::@2
  [9] fillscreen::i#2 = phi( fillscreen/0, fillscreen::@2/fillscreen::i#1 )
  [9] fillscreen::screen#2 = phi( fillscreen/SCREEN, fillscreen::@2/fillscreen::screen#1 )
  [10] if(fillscreen::screen#2<SCREEN+$3e8) goto fillscreen::@2
  to:fillscreen::@return
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  [11] return 
  to:@return
fillscreen::@2: scope:[fillscreen]  from fillscreen::@1
  [12] fillscreen::$2 = fillscreen::c#0 + base[fillscreen::i#2]
  [13] *fillscreen::screen#2 = fillscreen::$2
  [14] fillscreen::i#1 = ++ fillscreen::i#2
  [15] fillscreen::screen#1 = ++ fillscreen::screen#2
  to:fillscreen::@1


VARIABLE REGISTER WEIGHTS
void fillscreen(char c)
char fillscreen::$2 // 20002.0
char fillscreen::c
char fillscreen::c#0 // 1251.5
char fillscreen::i
char fillscreen::i#1 // 10001.0
char fillscreen::i#2 // 7500.75
char *fillscreen::screen
char *fillscreen::screen#1 // 20002.0
char *fillscreen::screen#2 // 8000.8
void main()
char main::i
char main::i#1 // 16.5
char main::i#2 // 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ fillscreen::screen#2 fillscreen::screen#1 ]
[ fillscreen::i#2 fillscreen::i#1 ]
Added variable fillscreen::c#0 to live range equivalence class [ fillscreen::c#0 ]
Added variable fillscreen::$2 to live range equivalence class [ fillscreen::$2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ fillscreen::screen#2 fillscreen::screen#1 ]
[ fillscreen::i#2 fillscreen::i#1 ]
[ fillscreen::c#0 ]
[ fillscreen::$2 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ fillscreen::screen#2 fillscreen::screen#1 ]
Allocated zp[1]:5 [ fillscreen::i#2 fillscreen::i#1 ]
Allocated zp[1]:6 [ fillscreen::c#0 ]
Allocated zp[1]:7 [ fillscreen::$2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [10] if(fillscreen::screen#2<SCREEN+$3e8) goto fillscreen::@2 [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 ] ( fillscreen:6 [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ fillscreen::c#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ fillscreen::i#2 fillscreen::i#1 ]
Statement [12] fillscreen::$2 = fillscreen::c#0 + base[fillscreen::i#2] [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 fillscreen::$2 ] ( fillscreen:6 [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 fillscreen::$2 ] { }  ) always clobbers reg byte a 
Statement [13] *fillscreen::screen#2 = fillscreen::$2 [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 ] ( fillscreen:6 [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:6 [ fillscreen::c#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ fillscreen::i#2 fillscreen::i#1 ]
Statement [10] if(fillscreen::screen#2<SCREEN+$3e8) goto fillscreen::@2 [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 ] ( fillscreen:6 [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 ] { }  ) always clobbers reg byte a 
Statement [12] fillscreen::$2 = fillscreen::c#0 + base[fillscreen::i#2] [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 fillscreen::$2 ] ( fillscreen:6 [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 fillscreen::$2 ] { }  ) always clobbers reg byte a 
Statement [13] *fillscreen::screen#2 = fillscreen::$2 [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 ] ( fillscreen:6 [ fillscreen::c#0 fillscreen::screen#2 fillscreen::i#2 ] { }  ) always clobbers reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ fillscreen::screen#2 fillscreen::screen#1 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ fillscreen::i#2 fillscreen::i#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[1]:6 [ fillscreen::c#0 ] : zp[1]:6 , reg byte x , 
Potential registers zp[1]:7 [ fillscreen::$2 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [fillscreen] 28,002.8: zp[2]:3 [ fillscreen::screen#2 fillscreen::screen#1 ] 20,002: zp[1]:7 [ fillscreen::$2 ] 17,501.75: zp[1]:5 [ fillscreen::i#2 fillscreen::i#1 ] 1,251.5: zp[1]:6 [ fillscreen::c#0 ] 
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [fillscreen] best 7570 combination zp[2]:3 [ fillscreen::screen#2 fillscreen::screen#1 ] reg byte a [ fillscreen::$2 ] reg byte x [ fillscreen::i#2 fillscreen::i#1 ] zp[1]:6 [ fillscreen::c#0 ] 
Uplifting [main] best 7470 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 7470 combination 
Attempting to uplift remaining variables inzp[1]:6 [ fillscreen::c#0 ]
Uplifting [fillscreen] best 7470 combination zp[1]:6 [ fillscreen::c#0 ] 
Allocated (was zp[2]:3) zp[2]:2 [ fillscreen::screen#2 fillscreen::screen#1 ]
Allocated (was zp[1]:6) zp[1]:4 [ fillscreen::c#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Example showing how to perform linking using a linker-file
// The linker file is created using KickAssembler segments.
// See the KickAssembler manual for description of the format http://theweb.dk/KickAssembler/
// Specifying the linker script file is done using the #pragma link(<file>)
// It can also be specified using kickc command line option -T <file>
  // Upstart
  .file [name="linking.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data, CodeHigh, DataHigh"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$0810]
.segmentdef Data [startAfter="Code"]
.segmentdef CodeHigh [start=$4000]
.segmentdef DataHigh [startAfter="CodeHigh"]
.segment Basic
:BasicUpstart(main)
.segment Code


  // Global Constants & labels
  .label BG_COLOR = $d021
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] base[main::i#2] = main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta base,x
    // [3] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if(main::i#1!=0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b1
    jmp __b2
    // main::@2
  __b2:
    // [5] fillscreen::c#0 = *BG_COLOR -- vbuz1=_deref_pbuc1 
    lda BG_COLOR
    sta.z fillscreen.c
    // [6] call fillscreen
    // [8] phi from main::@2 to fillscreen [phi:main::@2->fillscreen]
  fillscreen_from___b2:
    jsr fillscreen
    jmp __b3
    // main::@3
  __b3:
    // [7] *BG_COLOR = ++ *BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    jmp __b2
}
.segment CodeHigh
  // fillscreen
// void fillscreen(__zp(4) char c)
fillscreen: {
    .label c = 4
    .label screen = 2
    // [9] phi from fillscreen to fillscreen::@1 [phi:fillscreen->fillscreen::@1]
  __b1_from_fillscreen:
    // [9] phi fillscreen::i#2 = 0 [phi:fillscreen->fillscreen::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [9] phi fillscreen::screen#2 = SCREEN [phi:fillscreen->fillscreen::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z screen
    lda #>SCREEN
    sta.z screen+1
    jmp __b1
    // fillscreen::@1
  __b1:
    // [10] if(fillscreen::screen#2<SCREEN+$3e8) goto fillscreen::@2 -- pbuz1_lt_pbuc1_then_la1 
    lda.z screen+1
    cmp #>SCREEN+$3e8
    bcc __b2
    bne !+
    lda.z screen
    cmp #<SCREEN+$3e8
    bcc __b2
  !:
    jmp __breturn
    // fillscreen::@return
  __breturn:
    // [11] return 
    rts
    // fillscreen::@2
  __b2:
    // [12] fillscreen::$2 = fillscreen::c#0 + base[fillscreen::i#2] -- vbuaa=vbuz1_plus_pbuc1_derefidx_vbuxx 
    lda base,x
    clc
    adc.z c
    // [13] *fillscreen::screen#2 = fillscreen::$2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (screen),y
    // [14] fillscreen::i#1 = ++ fillscreen::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [15] fillscreen::screen#1 = ++ fillscreen::screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [9] phi from fillscreen::@2 to fillscreen::@1 [phi:fillscreen::@2->fillscreen::@1]
  __b1_from___b2:
    // [9] phi fillscreen::i#2 = fillscreen::i#1 [phi:fillscreen::@2->fillscreen::@1#0] -- register_copy 
    // [9] phi fillscreen::screen#2 = fillscreen::screen#1 [phi:fillscreen::@2->fillscreen::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment DataHigh
  base: .fill $100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction fillscreen_from___b2:
Removing instruction __b3:
Removing instruction __b1_from_fillscreen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char *BG_COLOR = (char *) 53281
__constant char *SCREEN = (char *) 1024
__constant char base[$100] = { fill( $100, 0) }
void fillscreen(char c)
char fillscreen::$2 // reg byte a 20002.0
char fillscreen::c
char fillscreen::c#0 // c zp[1]:4 1251.5
char fillscreen::i
char fillscreen::i#1 // reg byte x 10001.0
char fillscreen::i#2 // reg byte x 7500.75
char *fillscreen::screen
char *fillscreen::screen#1 // screen zp[2]:2 20002.0
char *fillscreen::screen#2 // screen zp[2]:2 8000.8
void main()
char main::i
char main::i#1 // reg byte x 16.5
char main::i#2 // reg byte x 22.0

reg byte x [ main::i#2 main::i#1 ]
zp[2]:2 [ fillscreen::screen#2 fillscreen::screen#1 ]
reg byte x [ fillscreen::i#2 fillscreen::i#1 ]
zp[1]:4 [ fillscreen::c#0 ]
reg byte a [ fillscreen::$2 ]


FINAL ASSEMBLER
Score: 6777

  // File Comments
// Example showing how to perform linking using a linker-file
// The linker file is created using KickAssembler segments.
// See the KickAssembler manual for description of the format http://theweb.dk/KickAssembler/
// Specifying the linker script file is done using the #pragma link(<file>)
// It can also be specified using kickc command line option -T <file>
  // Upstart
  .file [name="linking.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data, CodeHigh, DataHigh"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$0810]
.segmentdef Data [startAfter="Code"]
.segmentdef CodeHigh [start=$4000]
.segmentdef DataHigh [startAfter="CodeHigh"]
.segment Basic
:BasicUpstart(main)
.segment Code


  // Global Constants & labels
  .label BG_COLOR = $d021
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // base[i] = i
    // [2] base[main::i#2] = main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta base,x
    // for(char i:0..255)
    // [3] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if(main::i#1!=0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // main::@2
  __b2:
    // fillscreen(*BG_COLOR)
    // [5] fillscreen::c#0 = *BG_COLOR -- vbuz1=_deref_pbuc1 
    lda BG_COLOR
    sta.z fillscreen.c
    // [6] call fillscreen
    // [8] phi from main::@2 to fillscreen [phi:main::@2->fillscreen]
    jsr fillscreen
    // main::@3
    // (*BG_COLOR)++;
    // [7] *BG_COLOR = ++ *BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    jmp __b2
}
.segment CodeHigh
  // fillscreen
// void fillscreen(__zp(4) char c)
fillscreen: {
    .label c = 4
    .label screen = 2
    // [9] phi from fillscreen to fillscreen::@1 [phi:fillscreen->fillscreen::@1]
    // [9] phi fillscreen::i#2 = 0 [phi:fillscreen->fillscreen::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [9] phi fillscreen::screen#2 = SCREEN [phi:fillscreen->fillscreen::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z screen
    lda #>SCREEN
    sta.z screen+1
    // fillscreen::@1
  __b1:
    // for( char *screen = SCREEN; screen<SCREEN+1000; screen++)
    // [10] if(fillscreen::screen#2<SCREEN+$3e8) goto fillscreen::@2 -- pbuz1_lt_pbuc1_then_la1 
    lda.z screen+1
    cmp #>SCREEN+$3e8
    bcc __b2
    bne !+
    lda.z screen
    cmp #<SCREEN+$3e8
    bcc __b2
  !:
    // fillscreen::@return
    // }
    // [11] return 
    rts
    // fillscreen::@2
  __b2:
    // c+base[i++]
    // [12] fillscreen::$2 = fillscreen::c#0 + base[fillscreen::i#2] -- vbuaa=vbuz1_plus_pbuc1_derefidx_vbuxx 
    lda base,x
    clc
    adc.z c
    // *screen = c+base[i++]
    // [13] *fillscreen::screen#2 = fillscreen::$2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (screen),y
    // *screen = c+base[i++];
    // [14] fillscreen::i#1 = ++ fillscreen::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // for( char *screen = SCREEN; screen<SCREEN+1000; screen++)
    // [15] fillscreen::screen#1 = ++ fillscreen::screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [9] phi from fillscreen::@2 to fillscreen::@1 [phi:fillscreen::@2->fillscreen::@1]
    // [9] phi fillscreen::i#2 = fillscreen::i#1 [phi:fillscreen::@2->fillscreen::@1#0] -- register_copy 
    // [9] phi fillscreen::screen#2 = fillscreen::screen#1 [phi:fillscreen::@2->fillscreen::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment DataHigh
  base: .fill $100, 0

