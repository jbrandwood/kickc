@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call prepare 
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@3 main::@5
  [6] (byte) main::c#4 ← phi( main/(byte) $19 main::@1/(byte) main::c#4 main::@3/(byte) main::c#1 main::@5/(byte) $19 )
  [7] if(*((const byte*) RASTER#0)!=(byte) $fe) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [8] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [9] (byte) main::c#1 ← -- (byte) main::c#4
  [10] if((byte) main::c#1!=(byte) 0) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3
  [11] phi()
  [12] call flip 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [13] phi()
  [14] call plot 
  to:main::@1

(void()) plot()
plot: scope:[plot]  from main::@5
  [15] phi()
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@4
  [16] (byte) plot::y#4 ← phi( plot/(byte) $10 plot::@4/(byte) plot::y#1 )
  [16] (byte*) plot::line#5 ← phi( plot/(const byte*) SCREEN#0+(byte)(number) 5*(number) $28+(byte) $c plot::@4/(byte*) plot::line#1 )
  [16] (byte) plot::i#4 ← phi( plot/(byte) 0 plot::@4/(byte) plot::i#2 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@3
  [17] (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#4 plot::@3/(byte) plot::i#1 )
  [17] (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@3/(byte) plot::x#1 )
  [18] if((byte) plot::x#2<(byte) $10) goto plot::@3
  to:plot::@4
plot::@4: scope:[plot]  from plot::@2
  [19] (byte*) plot::line#1 ← (byte*) plot::line#5 + (byte) $28
  [20] (byte) plot::y#1 ← -- (byte) plot::y#4
  [21] if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@4
  [22] return 
  to:@return
plot::@3: scope:[plot]  from plot::@2
  [23] *((byte*) plot::line#5 + (byte) plot::x#2) ← *((const byte[$10*$10]) buffer1#0 + (byte) plot::i#2)
  [24] (byte) plot::i#1 ← ++ (byte) plot::i#2
  [25] (byte) plot::x#1 ← ++ (byte) plot::x#2
  to:plot::@2

(void()) flip()
flip: scope:[flip]  from main::@4
  [26] phi()
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@3
  [27] (byte) flip::r#4 ← phi( flip/(byte) $10 flip::@3/(byte) flip::r#1 )
  [27] (byte) flip::dstIdx#5 ← phi( flip/(byte) $f flip::@3/(byte) flip::dstIdx#2 )
  [27] (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@3/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  [28] (byte) flip::c#2 ← phi( flip::@1/(byte) $10 flip::@2/(byte) flip::c#1 )
  [28] (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  [28] (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  [29] *((const byte[$10*$10]) buffer2#0 + (byte) flip::dstIdx#3) ← *((const byte[$10*$10]) buffer1#0 + (byte) flip::srcIdx#2)
  [30] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  [31] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) $10
  [32] (byte) flip::c#1 ← -- (byte) flip::c#2
  [33] if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@3
flip::@3: scope:[flip]  from flip::@2
  [34] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  [35] (byte) flip::r#1 ← -- (byte) flip::r#4
  [36] if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@4
flip::@4: scope:[flip]  from flip::@3 flip::@4
  [37] (byte) flip::i#2 ← phi( flip::@3/(byte) 0 flip::@4/(byte) flip::i#1 )
  [38] *((const byte[$10*$10]) buffer1#0 + (byte) flip::i#2) ← *((const byte[$10*$10]) buffer2#0 + (byte) flip::i#2)
  [39] (byte) flip::i#1 ← ++ (byte) flip::i#2
  [40] if((byte) flip::i#1!=(byte) 0) goto flip::@4
  to:flip::@return
flip::@return: scope:[flip]  from flip::@4
  [41] return 
  to:@return

(void()) prepare()
prepare: scope:[prepare]  from main
  [42] phi()
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  [43] (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  [44] *((const byte[$10*$10]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  [45] (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  [46] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  [47] return 
  to:@return
