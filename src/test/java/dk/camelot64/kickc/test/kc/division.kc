// Binary division implementation


// Performs division on two 8 bit unsigned bytes
// Returns dividend/divisor.
// If remainder is non-null it will be set to the remainder.
// Implemented using simple binary division
byte div8u(byte dividend, byte divisor, byte* remainder) {
    byte rem = 0;
    byte quotient = 0;
    for( byte i : 0..7) {
        rem = rem << 1;
        if( (dividend & $80) != 0 ) {
            rem++;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    *remainder = rem;
    return quotient;
}

// Remainder after signed 8 bit division
signed byte rem8s = 0;

// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
signed byte div8s(signed byte dividend, signed byte divisor) {
    byte neg = 0;
    byte dividendb = 0;
    if(dividend<0) {
      dividendb = (byte)-dividend;
      neg = 1;
    } else {
      dividendb = (byte)dividend;
    }
    byte divisorb = 0;
    if(divisor<0) {
        divisorb = (byte)-divisor;
        neg = neg ^ 1;
    } else {
        divisorb = (byte)divisor;
    }
    byte rem8u = 0;
    byte resultb = div8u(dividendb, divisorb, &rem8u);
    if(neg==0) {
        rem8s = (signed byte)rem8u;
        return (signed byte)resultb;
    } else {
        rem8s = -(signed byte)rem8u;
        return -(signed byte)resultb;
    }
}

// Remainder after unsigned 16-bit division
word rem16u = 0;

// Performs division on two 16 bit unsigned bytes
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
word div16u(word dividend, word divisor) {
    word rem = 0;
    word quotient = 0;
    for( byte i : 0..15) {
        rem = rem << 1;
        if( (>dividend & $80) != 0 ) {
            rem++;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    rem16u = rem;
    return quotient;
}