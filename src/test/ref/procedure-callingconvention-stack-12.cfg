
(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (byte) idx ← (byte) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [2] phi()
  [3] callexecute main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [4] return 
  to:@return

__stackcall (void()) print((byte*) print::str , (byte) print::spacing)
print: scope:[print]  from
  [5] (byte*) print::str#0 ← stackidx(byte*,(const byte) print::OFFSET_STACK_STR)
  [6] (byte) print::spacing#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_SPACING)
  to:print::@1
print::@1: scope:[print]  from print print::@3
  [7] (byte*) print::str#2 ← phi( print/(byte*) print::str#0 print::@3/(byte*) print::str#1 )
  [8] if((byte) 0!=*((byte*) print::str#2)) goto print::@2
  to:print::@return
print::@return: scope:[print]  from print::@1
  [9] return 
  to:@return
print::@2: scope:[print]  from print::@1
  [10] *((const nomodify byte*) SCREEN + (byte) idx) ← *((byte*) print::str#2)
  [11] (byte) idx ← ++ (byte) idx
  [12] (byte*) print::str#1 ← ++ (byte*) print::str#2
  to:print::@3
print::@3: scope:[print]  from print::@2 print::@4
  [13] (byte) print::c#2 ← phi( print::@2/(byte) 0 print::@4/(byte) print::c#1 )
  [14] if((byte) print::c#2<(byte) print::spacing#0) goto print::@4
  to:print::@1
print::@4: scope:[print]  from print::@3
  [15] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) ' '
  [16] (byte) idx ← ++ (byte) idx
  [17] (byte) print::c#1 ← ++ (byte) print::c#2
  to:print::@3

__stackcall (void()) main()
main: scope:[main]  from
  [18] stackpush(byte*) ← (const byte*) main::str
  [19] stackpush(byte) ← (byte) 1
  [20] callexecute print 
  sideeffect stackpullbytes((number) 3)
  [22] stackpush(byte*) ← (const byte*) main::str1
  [23] stackpush(byte) ← (byte) 2
  [24] callexecute print 
  sideeffect stackpullbytes((number) 3)
  to:main::@return
main::@return: scope:[main]  from main
  [26] return 
  to:@return
