
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (number~) main::$0 ← (const byte) main::b + (number) 1
  (byte) main::c#0 ← (number~) main::$0
  (number~) main::$1 ← (byte) main::c#0 + (number) 1
  (byte) main::d#0 ← (number~) main::$1
  *((const nomodify byte*) main::SCREEN + (number) 0) ← (const byte) main::b
  *((const nomodify byte*) main::SCREEN + (number) 1) ← (byte) main::c#0
  *((const nomodify byte*) main::SCREEN + (number) 2) ← (byte) main::d#0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(number~) main::$0
(number~) main::$1
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(const byte) main::b = (byte) 'c'
(byte) main::c
(byte) main::c#0
(byte) main::d
(byte) main::d#0

Adding number conversion cast (unumber) 1 in (number~) main::$0 ← (const byte) main::b + (number) 1
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (const byte) main::b + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) main::$1 ← (byte) main::c#0 + (number) 1
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (byte) main::c#0 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) main::SCREEN + (number) 0) ← (const byte) main::b
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) main::SCREEN + (number) 1) ← (byte) main::c#0
Adding number conversion cast (unumber) 2 in *((const nomodify byte*) main::SCREEN + (number) 2) ← (byte) main::d#0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (const byte) main::b + (byte) 1
Inferred type updated to byte in (unumber~) main::$1 ← (byte) main::c#0 + (byte) 1
Alias main::c#0 = main::$0 
Alias main::d#0 = main::$1 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] (byte) main::c#0 ← (const byte) main::b + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::c#0 = main::b+1
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN in [2] *((const nomodify byte*) main::SCREEN + (byte) 0) ← (const byte) main::b
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [0] (byte) main::d#0 ← (const byte) main::c#0 + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::d#0 = main::c#0+1
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::SCREEN+2)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::b
  [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::c#0
  [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::d#0
  to:main::@return
main::@return: scope:[main]  from main
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::c
(byte) main::d

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests comma-separated declarations
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const b = 'c'
    .const c = b+1
    .const d = c+1
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::b -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::c#0 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN+1
    // [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::d#0 -- _deref_pbuc1=vbuc2 
    lda #d
    sta SCREEN+2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::b [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::c#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::d#0 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 27 combination 
Uplifting [] best 27 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests comma-separated declarations
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const b = 'c'
    .const c = b+1
    .const d = c+1
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::b -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::c#0 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN+1
    // [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::d#0 -- _deref_pbuc1=vbuc2 
    lda #d
    sta SCREEN+2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(const byte) main::b = (byte) 'c'
(byte) main::c
(const byte) main::c#0 c = (const byte) main::b+(byte) 1
(byte) main::d
(const byte) main::d#0 d = (const byte) main::c#0+(byte) 1



FINAL ASSEMBLER
Score: 24

  // File Comments
// Tests comma-separated declarations
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const b = 'c'
    .const c = b+1
    .const d = c+1
    .label SCREEN = $400
    // SCREEN[0] = b
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::b -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // SCREEN[1] = c
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::c#0 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN+1
    // SCREEN[2] = d
    // [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::d#0 -- _deref_pbuc1=vbuc2 
    lda #d
    sta SCREEN+2
    // main::@return
    // }
    // [3] return 
    rts
}
  // File Data

