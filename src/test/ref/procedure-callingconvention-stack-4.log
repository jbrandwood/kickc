Culled Empty Block (label) main::@2
Culled Empty Block (label) @1
Culled Empty Block (label) plus::@1
Converting PHI-variable modified inside __stackcall procedure plus() to load/store (byte) i
Calling convention STACK_CALL adding prepare/execute/finalize for (byte~) main::$1 ← call plus (byte) '0' (byte) main::v 
Calling convention STACK_CALL replacing param((byte) plus::a) with stackidx(byte,(const byte) plus::OFFSET_STACK_A)
Calling convention STACK_CALL replacing param((byte) plus::b) with stackidx(byte,(const byte) plus::OFFSET_STACK_B)
Calling convention STACK_CALL adding stack return stackidx(byte,plus::OFFSET_STACK_RETURN) ← plus::return
Calling convention STACK_CALL adding stack pull main::$1 ← stackpull(byte)
Calling convention STACK_CALL adding stack push stackpush(byte) ← '0'
Calling convention STACK_CALL adding stack push stackpush(byte) ← main::v

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) i ← (byte) 0
  to:@2

(void()) main()
main: scope:[main]  from @2
  (byte) main::a#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::a#2 ← phi( main/(byte) main::a#0 main::@1/(byte) main::a#1 )
  (number~) main::$0 ← (byte) main::a#2 + (number) 1
  (byte) main::v#0 ← (number~) main::$0
  stackpush(byte) ← (byte) '0'
  stackpush(byte) ← (byte) main::v#0
  callexecute plus 
  sideeffect stackpullbytes((number) 1)
  (byte~) main::$1 ← stackpull(byte)
  (byte) main::w#0 ← (byte~) main::$1
  (byte~) main::$2 ← (byte) main::w#0 + (byte) main::a#2
  *((const byte*) SCREEN + (byte) i) ← (byte~) main::$2
  (byte) main::a#1 ← (byte) main::a#2 + rangenext(0,1)
  (bool~) main::$3 ← (byte) main::a#1 != rangelast(0,1)
  if((bool~) main::$3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

__stackcall (byte()) plus((byte) plus::a , (byte) plus::b)
plus: scope:[plus]  from
  (byte) plus::a#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_A)
  (byte) plus::b#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_B)
  (byte) i ← ++ (byte) i
  (byte~) plus::$0 ← (byte) plus::a#0 + (byte) plus::b#0
  (byte) plus::return#0 ← (byte~) plus::$0
  to:plus::@return
plus::@return: scope:[plus]  from plus
  (byte) plus::return#1 ← phi( plus/(byte) plus::return#0 )
  stackidx(byte,(const byte) plus::OFFSET_STACK_RETURN) ← (byte) plus::return#1
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*)(number) $400
(const word) STACK_BASE = (word) $103
(byte) i loadstore
(void()) main()
(number~) main::$0
(byte~) main::$1
(byte~) main::$2
(bool~) main::$3
(label) main::@1
(label) main::@return
(byte) main::a
(byte) main::a#0
(byte) main::a#1
(byte) main::a#2
(byte) main::v
(byte) main::v#0
(byte) main::w
(byte) main::w#0
__stackcall (byte()) plus((byte) plus::a , (byte) plus::b)
(byte~) plus::$0
(label) plus::@return
(const byte) plus::OFFSET_STACK_A = (byte) 1
(const byte) plus::OFFSET_STACK_B = (byte) 0
(const byte) plus::OFFSET_STACK_RETURN = (byte) 1
(byte) plus::a
(byte) plus::a#0
(byte) plus::b
(byte) plus::b#0
(byte) plus::return
(byte) plus::return#0
(byte) plus::return#1

Adding number conversion cast (unumber) 1 in (number~) main::$0 ← (byte) main::a#2 + (number) 1
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (byte) main::a#2 + (unumber)(number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) main::a#2 + (byte) 1
Alias main::v#0 = main::$0 
Alias main::w#0 = main::$1 
Alias plus::return#0 = plus::$0 plus::return#1 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$3 [13] if((byte) main::a#1!=rangelast(0,1)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::a#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [11] main::a#1 ← ++ main::a#2 to ++
Resolved ranged comparison value [13] if(main::a#1!=rangelast(0,1)) goto main::@1 to (number) 2
Adding number conversion cast (unumber) 2 in if((byte) main::a#1!=(number) 2) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::a#0
Constant inlined main::a#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to plus:10 

Created 1 initial phi equivalence classes
Coalesced [18] main::a#3 ← main::a#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@3
Renumbering block @2 to @1
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] (byte) i ← (byte) 0
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::a#2 ← phi( main/(byte) 0 main::@1/(byte) main::a#1 )
  [6] (byte) main::v#0 ← (byte) main::a#2 + (byte) 1
  [7] stackpush(byte) ← (byte) '0'
  [8] stackpush(byte) ← (byte) main::v#0
  [9] callexecute plus 
  sideeffect stackpullbytes((number) 1)
  [11] (byte) main::w#0 ← stackpull(byte)
  [12] (byte~) main::$2 ← (byte) main::w#0 + (byte) main::a#2
  [13] *((const byte*) SCREEN + (byte) i) ← (byte~) main::$2
  [14] (byte) main::a#1 ← ++ (byte) main::a#2
  [15] if((byte) main::a#1!=(byte) 2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [16] return 
  to:@return

__stackcall (byte()) plus((byte) plus::a , (byte) plus::b)
plus: scope:[plus]  from
  [17] (byte) plus::a#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_A)
  [18] (byte) plus::b#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_B)
  [19] (byte) i ← ++ (byte) i
  [20] (byte) plus::return#0 ← (byte) plus::a#0 + (byte) plus::b#0
  to:plus::@return
plus::@return: scope:[plus]  from plus
  [21] stackidx(byte,(const byte) plus::OFFSET_STACK_RETURN) ← (byte) plus::return#0
  [22] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) i loadstore 105.25
(void()) main()
(byte~) main::$2 202.0
(byte) main::a
(byte) main::a#1 151.5
(byte) main::a#2 44.888888888888886
(byte) main::v
(byte) main::v#0 101.0
(byte) main::w
(byte) main::w#0 202.0
__stackcall (byte()) plus((byte) plus::a , (byte) plus::b)
(byte) plus::a
(byte) plus::a#0 667.3333333333334
(byte) plus::b
(byte) plus::b#0 1001.0
(byte) plus::return
(byte) plus::return#0 2002.0

Initial phi equivalence classes
[ main::a#2 main::a#1 ]
Added variable i to live range equivalence class [ i ]
Added variable main::v#0 to live range equivalence class [ main::v#0 ]
Added variable main::w#0 to live range equivalence class [ main::w#0 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable plus::a#0 to live range equivalence class [ plus::a#0 ]
Added variable plus::b#0 to live range equivalence class [ plus::b#0 ]
Added variable plus::return#0 to live range equivalence class [ plus::return#0 ]
Complete equivalence classes
[ main::a#2 main::a#1 ]
[ i ]
[ main::v#0 ]
[ main::w#0 ]
[ main::$2 ]
[ plus::a#0 ]
[ plus::b#0 ]
[ plus::return#0 ]
Allocated zp[1]:2 [ main::a#2 main::a#1 ]
Allocated zp[1]:3 [ i ]
Allocated zp[1]:4 [ main::v#0 ]
Allocated zp[1]:5 [ main::w#0 ]
Allocated zp[1]:6 [ main::$2 ]
Allocated zp[1]:7 [ plus::a#0 ]
Allocated zp[1]:8 [ plus::b#0 ]
Allocated zp[1]:9 [ plus::return#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test a procedure with calling convention stack
// A slightly more complex call
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const STACK_BASE = $103
  .label i = 3
  // @begin
__bbegin:
  // [0] (byte) i ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z i
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __2 = 6
    .label v = 4
    .label w = 5
    .label a = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::a#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::a#2 = (byte) main::a#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) main::v#0 ← (byte) main::a#2 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z a
    iny
    sty.z v
    // [7] stackpush(byte) ← (byte) '0' -- _stackpushbyte_=vbuc1 
    lda #'0'
    pha
    // [8] stackpush(byte) ← (byte) main::v#0 -- _stackpushbyte_=vbuz1 
    lda.z v
    pha
    // [9] callexecute plus  -- jsr 
    jsr plus
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // [11] (byte) main::w#0 ← stackpull(byte) -- vbuz1=_stackpullbyte_ 
    pla
    sta.z w
    // [12] (byte~) main::$2 ← (byte) main::w#0 + (byte) main::a#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z w
    clc
    adc.z a
    sta.z __2
    // [13] *((const byte*) SCREEN + (byte) i) ← (byte~) main::$2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __2
    ldy.z i
    sta SCREEN,y
    // [14] (byte) main::a#1 ← ++ (byte) main::a#2 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [15] if((byte) main::a#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z a
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [16] return 
    rts
}
  // plus
// plus(byte zp(7) a, byte zp(8) b)
plus: {
    .const OFFSET_STACK_A = 1
    .const OFFSET_STACK_B = 0
    .const OFFSET_STACK_RETURN = 1
    .label a = 7
    .label b = 8
    .label return = 9
    // [17] (byte) plus::a#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_A) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_A,x
    sta.z a
    // [18] (byte) plus::b#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_B) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_B,x
    sta.z b
    // [19] (byte) i ← ++ (byte) i -- vbuz1=_inc_vbuz1 
    inc.z i
    // [20] (byte) plus::return#0 ← (byte) plus::a#0 + (byte) plus::b#0 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z a
    clc
    adc.z b
    sta.z return
    jmp __breturn
    // plus::@return
  __breturn:
    // [21] stackidx(byte,(const byte) plus::OFFSET_STACK_RETURN) ← (byte) plus::return#0 -- _stackidxbyte_vbuc1=vbuz1 
    lda.z return
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN,x
    // [22] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (byte) i ← (byte) 0 [ i ] (  [ i ] { }  ) always clobbers reg byte a 
Statement [7] stackpush(byte) ← (byte) '0' [ i main::a#2 main::v#0 ] ( main:2 [ i main::a#2 main::v#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::a#2 main::a#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::v#0 ]
Statement [8] stackpush(byte) ← (byte) main::v#0 [ i main::a#2 ] ( main:2 [ i main::a#2 ] { }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 1) always clobbers reg byte a 
Statement [11] (byte) main::w#0 ← stackpull(byte) [ i main::a#2 main::w#0 ] ( main:2 [ i main::a#2 main::w#0 ] { }  ) always clobbers reg byte a 
Statement [12] (byte~) main::$2 ← (byte) main::w#0 + (byte) main::a#2 [ i main::a#2 main::$2 ] ( main:2 [ i main::a#2 main::$2 ] { }  ) always clobbers reg byte a 
Statement [13] *((const byte*) SCREEN + (byte) i) ← (byte~) main::$2 [ i main::a#2 ] ( main:2 [ i main::a#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::a#2 main::a#1 ]
Statement [17] (byte) plus::a#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_A) [ i plus::a#0 ] ( main:2::plus:9 [ main::a#2 i plus::a#0 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::a#2 main::a#1 ]
Statement [18] (byte) plus::b#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_B) [ i plus::a#0 plus::b#0 ] ( main:2::plus:9 [ main::a#2 i plus::a#0 plus::b#0 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ plus::a#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:7 [ plus::a#0 ]
Statement [20] (byte) plus::return#0 ← (byte) plus::a#0 + (byte) plus::b#0 [ i plus::return#0 ] ( main:2::plus:9 [ main::a#2 i plus::return#0 ] { }  ) always clobbers reg byte a 
Statement [21] stackidx(byte,(const byte) plus::OFFSET_STACK_RETURN) ← (byte) plus::return#0 [ i ] ( main:2::plus:9 [ main::a#2 i ] { }  ) always clobbers reg byte x 
Statement [0] (byte) i ← (byte) 0 [ i ] (  [ i ] { }  ) always clobbers reg byte a 
Statement [7] stackpush(byte) ← (byte) '0' [ i main::a#2 main::v#0 ] ( main:2 [ i main::a#2 main::v#0 ] { }  ) always clobbers reg byte a 
Statement [8] stackpush(byte) ← (byte) main::v#0 [ i main::a#2 ] ( main:2 [ i main::a#2 ] { }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 1) always clobbers reg byte a 
Statement [11] (byte) main::w#0 ← stackpull(byte) [ i main::a#2 main::w#0 ] ( main:2 [ i main::a#2 main::w#0 ] { }  ) always clobbers reg byte a 
Statement [12] (byte~) main::$2 ← (byte) main::w#0 + (byte) main::a#2 [ i main::a#2 main::$2 ] ( main:2 [ i main::a#2 main::$2 ] { }  ) always clobbers reg byte a 
Statement [13] *((const byte*) SCREEN + (byte) i) ← (byte~) main::$2 [ i main::a#2 ] ( main:2 [ i main::a#2 ] { }  ) always clobbers reg byte y 
Statement [15] if((byte) main::a#1!=(byte) 2) goto main::@1 [ i main::a#1 ] ( main:2 [ i main::a#1 ] { }  ) always clobbers reg byte a 
Statement [17] (byte) plus::a#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_A) [ i plus::a#0 ] ( main:2::plus:9 [ main::a#2 i plus::a#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [18] (byte) plus::b#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_B) [ i plus::a#0 plus::b#0 ] ( main:2::plus:9 [ main::a#2 i plus::a#0 plus::b#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [20] (byte) plus::return#0 ← (byte) plus::a#0 + (byte) plus::b#0 [ i plus::return#0 ] ( main:2::plus:9 [ main::a#2 i plus::return#0 ] { }  ) always clobbers reg byte a 
Statement [21] stackidx(byte,(const byte) plus::OFFSET_STACK_RETURN) ← (byte) plus::return#0 [ i ] ( main:2::plus:9 [ main::a#2 i ] { }  ) always clobbers reg byte x 
Potential registers zp[1]:2 [ main::a#2 main::a#1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ i ] : zp[1]:3 , 
Potential registers zp[1]:4 [ main::v#0 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::w#0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::$2 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ plus::a#0 ] : zp[1]:7 , reg byte y , 
Potential registers zp[1]:8 [ plus::b#0 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ plus::return#0 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [plus] 2,002: zp[1]:9 [ plus::return#0 ] 1,001: zp[1]:8 [ plus::b#0 ] 667.33: zp[1]:7 [ plus::a#0 ] 
Uplift Scope [main] 202: zp[1]:5 [ main::w#0 ] 202: zp[1]:6 [ main::$2 ] 196.39: zp[1]:2 [ main::a#2 main::a#1 ] 101: zp[1]:4 [ main::v#0 ] 
Uplift Scope [] 105.25: zp[1]:3 [ i ] 

Uplifting [plus] best 909 combination reg byte a [ plus::return#0 ] reg byte a [ plus::b#0 ] zp[1]:7 [ plus::a#0 ] 
Uplifting [main] best 749 combination reg byte a [ main::w#0 ] reg byte a [ main::$2 ] zp[1]:2 [ main::a#2 main::a#1 ] reg byte x [ main::v#0 ] 
Uplifting [] best 749 combination zp[1]:3 [ i ] 
Attempting to uplift remaining variables inzp[1]:7 [ plus::a#0 ]
Uplifting [plus] best 749 combination zp[1]:7 [ plus::a#0 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::a#2 main::a#1 ]
Uplifting [main] best 749 combination zp[1]:2 [ main::a#2 main::a#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ i ]
Uplifting [] best 749 combination zp[1]:3 [ i ] 
Allocated (was zp[1]:7) zp[1]:4 [ plus::a#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a procedure with calling convention stack
// A slightly more complex call
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const STACK_BASE = $103
  .label i = 3
  // @begin
__bbegin:
  // [0] (byte) i ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z i
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label a = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::a#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::a#2 = (byte) main::a#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) main::v#0 ← (byte) main::a#2 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z a
    inx
    // [7] stackpush(byte) ← (byte) '0' -- _stackpushbyte_=vbuc1 
    lda #'0'
    pha
    // [8] stackpush(byte) ← (byte) main::v#0 -- _stackpushbyte_=vbuxx 
    txa
    pha
    // [9] callexecute plus  -- jsr 
    jsr plus
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // [11] (byte) main::w#0 ← stackpull(byte) -- vbuaa=_stackpullbyte_ 
    pla
    // [12] (byte~) main::$2 ← (byte) main::w#0 + (byte) main::a#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z a
    // [13] *((const byte*) SCREEN + (byte) i) ← (byte~) main::$2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta SCREEN,y
    // [14] (byte) main::a#1 ← ++ (byte) main::a#2 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [15] if((byte) main::a#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z a
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [16] return 
    rts
}
  // plus
// plus(byte zp(4) a, byte register(A) b)
plus: {
    .const OFFSET_STACK_A = 1
    .const OFFSET_STACK_B = 0
    .const OFFSET_STACK_RETURN = 1
    .label a = 4
    // [17] (byte) plus::a#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_A) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_A,x
    sta.z a
    // [18] (byte) plus::b#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_B) -- vbuaa=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_B,x
    // [19] (byte) i ← ++ (byte) i -- vbuz1=_inc_vbuz1 
    inc.z i
    // [20] (byte) plus::return#0 ← (byte) plus::a#0 + (byte) plus::b#0 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc.z a
    jmp __breturn
    // plus::@return
  __breturn:
    // [21] stackidx(byte,(const byte) plus::OFFSET_STACK_RETURN) ← (byte) plus::return#0 -- _stackidxbyte_vbuc1=vbuaa 
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN,x
    // [22] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1:
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*) 1024
(const word) STACK_BASE = (word) $103
(byte) i loadstore zp[1]:3 105.25
(void()) main()
(byte~) main::$2 reg byte a 202.0
(label) main::@1
(label) main::@return
(byte) main::a
(byte) main::a#1 a zp[1]:2 151.5
(byte) main::a#2 a zp[1]:2 44.888888888888886
(byte) main::v
(byte) main::v#0 reg byte x 101.0
(byte) main::w
(byte) main::w#0 reg byte a 202.0
__stackcall (byte()) plus((byte) plus::a , (byte) plus::b)
(label) plus::@return
(const byte) plus::OFFSET_STACK_A = (byte) 1
(const byte) plus::OFFSET_STACK_B = (byte) 0
(const byte) plus::OFFSET_STACK_RETURN = (byte) 1
(byte) plus::a
(byte) plus::a#0 a zp[1]:4 667.3333333333334
(byte) plus::b
(byte) plus::b#0 reg byte a 1001.0
(byte) plus::return
(byte) plus::return#0 reg byte a 2002.0

zp[1]:2 [ main::a#2 main::a#1 ]
zp[1]:3 [ i ]
reg byte x [ main::v#0 ]
reg byte a [ main::w#0 ]
reg byte a [ main::$2 ]
zp[1]:4 [ plus::a#0 ]
reg byte a [ plus::b#0 ]
reg byte a [ plus::return#0 ]


FINAL ASSEMBLER
Score: 656

  // File Comments
// Test a procedure with calling convention stack
// A slightly more complex call
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const STACK_BASE = $103
  .label i = 3
  // @begin
__bbegin:
  // i = 0
  // [0] (byte) i ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z i
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  jsr main
  rts
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label a = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::a#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::a#2 = (byte) main::a#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // v = a+1
    // [6] (byte) main::v#0 ← (byte) main::a#2 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z a
    inx
    // plus('0', v)
    // [7] stackpush(byte) ← (byte) '0' -- _stackpushbyte_=vbuc1 
    lda #'0'
    pha
    // [8] stackpush(byte) ← (byte) main::v#0 -- _stackpushbyte_=vbuxx 
    txa
    pha
    // [9] callexecute plus  -- jsr 
    jsr plus
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // w = plus('0', v)
    // [11] (byte) main::w#0 ← stackpull(byte) -- vbuaa=_stackpullbyte_ 
    pla
    // w+a
    // [12] (byte~) main::$2 ← (byte) main::w#0 + (byte) main::a#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z a
    // SCREEN[i] = w+a
    // [13] *((const byte*) SCREEN + (byte) i) ← (byte~) main::$2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta SCREEN,y
    // for(char a:0..1)
    // [14] (byte) main::a#1 ← ++ (byte) main::a#2 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [15] if((byte) main::a#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z a
    bne __b1
    // main::@return
    // }
    // [16] return 
    rts
}
  // plus
// plus(byte zp(4) a, byte register(A) b)
plus: {
    .const OFFSET_STACK_A = 1
    .const OFFSET_STACK_B = 0
    .const OFFSET_STACK_RETURN = 1
    .label a = 4
    // [17] (byte) plus::a#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_A) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_A,x
    sta.z a
    // [18] (byte) plus::b#0 ← stackidx(byte,(const byte) plus::OFFSET_STACK_B) -- vbuaa=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_B,x
    // i++;
    // [19] (byte) i ← ++ (byte) i -- vbuz1=_inc_vbuz1 
    inc.z i
    // return a+b;
    // [20] (byte) plus::return#0 ← (byte) plus::a#0 + (byte) plus::b#0 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc.z a
    // plus::@return
    // }
    // [21] stackidx(byte,(const byte) plus::OFFSET_STACK_RETURN) ← (byte) plus::return#0 -- _stackidxbyte_vbuc1=vbuaa 
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN,x
    // [22] return 
    rts
}
  // File Data

