Adding pointer type conversion cast (byte*) print_screen in (byte*) print_screen ← (number) $400
Identified literal word (dword) { div32u16u::quotient_hi, div32u16u::quotient_lo } in (dword) div32u16u::quotient ← { (word) div32u16u::quotient_hi, (word) div32u16u::quotient_lo }
Fixing pointer array-indexing *((word[]) test_16u::dividends + (byte) test_16u::i)
Fixing pointer array-indexing *((word[]) test_16u::divisors + (byte) test_16u::i)
Fixing pointer array-indexing *((signed word[]) test_16s::dividends + (byte) test_16s::i)
Fixing pointer array-indexing *((signed word[]) test_16s::divisors + (byte) test_16s::i)
Identified constant variable (byte) test_8u::rem
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) print_str::@4
Culled Empty Block (label) print_str::@3
Culled Empty Block (label) print_str::@5
Culled Empty Block (label) print_str::@6
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) print_sword::@4
Culled Empty Block (label) @6
Culled Empty Block (label) print_sbyte::@4
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) div8u::@1
Culled Empty Block (label) @20
Culled Empty Block (label) divr8u::@7
Culled Empty Block (label) divr16u::@7
Culled Empty Block (label) @22
Culled Empty Block (label) div16u::@1
Culled Empty Block (label) @23
Culled Empty Block (label) div8s::@8
Culled Empty Block (label) div8s::@10
Culled Empty Block (label) div8s::@12
Culled Empty Block (label) div8s::@6
Culled Empty Block (label) div8s::@13
Culled Empty Block (label) div8s::@14
Culled Empty Block (label) divr16s::@8
Culled Empty Block (label) divr16s::@10
Culled Empty Block (label) divr16s::@12
Culled Empty Block (label) divr16s::@6
Culled Empty Block (label) divr16s::@13
Culled Empty Block (label) divr16s::@14
Culled Empty Block (label) @26
Culled Empty Block (label) div16s::@1
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) test_8u::@2
Culled Empty Block (label) @29
Culled Empty Block (label) test_16u::@2
Culled Empty Block (label) @30
Culled Empty Block (label) test_8s::@2
Culled Empty Block (label) @31
Culled Empty Block (label) test_16s::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@12
print_str: scope:[print_str]  from test_16s::@4 test_16s::@6 test_16s::@8 test_16u::@4 test_16u::@6 test_16u::@8 test_8s::@4 test_8s::@6 test_8s::@8 test_8u::@4 test_8u::@6 test_8u::@8
  (byte*) print_char_cursor#146 ← phi( test_16s::@4/(byte*) print_char_cursor#56 test_16s::@6/(byte*) print_char_cursor#58 test_16s::@8/(byte*) print_char_cursor#60 test_16u::@4/(byte*) print_char_cursor#38 test_16u::@6/(byte*) print_char_cursor#40 test_16u::@8/(byte*) print_char_cursor#42 test_8s::@4/(byte*) print_char_cursor#47 test_8s::@6/(byte*) print_char_cursor#49 test_8s::@8/(byte*) print_char_cursor#51 test_8u::@4/(byte*) print_char_cursor#29 test_8u::@6/(byte*) print_char_cursor#31 test_8u::@8/(byte*) print_char_cursor#33 )
  (byte*) print_str::str#15 ← phi( test_16s::@4/(byte*) print_str::str#10 test_16s::@6/(byte*) print_str::str#11 test_16s::@8/(byte*) print_str::str#12 test_16u::@4/(byte*) print_str::str#4 test_16u::@6/(byte*) print_str::str#5 test_16u::@8/(byte*) print_str::str#6 test_8s::@4/(byte*) print_str::str#7 test_8s::@6/(byte*) print_str::str#8 test_8s::@8/(byte*) print_str::str#9 test_8u::@4/(byte*) print_str::str#1 test_8u::@6/(byte*) print_str::str#2 test_8u::@8/(byte*) print_str::str#3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#130 ← phi( print_str/(byte*) print_char_cursor#146 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#13 ← phi( print_str/(byte*) print_str::str#15 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← *((byte*) print_str::str#13) != (byte) '@'
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#66 ← phi( print_str::@1/(byte*) print_char_cursor#130 )
  (byte*) print_str::str#14 ← phi( print_str::@1/(byte*) print_str::str#13 )
  *((byte*) print_char_cursor#66) ← *((byte*) print_str::str#14)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#66
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#14
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#67 ← phi( print_str::@1/(byte*) print_char_cursor#130 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#67
  return 
  to:@return
print_ln: scope:[print_ln]  from test_16s::@10 test_16u::@10 test_8s::@10 test_8u::@10
  (byte*) print_char_cursor#131 ← phi( test_16s::@10/(byte*) print_char_cursor#62 test_16u::@10/(byte*) print_char_cursor#44 test_8s::@10/(byte*) print_char_cursor#53 test_8u::@10/(byte*) print_char_cursor#35 )
  (byte*) print_line_cursor#39 ← phi( test_16s::@10/(byte*) print_line_cursor#44 test_16u::@10/(byte*) print_line_cursor#42 test_8s::@10/(byte*) print_line_cursor#43 test_8u::@10/(byte*) print_line_cursor#41 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#68 ← phi( print_ln/(byte*) print_char_cursor#131 print_ln::@1/(byte*) print_char_cursor#68 )
  (byte*) print_line_cursor#20 ← phi( print_ln/(byte*) print_line_cursor#39 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#20 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#68
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#21 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#21
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#69 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#22 ← phi( print_ln::@2/(byte*) print_line_cursor#21 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#22
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#69
  return 
  to:@return
print_sword: scope:[print_sword]  from test_16s::@3 test_16s::@5 test_16s::@7 test_16s::@9
  (byte*) print_char_cursor#147 ← phi( test_16s::@3/(byte*) print_char_cursor#144 test_16s::@5/(byte*) print_char_cursor#57 test_16s::@7/(byte*) print_char_cursor#59 test_16s::@9/(byte*) print_char_cursor#61 )
  (signed word) print_sword::w#5 ← phi( test_16s::@3/(signed word) print_sword::w#1 test_16s::@5/(signed word) print_sword::w#2 test_16s::@7/(signed word) print_sword::w#3 test_16s::@9/(signed word) print_sword::w#4 )
  (bool~) print_sword::$0 ← (signed word) print_sword::w#5 < (number) 0
  if((bool~) print_sword::$0) goto print_sword::@1
  to:print_sword::@3
print_sword::@1: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#8 ← phi( print_sword/(signed word) print_sword::w#5 )
  (byte*) print_char_cursor#132 ← phi( print_sword/(byte*) print_char_cursor#147 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sword::@5
print_sword::@5: scope:[print_sword]  from print_sword::@1
  (signed word) print_sword::w#6 ← phi( print_sword::@1/(signed word) print_sword::w#8 )
  (byte*) print_char_cursor#70 ← phi( print_sword::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#70
  (signed word~) print_sword::$5 ← - (signed word) print_sword::w#6
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$5
  to:print_sword::@2
print_sword::@3: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#10 ← phi( print_sword/(signed word) print_sword::w#5 )
  (byte*) print_char_cursor#133 ← phi( print_sword/(byte*) print_char_cursor#147 )
  (byte) print_char::ch#1 ← (byte) ' '
  call print_char 
  to:print_sword::@6
print_sword::@6: scope:[print_sword]  from print_sword::@3
  (signed word) print_sword::w#9 ← phi( print_sword::@3/(signed word) print_sword::w#10 )
  (byte*) print_char_cursor#71 ← phi( print_sword::@3/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#71
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword::@5 print_sword::@6
  (byte*) print_char_cursor#134 ← phi( print_sword::@5/(byte*) print_char_cursor#5 print_sword::@6/(byte*) print_char_cursor#6 )
  (signed word) print_sword::w#7 ← phi( print_sword::@5/(signed word) print_sword::w#0 print_sword::@6/(signed word) print_sword::w#9 )
  (word~) print_sword::$1 ← ((word)) (signed word) print_sword::w#7
  (word) print_word::w#0 ← (word~) print_sword::$1
  call print_word 
  to:print_sword::@7
print_sword::@7: scope:[print_sword]  from print_sword::@2
  (byte*) print_char_cursor#72 ← phi( print_sword::@2/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#72
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@7
  (byte*) print_char_cursor#73 ← phi( print_sword::@7/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#73
  return 
  to:@return
print_sbyte: scope:[print_sbyte]  from test_8s::@3 test_8s::@5 test_8s::@7 test_8s::@9
  (byte*) print_char_cursor#148 ← phi( test_8s::@3/(byte*) print_char_cursor#143 test_8s::@5/(byte*) print_char_cursor#48 test_8s::@7/(byte*) print_char_cursor#50 test_8s::@9/(byte*) print_char_cursor#52 )
  (signed byte) print_sbyte::b#5 ← phi( test_8s::@3/(signed byte) print_sbyte::b#1 test_8s::@5/(signed byte) print_sbyte::b#2 test_8s::@7/(signed byte) print_sbyte::b#3 test_8s::@9/(signed byte) print_sbyte::b#4 )
  (bool~) print_sbyte::$0 ← (signed byte) print_sbyte::b#5 < (number) 0
  if((bool~) print_sbyte::$0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#8 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 )
  (byte*) print_char_cursor#135 ← phi( print_sbyte/(byte*) print_char_cursor#148 )
  (byte) print_char::ch#2 ← (byte) '-'
  call print_char 
  to:print_sbyte::@5
print_sbyte::@5: scope:[print_sbyte]  from print_sbyte::@1
  (signed byte) print_sbyte::b#6 ← phi( print_sbyte::@1/(signed byte) print_sbyte::b#8 )
  (byte*) print_char_cursor#74 ← phi( print_sbyte::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#74
  (signed byte~) print_sbyte::$5 ← - (signed byte) print_sbyte::b#6
  (signed byte) print_sbyte::b#0 ← (signed byte~) print_sbyte::$5
  to:print_sbyte::@2
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#10 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 )
  (byte*) print_char_cursor#136 ← phi( print_sbyte/(byte*) print_char_cursor#148 )
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:print_sbyte::@6
print_sbyte::@6: scope:[print_sbyte]  from print_sbyte::@3
  (signed byte) print_sbyte::b#9 ← phi( print_sbyte::@3/(signed byte) print_sbyte::b#10 )
  (byte*) print_char_cursor#75 ← phi( print_sbyte::@3/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#75
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@5 print_sbyte::@6
  (byte*) print_char_cursor#137 ← phi( print_sbyte::@5/(byte*) print_char_cursor#9 print_sbyte::@6/(byte*) print_char_cursor#10 )
  (signed byte) print_sbyte::b#7 ← phi( print_sbyte::@5/(signed byte) print_sbyte::b#0 print_sbyte::@6/(signed byte) print_sbyte::b#9 )
  (byte~) print_sbyte::$1 ← ((byte)) (signed byte) print_sbyte::b#7
  (byte) print_byte::b#0 ← (byte~) print_sbyte::$1
  call print_byte 
  to:print_sbyte::@7
print_sbyte::@7: scope:[print_sbyte]  from print_sbyte::@2
  (byte*) print_char_cursor#76 ← phi( print_sbyte::@2/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#76
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@7
  (byte*) print_char_cursor#77 ← phi( print_sbyte::@7/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#77
  return 
  to:@return
print_word: scope:[print_word]  from print_sword::@2 test_16u::@3 test_16u::@5 test_16u::@7 test_16u::@9
  (byte*) print_char_cursor#138 ← phi( print_sword::@2/(byte*) print_char_cursor#134 test_16u::@3/(byte*) print_char_cursor#142 test_16u::@5/(byte*) print_char_cursor#39 test_16u::@7/(byte*) print_char_cursor#41 test_16u::@9/(byte*) print_char_cursor#43 )
  (word) print_word::w#5 ← phi( print_sword::@2/(word) print_word::w#0 test_16u::@3/(word) print_word::w#1 test_16u::@5/(word) print_word::w#2 test_16u::@7/(word) print_word::w#3 test_16u::@9/(word) print_word::w#4 )
  (byte~) print_word::$0 ← > (word) print_word::w#5
  (byte) print_byte::b#1 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#6 ← phi( print_word/(word) print_word::w#5 )
  (byte*) print_char_cursor#78 ← phi( print_word/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#78
  (byte~) print_word::$2 ← < (word) print_word::w#6
  (byte) print_byte::b#2 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#79 ← phi( print_word::@1/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#79
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#80 ← phi( print_word::@2/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#80
  return 
  to:@return
@12: scope:[]  from @begin
  (byte*) print_screen#10 ← phi( @begin/(byte*) print_screen#0 )
  (byte*) print_char_cursor#161 ← phi( @begin/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#66 ← phi( @begin/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@19
print_byte: scope:[print_byte]  from print_sbyte::@2 print_word print_word::@1 test_8u::@3 test_8u::@5 test_8u::@7 test_8u::@9
  (byte*) print_char_cursor#139 ← phi( print_sbyte::@2/(byte*) print_char_cursor#137 print_word/(byte*) print_char_cursor#138 print_word::@1/(byte*) print_char_cursor#13 test_8u::@3/(byte*) print_char_cursor#141 test_8u::@5/(byte*) print_char_cursor#30 test_8u::@7/(byte*) print_char_cursor#32 test_8u::@9/(byte*) print_char_cursor#34 )
  (byte) print_byte::b#7 ← phi( print_sbyte::@2/(byte) print_byte::b#0 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 test_8u::@3/(byte) print_byte::b#3 test_8u::@5/(byte) print_byte::b#4 test_8u::@7/(byte) print_byte::b#5 test_8u::@9/(byte) print_byte::b#6 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (number) 4
  (byte) print_char::ch#4 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#8 ← phi( print_byte/(byte) print_byte::b#7 )
  (byte*) print_char_cursor#81 ← phi( print_byte/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#81
  (number~) print_byte::$2 ← (byte) print_byte::b#8 & (number) $f
  (byte) print_char::ch#5 ← *((byte[]) print_hextab#0 + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#82 ← phi( print_byte::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#82
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#83 ← phi( print_byte::@2/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#83
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3 print_sword::@1 print_sword::@3
  (byte*) print_char_cursor#84 ← phi( print_byte/(byte*) print_char_cursor#139 print_byte::@1/(byte*) print_char_cursor#16 print_sbyte::@1/(byte*) print_char_cursor#135 print_sbyte::@3/(byte*) print_char_cursor#136 print_sword::@1/(byte*) print_char_cursor#132 print_sword::@3/(byte*) print_char_cursor#133 )
  (byte) print_char::ch#6 ← phi( print_byte/(byte) print_char::ch#4 print_byte::@1/(byte) print_char::ch#5 print_sbyte::@1/(byte) print_char::ch#2 print_sbyte::@3/(byte) print_char::ch#3 print_sword::@1/(byte) print_char::ch#0 print_sword::@3/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#84) ← (byte) print_char::ch#6
  (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#84
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#85 ← phi( print_char/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#85
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#3
  (byte*) print_char_cursor#21 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#86 ← phi( print_cls::@2/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#23 ← phi( print_cls::@2/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#23
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#86
  return 
  to:@return
@19: scope:[]  from @12
  (byte*) print_screen#9 ← phi( @12/(byte*) print_screen#10 )
  (byte*) print_char_cursor#160 ← phi( @12/(byte*) print_char_cursor#161 )
  (byte*) print_line_cursor#61 ← phi( @12/(byte*) print_line_cursor#66 )
  (byte) rem8u#0 ← (number) 0
  to:@21
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  (byte) rem8u#31 ← phi( div8s::@4/(byte) rem8u#32 test_8u::@1/(byte) rem8u#36 )
  (byte) div8u::divisor#2 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 )
  (byte) div8u::dividend#2 ← phi( div8s::@4/(byte) div8u::dividend#0 test_8u::@1/(byte) div8u::dividend#1 )
  (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2
  (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2
  (byte) divr8u::rem#0 ← (number) 0
  call divr8u 
  (byte) divr8u::return#0 ← (byte) divr8u::return#2
  to:div8u::@2
div8u::@2: scope:[div8u]  from div8u
  (byte) rem8u#15 ← phi( div8u/(byte) rem8u#4 )
  (byte) divr8u::return#3 ← phi( div8u/(byte) divr8u::return#0 )
  (byte~) div8u::$0 ← (byte) divr8u::return#3
  (byte) rem8u#1 ← (byte) rem8u#15
  (byte) div8u::return#0 ← (byte~) div8u::$0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@2
  (byte) rem8u#16 ← phi( div8u::@2/(byte) rem8u#1 )
  (byte) div8u::return#4 ← phi( div8u::@2/(byte) div8u::return#0 )
  (byte) div8u::return#1 ← (byte) div8u::return#4
  (byte) rem8u#2 ← (byte) rem8u#16
  return 
  to:@return
divr8u: scope:[divr8u]  from div8u
  (byte) divr8u::divisor#5 ← phi( div8u/(byte) divr8u::divisor#0 )
  (byte) divr8u::dividend#4 ← phi( div8u/(byte) divr8u::dividend#0 )
  (byte) divr8u::rem#9 ← phi( div8u/(byte) divr8u::rem#0 )
  (byte) divr8u::quotient#0 ← (number) 0
  (byte) divr8u::i#0 ← (byte) 0
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  (byte) divr8u::i#5 ← phi( divr8u/(byte) divr8u::i#0 divr8u::@3/(byte) divr8u::i#1 )
  (byte) divr8u::divisor#3 ← phi( divr8u/(byte) divr8u::divisor#5 divr8u::@3/(byte) divr8u::divisor#6 )
  (byte) divr8u::quotient#6 ← phi( divr8u/(byte) divr8u::quotient#0 divr8u::@3/(byte) divr8u::quotient#8 )
  (byte) divr8u::dividend#2 ← phi( divr8u/(byte) divr8u::dividend#4 divr8u::@3/(byte) divr8u::dividend#5 )
  (byte) divr8u::rem#4 ← phi( divr8u/(byte) divr8u::rem#9 divr8u::@3/(byte) divr8u::rem#10 )
  (byte~) divr8u::$0 ← (byte) divr8u::rem#4 << (number) 1
  (byte) divr8u::rem#1 ← (byte~) divr8u::$0
  (number~) divr8u::$1 ← (byte) divr8u::dividend#2 & (number) $80
  (bool~) divr8u::$2 ← (number~) divr8u::$1 != (number) 0
  (bool~) divr8u::$3 ← ! (bool~) divr8u::$2
  if((bool~) divr8u::$3) goto divr8u::@2
  to:divr8u::@4
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  (byte) divr8u::i#3 ← phi( divr8u::@1/(byte) divr8u::i#5 divr8u::@4/(byte) divr8u::i#6 )
  (byte) divr8u::divisor#1 ← phi( divr8u::@1/(byte) divr8u::divisor#3 divr8u::@4/(byte) divr8u::divisor#4 )
  (byte) divr8u::rem#5 ← phi( divr8u::@1/(byte) divr8u::rem#1 divr8u::@4/(byte) divr8u::rem#2 )
  (byte) divr8u::quotient#3 ← phi( divr8u::@1/(byte) divr8u::quotient#6 divr8u::@4/(byte) divr8u::quotient#7 )
  (byte) divr8u::dividend#3 ← phi( divr8u::@1/(byte) divr8u::dividend#2 divr8u::@4/(byte) divr8u::dividend#6 )
  (byte~) divr8u::$5 ← (byte) divr8u::dividend#3 << (number) 1
  (byte) divr8u::dividend#1 ← (byte~) divr8u::$5
  (byte~) divr8u::$6 ← (byte) divr8u::quotient#3 << (number) 1
  (byte) divr8u::quotient#1 ← (byte~) divr8u::$6
  (bool~) divr8u::$7 ← (byte) divr8u::rem#5 >= (byte) divr8u::divisor#1
  (bool~) divr8u::$8 ← ! (bool~) divr8u::$7
  if((bool~) divr8u::$8) goto divr8u::@3
  to:divr8u::@5
divr8u::@4: scope:[divr8u]  from divr8u::@1
  (byte) divr8u::i#6 ← phi( divr8u::@1/(byte) divr8u::i#5 )
  (byte) divr8u::divisor#4 ← phi( divr8u::@1/(byte) divr8u::divisor#3 )
  (byte) divr8u::quotient#7 ← phi( divr8u::@1/(byte) divr8u::quotient#6 )
  (byte) divr8u::dividend#6 ← phi( divr8u::@1/(byte) divr8u::dividend#2 )
  (byte) divr8u::rem#6 ← phi( divr8u::@1/(byte) divr8u::rem#1 )
  (number~) divr8u::$4 ← (byte) divr8u::rem#6 | (number) 1
  (byte) divr8u::rem#2 ← (number~) divr8u::$4
  to:divr8u::@2
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  (byte) divr8u::divisor#6 ← phi( divr8u::@2/(byte) divr8u::divisor#1 divr8u::@5/(byte) divr8u::divisor#2 )
  (byte) divr8u::quotient#8 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 )
  (byte) divr8u::dividend#5 ← phi( divr8u::@2/(byte) divr8u::dividend#1 divr8u::@5/(byte) divr8u::dividend#7 )
  (byte) divr8u::rem#10 ← phi( divr8u::@2/(byte) divr8u::rem#5 divr8u::@5/(byte) divr8u::rem#3 )
  (byte) divr8u::i#2 ← phi( divr8u::@2/(byte) divr8u::i#3 divr8u::@5/(byte) divr8u::i#4 )
  (byte) divr8u::i#1 ← (byte) divr8u::i#2 + rangenext(0,7)
  (bool~) divr8u::$10 ← (byte) divr8u::i#1 != rangelast(0,7)
  if((bool~) divr8u::$10) goto divr8u::@1
  to:divr8u::@6
divr8u::@5: scope:[divr8u]  from divr8u::@2
  (byte) divr8u::dividend#7 ← phi( divr8u::@2/(byte) divr8u::dividend#1 )
  (byte) divr8u::i#4 ← phi( divr8u::@2/(byte) divr8u::i#3 )
  (byte) divr8u::divisor#2 ← phi( divr8u::@2/(byte) divr8u::divisor#1 )
  (byte) divr8u::rem#7 ← phi( divr8u::@2/(byte) divr8u::rem#5 )
  (byte) divr8u::quotient#4 ← phi( divr8u::@2/(byte) divr8u::quotient#1 )
  (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#4
  (byte~) divr8u::$9 ← (byte) divr8u::rem#7 - (byte) divr8u::divisor#2
  (byte) divr8u::rem#3 ← (byte~) divr8u::$9
  to:divr8u::@3
divr8u::@6: scope:[divr8u]  from divr8u::@3
  (byte) divr8u::quotient#5 ← phi( divr8u::@3/(byte) divr8u::quotient#8 )
  (byte) divr8u::rem#8 ← phi( divr8u::@3/(byte) divr8u::rem#10 )
  (byte) rem8u#3 ← (byte) divr8u::rem#8
  (byte) divr8u::return#1 ← (byte) divr8u::quotient#5
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  (byte) rem8u#17 ← phi( divr8u::@6/(byte) rem8u#3 )
  (byte) divr8u::return#4 ← phi( divr8u::@6/(byte) divr8u::return#1 )
  (byte) divr8u::return#2 ← (byte) divr8u::return#4
  (byte) rem8u#4 ← (byte) rem8u#17
  return 
  to:@return
@21: scope:[]  from @19
  (byte*) print_screen#8 ← phi( @19/(byte*) print_screen#9 )
  (byte) rem8u#55 ← phi( @19/(byte) rem8u#0 )
  (byte*) print_char_cursor#159 ← phi( @19/(byte*) print_char_cursor#160 )
  (byte*) print_line_cursor#56 ← phi( @19/(byte*) print_line_cursor#61 )
  (word) rem16u#0 ← (number) 0
  to:@24
divr16u: scope:[divr16u]  from div16u divr16s::@4
  (word) divr16u::divisor#6 ← phi( div16u/(word) divr16u::divisor#0 divr16s::@4/(word) divr16u::divisor#1 )
  (word) divr16u::dividend#5 ← phi( div16u/(word) divr16u::dividend#1 divr16s::@4/(word) divr16u::dividend#2 )
  (word) divr16u::rem#10 ← phi( div16u/(word) divr16u::rem#3 divr16s::@4/(word) divr16u::rem#4 )
  (word) divr16u::quotient#0 ← (number) 0
  (byte) divr16u::i#0 ← (byte) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#4 ← phi( divr16u/(word) divr16u::divisor#6 divr16u::@3/(word) divr16u::divisor#7 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#6 )
  (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  (word~) divr16u::$0 ← (word) divr16u::rem#5 << (number) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
  (bool~) divr16u::$3 ← (number~) divr16u::$2 != (number) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#2 ← phi( divr16u::@1/(word) divr16u::divisor#4 divr16u::@4/(word) divr16u::divisor#5 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#4 ← phi( divr16u::@1/(word) divr16u::dividend#3 divr16u::@4/(word) divr16u::dividend#7 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#4 << (number) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#5 ← phi( divr16u::@1/(word) divr16u::divisor#4 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#7 ← phi( divr16u::@1/(word) divr16u::dividend#3 )
  (word) divr16u::rem#7 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (number~) divr16u::$5 ← (word) divr16u::rem#7 | (number) 1
  (word) divr16u::rem#1 ← (number~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#7 ← phi( divr16u::@2/(word) divr16u::divisor#2 divr16u::@5/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#6 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#8 )
  (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#8 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#3 ← phi( divr16u::@2/(word) divr16u::divisor#2 )
  (word) divr16u::rem#8 ← phi( divr16u::@2/(word) divr16u::rem#6 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#8 - (word) divr16u::divisor#3
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#9 ← phi( divr16u::@3/(word) divr16u::rem#11 )
  (word) rem16u#1 ← (word) divr16u::rem#9
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#17 ← phi( divr16u::@6/(word) rem16u#1 )
  (word) divr16u::return#4 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#4
  (word) rem16u#2 ← (word) rem16u#17
  return 
  to:@return
div16u: scope:[div16u]  from test_16u::@1
  (word) rem16u#35 ← phi( test_16u::@1/(word) rem16u#40 )
  (word) div16u::divisor#1 ← phi( test_16u::@1/(word) div16u::divisor#0 )
  (word) div16u::dividend#1 ← phi( test_16u::@1/(word) div16u::dividend#0 )
  (word) divr16u::dividend#1 ← (word) div16u::dividend#1
  (word) divr16u::divisor#0 ← (word) div16u::divisor#1
  (word) divr16u::rem#3 ← (number) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u
  (word) rem16u#18 ← phi( div16u/(word) rem16u#2 )
  (word) divr16u::return#5 ← phi( div16u/(word) divr16u::return#2 )
  (word~) div16u::$0 ← (word) divr16u::return#5
  (word) rem16u#3 ← (word) rem16u#18
  (word) div16u::return#0 ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@2
  (word) rem16u#19 ← phi( div16u::@2/(word) rem16u#3 )
  (word) div16u::return#3 ← phi( div16u::@2/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#3
  (word) rem16u#4 ← (word) rem16u#19
  return 
  to:@return
@24: scope:[]  from @21
  (byte*) print_screen#7 ← phi( @21/(byte*) print_screen#8 )
  (word) rem16u#55 ← phi( @21/(word) rem16u#0 )
  (byte) rem8u#52 ← phi( @21/(byte) rem8u#55 )
  (byte*) print_char_cursor#154 ← phi( @21/(byte*) print_char_cursor#159 )
  (byte*) print_line_cursor#51 ← phi( @21/(byte*) print_line_cursor#56 )
  (signed byte) rem8s#0 ← (number) 0
  to:@25
div8s: scope:[div8s]  from test_8s::@1
  (byte) rem8u#60 ← phi( test_8s::@1/(byte) rem8u#39 )
  (signed byte) div8s::divisor#6 ← phi( test_8s::@1/(signed byte) div8s::divisor#0 )
  (signed byte) div8s::dividend#1 ← phi( test_8s::@1/(signed byte) div8s::dividend#0 )
  (byte) div8s::neg#0 ← (number) 0
  (byte) div8s::dividendu#0 ← (number) 0
  (bool~) div8s::$0 ← (signed byte) div8s::dividend#1 < (number) 0
  if((bool~) div8s::$0) goto div8s::@1
  to:div8s::@7
div8s::@1: scope:[div8s]  from div8s
  (byte) rem8u#56 ← phi( div8s/(byte) rem8u#60 )
  (signed byte) div8s::divisor#4 ← phi( div8s/(signed byte) div8s::divisor#6 )
  (signed byte) div8s::dividend#2 ← phi( div8s/(signed byte) div8s::dividend#1 )
  (signed byte~) div8s::$5 ← - (signed byte) div8s::dividend#2
  (byte~) div8s::$6 ← ((byte)) (signed byte~) div8s::$5
  (byte) div8s::dividendu#1 ← (byte~) div8s::$6
  (byte) div8s::neg#1 ← (number) 1
  to:div8s::@2
div8s::@7: scope:[div8s]  from div8s
  (byte) rem8u#57 ← phi( div8s/(byte) rem8u#60 )
  (byte) div8s::neg#7 ← phi( div8s/(byte) div8s::neg#0 )
  (signed byte) div8s::divisor#5 ← phi( div8s/(signed byte) div8s::divisor#6 )
  (signed byte) div8s::dividend#3 ← phi( div8s/(signed byte) div8s::dividend#1 )
  (byte~) div8s::$4 ← ((byte)) (signed byte) div8s::dividend#3
  (byte) div8s::dividendu#2 ← (byte~) div8s::$4
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@7
  (byte) rem8u#51 ← phi( div8s::@1/(byte) rem8u#56 div8s::@7/(byte) rem8u#57 )
  (byte) div8s::dividendu#6 ← phi( div8s::@1/(byte) div8s::dividendu#1 div8s::@7/(byte) div8s::dividendu#2 )
  (byte) div8s::neg#5 ← phi( div8s::@1/(byte) div8s::neg#1 div8s::@7/(byte) div8s::neg#7 )
  (signed byte) div8s::divisor#1 ← phi( div8s::@1/(signed byte) div8s::divisor#4 div8s::@7/(signed byte) div8s::divisor#5 )
  (byte) div8s::divisoru#0 ← (number) 0
  (bool~) div8s::$1 ← (signed byte) div8s::divisor#1 < (number) 0
  if((bool~) div8s::$1) goto div8s::@3
  to:div8s::@9
div8s::@3: scope:[div8s]  from div8s::@2
  (byte) rem8u#42 ← phi( div8s::@2/(byte) rem8u#51 )
  (byte) div8s::dividendu#4 ← phi( div8s::@2/(byte) div8s::dividendu#6 )
  (byte) div8s::neg#3 ← phi( div8s::@2/(byte) div8s::neg#5 )
  (signed byte) div8s::divisor#2 ← phi( div8s::@2/(signed byte) div8s::divisor#1 )
  (signed byte~) div8s::$8 ← - (signed byte) div8s::divisor#2
  (byte~) div8s::$9 ← ((byte)) (signed byte~) div8s::$8
  (byte) div8s::divisoru#1 ← (byte~) div8s::$9
  (number~) div8s::$10 ← (byte) div8s::neg#3 ^ (number) 1
  (byte) div8s::neg#2 ← (number~) div8s::$10
  to:div8s::@4
div8s::@9: scope:[div8s]  from div8s::@2
  (byte) div8s::neg#8 ← phi( div8s::@2/(byte) div8s::neg#5 )
  (byte) rem8u#43 ← phi( div8s::@2/(byte) rem8u#51 )
  (byte) div8s::dividendu#5 ← phi( div8s::@2/(byte) div8s::dividendu#6 )
  (signed byte) div8s::divisor#3 ← phi( div8s::@2/(signed byte) div8s::divisor#1 )
  (byte~) div8s::$7 ← ((byte)) (signed byte) div8s::divisor#3
  (byte) div8s::divisoru#2 ← (byte~) div8s::$7
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@9
  (byte) div8s::neg#6 ← phi( div8s::@3/(byte) div8s::neg#2 div8s::@9/(byte) div8s::neg#8 )
  (byte) rem8u#32 ← phi( div8s::@3/(byte) rem8u#42 div8s::@9/(byte) rem8u#43 )
  (byte) div8s::divisoru#3 ← phi( div8s::@3/(byte) div8s::divisoru#1 div8s::@9/(byte) div8s::divisoru#2 )
  (byte) div8s::dividendu#3 ← phi( div8s::@3/(byte) div8s::dividendu#4 div8s::@9/(byte) div8s::dividendu#5 )
  (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3
  (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
  call div8u 
  (byte) div8u::return#2 ← (byte) div8u::return#1
  to:div8s::@15
div8s::@15: scope:[div8s]  from div8s::@4
  (byte) div8s::neg#4 ← phi( div8s::@4/(byte) div8s::neg#6 )
  (byte) rem8u#18 ← phi( div8s::@4/(byte) rem8u#2 )
  (byte) div8u::return#5 ← phi( div8s::@4/(byte) div8u::return#2 )
  (byte~) div8s::$2 ← (byte) div8u::return#5
  (byte) rem8u#5 ← (byte) rem8u#18
  (byte) div8s::resultu#0 ← (byte~) div8s::$2
  (bool~) div8s::$3 ← (byte) div8s::neg#4 == (number) 0
  if((bool~) div8s::$3) goto div8s::@5
  to:div8s::@11
div8s::@5: scope:[div8s]  from div8s::@15
  (byte) div8s::resultu#1 ← phi( div8s::@15/(byte) div8s::resultu#0 )
  (byte) rem8u#19 ← phi( div8s::@15/(byte) rem8u#5 )
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) rem8u#19
  (signed byte) rem8s#1 ← (signed byte~) div8s::$15
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) div8s::resultu#1
  (signed byte) div8s::return#0 ← (signed byte~) div8s::$16
  to:div8s::@return
div8s::@11: scope:[div8s]  from div8s::@15
  (byte) div8s::resultu#2 ← phi( div8s::@15/(byte) div8s::resultu#0 )
  (byte) rem8u#20 ← phi( div8s::@15/(byte) rem8u#5 )
  (signed byte~) div8s::$11 ← ((signed byte)) (byte) rem8u#20
  (signed byte~) div8s::$12 ← - (signed byte~) div8s::$11
  (signed byte) rem8s#2 ← (signed byte~) div8s::$12
  (signed byte~) div8s::$13 ← ((signed byte)) (byte) div8s::resultu#2
  (signed byte~) div8s::$14 ← - (signed byte~) div8s::$13
  (signed byte) div8s::return#1 ← (signed byte~) div8s::$14
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@11 div8s::@5
  (signed byte) rem8s#9 ← phi( div8s::@11/(signed byte) rem8s#2 div8s::@5/(signed byte) rem8s#1 )
  (byte) rem8u#21 ← phi( div8s::@11/(byte) rem8u#20 div8s::@5/(byte) rem8u#19 )
  (signed byte) div8s::return#4 ← phi( div8s::@11/(signed byte) div8s::return#1 div8s::@5/(signed byte) div8s::return#0 )
  (signed byte) div8s::return#2 ← (signed byte) div8s::return#4
  (byte) rem8u#6 ← (byte) rem8u#21
  (signed byte) rem8s#3 ← (signed byte) rem8s#9
  return 
  to:@return
@25: scope:[]  from @24
  (byte*) print_screen#6 ← phi( @24/(byte*) print_screen#7 )
  (signed byte) rem8s#26 ← phi( @24/(signed byte) rem8s#0 )
  (word) rem16u#54 ← phi( @24/(word) rem16u#55 )
  (byte) rem8u#50 ← phi( @24/(byte) rem8u#52 )
  (byte*) print_char_cursor#153 ← phi( @24/(byte*) print_char_cursor#154 )
  (byte*) print_line_cursor#50 ← phi( @24/(byte*) print_line_cursor#51 )
  (signed word) rem16s#0 ← (number) 0
  to:@32
divr16s: scope:[divr16s]  from div16s
  (word) rem16u#64 ← phi( div16s/(word) rem16u#37 )
  (signed word) divr16s::divisor#6 ← phi( div16s/(signed word) divr16s::divisor#0 )
  (signed word) divr16s::rem#1 ← phi( div16s/(signed word) divr16s::rem#0 )
  (signed word) divr16s::dividend#1 ← phi( div16s/(signed word) divr16s::dividend#0 )
  (byte) divr16s::neg#0 ← (number) 0
  (word) divr16s::dividendu#0 ← (number) 0
  (word) divr16s::remu#0 ← (number) 0
  (bool~) divr16s::$0 ← (signed word) divr16s::dividend#1 < (number) 0
  (bool~) divr16s::$1 ← (signed word) divr16s::rem#1 < (number) 0
  (bool~) divr16s::$2 ← (bool~) divr16s::$0 || (bool~) divr16s::$1
  if((bool~) divr16s::$2) goto divr16s::@1
  to:divr16s::@7
divr16s::@1: scope:[divr16s]  from divr16s
  (word) rem16u#60 ← phi( divr16s/(word) rem16u#64 )
  (signed word) divr16s::divisor#4 ← phi( divr16s/(signed word) divr16s::divisor#6 )
  (signed word) divr16s::rem#2 ← phi( divr16s/(signed word) divr16s::rem#1 )
  (signed word) divr16s::dividend#2 ← phi( divr16s/(signed word) divr16s::dividend#1 )
  (signed word~) divr16s::$8 ← - (signed word) divr16s::dividend#2
  (word~) divr16s::$9 ← ((word)) (signed word~) divr16s::$8
  (word) divr16s::dividendu#1 ← (word~) divr16s::$9
  (signed word~) divr16s::$10 ← - (signed word) divr16s::rem#2
  (word~) divr16s::$11 ← ((word)) (signed word~) divr16s::$10
  (word) divr16s::remu#1 ← (word~) divr16s::$11
  (byte) divr16s::neg#1 ← (number) 1
  to:divr16s::@2
divr16s::@7: scope:[divr16s]  from divr16s
  (word) rem16u#61 ← phi( divr16s/(word) rem16u#64 )
  (byte) divr16s::neg#7 ← phi( divr16s/(byte) divr16s::neg#0 )
  (signed word) divr16s::divisor#5 ← phi( divr16s/(signed word) divr16s::divisor#6 )
  (signed word) divr16s::rem#3 ← phi( divr16s/(signed word) divr16s::rem#1 )
  (signed word) divr16s::dividend#3 ← phi( divr16s/(signed word) divr16s::dividend#1 )
  (word~) divr16s::$6 ← ((word)) (signed word) divr16s::dividend#3
  (word) divr16s::dividendu#2 ← (word~) divr16s::$6
  (word~) divr16s::$7 ← ((word)) (signed word) divr16s::rem#3
  (word) divr16s::remu#2 ← (word~) divr16s::$7
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@7
  (word) rem16u#56 ← phi( divr16s::@1/(word) rem16u#60 divr16s::@7/(word) rem16u#61 )
  (word) divr16s::remu#6 ← phi( divr16s::@1/(word) divr16s::remu#1 divr16s::@7/(word) divr16s::remu#2 )
  (word) divr16s::dividendu#6 ← phi( divr16s::@1/(word) divr16s::dividendu#1 divr16s::@7/(word) divr16s::dividendu#2 )
  (byte) divr16s::neg#5 ← phi( divr16s::@1/(byte) divr16s::neg#1 divr16s::@7/(byte) divr16s::neg#7 )
  (signed word) divr16s::divisor#1 ← phi( divr16s::@1/(signed word) divr16s::divisor#4 divr16s::@7/(signed word) divr16s::divisor#5 )
  (word) divr16s::divisoru#0 ← (number) 0
  (bool~) divr16s::$3 ← (signed word) divr16s::divisor#1 < (number) 0
  if((bool~) divr16s::$3) goto divr16s::@3
  to:divr16s::@9
divr16s::@3: scope:[divr16s]  from divr16s::@2
  (word) rem16u#46 ← phi( divr16s::@2/(word) rem16u#56 )
  (word) divr16s::remu#4 ← phi( divr16s::@2/(word) divr16s::remu#6 )
  (word) divr16s::dividendu#4 ← phi( divr16s::@2/(word) divr16s::dividendu#6 )
  (byte) divr16s::neg#3 ← phi( divr16s::@2/(byte) divr16s::neg#5 )
  (signed word) divr16s::divisor#2 ← phi( divr16s::@2/(signed word) divr16s::divisor#1 )
  (signed word~) divr16s::$13 ← - (signed word) divr16s::divisor#2
  (word~) divr16s::$14 ← ((word)) (signed word~) divr16s::$13
  (word) divr16s::divisoru#1 ← (word~) divr16s::$14
  (number~) divr16s::$15 ← (byte) divr16s::neg#3 ^ (number) 1
  (byte) divr16s::neg#2 ← (number~) divr16s::$15
  to:divr16s::@4
divr16s::@9: scope:[divr16s]  from divr16s::@2
  (byte) divr16s::neg#8 ← phi( divr16s::@2/(byte) divr16s::neg#5 )
  (word) rem16u#47 ← phi( divr16s::@2/(word) rem16u#56 )
  (word) divr16s::remu#5 ← phi( divr16s::@2/(word) divr16s::remu#6 )
  (word) divr16s::dividendu#5 ← phi( divr16s::@2/(word) divr16s::dividendu#6 )
  (signed word) divr16s::divisor#3 ← phi( divr16s::@2/(signed word) divr16s::divisor#1 )
  (word~) divr16s::$12 ← ((word)) (signed word) divr16s::divisor#3
  (word) divr16s::divisoru#2 ← (word~) divr16s::$12
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@9
  (byte) divr16s::neg#6 ← phi( divr16s::@3/(byte) divr16s::neg#2 divr16s::@9/(byte) divr16s::neg#8 )
  (word) rem16u#36 ← phi( divr16s::@3/(word) rem16u#46 divr16s::@9/(word) rem16u#47 )
  (word) divr16s::remu#3 ← phi( divr16s::@3/(word) divr16s::remu#4 divr16s::@9/(word) divr16s::remu#5 )
  (word) divr16s::divisoru#3 ← phi( divr16s::@3/(word) divr16s::divisoru#1 divr16s::@9/(word) divr16s::divisoru#2 )
  (word) divr16s::dividendu#3 ← phi( divr16s::@3/(word) divr16s::dividendu#4 divr16s::@9/(word) divr16s::dividendu#5 )
  (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3
  (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3
  (word) divr16u::rem#4 ← (word) divr16s::remu#3
  call divr16u 
  (word) divr16u::return#3 ← (word) divr16u::return#1
  to:divr16s::@15
divr16s::@15: scope:[divr16s]  from divr16s::@4
  (byte) divr16s::neg#4 ← phi( divr16s::@4/(byte) divr16s::neg#6 )
  (word) rem16u#20 ← phi( divr16s::@4/(word) rem16u#2 )
  (word) divr16u::return#6 ← phi( divr16s::@4/(word) divr16u::return#3 )
  (word~) divr16s::$4 ← (word) divr16u::return#6
  (word) rem16u#5 ← (word) rem16u#20
  (word) divr16s::resultu#0 ← (word~) divr16s::$4
  (bool~) divr16s::$5 ← (byte) divr16s::neg#4 == (number) 0
  if((bool~) divr16s::$5) goto divr16s::@5
  to:divr16s::@11
divr16s::@5: scope:[divr16s]  from divr16s::@15
  (word) divr16s::resultu#1 ← phi( divr16s::@15/(word) divr16s::resultu#0 )
  (word) rem16u#21 ← phi( divr16s::@15/(word) rem16u#5 )
  (signed word~) divr16s::$20 ← ((signed word)) (word) rem16u#21
  (signed word) rem16s#1 ← (signed word~) divr16s::$20
  (signed word~) divr16s::$21 ← ((signed word)) (word) divr16s::resultu#1
  (signed word) divr16s::return#0 ← (signed word~) divr16s::$21
  to:divr16s::@return
divr16s::@11: scope:[divr16s]  from divr16s::@15
  (word) divr16s::resultu#2 ← phi( divr16s::@15/(word) divr16s::resultu#0 )
  (word) rem16u#22 ← phi( divr16s::@15/(word) rem16u#5 )
  (signed word~) divr16s::$16 ← ((signed word)) (word) rem16u#22
  (signed word~) divr16s::$17 ← - (signed word~) divr16s::$16
  (signed word) rem16s#2 ← (signed word~) divr16s::$17
  (signed word~) divr16s::$18 ← ((signed word)) (word) divr16s::resultu#2
  (signed word~) divr16s::$19 ← - (signed word~) divr16s::$18
  (signed word) divr16s::return#1 ← (signed word~) divr16s::$19
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@11 divr16s::@5
  (signed word) rem16s#11 ← phi( divr16s::@11/(signed word) rem16s#2 divr16s::@5/(signed word) rem16s#1 )
  (word) rem16u#23 ← phi( divr16s::@11/(word) rem16u#22 divr16s::@5/(word) rem16u#21 )
  (signed word) divr16s::return#4 ← phi( divr16s::@11/(signed word) divr16s::return#1 divr16s::@5/(signed word) divr16s::return#0 )
  (signed word) divr16s::return#2 ← (signed word) divr16s::return#4
  (word) rem16u#6 ← (word) rem16u#23
  (signed word) rem16s#3 ← (signed word) rem16s#11
  return 
  to:@return
div16s: scope:[div16s]  from test_16s::@1
  (signed word) rem16s#20 ← phi( test_16s::@1/(signed word) rem16s#22 )
  (word) rem16u#37 ← phi( test_16s::@1/(word) rem16u#43 )
  (signed word) div16s::divisor#1 ← phi( test_16s::@1/(signed word) div16s::divisor#0 )
  (signed word) div16s::dividend#1 ← phi( test_16s::@1/(signed word) div16s::dividend#0 )
  (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#1
  (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#1
  (signed word) divr16s::rem#0 ← (number) 0
  call divr16s 
  (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
  to:div16s::@2
div16s::@2: scope:[div16s]  from div16s
  (signed word) rem16s#12 ← phi( div16s/(signed word) rem16s#3 )
  (word) rem16u#24 ← phi( div16s/(word) rem16u#6 )
  (signed word) divr16s::return#5 ← phi( div16s/(signed word) divr16s::return#3 )
  (signed word~) div16s::$0 ← (signed word) divr16s::return#5
  (word) rem16u#7 ← (word) rem16u#24
  (signed word) rem16s#4 ← (signed word) rem16s#12
  (signed word) div16s::return#0 ← (signed word~) div16s::$0
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@2
  (signed word) rem16s#13 ← phi( div16s::@2/(signed word) rem16s#4 )
  (word) rem16u#25 ← phi( div16s::@2/(word) rem16u#7 )
  (signed word) div16s::return#3 ← phi( div16s::@2/(signed word) div16s::return#0 )
  (signed word) div16s::return#1 ← (signed word) div16s::return#3
  (word) rem16u#8 ← (word) rem16u#25
  (signed word) rem16s#5 ← (signed word) rem16s#13
  return 
  to:@return
main: scope:[main]  from @32
  (signed word) rem16s#34 ← phi( @32/(signed word) rem16s#25 )
  (signed byte) rem8s#29 ← phi( @32/(signed byte) rem8s#21 )
  (word) rem16u#57 ← phi( @32/(word) rem16u#45 )
  (byte) rem8u#44 ← phi( @32/(byte) rem8u#41 )
  (byte*) print_char_cursor#140 ← phi( @32/(byte*) print_char_cursor#145 )
  (byte*) print_line_cursor#40 ← phi( @32/(byte*) print_line_cursor#45 )
  (byte*) print_screen#4 ← phi( @32/(byte*) print_screen#5 )
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (signed word) rem16s#32 ← phi( main/(signed word) rem16s#34 )
  (signed byte) rem8s#27 ← phi( main/(signed byte) rem8s#29 )
  (word) rem16u#48 ← phi( main/(word) rem16u#57 )
  (byte) rem8u#33 ← phi( main/(byte) rem8u#44 )
  (byte*) print_char_cursor#87 ← phi( main/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#24 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#24
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#87
  call test_8u 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (signed word) rem16s#30 ← phi( main::@1/(signed word) rem16s#32 )
  (signed byte) rem8s#22 ← phi( main::@1/(signed byte) rem8s#27 )
  (word) rem16u#38 ← phi( main::@1/(word) rem16u#48 )
  (byte*) print_line_cursor#25 ← phi( main::@1/(byte*) print_line_cursor#12 )
  (byte*) print_char_cursor#88 ← phi( main::@1/(byte*) print_char_cursor#37 )
  (byte) rem8u#22 ← phi( main::@1/(byte) rem8u#11 )
  (byte) rem8u#7 ← (byte) rem8u#22
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#88
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#25
  call test_16u 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (signed word) rem16s#26 ← phi( main::@2/(signed word) rem16s#30 )
  (signed byte) rem8s#16 ← phi( main::@2/(signed byte) rem8s#22 )
  (byte) rem8u#34 ← phi( main::@2/(byte) rem8u#7 )
  (byte*) print_line_cursor#26 ← phi( main::@2/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#89 ← phi( main::@2/(byte*) print_char_cursor#46 )
  (word) rem16u#26 ← phi( main::@2/(word) rem16u#13 )
  (word) rem16u#9 ← (word) rem16u#26
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#89
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#26
  call test_8s 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (signed word) rem16s#21 ← phi( main::@3/(signed word) rem16s#26 )
  (word) rem16u#39 ← phi( main::@3/(word) rem16u#9 )
  (byte*) print_line_cursor#27 ← phi( main::@3/(byte*) print_line_cursor#16 )
  (byte*) print_char_cursor#90 ← phi( main::@3/(byte*) print_char_cursor#55 )
  (signed byte) rem8s#10 ← phi( main::@3/(signed byte) rem8s#7 )
  (byte) rem8u#23 ← phi( main::@3/(byte) rem8u#13 )
  (byte) rem8u#8 ← (byte) rem8u#23
  (signed byte) rem8s#4 ← (signed byte) rem8s#10
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#90
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#27
  call test_16s 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (signed byte) rem8s#17 ← phi( main::@4/(signed byte) rem8s#4 )
  (byte) rem8u#35 ← phi( main::@4/(byte) rem8u#8 )
  (byte*) print_line_cursor#28 ← phi( main::@4/(byte*) print_line_cursor#18 )
  (byte*) print_char_cursor#91 ← phi( main::@4/(byte*) print_char_cursor#64 )
  (signed word) rem16s#14 ← phi( main::@4/(signed word) rem16s#9 )
  (word) rem16u#27 ← phi( main::@4/(word) rem16u#15 )
  (word) rem16u#10 ← (word) rem16u#27
  (signed word) rem16s#6 ← (signed word) rem16s#14
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#91
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#28
  to:main::@return
main::@return: scope:[main]  from main::@5
  (signed word) rem16s#15 ← phi( main::@5/(signed word) rem16s#6 )
  (signed byte) rem8s#11 ← phi( main::@5/(signed byte) rem8s#17 )
  (word) rem16u#28 ← phi( main::@5/(word) rem16u#10 )
  (byte) rem8u#24 ← phi( main::@5/(byte) rem8u#35 )
  (byte*) print_char_cursor#92 ← phi( main::@5/(byte*) print_char_cursor#27 )
  (byte*) print_line_cursor#29 ← phi( main::@5/(byte*) print_line_cursor#9 )
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#29
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#92
  (byte) rem8u#9 ← (byte) rem8u#24
  (word) rem16u#11 ← (word) rem16u#28
  (signed byte) rem8s#5 ← (signed byte) rem8s#11
  (signed word) rem16s#7 ← (signed word) rem16s#15
  return 
  to:@return
test_8u: scope:[test_8u]  from main::@1
  (byte*) print_line_cursor#83 ← phi( main::@1/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#155 ← phi( main::@1/(byte*) print_char_cursor#23 )
  (byte) rem8u#45 ← phi( main::@1/(byte) rem8u#33 )
  (byte[]) test_8u::dividends#0 ← { (number) $ff, (number) $ff, (number) $ff, (number) $ff, (number) $ff, (number) $ff }
  (byte[]) test_8u::divisors#0 ← { (number) 5, (number) 7, (number) $b, (number) $d, (number) $11, (number) $13 }
  (byte) test_8u::i#0 ← (byte) 0
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@11
  (byte*) print_line_cursor#79 ← phi( test_8u/(byte*) print_line_cursor#83 test_8u::@11/(byte*) print_line_cursor#11 )
  (byte*) print_char_cursor#149 ← phi( test_8u/(byte*) print_char_cursor#155 test_8u::@11/(byte*) print_char_cursor#36 )
  (byte) rem8u#36 ← phi( test_8u/(byte) rem8u#45 test_8u::@11/(byte) rem8u#38 )
  (byte) test_8u::i#2 ← phi( test_8u/(byte) test_8u::i#0 test_8u::@11/(byte) test_8u::i#1 )
  (byte) test_8u::dividend#0 ← *((byte[]) test_8u::dividends#0 + (byte) test_8u::i#2)
  (byte) test_8u::divisor#0 ← *((byte[]) test_8u::divisors#0 + (byte) test_8u::i#2)
  (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0
  (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0
  call div8u 
  (byte) div8u::return#3 ← (byte) div8u::return#1
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@1
  (byte) test_8u::i#11 ← phi( test_8u::@1/(byte) test_8u::i#2 )
  (byte*) print_line_cursor#75 ← phi( test_8u::@1/(byte*) print_line_cursor#79 )
  (byte) test_8u::divisor#3 ← phi( test_8u::@1/(byte) test_8u::divisor#0 )
  (byte*) print_char_cursor#141 ← phi( test_8u::@1/(byte*) print_char_cursor#149 )
  (byte) test_8u::dividend#1 ← phi( test_8u::@1/(byte) test_8u::dividend#0 )
  (byte) rem8u#25 ← phi( test_8u::@1/(byte) rem8u#2 )
  (byte) div8u::return#6 ← phi( test_8u::@1/(byte) div8u::return#3 )
  (byte~) test_8u::$0 ← (byte) div8u::return#6
  (byte) rem8u#10 ← (byte) rem8u#25
  (byte) test_8u::res#0 ← (byte~) test_8u::$0
  (byte) print_byte::b#3 ← (byte) test_8u::dividend#1
  call print_byte 
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  (byte) test_8u::i#10 ← phi( test_8u::@3/(byte) test_8u::i#11 )
  (byte*) print_line_cursor#71 ← phi( test_8u::@3/(byte*) print_line_cursor#75 )
  (byte) rem8u#61 ← phi( test_8u::@3/(byte) rem8u#10 )
  (byte) test_8u::res#4 ← phi( test_8u::@3/(byte) test_8u::res#0 )
  (byte) test_8u::divisor#2 ← phi( test_8u::@3/(byte) test_8u::divisor#3 )
  (byte*) print_char_cursor#93 ← phi( test_8u::@3/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#93
  (byte*) print_str::str#1 ← (const string) test_8u::str
  call print_str 
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  (byte) test_8u::i#9 ← phi( test_8u::@4/(byte) test_8u::i#10 )
  (byte*) print_line_cursor#67 ← phi( test_8u::@4/(byte*) print_line_cursor#71 )
  (byte) rem8u#58 ← phi( test_8u::@4/(byte) rem8u#61 )
  (byte) test_8u::res#3 ← phi( test_8u::@4/(byte) test_8u::res#4 )
  (byte) test_8u::divisor#1 ← phi( test_8u::@4/(byte) test_8u::divisor#2 )
  (byte*) print_char_cursor#94 ← phi( test_8u::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#94
  (byte) print_byte::b#4 ← (byte) test_8u::divisor#1
  call print_byte 
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  (byte) test_8u::i#8 ← phi( test_8u::@5/(byte) test_8u::i#9 )
  (byte*) print_line_cursor#62 ← phi( test_8u::@5/(byte*) print_line_cursor#67 )
  (byte) rem8u#53 ← phi( test_8u::@5/(byte) rem8u#58 )
  (byte) test_8u::res#2 ← phi( test_8u::@5/(byte) test_8u::res#3 )
  (byte*) print_char_cursor#95 ← phi( test_8u::@5/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#95
  (byte*) print_str::str#2 ← (const string) test_8u::str1
  call print_str 
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  (byte) test_8u::i#7 ← phi( test_8u::@6/(byte) test_8u::i#8 )
  (byte*) print_line_cursor#57 ← phi( test_8u::@6/(byte*) print_line_cursor#62 )
  (byte) rem8u#46 ← phi( test_8u::@6/(byte) rem8u#53 )
  (byte) test_8u::res#1 ← phi( test_8u::@6/(byte) test_8u::res#2 )
  (byte*) print_char_cursor#96 ← phi( test_8u::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#96
  (byte) print_byte::b#5 ← (byte) test_8u::res#1
  call print_byte 
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  (byte) test_8u::i#6 ← phi( test_8u::@7/(byte) test_8u::i#7 )
  (byte*) print_line_cursor#52 ← phi( test_8u::@7/(byte*) print_line_cursor#57 )
  (byte) rem8u#37 ← phi( test_8u::@7/(byte) rem8u#46 )
  (byte*) print_char_cursor#97 ← phi( test_8u::@7/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#97
  (byte*) print_str::str#3 ← (const string) test_8u::str2
  call print_str 
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  (byte) test_8u::i#5 ← phi( test_8u::@8/(byte) test_8u::i#6 )
  (byte*) print_line_cursor#46 ← phi( test_8u::@8/(byte*) print_line_cursor#52 )
  (byte) rem8u#26 ← phi( test_8u::@8/(byte) rem8u#37 )
  (byte*) print_char_cursor#98 ← phi( test_8u::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#98
  (byte) print_byte::b#6 ← (byte) rem8u#26
  call print_byte 
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  (byte) rem8u#47 ← phi( test_8u::@9/(byte) rem8u#26 )
  (byte) test_8u::i#4 ← phi( test_8u::@9/(byte) test_8u::i#5 )
  (byte*) print_line_cursor#41 ← phi( test_8u::@9/(byte*) print_line_cursor#46 )
  (byte*) print_char_cursor#99 ← phi( test_8u::@9/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#99
  call print_ln 
  to:test_8u::@11
test_8u::@11: scope:[test_8u]  from test_8u::@10
  (byte) rem8u#38 ← phi( test_8u::@10/(byte) rem8u#47 )
  (byte) test_8u::i#3 ← phi( test_8u::@10/(byte) test_8u::i#4 )
  (byte*) print_char_cursor#100 ← phi( test_8u::@10/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#30 ← phi( test_8u::@10/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#30
  (byte*) print_char_cursor#36 ← (byte*) print_char_cursor#100
  (byte) test_8u::i#1 ← (byte) test_8u::i#3 + rangenext(0,5)
  (bool~) test_8u::$9 ← (byte) test_8u::i#1 != rangelast(0,5)
  if((bool~) test_8u::$9) goto test_8u::@1
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@11
  (byte*) print_line_cursor#31 ← phi( test_8u::@11/(byte*) print_line_cursor#11 )
  (byte*) print_char_cursor#101 ← phi( test_8u::@11/(byte*) print_char_cursor#36 )
  (byte) rem8u#27 ← phi( test_8u::@11/(byte) rem8u#38 )
  (byte) rem8u#11 ← (byte) rem8u#27
  (byte*) print_char_cursor#37 ← (byte*) print_char_cursor#101
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#31
  return 
  to:@return
test_16u: scope:[test_16u]  from main::@2
  (byte*) print_line_cursor#84 ← phi( main::@2/(byte*) print_line_cursor#6 )
  (byte*) print_char_cursor#156 ← phi( main::@2/(byte*) print_char_cursor#24 )
  (word) rem16u#49 ← phi( main::@2/(word) rem16u#38 )
  (word[]) test_16u::dividends#0 ← { (number) $ffff, (number) $ffff, (number) $ffff, (number) $ffff, (number) $ffff, (number) $ffff }
  (word[]) test_16u::divisors#0 ← { (number) 5, (number) 7, (number) $b, (number) $d, (number) $11, (number) $13 }
  (byte) test_16u::i#0 ← (byte) 0
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@11
  (byte*) print_line_cursor#80 ← phi( test_16u/(byte*) print_line_cursor#84 test_16u::@11/(byte*) print_line_cursor#13 )
  (byte*) print_char_cursor#150 ← phi( test_16u/(byte*) print_char_cursor#156 test_16u::@11/(byte*) print_char_cursor#45 )
  (word) rem16u#40 ← phi( test_16u/(word) rem16u#49 test_16u::@11/(word) rem16u#42 )
  (byte) test_16u::i#2 ← phi( test_16u/(byte) test_16u::i#0 test_16u::@11/(byte) test_16u::i#1 )
  (byte~) test_16u::$10 ← (byte) test_16u::i#2 * (const byte) SIZEOF_WORD
  (word) test_16u::dividend#0 ← *((word[]) test_16u::dividends#0 + (byte~) test_16u::$10)
  (byte~) test_16u::$11 ← (byte) test_16u::i#2 * (const byte) SIZEOF_WORD
  (word) test_16u::divisor#0 ← *((word[]) test_16u::divisors#0 + (byte~) test_16u::$11)
  (word) div16u::dividend#0 ← (word) test_16u::dividend#0
  (word) div16u::divisor#0 ← (word) test_16u::divisor#0
  call div16u 
  (word) div16u::return#2 ← (word) div16u::return#1
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@1
  (byte) test_16u::i#11 ← phi( test_16u::@1/(byte) test_16u::i#2 )
  (byte*) print_line_cursor#76 ← phi( test_16u::@1/(byte*) print_line_cursor#80 )
  (word) test_16u::divisor#3 ← phi( test_16u::@1/(word) test_16u::divisor#0 )
  (byte*) print_char_cursor#142 ← phi( test_16u::@1/(byte*) print_char_cursor#150 )
  (word) test_16u::dividend#1 ← phi( test_16u::@1/(word) test_16u::dividend#0 )
  (word) rem16u#29 ← phi( test_16u::@1/(word) rem16u#4 )
  (word) div16u::return#4 ← phi( test_16u::@1/(word) div16u::return#2 )
  (word~) test_16u::$0 ← (word) div16u::return#4
  (word) rem16u#12 ← (word) rem16u#29
  (word) test_16u::res#0 ← (word~) test_16u::$0
  (word) print_word::w#1 ← (word) test_16u::dividend#1
  call print_word 
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  (byte) test_16u::i#10 ← phi( test_16u::@3/(byte) test_16u::i#11 )
  (byte*) print_line_cursor#72 ← phi( test_16u::@3/(byte*) print_line_cursor#76 )
  (word) rem16u#65 ← phi( test_16u::@3/(word) rem16u#12 )
  (word) test_16u::res#4 ← phi( test_16u::@3/(word) test_16u::res#0 )
  (word) test_16u::divisor#2 ← phi( test_16u::@3/(word) test_16u::divisor#3 )
  (byte*) print_char_cursor#102 ← phi( test_16u::@3/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#38 ← (byte*) print_char_cursor#102
  (byte*) print_str::str#4 ← (const string) test_16u::str
  call print_str 
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  (byte) test_16u::i#9 ← phi( test_16u::@4/(byte) test_16u::i#10 )
  (byte*) print_line_cursor#68 ← phi( test_16u::@4/(byte*) print_line_cursor#72 )
  (word) rem16u#62 ← phi( test_16u::@4/(word) rem16u#65 )
  (word) test_16u::res#3 ← phi( test_16u::@4/(word) test_16u::res#4 )
  (word) test_16u::divisor#1 ← phi( test_16u::@4/(word) test_16u::divisor#2 )
  (byte*) print_char_cursor#103 ← phi( test_16u::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#39 ← (byte*) print_char_cursor#103
  (word) print_word::w#2 ← (word) test_16u::divisor#1
  call print_word 
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  (byte) test_16u::i#8 ← phi( test_16u::@5/(byte) test_16u::i#9 )
  (byte*) print_line_cursor#63 ← phi( test_16u::@5/(byte*) print_line_cursor#68 )
  (word) rem16u#58 ← phi( test_16u::@5/(word) rem16u#62 )
  (word) test_16u::res#2 ← phi( test_16u::@5/(word) test_16u::res#3 )
  (byte*) print_char_cursor#104 ← phi( test_16u::@5/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#40 ← (byte*) print_char_cursor#104
  (byte*) print_str::str#5 ← (const string) test_16u::str1
  call print_str 
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  (byte) test_16u::i#7 ← phi( test_16u::@6/(byte) test_16u::i#8 )
  (byte*) print_line_cursor#58 ← phi( test_16u::@6/(byte*) print_line_cursor#63 )
  (word) rem16u#50 ← phi( test_16u::@6/(word) rem16u#58 )
  (word) test_16u::res#1 ← phi( test_16u::@6/(word) test_16u::res#2 )
  (byte*) print_char_cursor#105 ← phi( test_16u::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#41 ← (byte*) print_char_cursor#105
  (word) print_word::w#3 ← (word) test_16u::res#1
  call print_word 
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  (byte) test_16u::i#6 ← phi( test_16u::@7/(byte) test_16u::i#7 )
  (byte*) print_line_cursor#53 ← phi( test_16u::@7/(byte*) print_line_cursor#58 )
  (word) rem16u#41 ← phi( test_16u::@7/(word) rem16u#50 )
  (byte*) print_char_cursor#106 ← phi( test_16u::@7/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#42 ← (byte*) print_char_cursor#106
  (byte*) print_str::str#6 ← (const string) test_16u::str2
  call print_str 
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  (byte) test_16u::i#5 ← phi( test_16u::@8/(byte) test_16u::i#6 )
  (byte*) print_line_cursor#47 ← phi( test_16u::@8/(byte*) print_line_cursor#53 )
  (word) rem16u#30 ← phi( test_16u::@8/(word) rem16u#41 )
  (byte*) print_char_cursor#107 ← phi( test_16u::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#43 ← (byte*) print_char_cursor#107
  (word) print_word::w#4 ← (word) rem16u#30
  call print_word 
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  (word) rem16u#51 ← phi( test_16u::@9/(word) rem16u#30 )
  (byte) test_16u::i#4 ← phi( test_16u::@9/(byte) test_16u::i#5 )
  (byte*) print_line_cursor#42 ← phi( test_16u::@9/(byte*) print_line_cursor#47 )
  (byte*) print_char_cursor#108 ← phi( test_16u::@9/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#44 ← (byte*) print_char_cursor#108
  call print_ln 
  to:test_16u::@11
test_16u::@11: scope:[test_16u]  from test_16u::@10
  (word) rem16u#42 ← phi( test_16u::@10/(word) rem16u#51 )
  (byte) test_16u::i#3 ← phi( test_16u::@10/(byte) test_16u::i#4 )
  (byte*) print_char_cursor#109 ← phi( test_16u::@10/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#32 ← phi( test_16u::@10/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#32
  (byte*) print_char_cursor#45 ← (byte*) print_char_cursor#109
  (byte) test_16u::i#1 ← (byte) test_16u::i#3 + rangenext(0,5)
  (bool~) test_16u::$9 ← (byte) test_16u::i#1 != rangelast(0,5)
  if((bool~) test_16u::$9) goto test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@11
  (byte*) print_line_cursor#33 ← phi( test_16u::@11/(byte*) print_line_cursor#13 )
  (byte*) print_char_cursor#110 ← phi( test_16u::@11/(byte*) print_char_cursor#45 )
  (word) rem16u#31 ← phi( test_16u::@11/(word) rem16u#42 )
  (word) rem16u#13 ← (word) rem16u#31
  (byte*) print_char_cursor#46 ← (byte*) print_char_cursor#110
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#33
  return 
  to:@return
test_8s: scope:[test_8s]  from main::@3
  (byte*) print_line_cursor#85 ← phi( main::@3/(byte*) print_line_cursor#7 )
  (byte*) print_char_cursor#157 ← phi( main::@3/(byte*) print_char_cursor#25 )
  (signed byte) rem8s#23 ← phi( main::@3/(signed byte) rem8s#16 )
  (byte) rem8u#48 ← phi( main::@3/(byte) rem8u#34 )
  (signed byte[]) test_8s::dividends#0 ← { (number) $7f, (number) -$7f, (number) -$7f, (number) $7f, (number) $7f, (number) $7f }
  (signed byte[]) test_8s::divisors#0 ← { (number) 5, (number) 7, (number) -$b, (number) -$d, (number) $11, (number) $13 }
  (byte) test_8s::i#0 ← (byte) 0
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@11
  (byte*) print_line_cursor#81 ← phi( test_8s/(byte*) print_line_cursor#85 test_8s::@11/(byte*) print_line_cursor#15 )
  (byte*) print_char_cursor#151 ← phi( test_8s/(byte*) print_char_cursor#157 test_8s::@11/(byte*) print_char_cursor#54 )
  (signed byte) rem8s#18 ← phi( test_8s/(signed byte) rem8s#23 test_8s::@11/(signed byte) rem8s#20 )
  (byte) rem8u#39 ← phi( test_8s/(byte) rem8u#48 test_8s::@11/(byte) rem8u#40 )
  (byte) test_8s::i#2 ← phi( test_8s/(byte) test_8s::i#0 test_8s::@11/(byte) test_8s::i#1 )
  (signed byte) test_8s::dividend#0 ← *((signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#2)
  (signed byte) test_8s::divisor#0 ← *((signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#2)
  (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0
  (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0
  call div8s 
  (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@1
  (byte) test_8s::i#11 ← phi( test_8s::@1/(byte) test_8s::i#2 )
  (byte*) print_line_cursor#77 ← phi( test_8s::@1/(byte*) print_line_cursor#81 )
  (signed byte) test_8s::divisor#3 ← phi( test_8s::@1/(signed byte) test_8s::divisor#0 )
  (byte*) print_char_cursor#143 ← phi( test_8s::@1/(byte*) print_char_cursor#151 )
  (signed byte) test_8s::dividend#1 ← phi( test_8s::@1/(signed byte) test_8s::dividend#0 )
  (signed byte) rem8s#12 ← phi( test_8s::@1/(signed byte) rem8s#3 )
  (byte) rem8u#28 ← phi( test_8s::@1/(byte) rem8u#6 )
  (signed byte) div8s::return#5 ← phi( test_8s::@1/(signed byte) div8s::return#3 )
  (signed byte~) test_8s::$0 ← (signed byte) div8s::return#5
  (byte) rem8u#12 ← (byte) rem8u#28
  (signed byte) rem8s#6 ← (signed byte) rem8s#12
  (signed byte) test_8s::res#0 ← (signed byte~) test_8s::$0
  (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#1
  call print_sbyte 
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  (byte) rem8u#65 ← phi( test_8s::@3/(byte) rem8u#12 )
  (byte) test_8s::i#10 ← phi( test_8s::@3/(byte) test_8s::i#11 )
  (byte*) print_line_cursor#73 ← phi( test_8s::@3/(byte*) print_line_cursor#77 )
  (signed byte) rem8s#31 ← phi( test_8s::@3/(signed byte) rem8s#6 )
  (signed byte) test_8s::res#4 ← phi( test_8s::@3/(signed byte) test_8s::res#0 )
  (signed byte) test_8s::divisor#2 ← phi( test_8s::@3/(signed byte) test_8s::divisor#3 )
  (byte*) print_char_cursor#111 ← phi( test_8s::@3/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#47 ← (byte*) print_char_cursor#111
  (byte*) print_str::str#7 ← (const string) test_8s::str
  call print_str 
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  (byte) rem8u#64 ← phi( test_8s::@4/(byte) rem8u#65 )
  (byte) test_8s::i#9 ← phi( test_8s::@4/(byte) test_8s::i#10 )
  (byte*) print_line_cursor#69 ← phi( test_8s::@4/(byte*) print_line_cursor#73 )
  (signed byte) rem8s#30 ← phi( test_8s::@4/(signed byte) rem8s#31 )
  (signed byte) test_8s::res#3 ← phi( test_8s::@4/(signed byte) test_8s::res#4 )
  (signed byte) test_8s::divisor#1 ← phi( test_8s::@4/(signed byte) test_8s::divisor#2 )
  (byte*) print_char_cursor#112 ← phi( test_8s::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#48 ← (byte*) print_char_cursor#112
  (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#1
  call print_sbyte 
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  (byte) rem8u#63 ← phi( test_8s::@5/(byte) rem8u#64 )
  (byte) test_8s::i#8 ← phi( test_8s::@5/(byte) test_8s::i#9 )
  (byte*) print_line_cursor#64 ← phi( test_8s::@5/(byte*) print_line_cursor#69 )
  (signed byte) rem8s#28 ← phi( test_8s::@5/(signed byte) rem8s#30 )
  (signed byte) test_8s::res#2 ← phi( test_8s::@5/(signed byte) test_8s::res#3 )
  (byte*) print_char_cursor#113 ← phi( test_8s::@5/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#49 ← (byte*) print_char_cursor#113
  (byte*) print_str::str#8 ← (const string) test_8s::str1
  call print_str 
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  (byte) rem8u#62 ← phi( test_8s::@6/(byte) rem8u#63 )
  (byte) test_8s::i#7 ← phi( test_8s::@6/(byte) test_8s::i#8 )
  (byte*) print_line_cursor#59 ← phi( test_8s::@6/(byte*) print_line_cursor#64 )
  (signed byte) rem8s#24 ← phi( test_8s::@6/(signed byte) rem8s#28 )
  (signed byte) test_8s::res#1 ← phi( test_8s::@6/(signed byte) test_8s::res#2 )
  (byte*) print_char_cursor#114 ← phi( test_8s::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#50 ← (byte*) print_char_cursor#114
  (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#1
  call print_sbyte 
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  (byte) rem8u#59 ← phi( test_8s::@7/(byte) rem8u#62 )
  (byte) test_8s::i#6 ← phi( test_8s::@7/(byte) test_8s::i#7 )
  (byte*) print_line_cursor#54 ← phi( test_8s::@7/(byte*) print_line_cursor#59 )
  (signed byte) rem8s#19 ← phi( test_8s::@7/(signed byte) rem8s#24 )
  (byte*) print_char_cursor#115 ← phi( test_8s::@7/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#51 ← (byte*) print_char_cursor#115
  (byte*) print_str::str#9 ← (const string) test_8s::str2
  call print_str 
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  (byte) rem8u#54 ← phi( test_8s::@8/(byte) rem8u#59 )
  (byte) test_8s::i#5 ← phi( test_8s::@8/(byte) test_8s::i#6 )
  (byte*) print_line_cursor#48 ← phi( test_8s::@8/(byte*) print_line_cursor#54 )
  (signed byte) rem8s#13 ← phi( test_8s::@8/(signed byte) rem8s#19 )
  (byte*) print_char_cursor#116 ← phi( test_8s::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#52 ← (byte*) print_char_cursor#116
  (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#13
  call print_sbyte 
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  (signed byte) rem8s#25 ← phi( test_8s::@9/(signed byte) rem8s#13 )
  (byte) rem8u#49 ← phi( test_8s::@9/(byte) rem8u#54 )
  (byte) test_8s::i#4 ← phi( test_8s::@9/(byte) test_8s::i#5 )
  (byte*) print_line_cursor#43 ← phi( test_8s::@9/(byte*) print_line_cursor#48 )
  (byte*) print_char_cursor#117 ← phi( test_8s::@9/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#53 ← (byte*) print_char_cursor#117
  call print_ln 
  to:test_8s::@11
test_8s::@11: scope:[test_8s]  from test_8s::@10
  (signed byte) rem8s#20 ← phi( test_8s::@10/(signed byte) rem8s#25 )
  (byte) rem8u#40 ← phi( test_8s::@10/(byte) rem8u#49 )
  (byte) test_8s::i#3 ← phi( test_8s::@10/(byte) test_8s::i#4 )
  (byte*) print_char_cursor#118 ← phi( test_8s::@10/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#34 ← phi( test_8s::@10/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#34
  (byte*) print_char_cursor#54 ← (byte*) print_char_cursor#118
  (byte) test_8s::i#1 ← (byte) test_8s::i#3 + rangenext(0,5)
  (bool~) test_8s::$9 ← (byte) test_8s::i#1 != rangelast(0,5)
  if((bool~) test_8s::$9) goto test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@11
  (byte*) print_line_cursor#35 ← phi( test_8s::@11/(byte*) print_line_cursor#15 )
  (byte*) print_char_cursor#119 ← phi( test_8s::@11/(byte*) print_char_cursor#54 )
  (signed byte) rem8s#14 ← phi( test_8s::@11/(signed byte) rem8s#20 )
  (byte) rem8u#29 ← phi( test_8s::@11/(byte) rem8u#40 )
  (byte) rem8u#13 ← (byte) rem8u#29
  (signed byte) rem8s#7 ← (signed byte) rem8s#14
  (byte*) print_char_cursor#55 ← (byte*) print_char_cursor#119
  (byte*) print_line_cursor#16 ← (byte*) print_line_cursor#35
  return 
  to:@return
test_16s: scope:[test_16s]  from main::@4
  (byte*) print_line_cursor#86 ← phi( main::@4/(byte*) print_line_cursor#8 )
  (byte*) print_char_cursor#158 ← phi( main::@4/(byte*) print_char_cursor#26 )
  (signed word) rem16s#27 ← phi( main::@4/(signed word) rem16s#21 )
  (word) rem16u#52 ← phi( main::@4/(word) rem16u#39 )
  (signed word[]) test_16s::dividends#0 ← { (number) $7fff, (number) $7fff, (number) -$7fff, (number) -$7fff, (number) $7fff, (number) -$7fff }
  (signed word[]) test_16s::divisors#0 ← { (number) 5, (number) -7, (number) $b, (number) -$d, (number) -$11, (number) $13 }
  (byte) test_16s::i#0 ← (byte) 0
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@11
  (byte*) print_line_cursor#82 ← phi( test_16s/(byte*) print_line_cursor#86 test_16s::@11/(byte*) print_line_cursor#17 )
  (byte*) print_char_cursor#152 ← phi( test_16s/(byte*) print_char_cursor#158 test_16s::@11/(byte*) print_char_cursor#63 )
  (signed word) rem16s#22 ← phi( test_16s/(signed word) rem16s#27 test_16s::@11/(signed word) rem16s#24 )
  (word) rem16u#43 ← phi( test_16s/(word) rem16u#52 test_16s::@11/(word) rem16u#44 )
  (byte) test_16s::i#2 ← phi( test_16s/(byte) test_16s::i#0 test_16s::@11/(byte) test_16s::i#1 )
  (byte~) test_16s::$10 ← (byte) test_16s::i#2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) test_16s::dividend#0 ← *((signed word[]) test_16s::dividends#0 + (byte~) test_16s::$10)
  (byte~) test_16s::$11 ← (byte) test_16s::i#2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) test_16s::divisor#0 ← *((signed word[]) test_16s::divisors#0 + (byte~) test_16s::$11)
  (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
  (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
  call div16s 
  (signed word) div16s::return#2 ← (signed word) div16s::return#1
  to:test_16s::@3
test_16s::@3: scope:[test_16s]  from test_16s::@1
  (byte) test_16s::i#11 ← phi( test_16s::@1/(byte) test_16s::i#2 )
  (byte*) print_line_cursor#78 ← phi( test_16s::@1/(byte*) print_line_cursor#82 )
  (signed word) test_16s::divisor#3 ← phi( test_16s::@1/(signed word) test_16s::divisor#0 )
  (byte*) print_char_cursor#144 ← phi( test_16s::@1/(byte*) print_char_cursor#152 )
  (signed word) test_16s::dividend#1 ← phi( test_16s::@1/(signed word) test_16s::dividend#0 )
  (signed word) rem16s#16 ← phi( test_16s::@1/(signed word) rem16s#5 )
  (word) rem16u#32 ← phi( test_16s::@1/(word) rem16u#8 )
  (signed word) div16s::return#4 ← phi( test_16s::@1/(signed word) div16s::return#2 )
  (signed word~) test_16s::$0 ← (signed word) div16s::return#4
  (word) rem16u#14 ← (word) rem16u#32
  (signed word) rem16s#8 ← (signed word) rem16s#16
  (signed word) test_16s::res#0 ← (signed word~) test_16s::$0
  (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#1
  call print_sword 
  to:test_16s::@4
test_16s::@4: scope:[test_16s]  from test_16s::@3
  (word) rem16u#69 ← phi( test_16s::@3/(word) rem16u#14 )
  (byte) test_16s::i#10 ← phi( test_16s::@3/(byte) test_16s::i#11 )
  (byte*) print_line_cursor#74 ← phi( test_16s::@3/(byte*) print_line_cursor#78 )
  (signed word) rem16s#35 ← phi( test_16s::@3/(signed word) rem16s#8 )
  (signed word) test_16s::res#4 ← phi( test_16s::@3/(signed word) test_16s::res#0 )
  (signed word) test_16s::divisor#2 ← phi( test_16s::@3/(signed word) test_16s::divisor#3 )
  (byte*) print_char_cursor#120 ← phi( test_16s::@3/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#56 ← (byte*) print_char_cursor#120
  (byte*) print_str::str#10 ← (const string) test_16s::str
  call print_str 
  to:test_16s::@5
test_16s::@5: scope:[test_16s]  from test_16s::@4
  (word) rem16u#68 ← phi( test_16s::@4/(word) rem16u#69 )
  (byte) test_16s::i#9 ← phi( test_16s::@4/(byte) test_16s::i#10 )
  (byte*) print_line_cursor#70 ← phi( test_16s::@4/(byte*) print_line_cursor#74 )
  (signed word) rem16s#33 ← phi( test_16s::@4/(signed word) rem16s#35 )
  (signed word) test_16s::res#3 ← phi( test_16s::@4/(signed word) test_16s::res#4 )
  (signed word) test_16s::divisor#1 ← phi( test_16s::@4/(signed word) test_16s::divisor#2 )
  (byte*) print_char_cursor#121 ← phi( test_16s::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#57 ← (byte*) print_char_cursor#121
  (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#1
  call print_sword 
  to:test_16s::@6
test_16s::@6: scope:[test_16s]  from test_16s::@5
  (word) rem16u#67 ← phi( test_16s::@5/(word) rem16u#68 )
  (byte) test_16s::i#8 ← phi( test_16s::@5/(byte) test_16s::i#9 )
  (byte*) print_line_cursor#65 ← phi( test_16s::@5/(byte*) print_line_cursor#70 )
  (signed word) rem16s#31 ← phi( test_16s::@5/(signed word) rem16s#33 )
  (signed word) test_16s::res#2 ← phi( test_16s::@5/(signed word) test_16s::res#3 )
  (byte*) print_char_cursor#122 ← phi( test_16s::@5/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#58 ← (byte*) print_char_cursor#122
  (byte*) print_str::str#11 ← (const string) test_16s::str1
  call print_str 
  to:test_16s::@7
test_16s::@7: scope:[test_16s]  from test_16s::@6
  (word) rem16u#66 ← phi( test_16s::@6/(word) rem16u#67 )
  (byte) test_16s::i#7 ← phi( test_16s::@6/(byte) test_16s::i#8 )
  (byte*) print_line_cursor#60 ← phi( test_16s::@6/(byte*) print_line_cursor#65 )
  (signed word) rem16s#28 ← phi( test_16s::@6/(signed word) rem16s#31 )
  (signed word) test_16s::res#1 ← phi( test_16s::@6/(signed word) test_16s::res#2 )
  (byte*) print_char_cursor#123 ← phi( test_16s::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#59 ← (byte*) print_char_cursor#123
  (signed word) print_sword::w#3 ← (signed word) test_16s::res#1
  call print_sword 
  to:test_16s::@8
test_16s::@8: scope:[test_16s]  from test_16s::@7
  (word) rem16u#63 ← phi( test_16s::@7/(word) rem16u#66 )
  (byte) test_16s::i#6 ← phi( test_16s::@7/(byte) test_16s::i#7 )
  (byte*) print_line_cursor#55 ← phi( test_16s::@7/(byte*) print_line_cursor#60 )
  (signed word) rem16s#23 ← phi( test_16s::@7/(signed word) rem16s#28 )
  (byte*) print_char_cursor#124 ← phi( test_16s::@7/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#60 ← (byte*) print_char_cursor#124
  (byte*) print_str::str#12 ← (const string) test_16s::str2
  call print_str 
  to:test_16s::@9
test_16s::@9: scope:[test_16s]  from test_16s::@8
  (word) rem16u#59 ← phi( test_16s::@8/(word) rem16u#63 )
  (byte) test_16s::i#5 ← phi( test_16s::@8/(byte) test_16s::i#6 )
  (byte*) print_line_cursor#49 ← phi( test_16s::@8/(byte*) print_line_cursor#55 )
  (signed word) rem16s#17 ← phi( test_16s::@8/(signed word) rem16s#23 )
  (byte*) print_char_cursor#125 ← phi( test_16s::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#61 ← (byte*) print_char_cursor#125
  (signed word) print_sword::w#4 ← (signed word) rem16s#17
  call print_sword 
  to:test_16s::@10
test_16s::@10: scope:[test_16s]  from test_16s::@9
  (signed word) rem16s#29 ← phi( test_16s::@9/(signed word) rem16s#17 )
  (word) rem16u#53 ← phi( test_16s::@9/(word) rem16u#59 )
  (byte) test_16s::i#4 ← phi( test_16s::@9/(byte) test_16s::i#5 )
  (byte*) print_line_cursor#44 ← phi( test_16s::@9/(byte*) print_line_cursor#49 )
  (byte*) print_char_cursor#126 ← phi( test_16s::@9/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#62 ← (byte*) print_char_cursor#126
  call print_ln 
  to:test_16s::@11
test_16s::@11: scope:[test_16s]  from test_16s::@10
  (signed word) rem16s#24 ← phi( test_16s::@10/(signed word) rem16s#29 )
  (word) rem16u#44 ← phi( test_16s::@10/(word) rem16u#53 )
  (byte) test_16s::i#3 ← phi( test_16s::@10/(byte) test_16s::i#4 )
  (byte*) print_char_cursor#127 ← phi( test_16s::@10/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#36 ← phi( test_16s::@10/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#17 ← (byte*) print_line_cursor#36
  (byte*) print_char_cursor#63 ← (byte*) print_char_cursor#127
  (byte) test_16s::i#1 ← (byte) test_16s::i#3 + rangenext(0,5)
  (bool~) test_16s::$9 ← (byte) test_16s::i#1 != rangelast(0,5)
  if((bool~) test_16s::$9) goto test_16s::@1
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@11
  (byte*) print_line_cursor#37 ← phi( test_16s::@11/(byte*) print_line_cursor#17 )
  (byte*) print_char_cursor#128 ← phi( test_16s::@11/(byte*) print_char_cursor#63 )
  (signed word) rem16s#18 ← phi( test_16s::@11/(signed word) rem16s#24 )
  (word) rem16u#33 ← phi( test_16s::@11/(word) rem16u#44 )
  (word) rem16u#15 ← (word) rem16u#33
  (signed word) rem16s#9 ← (signed word) rem16s#18
  (byte*) print_char_cursor#64 ← (byte*) print_char_cursor#128
  (byte*) print_line_cursor#18 ← (byte*) print_line_cursor#37
  return 
  to:@return
@32: scope:[]  from @25
  (byte*) print_screen#5 ← phi( @25/(byte*) print_screen#6 )
  (signed word) rem16s#25 ← phi( @25/(signed word) rem16s#0 )
  (signed byte) rem8s#21 ← phi( @25/(signed byte) rem8s#26 )
  (word) rem16u#45 ← phi( @25/(word) rem16u#54 )
  (byte) rem8u#41 ← phi( @25/(byte) rem8u#50 )
  (byte*) print_char_cursor#145 ← phi( @25/(byte*) print_char_cursor#153 )
  (byte*) print_line_cursor#45 ← phi( @25/(byte*) print_line_cursor#50 )
  call main 
  to:@33
@33: scope:[]  from @32
  (signed word) rem16s#19 ← phi( @32/(signed word) rem16s#7 )
  (signed byte) rem8s#15 ← phi( @32/(signed byte) rem8s#5 )
  (word) rem16u#34 ← phi( @32/(word) rem16u#11 )
  (byte) rem8u#30 ← phi( @32/(byte) rem8u#9 )
  (byte*) print_char_cursor#129 ← phi( @32/(byte*) print_char_cursor#28 )
  (byte*) print_line_cursor#38 ← phi( @32/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#38
  (byte*) print_char_cursor#65 ← (byte*) print_char_cursor#129
  (byte) rem8u#14 ← (byte) rem8u#30
  (word) rem16u#16 ← (word) rem16u#34
  (signed byte) rem8s#8 ← (signed byte) rem8s#15
  (signed word) rem16s#10 ← (signed word) rem16s#19
  to:@end
@end: scope:[]  from @33

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @12
(label) @19
(label) @21
(label) @24
(label) @25
(label) @32
(label) @33
(label) @begin
(label) @end
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const byte) SIZEOF_WORD = (byte) 2
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word~) div16s::$0
(label) div16s::@2
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0
(signed word) div16s::dividend#1
(signed word) div16s::divisor
(signed word) div16s::divisor#0
(signed word) div16s::divisor#1
(signed word) div16s::return
(signed word) div16s::return#0
(signed word) div16s::return#1
(signed word) div16s::return#2
(signed word) div16s::return#3
(signed word) div16s::return#4
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@2
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(bool~) div8s::$0
(bool~) div8s::$1
(number~) div8s::$10
(signed byte~) div8s::$11
(signed byte~) div8s::$12
(signed byte~) div8s::$13
(signed byte~) div8s::$14
(signed byte~) div8s::$15
(signed byte~) div8s::$16
(byte~) div8s::$2
(bool~) div8s::$3
(byte~) div8s::$4
(signed byte~) div8s::$5
(byte~) div8s::$6
(byte~) div8s::$7
(signed byte~) div8s::$8
(byte~) div8s::$9
(label) div8s::@1
(label) div8s::@11
(label) div8s::@15
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@7
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0
(signed byte) div8s::dividend#1
(signed byte) div8s::dividend#2
(signed byte) div8s::dividend#3
(byte) div8s::dividendu
(byte) div8s::dividendu#0
(byte) div8s::dividendu#1
(byte) div8s::dividendu#2
(byte) div8s::dividendu#3
(byte) div8s::dividendu#4
(byte) div8s::dividendu#5
(byte) div8s::dividendu#6
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0
(signed byte) div8s::divisor#1
(signed byte) div8s::divisor#2
(signed byte) div8s::divisor#3
(signed byte) div8s::divisor#4
(signed byte) div8s::divisor#5
(signed byte) div8s::divisor#6
(byte) div8s::divisoru
(byte) div8s::divisoru#0
(byte) div8s::divisoru#1
(byte) div8s::divisoru#2
(byte) div8s::divisoru#3
(byte) div8s::neg
(byte) div8s::neg#0
(byte) div8s::neg#1
(byte) div8s::neg#2
(byte) div8s::neg#3
(byte) div8s::neg#4
(byte) div8s::neg#5
(byte) div8s::neg#6
(byte) div8s::neg#7
(byte) div8s::neg#8
(byte) div8s::resultu
(byte) div8s::resultu#0
(byte) div8s::resultu#1
(byte) div8s::resultu#2
(signed byte) div8s::return
(signed byte) div8s::return#0
(signed byte) div8s::return#1
(signed byte) div8s::return#2
(signed byte) div8s::return#3
(signed byte) div8s::return#4
(signed byte) div8s::return#5
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$0
(label) div8u::@2
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0
(byte) div8u::dividend#1
(byte) div8u::dividend#2
(byte) div8u::divisor
(byte) div8u::divisor#0
(byte) div8u::divisor#1
(byte) div8u::divisor#2
(byte) div8u::return
(byte) div8u::return#0
(byte) div8u::return#1
(byte) div8u::return#2
(byte) div8u::return#3
(byte) div8u::return#4
(byte) div8u::return#5
(byte) div8u::return#6
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(bool~) divr16s::$0
(bool~) divr16s::$1
(signed word~) divr16s::$10
(word~) divr16s::$11
(word~) divr16s::$12
(signed word~) divr16s::$13
(word~) divr16s::$14
(number~) divr16s::$15
(signed word~) divr16s::$16
(signed word~) divr16s::$17
(signed word~) divr16s::$18
(signed word~) divr16s::$19
(bool~) divr16s::$2
(signed word~) divr16s::$20
(signed word~) divr16s::$21
(bool~) divr16s::$3
(word~) divr16s::$4
(bool~) divr16s::$5
(word~) divr16s::$6
(word~) divr16s::$7
(signed word~) divr16s::$8
(word~) divr16s::$9
(label) divr16s::@1
(label) divr16s::@11
(label) divr16s::@15
(label) divr16s::@2
(label) divr16s::@3
(label) divr16s::@4
(label) divr16s::@5
(label) divr16s::@7
(label) divr16s::@9
(label) divr16s::@return
(signed word) divr16s::dividend
(signed word) divr16s::dividend#0
(signed word) divr16s::dividend#1
(signed word) divr16s::dividend#2
(signed word) divr16s::dividend#3
(word) divr16s::dividendu
(word) divr16s::dividendu#0
(word) divr16s::dividendu#1
(word) divr16s::dividendu#2
(word) divr16s::dividendu#3
(word) divr16s::dividendu#4
(word) divr16s::dividendu#5
(word) divr16s::dividendu#6
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0
(signed word) divr16s::divisor#1
(signed word) divr16s::divisor#2
(signed word) divr16s::divisor#3
(signed word) divr16s::divisor#4
(signed word) divr16s::divisor#5
(signed word) divr16s::divisor#6
(word) divr16s::divisoru
(word) divr16s::divisoru#0
(word) divr16s::divisoru#1
(word) divr16s::divisoru#2
(word) divr16s::divisoru#3
(byte) divr16s::neg
(byte) divr16s::neg#0
(byte) divr16s::neg#1
(byte) divr16s::neg#2
(byte) divr16s::neg#3
(byte) divr16s::neg#4
(byte) divr16s::neg#5
(byte) divr16s::neg#6
(byte) divr16s::neg#7
(byte) divr16s::neg#8
(signed word) divr16s::rem
(signed word) divr16s::rem#0
(signed word) divr16s::rem#1
(signed word) divr16s::rem#2
(signed word) divr16s::rem#3
(word) divr16s::remu
(word) divr16s::remu#0
(word) divr16s::remu#1
(word) divr16s::remu#2
(word) divr16s::remu#3
(word) divr16s::remu#4
(word) divr16s::remu#5
(word) divr16s::remu#6
(word) divr16s::resultu
(word) divr16s::resultu#0
(word) divr16s::resultu#1
(word) divr16s::resultu#2
(signed word) divr16s::return
(signed word) divr16s::return#0
(signed word) divr16s::return#1
(signed word) divr16s::return#2
(signed word) divr16s::return#3
(signed word) divr16s::return#4
(signed word) divr16s::return#5
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(number~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(number~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::dividend#8
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(word) divr16u::divisor#7
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#11
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(word) divr16u::return#5
(word) divr16u::return#6
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$0
(number~) divr8u::$1
(bool~) divr8u::$10
(bool~) divr8u::$2
(bool~) divr8u::$3
(number~) divr8u::$4
(byte~) divr8u::$5
(byte~) divr8u::$6
(bool~) divr8u::$7
(bool~) divr8u::$8
(byte~) divr8u::$9
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0
(byte) divr8u::dividend#1
(byte) divr8u::dividend#2
(byte) divr8u::dividend#3
(byte) divr8u::dividend#4
(byte) divr8u::dividend#5
(byte) divr8u::dividend#6
(byte) divr8u::dividend#7
(byte) divr8u::divisor
(byte) divr8u::divisor#0
(byte) divr8u::divisor#1
(byte) divr8u::divisor#2
(byte) divr8u::divisor#3
(byte) divr8u::divisor#4
(byte) divr8u::divisor#5
(byte) divr8u::divisor#6
(byte) divr8u::i
(byte) divr8u::i#0
(byte) divr8u::i#1
(byte) divr8u::i#2
(byte) divr8u::i#3
(byte) divr8u::i#4
(byte) divr8u::i#5
(byte) divr8u::i#6
(byte) divr8u::quotient
(byte) divr8u::quotient#0
(byte) divr8u::quotient#1
(byte) divr8u::quotient#2
(byte) divr8u::quotient#3
(byte) divr8u::quotient#4
(byte) divr8u::quotient#5
(byte) divr8u::quotient#6
(byte) divr8u::quotient#7
(byte) divr8u::quotient#8
(byte) divr8u::rem
(byte) divr8u::rem#0
(byte) divr8u::rem#1
(byte) divr8u::rem#10
(byte) divr8u::rem#2
(byte) divr8u::rem#3
(byte) divr8u::rem#4
(byte) divr8u::rem#5
(byte) divr8u::rem#6
(byte) divr8u::rem#7
(byte) divr8u::rem#8
(byte) divr8u::rem#9
(byte) divr8u::return
(byte) divr8u::return#0
(byte) divr8u::return#1
(byte) divr8u::return#2
(byte) divr8u::return#3
(byte) divr8u::return#4
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(byte) print_byte::b#5
(byte) print_byte::b#6
(byte) print_byte::b#7
(byte) print_byte::b#8
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte) print_char::ch#6
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#103
(byte*) print_char_cursor#104
(byte*) print_char_cursor#105
(byte*) print_char_cursor#106
(byte*) print_char_cursor#107
(byte*) print_char_cursor#108
(byte*) print_char_cursor#109
(byte*) print_char_cursor#11
(byte*) print_char_cursor#110
(byte*) print_char_cursor#111
(byte*) print_char_cursor#112
(byte*) print_char_cursor#113
(byte*) print_char_cursor#114
(byte*) print_char_cursor#115
(byte*) print_char_cursor#116
(byte*) print_char_cursor#117
(byte*) print_char_cursor#118
(byte*) print_char_cursor#119
(byte*) print_char_cursor#12
(byte*) print_char_cursor#120
(byte*) print_char_cursor#121
(byte*) print_char_cursor#122
(byte*) print_char_cursor#123
(byte*) print_char_cursor#124
(byte*) print_char_cursor#125
(byte*) print_char_cursor#126
(byte*) print_char_cursor#127
(byte*) print_char_cursor#128
(byte*) print_char_cursor#129
(byte*) print_char_cursor#13
(byte*) print_char_cursor#130
(byte*) print_char_cursor#131
(byte*) print_char_cursor#132
(byte*) print_char_cursor#133
(byte*) print_char_cursor#134
(byte*) print_char_cursor#135
(byte*) print_char_cursor#136
(byte*) print_char_cursor#137
(byte*) print_char_cursor#138
(byte*) print_char_cursor#139
(byte*) print_char_cursor#14
(byte*) print_char_cursor#140
(byte*) print_char_cursor#141
(byte*) print_char_cursor#142
(byte*) print_char_cursor#143
(byte*) print_char_cursor#144
(byte*) print_char_cursor#145
(byte*) print_char_cursor#146
(byte*) print_char_cursor#147
(byte*) print_char_cursor#148
(byte*) print_char_cursor#149
(byte*) print_char_cursor#15
(byte*) print_char_cursor#150
(byte*) print_char_cursor#151
(byte*) print_char_cursor#152
(byte*) print_char_cursor#153
(byte*) print_char_cursor#154
(byte*) print_char_cursor#155
(byte*) print_char_cursor#156
(byte*) print_char_cursor#157
(byte*) print_char_cursor#158
(byte*) print_char_cursor#159
(byte*) print_char_cursor#16
(byte*) print_char_cursor#160
(byte*) print_char_cursor#161
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#68
(byte*) print_line_cursor#69
(byte*) print_line_cursor#7
(byte*) print_line_cursor#70
(byte*) print_line_cursor#71
(byte*) print_line_cursor#72
(byte*) print_line_cursor#73
(byte*) print_line_cursor#74
(byte*) print_line_cursor#75
(byte*) print_line_cursor#76
(byte*) print_line_cursor#77
(byte*) print_line_cursor#78
(byte*) print_line_cursor#79
(byte*) print_line_cursor#8
(byte*) print_line_cursor#80
(byte*) print_line_cursor#81
(byte*) print_line_cursor#82
(byte*) print_line_cursor#83
(byte*) print_line_cursor#84
(byte*) print_line_cursor#85
(byte*) print_line_cursor#86
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(bool~) print_sbyte::$0
(byte~) print_sbyte::$1
(signed byte~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@5
(label) print_sbyte::@6
(label) print_sbyte::@7
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0
(signed byte) print_sbyte::b#1
(signed byte) print_sbyte::b#10
(signed byte) print_sbyte::b#2
(signed byte) print_sbyte::b#3
(signed byte) print_sbyte::b#4
(signed byte) print_sbyte::b#5
(signed byte) print_sbyte::b#6
(signed byte) print_sbyte::b#7
(signed byte) print_sbyte::b#8
(signed byte) print_sbyte::b#9
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#10
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#13
(byte*) print_str::str#14
(byte*) print_str::str#15
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_sword((signed word) print_sword::w)
(bool~) print_sword::$0
(word~) print_sword::$1
(signed word~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@5
(label) print_sword::@6
(label) print_sword::@7
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#10
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(signed word) print_sword::w#6
(signed word) print_sword::w#7
(signed word) print_sword::w#8
(signed word) print_sword::w#9
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3
(word) print_word::w#4
(word) print_word::w#5
(word) print_word::w#6
(signed word) rem16s
(signed word) rem16s#0
(signed word) rem16s#1
(signed word) rem16s#10
(signed word) rem16s#11
(signed word) rem16s#12
(signed word) rem16s#13
(signed word) rem16s#14
(signed word) rem16s#15
(signed word) rem16s#16
(signed word) rem16s#17
(signed word) rem16s#18
(signed word) rem16s#19
(signed word) rem16s#2
(signed word) rem16s#20
(signed word) rem16s#21
(signed word) rem16s#22
(signed word) rem16s#23
(signed word) rem16s#24
(signed word) rem16s#25
(signed word) rem16s#26
(signed word) rem16s#27
(signed word) rem16s#28
(signed word) rem16s#29
(signed word) rem16s#3
(signed word) rem16s#30
(signed word) rem16s#31
(signed word) rem16s#32
(signed word) rem16s#33
(signed word) rem16s#34
(signed word) rem16s#35
(signed word) rem16s#4
(signed word) rem16s#5
(signed word) rem16s#6
(signed word) rem16s#7
(signed word) rem16s#8
(signed word) rem16s#9
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#38
(word) rem16u#39
(word) rem16u#4
(word) rem16u#40
(word) rem16u#41
(word) rem16u#42
(word) rem16u#43
(word) rem16u#44
(word) rem16u#45
(word) rem16u#46
(word) rem16u#47
(word) rem16u#48
(word) rem16u#49
(word) rem16u#5
(word) rem16u#50
(word) rem16u#51
(word) rem16u#52
(word) rem16u#53
(word) rem16u#54
(word) rem16u#55
(word) rem16u#56
(word) rem16u#57
(word) rem16u#58
(word) rem16u#59
(word) rem16u#6
(word) rem16u#60
(word) rem16u#61
(word) rem16u#62
(word) rem16u#63
(word) rem16u#64
(word) rem16u#65
(word) rem16u#66
(word) rem16u#67
(word) rem16u#68
(word) rem16u#69
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed byte) rem8s
(signed byte) rem8s#0
(signed byte) rem8s#1
(signed byte) rem8s#10
(signed byte) rem8s#11
(signed byte) rem8s#12
(signed byte) rem8s#13
(signed byte) rem8s#14
(signed byte) rem8s#15
(signed byte) rem8s#16
(signed byte) rem8s#17
(signed byte) rem8s#18
(signed byte) rem8s#19
(signed byte) rem8s#2
(signed byte) rem8s#20
(signed byte) rem8s#21
(signed byte) rem8s#22
(signed byte) rem8s#23
(signed byte) rem8s#24
(signed byte) rem8s#25
(signed byte) rem8s#26
(signed byte) rem8s#27
(signed byte) rem8s#28
(signed byte) rem8s#29
(signed byte) rem8s#3
(signed byte) rem8s#30
(signed byte) rem8s#31
(signed byte) rem8s#4
(signed byte) rem8s#5
(signed byte) rem8s#6
(signed byte) rem8s#7
(signed byte) rem8s#8
(signed byte) rem8s#9
(byte) rem8u
(byte) rem8u#0
(byte) rem8u#1
(byte) rem8u#10
(byte) rem8u#11
(byte) rem8u#12
(byte) rem8u#13
(byte) rem8u#14
(byte) rem8u#15
(byte) rem8u#16
(byte) rem8u#17
(byte) rem8u#18
(byte) rem8u#19
(byte) rem8u#2
(byte) rem8u#20
(byte) rem8u#21
(byte) rem8u#22
(byte) rem8u#23
(byte) rem8u#24
(byte) rem8u#25
(byte) rem8u#26
(byte) rem8u#27
(byte) rem8u#28
(byte) rem8u#29
(byte) rem8u#3
(byte) rem8u#30
(byte) rem8u#31
(byte) rem8u#32
(byte) rem8u#33
(byte) rem8u#34
(byte) rem8u#35
(byte) rem8u#36
(byte) rem8u#37
(byte) rem8u#38
(byte) rem8u#39
(byte) rem8u#4
(byte) rem8u#40
(byte) rem8u#41
(byte) rem8u#42
(byte) rem8u#43
(byte) rem8u#44
(byte) rem8u#45
(byte) rem8u#46
(byte) rem8u#47
(byte) rem8u#48
(byte) rem8u#49
(byte) rem8u#5
(byte) rem8u#50
(byte) rem8u#51
(byte) rem8u#52
(byte) rem8u#53
(byte) rem8u#54
(byte) rem8u#55
(byte) rem8u#56
(byte) rem8u#57
(byte) rem8u#58
(byte) rem8u#59
(byte) rem8u#6
(byte) rem8u#60
(byte) rem8u#61
(byte) rem8u#62
(byte) rem8u#63
(byte) rem8u#64
(byte) rem8u#65
(byte) rem8u#7
(byte) rem8u#8
(byte) rem8u#9
(void()) test_16s()
(signed word~) test_16s::$0
(byte~) test_16s::$10
(byte~) test_16s::$11
(bool~) test_16s::$9
(label) test_16s::@1
(label) test_16s::@10
(label) test_16s::@11
(label) test_16s::@3
(label) test_16s::@4
(label) test_16s::@5
(label) test_16s::@6
(label) test_16s::@7
(label) test_16s::@8
(label) test_16s::@9
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0
(signed word) test_16s::dividend#1
(signed word[]) test_16s::dividends
(signed word[]) test_16s::dividends#0
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0
(signed word) test_16s::divisor#1
(signed word) test_16s::divisor#2
(signed word) test_16s::divisor#3
(signed word[]) test_16s::divisors
(signed word[]) test_16s::divisors#0
(byte) test_16s::i
(byte) test_16s::i#0
(byte) test_16s::i#1
(byte) test_16s::i#10
(byte) test_16s::i#11
(byte) test_16s::i#2
(byte) test_16s::i#3
(byte) test_16s::i#4
(byte) test_16s::i#5
(byte) test_16s::i#6
(byte) test_16s::i#7
(byte) test_16s::i#8
(byte) test_16s::i#9
(signed word) test_16s::res
(signed word) test_16s::res#0
(signed word) test_16s::res#1
(signed word) test_16s::res#2
(signed word) test_16s::res#3
(signed word) test_16s::res#4
(const string) test_16s::str = (string) " / @"
(const string) test_16s::str1 = (string) " = @"
(const string) test_16s::str2 = (string) " @"
(void()) test_16u()
(word~) test_16u::$0
(byte~) test_16u::$10
(byte~) test_16u::$11
(bool~) test_16u::$9
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@11
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0
(word) test_16u::dividend#1
(word[]) test_16u::dividends
(word[]) test_16u::dividends#0
(word) test_16u::divisor
(word) test_16u::divisor#0
(word) test_16u::divisor#1
(word) test_16u::divisor#2
(word) test_16u::divisor#3
(word[]) test_16u::divisors
(word[]) test_16u::divisors#0
(byte) test_16u::i
(byte) test_16u::i#0
(byte) test_16u::i#1
(byte) test_16u::i#10
(byte) test_16u::i#11
(byte) test_16u::i#2
(byte) test_16u::i#3
(byte) test_16u::i#4
(byte) test_16u::i#5
(byte) test_16u::i#6
(byte) test_16u::i#7
(byte) test_16u::i#8
(byte) test_16u::i#9
(word) test_16u::res
(word) test_16u::res#0
(word) test_16u::res#1
(word) test_16u::res#2
(word) test_16u::res#3
(word) test_16u::res#4
(const string) test_16u::str = (string) " / @"
(const string) test_16u::str1 = (string) " = @"
(const string) test_16u::str2 = (string) " @"
(void()) test_8s()
(signed byte~) test_8s::$0
(bool~) test_8s::$9
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@11
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0
(signed byte) test_8s::dividend#1
(signed byte[]) test_8s::dividends
(signed byte[]) test_8s::dividends#0
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0
(signed byte) test_8s::divisor#1
(signed byte) test_8s::divisor#2
(signed byte) test_8s::divisor#3
(signed byte[]) test_8s::divisors
(signed byte[]) test_8s::divisors#0
(byte) test_8s::i
(byte) test_8s::i#0
(byte) test_8s::i#1
(byte) test_8s::i#10
(byte) test_8s::i#11
(byte) test_8s::i#2
(byte) test_8s::i#3
(byte) test_8s::i#4
(byte) test_8s::i#5
(byte) test_8s::i#6
(byte) test_8s::i#7
(byte) test_8s::i#8
(byte) test_8s::i#9
(signed byte) test_8s::res
(signed byte) test_8s::res#0
(signed byte) test_8s::res#1
(signed byte) test_8s::res#2
(signed byte) test_8s::res#3
(signed byte) test_8s::res#4
(const string) test_8s::str = (string) " / @"
(const string) test_8s::str1 = (string) " = @"
(const string) test_8s::str2 = (string) " @"
(void()) test_8u()
(byte~) test_8u::$0
(bool~) test_8u::$9
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0
(byte) test_8u::dividend#1
(byte[]) test_8u::dividends
(byte[]) test_8u::dividends#0
(byte) test_8u::divisor
(byte) test_8u::divisor#0
(byte) test_8u::divisor#1
(byte) test_8u::divisor#2
(byte) test_8u::divisor#3
(byte[]) test_8u::divisors
(byte[]) test_8u::divisors#0
(byte) test_8u::i
(byte) test_8u::i#0
(byte) test_8u::i#1
(byte) test_8u::i#10
(byte) test_8u::i#11
(byte) test_8u::i#2
(byte) test_8u::i#3
(byte) test_8u::i#4
(byte) test_8u::i#5
(byte) test_8u::i#6
(byte) test_8u::i#7
(byte) test_8u::i#8
(byte) test_8u::i#9
(byte) test_8u::res
(byte) test_8u::res#0
(byte) test_8u::res#1
(byte) test_8u::res#2
(byte) test_8u::res#3
(byte) test_8u::res#4
(const string) test_8u::str = (string) " / @"
(const string) test_8u::str1 = (string) " = @"
(const string) test_8u::str2 = (string) " @"

Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#20 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sword::$0 ← (signed word) print_sword::w#5 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) print_sbyte::$0 ← (signed byte) print_sbyte::b#5 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#8 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#8 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
Adding number conversion cast (unumber) 0 in (byte) rem8u#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) divr8u::rem#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) divr8u::quotient#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte~) divr8u::$0 ← (byte) divr8u::rem#4 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr8u::$1 ← (byte) divr8u::dividend#2 & (number) $80
Adding number conversion cast (unumber) divr8u::$1 in (number~) divr8u::$1 ← (byte) divr8u::dividend#2 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr8u::$2 ← (unumber~) divr8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) divr8u::$5 ← (byte) divr8u::dividend#3 << (number) 1
Adding number conversion cast (unumber) 1 in (byte~) divr8u::$6 ← (byte) divr8u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr8u::$4 ← (byte) divr8u::rem#6 | (number) 1
Adding number conversion cast (unumber) divr8u::$4 in (number~) divr8u::$4 ← (byte) divr8u::rem#6 | (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) rem16u#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) divr16u::quotient#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$0 ← (word) divr16u::rem#5 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
Adding number conversion cast (unumber) divr16u::$2 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr16u::$3 ← (unumber~) divr16u::$2 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$6 ← (word) divr16u::dividend#4 << (number) 1
Adding number conversion cast (unumber) 1 in (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr16u::$5 ← (word) divr16u::rem#7 | (number) 1
Adding number conversion cast (unumber) divr16u::$5 in (number~) divr16u::$5 ← (word) divr16u::rem#7 | (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) divr16u::rem#3 ← (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) rem8s#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) div8s::neg#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) div8s::dividendu#0 ← (number) 0
Adding number conversion cast (snumber) 0 in (bool~) div8s::$0 ← (signed byte) div8s::dividend#1 < (number) 0
Adding number conversion cast (unumber) 1 in (byte) div8s::neg#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) div8s::divisoru#0 ← (number) 0
Adding number conversion cast (snumber) 0 in (bool~) div8s::$1 ← (signed byte) div8s::divisor#1 < (number) 0
Adding number conversion cast (unumber) 1 in (number~) div8s::$10 ← (byte) div8s::neg#3 ^ (number) 1
Adding number conversion cast (unumber) div8s::$10 in (number~) div8s::$10 ← (byte) div8s::neg#3 ^ (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) div8s::$3 ← (byte) div8s::neg#4 == (number) 0
Adding number conversion cast (snumber) 0 in (signed word) rem16s#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) divr16s::neg#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) divr16s::dividendu#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) divr16s::remu#0 ← (number) 0
Adding number conversion cast (snumber) 0 in (bool~) divr16s::$0 ← (signed word) divr16s::dividend#1 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) divr16s::$1 ← (signed word) divr16s::rem#1 < (number) 0
Adding number conversion cast (unumber) 1 in (byte) divr16s::neg#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (word) divr16s::divisoru#0 ← (number) 0
Adding number conversion cast (snumber) 0 in (bool~) divr16s::$3 ← (signed word) divr16s::divisor#1 < (number) 0
Adding number conversion cast (unumber) 1 in (number~) divr16s::$15 ← (byte) divr16s::neg#3 ^ (number) 1
Adding number conversion cast (unumber) divr16s::$15 in (number~) divr16s::$15 ← (byte) divr16s::neg#3 ^ (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) divr16s::$5 ← (byte) divr16s::neg#4 == (number) 0
Adding number conversion cast (snumber) 0 in (signed word) divr16s::rem#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (byte) to elements in (byte[]) test_8u::dividends#0 ← { (byte)(number) $ff, (byte)(number) $ff, (byte)(number) $ff, (byte)(number) $ff, (byte)(number) $ff, (byte)(number) $ff }
Adding number conversion cast (byte) to elements in (byte[]) test_8u::divisors#0 ← { (byte)(number) 5, (byte)(number) 7, (byte)(number) $b, (byte)(number) $d, (byte)(number) $11, (byte)(number) $13 }
Adding number conversion cast (word) to elements in (word[]) test_16u::dividends#0 ← { (word)(number) $ffff, (word)(number) $ffff, (word)(number) $ffff, (word)(number) $ffff, (word)(number) $ffff, (word)(number) $ffff }
Adding number conversion cast (word) to elements in (word[]) test_16u::divisors#0 ← { (word)(number) 5, (word)(number) 7, (word)(number) $b, (word)(number) $d, (word)(number) $11, (word)(number) $13 }
Adding number conversion cast (signed byte) to elements in (signed byte[]) test_8s::dividends#0 ← { (signed byte)(number) $7f, (signed byte)(number) -$7f, (signed byte)(number) -$7f, (signed byte)(number) $7f, (signed byte)(number) $7f, (signed byte)(number) $7f }
Adding number conversion cast (signed byte) to elements in (signed byte[]) test_8s::divisors#0 ← { (signed byte)(number) 5, (signed byte)(number) 7, (signed byte)(number) -$b, (signed byte)(number) -$d, (signed byte)(number) $11, (signed byte)(number) $13 }
Adding number conversion cast (signed word) to elements in (signed word[]) test_16s::dividends#0 ← { (signed word)(number) $7fff, (signed word)(number) $7fff, (signed word)(number) -$7fff, (signed word)(number) -$7fff, (signed word)(number) $7fff, (signed word)(number) -$7fff }
Adding number conversion cast (signed word) to elements in (signed word[]) test_16s::divisors#0 ← { (signed word)(number) 5, (signed word)(number) -7, (signed word)(number) $b, (signed word)(number) -$d, (signed word)(number) -$11, (signed word)(number) $13 }
Successful SSA optimization PassNAddArrayNumberTypeConversions
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (word~) print_sword::$1 ← (word)(signed word) print_sword::w#7
Inlining cast (byte~) print_sbyte::$1 ← (byte)(signed byte) print_sbyte::b#7
Inlining cast (byte) rem8u#0 ← (unumber)(number) 0
Inlining cast (byte) divr8u::rem#0 ← (unumber)(number) 0
Inlining cast (byte) divr8u::quotient#0 ← (unumber)(number) 0
Inlining cast (word) rem16u#0 ← (unumber)(number) 0
Inlining cast (word) divr16u::quotient#0 ← (unumber)(number) 0
Inlining cast (word) divr16u::rem#3 ← (unumber)(number) 0
Inlining cast (signed byte) rem8s#0 ← (snumber)(number) 0
Inlining cast (byte) div8s::neg#0 ← (unumber)(number) 0
Inlining cast (byte) div8s::dividendu#0 ← (unumber)(number) 0
Inlining cast (byte~) div8s::$6 ← (byte)(signed byte~) div8s::$5
Inlining cast (byte) div8s::neg#1 ← (unumber)(number) 1
Inlining cast (byte~) div8s::$4 ← (byte)(signed byte) div8s::dividend#3
Inlining cast (byte) div8s::divisoru#0 ← (unumber)(number) 0
Inlining cast (byte~) div8s::$9 ← (byte)(signed byte~) div8s::$8
Inlining cast (byte~) div8s::$7 ← (byte)(signed byte) div8s::divisor#3
Inlining cast (signed byte~) div8s::$15 ← (signed byte)(byte) rem8u#19
Inlining cast (signed byte~) div8s::$16 ← (signed byte)(byte) div8s::resultu#1
Inlining cast (signed byte~) div8s::$11 ← (signed byte)(byte) rem8u#20
Inlining cast (signed byte~) div8s::$13 ← (signed byte)(byte) div8s::resultu#2
Inlining cast (signed word) rem16s#0 ← (snumber)(number) 0
Inlining cast (byte) divr16s::neg#0 ← (unumber)(number) 0
Inlining cast (word) divr16s::dividendu#0 ← (unumber)(number) 0
Inlining cast (word) divr16s::remu#0 ← (unumber)(number) 0
Inlining cast (word~) divr16s::$9 ← (word)(signed word~) divr16s::$8
Inlining cast (word~) divr16s::$11 ← (word)(signed word~) divr16s::$10
Inlining cast (byte) divr16s::neg#1 ← (unumber)(number) 1
Inlining cast (word~) divr16s::$6 ← (word)(signed word) divr16s::dividend#3
Inlining cast (word~) divr16s::$7 ← (word)(signed word) divr16s::rem#3
Inlining cast (word) divr16s::divisoru#0 ← (unumber)(number) 0
Inlining cast (word~) divr16s::$14 ← (word)(signed word~) divr16s::$13
Inlining cast (word~) divr16s::$12 ← (word)(signed word) divr16s::divisor#3
Inlining cast (signed word~) divr16s::$20 ← (signed word)(word) rem16u#21
Inlining cast (signed word~) divr16s::$21 ← (signed word)(word) divr16s::resultu#1
Inlining cast (signed word~) divr16s::$16 ← (signed word)(word) rem16u#22
Inlining cast (signed word~) divr16s::$18 ← (signed word)(word) divr16s::resultu#2
Inlining cast (signed word) divr16s::rem#0 ← (snumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $ff
Simplifying constant integer cast $ff
Simplifying constant integer cast $ff
Simplifying constant integer cast $ff
Simplifying constant integer cast $ff
Simplifying constant integer cast 5
Simplifying constant integer cast 7
Simplifying constant integer cast $b
Simplifying constant integer cast $d
Simplifying constant integer cast $11
Simplifying constant integer cast $13
Simplifying constant integer cast $ffff
Simplifying constant integer cast $ffff
Simplifying constant integer cast $ffff
Simplifying constant integer cast $ffff
Simplifying constant integer cast $ffff
Simplifying constant integer cast $ffff
Simplifying constant integer cast 5
Simplifying constant integer cast 7
Simplifying constant integer cast $b
Simplifying constant integer cast $d
Simplifying constant integer cast $11
Simplifying constant integer cast $13
Simplifying constant integer cast $7f
Simplifying constant integer cast -$7f
Simplifying constant integer cast -$7f
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast 5
Simplifying constant integer cast 7
Simplifying constant integer cast -$b
Simplifying constant integer cast -$d
Simplifying constant integer cast $11
Simplifying constant integer cast $13
Simplifying constant integer cast $7fff
Simplifying constant integer cast $7fff
Simplifying constant integer cast -$7fff
Simplifying constant integer cast -$7fff
Simplifying constant integer cast $7fff
Simplifying constant integer cast -$7fff
Simplifying constant integer cast 5
Simplifying constant integer cast -7
Simplifying constant integer cast $b
Simplifying constant integer cast -$d
Simplifying constant integer cast -$11
Simplifying constant integer cast $13
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f
Inferred type updated to byte in (unumber~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80
Inferred type updated to byte in (unumber~) divr8u::$4 ← (byte) divr8u::rem#6 | (byte) 1
Inferred type updated to byte in (unumber~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
Inferred type updated to word in (unumber~) divr16u::$5 ← (word) divr16u::rem#7 | (byte) 1
Inferred type updated to byte in (unumber~) div8s::$10 ← (byte) div8s::neg#3 ^ (byte) 1
Inferred type updated to byte in (unumber~) divr16s::$15 ← (byte) divr16s::neg#3 ^ (byte) 1
Inversing boolean not [149] (bool~) divr8u::$3 ← (byte~) divr8u::$1 == (byte) 0 from [148] (bool~) divr8u::$2 ← (byte~) divr8u::$1 != (byte) 0
Inversing boolean not [157] (bool~) divr8u::$8 ← (byte) divr8u::rem#5 < (byte) divr8u::divisor#1 from [156] (bool~) divr8u::$7 ← (byte) divr8u::rem#5 >= (byte) divr8u::divisor#1
Inversing boolean not [188] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte) 0 from [187] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte) 0
Inversing boolean not [196] (bool~) divr16u::$9 ← (word) divr16u::rem#6 < (word) divr16u::divisor#2 from [195] (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#66 (byte*) print_char_cursor#161 (byte*) print_screen#10 (byte*) print_line_cursor#61 (byte*) print_char_cursor#160 (byte*) print_screen#9 (byte*) print_line_cursor#56 (byte*) print_char_cursor#159 (byte*) print_screen#8 (byte*) print_line_cursor#51 (byte*) print_char_cursor#154 (byte*) print_screen#7 (byte*) print_line_cursor#50 (byte*) print_char_cursor#153 (byte*) print_screen#6 (byte*) print_line_cursor#45 (byte*) print_char_cursor#145 (byte*) print_screen#5 
Alias (byte*) print_str::str#13 = (byte*) print_str::str#14 
Alias (byte*) print_char_cursor#130 = (byte*) print_char_cursor#66 (byte*) print_char_cursor#67 (byte*) print_char_cursor#2 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#21 (byte*) print_char_cursor#3 (byte*) print_line_cursor#22 (byte*) print_char_cursor#69 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (byte*) print_char_cursor#132 = (byte*) print_char_cursor#147 (byte*) print_char_cursor#133 
Alias (signed word) print_sword::w#10 = (signed word) print_sword::w#8 (signed word) print_sword::w#5 (signed word) print_sword::w#6 (signed word) print_sword::w#9 
Alias (byte*) print_char_cursor#5 = (byte*) print_char_cursor#70 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$5 
Alias (byte*) print_char_cursor#6 = (byte*) print_char_cursor#71 
Alias (word) print_word::w#0 = (word~) print_sword::$1 
Alias (byte*) print_char_cursor#7 = (byte*) print_char_cursor#72 (byte*) print_char_cursor#73 (byte*) print_char_cursor#8 
Alias (byte*) print_char_cursor#135 = (byte*) print_char_cursor#148 (byte*) print_char_cursor#136 
Alias (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#8 (signed byte) print_sbyte::b#5 (signed byte) print_sbyte::b#6 (signed byte) print_sbyte::b#9 
Alias (byte*) print_char_cursor#74 = (byte*) print_char_cursor#9 
Alias (signed byte) print_sbyte::b#0 = (signed byte~) print_sbyte::$5 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#75 
Alias (byte) print_byte::b#0 = (byte~) print_sbyte::$1 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#76 (byte*) print_char_cursor#77 (byte*) print_char_cursor#12 
Alias (byte) print_byte::b#1 = (byte~) print_word::$0 
Alias (word) print_word::w#5 = (word) print_word::w#6 
Alias (byte*) print_char_cursor#13 = (byte*) print_char_cursor#78 
Alias (byte) print_byte::b#2 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#79 (byte*) print_char_cursor#80 (byte*) print_char_cursor#15 
Alias (byte) print_byte::b#7 = (byte) print_byte::b#8 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#81 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#82 (byte*) print_char_cursor#83 (byte*) print_char_cursor#18 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#85 (byte*) print_char_cursor#20 
Alias (byte*) print_line_cursor#23 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_line_cursor#3 (byte*) print_char_cursor#21 (byte*) print_char_cursor#86 (byte*) print_line_cursor#4 (byte*) print_char_cursor#22 
Alias (byte) divr8u::return#0 = (byte) divr8u::return#3 
Alias (byte) rem8u#1 = (byte) rem8u#15 (byte) rem8u#16 (byte) rem8u#2 
Alias (byte) div8u::return#0 = (byte~) div8u::$0 (byte) div8u::return#4 (byte) div8u::return#1 
Alias (byte) divr8u::rem#1 = (byte~) divr8u::$0 (byte) divr8u::rem#6 
Alias (byte) divr8u::dividend#1 = (byte~) divr8u::$5 (byte) divr8u::dividend#7 
Alias (byte) divr8u::quotient#1 = (byte~) divr8u::$6 (byte) divr8u::quotient#4 
Alias (byte) divr8u::dividend#2 = (byte) divr8u::dividend#6 
Alias (byte) divr8u::quotient#6 = (byte) divr8u::quotient#7 
Alias (byte) divr8u::divisor#3 = (byte) divr8u::divisor#4 
Alias (byte) divr8u::i#5 = (byte) divr8u::i#6 
Alias (byte) divr8u::rem#2 = (byte~) divr8u::$4 
Alias (byte) divr8u::rem#5 = (byte) divr8u::rem#7 
Alias (byte) divr8u::divisor#1 = (byte) divr8u::divisor#2 
Alias (byte) divr8u::i#3 = (byte) divr8u::i#4 
Alias (byte) divr8u::rem#3 = (byte~) divr8u::$9 
Alias (byte) divr8u::rem#10 = (byte) divr8u::rem#8 
Alias (byte) divr8u::return#1 = (byte) divr8u::quotient#5 (byte) divr8u::quotient#8 (byte) divr8u::return#4 (byte) divr8u::return#2 
Alias (byte) rem8u#17 = (byte) rem8u#3 (byte) rem8u#4 
Alias (byte) rem8u#0 = (byte) rem8u#55 (byte) rem8u#52 (byte) rem8u#50 (byte) rem8u#41 
Alias (word) divr16u::rem#0 = (word~) divr16u::$0 (word) divr16u::rem#7 
Alias (word) divr16u::dividend#0 = (word~) divr16u::$6 (word) divr16u::dividend#8 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$7 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#3 = (word) divr16u::dividend#7 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#4 = (word) divr16u::divisor#5 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#1 = (word~) divr16u::$5 
Alias (word) divr16u::rem#6 = (word) divr16u::rem#8 
Alias (word) divr16u::divisor#2 = (word) divr16u::divisor#3 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#2 = (word~) divr16u::$10 
Alias (word) divr16u::rem#11 = (word) divr16u::rem#9 
Alias (word) divr16u::return#0 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#4 (word) divr16u::return#1 
Alias (word) rem16u#1 = (word) rem16u#17 (word) rem16u#2 
Alias (word) divr16u::return#2 = (word) divr16u::return#5 
Alias (word) rem16u#18 = (word) rem16u#3 (word) rem16u#19 (word) rem16u#4 
Alias (word) div16u::return#0 = (word~) div16u::$0 (word) div16u::return#3 (word) div16u::return#1 
Alias (word) rem16u#0 = (word) rem16u#55 (word) rem16u#54 (word) rem16u#45 
Alias (signed byte) div8s::dividend#1 = (signed byte) div8s::dividend#2 (signed byte) div8s::dividend#3 
Alias (signed byte) div8s::divisor#4 = (signed byte) div8s::divisor#6 (signed byte) div8s::divisor#5 
Alias (byte) rem8u#56 = (byte) rem8u#60 (byte) rem8u#57 
Alias (byte) div8s::dividendu#1 = (byte~) div8s::$6 
Alias (byte) div8s::neg#0 = (byte) div8s::neg#7 
Alias (byte) div8s::dividendu#2 = (byte~) div8s::$4 
Alias (signed byte) div8s::divisor#1 = (signed byte) div8s::divisor#2 (signed byte) div8s::divisor#3 
Alias (byte) div8s::neg#3 = (byte) div8s::neg#5 (byte) div8s::neg#8 
Alias (byte) div8s::dividendu#4 = (byte) div8s::dividendu#6 (byte) div8s::dividendu#5 
Alias (byte) rem8u#42 = (byte) rem8u#51 (byte) rem8u#43 
Alias (byte) div8s::divisoru#1 = (byte~) div8s::$9 
Alias (byte) div8s::neg#2 = (byte~) div8s::$10 
Alias (byte) div8s::divisoru#2 = (byte~) div8s::$7 
Alias (byte) div8u::return#2 = (byte) div8u::return#5 
Alias (byte) div8s::neg#4 = (byte) div8s::neg#6 
Alias (byte) rem8u#18 = (byte) rem8u#5 (byte) rem8u#19 (byte) rem8u#20 
Alias (byte) div8s::resultu#0 = (byte~) div8s::$2 (byte) div8s::resultu#1 (byte) div8s::resultu#2 
Alias (signed byte) rem8s#1 = (signed byte~) div8s::$15 
Alias (signed byte) div8s::return#0 = (signed byte~) div8s::$16 
Alias (signed byte) rem8s#2 = (signed byte~) div8s::$12 
Alias (signed byte) div8s::return#1 = (signed byte~) div8s::$14 
Alias (signed byte) div8s::return#2 = (signed byte) div8s::return#4 
Alias (byte) rem8u#21 = (byte) rem8u#6 
Alias (signed byte) rem8s#3 = (signed byte) rem8s#9 
Alias (signed byte) rem8s#0 = (signed byte) rem8s#26 (signed byte) rem8s#21 
Alias (signed word) divr16s::dividend#1 = (signed word) divr16s::dividend#2 (signed word) divr16s::dividend#3 
Alias (signed word) divr16s::rem#1 = (signed word) divr16s::rem#2 (signed word) divr16s::rem#3 
Alias (signed word) divr16s::divisor#4 = (signed word) divr16s::divisor#6 (signed word) divr16s::divisor#5 
Alias (word) rem16u#60 = (word) rem16u#64 (word) rem16u#61 
Alias (word) divr16s::dividendu#1 = (word~) divr16s::$9 
Alias (word) divr16s::remu#1 = (word~) divr16s::$11 
Alias (byte) divr16s::neg#0 = (byte) divr16s::neg#7 
Alias (word) divr16s::dividendu#2 = (word~) divr16s::$6 
Alias (word) divr16s::remu#2 = (word~) divr16s::$7 
Alias (signed word) divr16s::divisor#1 = (signed word) divr16s::divisor#2 (signed word) divr16s::divisor#3 
Alias (byte) divr16s::neg#3 = (byte) divr16s::neg#5 (byte) divr16s::neg#8 
Alias (word) divr16s::dividendu#4 = (word) divr16s::dividendu#6 (word) divr16s::dividendu#5 
Alias (word) divr16s::remu#4 = (word) divr16s::remu#6 (word) divr16s::remu#5 
Alias (word) rem16u#46 = (word) rem16u#56 (word) rem16u#47 
Alias (word) divr16s::divisoru#1 = (word~) divr16s::$14 
Alias (byte) divr16s::neg#2 = (byte~) divr16s::$15 
Alias (word) divr16s::divisoru#2 = (word~) divr16s::$12 
Alias (word) divr16u::return#3 = (word) divr16u::return#6 
Alias (byte) divr16s::neg#4 = (byte) divr16s::neg#6 
Alias (word) rem16u#20 = (word) rem16u#5 (word) rem16u#21 (word) rem16u#22 
Alias (word) divr16s::resultu#0 = (word~) divr16s::$4 (word) divr16s::resultu#1 (word) divr16s::resultu#2 
Alias (signed word) rem16s#1 = (signed word~) divr16s::$20 
Alias (signed word) divr16s::return#0 = (signed word~) divr16s::$21 
Alias (signed word) rem16s#2 = (signed word~) divr16s::$17 
Alias (signed word) divr16s::return#1 = (signed word~) divr16s::$19 
Alias (signed word) divr16s::return#2 = (signed word) divr16s::return#4 
Alias (word) rem16u#23 = (word) rem16u#6 
Alias (signed word) rem16s#11 = (signed word) rem16s#3 
Alias (signed word) divr16s::return#3 = (signed word) divr16s::return#5 
Alias (word) rem16u#24 = (word) rem16u#7 (word) rem16u#25 (word) rem16u#8 
Alias (signed word) rem16s#12 = (signed word) rem16s#4 (signed word) rem16s#13 (signed word) rem16s#5 
Alias (signed word) div16s::return#0 = (signed word~) div16s::$0 (signed word) div16s::return#3 (signed word) div16s::return#1 
Alias (byte) rem8u#33 = (byte) rem8u#44 
Alias (word) rem16u#38 = (word) rem16u#48 (word) rem16u#57 
Alias (signed byte) rem8s#16 = (signed byte) rem8s#27 (signed byte) rem8s#29 (signed byte) rem8s#22 
Alias (signed word) rem16s#21 = (signed word) rem16s#32 (signed word) rem16s#34 (signed word) rem16s#30 (signed word) rem16s#26 
Alias (byte*) print_line_cursor#24 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#87 
Alias (byte) rem8u#22 = (byte) rem8u#7 (byte) rem8u#34 
Alias (byte*) print_char_cursor#24 = (byte*) print_char_cursor#88 
Alias (byte*) print_line_cursor#25 = (byte*) print_line_cursor#6 
Alias (word) rem16u#26 = (word) rem16u#9 (word) rem16u#39 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#89 
Alias (byte*) print_line_cursor#26 = (byte*) print_line_cursor#7 
Alias (byte) rem8u#23 = (byte) rem8u#8 (byte) rem8u#35 (byte) rem8u#24 (byte) rem8u#9 
Alias (signed byte) rem8s#10 = (signed byte) rem8s#4 (signed byte) rem8s#17 (signed byte) rem8s#11 (signed byte) rem8s#5 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#90 
Alias (byte*) print_line_cursor#27 = (byte*) print_line_cursor#8 
Alias (word) rem16u#10 = (word) rem16u#27 (word) rem16u#28 (word) rem16u#11 
Alias (signed word) rem16s#14 = (signed word) rem16s#6 (signed word) rem16s#15 (signed word) rem16s#7 
Alias (byte*) print_char_cursor#27 = (byte*) print_char_cursor#91 (byte*) print_char_cursor#92 (byte*) print_char_cursor#28 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#9 (byte*) print_line_cursor#28 (byte*) print_line_cursor#29 
Alias (byte) div8u::return#3 = (byte) div8u::return#6 
Alias (byte) test_8u::dividend#0 = (byte) test_8u::dividend#1 
Alias (byte*) print_char_cursor#141 = (byte*) print_char_cursor#149 
Alias (byte) test_8u::divisor#0 = (byte) test_8u::divisor#3 (byte) test_8u::divisor#2 (byte) test_8u::divisor#1 
Alias (byte*) print_line_cursor#41 = (byte*) print_line_cursor#75 (byte*) print_line_cursor#79 (byte*) print_line_cursor#71 (byte*) print_line_cursor#67 (byte*) print_line_cursor#62 (byte*) print_line_cursor#57 (byte*) print_line_cursor#52 (byte*) print_line_cursor#46 
Alias (byte) test_8u::i#10 = (byte) test_8u::i#11 (byte) test_8u::i#2 (byte) test_8u::i#9 (byte) test_8u::i#8 (byte) test_8u::i#7 (byte) test_8u::i#6 (byte) test_8u::i#5 (byte) test_8u::i#4 (byte) test_8u::i#3 
Alias (byte) rem8u#10 = (byte) rem8u#25 (byte) rem8u#61 (byte) rem8u#58 (byte) rem8u#53 (byte) rem8u#46 (byte) rem8u#37 (byte) rem8u#26 (byte) rem8u#47 (byte) rem8u#38 (byte) rem8u#27 (byte) rem8u#11 
Alias (byte) test_8u::res#0 = (byte~) test_8u::$0 (byte) test_8u::res#4 (byte) test_8u::res#3 (byte) test_8u::res#2 (byte) test_8u::res#1 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#93 
Alias (byte*) print_char_cursor#30 = (byte*) print_char_cursor#94 
Alias (byte*) print_char_cursor#31 = (byte*) print_char_cursor#95 
Alias (byte*) print_char_cursor#32 = (byte*) print_char_cursor#96 
Alias (byte*) print_char_cursor#33 = (byte*) print_char_cursor#97 
Alias (byte*) print_char_cursor#34 = (byte*) print_char_cursor#98 
Alias (byte*) print_char_cursor#35 = (byte*) print_char_cursor#99 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#30 (byte*) print_line_cursor#31 (byte*) print_line_cursor#12 
Alias (byte*) print_char_cursor#100 = (byte*) print_char_cursor#36 (byte*) print_char_cursor#101 (byte*) print_char_cursor#37 
Alias (word) div16u::return#2 = (word) div16u::return#4 
Alias (word) test_16u::dividend#0 = (word) test_16u::dividend#1 
Alias (byte*) print_char_cursor#142 = (byte*) print_char_cursor#150 
Alias (word) test_16u::divisor#0 = (word) test_16u::divisor#3 (word) test_16u::divisor#2 (word) test_16u::divisor#1 
Alias (byte*) print_line_cursor#42 = (byte*) print_line_cursor#76 (byte*) print_line_cursor#80 (byte*) print_line_cursor#72 (byte*) print_line_cursor#68 (byte*) print_line_cursor#63 (byte*) print_line_cursor#58 (byte*) print_line_cursor#53 (byte*) print_line_cursor#47 
Alias (byte) test_16u::i#10 = (byte) test_16u::i#11 (byte) test_16u::i#2 (byte) test_16u::i#9 (byte) test_16u::i#8 (byte) test_16u::i#7 (byte) test_16u::i#6 (byte) test_16u::i#5 (byte) test_16u::i#4 (byte) test_16u::i#3 
Alias (word) rem16u#12 = (word) rem16u#29 (word) rem16u#65 (word) rem16u#62 (word) rem16u#58 (word) rem16u#50 (word) rem16u#41 (word) rem16u#30 (word) rem16u#51 (word) rem16u#42 (word) rem16u#31 (word) rem16u#13 
Alias (word) test_16u::res#0 = (word~) test_16u::$0 (word) test_16u::res#4 (word) test_16u::res#3 (word) test_16u::res#2 (word) test_16u::res#1 
Alias (byte*) print_char_cursor#102 = (byte*) print_char_cursor#38 
Alias (byte*) print_char_cursor#103 = (byte*) print_char_cursor#39 
Alias (byte*) print_char_cursor#104 = (byte*) print_char_cursor#40 
Alias (byte*) print_char_cursor#105 = (byte*) print_char_cursor#41 
Alias (byte*) print_char_cursor#106 = (byte*) print_char_cursor#42 
Alias (byte*) print_char_cursor#107 = (byte*) print_char_cursor#43 
Alias (byte*) print_char_cursor#108 = (byte*) print_char_cursor#44 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#32 (byte*) print_line_cursor#33 (byte*) print_line_cursor#14 
Alias (byte*) print_char_cursor#109 = (byte*) print_char_cursor#45 (byte*) print_char_cursor#110 (byte*) print_char_cursor#46 
Alias (signed byte) div8s::return#3 = (signed byte) div8s::return#5 
Alias (signed byte) test_8s::dividend#0 = (signed byte) test_8s::dividend#1 
Alias (byte*) print_char_cursor#143 = (byte*) print_char_cursor#151 
Alias (signed byte) test_8s::divisor#0 = (signed byte) test_8s::divisor#3 (signed byte) test_8s::divisor#2 (signed byte) test_8s::divisor#1 
Alias (byte*) print_line_cursor#43 = (byte*) print_line_cursor#77 (byte*) print_line_cursor#81 (byte*) print_line_cursor#73 (byte*) print_line_cursor#69 (byte*) print_line_cursor#64 (byte*) print_line_cursor#59 (byte*) print_line_cursor#54 (byte*) print_line_cursor#48 
Alias (byte) test_8s::i#10 = (byte) test_8s::i#11 (byte) test_8s::i#2 (byte) test_8s::i#9 (byte) test_8s::i#8 (byte) test_8s::i#7 (byte) test_8s::i#6 (byte) test_8s::i#5 (byte) test_8s::i#4 (byte) test_8s::i#3 
Alias (byte) rem8u#12 = (byte) rem8u#28 (byte) rem8u#65 (byte) rem8u#64 (byte) rem8u#63 (byte) rem8u#62 (byte) rem8u#59 (byte) rem8u#54 (byte) rem8u#49 (byte) rem8u#40 (byte) rem8u#29 (byte) rem8u#13 
Alias (signed byte) rem8s#12 = (signed byte) rem8s#6 (signed byte) rem8s#31 (signed byte) rem8s#30 (signed byte) rem8s#28 (signed byte) rem8s#24 (signed byte) rem8s#19 (signed byte) rem8s#13 (signed byte) rem8s#25 (signed byte) rem8s#20 (signed byte) rem8s#14 (signed byte) rem8s#7 
Alias (signed byte) test_8s::res#0 = (signed byte~) test_8s::$0 (signed byte) test_8s::res#4 (signed byte) test_8s::res#3 (signed byte) test_8s::res#2 (signed byte) test_8s::res#1 
Alias (byte*) print_char_cursor#111 = (byte*) print_char_cursor#47 
Alias (byte*) print_char_cursor#112 = (byte*) print_char_cursor#48 
Alias (byte*) print_char_cursor#113 = (byte*) print_char_cursor#49 
Alias (byte*) print_char_cursor#114 = (byte*) print_char_cursor#50 
Alias (byte*) print_char_cursor#115 = (byte*) print_char_cursor#51 
Alias (byte*) print_char_cursor#116 = (byte*) print_char_cursor#52 
Alias (byte*) print_char_cursor#117 = (byte*) print_char_cursor#53 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#34 (byte*) print_line_cursor#35 (byte*) print_line_cursor#16 
Alias (byte*) print_char_cursor#118 = (byte*) print_char_cursor#54 (byte*) print_char_cursor#119 (byte*) print_char_cursor#55 
Alias (signed word) div16s::return#2 = (signed word) div16s::return#4 
Alias (signed word) test_16s::dividend#0 = (signed word) test_16s::dividend#1 
Alias (byte*) print_char_cursor#144 = (byte*) print_char_cursor#152 
Alias (signed word) test_16s::divisor#0 = (signed word) test_16s::divisor#3 (signed word) test_16s::divisor#2 (signed word) test_16s::divisor#1 
Alias (byte*) print_line_cursor#44 = (byte*) print_line_cursor#78 (byte*) print_line_cursor#82 (byte*) print_line_cursor#74 (byte*) print_line_cursor#70 (byte*) print_line_cursor#65 (byte*) print_line_cursor#60 (byte*) print_line_cursor#55 (byte*) print_line_cursor#49 
Alias (byte) test_16s::i#10 = (byte) test_16s::i#11 (byte) test_16s::i#2 (byte) test_16s::i#9 (byte) test_16s::i#8 (byte) test_16s::i#7 (byte) test_16s::i#6 (byte) test_16s::i#5 (byte) test_16s::i#4 (byte) test_16s::i#3 
Alias (word) rem16u#14 = (word) rem16u#32 (word) rem16u#69 (word) rem16u#68 (word) rem16u#67 (word) rem16u#66 (word) rem16u#63 (word) rem16u#59 (word) rem16u#53 (word) rem16u#44 (word) rem16u#33 (word) rem16u#15 
Alias (signed word) rem16s#16 = (signed word) rem16s#8 (signed word) rem16s#35 (signed word) rem16s#33 (signed word) rem16s#31 (signed word) rem16s#28 (signed word) rem16s#23 (signed word) rem16s#17 (signed word) rem16s#29 (signed word) rem16s#24 (signed word) rem16s#18 (signed word) rem16s#9 
Alias (signed word) test_16s::res#0 = (signed word~) test_16s::$0 (signed word) test_16s::res#4 (signed word) test_16s::res#3 (signed word) test_16s::res#2 (signed word) test_16s::res#1 
Alias (byte*) print_char_cursor#120 = (byte*) print_char_cursor#56 
Alias (byte*) print_char_cursor#121 = (byte*) print_char_cursor#57 
Alias (byte*) print_char_cursor#122 = (byte*) print_char_cursor#58 
Alias (byte*) print_char_cursor#123 = (byte*) print_char_cursor#59 
Alias (byte*) print_char_cursor#124 = (byte*) print_char_cursor#60 
Alias (byte*) print_char_cursor#125 = (byte*) print_char_cursor#61 
Alias (byte*) print_char_cursor#126 = (byte*) print_char_cursor#62 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#36 (byte*) print_line_cursor#37 (byte*) print_line_cursor#18 
Alias (byte*) print_char_cursor#127 = (byte*) print_char_cursor#63 (byte*) print_char_cursor#128 (byte*) print_char_cursor#64 
Alias (signed word) rem16s#0 = (signed word) rem16s#25 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#38 
Alias (byte*) print_char_cursor#129 = (byte*) print_char_cursor#65 
Alias (byte) rem8u#14 = (byte) rem8u#30 
Alias (word) rem16u#16 = (word) rem16u#34 
Alias (signed byte) rem8s#15 = (signed byte) rem8s#8 
Alias (signed word) rem16s#10 = (signed word) rem16s#19 
Successful SSA optimization Pass2AliasElimination
Alias (byte) divr8u::dividend#2 = (byte) divr8u::dividend#3 
Alias (byte) divr8u::quotient#3 = (byte) divr8u::quotient#6 
Alias (byte) divr8u::divisor#1 = (byte) divr8u::divisor#3 (byte) divr8u::divisor#6 
Alias (byte) divr8u::i#2 = (byte) divr8u::i#3 (byte) divr8u::i#5 
Alias (byte) divr8u::dividend#1 = (byte) divr8u::dividend#5 
Alias (word) divr16u::dividend#3 = (word) divr16u::dividend#4 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#2 = (word) divr16u::divisor#4 (word) divr16u::divisor#7 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#0 = (word) divr16u::dividend#6 
Alias (signed byte) div8s::divisor#1 = (signed byte) div8s::divisor#4 
Alias (byte) rem8u#32 = (byte) rem8u#42 (byte) rem8u#56 
Alias (byte) div8s::dividendu#3 = (byte) div8s::dividendu#4 
Alias (byte) rem8u#18 = (byte) rem8u#21 
Alias (signed word) divr16s::divisor#1 = (signed word) divr16s::divisor#4 
Alias (word) rem16u#36 = (word) rem16u#46 (word) rem16u#60 
Alias (word) divr16s::dividendu#3 = (word) divr16s::dividendu#4 
Alias (word) divr16s::remu#3 = (word) divr16s::remu#4 
Alias (word) rem16u#20 = (word) rem16u#23 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_char_cursor#68
Self Phi Eliminated (byte*) print_line_cursor#23
Self Phi Eliminated (byte) divr8u::divisor#1
Self Phi Eliminated (word) divr16u::divisor#2
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte*) print_char_cursor#68 (byte*) print_char_cursor#131
Identical Phi Values (byte*) print_char_cursor#5 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#6 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#7 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#74 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_screen#1 (byte*) print_screen#4
Identical Phi Values (byte*) print_line_cursor#23 (byte*) print_screen#1
Identical Phi Values (byte) rem8u#1 (byte) rem8u#17
Identical Phi Values (byte) divr8u::rem#9 (byte) divr8u::rem#0
Identical Phi Values (byte) divr8u::dividend#4 (byte) divr8u::dividend#0
Identical Phi Values (byte) divr8u::divisor#5 (byte) divr8u::divisor#0
Identical Phi Values (byte) divr8u::divisor#1 (byte) divr8u::divisor#5
Identical Phi Values (word) divr16u::divisor#2 (word) divr16u::divisor#6
Identical Phi Values (word) div16u::dividend#1 (word) div16u::dividend#0
Identical Phi Values (word) div16u::divisor#1 (word) div16u::divisor#0
Identical Phi Values (word) rem16u#35 (word) rem16u#40
Identical Phi Values (word) rem16u#18 (word) rem16u#1
Identical Phi Values (signed byte) div8s::dividend#1 (signed byte) div8s::dividend#0
Identical Phi Values (signed byte) div8s::divisor#1 (signed byte) div8s::divisor#0
Identical Phi Values (byte) rem8u#32 (byte) rem8u#39
Identical Phi Values (byte) rem8u#18 (byte) rem8u#1
Identical Phi Values (signed word) divr16s::dividend#1 (signed word) divr16s::dividend#0
Identical Phi Values (signed word) divr16s::rem#1 (signed word) divr16s::rem#0
Identical Phi Values (signed word) divr16s::divisor#1 (signed word) divr16s::divisor#0
Identical Phi Values (word) rem16u#36 (word) rem16u#37
Identical Phi Values (word) rem16u#20 (word) rem16u#1
Identical Phi Values (signed word) div16s::dividend#1 (signed word) div16s::dividend#0
Identical Phi Values (signed word) div16s::divisor#1 (signed word) div16s::divisor#0
Identical Phi Values (word) rem16u#37 (word) rem16u#43
Identical Phi Values (signed word) rem16s#20 (signed word) rem16s#22
Identical Phi Values (word) rem16u#24 (word) rem16u#20
Identical Phi Values (signed word) rem16s#12 (signed word) rem16s#11
Identical Phi Values (byte*) print_screen#4 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#40 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#140 (byte*) print_line_cursor#0
Identical Phi Values (byte) rem8u#33 (byte) rem8u#0
Identical Phi Values (word) rem16u#38 (word) rem16u#0
Identical Phi Values (signed byte) rem8s#16 (signed byte) rem8s#0
Identical Phi Values (signed word) rem16s#21 (signed word) rem16s#0
Identical Phi Values (byte*) print_line_cursor#24 (byte*) print_line_cursor#23
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_line_cursor#23
Identical Phi Values (byte) rem8u#22 (byte) rem8u#10
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#100
Identical Phi Values (byte*) print_line_cursor#25 (byte*) print_line_cursor#11
Identical Phi Values (word) rem16u#26 (word) rem16u#12
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#109
Identical Phi Values (byte*) print_line_cursor#26 (byte*) print_line_cursor#13
Identical Phi Values (byte) rem8u#23 (byte) rem8u#12
Identical Phi Values (signed byte) rem8s#10 (signed byte) rem8s#12
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#118
Identical Phi Values (byte*) print_line_cursor#27 (byte*) print_line_cursor#15
Identical Phi Values (word) rem16u#10 (word) rem16u#14
Identical Phi Values (signed word) rem16s#14 (signed word) rem16s#16
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#127
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#17
Identical Phi Values (byte) rem8u#45 (byte) rem8u#33
Identical Phi Values (byte*) print_char_cursor#155 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#83 (byte*) print_line_cursor#24
Identical Phi Values (byte) rem8u#10 (byte) rem8u#1
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#33 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#34 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#35 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#100 (byte*) print_line_cursor#1
Identical Phi Values (word) rem16u#49 (word) rem16u#38
Identical Phi Values (byte*) print_char_cursor#156 (byte*) print_char_cursor#24
Identical Phi Values (byte*) print_line_cursor#84 (byte*) print_line_cursor#25
Identical Phi Values (word) rem16u#12 (word) rem16u#18
Identical Phi Values (byte*) print_char_cursor#102 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#103 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#104 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#105 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#106 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#107 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#108 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#109 (byte*) print_line_cursor#1
Identical Phi Values (byte) rem8u#48 (byte) rem8u#22
Identical Phi Values (signed byte) rem8s#23 (signed byte) rem8s#16
Identical Phi Values (byte*) print_char_cursor#157 (byte*) print_char_cursor#25
Identical Phi Values (byte*) print_line_cursor#85 (byte*) print_line_cursor#26
Identical Phi Values (byte) rem8u#12 (byte) rem8u#18
Identical Phi Values (signed byte) rem8s#12 (signed byte) rem8s#3
Identical Phi Values (byte*) print_char_cursor#111 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#112 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#113 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#114 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#115 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#116 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#117 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#118 (byte*) print_line_cursor#1
Identical Phi Values (word) rem16u#52 (word) rem16u#26
Identical Phi Values (signed word) rem16s#27 (signed word) rem16s#21
Identical Phi Values (byte*) print_char_cursor#158 (byte*) print_char_cursor#26
Identical Phi Values (byte*) print_line_cursor#86 (byte*) print_line_cursor#27
Identical Phi Values (word) rem16u#14 (word) rem16u#24
Identical Phi Values (signed word) rem16s#16 (signed word) rem16s#12
Identical Phi Values (byte*) print_char_cursor#120 (byte*) print_char_cursor#7
Identical Phi Values (byte*) print_char_cursor#121 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#122 (byte*) print_char_cursor#7
Identical Phi Values (byte*) print_char_cursor#123 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#124 (byte*) print_char_cursor#7
Identical Phi Values (byte*) print_char_cursor#125 (byte*) print_char_cursor#130
Identical Phi Values (byte*) print_char_cursor#126 (byte*) print_char_cursor#7
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#127 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#10
Identical Phi Values (byte*) print_char_cursor#129 (byte*) print_char_cursor#27
Identical Phi Values (byte) rem8u#14 (byte) rem8u#23
Identical Phi Values (word) rem16u#16 (word) rem16u#10
Identical Phi Values (signed byte) rem8s#15 (signed byte) rem8s#10
Identical Phi Values (signed word) rem16s#10 (signed word) rem16s#14
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#146 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#131 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#134 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#137 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#142 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#42 (byte*) print_line_cursor#1
Identical Phi Values (byte) rem8u#39 (byte) rem8u#17
Identical Phi Values (byte*) print_char_cursor#143 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#43 (byte*) print_line_cursor#1
Identical Phi Values (word) rem16u#43 (word) rem16u#1
Identical Phi Values (byte*) print_char_cursor#144 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#44 (byte*) print_line_cursor#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [464] (byte~) test_16u::$11 ← (byte) test_16u::i#10 * (const byte) SIZEOF_WORD
Identified duplicate assignment right side [578] (byte~) test_16s::$11 ← (byte) test_16s::i#10 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) print_str::$0 [6] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2
Simple Condition (bool~) print_ln::$1 [19] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1
Simple Condition (bool~) print_sword::$0 [28] if((signed word) print_sword::w#10<(signed byte) 0) goto print_sword::@1
Simple Condition (bool~) print_sbyte::$0 [52] if((signed byte) print_sbyte::b#10<(signed byte) 0) goto print_sbyte::@1
Simple Condition (bool~) print_cls::$1 [117] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) divr8u::$3 [150] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2
Simple Condition (bool~) divr8u::$8 [158] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3
Simple Condition (bool~) divr8u::$10 [165] if((byte) divr8u::i#1!=rangelast(0,7)) goto divr8u::@1
Simple Condition (bool~) divr16u::$4 [189] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [197] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [204] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) div8s::$0 [236] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1
Simple Condition (bool~) div8s::$1 [248] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3
Simple Condition (bool~) div8s::$3 [268] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5
Simple Condition (bool~) divr16s::$3 [312] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3
Simple Condition (bool~) divr16s::$5 [333] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5
Simple Condition (bool~) test_8u::$9 [451] if((byte) test_8u::i#1!=rangelast(0,5)) goto test_8u::@1
Simple Condition (bool~) test_16u::$9 [508] if((byte) test_16u::i#1!=rangelast(0,5)) goto test_16u::@1
Simple Condition (bool~) test_8s::$9 [564] if((byte) test_8s::i#1!=rangelast(0,5)) goto test_8s::@1
Simple Condition (bool~) test_16s::$9 [623] if((byte) test_16s::i#1!=rangelast(0,5)) goto test_16s::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting || if()-condition to two if()s [294] (bool~) divr16s::$2 ← (bool~) divr16s::$0 || (bool~) divr16s::$1
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant right-side identified [403] (byte[]) test_8u::dividends#0 ← { (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff }
Constant right-side identified [404] (byte[]) test_8u::divisors#0 ← { (byte) 5, (byte) 7, (byte) $b, (byte) $d, (byte) $11, (byte) $13 }
Constant right-side identified [458] (word[]) test_16u::dividends#0 ← { (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff }
Constant right-side identified [459] (word[]) test_16u::divisors#0 ← { (word) 5, (word) 7, (word) $b, (word) $d, (word) $11, (word) $13 }
Constant right-side identified [515] (signed byte[]) test_8s::dividends#0 ← { (signed byte) $7f, (signed byte) -$7f, (signed byte) -$7f, (signed byte) $7f, (signed byte) $7f, (signed byte) $7f }
Constant right-side identified [516] (signed byte[]) test_8s::divisors#0 ← { (signed byte) 5, (signed byte) 7, (signed byte) -$b, (signed byte) -$d, (signed byte) $11, (signed byte) $13 }
Constant right-side identified [572] (signed word[]) test_16s::dividends#0 ← { (signed word) $7fff, (signed word) $7fff, (signed word) -$7fff, (signed word) -$7fff, (signed word) $7fff, (signed word) -$7fff }
Constant right-side identified [573] (signed word[]) test_16s::divisors#0 ← { (signed word) 5, (signed word) -7, (signed word) $b, (signed word) -$d, (signed word) -$11, (signed word) $13 }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = ' '
Constant (const byte) print_char::ch#2 = '-'
Constant (const byte) print_char::ch#3 = ' '
Constant (const byte[]) print_hextab#0 = $0
Constant (const byte) rem8u#0 = 0
Constant (const byte) divr8u::rem#0 = 0
Constant (const byte) divr8u::quotient#0 = 0
Constant (const byte) divr8u::i#0 = 0
Constant (const word) rem16u#0 = 0
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const signed byte) rem8s#0 = 0
Constant (const byte) div8s::neg#0 = 0
Constant (const byte) div8s::dividendu#0 = 0
Constant (const byte) div8s::neg#1 = 1
Constant (const byte) div8s::divisoru#0 = 0
Constant (const signed word) rem16s#0 = 0
Constant (const byte) divr16s::neg#0 = 0
Constant (const word) divr16s::dividendu#0 = 0
Constant (const word) divr16s::remu#0 = 0
Constant (const byte) divr16s::neg#1 = 1
Constant (const word) divr16s::divisoru#0 = 0
Constant (const signed word) divr16s::rem#0 = 0
Constant (const byte[]) test_8u::dividends#0 = { $ff, $ff, $ff, $ff, $ff, $ff }
Constant (const byte[]) test_8u::divisors#0 = { 5, 7, $b, $d, $11, $13 }
Constant (const byte) test_8u::i#0 = 0
Constant (const byte*) print_str::str#1 = test_8u::str
Constant (const byte*) print_str::str#2 = test_8u::str1
Constant (const byte*) print_str::str#3 = test_8u::str2
Constant (const word[]) test_16u::dividends#0 = { $ffff, $ffff, $ffff, $ffff, $ffff, $ffff }
Constant (const word[]) test_16u::divisors#0 = { 5, 7, $b, $d, $11, $13 }
Constant (const byte) test_16u::i#0 = 0
Constant (const byte*) print_str::str#4 = test_16u::str
Constant (const byte*) print_str::str#5 = test_16u::str1
Constant (const byte*) print_str::str#6 = test_16u::str2
Constant (const signed byte[]) test_8s::dividends#0 = { $7f, -$7f, -$7f, $7f, $7f, $7f }
Constant (const signed byte[]) test_8s::divisors#0 = { 5, 7, -$b, -$d, $11, $13 }
Constant (const byte) test_8s::i#0 = 0
Constant (const byte*) print_str::str#7 = test_8s::str
Constant (const byte*) print_str::str#8 = test_8s::str1
Constant (const byte*) print_str::str#9 = test_8s::str2
Constant (const signed word[]) test_16s::dividends#0 = { $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff }
Constant (const signed word[]) test_16s::divisors#0 = { 5, -7, $b, -$d, -$11, $13 }
Constant (const byte) test_16s::i#0 = 0
Constant (const byte*) print_str::str#10 = test_16s::str
Constant (const byte*) print_str::str#11 = test_16s::str1
Constant (const byte*) print_str::str#12 = test_16s::str2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)divr16s::rem#0 in [307] (word) divr16s::remu#2 ← (word)(const signed word) divr16s::rem#0
Successful SSA optimization Pass2ConstantValues
Successful SSA optimization Pass2ConstantStringConsolidation
Resolved ranged next value [163] divr8u::i#1 ← ++ divr8u::i#2 to ++
Resolved ranged comparison value [165] if(divr8u::i#1!=rangelast(0,7)) goto divr8u::@1 to (number) 8
Resolved ranged next value [202] divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value [204] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (number) $10
Resolved ranged next value [449] test_8u::i#1 ← ++ test_8u::i#10 to ++
Resolved ranged comparison value [451] if(test_8u::i#1!=rangelast(0,5)) goto test_8u::@1 to (number) 6
Resolved ranged next value [506] test_16u::i#1 ← ++ test_16u::i#10 to ++
Resolved ranged comparison value [508] if(test_16u::i#1!=rangelast(0,5)) goto test_16u::@1 to (number) 6
Resolved ranged next value [562] test_8s::i#1 ← ++ test_8s::i#10 to ++
Resolved ranged comparison value [564] if(test_8s::i#1!=rangelast(0,5)) goto test_8s::@1 to (number) 6
Resolved ranged next value [621] test_16s::i#1 ← ++ test_16s::i#10 to ++
Resolved ranged comparison value [623] if(test_16s::i#1!=rangelast(0,5)) goto test_16s::@1 to (number) 6
Simplifying constant evaluating to zero (word)(const signed word) divr16s::rem#0 in [307] (word) divr16s::remu#2 ← (word)(const signed word) divr16s::rem#0
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused variable - keeping the phi block (byte) rem8u#31
Eliminating unused variable - keeping the phi block (word) rem16u#40
Eliminating unused variable - keeping the phi block (signed byte) rem8s#18
Eliminating unused variable - keeping the phi block (signed word) rem16s#22
Eliminating unused constant (const byte) div8s::dividendu#0
Eliminating unused constant (const byte) div8s::divisoru#0
Eliminating unused constant (const word) divr16s::dividendu#0
Eliminating unused constant (const word) divr16s::remu#0
Eliminating unused constant (const word) divr16s::divisoru#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) rem8u#36
Eliminating unused constant (const word) rem16u#0
Eliminating unused constant (const signed byte) rem8s#0
Eliminating unused constant (const signed word) rem16s#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) rem8u#0
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 8 in if((byte) divr8u::i#1!=(number) 8) goto divr8u::@1
Adding number conversion cast (unumber) $10 in if((byte) divr16u::i#1!=(number) $10) goto divr16u::@1
Adding number conversion cast (unumber) 6 in if((byte) test_8u::i#1!=(number) 6) goto test_8u::@1
Adding number conversion cast (unumber) 6 in if((byte) test_16u::i#1!=(number) 6) goto test_16u::@1
Adding number conversion cast (unumber) 6 in if((byte) test_8s::i#1!=(number) 6) goto test_8s::@1
Adding number conversion cast (unumber) 6 in if((byte) test_16s::i#1!=(number) 6) goto test_16s::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Simplifying constant integer cast $10
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte~) test_16u::$11 = (byte~) test_16u::$10 
Alias (byte~) test_16s::$11 = (byte~) test_16s::$10 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) divr16s::$0 [128] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1
Simple Condition (bool~) divr16s::$1 [266] if((const signed word) divr16s::rem#0<(signed byte) 0) goto divr16s::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [51] (byte*~) print_cls::$0 ← (const byte*) print_line_cursor#0 + (word) $3e8
Constant right-side identified [131] (signed word~) divr16s::$10 ← - (const signed word) divr16s::rem#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Constant (const signed word) divr16s::$10 = -divr16s::rem#0
Constant (const word) divr16s::remu#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)divr16s::$10 in [132] (word) divr16s::remu#1 ← (word)(const signed word) divr16s::$10
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [266] if((const signed word) divr16s::rem#0<(signed byte) 0) goto divr16s::@1
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero -(const signed word) divr16s::rem#0 in 
Simplifying constant evaluating to zero (word)(const signed word) divr16s::$10 in [132] (word) divr16s::remu#1 ← (word)(const signed word) divr16s::$10
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const signed word) divr16s::rem#0
Eliminating unused constant (const signed word) divr16s::$10
Successful SSA optimization PassNEliminateUnusedVars
Constant (const word) divr16s::remu#1 = 0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [102] (byte) div8s::dividendu#1 ← (byte)(signed byte~) div8s::$5 keeping div8s::dividendu#1
Inlining Noop Cast [107] (byte) div8s::divisoru#1 ← (byte)(signed byte~) div8s::$8 keeping div8s::divisoru#1
Inlining Noop Cast [127] (word) divr16s::dividendu#1 ← (word)(signed word~) divr16s::$8 keeping divr16s::dividendu#1
Inlining Noop Cast [132] (word) divr16s::divisoru#1 ← (word)(signed word~) divr16s::$13 keeping divr16s::divisoru#1
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [103] (byte) div8s::dividendu#2 ← (byte)(signed byte) div8s::dividend#0 keeping div8s::dividend#0
Inlining Noop Cast [109] (byte) div8s::divisoru#2 ← (byte)(signed byte) div8s::divisor#0 keeping div8s::divisor#0
Inlining Noop Cast [117] (signed byte) rem8s#1 ← (signed byte)(byte) rem8u#17 keeping rem8u#17
Inlining Noop Cast [118] (signed byte) div8s::return#0 ← (signed byte)(byte) div8s::resultu#0 keeping div8s::resultu#0
Inlining Noop Cast [121] (signed byte~) div8s::$13 ← (signed byte)(byte) div8s::resultu#0 keeping div8s::resultu#0
Inlining Noop Cast [128] (word) divr16s::dividendu#2 ← (word)(signed word) divr16s::dividend#0 keeping divr16s::dividend#0
Inlining Noop Cast [134] (word) divr16s::divisoru#2 ← (word)(signed word) divr16s::divisor#0 keeping divr16s::divisor#0
Inlining Noop Cast [143] (signed word) rem16s#1 ← (signed word)(word) rem16u#1 keeping rem16u#1
Inlining Noop Cast [144] (signed word) divr16s::return#0 ← (signed word)(word) divr16s::resultu#0 keeping divr16s::resultu#0
Inlining Noop Cast [147] (signed word~) divr16s::$18 ← (signed word)(word) divr16s::resultu#0 keeping divr16s::resultu#0
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [187] (byte~) test_16u::$11 ← (byte) test_16u::i#10 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [234] (byte~) test_16s::$11 ← (byte) test_16s::i#10 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte*) print_str::str#3
Inlining constant with var siblings (const byte*) print_str::str#4
Inlining constant with var siblings (const byte*) print_str::str#5
Inlining constant with var siblings (const byte*) print_str::str#6
Inlining constant with var siblings (const byte*) print_str::str#7
Inlining constant with var siblings (const byte*) print_str::str#8
Inlining constant with var siblings (const byte*) print_str::str#9
Inlining constant with var siblings (const byte*) print_str::str#10
Inlining constant with var siblings (const byte*) print_str::str#11
Inlining constant with var siblings (const byte*) print_str::str#12
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::quotient#0
Inlining constant with var siblings (const byte) divr8u::i#0
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const byte) div8s::neg#0
Inlining constant with var siblings (const byte) div8s::neg#1
Inlining constant with var siblings (const byte) divr16s::neg#0
Inlining constant with var siblings (const byte) divr16s::neg#1
Inlining constant with var siblings (const word) divr16s::remu#2
Inlining constant with var siblings (const word) divr16s::remu#1
Inlining constant with var siblings (const byte) test_8u::i#0
Inlining constant with var siblings (const byte) test_16u::i#0
Inlining constant with var siblings (const byte) test_8s::i#0
Inlining constant with var siblings (const byte) test_16s::i#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined divr16u::rem#3 = (byte) 0
Constant inlined test_16s::str = (const string) str
Constant inlined test_8s::str1 = (const string) str1
Constant inlined print_cls::$0 = (byte*) 1024+(word) $3e8
Constant inlined divr16u::i#0 = (byte) 0
Constant inlined test_8s::str2 = (const string) str2
Constant inlined print_str::str#12 = (const string) str2
Constant inlined print_str::str#11 = (const string) str1
Constant inlined print_str::str#10 = (const string) str
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined divr16s::neg#1 = (byte) 1
Constant inlined divr8u::i#0 = (byte) 0
Constant inlined divr16s::neg#0 = (byte) 0
Constant inlined test_16u::i#0 = (byte) 0
Constant inlined test_8u::str2 = (const string) str2
Constant inlined divr16u::quotient#0 = (byte) 0
Constant inlined test_8u::str1 = (const string) str1
Constant inlined test_8u::i#0 = (byte) 0
Constant inlined test_8s::str = (const string) str
Constant inlined test_16s::str1 = (const string) str1
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined test_16s::str2 = (const string) str2
Constant inlined test_16s::i#0 = (byte) 0
Constant inlined print_cls::sc#0 = (byte*) 1024
Constant inlined divr8u::rem#0 = (byte) 0
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined divr8u::quotient#0 = (byte) 0
Constant inlined test_16u::str1 = (const string) str1
Constant inlined print_char::ch#2 = (byte) '-'
Constant inlined test_16u::str = (const string) str
Constant inlined print_str::str#9 = (const string) str2
Constant inlined test_16u::str2 = (const string) str2
Constant inlined print_char::ch#1 = (byte) ' '
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined print_str::str#4 = (const string) str
Constant inlined print_str::str#3 = (const string) str2
Constant inlined div8s::neg#1 = (byte) 1
Constant inlined print_str::str#2 = (const string) str1
Constant inlined div8s::neg#0 = (byte) 0
Constant inlined print_str::str#1 = (const string) str
Constant inlined print_str::str#8 = (const string) str1
Constant inlined print_str::str#7 = (const string) str
Constant inlined test_8u::str = (const string) str
Constant inlined print_str::str#6 = (const string) str2
Constant inlined divr16s::remu#1 = (word) 0
Constant inlined test_8s::i#0 = (byte) 0
Constant inlined print_str::str#5 = (const string) str1
Constant inlined divr16s::remu#2 = (word) 0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (word) divr16s::remu#3 (word) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const word) divr16u::rem#4 = 0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) SIZEOF_WORD
Eliminating unused constant (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const word) divr16u::rem#4
Constant inlined divr16u::rem#4 = (word) 0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (word) divr16u::rem#10 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Added new block during phi lifting divr8u::@8(between divr8u::@3 and divr8u::@1)
Added new block during phi lifting divr8u::@9(between divr8u::@1 and divr8u::@2)
Added new block during phi lifting divr8u::@10(between divr8u::@2 and divr8u::@3)
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting test_8u::@12(between test_8u::@11 and test_8u::@1)
Added new block during phi lifting test_16u::@12(between test_16u::@11 and test_16u::@1)
Added new block during phi lifting test_8s::@12(between test_8s::@11 and test_8s::@1)
Added new block during phi lifting test_16s::@12(between test_16s::@11 and test_16s::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @12
Adding NOP phi() at start of @19
Adding NOP phi() at start of @21
Adding NOP phi() at start of @24
Adding NOP phi() at start of @25
Adding NOP phi() at start of @32
Adding NOP phi() at start of @33
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of test_16s
Adding NOP phi() at start of test_16s::@4
Adding NOP phi() at start of test_16s::@6
Adding NOP phi() at start of test_16s::@8
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_sword::@7
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of divr16s::@16
Adding NOP phi() at start of test_8s
Adding NOP phi() at start of test_8s::@4
Adding NOP phi() at start of test_8s::@6
Adding NOP phi() at start of test_8s::@8
Adding NOP phi() at start of print_sbyte::@7
Adding NOP phi() at start of test_16u
Adding NOP phi() at start of test_16u::@4
Adding NOP phi() at start of test_16u::@6
Adding NOP phi() at start of test_16u::@8
Adding NOP phi() at start of test_8u
Adding NOP phi() at start of test_8u::@4
Adding NOP phi() at start of test_8u::@6
Adding NOP phi() at start of test_8u::@8
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@2
CALL GRAPH
Calls in [] to main:7 
Calls in [main] to print_cls:11 test_8u:13 test_16u:15 test_8s:17 test_16s:19 
Calls in [test_16s] to div16s:29 print_sword:35 print_str:37 print_sword:41 print_str:43 print_sword:47 print_str:49 print_sword:53 print_ln:55 
Calls in [print_sword] to print_char:71 print_word:77 print_char:81 
Calls in [print_word] to print_byte:92 print_byte:96 
Calls in [print_byte] to print_char:104 print_char:109 
Calls in [div16s] to divr16s:125 
Calls in [divr16s] to divr16u:141 
Calls in [test_8s] to div8s:195 print_sbyte:201 print_str:203 print_sbyte:207 print_str:209 print_sbyte:213 print_str:215 print_sbyte:219 print_ln:221 
Calls in [print_sbyte] to print_char:229 print_byte:235 print_char:239 
Calls in [div8s] to div8u:253 
Calls in [div8u] to divr8u:275 
Calls in [test_16u] to div16u:313 print_word:319 print_str:321 print_word:325 print_str:327 print_word:331 print_str:333 print_word:337 print_ln:339 
Calls in [div16u] to divr16u:348 
Calls in [test_8u] to div8u:360 print_byte:366 print_str:368 print_byte:372 print_str:374 print_byte:378 print_str:380 print_byte:384 print_ln:386 

Created 54 initial phi equivalence classes
Coalesced [33] print_sword::w#11 ← print_sword::w#1
Not coalescing [34] print_char_cursor#164 ← print_line_cursor#1
Coalesced [39] print_sword::w#12 ← print_sword::w#2
Coalesced [40] print_char_cursor#165 ← print_char_cursor#130
Coalesced [45] print_sword::w#13 ← print_sword::w#3
Coalesced (already) [46] print_char_cursor#166 ← print_char_cursor#130
Coalesced [51] print_sword::w#14 ← print_sword::w#4
Coalesced (already) [52] print_char_cursor#167 ← print_char_cursor#130
Coalesced [54] print_line_cursor#87 ← print_line_cursor#1
Coalesced [59] test_16s::i#12 ← test_16s::i#1
Coalesced [61] print_line_cursor#91 ← print_line_cursor#39
Coalesced (already) [67] print_line_cursor#92 ← print_line_cursor#1
Coalesced [70] print_char_cursor#189 ← print_char_cursor#132
Coalesced [72] print_sword::w#16 ← print_sword::w#10
Coalesced [75] print_word::w#7 ← print_word::w#0
Coalesced [76] print_char_cursor#172 ← print_char_cursor#19
Coalesced (already) [80] print_char_cursor#188 ← print_char_cursor#132
Coalesced [83] print_sword::w#15 ← print_sword::w#0
Coalesced [90] print_byte::b#10 ← print_byte::b#1
Coalesced [91] print_char_cursor#178 ← print_char_cursor#138
Coalesced [94] print_byte::b#11 ← print_byte::b#2
Coalesced (already) [95] print_char_cursor#179 ← print_char_cursor#19
Coalesced [102] print_char::ch#7 ← print_char::ch#4
Coalesced [103] print_char_cursor#184 ← print_char_cursor#139
Coalesced [107] print_char::ch#8 ← print_char::ch#5
Coalesced (already) [108] print_char_cursor#185 ← print_char_cursor#19
Coalesced [113] print_str::str#16 ← print_str::str#15
Coalesced (already) [114] print_char_cursor#162 ← print_char_cursor#19
Coalesced [121] print_str::str#17 ← print_str::str#0
Coalesced [122] print_char_cursor#163 ← print_char_cursor#1
Coalesced [135] divr16s::neg#10 ← divr16s::neg#3
Coalesced [139] divr16u::dividend#10 ← divr16u::dividend#2
Coalesced [140] divr16u::divisor#9 ← divr16u::divisor#1
Coalesced [148] divr16s::return#6 ← divr16s::return#1
Coalesced [149] rem16s#36 ← rem16s#2
Coalesced [157] divr16s::neg#9 ← divr16s::neg#2
Coalesced [161] divr16u::dividend#11 ← divr16u::dividend#5
Coalesced [168] divr16u::rem#14 ← divr16u::rem#1
Coalesced [175] divr16u::rem#16 ← divr16u::rem#2
Coalesced [176] divr16u::return#8 ← divr16u::quotient#2
Coalesced [182] divr16u::rem#12 ← divr16u::rem#11
Coalesced [183] divr16u::dividend#12 ← divr16u::dividend#0
Coalesced [184] divr16u::quotient#9 ← divr16u::return#0
Coalesced [185] divr16u::i#7 ← divr16u::i#1
Coalesced [186] divr16u::rem#15 ← divr16u::rem#6
Coalesced [187] divr16u::return#7 ← divr16u::quotient#1
Coalesced [188] divr16u::rem#13 ← divr16u::rem#0
Coalesced [199] print_sbyte::b#11 ← print_sbyte::b#1
Not coalescing [200] print_char_cursor#168 ← print_line_cursor#1
Coalesced [205] print_sbyte::b#12 ← print_sbyte::b#2
Coalesced [206] print_char_cursor#169 ← print_char_cursor#130
Coalesced [211] print_sbyte::b#13 ← print_sbyte::b#3
Coalesced (already) [212] print_char_cursor#170 ← print_char_cursor#130
Coalesced [217] print_sbyte::b#14 ← print_sbyte::b#4
Coalesced (already) [218] print_char_cursor#171 ← print_char_cursor#130
Coalesced (already) [220] print_line_cursor#89 ← print_line_cursor#1
Coalesced [225] test_8s::i#12 ← test_8s::i#1
Coalesced (already) [228] print_char_cursor#187 ← print_char_cursor#135
Coalesced [230] print_sbyte::b#16 ← print_sbyte::b#10
Coalesced [233] print_byte::b#9 ← print_byte::b#0
Coalesced (already) [234] print_char_cursor#177 ← print_char_cursor#19
Coalesced (already) [238] print_char_cursor#186 ← print_char_cursor#135
Coalesced [241] print_sbyte::b#15 ← print_sbyte::b#0
Coalesced [247] div8s::neg#10 ← div8s::neg#3
Coalesced [251] div8u::dividend#3 ← div8u::dividend#0
Coalesced [252] div8u::divisor#3 ← div8u::divisor#0
Coalesced [260] div8s::return#6 ← div8s::return#1
Coalesced [261] rem8s#32 ← rem8s#2
Coalesced [269] div8s::neg#9 ← div8s::neg#2
Coalesced [279] divr8u::dividend#8 ← divr8u::dividend#0
Coalesced [285] divr8u::rem#13 ← divr8u::rem#2
Coalesced [292] divr8u::rem#15 ← divr8u::rem#3
Coalesced [293] divr8u::return#6 ← divr8u::quotient#2
Coalesced [299] divr8u::rem#11 ← divr8u::rem#10
Coalesced [300] divr8u::dividend#9 ← divr8u::dividend#1
Coalesced [301] divr8u::quotient#9 ← divr8u::return#1
Coalesced [302] divr8u::i#7 ← divr8u::i#1
Coalesced [303] divr8u::rem#14 ← divr8u::rem#5
Coalesced [304] divr8u::return#5 ← divr8u::quotient#1
Coalesced [305] divr8u::rem#12 ← divr8u::rem#1
Coalesced [317] print_word::w#8 ← print_word::w#1
Not coalescing [318] print_char_cursor#173 ← print_line_cursor#1
Coalesced [323] print_word::w#9 ← print_word::w#2
Coalesced (already) [324] print_char_cursor#174 ← print_char_cursor#130
Coalesced [329] print_word::w#10 ← print_word::w#3
Coalesced (already) [330] print_char_cursor#175 ← print_char_cursor#130
Coalesced [335] print_word::w#11 ← print_word::w#4
Coalesced (already) [336] print_char_cursor#176 ← print_char_cursor#130
Coalesced (already) [338] print_line_cursor#88 ← print_line_cursor#1
Coalesced [343] test_16u::i#12 ← test_16u::i#1
Coalesced [346] divr16u::dividend#9 ← divr16u::dividend#1
Coalesced [347] divr16u::divisor#8 ← divr16u::divisor#0
Coalesced [358] div8u::dividend#4 ← div8u::dividend#1
Coalesced [359] div8u::divisor#4 ← div8u::divisor#1
Coalesced [364] print_byte::b#12 ← print_byte::b#3
Coalesced [365] print_char_cursor#180 ← print_char_cursor#141
Coalesced [370] print_byte::b#13 ← print_byte::b#4
Coalesced (already) [371] print_char_cursor#181 ← print_char_cursor#130
Coalesced [376] print_byte::b#14 ← print_byte::b#5
Coalesced (already) [377] print_char_cursor#182 ← print_char_cursor#130
Coalesced [382] print_byte::b#15 ← print_byte::b#6
Coalesced (already) [383] print_char_cursor#183 ← print_char_cursor#130
Coalesced [385] print_line_cursor#90 ← print_line_cursor#41
Coalesced [390] test_8u::i#12 ← test_8u::i#1
Not coalescing [391] print_char_cursor#190 ← print_line_cursor#1
Coalesced (already) [392] print_line_cursor#93 ← print_line_cursor#1
Coalesced [400] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 34 phi equivalence classes
Culled Empty Block (label) @12
Culled Empty Block (label) @19
Culled Empty Block (label) @21
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @33
Culled Empty Block (label) main::@5
Culled Empty Block (label) test_16s::@12
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_sword::@6
Culled Empty Block (label) print_sword::@7
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) divr16s::@16
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) test_8s::@12
Culled Empty Block (label) print_sbyte::@6
Culled Empty Block (label) print_sbyte::@7
Culled Empty Block (label) divr8u::@8
Culled Empty Block (label) divr8u::@10
Culled Empty Block (label) divr8u::@9
Culled Empty Block (label) test_16u::@12
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) print_cls::@3
Renumbering block @32 to @1
Renumbering block print_sword::@5 to print_sword::@4
Renumbering block print_sbyte::@5 to print_sbyte::@4
Renumbering block div8u::@2 to div8u::@1
Renumbering block div16u::@2 to div16u::@1
Renumbering block div8s::@7 to div8s::@6
Renumbering block div8s::@9 to div8s::@7
Renumbering block div8s::@11 to div8s::@8
Renumbering block div8s::@15 to div8s::@9
Renumbering block divr16s::@7 to divr16s::@6
Renumbering block divr16s::@9 to divr16s::@7
Renumbering block divr16s::@11 to divr16s::@8
Renumbering block divr16s::@15 to divr16s::@9
Renumbering block div16s::@2 to div16s::@1
Renumbering block test_8u::@3 to test_8u::@2
Renumbering block test_8u::@4 to test_8u::@3
Renumbering block test_8u::@5 to test_8u::@4
Renumbering block test_8u::@6 to test_8u::@5
Renumbering block test_8u::@7 to test_8u::@6
Renumbering block test_8u::@8 to test_8u::@7
Renumbering block test_8u::@9 to test_8u::@8
Renumbering block test_8u::@10 to test_8u::@9
Renumbering block test_8u::@11 to test_8u::@10
Renumbering block test_8u::@12 to test_8u::@11
Renumbering block test_16u::@3 to test_16u::@2
Renumbering block test_16u::@4 to test_16u::@3
Renumbering block test_16u::@5 to test_16u::@4
Renumbering block test_16u::@6 to test_16u::@5
Renumbering block test_16u::@7 to test_16u::@6
Renumbering block test_16u::@8 to test_16u::@7
Renumbering block test_16u::@9 to test_16u::@8
Renumbering block test_16u::@10 to test_16u::@9
Renumbering block test_16u::@11 to test_16u::@10
Renumbering block test_8s::@3 to test_8s::@2
Renumbering block test_8s::@4 to test_8s::@3
Renumbering block test_8s::@5 to test_8s::@4
Renumbering block test_8s::@6 to test_8s::@5
Renumbering block test_8s::@7 to test_8s::@6
Renumbering block test_8s::@8 to test_8s::@7
Renumbering block test_8s::@9 to test_8s::@8
Renumbering block test_8s::@10 to test_8s::@9
Renumbering block test_8s::@11 to test_8s::@10
Renumbering block test_16s::@3 to test_16s::@2
Renumbering block test_16s::@4 to test_16s::@3
Renumbering block test_16s::@5 to test_16s::@4
Renumbering block test_16s::@6 to test_16s::@5
Renumbering block test_16s::@7 to test_16s::@6
Renumbering block test_16s::@8 to test_16s::@7
Renumbering block test_16s::@9 to test_16s::@8
Renumbering block test_16s::@10 to test_16s::@9
Renumbering block test_16s::@11 to test_16s::@10
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of test_16s
Adding NOP phi() at start of test_16s::@3
Adding NOP phi() at start of test_16s::@5
Adding NOP phi() at start of test_16s::@7
Adding NOP phi() at start of test_16s::@9
Adding NOP phi() at start of print_sword::@3
Adding NOP phi() at start of print_sword::@1
Adding NOP phi() at start of test_8s
Adding NOP phi() at start of test_8s::@3
Adding NOP phi() at start of test_8s::@5
Adding NOP phi() at start of test_8s::@7
Adding NOP phi() at start of test_8s::@9
Adding NOP phi() at start of print_sbyte::@3
Adding NOP phi() at start of print_sbyte::@1
Adding NOP phi() at start of divr8u
Adding NOP phi() at start of test_16u
Adding NOP phi() at start of test_16u::@3
Adding NOP phi() at start of test_16u::@5
Adding NOP phi() at start of test_16u::@7
Adding NOP phi() at start of test_16u::@9
Adding NOP phi() at start of test_8u
Adding NOP phi() at start of test_8u::@3
Adding NOP phi() at start of test_8u::@5
Adding NOP phi() at start of test_8u::@7
Adding NOP phi() at start of test_8u::@9
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call test_8u 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call test_16u 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi()
  [11] call test_8s 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] phi()
  [13] call test_16s 
  to:main::@return
main::@return: scope:[main]  from main::@4
  [14] return 
  to:@return
test_16s: scope:[test_16s]  from main::@4
  [15] phi()
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@10
  [16] (byte) test_16s::i#10 ← phi( test_16s/(byte) 0 test_16s::@10/(byte) test_16s::i#1 )
  [17] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1
  [18] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte~) test_16s::$11)
  [19] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte~) test_16s::$11)
  [20] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
  [21] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
  [22] call div16s 
  [23] (signed word) div16s::return#2 ← (signed word) div16s::return#0
  to:test_16s::@2
test_16s::@2: scope:[test_16s]  from test_16s::@1
  [24] (signed word) test_16s::res#0 ← (signed word) div16s::return#2
  [25] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0
  [26] (byte*~) print_char_cursor#164 ← (byte*) print_line_cursor#1
  [27] call print_sword 
  to:test_16s::@3
test_16s::@3: scope:[test_16s]  from test_16s::@2
  [28] phi()
  [29] call print_str 
  to:test_16s::@4
test_16s::@4: scope:[test_16s]  from test_16s::@3
  [30] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0
  [31] call print_sword 
  to:test_16s::@5
test_16s::@5: scope:[test_16s]  from test_16s::@4
  [32] phi()
  [33] call print_str 
  to:test_16s::@6
test_16s::@6: scope:[test_16s]  from test_16s::@5
  [34] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0
  [35] call print_sword 
  to:test_16s::@7
test_16s::@7: scope:[test_16s]  from test_16s::@6
  [36] phi()
  [37] call print_str 
  to:test_16s::@8
test_16s::@8: scope:[test_16s]  from test_16s::@7
  [38] (signed word) print_sword::w#4 ← (signed word) rem16s#11
  [39] call print_sword 
  to:test_16s::@9
test_16s::@9: scope:[test_16s]  from test_16s::@8
  [40] phi()
  [41] call print_ln 
  to:test_16s::@10
test_16s::@10: scope:[test_16s]  from test_16s::@9
  [42] (byte) test_16s::i#1 ← ++ (byte) test_16s::i#10
  [43] if((byte) test_16s::i#1!=(byte) 6) goto test_16s::@1
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@10
  [44] return 
  to:@return
print_ln: scope:[print_ln]  from test_16s::@9 test_16u::@9 test_8s::@9 test_8u::@9
  [45] (byte*) print_line_cursor#39 ← phi( test_16s::@9/(byte*) print_line_cursor#1 test_16u::@9/(byte*) print_line_cursor#1 test_8s::@9/(byte*) print_line_cursor#1 test_8u::@9/(byte*) print_line_cursor#41 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [46] (byte*) print_line_cursor#20 ← phi( print_ln/(byte*) print_line_cursor#39 print_ln::@1/(byte*) print_line_cursor#1 )
  [47] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte) $28
  [48] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [49] return 
  to:@return
print_sword: scope:[print_sword]  from test_16s::@2 test_16s::@4 test_16s::@6 test_16s::@8
  [50] (byte*) print_char_cursor#132 ← phi( test_16s::@2/(byte*~) print_char_cursor#164 test_16s::@4/(byte*) print_char_cursor#130 test_16s::@6/(byte*) print_char_cursor#130 test_16s::@8/(byte*) print_char_cursor#130 )
  [50] (signed word) print_sword::w#10 ← phi( test_16s::@2/(signed word) print_sword::w#1 test_16s::@4/(signed word) print_sword::w#2 test_16s::@6/(signed word) print_sword::w#3 test_16s::@8/(signed word) print_sword::w#4 )
  [51] if((signed word) print_sword::w#10<(signed byte) 0) goto print_sword::@1
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword
  [52] phi()
  [53] call print_char 
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword::@3 print_sword::@4
  [54] (signed word) print_sword::w#7 ← phi( print_sword::@4/(signed word) print_sword::w#0 print_sword::@3/(signed word) print_sword::w#10 )
  [55] (word) print_word::w#0 ← (word)(signed word) print_sword::w#7
  [56] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@2
  [57] return 
  to:@return
print_sword::@1: scope:[print_sword]  from print_sword
  [58] phi()
  [59] call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@1
  [60] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#10
  to:print_sword::@2
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3 print_sword::@1 print_sword::@3
  [61] (byte*) print_char_cursor#84 ← phi( print_byte/(byte*) print_char_cursor#139 print_byte::@1/(byte*) print_char_cursor#19 print_sbyte::@1/(byte*) print_char_cursor#135 print_sbyte::@3/(byte*) print_char_cursor#135 print_sword::@1/(byte*) print_char_cursor#132 print_sword::@3/(byte*) print_char_cursor#132 )
  [61] (byte) print_char::ch#6 ← phi( print_byte/(byte) print_char::ch#4 print_byte::@1/(byte) print_char::ch#5 print_sbyte::@1/(byte) '-' print_sbyte::@3/(byte) ' ' print_sword::@1/(byte) '-' print_sword::@3/(byte) ' ' )
  [62] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#6
  [63] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#84
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [64] return 
  to:@return
print_word: scope:[print_word]  from print_sword::@2 test_16u::@2 test_16u::@4 test_16u::@6 test_16u::@8
  [65] (byte*) print_char_cursor#138 ← phi( print_sword::@2/(byte*) print_char_cursor#19 test_16u::@2/(byte*~) print_char_cursor#173 test_16u::@4/(byte*) print_char_cursor#130 test_16u::@6/(byte*) print_char_cursor#130 test_16u::@8/(byte*) print_char_cursor#130 )
  [65] (word) print_word::w#5 ← phi( print_sword::@2/(word) print_word::w#0 test_16u::@2/(word) print_word::w#1 test_16u::@4/(word) print_word::w#2 test_16u::@6/(word) print_word::w#3 test_16u::@8/(word) print_word::w#4 )
  [66] (byte) print_byte::b#1 ← > (word) print_word::w#5
  [67] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [68] (byte) print_byte::b#2 ← < (word) print_word::w#5
  [69] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [70] return 
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@2 print_word print_word::@1 test_8u::@2 test_8u::@4 test_8u::@6 test_8u::@8
  [71] (byte*) print_char_cursor#139 ← phi( print_sbyte::@2/(byte*) print_char_cursor#19 print_word/(byte*) print_char_cursor#138 print_word::@1/(byte*) print_char_cursor#19 test_8u::@2/(byte*) print_char_cursor#141 test_8u::@4/(byte*) print_char_cursor#130 test_8u::@6/(byte*) print_char_cursor#130 test_8u::@8/(byte*) print_char_cursor#130 )
  [71] (byte) print_byte::b#7 ← phi( print_sbyte::@2/(byte) print_byte::b#0 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 test_8u::@2/(byte) print_byte::b#3 test_8u::@4/(byte) print_byte::b#4 test_8u::@6/(byte) print_byte::b#5 test_8u::@8/(byte) print_byte::b#6 )
  [72] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte) 4
  [73] (byte) print_char::ch#4 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [74] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [75] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte) $f
  [76] (byte) print_char::ch#5 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [77] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [78] return 
  to:@return
print_str: scope:[print_str]  from test_16s::@3 test_16s::@5 test_16s::@7 test_16u::@3 test_16u::@5 test_16u::@7 test_8s::@3 test_8s::@5 test_8s::@7 test_8u::@3 test_8u::@5 test_8u::@7
  [79] (byte*) print_str::str#15 ← phi( test_16s::@3/(const string) str test_16s::@5/(const string) str1 test_16s::@7/(const string) str2 test_16u::@3/(const string) str test_16u::@5/(const string) str1 test_16u::@7/(const string) str2 test_8s::@3/(const string) str test_8s::@5/(const string) str1 test_8s::@7/(const string) str2 test_8u::@3/(const string) str test_8u::@5/(const string) str1 test_8u::@7/(const string) str2 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [80] (byte*) print_char_cursor#130 ← phi( print_str/(byte*) print_char_cursor#19 print_str::@2/(byte*) print_char_cursor#1 )
  [80] (byte*) print_str::str#13 ← phi( print_str/(byte*) print_str::str#15 print_str::@2/(byte*) print_str::str#0 )
  [81] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [82] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [83] *((byte*) print_char_cursor#130) ← *((byte*) print_str::str#13)
  [84] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#130
  [85] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13
  to:print_str::@1
div16s: scope:[div16s]  from test_16s::@1
  [86] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0
  [87] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0
  [88] call divr16s 
  [89] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
  to:div16s::@1
div16s::@1: scope:[div16s]  from div16s
  [90] (signed word) div16s::return#0 ← (signed word) divr16s::return#3
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@1
  [91] return 
  to:@return
divr16s: scope:[divr16s]  from div16s
  [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1
  to:divr16s::@6
divr16s::@6: scope:[divr16s]  from divr16s
  [93] (word~) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@6
  [94] (word) divr16s::dividendu#3 ← phi( divr16s::@1/(word~) divr16s::dividendu#7 divr16s::@6/(word~) divr16s::dividendu#8 )
  [94] (byte) divr16s::neg#3 ← phi( divr16s::@1/(byte) 1 divr16s::@6/(byte) 0 )
  [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3
  to:divr16s::@7
divr16s::@7: scope:[divr16s]  from divr16s::@2
  [96] (word~) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@7
  [97] (byte) divr16s::neg#4 ← phi( divr16s::@3/(byte) divr16s::neg#2 divr16s::@7/(byte) divr16s::neg#3 )
  [97] (word) divr16s::divisoru#3 ← phi( divr16s::@3/(word~) divr16s::divisoru#4 divr16s::@7/(word~) divr16s::divisoru#5 )
  [98] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3
  [99] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3
  [100] call divr16u 
  [101] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:divr16s::@9
divr16s::@9: scope:[divr16s]  from divr16s::@4
  [102] (word) divr16s::resultu#0 ← (word) divr16u::return#3
  [103] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5
  to:divr16s::@8
divr16s::@8: scope:[divr16s]  from divr16s::@9
  [104] (signed word~) divr16s::$16 ← (signed word)(word) rem16u#1
  [105] (signed word) rem16s#2 ← - (signed word~) divr16s::$16
  [106] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@5 divr16s::@8
  [107] (signed word) rem16s#11 ← phi( divr16s::@8/(signed word) rem16s#2 divr16s::@5/(signed word~) rem16s#37 )
  [107] (signed word) divr16s::return#2 ← phi( divr16s::@8/(signed word) divr16s::return#1 divr16s::@5/(signed word~) divr16s::return#7 )
  [108] return 
  to:@return
divr16s::@5: scope:[divr16s]  from divr16s::@9
  [109] (signed word~) divr16s::return#7 ← (signed word)(word) divr16s::resultu#0
  [110] (signed word~) rem16s#37 ← (signed word)(word) rem16u#1
  to:divr16s::@return
divr16s::@3: scope:[divr16s]  from divr16s::@2
  [111] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0
  [112] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1
  [113] (word~) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
  to:divr16s::@4
divr16s::@1: scope:[divr16s]  from divr16s
  [114] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0
  [115] (word~) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
  to:divr16s::@2
divr16u: scope:[divr16u]  from div16u divr16s::@4
  [116] (word) divr16u::divisor#6 ← phi( div16u/(word) divr16u::divisor#0 divr16s::@4/(word) divr16u::divisor#1 )
  [116] (word) divr16u::dividend#5 ← phi( div16u/(word) divr16u::dividend#1 divr16s::@4/(word) divr16u::dividend#2 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [117] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [117] (word) divr16u::quotient#3 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::return#0 )
  [117] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [117] (word) divr16u::rem#5 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::rem#11 )
  [118] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [119] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [120] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [121] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [122] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [123] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [124] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [125] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [126] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [127] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [128] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [129] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [129] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [130] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [131] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [132] (word) rem16u#1 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [133] return 
  to:@return
test_8s: scope:[test_8s]  from main::@3
  [134] phi()
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@10
  [135] (byte) test_8s::i#10 ← phi( test_8s/(byte) 0 test_8s::@10/(byte) test_8s::i#1 )
  [136] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10)
  [137] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10)
  [138] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0
  [139] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0
  [140] call div8s 
  [141] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
  to:test_8s::@2
test_8s::@2: scope:[test_8s]  from test_8s::@1
  [142] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3
  [143] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0
  [144] (byte*~) print_char_cursor#168 ← (byte*) print_line_cursor#1
  [145] call print_sbyte 
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@2
  [146] phi()
  [147] call print_str 
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  [148] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0
  [149] call print_sbyte 
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  [150] phi()
  [151] call print_str 
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  [152] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0
  [153] call print_sbyte 
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  [154] phi()
  [155] call print_str 
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  [156] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3
  [157] call print_sbyte 
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  [158] phi()
  [159] call print_ln 
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  [160] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10
  [161] if((byte) test_8s::i#1!=(byte) 6) goto test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@10
  [162] return 
  to:@return
print_sbyte: scope:[print_sbyte]  from test_8s::@2 test_8s::@4 test_8s::@6 test_8s::@8
  [163] (byte*) print_char_cursor#135 ← phi( test_8s::@2/(byte*~) print_char_cursor#168 test_8s::@4/(byte*) print_char_cursor#130 test_8s::@6/(byte*) print_char_cursor#130 test_8s::@8/(byte*) print_char_cursor#130 )
  [163] (signed byte) print_sbyte::b#10 ← phi( test_8s::@2/(signed byte) print_sbyte::b#1 test_8s::@4/(signed byte) print_sbyte::b#2 test_8s::@6/(signed byte) print_sbyte::b#3 test_8s::@8/(signed byte) print_sbyte::b#4 )
  [164] if((signed byte) print_sbyte::b#10<(signed byte) 0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  [165] phi()
  [166] call print_char 
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@3 print_sbyte::@4
  [167] (signed byte) print_sbyte::b#7 ← phi( print_sbyte::@4/(signed byte) print_sbyte::b#0 print_sbyte::@3/(signed byte) print_sbyte::b#10 )
  [168] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#7
  [169] call print_byte 
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@2
  [170] return 
  to:@return
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  [171] phi()
  [172] call print_char 
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@1
  [173] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#10
  to:print_sbyte::@2
div8s: scope:[div8s]  from test_8s::@1
  [174] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1
  to:div8s::@6
div8s::@6: scope:[div8s]  from div8s
  [175] (byte~) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@6
  [176] (byte) div8s::dividendu#3 ← phi( div8s::@1/(byte~) div8s::dividendu#7 div8s::@6/(byte~) div8s::dividendu#8 )
  [176] (byte) div8s::neg#3 ← phi( div8s::@1/(byte) 1 div8s::@6/(byte) 0 )
  [177] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3
  to:div8s::@7
div8s::@7: scope:[div8s]  from div8s::@2
  [178] (byte~) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@7
  [179] (byte) div8s::neg#4 ← phi( div8s::@3/(byte) div8s::neg#2 div8s::@7/(byte) div8s::neg#3 )
  [179] (byte) div8s::divisoru#3 ← phi( div8s::@3/(byte~) div8s::divisoru#4 div8s::@7/(byte~) div8s::divisoru#5 )
  [180] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3
  [181] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
  [182] call div8u 
  [183] (byte) div8u::return#2 ← (byte) div8u::return#0
  to:div8s::@9
div8s::@9: scope:[div8s]  from div8s::@4
  [184] (byte) div8s::resultu#0 ← (byte) div8u::return#2
  [185] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5
  to:div8s::@8
div8s::@8: scope:[div8s]  from div8s::@9
  [186] (signed byte~) div8s::$11 ← (signed byte)(byte) rem8u#17
  [187] (signed byte) rem8s#2 ← - (signed byte~) div8s::$11
  [188] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@5 div8s::@8
  [189] (signed byte) rem8s#3 ← phi( div8s::@8/(signed byte) rem8s#2 div8s::@5/(signed byte~) rem8s#33 )
  [189] (signed byte) div8s::return#2 ← phi( div8s::@8/(signed byte) div8s::return#1 div8s::@5/(signed byte~) div8s::return#7 )
  [190] return 
  to:@return
div8s::@5: scope:[div8s]  from div8s::@9
  [191] (signed byte~) div8s::return#7 ← (signed byte)(byte) div8s::resultu#0
  [192] (signed byte~) rem8s#33 ← (signed byte)(byte) rem8u#17
  to:div8s::@return
div8s::@3: scope:[div8s]  from div8s::@2
  [193] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0
  [194] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1
  [195] (byte~) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisoru#1
  to:div8s::@4
div8s::@1: scope:[div8s]  from div8s
  [196] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0
  [197] (byte~) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividendu#1
  to:div8s::@2
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  [198] (byte) div8u::divisor#2 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 )
  [198] (byte) div8u::dividend#2 ← phi( div8s::@4/(byte) div8u::dividend#0 test_8u::@1/(byte) div8u::dividend#1 )
  [199] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2
  [200] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2
  [201] call divr8u 
  [202] (byte) divr8u::return#0 ← (byte) divr8u::return#1
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u
  [203] (byte) div8u::return#0 ← (byte) divr8u::return#0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@1
  [204] return 
  to:@return
divr8u: scope:[divr8u]  from div8u
  [205] phi()
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  [206] (byte) divr8u::i#2 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::i#1 )
  [206] (byte) divr8u::quotient#3 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::return#1 )
  [206] (byte) divr8u::dividend#2 ← phi( divr8u/(byte) divr8u::dividend#0 divr8u::@3/(byte) divr8u::dividend#1 )
  [206] (byte) divr8u::rem#4 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::rem#10 )
  [207] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte) 1
  [208] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80
  [209] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2
  to:divr8u::@4
divr8u::@4: scope:[divr8u]  from divr8u::@1
  [210] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1
  to:divr8u::@2
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  [211] (byte) divr8u::rem#5 ← phi( divr8u::@1/(byte) divr8u::rem#1 divr8u::@4/(byte) divr8u::rem#2 )
  [212] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte) 1
  [213] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1
  [214] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3
  to:divr8u::@5
divr8u::@5: scope:[divr8u]  from divr8u::@2
  [215] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1
  [216] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0
  to:divr8u::@3
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  [217] (byte) divr8u::return#1 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 )
  [217] (byte) divr8u::rem#10 ← phi( divr8u::@2/(byte) divr8u::rem#5 divr8u::@5/(byte) divr8u::rem#3 )
  [218] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2
  [219] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1
  to:divr8u::@6
divr8u::@6: scope:[divr8u]  from divr8u::@3
  [220] (byte) rem8u#17 ← (byte) divr8u::rem#10
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  [221] return 
  to:@return
test_16u: scope:[test_16u]  from main::@2
  [222] phi()
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@10
  [223] (byte) test_16u::i#10 ← phi( test_16u/(byte) 0 test_16u::@10/(byte) test_16u::i#1 )
  [224] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1
  [225] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte~) test_16u::$11)
  [226] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte~) test_16u::$11)
  [227] (word) div16u::dividend#0 ← (word) test_16u::dividend#0
  [228] (word) div16u::divisor#0 ← (word) test_16u::divisor#0
  [229] call div16u 
  [230] (word) div16u::return#2 ← (word) div16u::return#0
  to:test_16u::@2
test_16u::@2: scope:[test_16u]  from test_16u::@1
  [231] (word) test_16u::res#0 ← (word) div16u::return#2
  [232] (word) print_word::w#1 ← (word) test_16u::dividend#0
  [233] (byte*~) print_char_cursor#173 ← (byte*) print_line_cursor#1
  [234] call print_word 
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@2
  [235] phi()
  [236] call print_str 
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  [237] (word) print_word::w#2 ← (word) test_16u::divisor#0
  [238] call print_word 
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  [239] phi()
  [240] call print_str 
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  [241] (word) print_word::w#3 ← (word) test_16u::res#0
  [242] call print_word 
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  [243] phi()
  [244] call print_str 
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  [245] (word) print_word::w#4 ← (word) rem16u#1
  [246] call print_word 
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  [247] phi()
  [248] call print_ln 
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  [249] (byte) test_16u::i#1 ← ++ (byte) test_16u::i#10
  [250] if((byte) test_16u::i#1!=(byte) 6) goto test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@10
  [251] return 
  to:@return
div16u: scope:[div16u]  from test_16u::@1
  [252] (word) divr16u::dividend#1 ← (word) div16u::dividend#0
  [253] (word) divr16u::divisor#0 ← (word) div16u::divisor#0
  [254] call divr16u 
  [255] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [256] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [257] return 
  to:@return
test_8u: scope:[test_8u]  from main::@1
  [258] phi()
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@11
  [259] (byte*) print_line_cursor#41 ← phi( test_8u/(byte*) 1024 test_8u::@11/(byte*) print_line_cursor#1 )
  [259] (byte*) print_char_cursor#141 ← phi( test_8u/(byte*) 1024 test_8u::@11/(byte*~) print_char_cursor#190 )
  [259] (byte) test_8u::i#10 ← phi( test_8u/(byte) 0 test_8u::@11/(byte) test_8u::i#1 )
  [260] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10)
  [261] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10)
  [262] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0
  [263] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0
  [264] call div8u 
  [265] (byte) div8u::return#3 ← (byte) div8u::return#0
  to:test_8u::@2
test_8u::@2: scope:[test_8u]  from test_8u::@1
  [266] (byte) test_8u::res#0 ← (byte) div8u::return#3
  [267] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0
  [268] call print_byte 
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@2
  [269] phi()
  [270] call print_str 
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  [271] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0
  [272] call print_byte 
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  [273] phi()
  [274] call print_str 
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  [275] (byte) print_byte::b#5 ← (byte) test_8u::res#0
  [276] call print_byte 
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  [277] phi()
  [278] call print_str 
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  [279] (byte) print_byte::b#6 ← (byte) rem8u#17
  [280] call print_byte 
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  [281] phi()
  [282] call print_ln 
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  [283] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10
  [284] if((byte) test_8u::i#1!=(byte) 6) goto test_8u::@11
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@10
  [285] return 
  to:@return
test_8u::@11: scope:[test_8u]  from test_8u::@10
  [286] (byte*~) print_char_cursor#190 ← (byte*) print_line_cursor#1
  to:test_8u::@1
print_cls: scope:[print_cls]  from main
  [287] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [288] (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) 1024 print_cls::@1/(byte*) print_cls::sc#1 )
  [289] *((byte*) print_cls::sc#2) ← (byte) ' '
  [290] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [291] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [292] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word) div16s::dividend
(signed word) div16s::dividend#0 6.5
(signed word) div16s::divisor
(signed word) div16s::divisor#0 6.5
(signed word) div16s::return
(signed word) div16s::return#0 4.333333333333333
(signed word) div16s::return#2 22.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word) div16u::dividend
(word) div16u::dividend#0 6.5
(word) div16u::divisor
(word) div16u::divisor#0 6.5
(word) div16u::return
(word) div16u::return#0 4.333333333333333
(word) div16u::return#2 22.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$11 4.0
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 5.0
(byte) div8s::dividendu
(signed byte) div8s::dividendu#1 2.0
(byte) div8s::dividendu#3 0.8571428571428571
(byte~) div8s::dividendu#7 4.0
(byte~) div8s::dividendu#8 4.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 2.142857142857143
(byte) div8s::divisoru
(signed byte) div8s::divisoru#1 1.0
(byte) div8s::divisoru#3 3.0
(byte~) div8s::divisoru#4 4.0
(byte~) div8s::divisoru#5 4.0
(byte) div8s::neg
(byte) div8s::neg#2 2.0
(byte) div8s::neg#3 1.0
(byte) div8s::neg#4 1.0
(byte) div8s::resultu
(byte) div8s::resultu#0 0.5
(signed byte) div8s::return
(signed byte) div8s::return#1 4.0
(signed byte) div8s::return#2 5.0
(signed byte) div8s::return#3 22.0
(signed byte~) div8s::return#7 2.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte) div8u::dividend
(byte) div8u::dividend#0 2.0
(byte) div8u::dividend#1 11.0
(byte) div8u::dividend#2 15.0
(byte) div8u::divisor
(byte) div8u::divisor#0 4.0
(byte) div8u::divisor#1 22.0
(byte) div8u::divisor#2 7.5
(byte) div8u::return
(byte) div8u::return#0 3.75
(byte) div8u::return#2 4.0
(byte) div8u::return#3 22.0
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(signed word~) divr16s::$16 4.0
(signed word) divr16s::dividend
(signed word) divr16s::dividend#0 2.0
(word) divr16s::dividendu
(signed word) divr16s::dividendu#1 2.0
(word) divr16s::dividendu#3 0.8571428571428571
(word~) divr16s::dividendu#7 4.0
(word~) divr16s::dividendu#8 4.0
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0 0.8571428571428571
(word) divr16s::divisoru
(signed word) divr16s::divisoru#1 1.0
(word) divr16s::divisoru#3 3.0
(word~) divr16s::divisoru#4 4.0
(word~) divr16s::divisoru#5 4.0
(byte) divr16s::neg
(byte) divr16s::neg#2 2.0
(byte) divr16s::neg#3 1.0
(byte) divr16s::neg#4 1.0
(signed word) divr16s::rem
(word) divr16s::remu
(word) divr16s::resultu
(word) divr16s::resultu#0 0.5
(signed word) divr16s::return
(signed word) divr16s::return#1 4.0
(signed word) divr16s::return#2 2.0
(signed word) divr16s::return#3 4.0
(signed word~) divr16s::return#7 2.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 202.0
(byte~) divr16u::$2 202.0
(word) divr16u::dividend
(word) divr16u::dividend#0 25.25
(word) divr16u::dividend#1 2.0
(word) divr16u::dividend#2 2.0
(word) divr16u::dividend#3 43.57142857142858
(word) divr16u::dividend#5 6.0
(word) divr16u::divisor
(word) divr16u::divisor#0 4.0
(word) divr16u::divisor#1 4.0
(word) divr16u::divisor#6 12.875
(byte) divr16u::i
(byte) divr16u::i#1 151.5
(byte) divr16u::i#2 15.538461538461538
(word) divr16u::quotient
(word) divr16u::quotient#1 151.5
(word) divr16u::quotient#2 101.0
(word) divr16u::quotient#3 25.25
(word) divr16u::rem
(word) divr16u::rem#0 75.75
(word) divr16u::rem#1 202.0
(word) divr16u::rem#11 101.66666666666667
(word) divr16u::rem#2 202.0
(word) divr16u::rem#5 202.0
(word) divr16u::rem#6 101.0
(word) divr16u::return
(word) divr16u::return#0 43.85714285714286
(word) divr16u::return#2 4.0
(word) divr16u::return#3 4.0
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 202.0
(byte) divr8u::dividend
(byte) divr8u::dividend#0 1.3333333333333333
(byte) divr8u::dividend#1 25.25
(byte) divr8u::dividend#2 50.83333333333333
(byte) divr8u::divisor
(byte) divr8u::divisor#0 12.75
(byte) divr8u::i
(byte) divr8u::i#1 151.5
(byte) divr8u::i#2 16.833333333333332
(byte) divr8u::quotient
(byte) divr8u::quotient#1 151.5
(byte) divr8u::quotient#2 101.0
(byte) divr8u::quotient#3 28.857142857142858
(byte) divr8u::rem
(byte) divr8u::rem#1 101.0
(byte) divr8u::rem#10 101.66666666666667
(byte) divr8u::rem#2 202.0
(byte) divr8u::rem#3 202.0
(byte) divr8u::rem#4 202.0
(byte) divr8u::rem#5 101.0
(byte) divr8u::return
(byte) divr8u::return#0 4.0
(byte) divr8u::return#1 50.83333333333333
(void()) main()
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 4.0
(byte) print_byte::b#3 22.0
(byte) print_byte::b#4 22.0
(byte) print_byte::b#5 22.0
(byte) print_byte::b#6 22.0
(byte) print_byte::b#7 13.5
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#4 4.0
(byte) print_char::ch#5 4.0
(byte) print_char::ch#6 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 101.0
(byte*) print_char_cursor#130 15.607142857142856
(byte*) print_char_cursor#132 12.0
(byte*) print_char_cursor#135 12.0
(byte*) print_char_cursor#138 24.0
(byte*) print_char_cursor#139 17.333333333333332
(byte*) print_char_cursor#141 2.4444444444444446
(byte*~) print_char_cursor#164 22.0
(byte*~) print_char_cursor#168 22.0
(byte*~) print_char_cursor#173 22.0
(byte*) print_char_cursor#19 1.8225806451612903
(byte*~) print_char_cursor#190 22.0
(byte*) print_char_cursor#84 8.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 3.833333333333334
(byte*) print_line_cursor#20 204.0
(byte*) print_line_cursor#39 46.0
(byte*) print_line_cursor#41 0.9565217391304348
(void()) print_ln()
(void()) print_sbyte((signed byte) print_sbyte::b)
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 4.0
(signed byte) print_sbyte::b#1 11.0
(signed byte) print_sbyte::b#10 8.333333333333332
(signed byte) print_sbyte::b#2 22.0
(signed byte) print_sbyte::b#3 22.0
(signed byte) print_sbyte::b#4 22.0
(signed byte) print_sbyte::b#7 4.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#13 101.5
(byte*) print_str::str#15 2.0
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 11.0
(signed word) print_sword::w#10 8.333333333333332
(signed word) print_sword::w#2 22.0
(signed word) print_sword::w#3 22.0
(signed word) print_sword::w#4 22.0
(signed word) print_sword::w#7 4.0
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#0 4.0
(word) print_word::w#1 11.0
(word) print_word::w#2 22.0
(word) print_word::w#3 22.0
(word) print_word::w#4 22.0
(word) print_word::w#5 16.666666666666664
(signed word) rem16s
(signed word) rem16s#11 0.6818181818181819
(signed word) rem16s#2 2.0
(signed word~) rem16s#37 4.0
(word) rem16u
(word) rem16u#1 0.48148148148148145
(signed byte) rem8s
(signed byte) rem8s#2 2.0
(signed byte) rem8s#3 0.8333333333333335
(signed byte~) rem8s#33 4.0
(byte) rem8u
(byte) rem8u#17 0.5
(void()) test_16s()
(byte~) test_16s::$11 16.5
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0 4.714285714285714
(signed word[]) test_16s::dividends
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0 3.0
(signed word[]) test_16s::divisors
(byte) test_16s::i
(byte) test_16s::i#1 16.5
(byte) test_16s::i#10 1.2692307692307692
(signed word) test_16s::res
(signed word) test_16s::res#0 2.2
(void()) test_16u()
(byte~) test_16u::$11 16.5
(word) test_16u::dividend
(word) test_16u::dividend#0 4.714285714285714
(word[]) test_16u::dividends
(word) test_16u::divisor
(word) test_16u::divisor#0 3.0
(word[]) test_16u::divisors
(byte) test_16u::i
(byte) test_16u::i#1 16.5
(byte) test_16u::i#10 1.2692307692307692
(word) test_16u::res
(word) test_16u::res#0 2.2
(void()) test_8s()
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 4.714285714285714
(signed byte[]) test_8s::dividends
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 3.0
(signed byte[]) test_8s::divisors
(byte) test_8s::i
(byte) test_8s::i#1 16.5
(byte) test_8s::i#10 1.76
(signed byte) test_8s::res
(signed byte) test_8s::res#0 2.2
(void()) test_8u()
(byte) test_8u::dividend
(byte) test_8u::dividend#0 4.714285714285714
(byte[]) test_8u::dividends
(byte) test_8u::divisor
(byte) test_8u::divisor#0 3.3000000000000003
(byte[]) test_8u::divisors
(byte) test_8u::i
(byte) test_8u::i#1 11.0
(byte) test_8u::i#10 1.8333333333333333
(byte) test_8u::res
(byte) test_8u::res#0 2.4444444444444446

Initial phi equivalence classes
[ test_16s::i#10 test_16s::i#1 ]
[ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ]
[ print_sword::w#7 print_sword::w#0 print_sword::w#10 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 ]
[ print_char::ch#6 print_char::ch#4 print_char::ch#5 ]
[ print_word::w#5 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ]
[ print_char_cursor#138 print_char_cursor#84 print_char_cursor#139 print_char_cursor#19 print_char_cursor#135 print_char_cursor#132 print_char_cursor#164 print_char_cursor#130 print_char_cursor#173 print_char_cursor#141 print_char_cursor#1 print_char_cursor#168 print_char_cursor#190 ]
[ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
[ print_str::str#13 print_str::str#15 print_str::str#0 ]
[ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
[ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
[ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
[ divr16s::return#2 divr16s::return#1 divr16s::return#7 ]
[ rem16s#11 rem16s#2 rem16s#37 ]
[ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ]
[ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ test_8s::i#10 test_8s::i#1 ]
[ print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ]
[ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
[ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
[ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
[ div8s::return#2 div8s::return#1 div8s::return#7 ]
[ rem8s#3 rem8s#2 rem8s#33 ]
[ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
[ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
[ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
[ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
[ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
[ divr8u::i#2 divr8u::i#1 ]
[ test_16u::i#10 test_16u::i#1 ]
[ test_8u::i#10 test_8u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable test_16s::$11 to zero page equivalence class [ test_16s::$11 ]
Added variable test_16s::dividend#0 to zero page equivalence class [ test_16s::dividend#0 ]
Added variable test_16s::divisor#0 to zero page equivalence class [ test_16s::divisor#0 ]
Added variable div16s::dividend#0 to zero page equivalence class [ div16s::dividend#0 ]
Added variable div16s::divisor#0 to zero page equivalence class [ div16s::divisor#0 ]
Added variable div16s::return#2 to zero page equivalence class [ div16s::return#2 ]
Added variable test_16s::res#0 to zero page equivalence class [ test_16s::res#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable divr16s::dividend#0 to zero page equivalence class [ divr16s::dividend#0 ]
Added variable divr16s::divisor#0 to zero page equivalence class [ divr16s::divisor#0 ]
Added variable divr16s::return#3 to zero page equivalence class [ divr16s::return#3 ]
Added variable div16s::return#0 to zero page equivalence class [ div16s::return#0 ]
Added variable divr16u::return#3 to zero page equivalence class [ divr16u::return#3 ]
Added variable divr16s::resultu#0 to zero page equivalence class [ divr16s::resultu#0 ]
Added variable divr16s::$16 to zero page equivalence class [ divr16s::$16 ]
Added variable divr16s::divisoru#1 to zero page equivalence class [ divr16s::divisoru#1 ]
Added variable divr16s::dividendu#1 to zero page equivalence class [ divr16s::dividendu#1 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Added variable rem16u#1 to zero page equivalence class [ rem16u#1 ]
Added variable test_8s::dividend#0 to zero page equivalence class [ test_8s::dividend#0 ]
Added variable test_8s::divisor#0 to zero page equivalence class [ test_8s::divisor#0 ]
Added variable div8s::dividend#0 to zero page equivalence class [ div8s::dividend#0 ]
Added variable div8s::divisor#0 to zero page equivalence class [ div8s::divisor#0 ]
Added variable div8s::return#3 to zero page equivalence class [ div8s::return#3 ]
Added variable test_8s::res#0 to zero page equivalence class [ test_8s::res#0 ]
Added variable div8u::return#2 to zero page equivalence class [ div8u::return#2 ]
Added variable div8s::resultu#0 to zero page equivalence class [ div8s::resultu#0 ]
Added variable div8s::$11 to zero page equivalence class [ div8s::$11 ]
Added variable div8s::divisoru#1 to zero page equivalence class [ div8s::divisoru#1 ]
Added variable div8s::dividendu#1 to zero page equivalence class [ div8s::dividendu#1 ]
Added variable divr8u::divisor#0 to zero page equivalence class [ divr8u::divisor#0 ]
Added variable divr8u::return#0 to zero page equivalence class [ divr8u::return#0 ]
Added variable div8u::return#0 to zero page equivalence class [ div8u::return#0 ]
Added variable divr8u::$1 to zero page equivalence class [ divr8u::$1 ]
Added variable rem8u#17 to zero page equivalence class [ rem8u#17 ]
Added variable test_16u::$11 to zero page equivalence class [ test_16u::$11 ]
Added variable test_16u::dividend#0 to zero page equivalence class [ test_16u::dividend#0 ]
Added variable test_16u::divisor#0 to zero page equivalence class [ test_16u::divisor#0 ]
Added variable div16u::dividend#0 to zero page equivalence class [ div16u::dividend#0 ]
Added variable div16u::divisor#0 to zero page equivalence class [ div16u::divisor#0 ]
Added variable div16u::return#2 to zero page equivalence class [ div16u::return#2 ]
Added variable test_16u::res#0 to zero page equivalence class [ test_16u::res#0 ]
Added variable divr16u::return#2 to zero page equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to zero page equivalence class [ div16u::return#0 ]
Added variable test_8u::dividend#0 to zero page equivalence class [ test_8u::dividend#0 ]
Added variable test_8u::divisor#0 to zero page equivalence class [ test_8u::divisor#0 ]
Added variable div8u::return#3 to zero page equivalence class [ div8u::return#3 ]
Added variable test_8u::res#0 to zero page equivalence class [ test_8u::res#0 ]
Complete equivalence classes
[ test_16s::i#10 test_16s::i#1 ]
[ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ]
[ print_sword::w#7 print_sword::w#0 print_sword::w#10 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 ]
[ print_char::ch#6 print_char::ch#4 print_char::ch#5 ]
[ print_word::w#5 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ]
[ print_char_cursor#138 print_char_cursor#84 print_char_cursor#139 print_char_cursor#19 print_char_cursor#135 print_char_cursor#132 print_char_cursor#164 print_char_cursor#130 print_char_cursor#173 print_char_cursor#141 print_char_cursor#1 print_char_cursor#168 print_char_cursor#190 ]
[ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
[ print_str::str#13 print_str::str#15 print_str::str#0 ]
[ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
[ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
[ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
[ divr16s::return#2 divr16s::return#1 divr16s::return#7 ]
[ rem16s#11 rem16s#2 rem16s#37 ]
[ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ]
[ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ test_8s::i#10 test_8s::i#1 ]
[ print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ]
[ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
[ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
[ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
[ div8s::return#2 div8s::return#1 div8s::return#7 ]
[ rem8s#3 rem8s#2 rem8s#33 ]
[ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
[ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
[ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
[ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
[ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
[ divr8u::i#2 divr8u::i#1 ]
[ test_16u::i#10 test_16u::i#1 ]
[ test_8u::i#10 test_8u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ test_16s::$11 ]
[ test_16s::dividend#0 ]
[ test_16s::divisor#0 ]
[ div16s::dividend#0 ]
[ div16s::divisor#0 ]
[ div16s::return#2 ]
[ test_16s::res#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ divr16s::dividend#0 ]
[ divr16s::divisor#0 ]
[ divr16s::return#3 ]
[ div16s::return#0 ]
[ divr16u::return#3 ]
[ divr16s::resultu#0 ]
[ divr16s::$16 ]
[ divr16s::divisoru#1 ]
[ divr16s::dividendu#1 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#1 ]
[ test_8s::dividend#0 ]
[ test_8s::divisor#0 ]
[ div8s::dividend#0 ]
[ div8s::divisor#0 ]
[ div8s::return#3 ]
[ test_8s::res#0 ]
[ div8u::return#2 ]
[ div8s::resultu#0 ]
[ div8s::$11 ]
[ div8s::divisoru#1 ]
[ div8s::dividendu#1 ]
[ divr8u::divisor#0 ]
[ divr8u::return#0 ]
[ div8u::return#0 ]
[ divr8u::$1 ]
[ rem8u#17 ]
[ test_16u::$11 ]
[ test_16u::dividend#0 ]
[ test_16u::divisor#0 ]
[ div16u::dividend#0 ]
[ div16u::divisor#0 ]
[ div16u::return#2 ]
[ test_16u::res#0 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
[ test_8u::dividend#0 ]
[ test_8u::divisor#0 ]
[ div8u::return#3 ]
[ test_8u::res#0 ]
Allocated zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Allocated zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ]
Allocated zp ZP_WORD:5 [ print_sword::w#7 print_sword::w#0 print_sword::w#10 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 ]
Allocated zp ZP_BYTE:7 [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ]
Allocated zp ZP_WORD:8 [ print_word::w#5 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ]
Allocated zp ZP_WORD:10 [ print_char_cursor#138 print_char_cursor#84 print_char_cursor#139 print_char_cursor#19 print_char_cursor#135 print_char_cursor#132 print_char_cursor#164 print_char_cursor#130 print_char_cursor#173 print_char_cursor#141 print_char_cursor#1 print_char_cursor#168 print_char_cursor#190 ]
Allocated zp ZP_BYTE:12 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Allocated zp ZP_WORD:13 [ print_str::str#13 print_str::str#15 print_str::str#0 ]
Allocated zp ZP_WORD:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
Allocated zp ZP_WORD:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
Allocated zp ZP_BYTE:19 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
Allocated zp ZP_WORD:20 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 ]
Allocated zp ZP_WORD:22 [ rem16s#11 rem16s#2 rem16s#37 ]
Allocated zp ZP_WORD:24 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ]
Allocated zp ZP_WORD:26 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp ZP_WORD:28 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ]
Allocated zp ZP_WORD:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp ZP_BYTE:32 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp ZP_BYTE:33 [ test_8s::i#10 test_8s::i#1 ]
Allocated zp ZP_BYTE:34 [ print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ]
Allocated zp ZP_BYTE:35 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
Allocated zp ZP_BYTE:36 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
Allocated zp ZP_BYTE:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
Allocated zp ZP_BYTE:38 [ div8s::return#2 div8s::return#1 div8s::return#7 ]
Allocated zp ZP_BYTE:39 [ rem8s#3 rem8s#2 rem8s#33 ]
Allocated zp ZP_BYTE:40 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
Allocated zp ZP_BYTE:41 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
Allocated zp ZP_BYTE:42 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
Allocated zp ZP_BYTE:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Allocated zp ZP_BYTE:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Allocated zp ZP_BYTE:45 [ divr8u::i#2 divr8u::i#1 ]
Allocated zp ZP_BYTE:46 [ test_16u::i#10 test_16u::i#1 ]
Allocated zp ZP_BYTE:47 [ test_8u::i#10 test_8u::i#1 ]
Allocated zp ZP_WORD:48 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:50 [ test_16s::$11 ]
Allocated zp ZP_WORD:51 [ test_16s::dividend#0 ]
Allocated zp ZP_WORD:53 [ test_16s::divisor#0 ]
Allocated zp ZP_WORD:55 [ div16s::dividend#0 ]
Allocated zp ZP_WORD:57 [ div16s::divisor#0 ]
Allocated zp ZP_WORD:59 [ div16s::return#2 ]
Allocated zp ZP_WORD:61 [ test_16s::res#0 ]
Allocated zp ZP_BYTE:63 [ print_byte::$0 ]
Allocated zp ZP_BYTE:64 [ print_byte::$2 ]
Allocated zp ZP_WORD:65 [ divr16s::dividend#0 ]
Allocated zp ZP_WORD:67 [ divr16s::divisor#0 ]
Allocated zp ZP_WORD:69 [ divr16s::return#3 ]
Allocated zp ZP_WORD:71 [ div16s::return#0 ]
Allocated zp ZP_WORD:73 [ divr16u::return#3 ]
Allocated zp ZP_WORD:75 [ divr16s::resultu#0 ]
Allocated zp ZP_WORD:77 [ divr16s::$16 ]
Allocated zp ZP_WORD:79 [ divr16s::divisoru#1 ]
Allocated zp ZP_WORD:81 [ divr16s::dividendu#1 ]
Allocated zp ZP_BYTE:83 [ divr16u::$1 ]
Allocated zp ZP_BYTE:84 [ divr16u::$2 ]
Allocated zp ZP_WORD:85 [ rem16u#1 ]
Allocated zp ZP_BYTE:87 [ test_8s::dividend#0 ]
Allocated zp ZP_BYTE:88 [ test_8s::divisor#0 ]
Allocated zp ZP_BYTE:89 [ div8s::dividend#0 ]
Allocated zp ZP_BYTE:90 [ div8s::divisor#0 ]
Allocated zp ZP_BYTE:91 [ div8s::return#3 ]
Allocated zp ZP_BYTE:92 [ test_8s::res#0 ]
Allocated zp ZP_BYTE:93 [ div8u::return#2 ]
Allocated zp ZP_BYTE:94 [ div8s::resultu#0 ]
Allocated zp ZP_BYTE:95 [ div8s::$11 ]
Allocated zp ZP_BYTE:96 [ div8s::divisoru#1 ]
Allocated zp ZP_BYTE:97 [ div8s::dividendu#1 ]
Allocated zp ZP_BYTE:98 [ divr8u::divisor#0 ]
Allocated zp ZP_BYTE:99 [ divr8u::return#0 ]
Allocated zp ZP_BYTE:100 [ div8u::return#0 ]
Allocated zp ZP_BYTE:101 [ divr8u::$1 ]
Allocated zp ZP_BYTE:102 [ rem8u#17 ]
Allocated zp ZP_BYTE:103 [ test_16u::$11 ]
Allocated zp ZP_WORD:104 [ test_16u::dividend#0 ]
Allocated zp ZP_WORD:106 [ test_16u::divisor#0 ]
Allocated zp ZP_WORD:108 [ div16u::dividend#0 ]
Allocated zp ZP_WORD:110 [ div16u::divisor#0 ]
Allocated zp ZP_WORD:112 [ div16u::return#2 ]
Allocated zp ZP_WORD:114 [ test_16u::res#0 ]
Allocated zp ZP_WORD:116 [ divr16u::return#2 ]
Allocated zp ZP_WORD:118 [ div16u::return#0 ]
Allocated zp ZP_BYTE:120 [ test_8u::dividend#0 ]
Allocated zp ZP_BYTE:121 [ test_8u::divisor#0 ]
Allocated zp ZP_BYTE:122 [ div8u::return#3 ]
Allocated zp ZP_BYTE:123 [ test_8u::res#0 ]

INITIAL ASM
//SEG0 File Comments
// Test the binary division library
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_char_cursor = $a
  .label print_line_cursor = 3
  .label rem16u = $55
  .label rem8s = $27
  .label rem16s = $16
  .label rem8u = $66
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call print_cls 
  //SEG12 [287] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [7] call test_8u 
  //SEG16 [258] phi from main::@1 to test_8u [phi:main::@1->test_8u]
  test_8u_from_b1:
    jsr test_8u
  //SEG17 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [9] call test_16u 
  //SEG20 [222] phi from main::@2 to test_16u [phi:main::@2->test_16u]
  test_16u_from_b2:
    jsr test_16u
  //SEG21 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG22 main::@3
  b3:
  //SEG23 [11] call test_8s 
  //SEG24 [134] phi from main::@3 to test_8s [phi:main::@3->test_8s]
  test_8s_from_b3:
    jsr test_8s
  //SEG25 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG26 main::@4
  b4:
  //SEG27 [13] call test_16s 
  //SEG28 [15] phi from main::@4 to test_16s [phi:main::@4->test_16s]
  test_16s_from_b4:
    jsr test_16s
    jmp breturn
  //SEG29 main::@return
  breturn:
  //SEG30 [14] return 
    rts
}
//SEG31 test_16s
test_16s: {
    .label _11 = $32
    .label dividend = $33
    .label divisor = $35
    .label res = $3d
    .label i = 2
  //SEG32 [16] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
  b1_from_test_16s:
  //SEG33 [16] phi (byte) test_16s::i#10 = (byte) 0 [phi:test_16s->test_16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG34 [16] phi from test_16s::@10 to test_16s::@1 [phi:test_16s::@10->test_16s::@1]
  b1_from_b10:
  //SEG35 [16] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@10->test_16s::@1#0] -- register_copy 
    jmp b1
  //SEG36 test_16s::@1
  b1:
  //SEG37 [17] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _11
  //SEG38 [18] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy _11
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG39 [19] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy _11
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG40 [20] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 -- vwsz1=vwsz2 
    lda dividend
    sta div16s.dividend
    lda dividend+1
    sta div16s.dividend+1
  //SEG41 [21] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 -- vwsz1=vwsz2 
    lda divisor
    sta div16s.divisor
    lda divisor+1
    sta div16s.divisor+1
  //SEG42 [22] call div16s 
    jsr div16s
  //SEG43 [23] (signed word) div16s::return#2 ← (signed word) div16s::return#0 -- vwsz1=vwsz2 
    lda div16s.return
    sta div16s.return_2
    lda div16s.return+1
    sta div16s.return_2+1
    jmp b2
  //SEG44 test_16s::@2
  b2:
  //SEG45 [24] (signed word) test_16s::res#0 ← (signed word) div16s::return#2 -- vwsz1=vwsz2 
    lda div16s.return_2
    sta res
    lda div16s.return_2+1
    sta res+1
  //SEG46 [25] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 -- vwsz1=vwsz2 
    lda dividend
    sta print_sword.w
    lda dividend+1
    sta print_sword.w+1
  //SEG47 [26] (byte*~) print_char_cursor#164 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG48 [27] call print_sword 
  //SEG49 [50] phi from test_16s::@2 to print_sword [phi:test_16s::@2->print_sword]
  print_sword_from_b2:
  //SEG50 [50] phi (byte*) print_char_cursor#132 = (byte*~) print_char_cursor#164 [phi:test_16s::@2->print_sword#0] -- register_copy 
  //SEG51 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#1 [phi:test_16s::@2->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG52 [28] phi from test_16s::@2 to test_16s::@3 [phi:test_16s::@2->test_16s::@3]
  b3_from_b2:
    jmp b3
  //SEG53 test_16s::@3
  b3:
  //SEG54 [29] call print_str 
  //SEG55 [79] phi from test_16s::@3 to print_str [phi:test_16s::@3->print_str]
  print_str_from_b3:
  //SEG56 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_16s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b4
  //SEG57 test_16s::@4
  b4:
  //SEG58 [30] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 -- vwsz1=vwsz2 
    lda divisor
    sta print_sword.w
    lda divisor+1
    sta print_sword.w+1
  //SEG59 [31] call print_sword 
  //SEG60 [50] phi from test_16s::@4 to print_sword [phi:test_16s::@4->print_sword]
  print_sword_from_b4:
  //SEG61 [50] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:test_16s::@4->print_sword#0] -- register_copy 
  //SEG62 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#2 [phi:test_16s::@4->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG63 [32] phi from test_16s::@4 to test_16s::@5 [phi:test_16s::@4->test_16s::@5]
  b5_from_b4:
    jmp b5
  //SEG64 test_16s::@5
  b5:
  //SEG65 [33] call print_str 
  //SEG66 [79] phi from test_16s::@5 to print_str [phi:test_16s::@5->print_str]
  print_str_from_b5:
  //SEG67 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_16s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b6
  //SEG68 test_16s::@6
  b6:
  //SEG69 [34] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 -- vwsz1=vwsz2 
    lda res
    sta print_sword.w
    lda res+1
    sta print_sword.w+1
  //SEG70 [35] call print_sword 
  //SEG71 [50] phi from test_16s::@6 to print_sword [phi:test_16s::@6->print_sword]
  print_sword_from_b6:
  //SEG72 [50] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:test_16s::@6->print_sword#0] -- register_copy 
  //SEG73 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#3 [phi:test_16s::@6->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG74 [36] phi from test_16s::@6 to test_16s::@7 [phi:test_16s::@6->test_16s::@7]
  b7_from_b6:
    jmp b7
  //SEG75 test_16s::@7
  b7:
  //SEG76 [37] call print_str 
  //SEG77 [79] phi from test_16s::@7 to print_str [phi:test_16s::@7->print_str]
  print_str_from_b7:
  //SEG78 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_16s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b8
  //SEG79 test_16s::@8
  b8:
  //SEG80 [38] (signed word) print_sword::w#4 ← (signed word) rem16s#11 -- vwsz1=vwsz2 
    lda rem16s
    sta print_sword.w
    lda rem16s+1
    sta print_sword.w+1
  //SEG81 [39] call print_sword 
  //SEG82 [50] phi from test_16s::@8 to print_sword [phi:test_16s::@8->print_sword]
  print_sword_from_b8:
  //SEG83 [50] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:test_16s::@8->print_sword#0] -- register_copy 
  //SEG84 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#4 [phi:test_16s::@8->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG85 [40] phi from test_16s::@8 to test_16s::@9 [phi:test_16s::@8->test_16s::@9]
  b9_from_b8:
    jmp b9
  //SEG86 test_16s::@9
  b9:
  //SEG87 [41] call print_ln 
  //SEG88 [45] phi from test_16s::@9 to print_ln [phi:test_16s::@9->print_ln]
  print_ln_from_b9:
  //SEG89 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16s::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b10
  //SEG90 test_16s::@10
  b10:
  //SEG91 [42] (byte) test_16s::i#1 ← ++ (byte) test_16s::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG92 [43] if((byte) test_16s::i#1!=(byte) 6) goto test_16s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b1_from_b10
    jmp breturn
  //SEG93 test_16s::@return
  breturn:
  //SEG94 [44] return 
    rts
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
//SEG95 print_ln
// Print a newline
print_ln: {
  //SEG96 [46] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG97 [46] phi (byte*) print_line_cursor#20 = (byte*) print_line_cursor#39 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG98 print_ln::@1
  b1:
  //SEG99 [47] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG100 [48] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG101 print_ln::@return
  breturn:
  //SEG102 [49] return 
    rts
}
//SEG103 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(5) w)
print_sword: {
    .label w = 5
  //SEG104 [51] if((signed word) print_sword::w#10<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda w+1
    bmi b1_from_print_sword
  //SEG105 [52] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
  b3_from_print_sword:
    jmp b3
  //SEG106 print_sword::@3
  b3:
  //SEG107 [53] call print_char 
  //SEG108 [61] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
  print_char_from_b3:
  //SEG109 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#132 [phi:print_sword::@3->print_char#0] -- register_copy 
  //SEG110 [61] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
  //SEG111 [54] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG112 [54] phi (signed word) print_sword::w#7 = (signed word) print_sword::w#10 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
    jmp b2
  //SEG113 print_sword::@2
  b2:
  //SEG114 [55] (word) print_word::w#0 ← (word)(signed word) print_sword::w#7 -- vwuz1=vwuz2 
    lda w
    sta print_word.w
    lda w+1
    sta print_word.w+1
  //SEG115 [56] call print_word 
  //SEG116 [65] phi from print_sword::@2 to print_word [phi:print_sword::@2->print_word]
  print_word_from_b2:
  //SEG117 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#19 [phi:print_sword::@2->print_word#0] -- register_copy 
  //SEG118 [65] phi (word) print_word::w#5 = (word) print_word::w#0 [phi:print_sword::@2->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG119 print_sword::@return
  breturn:
  //SEG120 [57] return 
    rts
  //SEG121 [58] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
  b1_from_print_sword:
    jmp b1
  //SEG122 print_sword::@1
  b1:
  //SEG123 [59] call print_char 
  //SEG124 [61] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
  print_char_from_b1:
  //SEG125 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#132 [phi:print_sword::@1->print_char#0] -- register_copy 
  //SEG126 [61] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG127 print_sword::@4
  b4:
  //SEG128 [60] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#10 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc w
    sta w
    lda #0
    sbc w+1
    sta w+1
    jmp b2_from_b4
}
//SEG129 print_char
// Print a single char
// print_char(byte zeropage(7) ch)
print_char: {
    .label ch = 7
  //SEG130 [62] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG131 [63] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#84 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG132 print_char::@return
  breturn:
  //SEG133 [64] return 
    rts
}
//SEG134 print_word
// Print a word as HEX
// print_word(word zeropage(8) w)
print_word: {
    .label w = 8
  //SEG135 [66] (byte) print_byte::b#1 ← > (word) print_word::w#5 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG136 [67] call print_byte 
  //SEG137 [71] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG138 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#138 [phi:print_word->print_byte#0] -- register_copy 
  //SEG139 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG140 print_word::@1
  b1:
  //SEG141 [68] (byte) print_byte::b#2 ← < (word) print_word::w#5 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG142 [69] call print_byte 
  //SEG143 [71] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG144 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#19 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG145 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG146 print_word::@return
  breturn:
  //SEG147 [70] return 
    rts
}
//SEG148 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($c) b)
print_byte: {
    .label _0 = $3f
    .label _2 = $40
    .label b = $c
  //SEG149 [72] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG150 [73] (byte) print_char::ch#4 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG151 [74] call print_char 
  //SEG152 [61] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG153 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#139 [phi:print_byte->print_char#0] -- register_copy 
  //SEG154 [61] phi (byte) print_char::ch#6 = (byte) print_char::ch#4 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG155 print_byte::@1
  b1:
  //SEG156 [75] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG157 [76] (byte) print_char::ch#5 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG158 [77] call print_char 
  //SEG159 [61] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG160 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#19 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG161 [61] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG162 print_byte::@return
  breturn:
  //SEG163 [78] return 
    rts
}
//SEG164 print_str
// Print a zero-terminated string
// print_str(byte* zeropage($d) str)
print_str: {
    .label str = $d
  //SEG165 [80] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG166 [80] phi (byte*) print_char_cursor#130 = (byte*) print_char_cursor#19 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG167 [80] phi (byte*) print_str::str#13 = (byte*) print_str::str#15 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG168 print_str::@1
  b1:
  //SEG169 [81] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG170 print_str::@return
  breturn:
  //SEG171 [82] return 
    rts
  //SEG172 print_str::@2
  b2:
  //SEG173 [83] *((byte*) print_char_cursor#130) ← *((byte*) print_str::str#13) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG174 [84] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#130 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG175 [85] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG176 div16s
// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div16s(signed word zeropage($37) dividend, signed word zeropage($39) divisor)
div16s: {
    .label return = $47
    .label dividend = $37
    .label divisor = $39
    .label return_2 = $3b
  //SEG177 [86] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 -- vwsz1=vwsz2 
    lda dividend
    sta divr16s.dividend
    lda dividend+1
    sta divr16s.dividend+1
  //SEG178 [87] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 -- vwsz1=vwsz2 
    lda divisor
    sta divr16s.divisor
    lda divisor+1
    sta divr16s.divisor+1
  //SEG179 [88] call divr16s 
    jsr divr16s
  //SEG180 [89] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2 -- vwsz1=vwsz2 
    lda divr16s.return
    sta divr16s.return_3
    lda divr16s.return+1
    sta divr16s.return_3+1
    jmp b1
  //SEG181 div16s::@1
  b1:
  //SEG182 [90] (signed word) div16s::return#0 ← (signed word) divr16s::return#3 -- vwsz1=vwsz2 
    lda divr16s.return_3
    sta return
    lda divr16s.return_3+1
    sta return+1
    jmp breturn
  //SEG183 div16s::@return
  breturn:
  //SEG184 [91] return 
    rts
}
//SEG185 divr16s
// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// divr16s(signed word zeropage($41) dividend, signed word zeropage($43) divisor)
divr16s: {
    .label _16 = $4d
    .label dividendu = $51
    .label divisoru = $4f
    .label neg = $13
    .label resultu = $4b
    .label return = $14
    .label dividend = $41
    .label divisor = $43
    .label return_3 = $45
    .label dividendu_3 = $f
    .label divisoru_3 = $11
    .label dividendu_7 = $f
    .label dividendu_8 = $f
    .label divisoru_4 = $11
    .label divisoru_5 = $11
  //SEG186 [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 -- vwsz1_lt_0_then_la1 
    lda dividend+1
    bmi b1
    jmp b6
  //SEG187 divr16s::@6
  b6:
  //SEG188 [93] (word~) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0 -- vwuz1=vwuz2 
    lda dividend
    sta dividendu_8
    lda dividend+1
    sta dividendu_8+1
  //SEG189 [94] phi from divr16s::@6 to divr16s::@2 [phi:divr16s::@6->divr16s::@2]
  b2_from_b6:
  //SEG190 [94] phi (word) divr16s::dividendu#3 = (word~) divr16s::dividendu#8 [phi:divr16s::@6->divr16s::@2#0] -- register_copy 
  //SEG191 [94] phi (byte) divr16s::neg#3 = (byte) 0 [phi:divr16s::@6->divr16s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
  //SEG192 divr16s::@2
  b2:
  //SEG193 [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 -- vwsz1_lt_0_then_la1 
    lda divisor+1
    bmi b3
    jmp b7
  //SEG194 divr16s::@7
  b7:
  //SEG195 [96] (word~) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0 -- vwuz1=vwuz2 
    lda divisor
    sta divisoru_5
    lda divisor+1
    sta divisoru_5+1
  //SEG196 [97] phi from divr16s::@3 divr16s::@7 to divr16s::@4 [phi:divr16s::@3/divr16s::@7->divr16s::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG197 [97] phi (byte) divr16s::neg#4 = (byte) divr16s::neg#2 [phi:divr16s::@3/divr16s::@7->divr16s::@4#0] -- register_copy 
  //SEG198 [97] phi (word) divr16s::divisoru#3 = (word~) divr16s::divisoru#4 [phi:divr16s::@3/divr16s::@7->divr16s::@4#1] -- register_copy 
    jmp b4
  //SEG199 divr16s::@4
  b4:
  //SEG200 [98] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3 -- vwuz1=vwuz2 
    lda dividendu_3
    sta divr16u.dividend
    lda dividendu_3+1
    sta divr16u.dividend+1
  //SEG201 [99] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3 -- vwuz1=vwuz2 
    lda divisoru_3
    sta divr16u.divisor
    lda divisoru_3+1
    sta divr16u.divisor+1
  //SEG202 [100] call divr16u 
  //SEG203 [116] phi from divr16s::@4 to divr16u [phi:divr16s::@4->divr16u]
  divr16u_from_b4:
  //SEG204 [116] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#1 [phi:divr16s::@4->divr16u#0] -- register_copy 
  //SEG205 [116] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#2 [phi:divr16s::@4->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG206 [101] (word) divr16u::return#3 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_3
    lda divr16u.return+1
    sta divr16u.return_3+1
    jmp b9
  //SEG207 divr16s::@9
  b9:
  //SEG208 [102] (word) divr16s::resultu#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda divr16u.return_3
    sta resultu
    lda divr16u.return_3+1
    sta resultu+1
  //SEG209 [103] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5 -- vbuz1_eq_0_then_la1 
    lda neg
    cmp #0
    beq b5
    jmp b8
  //SEG210 divr16s::@8
  b8:
  //SEG211 [104] (signed word~) divr16s::$16 ← (signed word)(word) rem16u#1 -- vwsz1=vwsz2 
    lda rem16u
    sta _16
    lda rem16u+1
    sta _16+1
  //SEG212 [105] (signed word) rem16s#2 ← - (signed word~) divr16s::$16 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc _16
    sta rem16s
    lda #0
    sbc _16+1
    sta rem16s+1
  //SEG213 [106] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc resultu
    sta return
    lda #0
    sbc resultu+1
    sta return+1
  //SEG214 [107] phi from divr16s::@5 divr16s::@8 to divr16s::@return [phi:divr16s::@5/divr16s::@8->divr16s::@return]
  breturn_from_b5:
  breturn_from_b8:
  //SEG215 [107] phi (signed word) rem16s#11 = (signed word~) rem16s#37 [phi:divr16s::@5/divr16s::@8->divr16s::@return#0] -- register_copy 
  //SEG216 [107] phi (signed word) divr16s::return#2 = (signed word~) divr16s::return#7 [phi:divr16s::@5/divr16s::@8->divr16s::@return#1] -- register_copy 
    jmp breturn
  //SEG217 divr16s::@return
  breturn:
  //SEG218 [108] return 
    rts
  //SEG219 divr16s::@5
  b5:
  //SEG220 [109] (signed word~) divr16s::return#7 ← (signed word)(word) divr16s::resultu#0 -- vwsz1=vwsz2 
    lda resultu
    sta return
    lda resultu+1
    sta return+1
  //SEG221 [110] (signed word~) rem16s#37 ← (signed word)(word) rem16u#1 -- vwsz1=vwsz2 
    lda rem16u
    sta rem16s
    lda rem16u+1
    sta rem16s+1
    jmp breturn_from_b5
  //SEG222 divr16s::@3
  b3:
  //SEG223 [111] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc divisor
    sta divisoru
    lda #0
    sbc divisor+1
    sta divisoru+1
  //SEG224 [112] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #1
    eor neg
    sta neg
  //SEG225 [113] (word~) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1 -- vwuz1=vwuz2 
    lda divisoru
    sta divisoru_4
    lda divisoru+1
    sta divisoru_4+1
    jmp b4_from_b3
  //SEG226 divr16s::@1
  b1:
  //SEG227 [114] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc dividend
    sta dividendu
    lda #0
    sbc dividend+1
    sta dividendu+1
  //SEG228 [115] (word~) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1 -- vwuz1=vwuz2 
    lda dividendu
    sta dividendu_7
    lda dividendu+1
    sta dividendu_7+1
  //SEG229 [94] phi from divr16s::@1 to divr16s::@2 [phi:divr16s::@1->divr16s::@2]
  b2_from_b1:
  //SEG230 [94] phi (word) divr16s::dividendu#3 = (word~) divr16s::dividendu#7 [phi:divr16s::@1->divr16s::@2#0] -- register_copy 
  //SEG231 [94] phi (byte) divr16s::neg#3 = (byte) 1 [phi:divr16s::@1->divr16s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
}
//SEG232 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($1c) dividend, word zeropage($18) divisor, word zeropage($1a) rem)
divr16u: {
    .label _1 = $53
    .label _2 = $54
    .label rem = $1a
    .label dividend = $1c
    .label quotient = $1e
    .label i = $20
    .label return = $1e
    .label divisor = $18
    .label return_2 = $74
    .label return_3 = $49
  //SEG233 [117] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG234 [117] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG235 [117] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG236 [117] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG237 [117] phi (word) divr16u::rem#5 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #0
    sta rem
    lda #0
    sta rem+1
    jmp b1
  //SEG238 [117] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG239 [117] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG240 [117] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG241 [117] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG242 [117] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG243 divr16u::@1
  b1:
  //SEG244 [118] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG245 [119] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuz1=_hi_vwuz2 
    lda dividend+1
    sta _1
  //SEG246 [120] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and _1
    sta _2
  //SEG247 [121] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda _2
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG248 divr16u::@4
  b4:
  //SEG249 [122] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG250 [123] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG251 [123] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG252 divr16u::@2
  b2:
  //SEG253 [124] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG254 [125] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG255 [126] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3_from_b2
    bne !+
    lda rem
    cmp divisor
    bcc b3_from_b2
  !:
    jmp b5
  //SEG256 divr16u::@5
  b5:
  //SEG257 [127] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG258 [128] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG259 [129] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG260 [129] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG261 [129] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG262 divr16u::@3
  b3:
  //SEG263 [130] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG264 [131] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp i
    bne b1_from_b3
    jmp b6
  //SEG265 divr16u::@6
  b6:
  //SEG266 [132] (word) rem16u#1 ← (word) divr16u::rem#11 -- vwuz1=vwuz2 
    lda rem
    sta rem16u
    lda rem+1
    sta rem16u+1
    jmp breturn
  //SEG267 divr16u::@return
  breturn:
  //SEG268 [133] return 
    rts
}
//SEG269 test_8s
test_8s: {
    .label dividend = $57
    .label divisor = $58
    .label res = $5c
    .label i = $21
  //SEG270 [135] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  b1_from_test_8s:
  //SEG271 [135] phi (byte) test_8s::i#10 = (byte) 0 [phi:test_8s->test_8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG272 [135] phi from test_8s::@10 to test_8s::@1 [phi:test_8s::@10->test_8s::@1]
  b1_from_b10:
  //SEG273 [135] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@10->test_8s::@1#0] -- register_copy 
    jmp b1
  //SEG274 test_8s::@1
  b1:
  //SEG275 [136] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG276 [137] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG277 [138] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 -- vbsz1=vbsz2 
    lda dividend
    sta div8s.dividend
  //SEG278 [139] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 -- vbsz1=vbsz2 
    lda divisor
    sta div8s.divisor
  //SEG279 [140] call div8s 
    jsr div8s
  //SEG280 [141] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 -- vbsz1=vbsz2 
    lda div8s.return
    sta div8s.return_3
    jmp b2
  //SEG281 test_8s::@2
  b2:
  //SEG282 [142] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 -- vbsz1=vbsz2 
    lda div8s.return_3
    sta res
  //SEG283 [143] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 -- vbsz1=vbsz2 
    lda dividend
    sta print_sbyte.b
  //SEG284 [144] (byte*~) print_char_cursor#168 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG285 [145] call print_sbyte 
  //SEG286 [163] phi from test_8s::@2 to print_sbyte [phi:test_8s::@2->print_sbyte]
  print_sbyte_from_b2:
  //SEG287 [163] phi (byte*) print_char_cursor#135 = (byte*~) print_char_cursor#168 [phi:test_8s::@2->print_sbyte#0] -- register_copy 
  //SEG288 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#1 [phi:test_8s::@2->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG289 [146] phi from test_8s::@2 to test_8s::@3 [phi:test_8s::@2->test_8s::@3]
  b3_from_b2:
    jmp b3
  //SEG290 test_8s::@3
  b3:
  //SEG291 [147] call print_str 
  //SEG292 [79] phi from test_8s::@3 to print_str [phi:test_8s::@3->print_str]
  print_str_from_b3:
  //SEG293 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_8s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b4
  //SEG294 test_8s::@4
  b4:
  //SEG295 [148] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG296 [149] call print_sbyte 
  //SEG297 [163] phi from test_8s::@4 to print_sbyte [phi:test_8s::@4->print_sbyte]
  print_sbyte_from_b4:
  //SEG298 [163] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#130 [phi:test_8s::@4->print_sbyte#0] -- register_copy 
  //SEG299 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#2 [phi:test_8s::@4->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG300 [150] phi from test_8s::@4 to test_8s::@5 [phi:test_8s::@4->test_8s::@5]
  b5_from_b4:
    jmp b5
  //SEG301 test_8s::@5
  b5:
  //SEG302 [151] call print_str 
  //SEG303 [79] phi from test_8s::@5 to print_str [phi:test_8s::@5->print_str]
  print_str_from_b5:
  //SEG304 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_8s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b6
  //SEG305 test_8s::@6
  b6:
  //SEG306 [152] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG307 [153] call print_sbyte 
  //SEG308 [163] phi from test_8s::@6 to print_sbyte [phi:test_8s::@6->print_sbyte]
  print_sbyte_from_b6:
  //SEG309 [163] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#130 [phi:test_8s::@6->print_sbyte#0] -- register_copy 
  //SEG310 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#3 [phi:test_8s::@6->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG311 [154] phi from test_8s::@6 to test_8s::@7 [phi:test_8s::@6->test_8s::@7]
  b7_from_b6:
    jmp b7
  //SEG312 test_8s::@7
  b7:
  //SEG313 [155] call print_str 
  //SEG314 [79] phi from test_8s::@7 to print_str [phi:test_8s::@7->print_str]
  print_str_from_b7:
  //SEG315 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_8s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b8
  //SEG316 test_8s::@8
  b8:
  //SEG317 [156] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 -- vbsz1=vbsz2 
    lda rem8s
    sta print_sbyte.b
  //SEG318 [157] call print_sbyte 
  //SEG319 [163] phi from test_8s::@8 to print_sbyte [phi:test_8s::@8->print_sbyte]
  print_sbyte_from_b8:
  //SEG320 [163] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#130 [phi:test_8s::@8->print_sbyte#0] -- register_copy 
  //SEG321 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#4 [phi:test_8s::@8->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG322 [158] phi from test_8s::@8 to test_8s::@9 [phi:test_8s::@8->test_8s::@9]
  b9_from_b8:
    jmp b9
  //SEG323 test_8s::@9
  b9:
  //SEG324 [159] call print_ln 
  //SEG325 [45] phi from test_8s::@9 to print_ln [phi:test_8s::@9->print_ln]
  print_ln_from_b9:
  //SEG326 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_8s::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b10
  //SEG327 test_8s::@10
  b10:
  //SEG328 [160] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG329 [161] if((byte) test_8s::i#1!=(byte) 6) goto test_8s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b1_from_b10
    jmp breturn
  //SEG330 test_8s::@return
  breturn:
  //SEG331 [162] return 
    rts
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG332 print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage($22) b)
print_sbyte: {
    .label b = $22
  //SEG333 [164] if((signed byte) print_sbyte::b#10<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda b
    bmi b1_from_print_sbyte
  //SEG334 [165] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  b3_from_print_sbyte:
    jmp b3
  //SEG335 print_sbyte::@3
  b3:
  //SEG336 [166] call print_char 
  //SEG337 [61] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  print_char_from_b3:
  //SEG338 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#135 [phi:print_sbyte::@3->print_char#0] -- register_copy 
  //SEG339 [61] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
  //SEG340 [167] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG341 [167] phi (signed byte) print_sbyte::b#7 = (signed byte) print_sbyte::b#10 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    jmp b2
  //SEG342 print_sbyte::@2
  b2:
  //SEG343 [168] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#7 -- vbuz1=vbuz2 
    lda b
    sta print_byte.b
  //SEG344 [169] call print_byte 
  //SEG345 [71] phi from print_sbyte::@2 to print_byte [phi:print_sbyte::@2->print_byte]
  print_byte_from_b2:
  //SEG346 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#19 [phi:print_sbyte::@2->print_byte#0] -- register_copy 
  //SEG347 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#0 [phi:print_sbyte::@2->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG348 print_sbyte::@return
  breturn:
  //SEG349 [170] return 
    rts
  //SEG350 [171] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  b1_from_print_sbyte:
    jmp b1
  //SEG351 print_sbyte::@1
  b1:
  //SEG352 [172] call print_char 
  //SEG353 [61] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  print_char_from_b1:
  //SEG354 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#135 [phi:print_sbyte::@1->print_char#0] -- register_copy 
  //SEG355 [61] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG356 print_sbyte::@4
  b4:
  //SEG357 [173] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#10 -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
    jmp b2_from_b4
}
//SEG358 div8s
// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div8s(signed byte zeropage($59) dividend, signed byte zeropage($5a) divisor)
div8s: {
    .label _11 = $5f
    .label dividendu = $61
    .label divisoru = $60
    .label neg = $25
    .label resultu = $5e
    .label return = $26
    .label dividend = $59
    .label divisor = $5a
    .label return_3 = $5b
    .label dividendu_3 = $23
    .label divisoru_3 = $24
    .label dividendu_7 = $23
    .label dividendu_8 = $23
    .label divisoru_4 = $24
    .label divisoru_5 = $24
  //SEG359 [174] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1 -- vbsz1_lt_0_then_la1 
    lda dividend
    bmi b1
    jmp b6
  //SEG360 div8s::@6
  b6:
  //SEG361 [175] (byte~) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0 -- vbuz1=vbuz2 
    lda dividend
    sta dividendu_8
  //SEG362 [176] phi from div8s::@6 to div8s::@2 [phi:div8s::@6->div8s::@2]
  b2_from_b6:
  //SEG363 [176] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#8 [phi:div8s::@6->div8s::@2#0] -- register_copy 
  //SEG364 [176] phi (byte) div8s::neg#3 = (byte) 0 [phi:div8s::@6->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
  //SEG365 div8s::@2
  b2:
  //SEG366 [177] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3 -- vbsz1_lt_0_then_la1 
    lda divisor
    bmi b3
    jmp b7
  //SEG367 div8s::@7
  b7:
  //SEG368 [178] (byte~) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0 -- vbuz1=vbuz2 
    lda divisor
    sta divisoru_5
  //SEG369 [179] phi from div8s::@3 div8s::@7 to div8s::@4 [phi:div8s::@3/div8s::@7->div8s::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG370 [179] phi (byte) div8s::neg#4 = (byte) div8s::neg#2 [phi:div8s::@3/div8s::@7->div8s::@4#0] -- register_copy 
  //SEG371 [179] phi (byte) div8s::divisoru#3 = (byte~) div8s::divisoru#4 [phi:div8s::@3/div8s::@7->div8s::@4#1] -- register_copy 
    jmp b4
  //SEG372 div8s::@4
  b4:
  //SEG373 [180] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 -- vbuz1=vbuz2 
    lda dividendu_3
    sta div8u.dividend
  //SEG374 [181] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3 -- vbuz1=vbuz2 
    lda divisoru_3
    sta div8u.divisor
  //SEG375 [182] call div8u 
  //SEG376 [198] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  div8u_from_b4:
  //SEG377 [198] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG378 [198] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
  //SEG379 [183] (byte) div8u::return#2 ← (byte) div8u::return#0 -- vbuz1=vbuz2 
    lda div8u.return
    sta div8u.return_2
    jmp b9
  //SEG380 div8s::@9
  b9:
  //SEG381 [184] (byte) div8s::resultu#0 ← (byte) div8u::return#2 -- vbuz1=vbuz2 
    lda div8u.return_2
    sta resultu
  //SEG382 [185] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5 -- vbuz1_eq_0_then_la1 
    lda neg
    cmp #0
    beq b5
    jmp b8
  //SEG383 div8s::@8
  b8:
  //SEG384 [186] (signed byte~) div8s::$11 ← (signed byte)(byte) rem8u#17 -- vbsz1=vbsz2 
    lda rem8u
    sta _11
  //SEG385 [187] (signed byte) rem8s#2 ← - (signed byte~) div8s::$11 -- vbsz1=_neg_vbsz2 
    lda _11
    eor #$ff
    clc
    adc #1
    sta rem8s
  //SEG386 [188] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 -- vbsz1=_neg_vbsz2 
    lda resultu
    eor #$ff
    clc
    adc #1
    sta return
  //SEG387 [189] phi from div8s::@5 div8s::@8 to div8s::@return [phi:div8s::@5/div8s::@8->div8s::@return]
  breturn_from_b5:
  breturn_from_b8:
  //SEG388 [189] phi (signed byte) rem8s#3 = (signed byte~) rem8s#33 [phi:div8s::@5/div8s::@8->div8s::@return#0] -- register_copy 
  //SEG389 [189] phi (signed byte) div8s::return#2 = (signed byte~) div8s::return#7 [phi:div8s::@5/div8s::@8->div8s::@return#1] -- register_copy 
    jmp breturn
  //SEG390 div8s::@return
  breturn:
  //SEG391 [190] return 
    rts
  //SEG392 div8s::@5
  b5:
  //SEG393 [191] (signed byte~) div8s::return#7 ← (signed byte)(byte) div8s::resultu#0 -- vbsz1=vbsz2 
    lda resultu
    sta return
  //SEG394 [192] (signed byte~) rem8s#33 ← (signed byte)(byte) rem8u#17 -- vbsz1=vbsz2 
    lda rem8u
    sta rem8s
    jmp breturn_from_b5
  //SEG395 div8s::@3
  b3:
  //SEG396 [193] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 -- vbsz1=_neg_vbsz2 
    lda divisor
    eor #$ff
    clc
    adc #1
    sta divisoru
  //SEG397 [194] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #1
    eor neg
    sta neg
  //SEG398 [195] (byte~) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisoru#1 -- vbuz1=vbuz2 
    lda divisoru
    sta divisoru_4
    jmp b4_from_b3
  //SEG399 div8s::@1
  b1:
  //SEG400 [196] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 -- vbsz1=_neg_vbsz2 
    lda dividend
    eor #$ff
    clc
    adc #1
    sta dividendu
  //SEG401 [197] (byte~) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividendu#1 -- vbuz1=vbuz2 
    lda dividendu
    sta dividendu_7
  //SEG402 [176] phi from div8s::@1 to div8s::@2 [phi:div8s::@1->div8s::@2]
  b2_from_b1:
  //SEG403 [176] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#7 [phi:div8s::@1->div8s::@2#0] -- register_copy 
  //SEG404 [176] phi (byte) div8s::neg#3 = (byte) 1 [phi:div8s::@1->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
}
//SEG405 div8u
// Performs division on two 8 bit unsigned bytes
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8u
// Implemented using simple binary division
// div8u(byte zeropage($28) dividend, byte zeropage($29) divisor)
div8u: {
    .label return = $64
    .label dividend = $28
    .label divisor = $29
    .label return_2 = $5d
    .label return_3 = $7a
  //SEG406 [199] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 -- vbuz1=vbuz2 
    lda dividend
    sta divr8u.dividend
  //SEG407 [200] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 -- vbuz1=vbuz2 
    lda divisor
    sta divr8u.divisor
  //SEG408 [201] call divr8u 
  //SEG409 [205] phi from div8u to divr8u [phi:div8u->divr8u]
  divr8u_from_div8u:
    jsr divr8u
  //SEG410 [202] (byte) divr8u::return#0 ← (byte) divr8u::return#1 -- vbuz1=vbuz2 
    lda divr8u.return_1
    sta divr8u.return
    jmp b1
  //SEG411 div8u::@1
  b1:
  //SEG412 [203] (byte) div8u::return#0 ← (byte) divr8u::return#0 -- vbuz1=vbuz2 
    lda divr8u.return
    sta return
    jmp breturn
  //SEG413 div8u::@return
  breturn:
  //SEG414 [204] return 
    rts
}
//SEG415 divr8u
// Performs division on two 8 bit unsigned bytes and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
// divr8u(byte zeropage($2b) dividend, byte zeropage($62) divisor, byte zeropage($2a) rem)
divr8u: {
    .label _1 = $65
    .label dividend = $2b
    .label divisor = $62
    .label return = $63
    .label rem = $2a
    .label quotient = $2c
    .label i = $2d
    .label return_1 = $2c
  //SEG416 [206] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  b1_from_divr8u:
  //SEG417 [206] phi (byte) divr8u::i#2 = (byte) 0 [phi:divr8u->divr8u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG418 [206] phi (byte) divr8u::quotient#3 = (byte) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta quotient
  //SEG419 [206] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
  //SEG420 [206] phi (byte) divr8u::rem#4 = (byte) 0 [phi:divr8u->divr8u::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta rem
    jmp b1
  //SEG421 [206] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  b1_from_b3:
  //SEG422 [206] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
  //SEG423 [206] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
  //SEG424 [206] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
  //SEG425 [206] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    jmp b1
  //SEG426 divr8u::@1
  b1:
  //SEG427 [207] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl rem
  //SEG428 [208] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and dividend
    sta _1
  //SEG429 [209] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2 -- vbuz1_eq_0_then_la1 
    lda _1
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG430 divr8u::@4
  b4:
  //SEG431 [210] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 -- vbuz1=vbuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG432 [211] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG433 [211] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    jmp b2
  //SEG434 divr8u::@2
  b2:
  //SEG435 [212] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG436 [213] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG437 [214] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda rem
    cmp divisor
    bcc b3_from_b2
    jmp b5
  //SEG438 divr8u::@5
  b5:
  //SEG439 [215] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG440 [216] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda rem
    sec
    sbc divisor
    sta rem
  //SEG441 [217] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG442 [217] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
  //SEG443 [217] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    jmp b3
  //SEG444 divr8u::@3
  b3:
  //SEG445 [218] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG446 [219] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp i
    bne b1_from_b3
    jmp b6
  //SEG447 divr8u::@6
  b6:
  //SEG448 [220] (byte) rem8u#17 ← (byte) divr8u::rem#10 -- vbuz1=vbuz2 
    lda rem
    sta rem8u
    jmp breturn
  //SEG449 divr8u::@return
  breturn:
  //SEG450 [221] return 
    rts
}
//SEG451 test_16u
test_16u: {
    .label _11 = $67
    .label dividend = $68
    .label divisor = $6a
    .label res = $72
    .label i = $2e
  //SEG452 [223] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  b1_from_test_16u:
  //SEG453 [223] phi (byte) test_16u::i#10 = (byte) 0 [phi:test_16u->test_16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG454 [223] phi from test_16u::@10 to test_16u::@1 [phi:test_16u::@10->test_16u::@1]
  b1_from_b10:
  //SEG455 [223] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@10->test_16u::@1#0] -- register_copy 
    jmp b1
  //SEG456 test_16u::@1
  b1:
  //SEG457 [224] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _11
  //SEG458 [225] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy _11
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG459 [226] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy _11
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG460 [227] (word) div16u::dividend#0 ← (word) test_16u::dividend#0 -- vwuz1=vwuz2 
    lda dividend
    sta div16u.dividend
    lda dividend+1
    sta div16u.dividend+1
  //SEG461 [228] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 -- vwuz1=vwuz2 
    lda divisor
    sta div16u.divisor
    lda divisor+1
    sta div16u.divisor+1
  //SEG462 [229] call div16u 
    jsr div16u
  //SEG463 [230] (word) div16u::return#2 ← (word) div16u::return#0 -- vwuz1=vwuz2 
    lda div16u.return
    sta div16u.return_2
    lda div16u.return+1
    sta div16u.return_2+1
    jmp b2
  //SEG464 test_16u::@2
  b2:
  //SEG465 [231] (word) test_16u::res#0 ← (word) div16u::return#2 -- vwuz1=vwuz2 
    lda div16u.return_2
    sta res
    lda div16u.return_2+1
    sta res+1
  //SEG466 [232] (word) print_word::w#1 ← (word) test_16u::dividend#0 -- vwuz1=vwuz2 
    lda dividend
    sta print_word.w
    lda dividend+1
    sta print_word.w+1
  //SEG467 [233] (byte*~) print_char_cursor#173 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG468 [234] call print_word 
  //SEG469 [65] phi from test_16u::@2 to print_word [phi:test_16u::@2->print_word]
  print_word_from_b2:
  //SEG470 [65] phi (byte*) print_char_cursor#138 = (byte*~) print_char_cursor#173 [phi:test_16u::@2->print_word#0] -- register_copy 
  //SEG471 [65] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:test_16u::@2->print_word#1] -- register_copy 
    jsr print_word
  //SEG472 [235] phi from test_16u::@2 to test_16u::@3 [phi:test_16u::@2->test_16u::@3]
  b3_from_b2:
    jmp b3
  //SEG473 test_16u::@3
  b3:
  //SEG474 [236] call print_str 
  //SEG475 [79] phi from test_16u::@3 to print_str [phi:test_16u::@3->print_str]
  print_str_from_b3:
  //SEG476 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_16u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b4
  //SEG477 test_16u::@4
  b4:
  //SEG478 [237] (word) print_word::w#2 ← (word) test_16u::divisor#0 -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG479 [238] call print_word 
  //SEG480 [65] phi from test_16u::@4 to print_word [phi:test_16u::@4->print_word]
  print_word_from_b4:
  //SEG481 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#130 [phi:test_16u::@4->print_word#0] -- register_copy 
  //SEG482 [65] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:test_16u::@4->print_word#1] -- register_copy 
    jsr print_word
  //SEG483 [239] phi from test_16u::@4 to test_16u::@5 [phi:test_16u::@4->test_16u::@5]
  b5_from_b4:
    jmp b5
  //SEG484 test_16u::@5
  b5:
  //SEG485 [240] call print_str 
  //SEG486 [79] phi from test_16u::@5 to print_str [phi:test_16u::@5->print_str]
  print_str_from_b5:
  //SEG487 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_16u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b6
  //SEG488 test_16u::@6
  b6:
  //SEG489 [241] (word) print_word::w#3 ← (word) test_16u::res#0 -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG490 [242] call print_word 
  //SEG491 [65] phi from test_16u::@6 to print_word [phi:test_16u::@6->print_word]
  print_word_from_b6:
  //SEG492 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#130 [phi:test_16u::@6->print_word#0] -- register_copy 
  //SEG493 [65] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:test_16u::@6->print_word#1] -- register_copy 
    jsr print_word
  //SEG494 [243] phi from test_16u::@6 to test_16u::@7 [phi:test_16u::@6->test_16u::@7]
  b7_from_b6:
    jmp b7
  //SEG495 test_16u::@7
  b7:
  //SEG496 [244] call print_str 
  //SEG497 [79] phi from test_16u::@7 to print_str [phi:test_16u::@7->print_str]
  print_str_from_b7:
  //SEG498 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_16u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b8
  //SEG499 test_16u::@8
  b8:
  //SEG500 [245] (word) print_word::w#4 ← (word) rem16u#1 -- vwuz1=vwuz2 
    lda rem16u
    sta print_word.w
    lda rem16u+1
    sta print_word.w+1
  //SEG501 [246] call print_word 
  //SEG502 [65] phi from test_16u::@8 to print_word [phi:test_16u::@8->print_word]
  print_word_from_b8:
  //SEG503 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#130 [phi:test_16u::@8->print_word#0] -- register_copy 
  //SEG504 [65] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:test_16u::@8->print_word#1] -- register_copy 
    jsr print_word
  //SEG505 [247] phi from test_16u::@8 to test_16u::@9 [phi:test_16u::@8->test_16u::@9]
  b9_from_b8:
    jmp b9
  //SEG506 test_16u::@9
  b9:
  //SEG507 [248] call print_ln 
  //SEG508 [45] phi from test_16u::@9 to print_ln [phi:test_16u::@9->print_ln]
  print_ln_from_b9:
  //SEG509 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16u::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b10
  //SEG510 test_16u::@10
  b10:
  //SEG511 [249] (byte) test_16u::i#1 ← ++ (byte) test_16u::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG512 [250] if((byte) test_16u::i#1!=(byte) 6) goto test_16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b1_from_b10
    jmp breturn
  //SEG513 test_16u::@return
  breturn:
  //SEG514 [251] return 
    rts
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG515 div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
// div16u(word zeropage($6c) dividend, word zeropage($6e) divisor)
div16u: {
    .label return = $76
    .label dividend = $6c
    .label divisor = $6e
    .label return_2 = $70
  //SEG516 [252] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 -- vwuz1=vwuz2 
    lda dividend
    sta divr16u.dividend
    lda dividend+1
    sta divr16u.dividend+1
  //SEG517 [253] (word) divr16u::divisor#0 ← (word) div16u::divisor#0 -- vwuz1=vwuz2 
    lda divisor
    sta divr16u.divisor
    lda divisor+1
    sta divr16u.divisor+1
  //SEG518 [254] call divr16u 
  //SEG519 [116] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
  //SEG520 [116] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#0 [phi:div16u->divr16u#0] -- register_copy 
  //SEG521 [116] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#1 [phi:div16u->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG522 [255] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_2
    lda divr16u.return+1
    sta divr16u.return_2+1
    jmp b1
  //SEG523 div16u::@1
  b1:
  //SEG524 [256] (word) div16u::return#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return_2
    sta return
    lda divr16u.return_2+1
    sta return+1
    jmp breturn
  //SEG525 div16u::@return
  breturn:
  //SEG526 [257] return 
    rts
}
//SEG527 test_8u
test_8u: {
    .label dividend = $78
    .label divisor = $79
    .label res = $7b
    .label i = $2f
  //SEG528 [259] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  b1_from_test_8u:
  //SEG529 [259] phi (byte*) print_line_cursor#41 = (byte*) 1024 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG530 [259] phi (byte*) print_char_cursor#141 = (byte*) 1024 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG531 [259] phi (byte) test_8u::i#10 = (byte) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG532 test_8u::@1
  b1:
  //SEG533 [260] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG534 [261] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG535 [262] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 -- vbuz1=vbuz2 
    lda dividend
    sta div8u.dividend
  //SEG536 [263] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 -- vbuz1=vbuz2 
    lda divisor
    sta div8u.divisor
  //SEG537 [264] call div8u 
  //SEG538 [198] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  div8u_from_b1:
  //SEG539 [198] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG540 [198] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
  //SEG541 [265] (byte) div8u::return#3 ← (byte) div8u::return#0 -- vbuz1=vbuz2 
    lda div8u.return
    sta div8u.return_3
    jmp b2
  //SEG542 test_8u::@2
  b2:
  //SEG543 [266] (byte) test_8u::res#0 ← (byte) div8u::return#3 -- vbuz1=vbuz2 
    lda div8u.return_3
    sta res
  //SEG544 [267] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 -- vbuz1=vbuz2 
    lda dividend
    sta print_byte.b
  //SEG545 [268] call print_byte 
  //SEG546 [71] phi from test_8u::@2 to print_byte [phi:test_8u::@2->print_byte]
  print_byte_from_b2:
  //SEG547 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#141 [phi:test_8u::@2->print_byte#0] -- register_copy 
  //SEG548 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@2->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG549 [269] phi from test_8u::@2 to test_8u::@3 [phi:test_8u::@2->test_8u::@3]
  b3_from_b2:
    jmp b3
  //SEG550 test_8u::@3
  b3:
  //SEG551 [270] call print_str 
  //SEG552 [79] phi from test_8u::@3 to print_str [phi:test_8u::@3->print_str]
  print_str_from_b3:
  //SEG553 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_8u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b4
  //SEG554 test_8u::@4
  b4:
  //SEG555 [271] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG556 [272] call print_byte 
  //SEG557 [71] phi from test_8u::@4 to print_byte [phi:test_8u::@4->print_byte]
  print_byte_from_b4:
  //SEG558 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#130 [phi:test_8u::@4->print_byte#0] -- register_copy 
  //SEG559 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@4->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG560 [273] phi from test_8u::@4 to test_8u::@5 [phi:test_8u::@4->test_8u::@5]
  b5_from_b4:
    jmp b5
  //SEG561 test_8u::@5
  b5:
  //SEG562 [274] call print_str 
  //SEG563 [79] phi from test_8u::@5 to print_str [phi:test_8u::@5->print_str]
  print_str_from_b5:
  //SEG564 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_8u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b6
  //SEG565 test_8u::@6
  b6:
  //SEG566 [275] (byte) print_byte::b#5 ← (byte) test_8u::res#0 -- vbuz1=vbuz2 
    lda res
    sta print_byte.b
  //SEG567 [276] call print_byte 
  //SEG568 [71] phi from test_8u::@6 to print_byte [phi:test_8u::@6->print_byte]
  print_byte_from_b6:
  //SEG569 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#130 [phi:test_8u::@6->print_byte#0] -- register_copy 
  //SEG570 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@6->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG571 [277] phi from test_8u::@6 to test_8u::@7 [phi:test_8u::@6->test_8u::@7]
  b7_from_b6:
    jmp b7
  //SEG572 test_8u::@7
  b7:
  //SEG573 [278] call print_str 
  //SEG574 [79] phi from test_8u::@7 to print_str [phi:test_8u::@7->print_str]
  print_str_from_b7:
  //SEG575 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_8u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b8
  //SEG576 test_8u::@8
  b8:
  //SEG577 [279] (byte) print_byte::b#6 ← (byte) rem8u#17 -- vbuz1=vbuz2 
    lda rem8u
    sta print_byte.b
  //SEG578 [280] call print_byte 
  //SEG579 [71] phi from test_8u::@8 to print_byte [phi:test_8u::@8->print_byte]
  print_byte_from_b8:
  //SEG580 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#130 [phi:test_8u::@8->print_byte#0] -- register_copy 
  //SEG581 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@8->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG582 [281] phi from test_8u::@8 to test_8u::@9 [phi:test_8u::@8->test_8u::@9]
  b9_from_b8:
    jmp b9
  //SEG583 test_8u::@9
  b9:
  //SEG584 [282] call print_ln 
  //SEG585 [45] phi from test_8u::@9 to print_ln [phi:test_8u::@9->print_ln]
  print_ln_from_b9:
  //SEG586 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#41 [phi:test_8u::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b10
  //SEG587 test_8u::@10
  b10:
  //SEG588 [283] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG589 [284] if((byte) test_8u::i#1!=(byte) 6) goto test_8u::@11 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b11
    jmp breturn
  //SEG590 test_8u::@return
  breturn:
  //SEG591 [285] return 
    rts
  //SEG592 test_8u::@11
  b11:
  //SEG593 [286] (byte*~) print_char_cursor#190 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG594 [259] phi from test_8u::@11 to test_8u::@1 [phi:test_8u::@11->test_8u::@1]
  b1_from_b11:
  //SEG595 [259] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#1 [phi:test_8u::@11->test_8u::@1#0] -- register_copy 
  //SEG596 [259] phi (byte*) print_char_cursor#141 = (byte*~) print_char_cursor#190 [phi:test_8u::@11->test_8u::@1#1] -- register_copy 
  //SEG597 [259] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@11->test_8u::@1#2] -- register_copy 
    jmp b1
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG598 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $30
  //SEG599 [288] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG600 [288] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG601 [288] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG602 [288] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG603 print_cls::@1
  b1:
  //SEG604 [289] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG605 [290] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG606 [291] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG607 print_cls::@return
  breturn:
  //SEG608 [292] return 
    rts
}
//SEG609 File Data
  print_hextab: .text "0123456789abcdef"
  str: .text " / @"
  str1: .text " = @"
  str2: .text " @"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [17] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 [ test_16s::i#10 test_16s::$11 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::$11 print_line_cursor#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Statement [18] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:50 [ test_16s::$11 ]
Statement [19] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [20] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [21] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [23] (signed word) div16s::return#2 ← (signed word) div16s::return#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [24] (signed word) test_16s::res#0 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [25] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [26] (byte*~) print_char_cursor#164 ← (byte*) print_line_cursor#1 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#164 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#164 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [30] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#11 print_char_cursor#130 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#11 print_char_cursor#130 ] ) always clobbers reg byte a 
Statement [34] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#11 print_char_cursor#130 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#11 print_char_cursor#130 ] ) always clobbers reg byte a 
Statement [38] (signed word) print_sword::w#4 ← (signed word) rem16s#11 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#130 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#130 ] ) always clobbers reg byte a 
Statement [47] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte) $28 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::test_16s:13::print_ln:41 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8s:11::print_ln:159 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_16u:9::print_ln:248 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8u:7::print_ln:282 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#19 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ test_8s::i#10 test_8s::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:46 [ test_16u::i#10 test_16u::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:47 [ test_8u::i#10 test_8u::i#1 ]
Statement [48] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::test_16s:13::print_ln:41 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8s:11::print_ln:159 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_16u:9::print_ln:248 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8u:7::print_ln:282 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [51] if((signed word) print_sword::w#10<(signed byte) 0) goto print_sword::@1 [ print_sword::w#10 print_char_cursor#132 ] ( main:2::test_16s:13::print_sword:27 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#132 ] main:2::test_16s:13::print_sword:31 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#132 ] main:2::test_16s:13::print_sword:35 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#132 ] main:2::test_16s:13::print_sword:39 [ test_16s::i#10 print_line_cursor#1 print_sword::w#10 print_char_cursor#132 ] ) always clobbers reg byte a 
Statement [55] (word) print_word::w#0 ← (word)(signed word) print_sword::w#7 [ print_char_cursor#19 print_word::w#0 ] ( main:2::test_16s:13::print_sword:27 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_word::w#0 ] main:2::test_16s:13::print_sword:31 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_word::w#0 ] main:2::test_16s:13::print_sword:35 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_word::w#0 ] main:2::test_16s:13::print_sword:39 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_word::w#0 ] ) always clobbers reg byte a 
Statement [60] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#10 [ print_char_cursor#19 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:27 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_sword::w#0 ] main:2::test_16s:13::print_sword:31 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_sword::w#0 ] main:2::test_16s:13::print_sword:35 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_sword::w#0 ] main:2::test_16s:13::print_sword:39 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [62] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#6 [ print_char_cursor#84 ] ( main:2::test_16s:13::print_sword:27::print_char:53 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_char:53 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_char:53 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_char:53 [ test_16s::i#10 print_line_cursor#1 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_char:59 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_char:59 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_char:59 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_char:59 [ test_16s::i#10 print_line_cursor#1 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:67::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:67::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:67::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:67::print_char:74 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:69::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:69::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:69::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:69::print_char:74 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:268::print_char:74 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:272::print_char:74 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:276::print_char:74 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:280::print_char:74 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:67::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:67::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:67::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:67::print_char:77 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:69::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:69::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:69::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:69::print_char:77 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#84 ] main:2::test_8u:7::print_byte:268::print_char:77 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#84 ] main:2::test_8u:7::print_byte:272::print_char:77 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#84 ] main:2::test_8u:7::print_byte:276::print_char:77 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#84 ] main:2::test_8u:7::print_byte:280::print_char:77 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_char:166 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_char:166 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_char:166 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_char:166 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_char:172 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_char:172 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_char:172 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_char:172 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#10 print_char_cursor#84 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:12 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:46 [ test_16u::i#10 test_16u::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:33 [ test_8s::i#10 test_8s::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:88 [ test_8s::divisor#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:92 [ test_8s::res#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:39 [ rem8s#3 rem8s#2 rem8s#33 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:102 [ rem8u#17 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:47 [ test_8u::i#10 test_8u::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:121 [ test_8u::divisor#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:123 [ test_8u::res#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:34 [ print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ]
Statement [66] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 print_char_cursor#138 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:27::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16s:13::print_sword:31::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16s:13::print_sword:35::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16s:13::print_sword:39::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:234 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:238 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:242 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:246 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [68] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ print_char_cursor#19 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:27::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::b#2 ] main:2::test_16s:13::print_sword:31::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::b#2 ] main:2::test_16s:13::print_sword:35::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::b#2 ] main:2::test_16s:13::print_sword:39::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:234 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:238 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:242 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:246 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#19 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [72] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte) 4 [ print_char_cursor#139 print_byte::b#7 print_byte::$0 ] ( main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:234::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:238::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:242::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:246::print_byte:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:234::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:238::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:242::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:246::print_byte:69 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:145::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:149::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:153::print_byte:169 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:157::print_byte:169 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:268 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:272 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:276 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:280 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:88 [ test_8s::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:92 [ test_8s::res#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:39 [ rem8s#3 rem8s#2 rem8s#33 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:102 [ rem8u#17 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:121 [ test_8u::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:123 [ test_8u::res#0 ]
Statement [75] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte) $f [ print_char_cursor#19 print_byte::$2 ] ( main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:234::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:238::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:242::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:246::print_byte:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:234::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:238::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:242::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:246::print_byte:69 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:145::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:149::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:153::print_byte:169 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:157::print_byte:169 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:268 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:272 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:276 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:280 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#19 print_byte::$2 ] ) always clobbers reg byte a 
Statement [81] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ print_char_cursor#130 print_str::str#13 ] ( main:2::test_16s:13::print_str:29 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:33 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:37 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:155 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:236 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:240 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:244 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:270 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:274 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:278 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#130 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [83] *((byte*) print_char_cursor#130) ← *((byte*) print_str::str#13) [ print_char_cursor#130 print_str::str#13 ] ( main:2::test_16s:13::print_str:29 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:33 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:37 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:155 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:236 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:240 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:244 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:270 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:274 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:278 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#130 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [86] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 [ div16s::divisor#0 divr16s::dividend#0 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 divr16s::dividend#0 ] ) always clobbers reg byte a 
Statement [87] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 [ divr16s::dividend#0 divr16s::divisor#0 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividend#0 divr16s::divisor#0 ] ) always clobbers reg byte a 
Statement [89] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2 [ rem16s#11 divr16s::return#3 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#11 divr16s::return#3 ] ) always clobbers reg byte a 
Statement [90] (signed word) div16s::return#0 ← (signed word) divr16s::return#3 [ div16s::return#0 rem16s#11 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#0 rem16s#11 ] ) always clobbers reg byte a 
Statement [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 [ divr16s::dividend#0 divr16s::divisor#0 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividend#0 divr16s::divisor#0 ] ) always clobbers reg byte a 
Statement [93] (word~) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#8 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::dividendu#8 ] ) always clobbers reg byte a 
Statement [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 [ divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:19 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
Statement [96] (word~) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ) always clobbers reg byte a 
Statement [98] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3 [ divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] ) always clobbers reg byte a 
Statement [99] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3 [ divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] ) always clobbers reg byte a 
Statement [101] (word) divr16u::return#3 ← (word) divr16u::return#0 [ divr16s::neg#4 divr16u::return#3 rem16u#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::return#3 rem16u#1 ] ) always clobbers reg byte a 
Statement [102] (word) divr16s::resultu#0 ← (word) divr16u::return#3 [ divr16s::neg#4 divr16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16s::resultu#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [104] (signed word~) divr16s::$16 ← (signed word)(word) rem16u#1 [ divr16s::resultu#0 divr16s::$16 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::resultu#0 divr16s::$16 ] ) always clobbers reg byte a 
Statement [105] (signed word) rem16s#2 ← - (signed word~) divr16s::$16 [ divr16s::resultu#0 rem16s#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::resultu#0 rem16s#2 ] ) always clobbers reg byte a 
Statement [106] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 [ rem16s#2 divr16s::return#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#2 divr16s::return#1 ] ) always clobbers reg byte a 
Statement [109] (signed word~) divr16s::return#7 ← (signed word)(word) divr16s::resultu#0 [ rem16u#1 divr16s::return#7 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16u#1 divr16s::return#7 ] ) always clobbers reg byte a 
Statement [110] (signed word~) rem16s#37 ← (signed word)(word) rem16u#1 [ divr16s::return#7 rem16s#37 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::return#7 rem16s#37 ] ) always clobbers reg byte a 
Statement [111] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ) always clobbers reg byte a 
Statement [112] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 [ divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ) always clobbers reg byte a 
Statement [113] (word~) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1 [ divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ) always clobbers reg byte a 
Statement [114] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::dividendu#1 ] ) always clobbers reg byte a 
Statement [115] (word~) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1 [ divr16s::divisor#0 divr16s::dividendu#7 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::dividendu#7 ] ) always clobbers reg byte a 
Statement [119] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:32 [ divr16u::i#2 divr16u::i#1 ]
Statement [122] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [126] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [128] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [132] (word) rem16u#1 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [144] (byte*~) print_char_cursor#168 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#168 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#168 rem8s#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:34 [ print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ]
Statement [173] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#10 [ print_char_cursor#19 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:145 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#19 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:149 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#19 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:153 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#19 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:157 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#19 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [187] (signed byte) rem8s#2 ← - (signed byte~) div8s::$11 [ div8s::resultu#0 rem8s#2 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:87 [ test_8s::dividend#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:94 [ div8s::resultu#0 ]
Statement [188] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#2 div8s::return#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#2 div8s::return#1 ] ) always clobbers reg byte a 
Statement [193] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:35 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
Statement [194] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:96 [ div8s::divisoru#1 ]
Statement [196] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:90 [ div8s::divisor#0 ]
Statement [210] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:140::div8u:182::divr8u:201 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:264::divr8u:201 [ print_line_cursor#41 print_char_cursor#141 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:98 [ divr8u::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:45 [ divr8u::i#2 divr8u::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:120 [ test_8u::dividend#0 ]
Statement [216] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:140::div8u:182::divr8u:201 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:264::divr8u:201 [ print_line_cursor#41 print_char_cursor#141 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) always clobbers reg byte a 
Statement [224] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 [ print_line_cursor#1 test_16u::i#10 test_16u::$11 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::$11 ] ) always clobbers reg byte a 
Statement [225] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte~) test_16u::$11) [ print_line_cursor#1 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:103 [ test_16u::$11 ]
Statement [226] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte~) test_16u::$11) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [227] (word) div16u::dividend#0 ← (word) test_16u::dividend#0 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] ) always clobbers reg byte a 
Statement [228] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] ) always clobbers reg byte a 
Statement [230] (word) div16u::return#2 ← (word) div16u::return#0 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] ) always clobbers reg byte a 
Statement [231] (word) test_16u::res#0 ← (word) div16u::return#2 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [232] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [233] (byte*~) print_char_cursor#173 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_word::w#1 print_char_cursor#173 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 print_char_cursor#173 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [237] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#1 print_char_cursor#130 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#130 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [241] (word) print_word::w#3 ← (word) test_16u::res#0 [ print_line_cursor#1 print_char_cursor#130 print_word::w#3 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#130 print_word::w#3 rem16u#1 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [245] (word) print_word::w#4 ← (word) rem16u#1 [ print_line_cursor#1 print_char_cursor#130 print_word::w#4 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#130 print_word::w#4 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [252] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 [ divr16u::dividend#1 div16u::divisor#0 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 div16u::divisor#0 ] ) always clobbers reg byte a 
Statement [253] (word) divr16u::divisor#0 ← (word) div16u::divisor#0 [ divr16u::dividend#1 divr16u::divisor#0 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] ) always clobbers reg byte a 
Statement [255] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#1 divr16u::return#2 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#2 ] ) always clobbers reg byte a 
Statement [256] (word) div16u::return#0 ← (word) divr16u::return#2 [ rem16u#1 div16u::return#0 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 div16u::return#0 ] ) always clobbers reg byte a 
Statement [286] (byte*~) print_char_cursor#190 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#190 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#190 ] ) always clobbers reg byte a 
Statement [289] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [291] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [17] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 [ test_16s::i#10 test_16s::$11 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::$11 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [18] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [19] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [20] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [21] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [23] (signed word) div16s::return#2 ← (signed word) div16s::return#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [24] (signed word) test_16s::res#0 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [25] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [26] (byte*~) print_char_cursor#164 ← (byte*) print_line_cursor#1 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#164 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#164 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [30] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#11 print_char_cursor#130 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#11 print_char_cursor#130 ] ) always clobbers reg byte a 
Statement [34] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#11 print_char_cursor#130 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#11 print_char_cursor#130 ] ) always clobbers reg byte a 
Statement [38] (signed word) print_sword::w#4 ← (signed word) rem16s#11 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#130 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#130 ] ) always clobbers reg byte a 
Statement [47] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte) $28 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::test_16s:13::print_ln:41 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8s:11::print_ln:159 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_16u:9::print_ln:248 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8u:7::print_ln:282 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [48] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::test_16s:13::print_ln:41 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8s:11::print_ln:159 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_16u:9::print_ln:248 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8u:7::print_ln:282 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [51] if((signed word) print_sword::w#10<(signed byte) 0) goto print_sword::@1 [ print_sword::w#10 print_char_cursor#132 ] ( main:2::test_16s:13::print_sword:27 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#132 ] main:2::test_16s:13::print_sword:31 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#132 ] main:2::test_16s:13::print_sword:35 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#132 ] main:2::test_16s:13::print_sword:39 [ test_16s::i#10 print_line_cursor#1 print_sword::w#10 print_char_cursor#132 ] ) always clobbers reg byte a 
Statement [55] (word) print_word::w#0 ← (word)(signed word) print_sword::w#7 [ print_char_cursor#19 print_word::w#0 ] ( main:2::test_16s:13::print_sword:27 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_word::w#0 ] main:2::test_16s:13::print_sword:31 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_word::w#0 ] main:2::test_16s:13::print_sword:35 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_word::w#0 ] main:2::test_16s:13::print_sword:39 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_word::w#0 ] ) always clobbers reg byte a 
Statement [60] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#10 [ print_char_cursor#19 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:27 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_sword::w#0 ] main:2::test_16s:13::print_sword:31 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_sword::w#0 ] main:2::test_16s:13::print_sword:35 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_sword::w#0 ] main:2::test_16s:13::print_sword:39 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [62] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#6 [ print_char_cursor#84 ] ( main:2::test_16s:13::print_sword:27::print_char:53 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_char:53 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_char:53 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_char:53 [ test_16s::i#10 print_line_cursor#1 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_char:59 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_char:59 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_char:59 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_char:59 [ test_16s::i#10 print_line_cursor#1 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:67::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:67::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:67::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:67::print_char:74 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:69::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:69::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:69::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:69::print_char:74 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:268::print_char:74 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:272::print_char:74 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:276::print_char:74 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:280::print_char:74 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:67::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:67::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:67::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:67::print_char:77 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:69::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:69::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:69::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:69::print_char:77 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#84 ] main:2::test_8u:7::print_byte:268::print_char:77 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#84 ] main:2::test_8u:7::print_byte:272::print_char:77 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#84 ] main:2::test_8u:7::print_byte:276::print_char:77 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#84 ] main:2::test_8u:7::print_byte:280::print_char:77 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_char:166 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_char:166 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_char:166 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_char:166 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_char:172 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_char:172 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_char:172 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_char:172 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#10 print_char_cursor#84 ] ) always clobbers reg byte y 
Statement [66] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 print_char_cursor#138 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:27::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16s:13::print_sword:31::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16s:13::print_sword:35::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16s:13::print_sword:39::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:234 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:238 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:242 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:246 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [68] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ print_char_cursor#19 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:27::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::b#2 ] main:2::test_16s:13::print_sword:31::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::b#2 ] main:2::test_16s:13::print_sword:35::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::b#2 ] main:2::test_16s:13::print_sword:39::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:234 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:238 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:242 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:246 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#19 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [72] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte) 4 [ print_char_cursor#139 print_byte::b#7 print_byte::$0 ] ( main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:234::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:238::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:242::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:246::print_byte:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:234::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:238::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:242::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:246::print_byte:69 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:145::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:149::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:153::print_byte:169 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:157::print_byte:169 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:268 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:272 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:276 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:280 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] ) always clobbers reg byte a 
Statement [75] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte) $f [ print_char_cursor#19 print_byte::$2 ] ( main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:234::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:238::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:242::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:246::print_byte:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:234::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:238::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:242::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:246::print_byte:69 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:145::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:149::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:153::print_byte:169 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:157::print_byte:169 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:268 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:272 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:276 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:280 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#19 print_byte::$2 ] ) always clobbers reg byte a 
Statement [81] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ print_char_cursor#130 print_str::str#13 ] ( main:2::test_16s:13::print_str:29 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:33 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:37 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:155 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:236 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:240 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:244 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:270 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:274 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:278 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#130 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [83] *((byte*) print_char_cursor#130) ← *((byte*) print_str::str#13) [ print_char_cursor#130 print_str::str#13 ] ( main:2::test_16s:13::print_str:29 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:33 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:37 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:155 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:236 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:240 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:244 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:270 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:274 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:278 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#130 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [86] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 [ div16s::divisor#0 divr16s::dividend#0 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 divr16s::dividend#0 ] ) always clobbers reg byte a 
Statement [87] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 [ divr16s::dividend#0 divr16s::divisor#0 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividend#0 divr16s::divisor#0 ] ) always clobbers reg byte a 
Statement [89] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2 [ rem16s#11 divr16s::return#3 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#11 divr16s::return#3 ] ) always clobbers reg byte a 
Statement [90] (signed word) div16s::return#0 ← (signed word) divr16s::return#3 [ div16s::return#0 rem16s#11 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#0 rem16s#11 ] ) always clobbers reg byte a 
Statement [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 [ divr16s::dividend#0 divr16s::divisor#0 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividend#0 divr16s::divisor#0 ] ) always clobbers reg byte a 
Statement [93] (word~) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#8 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::dividendu#8 ] ) always clobbers reg byte a 
Statement [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 [ divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ) always clobbers reg byte a 
Statement [96] (word~) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ) always clobbers reg byte a 
Statement [98] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3 [ divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] ) always clobbers reg byte a 
Statement [99] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3 [ divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] ) always clobbers reg byte a 
Statement [101] (word) divr16u::return#3 ← (word) divr16u::return#0 [ divr16s::neg#4 divr16u::return#3 rem16u#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::return#3 rem16u#1 ] ) always clobbers reg byte a 
Statement [102] (word) divr16s::resultu#0 ← (word) divr16u::return#3 [ divr16s::neg#4 divr16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16s::resultu#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [104] (signed word~) divr16s::$16 ← (signed word)(word) rem16u#1 [ divr16s::resultu#0 divr16s::$16 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::resultu#0 divr16s::$16 ] ) always clobbers reg byte a 
Statement [105] (signed word) rem16s#2 ← - (signed word~) divr16s::$16 [ divr16s::resultu#0 rem16s#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::resultu#0 rem16s#2 ] ) always clobbers reg byte a 
Statement [106] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 [ rem16s#2 divr16s::return#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#2 divr16s::return#1 ] ) always clobbers reg byte a 
Statement [109] (signed word~) divr16s::return#7 ← (signed word)(word) divr16s::resultu#0 [ rem16u#1 divr16s::return#7 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16u#1 divr16s::return#7 ] ) always clobbers reg byte a 
Statement [110] (signed word~) rem16s#37 ← (signed word)(word) rem16u#1 [ divr16s::return#7 rem16s#37 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::return#7 rem16s#37 ] ) always clobbers reg byte a 
Statement [111] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ) always clobbers reg byte a 
Statement [112] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 [ divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ) always clobbers reg byte a 
Statement [113] (word~) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1 [ divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ) always clobbers reg byte a 
Statement [114] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::dividendu#1 ] ) always clobbers reg byte a 
Statement [115] (word~) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1 [ divr16s::divisor#0 divr16s::dividendu#7 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::dividendu#7 ] ) always clobbers reg byte a 
Statement [119] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [122] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [126] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [128] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [132] (word) rem16u#1 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [144] (byte*~) print_char_cursor#168 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#168 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#168 rem8s#3 ] ) always clobbers reg byte a 
Statement [173] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#10 [ print_char_cursor#19 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:145 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#19 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:149 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#19 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:153 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#19 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:157 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#19 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [187] (signed byte) rem8s#2 ← - (signed byte~) div8s::$11 [ div8s::resultu#0 rem8s#2 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#2 ] ) always clobbers reg byte a 
Statement [188] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#2 div8s::return#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#2 div8s::return#1 ] ) always clobbers reg byte a 
Statement [193] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] ) always clobbers reg byte a 
Statement [194] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] ) always clobbers reg byte a 
Statement [196] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#1 ] ) always clobbers reg byte a 
Statement [208] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:140::div8u:182::divr8u:201 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:264::divr8u:201 [ print_line_cursor#41 print_char_cursor#141 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:42 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
Statement [210] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:140::div8u:182::divr8u:201 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:264::divr8u:201 [ print_line_cursor#41 print_char_cursor#141 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ) always clobbers reg byte a 
Statement [216] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:140::div8u:182::divr8u:201 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:264::divr8u:201 [ print_line_cursor#41 print_char_cursor#141 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) always clobbers reg byte a 
Statement [224] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 [ print_line_cursor#1 test_16u::i#10 test_16u::$11 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::$11 ] ) always clobbers reg byte a 
Statement [225] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte~) test_16u::$11) [ print_line_cursor#1 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] ) always clobbers reg byte a 
Statement [226] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte~) test_16u::$11) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [227] (word) div16u::dividend#0 ← (word) test_16u::dividend#0 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] ) always clobbers reg byte a 
Statement [228] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] ) always clobbers reg byte a 
Statement [230] (word) div16u::return#2 ← (word) div16u::return#0 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] ) always clobbers reg byte a 
Statement [231] (word) test_16u::res#0 ← (word) div16u::return#2 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [232] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [233] (byte*~) print_char_cursor#173 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_word::w#1 print_char_cursor#173 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 print_char_cursor#173 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [237] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#1 print_char_cursor#130 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#130 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [241] (word) print_word::w#3 ← (word) test_16u::res#0 [ print_line_cursor#1 print_char_cursor#130 print_word::w#3 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#130 print_word::w#3 rem16u#1 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [245] (word) print_word::w#4 ← (word) rem16u#1 [ print_line_cursor#1 print_char_cursor#130 print_word::w#4 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#130 print_word::w#4 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [252] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 [ divr16u::dividend#1 div16u::divisor#0 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 div16u::divisor#0 ] ) always clobbers reg byte a 
Statement [253] (word) divr16u::divisor#0 ← (word) div16u::divisor#0 [ divr16u::dividend#1 divr16u::divisor#0 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] ) always clobbers reg byte a 
Statement [255] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#1 divr16u::return#2 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#2 ] ) always clobbers reg byte a 
Statement [256] (word) div16u::return#0 ← (word) divr16u::return#2 [ rem16u#1 div16u::return#0 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 div16u::return#0 ] ) always clobbers reg byte a 
Statement [286] (byte*~) print_char_cursor#190 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#190 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#190 ] ) always clobbers reg byte a 
Statement [289] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [291] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [17] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 [ test_16s::i#10 test_16s::$11 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::$11 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [18] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [19] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [20] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [21] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [23] (signed word) div16s::return#2 ← (signed word) div16s::return#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [24] (signed word) test_16s::res#0 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [25] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [26] (byte*~) print_char_cursor#164 ← (byte*) print_line_cursor#1 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#164 print_line_cursor#1 rem16s#11 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#164 print_line_cursor#1 rem16s#11 ] ) always clobbers reg byte a 
Statement [30] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#11 print_char_cursor#130 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#11 print_char_cursor#130 ] ) always clobbers reg byte a 
Statement [34] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#11 print_char_cursor#130 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#11 print_char_cursor#130 ] ) always clobbers reg byte a 
Statement [38] (signed word) print_sword::w#4 ← (signed word) rem16s#11 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#130 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#130 ] ) always clobbers reg byte a 
Statement [47] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte) $28 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::test_16s:13::print_ln:41 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8s:11::print_ln:159 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_16u:9::print_ln:248 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8u:7::print_ln:282 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [48] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::test_16s:13::print_ln:41 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8s:11::print_ln:159 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_16u:9::print_ln:248 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#19 ] main:2::test_8u:7::print_ln:282 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [51] if((signed word) print_sword::w#10<(signed byte) 0) goto print_sword::@1 [ print_sword::w#10 print_char_cursor#132 ] ( main:2::test_16s:13::print_sword:27 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#132 ] main:2::test_16s:13::print_sword:31 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#132 ] main:2::test_16s:13::print_sword:35 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#132 ] main:2::test_16s:13::print_sword:39 [ test_16s::i#10 print_line_cursor#1 print_sword::w#10 print_char_cursor#132 ] ) always clobbers reg byte a 
Statement [55] (word) print_word::w#0 ← (word)(signed word) print_sword::w#7 [ print_char_cursor#19 print_word::w#0 ] ( main:2::test_16s:13::print_sword:27 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_word::w#0 ] main:2::test_16s:13::print_sword:31 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_word::w#0 ] main:2::test_16s:13::print_sword:35 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_word::w#0 ] main:2::test_16s:13::print_sword:39 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_word::w#0 ] ) always clobbers reg byte a 
Statement [60] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#10 [ print_char_cursor#19 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:27 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_sword::w#0 ] main:2::test_16s:13::print_sword:31 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_sword::w#0 ] main:2::test_16s:13::print_sword:35 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_sword::w#0 ] main:2::test_16s:13::print_sword:39 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [62] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#6 [ print_char_cursor#84 ] ( main:2::test_16s:13::print_sword:27::print_char:53 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_char:53 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_char:53 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_char:53 [ test_16s::i#10 print_line_cursor#1 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_char:59 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_char:59 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_char:59 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_char:59 [ test_16s::i#10 print_line_cursor#1 print_sword::w#10 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67::print_char:74 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:67::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:67::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:67::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:67::print_char:74 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69::print_char:74 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:69::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:69::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:69::print_char:74 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:69::print_char:74 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_byte:169::print_char:74 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:268::print_char:74 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:272::print_char:74 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:276::print_char:74 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_8u:7::print_byte:280::print_char:74 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67::print_char:77 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:67::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:67::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:67::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:67::print_char:77 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#84 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#84 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#84 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#84 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69::print_char:77 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#84 ] main:2::test_16u:9::print_word:234::print_byte:69::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#84 ] main:2::test_16u:9::print_word:238::print_byte:69::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#84 ] main:2::test_16u:9::print_word:242::print_byte:69::print_char:77 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#84 ] main:2::test_16u:9::print_word:246::print_byte:69::print_char:77 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_byte:169::print_char:77 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#84 ] main:2::test_8u:7::print_byte:268::print_char:77 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#84 ] main:2::test_8u:7::print_byte:272::print_char:77 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#84 ] main:2::test_8u:7::print_byte:276::print_char:77 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#84 ] main:2::test_8u:7::print_byte:280::print_char:77 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_char:166 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_char:166 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_char:166 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_char:166 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:145::print_char:172 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:149::print_char:172 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:153::print_char:172 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#10 print_char_cursor#84 ] main:2::test_8s:11::print_sbyte:157::print_char:172 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#10 print_char_cursor#84 ] ) always clobbers reg byte y 
Statement [66] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 print_char_cursor#138 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:27::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16s:13::print_sword:31::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16s:13::print_sword:35::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16s:13::print_sword:39::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:234 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:238 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:242 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] main:2::test_16u:9::print_word:246 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#138 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [68] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ print_char_cursor#19 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:27::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::b#2 ] main:2::test_16s:13::print_sword:31::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::b#2 ] main:2::test_16s:13::print_sword:35::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::b#2 ] main:2::test_16s:13::print_sword:39::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:234 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:238 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:242 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#19 print_byte::b#2 ] main:2::test_16u:9::print_word:246 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#19 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [72] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte) 4 [ print_char_cursor#139 print_byte::b#7 print_byte::$0 ] ( main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:234::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:238::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:242::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:246::print_byte:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:234::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:238::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:242::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_16u:9::print_word:246::print_byte:69 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:145::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:149::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:153::print_byte:169 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8s:11::print_sbyte:157::print_byte:169 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:268 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:272 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:276 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] main:2::test_8u:7::print_byte:280 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#139 print_byte::b#7 print_byte::$0 ] ) always clobbers reg byte a 
Statement [75] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte) $f [ print_char_cursor#19 print_byte::$2 ] ( main:2::test_16s:13::print_sword:27::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:234::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:238::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:242::print_byte:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:246::print_byte:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:27::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:31::print_word:56::print_byte:69 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:35::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#19 print_byte::$2 ] main:2::test_16s:13::print_sword:39::print_word:56::print_byte:69 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:234::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:238::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:242::print_byte:69 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_16u:9::print_word:246::print_byte:69 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:145::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:149::print_byte:169 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:153::print_byte:169 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#19 print_byte::$2 ] main:2::test_8s:11::print_sbyte:157::print_byte:169 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:268 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:272 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:276 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#19 print_byte::$2 ] main:2::test_8u:7::print_byte:280 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#19 print_byte::$2 ] ) always clobbers reg byte a 
Statement [81] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ print_char_cursor#130 print_str::str#13 ] ( main:2::test_16s:13::print_str:29 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:33 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:37 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:155 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:236 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:240 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:244 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:270 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:274 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:278 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#130 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [83] *((byte*) print_char_cursor#130) ← *((byte*) print_str::str#13) [ print_char_cursor#130 print_str::str#13 ] ( main:2::test_16s:13::print_str:29 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:33 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_16s:13::print_str:37 [ test_16s::i#10 print_line_cursor#1 rem16s#11 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_8s:11::print_str:155 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:236 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:240 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_16u:9::print_str:244 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:270 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:274 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#130 print_str::str#13 ] main:2::test_8u:7::print_str:278 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#130 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [86] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 [ div16s::divisor#0 divr16s::dividend#0 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 divr16s::dividend#0 ] ) always clobbers reg byte a 
Statement [87] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 [ divr16s::dividend#0 divr16s::divisor#0 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividend#0 divr16s::divisor#0 ] ) always clobbers reg byte a 
Statement [89] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2 [ rem16s#11 divr16s::return#3 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#11 divr16s::return#3 ] ) always clobbers reg byte a 
Statement [90] (signed word) div16s::return#0 ← (signed word) divr16s::return#3 [ div16s::return#0 rem16s#11 ] ( main:2::test_16s:13::div16s:22 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#0 rem16s#11 ] ) always clobbers reg byte a 
Statement [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 [ divr16s::dividend#0 divr16s::divisor#0 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividend#0 divr16s::divisor#0 ] ) always clobbers reg byte a 
Statement [93] (word~) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#8 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::dividendu#8 ] ) always clobbers reg byte a 
Statement [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 [ divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ) always clobbers reg byte a 
Statement [96] (word~) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ) always clobbers reg byte a 
Statement [98] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3 [ divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] ) always clobbers reg byte a 
Statement [99] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3 [ divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] ) always clobbers reg byte a 
Statement [101] (word) divr16u::return#3 ← (word) divr16u::return#0 [ divr16s::neg#4 divr16u::return#3 rem16u#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::return#3 rem16u#1 ] ) always clobbers reg byte a 
Statement [102] (word) divr16s::resultu#0 ← (word) divr16u::return#3 [ divr16s::neg#4 divr16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16s::resultu#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [104] (signed word~) divr16s::$16 ← (signed word)(word) rem16u#1 [ divr16s::resultu#0 divr16s::$16 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::resultu#0 divr16s::$16 ] ) always clobbers reg byte a 
Statement [105] (signed word) rem16s#2 ← - (signed word~) divr16s::$16 [ divr16s::resultu#0 rem16s#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::resultu#0 rem16s#2 ] ) always clobbers reg byte a 
Statement [106] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 [ rem16s#2 divr16s::return#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#2 divr16s::return#1 ] ) always clobbers reg byte a 
Statement [109] (signed word~) divr16s::return#7 ← (signed word)(word) divr16s::resultu#0 [ rem16u#1 divr16s::return#7 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16u#1 divr16s::return#7 ] ) always clobbers reg byte a 
Statement [110] (signed word~) rem16s#37 ← (signed word)(word) rem16u#1 [ divr16s::return#7 rem16s#37 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::return#7 rem16s#37 ] ) always clobbers reg byte a 
Statement [111] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ) always clobbers reg byte a 
Statement [112] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 [ divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ) always clobbers reg byte a 
Statement [113] (word~) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1 [ divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ) always clobbers reg byte a 
Statement [114] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::dividendu#1 ] ) always clobbers reg byte a 
Statement [115] (word~) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1 [ divr16s::divisor#0 divr16s::dividendu#7 ] ( main:2::test_16s:13::div16s:22::divr16s:88 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::divisor#0 divr16s::dividendu#7 ] ) always clobbers reg byte a 
Statement [119] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [122] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [126] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [128] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [132] (word) rem16u#1 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:22::divr16s:88::divr16u:100 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 divr16s::neg#4 divr16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:229::divr16u:254 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [144] (byte*~) print_char_cursor#168 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#168 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#168 rem8s#3 ] ) always clobbers reg byte a 
Statement [173] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#10 [ print_char_cursor#19 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:145 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#19 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:149 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#19 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:153 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#19 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:157 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#19 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [187] (signed byte) rem8s#2 ← - (signed byte~) div8s::$11 [ div8s::resultu#0 rem8s#2 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#2 ] ) always clobbers reg byte a 
Statement [188] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#2 div8s::return#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#2 div8s::return#1 ] ) always clobbers reg byte a 
Statement [193] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] ) always clobbers reg byte a 
Statement [194] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] ) always clobbers reg byte a 
Statement [196] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#1 ] ( main:2::test_8s:11::div8s:140 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#1 ] ) always clobbers reg byte a 
Statement [208] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:140::div8u:182::divr8u:201 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:264::divr8u:201 [ print_line_cursor#41 print_char_cursor#141 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) always clobbers reg byte a 
Statement [210] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:140::div8u:182::divr8u:201 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:264::divr8u:201 [ print_line_cursor#41 print_char_cursor#141 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ) always clobbers reg byte a 
Statement [216] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:140::div8u:182::divr8u:201 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:264::divr8u:201 [ print_line_cursor#41 print_char_cursor#141 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) always clobbers reg byte a 
Statement [224] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 [ print_line_cursor#1 test_16u::i#10 test_16u::$11 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::$11 ] ) always clobbers reg byte a 
Statement [225] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte~) test_16u::$11) [ print_line_cursor#1 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] ) always clobbers reg byte a 
Statement [226] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte~) test_16u::$11) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [227] (word) div16u::dividend#0 ← (word) test_16u::dividend#0 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] ) always clobbers reg byte a 
Statement [228] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] ) always clobbers reg byte a 
Statement [230] (word) div16u::return#2 ← (word) div16u::return#0 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] ) always clobbers reg byte a 
Statement [231] (word) test_16u::res#0 ← (word) div16u::return#2 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [232] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [233] (byte*~) print_char_cursor#173 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_word::w#1 print_char_cursor#173 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 print_char_cursor#173 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [237] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#1 print_char_cursor#130 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#130 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [241] (word) print_word::w#3 ← (word) test_16u::res#0 [ print_line_cursor#1 print_char_cursor#130 print_word::w#3 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#130 print_word::w#3 rem16u#1 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [245] (word) print_word::w#4 ← (word) rem16u#1 [ print_line_cursor#1 print_char_cursor#130 print_word::w#4 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#130 print_word::w#4 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [252] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 [ divr16u::dividend#1 div16u::divisor#0 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 div16u::divisor#0 ] ) always clobbers reg byte a 
Statement [253] (word) divr16u::divisor#0 ← (word) div16u::divisor#0 [ divr16u::dividend#1 divr16u::divisor#0 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] ) always clobbers reg byte a 
Statement [255] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#1 divr16u::return#2 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#2 ] ) always clobbers reg byte a 
Statement [256] (word) div16u::return#0 ← (word) divr16u::return#2 [ rem16u#1 div16u::return#0 ] ( main:2::test_16u:9::div16u:229 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 div16u::return#0 ] ) always clobbers reg byte a 
Statement [286] (byte*~) print_char_cursor#190 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#190 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#190 ] ) always clobbers reg byte a 
Statement [289] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [291] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_WORD:5 [ print_sword::w#7 print_sword::w#0 print_sword::w#10 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_BYTE:7 [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:8 [ print_word::w#5 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_WORD:10 [ print_char_cursor#138 print_char_cursor#84 print_char_cursor#139 print_char_cursor#19 print_char_cursor#135 print_char_cursor#132 print_char_cursor#164 print_char_cursor#130 print_char_cursor#173 print_char_cursor#141 print_char_cursor#1 print_char_cursor#168 print_char_cursor#190 ] : zp ZP_WORD:10 , 
Potential registers zp ZP_BYTE:12 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] : zp ZP_BYTE:12 , reg byte x , 
Potential registers zp ZP_WORD:13 [ print_str::str#13 print_str::str#15 print_str::str#0 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_WORD:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_BYTE:19 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] : zp ZP_BYTE:19 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:20 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 ] : zp ZP_WORD:20 , 
Potential registers zp ZP_WORD:22 [ rem16s#11 rem16s#2 rem16s#37 ] : zp ZP_WORD:22 , 
Potential registers zp ZP_WORD:24 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ] : zp ZP_WORD:24 , 
Potential registers zp ZP_WORD:26 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp ZP_WORD:26 , 
Potential registers zp ZP_WORD:28 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] : zp ZP_WORD:28 , 
Potential registers zp ZP_WORD:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp ZP_WORD:30 , 
Potential registers zp ZP_BYTE:32 [ divr16u::i#2 divr16u::i#1 ] : zp ZP_BYTE:32 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ test_8s::i#10 test_8s::i#1 ] : zp ZP_BYTE:33 , reg byte x , 
Potential registers zp ZP_BYTE:34 [ print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ] : zp ZP_BYTE:34 , reg byte x , 
Potential registers zp ZP_BYTE:35 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] : zp ZP_BYTE:35 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] : zp ZP_BYTE:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] : zp ZP_BYTE:37 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ div8s::return#2 div8s::return#1 div8s::return#7 ] : zp ZP_BYTE:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ rem8s#3 rem8s#2 rem8s#33 ] : zp ZP_BYTE:39 , reg byte x , 
Potential registers zp ZP_BYTE:40 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:41 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] : zp ZP_BYTE:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:42 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] : zp ZP_BYTE:42 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] : zp ZP_BYTE:43 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] : zp ZP_BYTE:44 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:45 [ divr8u::i#2 divr8u::i#1 ] : zp ZP_BYTE:45 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ test_16u::i#10 test_16u::i#1 ] : zp ZP_BYTE:46 , reg byte x , 
Potential registers zp ZP_BYTE:47 [ test_8u::i#10 test_8u::i#1 ] : zp ZP_BYTE:47 , reg byte x , 
Potential registers zp ZP_WORD:48 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:48 , 
Potential registers zp ZP_BYTE:50 [ test_16s::$11 ] : zp ZP_BYTE:50 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:51 [ test_16s::dividend#0 ] : zp ZP_WORD:51 , 
Potential registers zp ZP_WORD:53 [ test_16s::divisor#0 ] : zp ZP_WORD:53 , 
Potential registers zp ZP_WORD:55 [ div16s::dividend#0 ] : zp ZP_WORD:55 , 
Potential registers zp ZP_WORD:57 [ div16s::divisor#0 ] : zp ZP_WORD:57 , 
Potential registers zp ZP_WORD:59 [ div16s::return#2 ] : zp ZP_WORD:59 , 
Potential registers zp ZP_WORD:61 [ test_16s::res#0 ] : zp ZP_WORD:61 , 
Potential registers zp ZP_BYTE:63 [ print_byte::$0 ] : zp ZP_BYTE:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:64 [ print_byte::$2 ] : zp ZP_BYTE:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:65 [ divr16s::dividend#0 ] : zp ZP_WORD:65 , 
Potential registers zp ZP_WORD:67 [ divr16s::divisor#0 ] : zp ZP_WORD:67 , 
Potential registers zp ZP_WORD:69 [ divr16s::return#3 ] : zp ZP_WORD:69 , 
Potential registers zp ZP_WORD:71 [ div16s::return#0 ] : zp ZP_WORD:71 , 
Potential registers zp ZP_WORD:73 [ divr16u::return#3 ] : zp ZP_WORD:73 , 
Potential registers zp ZP_WORD:75 [ divr16s::resultu#0 ] : zp ZP_WORD:75 , 
Potential registers zp ZP_WORD:77 [ divr16s::$16 ] : zp ZP_WORD:77 , 
Potential registers zp ZP_WORD:79 [ divr16s::divisoru#1 ] : zp ZP_WORD:79 , 
Potential registers zp ZP_WORD:81 [ divr16s::dividendu#1 ] : zp ZP_WORD:81 , 
Potential registers zp ZP_BYTE:83 [ divr16u::$1 ] : zp ZP_BYTE:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:84 [ divr16u::$2 ] : zp ZP_BYTE:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:85 [ rem16u#1 ] : zp ZP_WORD:85 , 
Potential registers zp ZP_BYTE:87 [ test_8s::dividend#0 ] : zp ZP_BYTE:87 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:88 [ test_8s::divisor#0 ] : zp ZP_BYTE:88 , reg byte x , 
Potential registers zp ZP_BYTE:89 [ div8s::dividend#0 ] : zp ZP_BYTE:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:90 [ div8s::divisor#0 ] : zp ZP_BYTE:90 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:91 [ div8s::return#3 ] : zp ZP_BYTE:91 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:92 [ test_8s::res#0 ] : zp ZP_BYTE:92 , reg byte x , 
Potential registers zp ZP_BYTE:93 [ div8u::return#2 ] : zp ZP_BYTE:93 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:94 [ div8s::resultu#0 ] : zp ZP_BYTE:94 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:95 [ div8s::$11 ] : zp ZP_BYTE:95 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:96 [ div8s::divisoru#1 ] : zp ZP_BYTE:96 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:97 [ div8s::dividendu#1 ] : zp ZP_BYTE:97 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:98 [ divr8u::divisor#0 ] : zp ZP_BYTE:98 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:99 [ divr8u::return#0 ] : zp ZP_BYTE:99 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:100 [ div8u::return#0 ] : zp ZP_BYTE:100 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:101 [ divr8u::$1 ] : zp ZP_BYTE:101 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:102 [ rem8u#17 ] : zp ZP_BYTE:102 , reg byte x , 
Potential registers zp ZP_BYTE:103 [ test_16u::$11 ] : zp ZP_BYTE:103 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:104 [ test_16u::dividend#0 ] : zp ZP_WORD:104 , 
Potential registers zp ZP_WORD:106 [ test_16u::divisor#0 ] : zp ZP_WORD:106 , 
Potential registers zp ZP_WORD:108 [ div16u::dividend#0 ] : zp ZP_WORD:108 , 
Potential registers zp ZP_WORD:110 [ div16u::divisor#0 ] : zp ZP_WORD:110 , 
Potential registers zp ZP_WORD:112 [ div16u::return#2 ] : zp ZP_WORD:112 , 
Potential registers zp ZP_WORD:114 [ test_16u::res#0 ] : zp ZP_WORD:114 , 
Potential registers zp ZP_WORD:116 [ divr16u::return#2 ] : zp ZP_WORD:116 , 
Potential registers zp ZP_WORD:118 [ div16u::return#0 ] : zp ZP_WORD:118 , 
Potential registers zp ZP_BYTE:120 [ test_8u::dividend#0 ] : zp ZP_BYTE:120 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:121 [ test_8u::divisor#0 ] : zp ZP_BYTE:121 , reg byte x , 
Potential registers zp ZP_BYTE:122 [ div8u::return#3 ] : zp ZP_BYTE:122 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:123 [ test_8u::res#0 ] : zp ZP_BYTE:123 , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [divr16u] 884.42: zp ZP_WORD:26 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 321.61: zp ZP_WORD:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 202: zp ZP_BYTE:83 [ divr16u::$1 ] 202: zp ZP_BYTE:84 [ divr16u::$2 ] 167.04: zp ZP_BYTE:32 [ divr16u::i#2 divr16u::i#1 ] 78.82: zp ZP_WORD:28 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] 20.88: zp ZP_WORD:24 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ] 4: zp ZP_WORD:73 [ divr16u::return#3 ] 4: zp ZP_WORD:116 [ divr16u::return#2 ] 
Uplift Scope [divr8u] 909.67: zp ZP_BYTE:42 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] 332.19: zp ZP_BYTE:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] 202: zp ZP_BYTE:101 [ divr8u::$1 ] 168.33: zp ZP_BYTE:45 [ divr8u::i#2 divr8u::i#1 ] 77.42: zp ZP_BYTE:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] 12.75: zp ZP_BYTE:98 [ divr8u::divisor#0 ] 4: zp ZP_BYTE:99 [ divr8u::return#0 ] 
Uplift Scope [] 282.21: zp ZP_WORD:10 [ print_char_cursor#138 print_char_cursor#84 print_char_cursor#139 print_char_cursor#19 print_char_cursor#135 print_char_cursor#132 print_char_cursor#164 print_char_cursor#130 print_char_cursor#173 print_char_cursor#141 print_char_cursor#1 print_char_cursor#168 print_char_cursor#190 ] 254.79: zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ] 6.83: zp ZP_BYTE:39 [ rem8s#3 rem8s#2 rem8s#33 ] 6.68: zp ZP_WORD:22 [ rem16s#11 rem16s#2 rem16s#37 ] 0.5: zp ZP_BYTE:102 [ rem8u#17 ] 0.48: zp ZP_WORD:85 [ rem16u#1 ] 
Uplift Scope [print_str] 305.5: zp ZP_WORD:13 [ print_str::str#13 print_str::str#15 print_str::str#0 ] 
Uplift Scope [print_byte] 113.5: zp ZP_BYTE:12 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] 4: zp ZP_BYTE:63 [ print_byte::$0 ] 4: zp ZP_BYTE:64 [ print_byte::$2 ] 
Uplift Scope [print_word] 97.67: zp ZP_WORD:8 [ print_word::w#5 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] 
Uplift Scope [print_sword] 93.33: zp ZP_WORD:5 [ print_sword::w#7 print_sword::w#0 print_sword::w#10 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 ] 
Uplift Scope [print_sbyte] 93.33: zp ZP_BYTE:34 [ print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ] 
Uplift Scope [div8u] 33.5: zp ZP_BYTE:41 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] 28: zp ZP_BYTE:40 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] 22: zp ZP_BYTE:122 [ div8u::return#3 ] 4: zp ZP_BYTE:93 [ div8u::return#2 ] 3.75: zp ZP_BYTE:100 [ div8u::return#0 ] 
Uplift Scope [div8s] 22: zp ZP_BYTE:91 [ div8s::return#3 ] 11: zp ZP_BYTE:36 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] 11: zp ZP_BYTE:38 [ div8s::return#2 div8s::return#1 div8s::return#7 ] 8.86: zp ZP_BYTE:35 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] 5: zp ZP_BYTE:89 [ div8s::dividend#0 ] 4: zp ZP_BYTE:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] 4: zp ZP_BYTE:95 [ div8s::$11 ] 2.14: zp ZP_BYTE:90 [ div8s::divisor#0 ] 2: zp ZP_BYTE:97 [ div8s::dividendu#1 ] 1: zp ZP_BYTE:96 [ div8s::divisoru#1 ] 0.5: zp ZP_BYTE:94 [ div8s::resultu#0 ] 
Uplift Scope [divr16s] 11: zp ZP_WORD:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] 8.86: zp ZP_WORD:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] 8: zp ZP_WORD:20 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 ] 4: zp ZP_BYTE:19 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] 4: zp ZP_WORD:69 [ divr16s::return#3 ] 4: zp ZP_WORD:77 [ divr16s::$16 ] 2: zp ZP_WORD:65 [ divr16s::dividend#0 ] 2: zp ZP_WORD:81 [ divr16s::dividendu#1 ] 1: zp ZP_WORD:79 [ divr16s::divisoru#1 ] 0.86: zp ZP_WORD:67 [ divr16s::divisor#0 ] 0.5: zp ZP_WORD:75 [ divr16s::resultu#0 ] 
Uplift Scope [test_16u] 17.77: zp ZP_BYTE:46 [ test_16u::i#10 test_16u::i#1 ] 16.5: zp ZP_BYTE:103 [ test_16u::$11 ] 4.71: zp ZP_WORD:104 [ test_16u::dividend#0 ] 3: zp ZP_WORD:106 [ test_16u::divisor#0 ] 2.2: zp ZP_WORD:114 [ test_16u::res#0 ] 
Uplift Scope [test_16s] 17.77: zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] 16.5: zp ZP_BYTE:50 [ test_16s::$11 ] 4.71: zp ZP_WORD:51 [ test_16s::dividend#0 ] 3: zp ZP_WORD:53 [ test_16s::divisor#0 ] 2.2: zp ZP_WORD:61 [ test_16s::res#0 ] 
Uplift Scope [div16u] 22: zp ZP_WORD:112 [ div16u::return#2 ] 6.5: zp ZP_WORD:108 [ div16u::dividend#0 ] 6.5: zp ZP_WORD:110 [ div16u::divisor#0 ] 4.33: zp ZP_WORD:118 [ div16u::return#0 ] 
Uplift Scope [div16s] 22: zp ZP_WORD:59 [ div16s::return#2 ] 6.5: zp ZP_WORD:55 [ div16s::dividend#0 ] 6.5: zp ZP_WORD:57 [ div16s::divisor#0 ] 4.33: zp ZP_WORD:71 [ div16s::return#0 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:48 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [test_8s] 18.26: zp ZP_BYTE:33 [ test_8s::i#10 test_8s::i#1 ] 4.71: zp ZP_BYTE:87 [ test_8s::dividend#0 ] 3: zp ZP_BYTE:88 [ test_8s::divisor#0 ] 2.2: zp ZP_BYTE:92 [ test_8s::res#0 ] 
Uplift Scope [test_8u] 12.83: zp ZP_BYTE:47 [ test_8u::i#10 test_8u::i#1 ] 4.71: zp ZP_BYTE:120 [ test_8u::dividend#0 ] 3.3: zp ZP_BYTE:121 [ test_8u::divisor#0 ] 2.44: zp ZP_BYTE:123 [ test_8u::res#0 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:7 [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ] 
Uplift Scope [print_ln] 
Uplift Scope [main] 

Uplifting [divr16u] best 45214 combination zp ZP_WORD:26 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp ZP_WORD:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp ZP_WORD:28 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] zp ZP_WORD:24 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ] zp ZP_WORD:73 [ divr16u::return#3 ] zp ZP_WORD:116 [ divr16u::return#2 ] 
Uplifting [divr8u] best 42811 combination reg byte y [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] zp ZP_BYTE:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] reg byte a [ divr8u::$1 ] reg byte x [ divr8u::i#2 divr8u::i#1 ] zp ZP_BYTE:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] zp ZP_BYTE:98 [ divr8u::divisor#0 ] zp ZP_BYTE:99 [ divr8u::return#0 ] 
Limited combination testing to 100 combinations of 3888 possible.
Uplifting [] best 42742 combination zp ZP_WORD:10 [ print_char_cursor#138 print_char_cursor#84 print_char_cursor#139 print_char_cursor#19 print_char_cursor#135 print_char_cursor#132 print_char_cursor#164 print_char_cursor#130 print_char_cursor#173 print_char_cursor#141 print_char_cursor#1 print_char_cursor#168 print_char_cursor#190 ] zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ] reg byte x [ rem8s#3 rem8s#2 rem8s#33 ] zp ZP_WORD:22 [ rem16s#11 rem16s#2 rem16s#37 ] reg byte x [ rem8u#17 ] zp ZP_WORD:85 [ rem16u#1 ] 
Uplifting [print_str] best 42742 combination zp ZP_WORD:13 [ print_str::str#13 print_str::str#15 print_str::str#0 ] 
Uplifting [print_byte] best 42734 combination zp ZP_BYTE:12 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_word] best 42734 combination zp ZP_WORD:8 [ print_word::w#5 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] 
Uplifting [print_sword] best 42734 combination zp ZP_WORD:5 [ print_sword::w#7 print_sword::w#0 print_sword::w#10 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 ] 
Uplifting [print_sbyte] best 42734 combination zp ZP_BYTE:34 [ print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ] 
Uplifting [div8u] best 42596 combination reg byte x [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] reg byte a [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] reg byte a [ div8u::return#3 ] reg byte a [ div8u::return#2 ] zp ZP_BYTE:100 [ div8u::return#0 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [div8s] best 42491 combination reg byte a [ div8s::return#3 ] reg byte x [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] reg byte a [ div8s::return#2 div8s::return#1 div8s::return#7 ] zp ZP_BYTE:35 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] zp ZP_BYTE:89 [ div8s::dividend#0 ] zp ZP_BYTE:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] zp ZP_BYTE:95 [ div8s::$11 ] zp ZP_BYTE:90 [ div8s::divisor#0 ] zp ZP_BYTE:97 [ div8s::dividendu#1 ] zp ZP_BYTE:96 [ div8s::divisoru#1 ] zp ZP_BYTE:94 [ div8s::resultu#0 ] 
Limited combination testing to 100 combinations of 995328 possible.
Uplifting [divr16s] best 42480 combination zp ZP_WORD:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] zp ZP_WORD:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] zp ZP_WORD:20 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 ] reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] zp ZP_WORD:69 [ divr16s::return#3 ] zp ZP_WORD:77 [ divr16s::$16 ] zp ZP_WORD:65 [ divr16s::dividend#0 ] zp ZP_WORD:81 [ divr16s::dividendu#1 ] zp ZP_WORD:79 [ divr16s::divisoru#1 ] zp ZP_WORD:67 [ divr16s::divisor#0 ] zp ZP_WORD:75 [ divr16s::resultu#0 ] 
Uplifting [test_16u] best 42410 combination zp ZP_BYTE:46 [ test_16u::i#10 test_16u::i#1 ] reg byte x [ test_16u::$11 ] zp ZP_WORD:104 [ test_16u::dividend#0 ] zp ZP_WORD:106 [ test_16u::divisor#0 ] zp ZP_WORD:114 [ test_16u::res#0 ] 
Uplifting [test_16s] best 42340 combination zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] reg byte x [ test_16s::$11 ] zp ZP_WORD:51 [ test_16s::dividend#0 ] zp ZP_WORD:53 [ test_16s::divisor#0 ] zp ZP_WORD:61 [ test_16s::res#0 ] 
Uplifting [div16u] best 42340 combination zp ZP_WORD:112 [ div16u::return#2 ] zp ZP_WORD:108 [ div16u::dividend#0 ] zp ZP_WORD:110 [ div16u::divisor#0 ] zp ZP_WORD:118 [ div16u::return#0 ] 
Uplifting [div16s] best 42340 combination zp ZP_WORD:59 [ div16s::return#2 ] zp ZP_WORD:55 [ div16s::dividend#0 ] zp ZP_WORD:57 [ div16s::divisor#0 ] zp ZP_WORD:71 [ div16s::return#0 ] 
Uplifting [print_cls] best 42340 combination zp ZP_WORD:48 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [test_8s] best 42340 combination zp ZP_BYTE:33 [ test_8s::i#10 test_8s::i#1 ] zp ZP_BYTE:87 [ test_8s::dividend#0 ] zp ZP_BYTE:88 [ test_8s::divisor#0 ] zp ZP_BYTE:92 [ test_8s::res#0 ] 
Uplifting [test_8u] best 42340 combination zp ZP_BYTE:47 [ test_8u::i#10 test_8u::i#1 ] zp ZP_BYTE:120 [ test_8u::dividend#0 ] zp ZP_BYTE:121 [ test_8u::divisor#0 ] zp ZP_BYTE:123 [ test_8u::res#0 ] 
Uplifting [print_char] best 42319 combination reg byte a [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ] 
Uplifting [print_ln] best 42319 combination 
Uplifting [main] best 42319 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Uplifting [divr8u] best 42319 combination zp ZP_BYTE:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Uplifting [print_byte] best 42319 combination zp ZP_BYTE:12 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ]
Uplifting [print_sbyte] best 42319 combination zp ZP_BYTE:34 [ print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Uplifting [divr8u] best 42319 combination zp ZP_BYTE:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ test_8s::i#10 test_8s::i#1 ]
Uplifting [test_8s] best 42319 combination zp ZP_BYTE:33 [ test_8s::i#10 test_8s::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Uplifting [test_16s] best 42319 combination zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:46 [ test_16u::i#10 test_16u::i#1 ]
Uplifting [test_16u] best 42319 combination zp ZP_BYTE:46 [ test_16u::i#10 test_16u::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:47 [ test_8u::i#10 test_8u::i#1 ]
Uplifting [test_8u] best 42319 combination zp ZP_BYTE:47 [ test_8u::i#10 test_8u::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:98 [ divr8u::divisor#0 ]
Uplifting [divr8u] best 42319 combination zp ZP_BYTE:98 [ divr8u::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
Uplifting [div8s] best 42312 combination reg byte y [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:89 [ div8s::dividend#0 ]
Uplifting [div8s] best 42277 combination reg byte y [ div8s::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:87 [ test_8s::dividend#0 ]
Uplifting [test_8s] best 42277 combination zp ZP_BYTE:87 [ test_8s::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:120 [ test_8u::dividend#0 ]
Uplifting [test_8u] best 42277 combination zp ZP_BYTE:120 [ test_8u::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
Uplifting [div8s] best 42277 combination zp ZP_BYTE:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:95 [ div8s::$11 ]
Uplifting [div8s] best 42273 combination reg byte a [ div8s::$11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:99 [ divr8u::return#0 ]
Uplifting [divr8u] best 42267 combination reg byte a [ divr8u::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:100 [ div8u::return#0 ]
Uplifting [div8u] best 42231 combination reg byte a [ div8u::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:121 [ test_8u::divisor#0 ]
Uplifting [test_8u] best 42231 combination zp ZP_BYTE:121 [ test_8u::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:88 [ test_8s::divisor#0 ]
Uplifting [test_8s] best 42231 combination zp ZP_BYTE:88 [ test_8s::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:123 [ test_8u::res#0 ]
Uplifting [test_8u] best 42231 combination zp ZP_BYTE:123 [ test_8u::res#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:92 [ test_8s::res#0 ]
Uplifting [test_8s] best 42231 combination zp ZP_BYTE:92 [ test_8s::res#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:90 [ div8s::divisor#0 ]
Uplifting [div8s] best 42196 combination reg byte x [ div8s::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:97 [ div8s::dividendu#1 ]
Uplifting [div8s] best 42192 combination reg byte a [ div8s::dividendu#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:96 [ div8s::divisoru#1 ]
Uplifting [div8s] best 42188 combination reg byte x [ div8s::divisoru#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:94 [ div8s::resultu#0 ]
Uplifting [div8s] best 42185 combination reg byte y [ div8s::resultu#0 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 ] ] with [ zp ZP_WORD:75 [ divr16s::resultu#0 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ print_sword::w#7 print_sword::w#0 print_sword::w#10 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 ] ] with [ zp ZP_WORD:8 [ print_word::w#5 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ print_sword::w#7 print_sword::w#0 print_sword::w#10 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_word::w#5 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] ] with [ zp ZP_WORD:51 [ test_16s::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:12 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] ] with [ zp ZP_BYTE:34 [ print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:12 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 ] ] with [ zp ZP_BYTE:120 [ test_8u::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] ] with [ zp ZP_WORD:28 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] ] with [ zp ZP_WORD:65 [ divr16s::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16s::dividend#0 ] ] with [ zp ZP_WORD:81 [ divr16s::dividendu#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] ] with [ zp ZP_WORD:24 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ] ] with [ zp ZP_WORD:67 [ divr16s::divisor#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisor#0 ] ] with [ zp ZP_WORD:79 [ divr16s::divisoru#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 divr16s::resultu#0 ] ] with [ zp ZP_WORD:69 [ divr16s::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:22 [ rem16s#11 rem16s#2 rem16s#37 ] ] with [ zp ZP_WORD:77 [ divr16s::$16 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:22 [ rem16s#11 rem16s#2 rem16s#37 divr16s::$16 ] ] with [ zp ZP_WORD:85 [ rem16u#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp ZP_WORD:73 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 ] ] with [ zp ZP_WORD:116 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:53 [ test_16s::divisor#0 ] ] with [ zp ZP_WORD:57 [ div16s::divisor#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:59 [ div16s::return#2 ] ] with [ zp ZP_WORD:61 [ test_16s::res#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:59 [ div16s::return#2 test_16s::res#0 ] ] with [ zp ZP_WORD:71 [ div16s::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:104 [ test_16u::dividend#0 ] ] with [ zp ZP_WORD:108 [ div16u::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:106 [ test_16u::divisor#0 ] ] with [ zp ZP_WORD:110 [ div16u::divisor#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:112 [ div16u::return#2 ] ] with [ zp ZP_WORD:114 [ test_16u::res#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:112 [ div16u::return#2 test_16u::res#0 ] ] with [ zp ZP_WORD:118 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ print_sword::w#7 print_sword::w#0 print_sword::w#10 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_word::w#5 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 ] ] with [ zp ZP_WORD:55 [ div16s::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ print_sword::w#7 print_sword::w#0 print_sword::w#10 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_word::w#5 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 div16s::dividend#0 ] ] with [ zp ZP_WORD:104 [ test_16u::dividend#0 div16u::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:12 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 test_8u::dividend#0 ] ] with [ zp ZP_BYTE:87 [ test_8s::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisor#0 divr16s::divisoru#1 ] ] with [ zp ZP_WORD:106 [ test_16u::divisor#0 div16u::divisor#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 divr16s::resultu#0 divr16s::return#3 ] ] with [ zp ZP_WORD:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 ] ] with [ zp ZP_WORD:59 [ div16s::return#2 test_16s::res#0 div16s::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:22 [ rem16s#11 rem16s#2 rem16s#37 divr16s::$16 rem16u#1 ] ] with [ zp ZP_WORD:26 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 div16s::return#2 test_16s::res#0 div16s::return#0 ] ] with [ zp ZP_WORD:112 [ div16u::return#2 test_16u::res#0 div16u::return#0 ] ] - score: 1
Allocated (was zp ZP_WORD:10) zp ZP_WORD:7 [ print_char_cursor#138 print_char_cursor#84 print_char_cursor#139 print_char_cursor#19 print_char_cursor#135 print_char_cursor#132 print_char_cursor#164 print_char_cursor#130 print_char_cursor#173 print_char_cursor#141 print_char_cursor#1 print_char_cursor#168 print_char_cursor#190 ]
Allocated (was zp ZP_BYTE:12) zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 test_8u::dividend#0 test_8s::dividend#0 ]
Allocated (was zp ZP_WORD:13) zp ZP_WORD:10 [ print_str::str#13 print_str::str#15 print_str::str#0 ]
Allocated (was zp ZP_WORD:15) zp ZP_WORD:12 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 ]
Allocated (was zp ZP_WORD:17) zp ZP_WORD:14 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisor#0 divr16s::divisoru#1 test_16u::divisor#0 div16u::divisor#0 ]
Allocated (was zp ZP_WORD:20) zp ZP_WORD:16 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 div16s::return#2 test_16s::res#0 div16s::return#0 div16u::return#2 test_16u::res#0 div16u::return#0 ]
Allocated (was zp ZP_WORD:22) zp ZP_WORD:18 [ rem16s#11 rem16s#2 rem16s#37 divr16s::$16 rem16u#1 divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated (was zp ZP_BYTE:33) zp ZP_BYTE:20 [ test_8s::i#10 test_8s::i#1 ]
Allocated (was zp ZP_BYTE:37) zp ZP_BYTE:21 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
Allocated (was zp ZP_BYTE:43) zp ZP_BYTE:22 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Allocated (was zp ZP_BYTE:44) zp ZP_BYTE:23 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Allocated (was zp ZP_BYTE:46) zp ZP_BYTE:24 [ test_16u::i#10 test_16u::i#1 ]
Allocated (was zp ZP_BYTE:47) zp ZP_BYTE:25 [ test_8u::i#10 test_8u::i#1 ]
Allocated (was zp ZP_WORD:48) zp ZP_WORD:26 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated (was zp ZP_WORD:53) zp ZP_WORD:28 [ test_16s::divisor#0 div16s::divisor#0 ]
Allocated (was zp ZP_BYTE:88) zp ZP_BYTE:30 [ test_8s::divisor#0 ]
Allocated (was zp ZP_BYTE:92) zp ZP_BYTE:31 [ test_8s::res#0 ]
Allocated (was zp ZP_BYTE:98) zp ZP_BYTE:32 [ divr8u::divisor#0 ]
Allocated (was zp ZP_BYTE:121) zp ZP_BYTE:33 [ test_8u::divisor#0 ]
Allocated (was zp ZP_BYTE:123) zp ZP_BYTE:34 [ test_8u::res#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Test the binary division library
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_char_cursor = 7
  .label print_line_cursor = 3
  .label rem16u = $12
  .label rem16s = $12
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call print_cls 
  //SEG12 [287] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [7] call test_8u 
  //SEG16 [258] phi from main::@1 to test_8u [phi:main::@1->test_8u]
  test_8u_from_b1:
    jsr test_8u
  //SEG17 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [9] call test_16u 
  //SEG20 [222] phi from main::@2 to test_16u [phi:main::@2->test_16u]
  test_16u_from_b2:
    jsr test_16u
  //SEG21 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG22 main::@3
  b3:
  //SEG23 [11] call test_8s 
  //SEG24 [134] phi from main::@3 to test_8s [phi:main::@3->test_8s]
  test_8s_from_b3:
    jsr test_8s
  //SEG25 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG26 main::@4
  b4:
  //SEG27 [13] call test_16s 
  //SEG28 [15] phi from main::@4 to test_16s [phi:main::@4->test_16s]
  test_16s_from_b4:
    jsr test_16s
    jmp breturn
  //SEG29 main::@return
  breturn:
  //SEG30 [14] return 
    rts
}
//SEG31 test_16s
test_16s: {
    .label dividend = 5
    .label divisor = $1c
    .label res = $10
    .label i = 2
  //SEG32 [16] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
  b1_from_test_16s:
  //SEG33 [16] phi (byte) test_16s::i#10 = (byte) 0 [phi:test_16s->test_16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG34 [16] phi from test_16s::@10 to test_16s::@1 [phi:test_16s::@10->test_16s::@1]
  b1_from_b10:
  //SEG35 [16] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@10->test_16s::@1#0] -- register_copy 
    jmp b1
  //SEG36 test_16s::@1
  b1:
  //SEG37 [17] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda i
    asl
    tax
  //SEG38 [18] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuxx 
    lda dividends,x
    sta dividend
    lda dividends+1,x
    sta dividend+1
  //SEG39 [19] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuxx 
    lda divisors,x
    sta divisor
    lda divisors+1,x
    sta divisor+1
  //SEG40 [20] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
  //SEG41 [21] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
  //SEG42 [22] call div16s 
    jsr div16s
  //SEG43 [23] (signed word) div16s::return#2 ← (signed word) div16s::return#0
    jmp b2
  //SEG44 test_16s::@2
  b2:
  //SEG45 [24] (signed word) test_16s::res#0 ← (signed word) div16s::return#2
  //SEG46 [25] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0
  //SEG47 [26] (byte*~) print_char_cursor#164 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG48 [27] call print_sword 
  //SEG49 [50] phi from test_16s::@2 to print_sword [phi:test_16s::@2->print_sword]
  print_sword_from_b2:
  //SEG50 [50] phi (byte*) print_char_cursor#132 = (byte*~) print_char_cursor#164 [phi:test_16s::@2->print_sword#0] -- register_copy 
  //SEG51 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#1 [phi:test_16s::@2->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG52 [28] phi from test_16s::@2 to test_16s::@3 [phi:test_16s::@2->test_16s::@3]
  b3_from_b2:
    jmp b3
  //SEG53 test_16s::@3
  b3:
  //SEG54 [29] call print_str 
  //SEG55 [79] phi from test_16s::@3 to print_str [phi:test_16s::@3->print_str]
  print_str_from_b3:
  //SEG56 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_16s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b4
  //SEG57 test_16s::@4
  b4:
  //SEG58 [30] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 -- vwsz1=vwsz2 
    lda divisor
    sta print_sword.w
    lda divisor+1
    sta print_sword.w+1
  //SEG59 [31] call print_sword 
  //SEG60 [50] phi from test_16s::@4 to print_sword [phi:test_16s::@4->print_sword]
  print_sword_from_b4:
  //SEG61 [50] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:test_16s::@4->print_sword#0] -- register_copy 
  //SEG62 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#2 [phi:test_16s::@4->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG63 [32] phi from test_16s::@4 to test_16s::@5 [phi:test_16s::@4->test_16s::@5]
  b5_from_b4:
    jmp b5
  //SEG64 test_16s::@5
  b5:
  //SEG65 [33] call print_str 
  //SEG66 [79] phi from test_16s::@5 to print_str [phi:test_16s::@5->print_str]
  print_str_from_b5:
  //SEG67 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_16s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b6
  //SEG68 test_16s::@6
  b6:
  //SEG69 [34] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 -- vwsz1=vwsz2 
    lda res
    sta print_sword.w
    lda res+1
    sta print_sword.w+1
  //SEG70 [35] call print_sword 
  //SEG71 [50] phi from test_16s::@6 to print_sword [phi:test_16s::@6->print_sword]
  print_sword_from_b6:
  //SEG72 [50] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:test_16s::@6->print_sword#0] -- register_copy 
  //SEG73 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#3 [phi:test_16s::@6->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG74 [36] phi from test_16s::@6 to test_16s::@7 [phi:test_16s::@6->test_16s::@7]
  b7_from_b6:
    jmp b7
  //SEG75 test_16s::@7
  b7:
  //SEG76 [37] call print_str 
  //SEG77 [79] phi from test_16s::@7 to print_str [phi:test_16s::@7->print_str]
  print_str_from_b7:
  //SEG78 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_16s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b8
  //SEG79 test_16s::@8
  b8:
  //SEG80 [38] (signed word) print_sword::w#4 ← (signed word) rem16s#11 -- vwsz1=vwsz2 
    lda rem16s
    sta print_sword.w
    lda rem16s+1
    sta print_sword.w+1
  //SEG81 [39] call print_sword 
  //SEG82 [50] phi from test_16s::@8 to print_sword [phi:test_16s::@8->print_sword]
  print_sword_from_b8:
  //SEG83 [50] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:test_16s::@8->print_sword#0] -- register_copy 
  //SEG84 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#4 [phi:test_16s::@8->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG85 [40] phi from test_16s::@8 to test_16s::@9 [phi:test_16s::@8->test_16s::@9]
  b9_from_b8:
    jmp b9
  //SEG86 test_16s::@9
  b9:
  //SEG87 [41] call print_ln 
  //SEG88 [45] phi from test_16s::@9 to print_ln [phi:test_16s::@9->print_ln]
  print_ln_from_b9:
  //SEG89 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16s::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b10
  //SEG90 test_16s::@10
  b10:
  //SEG91 [42] (byte) test_16s::i#1 ← ++ (byte) test_16s::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG92 [43] if((byte) test_16s::i#1!=(byte) 6) goto test_16s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b1_from_b10
    jmp breturn
  //SEG93 test_16s::@return
  breturn:
  //SEG94 [44] return 
    rts
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
//SEG95 print_ln
// Print a newline
print_ln: {
  //SEG96 [46] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG97 [46] phi (byte*) print_line_cursor#20 = (byte*) print_line_cursor#39 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG98 print_ln::@1
  b1:
  //SEG99 [47] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG100 [48] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG101 print_ln::@return
  breturn:
  //SEG102 [49] return 
    rts
}
//SEG103 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(5) w)
print_sword: {
    .label w = 5
  //SEG104 [51] if((signed word) print_sword::w#10<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda w+1
    bmi b1_from_print_sword
  //SEG105 [52] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
  b3_from_print_sword:
    jmp b3
  //SEG106 print_sword::@3
  b3:
  //SEG107 [53] call print_char 
  //SEG108 [61] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
  print_char_from_b3:
  //SEG109 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#132 [phi:print_sword::@3->print_char#0] -- register_copy 
  //SEG110 [61] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG111 [54] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG112 [54] phi (signed word) print_sword::w#7 = (signed word) print_sword::w#10 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
    jmp b2
  //SEG113 print_sword::@2
  b2:
  //SEG114 [55] (word) print_word::w#0 ← (word)(signed word) print_sword::w#7
  //SEG115 [56] call print_word 
  //SEG116 [65] phi from print_sword::@2 to print_word [phi:print_sword::@2->print_word]
  print_word_from_b2:
  //SEG117 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#19 [phi:print_sword::@2->print_word#0] -- register_copy 
  //SEG118 [65] phi (word) print_word::w#5 = (word) print_word::w#0 [phi:print_sword::@2->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG119 print_sword::@return
  breturn:
  //SEG120 [57] return 
    rts
  //SEG121 [58] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
  b1_from_print_sword:
    jmp b1
  //SEG122 print_sword::@1
  b1:
  //SEG123 [59] call print_char 
  //SEG124 [61] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
  print_char_from_b1:
  //SEG125 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#132 [phi:print_sword::@1->print_char#0] -- register_copy 
  //SEG126 [61] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG127 print_sword::@4
  b4:
  //SEG128 [60] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#10 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc w
    sta w
    lda #0
    sbc w+1
    sta w+1
    jmp b2_from_b4
}
//SEG129 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG130 [62] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG131 [63] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#84 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG132 print_char::@return
  breturn:
  //SEG133 [64] return 
    rts
}
//SEG134 print_word
// Print a word as HEX
// print_word(word zeropage(5) w)
print_word: {
    .label w = 5
  //SEG135 [66] (byte) print_byte::b#1 ← > (word) print_word::w#5 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG136 [67] call print_byte 
  //SEG137 [71] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG138 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#138 [phi:print_word->print_byte#0] -- register_copy 
  //SEG139 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG140 print_word::@1
  b1:
  //SEG141 [68] (byte) print_byte::b#2 ← < (word) print_word::w#5 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG142 [69] call print_byte 
  //SEG143 [71] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG144 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#19 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG145 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG146 print_word::@return
  breturn:
  //SEG147 [70] return 
    rts
}
//SEG148 print_byte
// Print a byte as HEX
// print_byte(byte zeropage(9) b)
print_byte: {
    .label b = 9
  //SEG149 [72] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG150 [73] (byte) print_char::ch#4 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG151 [74] call print_char 
  //SEG152 [61] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG153 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#139 [phi:print_byte->print_char#0] -- register_copy 
  //SEG154 [61] phi (byte) print_char::ch#6 = (byte) print_char::ch#4 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG155 print_byte::@1
  b1:
  //SEG156 [75] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG157 [76] (byte) print_char::ch#5 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG158 [77] call print_char 
  //SEG159 [61] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG160 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#19 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG161 [61] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG162 print_byte::@return
  breturn:
  //SEG163 [78] return 
    rts
}
//SEG164 print_str
// Print a zero-terminated string
// print_str(byte* zeropage($a) str)
print_str: {
    .label str = $a
  //SEG165 [80] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG166 [80] phi (byte*) print_char_cursor#130 = (byte*) print_char_cursor#19 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG167 [80] phi (byte*) print_str::str#13 = (byte*) print_str::str#15 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG168 print_str::@1
  b1:
  //SEG169 [81] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG170 print_str::@return
  breturn:
  //SEG171 [82] return 
    rts
  //SEG172 print_str::@2
  b2:
  //SEG173 [83] *((byte*) print_char_cursor#130) ← *((byte*) print_str::str#13) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG174 [84] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#130 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG175 [85] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG176 div16s
// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div16s(signed word zeropage(5) dividend, signed word zeropage($1c) divisor)
div16s: {
    .label return = $10
    .label dividend = 5
    .label divisor = $1c
  //SEG177 [86] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 -- vwsz1=vwsz2 
    lda dividend
    sta divr16s.dividend
    lda dividend+1
    sta divr16s.dividend+1
  //SEG178 [87] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 -- vwsz1=vwsz2 
    lda divisor
    sta divr16s.divisor
    lda divisor+1
    sta divr16s.divisor+1
  //SEG179 [88] call divr16s 
    jsr divr16s
  //SEG180 [89] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
    jmp b1
  //SEG181 div16s::@1
  b1:
  //SEG182 [90] (signed word) div16s::return#0 ← (signed word) divr16s::return#3
    jmp breturn
  //SEG183 div16s::@return
  breturn:
  //SEG184 [91] return 
    rts
}
//SEG185 divr16s
// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// divr16s(signed word zeropage($c) dividend, signed word zeropage($e) divisor)
divr16s: {
    .label _16 = $12
    .label dividendu = $c
    .label divisoru = $e
    .label resultu = $10
    .label return = $10
    .label dividend = $c
    .label divisor = $e
  //SEG186 [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 -- vwsz1_lt_0_then_la1 
    lda dividend+1
    bmi b1
    jmp b6
  //SEG187 divr16s::@6
  b6:
  //SEG188 [93] (word~) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
  //SEG189 [94] phi from divr16s::@6 to divr16s::@2 [phi:divr16s::@6->divr16s::@2]
  b2_from_b6:
  //SEG190 [94] phi (word) divr16s::dividendu#3 = (word~) divr16s::dividendu#8 [phi:divr16s::@6->divr16s::@2#0] -- register_copy 
  //SEG191 [94] phi (byte) divr16s::neg#3 = (byte) 0 [phi:divr16s::@6->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
    jmp b2
  //SEG192 divr16s::@2
  b2:
  //SEG193 [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 -- vwsz1_lt_0_then_la1 
    lda divisor+1
    bmi b3
    jmp b7
  //SEG194 divr16s::@7
  b7:
  //SEG195 [96] (word~) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
  //SEG196 [97] phi from divr16s::@3 divr16s::@7 to divr16s::@4 [phi:divr16s::@3/divr16s::@7->divr16s::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG197 [97] phi (byte) divr16s::neg#4 = (byte) divr16s::neg#2 [phi:divr16s::@3/divr16s::@7->divr16s::@4#0] -- register_copy 
  //SEG198 [97] phi (word) divr16s::divisoru#3 = (word~) divr16s::divisoru#4 [phi:divr16s::@3/divr16s::@7->divr16s::@4#1] -- register_copy 
    jmp b4
  //SEG199 divr16s::@4
  b4:
  //SEG200 [98] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3
  //SEG201 [99] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3
  //SEG202 [100] call divr16u 
  //SEG203 [116] phi from divr16s::@4 to divr16u [phi:divr16s::@4->divr16u]
  divr16u_from_b4:
  //SEG204 [116] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#1 [phi:divr16s::@4->divr16u#0] -- register_copy 
  //SEG205 [116] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#2 [phi:divr16s::@4->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG206 [101] (word) divr16u::return#3 ← (word) divr16u::return#0
    jmp b9
  //SEG207 divr16s::@9
  b9:
  //SEG208 [102] (word) divr16s::resultu#0 ← (word) divr16u::return#3
  //SEG209 [103] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq b5
    jmp b8
  //SEG210 divr16s::@8
  b8:
  //SEG211 [104] (signed word~) divr16s::$16 ← (signed word)(word) rem16u#1
  //SEG212 [105] (signed word) rem16s#2 ← - (signed word~) divr16s::$16 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc rem16s
    sta rem16s
    lda #0
    sbc rem16s+1
    sta rem16s+1
  //SEG213 [106] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc return
    sta return
    lda #0
    sbc return+1
    sta return+1
  //SEG214 [107] phi from divr16s::@5 divr16s::@8 to divr16s::@return [phi:divr16s::@5/divr16s::@8->divr16s::@return]
  breturn_from_b5:
  breturn_from_b8:
  //SEG215 [107] phi (signed word) rem16s#11 = (signed word~) rem16s#37 [phi:divr16s::@5/divr16s::@8->divr16s::@return#0] -- register_copy 
  //SEG216 [107] phi (signed word) divr16s::return#2 = (signed word~) divr16s::return#7 [phi:divr16s::@5/divr16s::@8->divr16s::@return#1] -- register_copy 
    jmp breturn
  //SEG217 divr16s::@return
  breturn:
  //SEG218 [108] return 
    rts
  //SEG219 divr16s::@5
  b5:
  //SEG220 [109] (signed word~) divr16s::return#7 ← (signed word)(word) divr16s::resultu#0
  //SEG221 [110] (signed word~) rem16s#37 ← (signed word)(word) rem16u#1
    jmp breturn_from_b5
  //SEG222 divr16s::@3
  b3:
  //SEG223 [111] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc divisoru
    sta divisoru
    lda #0
    sbc divisoru+1
    sta divisoru+1
  //SEG224 [112] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
  //SEG225 [113] (word~) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
    jmp b4_from_b3
  //SEG226 divr16s::@1
  b1:
  //SEG227 [114] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc dividendu
    sta dividendu
    lda #0
    sbc dividendu+1
    sta dividendu+1
  //SEG228 [115] (word~) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
  //SEG229 [94] phi from divr16s::@1 to divr16s::@2 [phi:divr16s::@1->divr16s::@2]
  b2_from_b1:
  //SEG230 [94] phi (word) divr16s::dividendu#3 = (word~) divr16s::dividendu#7 [phi:divr16s::@1->divr16s::@2#0] -- register_copy 
  //SEG231 [94] phi (byte) divr16s::neg#3 = (byte) 1 [phi:divr16s::@1->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
    jmp b2
}
//SEG232 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($c) dividend, word zeropage($e) divisor, word zeropage($12) rem)
divr16u: {
    .label rem = $12
    .label dividend = $c
    .label quotient = $10
    .label return = $10
    .label divisor = $e
  //SEG233 [117] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG234 [117] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG235 [117] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG236 [117] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG237 [117] phi (word) divr16u::rem#5 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #0
    sta rem
    lda #0
    sta rem+1
    jmp b1
  //SEG238 [117] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG239 [117] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG240 [117] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG241 [117] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG242 [117] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG243 divr16u::@1
  b1:
  //SEG244 [118] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG245 [119] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG246 [120] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG247 [121] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG248 divr16u::@4
  b4:
  //SEG249 [122] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG250 [123] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG251 [123] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG252 divr16u::@2
  b2:
  //SEG253 [124] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG254 [125] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG255 [126] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3_from_b2
    bne !+
    lda rem
    cmp divisor
    bcc b3_from_b2
  !:
    jmp b5
  //SEG256 divr16u::@5
  b5:
  //SEG257 [127] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG258 [128] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG259 [129] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG260 [129] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG261 [129] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG262 divr16u::@3
  b3:
  //SEG263 [130] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG264 [131] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp b6
  //SEG265 divr16u::@6
  b6:
  //SEG266 [132] (word) rem16u#1 ← (word) divr16u::rem#11
    jmp breturn
  //SEG267 divr16u::@return
  breturn:
  //SEG268 [133] return 
    rts
}
//SEG269 test_8s
test_8s: {
    .label dividend = 9
    .label divisor = $1e
    .label res = $1f
    .label i = $14
  //SEG270 [135] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  b1_from_test_8s:
  //SEG271 [135] phi (byte) test_8s::i#10 = (byte) 0 [phi:test_8s->test_8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG272 [135] phi from test_8s::@10 to test_8s::@1 [phi:test_8s::@10->test_8s::@1]
  b1_from_b10:
  //SEG273 [135] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@10->test_8s::@1#0] -- register_copy 
    jmp b1
  //SEG274 test_8s::@1
  b1:
  //SEG275 [136] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG276 [137] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG277 [138] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 -- vbsyy=vbsz1 
    ldy dividend
  //SEG278 [139] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 -- vbsxx=vbsz1 
    ldx divisor
  //SEG279 [140] call div8s 
    jsr div8s
  //SEG280 [141] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
    jmp b2
  //SEG281 test_8s::@2
  b2:
  //SEG282 [142] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 -- vbsz1=vbsaa 
    sta res
  //SEG283 [143] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0
  //SEG284 [144] (byte*~) print_char_cursor#168 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG285 [145] call print_sbyte 
  //SEG286 [163] phi from test_8s::@2 to print_sbyte [phi:test_8s::@2->print_sbyte]
  print_sbyte_from_b2:
  //SEG287 [163] phi (byte*) print_char_cursor#135 = (byte*~) print_char_cursor#168 [phi:test_8s::@2->print_sbyte#0] -- register_copy 
  //SEG288 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#1 [phi:test_8s::@2->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG289 [146] phi from test_8s::@2 to test_8s::@3 [phi:test_8s::@2->test_8s::@3]
  b3_from_b2:
    jmp b3
  //SEG290 test_8s::@3
  b3:
  //SEG291 [147] call print_str 
  //SEG292 [79] phi from test_8s::@3 to print_str [phi:test_8s::@3->print_str]
  print_str_from_b3:
  //SEG293 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_8s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b4
  //SEG294 test_8s::@4
  b4:
  //SEG295 [148] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG296 [149] call print_sbyte 
  //SEG297 [163] phi from test_8s::@4 to print_sbyte [phi:test_8s::@4->print_sbyte]
  print_sbyte_from_b4:
  //SEG298 [163] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#130 [phi:test_8s::@4->print_sbyte#0] -- register_copy 
  //SEG299 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#2 [phi:test_8s::@4->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG300 [150] phi from test_8s::@4 to test_8s::@5 [phi:test_8s::@4->test_8s::@5]
  b5_from_b4:
    jmp b5
  //SEG301 test_8s::@5
  b5:
  //SEG302 [151] call print_str 
  //SEG303 [79] phi from test_8s::@5 to print_str [phi:test_8s::@5->print_str]
  print_str_from_b5:
  //SEG304 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_8s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b6
  //SEG305 test_8s::@6
  b6:
  //SEG306 [152] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG307 [153] call print_sbyte 
  //SEG308 [163] phi from test_8s::@6 to print_sbyte [phi:test_8s::@6->print_sbyte]
  print_sbyte_from_b6:
  //SEG309 [163] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#130 [phi:test_8s::@6->print_sbyte#0] -- register_copy 
  //SEG310 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#3 [phi:test_8s::@6->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG311 [154] phi from test_8s::@6 to test_8s::@7 [phi:test_8s::@6->test_8s::@7]
  b7_from_b6:
    jmp b7
  //SEG312 test_8s::@7
  b7:
  //SEG313 [155] call print_str 
  //SEG314 [79] phi from test_8s::@7 to print_str [phi:test_8s::@7->print_str]
  print_str_from_b7:
  //SEG315 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_8s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b8
  //SEG316 test_8s::@8
  b8:
  //SEG317 [156] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 -- vbsz1=vbsxx 
    stx print_sbyte.b
  //SEG318 [157] call print_sbyte 
  //SEG319 [163] phi from test_8s::@8 to print_sbyte [phi:test_8s::@8->print_sbyte]
  print_sbyte_from_b8:
  //SEG320 [163] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#130 [phi:test_8s::@8->print_sbyte#0] -- register_copy 
  //SEG321 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#4 [phi:test_8s::@8->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG322 [158] phi from test_8s::@8 to test_8s::@9 [phi:test_8s::@8->test_8s::@9]
  b9_from_b8:
    jmp b9
  //SEG323 test_8s::@9
  b9:
  //SEG324 [159] call print_ln 
  //SEG325 [45] phi from test_8s::@9 to print_ln [phi:test_8s::@9->print_ln]
  print_ln_from_b9:
  //SEG326 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_8s::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b10
  //SEG327 test_8s::@10
  b10:
  //SEG328 [160] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG329 [161] if((byte) test_8s::i#1!=(byte) 6) goto test_8s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b1_from_b10
    jmp breturn
  //SEG330 test_8s::@return
  breturn:
  //SEG331 [162] return 
    rts
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG332 print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage(9) b)
print_sbyte: {
    .label b = 9
  //SEG333 [164] if((signed byte) print_sbyte::b#10<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda b
    bmi b1_from_print_sbyte
  //SEG334 [165] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  b3_from_print_sbyte:
    jmp b3
  //SEG335 print_sbyte::@3
  b3:
  //SEG336 [166] call print_char 
  //SEG337 [61] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  print_char_from_b3:
  //SEG338 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#135 [phi:print_sbyte::@3->print_char#0] -- register_copy 
  //SEG339 [61] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG340 [167] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG341 [167] phi (signed byte) print_sbyte::b#7 = (signed byte) print_sbyte::b#10 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    jmp b2
  //SEG342 print_sbyte::@2
  b2:
  //SEG343 [168] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#7
  //SEG344 [169] call print_byte 
  //SEG345 [71] phi from print_sbyte::@2 to print_byte [phi:print_sbyte::@2->print_byte]
  print_byte_from_b2:
  //SEG346 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#19 [phi:print_sbyte::@2->print_byte#0] -- register_copy 
  //SEG347 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#0 [phi:print_sbyte::@2->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG348 print_sbyte::@return
  breturn:
  //SEG349 [170] return 
    rts
  //SEG350 [171] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  b1_from_print_sbyte:
    jmp b1
  //SEG351 print_sbyte::@1
  b1:
  //SEG352 [172] call print_char 
  //SEG353 [61] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  print_char_from_b1:
  //SEG354 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#135 [phi:print_sbyte::@1->print_char#0] -- register_copy 
  //SEG355 [61] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG356 print_sbyte::@4
  b4:
  //SEG357 [173] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#10 -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
    jmp b2_from_b4
}
//SEG358 div8s
// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div8s(signed byte register(Y) dividend, signed byte register(X) divisor)
div8s: {
    .label neg = $15
  //SEG359 [174] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1 -- vbsyy_lt_0_then_la1 
    cpy #0
    bmi b1
    jmp b6
  //SEG360 div8s::@6
  b6:
  //SEG361 [175] (byte~) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0
  //SEG362 [176] phi from div8s::@6 to div8s::@2 [phi:div8s::@6->div8s::@2]
  b2_from_b6:
  //SEG363 [176] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#8 [phi:div8s::@6->div8s::@2#0] -- register_copy 
  //SEG364 [176] phi (byte) div8s::neg#3 = (byte) 0 [phi:div8s::@6->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
  //SEG365 div8s::@2
  b2:
  //SEG366 [177] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi b3
    jmp b7
  //SEG367 div8s::@7
  b7:
  //SEG368 [178] (byte~) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0
  //SEG369 [179] phi from div8s::@3 div8s::@7 to div8s::@4 [phi:div8s::@3/div8s::@7->div8s::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG370 [179] phi (byte) div8s::neg#4 = (byte) div8s::neg#2 [phi:div8s::@3/div8s::@7->div8s::@4#0] -- register_copy 
  //SEG371 [179] phi (byte) div8s::divisoru#3 = (byte~) div8s::divisoru#4 [phi:div8s::@3/div8s::@7->div8s::@4#1] -- register_copy 
    jmp b4
  //SEG372 div8s::@4
  b4:
  //SEG373 [180] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 -- vbuaa=vbuyy 
    tya
  //SEG374 [181] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
  //SEG375 [182] call div8u 
  //SEG376 [198] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  div8u_from_b4:
  //SEG377 [198] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG378 [198] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
  //SEG379 [183] (byte) div8u::return#2 ← (byte) div8u::return#0
    jmp b9
  //SEG380 div8s::@9
  b9:
  //SEG381 [184] (byte) div8s::resultu#0 ← (byte) div8u::return#2 -- vbuyy=vbuaa 
    tay
  //SEG382 [185] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5 -- vbuz1_eq_0_then_la1 
    lda neg
    cmp #0
    beq b5
    jmp b8
  //SEG383 div8s::@8
  b8:
  //SEG384 [186] (signed byte~) div8s::$11 ← (signed byte)(byte) rem8u#17 -- vbsaa=vbsxx 
    txa
  //SEG385 [187] (signed byte) rem8s#2 ← - (signed byte~) div8s::$11 -- vbsxx=_neg_vbsaa 
    eor #$ff
    clc
    adc #1
    tax
  //SEG386 [188] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
  //SEG387 [189] phi from div8s::@5 div8s::@8 to div8s::@return [phi:div8s::@5/div8s::@8->div8s::@return]
  breturn_from_b5:
  breturn_from_b8:
  //SEG388 [189] phi (signed byte) rem8s#3 = (signed byte~) rem8s#33 [phi:div8s::@5/div8s::@8->div8s::@return#0] -- register_copy 
  //SEG389 [189] phi (signed byte) div8s::return#2 = (signed byte~) div8s::return#7 [phi:div8s::@5/div8s::@8->div8s::@return#1] -- register_copy 
    jmp breturn
  //SEG390 div8s::@return
  breturn:
  //SEG391 [190] return 
    rts
  //SEG392 div8s::@5
  b5:
  //SEG393 [191] (signed byte~) div8s::return#7 ← (signed byte)(byte) div8s::resultu#0 -- vbsaa=vbsyy 
    tya
  //SEG394 [192] (signed byte~) rem8s#33 ← (signed byte)(byte) rem8u#17
    jmp breturn_from_b5
  //SEG395 div8s::@3
  b3:
  //SEG396 [193] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
  //SEG397 [194] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #1
    eor neg
    sta neg
  //SEG398 [195] (byte~) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisoru#1
    jmp b4_from_b3
  //SEG399 div8s::@1
  b1:
  //SEG400 [196] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
  //SEG401 [197] (byte~) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividendu#1 -- vbuyy=vbuaa 
    tay
  //SEG402 [176] phi from div8s::@1 to div8s::@2 [phi:div8s::@1->div8s::@2]
  b2_from_b1:
  //SEG403 [176] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#7 [phi:div8s::@1->div8s::@2#0] -- register_copy 
  //SEG404 [176] phi (byte) div8s::neg#3 = (byte) 1 [phi:div8s::@1->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
}
//SEG405 div8u
// Performs division on two 8 bit unsigned bytes
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8u
// Implemented using simple binary division
// div8u(byte register(A) dividend, byte register(X) divisor)
div8u: {
  //SEG406 [199] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 -- vbuz1=vbuaa 
    sta divr8u.dividend
  //SEG407 [200] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 -- vbuz1=vbuxx 
    stx divr8u.divisor
  //SEG408 [201] call divr8u 
  //SEG409 [205] phi from div8u to divr8u [phi:div8u->divr8u]
  divr8u_from_div8u:
    jsr divr8u
  //SEG410 [202] (byte) divr8u::return#0 ← (byte) divr8u::return#1 -- vbuaa=vbuz1 
    lda divr8u.return
    jmp b1
  //SEG411 div8u::@1
  b1:
  //SEG412 [203] (byte) div8u::return#0 ← (byte) divr8u::return#0
    jmp breturn
  //SEG413 div8u::@return
  breturn:
  //SEG414 [204] return 
    rts
}
//SEG415 divr8u
// Performs division on two 8 bit unsigned bytes and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
// divr8u(byte zeropage($16) dividend, byte zeropage($20) divisor, byte register(Y) rem)
divr8u: {
    .label dividend = $16
    .label divisor = $20
    .label quotient = $17
    .label return = $17
  //SEG416 [206] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  b1_from_divr8u:
  //SEG417 [206] phi (byte) divr8u::i#2 = (byte) 0 [phi:divr8u->divr8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG418 [206] phi (byte) divr8u::quotient#3 = (byte) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta quotient
  //SEG419 [206] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
  //SEG420 [206] phi (byte) divr8u::rem#4 = (byte) 0 [phi:divr8u->divr8u::@1#3] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  //SEG421 [206] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  b1_from_b3:
  //SEG422 [206] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
  //SEG423 [206] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
  //SEG424 [206] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
  //SEG425 [206] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    jmp b1
  //SEG426 divr8u::@1
  b1:
  //SEG427 [207] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte) 1 -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
  //SEG428 [208] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and dividend
  //SEG429 [209] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG430 divr8u::@4
  b4:
  //SEG431 [210] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 -- vbuyy=vbuyy_bor_vbuc1 
    tya
    ora #1
    tay
  //SEG432 [211] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG433 [211] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    jmp b2
  //SEG434 divr8u::@2
  b2:
  //SEG435 [212] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG436 [213] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG437 [214] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 -- vbuyy_lt_vbuz1_then_la1 
    cpy divisor
    bcc b3_from_b2
    jmp b5
  //SEG438 divr8u::@5
  b5:
  //SEG439 [215] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG440 [216] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc divisor
    tay
  //SEG441 [217] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG442 [217] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
  //SEG443 [217] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    jmp b3
  //SEG444 divr8u::@3
  b3:
  //SEG445 [218] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG446 [219] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1_from_b3
    jmp b6
  //SEG447 divr8u::@6
  b6:
  //SEG448 [220] (byte) rem8u#17 ← (byte) divr8u::rem#10 -- vbuxx=vbuyy 
    tya
    tax
    jmp breturn
  //SEG449 divr8u::@return
  breturn:
  //SEG450 [221] return 
    rts
}
//SEG451 test_16u
test_16u: {
    .label dividend = 5
    .label divisor = $e
    .label res = $10
    .label i = $18
  //SEG452 [223] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  b1_from_test_16u:
  //SEG453 [223] phi (byte) test_16u::i#10 = (byte) 0 [phi:test_16u->test_16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG454 [223] phi from test_16u::@10 to test_16u::@1 [phi:test_16u::@10->test_16u::@1]
  b1_from_b10:
  //SEG455 [223] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@10->test_16u::@1#0] -- register_copy 
    jmp b1
  //SEG456 test_16u::@1
  b1:
  //SEG457 [224] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda i
    asl
    tax
  //SEG458 [225] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuxx 
    lda dividends,x
    sta dividend
    lda dividends+1,x
    sta dividend+1
  //SEG459 [226] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuxx 
    lda divisors,x
    sta divisor
    lda divisors+1,x
    sta divisor+1
  //SEG460 [227] (word) div16u::dividend#0 ← (word) test_16u::dividend#0
  //SEG461 [228] (word) div16u::divisor#0 ← (word) test_16u::divisor#0
  //SEG462 [229] call div16u 
    jsr div16u
  //SEG463 [230] (word) div16u::return#2 ← (word) div16u::return#0
    jmp b2
  //SEG464 test_16u::@2
  b2:
  //SEG465 [231] (word) test_16u::res#0 ← (word) div16u::return#2
  //SEG466 [232] (word) print_word::w#1 ← (word) test_16u::dividend#0
  //SEG467 [233] (byte*~) print_char_cursor#173 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG468 [234] call print_word 
  //SEG469 [65] phi from test_16u::@2 to print_word [phi:test_16u::@2->print_word]
  print_word_from_b2:
  //SEG470 [65] phi (byte*) print_char_cursor#138 = (byte*~) print_char_cursor#173 [phi:test_16u::@2->print_word#0] -- register_copy 
  //SEG471 [65] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:test_16u::@2->print_word#1] -- register_copy 
    jsr print_word
  //SEG472 [235] phi from test_16u::@2 to test_16u::@3 [phi:test_16u::@2->test_16u::@3]
  b3_from_b2:
    jmp b3
  //SEG473 test_16u::@3
  b3:
  //SEG474 [236] call print_str 
  //SEG475 [79] phi from test_16u::@3 to print_str [phi:test_16u::@3->print_str]
  print_str_from_b3:
  //SEG476 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_16u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b4
  //SEG477 test_16u::@4
  b4:
  //SEG478 [237] (word) print_word::w#2 ← (word) test_16u::divisor#0 -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG479 [238] call print_word 
  //SEG480 [65] phi from test_16u::@4 to print_word [phi:test_16u::@4->print_word]
  print_word_from_b4:
  //SEG481 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#130 [phi:test_16u::@4->print_word#0] -- register_copy 
  //SEG482 [65] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:test_16u::@4->print_word#1] -- register_copy 
    jsr print_word
  //SEG483 [239] phi from test_16u::@4 to test_16u::@5 [phi:test_16u::@4->test_16u::@5]
  b5_from_b4:
    jmp b5
  //SEG484 test_16u::@5
  b5:
  //SEG485 [240] call print_str 
  //SEG486 [79] phi from test_16u::@5 to print_str [phi:test_16u::@5->print_str]
  print_str_from_b5:
  //SEG487 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_16u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b6
  //SEG488 test_16u::@6
  b6:
  //SEG489 [241] (word) print_word::w#3 ← (word) test_16u::res#0 -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG490 [242] call print_word 
  //SEG491 [65] phi from test_16u::@6 to print_word [phi:test_16u::@6->print_word]
  print_word_from_b6:
  //SEG492 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#130 [phi:test_16u::@6->print_word#0] -- register_copy 
  //SEG493 [65] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:test_16u::@6->print_word#1] -- register_copy 
    jsr print_word
  //SEG494 [243] phi from test_16u::@6 to test_16u::@7 [phi:test_16u::@6->test_16u::@7]
  b7_from_b6:
    jmp b7
  //SEG495 test_16u::@7
  b7:
  //SEG496 [244] call print_str 
  //SEG497 [79] phi from test_16u::@7 to print_str [phi:test_16u::@7->print_str]
  print_str_from_b7:
  //SEG498 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_16u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b8
  //SEG499 test_16u::@8
  b8:
  //SEG500 [245] (word) print_word::w#4 ← (word) rem16u#1 -- vwuz1=vwuz2 
    lda rem16u
    sta print_word.w
    lda rem16u+1
    sta print_word.w+1
  //SEG501 [246] call print_word 
  //SEG502 [65] phi from test_16u::@8 to print_word [phi:test_16u::@8->print_word]
  print_word_from_b8:
  //SEG503 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#130 [phi:test_16u::@8->print_word#0] -- register_copy 
  //SEG504 [65] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:test_16u::@8->print_word#1] -- register_copy 
    jsr print_word
  //SEG505 [247] phi from test_16u::@8 to test_16u::@9 [phi:test_16u::@8->test_16u::@9]
  b9_from_b8:
    jmp b9
  //SEG506 test_16u::@9
  b9:
  //SEG507 [248] call print_ln 
  //SEG508 [45] phi from test_16u::@9 to print_ln [phi:test_16u::@9->print_ln]
  print_ln_from_b9:
  //SEG509 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16u::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b10
  //SEG510 test_16u::@10
  b10:
  //SEG511 [249] (byte) test_16u::i#1 ← ++ (byte) test_16u::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG512 [250] if((byte) test_16u::i#1!=(byte) 6) goto test_16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b1_from_b10
    jmp breturn
  //SEG513 test_16u::@return
  breturn:
  //SEG514 [251] return 
    rts
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG515 div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
// div16u(word zeropage(5) dividend, word zeropage($e) divisor)
div16u: {
    .label return = $10
    .label dividend = 5
    .label divisor = $e
  //SEG516 [252] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 -- vwuz1=vwuz2 
    lda dividend
    sta divr16u.dividend
    lda dividend+1
    sta divr16u.dividend+1
  //SEG517 [253] (word) divr16u::divisor#0 ← (word) div16u::divisor#0
  //SEG518 [254] call divr16u 
  //SEG519 [116] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
  //SEG520 [116] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#0 [phi:div16u->divr16u#0] -- register_copy 
  //SEG521 [116] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#1 [phi:div16u->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG522 [255] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp b1
  //SEG523 div16u::@1
  b1:
  //SEG524 [256] (word) div16u::return#0 ← (word) divr16u::return#2
    jmp breturn
  //SEG525 div16u::@return
  breturn:
  //SEG526 [257] return 
    rts
}
//SEG527 test_8u
test_8u: {
    .label dividend = 9
    .label divisor = $21
    .label res = $22
    .label i = $19
  //SEG528 [259] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  b1_from_test_8u:
  //SEG529 [259] phi (byte*) print_line_cursor#41 = (byte*) 1024 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG530 [259] phi (byte*) print_char_cursor#141 = (byte*) 1024 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG531 [259] phi (byte) test_8u::i#10 = (byte) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG532 test_8u::@1
  b1:
  //SEG533 [260] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG534 [261] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG535 [262] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 -- vbuaa=vbuz1 
    lda dividend
  //SEG536 [263] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 -- vbuxx=vbuz1 
    ldx divisor
  //SEG537 [264] call div8u 
  //SEG538 [198] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  div8u_from_b1:
  //SEG539 [198] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG540 [198] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
  //SEG541 [265] (byte) div8u::return#3 ← (byte) div8u::return#0
    jmp b2
  //SEG542 test_8u::@2
  b2:
  //SEG543 [266] (byte) test_8u::res#0 ← (byte) div8u::return#3 -- vbuz1=vbuaa 
    sta res
  //SEG544 [267] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0
  //SEG545 [268] call print_byte 
  //SEG546 [71] phi from test_8u::@2 to print_byte [phi:test_8u::@2->print_byte]
  print_byte_from_b2:
  //SEG547 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#141 [phi:test_8u::@2->print_byte#0] -- register_copy 
  //SEG548 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@2->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG549 [269] phi from test_8u::@2 to test_8u::@3 [phi:test_8u::@2->test_8u::@3]
  b3_from_b2:
    jmp b3
  //SEG550 test_8u::@3
  b3:
  //SEG551 [270] call print_str 
  //SEG552 [79] phi from test_8u::@3 to print_str [phi:test_8u::@3->print_str]
  print_str_from_b3:
  //SEG553 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_8u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b4
  //SEG554 test_8u::@4
  b4:
  //SEG555 [271] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG556 [272] call print_byte 
  //SEG557 [71] phi from test_8u::@4 to print_byte [phi:test_8u::@4->print_byte]
  print_byte_from_b4:
  //SEG558 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#130 [phi:test_8u::@4->print_byte#0] -- register_copy 
  //SEG559 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@4->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG560 [273] phi from test_8u::@4 to test_8u::@5 [phi:test_8u::@4->test_8u::@5]
  b5_from_b4:
    jmp b5
  //SEG561 test_8u::@5
  b5:
  //SEG562 [274] call print_str 
  //SEG563 [79] phi from test_8u::@5 to print_str [phi:test_8u::@5->print_str]
  print_str_from_b5:
  //SEG564 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_8u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b6
  //SEG565 test_8u::@6
  b6:
  //SEG566 [275] (byte) print_byte::b#5 ← (byte) test_8u::res#0 -- vbuz1=vbuz2 
    lda res
    sta print_byte.b
  //SEG567 [276] call print_byte 
  //SEG568 [71] phi from test_8u::@6 to print_byte [phi:test_8u::@6->print_byte]
  print_byte_from_b6:
  //SEG569 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#130 [phi:test_8u::@6->print_byte#0] -- register_copy 
  //SEG570 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@6->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG571 [277] phi from test_8u::@6 to test_8u::@7 [phi:test_8u::@6->test_8u::@7]
  b7_from_b6:
    jmp b7
  //SEG572 test_8u::@7
  b7:
  //SEG573 [278] call print_str 
  //SEG574 [79] phi from test_8u::@7 to print_str [phi:test_8u::@7->print_str]
  print_str_from_b7:
  //SEG575 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_8u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b8
  //SEG576 test_8u::@8
  b8:
  //SEG577 [279] (byte) print_byte::b#6 ← (byte) rem8u#17 -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG578 [280] call print_byte 
  //SEG579 [71] phi from test_8u::@8 to print_byte [phi:test_8u::@8->print_byte]
  print_byte_from_b8:
  //SEG580 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#130 [phi:test_8u::@8->print_byte#0] -- register_copy 
  //SEG581 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@8->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG582 [281] phi from test_8u::@8 to test_8u::@9 [phi:test_8u::@8->test_8u::@9]
  b9_from_b8:
    jmp b9
  //SEG583 test_8u::@9
  b9:
  //SEG584 [282] call print_ln 
  //SEG585 [45] phi from test_8u::@9 to print_ln [phi:test_8u::@9->print_ln]
  print_ln_from_b9:
  //SEG586 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#41 [phi:test_8u::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b10
  //SEG587 test_8u::@10
  b10:
  //SEG588 [283] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG589 [284] if((byte) test_8u::i#1!=(byte) 6) goto test_8u::@11 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b11
    jmp breturn
  //SEG590 test_8u::@return
  breturn:
  //SEG591 [285] return 
    rts
  //SEG592 test_8u::@11
  b11:
  //SEG593 [286] (byte*~) print_char_cursor#190 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG594 [259] phi from test_8u::@11 to test_8u::@1 [phi:test_8u::@11->test_8u::@1]
  b1_from_b11:
  //SEG595 [259] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#1 [phi:test_8u::@11->test_8u::@1#0] -- register_copy 
  //SEG596 [259] phi (byte*) print_char_cursor#141 = (byte*~) print_char_cursor#190 [phi:test_8u::@11->test_8u::@1#1] -- register_copy 
  //SEG597 [259] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@11->test_8u::@1#2] -- register_copy 
    jmp b1
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG598 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $1a
  //SEG599 [288] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG600 [288] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG601 [288] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG602 [288] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG603 print_cls::@1
  b1:
  //SEG604 [289] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG605 [290] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG606 [291] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG607 print_cls::@return
  breturn:
  //SEG608 [292] return 
    rts
}
//SEG609 File Data
  print_hextab: .text "0123456789abcdef"
  str: .text " / @"
  str1: .text " = @"
  str2: .text " @"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp b9
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp b9
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Replacing instruction lda #0 with TXA
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction ldy i
Replacing instruction ldx divisor with TAX
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction ldy i
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b10 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_print_sword with b1
Replacing label b2_from_b4 with b2
Replacing label b1_from_b2 with b1
Replacing label breturn_from_b5 with breturn
Replacing label b4_from_b3 with b4
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b10 with b1
Replacing label b1_from_print_sbyte with b1
Replacing label b2_from_b4 with b2
Replacing label breturn_from_b5 with breturn
Replacing label b4_from_b3 with b4
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b10 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction test_8u_from_b1:
Removing instruction b2_from_b1:
Removing instruction test_16u_from_b2:
Removing instruction b3_from_b2:
Removing instruction test_8s_from_b3:
Removing instruction b4_from_b3:
Removing instruction test_16s_from_b4:
Removing instruction b1_from_b10:
Removing instruction b3_from_b2:
Removing instruction print_str_from_b3:
Removing instruction b5_from_b4:
Removing instruction print_str_from_b5:
Removing instruction b7_from_b6:
Removing instruction print_str_from_b7:
Removing instruction b9_from_b8:
Removing instruction print_ln_from_b9:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b3_from_print_sword:
Removing instruction print_char_from_b3:
Removing instruction b2_from_b3:
Removing instruction b2_from_b4:
Removing instruction print_word_from_b2:
Removing instruction b1_from_print_sword:
Removing instruction print_char_from_b1:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction breturn:
Removing instruction b2_from_b6:
Removing instruction b7:
Removing instruction b4_from_b3:
Removing instruction b4_from_b7:
Removing instruction divr16u_from_b4:
Removing instruction breturn_from_b5:
Removing instruction breturn_from_b8:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction breturn:
Removing instruction b1_from_b10:
Removing instruction b3_from_b2:
Removing instruction print_str_from_b3:
Removing instruction b5_from_b4:
Removing instruction print_str_from_b5:
Removing instruction b7_from_b6:
Removing instruction print_str_from_b7:
Removing instruction b9_from_b8:
Removing instruction print_ln_from_b9:
Removing instruction b3_from_print_sbyte:
Removing instruction print_char_from_b3:
Removing instruction b2_from_b3:
Removing instruction b2_from_b4:
Removing instruction print_byte_from_b2:
Removing instruction b1_from_print_sbyte:
Removing instruction print_char_from_b1:
Removing instruction b2_from_b6:
Removing instruction b7:
Removing instruction b4_from_b3:
Removing instruction b4_from_b7:
Removing instruction breturn_from_b5:
Removing instruction breturn_from_b8:
Removing instruction breturn:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction b1_from_b10:
Removing instruction b3_from_b2:
Removing instruction print_str_from_b3:
Removing instruction b5_from_b4:
Removing instruction print_str_from_b5:
Removing instruction b7_from_b6:
Removing instruction print_str_from_b7:
Removing instruction b9_from_b8:
Removing instruction print_ln_from_b9:
Removing instruction breturn:
Removing instruction b3_from_b2:
Removing instruction print_str_from_b3:
Removing instruction b5_from_b4:
Removing instruction print_str_from_b5:
Removing instruction b7_from_b6:
Removing instruction print_str_from_b7:
Removing instruction b9_from_b8:
Removing instruction print_ln_from_b9:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction b1_from_test_16s:
Removing instruction b2:
Removing instruction print_sword_from_b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction print_sword_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction print_sword_from_b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction print_sword_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b4:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1:
Removing instruction b6:
Removing instruction b9:
Removing instruction b8:
Removing instruction b2_from_b1:
Removing instruction b1_from_divr16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b1_from_test_8s:
Removing instruction b2:
Removing instruction print_sbyte_from_b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction print_sbyte_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction print_sbyte_from_b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction print_sbyte_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction breturn:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b6:
Removing instruction div8u_from_b4:
Removing instruction b9:
Removing instruction b8:
Removing instruction b2_from_b1:
Removing instruction divr8u_from_div8u:
Removing instruction b1:
Removing instruction b1_from_divr8u:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_test_16u:
Removing instruction b2:
Removing instruction print_word_from_b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction print_word_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction print_word_from_b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction print_word_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction breturn:
Removing instruction divr16u_from_div16u:
Removing instruction b1:
Removing instruction b1_from_test_8u:
Removing instruction div8u_from_b1:
Removing instruction b2:
Removing instruction print_byte_from_b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction print_byte_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction print_byte_from_b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction print_byte_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction breturn:
Removing instruction b1_from_b11:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to breturn in beq b5
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b5:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(label) div16s::@1
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0 dividend zp ZP_WORD:5 6.5
(signed word) div16s::divisor
(signed word) div16s::divisor#0 divisor zp ZP_WORD:28 6.5
(signed word) div16s::return
(signed word) div16s::return#0 return zp ZP_WORD:16 4.333333333333333
(signed word) div16s::return#2 return zp ZP_WORD:16 22.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0 dividend zp ZP_WORD:5 6.5
(word) div16u::divisor
(word) div16u::divisor#0 divisor zp ZP_WORD:14 6.5
(word) div16u::return
(word) div16u::return#0 return zp ZP_WORD:16 4.333333333333333
(word) div16u::return#2 return zp ZP_WORD:16 22.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$11 reg byte a 4.0
(label) div8s::@1
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@6
(label) div8s::@7
(label) div8s::@8
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 reg byte y 5.0
(byte) div8s::dividendu
(signed byte) div8s::dividendu#1 reg byte a 2.0
(byte) div8s::dividendu#3 reg byte y 0.8571428571428571
(byte~) div8s::dividendu#7 reg byte y 4.0
(byte~) div8s::dividendu#8 reg byte y 4.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 reg byte x 2.142857142857143
(byte) div8s::divisoru
(signed byte) div8s::divisoru#1 reg byte x 1.0
(byte) div8s::divisoru#3 reg byte x 3.0
(byte~) div8s::divisoru#4 reg byte x 4.0
(byte~) div8s::divisoru#5 reg byte x 4.0
(byte) div8s::neg
(byte) div8s::neg#2 neg zp ZP_BYTE:21 2.0
(byte) div8s::neg#3 neg zp ZP_BYTE:21 1.0
(byte) div8s::neg#4 neg zp ZP_BYTE:21 1.0
(byte) div8s::resultu
(byte) div8s::resultu#0 reg byte y 0.5
(signed byte) div8s::return
(signed byte) div8s::return#1 reg byte a 4.0
(signed byte) div8s::return#2 reg byte a 5.0
(signed byte) div8s::return#3 reg byte a 22.0
(signed byte~) div8s::return#7 reg byte a 2.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(label) div8u::@1
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0 reg byte a 2.0
(byte) div8u::dividend#1 reg byte a 11.0
(byte) div8u::dividend#2 reg byte a 15.0
(byte) div8u::divisor
(byte) div8u::divisor#0 reg byte x 4.0
(byte) div8u::divisor#1 reg byte x 22.0
(byte) div8u::divisor#2 reg byte x 7.5
(byte) div8u::return
(byte) div8u::return#0 reg byte a 3.75
(byte) div8u::return#2 reg byte a 4.0
(byte) div8u::return#3 reg byte a 22.0
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(signed word~) divr16s::$16 $16 zp ZP_WORD:18 4.0
(label) divr16s::@1
(label) divr16s::@2
(label) divr16s::@3
(label) divr16s::@4
(label) divr16s::@5
(label) divr16s::@6
(label) divr16s::@7
(label) divr16s::@8
(label) divr16s::@9
(label) divr16s::@return
(signed word) divr16s::dividend
(signed word) divr16s::dividend#0 dividend zp ZP_WORD:12 2.0
(word) divr16s::dividendu
(signed word) divr16s::dividendu#1 dividendu zp ZP_WORD:12 2.0
(word) divr16s::dividendu#3 dividendu zp ZP_WORD:12 0.8571428571428571
(word~) divr16s::dividendu#7 dividendu zp ZP_WORD:12 4.0
(word~) divr16s::dividendu#8 dividendu zp ZP_WORD:12 4.0
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0 divisor zp ZP_WORD:14 0.8571428571428571
(word) divr16s::divisoru
(signed word) divr16s::divisoru#1 divisoru zp ZP_WORD:14 1.0
(word) divr16s::divisoru#3 divisoru zp ZP_WORD:14 3.0
(word~) divr16s::divisoru#4 divisoru zp ZP_WORD:14 4.0
(word~) divr16s::divisoru#5 divisoru zp ZP_WORD:14 4.0
(byte) divr16s::neg
(byte) divr16s::neg#2 reg byte y 2.0
(byte) divr16s::neg#3 reg byte y 1.0
(byte) divr16s::neg#4 reg byte y 1.0
(signed word) divr16s::rem
(word) divr16s::remu
(word) divr16s::resultu
(word) divr16s::resultu#0 resultu zp ZP_WORD:16 0.5
(signed word) divr16s::return
(signed word) divr16s::return#1 return zp ZP_WORD:16 4.0
(signed word) divr16s::return#2 return zp ZP_WORD:16 2.0
(signed word) divr16s::return#3 return zp ZP_WORD:16 4.0
(signed word~) divr16s::return#7 return zp ZP_WORD:16 2.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 202.0
(byte~) divr16u::$2 reg byte a 202.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:12 25.25
(word) divr16u::dividend#1 dividend zp ZP_WORD:12 2.0
(word) divr16u::dividend#2 dividend zp ZP_WORD:12 2.0
(word) divr16u::dividend#3 dividend zp ZP_WORD:12 43.57142857142858
(word) divr16u::dividend#5 dividend zp ZP_WORD:12 6.0
(word) divr16u::divisor
(word) divr16u::divisor#0 divisor zp ZP_WORD:14 4.0
(word) divr16u::divisor#1 divisor zp ZP_WORD:14 4.0
(word) divr16u::divisor#6 divisor zp ZP_WORD:14 12.875
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 151.5
(byte) divr16u::i#2 reg byte x 15.538461538461538
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:16 151.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:16 101.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:16 25.25
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:18 75.75
(word) divr16u::rem#1 rem zp ZP_WORD:18 202.0
(word) divr16u::rem#11 rem zp ZP_WORD:18 101.66666666666667
(word) divr16u::rem#2 rem zp ZP_WORD:18 202.0
(word) divr16u::rem#5 rem zp ZP_WORD:18 202.0
(word) divr16u::rem#6 rem zp ZP_WORD:18 101.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:16 43.85714285714286
(word) divr16u::return#2 return zp ZP_WORD:16 4.0
(word) divr16u::return#3 return zp ZP_WORD:16 4.0
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 reg byte a 202.0
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0 dividend zp ZP_BYTE:22 1.3333333333333333
(byte) divr8u::dividend#1 dividend zp ZP_BYTE:22 25.25
(byte) divr8u::dividend#2 dividend zp ZP_BYTE:22 50.83333333333333
(byte) divr8u::divisor
(byte) divr8u::divisor#0 divisor zp ZP_BYTE:32 12.75
(byte) divr8u::i
(byte) divr8u::i#1 reg byte x 151.5
(byte) divr8u::i#2 reg byte x 16.833333333333332
(byte) divr8u::quotient
(byte) divr8u::quotient#1 quotient zp ZP_BYTE:23 151.5
(byte) divr8u::quotient#2 quotient zp ZP_BYTE:23 101.0
(byte) divr8u::quotient#3 quotient zp ZP_BYTE:23 28.857142857142858
(byte) divr8u::rem
(byte) divr8u::rem#1 reg byte y 101.0
(byte) divr8u::rem#10 reg byte y 101.66666666666667
(byte) divr8u::rem#2 reg byte y 202.0
(byte) divr8u::rem#3 reg byte y 202.0
(byte) divr8u::rem#4 reg byte y 202.0
(byte) divr8u::rem#5 reg byte y 101.0
(byte) divr8u::return
(byte) divr8u::return#0 reg byte a 4.0
(byte) divr8u::return#1 return zp ZP_BYTE:23 50.83333333333333
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp ZP_BYTE:9 4.0
(byte) print_byte::b#1 b zp ZP_BYTE:9 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:9 4.0
(byte) print_byte::b#3 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#4 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#5 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#6 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#7 b zp ZP_BYTE:9 13.5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#4 reg byte a 4.0
(byte) print_char::ch#5 reg byte a 4.0
(byte) print_char::ch#6 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:7 101.0
(byte*) print_char_cursor#130 print_char_cursor zp ZP_WORD:7 15.607142857142856
(byte*) print_char_cursor#132 print_char_cursor zp ZP_WORD:7 12.0
(byte*) print_char_cursor#135 print_char_cursor zp ZP_WORD:7 12.0
(byte*) print_char_cursor#138 print_char_cursor zp ZP_WORD:7 24.0
(byte*) print_char_cursor#139 print_char_cursor zp ZP_WORD:7 17.333333333333332
(byte*) print_char_cursor#141 print_char_cursor zp ZP_WORD:7 2.4444444444444446
(byte*~) print_char_cursor#164 print_char_cursor zp ZP_WORD:7 22.0
(byte*~) print_char_cursor#168 print_char_cursor zp ZP_WORD:7 22.0
(byte*~) print_char_cursor#173 print_char_cursor zp ZP_WORD:7 22.0
(byte*) print_char_cursor#19 print_char_cursor zp ZP_WORD:7 1.8225806451612903
(byte*~) print_char_cursor#190 print_char_cursor zp ZP_WORD:7 22.0
(byte*) print_char_cursor#84 print_char_cursor zp ZP_WORD:7 8.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:26 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:26 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:3 3.833333333333334
(byte*) print_line_cursor#20 print_line_cursor zp ZP_WORD:3 204.0
(byte*) print_line_cursor#39 print_line_cursor zp ZP_WORD:3 46.0
(byte*) print_line_cursor#41 print_line_cursor zp ZP_WORD:3 0.9565217391304348
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp ZP_BYTE:9 4.0
(signed byte) print_sbyte::b#1 b zp ZP_BYTE:9 11.0
(signed byte) print_sbyte::b#10 b zp ZP_BYTE:9 8.333333333333332
(signed byte) print_sbyte::b#2 b zp ZP_BYTE:9 22.0
(signed byte) print_sbyte::b#3 b zp ZP_BYTE:9 22.0
(signed byte) print_sbyte::b#4 b zp ZP_BYTE:9 22.0
(signed byte) print_sbyte::b#7 b zp ZP_BYTE:9 4.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:10 202.0
(byte*) print_str::str#13 str zp ZP_WORD:10 101.5
(byte*) print_str::str#15 str zp ZP_WORD:10 2.0
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:5 4.0
(signed word) print_sword::w#1 w zp ZP_WORD:5 11.0
(signed word) print_sword::w#10 w zp ZP_WORD:5 8.333333333333332
(signed word) print_sword::w#2 w zp ZP_WORD:5 22.0
(signed word) print_sword::w#3 w zp ZP_WORD:5 22.0
(signed word) print_sword::w#4 w zp ZP_WORD:5 22.0
(signed word) print_sword::w#7 w zp ZP_WORD:5 4.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp ZP_WORD:5 4.0
(word) print_word::w#1 w zp ZP_WORD:5 11.0
(word) print_word::w#2 w zp ZP_WORD:5 22.0
(word) print_word::w#3 w zp ZP_WORD:5 22.0
(word) print_word::w#4 w zp ZP_WORD:5 22.0
(word) print_word::w#5 w zp ZP_WORD:5 16.666666666666664
(signed word) rem16s
(signed word) rem16s#11 rem16s zp ZP_WORD:18 0.6818181818181819
(signed word) rem16s#2 rem16s zp ZP_WORD:18 2.0
(signed word~) rem16s#37 rem16s zp ZP_WORD:18 4.0
(word) rem16u
(word) rem16u#1 rem16u zp ZP_WORD:18 0.48148148148148145
(signed byte) rem8s
(signed byte) rem8s#2 reg byte x 2.0
(signed byte) rem8s#3 reg byte x 0.8333333333333335
(signed byte~) rem8s#33 reg byte x 4.0
(byte) rem8u
(byte) rem8u#17 reg byte x 0.5
(const string) str str = (string) " / @"
(const string) str1 str1 = (string) " = @"
(const string) str2 str2 = (string) " @"
(void()) test_16s()
(byte~) test_16s::$11 reg byte x 16.5
(label) test_16s::@1
(label) test_16s::@10
(label) test_16s::@2
(label) test_16s::@3
(label) test_16s::@4
(label) test_16s::@5
(label) test_16s::@6
(label) test_16s::@7
(label) test_16s::@8
(label) test_16s::@9
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0 dividend zp ZP_WORD:5 4.714285714285714
(signed word[]) test_16s::dividends
(const signed word[]) test_16s::dividends#0 dividends = { (signed word) $7fff, (signed word) $7fff, (signed word) -$7fff, (signed word) -$7fff, (signed word) $7fff, (signed word) -$7fff }
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0 divisor zp ZP_WORD:28 3.0
(signed word[]) test_16s::divisors
(const signed word[]) test_16s::divisors#0 divisors = { (signed word) 5, (signed word) -7, (signed word) $b, (signed word) -$d, (signed word) -$11, (signed word) $13 }
(byte) test_16s::i
(byte) test_16s::i#1 i zp ZP_BYTE:2 16.5
(byte) test_16s::i#10 i zp ZP_BYTE:2 1.2692307692307692
(signed word) test_16s::res
(signed word) test_16s::res#0 res zp ZP_WORD:16 2.2
(void()) test_16u()
(byte~) test_16u::$11 reg byte x 16.5
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@2
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0 dividend zp ZP_WORD:5 4.714285714285714
(word[]) test_16u::dividends
(const word[]) test_16u::dividends#0 dividends = { (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff }
(word) test_16u::divisor
(word) test_16u::divisor#0 divisor zp ZP_WORD:14 3.0
(word[]) test_16u::divisors
(const word[]) test_16u::divisors#0 divisors = { (word) 5, (word) 7, (word) $b, (word) $d, (word) $11, (word) $13 }
(byte) test_16u::i
(byte) test_16u::i#1 i zp ZP_BYTE:24 16.5
(byte) test_16u::i#10 i zp ZP_BYTE:24 1.2692307692307692
(word) test_16u::res
(word) test_16u::res#0 res zp ZP_WORD:16 2.2
(void()) test_8s()
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@2
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 dividend zp ZP_BYTE:9 4.714285714285714
(signed byte[]) test_8s::dividends
(const signed byte[]) test_8s::dividends#0 dividends = { (signed byte) $7f, (signed byte) -$7f, (signed byte) -$7f, (signed byte) $7f, (signed byte) $7f, (signed byte) $7f }
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 divisor zp ZP_BYTE:30 3.0
(signed byte[]) test_8s::divisors
(const signed byte[]) test_8s::divisors#0 divisors = { (signed byte) 5, (signed byte) 7, (signed byte) -$b, (signed byte) -$d, (signed byte) $11, (signed byte) $13 }
(byte) test_8s::i
(byte) test_8s::i#1 i zp ZP_BYTE:20 16.5
(byte) test_8s::i#10 i zp ZP_BYTE:20 1.76
(signed byte) test_8s::res
(signed byte) test_8s::res#0 res zp ZP_BYTE:31 2.2
(void()) test_8u()
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@2
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0 dividend zp ZP_BYTE:9 4.714285714285714
(byte[]) test_8u::dividends
(const byte[]) test_8u::dividends#0 dividends = { (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff }
(byte) test_8u::divisor
(byte) test_8u::divisor#0 divisor zp ZP_BYTE:33 3.3000000000000003
(byte[]) test_8u::divisors
(const byte[]) test_8u::divisors#0 divisors = { (byte) 5, (byte) 7, (byte) $b, (byte) $d, (byte) $11, (byte) $13 }
(byte) test_8u::i
(byte) test_8u::i#1 i zp ZP_BYTE:25 11.0
(byte) test_8u::i#10 i zp ZP_BYTE:25 1.8333333333333333
(byte) test_8u::res
(byte) test_8u::res#0 res zp ZP_BYTE:34 2.4444444444444446

zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ]
zp ZP_WORD:5 [ print_sword::w#7 print_sword::w#0 print_sword::w#10 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_word::w#5 print_word::w#0 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 div16s::dividend#0 test_16u::dividend#0 div16u::dividend#0 ]
reg byte a [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ]
zp ZP_WORD:7 [ print_char_cursor#138 print_char_cursor#84 print_char_cursor#139 print_char_cursor#19 print_char_cursor#135 print_char_cursor#132 print_char_cursor#164 print_char_cursor#130 print_char_cursor#173 print_char_cursor#141 print_char_cursor#1 print_char_cursor#168 print_char_cursor#190 ]
zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 test_8u::dividend#0 test_8s::dividend#0 ]
zp ZP_WORD:10 [ print_str::str#13 print_str::str#15 print_str::str#0 ]
zp ZP_WORD:12 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 ]
zp ZP_WORD:14 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisor#0 divr16s::divisoru#1 test_16u::divisor#0 div16u::divisor#0 ]
reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
zp ZP_WORD:16 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 div16s::return#2 test_16s::res#0 div16s::return#0 div16u::return#2 test_16u::res#0 div16u::return#0 ]
zp ZP_WORD:18 [ rem16s#11 rem16s#2 rem16s#37 divr16s::$16 rem16u#1 divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp ZP_BYTE:20 [ test_8s::i#10 test_8s::i#1 ]
reg byte y [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
reg byte x [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
zp ZP_BYTE:21 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
reg byte a [ div8s::return#2 div8s::return#1 div8s::return#7 ]
reg byte x [ rem8s#3 rem8s#2 rem8s#33 ]
reg byte a [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
reg byte x [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
reg byte y [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
zp ZP_BYTE:22 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
zp ZP_BYTE:23 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
reg byte x [ divr8u::i#2 divr8u::i#1 ]
zp ZP_BYTE:24 [ test_16u::i#10 test_16u::i#1 ]
zp ZP_BYTE:25 [ test_8u::i#10 test_8u::i#1 ]
zp ZP_WORD:26 [ print_cls::sc#2 print_cls::sc#1 ]
reg byte x [ test_16s::$11 ]
zp ZP_WORD:28 [ test_16s::divisor#0 div16s::divisor#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp ZP_BYTE:30 [ test_8s::divisor#0 ]
reg byte y [ div8s::dividend#0 ]
reg byte x [ div8s::divisor#0 ]
reg byte a [ div8s::return#3 ]
zp ZP_BYTE:31 [ test_8s::res#0 ]
reg byte a [ div8u::return#2 ]
reg byte y [ div8s::resultu#0 ]
reg byte a [ div8s::$11 ]
reg byte x [ div8s::divisoru#1 ]
reg byte a [ div8s::dividendu#1 ]
zp ZP_BYTE:32 [ divr8u::divisor#0 ]
reg byte a [ divr8u::return#0 ]
reg byte a [ div8u::return#0 ]
reg byte a [ divr8u::$1 ]
reg byte x [ rem8u#17 ]
reg byte x [ test_16u::$11 ]
zp ZP_BYTE:33 [ test_8u::divisor#0 ]
reg byte a [ div8u::return#3 ]
zp ZP_BYTE:34 [ test_8u::res#0 ]


FINAL ASSEMBLER
Score: 33167

//SEG0 File Comments
// Test the binary division library
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_char_cursor = 7
  .label print_line_cursor = 3
  .label rem16u = $12
  .label rem16s = $12
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] call print_cls 
  //SEG12 [287] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG14 main::@1
  //SEG15 [7] call test_8u 
  //SEG16 [258] phi from main::@1 to test_8u [phi:main::@1->test_8u]
    jsr test_8u
  //SEG17 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG18 main::@2
  //SEG19 [9] call test_16u 
  //SEG20 [222] phi from main::@2 to test_16u [phi:main::@2->test_16u]
    jsr test_16u
  //SEG21 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG22 main::@3
  //SEG23 [11] call test_8s 
  //SEG24 [134] phi from main::@3 to test_8s [phi:main::@3->test_8s]
    jsr test_8s
  //SEG25 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  //SEG26 main::@4
  //SEG27 [13] call test_16s 
  //SEG28 [15] phi from main::@4 to test_16s [phi:main::@4->test_16s]
    jsr test_16s
  //SEG29 main::@return
  //SEG30 [14] return 
    rts
}
//SEG31 test_16s
test_16s: {
    .label dividend = 5
    .label divisor = $1c
    .label res = $10
    .label i = 2
  //SEG32 [16] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
  //SEG33 [16] phi (byte) test_16s::i#10 = (byte) 0 [phi:test_16s->test_16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG34 [16] phi from test_16s::@10 to test_16s::@1 [phi:test_16s::@10->test_16s::@1]
  //SEG35 [16] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@10->test_16s::@1#0] -- register_copy 
  //SEG36 test_16s::@1
  b1:
  //SEG37 [17] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda i
    asl
    tax
  //SEG38 [18] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuxx 
    lda dividends,x
    sta dividend
    lda dividends+1,x
    sta dividend+1
  //SEG39 [19] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuxx 
    lda divisors,x
    sta divisor
    lda divisors+1,x
    sta divisor+1
  //SEG40 [20] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
  //SEG41 [21] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
  //SEG42 [22] call div16s 
    jsr div16s
  //SEG43 [23] (signed word) div16s::return#2 ← (signed word) div16s::return#0
  //SEG44 test_16s::@2
  //SEG45 [24] (signed word) test_16s::res#0 ← (signed word) div16s::return#2
  //SEG46 [25] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0
  //SEG47 [26] (byte*~) print_char_cursor#164 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG48 [27] call print_sword 
  //SEG49 [50] phi from test_16s::@2 to print_sword [phi:test_16s::@2->print_sword]
  //SEG50 [50] phi (byte*) print_char_cursor#132 = (byte*~) print_char_cursor#164 [phi:test_16s::@2->print_sword#0] -- register_copy 
  //SEG51 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#1 [phi:test_16s::@2->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG52 [28] phi from test_16s::@2 to test_16s::@3 [phi:test_16s::@2->test_16s::@3]
  //SEG53 test_16s::@3
  //SEG54 [29] call print_str 
  //SEG55 [79] phi from test_16s::@3 to print_str [phi:test_16s::@3->print_str]
  //SEG56 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_16s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG57 test_16s::@4
  //SEG58 [30] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 -- vwsz1=vwsz2 
    lda divisor
    sta print_sword.w
    lda divisor+1
    sta print_sword.w+1
  //SEG59 [31] call print_sword 
  //SEG60 [50] phi from test_16s::@4 to print_sword [phi:test_16s::@4->print_sword]
  //SEG61 [50] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:test_16s::@4->print_sword#0] -- register_copy 
  //SEG62 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#2 [phi:test_16s::@4->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG63 [32] phi from test_16s::@4 to test_16s::@5 [phi:test_16s::@4->test_16s::@5]
  //SEG64 test_16s::@5
  //SEG65 [33] call print_str 
  //SEG66 [79] phi from test_16s::@5 to print_str [phi:test_16s::@5->print_str]
  //SEG67 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_16s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG68 test_16s::@6
  //SEG69 [34] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 -- vwsz1=vwsz2 
    lda res
    sta print_sword.w
    lda res+1
    sta print_sword.w+1
  //SEG70 [35] call print_sword 
  //SEG71 [50] phi from test_16s::@6 to print_sword [phi:test_16s::@6->print_sword]
  //SEG72 [50] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:test_16s::@6->print_sword#0] -- register_copy 
  //SEG73 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#3 [phi:test_16s::@6->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG74 [36] phi from test_16s::@6 to test_16s::@7 [phi:test_16s::@6->test_16s::@7]
  //SEG75 test_16s::@7
  //SEG76 [37] call print_str 
  //SEG77 [79] phi from test_16s::@7 to print_str [phi:test_16s::@7->print_str]
  //SEG78 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_16s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG79 test_16s::@8
  //SEG80 [38] (signed word) print_sword::w#4 ← (signed word) rem16s#11 -- vwsz1=vwsz2 
    lda rem16s
    sta print_sword.w
    lda rem16s+1
    sta print_sword.w+1
  //SEG81 [39] call print_sword 
  //SEG82 [50] phi from test_16s::@8 to print_sword [phi:test_16s::@8->print_sword]
  //SEG83 [50] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:test_16s::@8->print_sword#0] -- register_copy 
  //SEG84 [50] phi (signed word) print_sword::w#10 = (signed word) print_sword::w#4 [phi:test_16s::@8->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG85 [40] phi from test_16s::@8 to test_16s::@9 [phi:test_16s::@8->test_16s::@9]
  //SEG86 test_16s::@9
  //SEG87 [41] call print_ln 
  //SEG88 [45] phi from test_16s::@9 to print_ln [phi:test_16s::@9->print_ln]
  //SEG89 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16s::@9->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG90 test_16s::@10
  //SEG91 [42] (byte) test_16s::i#1 ← ++ (byte) test_16s::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG92 [43] if((byte) test_16s::i#1!=(byte) 6) goto test_16s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b1
  //SEG93 test_16s::@return
  //SEG94 [44] return 
    rts
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
//SEG95 print_ln
// Print a newline
print_ln: {
  //SEG96 [46] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG97 [46] phi (byte*) print_line_cursor#20 = (byte*) print_line_cursor#39 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG98 print_ln::@1
  b1:
  //SEG99 [47] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG100 [48] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG101 print_ln::@return
  //SEG102 [49] return 
    rts
}
//SEG103 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(5) w)
print_sword: {
    .label w = 5
  //SEG104 [51] if((signed word) print_sword::w#10<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda w+1
    bmi b1
  //SEG105 [52] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
  //SEG106 print_sword::@3
  //SEG107 [53] call print_char 
  //SEG108 [61] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
  //SEG109 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#132 [phi:print_sword::@3->print_char#0] -- register_copy 
  //SEG110 [61] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG111 [54] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
  //SEG112 [54] phi (signed word) print_sword::w#7 = (signed word) print_sword::w#10 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
  //SEG113 print_sword::@2
  b2:
  //SEG114 [55] (word) print_word::w#0 ← (word)(signed word) print_sword::w#7
  //SEG115 [56] call print_word 
  //SEG116 [65] phi from print_sword::@2 to print_word [phi:print_sword::@2->print_word]
  //SEG117 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#19 [phi:print_sword::@2->print_word#0] -- register_copy 
  //SEG118 [65] phi (word) print_word::w#5 = (word) print_word::w#0 [phi:print_sword::@2->print_word#1] -- register_copy 
    jsr print_word
  //SEG119 print_sword::@return
  //SEG120 [57] return 
    rts
  //SEG121 [58] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
  //SEG122 print_sword::@1
  b1:
  //SEG123 [59] call print_char 
  //SEG124 [61] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
  //SEG125 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#132 [phi:print_sword::@1->print_char#0] -- register_copy 
  //SEG126 [61] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG127 print_sword::@4
  //SEG128 [60] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#10 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc w
    sta w
    lda #0
    sbc w+1
    sta w+1
    jmp b2
}
//SEG129 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG130 [62] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG131 [63] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#84 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG132 print_char::@return
  //SEG133 [64] return 
    rts
}
//SEG134 print_word
// Print a word as HEX
// print_word(word zeropage(5) w)
print_word: {
    .label w = 5
  //SEG135 [66] (byte) print_byte::b#1 ← > (word) print_word::w#5 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG136 [67] call print_byte 
  //SEG137 [71] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG138 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#138 [phi:print_word->print_byte#0] -- register_copy 
  //SEG139 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG140 print_word::@1
  //SEG141 [68] (byte) print_byte::b#2 ← < (word) print_word::w#5 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG142 [69] call print_byte 
  //SEG143 [71] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG144 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#19 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG145 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG146 print_word::@return
  //SEG147 [70] return 
    rts
}
//SEG148 print_byte
// Print a byte as HEX
// print_byte(byte zeropage(9) b)
print_byte: {
    .label b = 9
  //SEG149 [72] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG150 [73] (byte) print_char::ch#4 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG151 [74] call print_char 
  //SEG152 [61] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG153 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#139 [phi:print_byte->print_char#0] -- register_copy 
  //SEG154 [61] phi (byte) print_char::ch#6 = (byte) print_char::ch#4 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG155 print_byte::@1
  //SEG156 [75] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG157 [76] (byte) print_char::ch#5 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG158 [77] call print_char 
  //SEG159 [61] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG160 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#19 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG161 [61] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG162 print_byte::@return
  //SEG163 [78] return 
    rts
}
//SEG164 print_str
// Print a zero-terminated string
// print_str(byte* zeropage($a) str)
print_str: {
    .label str = $a
  //SEG165 [80] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG166 [80] phi (byte*) print_char_cursor#130 = (byte*) print_char_cursor#19 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG167 [80] phi (byte*) print_str::str#13 = (byte*) print_str::str#15 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG168 print_str::@1
  b1:
  //SEG169 [81] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG170 print_str::@return
  //SEG171 [82] return 
    rts
  //SEG172 print_str::@2
  b2:
  //SEG173 [83] *((byte*) print_char_cursor#130) ← *((byte*) print_str::str#13) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG174 [84] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#130 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG175 [85] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG176 div16s
// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div16s(signed word zeropage(5) dividend, signed word zeropage($1c) divisor)
div16s: {
    .label return = $10
    .label dividend = 5
    .label divisor = $1c
  //SEG177 [86] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 -- vwsz1=vwsz2 
    lda dividend
    sta divr16s.dividend
    lda dividend+1
    sta divr16s.dividend+1
  //SEG178 [87] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 -- vwsz1=vwsz2 
    lda divisor
    sta divr16s.divisor
    lda divisor+1
    sta divr16s.divisor+1
  //SEG179 [88] call divr16s 
    jsr divr16s
  //SEG180 [89] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
  //SEG181 div16s::@1
  //SEG182 [90] (signed word) div16s::return#0 ← (signed word) divr16s::return#3
  //SEG183 div16s::@return
  //SEG184 [91] return 
    rts
}
//SEG185 divr16s
// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// divr16s(signed word zeropage($c) dividend, signed word zeropage($e) divisor)
divr16s: {
    .label _16 = $12
    .label dividendu = $c
    .label divisoru = $e
    .label resultu = $10
    .label return = $10
    .label dividend = $c
    .label divisor = $e
  //SEG186 [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 -- vwsz1_lt_0_then_la1 
    lda dividend+1
    bmi b1
  //SEG187 divr16s::@6
  //SEG188 [93] (word~) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
  //SEG189 [94] phi from divr16s::@6 to divr16s::@2 [phi:divr16s::@6->divr16s::@2]
  //SEG190 [94] phi (word) divr16s::dividendu#3 = (word~) divr16s::dividendu#8 [phi:divr16s::@6->divr16s::@2#0] -- register_copy 
  //SEG191 [94] phi (byte) divr16s::neg#3 = (byte) 0 [phi:divr16s::@6->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
  //SEG192 divr16s::@2
  b2:
  //SEG193 [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 -- vwsz1_lt_0_then_la1 
    lda divisor+1
    bmi b3
  //SEG194 divr16s::@7
  //SEG195 [96] (word~) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
  //SEG196 [97] phi from divr16s::@3 divr16s::@7 to divr16s::@4 [phi:divr16s::@3/divr16s::@7->divr16s::@4]
  //SEG197 [97] phi (byte) divr16s::neg#4 = (byte) divr16s::neg#2 [phi:divr16s::@3/divr16s::@7->divr16s::@4#0] -- register_copy 
  //SEG198 [97] phi (word) divr16s::divisoru#3 = (word~) divr16s::divisoru#4 [phi:divr16s::@3/divr16s::@7->divr16s::@4#1] -- register_copy 
  //SEG199 divr16s::@4
  b4:
  //SEG200 [98] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3
  //SEG201 [99] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3
  //SEG202 [100] call divr16u 
  //SEG203 [116] phi from divr16s::@4 to divr16u [phi:divr16s::@4->divr16u]
  //SEG204 [116] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#1 [phi:divr16s::@4->divr16u#0] -- register_copy 
  //SEG205 [116] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#2 [phi:divr16s::@4->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG206 [101] (word) divr16u::return#3 ← (word) divr16u::return#0
  //SEG207 divr16s::@9
  //SEG208 [102] (word) divr16s::resultu#0 ← (word) divr16u::return#3
  //SEG209 [103] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq breturn
  //SEG210 divr16s::@8
  //SEG211 [104] (signed word~) divr16s::$16 ← (signed word)(word) rem16u#1
  //SEG212 [105] (signed word) rem16s#2 ← - (signed word~) divr16s::$16 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc rem16s
    sta rem16s
    lda #0
    sbc rem16s+1
    sta rem16s+1
  //SEG213 [106] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc return
    sta return
    lda #0
    sbc return+1
    sta return+1
  //SEG214 [107] phi from divr16s::@5 divr16s::@8 to divr16s::@return [phi:divr16s::@5/divr16s::@8->divr16s::@return]
  //SEG215 [107] phi (signed word) rem16s#11 = (signed word~) rem16s#37 [phi:divr16s::@5/divr16s::@8->divr16s::@return#0] -- register_copy 
  //SEG216 [107] phi (signed word) divr16s::return#2 = (signed word~) divr16s::return#7 [phi:divr16s::@5/divr16s::@8->divr16s::@return#1] -- register_copy 
  //SEG217 divr16s::@return
  breturn:
  //SEG218 [108] return 
    rts
  //SEG219 divr16s::@5
  //SEG220 [109] (signed word~) divr16s::return#7 ← (signed word)(word) divr16s::resultu#0
  //SEG221 [110] (signed word~) rem16s#37 ← (signed word)(word) rem16u#1
  //SEG222 divr16s::@3
  b3:
  //SEG223 [111] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc divisoru
    sta divisoru
    lda #0
    sbc divisoru+1
    sta divisoru+1
  //SEG224 [112] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
  //SEG225 [113] (word~) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
    jmp b4
  //SEG226 divr16s::@1
  b1:
  //SEG227 [114] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc dividendu
    sta dividendu
    lda #0
    sbc dividendu+1
    sta dividendu+1
  //SEG228 [115] (word~) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
  //SEG229 [94] phi from divr16s::@1 to divr16s::@2 [phi:divr16s::@1->divr16s::@2]
  //SEG230 [94] phi (word) divr16s::dividendu#3 = (word~) divr16s::dividendu#7 [phi:divr16s::@1->divr16s::@2#0] -- register_copy 
  //SEG231 [94] phi (byte) divr16s::neg#3 = (byte) 1 [phi:divr16s::@1->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
    jmp b2
}
//SEG232 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($c) dividend, word zeropage($e) divisor, word zeropage($12) rem)
divr16u: {
    .label rem = $12
    .label dividend = $c
    .label quotient = $10
    .label return = $10
    .label divisor = $e
  //SEG233 [117] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  //SEG234 [117] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG235 [117] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta quotient
    sta quotient+1
  //SEG236 [117] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG237 [117] phi (word) divr16u::rem#5 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    sta rem
    sta rem+1
  //SEG238 [117] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  //SEG239 [117] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG240 [117] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG241 [117] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG242 [117] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
  //SEG243 divr16u::@1
  b1:
  //SEG244 [118] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG245 [119] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG246 [120] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG247 [121] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG248 divr16u::@4
  //SEG249 [122] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG250 [123] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  //SEG251 [123] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
  //SEG252 divr16u::@2
  b2:
  //SEG253 [124] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG254 [125] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG255 [126] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3
    bne !+
    lda rem
    cmp divisor
    bcc b3
  !:
  //SEG256 divr16u::@5
  //SEG257 [127] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG258 [128] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG259 [129] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  //SEG260 [129] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG261 [129] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
  //SEG262 divr16u::@3
  b3:
  //SEG263 [130] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG264 [131] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG265 divr16u::@6
  //SEG266 [132] (word) rem16u#1 ← (word) divr16u::rem#11
  //SEG267 divr16u::@return
  //SEG268 [133] return 
    rts
}
//SEG269 test_8s
test_8s: {
    .label dividend = 9
    .label divisor = $1e
    .label res = $1f
    .label i = $14
  //SEG270 [135] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  //SEG271 [135] phi (byte) test_8s::i#10 = (byte) 0 [phi:test_8s->test_8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG272 [135] phi from test_8s::@10 to test_8s::@1 [phi:test_8s::@10->test_8s::@1]
  //SEG273 [135] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@10->test_8s::@1#0] -- register_copy 
  //SEG274 test_8s::@1
  b1:
  //SEG275 [136] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG276 [137] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
  //SEG277 [138] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 -- vbsyy=vbsz1 
    ldy dividend
  //SEG278 [139] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 -- vbsxx=vbsz1 
    tax
  //SEG279 [140] call div8s 
    jsr div8s
  //SEG280 [141] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
  //SEG281 test_8s::@2
  //SEG282 [142] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 -- vbsz1=vbsaa 
    sta res
  //SEG283 [143] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0
  //SEG284 [144] (byte*~) print_char_cursor#168 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG285 [145] call print_sbyte 
  //SEG286 [163] phi from test_8s::@2 to print_sbyte [phi:test_8s::@2->print_sbyte]
  //SEG287 [163] phi (byte*) print_char_cursor#135 = (byte*~) print_char_cursor#168 [phi:test_8s::@2->print_sbyte#0] -- register_copy 
  //SEG288 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#1 [phi:test_8s::@2->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG289 [146] phi from test_8s::@2 to test_8s::@3 [phi:test_8s::@2->test_8s::@3]
  //SEG290 test_8s::@3
  //SEG291 [147] call print_str 
  //SEG292 [79] phi from test_8s::@3 to print_str [phi:test_8s::@3->print_str]
  //SEG293 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_8s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG294 test_8s::@4
  //SEG295 [148] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG296 [149] call print_sbyte 
  //SEG297 [163] phi from test_8s::@4 to print_sbyte [phi:test_8s::@4->print_sbyte]
  //SEG298 [163] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#130 [phi:test_8s::@4->print_sbyte#0] -- register_copy 
  //SEG299 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#2 [phi:test_8s::@4->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG300 [150] phi from test_8s::@4 to test_8s::@5 [phi:test_8s::@4->test_8s::@5]
  //SEG301 test_8s::@5
  //SEG302 [151] call print_str 
  //SEG303 [79] phi from test_8s::@5 to print_str [phi:test_8s::@5->print_str]
  //SEG304 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_8s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG305 test_8s::@6
  //SEG306 [152] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG307 [153] call print_sbyte 
  //SEG308 [163] phi from test_8s::@6 to print_sbyte [phi:test_8s::@6->print_sbyte]
  //SEG309 [163] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#130 [phi:test_8s::@6->print_sbyte#0] -- register_copy 
  //SEG310 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#3 [phi:test_8s::@6->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG311 [154] phi from test_8s::@6 to test_8s::@7 [phi:test_8s::@6->test_8s::@7]
  //SEG312 test_8s::@7
  //SEG313 [155] call print_str 
  //SEG314 [79] phi from test_8s::@7 to print_str [phi:test_8s::@7->print_str]
  //SEG315 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_8s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG316 test_8s::@8
  //SEG317 [156] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 -- vbsz1=vbsxx 
    stx print_sbyte.b
  //SEG318 [157] call print_sbyte 
  //SEG319 [163] phi from test_8s::@8 to print_sbyte [phi:test_8s::@8->print_sbyte]
  //SEG320 [163] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#130 [phi:test_8s::@8->print_sbyte#0] -- register_copy 
  //SEG321 [163] phi (signed byte) print_sbyte::b#10 = (signed byte) print_sbyte::b#4 [phi:test_8s::@8->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG322 [158] phi from test_8s::@8 to test_8s::@9 [phi:test_8s::@8->test_8s::@9]
  //SEG323 test_8s::@9
  //SEG324 [159] call print_ln 
  //SEG325 [45] phi from test_8s::@9 to print_ln [phi:test_8s::@9->print_ln]
  //SEG326 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_8s::@9->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG327 test_8s::@10
  //SEG328 [160] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG329 [161] if((byte) test_8s::i#1!=(byte) 6) goto test_8s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b1
  //SEG330 test_8s::@return
  //SEG331 [162] return 
    rts
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG332 print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage(9) b)
print_sbyte: {
    .label b = 9
  //SEG333 [164] if((signed byte) print_sbyte::b#10<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda b
    bmi b1
  //SEG334 [165] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  //SEG335 print_sbyte::@3
  //SEG336 [166] call print_char 
  //SEG337 [61] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  //SEG338 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#135 [phi:print_sbyte::@3->print_char#0] -- register_copy 
  //SEG339 [61] phi (byte) print_char::ch#6 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG340 [167] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  //SEG341 [167] phi (signed byte) print_sbyte::b#7 = (signed byte) print_sbyte::b#10 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
  //SEG342 print_sbyte::@2
  b2:
  //SEG343 [168] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#7
  //SEG344 [169] call print_byte 
  //SEG345 [71] phi from print_sbyte::@2 to print_byte [phi:print_sbyte::@2->print_byte]
  //SEG346 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#19 [phi:print_sbyte::@2->print_byte#0] -- register_copy 
  //SEG347 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#0 [phi:print_sbyte::@2->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG348 print_sbyte::@return
  //SEG349 [170] return 
    rts
  //SEG350 [171] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  //SEG351 print_sbyte::@1
  b1:
  //SEG352 [172] call print_char 
  //SEG353 [61] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  //SEG354 [61] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#135 [phi:print_sbyte::@1->print_char#0] -- register_copy 
  //SEG355 [61] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG356 print_sbyte::@4
  //SEG357 [173] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#10 -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
    jmp b2
}
//SEG358 div8s
// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div8s(signed byte register(Y) dividend, signed byte register(X) divisor)
div8s: {
    .label neg = $15
  //SEG359 [174] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1 -- vbsyy_lt_0_then_la1 
    cpy #0
    bmi b1
  //SEG360 div8s::@6
  //SEG361 [175] (byte~) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0
  //SEG362 [176] phi from div8s::@6 to div8s::@2 [phi:div8s::@6->div8s::@2]
  //SEG363 [176] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#8 [phi:div8s::@6->div8s::@2#0] -- register_copy 
  //SEG364 [176] phi (byte) div8s::neg#3 = (byte) 0 [phi:div8s::@6->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
  //SEG365 div8s::@2
  b2:
  //SEG366 [177] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi b3
  //SEG367 div8s::@7
  //SEG368 [178] (byte~) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0
  //SEG369 [179] phi from div8s::@3 div8s::@7 to div8s::@4 [phi:div8s::@3/div8s::@7->div8s::@4]
  //SEG370 [179] phi (byte) div8s::neg#4 = (byte) div8s::neg#2 [phi:div8s::@3/div8s::@7->div8s::@4#0] -- register_copy 
  //SEG371 [179] phi (byte) div8s::divisoru#3 = (byte~) div8s::divisoru#4 [phi:div8s::@3/div8s::@7->div8s::@4#1] -- register_copy 
  //SEG372 div8s::@4
  b4:
  //SEG373 [180] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 -- vbuaa=vbuyy 
    tya
  //SEG374 [181] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
  //SEG375 [182] call div8u 
  //SEG376 [198] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  //SEG377 [198] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG378 [198] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
  //SEG379 [183] (byte) div8u::return#2 ← (byte) div8u::return#0
  //SEG380 div8s::@9
  //SEG381 [184] (byte) div8s::resultu#0 ← (byte) div8u::return#2 -- vbuyy=vbuaa 
    tay
  //SEG382 [185] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5 -- vbuz1_eq_0_then_la1 
    lda neg
    cmp #0
    beq b5
  //SEG383 div8s::@8
  //SEG384 [186] (signed byte~) div8s::$11 ← (signed byte)(byte) rem8u#17 -- vbsaa=vbsxx 
    txa
  //SEG385 [187] (signed byte) rem8s#2 ← - (signed byte~) div8s::$11 -- vbsxx=_neg_vbsaa 
    eor #$ff
    clc
    adc #1
    tax
  //SEG386 [188] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
  //SEG387 [189] phi from div8s::@5 div8s::@8 to div8s::@return [phi:div8s::@5/div8s::@8->div8s::@return]
  //SEG388 [189] phi (signed byte) rem8s#3 = (signed byte~) rem8s#33 [phi:div8s::@5/div8s::@8->div8s::@return#0] -- register_copy 
  //SEG389 [189] phi (signed byte) div8s::return#2 = (signed byte~) div8s::return#7 [phi:div8s::@5/div8s::@8->div8s::@return#1] -- register_copy 
  //SEG390 div8s::@return
  //SEG391 [190] return 
    rts
  //SEG392 div8s::@5
  b5:
  //SEG393 [191] (signed byte~) div8s::return#7 ← (signed byte)(byte) div8s::resultu#0 -- vbsaa=vbsyy 
    tya
  //SEG394 [192] (signed byte~) rem8s#33 ← (signed byte)(byte) rem8u#17
    rts
  //SEG395 div8s::@3
  b3:
  //SEG396 [193] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
  //SEG397 [194] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #1
    eor neg
    sta neg
  //SEG398 [195] (byte~) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisoru#1
    jmp b4
  //SEG399 div8s::@1
  b1:
  //SEG400 [196] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
  //SEG401 [197] (byte~) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividendu#1 -- vbuyy=vbuaa 
    tay
  //SEG402 [176] phi from div8s::@1 to div8s::@2 [phi:div8s::@1->div8s::@2]
  //SEG403 [176] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#7 [phi:div8s::@1->div8s::@2#0] -- register_copy 
  //SEG404 [176] phi (byte) div8s::neg#3 = (byte) 1 [phi:div8s::@1->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
}
//SEG405 div8u
// Performs division on two 8 bit unsigned bytes
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8u
// Implemented using simple binary division
// div8u(byte register(A) dividend, byte register(X) divisor)
div8u: {
  //SEG406 [199] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 -- vbuz1=vbuaa 
    sta divr8u.dividend
  //SEG407 [200] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 -- vbuz1=vbuxx 
    stx divr8u.divisor
  //SEG408 [201] call divr8u 
  //SEG409 [205] phi from div8u to divr8u [phi:div8u->divr8u]
    jsr divr8u
  //SEG410 [202] (byte) divr8u::return#0 ← (byte) divr8u::return#1 -- vbuaa=vbuz1 
    lda divr8u.return
  //SEG411 div8u::@1
  //SEG412 [203] (byte) div8u::return#0 ← (byte) divr8u::return#0
  //SEG413 div8u::@return
  //SEG414 [204] return 
    rts
}
//SEG415 divr8u
// Performs division on two 8 bit unsigned bytes and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
// divr8u(byte zeropage($16) dividend, byte zeropage($20) divisor, byte register(Y) rem)
divr8u: {
    .label dividend = $16
    .label divisor = $20
    .label quotient = $17
    .label return = $17
  //SEG416 [206] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  //SEG417 [206] phi (byte) divr8u::i#2 = (byte) 0 [phi:divr8u->divr8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG418 [206] phi (byte) divr8u::quotient#3 = (byte) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    txa
    sta quotient
  //SEG419 [206] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
  //SEG420 [206] phi (byte) divr8u::rem#4 = (byte) 0 [phi:divr8u->divr8u::@1#3] -- vbuyy=vbuc1 
    tay
  //SEG421 [206] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  //SEG422 [206] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
  //SEG423 [206] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
  //SEG424 [206] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
  //SEG425 [206] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
  //SEG426 divr8u::@1
  b1:
  //SEG427 [207] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte) 1 -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
  //SEG428 [208] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and dividend
  //SEG429 [209] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG430 divr8u::@4
  //SEG431 [210] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 -- vbuyy=vbuyy_bor_vbuc1 
    tya
    ora #1
    tay
  //SEG432 [211] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  //SEG433 [211] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
  //SEG434 divr8u::@2
  b2:
  //SEG435 [212] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG436 [213] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG437 [214] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 -- vbuyy_lt_vbuz1_then_la1 
    cpy divisor
    bcc b3
  //SEG438 divr8u::@5
  //SEG439 [215] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG440 [216] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc divisor
    tay
  //SEG441 [217] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  //SEG442 [217] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
  //SEG443 [217] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
  //SEG444 divr8u::@3
  b3:
  //SEG445 [218] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG446 [219] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1
  //SEG447 divr8u::@6
  //SEG448 [220] (byte) rem8u#17 ← (byte) divr8u::rem#10 -- vbuxx=vbuyy 
    tya
    tax
  //SEG449 divr8u::@return
  //SEG450 [221] return 
    rts
}
//SEG451 test_16u
test_16u: {
    .label dividend = 5
    .label divisor = $e
    .label res = $10
    .label i = $18
  //SEG452 [223] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  //SEG453 [223] phi (byte) test_16u::i#10 = (byte) 0 [phi:test_16u->test_16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG454 [223] phi from test_16u::@10 to test_16u::@1 [phi:test_16u::@10->test_16u::@1]
  //SEG455 [223] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@10->test_16u::@1#0] -- register_copy 
  //SEG456 test_16u::@1
  b1:
  //SEG457 [224] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda i
    asl
    tax
  //SEG458 [225] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuxx 
    lda dividends,x
    sta dividend
    lda dividends+1,x
    sta dividend+1
  //SEG459 [226] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuxx 
    lda divisors,x
    sta divisor
    lda divisors+1,x
    sta divisor+1
  //SEG460 [227] (word) div16u::dividend#0 ← (word) test_16u::dividend#0
  //SEG461 [228] (word) div16u::divisor#0 ← (word) test_16u::divisor#0
  //SEG462 [229] call div16u 
    jsr div16u
  //SEG463 [230] (word) div16u::return#2 ← (word) div16u::return#0
  //SEG464 test_16u::@2
  //SEG465 [231] (word) test_16u::res#0 ← (word) div16u::return#2
  //SEG466 [232] (word) print_word::w#1 ← (word) test_16u::dividend#0
  //SEG467 [233] (byte*~) print_char_cursor#173 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG468 [234] call print_word 
  //SEG469 [65] phi from test_16u::@2 to print_word [phi:test_16u::@2->print_word]
  //SEG470 [65] phi (byte*) print_char_cursor#138 = (byte*~) print_char_cursor#173 [phi:test_16u::@2->print_word#0] -- register_copy 
  //SEG471 [65] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:test_16u::@2->print_word#1] -- register_copy 
    jsr print_word
  //SEG472 [235] phi from test_16u::@2 to test_16u::@3 [phi:test_16u::@2->test_16u::@3]
  //SEG473 test_16u::@3
  //SEG474 [236] call print_str 
  //SEG475 [79] phi from test_16u::@3 to print_str [phi:test_16u::@3->print_str]
  //SEG476 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_16u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG477 test_16u::@4
  //SEG478 [237] (word) print_word::w#2 ← (word) test_16u::divisor#0 -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG479 [238] call print_word 
  //SEG480 [65] phi from test_16u::@4 to print_word [phi:test_16u::@4->print_word]
  //SEG481 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#130 [phi:test_16u::@4->print_word#0] -- register_copy 
  //SEG482 [65] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:test_16u::@4->print_word#1] -- register_copy 
    jsr print_word
  //SEG483 [239] phi from test_16u::@4 to test_16u::@5 [phi:test_16u::@4->test_16u::@5]
  //SEG484 test_16u::@5
  //SEG485 [240] call print_str 
  //SEG486 [79] phi from test_16u::@5 to print_str [phi:test_16u::@5->print_str]
  //SEG487 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_16u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG488 test_16u::@6
  //SEG489 [241] (word) print_word::w#3 ← (word) test_16u::res#0 -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG490 [242] call print_word 
  //SEG491 [65] phi from test_16u::@6 to print_word [phi:test_16u::@6->print_word]
  //SEG492 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#130 [phi:test_16u::@6->print_word#0] -- register_copy 
  //SEG493 [65] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:test_16u::@6->print_word#1] -- register_copy 
    jsr print_word
  //SEG494 [243] phi from test_16u::@6 to test_16u::@7 [phi:test_16u::@6->test_16u::@7]
  //SEG495 test_16u::@7
  //SEG496 [244] call print_str 
  //SEG497 [79] phi from test_16u::@7 to print_str [phi:test_16u::@7->print_str]
  //SEG498 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_16u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG499 test_16u::@8
  //SEG500 [245] (word) print_word::w#4 ← (word) rem16u#1 -- vwuz1=vwuz2 
    lda rem16u
    sta print_word.w
    lda rem16u+1
    sta print_word.w+1
  //SEG501 [246] call print_word 
  //SEG502 [65] phi from test_16u::@8 to print_word [phi:test_16u::@8->print_word]
  //SEG503 [65] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#130 [phi:test_16u::@8->print_word#0] -- register_copy 
  //SEG504 [65] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:test_16u::@8->print_word#1] -- register_copy 
    jsr print_word
  //SEG505 [247] phi from test_16u::@8 to test_16u::@9 [phi:test_16u::@8->test_16u::@9]
  //SEG506 test_16u::@9
  //SEG507 [248] call print_ln 
  //SEG508 [45] phi from test_16u::@9 to print_ln [phi:test_16u::@9->print_ln]
  //SEG509 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16u::@9->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG510 test_16u::@10
  //SEG511 [249] (byte) test_16u::i#1 ← ++ (byte) test_16u::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG512 [250] if((byte) test_16u::i#1!=(byte) 6) goto test_16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b1
  //SEG513 test_16u::@return
  //SEG514 [251] return 
    rts
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG515 div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
// div16u(word zeropage(5) dividend, word zeropage($e) divisor)
div16u: {
    .label return = $10
    .label dividend = 5
    .label divisor = $e
  //SEG516 [252] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 -- vwuz1=vwuz2 
    lda dividend
    sta divr16u.dividend
    lda dividend+1
    sta divr16u.dividend+1
  //SEG517 [253] (word) divr16u::divisor#0 ← (word) div16u::divisor#0
  //SEG518 [254] call divr16u 
  //SEG519 [116] phi from div16u to divr16u [phi:div16u->divr16u]
  //SEG520 [116] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#0 [phi:div16u->divr16u#0] -- register_copy 
  //SEG521 [116] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#1 [phi:div16u->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG522 [255] (word) divr16u::return#2 ← (word) divr16u::return#0
  //SEG523 div16u::@1
  //SEG524 [256] (word) div16u::return#0 ← (word) divr16u::return#2
  //SEG525 div16u::@return
  //SEG526 [257] return 
    rts
}
//SEG527 test_8u
test_8u: {
    .label dividend = 9
    .label divisor = $21
    .label res = $22
    .label i = $19
  //SEG528 [259] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  //SEG529 [259] phi (byte*) print_line_cursor#41 = (byte*) 1024 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG530 [259] phi (byte*) print_char_cursor#141 = (byte*) 1024 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG531 [259] phi (byte) test_8u::i#10 = (byte) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG532 test_8u::@1
  b1:
  //SEG533 [260] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG534 [261] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
  //SEG535 [262] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 -- vbuaa=vbuz1 
    lda dividend
  //SEG536 [263] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 -- vbuxx=vbuz1 
    ldx divisor
  //SEG537 [264] call div8u 
  //SEG538 [198] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  //SEG539 [198] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG540 [198] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
  //SEG541 [265] (byte) div8u::return#3 ← (byte) div8u::return#0
  //SEG542 test_8u::@2
  //SEG543 [266] (byte) test_8u::res#0 ← (byte) div8u::return#3 -- vbuz1=vbuaa 
    sta res
  //SEG544 [267] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0
  //SEG545 [268] call print_byte 
  //SEG546 [71] phi from test_8u::@2 to print_byte [phi:test_8u::@2->print_byte]
  //SEG547 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#141 [phi:test_8u::@2->print_byte#0] -- register_copy 
  //SEG548 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@2->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG549 [269] phi from test_8u::@2 to test_8u::@3 [phi:test_8u::@2->test_8u::@3]
  //SEG550 test_8u::@3
  //SEG551 [270] call print_str 
  //SEG552 [79] phi from test_8u::@3 to print_str [phi:test_8u::@3->print_str]
  //SEG553 [79] phi (byte*) print_str::str#15 = (const string) str [phi:test_8u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG554 test_8u::@4
  //SEG555 [271] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG556 [272] call print_byte 
  //SEG557 [71] phi from test_8u::@4 to print_byte [phi:test_8u::@4->print_byte]
  //SEG558 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#130 [phi:test_8u::@4->print_byte#0] -- register_copy 
  //SEG559 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@4->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG560 [273] phi from test_8u::@4 to test_8u::@5 [phi:test_8u::@4->test_8u::@5]
  //SEG561 test_8u::@5
  //SEG562 [274] call print_str 
  //SEG563 [79] phi from test_8u::@5 to print_str [phi:test_8u::@5->print_str]
  //SEG564 [79] phi (byte*) print_str::str#15 = (const string) str1 [phi:test_8u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG565 test_8u::@6
  //SEG566 [275] (byte) print_byte::b#5 ← (byte) test_8u::res#0 -- vbuz1=vbuz2 
    lda res
    sta print_byte.b
  //SEG567 [276] call print_byte 
  //SEG568 [71] phi from test_8u::@6 to print_byte [phi:test_8u::@6->print_byte]
  //SEG569 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#130 [phi:test_8u::@6->print_byte#0] -- register_copy 
  //SEG570 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@6->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG571 [277] phi from test_8u::@6 to test_8u::@7 [phi:test_8u::@6->test_8u::@7]
  //SEG572 test_8u::@7
  //SEG573 [278] call print_str 
  //SEG574 [79] phi from test_8u::@7 to print_str [phi:test_8u::@7->print_str]
  //SEG575 [79] phi (byte*) print_str::str#15 = (const string) str2 [phi:test_8u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG576 test_8u::@8
  //SEG577 [279] (byte) print_byte::b#6 ← (byte) rem8u#17 -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG578 [280] call print_byte 
  //SEG579 [71] phi from test_8u::@8 to print_byte [phi:test_8u::@8->print_byte]
  //SEG580 [71] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#130 [phi:test_8u::@8->print_byte#0] -- register_copy 
  //SEG581 [71] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@8->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG582 [281] phi from test_8u::@8 to test_8u::@9 [phi:test_8u::@8->test_8u::@9]
  //SEG583 test_8u::@9
  //SEG584 [282] call print_ln 
  //SEG585 [45] phi from test_8u::@9 to print_ln [phi:test_8u::@9->print_ln]
  //SEG586 [45] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#41 [phi:test_8u::@9->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG587 test_8u::@10
  //SEG588 [283] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG589 [284] if((byte) test_8u::i#1!=(byte) 6) goto test_8u::@11 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b11
  //SEG590 test_8u::@return
  //SEG591 [285] return 
    rts
  //SEG592 test_8u::@11
  b11:
  //SEG593 [286] (byte*~) print_char_cursor#190 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG594 [259] phi from test_8u::@11 to test_8u::@1 [phi:test_8u::@11->test_8u::@1]
  //SEG595 [259] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#1 [phi:test_8u::@11->test_8u::@1#0] -- register_copy 
  //SEG596 [259] phi (byte*) print_char_cursor#141 = (byte*~) print_char_cursor#190 [phi:test_8u::@11->test_8u::@1#1] -- register_copy 
  //SEG597 [259] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@11->test_8u::@1#2] -- register_copy 
    jmp b1
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG598 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $1a
  //SEG599 [288] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG600 [288] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG601 [288] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG602 [288] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG603 print_cls::@1
  b1:
  //SEG604 [289] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG605 [290] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG606 [291] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG607 print_cls::@return
  //SEG608 [292] return 
    rts
}
//SEG609 File Data
  print_hextab: .text "0123456789abcdef"
  str: .text " / @"
  str1: .text " = @"
  str2: .text " @"

