Converting parameter in __varcall procedure to load/store fg_sum::a
Converting parameter in __varcall procedure to load/store fg_sum::b
Converting return in __varcall procedure to load/store fg_sum::return
Eliminating unused variable with no statement main::$0
Eliminating unused variable with no statement main::$1
Eliminating unused variable with no statement fg_sum::a
Eliminating unused variable with no statement fg_sum::b
Calling convention __varcall adding prepare/execute/finalize for main::sum1 = call fg_sum(*((char *)&a+OFFSET_STRUCT_COLS_BORDER), *((char *)&a+OFFSET_STRUCT_COLS_BG), *((char *)&a+OFFSET_STRUCT_COLS_FG), *((char *)&b+OFFSET_STRUCT_COLS_BORDER), *((char *)&b+OFFSET_STRUCT_COLS_BG), *((char *)&b+OFFSET_STRUCT_COLS_FG))
Calling convention __varcall adding prepare/execute/finalize for main::sum2 = call fg_sum(*((char *)&c+OFFSET_STRUCT_COLS_BORDER), *((char *)&c+OFFSET_STRUCT_COLS_BG), *((char *)&c+OFFSET_STRUCT_COLS_FG), *((char *)&d+OFFSET_STRUCT_COLS_BORDER), *((char *)&d+OFFSET_STRUCT_COLS_BG), *((char *)&d+OFFSET_STRUCT_COLS_FG))
Calling convention VAR_CALL adding return value assignment main::sum1 = fg_sum::return
Calling convention VAR_CALL adding return value assignment main::sum2 = fg_sum::return
Removing C-classic struct-unwound assignment d = struct-unwound {*(&d)}

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  fg_sum::a_border = *((char *)&a+OFFSET_STRUCT_COLS_BORDER)
  fg_sum::a_bg = *((char *)&a+OFFSET_STRUCT_COLS_BG)
  fg_sum::a_fg = *((char *)&a+OFFSET_STRUCT_COLS_FG)
  fg_sum::b_border = *((char *)&b+OFFSET_STRUCT_COLS_BORDER)
  fg_sum::b_bg = *((char *)&b+OFFSET_STRUCT_COLS_BG)
  fg_sum::b_fg = *((char *)&b+OFFSET_STRUCT_COLS_FG)
  callexecute fg_sum 
  main::sum1#0 = fg_sum::return
  *COLS = main::sum1#0
  *(&d) = memcpy(*(&b), struct Cols, SIZEOF_STRUCT_COLS)
  fg_sum::a_border = *((char *)&c+OFFSET_STRUCT_COLS_BORDER)
  fg_sum::a_bg = *((char *)&c+OFFSET_STRUCT_COLS_BG)
  fg_sum::a_fg = *((char *)&c+OFFSET_STRUCT_COLS_FG)
  fg_sum::b_border = *((char *)&d+OFFSET_STRUCT_COLS_BORDER)
  fg_sum::b_bg = *((char *)&d+OFFSET_STRUCT_COLS_BG)
  fg_sum::b_fg = *((char *)&d+OFFSET_STRUCT_COLS_FG)
  callexecute fg_sum 
  main::sum2#0 = fg_sum::return
  *COLS = main::sum2#0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

__varcall char fg_sum(char a_border , char a_bg , char a_fg , char b_border , char b_bg , char b_fg)
fg_sum: scope:[fg_sum]  from
  fg_sum::$0 = fg_sum::a_fg + fg_sum::b_fg
  fg_sum::return = fg_sum::$0
  to:fg_sum::@return
fg_sum::@return: scope:[fg_sum]  from fg_sum
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const COLS = (char *)$d020
__constant char OFFSET_STRUCT_COLS_BG = 1
__constant char OFFSET_STRUCT_COLS_BORDER = 0
__constant char OFFSET_STRUCT_COLS_FG = 2
__constant char SIZEOF_STRUCT_COLS = 3
void __start()
__loadstore struct Cols a = { border: 1, bg: 2, fg: 3 }
__loadstore struct Cols b = { border: 3, bg: 4, fg: 6 }
__loadstore struct Cols c = { border: 5, bg: 6, fg: 7 }
__loadstore struct Cols d = {}
__varcall char fg_sum(char a_border , char a_bg , char a_fg , char b_border , char b_bg , char b_fg)
char fg_sum::$0
__loadstore char fg_sum::a_bg
__loadstore char fg_sum::a_border
__loadstore char fg_sum::a_fg
__loadstore char fg_sum::b_bg
__loadstore char fg_sum::b_border
__loadstore char fg_sum::b_fg
__loadstore char fg_sum::return
void main()
char main::sum1
char main::sum1#0
char main::sum2
char main::sum2#0

Simplifying constant pointer cast (char *) 53280
Successful SSA optimization PassNCastSimplification
Alias candidate removed (volatile)fg_sum::return = fg_sum::$0 
Simplifying expression containing zero (char *)&a in [0] fg_sum::a_border = *((char *)&a+OFFSET_STRUCT_COLS_BORDER)
Simplifying expression containing zero (char *)&b in [3] fg_sum::b_border = *((char *)&b+OFFSET_STRUCT_COLS_BORDER)
Simplifying expression containing zero (char *)&c in [10] fg_sum::a_border = *((char *)&c+OFFSET_STRUCT_COLS_BORDER)
Simplifying expression containing zero (char *)&d in [13] fg_sum::b_border = *((char *)&d+OFFSET_STRUCT_COLS_BORDER)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_COLS_BORDER
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Alias candidate removed (volatile)fg_sum::return = fg_sum::$0 
Alias candidate removed (volatile)fg_sum::return = fg_sum::$0 
Alias candidate removed (volatile)fg_sum::return = fg_sum::$0 
CALL GRAPH
Calls in [main] to fg_sum:9 fg_sum:19 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

__varcall char fg_sum(char a_border , char a_bg , char a_fg , char b_border , char b_bg , char b_fg)
fg_sum: scope:[fg_sum]  from
  [0] fg_sum::$0 = fg_sum::a_fg + fg_sum::b_fg
  [1] fg_sum::return = fg_sum::$0
  to:fg_sum::@return
fg_sum::@return: scope:[fg_sum]  from fg_sum
  [2] return 
  to:@return

void main()
main: scope:[main]  from
  [3] fg_sum::a_border = *((char *)&a)
  [4] fg_sum::a_bg = *((char *)&a+OFFSET_STRUCT_COLS_BG)
  [5] fg_sum::a_fg = *((char *)&a+OFFSET_STRUCT_COLS_FG)
  [6] fg_sum::b_border = *((char *)&b)
  [7] fg_sum::b_bg = *((char *)&b+OFFSET_STRUCT_COLS_BG)
  [8] fg_sum::b_fg = *((char *)&b+OFFSET_STRUCT_COLS_FG)
  [9] callexecute fg_sum 
  [10] main::sum1#0 = fg_sum::return
  [11] *COLS = main::sum1#0
  [12] *(&d) = memcpy(*(&b), struct Cols, SIZEOF_STRUCT_COLS)
  [13] fg_sum::a_border = *((char *)&c)
  [14] fg_sum::a_bg = *((char *)&c+OFFSET_STRUCT_COLS_BG)
  [15] fg_sum::a_fg = *((char *)&c+OFFSET_STRUCT_COLS_FG)
  [16] fg_sum::b_border = *((char *)&d)
  [17] fg_sum::b_bg = *((char *)&d+OFFSET_STRUCT_COLS_BG)
  [18] fg_sum::b_fg = *((char *)&d+OFFSET_STRUCT_COLS_FG)
  [19] callexecute fg_sum 
  [20] main::sum2#0 = fg_sum::return
  [21] *COLS = main::sum2#0
  to:main::@return
main::@return: scope:[main]  from main
  [22] return 
  to:@return


VARIABLE REGISTER WEIGHTS
__loadstore struct Cols a = { border: 1, bg: 2, fg: 3 }
__loadstore struct Cols b = { border: 3, bg: 4, fg: 6 }
__loadstore struct Cols c = { border: 5, bg: 6, fg: 7 }
__loadstore struct Cols d = {}
__varcall char fg_sum(char a_border , char a_bg , char a_fg , char b_border , char b_bg , char b_fg)
char fg_sum::$0 // 22.0
__loadstore char fg_sum::a_bg // 40.0
__loadstore char fg_sum::a_border // 40.0
__loadstore char fg_sum::a_fg // 1.875
__loadstore char fg_sum::b_bg // 40.0
__loadstore char fg_sum::b_border // 40.0
__loadstore char fg_sum::b_fg // 7.5
__loadstore char fg_sum::return // 3.75
void main()
char main::sum1
char main::sum1#0 // 4.0
char main::sum2
char main::sum2#0 // 4.0

Initial phi equivalence classes
Added variable fg_sum::$0 to live range equivalence class [ fg_sum::$0 ]
Added variable fg_sum::return to live range equivalence class [ fg_sum::return ]
Added variable fg_sum::a_border to live range equivalence class [ fg_sum::a_border ]
Added variable fg_sum::a_bg to live range equivalence class [ fg_sum::a_bg ]
Added variable fg_sum::a_fg to live range equivalence class [ fg_sum::a_fg ]
Added variable fg_sum::b_border to live range equivalence class [ fg_sum::b_border ]
Added variable fg_sum::b_bg to live range equivalence class [ fg_sum::b_bg ]
Added variable fg_sum::b_fg to live range equivalence class [ fg_sum::b_fg ]
Added variable main::sum1#0 to live range equivalence class [ main::sum1#0 ]
Added variable main::sum2#0 to live range equivalence class [ main::sum2#0 ]
Added variable a to live range equivalence class [ a ]
Added variable b to live range equivalence class [ b ]
Added variable c to live range equivalence class [ c ]
Added variable d to live range equivalence class [ d ]
Complete equivalence classes
[ fg_sum::$0 ]
[ fg_sum::return ]
[ fg_sum::a_border ]
[ fg_sum::a_bg ]
[ fg_sum::a_fg ]
[ fg_sum::b_border ]
[ fg_sum::b_bg ]
[ fg_sum::b_fg ]
[ main::sum1#0 ]
[ main::sum2#0 ]
[ a ]
[ b ]
[ c ]
[ d ]
Allocated zp[1]:2 [ fg_sum::a_border ]
Allocated zp[1]:3 [ fg_sum::a_bg ]
Allocated zp[1]:4 [ fg_sum::b_border ]
Allocated zp[1]:5 [ fg_sum::b_bg ]
Allocated zp[1]:6 [ fg_sum::$0 ]
Allocated zp[1]:7 [ fg_sum::b_fg ]
Allocated zp[1]:8 [ main::sum1#0 ]
Allocated zp[1]:9 [ main::sum2#0 ]
Allocated zp[1]:10 [ fg_sum::return ]
Allocated zp[1]:11 [ fg_sum::a_fg ]
Allocated mem[3] [ a ]
Allocated mem[3] [ b ]
Allocated mem[3] [ c ]
Allocated mem[3] [ d ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] fg_sum::$0 = fg_sum::a_fg + fg_sum::b_fg [ fg_sum::$0 ] ( fg_sum:9 [ b d c fg_sum::$0 ] { }  fg_sum:19 [ fg_sum::$0 ] { }  ) always clobbers reg byte a 
Statement [3] fg_sum::a_border = *((char *)&a) [ a b d c ] (  [ a b d c ] { }  ) always clobbers reg byte a 
Statement [4] fg_sum::a_bg = *((char *)&a+OFFSET_STRUCT_COLS_BG) [ a b d c ] (  [ a b d c ] { }  ) always clobbers reg byte a 
Statement [5] fg_sum::a_fg = *((char *)&a+OFFSET_STRUCT_COLS_FG) [ fg_sum::a_fg b d c ] (  [ fg_sum::a_fg b d c ] { }  ) always clobbers reg byte a 
Statement [6] fg_sum::b_border = *((char *)&b) [ fg_sum::a_fg b d c ] (  [ fg_sum::a_fg b d c ] { }  ) always clobbers reg byte a 
Statement [7] fg_sum::b_bg = *((char *)&b+OFFSET_STRUCT_COLS_BG) [ fg_sum::a_fg b d c ] (  [ fg_sum::a_fg b d c ] { }  ) always clobbers reg byte a 
Statement [8] fg_sum::b_fg = *((char *)&b+OFFSET_STRUCT_COLS_FG) [ fg_sum::a_fg fg_sum::b_fg b d c ] (  [ fg_sum::a_fg fg_sum::b_fg b d c ] { }  ) always clobbers reg byte a 
Statement [12] *(&d) = memcpy(*(&b), struct Cols, SIZEOF_STRUCT_COLS) [ d c ] (  [ d c ] { }  ) always clobbers reg byte a reg byte y 
Statement [13] fg_sum::a_border = *((char *)&c) [ d c ] (  [ d c ] { }  ) always clobbers reg byte a 
Statement [14] fg_sum::a_bg = *((char *)&c+OFFSET_STRUCT_COLS_BG) [ d c ] (  [ d c ] { }  ) always clobbers reg byte a 
Statement [15] fg_sum::a_fg = *((char *)&c+OFFSET_STRUCT_COLS_FG) [ fg_sum::a_fg d ] (  [ fg_sum::a_fg d ] { }  ) always clobbers reg byte a 
Statement [16] fg_sum::b_border = *((char *)&d) [ fg_sum::a_fg d ] (  [ fg_sum::a_fg d ] { }  ) always clobbers reg byte a 
Statement [17] fg_sum::b_bg = *((char *)&d+OFFSET_STRUCT_COLS_BG) [ fg_sum::a_fg d ] (  [ fg_sum::a_fg d ] { }  ) always clobbers reg byte a 
Statement [18] fg_sum::b_fg = *((char *)&d+OFFSET_STRUCT_COLS_FG) [ fg_sum::a_fg fg_sum::b_fg ] (  [ fg_sum::a_fg fg_sum::b_fg ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:6 [ fg_sum::$0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ fg_sum::return ] : zp[1]:10 , 
Potential registers zp[1]:2 [ fg_sum::a_border ] : zp[1]:2 , 
Potential registers zp[1]:3 [ fg_sum::a_bg ] : zp[1]:3 , 
Potential registers zp[1]:11 [ fg_sum::a_fg ] : zp[1]:11 , 
Potential registers zp[1]:4 [ fg_sum::b_border ] : zp[1]:4 , 
Potential registers zp[1]:5 [ fg_sum::b_bg ] : zp[1]:5 , 
Potential registers zp[1]:7 [ fg_sum::b_fg ] : zp[1]:7 , 
Potential registers zp[1]:8 [ main::sum1#0 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ main::sum2#0 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers mem[3] [ a ] : mem[3] , 
Potential registers mem[3] [ b ] : mem[3] , 
Potential registers mem[3] [ c ] : mem[3] , 
Potential registers mem[3] [ d ] : mem[3] , 

REGISTER UPLIFT SCOPES
Uplift Scope [fg_sum] 40: zp[1]:2 [ fg_sum::a_border ] 40: zp[1]:3 [ fg_sum::a_bg ] 40: zp[1]:4 [ fg_sum::b_border ] 40: zp[1]:5 [ fg_sum::b_bg ] 22: zp[1]:6 [ fg_sum::$0 ] 7.5: zp[1]:7 [ fg_sum::b_fg ] 3.75: zp[1]:10 [ fg_sum::return ] 1.88: zp[1]:11 [ fg_sum::a_fg ] 
Uplift Scope [main] 4: zp[1]:8 [ main::sum1#0 ] 4: zp[1]:9 [ main::sum2#0 ] 
Uplift Scope [Cols] 
Uplift Scope [] 0: mem[3] [ a ] 0: mem[3] [ b ] 0: mem[3] [ c ] 0: mem[3] [ d ] 

Uplifting [fg_sum] best 167 combination zp[1]:2 [ fg_sum::a_border ] zp[1]:3 [ fg_sum::a_bg ] zp[1]:4 [ fg_sum::b_border ] zp[1]:5 [ fg_sum::b_bg ] reg byte a [ fg_sum::$0 ] zp[1]:7 [ fg_sum::b_fg ] zp[1]:10 [ fg_sum::return ] zp[1]:11 [ fg_sum::a_fg ] 
Uplifting [main] best 155 combination reg byte a [ main::sum1#0 ] reg byte a [ main::sum2#0 ] 
Uplifting [Cols] best 155 combination 
Uplifting [] best 155 combination mem[3] [ a ] mem[3] [ b ] mem[3] [ c ] mem[3] [ d ] 
Attempting to uplift remaining variables inzp[1]:2 [ fg_sum::a_border ]
Uplifting [fg_sum] best 155 combination zp[1]:2 [ fg_sum::a_border ] 
Attempting to uplift remaining variables inzp[1]:3 [ fg_sum::a_bg ]
Uplifting [fg_sum] best 155 combination zp[1]:3 [ fg_sum::a_bg ] 
Attempting to uplift remaining variables inzp[1]:4 [ fg_sum::b_border ]
Uplifting [fg_sum] best 155 combination zp[1]:4 [ fg_sum::b_border ] 
Attempting to uplift remaining variables inzp[1]:5 [ fg_sum::b_bg ]
Uplifting [fg_sum] best 155 combination zp[1]:5 [ fg_sum::b_bg ] 
Attempting to uplift remaining variables inzp[1]:7 [ fg_sum::b_fg ]
Uplifting [fg_sum] best 155 combination zp[1]:7 [ fg_sum::b_fg ] 
Attempting to uplift remaining variables inzp[1]:10 [ fg_sum::return ]
Uplifting [fg_sum] best 155 combination zp[1]:10 [ fg_sum::return ] 
Attempting to uplift remaining variables inzp[1]:11 [ fg_sum::a_fg ]
Uplifting [fg_sum] best 155 combination zp[1]:11 [ fg_sum::a_fg ] 
Allocated (was zp[1]:7) zp[1]:6 [ fg_sum::b_fg ]
Allocated (was zp[1]:10) zp[1]:7 [ fg_sum::return ]
Allocated (was zp[1]:11) zp[1]:8 [ fg_sum::a_fg ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test __varcall calling convention
// Struct parameter
  // Upstart
  // Commodore 64 PRG executable file
.file [name="varcall-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_COLS_BG = 1
  .const OFFSET_STRUCT_COLS_FG = 2
  .const SIZEOF_STRUCT_COLS = 3
  .label COLS = $d020
.segment Code
  // fg_sum
// __zp(7) char fg_sum(__zp(2) char a_border, __zp(3) char a_bg, __zp(8) char a_fg, __zp(4) char b_border, __zp(5) char b_bg, __zp(6) char b_fg)
fg_sum: {
    .label return = 7
    .label a_border = 2
    .label a_bg = 3
    .label a_fg = 8
    .label b_border = 4
    .label b_bg = 5
    .label b_fg = 6
    // [0] fg_sum::$0 = fg_sum::a_fg + fg_sum::b_fg -- vbuaa=vbuz1_plus_vbuz2 
    lda.z a_fg
    clc
    adc.z b_fg
    // [1] fg_sum::return = fg_sum::$0 -- vbuz1=vbuaa 
    sta.z return
    jmp __breturn
    // fg_sum::@return
  __breturn:
    // [2] return 
    rts
}
  // main
main: {
    // [3] fg_sum::a_border = *((char *)&a) -- vbuz1=_deref_pbuc1 
    lda a
    sta.z fg_sum.a_border
    // [4] fg_sum::a_bg = *((char *)&a+OFFSET_STRUCT_COLS_BG) -- vbuz1=_deref_pbuc1 
    lda a+OFFSET_STRUCT_COLS_BG
    sta.z fg_sum.a_bg
    // [5] fg_sum::a_fg = *((char *)&a+OFFSET_STRUCT_COLS_FG) -- vbuz1=_deref_pbuc1 
    lda a+OFFSET_STRUCT_COLS_FG
    sta.z fg_sum.a_fg
    // [6] fg_sum::b_border = *((char *)&b) -- vbuz1=_deref_pbuc1 
    lda b
    sta.z fg_sum.b_border
    // [7] fg_sum::b_bg = *((char *)&b+OFFSET_STRUCT_COLS_BG) -- vbuz1=_deref_pbuc1 
    lda b+OFFSET_STRUCT_COLS_BG
    sta.z fg_sum.b_bg
    // [8] fg_sum::b_fg = *((char *)&b+OFFSET_STRUCT_COLS_FG) -- vbuz1=_deref_pbuc1 
    lda b+OFFSET_STRUCT_COLS_FG
    sta.z fg_sum.b_fg
    // [9] callexecute fg_sum  -- call_vprc1 
    jsr fg_sum
    // [10] main::sum1#0 = fg_sum::return -- vbuaa=vbuz1 
    lda.z fg_sum.return
    // [11] *COLS = main::sum1#0 -- _deref_pbuc1=vbuaa 
    sta COLS
    // [12] *(&d) = memcpy(*(&b), struct Cols, SIZEOF_STRUCT_COLS) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_COLS
  !:
    lda b-1,y
    sta d-1,y
    dey
    bne !-
    // [13] fg_sum::a_border = *((char *)&c) -- vbuz1=_deref_pbuc1 
    lda c
    sta.z fg_sum.a_border
    // [14] fg_sum::a_bg = *((char *)&c+OFFSET_STRUCT_COLS_BG) -- vbuz1=_deref_pbuc1 
    lda c+OFFSET_STRUCT_COLS_BG
    sta.z fg_sum.a_bg
    // [15] fg_sum::a_fg = *((char *)&c+OFFSET_STRUCT_COLS_FG) -- vbuz1=_deref_pbuc1 
    lda c+OFFSET_STRUCT_COLS_FG
    sta.z fg_sum.a_fg
    // [16] fg_sum::b_border = *((char *)&d) -- vbuz1=_deref_pbuc1 
    lda d
    sta.z fg_sum.b_border
    // [17] fg_sum::b_bg = *((char *)&d+OFFSET_STRUCT_COLS_BG) -- vbuz1=_deref_pbuc1 
    lda d+OFFSET_STRUCT_COLS_BG
    sta.z fg_sum.b_bg
    // [18] fg_sum::b_fg = *((char *)&d+OFFSET_STRUCT_COLS_FG) -- vbuz1=_deref_pbuc1 
    lda d+OFFSET_STRUCT_COLS_FG
    sta.z fg_sum.b_fg
    // [19] callexecute fg_sum  -- call_vprc1 
    jsr fg_sum
    // [20] main::sum2#0 = fg_sum::return -- vbuaa=vbuz1 
    lda.z fg_sum.return
    // [21] *COLS = main::sum2#0 -- _deref_pbuc1=vbuaa 
    sta COLS
    jmp __breturn
    // main::@return
  __breturn:
    // [22] return 
    rts
}
  // File Data
.segment Data
  a: .byte 1, 2, 3
  b: .byte 3, 4, 6
  c: .byte 5, 6, 7
  d: .fill SIZEOF_STRUCT_COLS, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char * const COLS = (char *) 53280
__constant char OFFSET_STRUCT_COLS_BG = 1
__constant char OFFSET_STRUCT_COLS_FG = 2
__constant char SIZEOF_STRUCT_COLS = 3
__loadstore struct Cols a = { border: 1, bg: 2, fg: 3 } // mem[3]
__loadstore struct Cols b = { border: 3, bg: 4, fg: 6 } // mem[3]
__loadstore struct Cols c = { border: 5, bg: 6, fg: 7 } // mem[3]
__loadstore struct Cols d = {} // mem[3]
__varcall char fg_sum(char a_border , char a_bg , char a_fg , char b_border , char b_bg , char b_fg)
char fg_sum::$0 // reg byte a 22.0
__loadstore char fg_sum::a_bg // zp[1]:3 40.0
__loadstore char fg_sum::a_border // zp[1]:2 40.0
__loadstore char fg_sum::a_fg // zp[1]:8 1.875
__loadstore char fg_sum::b_bg // zp[1]:5 40.0
__loadstore char fg_sum::b_border // zp[1]:4 40.0
__loadstore char fg_sum::b_fg // zp[1]:6 7.5
__loadstore char fg_sum::return // zp[1]:7 3.75
void main()
char main::sum1
char main::sum1#0 // reg byte a 4.0
char main::sum2
char main::sum2#0 // reg byte a 4.0

reg byte a [ fg_sum::$0 ]
zp[1]:7 [ fg_sum::return ]
zp[1]:2 [ fg_sum::a_border ]
zp[1]:3 [ fg_sum::a_bg ]
zp[1]:8 [ fg_sum::a_fg ]
zp[1]:4 [ fg_sum::b_border ]
zp[1]:5 [ fg_sum::b_bg ]
zp[1]:6 [ fg_sum::b_fg ]
reg byte a [ main::sum1#0 ]
reg byte a [ main::sum2#0 ]
mem[3] [ a ]
mem[3] [ b ]
mem[3] [ c ]
mem[3] [ d ]


FINAL ASSEMBLER
Score: 149

  // File Comments
// Test __varcall calling convention
// Struct parameter
  // Upstart
  // Commodore 64 PRG executable file
.file [name="varcall-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_COLS_BG = 1
  .const OFFSET_STRUCT_COLS_FG = 2
  .const SIZEOF_STRUCT_COLS = 3
  .label COLS = $d020
.segment Code
  // fg_sum
// __zp(7) char fg_sum(__zp(2) char a_border, __zp(3) char a_bg, __zp(8) char a_fg, __zp(4) char b_border, __zp(5) char b_bg, __zp(6) char b_fg)
fg_sum: {
    .label return = 7
    .label a_border = 2
    .label a_bg = 3
    .label a_fg = 8
    .label b_border = 4
    .label b_bg = 5
    .label b_fg = 6
    // a.fg+b.fg
    // [0] fg_sum::$0 = fg_sum::a_fg + fg_sum::b_fg -- vbuaa=vbuz1_plus_vbuz2 
    lda.z a_fg
    clc
    adc.z b_fg
    // return a.fg+b.fg;
    // [1] fg_sum::return = fg_sum::$0 -- vbuz1=vbuaa 
    sta.z return
    // fg_sum::@return
    // }
    // [2] return 
    rts
}
  // main
main: {
    // char sum1 = fg_sum(a, b)
    // [3] fg_sum::a_border = *((char *)&a) -- vbuz1=_deref_pbuc1 
    lda a
    sta.z fg_sum.a_border
    // [4] fg_sum::a_bg = *((char *)&a+OFFSET_STRUCT_COLS_BG) -- vbuz1=_deref_pbuc1 
    lda a+OFFSET_STRUCT_COLS_BG
    sta.z fg_sum.a_bg
    // [5] fg_sum::a_fg = *((char *)&a+OFFSET_STRUCT_COLS_FG) -- vbuz1=_deref_pbuc1 
    lda a+OFFSET_STRUCT_COLS_FG
    sta.z fg_sum.a_fg
    // [6] fg_sum::b_border = *((char *)&b) -- vbuz1=_deref_pbuc1 
    lda b
    sta.z fg_sum.b_border
    // [7] fg_sum::b_bg = *((char *)&b+OFFSET_STRUCT_COLS_BG) -- vbuz1=_deref_pbuc1 
    lda b+OFFSET_STRUCT_COLS_BG
    sta.z fg_sum.b_bg
    // [8] fg_sum::b_fg = *((char *)&b+OFFSET_STRUCT_COLS_FG) -- vbuz1=_deref_pbuc1 
    lda b+OFFSET_STRUCT_COLS_FG
    sta.z fg_sum.b_fg
    // [9] callexecute fg_sum  -- call_vprc1 
    jsr fg_sum
    // [10] main::sum1#0 = fg_sum::return -- vbuaa=vbuz1 
    lda.z fg_sum.return
    // *COLS = sum1
    // [11] *COLS = main::sum1#0 -- _deref_pbuc1=vbuaa 
    sta COLS
    // d = b
    // [12] *(&d) = memcpy(*(&b), struct Cols, SIZEOF_STRUCT_COLS) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_COLS
  !:
    lda b-1,y
    sta d-1,y
    dey
    bne !-
    // char sum2 = fg_sum(c, d)
    // [13] fg_sum::a_border = *((char *)&c) -- vbuz1=_deref_pbuc1 
    lda c
    sta.z fg_sum.a_border
    // [14] fg_sum::a_bg = *((char *)&c+OFFSET_STRUCT_COLS_BG) -- vbuz1=_deref_pbuc1 
    lda c+OFFSET_STRUCT_COLS_BG
    sta.z fg_sum.a_bg
    // [15] fg_sum::a_fg = *((char *)&c+OFFSET_STRUCT_COLS_FG) -- vbuz1=_deref_pbuc1 
    lda c+OFFSET_STRUCT_COLS_FG
    sta.z fg_sum.a_fg
    // [16] fg_sum::b_border = *((char *)&d) -- vbuz1=_deref_pbuc1 
    lda d
    sta.z fg_sum.b_border
    // [17] fg_sum::b_bg = *((char *)&d+OFFSET_STRUCT_COLS_BG) -- vbuz1=_deref_pbuc1 
    lda d+OFFSET_STRUCT_COLS_BG
    sta.z fg_sum.b_bg
    // [18] fg_sum::b_fg = *((char *)&d+OFFSET_STRUCT_COLS_FG) -- vbuz1=_deref_pbuc1 
    lda d+OFFSET_STRUCT_COLS_FG
    sta.z fg_sum.b_fg
    // [19] callexecute fg_sum  -- call_vprc1 
    jsr fg_sum
    // [20] main::sum2#0 = fg_sum::return -- vbuaa=vbuz1 
    lda.z fg_sum.return
    // *COLS = sum2
    // [21] *COLS = main::sum2#0 -- _deref_pbuc1=vbuaa 
    sta COLS
    // main::@return
    // }
    // [22] return 
    rts
}
  // File Data
.segment Data
  a: .byte 1, 2, 3
  b: .byte 3, 4, 6
  c: .byte 5, 6, 7
  d: .fill SIZEOF_STRUCT_COLS, 0

