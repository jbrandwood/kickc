byte* D011 = $d011;
  byte RST8 = %10000000;
  byte ECM =  %01000000;
  byte BMM =  %00100000;
  byte DEN =  %00010000;
  byte RSEL =  %00001000;
byte* RASTER = $d012;
byte* D016 = $d016;
  byte MCM =  %00010000;
  byte CSEL = %00001000;
byte* D018 = $d018;
byte* BGCOL = $d020;
byte* FGCOL = $d021;

byte* COLS = $d800;


byte* SCREEN = $400;
const byte* BITMAP = $2000;

void main() {
    *BGCOL = 0;
    *FGCOL = 0;
    *D011 = BMM|DEN|RSEL|3;
    *D018 = $18; // Needs casting for *D018 = ((word)SCREEN/$40)|((word)BITMAP/$400);
    init_screen();
    init_plot_tables();
    do {
        do {} while (*RASTER!=$ff)
        *BGCOL = *BGCOL+1;
        plots();
        *BGCOL = *BGCOL-1;
    } while (true)
}

byte[] plots_x = { 60, 80, 110, 80, 60, 40, 10, 40 };
byte[] plots_y = { 10, 40, 60, 80, 110, 80, 60, 40 };
byte plots_cnt = 8;

void plots() {
    for(byte i=0; i<plots_cnt;i++) {
        plot(plots_x[i], plots_y[i]);
    }
}

const byte[] plot_xlo = $1000;
const byte[] plot_xhi = $1100;
const byte[] plot_ylo = $1200;
const byte[] plot_yhi = $1300;
const byte[] plot_bit = $1400;

void plot(byte x, byte y) {
    byte* plotter_x = 0;
    byte* plotter_y = 0;
    >plotter_x = plot_xhi[x];  // Needs word arrays arranged as two underlying byte arrays to allow byte* plotter_x = plot_x[x]; - and eventually - byte* plotter = plot_x[x] + plot_y[y];
    <plotter_x = plot_xlo[x];
    >plotter_y = plot_yhi[y];
    <plotter_y = plot_ylo[y];
    byte* plotter = plotter_x+plotter_y;
    *plotter = *plotter | plot_bit[x];
}

void init_plot_tables() {
    byte bit = $80;
    for(byte x : 0..255) {
        plot_xlo[x] = x&$f8;
        plot_xhi[x] = >BITMAP;
        plot_bit[x] = bit;
        bit = bit>>1;
        if(bit==0) {
          bit = $80;
        }
    }
    byte* yoffs = $0;
    for(byte y : 0..255) {
        plot_ylo[y] = y&$7 | <yoffs;
        plot_yhi[y] = >yoffs;
        if((y&$7)==7) {
            yoffs = yoffs + 320; // Needs better constant type inference for yoffs = yoffs + 40*8;
        }
    }
}

void init_screen() {
    for(byte* b = BITMAP; b!=BITMAP+$2000; b++) {
        *b = 0;
    }
    for(byte* c = SCREEN; c!=SCREEN+$400;c++) {
        *c = $14;
    }
}

main();

Adding pre/post-modifier (byte) plots::i ← ++ (byte) plots::i
Adding pre/post-modifier (byte*) init_screen::b ← ++ (byte*) init_screen::b
Adding pre/post-modifier (byte*) init_screen::c ← ++ (byte*) init_screen::c
Fixing lo/hi-lvalue hi=(plot::plotter_x) ← plot::$0
Fixing lo/hi-lvalue lo=(plot::plotter_x) ← plot::$1
Fixing lo/hi-lvalue hi=(plot::plotter_y) ← plot::$2
Fixing lo/hi-lvalue lo=(plot::plotter_y) ← plot::$3
PROGRAM
  (byte*) D011 ← (word) 53265
  (byte) RST8 ← (byte) 128
  (byte) ECM ← (byte) 64
  (byte) BMM ← (byte) 32
  (byte) DEN ← (byte) 16
  (byte) RSEL ← (byte) 8
  (byte*) RASTER ← (word) 53266
  (byte*) D016 ← (word) 53270
  (byte) MCM ← (byte) 16
  (byte) CSEL ← (byte) 8
  (byte*) D018 ← (word) 53272
  (byte*) BGCOL ← (word) 53280
  (byte*) FGCOL ← (word) 53281
  (byte*) COLS ← (word) 55296
  (byte*) SCREEN ← (word) 1024
  (byte*) BITMAP ← (word) 8192
proc (void()) main()
  *((byte*) BGCOL) ← (byte) 0
  *((byte*) FGCOL) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM | (byte) DEN
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011) ← (byte~) main::$2
  *((byte*) D018) ← (byte) 24
  (void~) main::$3 ← call init_screen 
  (void~) main::$4 ← call init_plot_tables 
main::@1:
main::@2:
  (byte~) main::$5 ← * (byte*) RASTER
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  (byte~) main::$7 ← * (byte*) BGCOL
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL) ← (byte~) main::$8
  (void~) main::$9 ← call plots 
  (byte~) main::$10 ← * (byte*) BGCOL
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL) ← (byte~) main::$11
  if(true) goto main::@1
main::@return:
  return 
endproc // main()
  (byte[]) plots_x ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt ← (byte) 8
proc (void()) plots()
  (byte) plots::i ← (byte) 0
plots::@1:
  (byte~) plots::$0 ← (byte[]) plots_x *idx (byte) plots::i
  (byte~) plots::$1 ← (byte[]) plots_y *idx (byte) plots::i
  (void~) plots::$2 ← call plot (byte~) plots::$0 (byte~) plots::$1 
  (byte) plots::i ← ++ (byte) plots::i
  (boolean~) plots::$3 ← (byte) plots::i < (byte) plots_cnt
  if((boolean~) plots::$3) goto plots::@1
plots::@return:
  return 
endproc // plots()
  (byte[]) plot_xlo ← (word) 4096
  (byte[]) plot_xhi ← (word) 4352
  (byte[]) plot_ylo ← (word) 4608
  (byte[]) plot_yhi ← (word) 4864
  (byte[]) plot_bit ← (word) 5120
proc (void()) plot((byte) plot::x , (byte) plot::y)
  (byte*) plot::plotter_x ← (byte) 0
  (byte*) plot::plotter_y ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x + (byte*) plot::plotter_y
  (byte*) plot::plotter ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter
  (byte~) plot::$6 ← (byte[]) plot_bit *idx (byte) plot::x
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter) ← (byte~) plot::$7
plot::@return:
  return 
endproc // plot()
proc (void()) init_plot_tables()
  (byte) init_plot_tables::bit ← (byte) 128
  (byte) init_plot_tables::x ← (byte) 0
init_plot_tables::@1:
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x & (byte) 248
  *((byte[]) plot_xlo + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP
  *((byte[]) plot_xhi + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit + (byte) init_plot_tables::x) ← (byte) init_plot_tables::bit
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit >> (byte) 1
  (byte) init_plot_tables::bit ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  (byte) init_plot_tables::bit ← (byte) 128
init_plot_tables::@2:
  (byte) init_plot_tables::x ← ++ (byte) init_plot_tables::x
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  (byte*) init_plot_tables::yoffs ← (byte) 0
  (byte) init_plot_tables::y ← (byte) 0
init_plot_tables::@3:
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs
  *((byte[]) plot_yhi + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs + (word) 320
  (byte*) init_plot_tables::yoffs ← (byte*~) init_plot_tables::$13
init_plot_tables::@4:
  (byte) init_plot_tables::y ← ++ (byte) init_plot_tables::y
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
init_plot_tables::@return:
  return 
endproc // init_plot_tables()
proc (void()) init_screen()
  (byte*) init_screen::b ← (byte*) BITMAP
init_screen::@1:
  *((byte*) init_screen::b) ← (byte) 0
  (byte*) init_screen::b ← ++ (byte*) init_screen::b
  (byte*~) init_screen::$0 ← (byte*) BITMAP + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  (byte*) init_screen::c ← (byte*) SCREEN
init_screen::@2:
  *((byte*) init_screen::c) ← (byte) 20
  (byte*) init_screen::c ← ++ (byte*) init_screen::c
  (byte*~) init_screen::$2 ← (byte*) SCREEN + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
init_screen::@return:
  return 
endproc // init_screen()
  (void~) $0 ← call main 

SYMBOLS
(void~) $0
(byte*) BGCOL
(byte*) BITMAP
(byte) BMM
(byte*) COLS
(byte) CSEL
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DEN
(byte) ECM
(byte*) FGCOL
(byte) MCM
(byte*) RASTER
(byte) RSEL
(byte) RST8
(byte*) SCREEN
(void()) init_plot_tables()
(byte~) init_plot_tables::$0
(byte~) init_plot_tables::$1
(byte~) init_plot_tables::$10
(boolean~) init_plot_tables::$11
(boolean~) init_plot_tables::$12
(byte*~) init_plot_tables::$13
(boolean~) init_plot_tables::$14
(byte~) init_plot_tables::$2
(boolean~) init_plot_tables::$3
(boolean~) init_plot_tables::$4
(boolean~) init_plot_tables::$5
(byte~) init_plot_tables::$6
(byte~) init_plot_tables::$7
(byte~) init_plot_tables::$8
(byte~) init_plot_tables::$9
(label) init_plot_tables::@1
(label) init_plot_tables::@2
(label) init_plot_tables::@3
(label) init_plot_tables::@4
(label) init_plot_tables::@return
(byte) init_plot_tables::bit
(byte) init_plot_tables::x
(byte) init_plot_tables::y
(byte*) init_plot_tables::yoffs
(void()) init_screen()
(byte*~) init_screen::$0
(boolean~) init_screen::$1
(byte*~) init_screen::$2
(boolean~) init_screen::$3
(label) init_screen::@1
(label) init_screen::@2
(label) init_screen::@return
(byte*) init_screen::b
(byte*) init_screen::c
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$10
(byte~) main::$11
(byte~) main::$2
(void~) main::$3
(void~) main::$4
(byte~) main::$5
(boolean~) main::$6
(byte~) main::$7
(byte~) main::$8
(void~) main::$9
(label) main::@1
(label) main::@2
(label) main::@return
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$0
(byte~) plot::$1
(byte~) plot::$2
(byte~) plot::$3
(byte~) plot::$4
(byte~) plot::$5
(byte~) plot::$6
(byte~) plot::$7
(label) plot::@return
(byte*) plot::plotter
(byte*) plot::plotter_x
(byte*) plot::plotter_y
(byte) plot::x
(byte) plot::y
(byte[]) plot_bit
(byte[]) plot_xhi
(byte[]) plot_xlo
(byte[]) plot_yhi
(byte[]) plot_ylo
(void()) plots()
(byte~) plots::$0
(byte~) plots::$1
(void~) plots::$2
(boolean~) plots::$3
(label) plots::@1
(label) plots::@return
(byte) plots::i
(byte) plots_cnt
(byte[]) plots_x
(byte[]) plots_y

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) D011 ← (word) 53265
  (byte) RST8 ← (byte) 128
  (byte) ECM ← (byte) 64
  (byte) BMM ← (byte) 32
  (byte) DEN ← (byte) 16
  (byte) RSEL ← (byte) 8
  (byte*) RASTER ← (word) 53266
  (byte*) D016 ← (word) 53270
  (byte) MCM ← (byte) 16
  (byte) CSEL ← (byte) 8
  (byte*) D018 ← (word) 53272
  (byte*) BGCOL ← (word) 53280
  (byte*) FGCOL ← (word) 53281
  (byte*) COLS ← (word) 55296
  (byte*) SCREEN ← (word) 1024
  (byte*) BITMAP ← (word) 8192
  to:@1
main: scope:[main]  from
  *((byte*) BGCOL) ← (byte) 0
  *((byte*) FGCOL) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM | (byte) DEN
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011) ← (byte~) main::$2
  *((byte*) D018) ← (byte) 24
  (void~) main::$3 ← call init_screen 
  (void~) main::$4 ← call init_plot_tables 
  to:main::@1
main::@1: scope:[main]  from main main::@3
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte~) main::$5 ← * (byte*) RASTER
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (byte*) BGCOL
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL) ← (byte~) main::$8
  (void~) main::$9 ← call plots 
  (byte~) main::$10 ← * (byte*) BGCOL
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[]) plots_x ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt ← (byte) 8
  to:@2
plots: scope:[plots]  from
  (byte) plots::i ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@1
  (byte~) plots::$0 ← (byte[]) plots_x *idx (byte) plots::i
  (byte~) plots::$1 ← (byte[]) plots_y *idx (byte) plots::i
  (void~) plots::$2 ← call plot (byte~) plots::$0 (byte~) plots::$1 
  (byte) plots::i ← ++ (byte) plots::i
  (boolean~) plots::$3 ← (byte) plots::i < (byte) plots_cnt
  if((boolean~) plots::$3) goto plots::@1
  to:plots::@2
plots::@2: scope:[plots]  from plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte[]) plot_xlo ← (word) 4096
  (byte[]) plot_xhi ← (word) 4352
  (byte[]) plot_ylo ← (word) 4608
  (byte[]) plot_yhi ← (word) 4864
  (byte[]) plot_bit ← (word) 5120
  to:@3
plot: scope:[plot]  from
  (byte*) plot::plotter_x ← (byte) 0
  (byte*) plot::plotter_y ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x + (byte*) plot::plotter_y
  (byte*) plot::plotter ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter
  (byte~) plot::$6 ← (byte[]) plot_bit *idx (byte) plot::x
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
init_plot_tables: scope:[init_plot_tables]  from
  (byte) init_plot_tables::bit ← (byte) 128
  (byte) init_plot_tables::x ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x & (byte) 248
  *((byte[]) plot_xlo + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP
  *((byte[]) plot_xhi + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit + (byte) init_plot_tables::x) ← (byte) init_plot_tables::bit
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit >> (byte) 1
  (byte) init_plot_tables::bit ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::x ← ++ (byte) init_plot_tables::x
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs ← (byte) 0
  (byte) init_plot_tables::y ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs
  *((byte[]) plot_yhi + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte) init_plot_tables::y ← ++ (byte) init_plot_tables::y
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@8
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs + (word) 320
  (byte*) init_plot_tables::yoffs ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@8: scope:[init_plot_tables]  from init_plot_tables::@4
  to:init_plot_tables::@return
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@8
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
init_screen: scope:[init_screen]  from
  (byte*) init_screen::b ← (byte*) BITMAP
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  *((byte*) init_screen::b) ← (byte) 0
  (byte*) init_screen::b ← ++ (byte*) init_screen::b
  (byte*~) init_screen::$0 ← (byte*) BITMAP + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c ← (byte*) SCREEN
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  *((byte*) init_screen::c) ← (byte) 20
  (byte*) init_screen::c ← ++ (byte*) init_screen::c
  (byte*~) init_screen::$2 ← (byte*) SCREEN + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@4
init_screen::@4: scope:[init_screen]  from init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@4
  return 
  to:@return
@5: scope:[]  from @4
  (void~) $0 ← call main 
  to:@end
@end: scope:[]  from @5

Removing empty block main::@4
Removing empty block plots::@2
Removing empty block @3
Removing empty block init_plot_tables::@8
Removing empty block @4
Removing empty block init_screen::@4
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) D011 ← (word) 53265
  (byte) RST8 ← (byte) 128
  (byte) ECM ← (byte) 64
  (byte) BMM ← (byte) 32
  (byte) DEN ← (byte) 16
  (byte) RSEL ← (byte) 8
  (byte*) RASTER ← (word) 53266
  (byte*) D016 ← (word) 53270
  (byte) MCM ← (byte) 16
  (byte) CSEL ← (byte) 8
  (byte*) D018 ← (word) 53272
  (byte*) BGCOL ← (word) 53280
  (byte*) FGCOL ← (word) 53281
  (byte*) COLS ← (word) 55296
  (byte*) SCREEN ← (word) 1024
  (byte*) BITMAP ← (word) 8192
  to:@1
main: scope:[main]  from
  *((byte*) BGCOL) ← (byte) 0
  *((byte*) FGCOL) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM | (byte) DEN
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011) ← (byte~) main::$2
  *((byte*) D018) ← (byte) 24
  (void~) main::$3 ← call init_screen 
  (void~) main::$4 ← call init_plot_tables 
  to:main::@2
main::@1: scope:[main]  from main::@3
  to:main::@2
main::@2: scope:[main]  from main main::@1 main::@2
  (byte~) main::$5 ← * (byte*) RASTER
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (byte*) BGCOL
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL) ← (byte~) main::$8
  (void~) main::$9 ← call plots 
  (byte~) main::$10 ← * (byte*) BGCOL
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[]) plots_x ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt ← (byte) 8
  to:@2
plots: scope:[plots]  from
  (byte) plots::i ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@1
  (byte~) plots::$0 ← (byte[]) plots_x *idx (byte) plots::i
  (byte~) plots::$1 ← (byte[]) plots_y *idx (byte) plots::i
  (void~) plots::$2 ← call plot (byte~) plots::$0 (byte~) plots::$1 
  (byte) plots::i ← ++ (byte) plots::i
  (boolean~) plots::$3 ← (byte) plots::i < (byte) plots_cnt
  if((boolean~) plots::$3) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@1
  return 
  to:@return
@2: scope:[]  from @1
  (byte[]) plot_xlo ← (word) 4096
  (byte[]) plot_xhi ← (word) 4352
  (byte[]) plot_ylo ← (word) 4608
  (byte[]) plot_yhi ← (word) 4864
  (byte[]) plot_bit ← (word) 5120
  to:@5
plot: scope:[plot]  from
  (byte*) plot::plotter_x ← (byte) 0
  (byte*) plot::plotter_y ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x + (byte*) plot::plotter_y
  (byte*) plot::plotter ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter
  (byte~) plot::$6 ← (byte[]) plot_bit *idx (byte) plot::x
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from
  (byte) init_plot_tables::bit ← (byte) 128
  (byte) init_plot_tables::x ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x & (byte) 248
  *((byte[]) plot_xlo + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP
  *((byte[]) plot_xhi + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit + (byte) init_plot_tables::x) ← (byte) init_plot_tables::bit
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit >> (byte) 1
  (byte) init_plot_tables::bit ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::x ← ++ (byte) init_plot_tables::x
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs ← (byte) 0
  (byte) init_plot_tables::y ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs
  *((byte[]) plot_yhi + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte) init_plot_tables::y ← ++ (byte) init_plot_tables::y
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs + (word) 320
  (byte*) init_plot_tables::yoffs ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from
  (byte*) init_screen::b ← (byte*) BITMAP
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  *((byte*) init_screen::b) ← (byte) 0
  (byte*) init_screen::b ← ++ (byte*) init_screen::b
  (byte*~) init_screen::$0 ← (byte*) BITMAP + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c ← (byte*) SCREEN
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  *((byte*) init_screen::c) ← (byte) 20
  (byte*) init_screen::c ← ++ (byte*) init_screen::c
  (byte*~) init_screen::$2 ← (byte*) SCREEN + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  (void~) $0 ← call main 
  to:@end
@end: scope:[]  from @5

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) D011 ← (word) 53265
  (byte) RST8 ← (byte) 128
  (byte) ECM ← (byte) 64
  (byte) BMM ← (byte) 32
  (byte) DEN ← (byte) 16
  (byte) RSEL ← (byte) 8
  (byte*) RASTER ← (word) 53266
  (byte*) D016 ← (word) 53270
  (byte) MCM ← (byte) 16
  (byte) CSEL ← (byte) 8
  (byte*) D018 ← (word) 53272
  (byte*) BGCOL ← (word) 53280
  (byte*) FGCOL ← (word) 53281
  (byte*) COLS ← (word) 55296
  (byte*) SCREEN ← (word) 1024
  (byte*) BITMAP ← (word) 8192
  to:@1
main: scope:[main]  from @5
  *((byte*) BGCOL) ← (byte) 0
  *((byte*) FGCOL) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM | (byte) DEN
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011) ← (byte~) main::$2
  *((byte*) D018) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@2
main::@1: scope:[main]  from main::@7
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte~) main::$5 ← * (byte*) RASTER
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (byte*) BGCOL
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (byte*) BGCOL
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[]) plots_x ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt ← (byte) 8
  to:@2
plots: scope:[plots]  from main::@3
  (byte) plots::i ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte~) plots::$0 ← (byte[]) plots_x *idx (byte) plots::i
  (byte~) plots::$1 ← (byte[]) plots_y *idx (byte) plots::i
  (byte) plot::x ← (byte~) plots::$0
  (byte) plot::y ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i ← ++ (byte) plots::i
  (boolean~) plots::$3 ← (byte) plots::i < (byte) plots_cnt
  if((boolean~) plots::$3) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  (byte[]) plot_xlo ← (word) 4096
  (byte[]) plot_xhi ← (word) 4352
  (byte[]) plot_ylo ← (word) 4608
  (byte[]) plot_yhi ← (word) 4864
  (byte[]) plot_bit ← (word) 5120
  to:@5
plot: scope:[plot]  from plots::@1
  (byte*) plot::plotter_x ← (byte) 0
  (byte*) plot::plotter_y ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x + (byte*) plot::plotter_y
  (byte*) plot::plotter ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter
  (byte~) plot::$6 ← (byte[]) plot_bit *idx (byte) plot::x
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  (byte) init_plot_tables::bit ← (byte) 128
  (byte) init_plot_tables::x ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x & (byte) 248
  *((byte[]) plot_xlo + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP
  *((byte[]) plot_xhi + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit + (byte) init_plot_tables::x) ← (byte) init_plot_tables::bit
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit >> (byte) 1
  (byte) init_plot_tables::bit ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::x ← ++ (byte) init_plot_tables::x
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs ← (byte) 0
  (byte) init_plot_tables::y ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs
  *((byte[]) plot_yhi + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte) init_plot_tables::y ← ++ (byte) init_plot_tables::y
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs + (word) 320
  (byte*) init_plot_tables::yoffs ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b ← (byte*) BITMAP
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  *((byte*) init_screen::b) ← (byte) 0
  (byte*) init_screen::b ← ++ (byte*) init_screen::b
  (byte*~) init_screen::$0 ← (byte*) BITMAP + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c ← (byte*) SCREEN
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  *((byte*) init_screen::c) ← (byte) 20
  (byte*) init_screen::c ← ++ (byte*) init_screen::c
  (byte*~) init_screen::$2 ← (byte*) SCREEN + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  call main param-assignment
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) RASTER#0 ← (word) 53266
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) D018#0 ← (word) 53272
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) COLS#0 ← (word) 55296
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  to:@1
main: scope:[main]  from @5
  (byte) plots_cnt#10 ← phi( @5/(byte) plots_cnt#11 )
  (byte[]) plot_yhi#18 ← phi( @5/(byte[]) plot_yhi#20 )
  (byte[]) plot_ylo#18 ← phi( @5/(byte[]) plot_ylo#20 )
  (byte[]) plots_y#10 ← phi( @5/(byte[]) plots_y#11 )
  (byte[]) plots_x#10 ← phi( @5/(byte[]) plots_x#11 )
  (byte*) SCREEN#5 ← phi( @5/(byte*) SCREEN#6 )
  (byte[]) plot_bit#10 ← phi( @5/(byte[]) plot_bit#12 )
  (byte[]) plot_xhi#10 ← phi( @5/(byte[]) plot_xhi#12 )
  (byte[]) plot_xlo#10 ← phi( @5/(byte[]) plot_xlo#12 )
  (byte*) RASTER#6 ← phi( @5/(byte*) RASTER#8 )
  (byte*) BITMAP#6 ← phi( @5/(byte*) BITMAP#7 )
  (byte*) D018#1 ← phi( @5/(byte*) D018#2 )
  (byte*) D011#1 ← phi( @5/(byte*) D011#2 )
  (byte) RSEL#1 ← phi( @5/(byte) RSEL#2 )
  (byte) DEN#1 ← phi( @5/(byte) DEN#2 )
  (byte) BMM#1 ← phi( @5/(byte) BMM#2 )
  (byte*) FGCOL#1 ← phi( @5/(byte*) FGCOL#2 )
  (byte*) BGCOL#1 ← phi( @5/(byte*) BGCOL#4 )
  *((byte*) BGCOL#1) ← (byte) 0
  *((byte*) FGCOL#1) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#1 | (byte) DEN#1
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#1
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#1) ← (byte~) main::$2
  *((byte*) D018#1) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  (byte) plots_cnt#8 ← phi( main/(byte) plots_cnt#10 )
  (byte[]) plot_yhi#17 ← phi( main/(byte[]) plot_yhi#18 )
  (byte[]) plot_ylo#17 ← phi( main/(byte[]) plot_ylo#18 )
  (byte[]) plots_y#8 ← phi( main/(byte[]) plots_y#10 )
  (byte[]) plots_x#8 ← phi( main/(byte[]) plots_x#10 )
  (byte*) BGCOL#9 ← phi( main/(byte*) BGCOL#1 )
  (byte[]) plot_bit#8 ← phi( main/(byte[]) plot_bit#10 )
  (byte[]) plot_xhi#8 ← phi( main/(byte[]) plot_xhi#10 )
  (byte*) BITMAP#8 ← phi( main/(byte*) BITMAP#6 )
  (byte[]) plot_xlo#8 ← phi( main/(byte[]) plot_xlo#10 )
  (byte*) RASTER#4 ← phi( main/(byte*) RASTER#6 )
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte[]) plot_bit#15 ← phi( main::@5/(byte[]) plot_bit#8 )
  (byte[]) plot_ylo#16 ← phi( main::@5/(byte[]) plot_ylo#17 )
  (byte[]) plot_yhi#16 ← phi( main::@5/(byte[]) plot_yhi#17 )
  (byte[]) plot_xlo#15 ← phi( main::@5/(byte[]) plot_xlo#8 )
  (byte[]) plot_xhi#15 ← phi( main::@5/(byte[]) plot_xhi#8 )
  (byte) plots_cnt#7 ← phi( main::@5/(byte) plots_cnt#8 )
  (byte[]) plots_y#7 ← phi( main::@5/(byte[]) plots_y#8 )
  (byte[]) plots_x#7 ← phi( main::@5/(byte[]) plots_x#8 )
  (byte*) BGCOL#7 ← phi( main::@5/(byte*) BGCOL#9 )
  (byte*) RASTER#3 ← phi( main::@5/(byte*) RASTER#4 )
  to:main::@2
main::@1: scope:[main]  from main::@7
  (byte[]) plot_bit#14 ← phi( main::@7/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#15 ← phi( main::@7/(byte[]) plot_ylo#19 )
  (byte[]) plot_yhi#15 ← phi( main::@7/(byte[]) plot_yhi#19 )
  (byte[]) plot_xlo#14 ← phi( main::@7/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#14 ← phi( main::@7/(byte[]) plot_xhi#16 )
  (byte) plots_cnt#6 ← phi( main::@7/(byte) plots_cnt#9 )
  (byte[]) plots_y#6 ← phi( main::@7/(byte[]) plots_y#9 )
  (byte[]) plots_x#6 ← phi( main::@7/(byte[]) plots_x#9 )
  (byte*) BGCOL#6 ← phi( main::@7/(byte*) BGCOL#3 )
  (byte*) RASTER#2 ← phi( main::@7/(byte*) RASTER#5 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte[]) plot_bit#13 ← phi( main::@1/(byte[]) plot_bit#14 main::@2/(byte[]) plot_bit#13 main::@6/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#13 ← phi( main::@1/(byte[]) plot_ylo#15 main::@2/(byte[]) plot_ylo#13 main::@6/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#13 ← phi( main::@1/(byte[]) plot_yhi#15 main::@2/(byte[]) plot_yhi#13 main::@6/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#13 ← phi( main::@1/(byte[]) plot_xlo#14 main::@2/(byte[]) plot_xlo#13 main::@6/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#13 ← phi( main::@1/(byte[]) plot_xhi#14 main::@2/(byte[]) plot_xhi#13 main::@6/(byte[]) plot_xhi#15 )
  (byte) plots_cnt#5 ← phi( main::@1/(byte) plots_cnt#6 main::@2/(byte) plots_cnt#5 main::@6/(byte) plots_cnt#7 )
  (byte[]) plots_y#5 ← phi( main::@1/(byte[]) plots_y#6 main::@2/(byte[]) plots_y#5 main::@6/(byte[]) plots_y#7 )
  (byte[]) plots_x#5 ← phi( main::@1/(byte[]) plots_x#6 main::@2/(byte[]) plots_x#5 main::@6/(byte[]) plots_x#7 )
  (byte*) BGCOL#5 ← phi( main::@1/(byte*) BGCOL#6 main::@2/(byte*) BGCOL#5 main::@6/(byte*) BGCOL#7 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#2 main::@2/(byte*) RASTER#1 main::@6/(byte*) RASTER#3 )
  (byte~) main::$5 ← * (byte*) RASTER#1
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte[]) plot_bit#11 ← phi( main::@2/(byte[]) plot_bit#13 )
  (byte[]) plot_ylo#10 ← phi( main::@2/(byte[]) plot_ylo#13 )
  (byte[]) plot_yhi#10 ← phi( main::@2/(byte[]) plot_yhi#13 )
  (byte[]) plot_xlo#11 ← phi( main::@2/(byte[]) plot_xlo#13 )
  (byte[]) plot_xhi#11 ← phi( main::@2/(byte[]) plot_xhi#13 )
  (byte) plots_cnt#4 ← phi( main::@2/(byte) plots_cnt#5 )
  (byte*) RASTER#7 ← phi( main::@2/(byte*) RASTER#1 )
  (byte[]) plots_y#4 ← phi( main::@2/(byte[]) plots_y#5 )
  (byte[]) plots_x#4 ← phi( main::@2/(byte[]) plots_x#5 )
  (byte*) BGCOL#2 ← phi( main::@2/(byte*) BGCOL#5 )
  (byte~) main::$7 ← * (byte*) BGCOL#2
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL#2) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte[]) plot_bit#16 ← phi( main::@3/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#19 ← phi( main::@3/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#19 ← phi( main::@3/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#16 ← phi( main::@3/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#16 ← phi( main::@3/(byte[]) plot_xhi#11 )
  (byte) plots_cnt#9 ← phi( main::@3/(byte) plots_cnt#4 )
  (byte[]) plots_y#9 ← phi( main::@3/(byte[]) plots_y#4 )
  (byte[]) plots_x#9 ← phi( main::@3/(byte[]) plots_x#4 )
  (byte*) RASTER#5 ← phi( main::@3/(byte*) RASTER#7 )
  (byte*) BGCOL#3 ← phi( main::@3/(byte*) BGCOL#2 )
  (byte~) main::$10 ← * (byte*) BGCOL#3
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL#3) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#8 ← phi( @begin/(byte*) SCREEN#0 )
  (byte*) RASTER#10 ← phi( @begin/(byte*) RASTER#0 )
  (byte*) BITMAP#11 ← phi( @begin/(byte*) BITMAP#0 )
  (byte*) D018#4 ← phi( @begin/(byte*) D018#0 )
  (byte*) D011#4 ← phi( @begin/(byte*) D011#0 )
  (byte) RSEL#4 ← phi( @begin/(byte) RSEL#0 )
  (byte) DEN#4 ← phi( @begin/(byte) DEN#0 )
  (byte) BMM#4 ← phi( @begin/(byte) BMM#0 )
  (byte*) FGCOL#4 ← phi( @begin/(byte*) FGCOL#0 )
  (byte*) BGCOL#10 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[]) plots_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt#0 ← (byte) 8
  to:@2
plots: scope:[plots]  from main::@3
  (byte[]) plot_bit#6 ← phi( main::@3/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#6 ← phi( main::@3/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#6 ← phi( main::@3/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#6 ← phi( main::@3/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#6 ← phi( main::@3/(byte[]) plot_xhi#11 )
  (byte) plots_cnt#3 ← phi( main::@3/(byte) plots_cnt#4 )
  (byte[]) plots_y#2 ← phi( main::@3/(byte[]) plots_y#4 )
  (byte[]) plots_x#2 ← phi( main::@3/(byte[]) plots_x#4 )
  (byte) plots::i#0 ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte[]) plot_bit#3 ← phi( plots/(byte[]) plot_bit#6 plots::@3/(byte[]) plot_bit#7 )
  (byte[]) plot_ylo#3 ← phi( plots/(byte[]) plot_ylo#6 plots::@3/(byte[]) plot_ylo#7 )
  (byte[]) plot_yhi#3 ← phi( plots/(byte[]) plot_yhi#6 plots::@3/(byte[]) plot_yhi#7 )
  (byte[]) plot_xlo#3 ← phi( plots/(byte[]) plot_xlo#6 plots::@3/(byte[]) plot_xlo#7 )
  (byte[]) plot_xhi#3 ← phi( plots/(byte[]) plot_xhi#6 plots::@3/(byte[]) plot_xhi#7 )
  (byte) plots_cnt#2 ← phi( plots/(byte) plots_cnt#3 plots::@3/(byte) plots_cnt#1 )
  (byte[]) plots_y#1 ← phi( plots/(byte[]) plots_y#2 plots::@3/(byte[]) plots_y#3 )
  (byte) plots::i#2 ← phi( plots/(byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte[]) plots_x#1 ← phi( plots/(byte[]) plots_x#2 plots::@3/(byte[]) plots_x#3 )
  (byte~) plots::$0 ← (byte[]) plots_x#1 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (byte[]) plots_y#1 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte[]) plot_bit#7 ← phi( plots::@1/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#7 ← phi( plots::@1/(byte[]) plot_ylo#3 )
  (byte[]) plot_yhi#7 ← phi( plots::@1/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#7 ← phi( plots::@1/(byte[]) plot_xlo#3 )
  (byte[]) plot_xhi#7 ← phi( plots::@1/(byte[]) plot_xhi#3 )
  (byte[]) plots_y#3 ← phi( plots::@1/(byte[]) plots_y#1 )
  (byte[]) plots_x#3 ← phi( plots::@1/(byte[]) plots_x#1 )
  (byte) plots_cnt#1 ← phi( plots::@1/(byte) plots_cnt#2 )
  (byte) plots::i#3 ← phi( plots::@1/(byte) plots::i#2 )
  (byte) plots::i#1 ← ++ (byte) plots::i#3
  (boolean~) plots::$3 ← (byte) plots::i#1 < (byte) plots_cnt#1
  if((boolean~) plots::$3) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  (byte) plots_cnt#12 ← phi( @1/(byte) plots_cnt#0 )
  (byte[]) plots_y#12 ← phi( @1/(byte[]) plots_y#0 )
  (byte[]) plots_x#12 ← phi( @1/(byte[]) plots_x#0 )
  (byte*) SCREEN#7 ← phi( @1/(byte*) SCREEN#8 )
  (byte*) RASTER#9 ← phi( @1/(byte*) RASTER#10 )
  (byte*) BITMAP#10 ← phi( @1/(byte*) BITMAP#11 )
  (byte*) D018#3 ← phi( @1/(byte*) D018#4 )
  (byte*) D011#3 ← phi( @1/(byte*) D011#4 )
  (byte) RSEL#3 ← phi( @1/(byte) RSEL#4 )
  (byte) DEN#3 ← phi( @1/(byte) DEN#4 )
  (byte) BMM#3 ← phi( @1/(byte) BMM#4 )
  (byte*) FGCOL#3 ← phi( @1/(byte*) FGCOL#4 )
  (byte*) BGCOL#8 ← phi( @1/(byte*) BGCOL#10 )
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  to:@5
plot: scope:[plot]  from plots::@1
  (byte[]) plot_bit#1 ← phi( plots::@1/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#1 ← phi( plots::@1/(byte[]) plot_ylo#3 )
  (byte) plot::y#1 ← phi( plots::@1/(byte) plot::y#0 )
  (byte[]) plot_yhi#1 ← phi( plots::@1/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#1 ← phi( plots::@1/(byte[]) plot_xlo#3 )
  (byte) plot::x#1 ← phi( plots::@1/(byte) plot::x#0 )
  (byte[]) plot_xhi#1 ← phi( plots::@1/(byte[]) plot_xhi#3 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#1
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#1
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#1
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#1
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte*) plot::plotter#0 ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#1
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  (byte[]) plot_yhi#14 ← phi( main::@5/(byte[]) plot_yhi#17 )
  (byte[]) plot_ylo#14 ← phi( main::@5/(byte[]) plot_ylo#17 )
  (byte[]) plot_bit#4 ← phi( main::@5/(byte[]) plot_bit#8 )
  (byte[]) plot_xhi#4 ← phi( main::@5/(byte[]) plot_xhi#8 )
  (byte*) BITMAP#4 ← phi( main::@5/(byte*) BITMAP#8 )
  (byte[]) plot_xlo#4 ← phi( main::@5/(byte[]) plot_xlo#8 )
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#11 ← phi( init_plot_tables/(byte[]) plot_yhi#14 init_plot_tables::@2/(byte[]) plot_yhi#8 )
  (byte[]) plot_ylo#11 ← phi( init_plot_tables/(byte[]) plot_ylo#14 init_plot_tables::@2/(byte[]) plot_ylo#8 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#4 init_plot_tables::@2/(byte[]) plot_bit#5 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#4 init_plot_tables::@2/(byte[]) plot_xhi#5 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#4 init_plot_tables::@2/(byte*) BITMAP#5 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#4 init_plot_tables::@2/(byte[]) plot_xlo#5 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (byte) init_plot_tables::bit#1 ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit#1 == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte[]) plot_yhi#8 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#11 init_plot_tables::@5/(byte[]) plot_yhi#12 )
  (byte[]) plot_ylo#8 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#11 init_plot_tables::@5/(byte[]) plot_ylo#12 )
  (byte[]) plot_bit#5 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 init_plot_tables::@5/(byte[]) plot_bit#9 )
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte[]) plot_xhi#5 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 init_plot_tables::@5/(byte[]) plot_xhi#9 )
  (byte*) BITMAP#5 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 init_plot_tables::@5/(byte*) BITMAP#9 )
  (byte[]) plot_xlo#5 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 init_plot_tables::@5/(byte[]) plot_xlo#9 )
  (byte) init_plot_tables::x#3 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 init_plot_tables::@5/(byte) init_plot_tables::x#4 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#3
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte[]) plot_yhi#12 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_ylo#12 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#11 )
  (byte[]) plot_bit#9 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 )
  (byte[]) plot_xhi#9 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 )
  (byte*) BITMAP#9 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#9 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 )
  (byte) init_plot_tables::x#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 )
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte[]) plot_yhi#5 ← phi( init_plot_tables::@2/(byte[]) plot_yhi#8 )
  (byte[]) plot_ylo#5 ← phi( init_plot_tables::@2/(byte[]) plot_ylo#8 )
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#4 init_plot_tables::@6/(byte[]) plot_yhi#5 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#4 init_plot_tables::@6/(byte[]) plot_ylo#5 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte[]) plot_yhi#4 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 init_plot_tables::@7/(byte[]) plot_yhi#9 )
  (byte[]) plot_ylo#4 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 init_plot_tables::@7/(byte[]) plot_ylo#9 )
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#3 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 init_plot_tables::@7/(byte) init_plot_tables::y#4 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#3
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte[]) plot_yhi#9 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 )
  (byte[]) plot_ylo#9 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 )
  (byte) init_plot_tables::y#4 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 )
  (byte*) init_plot_tables::yoffs#3 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 )
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs#3 + (word) 320
  (byte*) init_plot_tables::yoffs#1 ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) SCREEN#4 ← phi( main/(byte*) SCREEN#5 )
  (byte*) BITMAP#2 ← phi( main/(byte*) BITMAP#6 )
  (byte*) init_screen::b#0 ← (byte*) BITMAP#2
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#3 ← phi( init_screen/(byte*) SCREEN#4 init_screen::@1/(byte*) SCREEN#3 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#2 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen::@1/(byte*) SCREEN#3 )
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  (byte) plots_cnt#11 ← phi( @2/(byte) plots_cnt#12 )
  (byte[]) plot_yhi#20 ← phi( @2/(byte[]) plot_yhi#0 )
  (byte[]) plot_ylo#20 ← phi( @2/(byte[]) plot_ylo#0 )
  (byte[]) plots_y#11 ← phi( @2/(byte[]) plots_y#12 )
  (byte[]) plots_x#11 ← phi( @2/(byte[]) plots_x#12 )
  (byte*) SCREEN#6 ← phi( @2/(byte*) SCREEN#7 )
  (byte[]) plot_bit#12 ← phi( @2/(byte[]) plot_bit#0 )
  (byte[]) plot_xhi#12 ← phi( @2/(byte[]) plot_xhi#0 )
  (byte[]) plot_xlo#12 ← phi( @2/(byte[]) plot_xlo#0 )
  (byte*) RASTER#8 ← phi( @2/(byte*) RASTER#9 )
  (byte*) BITMAP#7 ← phi( @2/(byte*) BITMAP#10 )
  (byte*) D018#2 ← phi( @2/(byte*) D018#3 )
  (byte*) D011#2 ← phi( @2/(byte*) D011#3 )
  (byte) RSEL#2 ← phi( @2/(byte) RSEL#3 )
  (byte) DEN#2 ← phi( @2/(byte) DEN#3 )
  (byte) BMM#2 ← phi( @2/(byte) BMM#3 )
  (byte*) FGCOL#2 ← phi( @2/(byte*) FGCOL#3 )
  (byte*) BGCOL#4 ← phi( @2/(byte*) BGCOL#8 )
  call main param-assignment
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) RASTER#0 ← (word) 53266
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) D018#0 ← (word) 53272
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) COLS#0 ← (word) 55296
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  to:@1
main: scope:[main]  from @5
  (byte) plots_cnt#10 ← phi( @5/(byte) plots_cnt#11 )
  (byte[]) plot_yhi#18 ← phi( @5/(byte[]) plot_yhi#20 )
  (byte[]) plot_ylo#18 ← phi( @5/(byte[]) plot_ylo#20 )
  (byte[]) plots_y#10 ← phi( @5/(byte[]) plots_y#11 )
  (byte[]) plots_x#10 ← phi( @5/(byte[]) plots_x#11 )
  (byte*) SCREEN#5 ← phi( @5/(byte*) SCREEN#6 )
  (byte[]) plot_bit#10 ← phi( @5/(byte[]) plot_bit#12 )
  (byte[]) plot_xhi#10 ← phi( @5/(byte[]) plot_xhi#12 )
  (byte[]) plot_xlo#10 ← phi( @5/(byte[]) plot_xlo#12 )
  (byte*) RASTER#6 ← phi( @5/(byte*) RASTER#8 )
  (byte*) BITMAP#6 ← phi( @5/(byte*) BITMAP#7 )
  (byte*) D018#1 ← phi( @5/(byte*) D018#2 )
  (byte*) D011#1 ← phi( @5/(byte*) D011#2 )
  (byte) RSEL#1 ← phi( @5/(byte) RSEL#2 )
  (byte) DEN#1 ← phi( @5/(byte) DEN#2 )
  (byte) BMM#1 ← phi( @5/(byte) BMM#2 )
  (byte*) FGCOL#1 ← phi( @5/(byte*) FGCOL#2 )
  (byte*) BGCOL#1 ← phi( @5/(byte*) BGCOL#4 )
  *((byte*) BGCOL#1) ← (byte) 0
  *((byte*) FGCOL#1) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#1 | (byte) DEN#1
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#1
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#1) ← (byte~) main::$2
  *((byte*) D018#1) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  (byte) plots_cnt#8 ← phi( main/(byte) plots_cnt#10 )
  (byte[]) plot_yhi#17 ← phi( main/(byte[]) plot_yhi#18 )
  (byte[]) plot_ylo#17 ← phi( main/(byte[]) plot_ylo#18 )
  (byte[]) plots_y#8 ← phi( main/(byte[]) plots_y#10 )
  (byte[]) plots_x#8 ← phi( main/(byte[]) plots_x#10 )
  (byte*) BGCOL#9 ← phi( main/(byte*) BGCOL#1 )
  (byte[]) plot_bit#8 ← phi( main/(byte[]) plot_bit#10 )
  (byte[]) plot_xhi#8 ← phi( main/(byte[]) plot_xhi#10 )
  (byte*) BITMAP#8 ← phi( main/(byte*) BITMAP#6 )
  (byte[]) plot_xlo#8 ← phi( main/(byte[]) plot_xlo#10 )
  (byte*) RASTER#4 ← phi( main/(byte*) RASTER#6 )
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte[]) plot_bit#15 ← phi( main::@5/(byte[]) plot_bit#8 )
  (byte[]) plot_ylo#16 ← phi( main::@5/(byte[]) plot_ylo#17 )
  (byte[]) plot_yhi#16 ← phi( main::@5/(byte[]) plot_yhi#17 )
  (byte[]) plot_xlo#15 ← phi( main::@5/(byte[]) plot_xlo#8 )
  (byte[]) plot_xhi#15 ← phi( main::@5/(byte[]) plot_xhi#8 )
  (byte) plots_cnt#7 ← phi( main::@5/(byte) plots_cnt#8 )
  (byte[]) plots_y#7 ← phi( main::@5/(byte[]) plots_y#8 )
  (byte[]) plots_x#7 ← phi( main::@5/(byte[]) plots_x#8 )
  (byte*) BGCOL#7 ← phi( main::@5/(byte*) BGCOL#9 )
  (byte*) RASTER#3 ← phi( main::@5/(byte*) RASTER#4 )
  to:main::@2
main::@1: scope:[main]  from main::@7
  (byte[]) plot_bit#14 ← phi( main::@7/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#15 ← phi( main::@7/(byte[]) plot_ylo#19 )
  (byte[]) plot_yhi#15 ← phi( main::@7/(byte[]) plot_yhi#19 )
  (byte[]) plot_xlo#14 ← phi( main::@7/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#14 ← phi( main::@7/(byte[]) plot_xhi#16 )
  (byte) plots_cnt#6 ← phi( main::@7/(byte) plots_cnt#9 )
  (byte[]) plots_y#6 ← phi( main::@7/(byte[]) plots_y#9 )
  (byte[]) plots_x#6 ← phi( main::@7/(byte[]) plots_x#9 )
  (byte*) BGCOL#6 ← phi( main::@7/(byte*) BGCOL#3 )
  (byte*) RASTER#2 ← phi( main::@7/(byte*) RASTER#5 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte[]) plot_bit#13 ← phi( main::@1/(byte[]) plot_bit#14 main::@2/(byte[]) plot_bit#13 main::@6/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#13 ← phi( main::@1/(byte[]) plot_ylo#15 main::@2/(byte[]) plot_ylo#13 main::@6/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#13 ← phi( main::@1/(byte[]) plot_yhi#15 main::@2/(byte[]) plot_yhi#13 main::@6/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#13 ← phi( main::@1/(byte[]) plot_xlo#14 main::@2/(byte[]) plot_xlo#13 main::@6/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#13 ← phi( main::@1/(byte[]) plot_xhi#14 main::@2/(byte[]) plot_xhi#13 main::@6/(byte[]) plot_xhi#15 )
  (byte) plots_cnt#5 ← phi( main::@1/(byte) plots_cnt#6 main::@2/(byte) plots_cnt#5 main::@6/(byte) plots_cnt#7 )
  (byte[]) plots_y#5 ← phi( main::@1/(byte[]) plots_y#6 main::@2/(byte[]) plots_y#5 main::@6/(byte[]) plots_y#7 )
  (byte[]) plots_x#5 ← phi( main::@1/(byte[]) plots_x#6 main::@2/(byte[]) plots_x#5 main::@6/(byte[]) plots_x#7 )
  (byte*) BGCOL#5 ← phi( main::@1/(byte*) BGCOL#6 main::@2/(byte*) BGCOL#5 main::@6/(byte*) BGCOL#7 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#2 main::@2/(byte*) RASTER#1 main::@6/(byte*) RASTER#3 )
  (byte~) main::$5 ← * (byte*) RASTER#1
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte[]) plot_bit#11 ← phi( main::@2/(byte[]) plot_bit#13 )
  (byte[]) plot_ylo#10 ← phi( main::@2/(byte[]) plot_ylo#13 )
  (byte[]) plot_yhi#10 ← phi( main::@2/(byte[]) plot_yhi#13 )
  (byte[]) plot_xlo#11 ← phi( main::@2/(byte[]) plot_xlo#13 )
  (byte[]) plot_xhi#11 ← phi( main::@2/(byte[]) plot_xhi#13 )
  (byte) plots_cnt#4 ← phi( main::@2/(byte) plots_cnt#5 )
  (byte*) RASTER#7 ← phi( main::@2/(byte*) RASTER#1 )
  (byte[]) plots_y#4 ← phi( main::@2/(byte[]) plots_y#5 )
  (byte[]) plots_x#4 ← phi( main::@2/(byte[]) plots_x#5 )
  (byte*) BGCOL#2 ← phi( main::@2/(byte*) BGCOL#5 )
  (byte~) main::$7 ← * (byte*) BGCOL#2
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL#2) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte[]) plot_bit#16 ← phi( main::@3/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#19 ← phi( main::@3/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#19 ← phi( main::@3/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#16 ← phi( main::@3/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#16 ← phi( main::@3/(byte[]) plot_xhi#11 )
  (byte) plots_cnt#9 ← phi( main::@3/(byte) plots_cnt#4 )
  (byte[]) plots_y#9 ← phi( main::@3/(byte[]) plots_y#4 )
  (byte[]) plots_x#9 ← phi( main::@3/(byte[]) plots_x#4 )
  (byte*) RASTER#5 ← phi( main::@3/(byte*) RASTER#7 )
  (byte*) BGCOL#3 ← phi( main::@3/(byte*) BGCOL#2 )
  (byte~) main::$10 ← * (byte*) BGCOL#3
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL#3) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#8 ← phi( @begin/(byte*) SCREEN#0 )
  (byte*) RASTER#10 ← phi( @begin/(byte*) RASTER#0 )
  (byte*) BITMAP#11 ← phi( @begin/(byte*) BITMAP#0 )
  (byte*) D018#4 ← phi( @begin/(byte*) D018#0 )
  (byte*) D011#4 ← phi( @begin/(byte*) D011#0 )
  (byte) RSEL#4 ← phi( @begin/(byte) RSEL#0 )
  (byte) DEN#4 ← phi( @begin/(byte) DEN#0 )
  (byte) BMM#4 ← phi( @begin/(byte) BMM#0 )
  (byte*) FGCOL#4 ← phi( @begin/(byte*) FGCOL#0 )
  (byte*) BGCOL#10 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[]) plots_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt#0 ← (byte) 8
  to:@2
plots: scope:[plots]  from main::@3
  (byte[]) plot_bit#6 ← phi( main::@3/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#6 ← phi( main::@3/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#6 ← phi( main::@3/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#6 ← phi( main::@3/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#6 ← phi( main::@3/(byte[]) plot_xhi#11 )
  (byte) plots_cnt#3 ← phi( main::@3/(byte) plots_cnt#4 )
  (byte[]) plots_y#2 ← phi( main::@3/(byte[]) plots_y#4 )
  (byte[]) plots_x#2 ← phi( main::@3/(byte[]) plots_x#4 )
  (byte) plots::i#0 ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte[]) plot_bit#3 ← phi( plots/(byte[]) plot_bit#6 plots::@3/(byte[]) plot_bit#7 )
  (byte[]) plot_ylo#3 ← phi( plots/(byte[]) plot_ylo#6 plots::@3/(byte[]) plot_ylo#7 )
  (byte[]) plot_yhi#3 ← phi( plots/(byte[]) plot_yhi#6 plots::@3/(byte[]) plot_yhi#7 )
  (byte[]) plot_xlo#3 ← phi( plots/(byte[]) plot_xlo#6 plots::@3/(byte[]) plot_xlo#7 )
  (byte[]) plot_xhi#3 ← phi( plots/(byte[]) plot_xhi#6 plots::@3/(byte[]) plot_xhi#7 )
  (byte) plots_cnt#2 ← phi( plots/(byte) plots_cnt#3 plots::@3/(byte) plots_cnt#1 )
  (byte[]) plots_y#1 ← phi( plots/(byte[]) plots_y#2 plots::@3/(byte[]) plots_y#3 )
  (byte) plots::i#2 ← phi( plots/(byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte[]) plots_x#1 ← phi( plots/(byte[]) plots_x#2 plots::@3/(byte[]) plots_x#3 )
  (byte~) plots::$0 ← (byte[]) plots_x#1 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (byte[]) plots_y#1 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte[]) plot_bit#7 ← phi( plots::@1/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#7 ← phi( plots::@1/(byte[]) plot_ylo#3 )
  (byte[]) plot_yhi#7 ← phi( plots::@1/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#7 ← phi( plots::@1/(byte[]) plot_xlo#3 )
  (byte[]) plot_xhi#7 ← phi( plots::@1/(byte[]) plot_xhi#3 )
  (byte[]) plots_y#3 ← phi( plots::@1/(byte[]) plots_y#1 )
  (byte[]) plots_x#3 ← phi( plots::@1/(byte[]) plots_x#1 )
  (byte) plots_cnt#1 ← phi( plots::@1/(byte) plots_cnt#2 )
  (byte) plots::i#3 ← phi( plots::@1/(byte) plots::i#2 )
  (byte) plots::i#1 ← ++ (byte) plots::i#3
  (boolean~) plots::$3 ← (byte) plots::i#1 < (byte) plots_cnt#1
  if((boolean~) plots::$3) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  (byte) plots_cnt#12 ← phi( @1/(byte) plots_cnt#0 )
  (byte[]) plots_y#12 ← phi( @1/(byte[]) plots_y#0 )
  (byte[]) plots_x#12 ← phi( @1/(byte[]) plots_x#0 )
  (byte*) SCREEN#7 ← phi( @1/(byte*) SCREEN#8 )
  (byte*) RASTER#9 ← phi( @1/(byte*) RASTER#10 )
  (byte*) BITMAP#10 ← phi( @1/(byte*) BITMAP#11 )
  (byte*) D018#3 ← phi( @1/(byte*) D018#4 )
  (byte*) D011#3 ← phi( @1/(byte*) D011#4 )
  (byte) RSEL#3 ← phi( @1/(byte) RSEL#4 )
  (byte) DEN#3 ← phi( @1/(byte) DEN#4 )
  (byte) BMM#3 ← phi( @1/(byte) BMM#4 )
  (byte*) FGCOL#3 ← phi( @1/(byte*) FGCOL#4 )
  (byte*) BGCOL#8 ← phi( @1/(byte*) BGCOL#10 )
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  to:@5
plot: scope:[plot]  from plots::@1
  (byte[]) plot_bit#1 ← phi( plots::@1/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#1 ← phi( plots::@1/(byte[]) plot_ylo#3 )
  (byte) plot::y#1 ← phi( plots::@1/(byte) plot::y#0 )
  (byte[]) plot_yhi#1 ← phi( plots::@1/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#1 ← phi( plots::@1/(byte[]) plot_xlo#3 )
  (byte) plot::x#1 ← phi( plots::@1/(byte) plot::x#0 )
  (byte[]) plot_xhi#1 ← phi( plots::@1/(byte[]) plot_xhi#3 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#1
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#1
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#1
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#1
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte*) plot::plotter#0 ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#1
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  (byte[]) plot_yhi#14 ← phi( main::@5/(byte[]) plot_yhi#17 )
  (byte[]) plot_ylo#14 ← phi( main::@5/(byte[]) plot_ylo#17 )
  (byte[]) plot_bit#4 ← phi( main::@5/(byte[]) plot_bit#8 )
  (byte[]) plot_xhi#4 ← phi( main::@5/(byte[]) plot_xhi#8 )
  (byte*) BITMAP#4 ← phi( main::@5/(byte*) BITMAP#8 )
  (byte[]) plot_xlo#4 ← phi( main::@5/(byte[]) plot_xlo#8 )
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#11 ← phi( init_plot_tables/(byte[]) plot_yhi#14 init_plot_tables::@2/(byte[]) plot_yhi#8 )
  (byte[]) plot_ylo#11 ← phi( init_plot_tables/(byte[]) plot_ylo#14 init_plot_tables::@2/(byte[]) plot_ylo#8 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#4 init_plot_tables::@2/(byte[]) plot_bit#5 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#4 init_plot_tables::@2/(byte[]) plot_xhi#5 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#4 init_plot_tables::@2/(byte*) BITMAP#5 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#4 init_plot_tables::@2/(byte[]) plot_xlo#5 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (byte) init_plot_tables::bit#1 ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit#1 == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte[]) plot_yhi#8 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#11 init_plot_tables::@5/(byte[]) plot_yhi#12 )
  (byte[]) plot_ylo#8 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#11 init_plot_tables::@5/(byte[]) plot_ylo#12 )
  (byte[]) plot_bit#5 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 init_plot_tables::@5/(byte[]) plot_bit#9 )
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte[]) plot_xhi#5 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 init_plot_tables::@5/(byte[]) plot_xhi#9 )
  (byte*) BITMAP#5 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 init_plot_tables::@5/(byte*) BITMAP#9 )
  (byte[]) plot_xlo#5 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 init_plot_tables::@5/(byte[]) plot_xlo#9 )
  (byte) init_plot_tables::x#3 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 init_plot_tables::@5/(byte) init_plot_tables::x#4 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#3
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte[]) plot_yhi#12 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_ylo#12 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#11 )
  (byte[]) plot_bit#9 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 )
  (byte[]) plot_xhi#9 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 )
  (byte*) BITMAP#9 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#9 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 )
  (byte) init_plot_tables::x#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 )
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte[]) plot_yhi#5 ← phi( init_plot_tables::@2/(byte[]) plot_yhi#8 )
  (byte[]) plot_ylo#5 ← phi( init_plot_tables::@2/(byte[]) plot_ylo#8 )
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#4 init_plot_tables::@6/(byte[]) plot_yhi#5 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#4 init_plot_tables::@6/(byte[]) plot_ylo#5 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte[]) plot_yhi#4 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 init_plot_tables::@7/(byte[]) plot_yhi#9 )
  (byte[]) plot_ylo#4 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 init_plot_tables::@7/(byte[]) plot_ylo#9 )
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#3 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 init_plot_tables::@7/(byte) init_plot_tables::y#4 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#3
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte[]) plot_yhi#9 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 )
  (byte[]) plot_ylo#9 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 )
  (byte) init_plot_tables::y#4 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 )
  (byte*) init_plot_tables::yoffs#3 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 )
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs#3 + (word) 320
  (byte*) init_plot_tables::yoffs#1 ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) SCREEN#4 ← phi( main/(byte*) SCREEN#5 )
  (byte*) BITMAP#2 ← phi( main/(byte*) BITMAP#6 )
  (byte*) init_screen::b#0 ← (byte*) BITMAP#2
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#3 ← phi( init_screen/(byte*) SCREEN#4 init_screen::@1/(byte*) SCREEN#3 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#2 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen::@1/(byte*) SCREEN#3 )
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  (byte) plots_cnt#11 ← phi( @2/(byte) plots_cnt#12 )
  (byte[]) plot_yhi#20 ← phi( @2/(byte[]) plot_yhi#0 )
  (byte[]) plot_ylo#20 ← phi( @2/(byte[]) plot_ylo#0 )
  (byte[]) plots_y#11 ← phi( @2/(byte[]) plots_y#12 )
  (byte[]) plots_x#11 ← phi( @2/(byte[]) plots_x#12 )
  (byte*) SCREEN#6 ← phi( @2/(byte*) SCREEN#7 )
  (byte[]) plot_bit#12 ← phi( @2/(byte[]) plot_bit#0 )
  (byte[]) plot_xhi#12 ← phi( @2/(byte[]) plot_xhi#0 )
  (byte[]) plot_xlo#12 ← phi( @2/(byte[]) plot_xlo#0 )
  (byte*) RASTER#8 ← phi( @2/(byte*) RASTER#9 )
  (byte*) BITMAP#7 ← phi( @2/(byte*) BITMAP#10 )
  (byte*) D018#2 ← phi( @2/(byte*) D018#3 )
  (byte*) D011#2 ← phi( @2/(byte*) D011#3 )
  (byte) RSEL#2 ← phi( @2/(byte) RSEL#3 )
  (byte) DEN#2 ← phi( @2/(byte) DEN#3 )
  (byte) BMM#2 ← phi( @2/(byte) BMM#3 )
  (byte*) FGCOL#2 ← phi( @2/(byte*) FGCOL#3 )
  (byte*) BGCOL#4 ← phi( @2/(byte*) BGCOL#8 )
  call main param-assignment
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @5
(label) @6
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL#1
(byte*) BGCOL#10
(byte*) BGCOL#2
(byte*) BGCOL#3
(byte*) BGCOL#4
(byte*) BGCOL#5
(byte*) BGCOL#6
(byte*) BGCOL#7
(byte*) BGCOL#8
(byte*) BGCOL#9
(byte*) BITMAP
(byte*) BITMAP#0
(byte*) BITMAP#1
(byte*) BITMAP#10
(byte*) BITMAP#11
(byte*) BITMAP#2
(byte*) BITMAP#3
(byte*) BITMAP#4
(byte*) BITMAP#5
(byte*) BITMAP#6
(byte*) BITMAP#7
(byte*) BITMAP#8
(byte*) BITMAP#9
(byte) BMM
(byte) BMM#0
(byte) BMM#1
(byte) BMM#2
(byte) BMM#3
(byte) BMM#4
(byte*) COLS
(byte*) COLS#0
(byte) CSEL
(byte) CSEL#0
(byte*) D011
(byte*) D011#0
(byte*) D011#1
(byte*) D011#2
(byte*) D011#3
(byte*) D011#4
(byte*) D016
(byte*) D016#0
(byte*) D018
(byte*) D018#0
(byte*) D018#1
(byte*) D018#2
(byte*) D018#3
(byte*) D018#4
(byte) DEN
(byte) DEN#0
(byte) DEN#1
(byte) DEN#2
(byte) DEN#3
(byte) DEN#4
(byte) ECM
(byte) ECM#0
(byte*) FGCOL
(byte*) FGCOL#0
(byte*) FGCOL#1
(byte*) FGCOL#2
(byte*) FGCOL#3
(byte*) FGCOL#4
(byte) MCM
(byte) MCM#0
(byte*) RASTER
(byte*) RASTER#0
(byte*) RASTER#1
(byte*) RASTER#10
(byte*) RASTER#2
(byte*) RASTER#3
(byte*) RASTER#4
(byte*) RASTER#5
(byte*) RASTER#6
(byte*) RASTER#7
(byte*) RASTER#8
(byte*) RASTER#9
(byte) RSEL
(byte) RSEL#0
(byte) RSEL#1
(byte) RSEL#2
(byte) RSEL#3
(byte) RSEL#4
(byte) RST8
(byte) RST8#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(byte*) SCREEN#7
(byte*) SCREEN#8
(void()) init_plot_tables()
(byte~) init_plot_tables::$0
(byte~) init_plot_tables::$1
(byte~) init_plot_tables::$10
(boolean~) init_plot_tables::$11
(boolean~) init_plot_tables::$12
(byte*~) init_plot_tables::$13
(boolean~) init_plot_tables::$14
(byte~) init_plot_tables::$2
(boolean~) init_plot_tables::$3
(boolean~) init_plot_tables::$4
(boolean~) init_plot_tables::$5
(byte~) init_plot_tables::$6
(byte~) init_plot_tables::$7
(byte~) init_plot_tables::$8
(byte~) init_plot_tables::$9
(label) init_plot_tables::@1
(label) init_plot_tables::@2
(label) init_plot_tables::@3
(label) init_plot_tables::@4
(label) init_plot_tables::@5
(label) init_plot_tables::@6
(label) init_plot_tables::@7
(label) init_plot_tables::@return
(byte) init_plot_tables::bit
(byte) init_plot_tables::bit#0
(byte) init_plot_tables::bit#1
(byte) init_plot_tables::bit#2
(byte) init_plot_tables::bit#3
(byte) init_plot_tables::bit#4
(byte) init_plot_tables::x
(byte) init_plot_tables::x#0
(byte) init_plot_tables::x#1
(byte) init_plot_tables::x#2
(byte) init_plot_tables::x#3
(byte) init_plot_tables::x#4
(byte) init_plot_tables::y
(byte) init_plot_tables::y#0
(byte) init_plot_tables::y#1
(byte) init_plot_tables::y#2
(byte) init_plot_tables::y#3
(byte) init_plot_tables::y#4
(byte*) init_plot_tables::yoffs
(byte*) init_plot_tables::yoffs#0
(byte*) init_plot_tables::yoffs#1
(byte*) init_plot_tables::yoffs#2
(byte*) init_plot_tables::yoffs#3
(byte*) init_plot_tables::yoffs#4
(void()) init_screen()
(byte*~) init_screen::$0
(boolean~) init_screen::$1
(byte*~) init_screen::$2
(boolean~) init_screen::$3
(label) init_screen::@1
(label) init_screen::@2
(label) init_screen::@3
(label) init_screen::@return
(byte*) init_screen::b
(byte*) init_screen::b#0
(byte*) init_screen::b#1
(byte*) init_screen::b#2
(byte*) init_screen::c
(byte*) init_screen::c#0
(byte*) init_screen::c#1
(byte*) init_screen::c#2
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$10
(byte~) main::$11
(byte~) main::$2
(byte~) main::$5
(boolean~) main::$6
(byte~) main::$7
(byte~) main::$8
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$0
(byte~) plot::$1
(byte~) plot::$2
(byte~) plot::$3
(byte~) plot::$4
(byte~) plot::$5
(byte~) plot::$6
(byte~) plot::$7
(label) plot::@return
(byte*) plot::plotter
(byte*) plot::plotter#0
(byte*) plot::plotter_x
(byte*) plot::plotter_x#0
(byte*) plot::plotter_x#1
(byte*) plot::plotter_x#2
(byte*) plot::plotter_y
(byte*) plot::plotter_y#0
(byte*) plot::plotter_y#1
(byte*) plot::plotter_y#2
(byte) plot::x
(byte) plot::x#0
(byte) plot::x#1
(byte) plot::y
(byte) plot::y#0
(byte) plot::y#1
(byte[]) plot_bit
(byte[]) plot_bit#0
(byte[]) plot_bit#1
(byte[]) plot_bit#10
(byte[]) plot_bit#11
(byte[]) plot_bit#12
(byte[]) plot_bit#13
(byte[]) plot_bit#14
(byte[]) plot_bit#15
(byte[]) plot_bit#16
(byte[]) plot_bit#2
(byte[]) plot_bit#3
(byte[]) plot_bit#4
(byte[]) plot_bit#5
(byte[]) plot_bit#6
(byte[]) plot_bit#7
(byte[]) plot_bit#8
(byte[]) plot_bit#9
(byte[]) plot_xhi
(byte[]) plot_xhi#0
(byte[]) plot_xhi#1
(byte[]) plot_xhi#10
(byte[]) plot_xhi#11
(byte[]) plot_xhi#12
(byte[]) plot_xhi#13
(byte[]) plot_xhi#14
(byte[]) plot_xhi#15
(byte[]) plot_xhi#16
(byte[]) plot_xhi#2
(byte[]) plot_xhi#3
(byte[]) plot_xhi#4
(byte[]) plot_xhi#5
(byte[]) plot_xhi#6
(byte[]) plot_xhi#7
(byte[]) plot_xhi#8
(byte[]) plot_xhi#9
(byte[]) plot_xlo
(byte[]) plot_xlo#0
(byte[]) plot_xlo#1
(byte[]) plot_xlo#10
(byte[]) plot_xlo#11
(byte[]) plot_xlo#12
(byte[]) plot_xlo#13
(byte[]) plot_xlo#14
(byte[]) plot_xlo#15
(byte[]) plot_xlo#16
(byte[]) plot_xlo#2
(byte[]) plot_xlo#3
(byte[]) plot_xlo#4
(byte[]) plot_xlo#5
(byte[]) plot_xlo#6
(byte[]) plot_xlo#7
(byte[]) plot_xlo#8
(byte[]) plot_xlo#9
(byte[]) plot_yhi
(byte[]) plot_yhi#0
(byte[]) plot_yhi#1
(byte[]) plot_yhi#10
(byte[]) plot_yhi#11
(byte[]) plot_yhi#12
(byte[]) plot_yhi#13
(byte[]) plot_yhi#14
(byte[]) plot_yhi#15
(byte[]) plot_yhi#16
(byte[]) plot_yhi#17
(byte[]) plot_yhi#18
(byte[]) plot_yhi#19
(byte[]) plot_yhi#2
(byte[]) plot_yhi#20
(byte[]) plot_yhi#3
(byte[]) plot_yhi#4
(byte[]) plot_yhi#5
(byte[]) plot_yhi#6
(byte[]) plot_yhi#7
(byte[]) plot_yhi#8
(byte[]) plot_yhi#9
(byte[]) plot_ylo
(byte[]) plot_ylo#0
(byte[]) plot_ylo#1
(byte[]) plot_ylo#10
(byte[]) plot_ylo#11
(byte[]) plot_ylo#12
(byte[]) plot_ylo#13
(byte[]) plot_ylo#14
(byte[]) plot_ylo#15
(byte[]) plot_ylo#16
(byte[]) plot_ylo#17
(byte[]) plot_ylo#18
(byte[]) plot_ylo#19
(byte[]) plot_ylo#2
(byte[]) plot_ylo#20
(byte[]) plot_ylo#3
(byte[]) plot_ylo#4
(byte[]) plot_ylo#5
(byte[]) plot_ylo#6
(byte[]) plot_ylo#7
(byte[]) plot_ylo#8
(byte[]) plot_ylo#9
(void()) plots()
(byte~) plots::$0
(byte~) plots::$1
(boolean~) plots::$3
(label) plots::@1
(label) plots::@3
(label) plots::@return
(byte) plots::i
(byte) plots::i#0
(byte) plots::i#1
(byte) plots::i#2
(byte) plots::i#3
(byte) plots_cnt
(byte) plots_cnt#0
(byte) plots_cnt#1
(byte) plots_cnt#10
(byte) plots_cnt#11
(byte) plots_cnt#12
(byte) plots_cnt#2
(byte) plots_cnt#3
(byte) plots_cnt#4
(byte) plots_cnt#5
(byte) plots_cnt#6
(byte) plots_cnt#7
(byte) plots_cnt#8
(byte) plots_cnt#9
(byte[]) plots_x
(byte[]) plots_x#0
(byte[]) plots_x#1
(byte[]) plots_x#10
(byte[]) plots_x#11
(byte[]) plots_x#12
(byte[]) plots_x#2
(byte[]) plots_x#3
(byte[]) plots_x#4
(byte[]) plots_x#5
(byte[]) plots_x#6
(byte[]) plots_x#7
(byte[]) plots_x#8
(byte[]) plots_x#9
(byte[]) plots_y
(byte[]) plots_y#0
(byte[]) plots_y#1
(byte[]) plots_y#10
(byte[]) plots_y#11
(byte[]) plots_y#12
(byte[]) plots_y#2
(byte[]) plots_y#3
(byte[]) plots_y#4
(byte[]) plots_y#5
(byte[]) plots_y#6
(byte[]) plots_y#7
(byte[]) plots_y#8
(byte[]) plots_y#9

Culled Empty Block (label) @6
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) RASTER#0 ← (word) 53266
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) D018#0 ← (word) 53272
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) COLS#0 ← (word) 55296
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  to:@1
main: scope:[main]  from @5
  (byte) plots_cnt#10 ← phi( @5/(byte) plots_cnt#11 )
  (byte[]) plot_yhi#18 ← phi( @5/(byte[]) plot_yhi#20 )
  (byte[]) plot_ylo#18 ← phi( @5/(byte[]) plot_ylo#20 )
  (byte[]) plots_y#10 ← phi( @5/(byte[]) plots_y#11 )
  (byte[]) plots_x#10 ← phi( @5/(byte[]) plots_x#11 )
  (byte*) SCREEN#5 ← phi( @5/(byte*) SCREEN#6 )
  (byte[]) plot_bit#10 ← phi( @5/(byte[]) plot_bit#12 )
  (byte[]) plot_xhi#10 ← phi( @5/(byte[]) plot_xhi#12 )
  (byte[]) plot_xlo#10 ← phi( @5/(byte[]) plot_xlo#12 )
  (byte*) RASTER#6 ← phi( @5/(byte*) RASTER#8 )
  (byte*) BITMAP#6 ← phi( @5/(byte*) BITMAP#7 )
  (byte*) D018#1 ← phi( @5/(byte*) D018#2 )
  (byte*) D011#1 ← phi( @5/(byte*) D011#2 )
  (byte) RSEL#1 ← phi( @5/(byte) RSEL#2 )
  (byte) DEN#1 ← phi( @5/(byte) DEN#2 )
  (byte) BMM#1 ← phi( @5/(byte) BMM#2 )
  (byte*) FGCOL#1 ← phi( @5/(byte*) FGCOL#2 )
  (byte*) BGCOL#1 ← phi( @5/(byte*) BGCOL#4 )
  *((byte*) BGCOL#1) ← (byte) 0
  *((byte*) FGCOL#1) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#1 | (byte) DEN#1
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#1
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#1) ← (byte~) main::$2
  *((byte*) D018#1) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  (byte) plots_cnt#8 ← phi( main/(byte) plots_cnt#10 )
  (byte[]) plot_yhi#17 ← phi( main/(byte[]) plot_yhi#18 )
  (byte[]) plot_ylo#17 ← phi( main/(byte[]) plot_ylo#18 )
  (byte[]) plots_y#8 ← phi( main/(byte[]) plots_y#10 )
  (byte[]) plots_x#8 ← phi( main/(byte[]) plots_x#10 )
  (byte*) BGCOL#9 ← phi( main/(byte*) BGCOL#1 )
  (byte[]) plot_bit#8 ← phi( main/(byte[]) plot_bit#10 )
  (byte[]) plot_xhi#8 ← phi( main/(byte[]) plot_xhi#10 )
  (byte*) BITMAP#8 ← phi( main/(byte*) BITMAP#6 )
  (byte[]) plot_xlo#8 ← phi( main/(byte[]) plot_xlo#10 )
  (byte*) RASTER#4 ← phi( main/(byte*) RASTER#6 )
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte[]) plot_bit#15 ← phi( main::@5/(byte[]) plot_bit#8 )
  (byte[]) plot_ylo#16 ← phi( main::@5/(byte[]) plot_ylo#17 )
  (byte[]) plot_yhi#16 ← phi( main::@5/(byte[]) plot_yhi#17 )
  (byte[]) plot_xlo#15 ← phi( main::@5/(byte[]) plot_xlo#8 )
  (byte[]) plot_xhi#15 ← phi( main::@5/(byte[]) plot_xhi#8 )
  (byte) plots_cnt#7 ← phi( main::@5/(byte) plots_cnt#8 )
  (byte[]) plots_y#7 ← phi( main::@5/(byte[]) plots_y#8 )
  (byte[]) plots_x#7 ← phi( main::@5/(byte[]) plots_x#8 )
  (byte*) BGCOL#7 ← phi( main::@5/(byte*) BGCOL#9 )
  (byte*) RASTER#3 ← phi( main::@5/(byte*) RASTER#4 )
  to:main::@2
main::@1: scope:[main]  from main::@7
  (byte[]) plot_bit#14 ← phi( main::@7/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#15 ← phi( main::@7/(byte[]) plot_ylo#19 )
  (byte[]) plot_yhi#15 ← phi( main::@7/(byte[]) plot_yhi#19 )
  (byte[]) plot_xlo#14 ← phi( main::@7/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#14 ← phi( main::@7/(byte[]) plot_xhi#16 )
  (byte) plots_cnt#6 ← phi( main::@7/(byte) plots_cnt#9 )
  (byte[]) plots_y#6 ← phi( main::@7/(byte[]) plots_y#9 )
  (byte[]) plots_x#6 ← phi( main::@7/(byte[]) plots_x#9 )
  (byte*) BGCOL#6 ← phi( main::@7/(byte*) BGCOL#3 )
  (byte*) RASTER#2 ← phi( main::@7/(byte*) RASTER#5 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte[]) plot_bit#13 ← phi( main::@1/(byte[]) plot_bit#14 main::@2/(byte[]) plot_bit#13 main::@6/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#13 ← phi( main::@1/(byte[]) plot_ylo#15 main::@2/(byte[]) plot_ylo#13 main::@6/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#13 ← phi( main::@1/(byte[]) plot_yhi#15 main::@2/(byte[]) plot_yhi#13 main::@6/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#13 ← phi( main::@1/(byte[]) plot_xlo#14 main::@2/(byte[]) plot_xlo#13 main::@6/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#13 ← phi( main::@1/(byte[]) plot_xhi#14 main::@2/(byte[]) plot_xhi#13 main::@6/(byte[]) plot_xhi#15 )
  (byte) plots_cnt#5 ← phi( main::@1/(byte) plots_cnt#6 main::@2/(byte) plots_cnt#5 main::@6/(byte) plots_cnt#7 )
  (byte[]) plots_y#5 ← phi( main::@1/(byte[]) plots_y#6 main::@2/(byte[]) plots_y#5 main::@6/(byte[]) plots_y#7 )
  (byte[]) plots_x#5 ← phi( main::@1/(byte[]) plots_x#6 main::@2/(byte[]) plots_x#5 main::@6/(byte[]) plots_x#7 )
  (byte*) BGCOL#5 ← phi( main::@1/(byte*) BGCOL#6 main::@2/(byte*) BGCOL#5 main::@6/(byte*) BGCOL#7 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#2 main::@2/(byte*) RASTER#1 main::@6/(byte*) RASTER#3 )
  (byte~) main::$5 ← * (byte*) RASTER#1
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte[]) plot_bit#11 ← phi( main::@2/(byte[]) plot_bit#13 )
  (byte[]) plot_ylo#10 ← phi( main::@2/(byte[]) plot_ylo#13 )
  (byte[]) plot_yhi#10 ← phi( main::@2/(byte[]) plot_yhi#13 )
  (byte[]) plot_xlo#11 ← phi( main::@2/(byte[]) plot_xlo#13 )
  (byte[]) plot_xhi#11 ← phi( main::@2/(byte[]) plot_xhi#13 )
  (byte) plots_cnt#4 ← phi( main::@2/(byte) plots_cnt#5 )
  (byte*) RASTER#7 ← phi( main::@2/(byte*) RASTER#1 )
  (byte[]) plots_y#4 ← phi( main::@2/(byte[]) plots_y#5 )
  (byte[]) plots_x#4 ← phi( main::@2/(byte[]) plots_x#5 )
  (byte*) BGCOL#2 ← phi( main::@2/(byte*) BGCOL#5 )
  (byte~) main::$7 ← * (byte*) BGCOL#2
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL#2) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte[]) plot_bit#16 ← phi( main::@3/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#19 ← phi( main::@3/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#19 ← phi( main::@3/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#16 ← phi( main::@3/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#16 ← phi( main::@3/(byte[]) plot_xhi#11 )
  (byte) plots_cnt#9 ← phi( main::@3/(byte) plots_cnt#4 )
  (byte[]) plots_y#9 ← phi( main::@3/(byte[]) plots_y#4 )
  (byte[]) plots_x#9 ← phi( main::@3/(byte[]) plots_x#4 )
  (byte*) RASTER#5 ← phi( main::@3/(byte*) RASTER#7 )
  (byte*) BGCOL#3 ← phi( main::@3/(byte*) BGCOL#2 )
  (byte~) main::$10 ← * (byte*) BGCOL#3
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL#3) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#8 ← phi( @begin/(byte*) SCREEN#0 )
  (byte*) RASTER#10 ← phi( @begin/(byte*) RASTER#0 )
  (byte*) BITMAP#11 ← phi( @begin/(byte*) BITMAP#0 )
  (byte*) D018#4 ← phi( @begin/(byte*) D018#0 )
  (byte*) D011#4 ← phi( @begin/(byte*) D011#0 )
  (byte) RSEL#4 ← phi( @begin/(byte) RSEL#0 )
  (byte) DEN#4 ← phi( @begin/(byte) DEN#0 )
  (byte) BMM#4 ← phi( @begin/(byte) BMM#0 )
  (byte*) FGCOL#4 ← phi( @begin/(byte*) FGCOL#0 )
  (byte*) BGCOL#10 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[]) plots_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt#0 ← (byte) 8
  to:@2
plots: scope:[plots]  from main::@3
  (byte[]) plot_bit#6 ← phi( main::@3/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#6 ← phi( main::@3/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#6 ← phi( main::@3/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#6 ← phi( main::@3/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#6 ← phi( main::@3/(byte[]) plot_xhi#11 )
  (byte) plots_cnt#3 ← phi( main::@3/(byte) plots_cnt#4 )
  (byte[]) plots_y#2 ← phi( main::@3/(byte[]) plots_y#4 )
  (byte[]) plots_x#2 ← phi( main::@3/(byte[]) plots_x#4 )
  (byte) plots::i#0 ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte[]) plot_bit#3 ← phi( plots/(byte[]) plot_bit#6 plots::@3/(byte[]) plot_bit#7 )
  (byte[]) plot_ylo#3 ← phi( plots/(byte[]) plot_ylo#6 plots::@3/(byte[]) plot_ylo#7 )
  (byte[]) plot_yhi#3 ← phi( plots/(byte[]) plot_yhi#6 plots::@3/(byte[]) plot_yhi#7 )
  (byte[]) plot_xlo#3 ← phi( plots/(byte[]) plot_xlo#6 plots::@3/(byte[]) plot_xlo#7 )
  (byte[]) plot_xhi#3 ← phi( plots/(byte[]) plot_xhi#6 plots::@3/(byte[]) plot_xhi#7 )
  (byte) plots_cnt#2 ← phi( plots/(byte) plots_cnt#3 plots::@3/(byte) plots_cnt#1 )
  (byte[]) plots_y#1 ← phi( plots/(byte[]) plots_y#2 plots::@3/(byte[]) plots_y#3 )
  (byte) plots::i#2 ← phi( plots/(byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte[]) plots_x#1 ← phi( plots/(byte[]) plots_x#2 plots::@3/(byte[]) plots_x#3 )
  (byte~) plots::$0 ← (byte[]) plots_x#1 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (byte[]) plots_y#1 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte[]) plot_bit#7 ← phi( plots::@1/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#7 ← phi( plots::@1/(byte[]) plot_ylo#3 )
  (byte[]) plot_yhi#7 ← phi( plots::@1/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#7 ← phi( plots::@1/(byte[]) plot_xlo#3 )
  (byte[]) plot_xhi#7 ← phi( plots::@1/(byte[]) plot_xhi#3 )
  (byte[]) plots_y#3 ← phi( plots::@1/(byte[]) plots_y#1 )
  (byte[]) plots_x#3 ← phi( plots::@1/(byte[]) plots_x#1 )
  (byte) plots_cnt#1 ← phi( plots::@1/(byte) plots_cnt#2 )
  (byte) plots::i#3 ← phi( plots::@1/(byte) plots::i#2 )
  (byte) plots::i#1 ← ++ (byte) plots::i#3
  (boolean~) plots::$3 ← (byte) plots::i#1 < (byte) plots_cnt#1
  if((boolean~) plots::$3) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  (byte) plots_cnt#12 ← phi( @1/(byte) plots_cnt#0 )
  (byte[]) plots_y#12 ← phi( @1/(byte[]) plots_y#0 )
  (byte[]) plots_x#12 ← phi( @1/(byte[]) plots_x#0 )
  (byte*) SCREEN#7 ← phi( @1/(byte*) SCREEN#8 )
  (byte*) RASTER#9 ← phi( @1/(byte*) RASTER#10 )
  (byte*) BITMAP#10 ← phi( @1/(byte*) BITMAP#11 )
  (byte*) D018#3 ← phi( @1/(byte*) D018#4 )
  (byte*) D011#3 ← phi( @1/(byte*) D011#4 )
  (byte) RSEL#3 ← phi( @1/(byte) RSEL#4 )
  (byte) DEN#3 ← phi( @1/(byte) DEN#4 )
  (byte) BMM#3 ← phi( @1/(byte) BMM#4 )
  (byte*) FGCOL#3 ← phi( @1/(byte*) FGCOL#4 )
  (byte*) BGCOL#8 ← phi( @1/(byte*) BGCOL#10 )
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  to:@5
plot: scope:[plot]  from plots::@1
  (byte[]) plot_bit#1 ← phi( plots::@1/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#1 ← phi( plots::@1/(byte[]) plot_ylo#3 )
  (byte) plot::y#1 ← phi( plots::@1/(byte) plot::y#0 )
  (byte[]) plot_yhi#1 ← phi( plots::@1/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#1 ← phi( plots::@1/(byte[]) plot_xlo#3 )
  (byte) plot::x#1 ← phi( plots::@1/(byte) plot::x#0 )
  (byte[]) plot_xhi#1 ← phi( plots::@1/(byte[]) plot_xhi#3 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#1
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#1
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#1
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#1
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte*) plot::plotter#0 ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#1
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  (byte[]) plot_yhi#14 ← phi( main::@5/(byte[]) plot_yhi#17 )
  (byte[]) plot_ylo#14 ← phi( main::@5/(byte[]) plot_ylo#17 )
  (byte[]) plot_bit#4 ← phi( main::@5/(byte[]) plot_bit#8 )
  (byte[]) plot_xhi#4 ← phi( main::@5/(byte[]) plot_xhi#8 )
  (byte*) BITMAP#4 ← phi( main::@5/(byte*) BITMAP#8 )
  (byte[]) plot_xlo#4 ← phi( main::@5/(byte[]) plot_xlo#8 )
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#11 ← phi( init_plot_tables/(byte[]) plot_yhi#14 init_plot_tables::@2/(byte[]) plot_yhi#8 )
  (byte[]) plot_ylo#11 ← phi( init_plot_tables/(byte[]) plot_ylo#14 init_plot_tables::@2/(byte[]) plot_ylo#8 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#4 init_plot_tables::@2/(byte[]) plot_bit#5 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#4 init_plot_tables::@2/(byte[]) plot_xhi#5 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#4 init_plot_tables::@2/(byte*) BITMAP#5 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#4 init_plot_tables::@2/(byte[]) plot_xlo#5 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (byte) init_plot_tables::bit#1 ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit#1 == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte[]) plot_yhi#8 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#11 init_plot_tables::@5/(byte[]) plot_yhi#12 )
  (byte[]) plot_ylo#8 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#11 init_plot_tables::@5/(byte[]) plot_ylo#12 )
  (byte[]) plot_bit#5 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 init_plot_tables::@5/(byte[]) plot_bit#9 )
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte[]) plot_xhi#5 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 init_plot_tables::@5/(byte[]) plot_xhi#9 )
  (byte*) BITMAP#5 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 init_plot_tables::@5/(byte*) BITMAP#9 )
  (byte[]) plot_xlo#5 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 init_plot_tables::@5/(byte[]) plot_xlo#9 )
  (byte) init_plot_tables::x#3 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 init_plot_tables::@5/(byte) init_plot_tables::x#4 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#3
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte[]) plot_yhi#12 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_ylo#12 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#11 )
  (byte[]) plot_bit#9 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 )
  (byte[]) plot_xhi#9 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 )
  (byte*) BITMAP#9 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#9 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 )
  (byte) init_plot_tables::x#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 )
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte[]) plot_yhi#5 ← phi( init_plot_tables::@2/(byte[]) plot_yhi#8 )
  (byte[]) plot_ylo#5 ← phi( init_plot_tables::@2/(byte[]) plot_ylo#8 )
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#4 init_plot_tables::@6/(byte[]) plot_yhi#5 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#4 init_plot_tables::@6/(byte[]) plot_ylo#5 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte[]) plot_yhi#4 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 init_plot_tables::@7/(byte[]) plot_yhi#9 )
  (byte[]) plot_ylo#4 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 init_plot_tables::@7/(byte[]) plot_ylo#9 )
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#3 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 init_plot_tables::@7/(byte) init_plot_tables::y#4 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#3
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte[]) plot_yhi#9 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 )
  (byte[]) plot_ylo#9 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 )
  (byte) init_plot_tables::y#4 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 )
  (byte*) init_plot_tables::yoffs#3 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 )
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs#3 + (word) 320
  (byte*) init_plot_tables::yoffs#1 ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) SCREEN#4 ← phi( main/(byte*) SCREEN#5 )
  (byte*) BITMAP#2 ← phi( main/(byte*) BITMAP#6 )
  (byte*) init_screen::b#0 ← (byte*) BITMAP#2
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#3 ← phi( init_screen/(byte*) SCREEN#4 init_screen::@1/(byte*) SCREEN#3 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#2 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen::@1/(byte*) SCREEN#3 )
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  (byte) plots_cnt#11 ← phi( @2/(byte) plots_cnt#12 )
  (byte[]) plot_yhi#20 ← phi( @2/(byte[]) plot_yhi#0 )
  (byte[]) plot_ylo#20 ← phi( @2/(byte[]) plot_ylo#0 )
  (byte[]) plots_y#11 ← phi( @2/(byte[]) plots_y#12 )
  (byte[]) plots_x#11 ← phi( @2/(byte[]) plots_x#12 )
  (byte*) SCREEN#6 ← phi( @2/(byte*) SCREEN#7 )
  (byte[]) plot_bit#12 ← phi( @2/(byte[]) plot_bit#0 )
  (byte[]) plot_xhi#12 ← phi( @2/(byte[]) plot_xhi#0 )
  (byte[]) plot_xlo#12 ← phi( @2/(byte[]) plot_xlo#0 )
  (byte*) RASTER#8 ← phi( @2/(byte*) RASTER#9 )
  (byte*) BITMAP#7 ← phi( @2/(byte*) BITMAP#10 )
  (byte*) D018#2 ← phi( @2/(byte*) D018#3 )
  (byte*) D011#2 ← phi( @2/(byte*) D011#3 )
  (byte) RSEL#2 ← phi( @2/(byte) RSEL#3 )
  (byte) DEN#2 ← phi( @2/(byte) DEN#3 )
  (byte) BMM#2 ← phi( @2/(byte) BMM#3 )
  (byte*) FGCOL#2 ← phi( @2/(byte*) FGCOL#3 )
  (byte*) BGCOL#4 ← phi( @2/(byte*) BGCOL#8 )
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Inversing boolean not (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0 from (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit#1 == (byte) 0
Inversing boolean not (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7 from (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) RASTER#0 ← (word) 53266
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) D018#0 ← (word) 53272
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) COLS#0 ← (word) 55296
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  to:@1
main: scope:[main]  from @5
  (byte) plots_cnt#10 ← phi( @5/(byte) plots_cnt#11 )
  (byte[]) plot_yhi#18 ← phi( @5/(byte[]) plot_yhi#20 )
  (byte[]) plot_ylo#18 ← phi( @5/(byte[]) plot_ylo#20 )
  (byte[]) plots_y#10 ← phi( @5/(byte[]) plots_y#11 )
  (byte[]) plots_x#10 ← phi( @5/(byte[]) plots_x#11 )
  (byte*) SCREEN#5 ← phi( @5/(byte*) SCREEN#6 )
  (byte[]) plot_bit#10 ← phi( @5/(byte[]) plot_bit#12 )
  (byte[]) plot_xhi#10 ← phi( @5/(byte[]) plot_xhi#12 )
  (byte[]) plot_xlo#10 ← phi( @5/(byte[]) plot_xlo#12 )
  (byte*) RASTER#6 ← phi( @5/(byte*) RASTER#8 )
  (byte*) BITMAP#6 ← phi( @5/(byte*) BITMAP#7 )
  (byte*) D018#1 ← phi( @5/(byte*) D018#2 )
  (byte*) D011#1 ← phi( @5/(byte*) D011#2 )
  (byte) RSEL#1 ← phi( @5/(byte) RSEL#2 )
  (byte) DEN#1 ← phi( @5/(byte) DEN#2 )
  (byte) BMM#1 ← phi( @5/(byte) BMM#2 )
  (byte*) FGCOL#1 ← phi( @5/(byte*) FGCOL#2 )
  (byte*) BGCOL#1 ← phi( @5/(byte*) BGCOL#4 )
  *((byte*) BGCOL#1) ← (byte) 0
  *((byte*) FGCOL#1) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#1 | (byte) DEN#1
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#1
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#1) ← (byte~) main::$2
  *((byte*) D018#1) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  (byte) plots_cnt#8 ← phi( main/(byte) plots_cnt#10 )
  (byte[]) plot_yhi#17 ← phi( main/(byte[]) plot_yhi#18 )
  (byte[]) plot_ylo#17 ← phi( main/(byte[]) plot_ylo#18 )
  (byte[]) plots_y#8 ← phi( main/(byte[]) plots_y#10 )
  (byte[]) plots_x#8 ← phi( main/(byte[]) plots_x#10 )
  (byte*) BGCOL#9 ← phi( main/(byte*) BGCOL#1 )
  (byte[]) plot_bit#8 ← phi( main/(byte[]) plot_bit#10 )
  (byte[]) plot_xhi#8 ← phi( main/(byte[]) plot_xhi#10 )
  (byte*) BITMAP#8 ← phi( main/(byte*) BITMAP#6 )
  (byte[]) plot_xlo#8 ← phi( main/(byte[]) plot_xlo#10 )
  (byte*) RASTER#4 ← phi( main/(byte*) RASTER#6 )
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte[]) plot_bit#15 ← phi( main::@5/(byte[]) plot_bit#8 )
  (byte[]) plot_ylo#16 ← phi( main::@5/(byte[]) plot_ylo#17 )
  (byte[]) plot_yhi#16 ← phi( main::@5/(byte[]) plot_yhi#17 )
  (byte[]) plot_xlo#15 ← phi( main::@5/(byte[]) plot_xlo#8 )
  (byte[]) plot_xhi#15 ← phi( main::@5/(byte[]) plot_xhi#8 )
  (byte) plots_cnt#7 ← phi( main::@5/(byte) plots_cnt#8 )
  (byte[]) plots_y#7 ← phi( main::@5/(byte[]) plots_y#8 )
  (byte[]) plots_x#7 ← phi( main::@5/(byte[]) plots_x#8 )
  (byte*) BGCOL#7 ← phi( main::@5/(byte*) BGCOL#9 )
  (byte*) RASTER#3 ← phi( main::@5/(byte*) RASTER#4 )
  to:main::@2
main::@1: scope:[main]  from main::@7
  (byte[]) plot_bit#14 ← phi( main::@7/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#15 ← phi( main::@7/(byte[]) plot_ylo#19 )
  (byte[]) plot_yhi#15 ← phi( main::@7/(byte[]) plot_yhi#19 )
  (byte[]) plot_xlo#14 ← phi( main::@7/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#14 ← phi( main::@7/(byte[]) plot_xhi#16 )
  (byte) plots_cnt#6 ← phi( main::@7/(byte) plots_cnt#9 )
  (byte[]) plots_y#6 ← phi( main::@7/(byte[]) plots_y#9 )
  (byte[]) plots_x#6 ← phi( main::@7/(byte[]) plots_x#9 )
  (byte*) BGCOL#6 ← phi( main::@7/(byte*) BGCOL#3 )
  (byte*) RASTER#2 ← phi( main::@7/(byte*) RASTER#5 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte[]) plot_bit#13 ← phi( main::@1/(byte[]) plot_bit#14 main::@2/(byte[]) plot_bit#13 main::@6/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#13 ← phi( main::@1/(byte[]) plot_ylo#15 main::@2/(byte[]) plot_ylo#13 main::@6/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#13 ← phi( main::@1/(byte[]) plot_yhi#15 main::@2/(byte[]) plot_yhi#13 main::@6/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#13 ← phi( main::@1/(byte[]) plot_xlo#14 main::@2/(byte[]) plot_xlo#13 main::@6/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#13 ← phi( main::@1/(byte[]) plot_xhi#14 main::@2/(byte[]) plot_xhi#13 main::@6/(byte[]) plot_xhi#15 )
  (byte) plots_cnt#5 ← phi( main::@1/(byte) plots_cnt#6 main::@2/(byte) plots_cnt#5 main::@6/(byte) plots_cnt#7 )
  (byte[]) plots_y#5 ← phi( main::@1/(byte[]) plots_y#6 main::@2/(byte[]) plots_y#5 main::@6/(byte[]) plots_y#7 )
  (byte[]) plots_x#5 ← phi( main::@1/(byte[]) plots_x#6 main::@2/(byte[]) plots_x#5 main::@6/(byte[]) plots_x#7 )
  (byte*) BGCOL#5 ← phi( main::@1/(byte*) BGCOL#6 main::@2/(byte*) BGCOL#5 main::@6/(byte*) BGCOL#7 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#2 main::@2/(byte*) RASTER#1 main::@6/(byte*) RASTER#3 )
  (byte~) main::$5 ← * (byte*) RASTER#1
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte[]) plot_bit#11 ← phi( main::@2/(byte[]) plot_bit#13 )
  (byte[]) plot_ylo#10 ← phi( main::@2/(byte[]) plot_ylo#13 )
  (byte[]) plot_yhi#10 ← phi( main::@2/(byte[]) plot_yhi#13 )
  (byte[]) plot_xlo#11 ← phi( main::@2/(byte[]) plot_xlo#13 )
  (byte[]) plot_xhi#11 ← phi( main::@2/(byte[]) plot_xhi#13 )
  (byte) plots_cnt#4 ← phi( main::@2/(byte) plots_cnt#5 )
  (byte*) RASTER#7 ← phi( main::@2/(byte*) RASTER#1 )
  (byte[]) plots_y#4 ← phi( main::@2/(byte[]) plots_y#5 )
  (byte[]) plots_x#4 ← phi( main::@2/(byte[]) plots_x#5 )
  (byte*) BGCOL#2 ← phi( main::@2/(byte*) BGCOL#5 )
  (byte~) main::$7 ← * (byte*) BGCOL#2
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL#2) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte[]) plot_bit#16 ← phi( main::@3/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#19 ← phi( main::@3/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#19 ← phi( main::@3/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#16 ← phi( main::@3/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#16 ← phi( main::@3/(byte[]) plot_xhi#11 )
  (byte) plots_cnt#9 ← phi( main::@3/(byte) plots_cnt#4 )
  (byte[]) plots_y#9 ← phi( main::@3/(byte[]) plots_y#4 )
  (byte[]) plots_x#9 ← phi( main::@3/(byte[]) plots_x#4 )
  (byte*) RASTER#5 ← phi( main::@3/(byte*) RASTER#7 )
  (byte*) BGCOL#3 ← phi( main::@3/(byte*) BGCOL#2 )
  (byte~) main::$10 ← * (byte*) BGCOL#3
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL#3) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#8 ← phi( @begin/(byte*) SCREEN#0 )
  (byte*) RASTER#10 ← phi( @begin/(byte*) RASTER#0 )
  (byte*) BITMAP#11 ← phi( @begin/(byte*) BITMAP#0 )
  (byte*) D018#4 ← phi( @begin/(byte*) D018#0 )
  (byte*) D011#4 ← phi( @begin/(byte*) D011#0 )
  (byte) RSEL#4 ← phi( @begin/(byte) RSEL#0 )
  (byte) DEN#4 ← phi( @begin/(byte) DEN#0 )
  (byte) BMM#4 ← phi( @begin/(byte) BMM#0 )
  (byte*) FGCOL#4 ← phi( @begin/(byte*) FGCOL#0 )
  (byte*) BGCOL#10 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[]) plots_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt#0 ← (byte) 8
  to:@2
plots: scope:[plots]  from main::@3
  (byte[]) plot_bit#6 ← phi( main::@3/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#6 ← phi( main::@3/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#6 ← phi( main::@3/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#6 ← phi( main::@3/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#6 ← phi( main::@3/(byte[]) plot_xhi#11 )
  (byte) plots_cnt#3 ← phi( main::@3/(byte) plots_cnt#4 )
  (byte[]) plots_y#2 ← phi( main::@3/(byte[]) plots_y#4 )
  (byte[]) plots_x#2 ← phi( main::@3/(byte[]) plots_x#4 )
  (byte) plots::i#0 ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte[]) plot_bit#3 ← phi( plots/(byte[]) plot_bit#6 plots::@3/(byte[]) plot_bit#7 )
  (byte[]) plot_ylo#3 ← phi( plots/(byte[]) plot_ylo#6 plots::@3/(byte[]) plot_ylo#7 )
  (byte[]) plot_yhi#3 ← phi( plots/(byte[]) plot_yhi#6 plots::@3/(byte[]) plot_yhi#7 )
  (byte[]) plot_xlo#3 ← phi( plots/(byte[]) plot_xlo#6 plots::@3/(byte[]) plot_xlo#7 )
  (byte[]) plot_xhi#3 ← phi( plots/(byte[]) plot_xhi#6 plots::@3/(byte[]) plot_xhi#7 )
  (byte) plots_cnt#2 ← phi( plots/(byte) plots_cnt#3 plots::@3/(byte) plots_cnt#1 )
  (byte[]) plots_y#1 ← phi( plots/(byte[]) plots_y#2 plots::@3/(byte[]) plots_y#3 )
  (byte) plots::i#2 ← phi( plots/(byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte[]) plots_x#1 ← phi( plots/(byte[]) plots_x#2 plots::@3/(byte[]) plots_x#3 )
  (byte~) plots::$0 ← (byte[]) plots_x#1 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (byte[]) plots_y#1 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte[]) plot_bit#7 ← phi( plots::@1/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#7 ← phi( plots::@1/(byte[]) plot_ylo#3 )
  (byte[]) plot_yhi#7 ← phi( plots::@1/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#7 ← phi( plots::@1/(byte[]) plot_xlo#3 )
  (byte[]) plot_xhi#7 ← phi( plots::@1/(byte[]) plot_xhi#3 )
  (byte[]) plots_y#3 ← phi( plots::@1/(byte[]) plots_y#1 )
  (byte[]) plots_x#3 ← phi( plots::@1/(byte[]) plots_x#1 )
  (byte) plots_cnt#1 ← phi( plots::@1/(byte) plots_cnt#2 )
  (byte) plots::i#3 ← phi( plots::@1/(byte) plots::i#2 )
  (byte) plots::i#1 ← ++ (byte) plots::i#3
  (boolean~) plots::$3 ← (byte) plots::i#1 < (byte) plots_cnt#1
  if((boolean~) plots::$3) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  (byte) plots_cnt#12 ← phi( @1/(byte) plots_cnt#0 )
  (byte[]) plots_y#12 ← phi( @1/(byte[]) plots_y#0 )
  (byte[]) plots_x#12 ← phi( @1/(byte[]) plots_x#0 )
  (byte*) SCREEN#7 ← phi( @1/(byte*) SCREEN#8 )
  (byte*) RASTER#9 ← phi( @1/(byte*) RASTER#10 )
  (byte*) BITMAP#10 ← phi( @1/(byte*) BITMAP#11 )
  (byte*) D018#3 ← phi( @1/(byte*) D018#4 )
  (byte*) D011#3 ← phi( @1/(byte*) D011#4 )
  (byte) RSEL#3 ← phi( @1/(byte) RSEL#4 )
  (byte) DEN#3 ← phi( @1/(byte) DEN#4 )
  (byte) BMM#3 ← phi( @1/(byte) BMM#4 )
  (byte*) FGCOL#3 ← phi( @1/(byte*) FGCOL#4 )
  (byte*) BGCOL#8 ← phi( @1/(byte*) BGCOL#10 )
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  to:@5
plot: scope:[plot]  from plots::@1
  (byte[]) plot_bit#1 ← phi( plots::@1/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#1 ← phi( plots::@1/(byte[]) plot_ylo#3 )
  (byte) plot::y#1 ← phi( plots::@1/(byte) plot::y#0 )
  (byte[]) plot_yhi#1 ← phi( plots::@1/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#1 ← phi( plots::@1/(byte[]) plot_xlo#3 )
  (byte) plot::x#1 ← phi( plots::@1/(byte) plot::x#0 )
  (byte[]) plot_xhi#1 ← phi( plots::@1/(byte[]) plot_xhi#3 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#1
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#1
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#1
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#1
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte*) plot::plotter#0 ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#1
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  (byte[]) plot_yhi#14 ← phi( main::@5/(byte[]) plot_yhi#17 )
  (byte[]) plot_ylo#14 ← phi( main::@5/(byte[]) plot_ylo#17 )
  (byte[]) plot_bit#4 ← phi( main::@5/(byte[]) plot_bit#8 )
  (byte[]) plot_xhi#4 ← phi( main::@5/(byte[]) plot_xhi#8 )
  (byte*) BITMAP#4 ← phi( main::@5/(byte*) BITMAP#8 )
  (byte[]) plot_xlo#4 ← phi( main::@5/(byte[]) plot_xlo#8 )
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#11 ← phi( init_plot_tables/(byte[]) plot_yhi#14 init_plot_tables::@2/(byte[]) plot_yhi#8 )
  (byte[]) plot_ylo#11 ← phi( init_plot_tables/(byte[]) plot_ylo#14 init_plot_tables::@2/(byte[]) plot_ylo#8 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#4 init_plot_tables::@2/(byte[]) plot_bit#5 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#4 init_plot_tables::@2/(byte[]) plot_xhi#5 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#4 init_plot_tables::@2/(byte*) BITMAP#5 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#4 init_plot_tables::@2/(byte[]) plot_xlo#5 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (byte) init_plot_tables::bit#1 ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte[]) plot_yhi#8 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#11 init_plot_tables::@5/(byte[]) plot_yhi#12 )
  (byte[]) plot_ylo#8 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#11 init_plot_tables::@5/(byte[]) plot_ylo#12 )
  (byte[]) plot_bit#5 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 init_plot_tables::@5/(byte[]) plot_bit#9 )
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte[]) plot_xhi#5 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 init_plot_tables::@5/(byte[]) plot_xhi#9 )
  (byte*) BITMAP#5 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 init_plot_tables::@5/(byte*) BITMAP#9 )
  (byte[]) plot_xlo#5 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 init_plot_tables::@5/(byte[]) plot_xlo#9 )
  (byte) init_plot_tables::x#3 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 init_plot_tables::@5/(byte) init_plot_tables::x#4 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#3
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte[]) plot_yhi#12 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_ylo#12 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#11 )
  (byte[]) plot_bit#9 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 )
  (byte[]) plot_xhi#9 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 )
  (byte*) BITMAP#9 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#9 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 )
  (byte) init_plot_tables::x#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 )
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte[]) plot_yhi#5 ← phi( init_plot_tables::@2/(byte[]) plot_yhi#8 )
  (byte[]) plot_ylo#5 ← phi( init_plot_tables::@2/(byte[]) plot_ylo#8 )
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#4 init_plot_tables::@6/(byte[]) plot_yhi#5 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#4 init_plot_tables::@6/(byte[]) plot_ylo#5 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte[]) plot_yhi#4 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 init_plot_tables::@7/(byte[]) plot_yhi#9 )
  (byte[]) plot_ylo#4 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 init_plot_tables::@7/(byte[]) plot_ylo#9 )
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#3 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 init_plot_tables::@7/(byte) init_plot_tables::y#4 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#3
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte[]) plot_yhi#9 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 )
  (byte[]) plot_ylo#9 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 )
  (byte) init_plot_tables::y#4 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 )
  (byte*) init_plot_tables::yoffs#3 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 )
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs#3 + (word) 320
  (byte*) init_plot_tables::yoffs#1 ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) SCREEN#4 ← phi( main/(byte*) SCREEN#5 )
  (byte*) BITMAP#2 ← phi( main/(byte*) BITMAP#6 )
  (byte*) init_screen::b#0 ← (byte*) BITMAP#2
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#3 ← phi( init_screen/(byte*) SCREEN#4 init_screen::@1/(byte*) SCREEN#3 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#2 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen::@1/(byte*) SCREEN#3 )
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  (byte) plots_cnt#11 ← phi( @2/(byte) plots_cnt#12 )
  (byte[]) plot_yhi#20 ← phi( @2/(byte[]) plot_yhi#0 )
  (byte[]) plot_ylo#20 ← phi( @2/(byte[]) plot_ylo#0 )
  (byte[]) plots_y#11 ← phi( @2/(byte[]) plots_y#12 )
  (byte[]) plots_x#11 ← phi( @2/(byte[]) plots_x#12 )
  (byte*) SCREEN#6 ← phi( @2/(byte*) SCREEN#7 )
  (byte[]) plot_bit#12 ← phi( @2/(byte[]) plot_bit#0 )
  (byte[]) plot_xhi#12 ← phi( @2/(byte[]) plot_xhi#0 )
  (byte[]) plot_xlo#12 ← phi( @2/(byte[]) plot_xlo#0 )
  (byte*) RASTER#8 ← phi( @2/(byte*) RASTER#9 )
  (byte*) BITMAP#7 ← phi( @2/(byte*) BITMAP#10 )
  (byte*) D018#2 ← phi( @2/(byte*) D018#3 )
  (byte*) D011#2 ← phi( @2/(byte*) D011#3 )
  (byte) RSEL#2 ← phi( @2/(byte) RSEL#3 )
  (byte) DEN#2 ← phi( @2/(byte) DEN#3 )
  (byte) BMM#2 ← phi( @2/(byte) BMM#3 )
  (byte*) FGCOL#2 ← phi( @2/(byte*) FGCOL#3 )
  (byte*) BGCOL#4 ← phi( @2/(byte*) BGCOL#8 )
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Not aliassing across scopes: plot::x#0 plots::$0
Not aliassing across scopes: plot::y#0 plots::$1
Not aliassing across scopes: init_screen::b#0 BITMAP#2
Not aliassing across scopes: init_screen::c#0 SCREEN#1
Not aliassing identity: SCREEN#2 SCREEN#2
Alias (byte*) BGCOL#0 = (byte*) BGCOL#1 (byte*) BGCOL#4 (byte*) BGCOL#9 (byte*) BGCOL#7 (byte*) BGCOL#10 (byte*) BGCOL#8 
Alias (byte*) FGCOL#0 = (byte*) FGCOL#1 (byte*) FGCOL#2 (byte*) FGCOL#4 (byte*) FGCOL#3 
Alias (byte) BMM#0 = (byte) BMM#1 (byte) BMM#2 (byte) BMM#4 (byte) BMM#3 
Alias (byte) DEN#0 = (byte) DEN#1 (byte) DEN#2 (byte) DEN#4 (byte) DEN#3 
Alias (byte) RSEL#0 = (byte) RSEL#1 (byte) RSEL#2 (byte) RSEL#4 (byte) RSEL#3 
Alias (byte*) D011#0 = (byte*) D011#1 (byte*) D011#2 (byte*) D011#4 (byte*) D011#3 
Alias (byte*) D018#0 = (byte*) D018#1 (byte*) D018#2 (byte*) D018#4 (byte*) D018#3 
Alias (byte*) BITMAP#0 = (byte*) BITMAP#6 (byte*) BITMAP#7 (byte*) BITMAP#8 (byte*) BITMAP#4 (byte*) BITMAP#2 (byte*) BITMAP#11 (byte*) BITMAP#10 
Alias (byte*) RASTER#0 = (byte*) RASTER#6 (byte*) RASTER#8 (byte*) RASTER#4 (byte*) RASTER#3 (byte*) RASTER#10 (byte*) RASTER#9 
Alias (byte[]) plot_xlo#0 = (byte[]) plot_xlo#10 (byte[]) plot_xlo#12 (byte[]) plot_xlo#8 (byte[]) plot_xlo#15 (byte[]) plot_xlo#4 
Alias (byte[]) plot_xhi#0 = (byte[]) plot_xhi#10 (byte[]) plot_xhi#12 (byte[]) plot_xhi#8 (byte[]) plot_xhi#15 (byte[]) plot_xhi#4 
Alias (byte[]) plot_bit#0 = (byte[]) plot_bit#10 (byte[]) plot_bit#12 (byte[]) plot_bit#8 (byte[]) plot_bit#15 (byte[]) plot_bit#4 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#5 (byte*) SCREEN#6 (byte*) SCREEN#4 (byte*) SCREEN#8 (byte*) SCREEN#7 
Alias (byte[]) plots_x#0 = (byte[]) plots_x#10 (byte[]) plots_x#11 (byte[]) plots_x#8 (byte[]) plots_x#7 (byte[]) plots_x#12 
Alias (byte[]) plots_y#0 = (byte[]) plots_y#10 (byte[]) plots_y#11 (byte[]) plots_y#8 (byte[]) plots_y#7 (byte[]) plots_y#12 
Alias (byte[]) plot_ylo#0 = (byte[]) plot_ylo#18 (byte[]) plot_ylo#20 (byte[]) plot_ylo#17 (byte[]) plot_ylo#16 (byte[]) plot_ylo#14 
Alias (byte[]) plot_yhi#0 = (byte[]) plot_yhi#18 (byte[]) plot_yhi#20 (byte[]) plot_yhi#17 (byte[]) plot_yhi#16 (byte[]) plot_yhi#14 
Alias (byte) plots_cnt#0 = (byte) plots_cnt#10 (byte) plots_cnt#11 (byte) plots_cnt#8 (byte) plots_cnt#7 (byte) plots_cnt#12 
Alias (byte*) RASTER#1 = (byte*) RASTER#2 (byte*) RASTER#5 (byte*) RASTER#7 
Alias (byte*) BGCOL#2 = (byte*) BGCOL#6 (byte*) BGCOL#3 (byte*) BGCOL#5 
Alias (byte[]) plots_x#2 = (byte[]) plots_x#6 (byte[]) plots_x#9 (byte[]) plots_x#4 (byte[]) plots_x#5 
Alias (byte[]) plots_y#2 = (byte[]) plots_y#6 (byte[]) plots_y#9 (byte[]) plots_y#4 (byte[]) plots_y#5 
Alias (byte) plots_cnt#3 = (byte) plots_cnt#6 (byte) plots_cnt#9 (byte) plots_cnt#4 (byte) plots_cnt#5 
Alias (byte[]) plot_xhi#11 = (byte[]) plot_xhi#14 (byte[]) plot_xhi#16 (byte[]) plot_xhi#13 (byte[]) plot_xhi#6 
Alias (byte[]) plot_xlo#11 = (byte[]) plot_xlo#14 (byte[]) plot_xlo#16 (byte[]) plot_xlo#13 (byte[]) plot_xlo#6 
Alias (byte[]) plot_yhi#10 = (byte[]) plot_yhi#15 (byte[]) plot_yhi#19 (byte[]) plot_yhi#13 (byte[]) plot_yhi#6 
Alias (byte[]) plot_ylo#10 = (byte[]) plot_ylo#15 (byte[]) plot_ylo#19 (byte[]) plot_ylo#13 (byte[]) plot_ylo#6 
Alias (byte[]) plot_bit#11 = (byte[]) plot_bit#14 (byte[]) plot_bit#16 (byte[]) plot_bit#13 (byte[]) plot_bit#6 
Alias (byte) plots::i#2 = (byte) plots::i#3 
Alias (byte) plots_cnt#1 = (byte) plots_cnt#2 
Alias (byte[]) plots_x#1 = (byte[]) plots_x#3 
Alias (byte[]) plots_y#1 = (byte[]) plots_y#3 
Alias (byte[]) plot_xhi#1 = (byte[]) plot_xhi#7 (byte[]) plot_xhi#3 
Alias (byte[]) plot_xlo#1 = (byte[]) plot_xlo#7 (byte[]) plot_xlo#3 
Alias (byte[]) plot_yhi#1 = (byte[]) plot_yhi#7 (byte[]) plot_yhi#3 
Alias (byte[]) plot_ylo#1 = (byte[]) plot_ylo#7 (byte[]) plot_ylo#3 
Alias (byte[]) plot_bit#1 = (byte[]) plot_bit#7 (byte[]) plot_bit#3 
Alias (byte) plot::x#0 = (byte) plot::x#1 
Alias (byte) plot::y#0 = (byte) plot::y#1 
Alias (byte*) plot::plotter#0 = (byte~) plot::$4 
Alias (byte) init_plot_tables::bit#1 = (byte~) init_plot_tables::$2 
Alias (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#4 
Alias (byte[]) plot_xlo#2 = (byte[]) plot_xlo#9 
Alias (byte*) BITMAP#1 = (byte*) BITMAP#9 
Alias (byte[]) plot_xhi#2 = (byte[]) plot_xhi#9 
Alias (byte[]) plot_bit#2 = (byte[]) plot_bit#9 
Alias (byte[]) plot_ylo#11 = (byte[]) plot_ylo#12 
Alias (byte[]) plot_yhi#11 = (byte[]) plot_yhi#12 
Alias (byte[]) plot_ylo#5 = (byte[]) plot_ylo#8 
Alias (byte[]) plot_yhi#5 = (byte[]) plot_yhi#8 
Alias (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#3 
Alias (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#4 
Alias (byte[]) plot_ylo#2 = (byte[]) plot_ylo#9 
Alias (byte[]) plot_yhi#2 = (byte[]) plot_yhi#9 
Alias (byte*) init_plot_tables::yoffs#1 = (byte*~) init_plot_tables::$13 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) RASTER#0 ← (word) 53266
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) D018#0 ← (word) 53272
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) COLS#0 ← (word) 55296
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  to:@1
main: scope:[main]  from @5
  *((byte*) BGCOL#0) ← (byte) 0
  *((byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#0 | (byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#0) ← (byte~) main::$2
  *((byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@2
main::@1: scope:[main]  from main::@7
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte[]) plot_bit#11 ← phi( main::@1/(byte[]) plot_bit#11 main::@2/(byte[]) plot_bit#11 main::@6/(byte[]) plot_bit#0 )
  (byte[]) plot_ylo#10 ← phi( main::@1/(byte[]) plot_ylo#10 main::@2/(byte[]) plot_ylo#10 main::@6/(byte[]) plot_ylo#0 )
  (byte[]) plot_yhi#10 ← phi( main::@1/(byte[]) plot_yhi#10 main::@2/(byte[]) plot_yhi#10 main::@6/(byte[]) plot_yhi#0 )
  (byte[]) plot_xlo#11 ← phi( main::@1/(byte[]) plot_xlo#11 main::@2/(byte[]) plot_xlo#11 main::@6/(byte[]) plot_xlo#0 )
  (byte[]) plot_xhi#11 ← phi( main::@1/(byte[]) plot_xhi#11 main::@2/(byte[]) plot_xhi#11 main::@6/(byte[]) plot_xhi#0 )
  (byte) plots_cnt#3 ← phi( main::@1/(byte) plots_cnt#3 main::@2/(byte) plots_cnt#3 main::@6/(byte) plots_cnt#0 )
  (byte[]) plots_y#2 ← phi( main::@1/(byte[]) plots_y#2 main::@2/(byte[]) plots_y#2 main::@6/(byte[]) plots_y#0 )
  (byte[]) plots_x#2 ← phi( main::@1/(byte[]) plots_x#2 main::@2/(byte[]) plots_x#2 main::@6/(byte[]) plots_x#0 )
  (byte*) BGCOL#2 ← phi( main::@1/(byte*) BGCOL#2 main::@2/(byte*) BGCOL#2 main::@6/(byte*) BGCOL#0 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#1 main::@2/(byte*) RASTER#1 main::@6/(byte*) RASTER#0 )
  (byte~) main::$5 ← * (byte*) RASTER#1
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (byte*) BGCOL#2
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL#2) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (byte*) BGCOL#2
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL#2) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[]) plots_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt#0 ← (byte) 8
  to:@2
plots: scope:[plots]  from main::@3
  (byte) plots::i#0 ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte[]) plot_bit#1 ← phi( plots/(byte[]) plot_bit#11 plots::@3/(byte[]) plot_bit#1 )
  (byte[]) plot_ylo#1 ← phi( plots/(byte[]) plot_ylo#10 plots::@3/(byte[]) plot_ylo#1 )
  (byte[]) plot_yhi#1 ← phi( plots/(byte[]) plot_yhi#10 plots::@3/(byte[]) plot_yhi#1 )
  (byte[]) plot_xlo#1 ← phi( plots/(byte[]) plot_xlo#11 plots::@3/(byte[]) plot_xlo#1 )
  (byte[]) plot_xhi#1 ← phi( plots/(byte[]) plot_xhi#11 plots::@3/(byte[]) plot_xhi#1 )
  (byte) plots_cnt#1 ← phi( plots/(byte) plots_cnt#3 plots::@3/(byte) plots_cnt#1 )
  (byte[]) plots_y#1 ← phi( plots/(byte[]) plots_y#2 plots::@3/(byte[]) plots_y#1 )
  (byte) plots::i#2 ← phi( plots/(byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte[]) plots_x#1 ← phi( plots/(byte[]) plots_x#2 plots::@3/(byte[]) plots_x#1 )
  (byte~) plots::$0 ← (byte[]) plots_x#1 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (byte[]) plots_y#1 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  (boolean~) plots::$3 ← (byte) plots::i#1 < (byte) plots_cnt#1
  if((boolean~) plots::$3) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  to:@5
plot: scope:[plot]  from plots::@1
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#11 ← phi( init_plot_tables/(byte[]) plot_yhi#0 init_plot_tables::@2/(byte[]) plot_yhi#5 )
  (byte[]) plot_ylo#11 ← phi( init_plot_tables/(byte[]) plot_ylo#0 init_plot_tables::@2/(byte[]) plot_ylo#5 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#0 init_plot_tables::@2/(byte[]) plot_bit#5 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#0 init_plot_tables::@2/(byte[]) plot_xhi#5 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#0 init_plot_tables::@2/(byte*) BITMAP#5 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#0 init_plot_tables::@2/(byte[]) plot_xlo#5 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte[]) plot_yhi#5 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#11 init_plot_tables::@5/(byte[]) plot_yhi#11 )
  (byte[]) plot_ylo#5 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#11 init_plot_tables::@5/(byte[]) plot_ylo#11 )
  (byte[]) plot_bit#5 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 init_plot_tables::@5/(byte[]) plot_bit#2 )
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte[]) plot_xhi#5 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 init_plot_tables::@5/(byte[]) plot_xhi#2 )
  (byte*) BITMAP#5 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 init_plot_tables::@5/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#5 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 init_plot_tables::@5/(byte[]) plot_xlo#2 )
  (byte) init_plot_tables::x#3 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 init_plot_tables::@5/(byte) init_plot_tables::x#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#3
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#4 init_plot_tables::@6/(byte[]) plot_yhi#5 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#4 init_plot_tables::@6/(byte[]) plot_ylo#5 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte[]) plot_yhi#4 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 init_plot_tables::@7/(byte[]) plot_yhi#2 )
  (byte[]) plot_ylo#4 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 init_plot_tables::@7/(byte[]) plot_ylo#2 )
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#3 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 init_plot_tables::@7/(byte) init_plot_tables::y#2 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#3
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen/(byte*) SCREEN#0 init_screen::@1/(byte*) SCREEN#1 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#0 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Not aliassing identity: RASTER#1 RASTER#1
Not aliassing identity: BGCOL#2 BGCOL#2
Not aliassing identity: plots_x#2 plots_x#2
Not aliassing identity: plots_y#2 plots_y#2
Not aliassing identity: plots_cnt#3 plots_cnt#3
Not aliassing identity: plot_xhi#11 plot_xhi#11
Not aliassing identity: plot_xlo#11 plot_xlo#11
Not aliassing identity: plot_yhi#10 plot_yhi#10
Not aliassing identity: plot_ylo#10 plot_ylo#10
Not aliassing identity: plot_bit#11 plot_bit#11
Not aliassing across scopes: plot::x#0 plots::$0
Not aliassing across scopes: plot::y#0 plots::$1
Not aliassing across scopes: init_screen::b#0 BITMAP#0
Not aliassing across scopes: init_screen::c#0 SCREEN#1
Not aliassing identity: SCREEN#2 SCREEN#2
Alias (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#3 
Alias (byte[]) plot_xlo#2 = (byte[]) plot_xlo#5 
Alias (byte*) BITMAP#1 = (byte*) BITMAP#5 
Alias (byte[]) plot_xhi#2 = (byte[]) plot_xhi#5 
Alias (byte[]) plot_bit#2 = (byte[]) plot_bit#5 
Alias (byte[]) plot_ylo#11 = (byte[]) plot_ylo#5 
Alias (byte[]) plot_yhi#11 = (byte[]) plot_yhi#5 
Alias (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#3 
Alias (byte[]) plot_ylo#2 = (byte[]) plot_ylo#4 
Alias (byte[]) plot_yhi#2 = (byte[]) plot_yhi#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) RASTER#0 ← (word) 53266
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) D018#0 ← (word) 53272
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) COLS#0 ← (word) 55296
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  to:@1
main: scope:[main]  from @5
  *((byte*) BGCOL#0) ← (byte) 0
  *((byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#0 | (byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#0) ← (byte~) main::$2
  *((byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@2
main::@1: scope:[main]  from main::@7
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte[]) plot_bit#11 ← phi( main::@1/(byte[]) plot_bit#11 main::@2/(byte[]) plot_bit#11 main::@6/(byte[]) plot_bit#0 )
  (byte[]) plot_ylo#10 ← phi( main::@1/(byte[]) plot_ylo#10 main::@2/(byte[]) plot_ylo#10 main::@6/(byte[]) plot_ylo#0 )
  (byte[]) plot_yhi#10 ← phi( main::@1/(byte[]) plot_yhi#10 main::@2/(byte[]) plot_yhi#10 main::@6/(byte[]) plot_yhi#0 )
  (byte[]) plot_xlo#11 ← phi( main::@1/(byte[]) plot_xlo#11 main::@2/(byte[]) plot_xlo#11 main::@6/(byte[]) plot_xlo#0 )
  (byte[]) plot_xhi#11 ← phi( main::@1/(byte[]) plot_xhi#11 main::@2/(byte[]) plot_xhi#11 main::@6/(byte[]) plot_xhi#0 )
  (byte) plots_cnt#3 ← phi( main::@1/(byte) plots_cnt#3 main::@2/(byte) plots_cnt#3 main::@6/(byte) plots_cnt#0 )
  (byte[]) plots_y#2 ← phi( main::@1/(byte[]) plots_y#2 main::@2/(byte[]) plots_y#2 main::@6/(byte[]) plots_y#0 )
  (byte[]) plots_x#2 ← phi( main::@1/(byte[]) plots_x#2 main::@2/(byte[]) plots_x#2 main::@6/(byte[]) plots_x#0 )
  (byte*) BGCOL#2 ← phi( main::@1/(byte*) BGCOL#2 main::@2/(byte*) BGCOL#2 main::@6/(byte*) BGCOL#0 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#1 main::@2/(byte*) RASTER#1 main::@6/(byte*) RASTER#0 )
  (byte~) main::$5 ← * (byte*) RASTER#1
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (byte*) BGCOL#2
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL#2) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (byte*) BGCOL#2
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL#2) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[]) plots_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt#0 ← (byte) 8
  to:@2
plots: scope:[plots]  from main::@3
  (byte) plots::i#0 ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte[]) plot_bit#1 ← phi( plots/(byte[]) plot_bit#11 plots::@3/(byte[]) plot_bit#1 )
  (byte[]) plot_ylo#1 ← phi( plots/(byte[]) plot_ylo#10 plots::@3/(byte[]) plot_ylo#1 )
  (byte[]) plot_yhi#1 ← phi( plots/(byte[]) plot_yhi#10 plots::@3/(byte[]) plot_yhi#1 )
  (byte[]) plot_xlo#1 ← phi( plots/(byte[]) plot_xlo#11 plots::@3/(byte[]) plot_xlo#1 )
  (byte[]) plot_xhi#1 ← phi( plots/(byte[]) plot_xhi#11 plots::@3/(byte[]) plot_xhi#1 )
  (byte) plots_cnt#1 ← phi( plots/(byte) plots_cnt#3 plots::@3/(byte) plots_cnt#1 )
  (byte[]) plots_y#1 ← phi( plots/(byte[]) plots_y#2 plots::@3/(byte[]) plots_y#1 )
  (byte) plots::i#2 ← phi( plots/(byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte[]) plots_x#1 ← phi( plots/(byte[]) plots_x#2 plots::@3/(byte[]) plots_x#1 )
  (byte~) plots::$0 ← (byte[]) plots_x#1 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (byte[]) plots_y#1 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  (boolean~) plots::$3 ← (byte) plots::i#1 < (byte) plots_cnt#1
  if((boolean~) plots::$3) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  to:@5
plot: scope:[plot]  from plots::@1
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#11 ← phi( init_plot_tables/(byte[]) plot_yhi#0 init_plot_tables::@2/(byte[]) plot_yhi#11 )
  (byte[]) plot_ylo#11 ← phi( init_plot_tables/(byte[]) plot_ylo#0 init_plot_tables::@2/(byte[]) plot_ylo#11 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#0 init_plot_tables::@2/(byte[]) plot_bit#2 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#0 init_plot_tables::@2/(byte[]) plot_xhi#2 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#0 init_plot_tables::@2/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#0 init_plot_tables::@2/(byte[]) plot_xlo#2 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#2 init_plot_tables::@6/(byte[]) plot_yhi#11 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#2 init_plot_tables::@6/(byte[]) plot_ylo#11 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen/(byte*) SCREEN#0 init_screen::@1/(byte*) SCREEN#1 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#0 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Not aliassing identity: RASTER#1 RASTER#1
Not aliassing identity: BGCOL#2 BGCOL#2
Not aliassing identity: plots_x#2 plots_x#2
Not aliassing identity: plots_y#2 plots_y#2
Not aliassing identity: plots_cnt#3 plots_cnt#3
Not aliassing identity: plot_xhi#11 plot_xhi#11
Not aliassing identity: plot_xlo#11 plot_xlo#11
Not aliassing identity: plot_yhi#10 plot_yhi#10
Not aliassing identity: plot_ylo#10 plot_ylo#10
Not aliassing identity: plot_bit#11 plot_bit#11
Not aliassing across scopes: plot::x#0 plots::$0
Not aliassing across scopes: plot::y#0 plots::$1
Not aliassing identity: plot_ylo#2 plot_ylo#2
Not aliassing identity: plot_yhi#2 plot_yhi#2
Not aliassing across scopes: init_screen::b#0 BITMAP#0
Not aliassing across scopes: init_screen::c#0 SCREEN#1
Not aliassing identity: SCREEN#2 SCREEN#2
Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte*) BGCOL#2
Self Phi Eliminated (byte*) BGCOL#2
Self Phi Eliminated (byte[]) plots_x#2
Self Phi Eliminated (byte[]) plots_x#2
Self Phi Eliminated (byte[]) plots_y#2
Self Phi Eliminated (byte[]) plots_y#2
Self Phi Eliminated (byte) plots_cnt#3
Self Phi Eliminated (byte) plots_cnt#3
Self Phi Eliminated (byte[]) plot_xhi#11
Self Phi Eliminated (byte[]) plot_xhi#11
Self Phi Eliminated (byte[]) plot_xlo#11
Self Phi Eliminated (byte[]) plot_xlo#11
Self Phi Eliminated (byte[]) plot_yhi#10
Self Phi Eliminated (byte[]) plot_yhi#10
Self Phi Eliminated (byte[]) plot_ylo#10
Self Phi Eliminated (byte[]) plot_ylo#10
Self Phi Eliminated (byte[]) plot_bit#11
Self Phi Eliminated (byte[]) plot_bit#11
Self Phi Eliminated (byte[]) plots_x#1
Self Phi Eliminated (byte[]) plots_y#1
Self Phi Eliminated (byte) plots_cnt#1
Self Phi Eliminated (byte[]) plot_xhi#1
Self Phi Eliminated (byte[]) plot_xlo#1
Self Phi Eliminated (byte[]) plot_yhi#1
Self Phi Eliminated (byte[]) plot_ylo#1
Self Phi Eliminated (byte[]) plot_bit#1
Self Phi Eliminated (byte[]) plot_xlo#2
Self Phi Eliminated (byte*) BITMAP#1
Self Phi Eliminated (byte[]) plot_xhi#2
Self Phi Eliminated (byte[]) plot_bit#2
Self Phi Eliminated (byte[]) plot_ylo#11
Self Phi Eliminated (byte[]) plot_yhi#11
Self Phi Eliminated (byte[]) plot_ylo#2
Self Phi Eliminated (byte[]) plot_yhi#2
Self Phi Eliminated (byte*) BITMAP#3
Self Phi Eliminated (byte*) SCREEN#1
Self Phi Eliminated (byte*) SCREEN#2
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) RASTER#0 ← (word) 53266
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) D018#0 ← (word) 53272
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) COLS#0 ← (word) 55296
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  to:@1
main: scope:[main]  from @5
  *((byte*) BGCOL#0) ← (byte) 0
  *((byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#0 | (byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#0) ← (byte~) main::$2
  *((byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@2
main::@1: scope:[main]  from main::@7
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte[]) plot_bit#11 ← phi( main::@6/(byte[]) plot_bit#0 )
  (byte[]) plot_ylo#10 ← phi( main::@6/(byte[]) plot_ylo#0 )
  (byte[]) plot_yhi#10 ← phi( main::@6/(byte[]) plot_yhi#0 )
  (byte[]) plot_xlo#11 ← phi( main::@6/(byte[]) plot_xlo#0 )
  (byte[]) plot_xhi#11 ← phi( main::@6/(byte[]) plot_xhi#0 )
  (byte) plots_cnt#3 ← phi( main::@6/(byte) plots_cnt#0 )
  (byte[]) plots_y#2 ← phi( main::@6/(byte[]) plots_y#0 )
  (byte[]) plots_x#2 ← phi( main::@6/(byte[]) plots_x#0 )
  (byte*) BGCOL#2 ← phi( main::@6/(byte*) BGCOL#0 )
  (byte*) RASTER#1 ← phi( main::@6/(byte*) RASTER#0 )
  (byte~) main::$5 ← * (byte*) RASTER#1
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (byte*) BGCOL#2
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL#2) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (byte*) BGCOL#2
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL#2) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[]) plots_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt#0 ← (byte) 8
  to:@2
plots: scope:[plots]  from main::@3
  (byte) plots::i#0 ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte[]) plot_bit#1 ← phi( plots/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#1 ← phi( plots/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#1 ← phi( plots/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#1 ← phi( plots/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#1 ← phi( plots/(byte[]) plot_xhi#11 )
  (byte) plots_cnt#1 ← phi( plots/(byte) plots_cnt#3 )
  (byte[]) plots_y#1 ← phi( plots/(byte[]) plots_y#2 )
  (byte) plots::i#2 ← phi( plots/(byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte[]) plots_x#1 ← phi( plots/(byte[]) plots_x#2 )
  (byte~) plots::$0 ← (byte[]) plots_x#1 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (byte[]) plots_y#1 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  (boolean~) plots::$3 ← (byte) plots::i#1 < (byte) plots_cnt#1
  if((boolean~) plots::$3) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  to:@5
plot: scope:[plot]  from plots::@1
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#11 ← phi( init_plot_tables/(byte[]) plot_yhi#0 )
  (byte[]) plot_ylo#11 ← phi( init_plot_tables/(byte[]) plot_ylo#0 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#0 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#0 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#0 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#0 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@6/(byte[]) plot_yhi#11 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@6/(byte[]) plot_ylo#11 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen/(byte*) SCREEN#0 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#0 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Redundant Phi (byte*) RASTER#1 (byte*) RASTER#0
Redundant Phi (byte*) BGCOL#2 (byte*) BGCOL#0
Redundant Phi (byte[]) plots_x#2 (byte[]) plots_x#0
Redundant Phi (byte[]) plots_y#2 (byte[]) plots_y#0
Redundant Phi (byte) plots_cnt#3 (byte) plots_cnt#0
Redundant Phi (byte[]) plot_xhi#11 (byte[]) plot_xhi#0
Redundant Phi (byte[]) plot_xlo#11 (byte[]) plot_xlo#0
Redundant Phi (byte[]) plot_yhi#10 (byte[]) plot_yhi#0
Redundant Phi (byte[]) plot_ylo#10 (byte[]) plot_ylo#0
Redundant Phi (byte[]) plot_bit#11 (byte[]) plot_bit#0
Redundant Phi (byte[]) plots_x#1 (byte[]) plots_x#2
Redundant Phi (byte[]) plots_y#1 (byte[]) plots_y#2
Redundant Phi (byte) plots_cnt#1 (byte) plots_cnt#3
Redundant Phi (byte[]) plot_xhi#1 (byte[]) plot_xhi#11
Redundant Phi (byte[]) plot_xlo#1 (byte[]) plot_xlo#11
Redundant Phi (byte[]) plot_yhi#1 (byte[]) plot_yhi#10
Redundant Phi (byte[]) plot_ylo#1 (byte[]) plot_ylo#10
Redundant Phi (byte[]) plot_bit#1 (byte[]) plot_bit#11
Redundant Phi (byte[]) plot_xlo#2 (byte[]) plot_xlo#0
Redundant Phi (byte*) BITMAP#1 (byte*) BITMAP#0
Redundant Phi (byte[]) plot_xhi#2 (byte[]) plot_xhi#0
Redundant Phi (byte[]) plot_bit#2 (byte[]) plot_bit#0
Redundant Phi (byte[]) plot_ylo#11 (byte[]) plot_ylo#0
Redundant Phi (byte[]) plot_yhi#11 (byte[]) plot_yhi#0
Redundant Phi (byte[]) plot_ylo#2 (byte[]) plot_ylo#11
Redundant Phi (byte[]) plot_yhi#2 (byte[]) plot_yhi#11
Redundant Phi (byte*) BITMAP#3 (byte*) BITMAP#0
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#1
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) RASTER#0 ← (word) 53266
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) D018#0 ← (word) 53272
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) COLS#0 ← (word) 55296
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  to:@1
main: scope:[main]  from @5
  *((byte*) BGCOL#0) ← (byte) 0
  *((byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#0 | (byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#0) ← (byte~) main::$2
  *((byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@2
main::@1: scope:[main]  from main::@7
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte~) main::$5 ← * (byte*) RASTER#0
  (boolean~) main::$6 ← (byte~) main::$5 != (byte) 255
  if((boolean~) main::$6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (byte*) BGCOL#0
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL#0) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (byte*) BGCOL#0
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL#0) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[]) plots_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt#0 ← (byte) 8
  to:@2
plots: scope:[plots]  from main::@3
  (byte) plots::i#0 ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte) plots::i#2 ← phi( plots/(byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte~) plots::$0 ← (byte[]) plots_x#0 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (byte[]) plots_y#0 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  (boolean~) plots::$3 ← (byte) plots::i#1 < (byte) plots_cnt#0
  if((boolean~) plots::$3) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  to:@5
plot: scope:[plot]  from plots::@1
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#0 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#0
  *((byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#0 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (byte*) SCREEN#0
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#0 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Simple Condition (boolean~) main::$6 if((byte~) main::$5!=(byte) 255) goto main::@2
Simple Condition (boolean~) plots::$3 if((byte) plots::i#1<(byte) plots_cnt#0) goto plots::@1
Simple Condition (boolean~) init_plot_tables::$4 if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
Simple Condition (boolean~) init_plot_tables::$5 if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
Simple Condition (boolean~) init_plot_tables::$12 if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
Simple Condition (boolean~) init_plot_tables::$14 if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
Simple Condition (boolean~) init_screen::$1 if((byte*) init_screen::b#1!=(byte*~) init_screen::$0) goto init_screen::@1
Simple Condition (boolean~) init_screen::$3 if((byte*) init_screen::c#1!=(byte*~) init_screen::$2) goto init_screen::@2
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) RASTER#0 ← (word) 53266
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) D018#0 ← (word) 53272
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) COLS#0 ← (word) 55296
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  to:@1
main: scope:[main]  from @5
  *((byte*) BGCOL#0) ← (byte) 0
  *((byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#0 | (byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#0) ← (byte~) main::$2
  *((byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@2
main::@1: scope:[main]  from main::@7
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte~) main::$5 ← * (byte*) RASTER#0
  if((byte~) main::$5!=(byte) 255) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (byte*) BGCOL#0
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((byte*) BGCOL#0) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (byte*) BGCOL#0
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((byte*) BGCOL#0) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[]) plots_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
  (byte[]) plots_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }
  (byte) plots_cnt#0 ← (byte) 8
  to:@2
plots: scope:[plots]  from main::@3
  (byte) plots::i#0 ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte) plots::i#2 ← phi( plots/(byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte~) plots::$0 ← (byte[]) plots_x#0 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (byte[]) plots_y#0 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  if((byte) plots::i#1<(byte) plots_cnt#0) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  to:@5
plot: scope:[plot]  from plots::@1
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#0 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#0
  *((byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#0 + (word) 8192
  if((byte*) init_screen::b#1!=(byte*~) init_screen::$0) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (byte*) SCREEN#0
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#0 + (word) 1024
  if((byte*) init_screen::c#1!=(byte*~) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Constant (const byte*) D011#0 = 53265
Constant (const byte) RST8#0 = 128
Constant (const byte) ECM#0 = 64
Constant (const byte) BMM#0 = 32
Constant (const byte) DEN#0 = 16
Constant (const byte) RSEL#0 = 8
Constant (const byte*) RASTER#0 = 53266
Constant (const byte*) D016#0 = 53270
Constant (const byte) MCM#0 = 16
Constant (const byte) CSEL#0 = 8
Constant (const byte*) D018#0 = 53272
Constant (const byte*) BGCOL#0 = 53280
Constant (const byte*) FGCOL#0 = 53281
Constant (const byte*) COLS#0 = 55296
Constant (const byte*) SCREEN#0 = 1024
Constant (const byte*) BITMAP#0 = 8192
Constant (const byte[]) plots_x#0 = { 60, 80, 110, 80, 60, 40, 10, 40 }
Constant (const byte[]) plots_y#0 = { 10, 40, 60, 80, 110, 80, 60, 40 }
Constant (const byte) plots_cnt#0 = 8
Constant (const byte) plots::i#0 = 0
Constant (const byte[]) plot_xlo#0 = 4096
Constant (const byte[]) plot_xhi#0 = 4352
Constant (const byte[]) plot_ylo#0 = 4608
Constant (const byte[]) plot_yhi#0 = 4864
Constant (const byte[]) plot_bit#0 = 5120
Constant (const byte*) plot::plotter_x#0 = 0
Constant (const byte*) plot::plotter_y#0 = 0
Constant (const byte) init_plot_tables::bit#0 = 128
Constant (const byte) init_plot_tables::x#0 = 0
Constant (const byte) init_plot_tables::bit#2 = 128
Constant (const byte*) init_plot_tables::yoffs#0 = 0
Constant (const byte) init_plot_tables::y#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @5
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (const byte) BMM#0 | (const byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (const byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((const byte*) D011#0) ← (byte~) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@2
main::@1: scope:[main]  from main::@7
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte~) main::$5 ← * (const byte*) RASTER#0
  if((byte~) main::$5!=(byte) 255) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (const byte*) BGCOL#0
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (const byte*) BGCOL#0
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
plots: scope:[plots]  from main::@3
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte) plots::i#2 ← phi( plots/(const byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  to:@5
plot: scope:[plot]  from plots::@1
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (const byte*) BITMAP#0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (const byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (const byte*) BITMAP#0 + (word) 8192
  if((byte*) init_screen::b#1!=(byte*~) init_screen::$0) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (const byte*) SCREEN#0
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (const byte*) SCREEN#0 + (word) 1024
  if((byte*) init_screen::c#1!=(byte*~) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Constant (const byte) main::$0 = BMM#0|DEN#0
Constant (const byte) init_plot_tables::$1 = >BITMAP#0
Constant (const byte*) init_screen::b#0 = BITMAP#0
Constant (const byte*) init_screen::$0 = BITMAP#0+8192
Constant (const byte*) init_screen::c#0 = SCREEN#0
Constant (const byte*) init_screen::$2 = SCREEN#0+1024
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @5
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$1 ← (const byte) main::$0 | (const byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((const byte*) D011#0) ← (byte~) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@2
main::@1: scope:[main]  from main::@7
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte~) main::$5 ← * (const byte*) RASTER#0
  if((byte~) main::$5!=(byte) 255) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (const byte*) BGCOL#0
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (const byte*) BGCOL#0
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
plots: scope:[plots]  from main::@3
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte) plots::i#2 ← phi( plots/(const byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  to:@5
plot: scope:[plot]  from plots::@1
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (const byte) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) init_screen::$0) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(const byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Constant (const byte) main::$1 = main::$0|RSEL#0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @5
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$2 ← (const byte) main::$1 | (byte) 3
  *((const byte*) D011#0) ← (byte~) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@2
main::@1: scope:[main]  from main::@7
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte~) main::$5 ← * (const byte*) RASTER#0
  if((byte~) main::$5!=(byte) 255) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (const byte*) BGCOL#0
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (const byte*) BGCOL#0
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
plots: scope:[plots]  from main::@3
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte) plots::i#2 ← phi( plots/(const byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  to:@5
plot: scope:[plot]  from plots::@1
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (const byte) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) init_screen::$0) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(const byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Constant (const byte) main::$2 = main::$1|3
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @5
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  *((const byte*) D011#0) ← (const byte) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@2
main::@1: scope:[main]  from main::@7
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@6
  (byte~) main::$5 ← * (const byte*) RASTER#0
  if((byte~) main::$5!=(byte) 255) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (const byte*) BGCOL#0
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (const byte*) BGCOL#0
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$11
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
plots: scope:[plots]  from main::@3
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte) plots::i#2 ← phi( plots/(const byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
@2: scope:[]  from @1
  to:@5
plot: scope:[plot]  from plots::@1
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (const byte) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) init_screen::$0) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(const byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Multiple usages for variable. Not optimizing sub-constant (byte) plots::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plots::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#0
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte*) init_plot_tables::yoffs#2
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@1
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Not culling empty block because it shares successor with its predecessor. (label) init_plot_tables::@5
Culled Empty Block (label) init_plot_tables::@6
Culled Empty Block (label) init_screen::@3
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  *((const byte*) D011#0) ← (const byte) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@5 main::@7
  (byte~) main::$5 ← * (const byte*) RASTER#0
  if((byte~) main::$5!=(byte) 255) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (const byte*) BGCOL#0
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (const byte*) BGCOL#0
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$11
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
plots: scope:[plots]  from main::@3
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte) plots::i#2 ← phi( plots/(const byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
plot: scope:[plot]  from plots::@1
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (const byte) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@3
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@2 init_plot_tables::@4
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@2/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@2/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) init_screen::$0) goto init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@1 init_screen::@2
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@1/(const byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

Not culling empty block because it shares successor with its predecessor. (label) init_plot_tables::@5
Not aliassing across scopes: plot::x#0 plots::$0
Not aliassing across scopes: plot::y#0 plots::$1
Multiple usages for variable. Not optimizing sub-constant (byte) plots::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plots::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#0
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte*) init_plot_tables::yoffs#2
Not culling empty block because it shares successor with its predecessor. (label) init_plot_tables::@5
Not aliassing across scopes: plot::x#0 plots::$0
Not aliassing across scopes: plot::y#0 plots::$1
Multiple usages for variable. Not optimizing sub-constant (byte) plots::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plots::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#0
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#0
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte*) init_plot_tables::yoffs#2
Inlining constant with var siblings (const byte) plots::i#0
Inlining constant with var siblings (const byte) plots::i#0
Inlining constant with var siblings (const byte*) plot::plotter_x#0
Inlining constant with var siblings (const byte*) plot::plotter_x#0
Inlining constant with var siblings (const byte*) plot::plotter_y#0
Inlining constant with var siblings (const byte*) plot::plotter_y#0
Inlining constant with var siblings (const byte) init_plot_tables::bit#0
Inlining constant with var siblings (const byte) init_plot_tables::bit#0
Inlining constant with var siblings (const byte) init_plot_tables::bit#0
Inlining constant with var siblings (const byte) init_plot_tables::x#0
Inlining constant with var siblings (const byte) init_plot_tables::x#0
Inlining constant with var siblings (const byte) init_plot_tables::bit#2
Inlining constant with var siblings (const byte) init_plot_tables::bit#2
Inlining constant with var siblings (const byte) init_plot_tables::bit#2
Inlining constant with var siblings (const byte*) init_plot_tables::yoffs#0
Inlining constant with var siblings (const byte*) init_plot_tables::yoffs#0
Inlining constant with var siblings (const byte*) init_plot_tables::yoffs#0
Inlining constant with var siblings (const byte) init_plot_tables::y#0
Inlining constant with var siblings (const byte) init_plot_tables::y#0
Inlining constant with var siblings (const byte*) init_screen::b#0
Inlining constant with var siblings (const byte*) init_screen::b#0
Inlining constant with var siblings (const byte*) init_screen::c#0
Inlining constant with var siblings (const byte*) init_screen::c#0
Constant inlined init_plot_tables::y#0 = (byte) 0
Constant inlined init_plot_tables::x#0 = (byte) 0
Constant inlined init_plot_tables::yoffs#0 = (byte) 0
Constant inlined plots::i#0 = (byte) 0
Constant inlined main::$1 = (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0
Constant inlined init_plot_tables::$1 = >(const byte*) BITMAP#0
Constant inlined main::$2 = (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3
Constant inlined main::$0 = (const byte) BMM#0|(const byte) DEN#0
Constant inlined plot::plotter_y#0 = (byte) 0
Constant inlined init_screen::$2 = (const byte*) SCREEN#0+(word) 1024
Constant inlined init_screen::c#0 = (const byte*) SCREEN#0
Constant inlined init_plot_tables::bit#2 = (byte) 128
Constant inlined init_plot_tables::bit#0 = (byte) 128
Constant inlined plot::plotter_x#0 = (byte) 0
Constant inlined init_screen::$0 = (const byte*) BITMAP#0+(word) 8192
Constant inlined init_screen::b#0 = (const byte*) BITMAP#0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@5 main::@7
  (byte~) main::$5 ← * (const byte*) RASTER#0
  if((byte~) main::$5!=(byte) 255) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (const byte*) BGCOL#0
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (const byte*) BGCOL#0
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$11
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
plots: scope:[plots]  from main::@3
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte) plots::i#2 ← phi( plots/(byte) 0 plots::@3/(byte) plots::i#1 )
  (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
plot: scope:[plot]  from plots::@1
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) 128 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) 0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) 128 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@3
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@2 init_plot_tables::@4
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@2/(byte) 0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@2/(byte) 0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) BITMAP#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@1 init_screen::@2
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@1/(const byte*) SCREEN#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5

FINAL SYMBOL TABLE
(label) @5
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 = (word) 53280
(byte*) BITMAP
(const byte*) BITMAP#0 = (word) 8192
(byte) BMM
(const byte) BMM#0 = (byte) 32
(byte*) COLS
(const byte*) COLS#0 = (word) 55296
(byte) CSEL
(const byte) CSEL#0 = (byte) 8
(byte*) D011
(const byte*) D011#0 = (word) 53265
(byte*) D016
(const byte*) D016#0 = (word) 53270
(byte*) D018
(const byte*) D018#0 = (word) 53272
(byte) DEN
(const byte) DEN#0 = (byte) 16
(byte) ECM
(const byte) ECM#0 = (byte) 64
(byte*) FGCOL
(const byte*) FGCOL#0 = (word) 53281
(byte) MCM
(const byte) MCM#0 = (byte) 16
(byte*) RASTER
(const byte*) RASTER#0 = (word) 53266
(byte) RSEL
(const byte) RSEL#0 = (byte) 8
(byte) RST8
(const byte) RST8#0 = (byte) 128
(byte*) SCREEN
(const byte*) SCREEN#0 = (word) 1024
(void()) init_plot_tables()
(byte~) init_plot_tables::$0
(byte~) init_plot_tables::$10
(byte~) init_plot_tables::$6
(byte~) init_plot_tables::$7
(byte~) init_plot_tables::$8
(byte~) init_plot_tables::$9
(label) init_plot_tables::@1
(label) init_plot_tables::@2
(label) init_plot_tables::@3
(label) init_plot_tables::@4
(label) init_plot_tables::@5
(label) init_plot_tables::@7
(label) init_plot_tables::@return
(byte) init_plot_tables::bit
(byte) init_plot_tables::bit#1
(byte) init_plot_tables::bit#3
(byte) init_plot_tables::bit#4
(byte) init_plot_tables::x
(byte) init_plot_tables::x#1
(byte) init_plot_tables::x#2
(byte) init_plot_tables::y
(byte) init_plot_tables::y#1
(byte) init_plot_tables::y#2
(byte*) init_plot_tables::yoffs
(byte*) init_plot_tables::yoffs#1
(byte*) init_plot_tables::yoffs#2
(byte*) init_plot_tables::yoffs#4
(void()) init_screen()
(label) init_screen::@1
(label) init_screen::@2
(label) init_screen::@return
(byte*) init_screen::b
(byte*) init_screen::b#1
(byte*) init_screen::b#2
(byte*) init_screen::c
(byte*) init_screen::c#1
(byte*) init_screen::c#2
(void()) main()
(byte~) main::$10
(byte~) main::$11
(byte~) main::$5
(byte~) main::$7
(byte~) main::$8
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@7
(label) main::@return
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$0
(byte~) plot::$1
(byte~) plot::$2
(byte~) plot::$3
(byte~) plot::$5
(byte~) plot::$6
(byte~) plot::$7
(label) plot::@return
(byte*) plot::plotter
(byte*) plot::plotter#0
(byte*) plot::plotter_x
(byte*) plot::plotter_x#1
(byte*) plot::plotter_x#2
(byte*) plot::plotter_y
(byte*) plot::plotter_y#1
(byte*) plot::plotter_y#2
(byte) plot::x
(byte) plot::x#0
(byte) plot::y
(byte) plot::y#0
(byte[]) plot_bit
(const byte[]) plot_bit#0 = (word) 5120
(byte[]) plot_xhi
(const byte[]) plot_xhi#0 = (word) 4352
(byte[]) plot_xlo
(const byte[]) plot_xlo#0 = (word) 4096
(byte[]) plot_yhi
(const byte[]) plot_yhi#0 = (word) 4864
(byte[]) plot_ylo
(const byte[]) plot_ylo#0 = (word) 4608
(void()) plots()
(byte~) plots::$0
(byte~) plots::$1
(label) plots::@1
(label) plots::@3
(label) plots::@return
(byte) plots::i
(byte) plots::i#1
(byte) plots::i#2
(byte) plots_cnt
(const byte) plots_cnt#0 = (byte) 8
(byte[]) plots_x
(const byte[]) plots_x#0 = { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
(byte[]) plots_y
(const byte[]) plots_y#0 = { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }

Block Sequence Planned @begin @5 @end main main::@5 main::@2 main::@3 main::@7 main::@return plots plots::@1 plots::@3 plots::@return plot plot::@return init_plot_tables init_plot_tables::@1 init_plot_tables::@5 init_plot_tables::@2 init_plot_tables::@3 init_plot_tables::@7 init_plot_tables::@4 init_plot_tables::@return init_screen init_screen::@1 init_screen::@2 init_screen::@return 
Added new block during phi lifting plots::@4(between plots::@3 and plots::@1)
Added new block during phi lifting init_plot_tables::@9(between init_plot_tables::@2 and init_plot_tables::@1)
Added new block during phi lifting init_plot_tables::@10(between init_plot_tables::@1 and init_plot_tables::@2)
Added new block during phi lifting init_plot_tables::@11(between init_plot_tables::@4 and init_plot_tables::@3)
Added new block during phi lifting init_plot_tables::@12(between init_plot_tables::@3 and init_plot_tables::@4)
Added new block during phi lifting init_screen::@5(between init_screen::@1 and init_screen::@1)
Added new block during phi lifting init_screen::@6(between init_screen::@2 and init_screen::@2)
Block Sequence Planned @begin @5 @end main main::@5 main::@2 main::@3 main::@7 main::@return plots plots::@1 plots::@3 plots::@return plots::@4 plot plot::@return init_plot_tables init_plot_tables::@1 init_plot_tables::@5 init_plot_tables::@2 init_plot_tables::@3 init_plot_tables::@7 init_plot_tables::@4 init_plot_tables::@return init_plot_tables::@11 init_plot_tables::@12 init_plot_tables::@9 init_plot_tables::@10 init_screen init_screen::@1 init_screen::@2 init_screen::@return init_screen::@6 init_screen::@5 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@5
@5: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @5
main: scope:[main]  from @5
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@5
main::@5: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@5 main::@7
  (byte~) main::$5 ← * (const byte*) RASTER#0
  if((byte~) main::$5!=(byte) 255) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$7 ← * (const byte*) BGCOL#0
  (byte~) main::$8 ← (byte~) main::$7 + (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$8
  call plots param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte~) main::$10 ← * (const byte*) BGCOL#0
  (byte~) main::$11 ← (byte~) main::$10 - (byte) 1
  *((const byte*) BGCOL#0) ← (byte~) main::$11
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
plots: scope:[plots]  from main::@3
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@4
  (byte) plots::i#2 ← phi( plots/(byte) 0 plots::@4/(byte~) plots::i#4 )
  (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2
  (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2
  (byte) plot::x#0 ← (byte~) plots::$0
  (byte) plot::y#0 ← (byte~) plots::$1
  call plot param-assignment
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  (byte) plots::i#1 ← ++ (byte) plots::i#2
  if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@4
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  return 
  to:@return
plots::@4: scope:[plots]  from plots::@3
  (byte~) plots::i#4 ← (byte) plots::i#1
  to:plots::@1
plot: scope:[plot]  from plots::@1
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@9
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) 128 init_plot_tables::@9/(byte~) init_plot_tables::bit#5 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) 0 init_plot_tables::@9/(byte~) init_plot_tables::x#5 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10
  to:init_plot_tables::@5
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@10 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@10/(byte~) init_plot_tables::bit#6 init_plot_tables::@5/(byte) 128 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@9
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@11 init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@11/(byte*~) init_plot_tables::yoffs#5 init_plot_tables::@2/(byte) 0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@11/(byte~) init_plot_tables::y#5 init_plot_tables::@2/(byte) 0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@12
  to:init_plot_tables::@7
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  (byte*~) init_plot_tables::yoffs#7 ← (byte*) init_plot_tables::yoffs#1
  to:init_plot_tables::@4
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@12 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@12/(byte*~) init_plot_tables::yoffs#6 init_plot_tables::@7/(byte*~) init_plot_tables::yoffs#7 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@11
  to:init_plot_tables::@return
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_plot_tables::@11: scope:[init_plot_tables]  from init_plot_tables::@4
  (byte~) init_plot_tables::y#5 ← (byte) init_plot_tables::y#1
  (byte*~) init_plot_tables::yoffs#5 ← (byte*) init_plot_tables::yoffs#4
  to:init_plot_tables::@3
init_plot_tables::@12: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*~) init_plot_tables::yoffs#6 ← (byte*) init_plot_tables::yoffs#2
  to:init_plot_tables::@4
init_plot_tables::@9: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte~) init_plot_tables::x#5 ← (byte) init_plot_tables::x#1
  (byte~) init_plot_tables::bit#5 ← (byte) init_plot_tables::bit#4
  to:init_plot_tables::@1
init_plot_tables::@10: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte~) init_plot_tables::bit#6 ← (byte) init_plot_tables::bit#1
  to:init_plot_tables::@2
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@5
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) BITMAP#0 init_screen::@5/(byte*~) init_screen::b#3 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@5
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@1 init_screen::@6
  (byte*) init_screen::c#2 ← phi( init_screen::@6/(byte*~) init_screen::c#3 init_screen::@1/(const byte*) SCREEN#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@6
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
init_screen::@6: scope:[init_screen]  from init_screen::@2
  (byte*~) init_screen::c#3 ← (byte*) init_screen::c#1
  to:init_screen::@2
init_screen::@5: scope:[init_screen]  from init_screen::@1
  (byte*~) init_screen::b#3 ← (byte*) init_screen::b#1
  to:init_screen::@1

Adding NOP phi() at start of plots
Adding NOP phi() at start of init_plot_tables
Adding NOP phi() at start of init_screen
CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 5:init_screen 6:init_plot_tables 12:plots 
Calls in [plots] to 24:plot 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@5
@5: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @5
main: scope:[main]  from @5
  [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ]
  [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ]
  [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ]
  [4] *((const byte*) D018#0) ← (byte) 24 [ ]
  [5] call init_screen param-assignment [ ]
  to:main::@5
main::@5: scope:[main]  from main
  [6] call init_plot_tables param-assignment [ ]
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@5 main::@7
  [7] (byte~) main::$5 ← * (const byte*) RASTER#0 [ main::$5 ]
  [8] if((byte~) main::$5!=(byte) 255) goto main::@2 [ ]
  to:main::@3
main::@3: scope:[main]  from main::@2
  [9] (byte~) main::$7 ← * (const byte*) BGCOL#0 [ main::$7 ]
  [10] (byte~) main::$8 ← (byte~) main::$7 + (byte) 1 [ main::$8 ]
  [11] *((const byte*) BGCOL#0) ← (byte~) main::$8 [ ]
  [12] call plots param-assignment [ ]
  to:main::@7
main::@7: scope:[main]  from main::@3
  [13] (byte~) main::$10 ← * (const byte*) BGCOL#0 [ main::$10 ]
  [14] (byte~) main::$11 ← (byte~) main::$10 - (byte) 1 [ main::$11 ]
  [15] *((const byte*) BGCOL#0) ← (byte~) main::$11 [ ]
  [16] if(true) goto main::@2 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@7
  [17] return  [ ]
  to:@return
plots: scope:[plots]  from main::@3
  [18] phi() [ ]
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@4
  [19] (byte) plots::i#2 ← phi( plots/(byte) 0 plots::@4/(byte~) plots::i#4 ) [ plots::i#2 ]
  [20] (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 ]
  [21] (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 plots::$1 ]
  [22] (byte) plot::x#0 ← (byte~) plots::$0 [ plots::i#2 plots::$1 plot::x#0 ]
  [23] (byte) plot::y#0 ← (byte~) plots::$1 [ plots::i#2 plot::x#0 plot::y#0 ]
  [24] call plot param-assignment [ plots::i#2 ]
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  [25] (byte) plots::i#1 ← ++ (byte) plots::i#2 [ plots::i#1 ]
  [26] if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@4 [ plots::i#1 ]
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  [27] return  [ ]
  to:@return
plots::@4: scope:[plots]  from plots::@3
  [28] (byte~) plots::i#4 ← (byte) plots::i#1 [ plots::i#4 ]
  to:plots::@1
plot: scope:[plot]  from plots::@1
  [29] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::$0 ]
  [30] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#0 plot::y#0 plot::plotter_x#1 ]
  [31] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::plotter_x#1 plot::$1 ]
  [32] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#0 plot::y#0 plot::plotter_x#2 ]
  [33] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::$2 ]
  [34] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::plotter_y#1 ]
  [35] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ]
  [36] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ]
  [37] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ]
  [38] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#0 plot::plotter#0 plot::$5 ]
  [39] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0 [ plot::plotter#0 plot::$5 plot::$6 ]
  [40] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ]
  [41] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ]
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [42] return  [ ]
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  [43] phi() [ ]
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@9
  [44] (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) 128 init_plot_tables::@9/(byte~) init_plot_tables::bit#5 ) [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [44] (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) 0 init_plot_tables::@9/(byte~) init_plot_tables::x#5 ) [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [45] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ]
  [46] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [47] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [48] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [49] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ]
  [50] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 init_plot_tables::bit#1 ]
  to:init_plot_tables::@5
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@10 init_plot_tables::@5
  [51] (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@10/(byte~) init_plot_tables::bit#6 init_plot_tables::@5/(byte) 128 ) [ init_plot_tables::x#2 init_plot_tables::bit#4 ]
  [52] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::bit#4 init_plot_tables::x#1 ]
  [53] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@9 [ init_plot_tables::bit#4 init_plot_tables::x#1 ]
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@11 init_plot_tables::@2
  [54] (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@11/(byte*~) init_plot_tables::yoffs#5 init_plot_tables::@2/(byte) 0 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [54] (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@11/(byte~) init_plot_tables::y#5 init_plot_tables::@2/(byte) 0 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [55] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ]
  [56] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ]
  [57] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ]
  [58] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [59] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ]
  [60] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [61] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ]
  [62] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@12 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  to:init_plot_tables::@7
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  [63] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ]
  [64] (byte*~) init_plot_tables::yoffs#7 ← (byte*) init_plot_tables::yoffs#1 [ init_plot_tables::y#2 init_plot_tables::yoffs#7 ]
  to:init_plot_tables::@4
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@12 init_plot_tables::@7
  [65] (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@12/(byte*~) init_plot_tables::yoffs#6 init_plot_tables::@7/(byte*~) init_plot_tables::yoffs#7 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#4 ]
  [66] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::yoffs#4 init_plot_tables::y#1 ]
  [67] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@11 [ init_plot_tables::yoffs#4 init_plot_tables::y#1 ]
  to:init_plot_tables::@return
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  [68] return  [ ]
  to:@return
init_plot_tables::@11: scope:[init_plot_tables]  from init_plot_tables::@4
  [69] (byte~) init_plot_tables::y#5 ← (byte) init_plot_tables::y#1 [ init_plot_tables::y#5 init_plot_tables::yoffs#4 ]
  [70] (byte*~) init_plot_tables::yoffs#5 ← (byte*) init_plot_tables::yoffs#4 [ init_plot_tables::y#5 init_plot_tables::yoffs#5 ]
  to:init_plot_tables::@3
init_plot_tables::@12: scope:[init_plot_tables]  from init_plot_tables::@3
  [71] (byte*~) init_plot_tables::yoffs#6 ← (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#6 ]
  to:init_plot_tables::@4
init_plot_tables::@9: scope:[init_plot_tables]  from init_plot_tables::@2
  [72] (byte~) init_plot_tables::x#5 ← (byte) init_plot_tables::x#1 [ init_plot_tables::x#5 init_plot_tables::bit#4 ]
  [73] (byte~) init_plot_tables::bit#5 ← (byte) init_plot_tables::bit#4 [ init_plot_tables::x#5 init_plot_tables::bit#5 ]
  to:init_plot_tables::@1
init_plot_tables::@10: scope:[init_plot_tables]  from init_plot_tables::@1
  [74] (byte~) init_plot_tables::bit#6 ← (byte) init_plot_tables::bit#1 [ init_plot_tables::x#2 init_plot_tables::bit#6 ]
  to:init_plot_tables::@2
init_screen: scope:[init_screen]  from main
  [75] phi() [ ]
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@5
  [76] (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) BITMAP#0 init_screen::@5/(byte*~) init_screen::b#3 ) [ init_screen::b#2 ]
  [77] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ]
  [78] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ]
  [79] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@5 [ init_screen::b#1 ]
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@1 init_screen::@6
  [80] (byte*) init_screen::c#2 ← phi( init_screen::@6/(byte*~) init_screen::c#3 init_screen::@1/(const byte*) SCREEN#0 ) [ init_screen::c#2 ]
  [81] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ]
  [82] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ]
  [83] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@6 [ init_screen::c#1 ]
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  [84] return  [ ]
  to:@return
init_screen::@6: scope:[init_screen]  from init_screen::@2
  [85] (byte*~) init_screen::c#3 ← (byte*) init_screen::c#1 [ init_screen::c#3 ]
  to:init_screen::@2
init_screen::@5: scope:[init_screen]  from init_screen::@1
  [86] (byte*~) init_screen::b#3 ← (byte*) init_screen::b#1 [ init_screen::b#3 ]
  to:init_screen::@1

Created 9 initial phi equivalence classes
Coalesced [28] plots::i#4 ← plots::i#1
Coalesced [64] init_plot_tables::yoffs#7 ← init_plot_tables::yoffs#1
Coalesced [69] init_plot_tables::y#5 ← init_plot_tables::y#1
Coalesced [70] init_plot_tables::yoffs#5 ← init_plot_tables::yoffs#4
Coalesced (already) [71] init_plot_tables::yoffs#6 ← init_plot_tables::yoffs#2
Coalesced [72] init_plot_tables::x#5 ← init_plot_tables::x#1
Coalesced [73] init_plot_tables::bit#5 ← init_plot_tables::bit#4
Coalesced [74] init_plot_tables::bit#6 ← init_plot_tables::bit#1
Coalesced [85] init_screen::c#3 ← init_screen::c#1
Coalesced [86] init_screen::b#3 ← init_screen::b#1
Coalesced down to 7 phi equivalence classes
Culled Empty Block (label) plots::@4
Culled Empty Block (label) init_plot_tables::@5
Culled Empty Block (label) init_plot_tables::@11
Culled Empty Block (label) init_plot_tables::@12
Culled Empty Block (label) init_plot_tables::@9
Not culling empty block because it shares successor with its predecessor. (label) init_plot_tables::@10
Culled Empty Block (label) init_screen::@6
Culled Empty Block (label) init_screen::@5
Block Sequence Planned @begin @5 @end main main::@5 main::@2 main::@3 main::@7 main::@return plots plots::@1 plots::@3 plots::@return plot plot::@return init_plot_tables init_plot_tables::@1 init_plot_tables::@2 init_plot_tables::@3 init_plot_tables::@7 init_plot_tables::@4 init_plot_tables::@return init_plot_tables::@10 init_screen init_screen::@1 init_screen::@2 init_screen::@return 
Adding NOP phi() at start of plots
Adding NOP phi() at start of init_plot_tables
Adding NOP phi() at start of init_screen
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@5
@5: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @5
main: scope:[main]  from @5
  [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ]
  [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ]
  [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ]
  [4] *((const byte*) D018#0) ← (byte) 24 [ ]
  [5] call init_screen param-assignment [ ]
  to:main::@5
main::@5: scope:[main]  from main
  [6] call init_plot_tables param-assignment [ ]
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@5 main::@7
  [7] (byte~) main::$5 ← * (const byte*) RASTER#0 [ main::$5 ]
  [8] if((byte~) main::$5!=(byte) 255) goto main::@2 [ ]
  to:main::@3
main::@3: scope:[main]  from main::@2
  [9] (byte~) main::$7 ← * (const byte*) BGCOL#0 [ main::$7 ]
  [10] (byte~) main::$8 ← (byte~) main::$7 + (byte) 1 [ main::$8 ]
  [11] *((const byte*) BGCOL#0) ← (byte~) main::$8 [ ]
  [12] call plots param-assignment [ ]
  to:main::@7
main::@7: scope:[main]  from main::@3
  [13] (byte~) main::$10 ← * (const byte*) BGCOL#0 [ main::$10 ]
  [14] (byte~) main::$11 ← (byte~) main::$10 - (byte) 1 [ main::$11 ]
  [15] *((const byte*) BGCOL#0) ← (byte~) main::$11 [ ]
  [16] if(true) goto main::@2 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@7
  [17] return  [ ]
  to:@return
plots: scope:[plots]  from main::@3
  [18] phi() [ ]
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  [19] (byte) plots::i#2 ← phi( plots/(byte) 0 plots::@3/(byte) plots::i#1 ) [ plots::i#2 ]
  [20] (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 ]
  [21] (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 plots::$1 ]
  [22] (byte) plot::x#0 ← (byte~) plots::$0 [ plots::i#2 plots::$1 plot::x#0 ]
  [23] (byte) plot::y#0 ← (byte~) plots::$1 [ plots::i#2 plot::x#0 plot::y#0 ]
  [24] call plot param-assignment [ plots::i#2 ]
  to:plots::@3
plots::@3: scope:[plots]  from plots::@1
  [25] (byte) plots::i#1 ← ++ (byte) plots::i#2 [ plots::i#1 ]
  [26] if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1 [ plots::i#1 ]
  to:plots::@return
plots::@return: scope:[plots]  from plots::@3
  [27] return  [ ]
  to:@return
plot: scope:[plot]  from plots::@1
  [28] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::$0 ]
  [29] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#0 plot::y#0 plot::plotter_x#1 ]
  [30] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::plotter_x#1 plot::$1 ]
  [31] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#0 plot::y#0 plot::plotter_x#2 ]
  [32] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::$2 ]
  [33] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::plotter_y#1 ]
  [34] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ]
  [35] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ]
  [36] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ]
  [37] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#0 plot::plotter#0 plot::$5 ]
  [38] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0 [ plot::plotter#0 plot::$5 plot::$6 ]
  [39] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ]
  [40] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ]
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [41] return  [ ]
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@5
  [42] phi() [ ]
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  [43] (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) 128 init_plot_tables::@2/(byte) init_plot_tables::bit#4 ) [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [43] (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) 0 init_plot_tables::@2/(byte) init_plot_tables::x#1 ) [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [44] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ]
  [45] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [46] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [47] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [48] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ]
  [49] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ]
  to:init_plot_tables::@2
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@10
  [50] (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@10/(byte) init_plot_tables::bit#1 init_plot_tables::@1/(byte) 128 ) [ init_plot_tables::x#2 init_plot_tables::bit#4 ]
  [51] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ]
  [52] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ]
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@2 init_plot_tables::@4
  [53] (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@2/(byte) 0 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [53] (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@2/(byte) 0 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [54] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ]
  [55] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ]
  [56] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ]
  [57] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [58] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ]
  [59] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [60] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ]
  [61] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  to:init_plot_tables::@7
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  [62] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ]
  to:init_plot_tables::@4
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  [63] (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#4 ]
  [64] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ]
  [65] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ]
  to:init_plot_tables::@return
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  [66] return  [ ]
  to:@return
init_plot_tables::@10: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_screen: scope:[init_screen]  from main
  [67] phi() [ ]
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  [68] (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) BITMAP#0 init_screen::@1/(byte*) init_screen::b#1 ) [ init_screen::b#2 ]
  [69] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ]
  [70] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ]
  [71] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ]
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@1 init_screen::@2
  [72] (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@1/(const byte*) SCREEN#0 ) [ init_screen::c#2 ]
  [73] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ]
  [74] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ]
  [75] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ]
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  [76] return  [ ]
  to:@return

DOMINATORS
@begin dominated by  @begin 
@5 dominated by  @5 @begin 
@end dominated by  @5 @begin @end 
main dominated by  @5 @begin main 
main::@5 dominated by  @5 @begin main::@5 main 
main::@2 dominated by  @5 @begin main::@2 main::@5 main 
main::@3 dominated by  @5 @begin main::@2 main::@3 main::@5 main 
main::@7 dominated by  @5 @begin main::@2 main::@3 main::@5 main::@7 main 
main::@return dominated by  @5 @begin main::@2 main::@3 main::@5 main::@7 main main::@return 
plots dominated by  @5 @begin main::@2 main::@3 main::@5 main plots 
plots::@1 dominated by  @5 @begin main::@2 main::@3 main::@5 plots::@1 main plots 
plots::@3 dominated by  @5 @begin main::@2 main::@3 main::@5 plots::@3 plots::@1 main plots 
plots::@return dominated by  @5 @begin main::@2 main::@3 main::@5 plots::@3 plots::@1 plots::@return main plots 
plot dominated by  @5 @begin main::@2 main::@3 plot main::@5 plots::@1 main plots 
plot::@return dominated by  @5 @begin main::@2 main::@3 main::@5 plot plots::@1 plot::@return main plots 
init_plot_tables dominated by  @5 init_plot_tables @begin main::@5 main 
init_plot_tables::@1 dominated by  @5 init_plot_tables::@1 @begin init_plot_tables main::@5 main 
init_plot_tables::@2 dominated by  init_plot_tables::@2 @5 @begin init_plot_tables init_plot_tables::@1 main::@5 main 
init_plot_tables::@3 dominated by  init_plot_tables::@3 @5 init_plot_tables::@2 @begin init_plot_tables init_plot_tables::@1 main::@5 main 
init_plot_tables::@7 dominated by  init_plot_tables::@3 @5 init_plot_tables::@2 @begin init_plot_tables init_plot_tables::@1 init_plot_tables::@7 main::@5 main 
init_plot_tables::@4 dominated by  init_plot_tables::@3 @5 init_plot_tables::@2 @begin init_plot_tables init_plot_tables::@1 init_plot_tables::@4 main::@5 main 
init_plot_tables::@return dominated by  init_plot_tables::@3 @5 init_plot_tables::@2 @begin init_plot_tables init_plot_tables::@1 init_plot_tables::@return init_plot_tables::@4 main::@5 main 
init_plot_tables::@10 dominated by  init_plot_tables::@10 @5 @begin init_plot_tables init_plot_tables::@1 main::@5 main 
init_screen dominated by  @5 @begin init_screen main 
init_screen::@1 dominated by  init_screen::@1 @5 @begin init_screen main 
init_screen::@2 dominated by  init_screen::@1 init_screen::@2 @5 @begin init_screen main 
init_screen::@return dominated by  init_screen::@1 init_screen::@2 @5 @begin init_screen init_screen::@return main 

Found back edge: Loop head: main::@2 tails: main::@2 blocks: null
Found back edge: Loop head: main::@2 tails: main::@7 blocks: null
Found back edge: Loop head: plots::@1 tails: plots::@3 blocks: null
Found back edge: Loop head: init_plot_tables::@1 tails: init_plot_tables::@2 blocks: null
Found back edge: Loop head: init_plot_tables::@3 tails: init_plot_tables::@4 blocks: null
Found back edge: Loop head: init_screen::@1 tails: init_screen::@1 blocks: null
Found back edge: Loop head: init_screen::@2 tails: init_screen::@2 blocks: null
Populated: Loop head: main::@2 tails: main::@2 blocks: main::@2 
Populated: Loop head: main::@2 tails: main::@7 blocks: main::@7 main::@3 main::@2 
Populated: Loop head: plots::@1 tails: plots::@3 blocks: plots::@3 plots::@1 
Populated: Loop head: init_plot_tables::@1 tails: init_plot_tables::@2 blocks: init_plot_tables::@2 init_plot_tables::@1 init_plot_tables::@10 
Populated: Loop head: init_plot_tables::@3 tails: init_plot_tables::@4 blocks: init_plot_tables::@4 init_plot_tables::@3 init_plot_tables::@7 
Populated: Loop head: init_screen::@1 tails: init_screen::@1 blocks: init_screen::@1 
Populated: Loop head: init_screen::@2 tails: init_screen::@2 blocks: init_screen::@2 
NATURAL LOOPS
Loop head: main::@2 tails: main::@2 blocks: main::@2 
Loop head: main::@2 tails: main::@7 blocks: main::@7 main::@3 main::@2 
Loop head: plots::@1 tails: plots::@3 blocks: plots::@3 plots::@1 
Loop head: init_plot_tables::@1 tails: init_plot_tables::@2 blocks: init_plot_tables::@2 init_plot_tables::@1 init_plot_tables::@10 
Loop head: init_plot_tables::@3 tails: init_plot_tables::@4 blocks: init_plot_tables::@4 init_plot_tables::@3 init_plot_tables::@7 
Loop head: init_screen::@1 tails: init_screen::@1 blocks: init_screen::@1 
Loop head: init_screen::@2 tails: init_screen::@2 blocks: init_screen::@2 

Found 0 loops in scope []
Found 2 loops in scope [main]
  Loop head: main::@2 tails: main::@2 blocks: main::@2 
  Loop head: main::@2 tails: main::@7 blocks: main::@7 main::@3 main::@2 
Found 2 loops in scope [init_screen]
  Loop head: init_screen::@1 tails: init_screen::@1 blocks: init_screen::@1 
  Loop head: init_screen::@2 tails: init_screen::@2 blocks: init_screen::@2 
Found 2 loops in scope [init_plot_tables]
  Loop head: init_plot_tables::@1 tails: init_plot_tables::@2 blocks: init_plot_tables::@2 init_plot_tables::@1 init_plot_tables::@10 
  Loop head: init_plot_tables::@3 tails: init_plot_tables::@4 blocks: init_plot_tables::@4 init_plot_tables::@3 init_plot_tables::@7 
Found 1 loops in scope [plots]
  Loop head: plots::@1 tails: plots::@3 blocks: plots::@3 plots::@1 
Found 0 loops in scope [plot]
NATURAL LOOPS WITH DEPTH
Loop head: main::@2 tails: main::@2 blocks: main::@2  depth: 2
Loop head: main::@2 tails: main::@7 blocks: main::@7 main::@3 main::@2  depth: 1
Loop head: plots::@1 tails: plots::@3 blocks: plots::@3 plots::@1  depth: 2
Loop head: init_plot_tables::@1 tails: init_plot_tables::@2 blocks: init_plot_tables::@2 init_plot_tables::@1 init_plot_tables::@10  depth: 1
Loop head: init_plot_tables::@3 tails: init_plot_tables::@4 blocks: init_plot_tables::@4 init_plot_tables::@3 init_plot_tables::@7  depth: 1
Loop head: init_screen::@1 tails: init_screen::@1 blocks: init_screen::@1  depth: 1
Loop head: init_screen::@2 tails: init_screen::@2 blocks: init_screen::@2  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BITMAP
(byte) BMM
(byte*) COLS
(byte) CSEL
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DEN
(byte) ECM
(byte*) FGCOL
(byte) MCM
(byte*) RASTER
(byte) RSEL
(byte) RST8
(byte*) SCREEN
(void()) init_plot_tables()
(byte~) init_plot_tables::$0 22.0
(byte~) init_plot_tables::$10 22.0
(byte~) init_plot_tables::$6 11.0
(byte~) init_plot_tables::$7 22.0
(byte~) init_plot_tables::$8 22.0
(byte~) init_plot_tables::$9 22.0
(byte) init_plot_tables::bit
(byte) init_plot_tables::bit#1 33.0
(byte) init_plot_tables::bit#3 6.6000000000000005
(byte) init_plot_tables::bit#4 7.333333333333333
(byte) init_plot_tables::x
(byte) init_plot_tables::x#1 16.5
(byte) init_plot_tables::x#2 8.25
(byte) init_plot_tables::y
(byte) init_plot_tables::y#1 16.5
(byte) init_plot_tables::y#2 6.0
(byte*) init_plot_tables::yoffs
(byte*) init_plot_tables::yoffs#1 22.0
(byte*) init_plot_tables::yoffs#2 6.111111111111112
(byte*) init_plot_tables::yoffs#4 11.0
(void()) init_screen()
(byte*) init_screen::b
(byte*) init_screen::b#1 16.5
(byte*) init_screen::b#2 16.5
(byte*) init_screen::c
(byte*) init_screen::c#1 16.5
(byte*) init_screen::c#2 16.5
(void()) main()
(byte~) main::$10 22.0
(byte~) main::$11 22.0
(byte~) main::$5 202.0
(byte~) main::$7 22.0
(byte~) main::$8 22.0
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$0 4.0
(byte~) plot::$1 4.0
(byte~) plot::$2 4.0
(byte~) plot::$3 4.0
(byte~) plot::$5 2.0
(byte~) plot::$6 4.0
(byte~) plot::$7 4.0
(byte*) plot::plotter
(byte*) plot::plotter#0 1.5
(byte*) plot::plotter_x
(byte*) plot::plotter_x#1 2.0
(byte*) plot::plotter_x#2 0.8
(byte*) plot::plotter_y
(byte*) plot::plotter_y#1 2.0
(byte*) plot::plotter_y#2 4.0
(byte) plot::x
(byte) plot::x#0 8.916666666666664
(byte) plot::y
(byte) plot::y#0 15.000000000000002
(byte[]) plot_bit
(byte[]) plot_xhi
(byte[]) plot_xlo
(byte[]) plot_yhi
(byte[]) plot_ylo
(void()) plots()
(byte~) plots::$0 101.0
(byte~) plots::$1 101.0
(byte) plots::i
(byte) plots::i#1 151.5
(byte) plots::i#2 67.33333333333333
(byte) plots_cnt
(byte[]) plots_x
(byte[]) plots_y

Initial phi equivalence classes
[ plots::i#2 plots::i#1 ]
[ init_plot_tables::x#2 init_plot_tables::x#1 ]
[ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ]
[ init_plot_tables::y#2 init_plot_tables::y#1 ]
[ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ]
[ init_screen::b#2 init_screen::b#1 ]
[ init_screen::c#2 init_screen::c#1 ]
Added variable main::$5 to zero page equivalence class [ main::$5 ]
Added variable main::$7 to zero page equivalence class [ main::$7 ]
Added variable main::$8 to zero page equivalence class [ main::$8 ]
Added variable main::$10 to zero page equivalence class [ main::$10 ]
Added variable main::$11 to zero page equivalence class [ main::$11 ]
Added variable plots::$0 to zero page equivalence class [ plots::$0 ]
Added variable plots::$1 to zero page equivalence class [ plots::$1 ]
Added variable plot::x#0 to zero page equivalence class [ plot::x#0 ]
Added variable plot::y#0 to zero page equivalence class [ plot::y#0 ]
Added variable plot::$0 to zero page equivalence class [ plot::$0 ]
Added variable plot::plotter_x#1 to zero page equivalence class [ plot::plotter_x#1 ]
Added variable plot::$1 to zero page equivalence class [ plot::$1 ]
Added variable plot::plotter_x#2 to zero page equivalence class [ plot::plotter_x#2 ]
Added variable plot::$2 to zero page equivalence class [ plot::$2 ]
Added variable plot::plotter_y#1 to zero page equivalence class [ plot::plotter_y#1 ]
Added variable plot::$3 to zero page equivalence class [ plot::$3 ]
Added variable plot::plotter_y#2 to zero page equivalence class [ plot::plotter_y#2 ]
Added variable plot::plotter#0 to zero page equivalence class [ plot::plotter#0 ]
Added variable plot::$5 to zero page equivalence class [ plot::$5 ]
Added variable plot::$6 to zero page equivalence class [ plot::$6 ]
Added variable plot::$7 to zero page equivalence class [ plot::$7 ]
Added variable init_plot_tables::$0 to zero page equivalence class [ init_plot_tables::$0 ]
Added variable init_plot_tables::$6 to zero page equivalence class [ init_plot_tables::$6 ]
Added variable init_plot_tables::$7 to zero page equivalence class [ init_plot_tables::$7 ]
Added variable init_plot_tables::$8 to zero page equivalence class [ init_plot_tables::$8 ]
Added variable init_plot_tables::$9 to zero page equivalence class [ init_plot_tables::$9 ]
Added variable init_plot_tables::$10 to zero page equivalence class [ init_plot_tables::$10 ]
Complete equivalence classes
[ plots::i#2 plots::i#1 ]
[ init_plot_tables::x#2 init_plot_tables::x#1 ]
[ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ]
[ init_plot_tables::y#2 init_plot_tables::y#1 ]
[ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ]
[ init_screen::b#2 init_screen::b#1 ]
[ init_screen::c#2 init_screen::c#1 ]
[ main::$5 ]
[ main::$7 ]
[ main::$8 ]
[ main::$10 ]
[ main::$11 ]
[ plots::$0 ]
[ plots::$1 ]
[ plot::x#0 ]
[ plot::y#0 ]
[ plot::$0 ]
[ plot::plotter_x#1 ]
[ plot::$1 ]
[ plot::plotter_x#2 ]
[ plot::$2 ]
[ plot::plotter_y#1 ]
[ plot::$3 ]
[ plot::plotter_y#2 ]
[ plot::plotter#0 ]
[ plot::$5 ]
[ plot::$6 ]
[ plot::$7 ]
[ init_plot_tables::$0 ]
[ init_plot_tables::$6 ]
[ init_plot_tables::$7 ]
[ init_plot_tables::$8 ]
[ init_plot_tables::$9 ]
[ init_plot_tables::$10 ]
Allocated zp ZP_BYTE:2 [ plots::i#2 plots::i#1 ]
Allocated zp ZP_BYTE:3 [ init_plot_tables::x#2 init_plot_tables::x#1 ]
Allocated zp ZP_BYTE:4 [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ]
Allocated zp ZP_BYTE:5 [ init_plot_tables::y#2 init_plot_tables::y#1 ]
Allocated zp ZP_PTR_BYTE:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ]
Allocated zp ZP_PTR_BYTE:8 [ init_screen::b#2 init_screen::b#1 ]
Allocated zp ZP_PTR_BYTE:10 [ init_screen::c#2 init_screen::c#1 ]
Allocated zp ZP_BYTE:12 [ main::$5 ]
Allocated zp ZP_BYTE:13 [ main::$7 ]
Allocated zp ZP_BYTE:14 [ main::$8 ]
Allocated zp ZP_BYTE:15 [ main::$10 ]
Allocated zp ZP_BYTE:16 [ main::$11 ]
Allocated zp ZP_BYTE:17 [ plots::$0 ]
Allocated zp ZP_BYTE:18 [ plots::$1 ]
Allocated zp ZP_BYTE:19 [ plot::x#0 ]
Allocated zp ZP_BYTE:20 [ plot::y#0 ]
Allocated zp ZP_BYTE:21 [ plot::$0 ]
Allocated zp ZP_PTR_BYTE:22 [ plot::plotter_x#1 ]
Allocated zp ZP_BYTE:24 [ plot::$1 ]
Allocated zp ZP_PTR_BYTE:25 [ plot::plotter_x#2 ]
Allocated zp ZP_BYTE:27 [ plot::$2 ]
Allocated zp ZP_PTR_BYTE:28 [ plot::plotter_y#1 ]
Allocated zp ZP_BYTE:30 [ plot::$3 ]
Allocated zp ZP_PTR_BYTE:31 [ plot::plotter_y#2 ]
Allocated zp ZP_PTR_BYTE:33 [ plot::plotter#0 ]
Allocated zp ZP_BYTE:35 [ plot::$5 ]
Allocated zp ZP_BYTE:36 [ plot::$6 ]
Allocated zp ZP_BYTE:37 [ plot::$7 ]
Allocated zp ZP_BYTE:38 [ init_plot_tables::$0 ]
Allocated zp ZP_BYTE:39 [ init_plot_tables::$6 ]
Allocated zp ZP_BYTE:40 [ init_plot_tables::$7 ]
Allocated zp ZP_BYTE:41 [ init_plot_tables::$8 ]
Allocated zp ZP_BYTE:42 [ init_plot_tables::$9 ]
Allocated zp ZP_BYTE:43 [ init_plot_tables::$10 ]
INITIAL ASM
//SEG0 Global Constants & labels
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const RASTER = $d012
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const D018 = $d018
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const COLS = $d800
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plots_cnt = 8
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  plots_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28
  plots_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28
//SEG1 @begin
bbegin:
  jmp b5
//SEG2 @5
b5:
//SEG3 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG4 @end
bend:
//SEG5 main
main: {
    .label _5 = 12
    .label _7 = 13
    .label _8 = 14
    .label _10 = 15
    .label _11 = 16
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [67] phi from main to init_screen [phi:main->init_screen]
  init_screen_from_main:
    jsr init_screen
    jmp b5
  //SEG12 main::@5
  b5:
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [42] phi from main::@5 to init_plot_tables [phi:main::@5->init_plot_tables]
  init_plot_tables_from_b5:
    jsr init_plot_tables
    jmp b2
  //SEG15 main::@2
  b2:
  //SEG16 [7] (byte~) main::$5 ← * (const byte*) RASTER#0 [ main::$5 ] -- zpby1=_star_cowo1 
    lda RASTER
    sta _5
  //SEG17 [8] if((byte~) main::$5!=(byte) 255) goto main::@2 [ ] -- zpby1_neq_coby1_then_la1 
    lda _5
    cmp #$ff
    bne b2
    jmp b3
  //SEG18 main::@3
  b3:
  //SEG19 [9] (byte~) main::$7 ← * (const byte*) BGCOL#0 [ main::$7 ] -- zpby1=_star_cowo1 
    lda BGCOL
    sta _7
  //SEG20 [10] (byte~) main::$8 ← (byte~) main::$7 + (byte) 1 [ main::$8 ] -- zpby1=zpby2_plus_1 
    lda _7
    clc
    adc #1
    sta _8
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte~) main::$8 [ ] -- _star_cowo1=zpby1 
    lda _8
    sta BGCOL
  //SEG22 [12] call plots param-assignment [ ]
  //SEG23 [18] phi from main::@3 to plots [phi:main::@3->plots]
  plots_from_b3:
    jsr plots
    jmp b7
  //SEG24 main::@7
  b7:
  //SEG25 [13] (byte~) main::$10 ← * (const byte*) BGCOL#0 [ main::$10 ] -- zpby1=_star_cowo1 
    lda BGCOL
    sta _10
  //SEG26 [14] (byte~) main::$11 ← (byte~) main::$10 - (byte) 1 [ main::$11 ] -- zpby1=zpby2_minus_1 
    lda _10
    sec
    sbc #1
    sta _11
  //SEG27 [15] *((const byte*) BGCOL#0) ← (byte~) main::$11 [ ] -- _star_cowo1=zpby1 
    lda _11
    sta BGCOL
  //SEG28 [16] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
    jmp breturn
  //SEG29 main::@return
  breturn:
  //SEG30 [17] return  [ ]
    rts
}
//SEG31 plots
plots: {
    .label _0 = 17
    .label _1 = 18
    .label i = 2
  //SEG32 [19] phi from plots to plots::@1 [phi:plots->plots::@1]
  b1_from_plots:
  //SEG33 [19] phi (byte) plots::i#2 = (byte) 0 [phi:plots->plots::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG34 [19] phi from plots::@3 to plots::@1 [phi:plots::@3->plots::@1]
  b1_from_b3:
  //SEG35 [19] phi (byte) plots::i#2 = (byte) plots::i#1 [phi:plots::@3->plots::@1#0] -- register_copy 
    jmp b1
  //SEG36 plots::@1
  b1:
  //SEG37 [20] (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda plots_x,x
    sta _0
  //SEG38 [21] (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 plots::$1 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda plots_y,x
    sta _1
  //SEG39 [22] (byte) plot::x#0 ← (byte~) plots::$0 [ plots::i#2 plots::$1 plot::x#0 ] -- zpby1=zpby2 
    lda _0
    sta plot.x
  //SEG40 [23] (byte) plot::y#0 ← (byte~) plots::$1 [ plots::i#2 plot::x#0 plot::y#0 ] -- zpby1=zpby2 
    lda _1
    sta plot.y
  //SEG41 [24] call plot param-assignment [ plots::i#2 ]
    jsr plot
    jmp b3
  //SEG42 plots::@3
  b3:
  //SEG43 [25] (byte) plots::i#1 ← ++ (byte) plots::i#2 [ plots::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG44 [26] if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1 [ plots::i#1 ] -- zpby1_lt_coby1_then_la1 
    lda i
    cmp #plots_cnt
    bcc b1_from_b3
    jmp breturn
  //SEG45 plots::@return
  breturn:
  //SEG46 [27] return  [ ]
    rts
}
//SEG47 plot
plot: {
    .label _0 = 21
    .label _1 = 24
    .label _2 = 27
    .label _3 = 30
    .label _5 = 35
    .label _6 = 36
    .label _7 = 37
    .label x = 19
    .label y = 20
    .label plotter_x = 22
    .label plotter_x_2 = 25
    .label plotter_y = 28
    .label plotter_y_2 = 31
    .label plotter = 33
  //SEG48 [28] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::$0 ] -- zpby1=cowo1_staridx_zpby2 
    ldx x
    lda plot_xhi,x
    sta _0
  //SEG49 [29] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#0 plot::y#0 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_zpby1 
    lda #<0
    sta plotter_x
    lda _0
    sta plotter_x+1
  //SEG50 [30] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::plotter_x#1 plot::$1 ] -- zpby1=cowo1_staridx_zpby2 
    ldx x
    lda plot_xlo,x
    sta _1
  //SEG51 [31] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#0 plot::y#0 plot::plotter_x#2 ] -- zpptrby1=zpptrby2_setlo_zpby1 
    lda _1
    sta plotter_x_2
    lda plotter_x+1
    sta plotter_x_2+1
  //SEG52 [32] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::$2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx y
    lda plot_yhi,x
    sta _2
  //SEG53 [33] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_zpby1 
    lda #<0
    sta plotter_y
    lda _2
    sta plotter_y+1
  //SEG54 [34] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- zpby1=cowo1_staridx_zpby2 
    ldx y
    lda plot_ylo,x
    sta _3
  //SEG55 [35] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby2_setlo_zpby1 
    lda _3
    sta plotter_y_2
    lda plotter_y+1
    sta plotter_y_2+1
  //SEG56 [36] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ] -- zpptrby1=zpptrby2_plus_zpptrby3 
    lda plotter_x_2
    clc
    adc plotter_y_2
    sta plotter
    lda plotter_x_2+1
    adc plotter_y_2+1
    sta plotter+1
  //SEG57 [37] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#0 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG58 [38] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0 [ plot::plotter#0 plot::$5 plot::$6 ] -- zpby1=cowo1_staridx_zpby2 
    ldx x
    lda plot_bit,x
    sta _6
  //SEG59 [39] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- zpby1=zpby2_bor_zpby3 
    lda _5
    ora _6
    sta _7
  //SEG60 [40] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=zpby1 
    ldy #0
    lda _7
    sta (plotter),y
    jmp breturn
  //SEG61 plot::@return
  breturn:
  //SEG62 [41] return  [ ]
    rts
}
//SEG63 init_plot_tables
init_plot_tables: {
    .label _0 = 38
    .label _6 = 39
    .label _7 = 40
    .label _8 = 41
    .label _9 = 42
    .label _10 = 43
    .label bit = 4
    .label x = 3
    .label y = 5
    .label yoffs = 6
  //SEG64 [43] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  b1_from_init_plot_tables:
  //SEG65 [43] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- zpby1=coby1 
    lda #$80
    sta bit
  //SEG66 [43] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- zpby1=coby1 
    lda #0
    sta x
    jmp b1
  //SEG67 [43] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  b1_from_b2:
  //SEG68 [43] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG69 [43] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
    jmp b1
  //SEG70 init_plot_tables::@1
  b1:
  //SEG71 [44] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- zpby1=zpby2_band_coby1 
    lda x
    and #$f8
    sta _0
  //SEG72 [45] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_zpby1=zpby2 
    lda _0
    ldx x
    sta plot_xlo,x
  //SEG73 [46] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_zpby1=coby2 
    lda #>BITMAP
    ldx x
    sta plot_xhi,x
  //SEG74 [47] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_zpby1=zpby2 
    lda bit
    ldx x
    sta plot_bit,x
  //SEG75 [48] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- zpby1=zpby1_ror_1 
    lsr
    sta bit
  //SEG76 [49] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- zpby1_neq_0_then_la1 
    lda bit
    bne b10
  //SEG77 [50] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  b2_from_b1:
  //SEG78 [50] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- zpby1=coby1 
    lda #$80
    sta bit
    jmp b2
  //SEG79 init_plot_tables::@2
  b2:
  //SEG80 [51] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG81 [52] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- zpby1_neq_0_then_la1 
    lda x
    bne b1_from_b2
  //SEG82 [53] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  b3_from_b2:
  //SEG83 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    lda #0
    sta yoffs+1
  //SEG84 [53] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- zpby1=coby1 
    lda #0
    sta y
    jmp b3
  //SEG85 [53] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  b3_from_b4:
  //SEG86 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG87 [53] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
    jmp b3
  //SEG88 init_plot_tables::@3
  b3:
  //SEG89 [54] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=zpby2_band_coby1 
    lda y
    and #7
    sta _6
  //SEG90 [55] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- zpby1=_lo_zpptrby1 
    lda yoffs
    sta _7
  //SEG91 [56] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- zpby1=zpby2_bor_zpby3 
    lda _6
    ora _7
    sta _8
  //SEG92 [57] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_zpby1=zpby2 
    lda _8
    ldx y
    sta plot_ylo,x
  //SEG93 [58] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- zpby1=_hi_zpptrby1 
    lda yoffs+1
    sta _9
  //SEG94 [59] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_zpby1=zpby2 
    lda _9
    ldx y
    sta plot_yhi,x
  //SEG95 [60] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- zpby1=zpby2_band_coby1 
    lda y
    and #7
    sta _10
  //SEG96 [61] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- zpby1_neq_coby1_then_la1 
    lda _10
    cmp #7
    bne b4_from_b3
    jmp b7
  //SEG97 init_plot_tables::@7
  b7:
  //SEG98 [62] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG99 [63] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG100 [63] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
    jmp b4
  //SEG101 init_plot_tables::@4
  b4:
  //SEG102 [64] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG103 [65] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- zpby1_neq_0_then_la1 
    lda y
    bne b3_from_b4
    jmp breturn
  //SEG104 init_plot_tables::@return
  breturn:
  //SEG105 [66] return  [ ]
    rts
  //SEG106 init_plot_tables::@10
  b10:
  //SEG107 [50] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  b2_from_b10:
  //SEG108 [50] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG109 init_screen
init_screen: {
    .label b = 8
    .label c = 10
  //SEG110 [68] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  b1_from_init_screen:
  //SEG111 [68] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
    jmp b1
  //SEG112 [68] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  b1_from_b1:
  //SEG113 [68] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
    jmp b1
  //SEG114 init_screen::@1
  b1:
  //SEG115 [69] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG116 [70] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG117 [71] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1_from_b1
    lda b
    cmp #<BITMAP+$2000
    bne b1_from_b1
  //SEG118 [72] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  b2_from_b1:
  //SEG119 [72] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
    jmp b2
  //SEG120 [72] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  b2_from_b2:
  //SEG121 [72] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
    jmp b2
  //SEG122 init_screen::@2
  b2:
  //SEG123 [73] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG124 [74] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG125 [75] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2_from_b2
    lda c
    cmp #<SCREEN+$400
    bne b2_from_b2
    jmp breturn
  //SEG126 init_screen::@return
  breturn:
  //SEG127 [76] return  [ ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:13 [ main::$7 ] has ALU potential.
Equivalence Class zp ZP_BYTE:36 [ plot::$6 ] has ALU potential.
Equivalence Class zp ZP_BYTE:40 [ init_plot_tables::$7 ] has ALU potential.
Statement [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] always clobbers reg byte a 
Statement [4] *((const byte*) D018#0) ← (byte) 24 [ ] always clobbers reg byte a 
Statement [31] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#0 plot::y#0 plot::plotter_x#2 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:19 [ plot::x#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:20 [ plot::y#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ plots::i#2 plots::i#1 ]
Statement [35] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] always clobbers reg byte a 
Statement [36] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ] always clobbers reg byte a 
Statement [37] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#0 plot::plotter#0 plot::$5 ] always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:19 [ plot::x#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ plots::i#2 plots::i#1 ]
Statement [40] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] always clobbers reg byte y 
Statement [44] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ init_plot_tables::x#2 init_plot_tables::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ]
Statement [46] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] always clobbers reg byte a 
Statement [47] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] always clobbers reg byte a 
Statement [54] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ init_plot_tables::y#2 init_plot_tables::y#1 ]
Statement [58] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] always clobbers reg byte a 
Statement [60] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] always clobbers reg byte a 
Statement [62] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] always clobbers reg byte a 
Statement [69] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] always clobbers reg byte a reg byte y 
Statement [71] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] always clobbers reg byte a 
Statement [73] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] always clobbers reg byte a reg byte y 
Statement [75] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] always clobbers reg byte a 
Statement [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] always clobbers reg byte a 
Statement [4] *((const byte*) D018#0) ← (byte) 24 [ ] always clobbers reg byte a 
Statement [31] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#0 plot::y#0 plot::plotter_x#2 ] always clobbers reg byte a 
Statement [35] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] always clobbers reg byte a 
Statement [36] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ] always clobbers reg byte a 
Statement [37] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#0 plot::plotter#0 plot::$5 ] always clobbers reg byte a reg byte y 
Statement [40] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] always clobbers reg byte y 
Statement [44] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] always clobbers reg byte a 
Statement [46] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] always clobbers reg byte a 
Statement [47] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] always clobbers reg byte a 
Statement [54] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] always clobbers reg byte a 
Statement [58] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] always clobbers reg byte a 
Statement [60] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] always clobbers reg byte a 
Statement [62] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] always clobbers reg byte a 
Statement [69] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] always clobbers reg byte a reg byte y 
Statement [71] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] always clobbers reg byte a 
Statement [73] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] always clobbers reg byte a reg byte y 
Statement [75] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ plots::i#2 plots::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ init_plot_tables::x#2 init_plot_tables::x#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ init_plot_tables::y#2 init_plot_tables::y#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] : zp ZP_PTR_BYTE:6 , 
Potential registers zp ZP_PTR_BYTE:8 [ init_screen::b#2 init_screen::b#1 ] : zp ZP_PTR_BYTE:8 , 
Potential registers zp ZP_PTR_BYTE:10 [ init_screen::c#2 init_screen::c#1 ] : zp ZP_PTR_BYTE:10 , 
Potential registers zp ZP_BYTE:12 [ main::$5 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ main::$7 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:14 [ main::$8 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ main::$10 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ main::$11 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ plots::$0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ plots::$1 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ plot::x#0 ] : zp ZP_BYTE:19 , reg byte x , 
Potential registers zp ZP_BYTE:20 [ plot::y#0 ] : zp ZP_BYTE:20 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ plot::$0 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:22 [ plot::plotter_x#1 ] : zp ZP_PTR_BYTE:22 , 
Potential registers zp ZP_BYTE:24 [ plot::$1 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:25 [ plot::plotter_x#2 ] : zp ZP_PTR_BYTE:25 , 
Potential registers zp ZP_BYTE:27 [ plot::$2 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:28 [ plot::plotter_y#1 ] : zp ZP_PTR_BYTE:28 , 
Potential registers zp ZP_BYTE:30 [ plot::$3 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:31 [ plot::plotter_y#2 ] : zp ZP_PTR_BYTE:31 , 
Potential registers zp ZP_PTR_BYTE:33 [ plot::plotter#0 ] : zp ZP_PTR_BYTE:33 , 
Potential registers zp ZP_BYTE:35 [ plot::$5 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ plot::$6 ] : zp ZP_BYTE:36 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:37 [ plot::$7 ] : zp ZP_BYTE:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ init_plot_tables::$0 ] : zp ZP_BYTE:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ init_plot_tables::$6 ] : zp ZP_BYTE:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ init_plot_tables::$7 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:41 [ init_plot_tables::$8 ] : zp ZP_BYTE:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:42 [ init_plot_tables::$9 ] : zp ZP_BYTE:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:43 [ init_plot_tables::$10 ] : zp ZP_BYTE:43 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [plots] 218.83: zp ZP_BYTE:2 [ plots::i#2 plots::i#1 ] 101: zp ZP_BYTE:17 [ plots::$0 ] 101: zp ZP_BYTE:18 [ plots::$1 ] 
Uplift Scope [main] 202: zp ZP_BYTE:12 [ main::$5 ] 22: zp ZP_BYTE:13 [ main::$7 ] 22: zp ZP_BYTE:14 [ main::$8 ] 22: zp ZP_BYTE:15 [ main::$10 ] 22: zp ZP_BYTE:16 [ main::$11 ] 
Uplift Scope [init_plot_tables] 46.93: zp ZP_BYTE:4 [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ] 39.11: zp ZP_PTR_BYTE:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] 24.75: zp ZP_BYTE:3 [ init_plot_tables::x#2 init_plot_tables::x#1 ] 22.5: zp ZP_BYTE:5 [ init_plot_tables::y#2 init_plot_tables::y#1 ] 22: zp ZP_BYTE:38 [ init_plot_tables::$0 ] 22: zp ZP_BYTE:40 [ init_plot_tables::$7 ] 22: zp ZP_BYTE:41 [ init_plot_tables::$8 ] 22: zp ZP_BYTE:42 [ init_plot_tables::$9 ] 22: zp ZP_BYTE:43 [ init_plot_tables::$10 ] 11: zp ZP_BYTE:39 [ init_plot_tables::$6 ] 
Uplift Scope [init_screen] 33: zp ZP_PTR_BYTE:8 [ init_screen::b#2 init_screen::b#1 ] 33: zp ZP_PTR_BYTE:10 [ init_screen::c#2 init_screen::c#1 ] 
Uplift Scope [plot] 15: zp ZP_BYTE:20 [ plot::y#0 ] 8.92: zp ZP_BYTE:19 [ plot::x#0 ] 4: zp ZP_BYTE:21 [ plot::$0 ] 4: zp ZP_BYTE:24 [ plot::$1 ] 4: zp ZP_BYTE:27 [ plot::$2 ] 4: zp ZP_BYTE:30 [ plot::$3 ] 4: zp ZP_PTR_BYTE:31 [ plot::plotter_y#2 ] 4: zp ZP_BYTE:36 [ plot::$6 ] 4: zp ZP_BYTE:37 [ plot::$7 ] 2: zp ZP_PTR_BYTE:22 [ plot::plotter_x#1 ] 2: zp ZP_PTR_BYTE:28 [ plot::plotter_y#1 ] 2: zp ZP_BYTE:35 [ plot::$5 ] 1.5: zp ZP_PTR_BYTE:33 [ plot::plotter#0 ] 0.8: zp ZP_PTR_BYTE:25 [ plot::plotter_x#2 ] 
Uplift Scope [] 

Uplifting [plots] best 11639 combination zp ZP_BYTE:2 [ plots::i#2 plots::i#1 ] reg byte y [ plots::$0 ] reg byte a [ plots::$1 ] 
Uplifting [main] best 10759 combination reg byte a [ main::$5 ] reg byte x [ main::$7 ] reg byte x [ main::$8 ] reg byte x [ main::$10 ] reg byte x [ main::$11 ] 
Uplift attempts [init_plot_tables] 10000/138240 (limiting to 10000)
Uplifting [init_plot_tables] best 10129 combination reg byte y [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ] zp ZP_PTR_BYTE:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] reg byte x [ init_plot_tables::x#2 init_plot_tables::x#1 ] reg byte x [ init_plot_tables::y#2 init_plot_tables::y#1 ] reg byte a [ init_plot_tables::$0 ] reg byte a [ init_plot_tables::$7 ] reg byte a [ init_plot_tables::$8 ] reg byte a [ init_plot_tables::$9 ] zp ZP_BYTE:43 [ init_plot_tables::$10 ] zp ZP_BYTE:39 [ init_plot_tables::$6 ] 
Limited combination testing to 10000 combinations of 138240 possible.
Uplifting [init_screen] best 10129 combination zp ZP_PTR_BYTE:8 [ init_screen::b#2 init_screen::b#1 ] zp ZP_PTR_BYTE:10 [ init_screen::c#2 init_screen::c#1 ] 
Uplift attempts [plot] 10000/122880 (limiting to 10000)
Uplifting [plot] best 9987 combination reg byte y [ plot::y#0 ] zp ZP_BYTE:19 [ plot::x#0 ] reg byte a [ plot::$0 ] reg byte a [ plot::$1 ] reg byte a [ plot::$2 ] reg byte a [ plot::$3 ] zp ZP_PTR_BYTE:31 [ plot::plotter_y#2 ] reg byte a [ plot::$6 ] reg byte a [ plot::$7 ] zp ZP_PTR_BYTE:22 [ plot::plotter_x#1 ] zp ZP_PTR_BYTE:28 [ plot::plotter_y#1 ] zp ZP_BYTE:35 [ plot::$5 ] zp ZP_PTR_BYTE:33 [ plot::plotter#0 ] zp ZP_PTR_BYTE:25 [ plot::plotter_x#2 ] 
Limited combination testing to 10000 combinations of 122880 possible.
Uplifting [] best 9987 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ plots::i#2 plots::i#1 ]
Uplifting [plots] best 9987 combination zp ZP_BYTE:2 [ plots::i#2 plots::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:43 [ init_plot_tables::$10 ]
Uplifting [init_plot_tables] best 9927 combination reg byte a [ init_plot_tables::$10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:39 [ init_plot_tables::$6 ]
Uplifting [init_plot_tables] best 9927 combination zp ZP_BYTE:39 [ init_plot_tables::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ plot::x#0 ]
Uplifting [plot] best 9927 combination zp ZP_BYTE:19 [ plot::x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ plot::$5 ]
Uplifting [plot] best 9927 combination zp ZP_BYTE:35 [ plot::$5 ] 
Coalescing zero page register [ zp ZP_BYTE:2 [ plots::i#2 plots::i#1 ] ] with [ zp ZP_BYTE:39 [ init_plot_tables::$6 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] ] with [ zp ZP_PTR_BYTE:8 [ init_screen::b#2 init_screen::b#1 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 ] ] with [ zp ZP_PTR_BYTE:10 [ init_screen::c#2 init_screen::c#1 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 init_screen::c#2 init_screen::c#1 ] ] with [ zp ZP_PTR_BYTE:22 [ plot::plotter_x#1 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 init_screen::c#2 init_screen::c#1 plot::plotter_x#1 ] ] with [ zp ZP_PTR_BYTE:25 [ plot::plotter_x#2 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 init_screen::c#2 init_screen::c#1 plot::plotter_x#1 plot::plotter_x#2 ] ] with [ zp ZP_PTR_BYTE:33 [ plot::plotter#0 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:28 [ plot::plotter_y#1 ] ] with [ zp ZP_PTR_BYTE:31 [ plot::plotter_y#2 ] ]
Allocated (was zp ZP_PTR_BYTE:6) zp ZP_PTR_BYTE:3 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 init_screen::c#2 init_screen::c#1 plot::plotter_x#1 plot::plotter_x#2 plot::plotter#0 ]
Allocated (was zp ZP_BYTE:19) zp ZP_BYTE:5 [ plot::x#0 ]
Allocated (was zp ZP_PTR_BYTE:28) zp ZP_PTR_BYTE:6 [ plot::plotter_y#1 plot::plotter_y#2 ]
Allocated (was zp ZP_BYTE:35) zp ZP_BYTE:8 [ plot::$5 ]
Removing instruction jmp b5
Removing instruction jmp bend
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const RASTER = $d012
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const D018 = $d018
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const COLS = $d800
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plots_cnt = 8
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  plots_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28
  plots_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28
//SEG1 @begin
bbegin:
//SEG2 @5
b5:
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [67] phi from main to init_screen [phi:main->init_screen]
  init_screen_from_main:
    jsr init_screen
  //SEG12 main::@5
  b5:
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [42] phi from main::@5 to init_plot_tables [phi:main::@5->init_plot_tables]
  init_plot_tables_from_b5:
    jsr init_plot_tables
  //SEG15 main::@2
  b2:
  //SEG16 [7] (byte~) main::$5 ← * (const byte*) RASTER#0 [ main::$5 ] -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [8] if((byte~) main::$5!=(byte) 255) goto main::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b2
  //SEG18 main::@3
  b3:
  //SEG19 [9] (byte~) main::$7 ← * (const byte*) BGCOL#0 [ main::$7 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG20 [10] (byte~) main::$8 ← (byte~) main::$7 + (byte) 1 [ main::$8 ] -- xby=xby_plus_1 
    inx
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte~) main::$8 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG22 [12] call plots param-assignment [ ]
  //SEG23 [18] phi from main::@3 to plots [phi:main::@3->plots]
  plots_from_b3:
    jsr plots
  //SEG24 main::@7
  b7:
  //SEG25 [13] (byte~) main::$10 ← * (const byte*) BGCOL#0 [ main::$10 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG26 [14] (byte~) main::$11 ← (byte~) main::$10 - (byte) 1 [ main::$11 ] -- xby=xby_minus_1 
    dex
  //SEG27 [15] *((const byte*) BGCOL#0) ← (byte~) main::$11 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG28 [16] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG29 main::@return
  breturn:
  //SEG30 [17] return  [ ]
    rts
}
//SEG31 plots
plots: {
    .label i = 2
  //SEG32 [19] phi from plots to plots::@1 [phi:plots->plots::@1]
  b1_from_plots:
  //SEG33 [19] phi (byte) plots::i#2 = (byte) 0 [phi:plots->plots::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG34 [19] phi from plots::@3 to plots::@1 [phi:plots::@3->plots::@1]
  b1_from_b3:
  //SEG35 [19] phi (byte) plots::i#2 = (byte) plots::i#1 [phi:plots::@3->plots::@1#0] -- register_copy 
  //SEG36 plots::@1
  b1:
  //SEG37 [20] (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx i
    lda plots_x,x
    tay
  //SEG38 [21] (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 plots::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx i
    lda plots_y,x
  //SEG39 [22] (byte) plot::x#0 ← (byte~) plots::$0 [ plots::i#2 plots::$1 plot::x#0 ] -- zpby1=yby 
    sty plot.x
  //SEG40 [23] (byte) plot::y#0 ← (byte~) plots::$1 [ plots::i#2 plot::x#0 plot::y#0 ] -- yby=aby 
    tay
  //SEG41 [24] call plot param-assignment [ plots::i#2 ]
    jsr plot
  //SEG42 plots::@3
  b3:
  //SEG43 [25] (byte) plots::i#1 ← ++ (byte) plots::i#2 [ plots::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG44 [26] if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1 [ plots::i#1 ] -- zpby1_lt_coby1_then_la1 
    lda i
    cmp #plots_cnt
    bcc b1_from_b3
  //SEG45 plots::@return
  breturn:
  //SEG46 [27] return  [ ]
    rts
}
//SEG47 plot
plot: {
    .label _5 = 8
    .label x = 5
    .label plotter_x = 3
    .label plotter_y = 6
    .label plotter = 3
  //SEG48 [28] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::$0 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xhi,x
  //SEG49 [29] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#0 plot::y#0 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG50 [30] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xlo,x
  //SEG51 [31] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#0 plot::y#0 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG52 [32] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG53 [33] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG54 [34] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG55 [35] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG56 [36] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG57 [37] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#0 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG58 [38] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_bit,x
  //SEG59 [39] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG60 [40] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    ldy #0
    sta (plotter),y
  //SEG61 plot::@return
  breturn:
  //SEG62 [41] return  [ ]
    rts
}
//SEG63 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 3
  //SEG64 [43] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  b1_from_init_plot_tables:
  //SEG65 [43] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG66 [43] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG67 [43] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  b1_from_b2:
  //SEG68 [43] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG69 [43] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG70 init_plot_tables::@1
  b1:
  //SEG71 [44] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG72 [45] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG73 [46] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG74 [47] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG75 [48] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG76 [49] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG77 [50] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  b2_from_b1:
  //SEG78 [50] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG79 init_plot_tables::@2
  b2:
  //SEG80 [51] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG81 [52] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1_from_b2
  //SEG82 [53] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  b3_from_b2:
  //SEG83 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    lda #0
    sta yoffs+1
  //SEG84 [53] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG85 [53] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  b3_from_b4:
  //SEG86 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG87 [53] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG88 init_plot_tables::@3
  b3:
  //SEG89 [54] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG90 [55] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG91 [56] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG92 [57] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG93 [58] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG94 [59] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG95 [60] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG96 [61] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4_from_b3
  //SEG97 init_plot_tables::@7
  b7:
  //SEG98 [62] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG99 [63] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG100 [63] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG101 init_plot_tables::@4
  b4:
  //SEG102 [64] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG103 [65] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3_from_b4
  //SEG104 init_plot_tables::@return
  breturn:
  //SEG105 [66] return  [ ]
    rts
  //SEG106 init_plot_tables::@10
  b10:
  //SEG107 [50] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  b2_from_b10:
  //SEG108 [50] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG109 init_screen
init_screen: {
    .label b = 3
    .label c = 3
  //SEG110 [68] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  b1_from_init_screen:
  //SEG111 [68] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
    jmp b1
  //SEG112 [68] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  b1_from_b1:
  //SEG113 [68] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG114 init_screen::@1
  b1:
  //SEG115 [69] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG116 [70] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG117 [71] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1_from_b1
    lda b
    cmp #<BITMAP+$2000
    bne b1_from_b1
  //SEG118 [72] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  b2_from_b1:
  //SEG119 [72] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
    jmp b2
  //SEG120 [72] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  b2_from_b2:
  //SEG121 [72] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG122 init_screen::@2
  b2:
  //SEG123 [73] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG124 [74] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG125 [75] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2_from_b2
    lda c
    cmp #<SCREEN+$400
    bne b2_from_b2
  //SEG126 init_screen::@return
  breturn:
  //SEG127 [76] return  [ ]
    rts
}

Removing instruction lda #0
Removing instruction ldy #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const RASTER = $d012
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const D018 = $d018
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const COLS = $d800
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plots_cnt = 8
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  plots_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28
  plots_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28
//SEG1 @begin
bbegin:
//SEG2 @5
b5:
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [67] phi from main to init_screen [phi:main->init_screen]
  init_screen_from_main:
    jsr init_screen
  //SEG12 main::@5
  b5:
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [42] phi from main::@5 to init_plot_tables [phi:main::@5->init_plot_tables]
  init_plot_tables_from_b5:
    jsr init_plot_tables
  //SEG15 main::@2
  b2:
  //SEG16 [7] (byte~) main::$5 ← * (const byte*) RASTER#0 [ main::$5 ] -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [8] if((byte~) main::$5!=(byte) 255) goto main::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b2
  //SEG18 main::@3
  b3:
  //SEG19 [9] (byte~) main::$7 ← * (const byte*) BGCOL#0 [ main::$7 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG20 [10] (byte~) main::$8 ← (byte~) main::$7 + (byte) 1 [ main::$8 ] -- xby=xby_plus_1 
    inx
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte~) main::$8 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG22 [12] call plots param-assignment [ ]
  //SEG23 [18] phi from main::@3 to plots [phi:main::@3->plots]
  plots_from_b3:
    jsr plots
  //SEG24 main::@7
  b7:
  //SEG25 [13] (byte~) main::$10 ← * (const byte*) BGCOL#0 [ main::$10 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG26 [14] (byte~) main::$11 ← (byte~) main::$10 - (byte) 1 [ main::$11 ] -- xby=xby_minus_1 
    dex
  //SEG27 [15] *((const byte*) BGCOL#0) ← (byte~) main::$11 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG28 [16] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG29 main::@return
  breturn:
  //SEG30 [17] return  [ ]
    rts
}
//SEG31 plots
plots: {
    .label i = 2
  //SEG32 [19] phi from plots to plots::@1 [phi:plots->plots::@1]
  b1_from_plots:
  //SEG33 [19] phi (byte) plots::i#2 = (byte) 0 [phi:plots->plots::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG34 [19] phi from plots::@3 to plots::@1 [phi:plots::@3->plots::@1]
  b1_from_b3:
  //SEG35 [19] phi (byte) plots::i#2 = (byte) plots::i#1 [phi:plots::@3->plots::@1#0] -- register_copy 
  //SEG36 plots::@1
  b1:
  //SEG37 [20] (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx i
    lda plots_x,x
    tay
  //SEG38 [21] (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 plots::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx i
    lda plots_y,x
  //SEG39 [22] (byte) plot::x#0 ← (byte~) plots::$0 [ plots::i#2 plots::$1 plot::x#0 ] -- zpby1=yby 
    sty plot.x
  //SEG40 [23] (byte) plot::y#0 ← (byte~) plots::$1 [ plots::i#2 plot::x#0 plot::y#0 ] -- yby=aby 
    tay
  //SEG41 [24] call plot param-assignment [ plots::i#2 ]
    jsr plot
  //SEG42 plots::@3
  b3:
  //SEG43 [25] (byte) plots::i#1 ← ++ (byte) plots::i#2 [ plots::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG44 [26] if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1 [ plots::i#1 ] -- zpby1_lt_coby1_then_la1 
    lda i
    cmp #plots_cnt
    bcc b1_from_b3
  //SEG45 plots::@return
  breturn:
  //SEG46 [27] return  [ ]
    rts
}
//SEG47 plot
plot: {
    .label _5 = 8
    .label x = 5
    .label plotter_x = 3
    .label plotter_y = 6
    .label plotter = 3
  //SEG48 [28] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::$0 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xhi,x
  //SEG49 [29] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#0 plot::y#0 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG50 [30] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xlo,x
  //SEG51 [31] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#0 plot::y#0 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG52 [32] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG53 [33] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG54 [34] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG55 [35] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG56 [36] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG57 [37] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#0 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG58 [38] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_bit,x
  //SEG59 [39] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG60 [40] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    sta (plotter),y
  //SEG61 plot::@return
  breturn:
  //SEG62 [41] return  [ ]
    rts
}
//SEG63 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 3
  //SEG64 [43] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  b1_from_init_plot_tables:
  //SEG65 [43] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG66 [43] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG67 [43] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  b1_from_b2:
  //SEG68 [43] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG69 [43] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG70 init_plot_tables::@1
  b1:
  //SEG71 [44] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG72 [45] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG73 [46] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG74 [47] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG75 [48] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG76 [49] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG77 [50] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  b2_from_b1:
  //SEG78 [50] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG79 init_plot_tables::@2
  b2:
  //SEG80 [51] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG81 [52] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1_from_b2
  //SEG82 [53] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  b3_from_b2:
  //SEG83 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    sta yoffs+1
  //SEG84 [53] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG85 [53] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  b3_from_b4:
  //SEG86 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG87 [53] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG88 init_plot_tables::@3
  b3:
  //SEG89 [54] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG90 [55] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG91 [56] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG92 [57] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG93 [58] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG94 [59] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG95 [60] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG96 [61] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4_from_b3
  //SEG97 init_plot_tables::@7
  b7:
  //SEG98 [62] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG99 [63] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG100 [63] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG101 init_plot_tables::@4
  b4:
  //SEG102 [64] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG103 [65] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3_from_b4
  //SEG104 init_plot_tables::@return
  breturn:
  //SEG105 [66] return  [ ]
    rts
  //SEG106 init_plot_tables::@10
  b10:
  //SEG107 [50] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  b2_from_b10:
  //SEG108 [50] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG109 init_screen
init_screen: {
    .label b = 3
    .label c = 3
  //SEG110 [68] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  b1_from_init_screen:
  //SEG111 [68] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
    jmp b1
  //SEG112 [68] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  b1_from_b1:
  //SEG113 [68] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG114 init_screen::@1
  b1:
  //SEG115 [69] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG116 [70] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG117 [71] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1_from_b1
    lda b
    cmp #<BITMAP+$2000
    bne b1_from_b1
  //SEG118 [72] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  b2_from_b1:
  //SEG119 [72] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
    jmp b2
  //SEG120 [72] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  b2_from_b2:
  //SEG121 [72] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG122 init_screen::@2
  b2:
  //SEG123 [73] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG124 [74] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG125 [75] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2_from_b2
    lda c
    cmp #<SCREEN+$400
    bne b2_from_b2
  //SEG126 init_screen::@return
  breturn:
  //SEG127 [76] return  [ ]
    rts
}

Replacing label b1_from_b3 with b1
Replacing label b1_from_b2 with b1
Replacing label b4_from_b3 with b4
Replacing label b3_from_b4 with b3
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Replacing label b2_from_b2 with b2
Removing instruction bbegin:
Removing instruction init_plot_tables_from_b5:
Removing instruction b1_from_b3:
Removing instruction b1_from_b2:
Removing instruction b3_from_b4:
Removing instruction b4_from_b3:
Removing instruction b4_from_b7:
Removing instruction b2_from_b10:
Removing instruction b1_from_b1:
Removing instruction b2_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const RASTER = $d012
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const D018 = $d018
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const COLS = $d800
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plots_cnt = 8
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  plots_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28
  plots_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28
//SEG1 @begin
//SEG2 @5
b5:
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [67] phi from main to init_screen [phi:main->init_screen]
  init_screen_from_main:
    jsr init_screen
  //SEG12 main::@5
  b5:
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [42] phi from main::@5 to init_plot_tables [phi:main::@5->init_plot_tables]
    jsr init_plot_tables
  //SEG15 main::@2
  b2:
  //SEG16 [7] (byte~) main::$5 ← * (const byte*) RASTER#0 [ main::$5 ] -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [8] if((byte~) main::$5!=(byte) 255) goto main::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b2
  //SEG18 main::@3
  b3:
  //SEG19 [9] (byte~) main::$7 ← * (const byte*) BGCOL#0 [ main::$7 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG20 [10] (byte~) main::$8 ← (byte~) main::$7 + (byte) 1 [ main::$8 ] -- xby=xby_plus_1 
    inx
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte~) main::$8 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG22 [12] call plots param-assignment [ ]
  //SEG23 [18] phi from main::@3 to plots [phi:main::@3->plots]
  plots_from_b3:
    jsr plots
  //SEG24 main::@7
  b7:
  //SEG25 [13] (byte~) main::$10 ← * (const byte*) BGCOL#0 [ main::$10 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG26 [14] (byte~) main::$11 ← (byte~) main::$10 - (byte) 1 [ main::$11 ] -- xby=xby_minus_1 
    dex
  //SEG27 [15] *((const byte*) BGCOL#0) ← (byte~) main::$11 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG28 [16] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG29 main::@return
  breturn:
  //SEG30 [17] return  [ ]
    rts
}
//SEG31 plots
plots: {
    .label i = 2
  //SEG32 [19] phi from plots to plots::@1 [phi:plots->plots::@1]
  b1_from_plots:
  //SEG33 [19] phi (byte) plots::i#2 = (byte) 0 [phi:plots->plots::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG34 [19] phi from plots::@3 to plots::@1 [phi:plots::@3->plots::@1]
  //SEG35 [19] phi (byte) plots::i#2 = (byte) plots::i#1 [phi:plots::@3->plots::@1#0] -- register_copy 
  //SEG36 plots::@1
  b1:
  //SEG37 [20] (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx i
    lda plots_x,x
    tay
  //SEG38 [21] (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 plots::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx i
    lda plots_y,x
  //SEG39 [22] (byte) plot::x#0 ← (byte~) plots::$0 [ plots::i#2 plots::$1 plot::x#0 ] -- zpby1=yby 
    sty plot.x
  //SEG40 [23] (byte) plot::y#0 ← (byte~) plots::$1 [ plots::i#2 plot::x#0 plot::y#0 ] -- yby=aby 
    tay
  //SEG41 [24] call plot param-assignment [ plots::i#2 ]
    jsr plot
  //SEG42 plots::@3
  b3:
  //SEG43 [25] (byte) plots::i#1 ← ++ (byte) plots::i#2 [ plots::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG44 [26] if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1 [ plots::i#1 ] -- zpby1_lt_coby1_then_la1 
    lda i
    cmp #plots_cnt
    bcc b1
  //SEG45 plots::@return
  breturn:
  //SEG46 [27] return  [ ]
    rts
}
//SEG47 plot
plot: {
    .label _5 = 8
    .label x = 5
    .label plotter_x = 3
    .label plotter_y = 6
    .label plotter = 3
  //SEG48 [28] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::$0 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xhi,x
  //SEG49 [29] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#0 plot::y#0 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG50 [30] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xlo,x
  //SEG51 [31] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#0 plot::y#0 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG52 [32] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG53 [33] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG54 [34] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG55 [35] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG56 [36] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG57 [37] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#0 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG58 [38] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_bit,x
  //SEG59 [39] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG60 [40] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    sta (plotter),y
  //SEG61 plot::@return
  breturn:
  //SEG62 [41] return  [ ]
    rts
}
//SEG63 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 3
  //SEG64 [43] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  b1_from_init_plot_tables:
  //SEG65 [43] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG66 [43] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG67 [43] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  //SEG68 [43] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG69 [43] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG70 init_plot_tables::@1
  b1:
  //SEG71 [44] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG72 [45] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG73 [46] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG74 [47] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG75 [48] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG76 [49] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG77 [50] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  b2_from_b1:
  //SEG78 [50] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG79 init_plot_tables::@2
  b2:
  //SEG80 [51] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG81 [52] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG82 [53] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  b3_from_b2:
  //SEG83 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    sta yoffs+1
  //SEG84 [53] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG85 [53] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  //SEG86 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG87 [53] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG88 init_plot_tables::@3
  b3:
  //SEG89 [54] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG90 [55] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG91 [56] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG92 [57] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG93 [58] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG94 [59] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG95 [60] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG96 [61] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4
  //SEG97 init_plot_tables::@7
  b7:
  //SEG98 [62] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG99 [63] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  //SEG100 [63] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG101 init_plot_tables::@4
  b4:
  //SEG102 [64] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG103 [65] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG104 init_plot_tables::@return
  breturn:
  //SEG105 [66] return  [ ]
    rts
  //SEG106 init_plot_tables::@10
  b10:
  //SEG107 [50] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  //SEG108 [50] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG109 init_screen
init_screen: {
    .label b = 3
    .label c = 3
  //SEG110 [68] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  b1_from_init_screen:
  //SEG111 [68] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
    jmp b1
  //SEG112 [68] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  //SEG113 [68] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG114 init_screen::@1
  b1:
  //SEG115 [69] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG116 [70] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG117 [71] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1
    lda b
    cmp #<BITMAP+$2000
    bne b1
  //SEG118 [72] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  b2_from_b1:
  //SEG119 [72] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
    jmp b2
  //SEG120 [72] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  //SEG121 [72] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG122 init_screen::@2
  b2:
  //SEG123 [73] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG124 [74] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG125 [75] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2
    lda c
    cmp #<SCREEN+$400
    bne b2
  //SEG126 init_screen::@return
  breturn:
  //SEG127 [76] return  [ ]
    rts
}

Removing instruction b5:
Removing instruction bend:
Removing instruction init_screen_from_main:
Removing instruction b5:
Removing instruction b3:
Removing instruction plots_from_b3:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b1_from_plots:
Removing instruction b3:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_init_plot_tables:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b1_from_init_screen:
Removing instruction b2_from_b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const RASTER = $d012
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const D018 = $d018
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const COLS = $d800
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plots_cnt = 8
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  plots_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28
  plots_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28
//SEG1 @begin
//SEG2 @5
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [67] phi from main to init_screen [phi:main->init_screen]
    jsr init_screen
  //SEG12 main::@5
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [42] phi from main::@5 to init_plot_tables [phi:main::@5->init_plot_tables]
    jsr init_plot_tables
  //SEG15 main::@2
  b2:
  //SEG16 [7] (byte~) main::$5 ← * (const byte*) RASTER#0 [ main::$5 ] -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [8] if((byte~) main::$5!=(byte) 255) goto main::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b2
  //SEG18 main::@3
  //SEG19 [9] (byte~) main::$7 ← * (const byte*) BGCOL#0 [ main::$7 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG20 [10] (byte~) main::$8 ← (byte~) main::$7 + (byte) 1 [ main::$8 ] -- xby=xby_plus_1 
    inx
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte~) main::$8 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG22 [12] call plots param-assignment [ ]
  //SEG23 [18] phi from main::@3 to plots [phi:main::@3->plots]
    jsr plots
  //SEG24 main::@7
  //SEG25 [13] (byte~) main::$10 ← * (const byte*) BGCOL#0 [ main::$10 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG26 [14] (byte~) main::$11 ← (byte~) main::$10 - (byte) 1 [ main::$11 ] -- xby=xby_minus_1 
    dex
  //SEG27 [15] *((const byte*) BGCOL#0) ← (byte~) main::$11 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG28 [16] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG29 main::@return
  //SEG30 [17] return  [ ]
    rts
}
//SEG31 plots
plots: {
    .label i = 2
  //SEG32 [19] phi from plots to plots::@1 [phi:plots->plots::@1]
  //SEG33 [19] phi (byte) plots::i#2 = (byte) 0 [phi:plots->plots::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG34 [19] phi from plots::@3 to plots::@1 [phi:plots::@3->plots::@1]
  //SEG35 [19] phi (byte) plots::i#2 = (byte) plots::i#1 [phi:plots::@3->plots::@1#0] -- register_copy 
  //SEG36 plots::@1
  b1:
  //SEG37 [20] (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx i
    lda plots_x,x
    tay
  //SEG38 [21] (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 plots::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx i
    lda plots_y,x
  //SEG39 [22] (byte) plot::x#0 ← (byte~) plots::$0 [ plots::i#2 plots::$1 plot::x#0 ] -- zpby1=yby 
    sty plot.x
  //SEG40 [23] (byte) plot::y#0 ← (byte~) plots::$1 [ plots::i#2 plot::x#0 plot::y#0 ] -- yby=aby 
    tay
  //SEG41 [24] call plot param-assignment [ plots::i#2 ]
    jsr plot
  //SEG42 plots::@3
  //SEG43 [25] (byte) plots::i#1 ← ++ (byte) plots::i#2 [ plots::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG44 [26] if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1 [ plots::i#1 ] -- zpby1_lt_coby1_then_la1 
    lda i
    cmp #plots_cnt
    bcc b1
  //SEG45 plots::@return
  //SEG46 [27] return  [ ]
    rts
}
//SEG47 plot
plot: {
    .label _5 = 8
    .label x = 5
    .label plotter_x = 3
    .label plotter_y = 6
    .label plotter = 3
  //SEG48 [28] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::$0 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xhi,x
  //SEG49 [29] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#0 plot::y#0 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG50 [30] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xlo,x
  //SEG51 [31] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#0 plot::y#0 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG52 [32] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG53 [33] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG54 [34] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG55 [35] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG56 [36] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG57 [37] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#0 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG58 [38] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_bit,x
  //SEG59 [39] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG60 [40] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    sta (plotter),y
  //SEG61 plot::@return
  //SEG62 [41] return  [ ]
    rts
}
//SEG63 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 3
  //SEG64 [43] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  //SEG65 [43] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG66 [43] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG67 [43] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  //SEG68 [43] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG69 [43] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG70 init_plot_tables::@1
  b1:
  //SEG71 [44] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG72 [45] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG73 [46] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG74 [47] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG75 [48] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG76 [49] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG77 [50] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  //SEG78 [50] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG79 init_plot_tables::@2
  b2:
  //SEG80 [51] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG81 [52] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG82 [53] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  //SEG83 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    sta yoffs+1
  //SEG84 [53] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG85 [53] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  //SEG86 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG87 [53] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG88 init_plot_tables::@3
  b3:
  //SEG89 [54] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG90 [55] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG91 [56] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG92 [57] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG93 [58] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG94 [59] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG95 [60] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG96 [61] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4
  //SEG97 init_plot_tables::@7
  //SEG98 [62] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG99 [63] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  //SEG100 [63] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG101 init_plot_tables::@4
  b4:
  //SEG102 [64] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG103 [65] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG104 init_plot_tables::@return
  //SEG105 [66] return  [ ]
    rts
  //SEG106 init_plot_tables::@10
  b10:
  //SEG107 [50] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  //SEG108 [50] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG109 init_screen
init_screen: {
    .label b = 3
    .label c = 3
  //SEG110 [68] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  //SEG111 [68] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
    jmp b1
  //SEG112 [68] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  //SEG113 [68] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG114 init_screen::@1
  b1:
  //SEG115 [69] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG116 [70] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG117 [71] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1
    lda b
    cmp #<BITMAP+$2000
    bne b1
  //SEG118 [72] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  //SEG119 [72] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
    jmp b2
  //SEG120 [72] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  //SEG121 [72] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG122 init_screen::@2
  b2:
  //SEG123 [73] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG124 [74] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG125 [75] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2
    lda c
    cmp #<SCREEN+$400
    bne b2
  //SEG126 init_screen::@return
  //SEG127 [76] return  [ ]
    rts
}

Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const RASTER = $d012
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const D018 = $d018
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const COLS = $d800
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plots_cnt = 8
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  plots_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28
  plots_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28
//SEG1 @begin
//SEG2 @5
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [67] phi from main to init_screen [phi:main->init_screen]
    jsr init_screen
  //SEG12 main::@5
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [42] phi from main::@5 to init_plot_tables [phi:main::@5->init_plot_tables]
    jsr init_plot_tables
  //SEG15 main::@2
  b2:
  //SEG16 [7] (byte~) main::$5 ← * (const byte*) RASTER#0 [ main::$5 ] -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [8] if((byte~) main::$5!=(byte) 255) goto main::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b2
  //SEG18 main::@3
  //SEG19 [9] (byte~) main::$7 ← * (const byte*) BGCOL#0 [ main::$7 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG20 [10] (byte~) main::$8 ← (byte~) main::$7 + (byte) 1 [ main::$8 ] -- xby=xby_plus_1 
    inx
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte~) main::$8 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG22 [12] call plots param-assignment [ ]
  //SEG23 [18] phi from main::@3 to plots [phi:main::@3->plots]
    jsr plots
  //SEG24 main::@7
  //SEG25 [13] (byte~) main::$10 ← * (const byte*) BGCOL#0 [ main::$10 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG26 [14] (byte~) main::$11 ← (byte~) main::$10 - (byte) 1 [ main::$11 ] -- xby=xby_minus_1 
    dex
  //SEG27 [15] *((const byte*) BGCOL#0) ← (byte~) main::$11 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG28 [16] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG29 main::@return
  //SEG30 [17] return  [ ]
    rts
}
//SEG31 plots
plots: {
    .label i = 2
  //SEG32 [19] phi from plots to plots::@1 [phi:plots->plots::@1]
  //SEG33 [19] phi (byte) plots::i#2 = (byte) 0 [phi:plots->plots::@1#0] -- zpby1=coby1 
    lda #0
    sta i
  //SEG34 [19] phi from plots::@3 to plots::@1 [phi:plots::@3->plots::@1]
  //SEG35 [19] phi (byte) plots::i#2 = (byte) plots::i#1 [phi:plots::@3->plots::@1#0] -- register_copy 
  //SEG36 plots::@1
  b1:
  //SEG37 [20] (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx i
    lda plots_x,x
    tay
  //SEG38 [21] (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 plots::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx i
    lda plots_y,x
  //SEG39 [22] (byte) plot::x#0 ← (byte~) plots::$0 [ plots::i#2 plots::$1 plot::x#0 ] -- zpby1=yby 
    sty plot.x
  //SEG40 [23] (byte) plot::y#0 ← (byte~) plots::$1 [ plots::i#2 plot::x#0 plot::y#0 ] -- yby=aby 
    tay
  //SEG41 [24] call plot param-assignment [ plots::i#2 ]
    jsr plot
  //SEG42 plots::@3
  //SEG43 [25] (byte) plots::i#1 ← ++ (byte) plots::i#2 [ plots::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG44 [26] if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1 [ plots::i#1 ] -- zpby1_lt_coby1_then_la1 
    lda i
    cmp #plots_cnt
    bcc b1
  //SEG45 plots::@return
  //SEG46 [27] return  [ ]
    rts
}
//SEG47 plot
plot: {
    .label _5 = 8
    .label x = 5
    .label plotter_x = 3
    .label plotter_y = 6
    .label plotter = 3
  //SEG48 [28] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::$0 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xhi,x
  //SEG49 [29] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#0 plot::y#0 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG50 [30] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xlo,x
  //SEG51 [31] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#0 plot::y#0 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG52 [32] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG53 [33] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG54 [34] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG55 [35] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG56 [36] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG57 [37] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#0 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG58 [38] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_bit,x
  //SEG59 [39] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG60 [40] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    sta (plotter),y
  //SEG61 plot::@return
  //SEG62 [41] return  [ ]
    rts
}
//SEG63 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 3
  //SEG64 [43] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  //SEG65 [43] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG66 [43] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
  //SEG67 [43] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  //SEG68 [43] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG69 [43] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG70 init_plot_tables::@1
  b1:
  //SEG71 [44] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG72 [45] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG73 [46] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG74 [47] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG75 [48] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG76 [49] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG77 [50] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  //SEG78 [50] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG79 init_plot_tables::@2
  b2:
  //SEG80 [51] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG81 [52] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG82 [53] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  //SEG83 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    sta yoffs+1
  //SEG84 [53] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
  //SEG85 [53] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  //SEG86 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG87 [53] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG88 init_plot_tables::@3
  b3:
  //SEG89 [54] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG90 [55] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG91 [56] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG92 [57] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG93 [58] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG94 [59] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG95 [60] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG96 [61] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4
  //SEG97 init_plot_tables::@7
  //SEG98 [62] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG99 [63] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  //SEG100 [63] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG101 init_plot_tables::@4
  b4:
  //SEG102 [64] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG103 [65] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG104 init_plot_tables::@return
  //SEG105 [66] return  [ ]
    rts
  //SEG106 init_plot_tables::@10
  b10:
  //SEG107 [50] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  //SEG108 [50] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG109 init_screen
init_screen: {
    .label b = 3
    .label c = 3
  //SEG110 [68] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  //SEG111 [68] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
  //SEG112 [68] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  //SEG113 [68] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG114 init_screen::@1
  b1:
  //SEG115 [69] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG116 [70] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG117 [71] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1
    lda b
    cmp #<BITMAP+$2000
    bne b1
  //SEG118 [72] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  //SEG119 [72] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
  //SEG120 [72] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  //SEG121 [72] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG122 init_screen::@2
  b2:
  //SEG123 [73] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG124 [74] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG125 [75] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2
    lda c
    cmp #<SCREEN+$400
    bne b2
  //SEG126 init_screen::@return
  //SEG127 [76] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @5
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = (word) 53280
(byte*) BITMAP
(const byte*) BITMAP#0 BITMAP = (word) 8192
(byte) BMM
(const byte) BMM#0 BMM = (byte) 32
(byte*) COLS
(const byte*) COLS#0 COLS = (word) 55296
(byte) CSEL
(const byte) CSEL#0 CSEL = (byte) 8
(byte*) D011
(const byte*) D011#0 D011 = (word) 53265
(byte*) D016
(const byte*) D016#0 D016 = (word) 53270
(byte*) D018
(const byte*) D018#0 D018 = (word) 53272
(byte) DEN
(const byte) DEN#0 DEN = (byte) 16
(byte) ECM
(const byte) ECM#0 ECM = (byte) 64
(byte*) FGCOL
(const byte*) FGCOL#0 FGCOL = (word) 53281
(byte) MCM
(const byte) MCM#0 MCM = (byte) 16
(byte*) RASTER
(const byte*) RASTER#0 RASTER = (word) 53266
(byte) RSEL
(const byte) RSEL#0 RSEL = (byte) 8
(byte) RST8
(const byte) RST8#0 RST8 = (byte) 128
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (word) 1024
(void()) init_plot_tables()
(byte~) init_plot_tables::$0 reg byte a 22.0
(byte~) init_plot_tables::$10 reg byte a 22.0
(byte~) init_plot_tables::$6 $6 zp ZP_BYTE:2 11.0
(byte~) init_plot_tables::$7 reg byte a 22.0
(byte~) init_plot_tables::$8 reg byte a 22.0
(byte~) init_plot_tables::$9 reg byte a 22.0
(label) init_plot_tables::@1
(label) init_plot_tables::@10
(label) init_plot_tables::@2
(label) init_plot_tables::@3
(label) init_plot_tables::@4
(label) init_plot_tables::@7
(label) init_plot_tables::@return
(byte) init_plot_tables::bit
(byte) init_plot_tables::bit#1 reg byte y 33.0
(byte) init_plot_tables::bit#3 reg byte y 6.6000000000000005
(byte) init_plot_tables::bit#4 reg byte y 7.333333333333333
(byte) init_plot_tables::x
(byte) init_plot_tables::x#1 reg byte x 16.5
(byte) init_plot_tables::x#2 reg byte x 8.25
(byte) init_plot_tables::y
(byte) init_plot_tables::y#1 reg byte x 16.5
(byte) init_plot_tables::y#2 reg byte x 6.0
(byte*) init_plot_tables::yoffs
(byte*) init_plot_tables::yoffs#1 yoffs zp ZP_PTR_BYTE:3 22.0
(byte*) init_plot_tables::yoffs#2 yoffs zp ZP_PTR_BYTE:3 6.111111111111112
(byte*) init_plot_tables::yoffs#4 yoffs zp ZP_PTR_BYTE:3 11.0
(void()) init_screen()
(label) init_screen::@1
(label) init_screen::@2
(label) init_screen::@return
(byte*) init_screen::b
(byte*) init_screen::b#1 b zp ZP_PTR_BYTE:3 16.5
(byte*) init_screen::b#2 b zp ZP_PTR_BYTE:3 16.5
(byte*) init_screen::c
(byte*) init_screen::c#1 c zp ZP_PTR_BYTE:3 16.5
(byte*) init_screen::c#2 c zp ZP_PTR_BYTE:3 16.5
(void()) main()
(byte~) main::$10 reg byte x 22.0
(byte~) main::$11 reg byte x 22.0
(byte~) main::$5 reg byte a 202.0
(byte~) main::$7 reg byte x 22.0
(byte~) main::$8 reg byte x 22.0
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@7
(label) main::@return
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$0 reg byte a 4.0
(byte~) plot::$1 reg byte a 4.0
(byte~) plot::$2 reg byte a 4.0
(byte~) plot::$3 reg byte a 4.0
(byte~) plot::$5 $5 zp ZP_BYTE:8 2.0
(byte~) plot::$6 reg byte a 4.0
(byte~) plot::$7 reg byte a 4.0
(label) plot::@return
(byte*) plot::plotter
(byte*) plot::plotter#0 plotter zp ZP_PTR_BYTE:3 1.5
(byte*) plot::plotter_x
(byte*) plot::plotter_x#1 plotter_x zp ZP_PTR_BYTE:3 2.0
(byte*) plot::plotter_x#2 plotter_x zp ZP_PTR_BYTE:3 0.8
(byte*) plot::plotter_y
(byte*) plot::plotter_y#1 plotter_y zp ZP_PTR_BYTE:6 2.0
(byte*) plot::plotter_y#2 plotter_y zp ZP_PTR_BYTE:6 4.0
(byte) plot::x
(byte) plot::x#0 x zp ZP_BYTE:5 8.916666666666664
(byte) plot::y
(byte) plot::y#0 reg byte y 15.000000000000002
(byte[]) plot_bit
(const byte[]) plot_bit#0 plot_bit = (word) 5120
(byte[]) plot_xhi
(const byte[]) plot_xhi#0 plot_xhi = (word) 4352
(byte[]) plot_xlo
(const byte[]) plot_xlo#0 plot_xlo = (word) 4096
(byte[]) plot_yhi
(const byte[]) plot_yhi#0 plot_yhi = (word) 4864
(byte[]) plot_ylo
(const byte[]) plot_ylo#0 plot_ylo = (word) 4608
(void()) plots()
(byte~) plots::$0 reg byte y 101.0
(byte~) plots::$1 reg byte a 101.0
(label) plots::@1
(label) plots::@3
(label) plots::@return
(byte) plots::i
(byte) plots::i#1 i zp ZP_BYTE:2 151.5
(byte) plots::i#2 i zp ZP_BYTE:2 67.33333333333333
(byte) plots_cnt
(const byte) plots_cnt#0 plots_cnt = (byte) 8
(byte[]) plots_x
(const byte[]) plots_x#0 plots_x = { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40 }
(byte[]) plots_y
(const byte[]) plots_y#0 plots_y = { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40 }

zp ZP_BYTE:2 [ plots::i#2 plots::i#1 init_plot_tables::$6 ]
reg byte x [ init_plot_tables::x#2 init_plot_tables::x#1 ]
reg byte y [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ]
reg byte x [ init_plot_tables::y#2 init_plot_tables::y#1 ]
zp ZP_PTR_BYTE:3 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 init_screen::c#2 init_screen::c#1 plot::plotter_x#1 plot::plotter_x#2 plot::plotter#0 ]
reg byte a [ main::$5 ]
reg byte x [ main::$7 ]
reg byte x [ main::$8 ]
reg byte x [ main::$10 ]
reg byte x [ main::$11 ]
reg byte y [ plots::$0 ]
reg byte a [ plots::$1 ]
zp ZP_BYTE:5 [ plot::x#0 ]
reg byte y [ plot::y#0 ]
reg byte a [ plot::$0 ]
reg byte a [ plot::$1 ]
reg byte a [ plot::$2 ]
zp ZP_PTR_BYTE:6 [ plot::plotter_y#1 plot::plotter_y#2 ]
reg byte a [ plot::$3 ]
zp ZP_BYTE:8 [ plot::$5 ]
reg byte a [ plot::$6 ]
reg byte a [ plot::$7 ]
reg byte a [ init_plot_tables::$0 ]
reg byte a [ init_plot_tables::$7 ]
reg byte a [ init_plot_tables::$8 ]
reg byte a [ init_plot_tables::$9 ]
reg byte a [ init_plot_tables::$10 ]

FINAL CODE
//SEG0 Global Constants & labels
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const RASTER = $d012
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const D018 = $d018
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const COLS = $d800
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plots_cnt = 8
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  plots_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28
  plots_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28
//SEG1 @begin
//SEG2 @5
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [67] phi from main to init_screen [phi:main->init_screen]
    jsr init_screen
  //SEG12 main::@5
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [42] phi from main::@5 to init_plot_tables [phi:main::@5->init_plot_tables]
    jsr init_plot_tables
  //SEG15 main::@2
  b2:
  //SEG16 [7] (byte~) main::$5 ← * (const byte*) RASTER#0 [ main::$5 ] -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [8] if((byte~) main::$5!=(byte) 255) goto main::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b2
  //SEG18 main::@3
  //SEG19 [9] (byte~) main::$7 ← * (const byte*) BGCOL#0 [ main::$7 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG20 [10] (byte~) main::$8 ← (byte~) main::$7 + (byte) 1 [ main::$8 ] -- xby=xby_plus_1 
    inx
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte~) main::$8 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG22 [12] call plots param-assignment [ ]
  //SEG23 [18] phi from main::@3 to plots [phi:main::@3->plots]
    jsr plots
  //SEG24 main::@7
  //SEG25 [13] (byte~) main::$10 ← * (const byte*) BGCOL#0 [ main::$10 ] -- xby=_star_cowo1 
    ldx BGCOL
  //SEG26 [14] (byte~) main::$11 ← (byte~) main::$10 - (byte) 1 [ main::$11 ] -- xby=xby_minus_1 
    dex
  //SEG27 [15] *((const byte*) BGCOL#0) ← (byte~) main::$11 [ ] -- _star_cowo1=xby 
    stx BGCOL
  //SEG28 [16] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG29 main::@return
  //SEG30 [17] return  [ ]
    rts
}
//SEG31 plots
plots: {
    .label i = 2
  //SEG32 [19] phi from plots to plots::@1 [phi:plots->plots::@1]
  //SEG33 [19] phi (byte) plots::i#2 = (byte) 0 [phi:plots->plots::@1#0] -- zpby1=coby1 
    lda #0
    sta i
  //SEG34 [19] phi from plots::@3 to plots::@1 [phi:plots::@3->plots::@1]
  //SEG35 [19] phi (byte) plots::i#2 = (byte) plots::i#1 [phi:plots::@3->plots::@1#0] -- register_copy 
  //SEG36 plots::@1
  b1:
  //SEG37 [20] (byte~) plots::$0 ← (const byte[]) plots_x#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx i
    lda plots_x,x
    tay
  //SEG38 [21] (byte~) plots::$1 ← (const byte[]) plots_y#0 *idx (byte) plots::i#2 [ plots::i#2 plots::$0 plots::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx i
    lda plots_y,x
  //SEG39 [22] (byte) plot::x#0 ← (byte~) plots::$0 [ plots::i#2 plots::$1 plot::x#0 ] -- zpby1=yby 
    sty plot.x
  //SEG40 [23] (byte) plot::y#0 ← (byte~) plots::$1 [ plots::i#2 plot::x#0 plot::y#0 ] -- yby=aby 
    tay
  //SEG41 [24] call plot param-assignment [ plots::i#2 ]
    jsr plot
  //SEG42 plots::@3
  //SEG43 [25] (byte) plots::i#1 ← ++ (byte) plots::i#2 [ plots::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG44 [26] if((byte) plots::i#1<(const byte) plots_cnt#0) goto plots::@1 [ plots::i#1 ] -- zpby1_lt_coby1_then_la1 
    lda i
    cmp #plots_cnt
    bcc b1
  //SEG45 plots::@return
  //SEG46 [27] return  [ ]
    rts
}
//SEG47 plot
plot: {
    .label _5 = 8
    .label x = 5
    .label plotter_x = 3
    .label plotter_y = 6
    .label plotter = 3
  //SEG48 [28] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::$0 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xhi,x
  //SEG49 [29] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#0 plot::y#0 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG50 [30] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#0 [ plot::x#0 plot::y#0 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_xlo,x
  //SEG51 [31] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#0 plot::y#0 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG52 [32] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#0 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG53 [33] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#0 plot::y#0 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG54 [34] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#0 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG55 [35] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG56 [36] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG57 [37] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#0 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG58 [38] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#0 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_zpby1 
    ldx x
    lda plot_bit,x
  //SEG59 [39] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG60 [40] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    sta (plotter),y
  //SEG61 plot::@return
  //SEG62 [41] return  [ ]
    rts
}
//SEG63 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 3
  //SEG64 [43] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  //SEG65 [43] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG66 [43] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
  //SEG67 [43] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  //SEG68 [43] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG69 [43] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG70 init_plot_tables::@1
  b1:
  //SEG71 [44] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG72 [45] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG73 [46] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG74 [47] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG75 [48] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG76 [49] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG77 [50] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  //SEG78 [50] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG79 init_plot_tables::@2
  b2:
  //SEG80 [51] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG81 [52] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG82 [53] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  //SEG83 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    sta yoffs+1
  //SEG84 [53] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
  //SEG85 [53] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  //SEG86 [53] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG87 [53] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG88 init_plot_tables::@3
  b3:
  //SEG89 [54] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG90 [55] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG91 [56] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG92 [57] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG93 [58] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG94 [59] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG95 [60] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG96 [61] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4
  //SEG97 init_plot_tables::@7
  //SEG98 [62] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG99 [63] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  //SEG100 [63] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG101 init_plot_tables::@4
  b4:
  //SEG102 [64] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG103 [65] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG104 init_plot_tables::@return
  //SEG105 [66] return  [ ]
    rts
  //SEG106 init_plot_tables::@10
  b10:
  //SEG107 [50] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  //SEG108 [50] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG109 init_screen
init_screen: {
    .label b = 3
    .label c = 3
  //SEG110 [68] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  //SEG111 [68] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
  //SEG112 [68] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  //SEG113 [68] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG114 init_screen::@1
  b1:
  //SEG115 [69] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG116 [70] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG117 [71] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1
    lda b
    cmp #<BITMAP+$2000
    bne b1
  //SEG118 [72] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  //SEG119 [72] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
  //SEG120 [72] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  //SEG121 [72] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG122 init_screen::@2
  b2:
  //SEG123 [73] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG124 [74] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG125 [75] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2
    lda c
    cmp #<SCREEN+$400
    bne b2
  //SEG126 init_screen::@return
  //SEG127 [76] return  [ ]
    rts
}

