Setting inferred volatile on symbol affected by address-of (byte**) main::pscreen ← &(byte*) main::screen

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (volatile byte*) main::screen ← (byte*)(number) $400
  *(*((const byte**) main::pscreen)) ← (byte) 'a'
  *((const byte**) main::pscreen) ← ++ *((const byte**) main::pscreen)
  *(*((const byte**) main::pscreen)) ← (byte) 'b'
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@return
(const byte**) main::pscreen = &(volatile byte*) main::screen
(volatile byte*) main::screen loadstore

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] (volatile byte*) main::screen ← (byte*) 1024
  [1] *(*((const byte**) main::pscreen)) ← (byte) 'a'
  [2] *((const byte**) main::pscreen) ← ++ *((const byte**) main::pscreen)
  [3] *(*((const byte**) main::pscreen)) ← (byte) 'b'
  to:main::@return
main::@return: scope:[main]  from main
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(volatile byte*) main::screen loadstore 20.0

Initial phi equivalence classes
Added variable main::screen to live range equivalence class [ main::screen ]
Complete equivalence classes
[ main::screen ]
Allocated zp[2]:2 [ main::screen ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests optimization of constant pointers to pointers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label pscreen = screen
    .label screen = 2
    // [0] (volatile byte*) main::screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] *(*((const byte**) main::pscreen)) ← (byte) 'a' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'a'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // [2] *((const byte**) main::pscreen) ← ++ *((const byte**) main::pscreen) -- _deref_pptc1=_inc__deref_pptc1 
    inc.z pscreen
    bne !+
    inc.z pscreen+1
  !:
    // [3] *(*((const byte**) main::pscreen)) ← (byte) 'b' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'b'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (volatile byte*) main::screen ← (byte*) 1024 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(*((const byte**) main::pscreen)) ← (byte) 'a' [ ] (  [ ] { }  ) always clobbers reg byte a reg byte y 
Statement [3] *(*((const byte**) main::pscreen)) ← (byte) 'b' [ ] (  [ ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ main::screen ] : zp[2]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 20: zp[2]:2 [ main::screen ] 
Uplift Scope [] 

Uplifting [main] best 75 combination zp[2]:2 [ main::screen ] 
Uplifting [] best 75 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests optimization of constant pointers to pointers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label pscreen = screen
    .label screen = 2
    // [0] (volatile byte*) main::screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] *(*((const byte**) main::pscreen)) ← (byte) 'a' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'a'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // [2] *((const byte**) main::pscreen) ← ++ *((const byte**) main::pscreen) -- _deref_pptc1=_inc__deref_pptc1 
    inc.z pscreen
    bne !+
    inc.z pscreen+1
  !:
    // [3] *(*((const byte**) main::pscreen)) ← (byte) 'b' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'b'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(const byte**) main::pscreen = &(volatile byte*) main::screen
(volatile byte*) main::screen loadstore zp[2]:2 20.0

zp[2]:2 [ main::screen ]


FINAL ASSEMBLER
Score: 72

  // File Comments
// Tests optimization of constant pointers to pointers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label pscreen = screen
    .label screen = 2
    // screen = 0x400
    // [0] (volatile byte*) main::screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // **pscreen = 'a'
    // [1] *(*((const byte**) main::pscreen)) ← (byte) 'a' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'a'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // (*pscreen)++;
    // [2] *((const byte**) main::pscreen) ← ++ *((const byte**) main::pscreen) -- _deref_pptc1=_inc__deref_pptc1 
    inc.z pscreen
    bne !+
    inc.z pscreen+1
  !:
    // **pscreen = 'b'
    // [3] *(*((const byte**) main::pscreen)) ← (byte) 'b' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'b'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // main::@return
    // }
    // [4] return 
    rts
}
  // File Data

