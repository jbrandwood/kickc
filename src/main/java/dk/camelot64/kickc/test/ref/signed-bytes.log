
void main() {
    byte[] screen = $0400;
    byte j = 0;
    signed byte i = -127;
    while(i<127) {
        screen[j] = i;
        i++;
        j++;
    }

}
Adding pre/post-modifier (signed byte) main::i ← ++ (signed byte) main::i
Adding pre/post-modifier (byte) main::j ← ++ (byte) main::j
PROGRAM
proc (void()) main()
  (byte[]) main::screen ← (word/signed word) 1024
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (signed byte/signed word~) main::$0 ← - (byte/signed byte/word/signed word) 127
  (signed byte) main::i ← (signed byte/signed word~) main::$0
main::@1:
  (boolean~) main::$1 ← (signed byte) main::i < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  goto main::@3
main::@2:
  *((byte[]) main::screen + (byte) main::j) ← (signed byte) main::i
  (signed byte) main::i ← ++ (signed byte) main::i
  (byte) main::j ← ++ (byte) main::j
  goto main::@1
main::@3:
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(signed byte/signed word~) main::$0
(boolean~) main::$1
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(signed byte) main::i
(byte) main::j
(byte[]) main::screen

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte[]) main::screen ← (word/signed word) 1024
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (signed byte/signed word~) main::$0 ← - (byte/signed byte/word/signed word) 127
  (signed byte) main::i ← (signed byte/signed word~) main::$0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$1 ← (signed byte) main::i < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1 main::@5
  *((byte[]) main::screen + (byte) main::j) ← (signed byte) main::i
  (signed byte) main::i ← ++ (signed byte) main::i
  (byte) main::j ← ++ (byte) main::j
  to:main::@1
main::@4: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@4 main::@6
  to:main::@return
main::@5: scope:[main]  from
  to:main::@2
main::@6: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
Removing empty block main::@3
Removing empty block main::@5
Removing empty block main::@6
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte[]) main::screen ← (word/signed word) 1024
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (signed byte/signed word~) main::$0 ← - (byte/signed byte/word/signed word) 127
  (signed byte) main::i ← (signed byte/signed word~) main::$0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$1 ← (signed byte) main::i < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((byte[]) main::screen + (byte) main::j) ← (signed byte) main::i
  (signed byte) main::i ← ++ (signed byte) main::i
  (byte) main::j ← ++ (byte) main::j
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[]) main::screen ← (word/signed word) 1024
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (signed byte/signed word~) main::$0 ← - (byte/signed byte/word/signed word) 127
  (signed byte) main::i ← (signed byte/signed word~) main::$0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$1 ← (signed byte) main::i < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((byte[]) main::screen + (byte) main::j) ← (signed byte) main::i
  (signed byte) main::i ← ++ (signed byte) main::i
  (byte) main::j ← ++ (byte) main::j
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[]) main::screen#0 ← (word/signed word) 1024
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (signed byte/signed word~) main::$0 ← - (byte/signed byte/word/signed word) 127
  (signed byte) main::i#0 ← (signed byte/signed word~) main::$0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#1 )
  (byte[]) main::screen#2 ← phi( main/(byte[]) main::screen#0 main::@2/(byte[]) main::screen#1 )
  (signed byte) main::i#2 ← phi( main/(signed byte) main::i#0 main::@2/(signed byte) main::i#1 )
  (boolean~) main::$1 ← (signed byte) main::i#2 < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#3 )
  (byte[]) main::screen#1 ← phi( main::@1/(byte[]) main::screen#2 )
  (signed byte) main::i#3 ← phi( main::@1/(signed byte) main::i#2 )
  *((byte[]) main::screen#1 + (byte) main::j#2) ← (signed byte) main::i#3
  (signed byte) main::i#1 ← ++ (signed byte) main::i#3
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[]) main::screen#0 ← (word/signed word) 1024
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (signed byte/signed word~) main::$0 ← - (byte/signed byte/word/signed word) 127
  (signed byte) main::i#0 ← (signed byte/signed word~) main::$0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#1 )
  (byte[]) main::screen#2 ← phi( main/(byte[]) main::screen#0 main::@2/(byte[]) main::screen#1 )
  (signed byte) main::i#2 ← phi( main/(signed byte) main::i#0 main::@2/(signed byte) main::i#1 )
  (boolean~) main::$1 ← (signed byte) main::i#2 < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#3 )
  (byte[]) main::screen#1 ← phi( main::@1/(byte[]) main::screen#2 )
  (signed byte) main::i#3 ← phi( main::@1/(signed byte) main::i#2 )
  *((byte[]) main::screen#1 + (byte) main::j#2) ← (signed byte) main::i#3
  (signed byte) main::i#1 ← ++ (signed byte) main::i#3
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(signed byte/signed word~) main::$0
(boolean~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(signed byte) main::i
(signed byte) main::i#0
(signed byte) main::i#1
(signed byte) main::i#2
(signed byte) main::i#3
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte[]) main::screen
(byte[]) main::screen#0
(byte[]) main::screen#1
(byte[]) main::screen#2

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[]) main::screen#0 ← (word/signed word) 1024
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (signed byte/signed word~) main::$0 ← - (byte/signed byte/word/signed word) 127
  (signed byte) main::i#0 ← (signed byte/signed word~) main::$0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#1 )
  (byte[]) main::screen#2 ← phi( main/(byte[]) main::screen#0 main::@2/(byte[]) main::screen#1 )
  (signed byte) main::i#2 ← phi( main/(signed byte) main::i#0 main::@2/(signed byte) main::i#1 )
  (boolean~) main::$1 ← (signed byte) main::i#2 < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#3 )
  (byte[]) main::screen#1 ← phi( main::@1/(byte[]) main::screen#2 )
  (signed byte) main::i#3 ← phi( main::@1/(signed byte) main::i#2 )
  *((byte[]) main::screen#1 + (byte) main::j#2) ← (signed byte) main::i#3
  (signed byte) main::i#1 ← ++ (signed byte) main::i#3
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Alias (signed byte) main::i#0 = (signed byte/signed word~) main::$0 
Alias (signed byte) main::i#2 = (signed byte) main::i#3 
Alias (byte[]) main::screen#1 = (byte[]) main::screen#2 
Alias (byte) main::j#2 = (byte) main::j#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[]) main::screen#0 ← (word/signed word) 1024
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (signed byte) main::i#0 ← - (byte/signed byte/word/signed word) 127
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#2 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#1 )
  (byte[]) main::screen#1 ← phi( main/(byte[]) main::screen#0 main::@2/(byte[]) main::screen#1 )
  (signed byte) main::i#2 ← phi( main/(signed byte) main::i#0 main::@2/(signed byte) main::i#1 )
  (boolean~) main::$1 ← (signed byte) main::i#2 < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((byte[]) main::screen#1 + (byte) main::j#2) ← (signed byte) main::i#2
  (signed byte) main::i#1 ← ++ (signed byte) main::i#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Self Phi Eliminated (byte[]) main::screen#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[]) main::screen#0 ← (word/signed word) 1024
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (signed byte) main::i#0 ← - (byte/signed byte/word/signed word) 127
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#2 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#1 )
  (byte[]) main::screen#1 ← phi( main/(byte[]) main::screen#0 )
  (signed byte) main::i#2 ← phi( main/(signed byte) main::i#0 main::@2/(signed byte) main::i#1 )
  (boolean~) main::$1 ← (signed byte) main::i#2 < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((byte[]) main::screen#1 + (byte) main::j#2) ← (signed byte) main::i#2
  (signed byte) main::i#1 ← ++ (signed byte) main::i#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Redundant Phi (byte[]) main::screen#1 (byte[]) main::screen#0
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[]) main::screen#0 ← (word/signed word) 1024
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (signed byte) main::i#0 ← - (byte/signed byte/word/signed word) 127
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#2 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#1 )
  (signed byte) main::i#2 ← phi( main/(signed byte) main::i#0 main::@2/(signed byte) main::i#1 )
  (boolean~) main::$1 ← (signed byte) main::i#2 < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2
  (signed byte) main::i#1 ← ++ (signed byte) main::i#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Simple Condition (boolean~) main::$1 if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[]) main::screen#0 ← (word/signed word) 1024
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (signed byte) main::i#0 ← - (byte/signed byte/word/signed word) 127
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#2 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#1 )
  (signed byte) main::i#2 ← phi( main/(signed byte) main::i#0 main::@2/(signed byte) main::i#1 )
  if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2
  (signed byte) main::i#1 ← ++ (signed byte) main::i#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte[]) main::screen#0 = 1024
Constant (const byte) main::j#0 = 0
Constant (const signed byte) main::i#0 = -127
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#2 ← phi( main/(const byte) main::j#0 main::@2/(byte) main::j#1 )
  (signed byte) main::i#2 ← phi( main/(const signed byte) main::i#0 main::@2/(signed byte) main::i#1 )
  if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((const byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2
  (signed byte) main::i#1 ← ++ (signed byte) main::i#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const signed byte) main::i#0
Inlining constant with var siblings (const signed byte) main::i#0
Constant inlined main::i#0 = -(byte/signed byte/word/signed word) 127
Constant inlined main::j#0 = (byte/signed byte/word/signed word) 0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::j#1 )
  (signed byte) main::i#2 ← phi( main/-(byte/signed byte/word/signed word) 127 main::@2/(signed byte) main::i#1 )
  if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((const byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2
  (signed byte) main::i#1 ← ++ (signed byte) main::i#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(signed byte) main::i
(signed byte) main::i#1
(signed byte) main::i#2
(byte) main::j
(byte) main::j#1
(byte) main::j#2
(byte[]) main::screen
(const byte[]) main::screen#0 = (word/signed word) 1024

Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte~) main::j#4 )
  (signed byte) main::i#2 ← phi( main/-(byte/signed byte/word/signed word) 127 main::@2/(signed byte~) main::i#4 )
  if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
main::@2: scope:[main]  from main::@1
  *((const byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2
  (signed byte) main::i#1 ← ++ (signed byte) main::i#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (signed byte~) main::i#4 ← (signed byte) main::i#1
  (byte~) main::j#4 ← (byte) main::j#1
  to:main::@1

Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:0 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [2] (byte) main::j#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte~) main::j#4 ) [ main::i#2 main::j#2 ]
  [2] (signed byte) main::i#2 ← phi( main/-(byte/signed byte/word/signed word) 127 main::@2/(signed byte~) main::i#4 ) [ main::i#2 main::j#2 ]
  [3] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return  [ ]
  to:@return
main::@2: scope:[main]  from main::@1
  [5] *((const byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2 [ main::i#2 main::j#2 ]
  [6] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ]
  [7] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ]
  [8] (signed byte~) main::i#4 ← (signed byte) main::i#1 [ main::i#4 main::j#1 ]
  [9] (byte~) main::j#4 ← (byte) main::j#1 [ main::i#4 main::j#4 ]
  to:main::@1

Created 2 initial phi equivalence classes
Coalesced [8] main::i#4 ← main::i#1
Coalesced [9] main::j#4 ← main::j#1
Coalesced down to 2 phi equivalence classes
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [2] (byte) main::j#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::j#1 ) [ main::i#2 main::j#2 ]
  [2] (signed byte) main::i#2 ← phi( main/-(byte/signed byte/word/signed word) 127 main::@2/(signed byte) main::i#1 ) [ main::i#2 main::j#2 ]
  [3] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return  [ ]
  to:@return
main::@2: scope:[main]  from main::@1
  [5] *((const byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2 [ main::i#2 main::j#2 ]
  [6] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ]
  [7] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ]
  to:main::@1

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  [1] phi() [ ] ( main:0 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [2] (byte) main::j#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::j#1 ) [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] )
  [2] (signed byte) main::i#2 ← phi( main/-(byte/signed byte/word/signed word) 127 main::@2/(signed byte) main::i#1 ) [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] )
  [3] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return  [ ] ( main:0 [ ] )
  to:@return
main::@2: scope:[main]  from main::@1
  [5] *((const byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] )
  [6] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ] ( main:0 [ main::j#2 main::i#1 ] )
  [7] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ] ( main:0 [ main::i#1 main::j#1 ] )
  to:main::@1

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@return dominated by  main::@return @1 @begin main::@1 main 
main::@2 dominated by  @1 @begin main::@1 main::@2 main 

Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(signed byte) main::i
(signed byte) main::i#1 11.0
(signed byte) main::i#2 14.666666666666666
(byte) main::j
(byte) main::j#1 22.0
(byte) main::j#2 8.25
(byte[]) main::screen

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Allocated zp ZP_SBYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
  jmp b1
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  jmp bend
//SEG6 @end
bend:
//SEG7 main
main: {
    .const screen = $400
    .label i = 2
    .label j = 3
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::j#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta j
  //SEG10 [2] phi (signed byte) main::i#2 = -(byte/signed byte/word/signed word) 127 [phi:main->main::@1#1] -- zpsby1=cosby1 
    lda #-$7f
    sta i
    jmp b1
  //SEG11 main::@1
  b1:
  //SEG12 [3] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) -- zpsby1_lt_coby1_then_la1 
    lda i
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi b2
    jmp breturn
  //SEG13 main::@return
  breturn:
  //SEG14 [4] return  [ ] ( main:0 [ ] )
    rts
  //SEG15 main::@2
  b2:
  //SEG16 [5] *((const byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) -- cowo1_derefidx_zpby1=zpsby1 
    lda i
    ldx j
    sta screen,x
  //SEG17 [6] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ] ( main:0 [ main::j#2 main::i#1 ] ) -- zpsby1=_inc_zpsby1 
    inc i
  //SEG18 [7] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ] ( main:0 [ main::i#1 main::j#1 ] ) -- zpby1=_inc_zpby1 
    inc j
  //SEG19 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG20 [2] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG21 [2] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential register analysis [3] if(main::i#2<127) goto main::@2 missing fragment xsby_lt_coby1_then_la1 allocation: reg sbyte x [ main::i#2 main::i#1 ] 
Potential register analysis [3] if(main::i#2<127) goto main::@2 missing fragment ysby_lt_coby1_then_la1 allocation: reg sbyte y [ main::i#2 main::i#1 ] 
MISSING FRAGMENTS
  xsby_lt_coby1_then_la1
  ysby_lt_coby1_then_la1
Statement [3] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Potential register analysis [3] if(main::i#2<127) goto main::@2 missing fragment xsby_lt_coby1_then_la1 allocation: reg sbyte x [ main::i#2 main::i#1 ] 
Potential register analysis [3] if(main::i#2<127) goto main::@2 missing fragment ysby_lt_coby1_then_la1 allocation: reg sbyte y [ main::i#2 main::i#1 ] 
MISSING FRAGMENTS
  xsby_lt_coby1_then_la1
  ysby_lt_coby1_then_la1
Statement [3] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_SBYTE:2 [ main::i#2 main::i#1 ] : zp ZP_SBYTE:2 , reg sbyte a , reg sbyte x , reg sbyte y , 
Potential registers zp ZP_BYTE:3 [ main::j#2 main::j#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 30.25: zp ZP_BYTE:3 [ main::j#2 main::j#1 ] 25.67: zp ZP_SBYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 495 combination reg byte x [ main::j#2 main::j#1 ] zp ZP_SBYTE:2 [ main::i#2 main::i#1 ] 
Uplifting [] best 495 combination 
MISSING FRAGMENTS
  asby=_inc_asby
  cowo1_derefidx_xby=asby
  cowo1_derefidx_yby=asby
  xsby_lt_coby1_then_la1
  ysby_lt_coby1_then_la1
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
    .const screen = $400
    .label i = 2
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::j#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG10 [2] phi (signed byte) main::i#2 = -(byte/signed byte/word/signed word) 127 [phi:main->main::@1#1] -- zpsby1=cosby1 
    lda #-$7f
    sta i
  //SEG11 main::@1
  b1:
  //SEG12 [3] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) -- zpsby1_lt_coby1_then_la1 
    lda i
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi b2
  //SEG13 main::@return
  breturn:
  //SEG14 [4] return  [ ] ( main:0 [ ] )
    rts
  //SEG15 main::@2
  b2:
  //SEG16 [5] *((const byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) -- cowo1_derefidx_xby=zpsby1 
    lda i
    sta screen,x
  //SEG17 [6] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ] ( main:0 [ main::j#2 main::i#1 ] ) -- zpsby1=_inc_zpsby1 
    inc i
  //SEG18 [7] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ] ( main:0 [ main::i#1 main::j#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG20 [2] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG21 [2] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
}

Removing instruction bbegin:
Removing instruction main_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @1 to main [phi:@1->main]
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
    .const screen = $400
    .label i = 2
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::j#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG10 [2] phi (signed byte) main::i#2 = -(byte/signed byte/word/signed word) 127 [phi:main->main::@1#1] -- zpsby1=cosby1 
    lda #-$7f
    sta i
  //SEG11 main::@1
  b1:
  //SEG12 [3] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) -- zpsby1_lt_coby1_then_la1 
    lda i
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi b2
  //SEG13 main::@return
  breturn:
  //SEG14 [4] return  [ ] ( main:0 [ ] )
    rts
  //SEG15 main::@2
  b2:
  //SEG16 [5] *((const byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) -- cowo1_derefidx_xby=zpsby1 
    lda i
    sta screen,x
  //SEG17 [6] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ] ( main:0 [ main::j#2 main::i#1 ] ) -- zpsby1=_inc_zpsby1 
    inc i
  //SEG18 [7] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ] ( main:0 [ main::i#1 main::j#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG20 [2] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG21 [2] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
}

Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Removing instruction b1_from_b2:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @1 to main [phi:@1->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
    .const screen = $400
    .label i = 2
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::j#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG10 [2] phi (signed byte) main::i#2 = -(byte/signed byte/word/signed word) 127 [phi:main->main::@1#1] -- zpsby1=cosby1 
    lda #-$7f
    sta i
  //SEG11 main::@1
  b1:
  //SEG12 [3] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) -- zpsby1_lt_coby1_then_la1 
    lda i
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi b2
  //SEG13 main::@return
  //SEG14 [4] return  [ ] ( main:0 [ ] )
    rts
  //SEG15 main::@2
  b2:
  //SEG16 [5] *((const byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) -- cowo1_derefidx_xby=zpsby1 
    lda i
    sta screen,x
  //SEG17 [6] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ] ( main:0 [ main::j#2 main::i#1 ] ) -- zpsby1=_inc_zpsby1 
    inc i
  //SEG18 [7] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ] ( main:0 [ main::i#1 main::j#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG20 [2] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG21 [2] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
}

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(signed byte) main::i
(signed byte) main::i#1 i zp ZP_SBYTE:2 11.0
(signed byte) main::i#2 i zp ZP_SBYTE:2 14.666666666666666
(byte) main::j
(byte) main::j#1 reg byte x 22.0
(byte) main::j#2 reg byte x 8.25
(byte[]) main::screen
(const byte[]) main::screen#0 screen = (word/signed word) 1024

zp ZP_SBYTE:2 [ main::i#2 main::i#1 ]
reg byte x [ main::j#2 main::j#1 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @1 to main [phi:@1->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
    .const screen = $400
    .label i = 2
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::j#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG10 [2] phi (signed byte) main::i#2 = -(byte/signed byte/word/signed word) 127 [phi:main->main::@1#1] -- zpsby1=cosby1 
    lda #-$7f
    sta i
  //SEG11 main::@1
  b1:
  //SEG12 [3] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) -- zpsby1_lt_coby1_then_la1 
    lda i
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi b2
  //SEG13 main::@return
  //SEG14 [4] return  [ ] ( main:0 [ ] )
    rts
  //SEG15 main::@2
  b2:
  //SEG16 [5] *((const byte[]) main::screen#0 + (byte) main::j#2) ← (signed byte) main::i#2 [ main::i#2 main::j#2 ] ( main:0 [ main::i#2 main::j#2 ] ) -- cowo1_derefidx_xby=zpsby1 
    lda i
    sta screen,x
  //SEG17 [6] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ] ( main:0 [ main::j#2 main::i#1 ] ) -- zpsby1=_inc_zpsby1 
    inc i
  //SEG18 [7] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ] ( main:0 [ main::i#1 main::j#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG20 [2] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG21 [2] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
}

