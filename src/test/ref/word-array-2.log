Fixing pointer array-indexing *((const word*) words + (word~) main::$0)
Fixing pointer array-indexing *((const word*) words + (word)(number) $ff)
Fixing pointer array-indexing *((const word*) main::SCREEN + (number) 0)

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (word~) main::$0 ← ((word)) (byte) main::i#2
  (word~) main::$1 ← ((word)) (byte) main::i#2
  (number~) main::$2 ← (word~) main::$1 * (number) $100
  (number~) main::$3 ← (number~) main::$2 + (byte) main::i#2
  (word~) main::$5 ← (word~) main::$0 * (const byte) SIZEOF_WORD
  *((const word*) words + (word~) main::$5) ← (number~) main::$3
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$ff)
  (bool~) main::$4 ← (byte) main::i#1 != rangelast(0,$ff)
  if((bool~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (word~) main::$6 ← (word)(number) $ff * (const byte) SIZEOF_WORD
  (number~) main::$7 ← (number) 0 * (const byte) SIZEOF_WORD
  *((const word*) main::SCREEN + (number~) main::$7) ← *((const word*) words + (word~) main::$6)
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(word~) main::$0
(word~) main::$1
(number~) main::$2
(number~) main::$3
(bool~) main::$4
(word~) main::$5
(word~) main::$6
(number~) main::$7
(label) main::@1
(label) main::@2
(label) main::@return
(const word*) main::SCREEN = (word*)(number) $400
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(const word*) words[(number) $100]  = { fill( $100, 0) }

Adding number conversion cast (unumber) $100 in (number~) main::$2 ← (word~) main::$1 * (number) $100
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (word~) main::$1 * (unumber)(number) $100
Adding number conversion cast (unumber) main::$3 in (number~) main::$3 ← (unumber~) main::$2 + (byte) main::i#2
Adding number conversion cast (unumber) 0 in (number~) main::$7 ← (number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$7 in (number~) main::$7 ← (unumber)(number) 0 * (const byte) SIZEOF_WORD
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (word~) main::$0 ← (word)(byte) main::i#2
Inlining cast (word~) main::$1 ← (word)(byte) main::i#2
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast $100
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in (unumber~) main::$2 ← (word~) main::$1 * (word) $100
Inferred type updated to word in (unumber~) main::$3 ← (word~) main::$2 + (byte) main::i#2
Inferred type updated to byte in (unumber~) main::$7 ← (byte) 0 * (const byte) SIZEOF_WORD
Simple Condition (bool~) main::$4 [10] if((byte) main::i#1!=rangelast(0,$ff)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [11] (word~) main::$6 ← (word) $ff * (const byte) SIZEOF_WORD
Constant right-side identified [12] (byte~) main::$7 ← (byte) 0 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::i#0 = 0
Constant (const word) main::$6 = $ff*SIZEOF_WORD
Constant (const byte) main::$7 = 0*SIZEOF_WORD
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,$ff)) goto main::@1 to (number) 0
De-inlining pointer[w] to *(pointer+w)   [7] *((const word*) words + (word~) main::$5) ← (word~) main::$3
De-inlining pointer[w] to *(pointer+w)   [13] *((const word*) main::SCREEN + (const byte) main::$7) ← *((const word*) words + (const word) main::$6)
Successful SSA optimization Pass2DeInlineWordDerefIdx
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in [13] *((const word*) main::SCREEN + (const byte) main::$7) ← *((word*~) main::$9)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::$7
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 0 in if((byte) main::i#1!=(number) 0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [10] (word*~) main::$9 ← (const word*) words + (const word) main::$6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word*) main::$9 = words+main::$6
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [3] (word~) main::$2 ← (word~) main::$1 * (word) $100
Rewriting multiplication to use shift [5] (word~) main::$5 ← (word~) main::$0 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::$9 = (const word*) words+(word) $ff*(const byte) SIZEOF_WORD
Constant inlined main::i#0 = (byte) 0
Constant inlined main::$6 = (word) $ff*(const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [18] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (word~) main::$0 ← (word)(byte) main::i#2
  [7] (word~) main::$1 ← (word)(byte) main::i#2
  [8] (word~) main::$2 ← (word~) main::$1 << (byte) 8
  [9] (word~) main::$3 ← (word~) main::$2 + (byte) main::i#2
  [10] (word~) main::$5 ← (word~) main::$0 << (byte) 1
  [11] (word*~) main::$8 ← (const word*) words + (word~) main::$5
  [12] *((word*~) main::$8) ← (word~) main::$3
  [13] (byte) main::i#1 ← ++ (byte) main::i#2
  [14] if((byte) main::i#1!=(byte) 0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [15] *((const word*) main::SCREEN) ← *((const word*) words+(word) $ff*(const byte) SIZEOF_WORD)
  to:main::@return
main::@return: scope:[main]  from main::@2
  [16] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(word~) main::$0 50.5
(word~) main::$1 202.0
(word~) main::$2 202.0
(word~) main::$3 67.33333333333333
(word~) main::$5 202.0
(word*~) main::$8 202.0
(byte) main::i
(byte) main::i#1 151.5
(byte) main::i#2 37.875

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Added variable main::$8 to live range equivalence class [ main::$8 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$0 ]
[ main::$1 ]
[ main::$2 ]
[ main::$3 ]
[ main::$5 ]
[ main::$8 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ main::$0 ]
Allocated zp[2]:5 [ main::$1 ]
Allocated zp[2]:7 [ main::$2 ]
Allocated zp[2]:9 [ main::$3 ]
Allocated zp[2]:11 [ main::$5 ]
Allocated zp[2]:13 [ main::$8 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests a word-array with 128+ elements
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label __0 = 3
    .label __1 = 5
    .label __2 = 7
    .label __3 = 9
    .label __5 = $b
    .label i = 2
    .label __8 = $d
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (word~) main::$0 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuz2 
    lda.z i
    sta.z __0
    lda #0
    sta.z __0+1
    // [7] (word~) main::$1 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuz2 
    lda.z i
    sta.z __1
    lda #0
    sta.z __1+1
    // [8] (word~) main::$2 ← (word~) main::$1 << (byte) 8 -- vwuz1=vwuz2_rol_8 
    lda.z __1
    sta.z __2+1
    lda #0
    sta.z __2
    // [9] (word~) main::$3 ← (word~) main::$2 + (byte) main::i#2 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z i
    clc
    adc.z __2
    sta.z __3
    lda #0
    adc.z __2+1
    sta.z __3+1
    // [10] (word~) main::$5 ← (word~) main::$0 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda.z __0
    asl
    sta.z __5
    lda.z __0+1
    rol
    sta.z __5+1
    // [11] (word*~) main::$8 ← (const word*) words + (word~) main::$5 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __5
    clc
    adc #<words
    sta.z __8
    lda.z __5+1
    adc #>words
    sta.z __8+1
    // [12] *((word*~) main::$8) ← (word~) main::$3 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda.z __3
    sta (__8),y
    iny
    lda.z __3+1
    sta (__8),y
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [14] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z i
    cmp #0
    bne __b1_from___b1
    jmp __b2
    // main::@2
  __b2:
    // [15] *((const word*) main::SCREEN) ← *((const word*) words+(word) $ff*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda words+$ff*SIZEOF_WORD
    sta SCREEN
    lda words+$ff*SIZEOF_WORD+1
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data
  words: .fill 2*$100, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (word~) main::$0 ← (word)(byte) main::i#2 [ main::i#2 main::$0 ] ( main:2 [ main::i#2 main::$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [7] (word~) main::$1 ← (word)(byte) main::i#2 [ main::i#2 main::$0 main::$1 ] ( main:2 [ main::i#2 main::$0 main::$1 ] { }  ) always clobbers reg byte a 
Statement [8] (word~) main::$2 ← (word~) main::$1 << (byte) 8 [ main::i#2 main::$0 main::$2 ] ( main:2 [ main::i#2 main::$0 main::$2 ] { }  ) always clobbers reg byte a 
Statement [9] (word~) main::$3 ← (word~) main::$2 + (byte) main::i#2 [ main::i#2 main::$0 main::$3 ] ( main:2 [ main::i#2 main::$0 main::$3 ] { }  ) always clobbers reg byte a 
Statement [10] (word~) main::$5 ← (word~) main::$0 << (byte) 1 [ main::i#2 main::$3 main::$5 ] ( main:2 [ main::i#2 main::$3 main::$5 ] { }  ) always clobbers reg byte a 
Statement [11] (word*~) main::$8 ← (const word*) words + (word~) main::$5 [ main::i#2 main::$3 main::$8 ] ( main:2 [ main::i#2 main::$3 main::$8 ] { }  ) always clobbers reg byte a 
Statement [12] *((word*~) main::$8) ← (word~) main::$3 [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [15] *((const word*) main::SCREEN) ← *((const word*) words+(word) $ff*(const byte) SIZEOF_WORD) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] (word~) main::$0 ← (word)(byte) main::i#2 [ main::i#2 main::$0 ] ( main:2 [ main::i#2 main::$0 ] { }  ) always clobbers reg byte a 
Statement [7] (word~) main::$1 ← (word)(byte) main::i#2 [ main::i#2 main::$0 main::$1 ] ( main:2 [ main::i#2 main::$0 main::$1 ] { }  ) always clobbers reg byte a 
Statement [8] (word~) main::$2 ← (word~) main::$1 << (byte) 8 [ main::i#2 main::$0 main::$2 ] ( main:2 [ main::i#2 main::$0 main::$2 ] { }  ) always clobbers reg byte a 
Statement [9] (word~) main::$3 ← (word~) main::$2 + (byte) main::i#2 [ main::i#2 main::$0 main::$3 ] ( main:2 [ main::i#2 main::$0 main::$3 ] { }  ) always clobbers reg byte a 
Statement [10] (word~) main::$5 ← (word~) main::$0 << (byte) 1 [ main::i#2 main::$3 main::$5 ] ( main:2 [ main::i#2 main::$3 main::$5 ] { }  ) always clobbers reg byte a 
Statement [11] (word*~) main::$8 ← (const word*) words + (word~) main::$5 [ main::i#2 main::$3 main::$8 ] ( main:2 [ main::i#2 main::$3 main::$8 ] { }  ) always clobbers reg byte a 
Statement [12] *((word*~) main::$8) ← (word~) main::$3 [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [15] *((const word*) main::SCREEN) ← *((const word*) words+(word) $ff*(const byte) SIZEOF_WORD) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ main::$0 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ main::$1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ main::$2 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ main::$3 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ main::$5 ] : zp[2]:11 , 
Potential registers zp[2]:13 [ main::$8 ] : zp[2]:13 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 202: zp[2]:5 [ main::$1 ] 202: zp[2]:7 [ main::$2 ] 202: zp[2]:11 [ main::$5 ] 202: zp[2]:13 [ main::$8 ] 189.38: zp[1]:2 [ main::i#2 main::i#1 ] 67.33: zp[2]:9 [ main::$3 ] 50.5: zp[2]:3 [ main::$0 ] 
Uplift Scope [] 

Uplifting [main] best 1262 combination zp[2]:5 [ main::$1 ] zp[2]:7 [ main::$2 ] zp[2]:11 [ main::$5 ] zp[2]:13 [ main::$8 ] reg byte x [ main::i#2 main::i#1 ] zp[2]:9 [ main::$3 ] zp[2]:3 [ main::$0 ] 
Uplifting [] best 1262 combination 
Coalescing zero page register [ zp[2]:3 [ main::$0 ] ] with [ zp[2]:11 [ main::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:5 [ main::$1 ] ] with [ zp[2]:7 [ main::$2 ] ] - score: 1
Coalescing zero page register [ zp[2]:3 [ main::$0 main::$5 ] ] with [ zp[2]:13 [ main::$8 ] ] - score: 1
Coalescing zero page register [ zp[2]:5 [ main::$1 main::$2 ] ] with [ zp[2]:9 [ main::$3 ] ] - score: 1
Allocated (was zp[2]:3) zp[2]:2 [ main::$0 main::$5 main::$8 ]
Allocated (was zp[2]:5) zp[2]:4 [ main::$1 main::$2 main::$3 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests a word-array with 128+ elements
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label __0 = 2
    .label __1 = 4
    .label __2 = 4
    .label __3 = 4
    .label __5 = 2
    .label __8 = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (word~) main::$0 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuxx 
    txa
    sta.z __0
    lda #0
    sta.z __0+1
    // [7] (word~) main::$1 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuxx 
    txa
    sta.z __1
    lda #0
    sta.z __1+1
    // [8] (word~) main::$2 ← (word~) main::$1 << (byte) 8 -- vwuz1=vwuz1_rol_8 
    lda.z __2
    sta.z __2+1
    lda #0
    sta.z __2
    // [9] (word~) main::$3 ← (word~) main::$2 + (byte) main::i#2 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z __3
    sta.z __3
    bcc !+
    inc.z __3+1
  !:
    // [10] (word~) main::$5 ← (word~) main::$0 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z __5
    rol.z __5+1
    // [11] (word*~) main::$8 ← (const word*) words + (word~) main::$5 -- pwuz1=pwuc1_plus_vwuz1 
    clc
    lda.z __8
    adc #<words
    sta.z __8
    lda.z __8+1
    adc #>words
    sta.z __8+1
    // [12] *((word*~) main::$8) ← (word~) main::$3 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda.z __3
    sta (__8),y
    iny
    lda.z __3+1
    sta (__8),y
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [14] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b1
    jmp __b2
    // main::@2
  __b2:
    // [15] *((const word*) main::SCREEN) ← *((const word*) words+(word) $ff*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda words+$ff*SIZEOF_WORD
    sta SCREEN
    lda words+$ff*SIZEOF_WORD+1
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data
  words: .fill 2*$100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(word~) main::$0 zp[2]:2 50.5
(word~) main::$1 zp[2]:4 202.0
(word~) main::$2 zp[2]:4 202.0
(word~) main::$3 zp[2]:4 67.33333333333333
(word~) main::$5 zp[2]:2 202.0
(word*~) main::$8 zp[2]:2 202.0
(label) main::@1
(label) main::@2
(label) main::@return
(const word*) main::SCREEN = (word*) 1024
(byte) main::i
(byte) main::i#1 reg byte x 151.5
(byte) main::i#2 reg byte x 37.875
(const word*) words[(number) $100]  = { fill( $100, 0) }

reg byte x [ main::i#2 main::i#1 ]
zp[2]:2 [ main::$0 main::$5 main::$8 ]
zp[2]:4 [ main::$1 main::$2 main::$3 ]


FINAL ASSEMBLER
Score: 1092

  // File Comments
// Tests a word-array with 128+ elements
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    .label __0 = 2
    .label __1 = 4
    .label __2 = 4
    .label __3 = 4
    .label __5 = 2
    .label __8 = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // (word)i
    // [6] (word~) main::$0 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuxx 
    txa
    sta.z __0
    lda #0
    sta.z __0+1
    // [7] (word~) main::$1 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuxx 
    txa
    sta.z __1
    lda #0
    sta.z __1+1
    // ((word)i)*0x100
    // [8] (word~) main::$2 ← (word~) main::$1 << (byte) 8 -- vwuz1=vwuz1_rol_8 
    lda.z __2
    sta.z __2+1
    lda #0
    sta.z __2
    // ((word)i)*0x100+i
    // [9] (word~) main::$3 ← (word~) main::$2 + (byte) main::i#2 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z __3
    sta.z __3
    bcc !+
    inc.z __3+1
  !:
    // words[(word)i] = ((word)i)*0x100+i
    // [10] (word~) main::$5 ← (word~) main::$0 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z __5
    rol.z __5+1
    // [11] (word*~) main::$8 ← (const word*) words + (word~) main::$5 -- pwuz1=pwuc1_plus_vwuz1 
    clc
    lda.z __8
    adc #<words
    sta.z __8
    lda.z __8+1
    adc #>words
    sta.z __8+1
    // [12] *((word*~) main::$8) ← (word~) main::$3 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda.z __3
    sta (__8),y
    iny
    lda.z __3+1
    sta (__8),y
    // for(byte i: 0..0xff)
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [14] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // main::@2
    // SCREEN[0] = words[(word)255]
    // [15] *((const word*) main::SCREEN) ← *((const word*) words+(word) $ff*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda words+$ff*SIZEOF_WORD
    sta SCREEN
    lda words+$ff*SIZEOF_WORD+1
    sta SCREEN+1
    // main::@return
    // }
    // [16] return 
    rts
}
  // File Data
  words: .fill 2*$100, 0

