constant struct RICOH_2A03* APU = (struct RICOH_2A03*) 16384
constant byte* DIGITS[]  = "0123456789abcdef"z
constant byte* const FR_COUNTER = (byte*) 16407
constant const byte JOY_DOWN = 4
constant const byte JOY_LEFT = 2
constant const byte JOY_RIGHT = 1
constant const byte JOY_UP = 8
constant byte* const MEMORY = (byte*) 0
constant byte OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
constant byte OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
constant byte OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
constant byte OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
constant byte OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
constant byte OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
constant byte OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
constant byte* PALETTE[$20]  = { 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $f, $30, 8, 1, $f, $18, 8, 1, $30, $37, $1a, $f, $f, $f, $f }
constant struct RICOH_2C02* PPU = (struct RICOH_2C02*) 8192
constant byte* const PPU_ATTRIBUTE_TABLE_0 = (byte*) 9152
constant byte* const PPU_ATTRIBUTE_TABLE_1 = (byte*) 10176
constant byte* const PPU_NAME_TABLE_0 = (byte*) 8192
constant byte* const PPU_PALETTE = (byte*) 16128
constant volatile byte* const PPU_PPUDATA = (volatile byte*) 8199
constant volatile byte* const PPU_PPUSTATUS = (volatile byte*) 8194
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant byte* RADIX_HEXADECIMAL_VALUES_CHAR[]  = { $10 }
constant byte SIZEOF_BYTE = 1
constant byte* TILES[]  = kickasm {{ .var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }
 }}
constant void()* const* VECTORS[]  = { &vblank, &main, (void()*) 0 }
void __start()
void clrscr()
constant byte* conio_cscroll_buffer[$20]  = { fill( $20, 0) }
byte conio_cursor_x loadstore zp[1]:15 4375315.90625
byte conio_cursor_y loadstore zp[1]:16 6.530632875510204E7
byte* conio_line_text loadstore zp[2]:17 4.9111335755555555E7
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 reg byte x 2000002.0
byte cputc::c#1 reg byte x 2002.0
byte cputc::c#2 reg byte x 7000334.666666666
void cputcxy(byte cputcxy::x , byte cputcxy::y , byte cputcxy::c)
byte cputcxy::c
byte cputcxy::c#4 reg byte y 250.25
byte cputcxy::x
byte cputcxy::x#0 reg byte x 202.0
byte cputcxy::x#1 reg byte x 202.0
byte cputcxy::x#4 reg byte x 1203.0
byte cputcxy::y
byte cputcxy::y#2 reg byte a 202.0
byte cputcxy::y#3 reg byte a 202.0
byte cputcxy::y#4 reg byte a 601.5
void cputln()
void cputs(const byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 1000001.0
const byte* cputs::s
const byte* cputs::s#0 s zp[2]:23 500000.5
const byte* cputs::s#2 s zp[2]:23 1500001.5
void cputsxy(byte cputsxy::x , byte cputsxy::y , const byte* cputsxy::s)
const byte* cputsxy::s
byte cputsxy::x
byte cputsxy::x#0 reg byte x 551.0
byte cputsxy::y
byte cputsxy::y#0 reg byte a 551.0
void cscroll()
byte* cscroll::line1
byte* cscroll::line1#1 line1 zp[2]:9 6.666666666673334E11
byte* cscroll::line1#2 line1 zp[2]:9 3.333333333336667E11
byte* cscroll::line2
byte* cscroll::line2#1 line2 zp[2]:25 1.000000000001E12
byte* cscroll::line2#2 line2 zp[2]:25 2.857142857145714E11
byte cscroll::y
byte cscroll::y#1 reg byte x 2.000000000002E12
byte cscroll::y#2 reg byte x 3.75000000000375E11
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 zp[2]:23 20002.0
word~ gotoxy::$6 zp[2]:23 20002.0
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:23 20002.0
byte gotoxy::x
byte gotoxy::x#2 reg byte x 1001.0
byte gotoxy::x#3 reg byte x 1001.0
byte gotoxy::x#4 reg byte x 3667.333333333333
byte gotoxy::x#5 reg byte x 20002.0
byte gotoxy::y
byte gotoxy::y#2 reg byte a 2002.0
byte gotoxy::y#3 reg byte a 2002.0
byte gotoxy::y#4 reg byte a 7334.666666666666
byte gotoxy::y#5 reg byte a 3333.6666666666665
void main()
byte main::i
byte main::i#1 i zp[1]:4 202.0
byte main::i#2 i zp[1]:4 86.57142857142857
byte main::initNES1_i
byte main::initNES1_i#1 reg byte x 151.5
byte main::initNES1_i#2 reg byte x 112.22222222222223
byte~ main::initNES1_waitForVBlank1_$0 reg byte a 202.0
byte~ main::initNES1_waitForVBlank2_$0 reg byte a 202.0
byte main::screensizex1_return
constant byte main::screensizex1_return#0 screensizex1_return = $20
byte main::screensizex2_return
constant byte main::screensizex2_return#0 screensizex2_return = $20
byte main::screensizey1_return
constant byte main::screensizey1_return#0 screensizey1_return = $1e
byte main::screensizey2_return
constant byte main::screensizey2_return#0 screensizey2_return = $1e
byte main::screensizey3_return
constant byte main::screensizey3_return#0 screensizey3_return = $1e
byte main::x
byte main::x#1 x zp[1]:2 202.0
byte main::x#10 x zp[1]:2 72.14285714285714
byte main::y
byte main::y#1 y zp[1]:3 202.0
byte main::y#10 y zp[1]:3 72.14285714285714
constant byte* num_buffer[$b]  = { fill( $b, 0) }
void ppuDataFetch(void* const ppuDataFetch::cpuData , void* const ppuDataFetch::ppuData , word ppuDataFetch::size)
void* const ppuDataFetch::cpuData
constant void* const ppuDataFetch::cpuData#0 cpuData = (void* const)conio_cscroll_buffer
byte* ppuDataFetch::cpuDst
byte* ppuDataFetch::cpuDst#1 cpuDst zp[2]:13 1.0E17
byte* ppuDataFetch::cpuDst#2 cpuDst zp[2]:13 7.5E16
word ppuDataFetch::i
word ppuDataFetch::i#1 i zp[2]:11 2.0E17
word ppuDataFetch::i#2 i zp[2]:11 6.0E16
void* const ppuDataFetch::ppuData
void* const ppuDataFetch::ppuData#0 ppuData zp[2]:27 5.25000000000075E12
byte~ ppuDataFetch::ppuDataPrepare1_$0 reg byte a 2.0000000000002E13
byte~ ppuDataFetch::ppuDataPrepare1_$1 reg byte a 2.0000000000002E13
void* const ppuDataFetch::ppuDataPrepare1_ppuData
byte ppuDataFetch::ppuDataRead1_return
byte ppuDataFetch::ppuDataRead1_return#0 reg byte a 2.0E17
word ppuDataFetch::size
constant word ppuDataFetch::size#0 size = $20
void ppuDataFill(void* const ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
word ppuDataFill::i
word ppuDataFill::i#1 i zp[2]:27 2.000000000002E12
word ppuDataFill::i#2 i zp[2]:27 1.000000000001E12
void* const ppuDataFill::ppuData
byte~ ppuDataFill::ppuDataPrepare1_$0 reg byte a 2.0000000002E10
byte~ ppuDataFill::ppuDataPrepare1_$1 reg byte a 2.0000000002E10
void* const ppuDataFill::ppuDataPrepare1_ppuData
void* const ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:11 6.666666667333333E9
byte ppuDataFill::ppuDataPut1_val
word ppuDataFill::size
word ppuDataFill::size#5 size zp[2]:13 1.1111111111122223E11
byte ppuDataFill::val
byte ppuDataFill::val#10 reg byte x 1.1111111111122223E11
void ppuDataSet(void* const ppuDataSet::ppuData , byte ppuDataSet::val)
void* const ppuDataSet::ppuData
byte* const ppuDataSet::ppuData#0 ppuData zp[2]:25 2000000.2
byte~ ppuDataSet::ppuDataPrepare1_$0 reg byte x 2.00000002E8
byte~ ppuDataSet::ppuDataPrepare1_$1 reg byte x 2.00000002E8
void* const ppuDataSet::ppuDataPrepare1_ppuData
byte ppuDataSet::ppuDataPut1_val
byte ppuDataSet::val
byte ppuDataSet::val#0 reg byte a 1.8333333666666668E7
void ppuDataTransfer(void* const ppuDataTransfer::ppuData , void* const ppuDataTransfer::cpuData , word ppuDataTransfer::size)
void* const ppuDataTransfer::cpuData
void* const ppuDataTransfer::cpuData#2 cpuData zp[2]:13
byte* ppuDataTransfer::cpuSrc
byte* ppuDataTransfer::cpuSrc#1 cpuSrc zp[2]:13 1.000000000000001E15
byte* ppuDataTransfer::cpuSrc#2 cpuSrc zp[2]:13 7.52500000000001E14
byte* ppuDataTransfer::cpuSrc#6 cpuSrc zp[2]:13 2.0000000000002E13
word ppuDataTransfer::i
word ppuDataTransfer::i#1 i zp[2]:7 2.000000000000002E15
word ppuDataTransfer::i#2 i zp[2]:7 6.000000000000005E14
void* const ppuDataTransfer::ppuData
void* const ppuDataTransfer::ppuData#0 ppuData zp[2]:11 2.000000000002E12
byte~ ppuDataTransfer::ppuDataPrepare1_$0 reg byte a 2.0000000000002E13
byte~ ppuDataTransfer::ppuDataPrepare1_$1 reg byte a 2.0000000000002E13
void* const ppuDataTransfer::ppuDataPrepare1_ppuData
void* const ppuDataTransfer::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:11 7.000000000001E12
byte ppuDataTransfer::ppuDataPut1_val
byte ppuDataTransfer::ppuDataPut1_val#0 reg byte a 2.000000000000002E15
word ppuDataTransfer::size
word ppuDataTransfer::size#3 size zp[2]:27 8.333333333333342E13
byte readJoy1()
byte~ readJoy1::$1 zp[1]:21 101.0
byte~ readJoy1::$2 reg byte a 202.0
byte readJoy1::i
byte readJoy1::i#1 reg byte x 202.0
byte readJoy1::i#2 reg byte x 60.599999999999994
byte readJoy1::joy
byte readJoy1::joy#1 reg byte a 101.0
byte readJoy1::joy#2 reg byte a 51.0
byte readJoy1::return
byte readJoy1::return#2 reg byte a 4.0
void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
byte* uctoa::buffer
byte* uctoa::buffer#11 buffer zp[2]:7 33500.49999999999
byte* uctoa::buffer#14 buffer zp[2]:7 150001.5
byte* uctoa::buffer#3 buffer zp[2]:7 2002.0
byte* uctoa::buffer#4 buffer zp[2]:7 200002.0
byte uctoa::digit
byte uctoa::digit#1 digit zp[1]:5 200002.0
byte uctoa::digit#2 digit zp[1]:5 30769.53846153846
byte uctoa::digit_value
byte uctoa::digit_value#0 digit_value zp[1]:22 60000.600000000006
byte* uctoa::digit_values
byte uctoa::max_digits
constant byte uctoa::max_digits#2 max_digits = 2
byte uctoa::radix
byte uctoa::started
byte uctoa::started#2 started zp[1]:6 60000.600000000006
byte uctoa::started#4 started zp[1]:6 100001.0
byte uctoa::value
byte uctoa::value#0 reg byte x 100001.0
byte uctoa::value#1 reg byte x 551.0
byte uctoa::value#2 reg byte x 67000.99999999999
byte uctoa::value#6 reg byte x 150001.5
byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
byte* uctoa_append::buffer
byte* uctoa_append::buffer#0 buffer zp[2]:7 137500.25
byte uctoa_append::digit
byte uctoa_append::digit#1 reg byte y 1.000000001E9
byte uctoa_append::digit#2 reg byte y 1.0005000015E9
byte uctoa_append::return
byte uctoa_append::return#0 reg byte x 200002.0
byte uctoa_append::sub
byte uctoa_append::sub#0 sub zp[1]:22 3.333500005E8
byte uctoa_append::value
byte uctoa_append::value#0 reg byte x 366667.3333333334
byte uctoa_append::value#1 reg byte x 2.000000002E9
byte uctoa_append::value#2 reg byte x 5.0018333416666675E8
__interrupt(hardware_all) void vblank()
byte~ vblank::$1 reg byte a 4.0
byte~ vblank::$3 reg byte a 4.0
byte~ vblank::$5 reg byte a 4.0
byte~ vblank::$7 reg byte a 4.0
byte vblank::joy
byte vblank::joy#0 reg byte x 0.7142857142857142
volatile byte x_scroll loadstore zp[1]:19 1.15
volatile byte y_scroll loadstore zp[1]:20 1.4761904761904763

reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
zp[1]:2 [ main::x#10 main::x#1 ]
zp[1]:3 [ main::y#10 main::y#1 ]
zp[1]:4 [ main::i#2 main::i#1 ]
reg byte x [ readJoy1::i#2 readJoy1::i#1 ]
reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ]
reg byte x [ ppuDataFill::val#10 ]
zp[1]:5 [ uctoa::digit#2 uctoa::digit#1 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
zp[1]:6 [ uctoa::started#2 uctoa::started#4 ]
zp[2]:7 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
reg byte x [ cputcxy::x#4 cputcxy::x#0 cputcxy::x#1 ]
reg byte a [ cputcxy::y#4 cputcxy::y#3 cputcxy::y#2 ]
reg byte y [ cputcxy::c#4 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
reg byte a [ gotoxy::y#5 gotoxy::y#4 gotoxy::y#2 gotoxy::y#3 ]
reg byte x [ gotoxy::x#5 gotoxy::x#4 gotoxy::x#2 gotoxy::x#3 ]
reg byte x [ cputc::c#2 cputc::c#1 cputc::c#0 ]
reg byte x [ cscroll::y#2 cscroll::y#1 ]
zp[2]:9 [ cscroll::line1#2 cscroll::line1#1 ]
zp[2]:11 [ ppuDataFetch::i#2 ppuDataFetch::i#1 ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::ppuDataPrepare1_ppuData#0 ppuDataTransfer::ppuData#0 ]
zp[2]:13 [ ppuDataFetch::cpuDst#2 ppuDataFetch::cpuDst#1 ppuDataFill::size#5 ppuDataTransfer::cpuData#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ]
zp[1]:15 [ conio_cursor_x ]
zp[1]:16 [ conio_cursor_y ]
zp[2]:17 [ conio_line_text ]
zp[1]:19 [ x_scroll ]
zp[1]:20 [ y_scroll ]
reg byte a [ readJoy1::return#2 ]
reg byte x [ vblank::joy#0 ]
reg byte a [ vblank::$1 ]
reg byte a [ vblank::$3 ]
reg byte a [ vblank::$5 ]
reg byte a [ vblank::$7 ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
reg byte x [ cputsxy::x#0 ]
reg byte a [ cputsxy::y#0 ]
zp[1]:21 [ readJoy1::$1 ]
reg byte a [ readJoy1::$2 ]
reg byte a [ ppuDataTransfer::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataTransfer::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]
zp[1]:22 [ uctoa::digit_value#0 uctoa_append::sub#0 ]
reg byte x [ uctoa_append::return#0 ]
zp[2]:23 [ gotoxy::$6 gotoxy::line_offset#0 gotoxy::$5 cputs::s#2 cputs::s#0 ]
reg byte a [ cputs::c#1 ]
zp[2]:25 [ ppuDataSet::ppuData#0 cscroll::line2#2 cscroll::line2#1 ]
reg byte a [ ppuDataSet::val#0 ]
reg byte x [ ppuDataSet::ppuDataPrepare1_$0 ]
reg byte x [ ppuDataSet::ppuDataPrepare1_$1 ]
zp[2]:27 [ ppuDataFetch::ppuData#0 ppuDataFill::i#2 ppuDataFill::i#1 ppuDataTransfer::size#3 ]
reg byte a [ ppuDataFetch::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFetch::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataFetch::ppuDataRead1_return#0 ]
