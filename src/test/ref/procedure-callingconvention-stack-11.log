Eliminating unused variable with no statement (struct Vector~) main::$1
Eliminating unused variable with no statement (struct Point~) main::$1_p1
Eliminating unused variable with no statement (struct Point~) main::$1_p2
Converting PHI-variable modified inside __stackcall procedure main() to load/store (byte) idx
Calling convention STACK_CALL adding prepare/execute/finalize for { { (byte~) main::$1_p1_x, (byte~) main::$1_p1_y }, { (byte~) main::$1_p2_x, (byte~) main::$1_p2_y } } ← call get (byte) main::i 
Calling convention STACK_CALL adding prepare/execute/finalize for call print (byte) main::v_p1_x (byte) main::v_p1_y (byte) main::v_p2_x (byte) main::v_p2_y 
Calling convention STACK_CALL adding prepare/execute/finalize for call main 
Calling convention STACK_CALL replacing param((byte) get::i) with stackidx(byte,(const byte) get::OFFSET_STACK_I)
Calling convention STACK_CALL replacing param((byte) print::v_p1_x) with stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_X)
Calling convention STACK_CALL replacing param((byte) print::v_p1_y) with stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_Y)
Calling convention STACK_CALL replacing param((byte) print::v_p2_x) with stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_X)
Calling convention STACK_CALL replacing param((byte) print::v_p2_y) with stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_Y)
Calling convention STACK_CALL adding stack return stackidx(byte,get::OFFSET_STACK_RETURN+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_X) ← get::return_p1_x
Calling convention STACK_CALL adding stack return stackidx(byte,get::OFFSET_STACK_RETURN+OFFSET_STRUCT_VECTOR_P1+OFFSET_STRUCT_POINT_Y) ← get::return_p1_y
Calling convention STACK_CALL adding stack return stackidx(byte,get::OFFSET_STACK_RETURN+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_X) ← get::return_p2_x
Calling convention STACK_CALL adding stack return stackidx(byte,get::OFFSET_STACK_RETURN+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y) ← get::return_p2_y
Calling convention STACK_CALL adding stack pull main::$1_p1_x ← stackpull(byte)
Calling convention STACK_CALL adding stack pull main::$1_p1_y ← stackpull(byte)
Calling convention STACK_CALL adding stack pull main::$1_p2_x ← stackpull(byte)
Calling convention STACK_CALL adding stack pull main::$1_p2_y ← stackpull(byte)
Calling convention STACK_CALL adding stack push stackpush(byte) ← main::i
Calling convention STACK_CALL adding stack push stackpush(byte) ← main::v_p1_x
Calling convention STACK_CALL adding stack push stackpush(byte) ← main::v_p1_y
Calling convention STACK_CALL adding stack push stackpush(byte) ← main::v_p2_x
Calling convention STACK_CALL adding stack push stackpush(byte) ← main::v_p2_y

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) idx ← (byte) 0
  to:@1

__stackcall (void()) main()
main: scope:[main]  from
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (bool~) main::$0 ← (byte) main::i#2 < (number) 5
  if((bool~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  stackpush(byte) ← (byte) main::i#3
  sideeffect stackpushbytes((number) 3)
  callexecute get 
  (byte~) main::$1_p1_x ← stackpull(byte)
  (byte~) main::$1_p1_y ← stackpull(byte)
  (byte~) main::$1_p2_x ← stackpull(byte)
  (byte~) main::$1_p2_y ← stackpull(byte)
  (byte) main::v_p1_x#0 ← (byte~) main::$1_p1_x
  (byte) main::v_p1_y#0 ← (byte~) main::$1_p1_y
  (byte) main::v_p2_x#0 ← (byte~) main::$1_p2_x
  (byte) main::v_p2_y#0 ← (byte~) main::$1_p2_y
  stackpush(byte) ← (byte) main::v_p1_x#0
  stackpush(byte) ← (byte) main::v_p1_y#0
  stackpush(byte) ← (byte) main::v_p2_x#0
  stackpush(byte) ← (byte) main::v_p2_y#0
  callexecute print 
  sideeffect stackpullbytes((number) 4)
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

__stackcall (struct Vector()) get((byte) get::i)
get: scope:[get]  from
  (byte) get::i#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I)
  (number~) get::$0 ← (byte) get::i#0 / (number) 2
  (number~) get::$1 ← (byte) get::i#0 + (number) 1
  (number~) get::$2 ← (byte) get::i#0 * (number) 2
  (byte) get::v_p1_x#0 ← (byte) get::i#0
  (byte) get::v_p1_y#0 ← (number~) get::$0
  (byte) get::v_p2_x#0 ← (number~) get::$1
  (byte) get::v_p2_y#0 ← (number~) get::$2
  (byte) get::return_p1_x#0 ← (byte) get::v_p1_x#0
  (byte) get::return_p1_y#0 ← (byte) get::v_p1_y#0
  (byte) get::return_p2_x#0 ← (byte) get::v_p2_x#0
  (byte) get::return_p2_y#0 ← (byte) get::v_p2_y#0
  (struct Vector) get::return#0 ← struct-unwound {(byte) get::return_p1_x#0, (byte) get::return_p1_y#0, (byte) get::return_p2_x#0, (byte) get::return_p2_y#0}
  to:get::@return
get::@return: scope:[get]  from get
  (byte) get::return_p2_y#1 ← phi( get/(byte) get::return_p2_y#0 )
  (byte) get::return_p2_x#1 ← phi( get/(byte) get::return_p2_x#0 )
  (byte) get::return_p1_y#1 ← phi( get/(byte) get::return_p1_y#0 )
  (byte) get::return_p1_x#1 ← phi( get/(byte) get::return_p1_x#0 )
  stackidx(byte,(const byte) get::OFFSET_STACK_RETURN+(const byte) OFFSET_STRUCT_VECTOR_P1+(const byte) OFFSET_STRUCT_POINT_X) ← (byte) get::return_p1_x#1
  stackidx(byte,(const byte) get::OFFSET_STACK_RETURN+(const byte) OFFSET_STRUCT_VECTOR_P1+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p1_y#1
  stackidx(byte,(const byte) get::OFFSET_STACK_RETURN+(const byte) OFFSET_STRUCT_VECTOR_P2+(const byte) OFFSET_STRUCT_POINT_X) ← (byte) get::return_p2_x#1
  stackidx(byte,(const byte) get::OFFSET_STACK_RETURN+(const byte) OFFSET_STRUCT_VECTOR_P2+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p2_y#1
  return 
  to:@return

__stackcall (void()) print((byte) print::v_p1_x , (byte) print::v_p1_y , (byte) print::v_p2_x , (byte) print::v_p2_y)
print: scope:[print]  from
  (byte) print::v_p1_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_X)
  (byte) print::v_p1_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_Y)
  (byte) print::v_p2_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_X)
  (byte) print::v_p2_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_Y)
  *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_x#0
  (byte) idx ← ++ (byte) idx
  *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_y#0
  (byte) idx ← ++ (byte) idx
  *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_x#0
  (byte) idx ← ++ (byte) idx
  *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_y#0
  (byte) idx ← ++ (byte) idx
  *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) ' '
  (byte) idx ← ++ (byte) idx
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return
@1: scope:[]  from @begin
  callexecute main 
  to:@end
@end: scope:[]  from @1

SYMBOL TABLE SSA
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(const byte) OFFSET_STRUCT_VECTOR_P1 = (byte) 0
(const byte) OFFSET_STRUCT_VECTOR_P2 = (byte) 2
(byte) Point::x
(byte) Point::y
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const word) STACK_BASE = (word) $103
(struct Point) Vector::p1
(struct Point) Vector::p2
__stackcall (struct Vector()) get((byte) get::i)
(number~) get::$0
(number~) get::$1
(number~) get::$2
(label) get::@return
(const byte) get::OFFSET_STACK_I = (byte) 0
(const byte) get::OFFSET_STACK_RETURN = (byte) 0
(byte) get::i
(byte) get::i#0
(struct Vector) get::return
(struct Vector) get::return#0
(struct Point) get::return_p1
(byte) get::return_p1_x
(byte) get::return_p1_x#0
(byte) get::return_p1_x#1
(byte) get::return_p1_y
(byte) get::return_p1_y#0
(byte) get::return_p1_y#1
(struct Point) get::return_p2
(byte) get::return_p2_x
(byte) get::return_p2_x#0
(byte) get::return_p2_x#1
(byte) get::return_p2_y
(byte) get::return_p2_y#0
(byte) get::return_p2_y#1
(struct Point) get::v_p1
(byte) get::v_p1_x
(byte) get::v_p1_x#0
(byte) get::v_p1_y
(byte) get::v_p1_y#0
(struct Point) get::v_p2
(byte) get::v_p2_x
(byte) get::v_p2_x#0
(byte) get::v_p2_y
(byte) get::v_p2_y#0
(byte) idx loadstore
__stackcall (void()) main()
(bool~) main::$0
(byte~) main::$1_p1_x
(byte~) main::$1_p1_y
(byte~) main::$1_p2_x
(byte~) main::$1_p2_y
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(struct Point) main::v_p1
(byte) main::v_p1_x
(byte) main::v_p1_x#0
(byte) main::v_p1_y
(byte) main::v_p1_y#0
(struct Point) main::v_p2
(byte) main::v_p2_x
(byte) main::v_p2_x#0
(byte) main::v_p2_y
(byte) main::v_p2_y#0
__stackcall (void()) print((byte) print::v_p1_x , (byte) print::v_p1_y , (byte) print::v_p2_x , (byte) print::v_p2_y)
(label) print::@return
(const byte) print::OFFSET_STACK_V_P1_X = (byte) 3
(const byte) print::OFFSET_STACK_V_P1_Y = (byte) 2
(const byte) print::OFFSET_STACK_V_P2_X = (byte) 1
(const byte) print::OFFSET_STACK_V_P2_Y = (byte) 0
(struct Point) print::v_p1
(byte) print::v_p1_x
(byte) print::v_p1_x#0
(byte) print::v_p1_y
(byte) print::v_p1_y#0
(struct Point) print::v_p2
(byte) print::v_p2_x
(byte) print::v_p2_x#0
(byte) print::v_p2_y
(byte) print::v_p2_y#0

Adding number conversion cast (unumber) 5 in (bool~) main::$0 ← (byte) main::i#2 < (number) 5
Adding number conversion cast (unumber) 2 in (number~) get::$0 ← (byte) get::i#0 / (number) 2
Adding number conversion cast (unumber) get::$0 in (number~) get::$0 ← (byte) get::i#0 / (unumber)(number) 2
Adding number conversion cast (unumber) 1 in (number~) get::$1 ← (byte) get::i#0 + (number) 1
Adding number conversion cast (unumber) get::$1 in (number~) get::$1 ← (byte) get::i#0 + (unumber)(number) 1
Adding number conversion cast (unumber) 2 in (number~) get::$2 ← (byte) get::i#0 * (number) 2
Adding number conversion cast (unumber) get::$2 in (number~) get::$2 ← (byte) get::i#0 * (unumber)(number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 5
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) get::$0 ← (byte) get::i#0 / (byte) 2
Inferred type updated to byte in (unumber~) get::$1 ← (byte) get::i#0 + (byte) 1
Inferred type updated to byte in (unumber~) get::$2 ← (byte) get::i#0 * (byte) 2
Alias main::i#2 = main::i#3 
Alias main::v_p1_x#0 = main::$1_p1_x 
Alias main::v_p1_y#0 = main::$1_p1_y 
Alias main::v_p2_x#0 = main::$1_p2_x 
Alias main::v_p2_y#0 = main::$1_p2_y 
Alias get::return_p1_x#0 = get::v_p1_x#0 get::i#0 get::return_p1_x#1 
Alias get::return_p1_y#0 = get::v_p1_y#0 get::$0 get::return_p1_y#1 
Alias get::return_p2_x#0 = get::v_p2_x#0 get::$1 get::return_p2_x#1 
Alias get::return_p2_y#0 = get::v_p2_y#0 get::$2 get::return_p2_y#1 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$0 [4] if((byte) main::i#2<(byte) 5) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (const byte) get::OFFSET_STACK_RETURN+(const byte) OFFSET_STRUCT_VECTOR_P1+(const byte) OFFSET_STRUCT_POINT_X in [25] stackidx(byte,(const byte) get::OFFSET_STACK_RETURN+(const byte) OFFSET_STRUCT_VECTOR_P1+(const byte) OFFSET_STRUCT_POINT_X) ← (byte) get::return_p1_x#0
Simplifying constant evaluating to zero (const byte) get::OFFSET_STACK_RETURN+(const byte) OFFSET_STRUCT_VECTOR_P1 in [26] stackidx(byte,(const byte) get::OFFSET_STACK_RETURN+(const byte) OFFSET_STRUCT_VECTOR_P1+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p1_y#0
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero OFFSET_STRUCT_POINT_Y in [26] stackidx(byte,(byte) 0+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p1_y#0
Simplifying expression containing zero get::OFFSET_STACK_RETURN+OFFSET_STRUCT_VECTOR_P2 in [27] stackidx(byte,(const byte) get::OFFSET_STACK_RETURN+(const byte) OFFSET_STRUCT_VECTOR_P2+(const byte) OFFSET_STRUCT_POINT_X) ← (byte) get::return_p2_x#0
Simplifying expression containing zero OFFSET_STRUCT_VECTOR_P2 in [28] stackidx(byte,(const byte) get::OFFSET_STACK_RETURN+(const byte) OFFSET_STRUCT_VECTOR_P2+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p2_y#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Simplifying expression containing zero OFFSET_STRUCT_VECTOR_P2 in [27] stackidx(byte,(const byte) get::OFFSET_STACK_RETURN+(const byte) OFFSET_STRUCT_VECTOR_P2) ← (byte) get::return_p2_x#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (struct Vector) get::return#0 and assignment [22] (struct Vector) get::return#0 ← struct-unwound {(byte) get::return_p1_x#0, (byte) get::return_p1_y#0, (byte) get::return_p2_x#0, (byte) get::return_p2_y#0}
Eliminating unused constant (const byte) get::OFFSET_STACK_RETURN
Eliminating unused constant (const byte) OFFSET_STRUCT_VECTOR_P1
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Rewriting division to use shift [19] (byte) get::return_p1_y#0 ← (byte) get::return_p1_x#0 / (byte) 2
Rewriting multiplication to use shift [21] (byte) get::return_p2_y#0 ← (byte) get::return_p1_x#0 * (byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to get:34 print:43 

Created 1 initial phi equivalence classes
Coalesced [46] main::i#4 ← main::i#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] (byte) idx ← (byte) 0
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] callexecute main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

__stackcall (void()) print((byte) print::v_p1_x , (byte) print::v_p1_y , (byte) print::v_p2_x , (byte) print::v_p2_y)
print: scope:[print]  from
  [4] (byte) print::v_p1_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_X)
  [5] (byte) print::v_p1_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_Y)
  [6] (byte) print::v_p2_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_X)
  [7] (byte) print::v_p2_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_Y)
  [8] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_x#0
  [9] (byte) idx ← ++ (byte) idx
  [10] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_y#0
  [11] (byte) idx ← ++ (byte) idx
  [12] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_x#0
  [13] (byte) idx ← ++ (byte) idx
  [14] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_y#0
  [15] (byte) idx ← ++ (byte) idx
  [16] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) ' '
  [17] (byte) idx ← ++ (byte) idx
  to:print::@return
print::@return: scope:[print]  from print
  [18] return 
  to:@return

__stackcall (struct Vector()) get((byte) get::i)
get: scope:[get]  from
  [19] (byte) get::return_p1_x#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I)
  [20] (byte) get::return_p1_y#0 ← (byte) get::return_p1_x#0 >> (byte) 1
  [21] (byte) get::return_p2_x#0 ← (byte) get::return_p1_x#0 + (byte) 1
  [22] (byte) get::return_p2_y#0 ← (byte) get::return_p1_x#0 << (byte) 1
  to:get::@return
get::@return: scope:[get]  from get
  [23] stackidx(byte,(byte) 0) ← (byte) get::return_p1_x#0
  [24] stackidx(byte,(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p1_y#0
  [25] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2) ← (byte) get::return_p2_x#0
  [26] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p2_y#0
  [27] return 
  to:@return

__stackcall (void()) main()
main: scope:[main]  from
  [28] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [29] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [30] if((byte) main::i#2<(byte) 5) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [31] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [32] stackpush(byte) ← (byte) main::i#2
  sideeffect stackpushbytes((number) 3)
  [34] callexecute get 
  [35] (byte) main::v_p1_x#0 ← stackpull(byte)
  [36] (byte) main::v_p1_y#0 ← stackpull(byte)
  [37] (byte) main::v_p2_x#0 ← stackpull(byte)
  [38] (byte) main::v_p2_y#0 ← stackpull(byte)
  [39] stackpush(byte) ← (byte) main::v_p1_x#0
  [40] stackpush(byte) ← (byte) main::v_p1_y#0
  [41] stackpush(byte) ← (byte) main::v_p2_x#0
  [42] stackpush(byte) ← (byte) main::v_p2_y#0
  [43] callexecute print 
  sideeffect stackpullbytes((number) 4)
  [45] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1

null depth in calling loop Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  in scope print
null depth in calling loop Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  in scope get

VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(struct Point) Vector::p1
(struct Point) Vector::p2
__stackcall (struct Vector()) get((byte) get::i)
(byte) get::i
(struct Vector) get::return
(struct Point) get::return_p1
(byte) get::return_p1_x
(byte) get::return_p1_x#0 1251.25
(byte) get::return_p1_y
(byte) get::return_p1_y#0 500.5
(struct Point) get::return_p2
(byte) get::return_p2_x
(byte) get::return_p2_x#0 500.5
(byte) get::return_p2_y
(byte) get::return_p2_y#0 500.5
(struct Point) get::v_p1
(byte) get::v_p1_x
(byte) get::v_p1_y
(struct Point) get::v_p2
(byte) get::v_p2_x
(byte) get::v_p2_y
(byte) idx loadstore 441.67647058823525
__stackcall (void()) main()
(byte) main::i
(byte) main::i#1 202.0
(byte) main::i#2 26.933333333333334
(struct Point) main::v_p1
(byte) main::v_p1_x
(byte) main::v_p1_x#0 50.5
(byte) main::v_p1_y
(byte) main::v_p1_y#0 50.5
(struct Point) main::v_p2
(byte) main::v_p2_x
(byte) main::v_p2_x#0 50.5
(byte) main::v_p2_y
(byte) main::v_p2_y#0 50.5
__stackcall (void()) print((byte) print::v_p1_x , (byte) print::v_p1_y , (byte) print::v_p2_x , (byte) print::v_p2_y)
(struct Point) print::v_p1
(byte) print::v_p1_x
(byte) print::v_p1_x#0 500.5
(byte) print::v_p1_y
(byte) print::v_p1_y#0 400.4
(struct Point) print::v_p2
(byte) print::v_p2_x
(byte) print::v_p2_x#0 333.6666666666667
(byte) print::v_p2_y
(byte) print::v_p2_y#0 286.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable idx to live range equivalence class [ idx ]
Added variable print::v_p1_x#0 to live range equivalence class [ print::v_p1_x#0 ]
Added variable print::v_p1_y#0 to live range equivalence class [ print::v_p1_y#0 ]
Added variable print::v_p2_x#0 to live range equivalence class [ print::v_p2_x#0 ]
Added variable print::v_p2_y#0 to live range equivalence class [ print::v_p2_y#0 ]
Added variable get::return_p1_x#0 to live range equivalence class [ get::return_p1_x#0 ]
Added variable get::return_p1_y#0 to live range equivalence class [ get::return_p1_y#0 ]
Added variable get::return_p2_x#0 to live range equivalence class [ get::return_p2_x#0 ]
Added variable get::return_p2_y#0 to live range equivalence class [ get::return_p2_y#0 ]
Added variable main::v_p1_x#0 to live range equivalence class [ main::v_p1_x#0 ]
Added variable main::v_p1_y#0 to live range equivalence class [ main::v_p1_y#0 ]
Added variable main::v_p2_x#0 to live range equivalence class [ main::v_p2_x#0 ]
Added variable main::v_p2_y#0 to live range equivalence class [ main::v_p2_y#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ idx ]
[ print::v_p1_x#0 ]
[ print::v_p1_y#0 ]
[ print::v_p2_x#0 ]
[ print::v_p2_y#0 ]
[ get::return_p1_x#0 ]
[ get::return_p1_y#0 ]
[ get::return_p2_x#0 ]
[ get::return_p2_y#0 ]
[ main::v_p1_x#0 ]
[ main::v_p1_y#0 ]
[ main::v_p2_x#0 ]
[ main::v_p2_y#0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ idx ]
Allocated zp[1]:4 [ print::v_p1_x#0 ]
Allocated zp[1]:5 [ print::v_p1_y#0 ]
Allocated zp[1]:6 [ print::v_p2_x#0 ]
Allocated zp[1]:7 [ print::v_p2_y#0 ]
Allocated zp[1]:8 [ get::return_p1_x#0 ]
Allocated zp[1]:9 [ get::return_p1_y#0 ]
Allocated zp[1]:10 [ get::return_p2_x#0 ]
Allocated zp[1]:11 [ get::return_p2_y#0 ]
Allocated zp[1]:12 [ main::v_p1_x#0 ]
Allocated zp[1]:13 [ main::v_p1_y#0 ]
Allocated zp[1]:14 [ main::v_p2_x#0 ]
Allocated zp[1]:15 [ main::v_p2_y#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test a procedure with calling convention stack
// Returning and passing struct of struct  values
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const STACK_BASE = $103
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_VECTOR_P2 = 2
  .label idx = 3
  // @begin
__bbegin:
  // [0] (byte) idx ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z idx
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] callexecute main  -- jsr 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // print
// print(byte zp(4) v_p1_x, byte zp(5) v_p1_y, byte zp(6) v_p2_x, byte zp(7) v_p2_y)
print: {
    .const OFFSET_STACK_V_P1_X = 3
    .const OFFSET_STACK_V_P1_Y = 2
    .const OFFSET_STACK_V_P2_X = 1
    .const OFFSET_STACK_V_P2_Y = 0
    .label v_p1_x = 4
    .label v_p1_y = 5
    .label v_p2_x = 6
    .label v_p2_y = 7
    // [4] (byte) print::v_p1_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_X) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P1_X,x
    sta.z v_p1_x
    // [5] (byte) print::v_p1_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_Y) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P1_Y,x
    sta.z v_p1_y
    // [6] (byte) print::v_p2_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_X) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P2_X,x
    sta.z v_p2_x
    // [7] (byte) print::v_p2_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_Y) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P2_Y,x
    sta.z v_p2_y
    // [8] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_x#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z v_p1_x
    ldy.z idx
    sta SCREEN,y
    // [9] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [10] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_y#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z v_p1_y
    ldy.z idx
    sta SCREEN,y
    // [11] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [12] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_x#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z v_p2_x
    ldy.z idx
    sta SCREEN,y
    // [13] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [14] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_y#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z v_p2_y
    ldy.z idx
    sta SCREEN,y
    // [15] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [16] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy.z idx
    sta SCREEN,y
    // [17] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __breturn
    // print::@return
  __breturn:
    // [18] return 
    rts
}
  // get
get: {
    .const OFFSET_STACK_I = 0
    .label return_p1_x = 8
    .label return_p1_y = 9
    .label return_p2_x = $a
    .label return_p2_y = $b
    // [19] (byte) get::return_p1_x#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_I,x
    sta.z return_p1_x
    // [20] (byte) get::return_p1_y#0 ← (byte) get::return_p1_x#0 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z return_p1_x
    lsr
    sta.z return_p1_y
    // [21] (byte) get::return_p2_x#0 ← (byte) get::return_p1_x#0 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z return_p1_x
    iny
    sty.z return_p2_x
    // [22] (byte) get::return_p2_y#0 ← (byte) get::return_p1_x#0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z return_p1_x
    asl
    sta.z return_p2_y
    jmp __breturn
    // get::@return
  __breturn:
    // [23] stackidx(byte,(byte) 0) ← (byte) get::return_p1_x#0 -- _stackidxbyte_vbuc1=vbuz1 
    lda.z return_p1_x
    tsx
    sta STACK_BASE+0,x
    // [24] stackidx(byte,(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p1_y#0 -- _stackidxbyte_vbuc1=vbuz1 
    lda.z return_p1_y
    tsx
    sta STACK_BASE+OFFSET_STRUCT_POINT_Y,x
    // [25] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2) ← (byte) get::return_p2_x#0 -- _stackidxbyte_vbuc1=vbuz1 
    lda.z return_p2_x
    tsx
    sta STACK_BASE+OFFSET_STRUCT_VECTOR_P2,x
    // [26] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p2_y#0 -- _stackidxbyte_vbuc1=vbuz1 
    lda.z return_p2_y
    tsx
    sta STACK_BASE+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y,x
    // [27] return 
    rts
}
  // main
main: {
    .label v_p1_x = $c
    .label v_p1_y = $d
    .label v_p2_x = $e
    .label v_p2_y = $f
    .label i = 2
    // [29] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [29] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [30] if((byte) main::i#2<(byte) 5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [31] return 
    rts
    // main::@2
  __b2:
    // [32] stackpush(byte) ← (byte) main::i#2 -- _stackpushbyte_=vbuz1 
    lda.z i
    pha
    // sideeffect stackpushbytes((number) 3) -- _stackpushbyte_3 
    pha
    pha
    pha
    // [34] callexecute get  -- jsr 
    jsr get
    // [35] (byte) main::v_p1_x#0 ← stackpull(byte) -- vbuz1=_stackpullbyte_ 
    pla
    sta.z v_p1_x
    // [36] (byte) main::v_p1_y#0 ← stackpull(byte) -- vbuz1=_stackpullbyte_ 
    pla
    sta.z v_p1_y
    // [37] (byte) main::v_p2_x#0 ← stackpull(byte) -- vbuz1=_stackpullbyte_ 
    pla
    sta.z v_p2_x
    // [38] (byte) main::v_p2_y#0 ← stackpull(byte) -- vbuz1=_stackpullbyte_ 
    pla
    sta.z v_p2_y
    // [39] stackpush(byte) ← (byte) main::v_p1_x#0 -- _stackpushbyte_=vbuz1 
    lda.z v_p1_x
    pha
    // [40] stackpush(byte) ← (byte) main::v_p1_y#0 -- _stackpushbyte_=vbuz1 
    lda.z v_p1_y
    pha
    // [41] stackpush(byte) ← (byte) main::v_p2_x#0 -- _stackpushbyte_=vbuz1 
    lda.z v_p2_x
    pha
    // [42] stackpush(byte) ← (byte) main::v_p2_y#0 -- _stackpushbyte_=vbuz1 
    lda.z v_p2_y
    pha
    // [43] callexecute print  -- jsr 
    jsr print
    // sideeffect stackpullbytes((number) 4) -- _stackpullbyte_4 
    tsx
    txa
    axs #-4
    txs
    // [45] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [29] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [29] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (byte) idx ← (byte) 0 [ idx ] (  [ idx ] { }  ) always clobbers reg byte a 
Statement [4] (byte) print::v_p1_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_X) [ idx print::v_p1_x#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p1_x#0 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [5] (byte) print::v_p1_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_Y) [ idx print::v_p1_x#0 print::v_p1_y#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p1_x#0 print::v_p1_y#0 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ print::v_p1_x#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:4 [ print::v_p1_x#0 ]
Statement [6] (byte) print::v_p2_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_X) [ idx print::v_p1_x#0 print::v_p1_y#0 print::v_p2_x#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p1_x#0 print::v_p1_y#0 print::v_p2_x#0 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ print::v_p1_y#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:5 [ print::v_p1_y#0 ]
Statement [7] (byte) print::v_p2_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_Y) [ idx print::v_p1_x#0 print::v_p1_y#0 print::v_p2_x#0 print::v_p2_y#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p1_x#0 print::v_p1_y#0 print::v_p2_x#0 print::v_p2_y#0 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ print::v_p2_x#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:6 [ print::v_p2_x#0 ]
Statement [8] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_x#0 [ idx print::v_p1_y#0 print::v_p2_x#0 print::v_p2_y#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p1_y#0 print::v_p2_x#0 print::v_p2_y#0 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ print::v_p1_y#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:6 [ print::v_p2_x#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ print::v_p2_y#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:7 [ print::v_p2_y#0 ]
Statement [10] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_y#0 [ idx print::v_p2_x#0 print::v_p2_y#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p2_x#0 print::v_p2_y#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [12] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_x#0 [ idx print::v_p2_y#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p2_y#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [14] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_y#0 [ idx ] ( main:2::print:43 [ main::i#2 idx ] { }  ) always clobbers reg byte a reg byte y 
Statement [16] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) ' ' [ idx ] ( main:2::print:43 [ main::i#2 idx ] { }  ) always clobbers reg byte a reg byte y 
Statement [19] (byte) get::return_p1_x#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I) [ get::return_p1_x#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p1_x#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [20] (byte) get::return_p1_y#0 ← (byte) get::return_p1_x#0 >> (byte) 1 [ get::return_p1_x#0 get::return_p1_y#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p1_x#0 get::return_p1_y#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ get::return_p1_x#0 ]
Statement [22] (byte) get::return_p2_y#0 ← (byte) get::return_p1_x#0 << (byte) 1 [ get::return_p1_x#0 get::return_p1_y#0 get::return_p2_x#0 get::return_p2_y#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p1_x#0 get::return_p1_y#0 get::return_p2_x#0 get::return_p2_y#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ get::return_p1_y#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ get::return_p2_x#0 ]
Statement [23] stackidx(byte,(byte) 0) ← (byte) get::return_p1_x#0 [ get::return_p1_y#0 get::return_p2_x#0 get::return_p2_y#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p1_y#0 get::return_p2_x#0 get::return_p2_y#0 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:9 [ get::return_p1_y#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:10 [ get::return_p2_x#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:11 [ get::return_p2_y#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:11 [ get::return_p2_y#0 ]
Statement [24] stackidx(byte,(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p1_y#0 [ get::return_p2_x#0 get::return_p2_y#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p2_x#0 get::return_p2_y#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [25] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2) ← (byte) get::return_p2_x#0 [ get::return_p2_y#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p2_y#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [26] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p2_y#0 [ ] ( main:2::get:34 [ idx main::i#2 ] { }  ) always clobbers reg byte a reg byte x 
Statement [30] if((byte) main::i#2<(byte) 5) goto main::@2 [ idx main::i#2 ] ( main:2 [ idx main::i#2 ] { }  ) always clobbers reg byte a 
Statement [32] stackpush(byte) ← (byte) main::i#2 [ idx main::i#2 ] ( main:2 [ idx main::i#2 ] { }  ) always clobbers reg byte a 
Statement [35] (byte) main::v_p1_x#0 ← stackpull(byte) [ idx main::i#2 main::v_p1_x#0 ] ( main:2 [ idx main::i#2 main::v_p1_x#0 ] { }  ) always clobbers reg byte a 
Statement [36] (byte) main::v_p1_y#0 ← stackpull(byte) [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 ] ( main:2 [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ main::v_p1_x#0 ]
Statement [37] (byte) main::v_p2_x#0 ← stackpull(byte) [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 main::v_p2_x#0 ] ( main:2 [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 main::v_p2_x#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ main::v_p1_y#0 ]
Statement [38] (byte) main::v_p2_y#0 ← stackpull(byte) [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 main::v_p2_x#0 main::v_p2_y#0 ] ( main:2 [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 main::v_p2_x#0 main::v_p2_y#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ main::v_p2_x#0 ]
Statement [39] stackpush(byte) ← (byte) main::v_p1_x#0 [ idx main::i#2 main::v_p1_y#0 main::v_p2_x#0 main::v_p2_y#0 ] ( main:2 [ idx main::i#2 main::v_p1_y#0 main::v_p2_x#0 main::v_p2_y#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:15 [ main::v_p2_y#0 ]
Statement [40] stackpush(byte) ← (byte) main::v_p1_y#0 [ idx main::i#2 main::v_p2_x#0 main::v_p2_y#0 ] ( main:2 [ idx main::i#2 main::v_p2_x#0 main::v_p2_y#0 ] { }  ) always clobbers reg byte a 
Statement [41] stackpush(byte) ← (byte) main::v_p2_x#0 [ idx main::i#2 main::v_p2_y#0 ] ( main:2 [ idx main::i#2 main::v_p2_y#0 ] { }  ) always clobbers reg byte a 
Statement [42] stackpush(byte) ← (byte) main::v_p2_y#0 [ idx main::i#2 ] ( main:2 [ idx main::i#2 ] { }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 4) always clobbers reg byte a reg byte x 
Statement [0] (byte) idx ← (byte) 0 [ idx ] (  [ idx ] { }  ) always clobbers reg byte a 
Statement [4] (byte) print::v_p1_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_X) [ idx print::v_p1_x#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p1_x#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [5] (byte) print::v_p1_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_Y) [ idx print::v_p1_x#0 print::v_p1_y#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p1_x#0 print::v_p1_y#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [6] (byte) print::v_p2_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_X) [ idx print::v_p1_x#0 print::v_p1_y#0 print::v_p2_x#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p1_x#0 print::v_p1_y#0 print::v_p2_x#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [7] (byte) print::v_p2_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_Y) [ idx print::v_p1_x#0 print::v_p1_y#0 print::v_p2_x#0 print::v_p2_y#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p1_x#0 print::v_p1_y#0 print::v_p2_x#0 print::v_p2_y#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [8] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_x#0 [ idx print::v_p1_y#0 print::v_p2_x#0 print::v_p2_y#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p1_y#0 print::v_p2_x#0 print::v_p2_y#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [10] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_y#0 [ idx print::v_p2_x#0 print::v_p2_y#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p2_x#0 print::v_p2_y#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [12] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_x#0 [ idx print::v_p2_y#0 ] ( main:2::print:43 [ main::i#2 idx print::v_p2_y#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [14] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_y#0 [ idx ] ( main:2::print:43 [ main::i#2 idx ] { }  ) always clobbers reg byte a reg byte y 
Statement [16] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) ' ' [ idx ] ( main:2::print:43 [ main::i#2 idx ] { }  ) always clobbers reg byte a reg byte y 
Statement [19] (byte) get::return_p1_x#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I) [ get::return_p1_x#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p1_x#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [20] (byte) get::return_p1_y#0 ← (byte) get::return_p1_x#0 >> (byte) 1 [ get::return_p1_x#0 get::return_p1_y#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p1_x#0 get::return_p1_y#0 ] { }  ) always clobbers reg byte a 
Statement [22] (byte) get::return_p2_y#0 ← (byte) get::return_p1_x#0 << (byte) 1 [ get::return_p1_x#0 get::return_p1_y#0 get::return_p2_x#0 get::return_p2_y#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p1_x#0 get::return_p1_y#0 get::return_p2_x#0 get::return_p2_y#0 ] { }  ) always clobbers reg byte a 
Statement [23] stackidx(byte,(byte) 0) ← (byte) get::return_p1_x#0 [ get::return_p1_y#0 get::return_p2_x#0 get::return_p2_y#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p1_y#0 get::return_p2_x#0 get::return_p2_y#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [24] stackidx(byte,(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p1_y#0 [ get::return_p2_x#0 get::return_p2_y#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p2_x#0 get::return_p2_y#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [25] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2) ← (byte) get::return_p2_x#0 [ get::return_p2_y#0 ] ( main:2::get:34 [ idx main::i#2 get::return_p2_y#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [26] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p2_y#0 [ ] ( main:2::get:34 [ idx main::i#2 ] { }  ) always clobbers reg byte a reg byte x 
Statement [30] if((byte) main::i#2<(byte) 5) goto main::@2 [ idx main::i#2 ] ( main:2 [ idx main::i#2 ] { }  ) always clobbers reg byte a 
Statement [32] stackpush(byte) ← (byte) main::i#2 [ idx main::i#2 ] ( main:2 [ idx main::i#2 ] { }  ) always clobbers reg byte a 
Statement [35] (byte) main::v_p1_x#0 ← stackpull(byte) [ idx main::i#2 main::v_p1_x#0 ] ( main:2 [ idx main::i#2 main::v_p1_x#0 ] { }  ) always clobbers reg byte a 
Statement [36] (byte) main::v_p1_y#0 ← stackpull(byte) [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 ] ( main:2 [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 ] { }  ) always clobbers reg byte a 
Statement [37] (byte) main::v_p2_x#0 ← stackpull(byte) [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 main::v_p2_x#0 ] ( main:2 [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 main::v_p2_x#0 ] { }  ) always clobbers reg byte a 
Statement [38] (byte) main::v_p2_y#0 ← stackpull(byte) [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 main::v_p2_x#0 main::v_p2_y#0 ] ( main:2 [ idx main::i#2 main::v_p1_x#0 main::v_p1_y#0 main::v_p2_x#0 main::v_p2_y#0 ] { }  ) always clobbers reg byte a 
Statement [39] stackpush(byte) ← (byte) main::v_p1_x#0 [ idx main::i#2 main::v_p1_y#0 main::v_p2_x#0 main::v_p2_y#0 ] ( main:2 [ idx main::i#2 main::v_p1_y#0 main::v_p2_x#0 main::v_p2_y#0 ] { }  ) always clobbers reg byte a 
Statement [40] stackpush(byte) ← (byte) main::v_p1_y#0 [ idx main::i#2 main::v_p2_x#0 main::v_p2_y#0 ] ( main:2 [ idx main::i#2 main::v_p2_x#0 main::v_p2_y#0 ] { }  ) always clobbers reg byte a 
Statement [41] stackpush(byte) ← (byte) main::v_p2_x#0 [ idx main::i#2 main::v_p2_y#0 ] ( main:2 [ idx main::i#2 main::v_p2_y#0 ] { }  ) always clobbers reg byte a 
Statement [42] stackpush(byte) ← (byte) main::v_p2_y#0 [ idx main::i#2 ] ( main:2 [ idx main::i#2 ] { }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 4) always clobbers reg byte a reg byte x 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ idx ] : zp[1]:3 , 
Potential registers zp[1]:4 [ print::v_p1_x#0 ] : zp[1]:4 , reg byte y , 
Potential registers zp[1]:5 [ print::v_p1_y#0 ] : zp[1]:5 , 
Potential registers zp[1]:6 [ print::v_p2_x#0 ] : zp[1]:6 , 
Potential registers zp[1]:7 [ print::v_p2_y#0 ] : zp[1]:7 , reg byte x , 
Potential registers zp[1]:8 [ get::return_p1_x#0 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ get::return_p1_y#0 ] : zp[1]:9 , reg byte y , 
Potential registers zp[1]:10 [ get::return_p2_x#0 ] : zp[1]:10 , reg byte y , 
Potential registers zp[1]:11 [ get::return_p2_y#0 ] : zp[1]:11 , reg byte y , 
Potential registers zp[1]:12 [ main::v_p1_x#0 ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ main::v_p1_y#0 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ main::v_p2_x#0 ] : zp[1]:14 , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ main::v_p2_y#0 ] : zp[1]:15 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [get] 1,251.25: zp[1]:8 [ get::return_p1_x#0 ] 500.5: zp[1]:9 [ get::return_p1_y#0 ] 500.5: zp[1]:10 [ get::return_p2_x#0 ] 500.5: zp[1]:11 [ get::return_p2_y#0 ] 
Uplift Scope [print] 500.5: zp[1]:4 [ print::v_p1_x#0 ] 400.4: zp[1]:5 [ print::v_p1_y#0 ] 333.67: zp[1]:6 [ print::v_p2_x#0 ] 286: zp[1]:7 [ print::v_p2_y#0 ] 
Uplift Scope [] 441.68: zp[1]:3 [ idx ] 
Uplift Scope [main] 228.93: zp[1]:2 [ main::i#2 main::i#1 ] 50.5: zp[1]:12 [ main::v_p1_x#0 ] 50.5: zp[1]:13 [ main::v_p1_y#0 ] 50.5: zp[1]:14 [ main::v_p2_x#0 ] 50.5: zp[1]:15 [ main::v_p2_y#0 ] 
Uplift Scope [Point] 
Uplift Scope [Vector] 

Uplifting [get] best 1357 combination reg byte x [ get::return_p1_x#0 ] zp[1]:9 [ get::return_p1_y#0 ] reg byte y [ get::return_p2_x#0 ] zp[1]:11 [ get::return_p2_y#0 ] 
Uplifting [print] best 1353 combination reg byte y [ print::v_p1_x#0 ] zp[1]:5 [ print::v_p1_y#0 ] zp[1]:6 [ print::v_p2_x#0 ] reg byte x [ print::v_p2_y#0 ] 
Uplifting [] best 1353 combination zp[1]:3 [ idx ] 
Uplifting [main] best 1313 combination zp[1]:2 [ main::i#2 main::i#1 ] reg byte y [ main::v_p1_x#0 ] reg byte x [ main::v_p1_y#0 ] zp[1]:14 [ main::v_p2_x#0 ] zp[1]:15 [ main::v_p2_y#0 ] 
Uplifting [Point] best 1313 combination 
Uplifting [Vector] best 1313 combination 
Attempting to uplift remaining variables inzp[1]:9 [ get::return_p1_y#0 ]
Uplifting [get] best 1313 combination zp[1]:9 [ get::return_p1_y#0 ] 
Attempting to uplift remaining variables inzp[1]:11 [ get::return_p2_y#0 ]
Uplifting [get] best 1313 combination zp[1]:11 [ get::return_p2_y#0 ] 
Attempting to uplift remaining variables inzp[1]:3 [ idx ]
Uplifting [] best 1313 combination zp[1]:3 [ idx ] 
Attempting to uplift remaining variables inzp[1]:5 [ print::v_p1_y#0 ]
Uplifting [print] best 1313 combination zp[1]:5 [ print::v_p1_y#0 ] 
Attempting to uplift remaining variables inzp[1]:6 [ print::v_p2_x#0 ]
Uplifting [print] best 1313 combination zp[1]:6 [ print::v_p2_x#0 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 1313 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:14 [ main::v_p2_x#0 ]
Uplifting [main] best 1313 combination zp[1]:14 [ main::v_p2_x#0 ] 
Attempting to uplift remaining variables inzp[1]:15 [ main::v_p2_y#0 ]
Uplifting [main] best 1313 combination zp[1]:15 [ main::v_p2_y#0 ] 
Coalescing zero page register [ zp[1]:9 [ get::return_p1_y#0 ] ] with [ zp[1]:5 [ print::v_p1_y#0 ] ]
Coalescing zero page register [ zp[1]:11 [ get::return_p2_y#0 ] ] with [ zp[1]:6 [ print::v_p2_x#0 ] ]
Coalescing zero page register [ zp[1]:14 [ main::v_p2_x#0 ] ] with [ zp[1]:9 [ get::return_p1_y#0 print::v_p1_y#0 ] ]
Coalescing zero page register [ zp[1]:15 [ main::v_p2_y#0 ] ] with [ zp[1]:11 [ get::return_p2_y#0 print::v_p2_x#0 ] ]
Allocated (was zp[1]:14) zp[1]:4 [ main::v_p2_x#0 get::return_p1_y#0 print::v_p1_y#0 ]
Allocated (was zp[1]:15) zp[1]:5 [ main::v_p2_y#0 get::return_p2_y#0 print::v_p2_x#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a procedure with calling convention stack
// Returning and passing struct of struct  values
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const STACK_BASE = $103
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_VECTOR_P2 = 2
  .label idx = 3
  // @begin
__bbegin:
  // [0] (byte) idx ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z idx
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] callexecute main  -- jsr 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // print
// print(byte register(Y) v_p1_x, byte zp(4) v_p1_y, byte zp(5) v_p2_x, byte register(X) v_p2_y)
print: {
    .const OFFSET_STACK_V_P1_X = 3
    .const OFFSET_STACK_V_P1_Y = 2
    .const OFFSET_STACK_V_P2_X = 1
    .const OFFSET_STACK_V_P2_Y = 0
    .label v_p1_y = 4
    .label v_p2_x = 5
    // [4] (byte) print::v_p1_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_X) -- vbuyy=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P1_X,x
    tay
    // [5] (byte) print::v_p1_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_Y) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P1_Y,x
    sta.z v_p1_y
    // [6] (byte) print::v_p2_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_X) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P2_X,x
    sta.z v_p2_x
    // [7] (byte) print::v_p2_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_Y) -- vbuxx=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P2_Y,x
    tax
    // [8] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_x#0 -- pbuc1_derefidx_vbuz1=vbuyy 
    tya
    ldy.z idx
    sta SCREEN,y
    // [9] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [10] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_y#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z v_p1_y
    ldy.z idx
    sta SCREEN,y
    // [11] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [12] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_x#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z v_p2_x
    ldy.z idx
    sta SCREEN,y
    // [13] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [14] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_y#0 -- pbuc1_derefidx_vbuz1=vbuxx 
    ldy.z idx
    txa
    sta SCREEN,y
    // [15] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [16] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy.z idx
    sta SCREEN,y
    // [17] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __breturn
    // print::@return
  __breturn:
    // [18] return 
    rts
}
  // get
get: {
    .const OFFSET_STACK_I = 0
    .label return_p1_y = 4
    .label return_p2_y = 5
    // [19] (byte) get::return_p1_x#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I) -- vbuxx=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_I,x
    tax
    // [20] (byte) get::return_p1_y#0 ← (byte) get::return_p1_x#0 >> (byte) 1 -- vbuz1=vbuxx_ror_1 
    txa
    lsr
    sta.z return_p1_y
    // [21] (byte) get::return_p2_x#0 ← (byte) get::return_p1_x#0 + (byte) 1 -- vbuyy=vbuxx_plus_1 
    txa
    tay
    iny
    // [22] (byte) get::return_p2_y#0 ← (byte) get::return_p1_x#0 << (byte) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta.z return_p2_y
    jmp __breturn
    // get::@return
  __breturn:
    // [23] stackidx(byte,(byte) 0) ← (byte) get::return_p1_x#0 -- _stackidxbyte_vbuc1=vbuxx 
    txa
    tsx
    sta STACK_BASE+0,x
    // [24] stackidx(byte,(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p1_y#0 -- _stackidxbyte_vbuc1=vbuz1 
    lda.z return_p1_y
    tsx
    sta STACK_BASE+OFFSET_STRUCT_POINT_Y,x
    // [25] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2) ← (byte) get::return_p2_x#0 -- _stackidxbyte_vbuc1=vbuyy 
    tya
    tsx
    sta STACK_BASE+OFFSET_STRUCT_VECTOR_P2,x
    // [26] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p2_y#0 -- _stackidxbyte_vbuc1=vbuz1 
    lda.z return_p2_y
    tsx
    sta STACK_BASE+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y,x
    // [27] return 
    rts
}
  // main
main: {
    .label v_p2_x = 4
    .label v_p2_y = 5
    .label i = 2
    // [29] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [29] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [30] if((byte) main::i#2<(byte) 5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [31] return 
    rts
    // main::@2
  __b2:
    // [32] stackpush(byte) ← (byte) main::i#2 -- _stackpushbyte_=vbuz1 
    lda.z i
    pha
    // sideeffect stackpushbytes((number) 3) -- _stackpushbyte_3 
    pha
    pha
    pha
    // [34] callexecute get  -- jsr 
    jsr get
    // [35] (byte) main::v_p1_x#0 ← stackpull(byte) -- vbuyy=_stackpullbyte_ 
    pla
    tay
    // [36] (byte) main::v_p1_y#0 ← stackpull(byte) -- vbuxx=_stackpullbyte_ 
    pla
    tax
    // [37] (byte) main::v_p2_x#0 ← stackpull(byte) -- vbuz1=_stackpullbyte_ 
    pla
    sta.z v_p2_x
    // [38] (byte) main::v_p2_y#0 ← stackpull(byte) -- vbuz1=_stackpullbyte_ 
    pla
    sta.z v_p2_y
    // [39] stackpush(byte) ← (byte) main::v_p1_x#0 -- _stackpushbyte_=vbuyy 
    tya
    pha
    // [40] stackpush(byte) ← (byte) main::v_p1_y#0 -- _stackpushbyte_=vbuxx 
    txa
    pha
    // [41] stackpush(byte) ← (byte) main::v_p2_x#0 -- _stackpushbyte_=vbuz1 
    lda.z v_p2_x
    pha
    // [42] stackpush(byte) ← (byte) main::v_p2_y#0 -- _stackpushbyte_=vbuz1 
    lda.z v_p2_y
    pha
    // [43] callexecute print  -- jsr 
    jsr print
    // sideeffect stackpullbytes((number) 4) -- _stackpullbyte_4 
    tsx
    txa
    axs #-4
    txs
    // [45] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [29] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [29] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1:
Removing instruction __bend:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(const byte) OFFSET_STRUCT_VECTOR_P2 = (byte) 2
(byte) Point::x
(byte) Point::y
(const nomodify byte*) SCREEN = (byte*) 1024
(const word) STACK_BASE = (word) $103
(struct Point) Vector::p1
(struct Point) Vector::p2
__stackcall (struct Vector()) get((byte) get::i)
(label) get::@return
(const byte) get::OFFSET_STACK_I = (byte) 0
(byte) get::i
(struct Vector) get::return
(struct Point) get::return_p1
(byte) get::return_p1_x
(byte) get::return_p1_x#0 reg byte x 1251.25
(byte) get::return_p1_y
(byte) get::return_p1_y#0 return_p1_y zp[1]:4 500.5
(struct Point) get::return_p2
(byte) get::return_p2_x
(byte) get::return_p2_x#0 reg byte y 500.5
(byte) get::return_p2_y
(byte) get::return_p2_y#0 return_p2_y zp[1]:5 500.5
(struct Point) get::v_p1
(byte) get::v_p1_x
(byte) get::v_p1_y
(struct Point) get::v_p2
(byte) get::v_p2_x
(byte) get::v_p2_y
(byte) idx loadstore zp[1]:3 441.67647058823525
__stackcall (void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#1 i zp[1]:2 202.0
(byte) main::i#2 i zp[1]:2 26.933333333333334
(struct Point) main::v_p1
(byte) main::v_p1_x
(byte) main::v_p1_x#0 reg byte y 50.5
(byte) main::v_p1_y
(byte) main::v_p1_y#0 reg byte x 50.5
(struct Point) main::v_p2
(byte) main::v_p2_x
(byte) main::v_p2_x#0 v_p2_x zp[1]:4 50.5
(byte) main::v_p2_y
(byte) main::v_p2_y#0 v_p2_y zp[1]:5 50.5
__stackcall (void()) print((byte) print::v_p1_x , (byte) print::v_p1_y , (byte) print::v_p2_x , (byte) print::v_p2_y)
(label) print::@return
(const byte) print::OFFSET_STACK_V_P1_X = (byte) 3
(const byte) print::OFFSET_STACK_V_P1_Y = (byte) 2
(const byte) print::OFFSET_STACK_V_P2_X = (byte) 1
(const byte) print::OFFSET_STACK_V_P2_Y = (byte) 0
(struct Point) print::v_p1
(byte) print::v_p1_x
(byte) print::v_p1_x#0 reg byte y 500.5
(byte) print::v_p1_y
(byte) print::v_p1_y#0 v_p1_y zp[1]:4 400.4
(struct Point) print::v_p2
(byte) print::v_p2_x
(byte) print::v_p2_x#0 v_p2_x zp[1]:5 333.6666666666667
(byte) print::v_p2_y
(byte) print::v_p2_y#0 reg byte x 286.0

zp[1]:2 [ main::i#2 main::i#1 ]
zp[1]:3 [ idx ]
reg byte y [ print::v_p1_x#0 ]
reg byte x [ print::v_p2_y#0 ]
reg byte x [ get::return_p1_x#0 ]
reg byte y [ get::return_p2_x#0 ]
reg byte y [ main::v_p1_x#0 ]
reg byte x [ main::v_p1_y#0 ]
zp[1]:4 [ main::v_p2_x#0 get::return_p1_y#0 print::v_p1_y#0 ]
zp[1]:5 [ main::v_p2_y#0 get::return_p2_y#0 print::v_p2_x#0 ]


FINAL ASSEMBLER
Score: 1247

  // File Comments
// Test a procedure with calling convention stack
// Returning and passing struct of struct  values
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const STACK_BASE = $103
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_VECTOR_P2 = 2
  .label idx = 3
  // @begin
__bbegin:
  // idx = 0
  // [0] (byte) idx ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z idx
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] callexecute main  -- jsr 
  jsr main
  rts
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // print
// print(byte register(Y) v_p1_x, byte zp(4) v_p1_y, byte zp(5) v_p2_x, byte register(X) v_p2_y)
print: {
    .const OFFSET_STACK_V_P1_X = 3
    .const OFFSET_STACK_V_P1_Y = 2
    .const OFFSET_STACK_V_P2_X = 1
    .const OFFSET_STACK_V_P2_Y = 0
    .label v_p1_y = 4
    .label v_p2_x = 5
    // }
    // [4] (byte) print::v_p1_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_X) -- vbuyy=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P1_X,x
    tay
    // [5] (byte) print::v_p1_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P1_Y) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P1_Y,x
    sta.z v_p1_y
    // [6] (byte) print::v_p2_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_X) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P2_X,x
    sta.z v_p2_x
    // [7] (byte) print::v_p2_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_V_P2_Y) -- vbuxx=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_V_P2_Y,x
    tax
    // SCREEN[idx++] = v.p1.x
    // [8] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_x#0 -- pbuc1_derefidx_vbuz1=vbuyy 
    tya
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = v.p1.x;
    // [9] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // SCREEN[idx++] = v.p1.y
    // [10] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p1_y#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z v_p1_y
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = v.p1.y;
    // [11] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // SCREEN[idx++] = v.p2.x
    // [12] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_x#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z v_p2_x
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = v.p2.x;
    // [13] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // SCREEN[idx++] = v.p2.y
    // [14] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::v_p2_y#0 -- pbuc1_derefidx_vbuz1=vbuxx 
    ldy.z idx
    txa
    sta SCREEN,y
    // SCREEN[idx++] = v.p2.y;
    // [15] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // SCREEN[idx++] = ' '
    // [16] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = ' ';
    // [17] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // print::@return
    // }
    // [18] return 
    rts
}
  // get
get: {
    .const OFFSET_STACK_I = 0
    .label return_p1_y = 4
    .label return_p2_y = 5
    // [19] (byte) get::return_p1_x#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I) -- vbuxx=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_I,x
    tax
    // i/2
    // [20] (byte) get::return_p1_y#0 ← (byte) get::return_p1_x#0 >> (byte) 1 -- vbuz1=vbuxx_ror_1 
    txa
    lsr
    sta.z return_p1_y
    // i+1
    // [21] (byte) get::return_p2_x#0 ← (byte) get::return_p1_x#0 + (byte) 1 -- vbuyy=vbuxx_plus_1 
    txa
    tay
    iny
    // i*2
    // [22] (byte) get::return_p2_y#0 ← (byte) get::return_p1_x#0 << (byte) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta.z return_p2_y
    // get::@return
    // }
    // [23] stackidx(byte,(byte) 0) ← (byte) get::return_p1_x#0 -- _stackidxbyte_vbuc1=vbuxx 
    txa
    tsx
    sta STACK_BASE+0,x
    // [24] stackidx(byte,(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p1_y#0 -- _stackidxbyte_vbuc1=vbuz1 
    lda.z return_p1_y
    tsx
    sta STACK_BASE+OFFSET_STRUCT_POINT_Y,x
    // [25] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2) ← (byte) get::return_p2_x#0 -- _stackidxbyte_vbuc1=vbuyy 
    tya
    tsx
    sta STACK_BASE+OFFSET_STRUCT_VECTOR_P2,x
    // [26] stackidx(byte,(const byte) OFFSET_STRUCT_VECTOR_P2+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_p2_y#0 -- _stackidxbyte_vbuc1=vbuz1 
    lda.z return_p2_y
    tsx
    sta STACK_BASE+OFFSET_STRUCT_VECTOR_P2+OFFSET_STRUCT_POINT_Y,x
    // [27] return 
    rts
}
  // main
main: {
    .label v_p2_x = 4
    .label v_p2_y = 5
    .label i = 2
    // [29] phi from main to main::@1 [phi:main->main::@1]
    // [29] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
  __b1:
    // for(char i=0;i<5;i++)
    // [30] if((byte) main::i#2<(byte) 5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    // main::@return
    // }
    // [31] return 
    rts
    // main::@2
  __b2:
    // get(i)
    // [32] stackpush(byte) ← (byte) main::i#2 -- _stackpushbyte_=vbuz1 
    lda.z i
    pha
    // sideeffect stackpushbytes((number) 3) -- _stackpushbyte_3 
    pha
    pha
    pha
    // [34] callexecute get  -- jsr 
    jsr get
    // v = get(i)
    // [35] (byte) main::v_p1_x#0 ← stackpull(byte) -- vbuyy=_stackpullbyte_ 
    pla
    tay
    // [36] (byte) main::v_p1_y#0 ← stackpull(byte) -- vbuxx=_stackpullbyte_ 
    pla
    tax
    // [37] (byte) main::v_p2_x#0 ← stackpull(byte) -- vbuz1=_stackpullbyte_ 
    pla
    sta.z v_p2_x
    // [38] (byte) main::v_p2_y#0 ← stackpull(byte) -- vbuz1=_stackpullbyte_ 
    pla
    sta.z v_p2_y
    // print(v)
    // [39] stackpush(byte) ← (byte) main::v_p1_x#0 -- _stackpushbyte_=vbuyy 
    tya
    pha
    // [40] stackpush(byte) ← (byte) main::v_p1_y#0 -- _stackpushbyte_=vbuxx 
    txa
    pha
    // [41] stackpush(byte) ← (byte) main::v_p2_x#0 -- _stackpushbyte_=vbuz1 
    lda.z v_p2_x
    pha
    // [42] stackpush(byte) ← (byte) main::v_p2_y#0 -- _stackpushbyte_=vbuz1 
    lda.z v_p2_y
    pha
    // [43] callexecute print  -- jsr 
    jsr print
    // sideeffect stackpullbytes((number) 4) -- _stackpullbyte_4 
    tsx
    txa
    axs #-4
    txs
    // for(char i=0;i<5;i++)
    // [45] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [29] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [29] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

