
void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [1] main::vaddr#3 = phi( main/(byte*) 0, main::@4/main::vaddr#2 )
  [1] main::i#2 = phi( main/0, main::@4/main::i#1 )
  [2] if(0!=main::MSG[main::i#2]) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] vpoke::addr#0 = main::vaddr#3
  [5] vpoke::data#0 = main::MSG[main::i#2]
  [6] call vpoke 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [7] main::vaddr#1 = ++ main::vaddr#3
  [8] vpoke::addr#1 = main::vaddr#1
  [9] call vpoke 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [10] main::vaddr#2 = ++ main::vaddr#1
  [11] main::i#1 = ++ main::i#2
  to:main::@1

void vpoke(byte vpoke::bank , byte* vpoke::addr , byte vpoke::data)
vpoke: scope:[vpoke]  from main::@2 main::@3
  [12] vpoke::data#2 = phi( main::@2/vpoke::data#0, main::@3/$21 )
  [12] vpoke::addr#2 = phi( main::@2/vpoke::addr#0, main::@3/vpoke::addr#1 )
  [13] *VERA_CTRL = *VERA_CTRL & ~VERA_ADDRSEL
  [14] vpoke::$0 = < vpoke::addr#2
  [15] *VERA_ADDRX_L = vpoke::$0
  [16] vpoke::$1 = > vpoke::addr#2
  [17] *VERA_ADDRX_M = vpoke::$1
  [18] *VERA_ADDRX_H = 0
  [19] *VERA_DATA0 = vpoke::data#2
  to:vpoke::@return
vpoke::@return: scope:[vpoke]  from vpoke
  [20] return 
  to:@return
