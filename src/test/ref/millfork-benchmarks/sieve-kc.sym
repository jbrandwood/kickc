const nomodify word COUNT = $4000
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte SQRT_COUNT = $80
const byte* Sieve[COUNT]  = { fill( COUNT, 0) }
word Ticks
word Ticks#0 Ticks zp[2]:8 101.0
word Ticks#1 Ticks_1 zp[2]:10 202.0
void __start()
void end()
volatile word last_time loadstore zp[2]:6 14.500000000000002
signed word main()
signed word main::return
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 20002.0
byte print_char::ch#1 reg byte a 20002.0
byte print_char::ch#2 reg byte a 120003.0
byte* print_char_cursor
byte* print_char_cursor#26 print_char_cursor zp[2]:4 110002.0
byte* print_char_cursor#27 print_char_cursor zp[2]:4 7117.882352941177
byte* print_char_cursor#37 print_char_cursor zp[2]:4 3667.333333333333
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:2 15001.5
byte* print_line_cursor#9 print_line_cursor zp[2]:2 20002.0
void print_ln()
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 20002.0
byte~ print_uchar::$2 reg byte x 20002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 2002.0
byte print_uchar::b#1 reg byte x 2002.0
byte print_uchar::b#2 reg byte x 5501.0
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 w zp[2]:10 701.0
void round()
byte~ round::$4 reg byte a 2002.0
byte round::I
byte round::I#2 reg byte x 2002.0
byte round::I#3 reg byte x 1667.3333333333333
byte* round::S
byte* round::S#1 S zp[2]:4 2002.0
byte* round::S#2 S zp[2]:4 20002.0
byte* round::S#3 S zp[2]:4 13668.333333333332
byte* round::p
byte* round::p#1 p zp[2]:2 2002.0
byte* round::p#2 p zp[2]:2 1334.6666666666667
void start()
const nomodify word* start::LAST_TIME = &last_time

reg byte x [ round::I#3 round::I#2 ]
zp[2]:2 [ print_line_cursor#9 print_line_cursor#0 round::p#2 round::p#1 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp[2]:4 [ print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 round::S#3 round::S#2 round::S#1 ]
zp[2]:6 [ last_time ]
reg byte a [ round::$4 ]
zp[2]:8 [ Ticks#0 ]
zp[2]:10 [ Ticks#1 print_uint::w#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
