
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print_euclid 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] (byte*) print_char_cursor#65 ← (byte*) print_line_cursor#0
  [5] call print_euclid 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] (byte*) print_char_cursor#66 ← (byte*) print_line_cursor#0
  [7] call print_euclid 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [8] (byte*) print_char_cursor#67 ← (byte*) print_line_cursor#0
  [9] call print_euclid 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] (byte*) print_char_cursor#68 ← (byte*) print_line_cursor#0
  [11] call print_euclid 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [12] (byte*) print_char_cursor#69 ← (byte*) print_line_cursor#0
  [13] call print_euclid 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [14] return 
  to:@return

(void()) print_euclid((byte) print_euclid::a , (byte) print_euclid::b)
print_euclid: scope:[print_euclid]  from main::@1 main::@2 main::@3 main::@4 main::@5 main::@6
  [15] (byte*) print_line_cursor#35 ← phi( main::@1/(const byte*) print_screen#0 main::@2/(byte*) print_line_cursor#0 main::@3/(byte*) print_line_cursor#0 main::@4/(byte*) print_line_cursor#0 main::@5/(byte*) print_line_cursor#0 main::@6/(byte*) print_line_cursor#0 )
  [15] (byte) print_euclid::b#10 ← phi( main::@1/(byte) 2 main::@2/(byte) $45 main::@3/(byte) $37 main::@4/(byte) 3 main::@5/(byte) $1a main::@6/(byte) $bb )
  [15] (byte*) print_char_cursor#55 ← phi( main::@1/(const byte*) print_screen#0 main::@2/(byte*) print_char_cursor#65 main::@3/(byte*) print_char_cursor#66 main::@4/(byte*) print_char_cursor#67 main::@5/(byte*) print_char_cursor#68 main::@6/(byte*) print_char_cursor#69 )
  [15] (byte) print_euclid::a#10 ← phi( main::@1/(byte) $80 main::@2/(byte) $a9 main::@3/(byte) $9b main::@4/(byte) $c7 main::@5/(byte) $5b main::@6/(byte) $77 )
  [16] (byte) print_uchar::b#0 ← (byte) print_euclid::a#10
  [17] call print_uchar 
  to:print_euclid::@1
print_euclid::@1: scope:[print_euclid]  from print_euclid
  [18] phi()
  [19] call print_char 
  to:print_euclid::@2
print_euclid::@2: scope:[print_euclid]  from print_euclid::@1
  [20] (byte) print_uchar::b#1 ← (byte) print_euclid::b#10
  [21] call print_uchar 
  to:print_euclid::@3
print_euclid::@3: scope:[print_euclid]  from print_euclid::@2
  [22] phi()
  [23] call print_char 
  to:print_euclid::@4
print_euclid::@4: scope:[print_euclid]  from print_euclid::@3
  [24] (byte) euclid::a#0 ← (byte) print_euclid::a#10
  [25] (byte) euclid::b#0 ← (byte) print_euclid::b#10
  [26] call euclid 
  [27] (byte) euclid::return#0 ← (byte) euclid::a#2
  to:print_euclid::@5
print_euclid::@5: scope:[print_euclid]  from print_euclid::@4
  [28] (byte) print_uchar::b#2 ← (byte) euclid::return#0
  [29] call print_uchar 
  to:print_euclid::@6
print_euclid::@6: scope:[print_euclid]  from print_euclid::@5
  [30] phi()
  [31] call print_ln 
  to:print_euclid::@return
print_euclid::@return: scope:[print_euclid]  from print_euclid::@6
  [32] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from print_euclid::@6
  [33] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [34] (byte*) print_line_cursor#17 ← phi( print_ln/(byte*) print_line_cursor#35 print_ln::@1/(byte*) print_line_cursor#0 )
  [35] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#17 + (byte) $28
  [36] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#33) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [37] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_euclid print_euclid::@2 print_euclid::@5
  [38] (byte*) print_char_cursor#53 ← phi( print_euclid/(byte*) print_char_cursor#55 print_euclid::@2/(byte*) print_char_cursor#33 print_euclid::@5/(byte*) print_char_cursor#33 )
  [38] (byte) print_uchar::b#3 ← phi( print_euclid/(byte) print_uchar::b#0 print_euclid::@2/(byte) print_uchar::b#1 print_euclid::@5/(byte) print_uchar::b#2 )
  [39] (byte~) print_uchar::$0 ← (byte) print_uchar::b#3 >> (byte) 4
  [40] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [41] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [42] (byte~) print_uchar::$2 ← (byte) print_uchar::b#3 & (byte) $f
  [43] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [44] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [45] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_euclid::@1 print_euclid::@3 print_uchar print_uchar::@1
  [46] (byte*) print_char_cursor#32 ← phi( print_euclid::@1/(byte*) print_char_cursor#33 print_euclid::@3/(byte*) print_char_cursor#33 print_uchar/(byte*) print_char_cursor#53 print_uchar::@1/(byte*) print_char_cursor#33 )
  [46] (byte) print_char::ch#4 ← phi( print_euclid::@1/(byte) ' ' print_euclid::@3/(byte) ' ' print_uchar/(byte) print_char::ch#0 print_uchar::@1/(byte) print_char::ch#1 )
  [47] *((byte*) print_char_cursor#32) ← (byte) print_char::ch#4
  [48] (byte*) print_char_cursor#33 ← ++ (byte*) print_char_cursor#32
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [49] return 
  to:@return

(byte()) euclid((byte) euclid::a , (byte) euclid::b)
euclid: scope:[euclid]  from print_euclid::@4
  [50] phi()
  to:euclid::@1
euclid::@1: scope:[euclid]  from euclid euclid::@3 euclid::@4
  [51] (byte) euclid::b#2 ← phi( euclid/(byte) euclid::b#0 euclid::@3/(byte) euclid::b#2 euclid::@4/(byte) euclid::b#1 )
  [51] (byte) euclid::a#2 ← phi( euclid/(byte) euclid::a#0 euclid::@3/(byte) euclid::a#1 euclid::@4/(byte) euclid::a#2 )
  [52] if((byte) euclid::a#2!=(byte) euclid::b#2) goto euclid::@2
  to:euclid::@return
euclid::@return: scope:[euclid]  from euclid::@1
  [53] return 
  to:@return
euclid::@2: scope:[euclid]  from euclid::@1
  [54] if((byte) euclid::a#2>(byte) euclid::b#2) goto euclid::@3
  to:euclid::@4
euclid::@4: scope:[euclid]  from euclid::@2
  [55] (byte) euclid::b#1 ← (byte) euclid::b#2 - (byte) euclid::a#2
  to:euclid::@1
euclid::@3: scope:[euclid]  from euclid::@2
  [56] (byte) euclid::a#1 ← (byte) euclid::a#2 - (byte) euclid::b#2
  to:euclid::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [57] phi()
  [58] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [59] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [60] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [61] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [62] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [63] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [64] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [65] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
