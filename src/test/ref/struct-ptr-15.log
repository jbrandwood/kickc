Fixing pointer increment (struct Circle*) main::ptr ← ++ (struct Circle*) main::ptr
Fixing pointer array-indexing *((struct Circle[2]) circles + (number) 0)
Fixing pointer array-indexing *((struct Circle[2]) circles + (number) 0)
Fixing pointer array-indexing *((struct Circle[2]) circles + (number) 0)
Fixing pointer array-indexing *((struct Circle[2]) circles + (number) 1)
Fixing pointer array-indexing *((struct Circle[2]) circles + (number) 1)
Fixing pointer array-indexing *((struct Circle[2]) circles + (number) 1)
Rewriting struct pointer member access *((struct Circle[2]) circles + (number~) main::$1).center
Rewriting struct pointer member access *((struct Circle[2]) circles + (number~) main::$2).center
Rewriting struct pointer member access *((struct Circle[2]) circles + (number~) main::$3).radius
Rewriting struct pointer member access *((struct Circle[2]) circles + (number~) main::$4).center
Rewriting struct pointer member access *((struct Circle[2]) circles + (number~) main::$5).center
Rewriting struct pointer member access *((struct Circle[2]) circles + (number~) main::$6).radius
Rewriting struct pointer member access *((struct Circle*) main::ptr).center
Rewriting struct pointer member access *((struct Circle*) main::ptr).center
Rewriting struct pointer member access *((struct Point*) main::$7 + (number~) main::$1).x
Rewriting struct pointer member access *((struct Point*) main::$8 + (number~) main::$2).y
Rewriting struct pointer member access *((struct Point*) main::$10 + (number~) main::$4).x
Rewriting struct pointer member access *((struct Point*) main::$11 + (number~) main::$5).y
Rewriting struct pointer member access *((struct Point*) main::$13).x
Rewriting struct pointer member access *((struct Point*) main::$14).y
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (struct Circle[2]) circles ← { fill( 2, 0) }
  to:@1

(void()) main()
main: scope:[main]  from @1
  (number~) main::$1 ← (number) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
  (struct Point*) main::$7 ← (struct Point*)(struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
  (byte*) main::$15 ← (byte*)(struct Point*) main::$7 + (const byte) OFFSET_STRUCT_POINT_X
  *((byte*) main::$15 + (number~) main::$1) ← (number) 2
  (number~) main::$2 ← (number) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
  (struct Point*) main::$8 ← (struct Point*)(struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
  (byte*) main::$16 ← (byte*)(struct Point*) main::$8 + (const byte) OFFSET_STRUCT_POINT_Y
  *((byte*) main::$16 + (number~) main::$2) ← (number) 3
  (number~) main::$3 ← (number) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
  (byte*) main::$9 ← (byte*)(struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_RADIUS
  *((byte*) main::$9 + (number~) main::$3) ← (number) 5
  (number~) main::$4 ← (number) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
  (struct Point*) main::$10 ← (struct Point*)(struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
  (byte*) main::$17 ← (byte*)(struct Point*) main::$10 + (const byte) OFFSET_STRUCT_POINT_X
  *((byte*) main::$17 + (number~) main::$4) ← (number) 8
  (number~) main::$5 ← (number) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
  (struct Point*) main::$11 ← (struct Point*)(struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
  (byte*) main::$18 ← (byte*)(struct Point*) main::$11 + (const byte) OFFSET_STRUCT_POINT_Y
  *((byte*) main::$18 + (number~) main::$5) ← (number) 9
  (number~) main::$6 ← (number) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
  (byte*) main::$12 ← (byte*)(struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_RADIUS
  *((byte*) main::$12 + (number~) main::$6) ← (number) $f
  (byte*) main::SCREEN ← ((byte*)) (number) $400
  (byte) main::idx#0 ← (number) 0
  (struct Circle*) main::ptr#0 ← (struct Circle[2]) circles
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte) main::idx#3 ← phi( main/(byte) main::idx#0 main::@1/(byte) main::idx#2 )
  (struct Circle*) main::ptr#2 ← phi( main/(struct Circle*) main::ptr#0 main::@1/(struct Circle*) main::ptr#1 )
  (struct Point*) main::$13 ← (struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
  (byte*) main::$19 ← (byte*)(struct Point*) main::$13 + (const byte) OFFSET_STRUCT_POINT_X
  (byte) main::x#0 ← *((byte*) main::$19)
  (struct Point*) main::$14 ← (struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
  (byte*) main::$20 ← (byte*)(struct Point*) main::$14 + (const byte) OFFSET_STRUCT_POINT_Y
  (byte) main::y#0 ← *((byte*) main::$20)
  *((byte*) main::SCREEN + (byte) main::idx#3) ← (byte) main::x#0
  (byte) main::idx#1 ← ++ (byte) main::idx#3
  *((byte*) main::SCREEN + (byte) main::idx#1) ← (byte) main::y#0
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  (struct Circle*) main::ptr#1 ← (struct Circle*) main::ptr#2 + (const byte) SIZEOF_STRUCT_CIRCLE
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,1)
  (bool~) main::$0 ← (byte) main::i#1 != rangelast(0,1)
  if((bool~) main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(struct Point) Circle::center
(byte) Circle::radius
(const byte) OFFSET_STRUCT_CIRCLE_CENTER = (byte) 1
(const byte) OFFSET_STRUCT_CIRCLE_RADIUS = (byte) 0
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const byte) SIZEOF_STRUCT_CIRCLE = (byte) 3
(struct Circle[2]) circles
(void()) main()
(bool~) main::$0
(number~) main::$1
(struct Point*) main::$10
(struct Point*) main::$11
(byte*) main::$12
(struct Point*) main::$13
(struct Point*) main::$14
(byte*) main::$15
(byte*) main::$16
(byte*) main::$17
(byte*) main::$18
(byte*) main::$19
(number~) main::$2
(byte*) main::$20
(number~) main::$3
(number~) main::$4
(number~) main::$5
(number~) main::$6
(struct Point*) main::$7
(struct Point*) main::$8
(byte*) main::$9
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#2
(byte) main::idx#3
(struct Circle*) main::ptr
(struct Circle*) main::ptr#0
(struct Circle*) main::ptr#1
(struct Circle*) main::ptr#2
(byte) main::x
(byte) main::x#0
(byte) main::y
(byte) main::y#0

Adding number conversion cast (unumber) 0 in (number~) main::$1 ← (number) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) 2 in *((byte*) main::$15 + (unumber~) main::$1) ← (number) 2
Adding number conversion cast (unumber) 0 in (number~) main::$2 ← (number) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) 3 in *((byte*) main::$16 + (unumber~) main::$2) ← (number) 3
Adding number conversion cast (unumber) 0 in (number~) main::$3 ← (number) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$3 in (number~) main::$3 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) 5 in *((byte*) main::$9 + (unumber~) main::$3) ← (number) 5
Adding number conversion cast (unumber) 1 in (number~) main::$4 ← (number) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$4 in (number~) main::$4 ← (unumber)(number) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) 8 in *((byte*) main::$17 + (unumber~) main::$4) ← (number) 8
Adding number conversion cast (unumber) 1 in (number~) main::$5 ← (number) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$5 in (number~) main::$5 ← (unumber)(number) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) 9 in *((byte*) main::$18 + (unumber~) main::$5) ← (number) 9
Adding number conversion cast (unumber) 1 in (number~) main::$6 ← (number) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$6 in (number~) main::$6 ← (unumber)(number) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) $f in *((byte*) main::$12 + (unumber~) main::$6) ← (number) $f
Adding number conversion cast (unumber) 0 in (byte) main::idx#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*) main::$15 + (unumber~) main::$1) ← (unumber)(number) 2
Inlining cast *((byte*) main::$16 + (unumber~) main::$2) ← (unumber)(number) 3
Inlining cast *((byte*) main::$9 + (unumber~) main::$3) ← (unumber)(number) 5
Inlining cast *((byte*) main::$17 + (unumber~) main::$4) ← (unumber)(number) 8
Inlining cast *((byte*) main::$18 + (unumber~) main::$5) ← (unumber)(number) 9
Inlining cast *((byte*) main::$12 + (unumber~) main::$6) ← (unumber)(number) $f
Inlining cast (byte*) main::SCREEN ← (byte*)(number) $400
Inlining cast (byte) main::idx#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 1
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 9
Simplifying constant integer cast 1
Simplifying constant integer cast $f
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$1 ← (byte) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Inferred type updated to byte in (unumber~) main::$2 ← (byte) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Inferred type updated to byte in (unumber~) main::$3 ← (byte) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Inferred type updated to byte in (unumber~) main::$4 ← (byte) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Inferred type updated to byte in (unumber~) main::$5 ← (byte) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Inferred type updated to byte in (unumber~) main::$6 ← (byte) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Simple Condition (bool~) main::$0 [41] if((byte) main::i#1!=rangelast(0,1)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] (struct Circle[2]) circles ← { fill( 2, 0) }
Constant right-side identified [1] (byte~) main::$1 ← (byte) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Constant right-side identified [5] (byte~) main::$2 ← (byte) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Constant right-side identified [9] (byte~) main::$3 ← (byte) 0 * (const byte) SIZEOF_STRUCT_CIRCLE
Constant right-side identified [12] (byte~) main::$4 ← (byte) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Constant right-side identified [16] (byte~) main::$5 ← (byte) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Constant right-side identified [20] (byte~) main::$6 ← (byte) 1 * (const byte) SIZEOF_STRUCT_CIRCLE
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const struct Circle[2]) circles = { fill( 2, 0) }
Constant (const byte) main::$1 = 0*SIZEOF_STRUCT_CIRCLE
Constant (const byte) main::$2 = 0*SIZEOF_STRUCT_CIRCLE
Constant (const byte) main::$3 = 0*SIZEOF_STRUCT_CIRCLE
Constant (const byte) main::$4 = 1*SIZEOF_STRUCT_CIRCLE
Constant (const byte) main::$5 = 1*SIZEOF_STRUCT_CIRCLE
Constant (const byte) main::$6 = 1*SIZEOF_STRUCT_CIRCLE
Constant (const byte*) main::SCREEN = (byte*) 1024
Constant (const byte) main::idx#0 = 0
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const struct Circle*) main::ptr#0 = circles
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (struct Point*)circles in [2] (struct Point*) main::$7 ← (struct Point*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant value identified (struct Point*)circles in [6] (struct Point*) main::$8 ← (struct Point*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant value identified (byte*)circles in [10] (byte*) main::$9 ← (byte*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_RADIUS
Constant value identified (struct Point*)circles in [13] (struct Point*) main::$10 ← (struct Point*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant value identified (struct Point*)circles in [17] (struct Point*) main::$11 ← (struct Point*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant value identified (byte*)circles in [21] (byte*) main::$12 ← (byte*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_RADIUS
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [39] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [41] if(main::i#1!=rangelast(0,1)) goto main::@1 to (number) 2
Converting *(pointer+n) to pointer[n] [30] (byte) main::x#0 ← *((byte*) main::$19)  -- *((byte*)main::$13 + OFFSET_STRUCT_POINT_X)
Converting *(pointer+n) to pointer[n] [33] (byte) main::y#0 ← *((byte*) main::$20)  -- *((byte*)main::$14 + OFFSET_STRUCT_POINT_Y)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_CIRCLE in 
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_CIRCLE in 
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_CIRCLE in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (byte*)main::$7 in [3] (byte*) main::$15 ← (byte*)(struct Point*) main::$7 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero main::$15 in [4] *((byte*) main::$15 + (const byte) main::$1) ← (byte) 2
Simplifying expression containing zero main::$16 in [8] *((byte*) main::$16 + (const byte) main::$2) ← (byte) 3
Simplifying expression containing zero (byte*)circles in [10] (byte*) main::$9 ← (byte*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_RADIUS
Simplifying expression containing zero main::$9 in [11] *((byte*) main::$9 + (const byte) main::$3) ← (byte) 5
Simplifying expression containing zero (byte*)main::$10 in [14] (byte*) main::$17 ← (byte*)(struct Point*) main::$10 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero (byte*)circles in [21] (byte*) main::$12 ← (byte*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_RADIUS
Simplifying expression containing zero (byte*)main::$13 in [29] (byte*) main::$19 ← (byte*)(struct Point*) main::$13 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero (byte*)main::$13 in [30] (byte) main::x#0 ← *((byte*)(struct Point*) main::$13 + (const byte) OFFSET_STRUCT_POINT_X)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*) main::$19 and assignment [18] (byte*) main::$19 ← (byte*)(struct Point*) main::$13
Eliminating unused variable (byte*) main::$20 and assignment [21] (byte*) main::$20 ← (byte*)(struct Point*) main::$14 + (const byte) OFFSET_STRUCT_POINT_Y
Eliminating unused constant (const byte) main::$1
Eliminating unused constant (const byte) main::$2
Eliminating unused constant (const byte) main::$3
Eliminating unused constant (const byte) OFFSET_STRUCT_CIRCLE_RADIUS
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 2 in if((byte) main::i#1!=(number) 2) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (struct Point*) main::$7 ← (struct Point*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant right-side identified [3] (struct Point*) main::$8 ← (struct Point*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant right-side identified [8] (struct Point*) main::$10 ← (struct Point*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant right-side identified [11] (struct Point*) main::$11 ← (struct Point*)(const struct Circle[2]) circles + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const struct Point*) main::$7 = (struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER
Constant (const struct Point*) main::$8 = (struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER
Constant (const byte*) main::$9 = (byte*)circles
Constant (const struct Point*) main::$10 = (struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER
Constant (const struct Point*) main::$11 = (struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER
Constant (const byte*) main::$12 = (byte*)circles
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::$15 = (byte*)main::$7
Constant (const byte*) main::$17 = (byte*)main::$10
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)main::$8 in [4] (byte*) main::$16 ← (byte*)(const struct Point*) main::$8 + (const byte) OFFSET_STRUCT_POINT_Y
Constant value identified (byte*)main::$11 in [12] (byte*) main::$18 ← (byte*)(const struct Point*) main::$11 + (const byte) OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantValues
Converting *(pointer+n) to pointer[n] [5] *((byte*) main::$16) ← (byte) 3  -- *((byte*)main::$8 + OFFSET_STRUCT_POINT_Y)
Converting *(pointer+n) to pointer[n] [18] (byte) main::x#0 ← *((byte*)(struct Point*) main::$13)  -- *((byte*)(struct Point*)main::ptr#2 + OFFSET_STRUCT_CIRCLE_CENTER)
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable (byte*) main::$16 and assignment [1] (byte*) main::$16 ← (byte*)(const struct Point*) main::$8 + (const byte) OFFSET_STRUCT_POINT_Y
Eliminating unused variable (struct Point*) main::$13 and assignment [9] (struct Point*) main::$13 ← (struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [4] (byte*) main::$18 ← (byte*)(const struct Point*) main::$11 + (const byte) OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$18 = (byte*)main::$11+OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::idx#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const struct Circle*) main::ptr#0
Constant inlined main::$12 = (byte*)(const struct Circle[2]) circles
Constant inlined main::ptr#0 = (const struct Circle[2]) circles
Constant inlined main::$15 = (byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant inlined main::$10 = (struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant inlined main::$11 = (struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant inlined main::idx#0 = (byte) 0
Constant inlined main::$17 = (byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant inlined main::$18 = (byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y
Constant inlined main::$5 = (byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE
Constant inlined main::i#0 = (byte) 0
Constant inlined main::$6 = (byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE
Constant inlined main::$4 = (byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE
Constant inlined main::$9 = (byte*)(const struct Circle[2]) circles
Constant inlined main::$7 = (struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER
Constant inlined main::$8 = (struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)(struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *((byte*)(struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER+1*SIZEOF_STRUCT_CIRCLE)
Consolidated array index constant in *((byte*)(struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y+1*SIZEOF_STRUCT_CIRCLE)
Consolidated array index constant in *((byte*)circles+1*SIZEOF_STRUCT_CIRCLE)
Successful SSA optimization Pass2ConstantAdditionElimination
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [23] main::ptr#3 ← main::ptr#1
Coalesced [24] main::idx#4 ← main::idx#2
Coalesced [25] main::i#3 ← main::i#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER) ← (byte) 2
  [5] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3
  [6] *((byte*)(const struct Circle[2]) circles) ← (byte) 5
  [7] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 8
  [8] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 9
  [9] *((byte*)(const struct Circle[2]) circles+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) $f
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [10] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [10] (byte) main::idx#3 ← phi( main/(byte) 0 main::@1/(byte) main::idx#2 )
  [10] (struct Circle*) main::ptr#2 ← phi( main/(const struct Circle[2]) circles main::@1/(struct Circle*) main::ptr#1 )
  [11] (byte) main::x#0 ← *((byte*)(struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER)
  [12] (struct Point*) main::$14 ← (struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER
  [13] (byte) main::y#0 ← *((byte*)(struct Point*) main::$14 + (const byte) OFFSET_STRUCT_POINT_Y)
  [14] *((const byte*) main::SCREEN + (byte) main::idx#3) ← (byte) main::x#0
  [15] (byte) main::idx#1 ← ++ (byte) main::idx#3
  [16] *((const byte*) main::SCREEN + (byte) main::idx#1) ← (byte) main::y#0
  [17] (byte) main::idx#2 ← ++ (byte) main::idx#1
  [18] (struct Circle*) main::ptr#1 ← (struct Circle*) main::ptr#2 + (const byte) SIZEOF_STRUCT_CIRCLE
  [19] (byte) main::i#1 ← ++ (byte) main::i#2
  [20] if((byte) main::i#1!=(byte) 2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [21] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(struct Point) Circle::center
(byte) Circle::radius
(byte) Point::x
(byte) Point::y
(void()) main()
(struct Point*) main::$14 11.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 2.4444444444444446
(byte) main::idx
(byte) main::idx#1 16.5
(byte) main::idx#2 5.5
(byte) main::idx#3 6.6000000000000005
(struct Circle*) main::ptr
(struct Circle*) main::ptr#1 7.333333333333333
(struct Circle*) main::ptr#2 2.75
(byte) main::x
(byte) main::x#0 7.333333333333333
(byte) main::y
(byte) main::y#0 7.333333333333333

Initial phi equivalence classes
[ main::ptr#2 main::ptr#1 ]
[ main::idx#3 main::idx#2 ]
[ main::i#2 main::i#1 ]
Added variable main::x#0 to zero page equivalence class [ main::x#0 ]
Added variable main::$14 to zero page equivalence class [ main::$14 ]
Added variable main::y#0 to zero page equivalence class [ main::y#0 ]
Added variable main::idx#1 to zero page equivalence class [ main::idx#1 ]
Complete equivalence classes
[ main::ptr#2 main::ptr#1 ]
[ main::idx#3 main::idx#2 ]
[ main::i#2 main::i#1 ]
[ main::x#0 ]
[ main::$14 ]
[ main::y#0 ]
[ main::idx#1 ]
Allocated zp[2]:2 [ main::ptr#2 main::ptr#1 ]
Allocated zp[1]:4 [ main::idx#3 main::idx#2 ]
Allocated zp[1]:5 [ main::i#2 main::i#1 ]
Allocated zp[1]:6 [ main::x#0 ]
Allocated zp[2]:7 [ main::$14 ]
Allocated zp[1]:9 [ main::y#0 ]
Allocated zp[1]:10 [ main::idx#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct -  using pointers to nested structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_CIRCLE = 3
  .const OFFSET_STRUCT_CIRCLE_CENTER = 1
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label __14 = 7
    .label x = 6
    .label y = 9
    .label idx = $a
    .label idx_1 = 4
    .label ptr = 2
    .label i = 5
    // [4] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER
    // [5] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y
    // [6] *((byte*)(const struct Circle[2]) circles) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta circles
    // [7] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 8 -- _deref_pbuc1=vbuc2 
    lda #8
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER+1*SIZEOF_STRUCT_CIRCLE
    // [8] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 9 -- _deref_pbuc1=vbuc2 
    lda #9
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y+1*SIZEOF_STRUCT_CIRCLE
    // [9] *((byte*)(const struct Circle[2]) circles+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta circles+1*SIZEOF_STRUCT_CIRCLE
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [10] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [10] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z idx_1
    // [10] phi (struct Circle*) main::ptr#2 = (const struct Circle[2]) circles [phi:main->main::@1#2] -- pssz1=pssc1 
    lda #<circles
    sta.z ptr
    lda #>circles
    sta.z ptr+1
    jmp __b1
    // [10] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [10] phi (byte) main::idx#3 = (byte) main::idx#2 [phi:main::@1->main::@1#1] -- register_copy 
    // [10] phi (struct Circle*) main::ptr#2 = (struct Circle*) main::ptr#1 [phi:main::@1->main::@1#2] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [11] (byte) main::x#0 ← *((byte*)(struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER) -- vbuz1=pbuz2_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_CIRCLE_CENTER
    lda (ptr),y
    sta.z x
    // [12] (struct Point*) main::$14 ← (struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER -- pssz1=pssz2_plus_vbuc1 
    lda #OFFSET_STRUCT_CIRCLE_CENTER
    clc
    adc.z ptr
    sta.z __14
    lda #0
    adc.z ptr+1
    sta.z __14+1
    // [13] (byte) main::y#0 ← *((byte*)(struct Point*) main::$14 + (const byte) OFFSET_STRUCT_POINT_Y) -- vbuz1=pbuz2_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_POINT_Y
    lda (__14),y
    sta.z y
    // [14] *((const byte*) main::SCREEN + (byte) main::idx#3) ← (byte) main::x#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z x
    ldy.z idx_1
    sta SCREEN,y
    // [15] (byte) main::idx#1 ← ++ (byte) main::idx#3 -- vbuz1=_inc_vbuz2 
    ldy.z idx_1
    iny
    sty.z idx
    // [16] *((const byte*) main::SCREEN + (byte) main::idx#1) ← (byte) main::y#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z y
    ldy.z idx
    sta SCREEN,y
    // [17] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuz1=_inc_vbuz2 
    ldy.z idx
    iny
    sty.z idx_1
    // [18] (struct Circle*) main::ptr#1 ← (struct Circle*) main::ptr#2 + (const byte) SIZEOF_STRUCT_CIRCLE -- pssz1=pssz1_plus_vbuc1 
    lda #SIZEOF_STRUCT_CIRCLE
    clc
    adc.z ptr
    sta.z ptr
    bcc !+
    inc.z ptr+1
  !:
    // [19] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [20] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [21] return 
    rts
}
  // File Data
  circles: .fill 3*2, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER) ← (byte) 2 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((byte*)(const struct Circle[2]) circles) ← (byte) 5 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 8 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 9 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((byte*)(const struct Circle[2]) circles+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) $f [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] (byte) main::x#0 ← *((byte*)(struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER) [ main::ptr#2 main::idx#3 main::i#2 main::x#0 ] ( main:2 [ main::ptr#2 main::idx#3 main::i#2 main::x#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::idx#3 main::idx#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ main::idx#3 main::idx#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ main::i#2 main::i#1 ]
Statement [12] (struct Point*) main::$14 ← (struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::$14 ] ( main:2 [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::$14 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::x#0 ]
Statement [13] (byte) main::y#0 ← *((byte*)(struct Point*) main::$14 + (const byte) OFFSET_STRUCT_POINT_Y) [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::y#0 ] ( main:2 [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::y#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:6 [ main::x#0 ]
Statement [14] *((const byte*) main::SCREEN + (byte) main::idx#3) ← (byte) main::x#0 [ main::ptr#2 main::idx#3 main::i#2 main::y#0 ] ( main:2 [ main::ptr#2 main::idx#3 main::i#2 main::y#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ main::y#0 ]
Statement [16] *((const byte*) main::SCREEN + (byte) main::idx#1) ← (byte) main::y#0 [ main::ptr#2 main::i#2 main::idx#1 ] ( main:2 [ main::ptr#2 main::i#2 main::idx#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ main::idx#1 ]
Statement [18] (struct Circle*) main::ptr#1 ← (struct Circle*) main::ptr#2 + (const byte) SIZEOF_STRUCT_CIRCLE [ main::i#2 main::ptr#1 main::idx#2 ] ( main:2 [ main::i#2 main::ptr#1 main::idx#2 ] ) always clobbers reg byte a 
Statement [4] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER) ← (byte) 2 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((byte*)(const struct Circle[2]) circles) ← (byte) 5 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 8 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 9 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((byte*)(const struct Circle[2]) circles+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) $f [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] (byte) main::x#0 ← *((byte*)(struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER) [ main::ptr#2 main::idx#3 main::i#2 main::x#0 ] ( main:2 [ main::ptr#2 main::idx#3 main::i#2 main::x#0 ] ) always clobbers reg byte a reg byte y 
Statement [12] (struct Point*) main::$14 ← (struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::$14 ] ( main:2 [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::$14 ] ) always clobbers reg byte a 
Statement [13] (byte) main::y#0 ← *((byte*)(struct Point*) main::$14 + (const byte) OFFSET_STRUCT_POINT_Y) [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::y#0 ] ( main:2 [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::y#0 ] ) always clobbers reg byte a reg byte y 
Statement [14] *((const byte*) main::SCREEN + (byte) main::idx#3) ← (byte) main::x#0 [ main::ptr#2 main::idx#3 main::i#2 main::y#0 ] ( main:2 [ main::ptr#2 main::idx#3 main::i#2 main::y#0 ] ) always clobbers reg byte a 
Statement [16] *((const byte*) main::SCREEN + (byte) main::idx#1) ← (byte) main::y#0 [ main::ptr#2 main::i#2 main::idx#1 ] ( main:2 [ main::ptr#2 main::i#2 main::idx#1 ] ) always clobbers reg byte a 
Statement [18] (struct Circle*) main::ptr#1 ← (struct Circle*) main::ptr#2 + (const byte) SIZEOF_STRUCT_CIRCLE [ main::i#2 main::ptr#1 main::idx#2 ] ( main:2 [ main::i#2 main::ptr#1 main::idx#2 ] ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::ptr#2 main::ptr#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ main::idx#3 main::idx#2 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:5 [ main::i#2 main::i#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[1]:6 [ main::x#0 ] : zp[1]:6 , reg byte x , 
Potential registers zp[2]:7 [ main::$14 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ main::y#0 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ main::idx#1 ] : zp[1]:10 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 18.94: zp[1]:5 [ main::i#2 main::i#1 ] 16.5: zp[1]:10 [ main::idx#1 ] 12.1: zp[1]:4 [ main::idx#3 main::idx#2 ] 11: zp[2]:7 [ main::$14 ] 10.08: zp[2]:2 [ main::ptr#2 main::ptr#1 ] 7.33: zp[1]:6 [ main::x#0 ] 7.33: zp[1]:9 [ main::y#0 ] 
Uplift Scope [Point] 
Uplift Scope [Circle] 
Uplift Scope [] 

Uplifting [main] best 1184 combination zp[1]:5 [ main::i#2 main::i#1 ] reg byte x [ main::idx#1 ] reg byte x [ main::idx#3 main::idx#2 ] zp[2]:7 [ main::$14 ] zp[2]:2 [ main::ptr#2 main::ptr#1 ] zp[1]:6 [ main::x#0 ] reg byte y [ main::y#0 ] 
Uplifting [Point] best 1184 combination 
Uplifting [Circle] best 1184 combination 
Uplifting [] best 1184 combination 
Attempting to uplift remaining variables inzp[1]:5 [ main::i#2 main::i#1 ]
Uplifting [main] best 1184 combination zp[1]:5 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:6 [ main::x#0 ]
Uplifting [main] best 1184 combination zp[1]:6 [ main::x#0 ] 
Allocated (was zp[1]:5) zp[1]:4 [ main::i#2 main::i#1 ]
Allocated (was zp[1]:6) zp[1]:5 [ main::x#0 ]
Allocated (was zp[2]:7) zp[2]:6 [ main::$14 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct -  using pointers to nested structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_CIRCLE = 3
  .const OFFSET_STRUCT_CIRCLE_CENTER = 1
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label __14 = 6
    .label x = 5
    .label ptr = 2
    .label i = 4
    // [4] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER
    // [5] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y
    // [6] *((byte*)(const struct Circle[2]) circles) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta circles
    // [7] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 8 -- _deref_pbuc1=vbuc2 
    lda #8
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER+1*SIZEOF_STRUCT_CIRCLE
    // [8] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 9 -- _deref_pbuc1=vbuc2 
    lda #9
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y+1*SIZEOF_STRUCT_CIRCLE
    // [9] *((byte*)(const struct Circle[2]) circles+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta circles+1*SIZEOF_STRUCT_CIRCLE
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [10] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [10] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [10] phi (struct Circle*) main::ptr#2 = (const struct Circle[2]) circles [phi:main->main::@1#2] -- pssz1=pssc1 
    lda #<circles
    sta.z ptr
    lda #>circles
    sta.z ptr+1
    jmp __b1
    // [10] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [10] phi (byte) main::idx#3 = (byte) main::idx#2 [phi:main::@1->main::@1#1] -- register_copy 
    // [10] phi (struct Circle*) main::ptr#2 = (struct Circle*) main::ptr#1 [phi:main::@1->main::@1#2] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [11] (byte) main::x#0 ← *((byte*)(struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER) -- vbuz1=pbuz2_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_CIRCLE_CENTER
    lda (ptr),y
    sta.z x
    // [12] (struct Point*) main::$14 ← (struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER -- pssz1=pssz2_plus_vbuc1 
    lda #OFFSET_STRUCT_CIRCLE_CENTER
    clc
    adc.z ptr
    sta.z __14
    lda #0
    adc.z ptr+1
    sta.z __14+1
    // [13] (byte) main::y#0 ← *((byte*)(struct Point*) main::$14 + (const byte) OFFSET_STRUCT_POINT_Y) -- vbuyy=pbuz1_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_POINT_Y
    lda (__14),y
    tay
    // [14] *((const byte*) main::SCREEN + (byte) main::idx#3) ← (byte) main::x#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z x
    sta SCREEN,x
    // [15] (byte) main::idx#1 ← ++ (byte) main::idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // [16] *((const byte*) main::SCREEN + (byte) main::idx#1) ← (byte) main::y#0 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta SCREEN,x
    // [17] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // [18] (struct Circle*) main::ptr#1 ← (struct Circle*) main::ptr#2 + (const byte) SIZEOF_STRUCT_CIRCLE -- pssz1=pssz1_plus_vbuc1 
    lda #SIZEOF_STRUCT_CIRCLE
    clc
    adc.z ptr
    sta.z ptr
    bcc !+
    inc.z ptr+1
  !:
    // [19] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [20] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [21] return 
    rts
}
  // File Data
  circles: .fill 3*2, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Replacing instruction lda #OFFSET_STRUCT_CIRCLE_CENTER with TYA
Replacing label __bbegin with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(struct Point) Circle::center
(byte) Circle::radius
(const byte) OFFSET_STRUCT_CIRCLE_CENTER = (byte) 1
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const byte) SIZEOF_STRUCT_CIRCLE = (byte) 3
(const struct Circle[2]) circles = { fill( 2, 0) }
(void()) main()
(struct Point*) main::$14 zp[2]:6 11.0
(label) main::@1
(label) main::@return
(const byte*) main::SCREEN = (byte*) 1024
(byte) main::i
(byte) main::i#1 i zp[1]:4 16.5
(byte) main::i#2 i zp[1]:4 2.4444444444444446
(byte) main::idx
(byte) main::idx#1 reg byte x 16.5
(byte) main::idx#2 reg byte x 5.5
(byte) main::idx#3 reg byte x 6.6000000000000005
(struct Circle*) main::ptr
(struct Circle*) main::ptr#1 ptr zp[2]:2 7.333333333333333
(struct Circle*) main::ptr#2 ptr zp[2]:2 2.75
(byte) main::x
(byte) main::x#0 x zp[1]:5 7.333333333333333
(byte) main::y
(byte) main::y#0 reg byte y 7.333333333333333

zp[2]:2 [ main::ptr#2 main::ptr#1 ]
reg byte x [ main::idx#3 main::idx#2 ]
zp[1]:4 [ main::i#2 main::i#1 ]
zp[1]:5 [ main::x#0 ]
zp[2]:6 [ main::$14 ]
reg byte y [ main::y#0 ]
reg byte x [ main::idx#1 ]


FINAL ASSEMBLER
Score: 1082

  // File Comments
// Minimal struct -  using pointers to nested structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_CIRCLE = 3
  .const OFFSET_STRUCT_CIRCLE_CENTER = 1
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    .label __14 = 6
    .label x = 5
    .label ptr = 2
    .label i = 4
    // circles[0].center.x = 2
    // [4] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER
    // circles[0].center.y = 3
    // [5] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y
    // circles[0].radius = 5
    // [6] *((byte*)(const struct Circle[2]) circles) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta circles
    // circles[1].center.x = 8
    // [7] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 8 -- _deref_pbuc1=vbuc2 
    lda #8
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER+1*SIZEOF_STRUCT_CIRCLE
    // circles[1].center.y = 9
    // [8] *((byte*)(struct Point*)(const struct Circle[2]) circles+(const byte) OFFSET_STRUCT_CIRCLE_CENTER+(const byte) OFFSET_STRUCT_POINT_Y+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) 9 -- _deref_pbuc1=vbuc2 
    lda #9
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y+1*SIZEOF_STRUCT_CIRCLE
    // circles[1].radius = 15
    // [9] *((byte*)(const struct Circle[2]) circles+(byte) 1*(const byte) SIZEOF_STRUCT_CIRCLE) ← (byte) $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta circles+1*SIZEOF_STRUCT_CIRCLE
    // [10] phi from main to main::@1 [phi:main->main::@1]
    // [10] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [10] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    tax
    // [10] phi (struct Circle*) main::ptr#2 = (const struct Circle[2]) circles [phi:main->main::@1#2] -- pssz1=pssc1 
    lda #<circles
    sta.z ptr
    lda #>circles
    sta.z ptr+1
    // [10] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [10] phi (byte) main::idx#3 = (byte) main::idx#2 [phi:main::@1->main::@1#1] -- register_copy 
    // [10] phi (struct Circle*) main::ptr#2 = (struct Circle*) main::ptr#1 [phi:main::@1->main::@1#2] -- register_copy 
    // main::@1
  __b1:
    // x = ptr->center.x
    // [11] (byte) main::x#0 ← *((byte*)(struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER) -- vbuz1=pbuz2_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_CIRCLE_CENTER
    lda (ptr),y
    sta.z x
    // y = ptr->center.y
    // [12] (struct Point*) main::$14 ← (struct Point*)(struct Circle*) main::ptr#2 + (const byte) OFFSET_STRUCT_CIRCLE_CENTER -- pssz1=pssz2_plus_vbuc1 
    tya
    clc
    adc.z ptr
    sta.z __14
    lda #0
    adc.z ptr+1
    sta.z __14+1
    // [13] (byte) main::y#0 ← *((byte*)(struct Point*) main::$14 + (const byte) OFFSET_STRUCT_POINT_Y) -- vbuyy=pbuz1_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_POINT_Y
    lda (__14),y
    tay
    // SCREEN[idx++] = x
    // [14] *((const byte*) main::SCREEN + (byte) main::idx#3) ← (byte) main::x#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z x
    sta SCREEN,x
    // SCREEN[idx++] = x;
    // [15] (byte) main::idx#1 ← ++ (byte) main::idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = y
    // [16] *((const byte*) main::SCREEN + (byte) main::idx#1) ← (byte) main::y#0 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta SCREEN,x
    // SCREEN[idx++] = y;
    // [17] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // ptr++;
    // [18] (struct Circle*) main::ptr#1 ← (struct Circle*) main::ptr#2 + (const byte) SIZEOF_STRUCT_CIRCLE -- pssz1=pssz1_plus_vbuc1 
    lda #SIZEOF_STRUCT_CIRCLE
    clc
    adc.z ptr
    sta.z ptr
    bcc !+
    inc.z ptr+1
  !:
    // for(byte i:0..1)
    // [19] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [20] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i
    bne __b1
    // main::@return
    // }
    // [21] return 
    rts
}
  // File Data
  circles: .fill 3*2, 0

