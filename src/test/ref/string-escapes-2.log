
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::i#2 = phi( main/main::i#0, main::@3/main::i#1 )
  main::$1 = 0 != MESSAGE[main::i#2]
  if(main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  chrout::c#0 = MESSAGE[main::i#3]
  call chrout
  to:main::@3
main::@3: scope:[main]  from main::@2
  main::i#4 = phi( main::@2/main::i#3 )
  main::i#1 = ++ main::i#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void chrout(char c)
chrout: scope:[chrout]  from main::@2
  chrout::c#1 = phi( main::@2/chrout::c#0 )
  *memA = chrout::c#1
  asm { ldamemA jsr$ffd2  }
  to:chrout::@return
chrout::@return: scope:[chrout]  from chrout
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char MESSAGE[] = "hello
world\"pm
void __start()
void chrout(char c)
char chrout::c
char chrout::c#0
char chrout::c#1
void main()
bool main::$1
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
__constant char * const memA = (char *)$ff

Adding number conversion cast (unumber) 0 in main::$1 = 0 != MESSAGE[main::i#2]
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 255
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 main::i#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values chrout::c#1 chrout::c#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$1 [3] if(0!=MESSAGE[main::i#2]) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to chrout:5 

Created 1 initial phi equivalence classes
Coalesced [7] main::i#5 = main::i#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::i#2 = phi( main/0, main::@3/main::i#1 )
  [2] if(0!=MESSAGE[main::i#2]) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] chrout::c#0 = MESSAGE[main::i#2]
  [5] call chrout
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] main::i#1 = ++ main::i#2
  to:main::@1

void chrout(char c)
chrout: scope:[chrout]  from main::@2
  [7] *memA = chrout::c#0
  asm { ldamemA jsr$ffd2  }
  to:chrout::@return
chrout::@return: scope:[chrout]  from chrout
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void chrout(char c)
char chrout::c
char chrout::c#0 // 112.0
void main()
char main::i
char main::i#1 // 22.0
char main::i#2 // 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable chrout::c#0 to live range equivalence class [ chrout::c#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ chrout::c#0 ]
Allocated zp[1]:2 [ chrout::c#0 ]
Allocated zp[1]:3 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if(0!=MESSAGE[main::i#2]) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i#2 main::i#1 ]
Statement asm { ldamemA jsr$ffd2  } always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp[1]:3 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::i#2 main::i#1 ]
Statement [2] if(0!=MESSAGE[main::i#2]) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [4] chrout::c#0 = MESSAGE[main::i#2] [ main::i#2 chrout::c#0 ] (  [ main::i#2 chrout::c#0 ] { }  ) always clobbers reg byte y 
Statement asm { ldamemA jsr$ffd2  } always clobbers reg byte a reg byte x reg byte y 
Potential registers zp[1]:3 [ main::i#2 main::i#1 ] : zp[1]:3 , 
Potential registers zp[1]:2 [ chrout::c#0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [chrout] 112: zp[1]:2 [ chrout::c#0 ] 
Uplift Scope [main] 33: zp[1]:3 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [chrout] best 504 combination reg byte a [ chrout::c#0 ] 
Uplifting [main] best 504 combination zp[1]:3 [ main::i#2 main::i#1 ] 
Uplifting [] best 504 combination 
Attempting to uplift remaining variables inzp[1]:3 [ main::i#2 main::i#1 ]
Uplifting [main] best 504 combination zp[1]:3 [ main::i#2 main::i#1 ] 
Allocated (was zp[1]:3) zp[1]:2 [ main::i#2 main::i#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test using some simple supported string escape characters in PETSCII
  // Upstart
  // Commodore 64 PRG executable file
.file [name="string-escapes-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label memA = $ff
.segment Code
  // main
main: {
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [2] if(0!=MESSAGE[main::i#2]) goto main::@2 -- 0_neq_pbuc1_derefidx_vbuz1_then_la1 
    ldy.z i
    lda MESSAGE,y
    cmp #0
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] chrout::c#0 = MESSAGE[main::i#2] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z i
    lda MESSAGE,y
    // [5] call chrout
    jsr chrout
    jmp __b3
    // main::@3
  __b3:
    // [6] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
}
  // chrout
// void chrout(__register(A) char c)
chrout: {
    // [7] *memA = chrout::c#0 -- _deref_pbuc1=vbuaa 
    sta memA
    // asm { ldamemA jsr$ffd2  }
    lda memA
    jsr $ffd2
    jmp __breturn
    // chrout::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data
.segment Data
.encoding "petscii_mixed"
  MESSAGE: .text @"hello\nworld\\"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda memA
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char MESSAGE[] = "hello
world\"pm
void chrout(char c)
char chrout::c
char chrout::c#0 // reg byte a 112.0
void main()
char main::i
char main::i#1 // i zp[1]:2 22.0
char main::i#2 // i zp[1]:2 11.0
__constant char * const memA = (char *) 255

zp[1]:2 [ main::i#2 main::i#1 ]
reg byte a [ chrout::c#0 ]


FINAL ASSEMBLER
Score: 407

  // File Comments
// Test using some simple supported string escape characters in PETSCII
  // Upstart
  // Commodore 64 PRG executable file
.file [name="string-escapes-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label memA = $ff
.segment Code
  // main
main: {
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
  __b1:
    // while(MESSAGE[i])
    // [2] if(0!=MESSAGE[main::i#2]) goto main::@2 -- 0_neq_pbuc1_derefidx_vbuz1_then_la1 
    ldy.z i
    lda MESSAGE,y
    cmp #0
    bne __b2
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // chrout(MESSAGE[i++])
    // [4] chrout::c#0 = MESSAGE[main::i#2] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z i
    lda MESSAGE,y
    // [5] call chrout
    jsr chrout
    // main::@3
    // chrout(MESSAGE[i++]);
    // [6] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
}
  // chrout
// void chrout(__register(A) char c)
chrout: {
    // *memA = c
    // [7] *memA = chrout::c#0 -- _deref_pbuc1=vbuaa 
    sta memA
    // asm
    // asm { ldamemA jsr$ffd2  }
    jsr $ffd2
    // chrout::@return
    // }
    // [9] return 
    rts
}
  // File Data
.segment Data
.encoding "petscii_mixed"
  MESSAGE: .text @"hello\nworld\\"
  .byte 0

