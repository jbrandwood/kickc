PARSING src/test/java/dk/camelot64/kickc/test/kc/sinusgenscale8.kc
import "sinus.kc"
import "multiply.kc"
import "print.kc"

void main() {
    word tabsize = 20;
    byte[20] sintab;
    print_cls();
    sin8u_table(sintab, tabsize, 10, 255);
    /*
    print_cls();
    for(byte i: 0..191) {
        signed byte sb = sintab[i];
        if(sb>=0) {
          print_str(" @");
        }
        print_sbyte(sb);
        print_str("  @");
    }
    */
}

// Generate unsigned byte sinus table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sinus points (the size of the table)
// min - the minimal value
// max - the maximal value
void sin8u_table(byte* sintab, word tabsize, byte min, byte max) {
    byte amplitude = max-min;
    word sum = min+max;
    byte mid = (byte)(sum>>1);
    // u[4.28] step = PI*2/wavelength
    word step = div16u(PI2_u4f12, tabsize); // u[4.12]
    print_str("step:@");
    print_word(step);
    print_str(" min:@");
    print_byte(min);
    print_str(" max:@");
    print_byte(max);
    print_str(" ampl:@");
    print_byte(amplitude);
    print_str(" mid:@");
    print_byte(mid);
    print_ln();
    // Iterate over the table
    word x = 0; // u[4.12]
    for( word i=0; i<tabsize; i++) {
        byte sinval = mid+>mul8su(sin8s(x), amplitude);
        *sintab++ = sinval;
        print_str("x: @");
        print_word(x);
        print_str(" sin: @");
        print_byte(sinval);
        print_ln();
        x = x + step;
    }
}


Importing sinus.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/sinus.kc
// Sinus Generator functions using only multiplication, addition and bit shifting
// Uses a single division for converting the wavelength to a reciprocal.
// Generates sinus using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
// Uses the approximation sin(x) = x - x^/6 + x^/128
// Optimization possibility: Use symmetries when generating sinustables. wavelength%2==0 -> mirror symmetry over PI, wavelength%4==0 -> mirror symmetry over PI/2.

import "division.kc"
import "multiply.kc"

// PI*2 in u[4.28] format
const dword PI2_u4f28 = $6487ed51;
// PI in u[4.28] format
const dword PI_u4f28 = $3243f6a9;
// PI/2 in u[4.28] format
const dword PI_HALF_u4f28 = $1921FB54;

// PI*2 in u[4.12] format
const word PI2_u4f12 = $6488;
// PI in u[4.12] format
const word PI_u4f12 = $3244;
// PI/2 in u[4.12] format
const word PI_HALF_u4f12 = $1922;

// Generate signed (large) word sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
void sin16s_gen(signed word* sintab, word wavelength) {
    // u[4.28] step = PI*2/wavelength
    dword step = div32u16u(PI2_u4f28, wavelength); // u[4.28]
    // Iterate over the table
    dword x = 0; // u[4.28]
    for( word i=0; i<wavelength; i++) {
        *sintab = sin16s(x);
        sintab = sintab + 2;
        x = x + step;
    }
}

// Generate signed byte sinus table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
void sin8s_gen(signed byte* sintab, word wavelength) {
    // u[4.28] step = PI*2/wavelength
    word step = div16u(PI2_u4f12, wavelength); // u[4.12]
    // Iterate over the table
    word x = 0; // u[4.12]
    for( word i=0; i<wavelength; i++) {
        *sintab++ = sin8s(x);
        x = x + step;
    }
}

// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
signed word sin16s(dword x) {
    // Move x1 into the range 0-PI/2 using sinus mirror symmetries
    byte isUpper = 0;
    if(x >= PI_u4f28 ) {
        x = x - PI_u4f28;
        isUpper = 1;
    }
    if(x >= PI_HALF_u4f28 ) {
        x = PI_u4f28 - x;
    }
    // sinx = x - x^3/6 + x5/128;
    word x1 = >x<<3; // u[1.15]
    word x2 = mulu16_sel(x1, x1, 0); // u[2.14] x^2
    word x3 = mulu16_sel(x2, x1, 1); // u[2.14] x^3
    word x3_6 = mulu16_sel(x3, $10000/6, 1);  // u[1.15] x^3/6;
    word usinx = x1 - x3_6; // u[1.15] x - x^3/6
    word x4 = mulu16_sel(x3, x1, 0); // u[3.13] x^4
    word x5 = mulu16_sel(x4, x1, 0); // u[4.12] x^5
    word x5_128 = x5>>4; // // u[1.15] x^5/128 -- much more efficient than mul_u16_sel(x5, $10000/128, 3);
    usinx = usinx + x5_128; // u[1.15] (first bit is always zero)
    signed word sinx = (signed word)usinx; // s[0.15]
    if(isUpper!=0) {
        sinx = -(signed word)usinx; // s[0.15];
     }
     return sinx;
}

// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
signed byte sin8s(word x) {
    // Move x1 into the range 0-PI/2 using sinus mirror symmetries
    byte isUpper = 0;
    if(x >= PI_u4f12 ) {
        x = x - PI_u4f12;
        isUpper = 1;
    }
    if(x >= PI_HALF_u4f12 ) {
        x = PI_u4f12 - x;
    }
    // sinx = x - x^3/6 + x5/128;
    byte x1 = >x<<3; // u[1.7]
    byte x2 = mulu8_sel(x1, x1, 0); // u[2.6] x^2
    byte x3 = mulu8_sel(x2, x1, 1); // u[2.6] x^3
    const byte DIV_6 = $2b; // u[0.7] - $2a.aa rounded to $2b
    byte x3_6 = mulu8_sel(x3, DIV_6, 1);  // u[1.7] x^3/6;
    byte usinx = x1 - x3_6; // u[1.7] x - x^3/6
    byte x4 = mulu8_sel(x3, x1, 0); // u[3.5] x^4
    byte x5 = mulu8_sel(x4, x1, 0); // u[4.4] x^5
    byte x5_128 = x5>>4; // // u[1.7] x^5/128 -- much more efficient than mul_u16_sel(x5, $10000/128, 3);
    usinx = usinx + x5_128; // u[1.7] (first bit is always zero)
    if(usinx>=128) { usinx--; } // rounding may occasionally result in $80 - lower into range ($00-$7f)
    signed byte sinx = (signed byte)usinx; // s[0.7]
    if(isUpper!=0) {
        sinx = -(signed byte)usinx; // s[0.7];
    }
    return sinx;
}

// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
word mulu16_sel(word v1, word v2, byte select) {
    return >mul16u(v1, v2)<<select;
}

// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
byte mulu8_sel(byte v1, byte v2, byte select) {
    return >mul8u(v1, v2)<<select;
}

Importing division.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/division.kc
// Simple binary division implementation
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5

// Remainder after signed 8 bit division
byte rem8u =0;

// Performs division on two 8 bit unsigned bytes
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8u
// Implemented using simple binary division
byte div8u(byte dividend, byte divisor) {
    return divr8u(dividend, divisor, 0);
}

// Performs division on two 8 bit unsigned bytes and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
byte divr8u(byte dividend, byte divisor, byte rem) {
    byte quotient = 0;
    for( byte i : 0..7) {
        rem = rem << 1;
        if( (dividend & $80) != 0 ) {
            rem = rem | 1;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    rem8u = rem;
    return quotient;
}

// Remainder after unsigned 16-bit division
word rem16u = 0;

// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
word divr16u(word dividend, word divisor, word rem) {
    word quotient = 0;
    for( byte i : 0..15) {
        rem = rem << 1;
        if( (>dividend & $80) != 0 ) {
            rem = rem | 1;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    rem16u = rem;
    return quotient;
}

// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
word div16u(word dividend, word divisor) {
    return divr16u(dividend, divisor, 0);
}

// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
dword div32u16u(dword dividend, word divisor) {
  word quotient_hi = divr16u(>dividend, divisor, 0);
  word quotient_lo = divr16u(<dividend, divisor, rem16u);
  dword quotient = { quotient_hi, quotient_lo};
  return quotient;
}

// Remainder after signed 8 bit division
signed byte rem8s = 0;

// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
signed byte div8s(signed byte dividend, signed byte divisor) {
    byte neg = 0;
    byte dividendu = 0;
    if(dividend<0) {
      dividendu = (byte)-dividend;
      neg = 1;
    } else {
      dividendu = (byte)dividend;
    }
    byte divisoru = 0;
    if(divisor<0) {
        divisoru = (byte)-divisor;
        neg = neg ^ 1;
    } else {
        divisoru = (byte)divisor;
    }
    byte resultu = div8u(dividendu, divisoru);
    if(neg==0) {
        rem8s = (signed byte)rem8u;
        return (signed byte)resultu;
    } else {
        rem8s = -(signed byte)rem8u;
        return -(signed byte)resultu;
    }
}

// Remainder after signed 16 bit division
signed word rem16s = 0;

// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
signed word div16s(signed word dividend, signed word divisor) {
    byte neg = 0;
    word dividendu = 0;
    if(dividend<0) {
      dividendu = (word)-dividend;
      neg = 1;
    } else {
      dividendu = (word)dividend;
    }
    word divisoru = 0;
    if(divisor<0) {
        divisoru = (word)-divisor;
        neg = neg ^ 1;
    } else {
        divisoru = (word)divisor;
    }
    word resultu = div16u(dividendu, divisoru);
    if(neg==0) {
        rem16s = (signed word)rem16u;
        return (signed word)resultu;
    } else {
        rem16s = -(signed word)rem16u;
        return -(signed word)resultu;
    }
}

Adding pre/post-modifier (byte) divr8u::quotient ← ++ (byte) divr8u::quotient
Adding pre/post-modifier (word) divr16u::quotient ← ++ (word) divr16u::quotient
Importing multiply.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/multiply.kc
// Simple binary multiplication implementation

// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
word mul8u(byte a, byte b) {
    word res = 0;
    word mb = b;
    while(a!=0) {
        if( (a&1) != 0) {
            res = res + mb;
        }
        a = a>>1;
        mb = mb<<1;
    }
    return res;
}

// Multiply of two signed bytes to a signed word
// Fixes offsets introduced by using unsigned multiplication
signed word mul8s(signed byte a, signed byte b) {
    word m = mul8u((byte)a, (byte) b);
    if(a<0) {
        >m = (>m)-(byte)b;
    }
    if(b<0) {
        >m = (>m)-(byte)a;
    }
    return (signed word)m;
}

// Multiply a signed byte and an unsigned byte (into a signed word)
// Fixes offsets introduced by using unsigned multiplication
signed word mul8su(signed byte a, byte b) {
    word m = mul8u((byte)a, (byte) b);
    if(a<0) {
        >m = (>m)-(byte)b;
    }
    return (signed word)m;
}

// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
dword mul16u(word a, word b) {
    dword res = 0;
    dword mb = b;
    while(a!=0) {
        if( (a&1) != 0) {
            res = res + mb;
        }
        a = a>>1;
        mb = mb<<1;
    }
    return res;
}

// Multiply of two signed words to a signed double word
// Fixes offsets introduced by using unsigned multiplication
signed dword mul16s(signed word a, signed word b) {
    dword m = mul16u((word)a, (word) b);
    if(a<0) {
        >m = (>m)-(word)b;
    }
    if(b<0) {
        >m = (>m)-(word)a;
    }
    return (signed dword)m;
}

Adding pre/post-modifier (word) sin16s_gen::i ← ++ (word) sin16s_gen::i
Adding pre/post-modifier (signed byte*) sin8s_gen::sintab ← ++ (signed byte*) sin8s_gen::sintab
Adding pre/post-modifier (word) sin8s_gen::i ← ++ (word) sin8s_gen::i
Adding pre/post-modifier (byte) sin8s::usinx ← -- (byte) sin8s::usinx
Importing multiply.kc
Importing print.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/print.kc

const byte* SCREEN = $0400;

byte* line_cursor = SCREEN;
byte* char_cursor = line_cursor;

// Print a zero-terminated string
void print_str(byte* str) {
    while(*str!='@') {
        *(char_cursor++) = *(str++);
    }
}

// Print a newline
void print_ln() {
    do {
        line_cursor = line_cursor + $28;
    } while (line_cursor<char_cursor);
    char_cursor = line_cursor;
}

// Print a signed word as HEX
void print_sword(signed word w) {
    if(w<0) {
        print_char('-');
        w = -w;
    }
    print_word((word)w);
}

// Print a signed byte as HEX
void print_sbyte(signed byte b) {
    if(b<0) {
        print_char('-');
        b = -b;
    }
    print_byte((byte)b);
}

// Print a word as HEX
void print_word(word w) {
    print_byte(>w);
    print_byte(<w);
}

// Print a dword as HEX
void print_dword(dword dw) {
    print_word(>dw);
    print_word(<dw);
}

// Print a signed dword as HEX
void print_sdword(signed dword dw) {
    if(dw<0) {
        print_char('-');
        dw = -dw;
    }
    print_dword((dword)dw);
}

// Print a byte as HEX
void print_byte(byte b) {
    // Table of hexadecimal digits
    const byte[] hextab = "0123456789abcdef";
    print_char(hextab[b>>4]);
    print_char(hextab[b&$f]);
}

// Print a single char
void print_char(byte ch) {
    *(char_cursor++) = ch;
}

// Clear the screen
void print_cls() {
    for(byte* sc=SCREEN; sc!=SCREEN+1000; sc++) {
        *sc = ' ';
    }
    line_cursor = SCREEN;
    char_cursor = line_cursor;
}



Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_str::str ← ++ (byte*) print_str::str
Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
Adding pre/post-modifier (byte*) sin8u_table::sintab ← ++ (byte*) sin8u_table::sintab
Adding pre/post-modifier (word) sin8u_table::i ← ++ (word) sin8u_table::i

STATEMENTS
  (byte) rem8u ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
  (byte~) div8u::$0 ← call divr8u (byte) div8u::dividend (byte) div8u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) div8u::return ← (byte~) div8u::$0
  goto div8u::@return
div8u::@return:
  (byte) div8u::return ← (byte) div8u::return
  return (byte) div8u::return
endproc // div8u()
proc (byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
  (byte) divr8u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
divr8u::@1:
  (byte~) divr8u::$0 ← (byte) divr8u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem ← (byte~) divr8u::$0
  (byte~) divr8u::$1 ← (byte) divr8u::dividend & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr8u::$2 ← (byte~) divr8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr8u::$3 ← ! (boolean~) divr8u::$2
  if((boolean~) divr8u::$3) goto divr8u::@2
  (byte~) divr8u::$4 ← (byte) divr8u::rem | (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem ← (byte~) divr8u::$4
divr8u::@2:
  (byte~) divr8u::$5 ← (byte) divr8u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::dividend ← (byte~) divr8u::$5
  (byte~) divr8u::$6 ← (byte) divr8u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::quotient ← (byte~) divr8u::$6
  (boolean~) divr8u::$7 ← (byte) divr8u::rem >= (byte) divr8u::divisor
  (boolean~) divr8u::$8 ← ! (boolean~) divr8u::$7
  if((boolean~) divr8u::$8) goto divr8u::@3
  (byte) divr8u::quotient ← ++ (byte) divr8u::quotient
  (byte/signed byte/word/signed word/dword/signed dword~) divr8u::$9 ← (byte) divr8u::rem - (byte) divr8u::divisor
  (byte) divr8u::rem ← (byte/signed byte/word/signed word/dword/signed dword~) divr8u::$9
divr8u::@3:
  (byte) divr8u::i ← ++ (byte) divr8u::i
  (boolean~) divr8u::$10 ← (byte) divr8u::i != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) divr8u::$10) goto divr8u::@1
  (byte) rem8u ← (byte) divr8u::rem
  (byte) divr8u::return ← (byte) divr8u::quotient
  goto divr8u::@return
divr8u::@return:
  (byte) divr8u::return ← (byte) divr8u::return
  return (byte) divr8u::return
endproc // divr8u()
  (word) rem16u ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
  (word) divr16u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
divr16u::@1:
  (word~) divr16u::$0 ← (word) divr16u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr16u::$4 ← ! (boolean~) divr16u::$3
  if((boolean~) divr16u::$4) goto divr16u::@2
  (word~) divr16u::$5 ← (word) divr16u::rem | (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem ← (word~) divr16u::$5
divr16u::@2:
  (word~) divr16u::$6 ← (word) divr16u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient ← (word~) divr16u::$7
  (boolean~) divr16u::$8 ← (word) divr16u::rem >= (word) divr16u::divisor
  (boolean~) divr16u::$9 ← ! (boolean~) divr16u::$8
  if((boolean~) divr16u::$9) goto divr16u::@3
  (word) divr16u::quotient ← ++ (word) divr16u::quotient
  (word~) divr16u::$10 ← (word) divr16u::rem - (word) divr16u::divisor
  (word) divr16u::rem ← (word~) divr16u::$10
divr16u::@3:
  (byte) divr16u::i ← ++ (byte) divr16u::i
  (boolean~) divr16u::$11 ← (byte) divr16u::i != (byte/signed byte/word/signed word/dword/signed dword) 16
  if((boolean~) divr16u::$11) goto divr16u::@1
  (word) rem16u ← (word) divr16u::rem
  (word) divr16u::return ← (word) divr16u::quotient
  goto divr16u::@return
divr16u::@return:
  (word) divr16u::return ← (word) divr16u::return
  return (word) divr16u::return
endproc // divr16u()
proc (word()) div16u((word) div16u::dividend , (word) div16u::divisor)
  (word~) div16u::$0 ← call divr16u (word) div16u::dividend (word) div16u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) div16u::return ← (word~) div16u::$0
  goto div16u::@return
div16u::@return:
  (word) div16u::return ← (word) div16u::return
  return (word) div16u::return
endproc // div16u()
proc (dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
  (word~) div32u16u::$0 ← > (dword) div32u16u::dividend
  (word~) div32u16u::$1 ← call divr16u (word~) div32u16u::$0 (word) div32u16u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) div32u16u::quotient_hi ← (word~) div32u16u::$1
  (word~) div32u16u::$2 ← < (dword) div32u16u::dividend
  (word~) div32u16u::$3 ← call divr16u (word~) div32u16u::$2 (word) div32u16u::divisor (word) rem16u 
  (word) div32u16u::quotient_lo ← (word~) div32u16u::$3
  (dword) div32u16u::quotient ← { (word) div32u16u::quotient_hi, (word) div32u16u::quotient_lo }
  (dword) div32u16u::return ← (dword) div32u16u::quotient
  goto div32u16u::@return
div32u16u::@return:
  (dword) div32u16u::return ← (dword) div32u16u::return
  return (dword) div32u16u::return
endproc // div32u16u()
  (signed byte) rem8s ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$0 ← (signed byte) div8s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$1 ← ! (boolean~) div8s::$0
  if((boolean~) div8s::$1) goto div8s::@1
  (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend
  (byte~) div8s::$3 ← ((byte)) (signed byte~) div8s::$2
  (byte) div8s::dividendu ← (byte~) div8s::$3
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  goto div8s::@2
div8s::@1:
  (byte~) div8s::$4 ← ((byte)) (signed byte) div8s::dividend
  (byte) div8s::dividendu ← (byte~) div8s::$4
div8s::@2:
  (byte) div8s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$5 ← (signed byte) div8s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$6 ← ! (boolean~) div8s::$5
  if((boolean~) div8s::$6) goto div8s::@3
  (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor
  (byte~) div8s::$8 ← ((byte)) (signed byte~) div8s::$7
  (byte) div8s::divisoru ← (byte~) div8s::$8
  (byte~) div8s::$9 ← (byte) div8s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8s::neg ← (byte~) div8s::$9
  goto div8s::@4
div8s::@3:
  (byte~) div8s::$10 ← ((byte)) (signed byte) div8s::divisor
  (byte) div8s::divisoru ← (byte~) div8s::$10
div8s::@4:
  (byte~) div8s::$11 ← call div8u (byte) div8s::dividendu (byte) div8s::divisoru 
  (byte) div8s::resultu ← (byte~) div8s::$11
  (boolean~) div8s::$12 ← (byte) div8s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$13 ← ! (boolean~) div8s::$12
  if((boolean~) div8s::$13) goto div8s::@5
  (signed byte~) div8s::$14 ← ((signed byte)) (byte) rem8u
  (signed byte) rem8s ← (signed byte~) div8s::$14
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) div8s::resultu
  (signed byte) div8s::return ← (signed byte~) div8s::$15
  goto div8s::@return
  goto div8s::@6
div8s::@5:
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) rem8u
  (signed byte~) div8s::$17 ← - (signed byte~) div8s::$16
  (signed byte) rem8s ← (signed byte~) div8s::$17
  (signed byte~) div8s::$18 ← ((signed byte)) (byte) div8s::resultu
  (signed byte~) div8s::$19 ← - (signed byte~) div8s::$18
  (signed byte) div8s::return ← (signed byte~) div8s::$19
  goto div8s::@return
div8s::@6:
div8s::@return:
  (signed byte) div8s::return ← (signed byte) div8s::return
  return (signed byte) div8s::return
endproc // div8s()
  (signed word) rem16s ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
  (byte) div16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) div16s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$0 ← (signed word) div16s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$1 ← ! (boolean~) div16s::$0
  if((boolean~) div16s::$1) goto div16s::@1
  (signed word~) div16s::$2 ← - (signed word) div16s::dividend
  (word~) div16s::$3 ← ((word)) (signed word~) div16s::$2
  (word) div16s::dividendu ← (word~) div16s::$3
  (byte) div16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  goto div16s::@2
div16s::@1:
  (word~) div16s::$4 ← ((word)) (signed word) div16s::dividend
  (word) div16s::dividendu ← (word~) div16s::$4
div16s::@2:
  (word) div16s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$5 ← (signed word) div16s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$6 ← ! (boolean~) div16s::$5
  if((boolean~) div16s::$6) goto div16s::@3
  (signed word~) div16s::$7 ← - (signed word) div16s::divisor
  (word~) div16s::$8 ← ((word)) (signed word~) div16s::$7
  (word) div16s::divisoru ← (word~) div16s::$8
  (byte~) div16s::$9 ← (byte) div16s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div16s::neg ← (byte~) div16s::$9
  goto div16s::@4
div16s::@3:
  (word~) div16s::$10 ← ((word)) (signed word) div16s::divisor
  (word) div16s::divisoru ← (word~) div16s::$10
div16s::@4:
  (word~) div16s::$11 ← call div16u (word) div16s::dividendu (word) div16s::divisoru 
  (word) div16s::resultu ← (word~) div16s::$11
  (boolean~) div16s::$12 ← (byte) div16s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$13 ← ! (boolean~) div16s::$12
  if((boolean~) div16s::$13) goto div16s::@5
  (signed word~) div16s::$14 ← ((signed word)) (word) rem16u
  (signed word) rem16s ← (signed word~) div16s::$14
  (signed word~) div16s::$15 ← ((signed word)) (word) div16s::resultu
  (signed word) div16s::return ← (signed word~) div16s::$15
  goto div16s::@return
  goto div16s::@6
div16s::@5:
  (signed word~) div16s::$16 ← ((signed word)) (word) rem16u
  (signed word~) div16s::$17 ← - (signed word~) div16s::$16
  (signed word) rem16s ← (signed word~) div16s::$17
  (signed word~) div16s::$18 ← ((signed word)) (word) div16s::resultu
  (signed word~) div16s::$19 ← - (signed word~) div16s::$18
  (signed word) div16s::return ← (signed word~) div16s::$19
  goto div16s::@return
div16s::@6:
div16s::@return:
  (signed word) div16s::return ← (signed word) div16s::return
  return (signed word) div16s::return
endproc // div16s()
proc (word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
  (word) mul8u::res ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) mul8u::mb ← (byte) mul8u::b
mul8u::@1:
  (boolean~) mul8u::$0 ← (byte) mul8u::a != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) mul8u::$0) goto mul8u::@2
  goto mul8u::@3
mul8u::@2:
  (byte~) mul8u::$1 ← (byte) mul8u::a & (byte/signed byte/word/signed word/dword/signed dword) 1
  (boolean~) mul8u::$2 ← (byte~) mul8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul8u::$3 ← ! (boolean~) mul8u::$2
  if((boolean~) mul8u::$3) goto mul8u::@4
  (word~) mul8u::$4 ← (word) mul8u::res + (word) mul8u::mb
  (word) mul8u::res ← (word~) mul8u::$4
mul8u::@4:
  (byte~) mul8u::$5 ← (byte) mul8u::a >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) mul8u::a ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) mul8u::mb ← (word~) mul8u::$6
  goto mul8u::@1
mul8u::@3:
  (word) mul8u::return ← (word) mul8u::res
  goto mul8u::@return
mul8u::@return:
  (word) mul8u::return ← (word) mul8u::return
  return (word) mul8u::return
endproc // mul8u()
proc (signed word()) mul8s((signed byte) mul8s::a , (signed byte) mul8s::b)
  (byte~) mul8s::$0 ← ((byte)) (signed byte) mul8s::a
  (byte~) mul8s::$1 ← ((byte)) (signed byte) mul8s::b
  (word~) mul8s::$2 ← call mul8u (byte~) mul8s::$0 (byte~) mul8s::$1 
  (word) mul8s::m ← (word~) mul8s::$2
  (boolean~) mul8s::$3 ← (signed byte) mul8s::a < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul8s::$4 ← ! (boolean~) mul8s::$3
  if((boolean~) mul8s::$4) goto mul8s::@1
  (byte~) mul8s::$5 ← > (word) mul8s::m
  (byte~) mul8s::$6 ← > (word) mul8s::m
  (byte~) mul8s::$7 ← ((byte)) (signed byte) mul8s::b
  (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$8 ← (byte~) mul8s::$6 - (byte~) mul8s::$7
  lval((byte~) mul8s::$5) ← (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$8
mul8s::@1:
  (boolean~) mul8s::$9 ← (signed byte) mul8s::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul8s::$10 ← ! (boolean~) mul8s::$9
  if((boolean~) mul8s::$10) goto mul8s::@2
  (byte~) mul8s::$11 ← > (word) mul8s::m
  (byte~) mul8s::$12 ← > (word) mul8s::m
  (byte~) mul8s::$13 ← ((byte)) (signed byte) mul8s::a
  (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$14 ← (byte~) mul8s::$12 - (byte~) mul8s::$13
  lval((byte~) mul8s::$11) ← (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$14
mul8s::@2:
  (signed word~) mul8s::$15 ← ((signed word)) (word) mul8s::m
  (signed word) mul8s::return ← (signed word~) mul8s::$15
  goto mul8s::@return
mul8s::@return:
  (signed word) mul8s::return ← (signed word) mul8s::return
  return (signed word) mul8s::return
endproc // mul8s()
proc (signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
  (byte~) mul8su::$0 ← ((byte)) (signed byte) mul8su::a
  (byte~) mul8su::$1 ← ((byte)) (byte) mul8su::b
  (word~) mul8su::$2 ← call mul8u (byte~) mul8su::$0 (byte~) mul8su::$1 
  (word) mul8su::m ← (word~) mul8su::$2
  (boolean~) mul8su::$3 ← (signed byte) mul8su::a < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul8su::$4 ← ! (boolean~) mul8su::$3
  if((boolean~) mul8su::$4) goto mul8su::@1
  (byte~) mul8su::$5 ← > (word) mul8su::m
  (byte~) mul8su::$6 ← > (word) mul8su::m
  (byte~) mul8su::$7 ← ((byte)) (byte) mul8su::b
  (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$8 ← (byte~) mul8su::$6 - (byte~) mul8su::$7
  lval((byte~) mul8su::$5) ← (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$8
mul8su::@1:
  (signed word~) mul8su::$9 ← ((signed word)) (word) mul8su::m
  (signed word) mul8su::return ← (signed word~) mul8su::$9
  goto mul8su::@return
mul8su::@return:
  (signed word) mul8su::return ← (signed word) mul8su::return
  return (signed word) mul8su::return
endproc // mul8su()
proc (dword()) mul16u((word) mul16u::a , (word) mul16u::b)
  (dword) mul16u::res ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (dword) mul16u::mb ← (word) mul16u::b
mul16u::@1:
  (boolean~) mul16u::$0 ← (word) mul16u::a != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) mul16u::$0) goto mul16u::@2
  goto mul16u::@3
mul16u::@2:
  (byte~) mul16u::$1 ← (word) mul16u::a & (byte/signed byte/word/signed word/dword/signed dword) 1
  (boolean~) mul16u::$2 ← (byte~) mul16u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul16u::$3 ← ! (boolean~) mul16u::$2
  if((boolean~) mul16u::$3) goto mul16u::@4
  (dword~) mul16u::$4 ← (dword) mul16u::res + (dword) mul16u::mb
  (dword) mul16u::res ← (dword~) mul16u::$4
mul16u::@4:
  (word~) mul16u::$5 ← (word) mul16u::a >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) mul16u::a ← (word~) mul16u::$5
  (dword~) mul16u::$6 ← (dword) mul16u::mb << (byte/signed byte/word/signed word/dword/signed dword) 1
  (dword) mul16u::mb ← (dword~) mul16u::$6
  goto mul16u::@1
mul16u::@3:
  (dword) mul16u::return ← (dword) mul16u::res
  goto mul16u::@return
mul16u::@return:
  (dword) mul16u::return ← (dword) mul16u::return
  return (dword) mul16u::return
endproc // mul16u()
proc (signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
  (word~) mul16s::$0 ← ((word)) (signed word) mul16s::a
  (word~) mul16s::$1 ← ((word)) (signed word) mul16s::b
  (dword~) mul16s::$2 ← call mul16u (word~) mul16s::$0 (word~) mul16s::$1 
  (dword) mul16s::m ← (dword~) mul16s::$2
  (boolean~) mul16s::$3 ← (signed word) mul16s::a < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul16s::$4 ← ! (boolean~) mul16s::$3
  if((boolean~) mul16s::$4) goto mul16s::@1
  (word~) mul16s::$5 ← > (dword) mul16s::m
  (word~) mul16s::$6 ← > (dword) mul16s::m
  (word~) mul16s::$7 ← ((word)) (signed word) mul16s::b
  (word~) mul16s::$8 ← (word~) mul16s::$6 - (word~) mul16s::$7
  lval((word~) mul16s::$5) ← (word~) mul16s::$8
mul16s::@1:
  (boolean~) mul16s::$9 ← (signed word) mul16s::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul16s::$10 ← ! (boolean~) mul16s::$9
  if((boolean~) mul16s::$10) goto mul16s::@2
  (word~) mul16s::$11 ← > (dword) mul16s::m
  (word~) mul16s::$12 ← > (dword) mul16s::m
  (word~) mul16s::$13 ← ((word)) (signed word) mul16s::a
  (word~) mul16s::$14 ← (word~) mul16s::$12 - (word~) mul16s::$13
  lval((word~) mul16s::$11) ← (word~) mul16s::$14
mul16s::@2:
  (signed dword~) mul16s::$15 ← ((signed dword)) (dword) mul16s::m
  (signed dword) mul16s::return ← (signed dword~) mul16s::$15
  goto mul16s::@return
mul16s::@return:
  (signed dword) mul16s::return ← (signed dword) mul16s::return
  return (signed dword) mul16s::return
endproc // mul16s()
  (dword) PI2_u4f28 ← (dword/signed dword) 1686629713
  (dword) PI_u4f28 ← (dword/signed dword) 843314857
  (dword) PI_HALF_u4f28 ← (dword/signed dword) 421657428
  (word) PI2_u4f12 ← (word/signed word/dword/signed dword) 25736
  (word) PI_u4f12 ← (word/signed word/dword/signed dword) 12868
  (word) PI_HALF_u4f12 ← (word/signed word/dword/signed dword) 6434
proc (void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
  (dword~) sin16s_gen::$0 ← call div32u16u (dword) PI2_u4f28 (word) sin16s_gen::wavelength 
  (dword) sin16s_gen::step ← (dword~) sin16s_gen::$0
  (dword) sin16s_gen::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin16s_gen::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
sin16s_gen::@1:
  (signed word~) sin16s_gen::$1 ← call sin16s (dword) sin16s_gen::x 
  *((signed word*) sin16s_gen::sintab) ← (signed word~) sin16s_gen::$1
  (signed word*~) sin16s_gen::$2 ← (signed word*) sin16s_gen::sintab + (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed word*) sin16s_gen::sintab ← (signed word*~) sin16s_gen::$2
  (dword~) sin16s_gen::$3 ← (dword) sin16s_gen::x + (dword) sin16s_gen::step
  (dword) sin16s_gen::x ← (dword~) sin16s_gen::$3
  (word) sin16s_gen::i ← ++ (word) sin16s_gen::i
  (boolean~) sin16s_gen::$4 ← (word) sin16s_gen::i < (word) sin16s_gen::wavelength
  if((boolean~) sin16s_gen::$4) goto sin16s_gen::@1
sin16s_gen::@return:
  return 
endproc // sin16s_gen()
proc (void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
  (word~) sin8s_gen::$0 ← call div16u (word) PI2_u4f12 (word) sin8s_gen::wavelength 
  (word) sin8s_gen::step ← (word~) sin8s_gen::$0
  (word) sin8s_gen::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin8s_gen::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
sin8s_gen::@1:
  (signed byte~) sin8s_gen::$1 ← call sin8s (word) sin8s_gen::x 
  *((signed byte*) sin8s_gen::sintab) ← (signed byte~) sin8s_gen::$1
  (signed byte*) sin8s_gen::sintab ← ++ (signed byte*) sin8s_gen::sintab
  (word~) sin8s_gen::$2 ← (word) sin8s_gen::x + (word) sin8s_gen::step
  (word) sin8s_gen::x ← (word~) sin8s_gen::$2
  (word) sin8s_gen::i ← ++ (word) sin8s_gen::i
  (boolean~) sin8s_gen::$3 ← (word) sin8s_gen::i < (word) sin8s_gen::wavelength
  if((boolean~) sin8s_gen::$3) goto sin8s_gen::@1
sin8s_gen::@return:
  return 
endproc // sin8s_gen()
proc (signed word()) sin16s((dword) sin16s::x)
  (byte) sin16s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) sin16s::$0 ← (dword) sin16s::x >= (dword) PI_u4f28
  (boolean~) sin16s::$1 ← ! (boolean~) sin16s::$0
  if((boolean~) sin16s::$1) goto sin16s::@1
  (dword~) sin16s::$2 ← (dword) sin16s::x - (dword) PI_u4f28
  (dword) sin16s::x ← (dword~) sin16s::$2
  (byte) sin16s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 1
sin16s::@1:
  (boolean~) sin16s::$3 ← (dword) sin16s::x >= (dword) PI_HALF_u4f28
  (boolean~) sin16s::$4 ← ! (boolean~) sin16s::$3
  if((boolean~) sin16s::$4) goto sin16s::@2
  (dword~) sin16s::$5 ← (dword) PI_u4f28 - (dword) sin16s::x
  (dword) sin16s::x ← (dword~) sin16s::$5
sin16s::@2:
  (dword~) sin16s::$6 ← (dword) sin16s::x << (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) sin16s::$7 ← > (dword~) sin16s::$6
  (word) sin16s::x1 ← (word~) sin16s::$7
  (word~) sin16s::$8 ← call mulu16_sel (word) sin16s::x1 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) sin16s::x2 ← (word~) sin16s::$8
  (word~) sin16s::$9 ← call mulu16_sel (word) sin16s::x2 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (word) sin16s::x3 ← (word~) sin16s::$9
  (word/signed word/dword/signed dword~) sin16s::$10 ← (dword/signed dword) 65536 / (byte/signed byte/word/signed word/dword/signed dword) 6
  (word~) sin16s::$11 ← call mulu16_sel (word) sin16s::x3 (word/signed word/dword/signed dword~) sin16s::$10 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (word) sin16s::x3_6 ← (word~) sin16s::$11
  (word~) sin16s::$12 ← (word) sin16s::x1 - (word) sin16s::x3_6
  (word) sin16s::usinx ← (word~) sin16s::$12
  (word~) sin16s::$13 ← call mulu16_sel (word) sin16s::x3 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) sin16s::x4 ← (word~) sin16s::$13
  (word~) sin16s::$14 ← call mulu16_sel (word) sin16s::x4 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) sin16s::x5 ← (word~) sin16s::$14
  (word~) sin16s::$15 ← (word) sin16s::x5 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (word) sin16s::x5_128 ← (word~) sin16s::$15
  (word~) sin16s::$16 ← (word) sin16s::usinx + (word) sin16s::x5_128
  (word) sin16s::usinx ← (word~) sin16s::$16
  (signed word~) sin16s::$17 ← ((signed word)) (word) sin16s::usinx
  (signed word) sin16s::sinx ← (signed word~) sin16s::$17
  (boolean~) sin16s::$18 ← (byte) sin16s::isUpper != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) sin16s::$19 ← ! (boolean~) sin16s::$18
  if((boolean~) sin16s::$19) goto sin16s::@3
  (signed word~) sin16s::$20 ← ((signed word)) (word) sin16s::usinx
  (signed word~) sin16s::$21 ← - (signed word~) sin16s::$20
  (signed word) sin16s::sinx ← (signed word~) sin16s::$21
sin16s::@3:
  (signed word) sin16s::return ← (signed word) sin16s::sinx
  goto sin16s::@return
sin16s::@return:
  (signed word) sin16s::return ← (signed word) sin16s::return
  return (signed word) sin16s::return
endproc // sin16s()
proc (signed byte()) sin8s((word) sin8s::x)
  (byte) sin8s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) sin8s::$0 ← (word) sin8s::x >= (word) PI_u4f12
  (boolean~) sin8s::$1 ← ! (boolean~) sin8s::$0
  if((boolean~) sin8s::$1) goto sin8s::@1
  (word~) sin8s::$2 ← (word) sin8s::x - (word) PI_u4f12
  (word) sin8s::x ← (word~) sin8s::$2
  (byte) sin8s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 1
sin8s::@1:
  (boolean~) sin8s::$3 ← (word) sin8s::x >= (word) PI_HALF_u4f12
  (boolean~) sin8s::$4 ← ! (boolean~) sin8s::$3
  if((boolean~) sin8s::$4) goto sin8s::@2
  (word~) sin8s::$5 ← (word) PI_u4f12 - (word) sin8s::x
  (word) sin8s::x ← (word~) sin8s::$5
sin8s::@2:
  (word~) sin8s::$6 ← (word) sin8s::x << (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte~) sin8s::$7 ← > (word~) sin8s::$6
  (byte) sin8s::x1 ← (byte~) sin8s::$7
  (byte~) sin8s::$8 ← call mulu8_sel (byte) sin8s::x1 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) sin8s::x2 ← (byte~) sin8s::$8
  (byte~) sin8s::$9 ← call mulu8_sel (byte) sin8s::x2 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (byte) sin8s::x3 ← (byte~) sin8s::$9
  (byte) sin8s::DIV_6 ← (byte/signed byte/word/signed word/dword/signed dword) 43
  (byte~) sin8s::$10 ← call mulu8_sel (byte) sin8s::x3 (byte) sin8s::DIV_6 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (byte) sin8s::x3_6 ← (byte~) sin8s::$10
  (byte/signed byte/word/signed word/dword/signed dword~) sin8s::$11 ← (byte) sin8s::x1 - (byte) sin8s::x3_6
  (byte) sin8s::usinx ← (byte/signed byte/word/signed word/dword/signed dword~) sin8s::$11
  (byte~) sin8s::$12 ← call mulu8_sel (byte) sin8s::x3 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) sin8s::x4 ← (byte~) sin8s::$12
  (byte~) sin8s::$13 ← call mulu8_sel (byte) sin8s::x4 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) sin8s::x5 ← (byte~) sin8s::$13
  (byte~) sin8s::$14 ← (byte) sin8s::x5 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) sin8s::x5_128 ← (byte~) sin8s::$14
  (byte/word~) sin8s::$15 ← (byte) sin8s::usinx + (byte) sin8s::x5_128
  (byte) sin8s::usinx ← (byte/word~) sin8s::$15
  (boolean~) sin8s::$16 ← (byte) sin8s::usinx >= (byte/word/signed word/dword/signed dword) 128
  (boolean~) sin8s::$17 ← ! (boolean~) sin8s::$16
  if((boolean~) sin8s::$17) goto sin8s::@3
  (byte) sin8s::usinx ← -- (byte) sin8s::usinx
sin8s::@3:
  (signed byte~) sin8s::$18 ← ((signed byte)) (byte) sin8s::usinx
  (signed byte) sin8s::sinx ← (signed byte~) sin8s::$18
  (boolean~) sin8s::$19 ← (byte) sin8s::isUpper != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) sin8s::$20 ← ! (boolean~) sin8s::$19
  if((boolean~) sin8s::$20) goto sin8s::@4
  (signed byte~) sin8s::$21 ← ((signed byte)) (byte) sin8s::usinx
  (signed byte~) sin8s::$22 ← - (signed byte~) sin8s::$21
  (signed byte) sin8s::sinx ← (signed byte~) sin8s::$22
sin8s::@4:
  (signed byte) sin8s::return ← (signed byte) sin8s::sinx
  goto sin8s::@return
sin8s::@return:
  (signed byte) sin8s::return ← (signed byte) sin8s::return
  return (signed byte) sin8s::return
endproc // sin8s()
proc (word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
  (dword~) mulu16_sel::$0 ← call mul16u (word) mulu16_sel::v1 (word) mulu16_sel::v2 
  (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select
  (word~) mulu16_sel::$2 ← > (dword~) mulu16_sel::$1
  (word) mulu16_sel::return ← (word~) mulu16_sel::$2
  goto mulu16_sel::@return
mulu16_sel::@return:
  (word) mulu16_sel::return ← (word) mulu16_sel::return
  return (word) mulu16_sel::return
endproc // mulu16_sel()
proc (byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
  (word~) mulu8_sel::$0 ← call mul8u (byte) mulu8_sel::v1 (byte) mulu8_sel::v2 
  (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select
  (byte~) mulu8_sel::$2 ← > (word~) mulu8_sel::$1
  (byte) mulu8_sel::return ← (byte~) mulu8_sel::$2
  goto mulu8_sel::@return
mulu8_sel::@return:
  (byte) mulu8_sel::return ← (byte) mulu8_sel::return
  return (byte) mulu8_sel::return
endproc // mulu8_sel()
  (byte*) SCREEN ← (word/signed word/dword/signed dword) 1024
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
proc (void()) print_str((byte*) print_str::str)
print_str::@1:
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  goto print_str::@3
print_str::@2:
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  goto print_str::@1
print_str::@3:
print_str::@return:
  return 
endproc // print_str()
proc (void()) print_ln()
print_ln::@1:
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
print_ln::@return:
  return 
endproc // print_ln()
proc (void()) print_sword((signed word) print_sword::w)
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
print_sword::@1:
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
print_sword::@return:
  return 
endproc // print_sword()
proc (void()) print_sbyte((signed byte) print_sbyte::b)
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
print_sbyte::@1:
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
print_sbyte::@return:
  return 
endproc // print_sbyte()
proc (void()) print_word((word) print_word::w)
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
print_word::@return:
  return 
endproc // print_word()
proc (void()) print_dword((dword) print_dword::dw)
  (word~) print_dword::$0 ← > (dword) print_dword::dw
  (void~) print_dword::$1 ← call print_word (word~) print_dword::$0 
  (word~) print_dword::$2 ← < (dword) print_dword::dw
  (void~) print_dword::$3 ← call print_word (word~) print_dword::$2 
print_dword::@return:
  return 
endproc // print_dword()
proc (void()) print_sdword((signed dword) print_sdword::dw)
  (boolean~) print_sdword::$0 ← (signed dword) print_sdword::dw < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sdword::$1 ← ! (boolean~) print_sdword::$0
  if((boolean~) print_sdword::$1) goto print_sdword::@1
  (void~) print_sdword::$2 ← call print_char (byte) '-' 
  (signed dword~) print_sdword::$3 ← - (signed dword) print_sdword::dw
  (signed dword) print_sdword::dw ← (signed dword~) print_sdword::$3
print_sdword::@1:
  (dword~) print_sdword::$4 ← ((dword)) (signed dword) print_sdword::dw
  (void~) print_sdword::$5 ← call print_dword (dword~) print_sdword::$4 
print_sdword::@return:
  return 
endproc // print_sdword()
proc (void()) print_byte((byte) print_byte::b)
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
print_byte::@return:
  return 
endproc // print_byte()
proc (void()) print_char((byte) print_char::ch)
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
print_char::@return:
  return 
endproc // print_char()
proc (void()) print_cls()
  (byte*) print_cls::sc ← (byte*) SCREEN
print_cls::@1:
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (byte*~) print_cls::$0 ← (byte*) SCREEN + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
print_cls::@return:
  return 
endproc // print_cls()
proc (void()) main()
  (word) main::tabsize ← (byte/signed byte/word/signed word/dword/signed dword) 20
  (byte[20]) main::sintab ← { fill( 20, 0) }
  (void~) main::$0 ← call print_cls 
  (void~) main::$1 ← call sin8u_table (byte[20]) main::sintab (word) main::tabsize (byte/signed byte/word/signed word/dword/signed dword) 10 (byte/word/signed word/dword/signed dword) 255 
main::@return:
  return 
endproc // main()
proc (void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
  (byte/signed byte/word/signed word/dword/signed dword~) sin8u_table::$0 ← (byte) sin8u_table::max - (byte) sin8u_table::min
  (byte) sin8u_table::amplitude ← (byte/signed byte/word/signed word/dword/signed dword~) sin8u_table::$0
  (byte/word~) sin8u_table::$1 ← (byte) sin8u_table::min + (byte) sin8u_table::max
  (word) sin8u_table::sum ← (byte/word~) sin8u_table::$1
  (word~) sin8u_table::$2 ← (word) sin8u_table::sum >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) sin8u_table::$3 ← ((byte)) (word~) sin8u_table::$2
  (byte) sin8u_table::mid ← (byte~) sin8u_table::$3
  (word~) sin8u_table::$4 ← call div16u (word) PI2_u4f12 (word) sin8u_table::tabsize 
  (word) sin8u_table::step ← (word~) sin8u_table::$4
  (void~) sin8u_table::$5 ← call print_str (string) "step:@" 
  (void~) sin8u_table::$6 ← call print_word (word) sin8u_table::step 
  (void~) sin8u_table::$7 ← call print_str (string) " min:@" 
  (void~) sin8u_table::$8 ← call print_byte (byte) sin8u_table::min 
  (void~) sin8u_table::$9 ← call print_str (string) " max:@" 
  (void~) sin8u_table::$10 ← call print_byte (byte) sin8u_table::max 
  (void~) sin8u_table::$11 ← call print_str (string) " ampl:@" 
  (void~) sin8u_table::$12 ← call print_byte (byte) sin8u_table::amplitude 
  (void~) sin8u_table::$13 ← call print_str (string) " mid:@" 
  (void~) sin8u_table::$14 ← call print_byte (byte) sin8u_table::mid 
  (void~) sin8u_table::$15 ← call print_ln 
  (word) sin8u_table::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin8u_table::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
sin8u_table::@1:
  (signed byte~) sin8u_table::$16 ← call sin8s (word) sin8u_table::x 
  (signed word~) sin8u_table::$17 ← call mul8su (signed byte~) sin8u_table::$16 (byte) sin8u_table::amplitude 
  (byte~) sin8u_table::$18 ← > (signed word~) sin8u_table::$17
  (byte/word~) sin8u_table::$19 ← (byte) sin8u_table::mid + (byte~) sin8u_table::$18
  (byte) sin8u_table::sinval ← (byte/word~) sin8u_table::$19
  *((byte*) sin8u_table::sintab) ← (byte) sin8u_table::sinval
  (byte*) sin8u_table::sintab ← ++ (byte*) sin8u_table::sintab
  (void~) sin8u_table::$20 ← call print_str (string) "x: @" 
  (void~) sin8u_table::$21 ← call print_word (word) sin8u_table::x 
  (void~) sin8u_table::$22 ← call print_str (string) " sin: @" 
  (void~) sin8u_table::$23 ← call print_byte (byte) sin8u_table::sinval 
  (void~) sin8u_table::$24 ← call print_ln 
  (word~) sin8u_table::$25 ← (word) sin8u_table::x + (word) sin8u_table::step
  (word) sin8u_table::x ← (word~) sin8u_table::$25
  (word) sin8u_table::i ← ++ (word) sin8u_table::i
  (boolean~) sin8u_table::$26 ← (word) sin8u_table::i < (word) sin8u_table::tabsize
  if((boolean~) sin8u_table::$26) goto sin8u_table::@1
sin8u_table::@return:
  return 
endproc // sin8u_table()
  call main 

SYMBOLS
(word) PI2_u4f12
(dword) PI2_u4f28
(word) PI_HALF_u4f12
(dword) PI_HALF_u4f28
(word) PI_u4f12
(dword) PI_u4f28
(byte*) SCREEN
(byte*) char_cursor
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(boolean~) div16s::$0
(boolean~) div16s::$1
(word~) div16s::$10
(word~) div16s::$11
(boolean~) div16s::$12
(boolean~) div16s::$13
(signed word~) div16s::$14
(signed word~) div16s::$15
(signed word~) div16s::$16
(signed word~) div16s::$17
(signed word~) div16s::$18
(signed word~) div16s::$19
(signed word~) div16s::$2
(word~) div16s::$3
(word~) div16s::$4
(boolean~) div16s::$5
(boolean~) div16s::$6
(signed word~) div16s::$7
(word~) div16s::$8
(byte~) div16s::$9
(label) div16s::@1
(label) div16s::@2
(label) div16s::@3
(label) div16s::@4
(label) div16s::@5
(label) div16s::@6
(label) div16s::@return
(signed word) div16s::dividend
(word) div16s::dividendu
(signed word) div16s::divisor
(word) div16s::divisoru
(byte) div16s::neg
(word) div16s::resultu
(signed word) div16s::return
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(word~) div32u16u::$0
(word~) div32u16u::$1
(word~) div32u16u::$2
(word~) div32u16u::$3
(label) div32u16u::@return
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_lo
(dword) div32u16u::return
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(boolean~) div8s::$0
(boolean~) div8s::$1
(byte~) div8s::$10
(byte~) div8s::$11
(boolean~) div8s::$12
(boolean~) div8s::$13
(signed byte~) div8s::$14
(signed byte~) div8s::$15
(signed byte~) div8s::$16
(signed byte~) div8s::$17
(signed byte~) div8s::$18
(signed byte~) div8s::$19
(signed byte~) div8s::$2
(byte~) div8s::$3
(byte~) div8s::$4
(boolean~) div8s::$5
(boolean~) div8s::$6
(signed byte~) div8s::$7
(byte~) div8s::$8
(byte~) div8s::$9
(label) div8s::@1
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@6
(label) div8s::@return
(signed byte) div8s::dividend
(byte) div8s::dividendu
(signed byte) div8s::divisor
(byte) div8s::divisoru
(byte) div8s::neg
(byte) div8s::resultu
(signed byte) div8s::return
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$0
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::divisor
(byte) div8u::return
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(boolean~) divr16u::$11
(byte~) divr16u::$2
(boolean~) divr16u::$3
(boolean~) divr16u::$4
(word~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(boolean~) divr16u::$8
(boolean~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::divisor
(byte) divr16u::i
(word) divr16u::quotient
(word) divr16u::rem
(word) divr16u::return
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$0
(byte~) divr8u::$1
(boolean~) divr8u::$10
(boolean~) divr8u::$2
(boolean~) divr8u::$3
(byte~) divr8u::$4
(byte~) divr8u::$5
(byte~) divr8u::$6
(boolean~) divr8u::$7
(boolean~) divr8u::$8
(byte/signed byte/word/signed word/dword/signed dword~) divr8u::$9
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::divisor
(byte) divr8u::i
(byte) divr8u::quotient
(byte) divr8u::rem
(byte) divr8u::return
(byte*) line_cursor
(void()) main()
(void~) main::$0
(void~) main::$1
(label) main::@return
(byte[20]) main::sintab
(word) main::tabsize
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$0
(word~) mul16s::$1
(boolean~) mul16s::$10
(word~) mul16s::$11
(word~) mul16s::$12
(word~) mul16s::$13
(word~) mul16s::$14
(signed dword~) mul16s::$15
(dword~) mul16s::$2
(boolean~) mul16s::$3
(boolean~) mul16s::$4
(word~) mul16s::$5
(word~) mul16s::$6
(word~) mul16s::$7
(word~) mul16s::$8
(boolean~) mul16s::$9
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::b
(dword) mul16s::m
(signed dword) mul16s::return
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(boolean~) mul16u::$0
(byte~) mul16u::$1
(boolean~) mul16u::$2
(boolean~) mul16u::$3
(dword~) mul16u::$4
(word~) mul16u::$5
(dword~) mul16u::$6
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::b
(dword) mul16u::mb
(dword) mul16u::res
(dword) mul16u::return
(signed word()) mul8s((signed byte) mul8s::a , (signed byte) mul8s::b)
(byte~) mul8s::$0
(byte~) mul8s::$1
(boolean~) mul8s::$10
(byte~) mul8s::$11
(byte~) mul8s::$12
(byte~) mul8s::$13
(byte/signed byte/word/signed word/dword/signed dword~) mul8s::$14
(signed word~) mul8s::$15
(word~) mul8s::$2
(boolean~) mul8s::$3
(boolean~) mul8s::$4
(byte~) mul8s::$5
(byte~) mul8s::$6
(byte~) mul8s::$7
(byte/signed byte/word/signed word/dword/signed dword~) mul8s::$8
(boolean~) mul8s::$9
(label) mul8s::@1
(label) mul8s::@2
(label) mul8s::@return
(signed byte) mul8s::a
(signed byte) mul8s::b
(word) mul8s::m
(signed word) mul8s::return
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$0
(byte~) mul8su::$1
(word~) mul8su::$2
(boolean~) mul8su::$3
(boolean~) mul8su::$4
(byte~) mul8su::$5
(byte~) mul8su::$6
(byte~) mul8su::$7
(byte/signed byte/word/signed word/dword/signed dword~) mul8su::$8
(signed word~) mul8su::$9
(label) mul8su::@1
(label) mul8su::@return
(signed byte) mul8su::a
(byte) mul8su::b
(word) mul8su::m
(signed word) mul8su::return
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(boolean~) mul8u::$0
(byte~) mul8u::$1
(boolean~) mul8u::$2
(boolean~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::b
(word) mul8u::mb
(word) mul8u::res
(word) mul8u::return
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0
(dword~) mulu16_sel::$1
(word~) mulu16_sel::$2
(label) mulu16_sel::@return
(word) mulu16_sel::return
(byte) mulu16_sel::select
(word) mulu16_sel::v1
(word) mulu16_sel::v2
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0
(word~) mulu8_sel::$1
(byte~) mulu8_sel::$2
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::select
(byte) mulu8_sel::v1
(byte) mulu8_sel::v2
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(void~) print_byte::$1
(byte~) print_byte::$2
(void~) print_byte::$3
(label) print_byte::@return
(byte) print_byte::b
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(void()) print_dword((dword) print_dword::dw)
(word~) print_dword::$0
(void~) print_dword::$1
(word~) print_dword::$2
(void~) print_dword::$3
(label) print_dword::@return
(dword) print_dword::dw
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(void~) print_sbyte::$2
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(void~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(void()) print_sdword((signed dword) print_sdword::dw)
(boolean~) print_sdword::$0
(boolean~) print_sdword::$1
(void~) print_sdword::$2
(signed dword~) print_sdword::$3
(dword~) print_sdword::$4
(void~) print_sdword::$5
(label) print_sdword::@1
(label) print_sdword::@return
(signed dword) print_sdword::dw
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(void()) print_sword((signed word) print_sword::w)
(boolean~) print_sword::$0
(boolean~) print_sword::$1
(void~) print_sword::$2
(signed word~) print_sword::$3
(word~) print_sword::$4
(void~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@return
(signed word) print_sword::w
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(void~) print_word::$1
(byte~) print_word::$2
(void~) print_word::$3
(label) print_word::@return
(word) print_word::w
(signed word) rem16s
(word) rem16u
(signed byte) rem8s
(byte) rem8u
(signed word()) sin16s((dword) sin16s::x)
(boolean~) sin16s::$0
(boolean~) sin16s::$1
(word/signed word/dword/signed dword~) sin16s::$10
(word~) sin16s::$11
(word~) sin16s::$12
(word~) sin16s::$13
(word~) sin16s::$14
(word~) sin16s::$15
(word~) sin16s::$16
(signed word~) sin16s::$17
(boolean~) sin16s::$18
(boolean~) sin16s::$19
(dword~) sin16s::$2
(signed word~) sin16s::$20
(signed word~) sin16s::$21
(boolean~) sin16s::$3
(boolean~) sin16s::$4
(dword~) sin16s::$5
(dword~) sin16s::$6
(word~) sin16s::$7
(word~) sin16s::$8
(word~) sin16s::$9
(label) sin16s::@1
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@return
(byte) sin16s::isUpper
(signed word) sin16s::return
(signed word) sin16s::sinx
(word) sin16s::usinx
(dword) sin16s::x
(word) sin16s::x1
(word) sin16s::x2
(word) sin16s::x3
(word) sin16s::x3_6
(word) sin16s::x4
(word) sin16s::x5
(word) sin16s::x5_128
(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
(dword~) sin16s_gen::$0
(signed word~) sin16s_gen::$1
(signed word*~) sin16s_gen::$2
(dword~) sin16s_gen::$3
(boolean~) sin16s_gen::$4
(label) sin16s_gen::@1
(label) sin16s_gen::@return
(word) sin16s_gen::i
(signed word*) sin16s_gen::sintab
(dword) sin16s_gen::step
(word) sin16s_gen::wavelength
(dword) sin16s_gen::x
(signed byte()) sin8s((word) sin8s::x)
(boolean~) sin8s::$0
(boolean~) sin8s::$1
(byte~) sin8s::$10
(byte/signed byte/word/signed word/dword/signed dword~) sin8s::$11
(byte~) sin8s::$12
(byte~) sin8s::$13
(byte~) sin8s::$14
(byte/word~) sin8s::$15
(boolean~) sin8s::$16
(boolean~) sin8s::$17
(signed byte~) sin8s::$18
(boolean~) sin8s::$19
(word~) sin8s::$2
(boolean~) sin8s::$20
(signed byte~) sin8s::$21
(signed byte~) sin8s::$22
(boolean~) sin8s::$3
(boolean~) sin8s::$4
(word~) sin8s::$5
(word~) sin8s::$6
(byte~) sin8s::$7
(byte~) sin8s::$8
(byte~) sin8s::$9
(label) sin8s::@1
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@return
(byte) sin8s::DIV_6
(byte) sin8s::isUpper
(signed byte) sin8s::return
(signed byte) sin8s::sinx
(byte) sin8s::usinx
(word) sin8s::x
(byte) sin8s::x1
(byte) sin8s::x2
(byte) sin8s::x3
(byte) sin8s::x3_6
(byte) sin8s::x4
(byte) sin8s::x5
(byte) sin8s::x5_128
(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
(word~) sin8s_gen::$0
(signed byte~) sin8s_gen::$1
(word~) sin8s_gen::$2
(boolean~) sin8s_gen::$3
(label) sin8s_gen::@1
(label) sin8s_gen::@return
(word) sin8s_gen::i
(signed byte*) sin8s_gen::sintab
(word) sin8s_gen::step
(word) sin8s_gen::wavelength
(word) sin8s_gen::x
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte/signed byte/word/signed word/dword/signed dword~) sin8u_table::$0
(byte/word~) sin8u_table::$1
(void~) sin8u_table::$10
(void~) sin8u_table::$11
(void~) sin8u_table::$12
(void~) sin8u_table::$13
(void~) sin8u_table::$14
(void~) sin8u_table::$15
(signed byte~) sin8u_table::$16
(signed word~) sin8u_table::$17
(byte~) sin8u_table::$18
(byte/word~) sin8u_table::$19
(word~) sin8u_table::$2
(void~) sin8u_table::$20
(void~) sin8u_table::$21
(void~) sin8u_table::$22
(void~) sin8u_table::$23
(void~) sin8u_table::$24
(word~) sin8u_table::$25
(boolean~) sin8u_table::$26
(byte~) sin8u_table::$3
(word~) sin8u_table::$4
(void~) sin8u_table::$5
(void~) sin8u_table::$6
(void~) sin8u_table::$7
(void~) sin8u_table::$8
(void~) sin8u_table::$9
(label) sin8u_table::@1
(label) sin8u_table::@return
(byte) sin8u_table::amplitude
(word) sin8u_table::i
(byte) sin8u_table::max
(byte) sin8u_table::mid
(byte) sin8u_table::min
(byte*) sin8u_table::sintab
(byte) sin8u_table::sinval
(word) sin8u_table::step
(word) sin8u_table::sum
(word) sin8u_table::tabsize
(word) sin8u_table::x

Fixing lo/hi-lvalue with new tmpVar mul8s::$16 mul8s::$16 ← mul8s::$8
Fixing lo/hi-lvalue with new tmpVar mul8s::$17 mul8s::$17 ← mul8s::$14
Fixing lo/hi-lvalue with new tmpVar mul8su::$10 mul8su::$10 ← mul8su::$8
Fixing lo/hi-lvalue with new tmpVar mul16s::$16 mul16s::$16 ← mul16s::$8
Fixing lo/hi-lvalue with new tmpVar mul16s::$17 mul16s::$17 ← mul16s::$14
Promoting byte to word in mul8u::mb ← ((word)) mul8u::b
Promoting word to dword in mul16u::mb ← ((dword)) mul16u::b
Promoting word/signed word/dword/signed dword to byte* in SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) rem8u ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@1
div8u: scope:[div8u]  from
  (byte~) div8u::$0 ← call divr8u (byte) div8u::dividend (byte) div8u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) div8u::return ← (byte~) div8u::$0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u div8u::@1
  (byte) div8u::return ← (byte) div8u::return
  return (byte) div8u::return
  to:@return
div8u::@1: scope:[div8u]  from
  to:div8u::@return
@1: scope:[]  from @begin
  to:@2
divr8u: scope:[divr8u]  from
  (byte) divr8u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  (byte~) divr8u::$0 ← (byte) divr8u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem ← (byte~) divr8u::$0
  (byte~) divr8u::$1 ← (byte) divr8u::dividend & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr8u::$2 ← (byte~) divr8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr8u::$3 ← ! (boolean~) divr8u::$2
  if((boolean~) divr8u::$3) goto divr8u::@2
  to:divr8u::@4
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  (byte~) divr8u::$5 ← (byte) divr8u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::dividend ← (byte~) divr8u::$5
  (byte~) divr8u::$6 ← (byte) divr8u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::quotient ← (byte~) divr8u::$6
  (boolean~) divr8u::$7 ← (byte) divr8u::rem >= (byte) divr8u::divisor
  (boolean~) divr8u::$8 ← ! (boolean~) divr8u::$7
  if((boolean~) divr8u::$8) goto divr8u::@3
  to:divr8u::@5
divr8u::@4: scope:[divr8u]  from divr8u::@1
  (byte~) divr8u::$4 ← (byte) divr8u::rem | (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem ← (byte~) divr8u::$4
  to:divr8u::@2
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  (byte) divr8u::i ← ++ (byte) divr8u::i
  (boolean~) divr8u::$10 ← (byte) divr8u::i != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) divr8u::$10) goto divr8u::@1
  to:divr8u::@6
divr8u::@5: scope:[divr8u]  from divr8u::@2
  (byte) divr8u::quotient ← ++ (byte) divr8u::quotient
  (byte/signed byte/word/signed word/dword/signed dword~) divr8u::$9 ← (byte) divr8u::rem - (byte) divr8u::divisor
  (byte) divr8u::rem ← (byte/signed byte/word/signed word/dword/signed dword~) divr8u::$9
  to:divr8u::@3
divr8u::@6: scope:[divr8u]  from divr8u::@3
  (byte) rem8u ← (byte) divr8u::rem
  (byte) divr8u::return ← (byte) divr8u::quotient
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6 divr8u::@7
  (byte) divr8u::return ← (byte) divr8u::return
  return (byte) divr8u::return
  to:@return
divr8u::@7: scope:[divr8u]  from
  to:divr8u::@return
@2: scope:[]  from @1
  (word) rem16u ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@3
divr16u: scope:[divr16u]  from
  (word) divr16u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (word~) divr16u::$0 ← (word) divr16u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr16u::$4 ← ! (boolean~) divr16u::$3
  if((boolean~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (word~) divr16u::$6 ← (word) divr16u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient ← (word~) divr16u::$7
  (boolean~) divr16u::$8 ← (word) divr16u::rem >= (word) divr16u::divisor
  (boolean~) divr16u::$9 ← ! (boolean~) divr16u::$8
  if((boolean~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (word~) divr16u::$5 ← (word) divr16u::rem | (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem ← (word~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (byte) divr16u::i ← ++ (byte) divr16u::i
  (boolean~) divr16u::$11 ← (byte) divr16u::i != (byte/signed byte/word/signed word/dword/signed dword) 16
  if((boolean~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::quotient ← ++ (word) divr16u::quotient
  (word~) divr16u::$10 ← (word) divr16u::rem - (word) divr16u::divisor
  (word) divr16u::rem ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) rem16u ← (word) divr16u::rem
  (word) divr16u::return ← (word) divr16u::quotient
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6 divr16u::@7
  (word) divr16u::return ← (word) divr16u::return
  return (word) divr16u::return
  to:@return
divr16u::@7: scope:[divr16u]  from
  to:divr16u::@return
@3: scope:[]  from @2
  to:@4
div16u: scope:[div16u]  from
  (word~) div16u::$0 ← call divr16u (word) div16u::dividend (word) div16u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) div16u::return ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u div16u::@1
  (word) div16u::return ← (word) div16u::return
  return (word) div16u::return
  to:@return
div16u::@1: scope:[div16u]  from
  to:div16u::@return
@4: scope:[]  from @3
  to:@5
div32u16u: scope:[div32u16u]  from
  (word~) div32u16u::$0 ← > (dword) div32u16u::dividend
  (word~) div32u16u::$1 ← call divr16u (word~) div32u16u::$0 (word) div32u16u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) div32u16u::quotient_hi ← (word~) div32u16u::$1
  (word~) div32u16u::$2 ← < (dword) div32u16u::dividend
  (word~) div32u16u::$3 ← call divr16u (word~) div32u16u::$2 (word) div32u16u::divisor (word) rem16u 
  (word) div32u16u::quotient_lo ← (word~) div32u16u::$3
  (dword) div32u16u::quotient ← { (word) div32u16u::quotient_hi, (word) div32u16u::quotient_lo }
  (dword) div32u16u::return ← (dword) div32u16u::quotient
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u div32u16u::@1
  (dword) div32u16u::return ← (dword) div32u16u::return
  return (dword) div32u16u::return
  to:@return
div32u16u::@1: scope:[div32u16u]  from
  to:div32u16u::@return
@5: scope:[]  from @4
  (signed byte) rem8s ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@6
div8s: scope:[div8s]  from
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$0 ← (signed byte) div8s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$1 ← ! (boolean~) div8s::$0
  if((boolean~) div8s::$1) goto div8s::@1
  to:div8s::@7
div8s::@1: scope:[div8s]  from div8s div8s::@8
  (byte~) div8s::$4 ← ((byte)) (signed byte) div8s::dividend
  (byte) div8s::dividendu ← (byte~) div8s::$4
  to:div8s::@2
div8s::@7: scope:[div8s]  from div8s
  (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend
  (byte~) div8s::$3 ← ((byte)) (signed byte~) div8s::$2
  (byte) div8s::dividendu ← (byte~) div8s::$3
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@7
  (byte) div8s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$5 ← (signed byte) div8s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$6 ← ! (boolean~) div8s::$5
  if((boolean~) div8s::$6) goto div8s::@3
  to:div8s::@9
div8s::@8: scope:[div8s]  from
  to:div8s::@1
div8s::@3: scope:[div8s]  from div8s::@10 div8s::@2
  (byte~) div8s::$10 ← ((byte)) (signed byte) div8s::divisor
  (byte) div8s::divisoru ← (byte~) div8s::$10
  to:div8s::@4
div8s::@9: scope:[div8s]  from div8s::@2
  (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor
  (byte~) div8s::$8 ← ((byte)) (signed byte~) div8s::$7
  (byte) div8s::divisoru ← (byte~) div8s::$8
  (byte~) div8s::$9 ← (byte) div8s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8s::neg ← (byte~) div8s::$9
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@9
  (byte~) div8s::$11 ← call div8u (byte) div8s::dividendu (byte) div8s::divisoru 
  (byte) div8s::resultu ← (byte~) div8s::$11
  (boolean~) div8s::$12 ← (byte) div8s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$13 ← ! (boolean~) div8s::$12
  if((boolean~) div8s::$13) goto div8s::@5
  to:div8s::@11
div8s::@10: scope:[div8s]  from
  to:div8s::@3
div8s::@5: scope:[div8s]  from div8s::@13 div8s::@4
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) rem8u
  (signed byte~) div8s::$17 ← - (signed byte~) div8s::$16
  (signed byte) rem8s ← (signed byte~) div8s::$17
  (signed byte~) div8s::$18 ← ((signed byte)) (byte) div8s::resultu
  (signed byte~) div8s::$19 ← - (signed byte~) div8s::$18
  (signed byte) div8s::return ← (signed byte~) div8s::$19
  to:div8s::@return
div8s::@11: scope:[div8s]  from div8s::@4
  (signed byte~) div8s::$14 ← ((signed byte)) (byte) rem8u
  (signed byte) rem8s ← (signed byte~) div8s::$14
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) div8s::resultu
  (signed byte) div8s::return ← (signed byte~) div8s::$15
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@11 div8s::@5 div8s::@6
  (signed byte) div8s::return ← (signed byte) div8s::return
  return (signed byte) div8s::return
  to:@return
div8s::@12: scope:[div8s]  from
  to:div8s::@6
div8s::@6: scope:[div8s]  from div8s::@12 div8s::@14
  to:div8s::@return
div8s::@13: scope:[div8s]  from
  to:div8s::@5
div8s::@14: scope:[div8s]  from
  to:div8s::@6
@6: scope:[]  from @5
  (signed word) rem16s ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@7
div16s: scope:[div16s]  from
  (byte) div16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) div16s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$0 ← (signed word) div16s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$1 ← ! (boolean~) div16s::$0
  if((boolean~) div16s::$1) goto div16s::@1
  to:div16s::@7
div16s::@1: scope:[div16s]  from div16s div16s::@8
  (word~) div16s::$4 ← ((word)) (signed word) div16s::dividend
  (word) div16s::dividendu ← (word~) div16s::$4
  to:div16s::@2
div16s::@7: scope:[div16s]  from div16s
  (signed word~) div16s::$2 ← - (signed word) div16s::dividend
  (word~) div16s::$3 ← ((word)) (signed word~) div16s::$2
  (word) div16s::dividendu ← (word~) div16s::$3
  (byte) div16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div16s::@2
div16s::@2: scope:[div16s]  from div16s::@1 div16s::@7
  (word) div16s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$5 ← (signed word) div16s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$6 ← ! (boolean~) div16s::$5
  if((boolean~) div16s::$6) goto div16s::@3
  to:div16s::@9
div16s::@8: scope:[div16s]  from
  to:div16s::@1
div16s::@3: scope:[div16s]  from div16s::@10 div16s::@2
  (word~) div16s::$10 ← ((word)) (signed word) div16s::divisor
  (word) div16s::divisoru ← (word~) div16s::$10
  to:div16s::@4
div16s::@9: scope:[div16s]  from div16s::@2
  (signed word~) div16s::$7 ← - (signed word) div16s::divisor
  (word~) div16s::$8 ← ((word)) (signed word~) div16s::$7
  (word) div16s::divisoru ← (word~) div16s::$8
  (byte~) div16s::$9 ← (byte) div16s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div16s::neg ← (byte~) div16s::$9
  to:div16s::@4
div16s::@4: scope:[div16s]  from div16s::@3 div16s::@9
  (word~) div16s::$11 ← call div16u (word) div16s::dividendu (word) div16s::divisoru 
  (word) div16s::resultu ← (word~) div16s::$11
  (boolean~) div16s::$12 ← (byte) div16s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$13 ← ! (boolean~) div16s::$12
  if((boolean~) div16s::$13) goto div16s::@5
  to:div16s::@11
div16s::@10: scope:[div16s]  from
  to:div16s::@3
div16s::@5: scope:[div16s]  from div16s::@13 div16s::@4
  (signed word~) div16s::$16 ← ((signed word)) (word) rem16u
  (signed word~) div16s::$17 ← - (signed word~) div16s::$16
  (signed word) rem16s ← (signed word~) div16s::$17
  (signed word~) div16s::$18 ← ((signed word)) (word) div16s::resultu
  (signed word~) div16s::$19 ← - (signed word~) div16s::$18
  (signed word) div16s::return ← (signed word~) div16s::$19
  to:div16s::@return
div16s::@11: scope:[div16s]  from div16s::@4
  (signed word~) div16s::$14 ← ((signed word)) (word) rem16u
  (signed word) rem16s ← (signed word~) div16s::$14
  (signed word~) div16s::$15 ← ((signed word)) (word) div16s::resultu
  (signed word) div16s::return ← (signed word~) div16s::$15
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@11 div16s::@5 div16s::@6
  (signed word) div16s::return ← (signed word) div16s::return
  return (signed word) div16s::return
  to:@return
div16s::@12: scope:[div16s]  from
  to:div16s::@6
div16s::@6: scope:[div16s]  from div16s::@12 div16s::@14
  to:div16s::@return
div16s::@13: scope:[div16s]  from
  to:div16s::@5
div16s::@14: scope:[div16s]  from
  to:div16s::@6
@7: scope:[]  from @6
  to:@8
mul8u: scope:[mul8u]  from
  (word) mul8u::res ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) mul8u::mb ← ((word)) (byte) mul8u::b
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (boolean~) mul8u::$0 ← (byte) mul8u::a != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) mul8u::$0) goto mul8u::@2
  to:mul8u::@5
mul8u::@2: scope:[mul8u]  from mul8u::@1 mul8u::@6
  (byte~) mul8u::$1 ← (byte) mul8u::a & (byte/signed byte/word/signed word/dword/signed dword) 1
  (boolean~) mul8u::$2 ← (byte~) mul8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul8u::$3 ← ! (boolean~) mul8u::$2
  if((boolean~) mul8u::$3) goto mul8u::@4
  to:mul8u::@7
mul8u::@5: scope:[mul8u]  from mul8u::@1
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@5 mul8u::@8
  (word) mul8u::return ← (word) mul8u::res
  to:mul8u::@return
mul8u::@6: scope:[mul8u]  from
  to:mul8u::@2
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@7
  (byte~) mul8u::$5 ← (byte) mul8u::a >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) mul8u::a ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) mul8u::mb ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@7: scope:[mul8u]  from mul8u::@2
  (word~) mul8u::$4 ← (word) mul8u::res + (word) mul8u::mb
  (word) mul8u::res ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@8: scope:[mul8u]  from
  to:mul8u::@3
mul8u::@return: scope:[mul8u]  from mul8u::@3 mul8u::@9
  (word) mul8u::return ← (word) mul8u::return
  return (word) mul8u::return
  to:@return
mul8u::@9: scope:[mul8u]  from
  to:mul8u::@return
@8: scope:[]  from @7
  to:@9
mul8s: scope:[mul8s]  from
  (byte~) mul8s::$0 ← ((byte)) (signed byte) mul8s::a
  (byte~) mul8s::$1 ← ((byte)) (signed byte) mul8s::b
  (word~) mul8s::$2 ← call mul8u (byte~) mul8s::$0 (byte~) mul8s::$1 
  (word) mul8s::m ← (word~) mul8s::$2
  (boolean~) mul8s::$3 ← (signed byte) mul8s::a < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul8s::$4 ← ! (boolean~) mul8s::$3
  if((boolean~) mul8s::$4) goto mul8s::@1
  to:mul8s::@3
mul8s::@1: scope:[mul8s]  from mul8s mul8s::@3
  (boolean~) mul8s::$9 ← (signed byte) mul8s::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul8s::$10 ← ! (boolean~) mul8s::$9
  if((boolean~) mul8s::$10) goto mul8s::@2
  to:mul8s::@4
mul8s::@3: scope:[mul8s]  from mul8s
  (byte~) mul8s::$5 ← > (word) mul8s::m
  (byte~) mul8s::$6 ← > (word) mul8s::m
  (byte~) mul8s::$7 ← ((byte)) (signed byte) mul8s::b
  (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$8 ← (byte~) mul8s::$6 - (byte~) mul8s::$7
  (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$16 ← (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$8
  (word) mul8s::m ← (word) mul8s::m hi= (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$16
  to:mul8s::@1
mul8s::@2: scope:[mul8s]  from mul8s::@1 mul8s::@4
  (signed word~) mul8s::$15 ← ((signed word)) (word) mul8s::m
  (signed word) mul8s::return ← (signed word~) mul8s::$15
  to:mul8s::@return
mul8s::@4: scope:[mul8s]  from mul8s::@1
  (byte~) mul8s::$11 ← > (word) mul8s::m
  (byte~) mul8s::$12 ← > (word) mul8s::m
  (byte~) mul8s::$13 ← ((byte)) (signed byte) mul8s::a
  (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$14 ← (byte~) mul8s::$12 - (byte~) mul8s::$13
  (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$17 ← (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$14
  (word) mul8s::m ← (word) mul8s::m hi= (byte/signed byte/word/signed word/dword/signed dword~) mul8s::$17
  to:mul8s::@2
mul8s::@return: scope:[mul8s]  from mul8s::@2 mul8s::@5
  (signed word) mul8s::return ← (signed word) mul8s::return
  return (signed word) mul8s::return
  to:@return
mul8s::@5: scope:[mul8s]  from
  to:mul8s::@return
@9: scope:[]  from @8
  to:@10
mul8su: scope:[mul8su]  from
  (byte~) mul8su::$0 ← ((byte)) (signed byte) mul8su::a
  (byte~) mul8su::$1 ← ((byte)) (byte) mul8su::b
  (word~) mul8su::$2 ← call mul8u (byte~) mul8su::$0 (byte~) mul8su::$1 
  (word) mul8su::m ← (word~) mul8su::$2
  (boolean~) mul8su::$3 ← (signed byte) mul8su::a < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul8su::$4 ← ! (boolean~) mul8su::$3
  if((boolean~) mul8su::$4) goto mul8su::@1
  to:mul8su::@2
mul8su::@1: scope:[mul8su]  from mul8su mul8su::@2
  (signed word~) mul8su::$9 ← ((signed word)) (word) mul8su::m
  (signed word) mul8su::return ← (signed word~) mul8su::$9
  to:mul8su::@return
mul8su::@2: scope:[mul8su]  from mul8su
  (byte~) mul8su::$5 ← > (word) mul8su::m
  (byte~) mul8su::$6 ← > (word) mul8su::m
  (byte~) mul8su::$7 ← ((byte)) (byte) mul8su::b
  (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$8 ← (byte~) mul8su::$6 - (byte~) mul8su::$7
  (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 ← (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$8
  (word) mul8su::m ← (word) mul8su::m hi= (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10
  to:mul8su::@1
mul8su::@return: scope:[mul8su]  from mul8su::@1 mul8su::@3
  (signed word) mul8su::return ← (signed word) mul8su::return
  return (signed word) mul8su::return
  to:@return
mul8su::@3: scope:[mul8su]  from
  to:mul8su::@return
@10: scope:[]  from @9
  to:@11
mul16u: scope:[mul16u]  from
  (dword) mul16u::res ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (dword) mul16u::mb ← ((dword)) (word) mul16u::b
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  (boolean~) mul16u::$0 ← (word) mul16u::a != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) mul16u::$0) goto mul16u::@2
  to:mul16u::@5
mul16u::@2: scope:[mul16u]  from mul16u::@1 mul16u::@6
  (byte~) mul16u::$1 ← (word) mul16u::a & (byte/signed byte/word/signed word/dword/signed dword) 1
  (boolean~) mul16u::$2 ← (byte~) mul16u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul16u::$3 ← ! (boolean~) mul16u::$2
  if((boolean~) mul16u::$3) goto mul16u::@4
  to:mul16u::@7
mul16u::@5: scope:[mul16u]  from mul16u::@1
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@5 mul16u::@8
  (dword) mul16u::return ← (dword) mul16u::res
  to:mul16u::@return
mul16u::@6: scope:[mul16u]  from
  to:mul16u::@2
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@7
  (word~) mul16u::$5 ← (word) mul16u::a >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) mul16u::a ← (word~) mul16u::$5
  (dword~) mul16u::$6 ← (dword) mul16u::mb << (byte/signed byte/word/signed word/dword/signed dword) 1
  (dword) mul16u::mb ← (dword~) mul16u::$6
  to:mul16u::@1
mul16u::@7: scope:[mul16u]  from mul16u::@2
  (dword~) mul16u::$4 ← (dword) mul16u::res + (dword) mul16u::mb
  (dword) mul16u::res ← (dword~) mul16u::$4
  to:mul16u::@4
mul16u::@8: scope:[mul16u]  from
  to:mul16u::@3
mul16u::@return: scope:[mul16u]  from mul16u::@3 mul16u::@9
  (dword) mul16u::return ← (dword) mul16u::return
  return (dword) mul16u::return
  to:@return
mul16u::@9: scope:[mul16u]  from
  to:mul16u::@return
@11: scope:[]  from @10
  to:@12
mul16s: scope:[mul16s]  from
  (word~) mul16s::$0 ← ((word)) (signed word) mul16s::a
  (word~) mul16s::$1 ← ((word)) (signed word) mul16s::b
  (dword~) mul16s::$2 ← call mul16u (word~) mul16s::$0 (word~) mul16s::$1 
  (dword) mul16s::m ← (dword~) mul16s::$2
  (boolean~) mul16s::$3 ← (signed word) mul16s::a < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul16s::$4 ← ! (boolean~) mul16s::$3
  if((boolean~) mul16s::$4) goto mul16s::@1
  to:mul16s::@3
mul16s::@1: scope:[mul16s]  from mul16s mul16s::@3
  (boolean~) mul16s::$9 ← (signed word) mul16s::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul16s::$10 ← ! (boolean~) mul16s::$9
  if((boolean~) mul16s::$10) goto mul16s::@2
  to:mul16s::@4
mul16s::@3: scope:[mul16s]  from mul16s
  (word~) mul16s::$5 ← > (dword) mul16s::m
  (word~) mul16s::$6 ← > (dword) mul16s::m
  (word~) mul16s::$7 ← ((word)) (signed word) mul16s::b
  (word~) mul16s::$8 ← (word~) mul16s::$6 - (word~) mul16s::$7
  (word~) mul16s::$16 ← (word~) mul16s::$8
  (dword) mul16s::m ← (dword) mul16s::m hi= (word~) mul16s::$16
  to:mul16s::@1
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  (signed dword~) mul16s::$15 ← ((signed dword)) (dword) mul16s::m
  (signed dword) mul16s::return ← (signed dword~) mul16s::$15
  to:mul16s::@return
mul16s::@4: scope:[mul16s]  from mul16s::@1
  (word~) mul16s::$11 ← > (dword) mul16s::m
  (word~) mul16s::$12 ← > (dword) mul16s::m
  (word~) mul16s::$13 ← ((word)) (signed word) mul16s::a
  (word~) mul16s::$14 ← (word~) mul16s::$12 - (word~) mul16s::$13
  (word~) mul16s::$17 ← (word~) mul16s::$14
  (dword) mul16s::m ← (dword) mul16s::m hi= (word~) mul16s::$17
  to:mul16s::@2
mul16s::@return: scope:[mul16s]  from mul16s::@2 mul16s::@5
  (signed dword) mul16s::return ← (signed dword) mul16s::return
  return (signed dword) mul16s::return
  to:@return
mul16s::@5: scope:[mul16s]  from
  to:mul16s::@return
@12: scope:[]  from @11
  (dword) PI2_u4f28 ← (dword/signed dword) 1686629713
  (dword) PI_u4f28 ← (dword/signed dword) 843314857
  (dword) PI_HALF_u4f28 ← (dword/signed dword) 421657428
  (word) PI2_u4f12 ← (word/signed word/dword/signed dword) 25736
  (word) PI_u4f12 ← (word/signed word/dword/signed dword) 12868
  (word) PI_HALF_u4f12 ← (word/signed word/dword/signed dword) 6434
  to:@13
sin16s_gen: scope:[sin16s_gen]  from
  (dword~) sin16s_gen::$0 ← call div32u16u (dword) PI2_u4f28 (word) sin16s_gen::wavelength 
  (dword) sin16s_gen::step ← (dword~) sin16s_gen::$0
  (dword) sin16s_gen::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin16s_gen::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen sin16s_gen::@1
  (signed word~) sin16s_gen::$1 ← call sin16s (dword) sin16s_gen::x 
  *((signed word*) sin16s_gen::sintab) ← (signed word~) sin16s_gen::$1
  (signed word*~) sin16s_gen::$2 ← (signed word*) sin16s_gen::sintab + (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed word*) sin16s_gen::sintab ← (signed word*~) sin16s_gen::$2
  (dword~) sin16s_gen::$3 ← (dword) sin16s_gen::x + (dword) sin16s_gen::step
  (dword) sin16s_gen::x ← (dword~) sin16s_gen::$3
  (word) sin16s_gen::i ← ++ (word) sin16s_gen::i
  (boolean~) sin16s_gen::$4 ← (word) sin16s_gen::i < (word) sin16s_gen::wavelength
  if((boolean~) sin16s_gen::$4) goto sin16s_gen::@1
  to:sin16s_gen::@2
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen::@1
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@2
  return 
  to:@return
@13: scope:[]  from @12
  to:@14
sin8s_gen: scope:[sin8s_gen]  from
  (word~) sin8s_gen::$0 ← call div16u (word) PI2_u4f12 (word) sin8s_gen::wavelength 
  (word) sin8s_gen::step ← (word~) sin8s_gen::$0
  (word) sin8s_gen::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin8s_gen::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen sin8s_gen::@1
  (signed byte~) sin8s_gen::$1 ← call sin8s (word) sin8s_gen::x 
  *((signed byte*) sin8s_gen::sintab) ← (signed byte~) sin8s_gen::$1
  (signed byte*) sin8s_gen::sintab ← ++ (signed byte*) sin8s_gen::sintab
  (word~) sin8s_gen::$2 ← (word) sin8s_gen::x + (word) sin8s_gen::step
  (word) sin8s_gen::x ← (word~) sin8s_gen::$2
  (word) sin8s_gen::i ← ++ (word) sin8s_gen::i
  (boolean~) sin8s_gen::$3 ← (word) sin8s_gen::i < (word) sin8s_gen::wavelength
  if((boolean~) sin8s_gen::$3) goto sin8s_gen::@1
  to:sin8s_gen::@2
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1
  to:sin8s_gen::@return
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@2
  return 
  to:@return
@14: scope:[]  from @13
  to:@15
sin16s: scope:[sin16s]  from
  (byte) sin16s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) sin16s::$0 ← (dword) sin16s::x >= (dword) PI_u4f28
  (boolean~) sin16s::$1 ← ! (boolean~) sin16s::$0
  if((boolean~) sin16s::$1) goto sin16s::@1
  to:sin16s::@4
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  (boolean~) sin16s::$3 ← (dword) sin16s::x >= (dword) PI_HALF_u4f28
  (boolean~) sin16s::$4 ← ! (boolean~) sin16s::$3
  if((boolean~) sin16s::$4) goto sin16s::@2
  to:sin16s::@5
sin16s::@4: scope:[sin16s]  from sin16s
  (dword~) sin16s::$2 ← (dword) sin16s::x - (dword) PI_u4f28
  (dword) sin16s::x ← (dword~) sin16s::$2
  (byte) sin16s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:sin16s::@1
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  (dword~) sin16s::$6 ← (dword) sin16s::x << (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) sin16s::$7 ← > (dword~) sin16s::$6
  (word) sin16s::x1 ← (word~) sin16s::$7
  (word~) sin16s::$8 ← call mulu16_sel (word) sin16s::x1 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) sin16s::x2 ← (word~) sin16s::$8
  (word~) sin16s::$9 ← call mulu16_sel (word) sin16s::x2 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (word) sin16s::x3 ← (word~) sin16s::$9
  (word/signed word/dword/signed dword~) sin16s::$10 ← (dword/signed dword) 65536 / (byte/signed byte/word/signed word/dword/signed dword) 6
  (word~) sin16s::$11 ← call mulu16_sel (word) sin16s::x3 (word/signed word/dword/signed dword~) sin16s::$10 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (word) sin16s::x3_6 ← (word~) sin16s::$11
  (word~) sin16s::$12 ← (word) sin16s::x1 - (word) sin16s::x3_6
  (word) sin16s::usinx ← (word~) sin16s::$12
  (word~) sin16s::$13 ← call mulu16_sel (word) sin16s::x3 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) sin16s::x4 ← (word~) sin16s::$13
  (word~) sin16s::$14 ← call mulu16_sel (word) sin16s::x4 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) sin16s::x5 ← (word~) sin16s::$14
  (word~) sin16s::$15 ← (word) sin16s::x5 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (word) sin16s::x5_128 ← (word~) sin16s::$15
  (word~) sin16s::$16 ← (word) sin16s::usinx + (word) sin16s::x5_128
  (word) sin16s::usinx ← (word~) sin16s::$16
  (signed word~) sin16s::$17 ← ((signed word)) (word) sin16s::usinx
  (signed word) sin16s::sinx ← (signed word~) sin16s::$17
  (boolean~) sin16s::$18 ← (byte) sin16s::isUpper != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) sin16s::$19 ← ! (boolean~) sin16s::$18
  if((boolean~) sin16s::$19) goto sin16s::@3
  to:sin16s::@6
sin16s::@5: scope:[sin16s]  from sin16s::@1
  (dword~) sin16s::$5 ← (dword) PI_u4f28 - (dword) sin16s::x
  (dword) sin16s::x ← (dword~) sin16s::$5
  to:sin16s::@2
sin16s::@3: scope:[sin16s]  from sin16s::@2 sin16s::@6
  (signed word) sin16s::return ← (signed word) sin16s::sinx
  to:sin16s::@return
sin16s::@6: scope:[sin16s]  from sin16s::@2
  (signed word~) sin16s::$20 ← ((signed word)) (word) sin16s::usinx
  (signed word~) sin16s::$21 ← - (signed word~) sin16s::$20
  (signed word) sin16s::sinx ← (signed word~) sin16s::$21
  to:sin16s::@3
sin16s::@return: scope:[sin16s]  from sin16s::@3 sin16s::@7
  (signed word) sin16s::return ← (signed word) sin16s::return
  return (signed word) sin16s::return
  to:@return
sin16s::@7: scope:[sin16s]  from
  to:sin16s::@return
@15: scope:[]  from @14
  to:@16
sin8s: scope:[sin8s]  from
  (byte) sin8s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) sin8s::$0 ← (word) sin8s::x >= (word) PI_u4f12
  (boolean~) sin8s::$1 ← ! (boolean~) sin8s::$0
  if((boolean~) sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  (boolean~) sin8s::$3 ← (word) sin8s::x >= (word) PI_HALF_u4f12
  (boolean~) sin8s::$4 ← ! (boolean~) sin8s::$3
  if((boolean~) sin8s::$4) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  (word~) sin8s::$2 ← (word) sin8s::x - (word) PI_u4f12
  (word) sin8s::x ← (word~) sin8s::$2
  (byte) sin8s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  (word~) sin8s::$6 ← (word) sin8s::x << (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte~) sin8s::$7 ← > (word~) sin8s::$6
  (byte) sin8s::x1 ← (byte~) sin8s::$7
  (byte~) sin8s::$8 ← call mulu8_sel (byte) sin8s::x1 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) sin8s::x2 ← (byte~) sin8s::$8
  (byte~) sin8s::$9 ← call mulu8_sel (byte) sin8s::x2 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (byte) sin8s::x3 ← (byte~) sin8s::$9
  (byte) sin8s::DIV_6 ← (byte/signed byte/word/signed word/dword/signed dword) 43
  (byte~) sin8s::$10 ← call mulu8_sel (byte) sin8s::x3 (byte) sin8s::DIV_6 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (byte) sin8s::x3_6 ← (byte~) sin8s::$10
  (byte/signed byte/word/signed word/dword/signed dword~) sin8s::$11 ← (byte) sin8s::x1 - (byte) sin8s::x3_6
  (byte) sin8s::usinx ← (byte/signed byte/word/signed word/dword/signed dword~) sin8s::$11
  (byte~) sin8s::$12 ← call mulu8_sel (byte) sin8s::x3 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) sin8s::x4 ← (byte~) sin8s::$12
  (byte~) sin8s::$13 ← call mulu8_sel (byte) sin8s::x4 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) sin8s::x5 ← (byte~) sin8s::$13
  (byte~) sin8s::$14 ← (byte) sin8s::x5 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) sin8s::x5_128 ← (byte~) sin8s::$14
  (byte/word~) sin8s::$15 ← (byte) sin8s::usinx + (byte) sin8s::x5_128
  (byte) sin8s::usinx ← (byte/word~) sin8s::$15
  (boolean~) sin8s::$16 ← (byte) sin8s::usinx >= (byte/word/signed word/dword/signed dword) 128
  (boolean~) sin8s::$17 ← ! (boolean~) sin8s::$16
  if((boolean~) sin8s::$17) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  (word~) sin8s::$5 ← (word) PI_u4f12 - (word) sin8s::x
  (word) sin8s::x ← (word~) sin8s::$5
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@2 sin8s::@7
  (signed byte~) sin8s::$18 ← ((signed byte)) (byte) sin8s::usinx
  (signed byte) sin8s::sinx ← (signed byte~) sin8s::$18
  (boolean~) sin8s::$19 ← (byte) sin8s::isUpper != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) sin8s::$20 ← ! (boolean~) sin8s::$19
  if((boolean~) sin8s::$20) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@2
  (byte) sin8s::usinx ← -- (byte) sin8s::usinx
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  (signed byte) sin8s::return ← (signed byte) sin8s::sinx
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  (signed byte~) sin8s::$21 ← ((signed byte)) (byte) sin8s::usinx
  (signed byte~) sin8s::$22 ← - (signed byte~) sin8s::$21
  (signed byte) sin8s::sinx ← (signed byte~) sin8s::$22
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4 sin8s::@9
  (signed byte) sin8s::return ← (signed byte) sin8s::return
  return (signed byte) sin8s::return
  to:@return
sin8s::@9: scope:[sin8s]  from
  to:sin8s::@return
@16: scope:[]  from @15
  to:@17
mulu16_sel: scope:[mulu16_sel]  from
  (dword~) mulu16_sel::$0 ← call mul16u (word) mulu16_sel::v1 (word) mulu16_sel::v2 
  (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select
  (word~) mulu16_sel::$2 ← > (dword~) mulu16_sel::$1
  (word) mulu16_sel::return ← (word~) mulu16_sel::$2
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel mulu16_sel::@1
  (word) mulu16_sel::return ← (word) mulu16_sel::return
  return (word) mulu16_sel::return
  to:@return
mulu16_sel::@1: scope:[mulu16_sel]  from
  to:mulu16_sel::@return
@17: scope:[]  from @16
  to:@18
mulu8_sel: scope:[mulu8_sel]  from
  (word~) mulu8_sel::$0 ← call mul8u (byte) mulu8_sel::v1 (byte) mulu8_sel::v2 
  (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select
  (byte~) mulu8_sel::$2 ← > (word~) mulu8_sel::$1
  (byte) mulu8_sel::return ← (byte~) mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel mulu8_sel::@1
  (byte) mulu8_sel::return ← (byte) mulu8_sel::return
  return (byte) mulu8_sel::return
  to:@return
mulu8_sel::@1: scope:[mulu8_sel]  from
  to:mulu8_sel::@return
@18: scope:[]  from @17
  (byte*) SCREEN ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
  to:@19
print_str: scope:[print_str]  from
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@4
print_str::@2: scope:[print_str]  from print_str::@1 print_str::@5
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  to:print_str::@1
print_str::@4: scope:[print_str]  from print_str::@1
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@4 print_str::@6
  to:print_str::@return
print_str::@5: scope:[print_str]  from
  to:print_str::@2
print_str::@6: scope:[print_str]  from
  to:print_str::@3
print_str::@return: scope:[print_str]  from print_str::@3
  return 
  to:@return
@19: scope:[]  from @18
  to:@20
print_ln: scope:[print_ln]  from
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  return 
  to:@return
@20: scope:[]  from @19
  to:@21
print_sword: scope:[print_sword]  from
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@2
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@1
  return 
  to:@return
@21: scope:[]  from @20
  to:@22
print_sbyte: scope:[print_sbyte]  from
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@2
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  return 
  to:@return
@22: scope:[]  from @21
  to:@23
print_word: scope:[print_word]  from
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word
  return 
  to:@return
@23: scope:[]  from @22
  to:@24
print_dword: scope:[print_dword]  from
  (word~) print_dword::$0 ← > (dword) print_dword::dw
  (void~) print_dword::$1 ← call print_word (word~) print_dword::$0 
  (word~) print_dword::$2 ← < (dword) print_dword::dw
  (void~) print_dword::$3 ← call print_word (word~) print_dword::$2 
  to:print_dword::@return
print_dword::@return: scope:[print_dword]  from print_dword
  return 
  to:@return
@24: scope:[]  from @23
  to:@25
print_sdword: scope:[print_sdword]  from
  (boolean~) print_sdword::$0 ← (signed dword) print_sdword::dw < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sdword::$1 ← ! (boolean~) print_sdword::$0
  if((boolean~) print_sdword::$1) goto print_sdword::@1
  to:print_sdword::@2
print_sdword::@1: scope:[print_sdword]  from print_sdword print_sdword::@2
  (dword~) print_sdword::$4 ← ((dword)) (signed dword) print_sdword::dw
  (void~) print_sdword::$5 ← call print_dword (dword~) print_sdword::$4 
  to:print_sdword::@return
print_sdword::@2: scope:[print_sdword]  from print_sdword
  (void~) print_sdword::$2 ← call print_char (byte) '-' 
  (signed dword~) print_sdword::$3 ← - (signed dword) print_sdword::dw
  (signed dword) print_sdword::dw ← (signed dword~) print_sdword::$3
  to:print_sdword::@1
print_sdword::@return: scope:[print_sdword]  from print_sdword::@1
  return 
  to:@return
@25: scope:[]  from @24
  to:@26
print_byte: scope:[print_byte]  from
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte
  return 
  to:@return
@26: scope:[]  from @25
  to:@27
print_char: scope:[print_char]  from
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  return 
  to:@return
@27: scope:[]  from @26
  to:@28
print_cls: scope:[print_cls]  from
  (byte*) print_cls::sc ← (byte*) SCREEN
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (byte*~) print_cls::$0 ← (byte*) SCREEN + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  return 
  to:@return
@28: scope:[]  from @27
  to:@29
main: scope:[main]  from
  (word) main::tabsize ← (byte/signed byte/word/signed word/dword/signed dword) 20
  (byte[20]) main::sintab ← { fill( 20, 0) }
  (void~) main::$0 ← call print_cls 
  (void~) main::$1 ← call sin8u_table (byte[20]) main::sintab (word) main::tabsize (byte/signed byte/word/signed word/dword/signed dword) 10 (byte/word/signed word/dword/signed dword) 255 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@29: scope:[]  from @28
  to:@30
sin8u_table: scope:[sin8u_table]  from
  (byte/signed byte/word/signed word/dword/signed dword~) sin8u_table::$0 ← (byte) sin8u_table::max - (byte) sin8u_table::min
  (byte) sin8u_table::amplitude ← (byte/signed byte/word/signed word/dword/signed dword~) sin8u_table::$0
  (byte/word~) sin8u_table::$1 ← (byte) sin8u_table::min + (byte) sin8u_table::max
  (word) sin8u_table::sum ← (byte/word~) sin8u_table::$1
  (word~) sin8u_table::$2 ← (word) sin8u_table::sum >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) sin8u_table::$3 ← ((byte)) (word~) sin8u_table::$2
  (byte) sin8u_table::mid ← (byte~) sin8u_table::$3
  (word~) sin8u_table::$4 ← call div16u (word) PI2_u4f12 (word) sin8u_table::tabsize 
  (word) sin8u_table::step ← (word~) sin8u_table::$4
  (void~) sin8u_table::$5 ← call print_str (string) "step:@" 
  (void~) sin8u_table::$6 ← call print_word (word) sin8u_table::step 
  (void~) sin8u_table::$7 ← call print_str (string) " min:@" 
  (void~) sin8u_table::$8 ← call print_byte (byte) sin8u_table::min 
  (void~) sin8u_table::$9 ← call print_str (string) " max:@" 
  (void~) sin8u_table::$10 ← call print_byte (byte) sin8u_table::max 
  (void~) sin8u_table::$11 ← call print_str (string) " ampl:@" 
  (void~) sin8u_table::$12 ← call print_byte (byte) sin8u_table::amplitude 
  (void~) sin8u_table::$13 ← call print_str (string) " mid:@" 
  (void~) sin8u_table::$14 ← call print_byte (byte) sin8u_table::mid 
  (void~) sin8u_table::$15 ← call print_ln 
  (word) sin8u_table::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin8u_table::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table sin8u_table::@1
  (signed byte~) sin8u_table::$16 ← call sin8s (word) sin8u_table::x 
  (signed word~) sin8u_table::$17 ← call mul8su (signed byte~) sin8u_table::$16 (byte) sin8u_table::amplitude 
  (byte~) sin8u_table::$18 ← > (signed word~) sin8u_table::$17
  (byte/word~) sin8u_table::$19 ← (byte) sin8u_table::mid + (byte~) sin8u_table::$18
  (byte) sin8u_table::sinval ← (byte/word~) sin8u_table::$19
  *((byte*) sin8u_table::sintab) ← (byte) sin8u_table::sinval
  (byte*) sin8u_table::sintab ← ++ (byte*) sin8u_table::sintab
  (void~) sin8u_table::$20 ← call print_str (string) "x: @" 
  (void~) sin8u_table::$21 ← call print_word (word) sin8u_table::x 
  (void~) sin8u_table::$22 ← call print_str (string) " sin: @" 
  (void~) sin8u_table::$23 ← call print_byte (byte) sin8u_table::sinval 
  (void~) sin8u_table::$24 ← call print_ln 
  (word~) sin8u_table::$25 ← (word) sin8u_table::x + (word) sin8u_table::step
  (word) sin8u_table::x ← (word~) sin8u_table::$25
  (word) sin8u_table::i ← ++ (word) sin8u_table::i
  (boolean~) sin8u_table::$26 ← (word) sin8u_table::i < (word) sin8u_table::tabsize
  if((boolean~) sin8u_table::$26) goto sin8u_table::@1
  to:sin8u_table::@2
sin8u_table::@2: scope:[sin8u_table]  from sin8u_table::@1
  to:sin8u_table::@return
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@2
  return 
  to:@return
@30: scope:[]  from @29
  call main 
  to:@end
@end: scope:[]  from @30

Removing unused procedure div8s
Removing unused procedure div16s
Removing unused procedure mul8s
Removing unused procedure mul16s
Removing unused procedure sin16s_gen
Removing unused procedure sin8s_gen
Removing unused procedure print_sword
Removing unused procedure print_sbyte
Removing unused procedure print_sdword
Removing unused procedure div8u
Removing unused procedure div32u16u
Removing unused procedure sin16s
Removing unused procedure print_dword
Removing unused procedure divr8u
Removing unused procedure mulu16_sel
Removing unused procedure mul16u
Eliminating unused variable (byte) rem8u and assignment [0] (byte) rem8u ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (signed byte) rem8s and assignment [34] (signed byte) rem8s ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (signed word) rem16s and assignment [35] (signed word) rem16s ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (byte~) mul8su::$5 and assignment [62] (byte~) mul8su::$5 ← > (word) mul8su::m
Eliminating unused variable (dword) PI2_u4f28 and assignment [70] (dword) PI2_u4f28 ← (dword/signed dword) 1686629713
Eliminating unused variable (dword) PI_u4f28 and assignment [71] (dword) PI_u4f28 ← (dword/signed dword) 843314857
Eliminating unused variable (dword) PI_HALF_u4f28 and assignment [72] (dword) PI_HALF_u4f28 ← (dword/signed dword) 421657428
Eliminating unused variable - keeping the call (void~) print_word::$1
Eliminating unused variable - keeping the call (void~) print_word::$3
Eliminating unused variable - keeping the call (void~) print_byte::$1
Eliminating unused variable - keeping the call (void~) print_byte::$3
Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$1
Eliminating unused variable - keeping the call (void~) sin8u_table::$5
Eliminating unused variable - keeping the call (void~) sin8u_table::$6
Eliminating unused variable - keeping the call (void~) sin8u_table::$7
Eliminating unused variable - keeping the call (void~) sin8u_table::$8
Eliminating unused variable - keeping the call (void~) sin8u_table::$9
Eliminating unused variable - keeping the call (void~) sin8u_table::$10
Eliminating unused variable - keeping the call (void~) sin8u_table::$11
Eliminating unused variable - keeping the call (void~) sin8u_table::$12
Eliminating unused variable - keeping the call (void~) sin8u_table::$13
Eliminating unused variable - keeping the call (void~) sin8u_table::$14
Eliminating unused variable - keeping the call (void~) sin8u_table::$15
Eliminating unused variable - keeping the call (void~) sin8u_table::$20
Eliminating unused variable - keeping the call (void~) sin8u_table::$21
Eliminating unused variable - keeping the call (void~) sin8u_table::$22
Eliminating unused variable - keeping the call (void~) sin8u_table::$23
Eliminating unused variable - keeping the call (void~) sin8u_table::$24
Creating constant string variable for inline (const string) print_byte::$4 "0123456789abcdef"
Creating constant string variable for inline (const string) sin8u_table::str "step:@"
Creating constant string variable for inline (const string) sin8u_table::str1 " min:@"
Creating constant string variable for inline (const string) sin8u_table::str2 " max:@"
Creating constant string variable for inline (const string) sin8u_table::str3 " ampl:@"
Creating constant string variable for inline (const string) sin8u_table::str4 " mid:@"
Creating constant string variable for inline (const string) sin8u_table::str5 "x: @"
Creating constant string variable for inline (const string) sin8u_table::str6 " sin: @"
Removing empty block @1
Removing empty block divr16u::@7
Removing empty block @3
Removing empty block div16u::@1
Removing empty block @4
Removing empty block @5
Removing empty block @6
Removing empty block @7
Removing empty block mul8u::@5
Removing empty block mul8u::@6
Removing empty block mul8u::@8
Removing empty block mul8u::@9
Removing empty block @8
Removing empty block @9
Removing empty block mul8su::@3
Removing empty block @10
Removing empty block @11
Removing empty block @13
Removing empty block @14
Removing empty block @15
Removing empty block sin8s::@9
Removing empty block @16
Removing empty block @17
Removing empty block mulu8_sel::@1
Removing empty block print_str::@4
Removing empty block print_str::@3
Removing empty block print_str::@5
Removing empty block print_str::@6
Removing empty block @19
Removing empty block @20
Removing empty block @21
Removing empty block @22
Removing empty block @23
Removing empty block @24
Removing empty block @25
Removing empty block @26
Removing empty block @27
Removing empty block @28
Removing empty block @29
Removing empty block sin8u_table::@2
PROCEDURE MODIFY VARIABLE ANALYSIS
divr16u modifies rem16u
div16u modifies rem16u
print_str modifies char_cursor
print_ln modifies line_cursor
print_ln modifies char_cursor
print_word modifies char_cursor
print_byte modifies char_cursor
print_char modifies char_cursor
print_cls modifies line_cursor
print_cls modifies char_cursor
main modifies line_cursor
main modifies char_cursor
main modifies rem16u
sin8u_table modifies rem16u
sin8u_table modifies char_cursor
sin8u_table modifies line_cursor

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  (word) rem16u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@12
divr16u: scope:[divr16u]  from div16u
  (word) divr16u::divisor#5 ← phi( div16u/(word) divr16u::divisor#0 )
  (word) divr16u::dividend#4 ← phi( div16u/(word) divr16u::dividend#1 )
  (word) divr16u::rem#9 ← phi( div16u/(word) divr16u::rem#3 )
  (word) divr16u::quotient#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#3 ← phi( divr16u/(word) divr16u::divisor#5 divr16u::@3/(word) divr16u::divisor#6 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#4 divr16u::@3/(word) divr16u::dividend#5 )
  (word) divr16u::rem#4 ← phi( divr16u/(word) divr16u::rem#9 divr16u::@3/(word) divr16u::rem#10 )
  (word~) divr16u::$0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr16u::$4 ← ! (boolean~) divr16u::$3
  if((boolean~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#1 ← phi( divr16u::@1/(word) divr16u::divisor#3 divr16u::@4/(word) divr16u::divisor#4 )
  (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#3 ← phi( divr16u::@1/(word) divr16u::dividend#2 divr16u::@4/(word) divr16u::dividend#6 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (boolean~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
  (boolean~) divr16u::$9 ← ! (boolean~) divr16u::$8
  if((boolean~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#4 ← phi( divr16u::@1/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#6 ← phi( divr16u::@1/(word) divr16u::dividend#2 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (word~) divr16u::$5 ← (word) divr16u::rem#6 | (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem#1 ← (word~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#6 ← phi( divr16u::@2/(word) divr16u::divisor#1 divr16u::@5/(word) divr16u::divisor#2 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#5 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#7 )
  (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  (boolean~) divr16u::$11 ← (byte) divr16u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 16
  if((boolean~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#7 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#2 ← phi( divr16u::@2/(word) divr16u::divisor#1 )
  (word) divr16u::rem#7 ← phi( divr16u::@2/(word) divr16u::rem#5 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#7 - (word) divr16u::divisor#2
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#8 ← phi( divr16u::@3/(word) divr16u::rem#10 )
  (word) rem16u#1 ← (word) divr16u::rem#8
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#10 ← phi( divr16u::@6/(word) rem16u#1 )
  (word) divr16u::return#3 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#3
  (word) rem16u#2 ← (word) rem16u#10
  return 
  to:@return
div16u: scope:[div16u]  from sin8u_table
  (word) rem16u#18 ← phi( sin8u_table/(word) rem16u#20 )
  (word) div16u::divisor#1 ← phi( sin8u_table/(word) div16u::divisor#0 )
  (word) div16u::dividend#1 ← phi( sin8u_table/(word) div16u::dividend#0 )
  (word) divr16u::dividend#1 ← (word) div16u::dividend#1
  (word) divr16u::divisor#0 ← (word) div16u::divisor#1
  (word) divr16u::rem#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call divr16u param-assignment
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u
  (word) rem16u#11 ← phi( div16u/(word) rem16u#2 )
  (word) divr16u::return#4 ← phi( div16u/(word) divr16u::return#2 )
  (word~) div16u::$0 ← (word) divr16u::return#4
  (word) rem16u#3 ← (word) rem16u#11
  (word) div16u::return#0 ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@2
  (word) rem16u#12 ← phi( div16u::@2/(word) rem16u#3 )
  (word) div16u::return#3 ← phi( div16u::@2/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#3
  (word) rem16u#4 ← (word) rem16u#12
  return 
  to:@return
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  (byte) mul8u::a#6 ← phi( mul8su/(byte) mul8u::a#1 mulu8_sel/(byte) mul8u::a#2 )
  (byte) mul8u::b#2 ← phi( mul8su/(byte) mul8u::b#0 mulu8_sel/(byte) mul8u::b#1 )
  (word) mul8u::res#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) mul8u::mb#0 ← ((word)) (byte) mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (word) mul8u::mb#5 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 )
  (word) mul8u::res#4 ← phi( mul8u/(word) mul8u::res#0 mul8u::@4/(word) mul8u::res#6 )
  (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@4/(byte) mul8u::a#0 )
  (boolean~) mul8u::$0 ← (byte) mul8u::a#3 != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#5 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::mb#4 ← phi( mul8u::@1/(word) mul8u::mb#5 )
  (byte) mul8u::a#4 ← phi( mul8u::@1/(byte) mul8u::a#3 )
  (byte~) mul8u::$1 ← (byte) mul8u::a#4 & (byte/signed byte/word/signed word/dword/signed dword) 1
  (boolean~) mul8u::$2 ← (byte~) mul8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul8u::$3 ← ! (boolean~) mul8u::$2
  if((boolean~) mul8u::$3) goto mul8u::@4
  to:mul8u::@7
mul8u::@3: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#2 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::return#0 ← (word) mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@7
  (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#5 mul8u::@7/(word) mul8u::res#1 )
  (word) mul8u::mb#2 ← phi( mul8u::@2/(word) mul8u::mb#4 mul8u::@7/(word) mul8u::mb#3 )
  (byte) mul8u::a#5 ← phi( mul8u::@2/(byte) mul8u::a#4 mul8u::@7/(byte) mul8u::a#7 )
  (byte~) mul8u::$5 ← (byte) mul8u::a#5 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) mul8u::a#0 ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) mul8u::mb#1 ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@7: scope:[mul8u]  from mul8u::@2
  (byte) mul8u::a#7 ← phi( mul8u::@2/(byte) mul8u::a#4 )
  (word) mul8u::mb#3 ← phi( mul8u::@2/(word) mul8u::mb#4 )
  (word) mul8u::res#3 ← phi( mul8u::@2/(word) mul8u::res#5 )
  (word~) mul8u::$4 ← (word) mul8u::res#3 + (word) mul8u::mb#3
  (word) mul8u::res#1 ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  (word) mul8u::return#4 ← phi( mul8u::@3/(word) mul8u::return#0 )
  (word) mul8u::return#1 ← (word) mul8u::return#4
  return 
  to:@return
mul8su: scope:[mul8su]  from sin8u_table::@15
  (byte) mul8su::b#1 ← phi( sin8u_table::@15/(byte) mul8su::b#0 )
  (signed byte) mul8su::a#1 ← phi( sin8u_table::@15/(signed byte) mul8su::a#0 )
  (byte~) mul8su::$0 ← ((byte)) (signed byte) mul8su::a#1
  (byte~) mul8su::$1 ← ((byte)) (byte) mul8su::b#1
  (byte) mul8u::a#1 ← (byte~) mul8su::$0
  (byte) mul8u::b#0 ← (byte~) mul8su::$1
  call mul8u param-assignment
  (word) mul8u::return#2 ← (word) mul8u::return#1
  to:mul8su::@4
mul8su::@4: scope:[mul8su]  from mul8su
  (byte) mul8su::b#3 ← phi( mul8su/(byte) mul8su::b#1 )
  (signed byte) mul8su::a#2 ← phi( mul8su/(signed byte) mul8su::a#1 )
  (word) mul8u::return#5 ← phi( mul8su/(word) mul8u::return#2 )
  (word~) mul8su::$2 ← (word) mul8u::return#5
  (word) mul8su::m#0 ← (word~) mul8su::$2
  (boolean~) mul8su::$3 ← (signed byte) mul8su::a#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mul8su::$4 ← ! (boolean~) mul8su::$3
  if((boolean~) mul8su::$4) goto mul8su::@1
  to:mul8su::@2
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@4
  (word) mul8su::m#2 ← phi( mul8su::@2/(word) mul8su::m#1 mul8su::@4/(word) mul8su::m#0 )
  (signed word~) mul8su::$9 ← ((signed word)) (word) mul8su::m#2
  (signed word) mul8su::return#0 ← (signed word~) mul8su::$9
  to:mul8su::@return
mul8su::@2: scope:[mul8su]  from mul8su::@4
  (byte) mul8su::b#2 ← phi( mul8su::@4/(byte) mul8su::b#3 )
  (word) mul8su::m#3 ← phi( mul8su::@4/(word) mul8su::m#0 )
  (byte~) mul8su::$6 ← > (word) mul8su::m#3
  (byte~) mul8su::$7 ← ((byte)) (byte) mul8su::b#2
  (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$8 ← (byte~) mul8su::$6 - (byte~) mul8su::$7
  (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 ← (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$8
  (word) mul8su::m#1 ← (word) mul8su::m#3 hi= (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10
  to:mul8su::@1
mul8su::@return: scope:[mul8su]  from mul8su::@1
  (signed word) mul8su::return#3 ← phi( mul8su::@1/(signed word) mul8su::return#0 )
  (signed word) mul8su::return#1 ← (signed word) mul8su::return#3
  return 
  to:@return
@12: scope:[]  from @2
  (word) rem16u#26 ← phi( @2/(word) rem16u#0 )
  (word) PI2_u4f12#0 ← (word/signed word/dword/signed dword) 25736
  (word) PI_u4f12#0 ← (word/signed word/dword/signed dword) 12868
  (word) PI_HALF_u4f12#0 ← (word/signed word/dword/signed dword) 6434
  to:@18
sin8s: scope:[sin8s]  from sin8u_table::@1
  (word) sin8s::x#3 ← phi( sin8u_table::@1/(word) sin8s::x#2 )
  (byte) sin8s::isUpper#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) sin8s::$0 ← (word) sin8s::x#3 >= (word) PI_u4f12#0
  (boolean~) sin8s::$1 ← ! (boolean~) sin8s::$0
  if((boolean~) sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) sin8s::isUpper#0 sin8s::@5/(byte) sin8s::isUpper#1 )
  (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#3 sin8s::@5/(word) sin8s::x#0 )
  (boolean~) sin8s::$3 ← (word) sin8s::x#4 >= (word) PI_HALF_u4f12#0
  (boolean~) sin8s::$4 ← ! (boolean~) sin8s::$3
  if((boolean~) sin8s::$4) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  (word) sin8s::x#5 ← phi( sin8s/(word) sin8s::x#3 )
  (word~) sin8s::$2 ← (word) sin8s::x#5 - (word) PI_u4f12#0
  (word) sin8s::x#0 ← (word~) sin8s::$2
  (byte) sin8s::isUpper#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  (byte) sin8s::isUpper#9 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 sin8s::@6/(byte) sin8s::isUpper#11 )
  (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#1 )
  (word~) sin8s::$6 ← (word) sin8s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte~) sin8s::$7 ← > (word~) sin8s::$6
  (byte) sin8s::x1#0 ← (byte~) sin8s::$7
  (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::select#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu8_sel param-assignment
  (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#6
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@2
  (byte) sin8s::isUpper#8 ← phi( sin8s::@2/(byte) sin8s::isUpper#9 )
  (byte) sin8s::x1#1 ← phi( sin8s::@2/(byte) sin8s::x1#0 )
  (byte) mulu8_sel::return#7 ← phi( sin8s::@2/(byte) mulu8_sel::return#0 )
  (byte~) sin8s::$8 ← (byte) mulu8_sel::return#7
  (byte) sin8s::x2#0 ← (byte~) sin8s::$8
  (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#1
  (byte) mulu8_sel::select#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  call mulu8_sel param-assignment
  (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#6
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  (byte) sin8s::isUpper#7 ← phi( sin8s::@10/(byte) sin8s::isUpper#8 )
  (byte) sin8s::x1#4 ← phi( sin8s::@10/(byte) sin8s::x1#1 )
  (byte) mulu8_sel::return#8 ← phi( sin8s::@10/(byte) mulu8_sel::return#1 )
  (byte~) sin8s::$9 ← (byte) mulu8_sel::return#8
  (byte) sin8s::x3#0 ← (byte~) sin8s::$9
  (byte) sin8s::DIV_6#0 ← (byte/signed byte/word/signed word/dword/signed dword) 43
  (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  (byte) mulu8_sel::v2#2 ← (byte) sin8s::DIV_6#0
  (byte) mulu8_sel::select#2 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  call mulu8_sel param-assignment
  (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#6
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  (byte) sin8s::isUpper#6 ← phi( sin8s::@11/(byte) sin8s::isUpper#7 )
  (byte) sin8s::x3#1 ← phi( sin8s::@11/(byte) sin8s::x3#0 )
  (byte) sin8s::x1#2 ← phi( sin8s::@11/(byte) sin8s::x1#4 )
  (byte) mulu8_sel::return#9 ← phi( sin8s::@11/(byte) mulu8_sel::return#2 )
  (byte~) sin8s::$10 ← (byte) mulu8_sel::return#9
  (byte) sin8s::x3_6#0 ← (byte~) sin8s::$10
  (byte/signed byte/word/signed word/dword/signed dword~) sin8s::$11 ← (byte) sin8s::x1#2 - (byte) sin8s::x3_6#0
  (byte) sin8s::usinx#0 ← (byte/signed byte/word/signed word/dword/signed dword~) sin8s::$11
  (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#1
  (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#2
  (byte) mulu8_sel::select#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu8_sel param-assignment
  (byte) mulu8_sel::return#3 ← (byte) mulu8_sel::return#6
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  (byte) sin8s::isUpper#5 ← phi( sin8s::@12/(byte) sin8s::isUpper#6 )
  (byte) sin8s::usinx#7 ← phi( sin8s::@12/(byte) sin8s::usinx#0 )
  (byte) sin8s::x1#3 ← phi( sin8s::@12/(byte) sin8s::x1#2 )
  (byte) mulu8_sel::return#10 ← phi( sin8s::@12/(byte) mulu8_sel::return#3 )
  (byte~) sin8s::$12 ← (byte) mulu8_sel::return#10
  (byte) sin8s::x4#0 ← (byte~) sin8s::$12
  (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#3
  (byte) mulu8_sel::select#4 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu8_sel param-assignment
  (byte) mulu8_sel::return#4 ← (byte) mulu8_sel::return#6
  to:sin8s::@14
sin8s::@14: scope:[sin8s]  from sin8s::@13
  (byte) sin8s::isUpper#3 ← phi( sin8s::@13/(byte) sin8s::isUpper#5 )
  (byte) sin8s::usinx#3 ← phi( sin8s::@13/(byte) sin8s::usinx#7 )
  (byte) mulu8_sel::return#11 ← phi( sin8s::@13/(byte) mulu8_sel::return#4 )
  (byte~) sin8s::$13 ← (byte) mulu8_sel::return#11
  (byte) sin8s::x5#0 ← (byte~) sin8s::$13
  (byte~) sin8s::$14 ← (byte) sin8s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) sin8s::x5_128#0 ← (byte~) sin8s::$14
  (byte/word~) sin8s::$15 ← (byte) sin8s::usinx#3 + (byte) sin8s::x5_128#0
  (byte) sin8s::usinx#1 ← (byte/word~) sin8s::$15
  (boolean~) sin8s::$16 ← (byte) sin8s::usinx#1 >= (byte/word/signed word/dword/signed dword) 128
  (boolean~) sin8s::$17 ← ! (boolean~) sin8s::$16
  if((boolean~) sin8s::$17) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  (byte) sin8s::isUpper#11 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 )
  (word) sin8s::x#7 ← phi( sin8s::@1/(word) sin8s::x#4 )
  (word~) sin8s::$5 ← (word) PI_u4f12#0 - (word) sin8s::x#7
  (word) sin8s::x#1 ← (word~) sin8s::$5
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@14 sin8s::@7
  (byte) sin8s::isUpper#2 ← phi( sin8s::@14/(byte) sin8s::isUpper#3 sin8s::@7/(byte) sin8s::isUpper#4 )
  (byte) sin8s::usinx#4 ← phi( sin8s::@14/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  (signed byte~) sin8s::$18 ← ((signed byte)) (byte) sin8s::usinx#4
  (signed byte) sin8s::sinx#0 ← (signed byte~) sin8s::$18
  (boolean~) sin8s::$19 ← (byte) sin8s::isUpper#2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) sin8s::$20 ← ! (boolean~) sin8s::$19
  if((boolean~) sin8s::$20) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@14
  (byte) sin8s::isUpper#4 ← phi( sin8s::@14/(byte) sin8s::isUpper#3 )
  (byte) sin8s::usinx#5 ← phi( sin8s::@14/(byte) sin8s::usinx#1 )
  (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#5
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  (signed byte) sin8s::sinx#2 ← phi( sin8s::@3/(signed byte) sin8s::sinx#0 sin8s::@8/(signed byte) sin8s::sinx#1 )
  (signed byte) sin8s::return#0 ← (signed byte) sin8s::sinx#2
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  (byte) sin8s::usinx#6 ← phi( sin8s::@3/(byte) sin8s::usinx#4 )
  (signed byte~) sin8s::$21 ← ((signed byte)) (byte) sin8s::usinx#6
  (signed byte~) sin8s::$22 ← - (signed byte~) sin8s::$21
  (signed byte) sin8s::sinx#1 ← (signed byte~) sin8s::$22
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4
  (signed byte) sin8s::return#3 ← phi( sin8s::@4/(signed byte) sin8s::return#0 )
  (signed byte) sin8s::return#1 ← (signed byte) sin8s::return#3
  return 
  to:@return
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@13 sin8s::@2
  (byte) mulu8_sel::select#6 ← phi( sin8s::@10/(byte) mulu8_sel::select#1 sin8s::@11/(byte) mulu8_sel::select#2 sin8s::@12/(byte) mulu8_sel::select#3 sin8s::@13/(byte) mulu8_sel::select#4 sin8s::@2/(byte) mulu8_sel::select#0 )
  (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(byte) mulu8_sel::v2#1 sin8s::@11/(byte) mulu8_sel::v2#2 sin8s::@12/(byte) mulu8_sel::v2#3 sin8s::@13/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 )
  (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#1 sin8s::@11/(byte) mulu8_sel::v1#2 sin8s::@12/(byte) mulu8_sel::v1#3 sin8s::@13/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 )
  (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
  (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5
  call mul8u param-assignment
  (word) mul8u::return#3 ← (word) mul8u::return#1
  to:mulu8_sel::@2
mulu8_sel::@2: scope:[mulu8_sel]  from mulu8_sel
  (byte) mulu8_sel::select#5 ← phi( mulu8_sel/(byte) mulu8_sel::select#6 )
  (word) mul8u::return#6 ← phi( mulu8_sel/(word) mul8u::return#3 )
  (word~) mulu8_sel::$0 ← (word) mul8u::return#6
  (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  (byte~) mulu8_sel::$2 ← > (word~) mulu8_sel::$1
  (byte) mulu8_sel::return#5 ← (byte~) mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@2
  (byte) mulu8_sel::return#12 ← phi( mulu8_sel::@2/(byte) mulu8_sel::return#5 )
  (byte) mulu8_sel::return#6 ← (byte) mulu8_sel::return#12
  return 
  to:@return
@18: scope:[]  from @12
  (word) rem16u#25 ← phi( @12/(word) rem16u#26 )
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) line_cursor#0 ← (byte*) SCREEN#0
  (byte*) char_cursor#0 ← (byte*) line_cursor#0
  to:@30
print_str: scope:[print_str]  from sin8u_table::@11 sin8u_table::@16 sin8u_table::@18 sin8u_table::@3 sin8u_table::@5 sin8u_table::@7 sin8u_table::@9
  (byte*) char_cursor#78 ← phi( sin8u_table::@11/(byte*) char_cursor#25 sin8u_table::@16/(byte*) char_cursor#76 sin8u_table::@18/(byte*) char_cursor#30 sin8u_table::@3/(byte*) char_cursor#75 sin8u_table::@5/(byte*) char_cursor#19 sin8u_table::@7/(byte*) char_cursor#21 sin8u_table::@9/(byte*) char_cursor#23 )
  (byte*) print_str::str#10 ← phi( sin8u_table::@11/(byte*) print_str::str#5 sin8u_table::@16/(byte*) print_str::str#6 sin8u_table::@18/(byte*) print_str::str#7 sin8u_table::@3/(byte*) print_str::str#1 sin8u_table::@5/(byte*) print_str::str#2 sin8u_table::@7/(byte*) print_str::str#3 sin8u_table::@9/(byte*) print_str::str#4 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) char_cursor#70 ← phi( print_str/(byte*) char_cursor#78 print_str::@2/(byte*) char_cursor#1 )
  (byte*) print_str::str#8 ← phi( print_str/(byte*) print_str::str#10 print_str::@2/(byte*) print_str::str#0 )
  (boolean~) print_str::$0 ← *((byte*) print_str::str#8) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) char_cursor#36 ← phi( print_str::@1/(byte*) char_cursor#70 )
  (byte*) print_str::str#9 ← phi( print_str::@1/(byte*) print_str::str#8 )
  *((byte*) char_cursor#36) ← *((byte*) print_str::str#9)
  (byte*) char_cursor#1 ← ++ (byte*) char_cursor#36
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#9
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) char_cursor#37 ← phi( print_str::@1/(byte*) char_cursor#70 )
  (byte*) char_cursor#2 ← (byte*) char_cursor#37
  return 
  to:@return
print_ln: scope:[print_ln]  from sin8u_table::@13 sin8u_table::@20
  (byte*) char_cursor#71 ← phi( sin8u_table::@13/(byte*) char_cursor#27 sin8u_table::@20/(byte*) char_cursor#32 )
  (byte*) line_cursor#23 ← phi( sin8u_table::@13/(byte*) line_cursor#25 sin8u_table::@20/(byte*) line_cursor#26 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) char_cursor#38 ← phi( print_ln/(byte*) char_cursor#71 print_ln::@1/(byte*) char_cursor#38 )
  (byte*) line_cursor#12 ← phi( print_ln/(byte*) line_cursor#23 print_ln::@1/(byte*) line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) line_cursor#12 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor#1 ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor#1 < (byte*) char_cursor#38
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) line_cursor#13 ← phi( print_ln::@1/(byte*) line_cursor#1 )
  (byte*) char_cursor#3 ← (byte*) line_cursor#13
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) char_cursor#39 ← phi( print_ln::@2/(byte*) char_cursor#3 )
  (byte*) line_cursor#14 ← phi( print_ln::@2/(byte*) line_cursor#13 )
  (byte*) line_cursor#2 ← (byte*) line_cursor#14
  (byte*) char_cursor#4 ← (byte*) char_cursor#39
  return 
  to:@return
print_word: scope:[print_word]  from sin8u_table::@17 sin8u_table::@4
  (byte*) char_cursor#72 ← phi( sin8u_table::@17/(byte*) char_cursor#29 sin8u_table::@4/(byte*) char_cursor#18 )
  (word) print_word::w#2 ← phi( sin8u_table::@17/(word) print_word::w#1 sin8u_table::@4/(word) print_word::w#0 )
  (byte~) print_word::$0 ← > (word) print_word::w#2
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte param-assignment
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#3 ← phi( print_word/(word) print_word::w#2 )
  (byte*) char_cursor#40 ← phi( print_word/(byte*) char_cursor#10 )
  (byte*) char_cursor#5 ← (byte*) char_cursor#40
  (byte~) print_word::$2 ← < (word) print_word::w#3
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte param-assignment
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) char_cursor#41 ← phi( print_word::@1/(byte*) char_cursor#10 )
  (byte*) char_cursor#6 ← (byte*) char_cursor#41
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) char_cursor#42 ← phi( print_word::@2/(byte*) char_cursor#6 )
  (byte*) char_cursor#7 ← (byte*) char_cursor#42
  return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@19 sin8u_table::@6 sin8u_table::@8
  (byte*) char_cursor#73 ← phi( print_word/(byte*) char_cursor#72 print_word::@1/(byte*) char_cursor#5 sin8u_table::@10/(byte*) char_cursor#24 sin8u_table::@12/(byte*) char_cursor#26 sin8u_table::@19/(byte*) char_cursor#31 sin8u_table::@6/(byte*) char_cursor#20 sin8u_table::@8/(byte*) char_cursor#22 )
  (byte) print_byte::b#7 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 sin8u_table::@10/(byte) print_byte::b#4 sin8u_table::@12/(byte) print_byte::b#5 sin8u_table::@19/(byte) print_byte::b#6 sin8u_table::@6/(byte) print_byte::b#2 sin8u_table::@8/(byte) print_byte::b#3 )
  (byte[]) print_byte::hextab#0 ← (const string) print_byte::$4
  (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) print_char::ch#0 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$0)
  call print_char param-assignment
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#8 ← phi( print_byte/(byte) print_byte::b#7 )
  (byte*) char_cursor#43 ← phi( print_byte/(byte*) char_cursor#12 )
  (byte*) char_cursor#8 ← (byte*) char_cursor#43
  (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) print_char::ch#1 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$2)
  call print_char param-assignment
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) char_cursor#44 ← phi( print_byte::@1/(byte*) char_cursor#12 )
  (byte*) char_cursor#9 ← (byte*) char_cursor#44
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) char_cursor#45 ← phi( print_byte::@2/(byte*) char_cursor#9 )
  (byte*) char_cursor#10 ← (byte*) char_cursor#45
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  (byte*) char_cursor#46 ← phi( print_byte/(byte*) char_cursor#73 print_byte::@1/(byte*) char_cursor#8 )
  (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  *((byte*) char_cursor#46) ← (byte) print_char::ch#2
  (byte*) char_cursor#11 ← ++ (byte*) char_cursor#46
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) char_cursor#47 ← phi( print_char/(byte*) char_cursor#11 )
  (byte*) char_cursor#12 ← (byte*) char_cursor#47
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_cls::sc#0 ← (byte*) SCREEN#0
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) SCREEN#0 + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) line_cursor#3 ← (byte*) SCREEN#0
  (byte*) char_cursor#13 ← (byte*) line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) char_cursor#48 ← phi( print_cls::@2/(byte*) char_cursor#13 )
  (byte*) line_cursor#15 ← phi( print_cls::@2/(byte*) line_cursor#3 )
  (byte*) line_cursor#4 ← (byte*) line_cursor#15
  (byte*) char_cursor#14 ← (byte*) char_cursor#48
  return 
  to:@return
main: scope:[main]  from @30
  (word) rem16u#23 ← phi( @30/(word) rem16u#22 )
  (byte*) char_cursor#74 ← phi( @30/(byte*) char_cursor#77 )
  (byte*) line_cursor#24 ← phi( @30/(byte*) line_cursor#27 )
  (word) main::tabsize#0 ← (byte/signed byte/word/signed word/dword/signed dword) 20
  (byte[20]) main::sintab#0 ← { fill( 20, 0) }
  call print_cls param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (word) rem16u#19 ← phi( main/(word) rem16u#23 )
  (word) main::tabsize#1 ← phi( main/(word) main::tabsize#0 )
  (byte*) char_cursor#49 ← phi( main/(byte*) char_cursor#14 )
  (byte*) line_cursor#16 ← phi( main/(byte*) line_cursor#4 )
  (byte*) line_cursor#5 ← (byte*) line_cursor#16
  (byte*) char_cursor#15 ← (byte*) char_cursor#49
  (byte*) sin8u_table::sintab#0 ← (byte[20]) main::sintab#0
  (word) sin8u_table::tabsize#0 ← (word) main::tabsize#1
  (byte) sin8u_table::min#0 ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) sin8u_table::max#0 ← (byte/word/signed word/dword/signed dword) 255
  call sin8u_table param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) line_cursor#17 ← phi( main::@1/(byte*) line_cursor#10 )
  (byte*) char_cursor#50 ← phi( main::@1/(byte*) char_cursor#34 )
  (word) rem16u#13 ← phi( main::@1/(word) rem16u#8 )
  (word) rem16u#5 ← (word) rem16u#13
  (byte*) char_cursor#16 ← (byte*) char_cursor#50
  (byte*) line_cursor#6 ← (byte*) line_cursor#17
  to:main::@return
main::@return: scope:[main]  from main::@2
  (word) rem16u#14 ← phi( main::@2/(word) rem16u#5 )
  (byte*) char_cursor#51 ← phi( main::@2/(byte*) char_cursor#16 )
  (byte*) line_cursor#18 ← phi( main::@2/(byte*) line_cursor#6 )
  (byte*) line_cursor#7 ← (byte*) line_cursor#18
  (byte*) char_cursor#17 ← (byte*) char_cursor#51
  (word) rem16u#6 ← (word) rem16u#14
  return 
  to:@return
sin8u_table: scope:[sin8u_table]  from main::@1
  (byte*) sin8u_table::sintab#22 ← phi( main::@1/(byte*) sin8u_table::sintab#0 )
  (byte*) line_cursor#44 ← phi( main::@1/(byte*) line_cursor#5 )
  (byte*) char_cursor#79 ← phi( main::@1/(byte*) char_cursor#15 )
  (word) rem16u#20 ← phi( main::@1/(word) rem16u#19 )
  (word) sin8u_table::tabsize#1 ← phi( main::@1/(word) sin8u_table::tabsize#0 )
  (byte) sin8u_table::min#1 ← phi( main::@1/(byte) sin8u_table::min#0 )
  (byte) sin8u_table::max#1 ← phi( main::@1/(byte) sin8u_table::max#0 )
  (byte/signed byte/word/signed word/dword/signed dword~) sin8u_table::$0 ← (byte) sin8u_table::max#1 - (byte) sin8u_table::min#1
  (byte) sin8u_table::amplitude#0 ← (byte/signed byte/word/signed word/dword/signed dword~) sin8u_table::$0
  (byte/word~) sin8u_table::$1 ← (byte) sin8u_table::min#1 + (byte) sin8u_table::max#1
  (word) sin8u_table::sum#0 ← (byte/word~) sin8u_table::$1
  (word~) sin8u_table::$2 ← (word) sin8u_table::sum#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) sin8u_table::$3 ← ((byte)) (word~) sin8u_table::$2
  (byte) sin8u_table::mid#0 ← (byte~) sin8u_table::$3
  (word) div16u::dividend#0 ← (word) PI2_u4f12#0
  (word) div16u::divisor#0 ← (word) sin8u_table::tabsize#1
  call div16u param-assignment
  (word) div16u::return#2 ← (word) div16u::return#1
  to:sin8u_table::@3
sin8u_table::@3: scope:[sin8u_table]  from sin8u_table
  (word) sin8u_table::tabsize#21 ← phi( sin8u_table/(word) sin8u_table::tabsize#1 )
  (byte*) sin8u_table::sintab#21 ← phi( sin8u_table/(byte*) sin8u_table::sintab#22 )
  (byte*) line_cursor#43 ← phi( sin8u_table/(byte*) line_cursor#44 )
  (byte) sin8u_table::mid#20 ← phi( sin8u_table/(byte) sin8u_table::mid#0 )
  (byte) sin8u_table::amplitude#19 ← phi( sin8u_table/(byte) sin8u_table::amplitude#0 )
  (byte) sin8u_table::max#7 ← phi( sin8u_table/(byte) sin8u_table::max#1 )
  (byte) sin8u_table::min#5 ← phi( sin8u_table/(byte) sin8u_table::min#1 )
  (byte*) char_cursor#75 ← phi( sin8u_table/(byte*) char_cursor#79 )
  (word) rem16u#15 ← phi( sin8u_table/(word) rem16u#4 )
  (word) div16u::return#4 ← phi( sin8u_table/(word) div16u::return#2 )
  (word~) sin8u_table::$4 ← (word) div16u::return#4
  (word) rem16u#7 ← (word) rem16u#15
  (word) sin8u_table::step#0 ← (word~) sin8u_table::$4
  (byte*) print_str::str#1 ← (const string) sin8u_table::str
  call print_str param-assignment
  to:sin8u_table::@4
sin8u_table::@4: scope:[sin8u_table]  from sin8u_table::@3
  (word) rem16u#43 ← phi( sin8u_table::@3/(word) rem16u#7 )
  (word) sin8u_table::tabsize#20 ← phi( sin8u_table::@3/(word) sin8u_table::tabsize#21 )
  (byte*) sin8u_table::sintab#20 ← phi( sin8u_table::@3/(byte*) sin8u_table::sintab#21 )
  (byte*) line_cursor#42 ← phi( sin8u_table::@3/(byte*) line_cursor#43 )
  (byte) sin8u_table::mid#19 ← phi( sin8u_table::@3/(byte) sin8u_table::mid#20 )
  (byte) sin8u_table::amplitude#17 ← phi( sin8u_table::@3/(byte) sin8u_table::amplitude#19 )
  (byte) sin8u_table::max#6 ← phi( sin8u_table::@3/(byte) sin8u_table::max#7 )
  (byte) sin8u_table::min#4 ← phi( sin8u_table::@3/(byte) sin8u_table::min#5 )
  (word) sin8u_table::step#1 ← phi( sin8u_table::@3/(word) sin8u_table::step#0 )
  (byte*) char_cursor#52 ← phi( sin8u_table::@3/(byte*) char_cursor#2 )
  (byte*) char_cursor#18 ← (byte*) char_cursor#52
  (word) print_word::w#0 ← (word) sin8u_table::step#1
  call print_word param-assignment
  to:sin8u_table::@5
sin8u_table::@5: scope:[sin8u_table]  from sin8u_table::@4
  (word) rem16u#42 ← phi( sin8u_table::@4/(word) rem16u#43 )
  (word) sin8u_table::tabsize#19 ← phi( sin8u_table::@4/(word) sin8u_table::tabsize#20 )
  (word) sin8u_table::step#19 ← phi( sin8u_table::@4/(word) sin8u_table::step#1 )
  (byte*) sin8u_table::sintab#19 ← phi( sin8u_table::@4/(byte*) sin8u_table::sintab#20 )
  (byte*) line_cursor#41 ← phi( sin8u_table::@4/(byte*) line_cursor#42 )
  (byte) sin8u_table::mid#17 ← phi( sin8u_table::@4/(byte) sin8u_table::mid#19 )
  (byte) sin8u_table::amplitude#14 ← phi( sin8u_table::@4/(byte) sin8u_table::amplitude#17 )
  (byte) sin8u_table::max#5 ← phi( sin8u_table::@4/(byte) sin8u_table::max#6 )
  (byte) sin8u_table::min#3 ← phi( sin8u_table::@4/(byte) sin8u_table::min#4 )
  (byte*) char_cursor#53 ← phi( sin8u_table::@4/(byte*) char_cursor#7 )
  (byte*) char_cursor#19 ← (byte*) char_cursor#53
  (byte*) print_str::str#2 ← (const string) sin8u_table::str1
  call print_str param-assignment
  to:sin8u_table::@6
sin8u_table::@6: scope:[sin8u_table]  from sin8u_table::@5
  (word) rem16u#41 ← phi( sin8u_table::@5/(word) rem16u#42 )
  (word) sin8u_table::tabsize#18 ← phi( sin8u_table::@5/(word) sin8u_table::tabsize#19 )
  (word) sin8u_table::step#18 ← phi( sin8u_table::@5/(word) sin8u_table::step#19 )
  (byte*) sin8u_table::sintab#18 ← phi( sin8u_table::@5/(byte*) sin8u_table::sintab#19 )
  (byte*) line_cursor#40 ← phi( sin8u_table::@5/(byte*) line_cursor#41 )
  (byte) sin8u_table::mid#15 ← phi( sin8u_table::@5/(byte) sin8u_table::mid#17 )
  (byte) sin8u_table::amplitude#11 ← phi( sin8u_table::@5/(byte) sin8u_table::amplitude#14 )
  (byte) sin8u_table::max#4 ← phi( sin8u_table::@5/(byte) sin8u_table::max#5 )
  (byte) sin8u_table::min#2 ← phi( sin8u_table::@5/(byte) sin8u_table::min#3 )
  (byte*) char_cursor#54 ← phi( sin8u_table::@5/(byte*) char_cursor#2 )
  (byte*) char_cursor#20 ← (byte*) char_cursor#54
  (byte) print_byte::b#2 ← (byte) sin8u_table::min#2
  call print_byte param-assignment
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table::@6
  (word) rem16u#40 ← phi( sin8u_table::@6/(word) rem16u#41 )
  (word) sin8u_table::tabsize#17 ← phi( sin8u_table::@6/(word) sin8u_table::tabsize#18 )
  (word) sin8u_table::step#17 ← phi( sin8u_table::@6/(word) sin8u_table::step#18 )
  (byte*) sin8u_table::sintab#17 ← phi( sin8u_table::@6/(byte*) sin8u_table::sintab#18 )
  (byte*) line_cursor#38 ← phi( sin8u_table::@6/(byte*) line_cursor#40 )
  (byte) sin8u_table::mid#13 ← phi( sin8u_table::@6/(byte) sin8u_table::mid#15 )
  (byte) sin8u_table::amplitude#8 ← phi( sin8u_table::@6/(byte) sin8u_table::amplitude#11 )
  (byte) sin8u_table::max#3 ← phi( sin8u_table::@6/(byte) sin8u_table::max#4 )
  (byte*) char_cursor#55 ← phi( sin8u_table::@6/(byte*) char_cursor#10 )
  (byte*) char_cursor#21 ← (byte*) char_cursor#55
  (byte*) print_str::str#3 ← (const string) sin8u_table::str2
  call print_str param-assignment
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  (word) rem16u#39 ← phi( sin8u_table::@7/(word) rem16u#40 )
  (word) sin8u_table::tabsize#16 ← phi( sin8u_table::@7/(word) sin8u_table::tabsize#17 )
  (word) sin8u_table::step#16 ← phi( sin8u_table::@7/(word) sin8u_table::step#17 )
  (byte*) sin8u_table::sintab#16 ← phi( sin8u_table::@7/(byte*) sin8u_table::sintab#17 )
  (byte*) line_cursor#36 ← phi( sin8u_table::@7/(byte*) line_cursor#38 )
  (byte) sin8u_table::mid#10 ← phi( sin8u_table::@7/(byte) sin8u_table::mid#13 )
  (byte) sin8u_table::amplitude#5 ← phi( sin8u_table::@7/(byte) sin8u_table::amplitude#8 )
  (byte) sin8u_table::max#2 ← phi( sin8u_table::@7/(byte) sin8u_table::max#3 )
  (byte*) char_cursor#56 ← phi( sin8u_table::@7/(byte*) char_cursor#2 )
  (byte*) char_cursor#22 ← (byte*) char_cursor#56
  (byte) print_byte::b#3 ← (byte) sin8u_table::max#2
  call print_byte param-assignment
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  (word) rem16u#38 ← phi( sin8u_table::@8/(word) rem16u#39 )
  (word) sin8u_table::tabsize#15 ← phi( sin8u_table::@8/(word) sin8u_table::tabsize#16 )
  (word) sin8u_table::step#15 ← phi( sin8u_table::@8/(word) sin8u_table::step#16 )
  (byte*) sin8u_table::sintab#15 ← phi( sin8u_table::@8/(byte*) sin8u_table::sintab#16 )
  (byte*) line_cursor#34 ← phi( sin8u_table::@8/(byte*) line_cursor#36 )
  (byte) sin8u_table::mid#7 ← phi( sin8u_table::@8/(byte) sin8u_table::mid#10 )
  (byte) sin8u_table::amplitude#3 ← phi( sin8u_table::@8/(byte) sin8u_table::amplitude#5 )
  (byte*) char_cursor#57 ← phi( sin8u_table::@8/(byte*) char_cursor#10 )
  (byte*) char_cursor#23 ← (byte*) char_cursor#57
  (byte*) print_str::str#4 ← (const string) sin8u_table::str3
  call print_str param-assignment
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  (word) rem16u#37 ← phi( sin8u_table::@9/(word) rem16u#38 )
  (word) sin8u_table::tabsize#14 ← phi( sin8u_table::@9/(word) sin8u_table::tabsize#15 )
  (word) sin8u_table::step#14 ← phi( sin8u_table::@9/(word) sin8u_table::step#15 )
  (byte*) sin8u_table::sintab#13 ← phi( sin8u_table::@9/(byte*) sin8u_table::sintab#15 )
  (byte*) line_cursor#32 ← phi( sin8u_table::@9/(byte*) line_cursor#34 )
  (byte) sin8u_table::mid#5 ← phi( sin8u_table::@9/(byte) sin8u_table::mid#7 )
  (byte) sin8u_table::amplitude#1 ← phi( sin8u_table::@9/(byte) sin8u_table::amplitude#3 )
  (byte*) char_cursor#58 ← phi( sin8u_table::@9/(byte*) char_cursor#2 )
  (byte*) char_cursor#24 ← (byte*) char_cursor#58
  (byte) print_byte::b#4 ← (byte) sin8u_table::amplitude#1
  call print_byte param-assignment
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  (word) rem16u#36 ← phi( sin8u_table::@10/(word) rem16u#37 )
  (word) sin8u_table::tabsize#13 ← phi( sin8u_table::@10/(word) sin8u_table::tabsize#14 )
  (word) sin8u_table::step#13 ← phi( sin8u_table::@10/(word) sin8u_table::step#14 )
  (byte*) sin8u_table::sintab#11 ← phi( sin8u_table::@10/(byte*) sin8u_table::sintab#13 )
  (byte) sin8u_table::amplitude#15 ← phi( sin8u_table::@10/(byte) sin8u_table::amplitude#1 )
  (byte*) line_cursor#30 ← phi( sin8u_table::@10/(byte*) line_cursor#32 )
  (byte) sin8u_table::mid#3 ← phi( sin8u_table::@10/(byte) sin8u_table::mid#5 )
  (byte*) char_cursor#59 ← phi( sin8u_table::@10/(byte*) char_cursor#10 )
  (byte*) char_cursor#25 ← (byte*) char_cursor#59
  (byte*) print_str::str#5 ← (const string) sin8u_table::str4
  call print_str param-assignment
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  (word) rem16u#35 ← phi( sin8u_table::@11/(word) rem16u#36 )
  (word) sin8u_table::tabsize#12 ← phi( sin8u_table::@11/(word) sin8u_table::tabsize#13 )
  (word) sin8u_table::step#12 ← phi( sin8u_table::@11/(word) sin8u_table::step#13 )
  (byte*) sin8u_table::sintab#9 ← phi( sin8u_table::@11/(byte*) sin8u_table::sintab#11 )
  (byte) sin8u_table::amplitude#12 ← phi( sin8u_table::@11/(byte) sin8u_table::amplitude#15 )
  (byte*) line_cursor#28 ← phi( sin8u_table::@11/(byte*) line_cursor#30 )
  (byte) sin8u_table::mid#1 ← phi( sin8u_table::@11/(byte) sin8u_table::mid#3 )
  (byte*) char_cursor#60 ← phi( sin8u_table::@11/(byte*) char_cursor#2 )
  (byte*) char_cursor#26 ← (byte*) char_cursor#60
  (byte) print_byte::b#5 ← (byte) sin8u_table::mid#1
  call print_byte param-assignment
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@12
  (word) rem16u#34 ← phi( sin8u_table::@12/(word) rem16u#35 )
  (word) sin8u_table::tabsize#11 ← phi( sin8u_table::@12/(word) sin8u_table::tabsize#12 )
  (word) sin8u_table::step#11 ← phi( sin8u_table::@12/(word) sin8u_table::step#12 )
  (byte*) sin8u_table::sintab#7 ← phi( sin8u_table::@12/(byte*) sin8u_table::sintab#9 )
  (byte) sin8u_table::mid#11 ← phi( sin8u_table::@12/(byte) sin8u_table::mid#1 )
  (byte) sin8u_table::amplitude#9 ← phi( sin8u_table::@12/(byte) sin8u_table::amplitude#12 )
  (byte*) line_cursor#25 ← phi( sin8u_table::@12/(byte*) line_cursor#28 )
  (byte*) char_cursor#61 ← phi( sin8u_table::@12/(byte*) char_cursor#10 )
  (byte*) char_cursor#27 ← (byte*) char_cursor#61
  call print_ln param-assignment
  to:sin8u_table::@14
sin8u_table::@14: scope:[sin8u_table]  from sin8u_table::@13
  (word) rem16u#33 ← phi( sin8u_table::@13/(word) rem16u#34 )
  (word) sin8u_table::tabsize#10 ← phi( sin8u_table::@13/(word) sin8u_table::tabsize#11 )
  (word) sin8u_table::step#10 ← phi( sin8u_table::@13/(word) sin8u_table::step#11 )
  (byte*) sin8u_table::sintab#5 ← phi( sin8u_table::@13/(byte*) sin8u_table::sintab#7 )
  (byte) sin8u_table::mid#8 ← phi( sin8u_table::@13/(byte) sin8u_table::mid#11 )
  (byte) sin8u_table::amplitude#6 ← phi( sin8u_table::@13/(byte) sin8u_table::amplitude#9 )
  (byte*) char_cursor#62 ← phi( sin8u_table::@13/(byte*) char_cursor#4 )
  (byte*) line_cursor#19 ← phi( sin8u_table::@13/(byte*) line_cursor#2 )
  (byte*) line_cursor#8 ← (byte*) line_cursor#19
  (byte*) char_cursor#28 ← (byte*) char_cursor#62
  (word) sin8u_table::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin8u_table::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@14 sin8u_table::@21
  (word) rem16u#32 ← phi( sin8u_table::@14/(word) rem16u#33 sin8u_table::@21/(word) rem16u#21 )
  (word) sin8u_table::tabsize#9 ← phi( sin8u_table::@14/(word) sin8u_table::tabsize#10 sin8u_table::@21/(word) sin8u_table::tabsize#2 )
  (word) sin8u_table::i#9 ← phi( sin8u_table::@14/(word) sin8u_table::i#0 sin8u_table::@21/(word) sin8u_table::i#1 )
  (word) sin8u_table::step#9 ← phi( sin8u_table::@14/(word) sin8u_table::step#10 sin8u_table::@21/(word) sin8u_table::step#2 )
  (byte*) line_cursor#39 ← phi( sin8u_table::@14/(byte*) line_cursor#8 sin8u_table::@21/(byte*) line_cursor#9 )
  (byte*) char_cursor#81 ← phi( sin8u_table::@14/(byte*) char_cursor#28 sin8u_table::@21/(byte*) char_cursor#33 )
  (byte*) sin8u_table::sintab#4 ← phi( sin8u_table::@14/(byte*) sin8u_table::sintab#5 sin8u_table::@21/(byte*) sin8u_table::sintab#6 )
  (byte) sin8u_table::mid#6 ← phi( sin8u_table::@14/(byte) sin8u_table::mid#8 sin8u_table::@21/(byte) sin8u_table::mid#9 )
  (byte) sin8u_table::amplitude#4 ← phi( sin8u_table::@14/(byte) sin8u_table::amplitude#6 sin8u_table::@21/(byte) sin8u_table::amplitude#7 )
  (word) sin8u_table::x#2 ← phi( sin8u_table::@14/(word) sin8u_table::x#0 sin8u_table::@21/(word) sin8u_table::x#1 )
  (word) sin8s::x#2 ← (word) sin8u_table::x#2
  call sin8s param-assignment
  (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#1
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@1
  (word) rem16u#31 ← phi( sin8u_table::@1/(word) rem16u#32 )
  (word) sin8u_table::tabsize#8 ← phi( sin8u_table::@1/(word) sin8u_table::tabsize#9 )
  (word) sin8u_table::i#8 ← phi( sin8u_table::@1/(word) sin8u_table::i#9 )
  (word) sin8u_table::step#8 ← phi( sin8u_table::@1/(word) sin8u_table::step#9 )
  (byte*) line_cursor#37 ← phi( sin8u_table::@1/(byte*) line_cursor#39 )
  (word) sin8u_table::x#7 ← phi( sin8u_table::@1/(word) sin8u_table::x#2 )
  (byte*) char_cursor#80 ← phi( sin8u_table::@1/(byte*) char_cursor#81 )
  (byte*) sin8u_table::sintab#3 ← phi( sin8u_table::@1/(byte*) sin8u_table::sintab#4 )
  (byte) sin8u_table::mid#4 ← phi( sin8u_table::@1/(byte) sin8u_table::mid#6 )
  (byte) sin8u_table::amplitude#2 ← phi( sin8u_table::@1/(byte) sin8u_table::amplitude#4 )
  (signed byte) sin8s::return#4 ← phi( sin8u_table::@1/(signed byte) sin8s::return#2 )
  (signed byte~) sin8u_table::$16 ← (signed byte) sin8s::return#4
  (signed byte) mul8su::a#0 ← (signed byte~) sin8u_table::$16
  (byte) mul8su::b#0 ← (byte) sin8u_table::amplitude#2
  call mul8su param-assignment
  (signed word) mul8su::return#2 ← (signed word) mul8su::return#1
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  (byte) sin8u_table::amplitude#20 ← phi( sin8u_table::@15/(byte) sin8u_table::amplitude#2 )
  (word) rem16u#30 ← phi( sin8u_table::@15/(word) rem16u#31 )
  (word) sin8u_table::tabsize#7 ← phi( sin8u_table::@15/(word) sin8u_table::tabsize#8 )
  (word) sin8u_table::i#7 ← phi( sin8u_table::@15/(word) sin8u_table::i#8 )
  (word) sin8u_table::step#7 ← phi( sin8u_table::@15/(word) sin8u_table::step#8 )
  (byte*) line_cursor#35 ← phi( sin8u_table::@15/(byte*) line_cursor#37 )
  (word) sin8u_table::x#5 ← phi( sin8u_table::@15/(word) sin8u_table::x#7 )
  (byte*) char_cursor#76 ← phi( sin8u_table::@15/(byte*) char_cursor#80 )
  (byte*) sin8u_table::sintab#2 ← phi( sin8u_table::@15/(byte*) sin8u_table::sintab#3 )
  (byte) sin8u_table::mid#2 ← phi( sin8u_table::@15/(byte) sin8u_table::mid#4 )
  (signed word) mul8su::return#4 ← phi( sin8u_table::@15/(signed word) mul8su::return#2 )
  (signed word~) sin8u_table::$17 ← (signed word) mul8su::return#4
  (byte~) sin8u_table::$18 ← > (signed word~) sin8u_table::$17
  (byte/word~) sin8u_table::$19 ← (byte) sin8u_table::mid#2 + (byte~) sin8u_table::$18
  (byte) sin8u_table::sinval#0 ← (byte/word~) sin8u_table::$19
  *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinval#0
  (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2
  (byte*) print_str::str#6 ← (const string) sin8u_table::str5
  call print_str param-assignment
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  (byte*) sin8u_table::sintab#14 ← phi( sin8u_table::@16/(byte*) sin8u_table::sintab#1 )
  (byte) sin8u_table::mid#18 ← phi( sin8u_table::@16/(byte) sin8u_table::mid#2 )
  (byte) sin8u_table::amplitude#18 ← phi( sin8u_table::@16/(byte) sin8u_table::amplitude#20 )
  (word) rem16u#29 ← phi( sin8u_table::@16/(word) rem16u#30 )
  (word) sin8u_table::tabsize#6 ← phi( sin8u_table::@16/(word) sin8u_table::tabsize#7 )
  (word) sin8u_table::i#6 ← phi( sin8u_table::@16/(word) sin8u_table::i#7 )
  (word) sin8u_table::step#6 ← phi( sin8u_table::@16/(word) sin8u_table::step#7 )
  (byte*) line_cursor#33 ← phi( sin8u_table::@16/(byte*) line_cursor#35 )
  (byte) sin8u_table::sinval#3 ← phi( sin8u_table::@16/(byte) sin8u_table::sinval#0 )
  (word) sin8u_table::x#3 ← phi( sin8u_table::@16/(word) sin8u_table::x#5 )
  (byte*) char_cursor#63 ← phi( sin8u_table::@16/(byte*) char_cursor#2 )
  (byte*) char_cursor#29 ← (byte*) char_cursor#63
  (word) print_word::w#1 ← (word) sin8u_table::x#3
  call print_word param-assignment
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  (byte*) sin8u_table::sintab#12 ← phi( sin8u_table::@17/(byte*) sin8u_table::sintab#14 )
  (byte) sin8u_table::mid#16 ← phi( sin8u_table::@17/(byte) sin8u_table::mid#18 )
  (byte) sin8u_table::amplitude#16 ← phi( sin8u_table::@17/(byte) sin8u_table::amplitude#18 )
  (word) rem16u#28 ← phi( sin8u_table::@17/(word) rem16u#29 )
  (word) sin8u_table::tabsize#5 ← phi( sin8u_table::@17/(word) sin8u_table::tabsize#6 )
  (word) sin8u_table::i#5 ← phi( sin8u_table::@17/(word) sin8u_table::i#6 )
  (word) sin8u_table::step#5 ← phi( sin8u_table::@17/(word) sin8u_table::step#6 )
  (word) sin8u_table::x#9 ← phi( sin8u_table::@17/(word) sin8u_table::x#3 )
  (byte*) line_cursor#31 ← phi( sin8u_table::@17/(byte*) line_cursor#33 )
  (byte) sin8u_table::sinval#2 ← phi( sin8u_table::@17/(byte) sin8u_table::sinval#3 )
  (byte*) char_cursor#64 ← phi( sin8u_table::@17/(byte*) char_cursor#7 )
  (byte*) char_cursor#30 ← (byte*) char_cursor#64
  (byte*) print_str::str#7 ← (const string) sin8u_table::str6
  call print_str param-assignment
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@18
  (byte*) sin8u_table::sintab#10 ← phi( sin8u_table::@18/(byte*) sin8u_table::sintab#12 )
  (byte) sin8u_table::mid#14 ← phi( sin8u_table::@18/(byte) sin8u_table::mid#16 )
  (byte) sin8u_table::amplitude#13 ← phi( sin8u_table::@18/(byte) sin8u_table::amplitude#16 )
  (word) rem16u#27 ← phi( sin8u_table::@18/(word) rem16u#28 )
  (word) sin8u_table::tabsize#4 ← phi( sin8u_table::@18/(word) sin8u_table::tabsize#5 )
  (word) sin8u_table::i#4 ← phi( sin8u_table::@18/(word) sin8u_table::i#5 )
  (word) sin8u_table::step#4 ← phi( sin8u_table::@18/(word) sin8u_table::step#5 )
  (word) sin8u_table::x#8 ← phi( sin8u_table::@18/(word) sin8u_table::x#9 )
  (byte*) line_cursor#29 ← phi( sin8u_table::@18/(byte*) line_cursor#31 )
  (byte) sin8u_table::sinval#1 ← phi( sin8u_table::@18/(byte) sin8u_table::sinval#2 )
  (byte*) char_cursor#65 ← phi( sin8u_table::@18/(byte*) char_cursor#2 )
  (byte*) char_cursor#31 ← (byte*) char_cursor#65
  (byte) print_byte::b#6 ← (byte) sin8u_table::sinval#1
  call print_byte param-assignment
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  (byte*) sin8u_table::sintab#8 ← phi( sin8u_table::@19/(byte*) sin8u_table::sintab#10 )
  (byte) sin8u_table::mid#12 ← phi( sin8u_table::@19/(byte) sin8u_table::mid#14 )
  (byte) sin8u_table::amplitude#10 ← phi( sin8u_table::@19/(byte) sin8u_table::amplitude#13 )
  (word) rem16u#24 ← phi( sin8u_table::@19/(word) rem16u#27 )
  (word) sin8u_table::tabsize#3 ← phi( sin8u_table::@19/(word) sin8u_table::tabsize#4 )
  (word) sin8u_table::i#3 ← phi( sin8u_table::@19/(word) sin8u_table::i#4 )
  (word) sin8u_table::step#3 ← phi( sin8u_table::@19/(word) sin8u_table::step#4 )
  (word) sin8u_table::x#6 ← phi( sin8u_table::@19/(word) sin8u_table::x#8 )
  (byte*) line_cursor#26 ← phi( sin8u_table::@19/(byte*) line_cursor#29 )
  (byte*) char_cursor#66 ← phi( sin8u_table::@19/(byte*) char_cursor#10 )
  (byte*) char_cursor#32 ← (byte*) char_cursor#66
  call print_ln param-assignment
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  (byte*) sin8u_table::sintab#6 ← phi( sin8u_table::@20/(byte*) sin8u_table::sintab#8 )
  (byte) sin8u_table::mid#9 ← phi( sin8u_table::@20/(byte) sin8u_table::mid#12 )
  (byte) sin8u_table::amplitude#7 ← phi( sin8u_table::@20/(byte) sin8u_table::amplitude#10 )
  (word) rem16u#21 ← phi( sin8u_table::@20/(word) rem16u#24 )
  (word) sin8u_table::tabsize#2 ← phi( sin8u_table::@20/(word) sin8u_table::tabsize#3 )
  (word) sin8u_table::i#2 ← phi( sin8u_table::@20/(word) sin8u_table::i#3 )
  (word) sin8u_table::step#2 ← phi( sin8u_table::@20/(word) sin8u_table::step#3 )
  (word) sin8u_table::x#4 ← phi( sin8u_table::@20/(word) sin8u_table::x#6 )
  (byte*) char_cursor#67 ← phi( sin8u_table::@20/(byte*) char_cursor#4 )
  (byte*) line_cursor#20 ← phi( sin8u_table::@20/(byte*) line_cursor#2 )
  (byte*) line_cursor#9 ← (byte*) line_cursor#20
  (byte*) char_cursor#33 ← (byte*) char_cursor#67
  (word~) sin8u_table::$25 ← (word) sin8u_table::x#4 + (word) sin8u_table::step#2
  (word) sin8u_table::x#1 ← (word~) sin8u_table::$25
  (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#2
  (boolean~) sin8u_table::$26 ← (word) sin8u_table::i#1 < (word) sin8u_table::tabsize#2
  if((boolean~) sin8u_table::$26) goto sin8u_table::@1
  to:sin8u_table::@return
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@21
  (byte*) line_cursor#21 ← phi( sin8u_table::@21/(byte*) line_cursor#9 )
  (byte*) char_cursor#68 ← phi( sin8u_table::@21/(byte*) char_cursor#33 )
  (word) rem16u#16 ← phi( sin8u_table::@21/(word) rem16u#21 )
  (word) rem16u#8 ← (word) rem16u#16
  (byte*) char_cursor#34 ← (byte*) char_cursor#68
  (byte*) line_cursor#10 ← (byte*) line_cursor#21
  return 
  to:@return
@30: scope:[]  from @18
  (word) rem16u#22 ← phi( @18/(word) rem16u#25 )
  (byte*) char_cursor#77 ← phi( @18/(byte*) char_cursor#0 )
  (byte*) line_cursor#27 ← phi( @18/(byte*) line_cursor#0 )
  call main param-assignment
  to:@31
@31: scope:[]  from @30
  (word) rem16u#17 ← phi( @30/(word) rem16u#6 )
  (byte*) char_cursor#69 ← phi( @30/(byte*) char_cursor#17 )
  (byte*) line_cursor#22 ← phi( @30/(byte*) line_cursor#7 )
  (byte*) line_cursor#11 ← (byte*) line_cursor#22
  (byte*) char_cursor#35 ← (byte*) char_cursor#69
  (word) rem16u#9 ← (word) rem16u#17
  to:@end
@end: scope:[]  from @31

SYMBOL TABLE SSA
(label) @12
(label) @18
(label) @2
(label) @30
(label) @31
(label) @begin
(label) @end
(word) PI2_u4f12
(word) PI2_u4f12#0
(word) PI_HALF_u4f12
(word) PI_HALF_u4f12#0
(word) PI_u4f12
(word) PI_u4f12#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) char_cursor
(byte*) char_cursor#0
(byte*) char_cursor#1
(byte*) char_cursor#10
(byte*) char_cursor#11
(byte*) char_cursor#12
(byte*) char_cursor#13
(byte*) char_cursor#14
(byte*) char_cursor#15
(byte*) char_cursor#16
(byte*) char_cursor#17
(byte*) char_cursor#18
(byte*) char_cursor#19
(byte*) char_cursor#2
(byte*) char_cursor#20
(byte*) char_cursor#21
(byte*) char_cursor#22
(byte*) char_cursor#23
(byte*) char_cursor#24
(byte*) char_cursor#25
(byte*) char_cursor#26
(byte*) char_cursor#27
(byte*) char_cursor#28
(byte*) char_cursor#29
(byte*) char_cursor#3
(byte*) char_cursor#30
(byte*) char_cursor#31
(byte*) char_cursor#32
(byte*) char_cursor#33
(byte*) char_cursor#34
(byte*) char_cursor#35
(byte*) char_cursor#36
(byte*) char_cursor#37
(byte*) char_cursor#38
(byte*) char_cursor#39
(byte*) char_cursor#4
(byte*) char_cursor#40
(byte*) char_cursor#41
(byte*) char_cursor#42
(byte*) char_cursor#43
(byte*) char_cursor#44
(byte*) char_cursor#45
(byte*) char_cursor#46
(byte*) char_cursor#47
(byte*) char_cursor#48
(byte*) char_cursor#49
(byte*) char_cursor#5
(byte*) char_cursor#50
(byte*) char_cursor#51
(byte*) char_cursor#52
(byte*) char_cursor#53
(byte*) char_cursor#54
(byte*) char_cursor#55
(byte*) char_cursor#56
(byte*) char_cursor#57
(byte*) char_cursor#58
(byte*) char_cursor#59
(byte*) char_cursor#6
(byte*) char_cursor#60
(byte*) char_cursor#61
(byte*) char_cursor#62
(byte*) char_cursor#63
(byte*) char_cursor#64
(byte*) char_cursor#65
(byte*) char_cursor#66
(byte*) char_cursor#67
(byte*) char_cursor#68
(byte*) char_cursor#69
(byte*) char_cursor#7
(byte*) char_cursor#70
(byte*) char_cursor#71
(byte*) char_cursor#72
(byte*) char_cursor#73
(byte*) char_cursor#74
(byte*) char_cursor#75
(byte*) char_cursor#76
(byte*) char_cursor#77
(byte*) char_cursor#78
(byte*) char_cursor#79
(byte*) char_cursor#8
(byte*) char_cursor#80
(byte*) char_cursor#81
(byte*) char_cursor#9
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@2
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(boolean~) divr16u::$11
(byte~) divr16u::$2
(boolean~) divr16u::$3
(boolean~) divr16u::$4
(word~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(boolean~) divr16u::$8
(boolean~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(byte*) line_cursor
(byte*) line_cursor#0
(byte*) line_cursor#1
(byte*) line_cursor#10
(byte*) line_cursor#11
(byte*) line_cursor#12
(byte*) line_cursor#13
(byte*) line_cursor#14
(byte*) line_cursor#15
(byte*) line_cursor#16
(byte*) line_cursor#17
(byte*) line_cursor#18
(byte*) line_cursor#19
(byte*) line_cursor#2
(byte*) line_cursor#20
(byte*) line_cursor#21
(byte*) line_cursor#22
(byte*) line_cursor#23
(byte*) line_cursor#24
(byte*) line_cursor#25
(byte*) line_cursor#26
(byte*) line_cursor#27
(byte*) line_cursor#28
(byte*) line_cursor#29
(byte*) line_cursor#3
(byte*) line_cursor#30
(byte*) line_cursor#31
(byte*) line_cursor#32
(byte*) line_cursor#33
(byte*) line_cursor#34
(byte*) line_cursor#35
(byte*) line_cursor#36
(byte*) line_cursor#37
(byte*) line_cursor#38
(byte*) line_cursor#39
(byte*) line_cursor#4
(byte*) line_cursor#40
(byte*) line_cursor#41
(byte*) line_cursor#42
(byte*) line_cursor#43
(byte*) line_cursor#44
(byte*) line_cursor#5
(byte*) line_cursor#6
(byte*) line_cursor#7
(byte*) line_cursor#8
(byte*) line_cursor#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[20]) main::sintab
(byte[20]) main::sintab#0
(word) main::tabsize
(word) main::tabsize#0
(word) main::tabsize#1
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$0
(byte~) mul8su::$1
(byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10
(word~) mul8su::$2
(boolean~) mul8su::$3
(boolean~) mul8su::$4
(byte~) mul8su::$6
(byte~) mul8su::$7
(byte/signed byte/word/signed word/dword/signed dword~) mul8su::$8
(signed word~) mul8su::$9
(label) mul8su::@1
(label) mul8su::@2
(label) mul8su::@4
(label) mul8su::@return
(signed byte) mul8su::a
(signed byte) mul8su::a#0
(signed byte) mul8su::a#1
(signed byte) mul8su::a#2
(byte) mul8su::b
(byte) mul8su::b#0
(byte) mul8su::b#1
(byte) mul8su::b#2
(byte) mul8su::b#3
(word) mul8su::m
(word) mul8su::m#0
(word) mul8su::m#1
(word) mul8su::m#2
(word) mul8su::m#3
(signed word) mul8su::return
(signed word) mul8su::return#0
(signed word) mul8su::return#1
(signed word) mul8su::return#2
(signed word) mul8su::return#3
(signed word) mul8su::return#4
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(boolean~) mul8u::$0
(byte~) mul8u::$1
(boolean~) mul8u::$2
(boolean~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@7
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0
(byte) mul8u::a#1
(byte) mul8u::a#2
(byte) mul8u::a#3
(byte) mul8u::a#4
(byte) mul8u::a#5
(byte) mul8u::a#6
(byte) mul8u::a#7
(byte) mul8u::b
(byte) mul8u::b#0
(byte) mul8u::b#1
(byte) mul8u::b#2
(word) mul8u::mb
(word) mul8u::mb#0
(word) mul8u::mb#1
(word) mul8u::mb#2
(word) mul8u::mb#3
(word) mul8u::mb#4
(word) mul8u::mb#5
(word) mul8u::res
(word) mul8u::res#0
(word) mul8u::res#1
(word) mul8u::res#2
(word) mul8u::res#3
(word) mul8u::res#4
(word) mul8u::res#5
(word) mul8u::res#6
(word) mul8u::return
(word) mul8u::return#0
(word) mul8u::return#1
(word) mul8u::return#2
(word) mul8u::return#3
(word) mul8u::return#4
(word) mul8u::return#5
(word) mul8u::return#6
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0
(word~) mulu8_sel::$1
(byte~) mulu8_sel::$2
(label) mulu8_sel::@2
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0
(byte) mulu8_sel::return#1
(byte) mulu8_sel::return#10
(byte) mulu8_sel::return#11
(byte) mulu8_sel::return#12
(byte) mulu8_sel::return#2
(byte) mulu8_sel::return#3
(byte) mulu8_sel::return#4
(byte) mulu8_sel::return#5
(byte) mulu8_sel::return#6
(byte) mulu8_sel::return#7
(byte) mulu8_sel::return#8
(byte) mulu8_sel::return#9
(byte) mulu8_sel::select
(byte) mulu8_sel::select#0
(byte) mulu8_sel::select#1
(byte) mulu8_sel::select#2
(byte) mulu8_sel::select#3
(byte) mulu8_sel::select#4
(byte) mulu8_sel::select#5
(byte) mulu8_sel::select#6
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0
(byte) mulu8_sel::v1#1
(byte) mulu8_sel::v1#2
(byte) mulu8_sel::v1#3
(byte) mulu8_sel::v1#4
(byte) mulu8_sel::v1#5
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0
(byte) mulu8_sel::v2#1
(byte) mulu8_sel::v2#2
(byte) mulu8_sel::v2#3
(byte) mulu8_sel::v2#4
(byte) mulu8_sel::v2#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(byte~) print_byte::$2
(const string) print_byte::$4 = (string) "0123456789abcdef"
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(byte) print_byte::b#5
(byte) print_byte::b#6
(byte) print_byte::b#7
(byte) print_byte::b#8
(byte[]) print_byte::hextab
(byte[]) print_byte::hextab#0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#38
(word) rem16u#39
(word) rem16u#4
(word) rem16u#40
(word) rem16u#41
(word) rem16u#42
(word) rem16u#43
(word) rem16u#5
(word) rem16u#6
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed byte()) sin8s((word) sin8s::x)
(boolean~) sin8s::$0
(boolean~) sin8s::$1
(byte~) sin8s::$10
(byte/signed byte/word/signed word/dword/signed dword~) sin8s::$11
(byte~) sin8s::$12
(byte~) sin8s::$13
(byte~) sin8s::$14
(byte/word~) sin8s::$15
(boolean~) sin8s::$16
(boolean~) sin8s::$17
(signed byte~) sin8s::$18
(boolean~) sin8s::$19
(word~) sin8s::$2
(boolean~) sin8s::$20
(signed byte~) sin8s::$21
(signed byte~) sin8s::$22
(boolean~) sin8s::$3
(boolean~) sin8s::$4
(word~) sin8s::$5
(word~) sin8s::$6
(byte~) sin8s::$7
(byte~) sin8s::$8
(byte~) sin8s::$9
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@return
(byte) sin8s::DIV_6
(byte) sin8s::DIV_6#0
(byte) sin8s::isUpper
(byte) sin8s::isUpper#0
(byte) sin8s::isUpper#1
(byte) sin8s::isUpper#10
(byte) sin8s::isUpper#11
(byte) sin8s::isUpper#2
(byte) sin8s::isUpper#3
(byte) sin8s::isUpper#4
(byte) sin8s::isUpper#5
(byte) sin8s::isUpper#6
(byte) sin8s::isUpper#7
(byte) sin8s::isUpper#8
(byte) sin8s::isUpper#9
(signed byte) sin8s::return
(signed byte) sin8s::return#0
(signed byte) sin8s::return#1
(signed byte) sin8s::return#2
(signed byte) sin8s::return#3
(signed byte) sin8s::return#4
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#0
(signed byte) sin8s::sinx#1
(signed byte) sin8s::sinx#2
(byte) sin8s::usinx
(byte) sin8s::usinx#0
(byte) sin8s::usinx#1
(byte) sin8s::usinx#2
(byte) sin8s::usinx#3
(byte) sin8s::usinx#4
(byte) sin8s::usinx#5
(byte) sin8s::usinx#6
(byte) sin8s::usinx#7
(word) sin8s::x
(word) sin8s::x#0
(word) sin8s::x#1
(word) sin8s::x#2
(word) sin8s::x#3
(word) sin8s::x#4
(word) sin8s::x#5
(word) sin8s::x#6
(word) sin8s::x#7
(byte) sin8s::x1
(byte) sin8s::x1#0
(byte) sin8s::x1#1
(byte) sin8s::x1#2
(byte) sin8s::x1#3
(byte) sin8s::x1#4
(byte) sin8s::x2
(byte) sin8s::x2#0
(byte) sin8s::x3
(byte) sin8s::x3#0
(byte) sin8s::x3#1
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0
(byte) sin8s::x4
(byte) sin8s::x4#0
(byte) sin8s::x5
(byte) sin8s::x5#0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte/signed byte/word/signed word/dword/signed dword~) sin8u_table::$0
(byte/word~) sin8u_table::$1
(signed byte~) sin8u_table::$16
(signed word~) sin8u_table::$17
(byte~) sin8u_table::$18
(byte/word~) sin8u_table::$19
(word~) sin8u_table::$2
(word~) sin8u_table::$25
(boolean~) sin8u_table::$26
(byte~) sin8u_table::$3
(word~) sin8u_table::$4
(label) sin8u_table::@1
(label) sin8u_table::@10
(label) sin8u_table::@11
(label) sin8u_table::@12
(label) sin8u_table::@13
(label) sin8u_table::@14
(label) sin8u_table::@15
(label) sin8u_table::@16
(label) sin8u_table::@17
(label) sin8u_table::@18
(label) sin8u_table::@19
(label) sin8u_table::@20
(label) sin8u_table::@21
(label) sin8u_table::@3
(label) sin8u_table::@4
(label) sin8u_table::@5
(label) sin8u_table::@6
(label) sin8u_table::@7
(label) sin8u_table::@8
(label) sin8u_table::@9
(label) sin8u_table::@return
(byte) sin8u_table::amplitude
(byte) sin8u_table::amplitude#0
(byte) sin8u_table::amplitude#1
(byte) sin8u_table::amplitude#10
(byte) sin8u_table::amplitude#11
(byte) sin8u_table::amplitude#12
(byte) sin8u_table::amplitude#13
(byte) sin8u_table::amplitude#14
(byte) sin8u_table::amplitude#15
(byte) sin8u_table::amplitude#16
(byte) sin8u_table::amplitude#17
(byte) sin8u_table::amplitude#18
(byte) sin8u_table::amplitude#19
(byte) sin8u_table::amplitude#2
(byte) sin8u_table::amplitude#20
(byte) sin8u_table::amplitude#3
(byte) sin8u_table::amplitude#4
(byte) sin8u_table::amplitude#5
(byte) sin8u_table::amplitude#6
(byte) sin8u_table::amplitude#7
(byte) sin8u_table::amplitude#8
(byte) sin8u_table::amplitude#9
(word) sin8u_table::i
(word) sin8u_table::i#0
(word) sin8u_table::i#1
(word) sin8u_table::i#2
(word) sin8u_table::i#3
(word) sin8u_table::i#4
(word) sin8u_table::i#5
(word) sin8u_table::i#6
(word) sin8u_table::i#7
(word) sin8u_table::i#8
(word) sin8u_table::i#9
(byte) sin8u_table::max
(byte) sin8u_table::max#0
(byte) sin8u_table::max#1
(byte) sin8u_table::max#2
(byte) sin8u_table::max#3
(byte) sin8u_table::max#4
(byte) sin8u_table::max#5
(byte) sin8u_table::max#6
(byte) sin8u_table::max#7
(byte) sin8u_table::mid
(byte) sin8u_table::mid#0
(byte) sin8u_table::mid#1
(byte) sin8u_table::mid#10
(byte) sin8u_table::mid#11
(byte) sin8u_table::mid#12
(byte) sin8u_table::mid#13
(byte) sin8u_table::mid#14
(byte) sin8u_table::mid#15
(byte) sin8u_table::mid#16
(byte) sin8u_table::mid#17
(byte) sin8u_table::mid#18
(byte) sin8u_table::mid#19
(byte) sin8u_table::mid#2
(byte) sin8u_table::mid#20
(byte) sin8u_table::mid#3
(byte) sin8u_table::mid#4
(byte) sin8u_table::mid#5
(byte) sin8u_table::mid#6
(byte) sin8u_table::mid#7
(byte) sin8u_table::mid#8
(byte) sin8u_table::mid#9
(byte) sin8u_table::min
(byte) sin8u_table::min#0
(byte) sin8u_table::min#1
(byte) sin8u_table::min#2
(byte) sin8u_table::min#3
(byte) sin8u_table::min#4
(byte) sin8u_table::min#5
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#0
(byte*) sin8u_table::sintab#1
(byte*) sin8u_table::sintab#10
(byte*) sin8u_table::sintab#11
(byte*) sin8u_table::sintab#12
(byte*) sin8u_table::sintab#13
(byte*) sin8u_table::sintab#14
(byte*) sin8u_table::sintab#15
(byte*) sin8u_table::sintab#16
(byte*) sin8u_table::sintab#17
(byte*) sin8u_table::sintab#18
(byte*) sin8u_table::sintab#19
(byte*) sin8u_table::sintab#2
(byte*) sin8u_table::sintab#20
(byte*) sin8u_table::sintab#21
(byte*) sin8u_table::sintab#22
(byte*) sin8u_table::sintab#3
(byte*) sin8u_table::sintab#4
(byte*) sin8u_table::sintab#5
(byte*) sin8u_table::sintab#6
(byte*) sin8u_table::sintab#7
(byte*) sin8u_table::sintab#8
(byte*) sin8u_table::sintab#9
(byte) sin8u_table::sinval
(byte) sin8u_table::sinval#0
(byte) sin8u_table::sinval#1
(byte) sin8u_table::sinval#2
(byte) sin8u_table::sinval#3
(word) sin8u_table::step
(word) sin8u_table::step#0
(word) sin8u_table::step#1
(word) sin8u_table::step#10
(word) sin8u_table::step#11
(word) sin8u_table::step#12
(word) sin8u_table::step#13
(word) sin8u_table::step#14
(word) sin8u_table::step#15
(word) sin8u_table::step#16
(word) sin8u_table::step#17
(word) sin8u_table::step#18
(word) sin8u_table::step#19
(word) sin8u_table::step#2
(word) sin8u_table::step#3
(word) sin8u_table::step#4
(word) sin8u_table::step#5
(word) sin8u_table::step#6
(word) sin8u_table::step#7
(word) sin8u_table::step#8
(word) sin8u_table::step#9
(const string) sin8u_table::str = (string) "step:@"
(const string) sin8u_table::str1 = (string) " min:@"
(const string) sin8u_table::str2 = (string) " max:@"
(const string) sin8u_table::str3 = (string) " ampl:@"
(const string) sin8u_table::str4 = (string) " mid:@"
(const string) sin8u_table::str5 = (string) "x: @"
(const string) sin8u_table::str6 = (string) " sin: @"
(word) sin8u_table::sum
(word) sin8u_table::sum#0
(word) sin8u_table::tabsize
(word) sin8u_table::tabsize#0
(word) sin8u_table::tabsize#1
(word) sin8u_table::tabsize#10
(word) sin8u_table::tabsize#11
(word) sin8u_table::tabsize#12
(word) sin8u_table::tabsize#13
(word) sin8u_table::tabsize#14
(word) sin8u_table::tabsize#15
(word) sin8u_table::tabsize#16
(word) sin8u_table::tabsize#17
(word) sin8u_table::tabsize#18
(word) sin8u_table::tabsize#19
(word) sin8u_table::tabsize#2
(word) sin8u_table::tabsize#20
(word) sin8u_table::tabsize#21
(word) sin8u_table::tabsize#3
(word) sin8u_table::tabsize#4
(word) sin8u_table::tabsize#5
(word) sin8u_table::tabsize#6
(word) sin8u_table::tabsize#7
(word) sin8u_table::tabsize#8
(word) sin8u_table::tabsize#9
(word) sin8u_table::x
(word) sin8u_table::x#0
(word) sin8u_table::x#1
(word) sin8u_table::x#2
(word) sin8u_table::x#3
(word) sin8u_table::x#4
(word) sin8u_table::x#5
(word) sin8u_table::x#6
(word) sin8u_table::x#7
(word) sin8u_table::x#8
(word) sin8u_table::x#9

OPTIMIZING CONTROL FLOW GRAPH
Inversing boolean not (boolean~) divr16u::$4 ← (byte~) divr16u::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) divr16u::$9 ← (word) divr16u::rem#5 < (word) divr16u::divisor#1 from (boolean~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
Inversing boolean not (boolean~) mul8u::$3 ← (byte~) mul8u::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) mul8u::$2 ← (byte~) mul8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) mul8su::$4 ← (signed byte) mul8su::a#2 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) mul8su::$3 ← (signed byte) mul8su::a#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) sin8s::$1 ← (word) sin8s::x#3 < (word) PI_u4f12#0 from (boolean~) sin8s::$0 ← (word) sin8s::x#3 >= (word) PI_u4f12#0
Inversing boolean not (boolean~) sin8s::$4 ← (word) sin8s::x#4 < (word) PI_HALF_u4f12#0 from (boolean~) sin8s::$3 ← (word) sin8s::x#4 >= (word) PI_HALF_u4f12#0
Inversing boolean not (boolean~) sin8s::$17 ← (byte) sin8s::usinx#1 < (byte/word/signed word/dword/signed dword) 128 from (boolean~) sin8s::$16 ← (byte) sin8s::usinx#1 >= (byte/word/signed word/dword/signed dword) 128
Inversing boolean not (boolean~) sin8s::$20 ← (byte) sin8s::isUpper#2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) sin8s::$19 ← (byte) sin8s::isUpper#2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Succesful SSA optimization Pass2UnaryNotSimplification
Not aliassing across scopes: divr16u::rem#9 divr16u::rem#3
Not aliassing across scopes: divr16u::dividend#4 divr16u::dividend#1
Not aliassing across scopes: divr16u::divisor#5 divr16u::divisor#0
Not aliassing across scopes: rem16u#1 divr16u::rem#8
Not aliassing across scopes: div16u::dividend#1 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 div16u::divisor#0
Not aliassing across scopes: rem16u#18 rem16u#20
Not aliassing across scopes: divr16u::dividend#1 div16u::dividend#1
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#1
Not aliassing across scopes: divr16u::return#2 divr16u::return#1
Not aliassing across scopes: rem16u#11 rem16u#2
Not aliassing across scopes: div16u::$0 divr16u::return#4
Not aliassing across scopes: mul8u::b#2 mul8u::b#0
Not aliassing across scopes: mul8u::a#6 mul8u::a#1
Not aliassing across scopes: mul8su::a#1 mul8su::a#0
Not aliassing across scopes: mul8su::b#1 mul8su::b#0
Not aliassing across scopes: mul8u::return#2 mul8u::return#1
Not aliassing across scopes: mul8su::$2 mul8u::return#5
Not aliassing across scopes: sin8s::x#3 sin8s::x#2
Not aliassing across scopes: mulu8_sel::v1#0 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::v2#0 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#0 mulu8_sel::return#6
Not aliassing across scopes: sin8s::$8 mulu8_sel::return#7
Not aliassing across scopes: mulu8_sel::v1#1 sin8s::x2#0
Not aliassing across scopes: mulu8_sel::v2#1 sin8s::x1#1
Not aliassing across scopes: mulu8_sel::return#1 mulu8_sel::return#6
Not aliassing across scopes: sin8s::$9 mulu8_sel::return#8
Not aliassing across scopes: mulu8_sel::v1#2 sin8s::x3#0
Not aliassing across scopes: mulu8_sel::v2#2 sin8s::DIV_6#0
Not aliassing across scopes: mulu8_sel::return#2 mulu8_sel::return#6
Not aliassing across scopes: sin8s::$10 mulu8_sel::return#9
Not aliassing across scopes: mulu8_sel::v1#3 sin8s::x3#1
Not aliassing across scopes: mulu8_sel::v2#3 sin8s::x1#2
Not aliassing across scopes: mulu8_sel::return#3 mulu8_sel::return#6
Not aliassing across scopes: sin8s::$12 mulu8_sel::return#10
Not aliassing across scopes: mulu8_sel::v1#4 sin8s::x4#0
Not aliassing across scopes: mulu8_sel::v2#4 sin8s::x1#3
Not aliassing across scopes: mulu8_sel::return#4 mulu8_sel::return#6
Not aliassing across scopes: sin8s::$13 mulu8_sel::return#11
Not aliassing across scopes: mulu8_sel::v1#5 mulu8_sel::v1#1
Not aliassing across scopes: mulu8_sel::v2#5 mulu8_sel::v2#1
Not aliassing across scopes: mulu8_sel::select#6 mulu8_sel::select#1
Not aliassing across scopes: mul8u::a#2 mulu8_sel::v1#5
Not aliassing across scopes: mul8u::b#1 mulu8_sel::v2#5
Not aliassing across scopes: mul8u::return#3 mul8u::return#1
Not aliassing across scopes: mulu8_sel::$0 mul8u::return#6
Not aliassing across scopes: print_str::str#10 print_str::str#5
Not aliassing across scopes: char_cursor#78 char_cursor#25
Not aliassing across scopes: line_cursor#23 line_cursor#25
Not aliassing across scopes: char_cursor#71 char_cursor#27
Not aliassing across scopes: print_word::w#2 print_word::w#1
Not aliassing across scopes: char_cursor#72 char_cursor#29
Not aliassing across scopes: char_cursor#40 char_cursor#10
Not aliassing across scopes: char_cursor#41 char_cursor#10
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: char_cursor#73 char_cursor#72
Not aliassing across scopes: char_cursor#43 char_cursor#12
Not aliassing across scopes: char_cursor#44 char_cursor#12
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#46 char_cursor#73
Not aliassing across scopes: print_cls::sc#0 SCREEN#0
Not aliassing across scopes: line_cursor#3 SCREEN#0
Not aliassing across scopes: line_cursor#24 line_cursor#27
Not aliassing across scopes: char_cursor#74 char_cursor#77
Not aliassing across scopes: rem16u#23 rem16u#22
Not aliassing across scopes: line_cursor#16 line_cursor#4
Not aliassing across scopes: char_cursor#49 char_cursor#14
Not aliassing across scopes: sin8u_table::sintab#0 main::sintab#0
Not aliassing across scopes: sin8u_table::tabsize#0 main::tabsize#1
Not aliassing across scopes: rem16u#13 rem16u#8
Not aliassing across scopes: char_cursor#50 char_cursor#34
Not aliassing across scopes: line_cursor#17 line_cursor#10
Not aliassing across scopes: sin8u_table::max#1 sin8u_table::max#0
Not aliassing across scopes: sin8u_table::min#1 sin8u_table::min#0
Not aliassing across scopes: sin8u_table::tabsize#1 sin8u_table::tabsize#0
Not aliassing across scopes: rem16u#20 rem16u#19
Not aliassing across scopes: char_cursor#79 char_cursor#15
Not aliassing across scopes: line_cursor#44 line_cursor#5
Not aliassing across scopes: sin8u_table::sintab#22 sin8u_table::sintab#0
Not aliassing across scopes: div16u::dividend#0 PI2_u4f12#0
Not aliassing across scopes: div16u::divisor#0 sin8u_table::tabsize#1
Not aliassing across scopes: div16u::return#2 div16u::return#1
Not aliassing across scopes: rem16u#15 rem16u#4
Not aliassing across scopes: sin8u_table::$4 div16u::return#4
Not aliassing across scopes: char_cursor#52 char_cursor#2
Not aliassing across scopes: print_word::w#0 sin8u_table::step#1
Not aliassing across scopes: char_cursor#53 char_cursor#7
Not aliassing across scopes: char_cursor#54 char_cursor#2
Not aliassing across scopes: print_byte::b#2 sin8u_table::min#2
Not aliassing across scopes: char_cursor#55 char_cursor#10
Not aliassing across scopes: char_cursor#56 char_cursor#2
Not aliassing across scopes: print_byte::b#3 sin8u_table::max#2
Not aliassing across scopes: char_cursor#57 char_cursor#10
Not aliassing across scopes: char_cursor#58 char_cursor#2
Not aliassing across scopes: print_byte::b#4 sin8u_table::amplitude#1
Not aliassing across scopes: char_cursor#59 char_cursor#10
Not aliassing across scopes: char_cursor#60 char_cursor#2
Not aliassing across scopes: print_byte::b#5 sin8u_table::mid#1
Not aliassing across scopes: char_cursor#61 char_cursor#10
Not aliassing across scopes: line_cursor#19 line_cursor#2
Not aliassing across scopes: char_cursor#62 char_cursor#4
Not aliassing across scopes: sin8s::x#2 sin8u_table::x#2
Not aliassing across scopes: sin8s::return#2 sin8s::return#1
Not aliassing across scopes: sin8u_table::$16 sin8s::return#4
Not aliassing across scopes: mul8su::b#0 sin8u_table::amplitude#2
Not aliassing across scopes: mul8su::return#2 mul8su::return#1
Not aliassing across scopes: sin8u_table::$17 mul8su::return#4
Not aliassing across scopes: char_cursor#63 char_cursor#2
Not aliassing across scopes: print_word::w#1 sin8u_table::x#3
Not aliassing across scopes: char_cursor#64 char_cursor#7
Not aliassing across scopes: char_cursor#65 char_cursor#2
Not aliassing across scopes: print_byte::b#6 sin8u_table::sinval#1
Not aliassing across scopes: char_cursor#66 char_cursor#10
Not aliassing across scopes: line_cursor#20 line_cursor#2
Not aliassing across scopes: char_cursor#67 char_cursor#4
Not aliassing across scopes: line_cursor#22 line_cursor#7
Not aliassing across scopes: char_cursor#69 char_cursor#17
Not aliassing across scopes: rem16u#17 rem16u#6
Alias (word) divr16u::rem#0 = (word~) divr16u::$0 (word) divr16u::rem#6 
Alias (word) divr16u::dividend#0 = (word~) divr16u::$6 (word) divr16u::dividend#7 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$7 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#6 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#3 = (word) divr16u::divisor#4 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#1 = (word~) divr16u::$5 
Alias (word) divr16u::rem#5 = (word) divr16u::rem#7 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#2 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#2 = (word~) divr16u::$10 
Alias (word) divr16u::rem#10 = (word) divr16u::rem#8 
Alias (word) divr16u::return#0 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#3 (word) divr16u::return#1 
Alias (word) rem16u#1 = (word) rem16u#10 (word) rem16u#2 
Alias (word) divr16u::return#2 = (word) divr16u::return#4 
Alias (word) rem16u#11 = (word) rem16u#3 (word) rem16u#12 (word) rem16u#4 
Alias (word) div16u::return#0 = (word~) div16u::$0 (word) div16u::return#3 (word) div16u::return#1 
Alias (byte) mul8u::a#3 = (byte) mul8u::a#4 (byte) mul8u::a#7 
Alias (word) mul8u::mb#3 = (word) mul8u::mb#4 (word) mul8u::mb#5 
Alias (word) mul8u::res#2 = (word) mul8u::res#5 (word) mul8u::res#4 (word) mul8u::return#0 (word) mul8u::res#3 (word) mul8u::return#4 (word) mul8u::return#1 
Alias (byte) mul8u::a#0 = (byte~) mul8u::$5 
Alias (word) mul8u::mb#1 = (word~) mul8u::$6 
Alias (word) mul8u::res#1 = (word~) mul8u::$4 
Alias (byte) mul8u::a#1 = (byte~) mul8su::$0 
Alias (byte) mul8u::b#0 = (byte~) mul8su::$1 
Alias (word) mul8u::return#2 = (word) mul8u::return#5 
Alias (signed byte) mul8su::a#1 = (signed byte) mul8su::a#2 
Alias (byte) mul8su::b#1 = (byte) mul8su::b#3 (byte) mul8su::b#2 
Alias (word) mul8su::m#0 = (word~) mul8su::$2 (word) mul8su::m#3 
Alias (signed word) mul8su::return#0 = (signed word~) mul8su::$9 (signed word) mul8su::return#3 (signed word) mul8su::return#1 
Alias (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 = (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$8 
Alias (word) rem16u#0 = (word) rem16u#26 (word) rem16u#25 (word) rem16u#22 
Alias (word) sin8s::x#3 = (word) sin8s::x#5 
Alias (word) sin8s::x#0 = (word~) sin8s::$2 
Alias (byte) sin8s::x1#0 = (byte~) sin8s::$7 (byte) sin8s::x1#1 (byte) sin8s::x1#4 (byte) sin8s::x1#2 (byte) sin8s::x1#3 
Alias (byte) mulu8_sel::return#0 = (byte) mulu8_sel::return#7 
Alias (byte) sin8s::isUpper#3 = (byte) sin8s::isUpper#8 (byte) sin8s::isUpper#9 (byte) sin8s::isUpper#7 (byte) sin8s::isUpper#6 (byte) sin8s::isUpper#5 (byte) sin8s::isUpper#4 
Alias (byte) sin8s::x2#0 = (byte~) sin8s::$8 
Alias (byte) mulu8_sel::return#1 = (byte) mulu8_sel::return#8 
Alias (byte) sin8s::x3#0 = (byte~) sin8s::$9 (byte) sin8s::x3#1 
Alias (byte) mulu8_sel::return#2 = (byte) mulu8_sel::return#9 
Alias (byte) sin8s::x3_6#0 = (byte~) sin8s::$10 
Alias (byte) sin8s::usinx#0 = (byte/signed byte/word/signed word/dword/signed dword~) sin8s::$11 (byte) sin8s::usinx#7 (byte) sin8s::usinx#3 
Alias (byte) mulu8_sel::return#10 = (byte) mulu8_sel::return#3 
Alias (byte) sin8s::x4#0 = (byte~) sin8s::$12 
Alias (byte) mulu8_sel::return#11 = (byte) mulu8_sel::return#4 
Alias (byte) sin8s::x5#0 = (byte~) sin8s::$13 
Alias (byte) sin8s::x5_128#0 = (byte~) sin8s::$14 
Alias (byte) sin8s::usinx#1 = (byte/word~) sin8s::$15 (byte) sin8s::usinx#5 
Alias (word) sin8s::x#4 = (word) sin8s::x#7 
Alias (byte) sin8s::isUpper#10 = (byte) sin8s::isUpper#11 
Alias (word) sin8s::x#1 = (word~) sin8s::$5 
Alias (signed byte) sin8s::sinx#0 = (signed byte~) sin8s::$18 
Alias (signed byte) sin8s::return#0 = (signed byte) sin8s::sinx#2 (signed byte) sin8s::return#3 (signed byte) sin8s::return#1 
Alias (byte) sin8s::usinx#4 = (byte) sin8s::usinx#6 
Alias (signed byte) sin8s::sinx#1 = (signed byte~) sin8s::$22 
Alias (word) mul8u::return#3 = (word) mul8u::return#6 
Alias (byte) mulu8_sel::select#5 = (byte) mulu8_sel::select#6 
Alias (byte) mulu8_sel::return#12 = (byte) mulu8_sel::return#5 (byte~) mulu8_sel::$2 (byte) mulu8_sel::return#6 
Alias (byte*) SCREEN#0 = (byte*) line_cursor#0 (byte*) char_cursor#0 (byte*) line_cursor#27 (byte*) char_cursor#77 
Alias (byte*) print_str::str#8 = (byte*) print_str::str#9 
Alias (byte*) char_cursor#2 = (byte*) char_cursor#36 (byte*) char_cursor#70 (byte*) char_cursor#37 
Alias (byte*) line_cursor#1 = (byte*~) print_ln::$0 (byte*) line_cursor#13 (byte*) char_cursor#3 (byte*) line_cursor#14 (byte*) char_cursor#39 (byte*) line_cursor#2 (byte*) char_cursor#4 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#2 = (word) print_word::w#3 
Alias (byte*) char_cursor#40 = (byte*) char_cursor#5 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) char_cursor#41 = (byte*) char_cursor#6 (byte*) char_cursor#42 (byte*) char_cursor#7 
Alias (byte) print_byte::b#7 = (byte) print_byte::b#8 
Alias (byte*) char_cursor#43 = (byte*) char_cursor#8 
Alias (byte*) char_cursor#10 = (byte*) char_cursor#9 (byte*) char_cursor#44 (byte*) char_cursor#45 
Alias (byte*) char_cursor#11 = (byte*) char_cursor#47 (byte*) char_cursor#12 
Alias (byte*) line_cursor#15 = (byte*) char_cursor#13 (byte*) line_cursor#3 (byte*) char_cursor#48 (byte*) line_cursor#4 (byte*) char_cursor#14 
Alias (word) main::tabsize#0 = (word) main::tabsize#1 
Alias (word) rem16u#19 = (word) rem16u#23 
Alias (byte*) line_cursor#16 = (byte*) line_cursor#5 
Alias (byte*) char_cursor#15 = (byte*) char_cursor#49 
Alias (word) rem16u#13 = (word) rem16u#5 (word) rem16u#14 (word) rem16u#6 
Alias (byte*) char_cursor#16 = (byte*) char_cursor#50 (byte*) char_cursor#51 (byte*) char_cursor#17 
Alias (byte*) line_cursor#17 = (byte*) line_cursor#6 (byte*) line_cursor#18 (byte*) line_cursor#7 
Alias (byte) sin8u_table::amplitude#0 = (byte/signed byte/word/signed word/dword/signed dword~) sin8u_table::$0 (byte) sin8u_table::amplitude#19 (byte) sin8u_table::amplitude#17 (byte) sin8u_table::amplitude#14 (byte) sin8u_table::amplitude#11 (byte) sin8u_table::amplitude#8 (byte) sin8u_table::amplitude#5 (byte) sin8u_table::amplitude#3 (byte) sin8u_table::amplitude#1 (byte) sin8u_table::amplitude#15 (byte) sin8u_table::amplitude#12 (byte) sin8u_table::amplitude#9 (byte) sin8u_table::amplitude#6 
Alias (word) sin8u_table::sum#0 = (byte/word~) sin8u_table::$1 
Alias (byte) sin8u_table::mid#0 = (byte~) sin8u_table::$3 (byte) sin8u_table::mid#20 (byte) sin8u_table::mid#19 (byte) sin8u_table::mid#17 (byte) sin8u_table::mid#15 (byte) sin8u_table::mid#13 (byte) sin8u_table::mid#10 (byte) sin8u_table::mid#7 (byte) sin8u_table::mid#5 (byte) sin8u_table::mid#3 (byte) sin8u_table::mid#1 (byte) sin8u_table::mid#11 (byte) sin8u_table::mid#8 
Alias (word) div16u::return#2 = (word) div16u::return#4 
Alias (byte*) char_cursor#75 = (byte*) char_cursor#79 
Alias (byte) sin8u_table::min#1 = (byte) sin8u_table::min#5 (byte) sin8u_table::min#4 (byte) sin8u_table::min#3 (byte) sin8u_table::min#2 
Alias (byte) sin8u_table::max#1 = (byte) sin8u_table::max#7 (byte) sin8u_table::max#6 (byte) sin8u_table::max#5 (byte) sin8u_table::max#4 (byte) sin8u_table::max#3 (byte) sin8u_table::max#2 
Alias (byte*) line_cursor#25 = (byte*) line_cursor#43 (byte*) line_cursor#44 (byte*) line_cursor#42 (byte*) line_cursor#41 (byte*) line_cursor#40 (byte*) line_cursor#38 (byte*) line_cursor#36 (byte*) line_cursor#34 (byte*) line_cursor#32 (byte*) line_cursor#30 (byte*) line_cursor#28 
Alias (byte*) sin8u_table::sintab#11 = (byte*) sin8u_table::sintab#21 (byte*) sin8u_table::sintab#22 (byte*) sin8u_table::sintab#20 (byte*) sin8u_table::sintab#19 (byte*) sin8u_table::sintab#18 (byte*) sin8u_table::sintab#17 (byte*) sin8u_table::sintab#16 (byte*) sin8u_table::sintab#15 (byte*) sin8u_table::sintab#13 (byte*) sin8u_table::sintab#9 (byte*) sin8u_table::sintab#7 (byte*) sin8u_table::sintab#5 
Alias (word) sin8u_table::tabsize#1 = (word) sin8u_table::tabsize#21 (word) sin8u_table::tabsize#20 (word) sin8u_table::tabsize#19 (word) sin8u_table::tabsize#18 (word) sin8u_table::tabsize#17 (word) sin8u_table::tabsize#16 (word) sin8u_table::tabsize#15 (word) sin8u_table::tabsize#14 (word) sin8u_table::tabsize#13 (word) sin8u_table::tabsize#12 (word) sin8u_table::tabsize#11 (word) sin8u_table::tabsize#10 
Alias (word) rem16u#15 = (word) rem16u#7 (word) rem16u#43 (word) rem16u#42 (word) rem16u#41 (word) rem16u#40 (word) rem16u#39 (word) rem16u#38 (word) rem16u#37 (word) rem16u#36 (word) rem16u#35 (word) rem16u#34 (word) rem16u#33 
Alias (word) sin8u_table::step#0 = (word~) sin8u_table::$4 (word) sin8u_table::step#1 (word) sin8u_table::step#19 (word) sin8u_table::step#18 (word) sin8u_table::step#17 (word) sin8u_table::step#16 (word) sin8u_table::step#15 (word) sin8u_table::step#14 (word) sin8u_table::step#13 (word) sin8u_table::step#12 (word) sin8u_table::step#11 (word) sin8u_table::step#10 
Alias (byte*) char_cursor#18 = (byte*) char_cursor#52 
Alias (byte*) char_cursor#19 = (byte*) char_cursor#53 
Alias (byte*) char_cursor#20 = (byte*) char_cursor#54 
Alias (byte*) char_cursor#21 = (byte*) char_cursor#55 
Alias (byte*) char_cursor#22 = (byte*) char_cursor#56 
Alias (byte*) char_cursor#23 = (byte*) char_cursor#57 
Alias (byte*) char_cursor#24 = (byte*) char_cursor#58 
Alias (byte*) char_cursor#25 = (byte*) char_cursor#59 
Alias (byte*) char_cursor#26 = (byte*) char_cursor#60 
Alias (byte*) char_cursor#27 = (byte*) char_cursor#61 
Alias (byte*) line_cursor#19 = (byte*) line_cursor#8 
Alias (byte*) char_cursor#28 = (byte*) char_cursor#62 
Alias (signed byte) sin8s::return#2 = (signed byte) sin8s::return#4 
Alias (byte) sin8u_table::amplitude#10 = (byte) sin8u_table::amplitude#2 (byte) sin8u_table::amplitude#4 (byte) sin8u_table::amplitude#20 (byte) sin8u_table::amplitude#18 (byte) sin8u_table::amplitude#16 (byte) sin8u_table::amplitude#13 (byte) sin8u_table::amplitude#7 
Alias (byte) sin8u_table::mid#12 = (byte) sin8u_table::mid#4 (byte) sin8u_table::mid#6 (byte) sin8u_table::mid#2 (byte) sin8u_table::mid#18 (byte) sin8u_table::mid#16 (byte) sin8u_table::mid#14 (byte) sin8u_table::mid#9 
Alias (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#3 (byte*) sin8u_table::sintab#4 
Alias (byte*) char_cursor#76 = (byte*) char_cursor#80 (byte*) char_cursor#81 
Alias (word) sin8u_table::x#2 = (word) sin8u_table::x#7 (word) sin8u_table::x#5 (word) sin8u_table::x#3 (word) sin8u_table::x#9 (word) sin8u_table::x#8 (word) sin8u_table::x#6 (word) sin8u_table::x#4 
Alias (byte*) line_cursor#26 = (byte*) line_cursor#37 (byte*) line_cursor#39 (byte*) line_cursor#35 (byte*) line_cursor#33 (byte*) line_cursor#31 (byte*) line_cursor#29 
Alias (word) sin8u_table::step#2 = (word) sin8u_table::step#8 (word) sin8u_table::step#9 (word) sin8u_table::step#7 (word) sin8u_table::step#6 (word) sin8u_table::step#5 (word) sin8u_table::step#4 (word) sin8u_table::step#3 
Alias (word) sin8u_table::i#2 = (word) sin8u_table::i#8 (word) sin8u_table::i#9 (word) sin8u_table::i#7 (word) sin8u_table::i#6 (word) sin8u_table::i#5 (word) sin8u_table::i#4 (word) sin8u_table::i#3 
Alias (word) sin8u_table::tabsize#2 = (word) sin8u_table::tabsize#8 (word) sin8u_table::tabsize#9 (word) sin8u_table::tabsize#7 (word) sin8u_table::tabsize#6 (word) sin8u_table::tabsize#5 (word) sin8u_table::tabsize#4 (word) sin8u_table::tabsize#3 
Alias (word) rem16u#16 = (word) rem16u#31 (word) rem16u#32 (word) rem16u#30 (word) rem16u#29 (word) rem16u#28 (word) rem16u#27 (word) rem16u#24 (word) rem16u#21 (word) rem16u#8 
Alias (signed byte) mul8su::a#0 = (signed byte~) sin8u_table::$16 
Alias (signed word) mul8su::return#2 = (signed word) mul8su::return#4 
Alias (byte) sin8u_table::sinval#0 = (byte/word~) sin8u_table::$19 (byte) sin8u_table::sinval#3 (byte) sin8u_table::sinval#2 (byte) sin8u_table::sinval#1 
Alias (byte*) sin8u_table::sintab#1 = (byte*) sin8u_table::sintab#14 (byte*) sin8u_table::sintab#12 (byte*) sin8u_table::sintab#10 (byte*) sin8u_table::sintab#8 (byte*) sin8u_table::sintab#6 
Alias (byte*) char_cursor#29 = (byte*) char_cursor#63 
Alias (byte*) char_cursor#30 = (byte*) char_cursor#64 
Alias (byte*) char_cursor#31 = (byte*) char_cursor#65 
Alias (byte*) char_cursor#32 = (byte*) char_cursor#66 
Alias (byte*) line_cursor#10 = (byte*) line_cursor#9 (byte*) line_cursor#20 (byte*) line_cursor#21 
Alias (byte*) char_cursor#33 = (byte*) char_cursor#67 (byte*) char_cursor#68 (byte*) char_cursor#34 
Alias (word) sin8u_table::x#1 = (word~) sin8u_table::$25 
Alias (byte*) line_cursor#11 = (byte*) line_cursor#22 
Alias (byte*) char_cursor#35 = (byte*) char_cursor#69 
Alias (word) rem16u#17 = (word) rem16u#9 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: divr16u::rem#9 divr16u::rem#3
Not aliassing across scopes: divr16u::dividend#4 divr16u::dividend#1
Not aliassing across scopes: divr16u::divisor#5 divr16u::divisor#0
Not aliassing across scopes: rem16u#1 divr16u::rem#10
Not aliassing across scopes: div16u::dividend#1 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 div16u::divisor#0
Not aliassing across scopes: rem16u#18 rem16u#20
Not aliassing across scopes: divr16u::dividend#1 div16u::dividend#1
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#1
Not aliassing across scopes: divr16u::return#2 divr16u::return#0
Not aliassing across scopes: rem16u#11 rem16u#1
Not aliassing across scopes: div16u::return#0 divr16u::return#2
Not aliassing across scopes: mul8u::b#2 mul8u::b#0
Not aliassing across scopes: mul8u::a#6 mul8u::a#1
Not aliassing across scopes: mul8su::a#1 mul8su::a#0
Not aliassing across scopes: mul8su::b#1 mul8su::b#0
Not aliassing across scopes: mul8u::return#2 mul8u::res#2
Not aliassing across scopes: mul8su::m#0 mul8u::return#2
Not aliassing across scopes: sin8s::x#3 sin8s::x#2
Not aliassing across scopes: mulu8_sel::v1#0 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::v2#0 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#0 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x2#0 mulu8_sel::return#0
Not aliassing across scopes: mulu8_sel::v1#1 sin8s::x2#0
Not aliassing across scopes: mulu8_sel::v2#1 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#1 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x3#0 mulu8_sel::return#1
Not aliassing across scopes: mulu8_sel::v1#2 sin8s::x3#0
Not aliassing across scopes: mulu8_sel::v2#2 sin8s::DIV_6#0
Not aliassing across scopes: mulu8_sel::return#2 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x3_6#0 mulu8_sel::return#2
Not aliassing across scopes: mulu8_sel::v1#3 sin8s::x3#0
Not aliassing across scopes: mulu8_sel::v2#3 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#10 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x4#0 mulu8_sel::return#10
Not aliassing across scopes: mulu8_sel::v1#4 sin8s::x4#0
Not aliassing across scopes: mulu8_sel::v2#4 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#11 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x5#0 mulu8_sel::return#11
Not aliassing across scopes: mulu8_sel::v1#5 mulu8_sel::v1#1
Not aliassing across scopes: mulu8_sel::v2#5 mulu8_sel::v2#1
Not aliassing across scopes: mulu8_sel::select#5 mulu8_sel::select#1
Not aliassing across scopes: mul8u::a#2 mulu8_sel::v1#5
Not aliassing across scopes: mul8u::b#1 mulu8_sel::v2#5
Not aliassing across scopes: mul8u::return#3 mul8u::res#2
Not aliassing across scopes: mulu8_sel::$0 mul8u::return#3
Not aliassing across scopes: print_str::str#10 print_str::str#5
Not aliassing across scopes: char_cursor#78 char_cursor#25
Not aliassing across scopes: line_cursor#23 line_cursor#25
Not aliassing across scopes: char_cursor#71 char_cursor#27
Not aliassing across scopes: print_word::w#2 print_word::w#1
Not aliassing across scopes: char_cursor#72 char_cursor#29
Not aliassing across scopes: char_cursor#40 char_cursor#10
Not aliassing across scopes: char_cursor#41 char_cursor#10
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: char_cursor#73 char_cursor#72
Not aliassing across scopes: char_cursor#43 char_cursor#11
Not aliassing across scopes: char_cursor#10 char_cursor#11
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#46 char_cursor#73
Not aliassing across scopes: print_cls::sc#0 SCREEN#0
Not aliassing across scopes: line_cursor#15 SCREEN#0
Not aliassing across scopes: line_cursor#24 SCREEN#0
Not aliassing across scopes: char_cursor#74 SCREEN#0
Not aliassing across scopes: rem16u#19 rem16u#0
Not aliassing across scopes: line_cursor#16 line_cursor#15
Not aliassing across scopes: char_cursor#15 line_cursor#15
Not aliassing across scopes: sin8u_table::sintab#0 main::sintab#0
Not aliassing across scopes: sin8u_table::tabsize#0 main::tabsize#0
Not aliassing across scopes: rem16u#13 rem16u#16
Not aliassing across scopes: char_cursor#16 char_cursor#33
Not aliassing across scopes: line_cursor#17 line_cursor#10
Not aliassing across scopes: sin8u_table::max#1 sin8u_table::max#0
Not aliassing across scopes: sin8u_table::min#1 sin8u_table::min#0
Not aliassing across scopes: sin8u_table::tabsize#1 sin8u_table::tabsize#0
Not aliassing across scopes: rem16u#20 rem16u#19
Not aliassing across scopes: char_cursor#75 char_cursor#15
Not aliassing across scopes: line_cursor#25 line_cursor#16
Not aliassing across scopes: sin8u_table::sintab#11 sin8u_table::sintab#0
Not aliassing across scopes: div16u::dividend#0 PI2_u4f12#0
Not aliassing across scopes: div16u::divisor#0 sin8u_table::tabsize#1
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: rem16u#15 rem16u#11
Not aliassing across scopes: sin8u_table::step#0 div16u::return#2
Not aliassing across scopes: char_cursor#18 char_cursor#2
Not aliassing across scopes: print_word::w#0 sin8u_table::step#0
Not aliassing across scopes: char_cursor#19 char_cursor#41
Not aliassing across scopes: char_cursor#20 char_cursor#2
Not aliassing across scopes: print_byte::b#2 sin8u_table::min#1
Not aliassing across scopes: char_cursor#21 char_cursor#10
Not aliassing across scopes: char_cursor#22 char_cursor#2
Not aliassing across scopes: print_byte::b#3 sin8u_table::max#1
Not aliassing across scopes: char_cursor#23 char_cursor#10
Not aliassing across scopes: char_cursor#24 char_cursor#2
Not aliassing across scopes: print_byte::b#4 sin8u_table::amplitude#0
Not aliassing across scopes: char_cursor#25 char_cursor#10
Not aliassing across scopes: char_cursor#26 char_cursor#2
Not aliassing across scopes: print_byte::b#5 sin8u_table::mid#0
Not aliassing across scopes: char_cursor#27 char_cursor#10
Not aliassing across scopes: line_cursor#19 line_cursor#1
Not aliassing across scopes: char_cursor#28 line_cursor#1
Not aliassing across scopes: sin8s::x#2 sin8u_table::x#2
Not aliassing across scopes: sin8s::return#2 sin8s::return#0
Not aliassing across scopes: mul8su::a#0 sin8s::return#2
Not aliassing across scopes: mul8su::b#0 sin8u_table::amplitude#10
Not aliassing across scopes: mul8su::return#2 mul8su::return#0
Not aliassing across scopes: sin8u_table::$17 mul8su::return#2
Not aliassing across scopes: char_cursor#29 char_cursor#2
Not aliassing across scopes: print_word::w#1 sin8u_table::x#2
Not aliassing across scopes: char_cursor#30 char_cursor#41
Not aliassing across scopes: char_cursor#31 char_cursor#2
Not aliassing across scopes: print_byte::b#6 sin8u_table::sinval#0
Not aliassing across scopes: char_cursor#32 char_cursor#10
Not aliassing across scopes: line_cursor#10 line_cursor#1
Not aliassing across scopes: char_cursor#33 line_cursor#1
Not aliassing across scopes: line_cursor#11 line_cursor#17
Not aliassing across scopes: char_cursor#35 char_cursor#16
Not aliassing across scopes: rem16u#17 rem16u#13
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#3 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#3 (word) divr16u::divisor#6 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#0 = (word) divr16u::dividend#5 
Alias (byte) mul8u::a#3 = (byte) mul8u::a#5 
Alias (word) mul8u::mb#2 = (word) mul8u::mb#3 
Alias (byte) sin8s::isUpper#10 = (byte) sin8s::isUpper#3 (byte) sin8s::isUpper#2 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: divr16u::rem#9 divr16u::rem#3
Not aliassing across scopes: divr16u::dividend#4 divr16u::dividend#1
Not aliassing across scopes: divr16u::divisor#5 divr16u::divisor#0
Not aliassing across scopes: rem16u#1 divr16u::rem#10
Not aliassing across scopes: div16u::dividend#1 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 div16u::divisor#0
Not aliassing across scopes: rem16u#18 rem16u#20
Not aliassing across scopes: divr16u::dividend#1 div16u::dividend#1
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#1
Not aliassing across scopes: divr16u::return#2 divr16u::return#0
Not aliassing across scopes: rem16u#11 rem16u#1
Not aliassing across scopes: div16u::return#0 divr16u::return#2
Not aliassing across scopes: mul8u::b#2 mul8u::b#0
Not aliassing across scopes: mul8u::a#6 mul8u::a#1
Not aliassing across scopes: mul8su::a#1 mul8su::a#0
Not aliassing across scopes: mul8su::b#1 mul8su::b#0
Not aliassing across scopes: mul8u::return#2 mul8u::res#2
Not aliassing across scopes: mul8su::m#0 mul8u::return#2
Not aliassing across scopes: sin8s::x#3 sin8s::x#2
Not aliassing across scopes: mulu8_sel::v1#0 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::v2#0 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#0 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x2#0 mulu8_sel::return#0
Not aliassing across scopes: mulu8_sel::v1#1 sin8s::x2#0
Not aliassing across scopes: mulu8_sel::v2#1 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#1 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x3#0 mulu8_sel::return#1
Not aliassing across scopes: mulu8_sel::v1#2 sin8s::x3#0
Not aliassing across scopes: mulu8_sel::v2#2 sin8s::DIV_6#0
Not aliassing across scopes: mulu8_sel::return#2 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x3_6#0 mulu8_sel::return#2
Not aliassing across scopes: mulu8_sel::v1#3 sin8s::x3#0
Not aliassing across scopes: mulu8_sel::v2#3 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#10 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x4#0 mulu8_sel::return#10
Not aliassing across scopes: mulu8_sel::v1#4 sin8s::x4#0
Not aliassing across scopes: mulu8_sel::v2#4 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#11 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x5#0 mulu8_sel::return#11
Not aliassing across scopes: mulu8_sel::v1#5 mulu8_sel::v1#1
Not aliassing across scopes: mulu8_sel::v2#5 mulu8_sel::v2#1
Not aliassing across scopes: mulu8_sel::select#5 mulu8_sel::select#1
Not aliassing across scopes: mul8u::a#2 mulu8_sel::v1#5
Not aliassing across scopes: mul8u::b#1 mulu8_sel::v2#5
Not aliassing across scopes: mul8u::return#3 mul8u::res#2
Not aliassing across scopes: mulu8_sel::$0 mul8u::return#3
Not aliassing across scopes: print_str::str#10 print_str::str#5
Not aliassing across scopes: char_cursor#78 char_cursor#25
Not aliassing across scopes: line_cursor#23 line_cursor#25
Not aliassing across scopes: char_cursor#71 char_cursor#27
Not aliassing across scopes: print_word::w#2 print_word::w#1
Not aliassing across scopes: char_cursor#72 char_cursor#29
Not aliassing across scopes: char_cursor#40 char_cursor#10
Not aliassing across scopes: char_cursor#41 char_cursor#10
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: char_cursor#73 char_cursor#72
Not aliassing across scopes: char_cursor#43 char_cursor#11
Not aliassing across scopes: char_cursor#10 char_cursor#11
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#46 char_cursor#73
Not aliassing across scopes: print_cls::sc#0 SCREEN#0
Not aliassing across scopes: line_cursor#15 SCREEN#0
Not aliassing across scopes: line_cursor#24 SCREEN#0
Not aliassing across scopes: char_cursor#74 SCREEN#0
Not aliassing across scopes: rem16u#19 rem16u#0
Not aliassing across scopes: line_cursor#16 line_cursor#15
Not aliassing across scopes: char_cursor#15 line_cursor#15
Not aliassing across scopes: sin8u_table::sintab#0 main::sintab#0
Not aliassing across scopes: sin8u_table::tabsize#0 main::tabsize#0
Not aliassing across scopes: rem16u#13 rem16u#16
Not aliassing across scopes: char_cursor#16 char_cursor#33
Not aliassing across scopes: line_cursor#17 line_cursor#10
Not aliassing across scopes: sin8u_table::max#1 sin8u_table::max#0
Not aliassing across scopes: sin8u_table::min#1 sin8u_table::min#0
Not aliassing across scopes: sin8u_table::tabsize#1 sin8u_table::tabsize#0
Not aliassing across scopes: rem16u#20 rem16u#19
Not aliassing across scopes: char_cursor#75 char_cursor#15
Not aliassing across scopes: line_cursor#25 line_cursor#16
Not aliassing across scopes: sin8u_table::sintab#11 sin8u_table::sintab#0
Not aliassing across scopes: div16u::dividend#0 PI2_u4f12#0
Not aliassing across scopes: div16u::divisor#0 sin8u_table::tabsize#1
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: rem16u#15 rem16u#11
Not aliassing across scopes: sin8u_table::step#0 div16u::return#2
Not aliassing across scopes: char_cursor#18 char_cursor#2
Not aliassing across scopes: print_word::w#0 sin8u_table::step#0
Not aliassing across scopes: char_cursor#19 char_cursor#41
Not aliassing across scopes: char_cursor#20 char_cursor#2
Not aliassing across scopes: print_byte::b#2 sin8u_table::min#1
Not aliassing across scopes: char_cursor#21 char_cursor#10
Not aliassing across scopes: char_cursor#22 char_cursor#2
Not aliassing across scopes: print_byte::b#3 sin8u_table::max#1
Not aliassing across scopes: char_cursor#23 char_cursor#10
Not aliassing across scopes: char_cursor#24 char_cursor#2
Not aliassing across scopes: print_byte::b#4 sin8u_table::amplitude#0
Not aliassing across scopes: char_cursor#25 char_cursor#10
Not aliassing across scopes: char_cursor#26 char_cursor#2
Not aliassing across scopes: print_byte::b#5 sin8u_table::mid#0
Not aliassing across scopes: char_cursor#27 char_cursor#10
Not aliassing across scopes: line_cursor#19 line_cursor#1
Not aliassing across scopes: char_cursor#28 line_cursor#1
Not aliassing across scopes: sin8s::x#2 sin8u_table::x#2
Not aliassing across scopes: sin8s::return#2 sin8s::return#0
Not aliassing across scopes: mul8su::a#0 sin8s::return#2
Not aliassing across scopes: mul8su::b#0 sin8u_table::amplitude#10
Not aliassing across scopes: mul8su::return#2 mul8su::return#0
Not aliassing across scopes: sin8u_table::$17 mul8su::return#2
Not aliassing across scopes: char_cursor#29 char_cursor#2
Not aliassing across scopes: print_word::w#1 sin8u_table::x#2
Not aliassing across scopes: char_cursor#30 char_cursor#41
Not aliassing across scopes: char_cursor#31 char_cursor#2
Not aliassing across scopes: print_byte::b#6 sin8u_table::sinval#0
Not aliassing across scopes: char_cursor#32 char_cursor#10
Not aliassing across scopes: line_cursor#10 line_cursor#1
Not aliassing across scopes: char_cursor#33 line_cursor#1
Not aliassing across scopes: line_cursor#11 line_cursor#17
Not aliassing across scopes: char_cursor#35 char_cursor#16
Not aliassing across scopes: rem16u#17 rem16u#13
Self Phi Eliminated (word) divr16u::divisor#1
Self Phi Eliminated (byte*) char_cursor#38
Self Phi Eliminated (byte) sin8u_table::amplitude#10
Self Phi Eliminated (byte) sin8u_table::mid#12
Self Phi Eliminated (word) sin8u_table::step#2
Self Phi Eliminated (word) sin8u_table::tabsize#2
Self Phi Eliminated (word) rem16u#16
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (word) divr16u::rem#9 (word) divr16u::rem#3
Redundant Phi (word) divr16u::dividend#4 (word) divr16u::dividend#1
Redundant Phi (word) divr16u::divisor#5 (word) divr16u::divisor#0
Redundant Phi (word) divr16u::divisor#1 (word) divr16u::divisor#5
Redundant Phi (word) div16u::dividend#1 (word) div16u::dividend#0
Redundant Phi (word) div16u::divisor#1 (word) div16u::divisor#0
Redundant Phi (word) rem16u#18 (word) rem16u#20
Redundant Phi (word) rem16u#11 (word) rem16u#1
Redundant Phi (signed byte) mul8su::a#1 (signed byte) mul8su::a#0
Redundant Phi (byte) mul8su::b#1 (byte) mul8su::b#0
Redundant Phi (word) sin8s::x#3 (word) sin8s::x#2
Redundant Phi (byte*) char_cursor#38 (byte*) char_cursor#71
Redundant Phi (byte*) char_cursor#40 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#41 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#43 (byte*) char_cursor#11
Redundant Phi (byte*) char_cursor#10 (byte*) char_cursor#11
Redundant Phi (byte*) line_cursor#24 (byte*) SCREEN#0
Redundant Phi (byte*) char_cursor#74 (byte*) SCREEN#0
Redundant Phi (word) rem16u#19 (word) rem16u#0
Redundant Phi (byte*) line_cursor#16 (byte*) line_cursor#15
Redundant Phi (byte*) char_cursor#15 (byte*) line_cursor#15
Redundant Phi (word) rem16u#13 (word) rem16u#16
Redundant Phi (byte*) char_cursor#16 (byte*) char_cursor#33
Redundant Phi (byte*) line_cursor#17 (byte*) line_cursor#10
Redundant Phi (byte) sin8u_table::max#1 (byte) sin8u_table::max#0
Redundant Phi (byte) sin8u_table::min#1 (byte) sin8u_table::min#0
Redundant Phi (word) sin8u_table::tabsize#1 (word) sin8u_table::tabsize#0
Redundant Phi (word) rem16u#20 (word) rem16u#19
Redundant Phi (byte*) char_cursor#75 (byte*) char_cursor#15
Redundant Phi (byte*) line_cursor#25 (byte*) line_cursor#16
Redundant Phi (byte*) sin8u_table::sintab#11 (byte*) sin8u_table::sintab#0
Redundant Phi (word) rem16u#15 (word) rem16u#11
Redundant Phi (byte*) char_cursor#18 (byte*) char_cursor#2
Redundant Phi (byte*) char_cursor#19 (byte*) char_cursor#41
Redundant Phi (byte*) char_cursor#20 (byte*) char_cursor#2
Redundant Phi (byte*) char_cursor#21 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#22 (byte*) char_cursor#2
Redundant Phi (byte*) char_cursor#23 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#24 (byte*) char_cursor#2
Redundant Phi (byte*) char_cursor#25 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#26 (byte*) char_cursor#2
Redundant Phi (byte*) char_cursor#27 (byte*) char_cursor#10
Redundant Phi (byte*) line_cursor#19 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#28 (byte*) line_cursor#1
Redundant Phi (byte) sin8u_table::amplitude#10 (byte) sin8u_table::amplitude#0
Redundant Phi (byte) sin8u_table::mid#12 (byte) sin8u_table::mid#0
Redundant Phi (word) sin8u_table::step#2 (word) sin8u_table::step#0
Redundant Phi (word) sin8u_table::tabsize#2 (word) sin8u_table::tabsize#1
Redundant Phi (word) rem16u#16 (word) rem16u#15
Redundant Phi (byte*) char_cursor#29 (byte*) char_cursor#2
Redundant Phi (byte*) char_cursor#30 (byte*) char_cursor#41
Redundant Phi (byte*) char_cursor#31 (byte*) char_cursor#2
Redundant Phi (byte*) char_cursor#32 (byte*) char_cursor#10
Redundant Phi (byte*) line_cursor#10 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#33 (byte*) line_cursor#1
Redundant Phi (byte*) line_cursor#11 (byte*) line_cursor#17
Redundant Phi (byte*) char_cursor#35 (byte*) char_cursor#16
Redundant Phi (word) rem16u#17 (word) rem16u#13
Succesful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte*) char_cursor#71 (byte*) char_cursor#11
Redundant Phi (byte*) char_cursor#72 (byte*) char_cursor#2
Redundant Phi (byte*) char_cursor#76 (byte*) line_cursor#1
Redundant Phi (byte*) line_cursor#26 (byte*) line_cursor#1
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) divr16u::$4 if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
Simple Condition (boolean~) divr16u::$9 if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3
Simple Condition (boolean~) divr16u::$11 if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1
Simple Condition (boolean~) mul8u::$0 if((byte) mul8u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@2
Simple Condition (boolean~) mul8u::$3 if((byte~) mul8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@4
Simple Condition (boolean~) mul8su::$4 if((signed byte) mul8su::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8su::@1
Simple Condition (boolean~) sin8s::$1 if((word) sin8s::x#2<(word) PI_u4f12#0) goto sin8s::@1
Simple Condition (boolean~) sin8s::$4 if((word) sin8s::x#4<(word) PI_HALF_u4f12#0) goto sin8s::@2
Simple Condition (boolean~) sin8s::$17 if((byte) sin8s::usinx#1<(byte/word/signed word/dword/signed dword) 128) goto sin8s::@3
Simple Condition (boolean~) sin8s::$20 if((byte) sin8s::isUpper#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin8s::@4
Simple Condition (boolean~) print_str::$0 if(*((byte*) print_str::str#8)!=(byte) '@') goto print_str::@2
Simple Condition (boolean~) print_ln::$1 if((byte*) line_cursor#1<(byte*) char_cursor#11) goto print_ln::@1
Simple Condition (boolean~) print_cls::$1 if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (boolean~) sin8u_table::$26 if((word) sin8u_table::i#1<(word) sin8u_table::tabsize#0) goto sin8u_table::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const word) rem16u#0 = 0
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const word) mul8u::res#0 = 0
Constant (const word) PI2_u4f12#0 = 25736
Constant (const word) PI_u4f12#0 = 12868
Constant (const word) PI_HALF_u4f12#0 = 6434
Constant (const byte) sin8s::isUpper#0 = 0
Constant (const byte) sin8s::isUpper#1 = 1
Constant (const byte) mulu8_sel::select#0 = 0
Constant (const byte) mulu8_sel::select#1 = 1
Constant (const byte) sin8s::DIV_6#0 = 43
Constant (const byte) mulu8_sel::select#2 = 1
Constant (const byte) mulu8_sel::select#3 = 0
Constant (const byte) mulu8_sel::select#4 = 0
Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const string) print_byte::hextab#0 = print_byte::$4
Constant (const word) main::tabsize#0 = 20
Constant (const byte[20]) main::sintab#0 = { fill( 20, 0) }
Constant (const byte) sin8u_table::min#0 = 10
Constant (const byte) sin8u_table::max#0 = 255
Constant (const string) print_str::str#1 = sin8u_table::str
Constant (const string) print_str::str#2 = sin8u_table::str1
Constant (const string) print_str::str#3 = sin8u_table::str2
Constant (const string) print_str::str#4 = sin8u_table::str3
Constant (const string) print_str::str#5 = sin8u_table::str4
Constant (const word) sin8u_table::x#0 = 0
Constant (const word) sin8u_table::i#0 = 0
Constant (const string) print_str::str#6 = sin8u_table::str5
Constant (const string) print_str::str#7 = sin8u_table::str6
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) mulu8_sel::v2#2 = sin8s::DIV_6#0
Constant (const byte*) print_cls::sc#0 = SCREEN#0
Constant (const byte*) print_cls::$0 = SCREEN#0+1000
Constant (const byte*) line_cursor#15 = SCREEN#0
Constant (const byte[20]) sin8u_table::sintab#0 = main::sintab#0
Constant (const word) sin8u_table::tabsize#0 = main::tabsize#0
Constant (const byte) sin8u_table::amplitude#0 = sin8u_table::max#0-sin8u_table::min#0
Constant (const word) sin8u_table::sum#0 = sin8u_table::min#0+sin8u_table::max#0
Constant (const word) div16u::dividend#0 = PI2_u4f12#0
Constant (const byte) print_byte::b#2 = sin8u_table::min#0
Constant (const byte) print_byte::b#3 = sin8u_table::max#0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::dividend#1 = div16u::dividend#0
Constant (const word) sin8u_table::$2 = sin8u_table::sum#0>>1
Constant (const word) div16u::divisor#0 = sin8u_table::tabsize#0
Constant (const byte) print_byte::b#4 = sin8u_table::amplitude#0
Constant (const byte) mul8su::b#0 = sin8u_table::amplitude#0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::divisor#0 = div16u::divisor#0
Constant (const byte) mul8u::b#0 = ((byte))mul8su::b#0
Constant (const byte) mul8su::$7 = ((byte))mul8su::b#0
Constant (const byte) sin8u_table::mid#0 = ((byte))sin8u_table::$2
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) print_byte::b#5 = sin8u_table::mid#0
Succesful SSA optimization Pass2ConstantIdentification
Eliminating unused variable (word) rem16u#1 and assignment [15] (word) rem16u#1 ← (word) divr16u::rem#10
Eliminating unused constant (const word) rem16u#0
Succesful SSA optimization PassNEliminateUnusedVars
Eliminating Noop Cast (byte) mul8u::a#1 ← ((byte)) (signed byte) mul8su::a#0
Eliminating Noop Cast (signed word) mul8su::return#0 ← ((signed word)) (word) mul8su::m#2
Eliminating Noop Cast (signed byte) sin8s::sinx#0 ← ((signed byte)) (byte) sin8s::usinx#4
Eliminating Noop Cast (signed byte~) sin8s::$21 ← ((signed byte)) (byte) sin8s::usinx#4
Succesful SSA optimization Pass2NopCastElimination
Culled Empty Block (label) @2
Culled Empty Block (label) divr16u::@6
Culled Empty Block (label) mul8u::@3
Culled Empty Block (label) @12
Culled Empty Block (label) @18
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) main::@2
Culled Empty Block (label) sin8u_table::@14
Culled Empty Block (label) @31
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: divr16u::return#2 divr16u::return#0
Not aliassing across scopes: div16u::return#0 divr16u::return#2
Not aliassing across scopes: mul8u::return#2 mul8u::res#2
Not aliassing across scopes: mul8su::m#0 mul8u::return#2
Not aliassing across scopes: sin8s::x#4 sin8s::x#2
Not aliassing across scopes: mulu8_sel::v1#0 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::v2#0 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#0 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x2#0 mulu8_sel::return#0
Not aliassing across scopes: mulu8_sel::v1#1 sin8s::x2#0
Not aliassing across scopes: mulu8_sel::v2#1 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#1 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x3#0 mulu8_sel::return#1
Not aliassing across scopes: mulu8_sel::v1#2 sin8s::x3#0
Not aliassing across scopes: mulu8_sel::return#2 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x3_6#0 mulu8_sel::return#2
Not aliassing across scopes: mulu8_sel::v1#3 sin8s::x3#0
Not aliassing across scopes: mulu8_sel::v2#3 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#10 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x4#0 mulu8_sel::return#10
Not aliassing across scopes: mulu8_sel::v1#4 sin8s::x4#0
Not aliassing across scopes: mulu8_sel::v2#4 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#11 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x5#0 mulu8_sel::return#11
Not aliassing across scopes: mulu8_sel::v1#5 mulu8_sel::v1#1
Not aliassing across scopes: mulu8_sel::v2#5 mulu8_sel::v2#1
Not aliassing across scopes: mul8u::a#2 mulu8_sel::v1#5
Not aliassing across scopes: mul8u::b#1 mulu8_sel::v2#5
Not aliassing across scopes: mul8u::return#3 mul8u::res#2
Not aliassing across scopes: mulu8_sel::$0 mul8u::return#3
Not aliassing across scopes: char_cursor#78 char_cursor#11
Not aliassing across scopes: print_word::w#2 print_word::w#1
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: char_cursor#73 char_cursor#2
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#46 char_cursor#73
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: sin8u_table::step#0 div16u::return#2
Not aliassing across scopes: print_word::w#0 sin8u_table::step#0
Not aliassing across scopes: sin8s::x#2 sin8u_table::x#2
Not aliassing across scopes: sin8s::return#2 sin8s::return#0
Not aliassing across scopes: mul8su::a#0 sin8s::return#2
Not aliassing across scopes: sin8u_table::$17 mul8su::return#2
Not aliassing across scopes: print_word::w#1 sin8u_table::x#2
Not aliassing across scopes: print_byte::b#6 sin8u_table::sinval#0
Not aliassing across scopes: divr16u::return#2 divr16u::return#0
Not aliassing across scopes: div16u::return#0 divr16u::return#2
Not aliassing across scopes: mul8u::return#2 mul8u::res#2
Not aliassing across scopes: mul8su::m#0 mul8u::return#2
Not aliassing across scopes: sin8s::x#4 sin8s::x#2
Not aliassing across scopes: mulu8_sel::v1#0 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::v2#0 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#0 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x2#0 mulu8_sel::return#0
Not aliassing across scopes: mulu8_sel::v1#1 sin8s::x2#0
Not aliassing across scopes: mulu8_sel::v2#1 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#1 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x3#0 mulu8_sel::return#1
Not aliassing across scopes: mulu8_sel::v1#2 sin8s::x3#0
Not aliassing across scopes: mulu8_sel::return#2 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x3_6#0 mulu8_sel::return#2
Not aliassing across scopes: mulu8_sel::v1#3 sin8s::x3#0
Not aliassing across scopes: mulu8_sel::v2#3 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#10 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x4#0 mulu8_sel::return#10
Not aliassing across scopes: mulu8_sel::v1#4 sin8s::x4#0
Not aliassing across scopes: mulu8_sel::v2#4 sin8s::x1#0
Not aliassing across scopes: mulu8_sel::return#11 mulu8_sel::return#12
Not aliassing across scopes: sin8s::x5#0 mulu8_sel::return#11
Not aliassing across scopes: mulu8_sel::v1#5 mulu8_sel::v1#1
Not aliassing across scopes: mulu8_sel::v2#5 mulu8_sel::v2#1
Not aliassing across scopes: mul8u::a#2 mulu8_sel::v1#5
Not aliassing across scopes: mul8u::b#1 mulu8_sel::v2#5
Not aliassing across scopes: mul8u::return#3 mul8u::res#2
Not aliassing across scopes: mulu8_sel::$0 mul8u::return#3
Not aliassing across scopes: char_cursor#78 char_cursor#11
Not aliassing across scopes: print_word::w#2 print_word::w#1
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: char_cursor#73 char_cursor#2
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#46 char_cursor#73
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: sin8u_table::step#0 div16u::return#2
Not aliassing across scopes: print_word::w#0 sin8u_table::step#0
Not aliassing across scopes: sin8s::x#2 sin8u_table::x#2
Not aliassing across scopes: sin8s::return#2 sin8s::return#0
Not aliassing across scopes: mul8su::a#0 sin8s::return#2
Not aliassing across scopes: sin8u_table::$17 mul8su::return#2
Not aliassing across scopes: print_word::w#1 sin8u_table::x#2
Not aliassing across scopes: print_byte::b#6 sin8u_table::sinval#0
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::dividend#1
Inlining constant with var siblings (const word) divr16u::dividend#1
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const byte) mul8u::b#0
Inlining constant with var siblings (const byte) mul8u::b#0
Inlining constant with var siblings (const byte) sin8s::isUpper#0
Inlining constant with different constant siblings (const byte) sin8s::isUpper#0
Inlining constant with var siblings (const byte) sin8s::isUpper#1
Inlining constant with different constant siblings (const byte) sin8s::isUpper#1
Inlining constant with var siblings (const byte) mulu8_sel::select#0
Inlining constant with different constant siblings (const byte) mulu8_sel::select#0
Inlining constant with different constant siblings (const byte) mulu8_sel::select#0
Inlining constant with var siblings (const byte) mulu8_sel::select#1
Inlining constant with different constant siblings (const byte) mulu8_sel::select#1
Inlining constant with different constant siblings (const byte) mulu8_sel::select#1
Inlining constant with different constant siblings (const byte) mulu8_sel::select#1
Inlining constant with var siblings (const byte) mulu8_sel::select#2
Inlining constant with different constant siblings (const byte) mulu8_sel::select#2
Inlining constant with different constant siblings (const byte) mulu8_sel::select#2
Inlining constant with different constant siblings (const byte) mulu8_sel::select#2
Inlining constant with var siblings (const byte) mulu8_sel::select#3
Inlining constant with different constant siblings (const byte) mulu8_sel::select#3
Inlining constant with different constant siblings (const byte) mulu8_sel::select#3
Inlining constant with var siblings (const byte) mulu8_sel::select#4
Inlining constant with different constant siblings (const byte) mulu8_sel::select#4
Inlining constant with different constant siblings (const byte) mulu8_sel::select#4
Inlining constant with var siblings (const byte) mulu8_sel::v2#2
Inlining constant with var siblings (const byte) mulu8_sel::v2#2
Inlining constant with var siblings (const byte) mulu8_sel::v2#2
Inlining constant with var siblings (const byte) mulu8_sel::v2#2
Inlining constant with var siblings (const byte) mulu8_sel::v2#2
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const byte) print_byte::b#2
Inlining constant with var siblings (const byte) print_byte::b#2
Inlining constant with var siblings (const byte) print_byte::b#2
Inlining constant with var siblings (const byte) print_byte::b#2
Inlining constant with var siblings (const byte) print_byte::b#3
Inlining constant with var siblings (const byte) print_byte::b#3
Inlining constant with var siblings (const byte) print_byte::b#3
Inlining constant with var siblings (const byte) print_byte::b#3
Inlining constant with var siblings (const byte) print_byte::b#4
Inlining constant with var siblings (const byte) print_byte::b#4
Inlining constant with var siblings (const byte) print_byte::b#4
Inlining constant with var siblings (const byte) print_byte::b#4
Inlining constant with var siblings (const byte) print_byte::b#5
Inlining constant with var siblings (const byte) print_byte::b#5
Inlining constant with var siblings (const byte) print_byte::b#5
Inlining constant with var siblings (const byte) print_byte::b#5
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const word) sin8u_table::x#0
Inlining constant with var siblings (const word) sin8u_table::x#0
Inlining constant with var siblings (const word) sin8u_table::i#0
Inlining constant with var siblings (const word) sin8u_table::i#0
Inlining constant with var siblings (const byte[20]) sin8u_table::sintab#0
Inlining constant with var siblings (const byte[20]) sin8u_table::sintab#0
Inlining constant with var siblings (const byte*) line_cursor#15
Inlining constant with var siblings (const byte*) line_cursor#15
Inlining constant with var siblings (const byte*) line_cursor#15
Constant inlined divr16u::rem#3 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::$0 = (const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000
Constant inlined divr16u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin8u_table::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin8u_table::sintab#0 = (const byte[20]) main::sintab#0
Constant inlined mul8su::b#0 = (const byte) sin8u_table::amplitude#0
Constant inlined sin8s::isUpper#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined sin8s::isUpper#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined divr16u::quotient#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined div16u::divisor#0 = (const word) main::tabsize#0
Constant inlined sin8u_table::$2 = (const word) sin8u_table::sum#0>>(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mul8su::$7 = ((byte))(const byte) sin8u_table::amplitude#0
Constant inlined mulu8_sel::select#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined div16u::dividend#0 = (const word) PI2_u4f12#0
Constant inlined mulu8_sel::select#2 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined divr16u::divisor#0 = (const word) main::tabsize#0
Constant inlined mulu8_sel::select#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulu8_sel::select#4 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulu8_sel::select#3 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin8u_table::tabsize#0 = (const word) main::tabsize#0
Constant inlined print_byte::b#2 = (const byte) sin8u_table::min#0
Constant inlined print_byte::b#4 = (const byte) sin8u_table::amplitude#0
Constant inlined print_byte::b#3 = (const byte) sin8u_table::max#0
Constant inlined print_byte::b#5 = (const byte) sin8u_table::mid#0
Constant inlined divr16u::dividend#1 = (const word) PI2_u4f12#0
Constant inlined print_cls::sc#0 = (const byte*) SCREEN#0
Constant inlined mulu8_sel::v2#2 = (const byte) sin8s::DIV_6#0
Constant inlined mul8u::res#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined line_cursor#15 = (const byte*) SCREEN#0
Constant inlined mul8u::b#0 = ((byte))(const byte) sin8u_table::amplitude#0
Constant inlined print_str::str#4 = (const string) sin8u_table::str3
Constant inlined print_str::str#3 = (const string) sin8u_table::str2
Constant inlined print_str::str#2 = (const string) sin8u_table::str1
Constant inlined print_str::str#1 = (const string) sin8u_table::str
Constant inlined print_byte::$4 = (const string) print_byte::hextab#0
Constant inlined sin8u_table::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#7 = (const string) sin8u_table::str6
Constant inlined print_str::str#6 = (const string) sin8u_table::str5
Constant inlined print_str::str#5 = (const string) sin8u_table::str4
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @30 @end main main::@1 main::@return sin8u_table sin8u_table::@3 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@8 sin8u_table::@9 sin8u_table::@10 sin8u_table::@11 sin8u_table::@12 sin8u_table::@13 sin8u_table::@1 sin8u_table::@15 sin8u_table::@16 sin8u_table::@17 sin8u_table::@18 sin8u_table::@19 sin8u_table::@20 sin8u_table::@21 sin8u_table::@return print_ln print_ln::@1 print_ln::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 print_word print_word::@1 print_word::@return mul8su mul8su::@4 mul8su::@2 mul8su::@1 mul8su::@return mul8u mul8u::@1 mul8u::@return mul8u::@2 mul8u::@7 mul8u::@4 sin8s sin8s::@5 sin8s::@1 sin8s::@6 sin8s::@2 sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@13 sin8s::@14 sin8s::@7 sin8s::@3 sin8s::@8 sin8s::@4 sin8s::@return mulu8_sel mulu8_sel::@2 mulu8_sel::@return div16u div16u::@2 div16u::@return divr16u divr16u::@1 divr16u::@4 divr16u::@2 divr16u::@5 divr16u::@3 divr16u::@return print_cls print_cls::@1 print_cls::@return 
Added new block during phi lifting sin8u_table::@22(between sin8u_table::@21 and sin8u_table::@1)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting mul8su::@5(between mul8su::@4 and mul8su::@1)
Added new block during phi lifting mul8u::@10(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting sin8s::@15(between sin8s and sin8s::@1)
Fixing phi predecessor for sin8s::isUpper#10 to new block ( sin8s -> sin8s::@15 ) during phi lifting.
Added new block during phi lifting sin8s::@16(between sin8s::@1 and sin8s::@2)
Added new block during phi lifting sin8s::@17(between sin8s::@14 and sin8s::@3)
Added new block during phi lifting sin8s::@18(between sin8s::@3 and sin8s::@4)
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Block Sequence Planned @begin @30 @end main main::@1 main::@return sin8u_table sin8u_table::@3 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@8 sin8u_table::@9 sin8u_table::@10 sin8u_table::@11 sin8u_table::@12 sin8u_table::@13 sin8u_table::@1 sin8u_table::@15 sin8u_table::@16 sin8u_table::@17 sin8u_table::@18 sin8u_table::@19 sin8u_table::@20 sin8u_table::@21 sin8u_table::@return sin8u_table::@22 print_ln print_ln::@1 print_ln::@return print_ln::@3 print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 print_word print_word::@1 print_word::@return mul8su mul8su::@4 mul8su::@2 mul8su::@1 mul8su::@return mul8su::@5 mul8u mul8u::@1 mul8u::@return mul8u::@2 mul8u::@7 mul8u::@4 mul8u::@10 sin8s sin8s::@5 sin8s::@1 sin8s::@6 sin8s::@2 sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@13 sin8s::@14 sin8s::@7 sin8s::@3 sin8s::@8 sin8s::@4 sin8s::@return sin8s::@18 sin8s::@17 sin8s::@16 sin8s::@15 mulu8_sel mulu8_sel::@2 mulu8_sel::@return div16u div16u::@2 div16u::@return divr16u divr16u::@1 divr16u::@4 divr16u::@2 divr16u::@5 divr16u::@3 divr16u::@return divr16u::@8 divr16u::@10 divr16u::@9 print_cls print_cls::@1 print_cls::@return print_cls::@3 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @30
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of sin8u_table
Adding NOP phi() at start of sin8u_table::@13
Adding NOP phi() at start of div16u
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print_cls:5 sin8u_table:7 
Calls in [sin8u_table] to div16u:10 print_str:13 print_word:16 print_str:18 print_byte:20 print_str:22 print_byte:24 print_str:26 print_byte:28 print_str:30 print_byte:32 print_ln:34 sin8s:37 mul8su:40 print_str:48 print_word:51 print_str:53 print_byte:57 print_ln:59 
Calls in [print_byte] to print_char:79 print_char:84 
Calls in [print_word] to print_byte:105 print_byte:109 
Calls in [mul8su] to mul8u:112 
Calls in [sin8s] to mulu8_sel:155 mulu8_sel:162 mulu8_sel:167 mulu8_sel:175 mulu8_sel:182 
Calls in [mulu8_sel] to mul8u:205 
Calls in [div16u] to divr16u:212 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 37 initial phi equivalence classes
Coalesced [15] print_word::w#5 ← print_word::w#0
Coalesced [17] char_cursor#94 ← char_cursor#11
Coalesced [19] char_cursor#87 ← char_cursor#2
Coalesced (already) [21] char_cursor#95 ← char_cursor#11
Coalesced (already) [23] char_cursor#88 ← char_cursor#2
Coalesced (already) [25] char_cursor#96 ← char_cursor#11
Coalesced (already) [27] char_cursor#84 ← char_cursor#2
Coalesced (already) [29] char_cursor#91 ← char_cursor#11
Coalesced (already) [31] char_cursor#85 ← char_cursor#2
Not coalescing [47] char_cursor#92 ← line_cursor#1
Coalesced [50] print_word::w#4 ← print_word::w#1
Coalesced (already) [52] char_cursor#93 ← char_cursor#11
Coalesced [55] print_byte::b#11 ← print_byte::b#6
Coalesced (already) [56] char_cursor#86 ← char_cursor#2
Coalesced [58] line_cursor#45 ← line_cursor#1
Coalesced [64] sin8u_table::x#10 ← sin8u_table::x#1
Coalesced [65] sin8u_table::sintab#23 ← sin8u_table::sintab#1
Coalesced [66] sin8u_table::i#10 ← sin8u_table::i#1
Coalesced [68] line_cursor#46 ← line_cursor#23
Coalesced (already) [73] line_cursor#47 ← line_cursor#1
Coalesced [77] print_char::ch#3 ← print_char::ch#0
Coalesced [78] char_cursor#89 ← char_cursor#73
Coalesced [82] print_char::ch#4 ← print_char::ch#1
Coalesced [83] char_cursor#90 ← char_cursor#11
Coalesced [91] print_str::str#11 ← print_str::str#10
Coalesced (already) [92] char_cursor#97 ← char_cursor#78
Coalesced [99] print_str::str#12 ← print_str::str#0
Coalesced [100] char_cursor#98 ← char_cursor#1
Coalesced [103] print_byte::b#9 ← print_byte::b#0
Coalesced (already) [104] char_cursor#82 ← char_cursor#2
Coalesced [107] print_byte::b#10 ← print_byte::b#1
Coalesced (already) [108] char_cursor#83 ← char_cursor#11
Coalesced [119] mul8su::m#4 ← mul8su::m#1
Coalesced [122] mul8su::m#5 ← mul8su::m#0
Coalesced [125] mul8u::a#10 ← mul8u::a#6
Coalesced [126] mul8u::mb#6 ← mul8u::mb#0
Coalesced [133] mul8u::res#9 ← mul8u::res#1
Coalesced [137] mul8u::a#11 ← mul8u::a#0
Coalesced [138] mul8u::res#7 ← mul8u::res#6
Coalesced [139] mul8u::mb#7 ← mul8u::mb#1
Coalesced (already) [140] mul8u::res#8 ← mul8u::res#2
Coalesced [143] sin8s::x#9 ← sin8s::x#0
Coalesced [147] sin8s::x#11 ← sin8s::x#1
Coalesced [153] mulu8_sel::v1#10 ← mulu8_sel::v1#0
Coalesced [154] mulu8_sel::v2#9 ← mulu8_sel::v2#0
Coalesced [160] mulu8_sel::v1#6 ← mulu8_sel::v1#1
Coalesced [161] mulu8_sel::v2#6 ← mulu8_sel::v2#1
Coalesced [166] mulu8_sel::v1#7 ← mulu8_sel::v1#2
Coalesced [173] mulu8_sel::v1#8 ← mulu8_sel::v1#3
Coalesced [174] mulu8_sel::v2#7 ← mulu8_sel::v2#3
Coalesced [180] mulu8_sel::v1#9 ← mulu8_sel::v1#4
Coalesced [181] mulu8_sel::v2#8 ← mulu8_sel::v2#4
Coalesced [189] sin8s::usinx#9 ← sin8s::usinx#2
Coalesced [193] sin8s::return#6 ← sin8s::sinx#1
Coalesced [197] sin8s::usinx#8 ← sin8s::usinx#1
Coalesced [198] sin8s::x#10 ← sin8s::x#4
Coalesced [199] sin8s::x#8 ← sin8s::x#2
Coalesced [203] mul8u::b#3 ← mul8u::b#1
Coalesced [204] mul8u::a#9 ← mul8u::a#2
Coalesced [223] divr16u::rem#13 ← divr16u::rem#1
Coalesced [230] divr16u::rem#15 ← divr16u::rem#2
Coalesced [231] divr16u::return#6 ← divr16u::quotient#2
Coalesced [236] divr16u::rem#11 ← divr16u::rem#10
Coalesced [237] divr16u::dividend#8 ← divr16u::dividend#0
Coalesced [238] divr16u::quotient#9 ← divr16u::return#0
Coalesced [239] divr16u::i#7 ← divr16u::i#1
Coalesced [240] divr16u::rem#14 ← divr16u::rem#5
Coalesced [241] divr16u::return#5 ← divr16u::quotient#1
Coalesced [242] divr16u::rem#12 ← divr16u::rem#0
Coalesced [249] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 26 phi equivalence classes
Culled Empty Block (label) sin8u_table::@22
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) mul8su::@5
Culled Empty Block (label) mul8u::@10
Culled Empty Block (label) sin8s::@17
Culled Empty Block (label) sin8s::@16
Culled Empty Block (label) sin8s::@15
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) print_cls::@3
Block Sequence Planned @begin @30 @end main main::@1 main::@return sin8u_table sin8u_table::@3 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@8 sin8u_table::@9 sin8u_table::@10 sin8u_table::@11 sin8u_table::@12 sin8u_table::@13 sin8u_table::@1 sin8u_table::@15 sin8u_table::@16 sin8u_table::@17 sin8u_table::@18 sin8u_table::@19 sin8u_table::@20 sin8u_table::@21 sin8u_table::@return print_ln print_ln::@1 print_ln::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 print_word print_word::@1 print_word::@return mul8su mul8su::@4 mul8su::@2 mul8su::@1 mul8su::@return mul8u mul8u::@1 mul8u::@return mul8u::@2 mul8u::@7 mul8u::@4 sin8s sin8s::@5 sin8s::@1 sin8s::@6 sin8s::@2 sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@13 sin8s::@14 sin8s::@7 sin8s::@3 sin8s::@8 sin8s::@4 sin8s::@return sin8s::@18 mulu8_sel mulu8_sel::@2 mulu8_sel::@return div16u div16u::@2 div16u::@return divr16u divr16u::@1 divr16u::@4 divr16u::@2 divr16u::@5 divr16u::@3 divr16u::@return print_cls print_cls::@1 print_cls::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @30
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of sin8u_table
Adding NOP phi() at start of sin8u_table::@5
Adding NOP phi() at start of sin8u_table::@6
Adding NOP phi() at start of sin8u_table::@7
Adding NOP phi() at start of sin8u_table::@8
Adding NOP phi() at start of sin8u_table::@9
Adding NOP phi() at start of sin8u_table::@10
Adding NOP phi() at start of sin8u_table::@11
Adding NOP phi() at start of sin8u_table::@12
Adding NOP phi() at start of sin8u_table::@13
Adding NOP phi() at start of sin8u_table::@18
Adding NOP phi() at start of sin8u_table::@20
Adding NOP phi() at start of div16u
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of print_cls
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@30
@30: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @30
  [3] phi() [ ] ( )
main: scope:[main]  from @30
  [4] phi() [ ] ( main:2 [ ] )
  [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ] ( main:2 [ ] )
  [7] call sin8u_table param-assignment [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return  [ ] ( main:2 [ ] )
  to:@return
sin8u_table: scope:[sin8u_table]  from main::@1
  [9] phi() [ ] ( main:2::sin8u_table:7 [ ] )
  [10] call div16u param-assignment [ div16u::return#0 ] ( main:2::sin8u_table:7 [ div16u::return#0 ] )
  [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] )
  to:sin8u_table::@3
sin8u_table::@3: scope:[sin8u_table]  from sin8u_table
  [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] )
  [13] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  to:sin8u_table::@4
sin8u_table::@4: scope:[sin8u_table]  from sin8u_table::@3
  [14] (word) print_word::w#0 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] )
  [15] call print_word param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  to:sin8u_table::@5
sin8u_table::@5: scope:[sin8u_table]  from sin8u_table::@4
  [16] phi() [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  [17] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  to:sin8u_table::@6
sin8u_table::@6: scope:[sin8u_table]  from sin8u_table::@5
  [18] phi() [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  [19] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table::@6
  [20] phi() [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  [21] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  [22] phi() [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  [23] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  [24] phi() [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  [25] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  [26] phi() [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  [27] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  [28] phi() [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  [29] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  [30] phi() [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  [31] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@12
  [32] phi() [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  [33] call print_ln param-assignment [ sin8u_table::step#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 line_cursor#1 ] )
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@13 sin8u_table::@21
  [34] (word) sin8u_table::i#2 ← phi( sin8u_table::@13/(byte/signed byte/word/signed word/dword/signed dword) 0 sin8u_table::@21/(word) sin8u_table::i#1 ) [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 ] )
  [34] (byte*) sin8u_table::sintab#2 ← phi( sin8u_table::@13/(const byte[20]) main::sintab#0 sin8u_table::@21/(byte*) sin8u_table::sintab#1 ) [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 ] )
  [34] (word) sin8u_table::x#2 ← phi( sin8u_table::@13/(byte/signed byte/word/signed word/dword/signed dword) 0 sin8u_table::@21/(word) sin8u_table::x#1 ) [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 ] )
  [35] (word) sin8s::x#2 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] )
  [36] call sin8s param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#0 line_cursor#1 ] )
  [37] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#2 line_cursor#1 ] )
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@1
  [38] (signed byte) mul8su::a#0 ← (signed byte) sin8s::return#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::a#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::a#0 line_cursor#1 ] )
  [39] call mul8su param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::m#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::m#2 line_cursor#1 ] )
  [40] (signed word) mul8su::return#2 ← (signed word)(word) mul8su::m#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] )
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  [41] (signed word~) sin8u_table::$17 ← (signed word) mul8su::return#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] )
  [42] (byte~) sin8u_table::$18 ← > (signed word~) sin8u_table::$17 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$18 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$18 line_cursor#1 ] )
  [43] (byte) sin8u_table::sinval#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$18 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] )
  [44] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinval#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] )
  [45] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 ] )
  [46] (byte*~) char_cursor#92 ← (byte*) line_cursor#1 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] )
  [47] call print_str param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  [48] (word) print_word::w#1 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] )
  [49] call print_word param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  [50] phi() [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  [51] call print_str param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@18
  [52] (byte) print_byte::b#6 ← (byte) sin8u_table::sinval#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#6 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#6 char_cursor#2 ] )
  [53] call print_byte param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] )
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  [54] phi() [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] )
  [55] call print_ln param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] )
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  [56] (word) sin8u_table::x#1 ← (word) sin8u_table::x#2 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] )
  [57] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#2 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] )
  [58] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] )
  to:sin8u_table::@return
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@21
  [59] return  [ ] ( main:2::sin8u_table:7 [ ] )
  to:@return
print_ln: scope:[print_ln]  from sin8u_table::@13 sin8u_table::@20
  [60] (byte*) line_cursor#23 ← phi( sin8u_table::@13/(const byte*) SCREEN#0 sin8u_table::@20/(byte*) line_cursor#1 ) [ line_cursor#23 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#23 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#23 char_cursor#11 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [61] (byte*) line_cursor#12 ← phi( print_ln/(byte*) line_cursor#23 print_ln::@1/(byte*) line_cursor#1 ) [ line_cursor#12 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#12 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#12 char_cursor#11 ] )
  [62] (byte*) line_cursor#1 ← (byte*) line_cursor#12 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] )
  [63] if((byte*) line_cursor#1<(byte*) char_cursor#11) goto print_ln::@1 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [64] return  [ line_cursor#1 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] )
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@19 sin8u_table::@6 sin8u_table::@8
  [65] (byte*) char_cursor#73 ← phi( print_word/(byte*) char_cursor#2 print_word::@1/(byte*) char_cursor#11 sin8u_table::@10/(byte*) char_cursor#2 sin8u_table::@12/(byte*) char_cursor#2 sin8u_table::@19/(byte*) char_cursor#2 sin8u_table::@6/(byte*) char_cursor#2 sin8u_table::@8/(byte*) char_cursor#2 ) [ print_byte::b#7 char_cursor#73 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#73 ] )
  [65] (byte) print_byte::b#7 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 sin8u_table::@10/(const byte) sin8u_table::amplitude#0 sin8u_table::@12/(const byte) sin8u_table::mid#0 sin8u_table::@19/(byte) print_byte::b#6 sin8u_table::@6/(const byte) sin8u_table::min#0 sin8u_table::@8/(const byte) sin8u_table::max#0 ) [ print_byte::b#7 char_cursor#73 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#73 ] )
  [66] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#73 print_byte::$0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#73 print_byte::$0 ] )
  [67] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#73 print_char::ch#0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#73 print_char::ch#0 ] )
  [68] call print_char param-assignment [ char_cursor#11 print_byte::b#7 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::b#7 ] )
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [69] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#11 print_byte::$2 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::$2 ] )
  [70] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#11 print_char::ch#1 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_char::ch#1 ] )
  [71] call print_char param-assignment [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [72] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  [73] (byte*) char_cursor#46 ← phi( print_byte/(byte*) char_cursor#73 print_byte::@1/(byte*) char_cursor#11 ) [ print_char::ch#2 char_cursor#46 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_char::ch#2 char_cursor#46 ] )
  [73] (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 ) [ print_char::ch#2 char_cursor#46 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 print_char::ch#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_char::ch#2 char_cursor#46 ] )
  [74] *((byte*) char_cursor#46) ← (byte) print_char::ch#2 [ char_cursor#46 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#46 ] )
  [75] (byte*) char_cursor#11 ← ++ (byte*) char_cursor#46 [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [76] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  to:@return
print_str: scope:[print_str]  from sin8u_table::@11 sin8u_table::@16 sin8u_table::@18 sin8u_table::@3 sin8u_table::@5 sin8u_table::@7 sin8u_table::@9
  [77] (byte*) char_cursor#78 ← phi( sin8u_table::@11/(byte*) char_cursor#11 sin8u_table::@16/(byte*~) char_cursor#92 sin8u_table::@18/(byte*) char_cursor#11 sin8u_table::@3/(const byte*) SCREEN#0 sin8u_table::@5/(byte*) char_cursor#11 sin8u_table::@7/(byte*) char_cursor#11 sin8u_table::@9/(byte*) char_cursor#11 ) [ print_str::str#10 char_cursor#78 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#10 char_cursor#78 ] )
  [77] (byte*) print_str::str#10 ← phi( sin8u_table::@11/(const string) sin8u_table::str4 sin8u_table::@16/(const string) sin8u_table::str5 sin8u_table::@18/(const string) sin8u_table::str6 sin8u_table::@3/(const string) sin8u_table::str sin8u_table::@5/(const string) sin8u_table::str1 sin8u_table::@7/(const string) sin8u_table::str2 sin8u_table::@9/(const string) sin8u_table::str3 ) [ print_str::str#10 char_cursor#78 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#10 char_cursor#78 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#10 char_cursor#78 ] )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [78] (byte*) char_cursor#2 ← phi( print_str/(byte*) char_cursor#78 print_str::@2/(byte*) char_cursor#1 ) [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] )
  [78] (byte*) print_str::str#8 ← phi( print_str/(byte*) print_str::str#10 print_str::@2/(byte*) print_str::str#0 ) [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] )
  [79] if(*((byte*) print_str::str#8)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] )
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [80] return  [ char_cursor#2 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [81] *((byte*) char_cursor#2) ← *((byte*) print_str::str#8) [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] )
  [82] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#2 [ print_str::str#8 char_cursor#1 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#8 char_cursor#1 ] )
  [83] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#8 [ print_str::str#0 char_cursor#1 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#0 char_cursor#1 ] )
  to:print_str::@1
print_word: scope:[print_word]  from sin8u_table::@17 sin8u_table::@4
  [84] (word) print_word::w#2 ← phi( sin8u_table::@17/(word) print_word::w#1 sin8u_table::@4/(word) print_word::w#0 ) [ char_cursor#2 print_word::w#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#2 print_word::w#2 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_word::w#2 ] )
  [85] (byte) print_byte::b#0 ← > (word) print_word::w#2 [ char_cursor#2 print_byte::b#0 print_word::w#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#2 print_byte::b#0 print_word::w#2 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_byte::b#0 print_word::w#2 ] )
  [86] call print_byte param-assignment [ char_cursor#11 print_word::w#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 print_word::w#2 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_word::w#2 ] )
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [87] (byte) print_byte::b#1 ← < (word) print_word::w#2 [ char_cursor#11 print_byte::b#1 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 print_byte::b#1 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::b#1 ] )
  [88] call print_byte param-assignment [ char_cursor#11 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [89] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  to:@return
mul8su: scope:[mul8su]  from sin8u_table::@15
  [90] (byte~) mul8u::a#8 ← (byte)(signed byte) mul8su::a#0 [ mul8su::a#0 mul8u::a#8 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#8 ] )
  [91] call mul8u param-assignment [ mul8su::a#0 mul8u::res#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 ] )
  [92] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::return#2 ] )
  to:mul8su::@4
mul8su::@4: scope:[mul8su]  from mul8su
  [93] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8su::m#0 ] )
  [94] if((signed byte) mul8su::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8su::@1 [ mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 ] )
  to:mul8su::@2
mul8su::@2: scope:[mul8su]  from mul8su::@4
  [95] (byte~) mul8su::$6 ← > (word) mul8su::m#0 [ mul8su::m#0 mul8su::$6 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$6 ] )
  [96] (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 ← (byte~) mul8su::$6 - ((byte))(const byte) sin8u_table::amplitude#0 [ mul8su::m#0 mul8su::$10 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$10 ] )
  [97] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 [ mul8su::m#1 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#1 ] )
  to:mul8su::@1
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@4
  [98] (word) mul8su::m#2 ← phi( mul8su::@2/(word) mul8su::m#1 mul8su::@4/(word) mul8su::m#0 ) [ mul8su::m#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#2 ] )
  to:mul8su::@return
mul8su::@return: scope:[mul8su]  from mul8su::@1
  [99] return  [ mul8su::m#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#2 ] )
  to:@return
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  [100] (byte) mul8u::a#6 ← phi( mul8su/(byte~) mul8u::a#8 mulu8_sel/(byte) mul8u::a#2 ) [ mul8u::b#2 mul8u::a#6 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::b#2 mul8u::a#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::b#2 mul8u::a#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::b#2 mul8u::a#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::b#2 mul8u::a#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::b#2 mul8u::a#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::b#2 mul8u::a#6 ] )
  [100] (byte) mul8u::b#2 ← phi( mul8su/((byte))(const byte) sin8u_table::amplitude#0 mulu8_sel/(byte) mul8u::b#1 ) [ mul8u::b#2 mul8u::a#6 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::b#2 mul8u::a#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::b#2 mul8u::a#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::b#2 mul8u::a#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::b#2 mul8u::a#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::b#2 mul8u::a#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::b#2 mul8u::a#6 ] )
  [101] (word) mul8u::mb#0 ← ((word)) (byte) mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] )
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  [102] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 ) [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] )
  [102] (word) mul8u::res#2 ← phi( mul8u/(byte/signed byte/word/signed word/dword/signed dword) 0 mul8u::@4/(word) mul8u::res#6 ) [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] )
  [102] (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@4/(byte) mul8u::a#0 ) [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] )
  [103] if((byte) mul8u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@2 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] )
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [104] return  [ mul8u::res#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 ] )
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [105] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] )
  [106] if((byte~) mul8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@4 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] )
  to:mul8u::@7
mul8u::@7: scope:[mul8u]  from mul8u::@2
  [107] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] )
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@7
  [108] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@7/(word) mul8u::res#1 ) [ mul8u::a#3 mul8u::mb#2 mul8u::res#6 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#6 ] )
  [109] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] )
  [110] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] )
  to:mul8u::@1
sin8s: scope:[sin8s]  from sin8u_table::@1
  [111] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#2 ] )
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [112] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#0 ] )
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [113] (byte) sin8s::isUpper#10 ← phi( sin8s/(byte/signed byte/word/signed word/dword/signed dword) 0 sin8s::@5/(byte/signed byte/word/signed word/dword/signed dword) 1 ) [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] )
  [113] (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#2 sin8s::@5/(word) sin8s::x#0 ) [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] )
  [114] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] )
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [115] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] )
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [116] (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#1 ) [ sin8s::isUpper#10 sin8s::x#6 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x#6 ] )
  [117] (word~) sin8s::$6 ← (word) sin8s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin8s::isUpper#10 sin8s::$6 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::$6 ] )
  [118] (byte) sin8s::x1#0 ← > (word~) sin8s::$6 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 ] )
  [119] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 ] )
  [120] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 mulu8_sel::v2#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 mulu8_sel::v2#0 ] )
  [121] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] )
  [122] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#0 ] )
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@2
  [123] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x2#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x2#0 ] )
  [124] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 ] )
  [125] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 mulu8_sel::v2#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 mulu8_sel::v2#1 ] )
  [126] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] )
  [127] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#1 ] )
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [128] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 ] )
  [129] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::v1#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::v1#2 ] )
  [130] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::x3#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::x3#0 ] )
  [131] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#2 ] )
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [132] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::x3_6#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::x3_6#0 ] )
  [133] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] )
  [134] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 ] )
  [135] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 mulu8_sel::v2#3 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 mulu8_sel::v2#3 ] )
  [136] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::usinx#0 ] )
  [137] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#10 ] )
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [138] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 sin8s::x4#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 sin8s::x4#0 ] )
  [139] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#4 ] )
  [140] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::v1#4 mulu8_sel::v2#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::v1#4 mulu8_sel::v2#4 ] )
  [141] call mulu8_sel param-assignment [ sin8s::isUpper#10 mulu8_sel::return#12 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 mulu8_sel::return#12 sin8s::usinx#0 ] )
  [142] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#11 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#11 ] )
  to:sin8s::@14
sin8s::@14: scope:[sin8s]  from sin8s::@13
  [143] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5#0 ] )
  [144] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] )
  [145] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] )
  [146] if((byte) sin8s::usinx#1<(byte/word/signed word/dword/signed dword) 128) goto sin8s::@3 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] )
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@14
  [147] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 [ sin8s::isUpper#10 sin8s::usinx#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#2 ] )
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@14 sin8s::@7
  [148] (byte) sin8s::usinx#4 ← phi( sin8s::@14/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 ) [ sin8s::isUpper#10 sin8s::usinx#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#4 ] )
  [149] if((byte) sin8s::isUpper#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin8s::@18 [ sin8s::usinx#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::usinx#4 ] )
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [150] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::sinx#1 ] )
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@18 sin8s::@8
  [151] (signed byte) sin8s::return#0 ← phi( sin8s::@18/(signed byte~) sin8s::return#5 sin8s::@8/(signed byte) sin8s::sinx#1 ) [ sin8s::return#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::return#0 ] )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [152] return  [ sin8s::return#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::return#0 ] )
  to:@return
sin8s::@18: scope:[sin8s]  from sin8s::@3
  [153] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 [ sin8s::return#5 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::return#5 ] )
  to:sin8s::@4
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@13 sin8s::@2
  [154] (byte) mulu8_sel::select#5 ← phi( sin8s::@10/(byte/signed byte/word/signed word/dword/signed dword) 1 sin8s::@11/(byte/signed byte/word/signed word/dword/signed dword) 1 sin8s::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 sin8s::@13/(byte/signed byte/word/signed word/dword/signed dword) 0 sin8s::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] )
  [154] (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(byte) mulu8_sel::v2#1 sin8s::@11/(const byte) sin8s::DIV_6#0 sin8s::@12/(byte) mulu8_sel::v2#3 sin8s::@13/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 ) [ mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] )
  [154] (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#1 sin8s::@11/(byte) mulu8_sel::v1#2 sin8s::@12/(byte) mulu8_sel::v1#3 sin8s::@13/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 ) [ mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::v1#5 mulu8_sel::v2#5 mulu8_sel::select#5 ] )
  [155] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5 [ mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] )
  [156] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 [ mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] )
  [157] call mul8u param-assignment [ mul8u::res#2 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::res#2 mulu8_sel::select#5 ] )
  [158] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] )
  to:mulu8_sel::@2
mulu8_sel::@2: scope:[mulu8_sel]  from mulu8_sel
  [159] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] )
  [160] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] )
  [161] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] )
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@2
  [162] return  [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] )
  to:@return
div16u: scope:[div16u]  from sin8u_table
  [163] phi() [ ] ( main:2::sin8u_table:7::div16u:10 [ ] )
  [164] call divr16u param-assignment [ divr16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#0 ] )
  [165] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] )
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u
  [166] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] )
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@2
  [167] return  [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] )
  to:@return
divr16u: scope:[divr16u]  from div16u
  [168] phi() [ ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ ] )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [169] (byte) divr16u::i#2 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(byte) divr16u::i#1 ) [ divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [169] (word) divr16u::quotient#3 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::return#0 ) [ divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [169] (word) divr16u::dividend#2 ← phi( divr16u/(const word) PI2_u4f12#0 divr16u::@3/(word) divr16u::dividend#0 ) [ divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [169] (word) divr16u::rem#4 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::rem#10 ) [ divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [170] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] )
  [171] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] )
  [172] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] )
  [173] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] )
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [174] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] )
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [175] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 ) [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#5 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#5 ] )
  [176] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] )
  [177] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] )
  [178] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] )
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [179] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] )
  [180] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] )
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [181] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 ) [ divr16u::return#0 divr16u::i#2 divr16u::rem#10 divr16u::dividend#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 divr16u::i#2 divr16u::rem#10 divr16u::dividend#0 ] )
  [181] (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 ) [ divr16u::return#0 divr16u::i#2 divr16u::rem#10 divr16u::dividend#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 divr16u::i#2 divr16u::rem#10 divr16u::dividend#0 ] )
  [182] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] )
  [183] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] )
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [184] return  [ divr16u::return#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 ] )
  to:@return
print_cls: scope:[print_cls]  from main
  [185] phi() [ ] ( main:2::print_cls:5 [ ] )
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [186] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) SCREEN#0 print_cls::@1/(byte*) print_cls::sc#1 ) [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [187] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [188] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  [189] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [190] return  [ ] ( main:2::print_cls:5 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@30 dominated by  @30 @begin 
@end dominated by  @end @30 @begin 
main dominated by  main @30 @begin 
main::@1 dominated by  main main::@1 @30 @begin 
main::@return dominated by  main main::@1 @30 @begin main::@return 
sin8u_table dominated by  main main::@1 @30 @begin sin8u_table 
sin8u_table::@3 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table 
sin8u_table::@4 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@4 sin8u_table 
sin8u_table::@5 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@4 sin8u_table::@5 sin8u_table 
sin8u_table::@6 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table 
sin8u_table::@7 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table 
sin8u_table::@8 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@8 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table 
sin8u_table::@9 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table 
sin8u_table::@10 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table 
sin8u_table::@11 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@11 sin8u_table 
sin8u_table::@12 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table 
sin8u_table::@13 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8u_table::@1 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8u_table::@15 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@15 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8u_table::@16 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@16 sin8u_table::@9 sin8u_table::@15 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8u_table::@17 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@16 sin8u_table::@9 sin8u_table::@15 sin8u_table::@17 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8u_table::@18 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@16 sin8u_table::@9 sin8u_table::@15 sin8u_table::@18 sin8u_table::@17 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8u_table::@19 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@16 sin8u_table::@9 sin8u_table::@15 sin8u_table::@18 sin8u_table::@17 sin8u_table::@4 sin8u_table::@5 sin8u_table::@19 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8u_table::@20 dominated by  main main::@1 @30 @begin sin8u_table::@20 sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@16 sin8u_table::@9 sin8u_table::@15 sin8u_table::@18 sin8u_table::@17 sin8u_table::@4 sin8u_table::@5 sin8u_table::@19 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8u_table::@21 dominated by  main main::@1 @30 sin8u_table::@21 @begin sin8u_table::@20 sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@16 sin8u_table::@9 sin8u_table::@15 sin8u_table::@18 sin8u_table::@17 sin8u_table::@4 sin8u_table::@5 sin8u_table::@19 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8u_table::@return dominated by  main sin8u_table::@return main::@1 @30 sin8u_table::@21 @begin sin8u_table::@20 sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@16 sin8u_table::@9 sin8u_table::@15 sin8u_table::@18 sin8u_table::@17 sin8u_table::@4 sin8u_table::@5 sin8u_table::@19 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
print_ln dominated by  main main::@1 @30 @begin print_ln sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
print_ln::@1 dominated by  print_ln::@1 main main::@1 @30 @begin print_ln sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
print_ln::@return dominated by  print_ln::@1 main print_ln::@return main::@1 @30 @begin print_ln sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
print_byte dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@4 sin8u_table print_byte 
print_byte::@1 dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table::@4 sin8u_table print_byte::@1 print_byte 
print_byte::@return dominated by  main main::@1 @30 @begin print_byte::@return sin8u_table::@3 sin8u_table::@4 sin8u_table print_byte::@1 print_byte 
print_char dominated by  main print_char main::@1 @30 @begin sin8u_table::@3 sin8u_table::@4 sin8u_table print_byte 
print_char::@return dominated by  main print_char main::@1 @30 print_char::@return @begin sin8u_table::@3 sin8u_table::@4 sin8u_table print_byte 
print_str dominated by  main main::@1 @30 @begin sin8u_table::@3 sin8u_table print_str 
print_str::@1 dominated by  main main::@1 @30 @begin sin8u_table::@3 print_str::@1 sin8u_table print_str 
print_str::@return dominated by  main main::@1 @30 @begin sin8u_table::@3 print_str::@return print_str::@1 sin8u_table print_str 
print_str::@2 dominated by  main main::@1 @30 @begin sin8u_table::@3 print_str::@1 print_str::@2 sin8u_table print_str 
print_word dominated by  main print_word main::@1 @30 @begin sin8u_table::@3 sin8u_table::@4 sin8u_table 
print_word::@1 dominated by  main print_word main::@1 @30 @begin sin8u_table::@3 sin8u_table::@4 sin8u_table print_word::@1 
print_word::@return dominated by  main print_word main::@1 @30 @begin sin8u_table::@3 print_word::@return sin8u_table::@4 sin8u_table print_word::@1 
mul8su dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@15 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mul8su 
mul8su::@4 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@15 mul8su::@4 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mul8su 
mul8su::@2 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@15 mul8su::@2 mul8su::@4 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mul8su 
mul8su::@1 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 mul8su::@1 sin8u_table::@8 sin8u_table::@9 sin8u_table::@15 mul8su::@4 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mul8su 
mul8su::@return dominated by  mul8su::@return main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 mul8su::@1 sin8u_table::@8 sin8u_table::@9 sin8u_table::@15 mul8su::@4 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mul8su 
mul8u dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 mul8u sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
mul8u::@1 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 mul8u sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mul8u::@1 
mul8u::@return dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 mul8u sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mul8u::@return mul8u::@1 
mul8u::@2 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 mul8u sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mul8u::@2 mul8u::@1 
mul8u::@7 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 mul8u sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mul8u::@7 mul8u::@2 mul8u::@1 
mul8u::@4 dominated by  main main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 mul8u sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mul8u::@2 mul8u::@1 mul8u::@4 
sin8s dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8s::@5 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8s::@5 sin8u_table 
sin8s::@1 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8s::@6 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8s::@6 sin8u_table 
sin8s::@2 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table 
sin8s::@10 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table sin8s::@10 
sin8s::@11 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table sin8s::@11 sin8s::@10 
sin8s::@12 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table sin8s::@12 sin8s::@11 sin8s::@10 
sin8s::@13 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table sin8s::@13 sin8s::@12 sin8s::@11 sin8s::@10 
sin8s::@14 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8s::@14 sin8u_table sin8s::@13 sin8s::@12 sin8s::@11 sin8s::@10 
sin8s::@7 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8s::@14 sin8u_table sin8s::@7 sin8s::@13 sin8s::@12 sin8s::@11 sin8s::@10 
sin8s::@3 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8s::@3 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8s::@14 sin8u_table sin8s::@13 sin8s::@12 sin8s::@11 sin8s::@10 
sin8s::@8 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8s::@3 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8s::@14 sin8u_table sin8s::@8 sin8s::@13 sin8s::@12 sin8s::@11 sin8s::@10 
sin8s::@4 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8s::@4 sin8s::@3 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8s::@14 sin8u_table sin8s::@13 sin8s::@12 sin8s::@11 sin8s::@10 
sin8s::@return dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8s::@4 sin8s::@3 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8s::@14 sin8u_table sin8s::@13 sin8s::@12 sin8s::@11 sin8s::@10 sin8s::@return 
sin8s::@18 dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8s::@3 sin8s::@18 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8s::@14 sin8u_table sin8s::@13 sin8s::@12 sin8s::@11 sin8s::@10 
mulu8_sel dominated by  main sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mulu8_sel 
mulu8_sel::@2 dominated by  main mulu8_sel::@2 sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mulu8_sel 
mulu8_sel::@return dominated by  main mulu8_sel::@2 sin8s main::@1 @30 @begin sin8u_table::@1 sin8u_table::@3 mulu8_sel::@return sin8u_table::@8 sin8u_table::@9 sin8u_table::@4 sin8u_table::@5 sin8u_table::@6 sin8u_table::@7 sin8s::@2 sin8s::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@11 sin8u_table::@13 sin8u_table mulu8_sel 
div16u dominated by  main main::@1 @30 div16u @begin sin8u_table 
div16u::@2 dominated by  main main::@1 @30 div16u @begin div16u::@2 sin8u_table 
div16u::@return dominated by  main div16u::@return main::@1 @30 div16u @begin div16u::@2 sin8u_table 
divr16u dominated by  divr16u main main::@1 @30 div16u @begin sin8u_table 
divr16u::@1 dominated by  divr16u divr16u::@1 main main::@1 @30 div16u @begin sin8u_table 
divr16u::@4 dominated by  divr16u divr16u::@1 main divr16u::@4 main::@1 @30 div16u @begin sin8u_table 
divr16u::@2 dominated by  divr16u divr16u::@2 divr16u::@1 main main::@1 @30 div16u @begin sin8u_table 
divr16u::@5 dominated by  divr16u divr16u::@2 divr16u::@1 main divr16u::@5 main::@1 @30 div16u @begin sin8u_table 
divr16u::@3 dominated by  divr16u divr16u::@2 divr16u::@1 main divr16u::@3 main::@1 @30 div16u @begin sin8u_table 
divr16u::@return dominated by  divr16u divr16u::@2 divr16u::@1 main divr16u::@3 main::@1 @30 div16u @begin sin8u_table divr16u::@return 
print_cls dominated by  main @30 @begin print_cls 
print_cls::@1 dominated by  main @30 @begin print_cls::@1 print_cls 
print_cls::@return dominated by  main @30 @begin print_cls::@return print_cls::@1 print_cls 

NATURAL LOOPS
Found back edge: Loop head: sin8u_table::@1 tails: sin8u_table::@21 blocks: null
Found back edge: Loop head: print_ln::@1 tails: print_ln::@1 blocks: null
Found back edge: Loop head: print_str::@1 tails: print_str::@2 blocks: null
Found back edge: Loop head: mul8u::@1 tails: mul8u::@4 blocks: null
Found back edge: Loop head: divr16u::@1 tails: divr16u::@3 blocks: null
Found back edge: Loop head: print_cls::@1 tails: print_cls::@1 blocks: null
Populated: Loop head: sin8u_table::@1 tails: sin8u_table::@21 blocks: sin8u_table::@21 sin8u_table::@20 sin8u_table::@19 sin8u_table::@18 sin8u_table::@17 sin8u_table::@16 sin8u_table::@15 sin8u_table::@1 
Populated: Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Populated: Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Populated: Loop head: mul8u::@1 tails: mul8u::@4 blocks: mul8u::@4 mul8u::@2 mul8u::@7 mul8u::@1 
Populated: Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4 
Populated: Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Loop head: sin8u_table::@1 tails: sin8u_table::@21 blocks: sin8u_table::@21 sin8u_table::@20 sin8u_table::@19 sin8u_table::@18 sin8u_table::@17 sin8u_table::@16 sin8u_table::@15 sin8u_table::@1 
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Loop head: mul8u::@1 tails: mul8u::@4 blocks: mul8u::@4 mul8u::@2 mul8u::@7 mul8u::@1 
Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4 
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 0 loops in scope [main]
Found 1 loops in scope [print_cls]
  Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Found 1 loops in scope [sin8u_table]
  Loop head: sin8u_table::@1 tails: sin8u_table::@21 blocks: sin8u_table::@21 sin8u_table::@20 sin8u_table::@19 sin8u_table::@18 sin8u_table::@17 sin8u_table::@16 sin8u_table::@15 sin8u_table::@1 
Found 0 loops in scope [div16u]
Found 1 loops in scope [print_str]
  Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Found 0 loops in scope [print_word]
Found 0 loops in scope [print_byte]
Found 1 loops in scope [print_ln]
  Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Found 0 loops in scope [sin8s]
Found 0 loops in scope [mul8su]
Found 1 loops in scope [divr16u]
  Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4 
Found 0 loops in scope [print_char]
Found 0 loops in scope [mulu8_sel]
Found 1 loops in scope [mul8u]
  Loop head: mul8u::@1 tails: mul8u::@4 blocks: mul8u::@4 mul8u::@2 mul8u::@7 mul8u::@1 
Loop head: sin8u_table::@1 tails: sin8u_table::@21 blocks: sin8u_table::@21 sin8u_table::@20 sin8u_table::@19 sin8u_table::@18 sin8u_table::@17 sin8u_table::@16 sin8u_table::@15 sin8u_table::@1  depth: 1
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1  depth: 2
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1  depth: 2
Loop head: mul8u::@1 tails: mul8u::@4 blocks: mul8u::@4 mul8u::@2 mul8u::@7 mul8u::@1  depth: 2
Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4  depth: 1
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(word) PI2_u4f12
(word) PI_HALF_u4f12
(word) PI_u4f12
(byte*) SCREEN
(byte*) char_cursor
(byte*) char_cursor#1 101.0
(byte*) char_cursor#11 4.344827586206896
(byte*) char_cursor#2 16.3
(byte*) char_cursor#46 4.0
(byte*) char_cursor#73 8.333333333333334
(byte*) char_cursor#78 32.0
(byte*~) char_cursor#92 22.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 1.3333333333333333
(word) div16u::return#2 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 22.0
(byte~) divr16u::$2 22.0
(word) divr16u::dividend
(word) divr16u::dividend#0 2.75
(word) divr16u::dividend#2 4.714285714285714
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 16.5
(byte) divr16u::i#2 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 16.5
(word) divr16u::quotient#2 11.0
(word) divr16u::quotient#3 2.75
(word) divr16u::rem
(word) divr16u::rem#0 8.25
(word) divr16u::rem#1 22.0
(word) divr16u::rem#10 11.0
(word) divr16u::rem#2 22.0
(word) divr16u::rem#4 22.0
(word) divr16u::rem#5 11.0
(word) divr16u::return
(word) divr16u::return#0 7.000000000000001
(word) divr16u::return#2 4.0
(byte*) line_cursor
(byte*) line_cursor#1 11.206896551724137
(byte*) line_cursor#12 204.0
(byte*) line_cursor#23 13.0
(void()) main()
(byte[20]) main::sintab
(word) main::tabsize
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 4.0
(byte~) mul8su::$6 4.0
(signed byte) mul8su::a
(signed byte) mul8su::a#0 2.6
(byte) mul8su::b
(word) mul8su::m
(word) mul8su::m#0 2.0
(word) mul8su::m#1 4.0
(word) mul8su::m#2 1.3333333333333333
(signed word) mul8su::return
(signed word) mul8su::return#2 22.0
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 202.0
(byte) mul8u::a
(byte) mul8u::a#0 101.0
(byte) mul8u::a#2 2.0
(byte) mul8u::a#3 67.66666666666666
(byte) mul8u::a#6 3.0
(byte~) mul8u::a#8 4.0
(byte) mul8u::b
(byte) mul8u::b#1 4.0
(byte) mul8u::b#2 4.0
(word) mul8u::mb
(word) mul8u::mb#0 4.0
(word) mul8u::mb#1 202.0
(word) mul8u::mb#2 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 202.0
(word) mul8u::res#2 43.85714285714286
(word) mul8u::res#6 101.0
(word) mul8u::return
(word) mul8u::return#2 4.0
(word) mul8u::return#3 4.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 4.0
(word~) mulu8_sel::$1 4.0
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 4.0
(byte) mulu8_sel::return#1 4.0
(byte) mulu8_sel::return#10 4.0
(byte) mulu8_sel::return#11 4.0
(byte) mulu8_sel::return#12 1.714285714285714
(byte) mulu8_sel::return#2 4.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 0.3333333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 2.0
(byte) mulu8_sel::v1#1 2.0
(byte) mulu8_sel::v1#2 4.0
(byte) mulu8_sel::v1#3 2.0
(byte) mulu8_sel::v1#4 2.0
(byte) mulu8_sel::v1#5 12.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 4.0
(byte) mulu8_sel::v2#1 4.0
(byte) mulu8_sel::v2#3 4.0
(byte) mulu8_sel::v2#4 4.0
(byte) mulu8_sel::v2#5 5.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#6 22.0
(byte) print_byte::b#7 4.75
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 4.0
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 6.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(void()) print_ln()
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#10 2.0
(byte*) print_str::str#8 101.5
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#0 4.0
(word) print_word::w#1 22.0
(word) print_word::w#2 5.666666666666667
(word) rem16u
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$6 4.0
(byte) sin8s::DIV_6
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 0.05555555555555555
(signed byte) sin8s::return
(signed byte) sin8s::return#0 5.0
(signed byte) sin8s::return#2 22.0
(signed byte~) sin8s::return#5 4.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 4.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 0.3333333333333333
(byte) sin8s::usinx#1 4.0
(byte) sin8s::usinx#2 4.0
(byte) sin8s::usinx#4 2.0
(word) sin8s::x
(word) sin8s::x#0 4.0
(word) sin8s::x#1 4.0
(word) sin8s::x#2 8.5
(word) sin8s::x#4 5.0
(word) sin8s::x#6 6.0
(byte) sin8s::x1
(byte) sin8s::x1#0 0.6363636363636365
(byte) sin8s::x2
(byte) sin8s::x2#0 4.0
(byte) sin8s::x3
(byte) sin8s::x3#0 1.0
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 4.0
(byte) sin8s::x4
(byte) sin8s::x4#0 4.0
(byte) sin8s::x5
(byte) sin8s::x5#0 4.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 4.0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(signed word~) sin8u_table::$17 22.0
(byte~) sin8u_table::$18 22.0
(byte) sin8u_table::amplitude
(word) sin8u_table::i
(word) sin8u_table::i#1 16.5
(word) sin8u_table::i#2 0.9565217391304348
(byte) sin8u_table::max
(byte) sin8u_table::mid
(byte) sin8u_table::min
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#1 1.5714285714285714
(byte*) sin8u_table::sintab#2 3.0
(byte) sin8u_table::sinval
(byte) sin8u_table::sinval#0 3.666666666666667
(word) sin8u_table::step
(word) sin8u_table::step#0 0.3191489361702128
(word) sin8u_table::sum
(word) sin8u_table::tabsize
(word) sin8u_table::x
(word) sin8u_table::x#1 7.333333333333333
(word) sin8u_table::x#2 2.0

Initial phi equivalence classes
[ sin8u_table::x#2 sin8u_table::x#1 ]
[ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
[ sin8u_table::i#2 sin8u_table::i#1 ]
[ line_cursor#12 line_cursor#23 line_cursor#1 ]
[ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#6 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ char_cursor#78 char_cursor#46 char_cursor#73 char_cursor#2 char_cursor#11 char_cursor#92 char_cursor#1 ]
[ print_str::str#8 print_str::str#10 print_str::str#0 ]
[ print_word::w#2 print_word::w#1 print_word::w#0 ]
[ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
[ mul8u::b#2 mul8u::b#1 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
[ mulu8_sel::select#5 ]
[ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable div16u::return#2 to zero page equivalence class [ div16u::return#2 ]
Added variable sin8u_table::step#0 to zero page equivalence class [ sin8u_table::step#0 ]
Added variable sin8s::return#2 to zero page equivalence class [ sin8s::return#2 ]
Added variable mul8su::a#0 to zero page equivalence class [ mul8su::a#0 ]
Added variable mul8su::return#2 to zero page equivalence class [ mul8su::return#2 ]
Added variable sin8u_table::$17 to zero page equivalence class [ sin8u_table::$17 ]
Added variable sin8u_table::$18 to zero page equivalence class [ sin8u_table::$18 ]
Added variable sin8u_table::sinval#0 to zero page equivalence class [ sin8u_table::sinval#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable mul8u::return#2 to zero page equivalence class [ mul8u::return#2 ]
Added variable mul8su::$6 to zero page equivalence class [ mul8su::$6 ]
Added variable mul8su::$10 to zero page equivalence class [ mul8su::$10 ]
Added variable mul8u::$1 to zero page equivalence class [ mul8u::$1 ]
Added variable sin8s::$6 to zero page equivalence class [ sin8s::$6 ]
Added variable sin8s::x1#0 to zero page equivalence class [ sin8s::x1#0 ]
Added variable mulu8_sel::return#0 to zero page equivalence class [ mulu8_sel::return#0 ]
Added variable sin8s::x2#0 to zero page equivalence class [ sin8s::x2#0 ]
Added variable mulu8_sel::return#1 to zero page equivalence class [ mulu8_sel::return#1 ]
Added variable sin8s::x3#0 to zero page equivalence class [ sin8s::x3#0 ]
Added variable mulu8_sel::return#2 to zero page equivalence class [ mulu8_sel::return#2 ]
Added variable sin8s::x3_6#0 to zero page equivalence class [ sin8s::x3_6#0 ]
Added variable sin8s::usinx#0 to zero page equivalence class [ sin8s::usinx#0 ]
Added variable mulu8_sel::return#10 to zero page equivalence class [ mulu8_sel::return#10 ]
Added variable sin8s::x4#0 to zero page equivalence class [ sin8s::x4#0 ]
Added variable mulu8_sel::return#11 to zero page equivalence class [ mulu8_sel::return#11 ]
Added variable sin8s::x5#0 to zero page equivalence class [ sin8s::x5#0 ]
Added variable sin8s::x5_128#0 to zero page equivalence class [ sin8s::x5_128#0 ]
Added variable mul8u::return#3 to zero page equivalence class [ mul8u::return#3 ]
Added variable mulu8_sel::$0 to zero page equivalence class [ mulu8_sel::$0 ]
Added variable mulu8_sel::$1 to zero page equivalence class [ mulu8_sel::$1 ]
Added variable mulu8_sel::return#12 to zero page equivalence class [ mulu8_sel::return#12 ]
Added variable divr16u::return#2 to zero page equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to zero page equivalence class [ div16u::return#0 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Complete equivalence classes
[ sin8u_table::x#2 sin8u_table::x#1 ]
[ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
[ sin8u_table::i#2 sin8u_table::i#1 ]
[ line_cursor#12 line_cursor#23 line_cursor#1 ]
[ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#6 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ char_cursor#78 char_cursor#46 char_cursor#73 char_cursor#2 char_cursor#11 char_cursor#92 char_cursor#1 ]
[ print_str::str#8 print_str::str#10 print_str::str#0 ]
[ print_word::w#2 print_word::w#1 print_word::w#0 ]
[ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
[ mul8u::b#2 mul8u::b#1 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
[ mulu8_sel::select#5 ]
[ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ div16u::return#2 ]
[ sin8u_table::step#0 ]
[ sin8s::return#2 ]
[ mul8su::a#0 ]
[ mul8su::return#2 ]
[ sin8u_table::$17 ]
[ sin8u_table::$18 ]
[ sin8u_table::sinval#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ mul8u::return#2 ]
[ mul8su::$6 ]
[ mul8su::$10 ]
[ mul8u::$1 ]
[ sin8s::$6 ]
[ sin8s::x1#0 ]
[ mulu8_sel::return#0 ]
[ sin8s::x2#0 ]
[ mulu8_sel::return#1 ]
[ sin8s::x3#0 ]
[ mulu8_sel::return#2 ]
[ sin8s::x3_6#0 ]
[ sin8s::usinx#0 ]
[ mulu8_sel::return#10 ]
[ sin8s::x4#0 ]
[ mulu8_sel::return#11 ]
[ sin8s::x5#0 ]
[ sin8s::x5_128#0 ]
[ mul8u::return#3 ]
[ mulu8_sel::$0 ]
[ mulu8_sel::$1 ]
[ mulu8_sel::return#12 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
Allocated zp ZP_WORD:2 [ sin8u_table::x#2 sin8u_table::x#1 ]
Allocated zp ZP_WORD:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
Allocated zp ZP_WORD:6 [ sin8u_table::i#2 sin8u_table::i#1 ]
Allocated zp ZP_WORD:8 [ line_cursor#12 line_cursor#23 line_cursor#1 ]
Allocated zp ZP_BYTE:10 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#6 ]
Allocated zp ZP_BYTE:11 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
Allocated zp ZP_WORD:12 [ char_cursor#78 char_cursor#46 char_cursor#73 char_cursor#2 char_cursor#11 char_cursor#92 char_cursor#1 ]
Allocated zp ZP_WORD:14 [ print_str::str#8 print_str::str#10 print_str::str#0 ]
Allocated zp ZP_WORD:16 [ print_word::w#2 print_word::w#1 print_word::w#0 ]
Allocated zp ZP_WORD:18 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
Allocated zp ZP_BYTE:20 [ mul8u::b#2 mul8u::b#1 ]
Allocated zp ZP_BYTE:21 [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ]
Allocated zp ZP_WORD:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp ZP_WORD:24 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp ZP_BYTE:26 [ sin8s::isUpper#10 ]
Allocated zp ZP_WORD:27 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
Allocated zp ZP_BYTE:29 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
Allocated zp ZP_BYTE:30 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
Allocated zp ZP_BYTE:31 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
Allocated zp ZP_BYTE:32 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
Allocated zp ZP_BYTE:33 [ mulu8_sel::select#5 ]
Allocated zp ZP_WORD:34 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp ZP_WORD:36 [ divr16u::dividend#2 divr16u::dividend#0 ]
Allocated zp ZP_WORD:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp ZP_BYTE:40 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp ZP_WORD:41 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_WORD:43 [ div16u::return#2 ]
Allocated zp ZP_WORD:45 [ sin8u_table::step#0 ]
Allocated zp ZP_BYTE:47 [ sin8s::return#2 ]
Allocated zp ZP_BYTE:48 [ mul8su::a#0 ]
Allocated zp ZP_WORD:49 [ mul8su::return#2 ]
Allocated zp ZP_WORD:51 [ sin8u_table::$17 ]
Allocated zp ZP_BYTE:53 [ sin8u_table::$18 ]
Allocated zp ZP_BYTE:54 [ sin8u_table::sinval#0 ]
Allocated zp ZP_BYTE:55 [ print_byte::$0 ]
Allocated zp ZP_BYTE:56 [ print_byte::$2 ]
Allocated zp ZP_WORD:57 [ mul8u::return#2 ]
Allocated zp ZP_BYTE:59 [ mul8su::$6 ]
Allocated zp ZP_BYTE:60 [ mul8su::$10 ]
Allocated zp ZP_BYTE:61 [ mul8u::$1 ]
Allocated zp ZP_WORD:62 [ sin8s::$6 ]
Allocated zp ZP_BYTE:64 [ sin8s::x1#0 ]
Allocated zp ZP_BYTE:65 [ mulu8_sel::return#0 ]
Allocated zp ZP_BYTE:66 [ sin8s::x2#0 ]
Allocated zp ZP_BYTE:67 [ mulu8_sel::return#1 ]
Allocated zp ZP_BYTE:68 [ sin8s::x3#0 ]
Allocated zp ZP_BYTE:69 [ mulu8_sel::return#2 ]
Allocated zp ZP_BYTE:70 [ sin8s::x3_6#0 ]
Allocated zp ZP_BYTE:71 [ sin8s::usinx#0 ]
Allocated zp ZP_BYTE:72 [ mulu8_sel::return#10 ]
Allocated zp ZP_BYTE:73 [ sin8s::x4#0 ]
Allocated zp ZP_BYTE:74 [ mulu8_sel::return#11 ]
Allocated zp ZP_BYTE:75 [ sin8s::x5#0 ]
Allocated zp ZP_BYTE:76 [ sin8s::x5_128#0 ]
Allocated zp ZP_WORD:77 [ mul8u::return#3 ]
Allocated zp ZP_WORD:79 [ mulu8_sel::$0 ]
Allocated zp ZP_WORD:81 [ mulu8_sel::$1 ]
Allocated zp ZP_BYTE:83 [ mulu8_sel::return#12 ]
Allocated zp ZP_WORD:84 [ divr16u::return#2 ]
Allocated zp ZP_WORD:86 [ div16u::return#0 ]
Allocated zp ZP_BYTE:88 [ divr16u::$1 ]
Allocated zp ZP_BYTE:89 [ divr16u::$2 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const PI2_u4f12 = $6488
  .const PI_u4f12 = $3244
  .const PI_HALF_u4f12 = $1922
  .label SCREEN = $400
  .label char_cursor = $c
  .label line_cursor = 8
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @30 [phi:@begin->@30]
b30_from_bbegin:
  jmp b30
//SEG4 @30
b30:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @30 to main [phi:@30->main]
main_from_b30:
  jsr main
//SEG7 [3] phi from @30 to @end [phi:@30->@end]
bend_from_b30:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label tabsize = $14
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [185] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call sin8u_table param-assignment [ ] ( main:2 [ ] )
  //SEG15 [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
  sin8u_table_from_b1:
    jsr sin8u_table
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [8] return  [ ] ( main:2 [ ] )
    rts
    sintab: .fill $14, 0
}
//SEG18 sin8u_table
sin8u_table: {
    .const min = $a
    .const max = $ff
    .label amplitude = max-min
    .const sum = min+max
    .const mid = $ff & sum>>1
    .label _17 = $33
    .label _18 = $35
    .label step = $2d
    .label sinval = $36
    .label sintab = 4
    .label x = 2
    .label i = 6
  //SEG19 [10] call div16u param-assignment [ div16u::return#0 ] ( main:2::sin8u_table:7 [ div16u::return#0 ] )
  //SEG20 [163] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
  div16u_from_sin8u_table:
    jsr div16u
  //SEG21 [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] ) -- vwuz1=vwuz2 
    lda div16u.return
    sta div16u.return_2
    lda div16u.return+1
    sta div16u.return_2+1
    jmp b3
  //SEG22 sin8u_table::@3
  b3:
  //SEG23 [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] ) -- vwuz1=vwuz2 
    lda div16u.return_2
    sta step
    lda div16u.return_2+1
    sta step+1
  //SEG24 [13] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG25 [77] phi from sin8u_table::@3 to print_str [phi:sin8u_table::@3->print_str]
  print_str_from_b3:
  //SEG26 [77] phi (byte*) char_cursor#78 = (const byte*) SCREEN#0 [phi:sin8u_table::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta char_cursor
    lda #>SCREEN
    sta char_cursor+1
  //SEG27 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str [phi:sin8u_table::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b4
  //SEG28 sin8u_table::@4
  b4:
  //SEG29 [14] (word) print_word::w#0 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] ) -- vwuz1=vwuz2 
    lda step
    sta print_word.w
    lda step+1
    sta print_word.w+1
  //SEG30 [15] call print_word param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG31 [84] phi from sin8u_table::@4 to print_word [phi:sin8u_table::@4->print_word]
  print_word_from_b4:
  //SEG32 [84] phi (word) print_word::w#2 = (word) print_word::w#0 [phi:sin8u_table::@4->print_word#0] -- register_copy 
    jsr print_word
  //SEG33 [16] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
  b5_from_b4:
    jmp b5
  //SEG34 sin8u_table::@5
  b5:
  //SEG35 [17] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG36 [77] phi from sin8u_table::@5 to print_str [phi:sin8u_table::@5->print_str]
  print_str_from_b5:
  //SEG37 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@5->print_str#0] -- register_copy 
  //SEG38 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str1 [phi:sin8u_table::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG39 [18] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
  b6_from_b5:
    jmp b6
  //SEG40 sin8u_table::@6
  b6:
  //SEG41 [19] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG42 [65] phi from sin8u_table::@6 to print_byte [phi:sin8u_table::@6->print_byte]
  print_byte_from_b6:
  //SEG43 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@6->print_byte#0] -- register_copy 
  //SEG44 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@6->print_byte#1] -- vbuz1=vbuc1 
    lda #min
    sta print_byte.b
    jsr print_byte
  //SEG45 [20] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
  b7_from_b6:
    jmp b7
  //SEG46 sin8u_table::@7
  b7:
  //SEG47 [21] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG48 [77] phi from sin8u_table::@7 to print_str [phi:sin8u_table::@7->print_str]
  print_str_from_b7:
  //SEG49 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@7->print_str#0] -- register_copy 
  //SEG50 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str2 [phi:sin8u_table::@7->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG51 [22] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
  b8_from_b7:
    jmp b8
  //SEG52 sin8u_table::@8
  b8:
  //SEG53 [23] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG54 [65] phi from sin8u_table::@8 to print_byte [phi:sin8u_table::@8->print_byte]
  print_byte_from_b8:
  //SEG55 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@8->print_byte#0] -- register_copy 
  //SEG56 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@8->print_byte#1] -- vbuz1=vbuc1 
    lda #max
    sta print_byte.b
    jsr print_byte
  //SEG57 [24] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
  b9_from_b8:
    jmp b9
  //SEG58 sin8u_table::@9
  b9:
  //SEG59 [25] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG60 [77] phi from sin8u_table::@9 to print_str [phi:sin8u_table::@9->print_str]
  print_str_from_b9:
  //SEG61 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@9->print_str#0] -- register_copy 
  //SEG62 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str3 [phi:sin8u_table::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
  //SEG63 [26] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
  b10_from_b9:
    jmp b10
  //SEG64 sin8u_table::@10
  b10:
  //SEG65 [27] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG66 [65] phi from sin8u_table::@10 to print_byte [phi:sin8u_table::@10->print_byte]
  print_byte_from_b10:
  //SEG67 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@10->print_byte#0] -- register_copy 
  //SEG68 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@10->print_byte#1] -- vbuz1=vbuc1 
    lda #amplitude
    sta print_byte.b
    jsr print_byte
  //SEG69 [28] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
  b11_from_b10:
    jmp b11
  //SEG70 sin8u_table::@11
  b11:
  //SEG71 [29] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG72 [77] phi from sin8u_table::@11 to print_str [phi:sin8u_table::@11->print_str]
  print_str_from_b11:
  //SEG73 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@11->print_str#0] -- register_copy 
  //SEG74 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str4 [phi:sin8u_table::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
  //SEG75 [30] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
  b12_from_b11:
    jmp b12
  //SEG76 sin8u_table::@12
  b12:
  //SEG77 [31] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG78 [65] phi from sin8u_table::@12 to print_byte [phi:sin8u_table::@12->print_byte]
  print_byte_from_b12:
  //SEG79 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@12->print_byte#0] -- register_copy 
  //SEG80 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@12->print_byte#1] -- vbuz1=vbuc1 
    lda #mid
    sta print_byte.b
    jsr print_byte
  //SEG81 [32] phi from sin8u_table::@12 to sin8u_table::@13 [phi:sin8u_table::@12->sin8u_table::@13]
  b13_from_b12:
    jmp b13
  //SEG82 sin8u_table::@13
  b13:
  //SEG83 [33] call print_ln param-assignment [ sin8u_table::step#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 line_cursor#1 ] )
  //SEG84 [60] phi from sin8u_table::@13 to print_ln [phi:sin8u_table::@13->print_ln]
  print_ln_from_b13:
  //SEG85 [60] phi (byte*) line_cursor#23 = (const byte*) SCREEN#0 [phi:sin8u_table::@13->print_ln#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta line_cursor
    lda #>SCREEN
    sta line_cursor+1
    jsr print_ln
  //SEG86 [34] phi from sin8u_table::@13 to sin8u_table::@1 [phi:sin8u_table::@13->sin8u_table::@1]
  b1_from_b13:
  //SEG87 [34] phi (word) sin8u_table::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8u_table::@13->sin8u_table::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
  //SEG88 [34] phi (byte*) sin8u_table::sintab#2 = (const byte[20]) main::sintab#0 [phi:sin8u_table::@13->sin8u_table::@1#1] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta sintab
    lda #>main.sintab
    sta sintab+1
  //SEG89 [34] phi (word) sin8u_table::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8u_table::@13->sin8u_table::@1#2] -- vwuz1=vbuc1 
    lda #<0
    sta x
    lda #>0
    sta x+1
    jmp b1
  //SEG90 [34] phi from sin8u_table::@21 to sin8u_table::@1 [phi:sin8u_table::@21->sin8u_table::@1]
  b1_from_b21:
  //SEG91 [34] phi (word) sin8u_table::i#2 = (word) sin8u_table::i#1 [phi:sin8u_table::@21->sin8u_table::@1#0] -- register_copy 
  //SEG92 [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@21->sin8u_table::@1#1] -- register_copy 
  //SEG93 [34] phi (word) sin8u_table::x#2 = (word) sin8u_table::x#1 [phi:sin8u_table::@21->sin8u_table::@1#2] -- register_copy 
    jmp b1
  //SEG94 sin8u_table::@1
  b1:
  //SEG95 [35] (word) sin8s::x#2 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] ) -- vwuz1=vwuz2 
    lda x
    sta sin8s.x
    lda x+1
    sta sin8s.x+1
  //SEG96 [36] call sin8s param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#0 line_cursor#1 ] )
    jsr sin8s
  //SEG97 [37] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#2 line_cursor#1 ] ) -- vbsz1=vbsz2 
    lda sin8s.return
    sta sin8s.return_2
    jmp b15
  //SEG98 sin8u_table::@15
  b15:
  //SEG99 [38] (signed byte) mul8su::a#0 ← (signed byte) sin8s::return#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::a#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::a#0 line_cursor#1 ] ) -- vbsz1=vbsz2 
    lda sin8s.return_2
    sta mul8su.a
  //SEG100 [39] call mul8su param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::m#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::m#2 line_cursor#1 ] )
    jsr mul8su
  //SEG101 [40] (signed word) mul8su::return#2 ← (signed word)(word) mul8su::m#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] ) -- vwsz1=vwsz2 
    lda mul8su.m
    sta mul8su.return
    lda mul8su.m+1
    sta mul8su.return+1
    jmp b16
  //SEG102 sin8u_table::@16
  b16:
  //SEG103 [41] (signed word~) sin8u_table::$17 ← (signed word) mul8su::return#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] ) -- vwsz1=vwsz2 
    lda mul8su.return
    sta _17
    lda mul8su.return+1
    sta _17+1
  //SEG104 [42] (byte~) sin8u_table::$18 ← > (signed word~) sin8u_table::$17 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$18 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$18 line_cursor#1 ] ) -- vbuz1=_hi_vwsz2 
    lda _17+1
    sta _18
  //SEG105 [43] (byte) sin8u_table::sinval#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$18 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ) -- vbuz1=vbuc1_plus_vbuz2 
    lda #mid
    clc
    adc _18
    sta sinval
  //SEG106 [44] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinval#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ) -- _deref_pbuz1=vbuz2 
    lda sinval
    ldy #0
    sta (sintab),y
  //SEG107 [45] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sintab
    bne !+
    inc sintab+1
  !:
  //SEG108 [46] (byte*~) char_cursor#92 ← (byte*) line_cursor#1 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG109 [47] call print_str param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
  //SEG110 [77] phi from sin8u_table::@16 to print_str [phi:sin8u_table::@16->print_str]
  print_str_from_b16:
  //SEG111 [77] phi (byte*) char_cursor#78 = (byte*~) char_cursor#92 [phi:sin8u_table::@16->print_str#0] -- register_copy 
  //SEG112 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str5 [phi:sin8u_table::@16->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta print_str.str
    lda #>str5
    sta print_str.str+1
    jsr print_str
    jmp b17
  //SEG113 sin8u_table::@17
  b17:
  //SEG114 [48] (word) print_word::w#1 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] ) -- vwuz1=vwuz2 
    lda x
    sta print_word.w
    lda x+1
    sta print_word.w+1
  //SEG115 [49] call print_word param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  //SEG116 [84] phi from sin8u_table::@17 to print_word [phi:sin8u_table::@17->print_word]
  print_word_from_b17:
  //SEG117 [84] phi (word) print_word::w#2 = (word) print_word::w#1 [phi:sin8u_table::@17->print_word#0] -- register_copy 
    jsr print_word
  //SEG118 [50] phi from sin8u_table::@17 to sin8u_table::@18 [phi:sin8u_table::@17->sin8u_table::@18]
  b18_from_b17:
    jmp b18
  //SEG119 sin8u_table::@18
  b18:
  //SEG120 [51] call print_str param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
  //SEG121 [77] phi from sin8u_table::@18 to print_str [phi:sin8u_table::@18->print_str]
  print_str_from_b18:
  //SEG122 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@18->print_str#0] -- register_copy 
  //SEG123 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str6 [phi:sin8u_table::@18->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta print_str.str
    lda #>str6
    sta print_str.str+1
    jsr print_str
    jmp b19
  //SEG124 sin8u_table::@19
  b19:
  //SEG125 [52] (byte) print_byte::b#6 ← (byte) sin8u_table::sinval#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#6 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#6 char_cursor#2 ] ) -- vbuz1=vbuz2 
    lda sinval
    sta print_byte.b
  //SEG126 [53] call print_byte param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] )
  //SEG127 [65] phi from sin8u_table::@19 to print_byte [phi:sin8u_table::@19->print_byte]
  print_byte_from_b19:
  //SEG128 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@19->print_byte#0] -- register_copy 
  //SEG129 [65] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:sin8u_table::@19->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG130 [54] phi from sin8u_table::@19 to sin8u_table::@20 [phi:sin8u_table::@19->sin8u_table::@20]
  b20_from_b19:
    jmp b20
  //SEG131 sin8u_table::@20
  b20:
  //SEG132 [55] call print_ln param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] )
  //SEG133 [60] phi from sin8u_table::@20 to print_ln [phi:sin8u_table::@20->print_ln]
  print_ln_from_b20:
  //SEG134 [60] phi (byte*) line_cursor#23 = (byte*) line_cursor#1 [phi:sin8u_table::@20->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b21
  //SEG135 sin8u_table::@21
  b21:
  //SEG136 [56] (word) sin8u_table::x#1 ← (word) sin8u_table::x#2 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] ) -- vwuz1=vwuz1_plus_vwuz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
  //SEG137 [57] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#2 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ) -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG138 [58] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.tabsize
    bcc b1_from_b21
    bne !+
    lda i
    cmp #<main.tabsize
    bcc b1_from_b21
  !:
    jmp breturn
  //SEG139 sin8u_table::@return
  breturn:
  //SEG140 [59] return  [ ] ( main:2::sin8u_table:7 [ ] )
    rts
    str: .text "step:@"
    str1: .text " min:@"
    str2: .text " max:@"
    str3: .text " ampl:@"
    str4: .text " mid:@"
    str5: .text "x: @"
    str6: .text " sin: @"
}
//SEG141 print_ln
print_ln: {
  //SEG142 [61] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG143 [61] phi (byte*) line_cursor#12 = (byte*) line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG144 print_ln::@1
  b1:
  //SEG145 [62] (byte*) line_cursor#1 ← (byte*) line_cursor#12 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG146 [63] if((byte*) line_cursor#1<(byte*) char_cursor#11) goto print_ln::@1 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG147 print_ln::@return
  breturn:
  //SEG148 [64] return  [ line_cursor#1 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] )
    rts
}
//SEG149 print_byte
print_byte: {
    .label _0 = $37
    .label _2 = $38
    .label b = $a
  //SEG150 [66] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#73 print_byte::$0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#73 print_byte::$0 ] ) -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG151 [67] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#73 print_char::ch#0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#73 print_char::ch#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda hextab,y
    sta print_char.ch
  //SEG152 [68] call print_char param-assignment [ char_cursor#11 print_byte::b#7 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::b#7 ] )
  //SEG153 [73] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG154 [73] phi (byte*) char_cursor#46 = (byte*) char_cursor#73 [phi:print_byte->print_char#0] -- register_copy 
  //SEG155 [73] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG156 print_byte::@1
  b1:
  //SEG157 [69] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#11 print_byte::$2 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG158 [70] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#11 print_char::ch#1 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_char::ch#1 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda hextab,y
    sta print_char.ch
  //SEG159 [71] call print_char param-assignment [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  //SEG160 [73] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG161 [73] phi (byte*) char_cursor#46 = (byte*) char_cursor#11 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG162 [73] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG163 print_byte::@return
  breturn:
  //SEG164 [72] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG165 print_char
print_char: {
    .label ch = $b
  //SEG166 [74] *((byte*) char_cursor#46) ← (byte) print_char::ch#2 [ char_cursor#46 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#46 ] ) -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (char_cursor),y
  //SEG167 [75] (byte*) char_cursor#11 ← ++ (byte*) char_cursor#46 [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG168 print_char::@return
  breturn:
  //SEG169 [76] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
    rts
}
//SEG170 print_str
print_str: {
    .label str = $e
  //SEG171 [78] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG172 [78] phi (byte*) char_cursor#2 = (byte*) char_cursor#78 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG173 [78] phi (byte*) print_str::str#8 = (byte*) print_str::str#10 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG174 print_str::@1
  b1:
  //SEG175 [79] if(*((byte*) print_str::str#8)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG176 print_str::@return
  breturn:
  //SEG177 [80] return  [ char_cursor#2 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
    rts
  //SEG178 print_str::@2
  b2:
  //SEG179 [81] *((byte*) char_cursor#2) ← *((byte*) print_str::str#8) [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (char_cursor),y
  //SEG180 [82] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#2 [ print_str::str#8 char_cursor#1 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#8 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG181 [83] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#8 [ print_str::str#0 char_cursor#1 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG182 print_word
print_word: {
    .label w = $10
  //SEG183 [85] (byte) print_byte::b#0 ← > (word) print_word::w#2 [ char_cursor#2 print_byte::b#0 print_word::w#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#2 print_byte::b#0 print_word::w#2 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_byte::b#0 print_word::w#2 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG184 [86] call print_byte param-assignment [ char_cursor#11 print_word::w#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 print_word::w#2 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_word::w#2 ] )
  //SEG185 [65] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG186 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:print_word->print_byte#0] -- register_copy 
  //SEG187 [65] phi (byte) print_byte::b#7 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG188 print_word::@1
  b1:
  //SEG189 [87] (byte) print_byte::b#1 ← < (word) print_word::w#2 [ char_cursor#11 print_byte::b#1 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 print_byte::b#1 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::b#1 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG190 [88] call print_byte param-assignment [ char_cursor#11 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  //SEG191 [65] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG192 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#11 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG193 [65] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG194 print_word::@return
  breturn:
  //SEG195 [89] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
    rts
}
//SEG196 mul8su
mul8su: {
    .label _6 = $3b
    .label _10 = $3c
    .label m = $12
    .label a = $30
    .label return = $31
  //SEG197 [90] (byte~) mul8u::a#8 ← (byte)(signed byte) mul8su::a#0 [ mul8su::a#0 mul8u::a#8 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#8 ] ) -- vbuz1=vbuz2 
    lda a
    sta mul8u.a
  //SEG198 [91] call mul8u param-assignment [ mul8su::a#0 mul8u::res#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 ] )
  //SEG199 [100] phi from mul8su to mul8u [phi:mul8su->mul8u]
  mul8u_from_mul8su:
  //SEG200 [100] phi (byte) mul8u::a#6 = (byte~) mul8u::a#8 [phi:mul8su->mul8u#0] -- register_copy 
  //SEG201 [100] phi (byte) mul8u::b#2 = ((byte))(const byte) sin8u_table::amplitude#0 [phi:mul8su->mul8u#1] -- vbuz1=vbuc1 
    lda #sin8u_table.amplitude
    sta mul8u.b
    jsr mul8u
  //SEG202 [92] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::return#2 ] ) -- vwuz1=vwuz2 
    lda mul8u.res
    sta mul8u.return
    lda mul8u.res+1
    sta mul8u.return+1
    jmp b4
  //SEG203 mul8su::@4
  b4:
  //SEG204 [93] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8su::m#0 ] ) -- vwuz1=vwuz2 
    lda mul8u.return
    sta m
    lda mul8u.return+1
    sta m+1
  //SEG205 [94] if((signed byte) mul8su::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8su::@1 [ mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 ] ) -- vbsz1_ge_0_then_la1 
    lda a
    cmp #0
    bpl b1_from_b4
    jmp b2
  //SEG206 mul8su::@2
  b2:
  //SEG207 [95] (byte~) mul8su::$6 ← > (word) mul8su::m#0 [ mul8su::m#0 mul8su::$6 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$6 ] ) -- vbuz1=_hi_vwuz2 
    lda m+1
    sta _6
  //SEG208 [96] (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 ← (byte~) mul8su::$6 - ((byte))(const byte) sin8u_table::amplitude#0 [ mul8su::m#0 mul8su::$10 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$10 ] ) -- vbuz1=vbuz2_minus_vbuc1 
    lda _6
    sec
    sbc #sin8u_table.amplitude
    sta _10
  //SEG209 [97] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 [ mul8su::m#1 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#1 ] ) -- vwuz1=vwuz1_sethi_vbuz2 
    lda _10
    sta m+1
  //SEG210 [98] phi from mul8su::@2 mul8su::@4 to mul8su::@1 [phi:mul8su::@2/mul8su::@4->mul8su::@1]
  b1_from_b2:
  b1_from_b4:
  //SEG211 [98] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@4->mul8su::@1#0] -- register_copy 
    jmp b1
  //SEG212 mul8su::@1
  b1:
    jmp breturn
  //SEG213 mul8su::@return
  breturn:
  //SEG214 [99] return  [ mul8su::m#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#2 ] )
    rts
}
//SEG215 mul8u
mul8u: {
    .label _1 = $3d
    .label mb = $18
    .label a = $15
    .label res = $16
    .label return = $39
    .label b = $14
    .label return_3 = $4d
  //SEG216 [101] (word) mul8u::mb#0 ← ((word)) (byte) mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] ) -- vwuz1=_word_vbuz2 
    lda b
    sta mb
    lda #0
    sta mb+1
  //SEG217 [102] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  b1_from_mul8u:
  //SEG218 [102] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
  //SEG219 [102] phi (word) mul8u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta res
    lda #>0
    sta res+1
  //SEG220 [102] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp b1
  //SEG221 mul8u::@1
  b1:
  //SEG222 [103] if((byte) mul8u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@2 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ) -- vbuz1_neq_0_then_la1 
    lda a
    bne b2
    jmp breturn
  //SEG223 mul8u::@return
  breturn:
  //SEG224 [104] return  [ mul8u::res#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 ] )
    rts
  //SEG225 mul8u::@2
  b2:
  //SEG226 [105] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and a
    sta _1
  //SEG227 [106] if((byte~) mul8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@4 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ) -- vbuz1_eq_0_then_la1 
    lda _1
    beq b4_from_b2
    jmp b7
  //SEG228 mul8u::@7
  b7:
  //SEG229 [107] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ) -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG230 [108] phi from mul8u::@2 mul8u::@7 to mul8u::@4 [phi:mul8u::@2/mul8u::@7->mul8u::@4]
  b4_from_b2:
  b4_from_b7:
  //SEG231 [108] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@7->mul8u::@4#0] -- register_copy 
    jmp b4
  //SEG232 mul8u::@4
  b4:
  //SEG233 [109] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] ) -- vbuz1=vbuz1_ror_1 
    lsr a
  //SEG234 [110] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG235 [102] phi from mul8u::@4 to mul8u::@1 [phi:mul8u::@4->mul8u::@1]
  b1_from_b4:
  //SEG236 [102] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@4->mul8u::@1#0] -- register_copy 
  //SEG237 [102] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@4->mul8u::@1#1] -- register_copy 
  //SEG238 [102] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@4->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG239 sin8s
sin8s: {
    .const DIV_6 = $2b
    .label _6 = $3e
    .label x = $1b
    .label x1 = $40
    .label x2 = $42
    .label x3 = $44
    .label x3_6 = $46
    .label usinx = $47
    .label x4 = $49
    .label x5 = $4b
    .label x5_128 = $4c
    .label usinx_1 = $1d
    .label usinx_2 = $1d
    .label return = $1e
    .label sinx = $1e
    .label return_2 = $2f
    .label usinx_4 = $1d
    .label isUpper = $1a
  //SEG240 [111] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#2 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b1_from_sin8s
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b1_from_sin8s
  !:
    jmp b5
  //SEG241 sin8s::@5
  b5:
  //SEG242 [112] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#0 ] ) -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG243 [113] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  b1_from_b5:
  //SEG244 [113] phi (byte) sin8s::isUpper#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG245 [113] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG246 [113] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b1_from_sin8s:
  //SEG247 [113] phi (byte) sin8s::isUpper#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG248 [113] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG249 sin8s::@1
  b1:
  //SEG250 [114] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2_from_b1
  !:
    jmp b6
  //SEG251 sin8s::@6
  b6:
  //SEG252 [115] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] ) -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG253 [116] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  b2_from_b1:
  b2_from_b6:
  //SEG254 [116] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp b2
  //SEG255 sin8s::@2
  b2:
  //SEG256 [117] (word~) sin8s::$6 ← (word) sin8s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin8s::isUpper#10 sin8s::$6 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::$6 ] ) -- vwuz1=vwuz2_rol_3 
    lda x
    asl
    sta _6
    lda x+1
    rol
    sta _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
  //SEG257 [118] (byte) sin8s::x1#0 ← > (word~) sin8s::$6 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 ] ) -- vbuz1=_hi_vwuz2 
    lda _6+1
    sta x1
  //SEG258 [119] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 ] ) -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v1
  //SEG259 [120] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 mulu8_sel::v2#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 mulu8_sel::v2#0 ] ) -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG260 [121] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] )
  //SEG261 [154] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from_b2:
  //SEG262 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG263 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
  //SEG264 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG265 [122] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#0 ] ) -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return
    jmp b10
  //SEG266 sin8s::@10
  b10:
  //SEG267 [123] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x2#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x2#0 ] ) -- vbuz1=vbuz2 
    lda mulu8_sel.return
    sta x2
  //SEG268 [124] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 ] ) -- vbuz1=vbuz2 
    lda x2
    sta mulu8_sel.v1
  //SEG269 [125] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 mulu8_sel::v2#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 mulu8_sel::v2#1 ] ) -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG270 [126] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] )
  //SEG271 [154] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from_b10:
  //SEG272 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG273 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@10->mulu8_sel#1] -- register_copy 
  //SEG274 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG275 [127] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#1 ] ) -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_1
    jmp b11
  //SEG276 sin8s::@11
  b11:
  //SEG277 [128] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 ] ) -- vbuz1=vbuz2 
    lda mulu8_sel.return_1
    sta x3
  //SEG278 [129] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::v1#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::v1#2 ] ) -- vbuz1=vbuz2 
    lda x3
    sta mulu8_sel.v1
  //SEG279 [130] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::x3#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::x3#0 ] )
  //SEG280 [154] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from_b11:
  //SEG281 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG282 [154] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6#0 [phi:sin8s::@11->mulu8_sel#1] -- vbuz1=vbuc1 
    lda #DIV_6
    sta mulu8_sel.v2
  //SEG283 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG284 [131] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#2 ] ) -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_2
    jmp b12
  //SEG285 sin8s::@12
  b12:
  //SEG286 [132] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::x3_6#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::x3_6#0 ] ) -- vbuz1=vbuz2 
    lda mulu8_sel.return_2
    sta x3_6
  //SEG287 [133] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) -- vbuz1=vbuz2_minus_vbuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
  //SEG288 [134] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 ] ) -- vbuz1=vbuz2 
    lda x3
    sta mulu8_sel.v1
  //SEG289 [135] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 mulu8_sel::v2#3 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 mulu8_sel::v2#3 ] ) -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG290 [136] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::usinx#0 ] )
  //SEG291 [154] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from_b12:
  //SEG292 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG293 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
  //SEG294 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG295 [137] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#10 ] ) -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_10
    jmp b13
  //SEG296 sin8s::@13
  b13:
  //SEG297 [138] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 sin8s::x4#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 sin8s::x4#0 ] ) -- vbuz1=vbuz2 
    lda mulu8_sel.return_10
    sta x4
  //SEG298 [139] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#4 ] ) -- vbuz1=vbuz2 
    lda x4
    sta mulu8_sel.v1
  //SEG299 [140] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::v1#4 mulu8_sel::v2#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::v1#4 mulu8_sel::v2#4 ] ) -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG300 [141] call mulu8_sel param-assignment [ sin8s::isUpper#10 mulu8_sel::return#12 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 mulu8_sel::return#12 sin8s::usinx#0 ] )
  //SEG301 [154] phi from sin8s::@13 to mulu8_sel [phi:sin8s::@13->mulu8_sel]
  mulu8_sel_from_b13:
  //SEG302 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s::@13->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG303 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@13->mulu8_sel#1] -- register_copy 
  //SEG304 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@13->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG305 [142] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#11 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#11 ] ) -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_11
    jmp b14
  //SEG306 sin8s::@14
  b14:
  //SEG307 [143] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5#0 ] ) -- vbuz1=vbuz2 
    lda mulu8_sel.return_11
    sta x5
  //SEG308 [144] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ) -- vbuz1=vbuz2_ror_4 
    lda x5
    lsr
    lsr
    lsr
    lsr
    sta x5_128
  //SEG309 [145] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) -- vbuz1=vbuz2_plus_vbuz3 
    lda usinx
    clc
    adc x5_128
    sta usinx_1
  //SEG310 [146] if((byte) sin8s::usinx#1<(byte/word/signed word/dword/signed dword) 128) goto sin8s::@3 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) -- vbuz1_lt_vbuc1_then_la1 
    lda usinx_1
    cmp #$80
    bcc b3_from_b14
    jmp b7
  //SEG311 sin8s::@7
  b7:
  //SEG312 [147] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 [ sin8s::isUpper#10 sin8s::usinx#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#2 ] ) -- vbuz1=_dec_vbuz1 
    dec usinx_2
  //SEG313 [148] phi from sin8s::@14 sin8s::@7 to sin8s::@3 [phi:sin8s::@14/sin8s::@7->sin8s::@3]
  b3_from_b14:
  b3_from_b7:
  //SEG314 [148] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@14/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp b3
  //SEG315 sin8s::@3
  b3:
  //SEG316 [149] if((byte) sin8s::isUpper#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin8s::@18 [ sin8s::usinx#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::usinx#4 ] ) -- vbuz1_eq_0_then_la1 
    lda isUpper
    beq b18
    jmp b8
  //SEG317 sin8s::@8
  b8:
  //SEG318 [150] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::sinx#1 ] ) -- vbsz1=_neg_vbsz2 
    lda usinx_4
    eor #$ff
    clc
    adc #1
    sta sinx
  //SEG319 [151] phi from sin8s::@18 sin8s::@8 to sin8s::@4 [phi:sin8s::@18/sin8s::@8->sin8s::@4]
  b4_from_b18:
  b4_from_b8:
  //SEG320 [151] phi (signed byte) sin8s::return#0 = (signed byte~) sin8s::return#5 [phi:sin8s::@18/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp b4
  //SEG321 sin8s::@4
  b4:
    jmp breturn
  //SEG322 sin8s::@return
  breturn:
  //SEG323 [152] return  [ sin8s::return#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::return#0 ] )
    rts
  //SEG324 sin8s::@18
  b18:
  //SEG325 [153] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 [ sin8s::return#5 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::return#5 ] ) -- vbsz1=vbsz2 
    lda usinx_4
    sta return
    jmp b4_from_b18
}
//SEG326 mulu8_sel
mulu8_sel: {
    .label _0 = $4f
    .label _1 = $51
    .label v1 = $1f
    .label v2 = $20
    .label return = $41
    .label return_1 = $43
    .label return_2 = $45
    .label return_10 = $48
    .label return_11 = $4a
    .label select = $21
    .label return_12 = $53
  //SEG327 [155] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5 [ mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] ) -- vbuz1=vbuz2 
    lda v1
    sta mul8u.a
  //SEG328 [156] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 [ mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] ) -- vbuz1=vbuz2 
    lda v2
    sta mul8u.b
  //SEG329 [157] call mul8u param-assignment [ mul8u::res#2 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::res#2 mulu8_sel::select#5 ] )
  //SEG330 [100] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
  //SEG331 [100] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
  //SEG332 [100] phi (byte) mul8u::b#2 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- register_copy 
    jsr mul8u
  //SEG333 [158] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] ) -- vwuz1=vwuz2 
    lda mul8u.res
    sta mul8u.return_3
    lda mul8u.res+1
    sta mul8u.return_3+1
    jmp b2
  //SEG334 mulu8_sel::@2
  b2:
  //SEG335 [159] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] ) -- vwuz1=vwuz2 
    lda mul8u.return_3
    sta _0
    lda mul8u.return_3+1
    sta _0+1
  //SEG336 [160] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) -- vwuz1=vwuz2_rol_vbuz3 
    lda _0
    sta _1
    lda _0+1
    sta _1+1
    ldy select
    beq !e+
  !:
    asl _1
    rol _1+1
    dey
    bne !-
  !e:
  //SEG337 [161] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) -- vbuz1=_hi_vwuz2 
    lda _1+1
    sta return_12
    jmp breturn
  //SEG338 mulu8_sel::@return
  breturn:
  //SEG339 [162] return  [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] )
    rts
}
//SEG340 div16u
div16u: {
    .label return = $56
    .label return_2 = $2b
  //SEG341 [164] call divr16u param-assignment [ divr16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#0 ] )
  //SEG342 [168] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
  //SEG343 [165] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] ) -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_2
    lda divr16u.return+1
    sta divr16u.return_2+1
    jmp b2
  //SEG344 div16u::@2
  b2:
  //SEG345 [166] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] ) -- vwuz1=vwuz2 
    lda divr16u.return_2
    sta return
    lda divr16u.return_2+1
    sta return+1
    jmp breturn
  //SEG346 div16u::@return
  breturn:
  //SEG347 [167] return  [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] )
    rts
}
//SEG348 divr16u
divr16u: {
    .label _1 = $58
    .label _2 = $59
    .label rem = $22
    .label dividend = $24
    .label quotient = $26
    .label i = $28
    .label return = $26
    .label return_2 = $54
  //SEG349 [169] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG350 [169] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG351 [169] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta quotient
    lda #>0
    sta quotient+1
  //SEG352 [169] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12#0 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta dividend
    lda #>PI2_u4f12
    sta dividend+1
  //SEG353 [169] phi (word) divr16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta rem
    lda #>0
    sta rem+1
    jmp b1
  //SEG354 [169] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG355 [169] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG356 [169] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG357 [169] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG358 [169] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG359 divr16u::@1
  b1:
  //SEG360 [170] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG361 [171] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) -- vbuz1=_hi_vwuz2 
    lda dividend+1
    sta _1
  //SEG362 [172] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and _1
    sta _2
  //SEG363 [173] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vbuz1_eq_0_then_la1 
    lda _2
    beq b2_from_b1
    jmp b4
  //SEG364 divr16u::@4
  b4:
  //SEG365 [174] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG366 [175] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG367 [175] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG368 divr16u::@2
  b2:
  //SEG369 [176] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG370 [177] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG371 [178] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.tabsize
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<main.tabsize
    bcc b3_from_b2
  !:
    jmp b5
  //SEG372 divr16u::@5
  b5:
  //SEG373 [179] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG374 [180] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.tabsize
    sta rem
    lda rem+1
    sbc #>main.tabsize
    sta rem+1
  //SEG375 [181] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG376 [181] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG377 [181] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG378 divr16u::@3
  b3:
  //SEG379 [182] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG380 [183] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b3
    jmp breturn
  //SEG381 divr16u::@return
  breturn:
  //SEG382 [184] return  [ divr16u::return#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 ] )
    rts
}
//SEG383 print_cls
print_cls: {
    .label sc = $29
  //SEG384 [186] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG385 [186] phi (byte*) print_cls::sc#2 = (const byte*) SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
    jmp b1
  //SEG386 [186] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG387 [186] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG388 print_cls::@1
  b1:
  //SEG389 [187] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG390 [188] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG391 [189] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bne b1_from_b1
    lda sc
    cmp #<SCREEN+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG392 print_cls::@return
  breturn:
  //SEG393 [190] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:53 [ sin8u_table::$18 ] has ALU potential.
Statement [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] ) always clobbers reg byte a 
Statement [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] ) always clobbers reg byte a 
Statement [14] (word) print_word::w#0 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] ) always clobbers reg byte a 
Statement [35] (word) sin8s::x#2 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] ) always clobbers reg byte a 
Statement [40] (signed word) mul8su::return#2 ← (signed word)(word) mul8su::m#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] ) always clobbers reg byte a 
Statement [41] (signed word~) sin8u_table::$17 ← (signed word) mul8su::return#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] ) always clobbers reg byte a 
Statement [43] (byte) sin8u_table::sinval#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$18 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ) always clobbers reg byte a 
Statement [44] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinval#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:54 [ sin8u_table::sinval#0 ]
Statement [46] (byte*~) char_cursor#92 ← (byte*) line_cursor#1 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:54 [ sin8u_table::sinval#0 ]
Statement [48] (word) print_word::w#1 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] ) always clobbers reg byte a 
Statement [56] (word) sin8u_table::x#1 ← (word) sin8u_table::x#2 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [58] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [62] (byte*) line_cursor#1 ← (byte*) line_cursor#12 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ) always clobbers reg byte a 
Statement [63] if((byte*) line_cursor#1<(byte*) char_cursor#11) goto print_ln::@1 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ) always clobbers reg byte a 
Statement [69] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#11 print_byte::$2 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::$2 ] ) always clobbers reg byte a 
Statement [74] *((byte*) char_cursor#46) ← (byte) print_char::ch#2 [ char_cursor#46 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#46 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#6 ]
Statement [79] if(*((byte*) print_str::str#8)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] ) always clobbers reg byte a reg byte y 
Statement [81] *((byte*) char_cursor#2) ← *((byte*) print_str::str#8) [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] ) always clobbers reg byte a reg byte y 
Statement [85] (byte) print_byte::b#0 ← > (word) print_word::w#2 [ char_cursor#2 print_byte::b#0 print_word::w#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#2 print_byte::b#0 print_word::w#2 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_byte::b#0 print_word::w#2 ] ) always clobbers reg byte a 
Statement [87] (byte) print_byte::b#1 ← < (word) print_word::w#2 [ char_cursor#11 print_byte::b#1 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 print_byte::b#1 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [92] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::return#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:48 [ mul8su::a#0 ]
Statement [93] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8su::m#0 ] ) always clobbers reg byte a 
Statement [95] (byte~) mul8su::$6 ← > (word) mul8su::m#0 [ mul8su::m#0 mul8su::$6 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$6 ] ) always clobbers reg byte a 
Statement [96] (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 ← (byte~) mul8su::$6 - ((byte))(const byte) sin8u_table::amplitude#0 [ mul8su::m#0 mul8su::$10 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$10 ] ) always clobbers reg byte a 
Statement [101] (word) mul8u::mb#0 ← ((word)) (byte) mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:26 [ sin8s::isUpper#10 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:64 [ sin8s::x1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ mulu8_sel::select#5 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:68 [ sin8s::x3#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:71 [ sin8s::usinx#0 ]
Statement [105] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ) always clobbers reg byte a 
Statement [107] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Statement [111] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#2 ] ) always clobbers reg byte a 
Statement [112] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [114] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] ) always clobbers reg byte a 
Statement [115] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] ) always clobbers reg byte a 
Statement [117] (word~) sin8s::$6 ← (word) sin8s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin8s::isUpper#10 sin8s::$6 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::$6 ] ) always clobbers reg byte a 
Statement [118] (byte) sin8s::x1#0 ← > (word~) sin8s::$6 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 ] ) always clobbers reg byte a 
Statement [133] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) always clobbers reg byte a 
Statement [145] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) always clobbers reg byte a 
Statement [150] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::sinx#1 ] ) always clobbers reg byte a 
Statement [158] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] ) always clobbers reg byte a 
Statement [159] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] ) always clobbers reg byte a 
Potential register analysis [160] mulu8_sel::$1 ← mulu8_sel::$0 << mulu8_sel::select#5 missing fragment vwuz1=vwuz2_rol_vbuxx allocation: reg byte x [ mulu8_sel::select#5 ] zp ZP_WORD:81 [ mulu8_sel::$1 ] zp ZP_WORD:79 [ mulu8_sel::$0 ] 
Potential register analysis [160] mulu8_sel::$1 ← mulu8_sel::$0 << mulu8_sel::select#5 missing fragment vwuz1=vwuz2_rol_vbuyy allocation: reg byte y [ mulu8_sel::select#5 ] zp ZP_WORD:81 [ mulu8_sel::$1 ] zp ZP_WORD:79 [ mulu8_sel::$0 ] 
MISSING FRAGMENTS
  vwuz1=vwuz2_rol_vbuxx
  vwuz1=vwuz2_rol_vbuyy
Statement [160] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:26 [ sin8s::isUpper#10 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:64 [ sin8s::x1#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:68 [ sin8s::x3#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:71 [ sin8s::usinx#0 ]
Statement [161] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) always clobbers reg byte a 
Statement [165] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] ) always clobbers reg byte a 
Statement [166] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] ) always clobbers reg byte a 
Statement [171] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:40 [ divr16u::i#2 divr16u::i#1 ]
Statement [172] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) always clobbers reg byte a 
Statement [174] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [178] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [180] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [187] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [189] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] ) always clobbers reg byte a 
Statement [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] ) always clobbers reg byte a 
Statement [14] (word) print_word::w#0 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] ) always clobbers reg byte a 
Statement [35] (word) sin8s::x#2 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] ) always clobbers reg byte a 
Statement [40] (signed word) mul8su::return#2 ← (signed word)(word) mul8su::m#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] ) always clobbers reg byte a 
Statement [41] (signed word~) sin8u_table::$17 ← (signed word) mul8su::return#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] ) always clobbers reg byte a 
Statement [43] (byte) sin8u_table::sinval#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$18 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ) always clobbers reg byte a 
Statement [44] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinval#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ) always clobbers reg byte a reg byte y 
Statement [46] (byte*~) char_cursor#92 ← (byte*) line_cursor#1 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] ) always clobbers reg byte a 
Statement [48] (word) print_word::w#1 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] ) always clobbers reg byte a 
Statement [56] (word) sin8u_table::x#1 ← (word) sin8u_table::x#2 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [58] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [62] (byte*) line_cursor#1 ← (byte*) line_cursor#12 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ) always clobbers reg byte a 
Statement [63] if((byte*) line_cursor#1<(byte*) char_cursor#11) goto print_ln::@1 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ) always clobbers reg byte a 
Statement [69] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#11 print_byte::$2 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::$2 ] ) always clobbers reg byte a 
Statement [74] *((byte*) char_cursor#46) ← (byte) print_char::ch#2 [ char_cursor#46 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#46 ] ) always clobbers reg byte y 
Statement [79] if(*((byte*) print_str::str#8)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] ) always clobbers reg byte a reg byte y 
Statement [81] *((byte*) char_cursor#2) ← *((byte*) print_str::str#8) [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] ) always clobbers reg byte a reg byte y 
Statement [85] (byte) print_byte::b#0 ← > (word) print_word::w#2 [ char_cursor#2 print_byte::b#0 print_word::w#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#2 print_byte::b#0 print_word::w#2 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_byte::b#0 print_word::w#2 ] ) always clobbers reg byte a 
Statement [87] (byte) print_byte::b#1 ← < (word) print_word::w#2 [ char_cursor#11 print_byte::b#1 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 print_byte::b#1 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [92] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::return#2 ] ) always clobbers reg byte a 
Statement [93] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8su::m#0 ] ) always clobbers reg byte a 
Statement [95] (byte~) mul8su::$6 ← > (word) mul8su::m#0 [ mul8su::m#0 mul8su::$6 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$6 ] ) always clobbers reg byte a 
Statement [96] (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 ← (byte~) mul8su::$6 - ((byte))(const byte) sin8u_table::amplitude#0 [ mul8su::m#0 mul8su::$10 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$10 ] ) always clobbers reg byte a 
Statement [101] (word) mul8u::mb#0 ← ((word)) (byte) mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] ) always clobbers reg byte a 
Statement [105] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ) always clobbers reg byte a 
Statement [107] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Statement [111] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#2 ] ) always clobbers reg byte a 
Statement [112] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [114] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] ) always clobbers reg byte a 
Statement [115] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] ) always clobbers reg byte a 
Statement [117] (word~) sin8s::$6 ← (word) sin8s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin8s::isUpper#10 sin8s::$6 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::$6 ] ) always clobbers reg byte a 
Statement [118] (byte) sin8s::x1#0 ← > (word~) sin8s::$6 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 ] ) always clobbers reg byte a 
Statement [133] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) always clobbers reg byte a 
Statement [145] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) always clobbers reg byte a 
Statement [150] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::sinx#1 ] ) always clobbers reg byte a 
Statement [158] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] ) always clobbers reg byte a 
Statement [159] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] ) always clobbers reg byte a 
Potential register analysis [160] mulu8_sel::$1 ← mulu8_sel::$0 << mulu8_sel::select#5 missing fragment vwuz1=vwuz2_rol_vbuxx allocation: reg byte x [ mulu8_sel::select#5 ] zp ZP_WORD:81 [ mulu8_sel::$1 ] zp ZP_WORD:79 [ mulu8_sel::$0 ] 
Potential register analysis [160] mulu8_sel::$1 ← mulu8_sel::$0 << mulu8_sel::select#5 missing fragment vwuz1=vwuz2_rol_vbuyy allocation: reg byte y [ mulu8_sel::select#5 ] zp ZP_WORD:81 [ mulu8_sel::$1 ] zp ZP_WORD:79 [ mulu8_sel::$0 ] 
MISSING FRAGMENTS
  vwuz1=vwuz2_rol_vbuxx
  vwuz1=vwuz2_rol_vbuyy
Statement [160] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) always clobbers reg byte a reg byte y 
Statement [161] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) always clobbers reg byte a 
Statement [165] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] ) always clobbers reg byte a 
Statement [166] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] ) always clobbers reg byte a 
Statement [171] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [172] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) always clobbers reg byte a 
Statement [174] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [178] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [180] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [187] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [189] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ sin8u_table::x#2 sin8u_table::x#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_WORD:6 [ sin8u_table::i#2 sin8u_table::i#1 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_WORD:8 [ line_cursor#12 line_cursor#23 line_cursor#1 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#6 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:11 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:12 [ char_cursor#78 char_cursor#46 char_cursor#73 char_cursor#2 char_cursor#11 char_cursor#92 char_cursor#1 ] : zp ZP_WORD:12 , 
Potential registers zp ZP_WORD:14 [ print_str::str#8 print_str::str#10 print_str::str#0 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_WORD:16 [ print_word::w#2 print_word::w#1 print_word::w#0 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_WORD:18 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] : zp ZP_WORD:18 , 
Potential registers zp ZP_BYTE:20 [ mul8u::b#2 mul8u::b#1 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ] : zp ZP_BYTE:21 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp ZP_WORD:22 , 
Potential registers zp ZP_WORD:24 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp ZP_WORD:24 , 
Potential registers zp ZP_BYTE:26 [ sin8s::isUpper#10 ] : zp ZP_BYTE:26 , reg byte x , 
Potential registers zp ZP_WORD:27 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] : zp ZP_WORD:27 , 
Potential registers zp ZP_BYTE:29 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ mulu8_sel::select#5 ] : zp ZP_BYTE:33 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:34 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp ZP_WORD:34 , 
Potential registers zp ZP_WORD:36 [ divr16u::dividend#2 divr16u::dividend#0 ] : zp ZP_WORD:36 , 
Potential registers zp ZP_WORD:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp ZP_WORD:38 , 
Potential registers zp ZP_BYTE:40 [ divr16u::i#2 divr16u::i#1 ] : zp ZP_BYTE:40 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:41 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_WORD:43 [ div16u::return#2 ] : zp ZP_WORD:43 , 
Potential registers zp ZP_WORD:45 [ sin8u_table::step#0 ] : zp ZP_WORD:45 , 
Potential registers zp ZP_BYTE:47 [ sin8s::return#2 ] : zp ZP_BYTE:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ mul8su::a#0 ] : zp ZP_BYTE:48 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:49 [ mul8su::return#2 ] : zp ZP_WORD:49 , 
Potential registers zp ZP_WORD:51 [ sin8u_table::$17 ] : zp ZP_WORD:51 , 
Potential registers zp ZP_BYTE:53 [ sin8u_table::$18 ] : zp ZP_BYTE:53 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:54 [ sin8u_table::sinval#0 ] : zp ZP_BYTE:54 , reg byte x , 
Potential registers zp ZP_BYTE:55 [ print_byte::$0 ] : zp ZP_BYTE:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:56 [ print_byte::$2 ] : zp ZP_BYTE:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:57 [ mul8u::return#2 ] : zp ZP_WORD:57 , 
Potential registers zp ZP_BYTE:59 [ mul8su::$6 ] : zp ZP_BYTE:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:60 [ mul8su::$10 ] : zp ZP_BYTE:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:61 [ mul8u::$1 ] : zp ZP_BYTE:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:62 [ sin8s::$6 ] : zp ZP_WORD:62 , 
Potential registers zp ZP_BYTE:64 [ sin8s::x1#0 ] : zp ZP_BYTE:64 , reg byte x , 
Potential registers zp ZP_BYTE:65 [ mulu8_sel::return#0 ] : zp ZP_BYTE:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:66 [ sin8s::x2#0 ] : zp ZP_BYTE:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:67 [ mulu8_sel::return#1 ] : zp ZP_BYTE:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:68 [ sin8s::x3#0 ] : zp ZP_BYTE:68 , reg byte x , 
Potential registers zp ZP_BYTE:69 [ mulu8_sel::return#2 ] : zp ZP_BYTE:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:70 [ sin8s::x3_6#0 ] : zp ZP_BYTE:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:71 [ sin8s::usinx#0 ] : zp ZP_BYTE:71 , reg byte x , 
Potential registers zp ZP_BYTE:72 [ mulu8_sel::return#10 ] : zp ZP_BYTE:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:73 [ sin8s::x4#0 ] : zp ZP_BYTE:73 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:74 [ mulu8_sel::return#11 ] : zp ZP_BYTE:74 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:75 [ sin8s::x5#0 ] : zp ZP_BYTE:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:76 [ sin8s::x5_128#0 ] : zp ZP_BYTE:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:77 [ mul8u::return#3 ] : zp ZP_WORD:77 , 
Potential registers zp ZP_WORD:79 [ mulu8_sel::$0 ] : zp ZP_WORD:79 , 
Potential registers zp ZP_WORD:81 [ mulu8_sel::$1 ] : zp ZP_WORD:81 , 
Potential registers zp ZP_BYTE:83 [ mulu8_sel::return#12 ] : zp ZP_BYTE:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:84 [ divr16u::return#2 ] : zp ZP_WORD:84 , 
Potential registers zp ZP_WORD:86 [ div16u::return#0 ] : zp ZP_WORD:86 , 
Potential registers zp ZP_BYTE:88 [ divr16u::$1 ] : zp ZP_BYTE:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:89 [ divr16u::$2 ] : zp ZP_BYTE:89 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 346.86: zp ZP_WORD:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 249.57: zp ZP_WORD:24 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 202: zp ZP_BYTE:61 [ mul8u::$1 ] 177.67: zp ZP_BYTE:21 [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ] 8: zp ZP_BYTE:20 [ mul8u::b#2 mul8u::b#1 ] 4: zp ZP_WORD:57 [ mul8u::return#2 ] 4: zp ZP_WORD:77 [ mul8u::return#3 ] 
Uplift Scope [] 228.21: zp ZP_WORD:8 [ line_cursor#12 line_cursor#23 line_cursor#1 ] 187.98: zp ZP_WORD:12 [ char_cursor#78 char_cursor#46 char_cursor#73 char_cursor#2 char_cursor#11 char_cursor#92 char_cursor#1 ] 
Uplift Scope [print_str] 305.5: zp ZP_WORD:14 [ print_str::str#8 print_str::str#10 print_str::str#0 ] 
Uplift Scope [divr16u] 96.25: zp ZP_WORD:34 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 37.25: zp ZP_WORD:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 22: zp ZP_BYTE:88 [ divr16u::$1 ] 22: zp ZP_BYTE:89 [ divr16u::$2 ] 18.19: zp ZP_BYTE:40 [ divr16u::i#2 divr16u::i#1 ] 7.46: zp ZP_WORD:36 [ divr16u::dividend#2 divr16u::dividend#0 ] 4: zp ZP_WORD:84 [ divr16u::return#2 ] 
Uplift Scope [sin8s] 27.5: zp ZP_WORD:27 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] 22: zp ZP_BYTE:47 [ sin8s::return#2 ] 13: zp ZP_BYTE:30 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] 10: zp ZP_BYTE:29 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] 4: zp ZP_WORD:62 [ sin8s::$6 ] 4: zp ZP_BYTE:66 [ sin8s::x2#0 ] 4: zp ZP_BYTE:70 [ sin8s::x3_6#0 ] 4: zp ZP_BYTE:73 [ sin8s::x4#0 ] 4: zp ZP_BYTE:75 [ sin8s::x5#0 ] 4: zp ZP_BYTE:76 [ sin8s::x5_128#0 ] 1: zp ZP_BYTE:68 [ sin8s::x3#0 ] 0.64: zp ZP_BYTE:64 [ sin8s::x1#0 ] 0.33: zp ZP_BYTE:71 [ sin8s::usinx#0 ] 0.06: zp ZP_BYTE:26 [ sin8s::isUpper#10 ] 
Uplift Scope [sin8u_table] 22: zp ZP_WORD:51 [ sin8u_table::$17 ] 22: zp ZP_BYTE:53 [ sin8u_table::$18 ] 17.46: zp ZP_WORD:6 [ sin8u_table::i#2 sin8u_table::i#1 ] 9.33: zp ZP_WORD:2 [ sin8u_table::x#2 sin8u_table::x#1 ] 4.57: zp ZP_WORD:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] 3.67: zp ZP_BYTE:54 [ sin8u_table::sinval#0 ] 0.32: zp ZP_WORD:45 [ sin8u_table::step#0 ] 
Uplift Scope [mulu8_sel] 24: zp ZP_BYTE:31 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] 21: zp ZP_BYTE:32 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] 4: zp ZP_BYTE:65 [ mulu8_sel::return#0 ] 4: zp ZP_BYTE:67 [ mulu8_sel::return#1 ] 4: zp ZP_BYTE:69 [ mulu8_sel::return#2 ] 4: zp ZP_BYTE:72 [ mulu8_sel::return#10 ] 4: zp ZP_BYTE:74 [ mulu8_sel::return#11 ] 4: zp ZP_WORD:79 [ mulu8_sel::$0 ] 4: zp ZP_WORD:81 [ mulu8_sel::$1 ] 1.71: zp ZP_BYTE:83 [ mulu8_sel::return#12 ] 0.33: zp ZP_BYTE:33 [ mulu8_sel::select#5 ] 
Uplift Scope [print_byte] 34.75: zp ZP_BYTE:10 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#6 ] 4: zp ZP_BYTE:55 [ print_byte::$0 ] 4: zp ZP_BYTE:56 [ print_byte::$2 ] 
Uplift Scope [mul8su] 22: zp ZP_WORD:49 [ mul8su::return#2 ] 7.33: zp ZP_WORD:18 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] 4: zp ZP_BYTE:59 [ mul8su::$6 ] 4: zp ZP_BYTE:60 [ mul8su::$10 ] 2.6: zp ZP_BYTE:48 [ mul8su::a#0 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:41 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_word] 31.67: zp ZP_WORD:16 [ print_word::w#2 print_word::w#1 print_word::w#0 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:11 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [div16u] 4: zp ZP_WORD:43 [ div16u::return#2 ] 1.33: zp ZP_WORD:86 [ div16u::return#0 ] 
Uplift Scope [print_ln] 
Uplift Scope [main] 

Uplifting [mul8u] best 23649 combination zp ZP_WORD:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp ZP_WORD:24 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ] reg byte a [ mul8u::b#2 mul8u::b#1 ] zp ZP_WORD:57 [ mul8u::return#2 ] zp ZP_WORD:77 [ mul8u::return#3 ] 
Uplifting [] best 23649 combination zp ZP_WORD:8 [ line_cursor#12 line_cursor#23 line_cursor#1 ] zp ZP_WORD:12 [ char_cursor#78 char_cursor#46 char_cursor#73 char_cursor#2 char_cursor#11 char_cursor#92 char_cursor#1 ] 
Uplifting [print_str] best 23649 combination zp ZP_WORD:14 [ print_str::str#8 print_str::str#10 print_str::str#0 ] 
Uplifting [divr16u] best 23459 combination zp ZP_WORD:34 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp ZP_WORD:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp ZP_WORD:36 [ divr16u::dividend#2 divr16u::dividend#0 ] zp ZP_WORD:84 [ divr16u::return#2 ] 
Uplift attempts [sin8s] 10000/1048576 (limiting to 10000)
Uplifting [sin8s] best 23332 combination zp ZP_WORD:27 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] reg byte a [ sin8s::return#2 ] reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] zp ZP_WORD:62 [ sin8s::$6 ] reg byte a [ sin8s::x2#0 ] reg byte a [ sin8s::x3_6#0 ] reg byte a [ sin8s::x4#0 ] reg byte a [ sin8s::x5#0 ] zp ZP_BYTE:76 [ sin8s::x5_128#0 ] zp ZP_BYTE:68 [ sin8s::x3#0 ] zp ZP_BYTE:64 [ sin8s::x1#0 ] zp ZP_BYTE:71 [ sin8s::usinx#0 ] zp ZP_BYTE:26 [ sin8s::isUpper#10 ] 
Limited combination testing to 10000 combinations of 1048576 possible.
Uplifting [sin8u_table] best 23222 combination zp ZP_WORD:51 [ sin8u_table::$17 ] reg byte a [ sin8u_table::$18 ] zp ZP_WORD:6 [ sin8u_table::i#2 sin8u_table::i#1 ] zp ZP_WORD:2 [ sin8u_table::x#2 sin8u_table::x#1 ] zp ZP_WORD:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] reg byte x [ sin8u_table::sinval#0 ] zp ZP_WORD:45 [ sin8u_table::step#0 ] 
Uplift attempts [mulu8_sel] 10000/196608 (limiting to 10000)
Uplifting [mulu8_sel] best 23162 combination reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] reg byte a [ mulu8_sel::return#0 ] reg byte a [ mulu8_sel::return#1 ] reg byte a [ mulu8_sel::return#2 ] reg byte a [ mulu8_sel::return#10 ] reg byte a [ mulu8_sel::return#11 ] zp ZP_WORD:79 [ mulu8_sel::$0 ] zp ZP_WORD:81 [ mulu8_sel::$1 ] zp ZP_BYTE:83 [ mulu8_sel::return#12 ] zp ZP_BYTE:33 [ mulu8_sel::select#5 ] 
Limited combination testing to 10000 combinations of 196608 possible.
Uplifting [print_byte] best 23154 combination zp ZP_BYTE:10 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#6 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [mul8su] best 23130 combination zp ZP_WORD:49 [ mul8su::return#2 ] zp ZP_WORD:18 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] reg byte a [ mul8su::$6 ] reg byte a [ mul8su::$10 ] reg byte y [ mul8su::a#0 ] 
Uplifting [print_cls] best 23130 combination zp ZP_WORD:41 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_word] best 23130 combination zp ZP_WORD:16 [ print_word::w#2 print_word::w#1 print_word::w#0 ] 
Uplifting [print_char] best 23121 combination reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplifting [div16u] best 23121 combination zp ZP_WORD:43 [ div16u::return#2 ] zp ZP_WORD:86 [ div16u::return#0 ] 
Uplifting [print_ln] best 23121 combination 
Uplifting [main] best 23121 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#6 ]
Uplifting [print_byte] best 23121 combination zp ZP_BYTE:10 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:76 [ sin8s::x5_128#0 ]
Uplifting [sin8s] best 23115 combination reg byte a [ sin8s::x5_128#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:83 [ mulu8_sel::return#12 ]
Uplifting [mulu8_sel] best 23097 combination reg byte a [ mulu8_sel::return#12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:68 [ sin8s::x3#0 ]
Uplifting [sin8s] best 23097 combination zp ZP_BYTE:68 [ sin8s::x3#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:64 [ sin8s::x1#0 ]
Uplifting [sin8s] best 23097 combination zp ZP_BYTE:64 [ sin8s::x1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ mulu8_sel::select#5 ]
Uplifting [mulu8_sel] best 23097 combination zp ZP_BYTE:33 [ mulu8_sel::select#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:71 [ sin8s::usinx#0 ]
Uplifting [sin8s] best 23097 combination zp ZP_BYTE:71 [ sin8s::usinx#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ sin8s::isUpper#10 ]
Uplifting [sin8s] best 23097 combination zp ZP_BYTE:26 [ sin8s::isUpper#10 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:2 [ sin8u_table::x#2 sin8u_table::x#1 ] ] with [ zp ZP_WORD:16 [ print_word::w#2 print_word::w#1 print_word::w#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:18 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] ] with [ zp ZP_WORD:49 [ mul8su::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:18 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 mul8su::return#2 ] ] with [ zp ZP_WORD:57 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp ZP_WORD:77 [ mul8u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:27 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] ] with [ zp ZP_WORD:62 [ sin8s::$6 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp ZP_WORD:84 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:43 [ div16u::return#2 ] ] with [ zp ZP_WORD:45 [ sin8u_table::step#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:43 [ div16u::return#2 sin8u_table::step#0 ] ] with [ zp ZP_WORD:86 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:79 [ mulu8_sel::$0 ] ] with [ zp ZP_WORD:81 [ mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:18 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 mul8su::return#2 mul8u::return#2 ] ] with [ zp ZP_WORD:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:18 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 mul8su::return#2 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 ] ] with [ zp ZP_WORD:51 [ sin8u_table::$17 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp ZP_WORD:43 [ div16u::return#2 sin8u_table::step#0 div16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:18 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 mul8su::return#2 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 sin8u_table::$17 ] ] with [ zp ZP_WORD:79 [ mulu8_sel::$0 mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:2 [ sin8u_table::x#2 sin8u_table::x#1 print_word::w#2 print_word::w#1 print_word::w#0 ] ] with [ zp ZP_WORD:34 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ sin8u_table::x#2 sin8u_table::x#1 print_word::w#2 print_word::w#1 print_word::w#0 divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp ZP_WORD:41 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] ] with [ zp ZP_WORD:36 [ divr16u::dividend#2 divr16u::dividend#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:10 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#6 ] ] with [ zp ZP_BYTE:26 [ sin8s::isUpper#10 ] ]
Coalescing zero page register [ zp ZP_WORD:12 [ char_cursor#78 char_cursor#46 char_cursor#73 char_cursor#2 char_cursor#11 char_cursor#92 char_cursor#1 ] ] with [ zp ZP_WORD:18 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 mul8su::return#2 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 sin8u_table::$17 mulu8_sel::$0 mulu8_sel::$1 ] ]
Coalescing zero page register [ zp ZP_WORD:12 [ char_cursor#78 char_cursor#46 char_cursor#73 char_cursor#2 char_cursor#11 char_cursor#92 char_cursor#1 mul8su::m#2 mul8su::m#1 mul8su::m#0 mul8su::return#2 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 sin8u_table::$17 mulu8_sel::$0 mulu8_sel::$1 ] ] with [ zp ZP_WORD:27 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$6 ] ]
Coalescing zero page register [ zp ZP_WORD:14 [ print_str::str#8 print_str::str#10 print_str::str#0 ] ] with [ zp ZP_WORD:24 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] ]
Allocated (was zp ZP_WORD:12) zp ZP_WORD:11 [ char_cursor#78 char_cursor#46 char_cursor#73 char_cursor#2 char_cursor#11 char_cursor#92 char_cursor#1 mul8su::m#2 mul8su::m#1 mul8su::m#0 mul8su::return#2 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 sin8u_table::$17 mulu8_sel::$0 mulu8_sel::$1 sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$6 ]
Allocated (was zp ZP_WORD:14) zp ZP_WORD:13 [ print_str::str#8 print_str::str#10 print_str::str#0 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated (was zp ZP_BYTE:33) zp ZP_BYTE:15 [ mulu8_sel::select#5 ]
Allocated (was zp ZP_WORD:38) zp ZP_WORD:16 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
Allocated (was zp ZP_BYTE:64) zp ZP_BYTE:18 [ sin8s::x1#0 ]
Allocated (was zp ZP_BYTE:68) zp ZP_BYTE:19 [ sin8s::x3#0 ]
Allocated (was zp ZP_BYTE:71) zp ZP_BYTE:20 [ sin8s::usinx#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const PI2_u4f12 = $6488
  .const PI_u4f12 = $3244
  .const PI_HALF_u4f12 = $1922
  .label SCREEN = $400
  .label char_cursor = $b
  .label line_cursor = 8
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @30 [phi:@begin->@30]
b30_from_bbegin:
  jmp b30
//SEG4 @30
b30:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @30 to main [phi:@30->main]
main_from_b30:
  jsr main
//SEG7 [3] phi from @30 to @end [phi:@30->@end]
bend_from_b30:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label tabsize = $14
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [185] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call sin8u_table param-assignment [ ] ( main:2 [ ] )
  //SEG15 [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
  sin8u_table_from_b1:
    jsr sin8u_table
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [8] return  [ ] ( main:2 [ ] )
    rts
    sintab: .fill $14, 0
}
//SEG18 sin8u_table
sin8u_table: {
    .const min = $a
    .const max = $ff
    .label amplitude = max-min
    .const sum = min+max
    .const mid = $ff & sum>>1
    .label _17 = $b
    .label step = $10
    .label sintab = 4
    .label x = 2
    .label i = 6
  //SEG19 [10] call div16u param-assignment [ div16u::return#0 ] ( main:2::sin8u_table:7 [ div16u::return#0 ] )
  //SEG20 [163] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
  div16u_from_sin8u_table:
    jsr div16u
  //SEG21 [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] )
    // (word) div16u::return#2 = (word) div16u::return#0  // register copy zp ZP_WORD:16
    jmp b3
  //SEG22 sin8u_table::@3
  b3:
  //SEG23 [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] )
    // (word) sin8u_table::step#0 = (word) div16u::return#2  // register copy zp ZP_WORD:16
  //SEG24 [13] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG25 [77] phi from sin8u_table::@3 to print_str [phi:sin8u_table::@3->print_str]
  print_str_from_b3:
  //SEG26 [77] phi (byte*) char_cursor#78 = (const byte*) SCREEN#0 [phi:sin8u_table::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta char_cursor
    lda #>SCREEN
    sta char_cursor+1
  //SEG27 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str [phi:sin8u_table::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b4
  //SEG28 sin8u_table::@4
  b4:
  //SEG29 [14] (word) print_word::w#0 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] ) -- vwuz1=vwuz2 
    lda step
    sta print_word.w
    lda step+1
    sta print_word.w+1
  //SEG30 [15] call print_word param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG31 [84] phi from sin8u_table::@4 to print_word [phi:sin8u_table::@4->print_word]
  print_word_from_b4:
  //SEG32 [84] phi (word) print_word::w#2 = (word) print_word::w#0 [phi:sin8u_table::@4->print_word#0] -- register_copy 
    jsr print_word
  //SEG33 [16] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
  b5_from_b4:
    jmp b5
  //SEG34 sin8u_table::@5
  b5:
  //SEG35 [17] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG36 [77] phi from sin8u_table::@5 to print_str [phi:sin8u_table::@5->print_str]
  print_str_from_b5:
  //SEG37 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@5->print_str#0] -- register_copy 
  //SEG38 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str1 [phi:sin8u_table::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG39 [18] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
  b6_from_b5:
    jmp b6
  //SEG40 sin8u_table::@6
  b6:
  //SEG41 [19] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG42 [65] phi from sin8u_table::@6 to print_byte [phi:sin8u_table::@6->print_byte]
  print_byte_from_b6:
  //SEG43 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@6->print_byte#0] -- register_copy 
  //SEG44 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@6->print_byte#1] -- vbuz1=vbuc1 
    lda #min
    sta print_byte.b
    jsr print_byte
  //SEG45 [20] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
  b7_from_b6:
    jmp b7
  //SEG46 sin8u_table::@7
  b7:
  //SEG47 [21] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG48 [77] phi from sin8u_table::@7 to print_str [phi:sin8u_table::@7->print_str]
  print_str_from_b7:
  //SEG49 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@7->print_str#0] -- register_copy 
  //SEG50 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str2 [phi:sin8u_table::@7->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG51 [22] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
  b8_from_b7:
    jmp b8
  //SEG52 sin8u_table::@8
  b8:
  //SEG53 [23] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG54 [65] phi from sin8u_table::@8 to print_byte [phi:sin8u_table::@8->print_byte]
  print_byte_from_b8:
  //SEG55 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@8->print_byte#0] -- register_copy 
  //SEG56 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@8->print_byte#1] -- vbuz1=vbuc1 
    lda #max
    sta print_byte.b
    jsr print_byte
  //SEG57 [24] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
  b9_from_b8:
    jmp b9
  //SEG58 sin8u_table::@9
  b9:
  //SEG59 [25] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG60 [77] phi from sin8u_table::@9 to print_str [phi:sin8u_table::@9->print_str]
  print_str_from_b9:
  //SEG61 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@9->print_str#0] -- register_copy 
  //SEG62 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str3 [phi:sin8u_table::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
  //SEG63 [26] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
  b10_from_b9:
    jmp b10
  //SEG64 sin8u_table::@10
  b10:
  //SEG65 [27] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG66 [65] phi from sin8u_table::@10 to print_byte [phi:sin8u_table::@10->print_byte]
  print_byte_from_b10:
  //SEG67 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@10->print_byte#0] -- register_copy 
  //SEG68 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@10->print_byte#1] -- vbuz1=vbuc1 
    lda #amplitude
    sta print_byte.b
    jsr print_byte
  //SEG69 [28] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
  b11_from_b10:
    jmp b11
  //SEG70 sin8u_table::@11
  b11:
  //SEG71 [29] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG72 [77] phi from sin8u_table::@11 to print_str [phi:sin8u_table::@11->print_str]
  print_str_from_b11:
  //SEG73 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@11->print_str#0] -- register_copy 
  //SEG74 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str4 [phi:sin8u_table::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
  //SEG75 [30] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
  b12_from_b11:
    jmp b12
  //SEG76 sin8u_table::@12
  b12:
  //SEG77 [31] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG78 [65] phi from sin8u_table::@12 to print_byte [phi:sin8u_table::@12->print_byte]
  print_byte_from_b12:
  //SEG79 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@12->print_byte#0] -- register_copy 
  //SEG80 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@12->print_byte#1] -- vbuz1=vbuc1 
    lda #mid
    sta print_byte.b
    jsr print_byte
  //SEG81 [32] phi from sin8u_table::@12 to sin8u_table::@13 [phi:sin8u_table::@12->sin8u_table::@13]
  b13_from_b12:
    jmp b13
  //SEG82 sin8u_table::@13
  b13:
  //SEG83 [33] call print_ln param-assignment [ sin8u_table::step#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 line_cursor#1 ] )
  //SEG84 [60] phi from sin8u_table::@13 to print_ln [phi:sin8u_table::@13->print_ln]
  print_ln_from_b13:
  //SEG85 [60] phi (byte*) line_cursor#23 = (const byte*) SCREEN#0 [phi:sin8u_table::@13->print_ln#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta line_cursor
    lda #>SCREEN
    sta line_cursor+1
    jsr print_ln
  //SEG86 [34] phi from sin8u_table::@13 to sin8u_table::@1 [phi:sin8u_table::@13->sin8u_table::@1]
  b1_from_b13:
  //SEG87 [34] phi (word) sin8u_table::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8u_table::@13->sin8u_table::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
  //SEG88 [34] phi (byte*) sin8u_table::sintab#2 = (const byte[20]) main::sintab#0 [phi:sin8u_table::@13->sin8u_table::@1#1] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta sintab
    lda #>main.sintab
    sta sintab+1
  //SEG89 [34] phi (word) sin8u_table::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8u_table::@13->sin8u_table::@1#2] -- vwuz1=vbuc1 
    lda #<0
    sta x
    lda #>0
    sta x+1
    jmp b1
  //SEG90 [34] phi from sin8u_table::@21 to sin8u_table::@1 [phi:sin8u_table::@21->sin8u_table::@1]
  b1_from_b21:
  //SEG91 [34] phi (word) sin8u_table::i#2 = (word) sin8u_table::i#1 [phi:sin8u_table::@21->sin8u_table::@1#0] -- register_copy 
  //SEG92 [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@21->sin8u_table::@1#1] -- register_copy 
  //SEG93 [34] phi (word) sin8u_table::x#2 = (word) sin8u_table::x#1 [phi:sin8u_table::@21->sin8u_table::@1#2] -- register_copy 
    jmp b1
  //SEG94 sin8u_table::@1
  b1:
  //SEG95 [35] (word) sin8s::x#2 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] ) -- vwuz1=vwuz2 
    lda x
    sta sin8s.x
    lda x+1
    sta sin8s.x+1
  //SEG96 [36] call sin8s param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#0 line_cursor#1 ] )
    jsr sin8s
  //SEG97 [37] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#2 line_cursor#1 ] )
    // (signed byte) sin8s::return#2 = (signed byte) sin8s::return#0  // register copy reg byte a
    jmp b15
  //SEG98 sin8u_table::@15
  b15:
  //SEG99 [38] (signed byte) mul8su::a#0 ← (signed byte) sin8s::return#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::a#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::a#0 line_cursor#1 ] ) -- vbsyy=vbsaa 
    tay
  //SEG100 [39] call mul8su param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::m#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::m#2 line_cursor#1 ] )
    jsr mul8su
  //SEG101 [40] (signed word) mul8su::return#2 ← (signed word)(word) mul8su::m#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] )
    // (signed word) mul8su::return#2 = (signed word)(word) mul8su::m#2  // register copy zp ZP_WORD:11
    jmp b16
  //SEG102 sin8u_table::@16
  b16:
  //SEG103 [41] (signed word~) sin8u_table::$17 ← (signed word) mul8su::return#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] )
    // (signed word~) sin8u_table::$17 = (signed word) mul8su::return#2  // register copy zp ZP_WORD:11
  //SEG104 [42] (byte~) sin8u_table::$18 ← > (signed word~) sin8u_table::$17 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$18 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$18 line_cursor#1 ] ) -- vbuaa=_hi_vwsz1 
    lda _17+1
  //SEG105 [43] (byte) sin8u_table::sinval#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$18 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ) -- vbuxx=vbuc1_plus_vbuaa 
    clc
    adc #mid
    tax
  //SEG106 [44] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinval#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ) -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (sintab),y
  //SEG107 [45] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sintab
    bne !+
    inc sintab+1
  !:
  //SEG108 [46] (byte*~) char_cursor#92 ← (byte*) line_cursor#1 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG109 [47] call print_str param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
  //SEG110 [77] phi from sin8u_table::@16 to print_str [phi:sin8u_table::@16->print_str]
  print_str_from_b16:
  //SEG111 [77] phi (byte*) char_cursor#78 = (byte*~) char_cursor#92 [phi:sin8u_table::@16->print_str#0] -- register_copy 
  //SEG112 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str5 [phi:sin8u_table::@16->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta print_str.str
    lda #>str5
    sta print_str.str+1
    jsr print_str
    jmp b17
  //SEG113 sin8u_table::@17
  b17:
  //SEG114 [48] (word) print_word::w#1 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] )
    // (word) print_word::w#1 = (word) sin8u_table::x#2  // register copy zp ZP_WORD:2
  //SEG115 [49] call print_word param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  //SEG116 [84] phi from sin8u_table::@17 to print_word [phi:sin8u_table::@17->print_word]
  print_word_from_b17:
  //SEG117 [84] phi (word) print_word::w#2 = (word) print_word::w#1 [phi:sin8u_table::@17->print_word#0] -- register_copy 
    jsr print_word
  //SEG118 [50] phi from sin8u_table::@17 to sin8u_table::@18 [phi:sin8u_table::@17->sin8u_table::@18]
  b18_from_b17:
    jmp b18
  //SEG119 sin8u_table::@18
  b18:
  //SEG120 [51] call print_str param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
  //SEG121 [77] phi from sin8u_table::@18 to print_str [phi:sin8u_table::@18->print_str]
  print_str_from_b18:
  //SEG122 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@18->print_str#0] -- register_copy 
  //SEG123 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str6 [phi:sin8u_table::@18->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta print_str.str
    lda #>str6
    sta print_str.str+1
    jsr print_str
    jmp b19
  //SEG124 sin8u_table::@19
  b19:
  //SEG125 [52] (byte) print_byte::b#6 ← (byte) sin8u_table::sinval#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#6 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#6 char_cursor#2 ] ) -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG126 [53] call print_byte param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] )
  //SEG127 [65] phi from sin8u_table::@19 to print_byte [phi:sin8u_table::@19->print_byte]
  print_byte_from_b19:
  //SEG128 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@19->print_byte#0] -- register_copy 
  //SEG129 [65] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:sin8u_table::@19->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG130 [54] phi from sin8u_table::@19 to sin8u_table::@20 [phi:sin8u_table::@19->sin8u_table::@20]
  b20_from_b19:
    jmp b20
  //SEG131 sin8u_table::@20
  b20:
  //SEG132 [55] call print_ln param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] )
  //SEG133 [60] phi from sin8u_table::@20 to print_ln [phi:sin8u_table::@20->print_ln]
  print_ln_from_b20:
  //SEG134 [60] phi (byte*) line_cursor#23 = (byte*) line_cursor#1 [phi:sin8u_table::@20->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b21
  //SEG135 sin8u_table::@21
  b21:
  //SEG136 [56] (word) sin8u_table::x#1 ← (word) sin8u_table::x#2 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] ) -- vwuz1=vwuz1_plus_vwuz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
  //SEG137 [57] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#2 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ) -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG138 [58] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.tabsize
    bcc b1_from_b21
    bne !+
    lda i
    cmp #<main.tabsize
    bcc b1_from_b21
  !:
    jmp breturn
  //SEG139 sin8u_table::@return
  breturn:
  //SEG140 [59] return  [ ] ( main:2::sin8u_table:7 [ ] )
    rts
    str: .text "step:@"
    str1: .text " min:@"
    str2: .text " max:@"
    str3: .text " ampl:@"
    str4: .text " mid:@"
    str5: .text "x: @"
    str6: .text " sin: @"
}
//SEG141 print_ln
print_ln: {
  //SEG142 [61] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG143 [61] phi (byte*) line_cursor#12 = (byte*) line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG144 print_ln::@1
  b1:
  //SEG145 [62] (byte*) line_cursor#1 ← (byte*) line_cursor#12 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG146 [63] if((byte*) line_cursor#1<(byte*) char_cursor#11) goto print_ln::@1 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG147 print_ln::@return
  breturn:
  //SEG148 [64] return  [ line_cursor#1 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] )
    rts
}
//SEG149 print_byte
print_byte: {
    .label b = $a
  //SEG150 [66] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#73 print_byte::$0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#73 print_byte::$0 ] ) -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG151 [67] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#73 print_char::ch#0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#73 print_char::ch#0 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG152 [68] call print_char param-assignment [ char_cursor#11 print_byte::b#7 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::b#7 ] )
  //SEG153 [73] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG154 [73] phi (byte*) char_cursor#46 = (byte*) char_cursor#73 [phi:print_byte->print_char#0] -- register_copy 
  //SEG155 [73] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG156 print_byte::@1
  b1:
  //SEG157 [69] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#11 print_byte::$2 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::$2 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG158 [70] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#11 print_char::ch#1 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_char::ch#1 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG159 [71] call print_char param-assignment [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  //SEG160 [73] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG161 [73] phi (byte*) char_cursor#46 = (byte*) char_cursor#11 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG162 [73] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG163 print_byte::@return
  breturn:
  //SEG164 [72] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG165 print_char
print_char: {
  //SEG166 [74] *((byte*) char_cursor#46) ← (byte) print_char::ch#2 [ char_cursor#46 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#46 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG167 [75] (byte*) char_cursor#11 ← ++ (byte*) char_cursor#46 [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG168 print_char::@return
  breturn:
  //SEG169 [76] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
    rts
}
//SEG170 print_str
print_str: {
    .label str = $d
  //SEG171 [78] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG172 [78] phi (byte*) char_cursor#2 = (byte*) char_cursor#78 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG173 [78] phi (byte*) print_str::str#8 = (byte*) print_str::str#10 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG174 print_str::@1
  b1:
  //SEG175 [79] if(*((byte*) print_str::str#8)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG176 print_str::@return
  breturn:
  //SEG177 [80] return  [ char_cursor#2 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
    rts
  //SEG178 print_str::@2
  b2:
  //SEG179 [81] *((byte*) char_cursor#2) ← *((byte*) print_str::str#8) [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (char_cursor),y
  //SEG180 [82] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#2 [ print_str::str#8 char_cursor#1 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#8 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG181 [83] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#8 [ print_str::str#0 char_cursor#1 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG182 print_word
print_word: {
    .label w = 2
  //SEG183 [85] (byte) print_byte::b#0 ← > (word) print_word::w#2 [ char_cursor#2 print_byte::b#0 print_word::w#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#2 print_byte::b#0 print_word::w#2 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_byte::b#0 print_word::w#2 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG184 [86] call print_byte param-assignment [ char_cursor#11 print_word::w#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 print_word::w#2 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_word::w#2 ] )
  //SEG185 [65] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG186 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:print_word->print_byte#0] -- register_copy 
  //SEG187 [65] phi (byte) print_byte::b#7 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG188 print_word::@1
  b1:
  //SEG189 [87] (byte) print_byte::b#1 ← < (word) print_word::w#2 [ char_cursor#11 print_byte::b#1 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 print_byte::b#1 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::b#1 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG190 [88] call print_byte param-assignment [ char_cursor#11 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  //SEG191 [65] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG192 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#11 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG193 [65] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG194 print_word::@return
  breturn:
  //SEG195 [89] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
    rts
}
//SEG196 mul8su
mul8su: {
    .label m = $b
    .label return = $b
  //SEG197 [90] (byte~) mul8u::a#8 ← (byte)(signed byte) mul8su::a#0 [ mul8su::a#0 mul8u::a#8 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#8 ] ) -- vbuxx=vbuyy 
    tya
    tax
  //SEG198 [91] call mul8u param-assignment [ mul8su::a#0 mul8u::res#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 ] )
  //SEG199 [100] phi from mul8su to mul8u [phi:mul8su->mul8u]
  mul8u_from_mul8su:
  //SEG200 [100] phi (byte) mul8u::a#6 = (byte~) mul8u::a#8 [phi:mul8su->mul8u#0] -- register_copy 
  //SEG201 [100] phi (byte) mul8u::b#2 = ((byte))(const byte) sin8u_table::amplitude#0 [phi:mul8su->mul8u#1] -- vbuaa=vbuc1 
    lda #sin8u_table.amplitude
    jsr mul8u
  //SEG202 [92] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::return#2 ] )
    // (word) mul8u::return#2 = (word) mul8u::res#2  // register copy zp ZP_WORD:11
    jmp b4
  //SEG203 mul8su::@4
  b4:
  //SEG204 [93] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8su::m#0 ] )
    // (word) mul8su::m#0 = (word) mul8u::return#2  // register copy zp ZP_WORD:11
  //SEG205 [94] if((signed byte) mul8su::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8su::@1 [ mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 ] ) -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl b1_from_b4
    jmp b2
  //SEG206 mul8su::@2
  b2:
  //SEG207 [95] (byte~) mul8su::$6 ← > (word) mul8su::m#0 [ mul8su::m#0 mul8su::$6 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$6 ] ) -- vbuaa=_hi_vwuz1 
    lda m+1
  //SEG208 [96] (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 ← (byte~) mul8su::$6 - ((byte))(const byte) sin8u_table::amplitude#0 [ mul8su::m#0 mul8su::$10 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$10 ] ) -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #sin8u_table.amplitude
  //SEG209 [97] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 [ mul8su::m#1 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#1 ] ) -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
  //SEG210 [98] phi from mul8su::@2 mul8su::@4 to mul8su::@1 [phi:mul8su::@2/mul8su::@4->mul8su::@1]
  b1_from_b2:
  b1_from_b4:
  //SEG211 [98] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@4->mul8su::@1#0] -- register_copy 
    jmp b1
  //SEG212 mul8su::@1
  b1:
    jmp breturn
  //SEG213 mul8su::@return
  breturn:
  //SEG214 [99] return  [ mul8su::m#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#2 ] )
    rts
}
//SEG215 mul8u
mul8u: {
    .label mb = $d
    .label res = $b
    .label return = $b
  //SEG216 [101] (word) mul8u::mb#0 ← ((word)) (byte) mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] ) -- vwuz1=_word_vbuaa 
    sta mb
    lda #0
    sta mb+1
  //SEG217 [102] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  b1_from_mul8u:
  //SEG218 [102] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
  //SEG219 [102] phi (word) mul8u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta res
    lda #>0
    sta res+1
  //SEG220 [102] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp b1
  //SEG221 mul8u::@1
  b1:
  //SEG222 [103] if((byte) mul8u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@2 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b2
    jmp breturn
  //SEG223 mul8u::@return
  breturn:
  //SEG224 [104] return  [ mul8u::res#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 ] )
    rts
  //SEG225 mul8u::@2
  b2:
  //SEG226 [105] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG227 [106] if((byte~) mul8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@4 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4_from_b2
    jmp b7
  //SEG228 mul8u::@7
  b7:
  //SEG229 [107] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ) -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG230 [108] phi from mul8u::@2 mul8u::@7 to mul8u::@4 [phi:mul8u::@2/mul8u::@7->mul8u::@4]
  b4_from_b2:
  b4_from_b7:
  //SEG231 [108] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@7->mul8u::@4#0] -- register_copy 
    jmp b4
  //SEG232 mul8u::@4
  b4:
  //SEG233 [109] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] ) -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
  //SEG234 [110] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG235 [102] phi from mul8u::@4 to mul8u::@1 [phi:mul8u::@4->mul8u::@1]
  b1_from_b4:
  //SEG236 [102] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@4->mul8u::@1#0] -- register_copy 
  //SEG237 [102] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@4->mul8u::@1#1] -- register_copy 
  //SEG238 [102] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@4->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG239 sin8s
sin8s: {
    .const DIV_6 = $2b
    .label _6 = $b
    .label x = $b
    .label x1 = $12
    .label x3 = $13
    .label usinx = $14
    .label isUpper = $a
  //SEG240 [111] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#2 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b1_from_sin8s
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b1_from_sin8s
  !:
    jmp b5
  //SEG241 sin8s::@5
  b5:
  //SEG242 [112] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#0 ] ) -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG243 [113] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  b1_from_b5:
  //SEG244 [113] phi (byte) sin8s::isUpper#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG245 [113] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG246 [113] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b1_from_sin8s:
  //SEG247 [113] phi (byte) sin8s::isUpper#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG248 [113] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG249 sin8s::@1
  b1:
  //SEG250 [114] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2_from_b1
  !:
    jmp b6
  //SEG251 sin8s::@6
  b6:
  //SEG252 [115] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] ) -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG253 [116] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  b2_from_b1:
  b2_from_b6:
  //SEG254 [116] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp b2
  //SEG255 sin8s::@2
  b2:
  //SEG256 [117] (word~) sin8s::$6 ← (word) sin8s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin8s::isUpper#10 sin8s::$6 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::$6 ] ) -- vwuz1=vwuz1_rol_3 
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
  //SEG257 [118] (byte) sin8s::x1#0 ← > (word~) sin8s::$6 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 ] ) -- vbuz1=_hi_vwuz2 
    lda _6+1
    sta x1
  //SEG258 [119] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 ] ) -- vbuxx=vbuz1 
    ldx x1
  //SEG259 [120] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 mulu8_sel::v2#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 mulu8_sel::v2#0 ] ) -- vbuyy=vbuz1 
    ldy x1
  //SEG260 [121] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] )
  //SEG261 [154] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from_b2:
  //SEG262 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG263 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
  //SEG264 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG265 [122] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#0 ] )
    // (byte) mulu8_sel::return#0 = (byte) mulu8_sel::return#12  // register copy reg byte a
    jmp b10
  //SEG266 sin8s::@10
  b10:
  //SEG267 [123] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x2#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x2#0 ] )
    // (byte) sin8s::x2#0 = (byte) mulu8_sel::return#0  // register copy reg byte a
  //SEG268 [124] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 ] ) -- vbuxx=vbuaa 
    tax
  //SEG269 [125] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 mulu8_sel::v2#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 mulu8_sel::v2#1 ] ) -- vbuyy=vbuz1 
    ldy x1
  //SEG270 [126] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] )
  //SEG271 [154] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from_b10:
  //SEG272 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG273 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@10->mulu8_sel#1] -- register_copy 
  //SEG274 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG275 [127] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#1 ] )
    // (byte) mulu8_sel::return#1 = (byte) mulu8_sel::return#12  // register copy reg byte a
    jmp b11
  //SEG276 sin8s::@11
  b11:
  //SEG277 [128] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 ] ) -- vbuz1=vbuaa 
    sta x3
  //SEG278 [129] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::v1#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::v1#2 ] ) -- vbuxx=vbuz1 
    ldx x3
  //SEG279 [130] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::x3#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::x3#0 ] )
  //SEG280 [154] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from_b11:
  //SEG281 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG282 [154] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6#0 [phi:sin8s::@11->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
  //SEG283 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG284 [131] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#2 ] )
    // (byte) mulu8_sel::return#2 = (byte) mulu8_sel::return#12  // register copy reg byte a
    jmp b12
  //SEG285 sin8s::@12
  b12:
  //SEG286 [132] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::x3_6#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::x3_6#0 ] )
    // (byte) sin8s::x3_6#0 = (byte) mulu8_sel::return#2  // register copy reg byte a
  //SEG287 [133] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc x1
    sta usinx
  //SEG288 [134] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 ] ) -- vbuxx=vbuz1 
    ldx x3
  //SEG289 [135] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 mulu8_sel::v2#3 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 mulu8_sel::v2#3 ] ) -- vbuyy=vbuz1 
    ldy x1
  //SEG290 [136] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::usinx#0 ] )
  //SEG291 [154] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from_b12:
  //SEG292 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG293 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
  //SEG294 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG295 [137] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#10 ] )
    // (byte) mulu8_sel::return#10 = (byte) mulu8_sel::return#12  // register copy reg byte a
    jmp b13
  //SEG296 sin8s::@13
  b13:
  //SEG297 [138] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 sin8s::x4#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 sin8s::x4#0 ] )
    // (byte) sin8s::x4#0 = (byte) mulu8_sel::return#10  // register copy reg byte a
  //SEG298 [139] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#4 ] ) -- vbuxx=vbuaa 
    tax
  //SEG299 [140] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::v1#4 mulu8_sel::v2#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::v1#4 mulu8_sel::v2#4 ] ) -- vbuyy=vbuz1 
    ldy x1
  //SEG300 [141] call mulu8_sel param-assignment [ sin8s::isUpper#10 mulu8_sel::return#12 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 mulu8_sel::return#12 sin8s::usinx#0 ] )
  //SEG301 [154] phi from sin8s::@13 to mulu8_sel [phi:sin8s::@13->mulu8_sel]
  mulu8_sel_from_b13:
  //SEG302 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s::@13->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG303 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@13->mulu8_sel#1] -- register_copy 
  //SEG304 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@13->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG305 [142] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#11 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#11 ] )
    // (byte) mulu8_sel::return#11 = (byte) mulu8_sel::return#12  // register copy reg byte a
    jmp b14
  //SEG306 sin8s::@14
  b14:
  //SEG307 [143] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5#0 ] )
    // (byte) sin8s::x5#0 = (byte) mulu8_sel::return#11  // register copy reg byte a
  //SEG308 [144] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ) -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
  //SEG309 [145] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc usinx
    tax
  //SEG310 [146] if((byte) sin8s::usinx#1<(byte/word/signed word/dword/signed dword) 128) goto sin8s::@3 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc b3_from_b14
    jmp b7
  //SEG311 sin8s::@7
  b7:
  //SEG312 [147] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 [ sin8s::isUpper#10 sin8s::usinx#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#2 ] ) -- vbuxx=_dec_vbuxx 
    dex
  //SEG313 [148] phi from sin8s::@14 sin8s::@7 to sin8s::@3 [phi:sin8s::@14/sin8s::@7->sin8s::@3]
  b3_from_b14:
  b3_from_b7:
  //SEG314 [148] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@14/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp b3
  //SEG315 sin8s::@3
  b3:
  //SEG316 [149] if((byte) sin8s::isUpper#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin8s::@18 [ sin8s::usinx#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::usinx#4 ] ) -- vbuz1_eq_0_then_la1 
    lda isUpper
    beq b18
    jmp b8
  //SEG317 sin8s::@8
  b8:
  //SEG318 [150] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::sinx#1 ] ) -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG319 [151] phi from sin8s::@18 sin8s::@8 to sin8s::@4 [phi:sin8s::@18/sin8s::@8->sin8s::@4]
  b4_from_b18:
  b4_from_b8:
  //SEG320 [151] phi (signed byte) sin8s::return#0 = (signed byte~) sin8s::return#5 [phi:sin8s::@18/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp b4
  //SEG321 sin8s::@4
  b4:
    jmp breturn
  //SEG322 sin8s::@return
  breturn:
  //SEG323 [152] return  [ sin8s::return#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::return#0 ] )
    rts
  //SEG324 sin8s::@18
  b18:
  //SEG325 [153] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 [ sin8s::return#5 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::return#5 ] ) -- vbsaa=vbsxx 
    txa
    jmp b4_from_b18
}
//SEG326 mulu8_sel
mulu8_sel: {
    .label _0 = $b
    .label _1 = $b
    .label select = $f
  //SEG327 [155] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5 [ mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] )
    // (byte) mul8u::a#2 = (byte) mulu8_sel::v1#5  // register copy reg byte x
  //SEG328 [156] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 [ mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] ) -- vbuaa=vbuyy 
    tya
  //SEG329 [157] call mul8u param-assignment [ mul8u::res#2 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::res#2 mulu8_sel::select#5 ] )
  //SEG330 [100] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
  //SEG331 [100] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
  //SEG332 [100] phi (byte) mul8u::b#2 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- register_copy 
    jsr mul8u
  //SEG333 [158] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] )
    // (word) mul8u::return#3 = (word) mul8u::res#2  // register copy zp ZP_WORD:11
    jmp b2
  //SEG334 mulu8_sel::@2
  b2:
  //SEG335 [159] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] )
    // (word~) mulu8_sel::$0 = (word) mul8u::return#3  // register copy zp ZP_WORD:11
  //SEG336 [160] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) -- vwuz1=vwuz1_rol_vbuz2 
    ldy select
    beq !e+
  !:
    asl _1
    rol _1+1
    dey
    bne !-
  !e:
  //SEG337 [161] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) -- vbuaa=_hi_vwuz1 
    lda _1+1
    jmp breturn
  //SEG338 mulu8_sel::@return
  breturn:
  //SEG339 [162] return  [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] )
    rts
}
//SEG340 div16u
div16u: {
    .label return = $10
  //SEG341 [164] call divr16u param-assignment [ divr16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#0 ] )
  //SEG342 [168] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
  //SEG343 [165] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] )
    // (word) divr16u::return#2 = (word) divr16u::return#0  // register copy zp ZP_WORD:16
    jmp b2
  //SEG344 div16u::@2
  b2:
  //SEG345 [166] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] )
    // (word) div16u::return#0 = (word) divr16u::return#2  // register copy zp ZP_WORD:16
    jmp breturn
  //SEG346 div16u::@return
  breturn:
  //SEG347 [167] return  [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] )
    rts
}
//SEG348 divr16u
divr16u: {
    .label rem = 2
    .label dividend = 4
    .label quotient = $10
    .label return = $10
  //SEG349 [169] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG350 [169] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG351 [169] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta quotient
    lda #>0
    sta quotient+1
  //SEG352 [169] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12#0 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta dividend
    lda #>PI2_u4f12
    sta dividend+1
  //SEG353 [169] phi (word) divr16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta rem
    lda #>0
    sta rem+1
    jmp b1
  //SEG354 [169] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG355 [169] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG356 [169] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG357 [169] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG358 [169] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG359 divr16u::@1
  b1:
  //SEG360 [170] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG361 [171] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG362 [172] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG363 [173] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG364 divr16u::@4
  b4:
  //SEG365 [174] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG366 [175] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG367 [175] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG368 divr16u::@2
  b2:
  //SEG369 [176] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG370 [177] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG371 [178] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.tabsize
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<main.tabsize
    bcc b3_from_b2
  !:
    jmp b5
  //SEG372 divr16u::@5
  b5:
  //SEG373 [179] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG374 [180] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.tabsize
    sta rem
    lda rem+1
    sbc #>main.tabsize
    sta rem+1
  //SEG375 [181] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG376 [181] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG377 [181] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG378 divr16u::@3
  b3:
  //SEG379 [182] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG380 [183] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp breturn
  //SEG381 divr16u::@return
  breturn:
  //SEG382 [184] return  [ divr16u::return#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 ] )
    rts
}
//SEG383 print_cls
print_cls: {
    .label sc = 2
  //SEG384 [186] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG385 [186] phi (byte*) print_cls::sc#2 = (const byte*) SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
    jmp b1
  //SEG386 [186] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG387 [186] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG388 print_cls::@1
  b1:
  //SEG389 [187] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG390 [188] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG391 [189] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bne b1_from_b1
    lda sc
    cmp #<SCREEN+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG392 print_cls::@return
  breturn:
  //SEG393 [190] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b30
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b1
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp b18
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b21
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp b8
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction ldy #0
Removing instruction lda #>0
Replacing instruction ldx x1 with TAX
Replacing instruction ldy x1 with TAY
Replacing instruction ldx x3 with TAX
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b21 with b1
Replacing label b1_from_b21 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b2 with b1
Replacing label b1_from_b4 with b1
Replacing label b4_from_b2 with b4
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b3_from_b14 with b3
Replacing label b4_from_b18 with b4
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b30_from_bbegin:
Removing instruction main_from_b30:
Removing instruction bend_from_b30:
Removing instruction b1_from_main:
Removing instruction sin8u_table_from_b1:
Removing instruction b5_from_b4:
Removing instruction print_str_from_b5:
Removing instruction b6_from_b5:
Removing instruction print_byte_from_b6:
Removing instruction b7_from_b6:
Removing instruction print_str_from_b7:
Removing instruction b8_from_b7:
Removing instruction print_byte_from_b8:
Removing instruction b9_from_b8:
Removing instruction print_str_from_b9:
Removing instruction b10_from_b9:
Removing instruction print_byte_from_b10:
Removing instruction b11_from_b10:
Removing instruction print_str_from_b11:
Removing instruction b12_from_b11:
Removing instruction print_byte_from_b12:
Removing instruction b13_from_b12:
Removing instruction print_ln_from_b13:
Removing instruction b1_from_b21:
Removing instruction b18_from_b17:
Removing instruction print_str_from_b18:
Removing instruction b20_from_b19:
Removing instruction print_ln_from_b20:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction b1_from_b2:
Removing instruction b1_from_b4:
Removing instruction breturn:
Removing instruction b4_from_b2:
Removing instruction b4_from_b7:
Removing instruction b2_from_b1:
Removing instruction b2_from_b6:
Removing instruction b3_from_b14:
Removing instruction b3_from_b7:
Removing instruction b4_from_b18:
Removing instruction b4_from_b8:
Removing instruction breturn:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b30:
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1:
Removing instruction breturn:
Removing instruction div16u_from_sin8u_table:
Removing instruction b3:
Removing instruction print_str_from_b3:
Removing instruction b4:
Removing instruction print_word_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b13:
Removing instruction b1_from_b13:
Removing instruction b15:
Removing instruction b16:
Removing instruction print_str_from_b16:
Removing instruction b17:
Removing instruction print_word_from_b17:
Removing instruction b18:
Removing instruction b19:
Removing instruction print_byte_from_b19:
Removing instruction b20:
Removing instruction b21:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction mul8u_from_mul8su:
Removing instruction b4:
Removing instruction b2:
Removing instruction b1_from_mul8u:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b1_from_b4:
Removing instruction b5:
Removing instruction b1_from_b5:
Removing instruction b6:
Removing instruction mulu8_sel_from_b2:
Removing instruction b10:
Removing instruction mulu8_sel_from_b10:
Removing instruction b11:
Removing instruction mulu8_sel_from_b11:
Removing instruction b12:
Removing instruction mulu8_sel_from_b12:
Removing instruction b13:
Removing instruction mulu8_sel_from_b13:
Removing instruction b14:
Removing instruction b7:
Removing instruction b8:
Removing instruction mul8u_from_mulu8_sel:
Removing instruction b2:
Removing instruction breturn:
Removing instruction divr16u_from_div16u:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_divr16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label b1_from_sin8s to b5
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
(label) @30
(label) @begin
(label) @end
(word) PI2_u4f12
(const word) PI2_u4f12#0 PI2_u4f12 = (word/signed word/dword/signed dword) 25736
(word) PI_HALF_u4f12
(const word) PI_HALF_u4f12#0 PI_HALF_u4f12 = (word/signed word/dword/signed dword) 6434
(word) PI_u4f12
(const word) PI_u4f12#0 PI_u4f12 = (word/signed word/dword/signed dword) 12868
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte*) char_cursor
(byte*) char_cursor#1 char_cursor zp ZP_WORD:11 101.0
(byte*) char_cursor#11 char_cursor zp ZP_WORD:11 4.344827586206896
(byte*) char_cursor#2 char_cursor zp ZP_WORD:11 16.3
(byte*) char_cursor#46 char_cursor zp ZP_WORD:11 4.0
(byte*) char_cursor#73 char_cursor zp ZP_WORD:11 8.333333333333334
(byte*) char_cursor#78 char_cursor zp ZP_WORD:11 32.0
(byte*~) char_cursor#92 char_cursor zp ZP_WORD:11 22.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@2
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 return zp ZP_WORD:16 1.3333333333333333
(word) div16u::return#2 return zp ZP_WORD:16 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 22.0
(byte~) divr16u::$2 reg byte a 22.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:4 2.75
(word) divr16u::dividend#2 dividend zp ZP_WORD:4 4.714285714285714
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 16.5
(byte) divr16u::i#2 reg byte x 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:16 16.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:16 11.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:16 2.75
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:2 8.25
(word) divr16u::rem#1 rem zp ZP_WORD:2 22.0
(word) divr16u::rem#10 rem zp ZP_WORD:2 11.0
(word) divr16u::rem#2 rem zp ZP_WORD:2 22.0
(word) divr16u::rem#4 rem zp ZP_WORD:2 22.0
(word) divr16u::rem#5 rem zp ZP_WORD:2 11.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:16 7.000000000000001
(word) divr16u::return#2 return zp ZP_WORD:16 4.0
(byte*) line_cursor
(byte*) line_cursor#1 line_cursor zp ZP_WORD:8 11.206896551724137
(byte*) line_cursor#12 line_cursor zp ZP_WORD:8 204.0
(byte*) line_cursor#23 line_cursor zp ZP_WORD:8 13.0
(void()) main()
(label) main::@1
(label) main::@return
(byte[20]) main::sintab
(const byte[20]) main::sintab#0 sintab = { fill( 20, 0) }
(word) main::tabsize
(const word) main::tabsize#0 tabsize = (byte/signed byte/word/signed word/dword/signed dword) 20
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 reg byte a 4.0
(byte~) mul8su::$6 reg byte a 4.0
(label) mul8su::@1
(label) mul8su::@2
(label) mul8su::@4
(label) mul8su::@return
(signed byte) mul8su::a
(signed byte) mul8su::a#0 reg byte y 2.6
(byte) mul8su::b
(word) mul8su::m
(word) mul8su::m#0 m zp ZP_WORD:11 2.0
(word) mul8su::m#1 m zp ZP_WORD:11 4.0
(word) mul8su::m#2 m zp ZP_WORD:11 1.3333333333333333
(signed word) mul8su::return
(signed word) mul8su::return#2 return zp ZP_WORD:11 22.0
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 202.0
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@4
(label) mul8u::@7
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 101.0
(byte) mul8u::a#2 reg byte x 2.0
(byte) mul8u::a#3 reg byte x 67.66666666666666
(byte) mul8u::a#6 reg byte x 3.0
(byte~) mul8u::a#8 reg byte x 4.0
(byte) mul8u::b
(byte) mul8u::b#1 reg byte a 4.0
(byte) mul8u::b#2 reg byte a 4.0
(word) mul8u::mb
(word) mul8u::mb#0 mb zp ZP_WORD:13 4.0
(word) mul8u::mb#1 mb zp ZP_WORD:13 202.0
(word) mul8u::mb#2 mb zp ZP_WORD:13 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 res zp ZP_WORD:11 202.0
(word) mul8u::res#2 res zp ZP_WORD:11 43.85714285714286
(word) mul8u::res#6 res zp ZP_WORD:11 101.0
(word) mul8u::return
(word) mul8u::return#2 return zp ZP_WORD:11 4.0
(word) mul8u::return#3 return zp ZP_WORD:11 4.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 $0 zp ZP_WORD:11 4.0
(word~) mulu8_sel::$1 $1 zp ZP_WORD:11 4.0
(label) mulu8_sel::@2
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 reg byte a 4.0
(byte) mulu8_sel::return#1 reg byte a 4.0
(byte) mulu8_sel::return#10 reg byte a 4.0
(byte) mulu8_sel::return#11 reg byte a 4.0
(byte) mulu8_sel::return#12 reg byte a 1.714285714285714
(byte) mulu8_sel::return#2 reg byte a 4.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 select zp ZP_BYTE:15 0.3333333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 reg byte x 2.0
(byte) mulu8_sel::v1#1 reg byte x 2.0
(byte) mulu8_sel::v1#2 reg byte x 4.0
(byte) mulu8_sel::v1#3 reg byte x 2.0
(byte) mulu8_sel::v1#4 reg byte x 2.0
(byte) mulu8_sel::v1#5 reg byte x 12.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 reg byte y 4.0
(byte) mulu8_sel::v2#1 reg byte y 4.0
(byte) mulu8_sel::v2#3 reg byte y 4.0
(byte) mulu8_sel::v2#4 reg byte y 4.0
(byte) mulu8_sel::v2#5 reg byte y 5.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp ZP_BYTE:10 4.0
(byte) print_byte::b#1 b zp ZP_BYTE:10 4.0
(byte) print_byte::b#6 b zp ZP_BYTE:10 22.0
(byte) print_byte::b#7 b zp ZP_BYTE:10 4.75
(byte[]) print_byte::hextab
(const string) print_byte::hextab#0 hextab = (string) "0123456789abcdef"
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 6.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:2 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:2 16.5
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:13 202.0
(byte*) print_str::str#10 str zp ZP_WORD:13 2.0
(byte*) print_str::str#8 str zp ZP_WORD:13 101.5
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp ZP_WORD:2 4.0
(word) print_word::w#1 w zp ZP_WORD:2 22.0
(word) print_word::w#2 w zp ZP_WORD:2 5.666666666666667
(word) rem16u
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$6 $6 zp ZP_WORD:11 4.0
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@18
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@return
(byte) sin8s::DIV_6
(const byte) sin8s::DIV_6#0 DIV_6 = (byte/signed byte/word/signed word/dword/signed dword) 43
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 isUpper zp ZP_BYTE:10 0.05555555555555555
(signed byte) sin8s::return
(signed byte) sin8s::return#0 reg byte a 5.0
(signed byte) sin8s::return#2 reg byte a 22.0
(signed byte~) sin8s::return#5 reg byte a 4.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 reg byte a 4.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 usinx zp ZP_BYTE:20 0.3333333333333333
(byte) sin8s::usinx#1 reg byte x 4.0
(byte) sin8s::usinx#2 reg byte x 4.0
(byte) sin8s::usinx#4 reg byte x 2.0
(word) sin8s::x
(word) sin8s::x#0 x zp ZP_WORD:11 4.0
(word) sin8s::x#1 x zp ZP_WORD:11 4.0
(word) sin8s::x#2 x zp ZP_WORD:11 8.5
(word) sin8s::x#4 x zp ZP_WORD:11 5.0
(word) sin8s::x#6 x zp ZP_WORD:11 6.0
(byte) sin8s::x1
(byte) sin8s::x1#0 x1 zp ZP_BYTE:18 0.6363636363636365
(byte) sin8s::x2
(byte) sin8s::x2#0 reg byte a 4.0
(byte) sin8s::x3
(byte) sin8s::x3#0 x3 zp ZP_BYTE:19 1.0
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 reg byte a 4.0
(byte) sin8s::x4
(byte) sin8s::x4#0 reg byte a 4.0
(byte) sin8s::x5
(byte) sin8s::x5#0 reg byte a 4.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 reg byte a 4.0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(signed word~) sin8u_table::$17 $17 zp ZP_WORD:11 22.0
(byte~) sin8u_table::$18 reg byte a 22.0
(label) sin8u_table::@1
(label) sin8u_table::@10
(label) sin8u_table::@11
(label) sin8u_table::@12
(label) sin8u_table::@13
(label) sin8u_table::@15
(label) sin8u_table::@16
(label) sin8u_table::@17
(label) sin8u_table::@18
(label) sin8u_table::@19
(label) sin8u_table::@20
(label) sin8u_table::@21
(label) sin8u_table::@3
(label) sin8u_table::@4
(label) sin8u_table::@5
(label) sin8u_table::@6
(label) sin8u_table::@7
(label) sin8u_table::@8
(label) sin8u_table::@9
(label) sin8u_table::@return
(byte) sin8u_table::amplitude
(const byte) sin8u_table::amplitude#0 amplitude = (const byte) sin8u_table::max#0-(const byte) sin8u_table::min#0
(word) sin8u_table::i
(word) sin8u_table::i#1 i zp ZP_WORD:6 16.5
(word) sin8u_table::i#2 i zp ZP_WORD:6 0.9565217391304348
(byte) sin8u_table::max
(const byte) sin8u_table::max#0 max = (byte/word/signed word/dword/signed dword) 255
(byte) sin8u_table::mid
(const byte) sin8u_table::mid#0 mid = ((byte))(const word) sin8u_table::sum#0>>(byte/signed byte/word/signed word/dword/signed dword) 1
(byte) sin8u_table::min
(const byte) sin8u_table::min#0 min = (byte/signed byte/word/signed word/dword/signed dword) 10
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#1 sintab zp ZP_WORD:4 1.5714285714285714
(byte*) sin8u_table::sintab#2 sintab zp ZP_WORD:4 3.0
(byte) sin8u_table::sinval
(byte) sin8u_table::sinval#0 reg byte x 3.666666666666667
(word) sin8u_table::step
(word) sin8u_table::step#0 step zp ZP_WORD:16 0.3191489361702128
(const string) sin8u_table::str str = (string) "step:@"
(const string) sin8u_table::str1 str1 = (string) " min:@"
(const string) sin8u_table::str2 str2 = (string) " max:@"
(const string) sin8u_table::str3 str3 = (string) " ampl:@"
(const string) sin8u_table::str4 str4 = (string) " mid:@"
(const string) sin8u_table::str5 str5 = (string) "x: @"
(const string) sin8u_table::str6 str6 = (string) " sin: @"
(word) sin8u_table::sum
(const word) sin8u_table::sum#0 sum = (const byte) sin8u_table::min#0+(const byte) sin8u_table::max#0
(word) sin8u_table::tabsize
(word) sin8u_table::x
(word) sin8u_table::x#1 x zp ZP_WORD:2 7.333333333333333
(word) sin8u_table::x#2 x zp ZP_WORD:2 2.0

zp ZP_WORD:2 [ sin8u_table::x#2 sin8u_table::x#1 print_word::w#2 print_word::w#1 print_word::w#0 divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 divr16u::dividend#2 divr16u::dividend#0 ]
zp ZP_WORD:6 [ sin8u_table::i#2 sin8u_table::i#1 ]
zp ZP_WORD:8 [ line_cursor#12 line_cursor#23 line_cursor#1 ]
zp ZP_BYTE:10 [ print_byte::b#7 print_byte::b#0 print_byte::b#1 print_byte::b#6 sin8s::isUpper#10 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp ZP_WORD:11 [ char_cursor#78 char_cursor#46 char_cursor#73 char_cursor#2 char_cursor#11 char_cursor#92 char_cursor#1 mul8su::m#2 mul8su::m#1 mul8su::m#0 mul8su::return#2 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 sin8u_table::$17 mulu8_sel::$0 mulu8_sel::$1 sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$6 ]
zp ZP_WORD:13 [ print_str::str#8 print_str::str#10 print_str::str#0 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
reg byte a [ mul8u::b#2 mul8u::b#1 ]
reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
zp ZP_BYTE:15 [ mulu8_sel::select#5 ]
zp ZP_WORD:16 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte a [ sin8s::return#2 ]
reg byte y [ mul8su::a#0 ]
reg byte a [ sin8u_table::$18 ]
reg byte x [ sin8u_table::sinval#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ mul8su::$6 ]
reg byte a [ mul8su::$10 ]
reg byte a [ mul8u::$1 ]
zp ZP_BYTE:18 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp ZP_BYTE:19 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp ZP_BYTE:20 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]


FINAL ASSEMBLER
Score: 18841

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const PI2_u4f12 = $6488
  .const PI_u4f12 = $3244
  .const PI_HALF_u4f12 = $1922
  .label SCREEN = $400
  .label char_cursor = $b
  .label line_cursor = 8
//SEG2 @begin
//SEG3 [1] phi from @begin to @30 [phi:@begin->@30]
//SEG4 @30
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @30 to main [phi:@30->main]
  jsr main
//SEG7 [3] phi from @30 to @end [phi:@30->@end]
//SEG8 @end
//SEG9 main
main: {
    .label tabsize = $14
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [185] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 main::@1
  //SEG14 [7] call sin8u_table param-assignment [ ] ( main:2 [ ] )
  //SEG15 [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
    jsr sin8u_table
  //SEG16 main::@return
  //SEG17 [8] return  [ ] ( main:2 [ ] )
    rts
    sintab: .fill $14, 0
}
//SEG18 sin8u_table
sin8u_table: {
    .const min = $a
    .const max = $ff
    .label amplitude = max-min
    .const sum = min+max
    .const mid = $ff & sum>>1
    .label _17 = $b
    .label step = $10
    .label sintab = 4
    .label x = 2
    .label i = 6
  //SEG19 [10] call div16u param-assignment [ div16u::return#0 ] ( main:2::sin8u_table:7 [ div16u::return#0 ] )
  //SEG20 [163] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
    jsr div16u
  //SEG21 [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] )
    // (word) div16u::return#2 = (word) div16u::return#0  // register copy zp ZP_WORD:16
  //SEG22 sin8u_table::@3
  //SEG23 [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] )
    // (word) sin8u_table::step#0 = (word) div16u::return#2  // register copy zp ZP_WORD:16
  //SEG24 [13] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG25 [77] phi from sin8u_table::@3 to print_str [phi:sin8u_table::@3->print_str]
  //SEG26 [77] phi (byte*) char_cursor#78 = (const byte*) SCREEN#0 [phi:sin8u_table::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta char_cursor
    lda #>SCREEN
    sta char_cursor+1
  //SEG27 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str [phi:sin8u_table::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG28 sin8u_table::@4
  //SEG29 [14] (word) print_word::w#0 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_word::w#0 char_cursor#2 ] ) -- vwuz1=vwuz2 
    lda step
    sta print_word.w
    lda step+1
    sta print_word.w+1
  //SEG30 [15] call print_word param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG31 [84] phi from sin8u_table::@4 to print_word [phi:sin8u_table::@4->print_word]
  //SEG32 [84] phi (word) print_word::w#2 = (word) print_word::w#0 [phi:sin8u_table::@4->print_word#0] -- register_copy 
    jsr print_word
  //SEG33 [16] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
  //SEG34 sin8u_table::@5
  //SEG35 [17] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG36 [77] phi from sin8u_table::@5 to print_str [phi:sin8u_table::@5->print_str]
  //SEG37 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@5->print_str#0] -- register_copy 
  //SEG38 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str1 [phi:sin8u_table::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG39 [18] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
  //SEG40 sin8u_table::@6
  //SEG41 [19] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG42 [65] phi from sin8u_table::@6 to print_byte [phi:sin8u_table::@6->print_byte]
  //SEG43 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@6->print_byte#0] -- register_copy 
  //SEG44 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@6->print_byte#1] -- vbuz1=vbuc1 
    lda #min
    sta print_byte.b
    jsr print_byte
  //SEG45 [20] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
  //SEG46 sin8u_table::@7
  //SEG47 [21] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG48 [77] phi from sin8u_table::@7 to print_str [phi:sin8u_table::@7->print_str]
  //SEG49 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@7->print_str#0] -- register_copy 
  //SEG50 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str2 [phi:sin8u_table::@7->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG51 [22] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
  //SEG52 sin8u_table::@8
  //SEG53 [23] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG54 [65] phi from sin8u_table::@8 to print_byte [phi:sin8u_table::@8->print_byte]
  //SEG55 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@8->print_byte#0] -- register_copy 
  //SEG56 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@8->print_byte#1] -- vbuz1=vbuc1 
    lda #max
    sta print_byte.b
    jsr print_byte
  //SEG57 [24] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
  //SEG58 sin8u_table::@9
  //SEG59 [25] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG60 [77] phi from sin8u_table::@9 to print_str [phi:sin8u_table::@9->print_str]
  //SEG61 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@9->print_str#0] -- register_copy 
  //SEG62 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str3 [phi:sin8u_table::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
  //SEG63 [26] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
  //SEG64 sin8u_table::@10
  //SEG65 [27] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG66 [65] phi from sin8u_table::@10 to print_byte [phi:sin8u_table::@10->print_byte]
  //SEG67 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@10->print_byte#0] -- register_copy 
  //SEG68 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@10->print_byte#1] -- vbuz1=vbuc1 
    lda #amplitude
    sta print_byte.b
    jsr print_byte
  //SEG69 [28] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
  //SEG70 sin8u_table::@11
  //SEG71 [29] call print_str param-assignment [ sin8u_table::step#0 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#2 ] )
  //SEG72 [77] phi from sin8u_table::@11 to print_str [phi:sin8u_table::@11->print_str]
  //SEG73 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@11->print_str#0] -- register_copy 
  //SEG74 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str4 [phi:sin8u_table::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
  //SEG75 [30] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
  //SEG76 sin8u_table::@12
  //SEG77 [31] call print_byte param-assignment [ sin8u_table::step#0 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 char_cursor#11 ] )
  //SEG78 [65] phi from sin8u_table::@12 to print_byte [phi:sin8u_table::@12->print_byte]
  //SEG79 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@12->print_byte#0] -- register_copy 
  //SEG80 [65] phi (byte) print_byte::b#7 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@12->print_byte#1] -- vbuz1=vbuc1 
    lda #mid
    sta print_byte.b
    jsr print_byte
  //SEG81 [32] phi from sin8u_table::@12 to sin8u_table::@13 [phi:sin8u_table::@12->sin8u_table::@13]
  //SEG82 sin8u_table::@13
  //SEG83 [33] call print_ln param-assignment [ sin8u_table::step#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 line_cursor#1 ] )
  //SEG84 [60] phi from sin8u_table::@13 to print_ln [phi:sin8u_table::@13->print_ln]
  //SEG85 [60] phi (byte*) line_cursor#23 = (const byte*) SCREEN#0 [phi:sin8u_table::@13->print_ln#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta line_cursor
    lda #>SCREEN
    sta line_cursor+1
    jsr print_ln
  //SEG86 [34] phi from sin8u_table::@13 to sin8u_table::@1 [phi:sin8u_table::@13->sin8u_table::@1]
  //SEG87 [34] phi (word) sin8u_table::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8u_table::@13->sin8u_table::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    sta i+1
  //SEG88 [34] phi (byte*) sin8u_table::sintab#2 = (const byte[20]) main::sintab#0 [phi:sin8u_table::@13->sin8u_table::@1#1] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta sintab
    lda #>main.sintab
    sta sintab+1
  //SEG89 [34] phi (word) sin8u_table::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8u_table::@13->sin8u_table::@1#2] -- vwuz1=vbuc1 
    lda #<0
    sta x
    sta x+1
  //SEG90 [34] phi from sin8u_table::@21 to sin8u_table::@1 [phi:sin8u_table::@21->sin8u_table::@1]
  //SEG91 [34] phi (word) sin8u_table::i#2 = (word) sin8u_table::i#1 [phi:sin8u_table::@21->sin8u_table::@1#0] -- register_copy 
  //SEG92 [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@21->sin8u_table::@1#1] -- register_copy 
  //SEG93 [34] phi (word) sin8u_table::x#2 = (word) sin8u_table::x#1 [phi:sin8u_table::@21->sin8u_table::@1#2] -- register_copy 
  //SEG94 sin8u_table::@1
  b1:
  //SEG95 [35] (word) sin8s::x#2 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::x#2 line_cursor#1 ] ) -- vwuz1=vwuz2 
    lda x
    sta sin8s.x
    lda x+1
    sta sin8s.x+1
  //SEG96 [36] call sin8s param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#0 line_cursor#1 ] )
    jsr sin8s
  //SEG97 [37] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8s::return#2 line_cursor#1 ] )
    // (signed byte) sin8s::return#2 = (signed byte) sin8s::return#0  // register copy reg byte a
  //SEG98 sin8u_table::@15
  //SEG99 [38] (signed byte) mul8su::a#0 ← (signed byte) sin8s::return#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::a#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::a#0 line_cursor#1 ] ) -- vbsyy=vbsaa 
    tay
  //SEG100 [39] call mul8su param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::m#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::m#2 line_cursor#1 ] )
    jsr mul8su
  //SEG101 [40] (signed word) mul8su::return#2 ← (signed word)(word) mul8su::m#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 mul8su::return#2 line_cursor#1 ] )
    // (signed word) mul8su::return#2 = (signed word)(word) mul8su::m#2  // register copy zp ZP_WORD:11
  //SEG102 sin8u_table::@16
  //SEG103 [41] (signed word~) sin8u_table::$17 ← (signed word) mul8su::return#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$17 line_cursor#1 ] )
    // (signed word~) sin8u_table::$17 = (signed word) mul8su::return#2  // register copy zp ZP_WORD:11
  //SEG104 [42] (byte~) sin8u_table::$18 ← > (signed word~) sin8u_table::$17 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$18 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::$18 line_cursor#1 ] ) -- vbuaa=_hi_vwsz1 
    lda _17+1
  //SEG105 [43] (byte) sin8u_table::sinval#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$18 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ) -- vbuxx=vbuc1_plus_vbuaa 
    clc
    adc #mid
    tax
  //SEG106 [44] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinval#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 sin8u_table::sinval#0 line_cursor#1 ] ) -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (sintab),y
  //SEG107 [45] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sintab
    bne !+
    inc sintab+1
  !:
  //SEG108 [46] (byte*~) char_cursor#92 ← (byte*) line_cursor#1 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 char_cursor#92 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG109 [47] call print_str param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
  //SEG110 [77] phi from sin8u_table::@16 to print_str [phi:sin8u_table::@16->print_str]
  //SEG111 [77] phi (byte*) char_cursor#78 = (byte*~) char_cursor#92 [phi:sin8u_table::@16->print_str#0] -- register_copy 
  //SEG112 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str5 [phi:sin8u_table::@16->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta print_str.str
    lda #>str5
    sta print_str.str+1
    jsr print_str
  //SEG113 sin8u_table::@17
  //SEG114 [48] (word) print_word::w#1 ← (word) sin8u_table::x#2 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#1 char_cursor#2 ] )
    // (word) print_word::w#1 = (word) sin8u_table::x#2  // register copy zp ZP_WORD:2
  //SEG115 [49] call print_word param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  //SEG116 [84] phi from sin8u_table::@17 to print_word [phi:sin8u_table::@17->print_word]
  //SEG117 [84] phi (word) print_word::w#2 = (word) print_word::w#1 [phi:sin8u_table::@17->print_word#0] -- register_copy 
    jsr print_word
  //SEG118 [50] phi from sin8u_table::@17 to sin8u_table::@18 [phi:sin8u_table::@17->sin8u_table::@18]
  //SEG119 sin8u_table::@18
  //SEG120 [51] call print_str param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
  //SEG121 [77] phi from sin8u_table::@18 to print_str [phi:sin8u_table::@18->print_str]
  //SEG122 [77] phi (byte*) char_cursor#78 = (byte*) char_cursor#11 [phi:sin8u_table::@18->print_str#0] -- register_copy 
  //SEG123 [77] phi (byte*) print_str::str#10 = (const string) sin8u_table::str6 [phi:sin8u_table::@18->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta print_str.str
    lda #>str6
    sta print_str.str+1
    jsr print_str
  //SEG124 sin8u_table::@19
  //SEG125 [52] (byte) print_byte::b#6 ← (byte) sin8u_table::sinval#0 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#6 char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#6 char_cursor#2 ] ) -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG126 [53] call print_byte param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] )
  //SEG127 [65] phi from sin8u_table::@19 to print_byte [phi:sin8u_table::@19->print_byte]
  //SEG128 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:sin8u_table::@19->print_byte#0] -- register_copy 
  //SEG129 [65] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:sin8u_table::@19->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG130 [54] phi from sin8u_table::@19 to sin8u_table::@20 [phi:sin8u_table::@19->sin8u_table::@20]
  //SEG131 sin8u_table::@20
  //SEG132 [55] call print_ln param-assignment [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] )
  //SEG133 [60] phi from sin8u_table::@20 to print_ln [phi:sin8u_table::@20->print_ln]
  //SEG134 [60] phi (byte*) line_cursor#23 = (byte*) line_cursor#1 [phi:sin8u_table::@20->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG135 sin8u_table::@21
  //SEG136 [56] (word) sin8u_table::x#1 ← (word) sin8u_table::x#2 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#2 sin8u_table::x#1 sin8u_table::sintab#1 line_cursor#1 ] ) -- vwuz1=vwuz1_plus_vwuz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
  //SEG137 [57] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#2 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ) -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG138 [58] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 line_cursor#1 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.tabsize
    bcc b1
    bne !+
    lda i
    cmp #<main.tabsize
    bcc b1
  !:
  //SEG139 sin8u_table::@return
  //SEG140 [59] return  [ ] ( main:2::sin8u_table:7 [ ] )
    rts
    str: .text "step:@"
    str1: .text " min:@"
    str2: .text " max:@"
    str3: .text " ampl:@"
    str4: .text " mid:@"
    str5: .text "x: @"
    str6: .text " sin: @"
}
//SEG141 print_ln
print_ln: {
  //SEG142 [61] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG143 [61] phi (byte*) line_cursor#12 = (byte*) line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG144 print_ln::@1
  b1:
  //SEG145 [62] (byte*) line_cursor#1 ← (byte*) line_cursor#12 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG146 [63] if((byte*) line_cursor#1<(byte*) char_cursor#11) goto print_ln::@1 [ line_cursor#1 char_cursor#11 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1
  !:
  //SEG147 print_ln::@return
  //SEG148 [64] return  [ line_cursor#1 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 line_cursor#1 ] main:2::sin8u_table:7::print_ln:55 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 ] )
    rts
}
//SEG149 print_byte
print_byte: {
    .label b = $a
  //SEG150 [66] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#73 print_byte::$0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_byte::$0 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#73 print_byte::$0 ] ) -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG151 [67] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#73 print_char::ch#0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 print_byte::b#7 char_cursor#73 print_char::ch#0 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#73 print_char::ch#0 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG152 [68] call print_char param-assignment [ char_cursor#11 print_byte::b#7 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_byte::b#7 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::b#7 ] )
  //SEG153 [73] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG154 [73] phi (byte*) char_cursor#46 = (byte*) char_cursor#73 [phi:print_byte->print_char#0] -- register_copy 
  //SEG155 [73] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG156 print_byte::@1
  //SEG157 [69] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#11 print_byte::$2 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_byte::$2 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::$2 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG158 [70] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#11 print_char::ch#1 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 print_char::ch#1 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_char::ch#1 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG159 [71] call print_char param-assignment [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  //SEG160 [73] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG161 [73] phi (byte*) char_cursor#46 = (byte*) char_cursor#11 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG162 [73] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG163 print_byte::@return
  //SEG164 [72] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG165 print_char
print_char: {
  //SEG166 [74] *((byte*) char_cursor#46) ← (byte) print_char::ch#2 [ char_cursor#46 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#46 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#46 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#46 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#46 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG167 [75] (byte*) char_cursor#11 ← ++ (byte*) char_cursor#46 [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG168 print_char::@return
  //SEG169 [76] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_byte:19::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:68 [ sin8u_table::step#0 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:68 [ sin8u_table::step#0 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:68 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_byte::b#7 char_cursor#11 ] main:2::sin8u_table:7::print_byte:19::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:23::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:27::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:31::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_byte:53::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 line_cursor#1 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:86::print_char:71 [ sin8u_table::step#0 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:86::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_word::w#2 char_cursor#11 ] main:2::sin8u_table:7::print_word:15::print_byte:88::print_char:71 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49::print_byte:88::print_char:71 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
    rts
}
//SEG170 print_str
print_str: {
    .label str = $d
  //SEG171 [78] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG172 [78] phi (byte*) char_cursor#2 = (byte*) char_cursor#78 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG173 [78] phi (byte*) print_str::str#8 = (byte*) print_str::str#10 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG174 print_str::@1
  b1:
  //SEG175 [79] if(*((byte*) print_str::str#8)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG176 print_str::@return
  //SEG177 [80] return  [ char_cursor#2 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 ] )
    rts
  //SEG178 print_str::@2
  b2:
  //SEG179 [81] *((byte*) char_cursor#2) ← *((byte*) print_str::str#8) [ char_cursor#2 print_str::str#8 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_str::str#8 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (char_cursor),y
  //SEG180 [82] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#2 [ print_str::str#8 char_cursor#1 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#8 char_cursor#1 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#8 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG181 [83] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#8 [ print_str::str#0 char_cursor#1 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:47 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::sin8u_table:7::print_str:51 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG182 print_word
print_word: {
    .label w = 2
  //SEG183 [85] (byte) print_byte::b#0 ← > (word) print_word::w#2 [ char_cursor#2 print_byte::b#0 print_word::w#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#2 print_byte::b#0 print_word::w#2 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#2 print_byte::b#0 print_word::w#2 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG184 [86] call print_byte param-assignment [ char_cursor#11 print_word::w#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 print_word::w#2 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_word::w#2 ] )
  //SEG185 [65] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG186 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#2 [phi:print_word->print_byte#0] -- register_copy 
  //SEG187 [65] phi (byte) print_byte::b#7 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG188 print_word::@1
  //SEG189 [87] (byte) print_byte::b#1 ← < (word) print_word::w#2 [ char_cursor#11 print_byte::b#1 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 print_byte::b#1 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 print_byte::b#1 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG190 [88] call print_byte param-assignment [ char_cursor#11 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
  //SEG191 [65] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG192 [65] phi (byte*) char_cursor#73 = (byte*) char_cursor#11 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG193 [65] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG194 print_word::@return
  //SEG195 [89] return  [ char_cursor#11 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 char_cursor#11 ] main:2::sin8u_table:7::print_word:49 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::i#2 sin8u_table::sintab#1 sin8u_table::sinval#0 line_cursor#1 char_cursor#11 ] )
    rts
}
//SEG196 mul8su
mul8su: {
    .label m = $b
    .label return = $b
  //SEG197 [90] (byte~) mul8u::a#8 ← (byte)(signed byte) mul8su::a#0 [ mul8su::a#0 mul8u::a#8 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#8 ] ) -- vbuxx=vbuyy 
    tya
    tax
  //SEG198 [91] call mul8u param-assignment [ mul8su::a#0 mul8u::res#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 ] )
  //SEG199 [100] phi from mul8su to mul8u [phi:mul8su->mul8u]
  //SEG200 [100] phi (byte) mul8u::a#6 = (byte~) mul8u::a#8 [phi:mul8su->mul8u#0] -- register_copy 
  //SEG201 [100] phi (byte) mul8u::b#2 = ((byte))(const byte) sin8u_table::amplitude#0 [phi:mul8su->mul8u#1] -- vbuaa=vbuc1 
    lda #sin8u_table.amplitude
    jsr mul8u
  //SEG202 [92] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::return#2 ] )
    // (word) mul8u::return#2 = (word) mul8u::res#2  // register copy zp ZP_WORD:11
  //SEG203 mul8su::@4
  //SEG204 [93] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8su::m#0 ] )
    // (word) mul8su::m#0 = (word) mul8u::return#2  // register copy zp ZP_WORD:11
  //SEG205 [94] if((signed byte) mul8su::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8su::@1 [ mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 ] ) -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl b1
  //SEG206 mul8su::@2
  //SEG207 [95] (byte~) mul8su::$6 ← > (word) mul8su::m#0 [ mul8su::m#0 mul8su::$6 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$6 ] ) -- vbuaa=_hi_vwuz1 
    lda m+1
  //SEG208 [96] (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 ← (byte~) mul8su::$6 - ((byte))(const byte) sin8u_table::amplitude#0 [ mul8su::m#0 mul8su::$10 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#0 mul8su::$10 ] ) -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #sin8u_table.amplitude
  //SEG209 [97] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte/signed byte/word/signed word/dword/signed dword~) mul8su::$10 [ mul8su::m#1 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#1 ] ) -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
  //SEG210 [98] phi from mul8su::@2 mul8su::@4 to mul8su::@1 [phi:mul8su::@2/mul8su::@4->mul8su::@1]
  //SEG211 [98] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@4->mul8su::@1#0] -- register_copy 
  //SEG212 mul8su::@1
  b1:
  //SEG213 mul8su::@return
  //SEG214 [99] return  [ mul8su::m#2 ] ( main:2::sin8u_table:7::mul8su:39 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::m#2 ] )
    rts
}
//SEG215 mul8u
mul8u: {
    .label mb = $d
    .label res = $b
    .label return = $b
  //SEG216 [101] (word) mul8u::mb#0 ← ((word)) (byte) mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] ) -- vwuz1=_word_vbuaa 
    sta mb
    lda #0
    sta mb+1
  //SEG217 [102] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  //SEG218 [102] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
  //SEG219 [102] phi (word) mul8u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    sta res
    sta res+1
  //SEG220 [102] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
  //SEG221 mul8u::@1
  b1:
  //SEG222 [103] if((byte) mul8u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@2 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b2
  //SEG223 mul8u::@return
  //SEG224 [104] return  [ mul8u::res#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 ] )
    rts
  //SEG225 mul8u::@2
  b2:
  //SEG226 [105] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG227 [106] if((byte~) mul8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul8u::@4 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4
  //SEG228 mul8u::@7
  //SEG229 [107] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ) -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG230 [108] phi from mul8u::@2 mul8u::@7 to mul8u::@4 [phi:mul8u::@2/mul8u::@7->mul8u::@4]
  //SEG231 [108] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@7->mul8u::@4#0] -- register_copy 
  //SEG232 mul8u::@4
  b4:
  //SEG233 [109] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::mb#2 mul8u::a#0 mul8u::res#6 ] ) -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
  //SEG234 [110] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] ( main:2::sin8u_table:7::mul8su:39::mul8u:91 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 mul8su::a#0 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:121::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141::mul8u:157 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::res#6 mul8u::mb#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG235 [102] phi from mul8u::@4 to mul8u::@1 [phi:mul8u::@4->mul8u::@1]
  //SEG236 [102] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@4->mul8u::@1#0] -- register_copy 
  //SEG237 [102] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@4->mul8u::@1#1] -- register_copy 
  //SEG238 [102] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@4->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG239 sin8s
sin8s: {
    .const DIV_6 = $2b
    .label _6 = $b
    .label x = $b
    .label x1 = $12
    .label x3 = $13
    .label usinx = $14
    .label isUpper = $a
  //SEG240 [111] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#2 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b5
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b5
  !:
  //SEG241 sin8s::@5
  //SEG242 [112] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#0 ] ) -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG243 [113] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  //SEG244 [113] phi (byte) sin8s::isUpper#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG245 [113] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG246 [113] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b5:
  //SEG247 [113] phi (byte) sin8s::isUpper#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG248 [113] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
  //SEG249 sin8s::@1
  b1:
  //SEG250 [114] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2
  !:
  //SEG251 sin8s::@6
  //SEG252 [115] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] ) -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG253 [116] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  //SEG254 [116] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
  //SEG255 sin8s::@2
  b2:
  //SEG256 [117] (word~) sin8s::$6 ← (word) sin8s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin8s::isUpper#10 sin8s::$6 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::$6 ] ) -- vwuz1=vwuz1_rol_3 
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
  //SEG257 [118] (byte) sin8s::x1#0 ← > (word~) sin8s::$6 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 ] ) -- vbuz1=_hi_vwuz2 
    lda _6+1
    sta x1
  //SEG258 [119] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 ] ) -- vbuxx=vbuz1 
    tax
  //SEG259 [120] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 mulu8_sel::v2#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#0 mulu8_sel::v2#0 ] ) -- vbuyy=vbuz1 
    tay
  //SEG260 [121] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] )
  //SEG261 [154] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  //SEG262 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG263 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
  //SEG264 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG265 [122] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#0 ] )
    // (byte) mulu8_sel::return#0 = (byte) mulu8_sel::return#12  // register copy reg byte a
  //SEG266 sin8s::@10
  //SEG267 [123] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x2#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x2#0 ] )
    // (byte) sin8s::x2#0 = (byte) mulu8_sel::return#0  // register copy reg byte a
  //SEG268 [124] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 ] ) -- vbuxx=vbuaa 
    tax
  //SEG269 [125] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 mulu8_sel::v2#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::v1#1 mulu8_sel::v2#1 ] ) -- vbuyy=vbuz1 
    ldy x1
  //SEG270 [126] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] )
  //SEG271 [154] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  //SEG272 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG273 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@10->mulu8_sel#1] -- register_copy 
  //SEG274 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG275 [127] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#1 ] )
    // (byte) mulu8_sel::return#1 = (byte) mulu8_sel::return#12  // register copy reg byte a
  //SEG276 sin8s::@11
  //SEG277 [128] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 ] ) -- vbuz1=vbuaa 
    sta x3
  //SEG278 [129] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::v1#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::v1#2 ] ) -- vbuxx=vbuz1 
    tax
  //SEG279 [130] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::x3#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::x3#0 ] )
  //SEG280 [154] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  //SEG281 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG282 [154] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6#0 [phi:sin8s::@11->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
  //SEG283 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG284 [131] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#2 ] )
    // (byte) mulu8_sel::return#2 = (byte) mulu8_sel::return#12  // register copy reg byte a
  //SEG285 sin8s::@12
  //SEG286 [132] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::x3_6#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::x3_6#0 ] )
    // (byte) sin8s::x3_6#0 = (byte) mulu8_sel::return#2  // register copy reg byte a
  //SEG287 [133] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc x1
    sta usinx
  //SEG288 [134] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 ] ) -- vbuxx=vbuz1 
    ldx x3
  //SEG289 [135] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 mulu8_sel::v2#3 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#3 mulu8_sel::v2#3 ] ) -- vbuyy=vbuz1 
    ldy x1
  //SEG290 [136] call mulu8_sel param-assignment [ sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 sin8s::usinx#0 ] )
  //SEG291 [154] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  //SEG292 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG293 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
  //SEG294 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG295 [137] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#10 ] )
    // (byte) mulu8_sel::return#10 = (byte) mulu8_sel::return#12  // register copy reg byte a
  //SEG296 sin8s::@13
  //SEG297 [138] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 sin8s::x4#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 sin8s::x4#0 ] )
    // (byte) sin8s::x4#0 = (byte) mulu8_sel::return#10  // register copy reg byte a
  //SEG298 [139] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::v1#4 ] ) -- vbuxx=vbuaa 
    tax
  //SEG299 [140] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 [ sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::v1#4 mulu8_sel::v2#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::v1#4 mulu8_sel::v2#4 ] ) -- vbuyy=vbuz1 
    ldy x1
  //SEG300 [141] call mulu8_sel param-assignment [ sin8s::isUpper#10 mulu8_sel::return#12 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 mulu8_sel::return#12 sin8s::usinx#0 ] )
  //SEG301 [154] phi from sin8s::@13 to mulu8_sel [phi:sin8s::@13->mulu8_sel]
  //SEG302 [154] phi (byte) mulu8_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin8s::@13->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG303 [154] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@13->mulu8_sel#1] -- register_copy 
  //SEG304 [154] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@13->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG305 [142] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12 [ sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#11 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#11 ] )
    // (byte) mulu8_sel::return#11 = (byte) mulu8_sel::return#12  // register copy reg byte a
  //SEG306 sin8s::@14
  //SEG307 [143] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5#0 ] )
    // (byte) sin8s::x5#0 = (byte) mulu8_sel::return#11  // register copy reg byte a
  //SEG308 [144] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ) -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
  //SEG309 [145] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc usinx
    tax
  //SEG310 [146] if((byte) sin8s::usinx#1<(byte/word/signed word/dword/signed dword) 128) goto sin8s::@3 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc b3
  //SEG311 sin8s::@7
  //SEG312 [147] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 [ sin8s::isUpper#10 sin8s::usinx#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#2 ] ) -- vbuxx=_dec_vbuxx 
    dex
  //SEG313 [148] phi from sin8s::@14 sin8s::@7 to sin8s::@3 [phi:sin8s::@14/sin8s::@7->sin8s::@3]
  //SEG314 [148] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@14/sin8s::@7->sin8s::@3#0] -- register_copy 
  //SEG315 sin8s::@3
  b3:
  //SEG316 [149] if((byte) sin8s::isUpper#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin8s::@18 [ sin8s::usinx#4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::usinx#4 ] ) -- vbuz1_eq_0_then_la1 
    lda isUpper
    beq b18
  //SEG317 sin8s::@8
  //SEG318 [150] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::sinx#1 ] ) -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG319 [151] phi from sin8s::@18 sin8s::@8 to sin8s::@4 [phi:sin8s::@18/sin8s::@8->sin8s::@4]
  //SEG320 [151] phi (signed byte) sin8s::return#0 = (signed byte~) sin8s::return#5 [phi:sin8s::@18/sin8s::@8->sin8s::@4#0] -- register_copy 
  //SEG321 sin8s::@4
  b4:
  //SEG322 sin8s::@return
  //SEG323 [152] return  [ sin8s::return#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::return#0 ] )
    rts
  //SEG324 sin8s::@18
  b18:
  //SEG325 [153] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 [ sin8s::return#5 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::return#5 ] ) -- vbsaa=vbsxx 
    txa
    jmp b4
}
//SEG326 mulu8_sel
mulu8_sel: {
    .label _0 = $b
    .label _1 = $b
    .label select = $f
  //SEG327 [155] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5 [ mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::a#2 mulu8_sel::v2#5 mulu8_sel::select#5 ] )
    // (byte) mul8u::a#2 = (byte) mulu8_sel::v1#5  // register copy reg byte x
  //SEG328 [156] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 [ mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::b#1 mul8u::a#2 mulu8_sel::select#5 ] ) -- vbuaa=vbuyy 
    tya
  //SEG329 [157] call mul8u param-assignment [ mul8u::res#2 mulu8_sel::select#5 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mul8u::res#2 mulu8_sel::select#5 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mul8u::res#2 mulu8_sel::select#5 ] )
  //SEG330 [100] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  //SEG331 [100] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
  //SEG332 [100] phi (byte) mul8u::b#2 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- register_copy 
    jsr mul8u
  //SEG333 [158] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] )
    // (word) mul8u::return#3 = (word) mul8u::res#2  // register copy zp ZP_WORD:11
  //SEG334 mulu8_sel::@2
  //SEG335 [159] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] )
    // (word~) mulu8_sel::$0 = (word) mul8u::return#3  // register copy zp ZP_WORD:11
  //SEG336 [160] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) -- vwuz1=vwuz1_rol_vbuz2 
    ldy select
    beq !e+
  !:
    asl _1
    rol _1+1
    dey
    bne !-
  !e:
  //SEG337 [161] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) -- vbuaa=_hi_vwuz1 
    lda _1+1
  //SEG338 mulu8_sel::@return
  //SEG339 [162] return  [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:121 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:126 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:130 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:136 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:141 [ sin8u_table::step#0 sin8u_table::x#2 sin8u_table::sintab#2 sin8u_table::i#2 line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] )
    rts
}
//SEG340 div16u
div16u: {
    .label return = $10
  //SEG341 [164] call divr16u param-assignment [ divr16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#0 ] )
  //SEG342 [168] phi from div16u to divr16u [phi:div16u->divr16u]
    jsr divr16u
  //SEG343 [165] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] )
    // (word) divr16u::return#2 = (word) divr16u::return#0  // register copy zp ZP_WORD:16
  //SEG344 div16u::@2
  //SEG345 [166] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] )
    // (word) div16u::return#0 = (word) divr16u::return#2  // register copy zp ZP_WORD:16
  //SEG346 div16u::@return
  //SEG347 [167] return  [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] )
    rts
}
//SEG348 divr16u
divr16u: {
    .label rem = 2
    .label dividend = 4
    .label quotient = $10
    .label return = $10
  //SEG349 [169] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  //SEG350 [169] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG351 [169] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta quotient
    sta quotient+1
  //SEG352 [169] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12#0 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta dividend
    lda #>PI2_u4f12
    sta dividend+1
  //SEG353 [169] phi (word) divr16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    txa
    sta rem
    sta rem+1
  //SEG354 [169] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  //SEG355 [169] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG356 [169] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG357 [169] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG358 [169] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
  //SEG359 divr16u::@1
  b1:
  //SEG360 [170] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG361 [171] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG362 [172] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG363 [173] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG364 divr16u::@4
  //SEG365 [174] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG366 [175] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  //SEG367 [175] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
  //SEG368 divr16u::@2
  b2:
  //SEG369 [176] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG370 [177] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG371 [178] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.tabsize
    bcc b3
    bne !+
    lda rem
    cmp #<main.tabsize
    bcc b3
  !:
  //SEG372 divr16u::@5
  //SEG373 [179] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG374 [180] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.tabsize
    sta rem
    lda rem+1
    sbc #>main.tabsize
    sta rem+1
  //SEG375 [181] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  //SEG376 [181] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG377 [181] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
  //SEG378 divr16u::@3
  b3:
  //SEG379 [182] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG380 [183] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG381 divr16u::@return
  //SEG382 [184] return  [ divr16u::return#0 ] ( main:2::sin8u_table:7::div16u:10::divr16u:164 [ divr16u::return#0 ] )
    rts
}
//SEG383 print_cls
print_cls: {
    .label sc = 2
  //SEG384 [186] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG385 [186] phi (byte*) print_cls::sc#2 = (const byte*) SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
  //SEG386 [186] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG387 [186] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG388 print_cls::@1
  b1:
  //SEG389 [187] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG390 [188] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG391 [189] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bne b1
    lda sc
    cmp #<SCREEN+$3e8
    bne b1
  //SEG392 print_cls::@return
  //SEG393 [190] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

