
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (nomodify volatile byte) i ← (byte) 7
  to:@1

(void()) main()
main: scope:[main]  from @1
  *((const nomodify byte*) SCREEN + (number) 0) ← (nomodify volatile byte) i
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*)(number) $400
(nomodify volatile byte) i loadstore
(void()) main()
(label) main::@return

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← (nomodify volatile byte) i
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero SCREEN in [1] *((const nomodify byte*) SCREEN + (byte) 0) ← (nomodify volatile byte) i
Successful SSA optimization PassNSimplifyExpressionWithZero
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] (nomodify volatile byte) i ← (byte) 7
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const nomodify byte*) SCREEN) ← (nomodify volatile byte) i
  to:main::@return
main::@return: scope:[main]  from main
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(nomodify volatile byte) i loadstore 6.5
(void()) main()

Initial phi equivalence classes
Added variable i to live range equivalence class [ i ]
Complete equivalence classes
[ i ]
Allocated zp[1]:2 [ i ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test that a volatile nomodify-variable works as expected
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label i = 2
  // @begin
__bbegin:
  // [0] (nomodify volatile byte) i ← (byte) 7 -- vbuz1=vbuc1 
  lda #7
  sta.z i
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const nomodify byte*) SCREEN) ← (nomodify volatile byte) i -- _deref_pbuc1=vbuz1 
    lda.z i
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (nomodify volatile byte) i ← (byte) 7 [ i ] (  [ i ] { }  ) always clobbers reg byte a 
Statement [4] *((const nomodify byte*) SCREEN) ← (nomodify volatile byte) i [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ i ] : zp[1]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 6.5: zp[1]:2 [ i ] 
Uplift Scope [main] 

Uplifting [] best 33 combination zp[1]:2 [ i ] 
Uplifting [main] best 33 combination 
Attempting to uplift remaining variables inzp[1]:2 [ i ]
Uplifting [] best 33 combination zp[1]:2 [ i ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test that a volatile nomodify-variable works as expected
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label i = 2
  // @begin
__bbegin:
  // [0] (nomodify volatile byte) i ← (byte) 7 -- vbuz1=vbuc1 
  lda #7
  sta.z i
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const nomodify byte*) SCREEN) ← (nomodify volatile byte) i -- _deref_pbuc1=vbuz1 
    lda.z i
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1:
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*) 1024
(nomodify volatile byte) i loadstore zp[1]:2 6.5
(void()) main()
(label) main::@return

zp[1]:2 [ i ]


FINAL ASSEMBLER
Score: 30

  // File Comments
// Test that a volatile nomodify-variable works as expected
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label i = 2
  // @begin
__bbegin:
  // i = 7
  // [0] (nomodify volatile byte) i ← (byte) 7 -- vbuz1=vbuc1 
  lda #7
  sta.z i
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  jsr main
  rts
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // SCREEN[0] = i
    // [4] *((const nomodify byte*) SCREEN) ← (nomodify volatile byte) i -- _deref_pbuc1=vbuz1 
    lda.z i
    sta SCREEN
    // main::@return
    // }
    // [5] return 
    rts
}
  // File Data

