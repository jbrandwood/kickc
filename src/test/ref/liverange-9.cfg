
(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte) idx#25 ← phi( main/(byte) 0 main::@2/(byte) idx#22 )
  [1] (byte) main::c#2 ← phi( main/(byte) 0 main::@2/(byte) main::c#1 )
  [2] (byte) outsw::c#0 ← (byte) main::c#2
  [3] call outsw 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] (byte) main::c#1 ← ++ (byte) main::c#2
  [5] if((byte) main::c#1!=(byte) $28) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

(void()) outsw((byte) outsw::c)
outsw: scope:[outsw]  from main::@1
  [7] phi()
  [8] call out 
  to:outsw::@1
outsw::@1: scope:[outsw]  from outsw
  [9] (byte) outw::c#0 ← (byte) outsw::c#0
  [10] call outw 
  to:outsw::@return
outsw::@return: scope:[outsw]  from outsw::@1
  [11] return 
  to:@return

(void()) outw((byte) outw::c)
outw: scope:[outw]  from outsw::@1
  [12] (byte) out::c#1 ← (byte) outw::c#0 << (byte) 4
  [13] call out 
  to:outw::@1
outw::@1: scope:[outw]  from outw
  [14] (byte) out::c#2 ← (byte) outw::c#0 & (byte) $f
  [15] call out 
  to:outw::@return
outw::@return: scope:[outw]  from outw::@1
  [16] return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from outsw outw outw::@1
  [17] (byte) out::c#3 ← phi( outsw/(byte) '-' outw/(byte) out::c#1 outw::@1/(byte) out::c#2 )
  [17] (byte) idx#21 ← phi( outsw/(byte) idx#25 outw/(byte) idx#22 outw::@1/(byte) idx#22 )
  [18] (byte) idx#22 ← ++ (byte) idx#21
  [19] *((const nomodify byte*) SCREEN + (byte) idx#22) ← (byte) out::c#3
  to:out::@return
out::@return: scope:[out]  from out
  [20] return 
  to:@return
