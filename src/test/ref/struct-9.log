
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::c_center_x#0 ← (byte) 0
  (byte) main::c_center_y#0 ← (byte) 0
  (byte) main::c_radius#0 ← (byte) 0
  (byte) main::c_center_x#1 ← (const byte) main::p_x
  (byte) main::c_center_y#1 ← (const byte) main::p_y
  (byte) main::c_radius#1 ← (number) $c
  *((const nomodify byte*) main::SCREEN + (number) 0) ← (byte) main::c_center_x#1
  *((const nomodify byte*) main::SCREEN + (number) 1) ← (byte) main::c_center_y#1
  *((const nomodify byte*) main::SCREEN + (number) 2) ← (byte) main::c_radius#1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(struct Point) Circle::center
(byte) Circle::radius
(byte) Point::x
(byte) Point::y
(void()) main()
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(struct Point) main::c_center
(byte) main::c_center_x
(byte) main::c_center_x#0
(byte) main::c_center_x#1
(byte) main::c_center_y
(byte) main::c_center_y#0
(byte) main::c_center_y#1
(byte) main::c_radius
(byte) main::c_radius#0
(byte) main::c_radius#1
(const byte) main::p_x = (byte) $a
(const byte) main::p_y = (byte) $a

Adding number conversion cast (unumber) $c in (byte) main::c_radius#1 ← (number) $c
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) main::SCREEN + (number) 0) ← (byte) main::c_center_x#1
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) main::SCREEN + (number) 1) ← (byte) main::c_center_y#1
Adding number conversion cast (unumber) 2 in *((const nomodify byte*) main::SCREEN + (number) 2) ← (byte) main::c_radius#1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) main::c_radius#1 ← (unumber)(number) $c
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $c
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const byte) main::c_center_x#0 = 0
Constant (const byte) main::c_center_y#0 = 0
Constant (const byte) main::c_radius#0 = 0
Constant (const byte) main::c_center_x#1 = main::p_x
Constant (const byte) main::c_center_y#1 = main::p_y
Constant (const byte) main::c_radius#1 = $c
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN in [6] *((const nomodify byte*) main::SCREEN + (byte) 0) ← (const byte) main::c_center_x#1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::c_center_x#0
Eliminating unused constant (const byte) main::c_center_y#0
Eliminating unused constant (const byte) main::c_radius#0
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined main::c_center_y#1 = (const byte) main::p_y
Constant inlined main::c_center_x#1 = (const byte) main::p_x
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::SCREEN+2)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const nomodify byte*) main::SCREEN) ← (const byte) main::p_x
  [5] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::p_y
  [6] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::c_radius#1
  to:main::@return
main::@return: scope:[main]  from main
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(struct Point) Circle::center
(byte) Circle::radius
(byte) Point::x
(byte) Point::y
(void()) main()
(struct Point) main::c_center
(byte) main::c_center_x
(byte) main::c_center_y
(byte) main::c_radius

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct - nesting structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const p_x = $a
    .const p_y = $a
    .const c_radius = $c
    .label SCREEN = $400
    // [4] *((const nomodify byte*) main::SCREEN) ← (const byte) main::p_x -- _deref_pbuc1=vbuc2 
    lda #p_x
    sta SCREEN
    // [5] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::p_y -- _deref_pbuc1=vbuc2 
    lda #p_y
    sta SCREEN+1
    // [6] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::c_radius#1 -- _deref_pbuc1=vbuc2 
    lda #c_radius
    sta SCREEN+2
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const nomodify byte*) main::SCREEN) ← (const byte) main::p_x [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::p_y [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::c_radius#1 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [Circle] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [Point] best 39 combination 
Uplifting [Circle] best 39 combination 
Uplifting [main] best 39 combination 
Uplifting [] best 39 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct - nesting structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const p_x = $a
    .const p_y = $a
    .const c_radius = $c
    .label SCREEN = $400
    // [4] *((const nomodify byte*) main::SCREEN) ← (const byte) main::p_x -- _deref_pbuc1=vbuc2 
    lda #p_x
    sta SCREEN
    // [5] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::p_y -- _deref_pbuc1=vbuc2 
    lda #p_y
    sta SCREEN+1
    // [6] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::c_radius#1 -- _deref_pbuc1=vbuc2 
    lda #c_radius
    sta SCREEN+2
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(struct Point) Circle::center
(byte) Circle::radius
(byte) Point::x
(byte) Point::y
(void()) main()
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(struct Point) main::c_center
(byte) main::c_center_x
(byte) main::c_center_y
(byte) main::c_radius
(const byte) main::c_radius#1 c_radius = (byte) $c
(const byte) main::p_x = (byte) $a
(const byte) main::p_y = (byte) $a



FINAL ASSEMBLER
Score: 24

  // File Comments
// Minimal struct - nesting structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .const p_x = $a
    .const p_y = $a
    .const c_radius = $c
    .label SCREEN = $400
    // SCREEN[0] = c.center.x
    // [4] *((const nomodify byte*) main::SCREEN) ← (const byte) main::p_x -- _deref_pbuc1=vbuc2 
    lda #p_x
    sta SCREEN
    // SCREEN[1] = c.center.y
    // [5] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::p_y -- _deref_pbuc1=vbuc2 
    lda #p_y
    sta SCREEN+1
    // SCREEN[2] = c.radius
    // [6] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::c_radius#1 -- _deref_pbuc1=vbuc2 
    lda #c_radius
    sta SCREEN+2
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data

