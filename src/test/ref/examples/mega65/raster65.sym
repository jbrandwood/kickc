(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*) 56320
(const nomodify byte) CIA_INTERRUPT_CLEAR = (byte) $7f
(const nomodify byte) GREETCOUNT = (byte) $10
(const nomodify void()**) HARDWARE_IRQ = (void()**) 65534
(const nomodify byte) IRQ_RASTER = (byte) 1
(byte) MEGA65_VICIV::ALPHADELAY
(byte) MEGA65_VICIV::B0PIX
(byte) MEGA65_VICIV::B0_ADDR
(byte) MEGA65_VICIV::B1PIX
(byte) MEGA65_VICIV::B1_ADDR
(byte) MEGA65_VICIV::B2PIX
(byte) MEGA65_VICIV::B2_ADDR
(byte) MEGA65_VICIV::B3PIX
(byte) MEGA65_VICIV::B3_ADDR
(byte) MEGA65_VICIV::B4PIX
(byte) MEGA65_VICIV::B4_ADDR
(byte) MEGA65_VICIV::B5PIX
(byte) MEGA65_VICIV::B5_ADDR
(byte) MEGA65_VICIV::B6PIX
(byte) MEGA65_VICIV::B6_ADDR
(byte) MEGA65_VICIV::B7PIX
(byte) MEGA65_VICIV::B7_ADDR
(byte) MEGA65_VICIV::BBDRPOS_HI
(byte) MEGA65_VICIV::BBDRPOS_LO
(byte) MEGA65_VICIV::BG_COLOR
(byte) MEGA65_VICIV::BG_COLOR1
(byte) MEGA65_VICIV::BG_COLOR2
(byte) MEGA65_VICIV::BG_COLOR3
(byte) MEGA65_VICIV::BORDER_COLOR
(byte) MEGA65_VICIV::BP16ENS
(byte) MEGA65_VICIV::BPCOMP
(byte) MEGA65_VICIV::BPX
(byte) MEGA65_VICIV::BPY
(byte) MEGA65_VICIV::CHARPTR_HILO
(byte) MEGA65_VICIV::CHARPTR_LOHI
(byte) MEGA65_VICIV::CHARPTR_LOLO
(byte) MEGA65_VICIV::CHARSTEP_HI
(byte) MEGA65_VICIV::CHARSTEP_LO
(byte) MEGA65_VICIV::CHRCOUNT
(byte) MEGA65_VICIV::CHRXSCL
(byte) MEGA65_VICIV::CHRYSCL
(byte) MEGA65_VICIV::COLPTR_HI
(byte) MEGA65_VICIV::COLPTR_LO
(byte) MEGA65_VICIV::CONTROL1
(byte) MEGA65_VICIV::CONTROL2
(byte) MEGA65_VICIV::CONTROLA
(byte) MEGA65_VICIV::CONTROLB
(byte) MEGA65_VICIV::CONTROLC
(byte) MEGA65_VICIV::DEBUG1
(byte) MEGA65_VICIV::DEBUGX
(byte) MEGA65_VICIV::DEBUGXY
(byte) MEGA65_VICIV::DEBUGY
(byte) MEGA65_VICIV::FNRASTER_HI
(byte) MEGA65_VICIV::FNRASTER_LO
(byte) MEGA65_VICIV::HPOS
(byte) MEGA65_VICIV::IRQ_ENABLE
(byte) MEGA65_VICIV::IRQ_STATUS
(byte) MEGA65_VICIV::KEY
(byte) MEGA65_VICIV::LIGHTPEN_X
(byte) MEGA65_VICIV::LIGHTPEN_Y
(byte) MEGA65_VICIV::MEMORY
(byte) MEGA65_VICIV::PALSEL
(byte) MEGA65_VICIV::RASLINE0
(byte) MEGA65_VICIV::RASTER
(byte) MEGA65_VICIV::ROWCOUNT
(byte) MEGA65_VICIV::RSTCMP
(byte) MEGA65_VICIV::RSTCOMP
(byte) MEGA65_VICIV::SBPDEBUG
(byte) MEGA65_VICIV::SCRNPTR_HIHI
(byte) MEGA65_VICIV::SCRNPTR_HILO
(byte) MEGA65_VICIV::SCRNPTR_LOHI
(byte) MEGA65_VICIV::SCRNPTR_LOLO
(byte) MEGA65_VICIV::SIDBDRWD_HI
(byte) MEGA65_VICIV::SIDBDRWD_LO
(byte) MEGA65_VICIV::SPR16EN
(byte) MEGA65_VICIV::SPRALPHAVAL
(byte) MEGA65_VICIV::SPRENALPHA
(byte) MEGA65_VICIV::SPRENV400
(byte) MEGA65_VICIV::SPRHGHT
(byte) MEGA65_VICIV::SPRHGTEN
(byte) MEGA65_VICIV::SPRITE0_COLOR
(byte) MEGA65_VICIV::SPRITE0_X
(byte) MEGA65_VICIV::SPRITE0_Y
(byte) MEGA65_VICIV::SPRITE1_COLOR
(byte) MEGA65_VICIV::SPRITE1_X
(byte) MEGA65_VICIV::SPRITE1_Y
(byte) MEGA65_VICIV::SPRITE2_COLOR
(byte) MEGA65_VICIV::SPRITE2_X
(byte) MEGA65_VICIV::SPRITE2_Y
(byte) MEGA65_VICIV::SPRITE3_COLOR
(byte) MEGA65_VICIV::SPRITE3_X
(byte) MEGA65_VICIV::SPRITE3_Y
(byte) MEGA65_VICIV::SPRITE4_COLOR
(byte) MEGA65_VICIV::SPRITE4_X
(byte) MEGA65_VICIV::SPRITE4_Y
(byte) MEGA65_VICIV::SPRITE5_COLOR
(byte) MEGA65_VICIV::SPRITE5_X
(byte) MEGA65_VICIV::SPRITE5_Y
(byte) MEGA65_VICIV::SPRITE6_COLOR
(byte) MEGA65_VICIV::SPRITE6_X
(byte) MEGA65_VICIV::SPRITE6_Y
(byte) MEGA65_VICIV::SPRITE7_COLOR
(byte) MEGA65_VICIV::SPRITE7_X
(byte) MEGA65_VICIV::SPRITE7_Y
(byte) MEGA65_VICIV::SPRITES_BG_COLLISION
(byte) MEGA65_VICIV::SPRITES_COLLISION
(byte) MEGA65_VICIV::SPRITES_ENABLE
(byte) MEGA65_VICIV::SPRITES_EXPAND_X
(byte) MEGA65_VICIV::SPRITES_EXPAND_Y
(byte) MEGA65_VICIV::SPRITES_MC
(byte) MEGA65_VICIV::SPRITES_MCOLOR1
(byte) MEGA65_VICIV::SPRITES_MCOLOR2
(byte) MEGA65_VICIV::SPRITES_PRIORITY
(byte) MEGA65_VICIV::SPRITES_XMSB
(byte) MEGA65_VICIV::SPRPTRADR_HILO
(byte) MEGA65_VICIV::SPRPTRADR_LOHI
(byte) MEGA65_VICIV::SPRPTRADR_LOLO
(byte) MEGA65_VICIV::SPRX64EN
(byte) MEGA65_VICIV::SPRXSMSBS
(byte) MEGA65_VICIV::SPRYSMSBSM
(byte) MEGA65_VICIV::SRPYMSBS
(byte) MEGA65_VICIV::SYNCPOL
(byte) MEGA65_VICIV::TBDRPOS_HI
(byte) MEGA65_VICIV::TBDRPOS_LO
(byte) MEGA65_VICIV::TEXTXPOS_HI
(byte) MEGA65_VICIV::TEXTXPOS_LO
(byte) MEGA65_VICIV::TEXTYPOS_HI
(byte) MEGA65_VICIV::TEXTYPOS_LO
(byte) MEGA65_VICIV::UNUSED
(byte) MEGA65_VICIV::VPOS
(byte) MEGA65_VICIV::VSYNDEL
(byte) MEGA65_VICIV::XPOS_HI
(byte) MEGA65_VICIV::XPOS_LO
(const byte*) MEGA_LOGO[]  = { (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $cf, (byte) $cf, (byte) $20, (byte) $20, (byte) $cf, (byte) $20, (byte) $20, (byte) $20, (byte) $cf }
(byte) MOS4569_VICIII::B0PIX
(byte) MOS4569_VICIII::B0_ADDR
(byte) MOS4569_VICIII::B1PIX
(byte) MOS4569_VICIII::B1_ADDR
(byte) MOS4569_VICIII::B2PIX
(byte) MOS4569_VICIII::B2_ADDR
(byte) MOS4569_VICIII::B3PIX
(byte) MOS4569_VICIII::B3_ADDR
(byte) MOS4569_VICIII::B4PIX
(byte) MOS4569_VICIII::B4_ADDR
(byte) MOS4569_VICIII::B5PIX
(byte) MOS4569_VICIII::B5_ADDR
(byte) MOS4569_VICIII::B6PIX
(byte) MOS4569_VICIII::B6_ADDR
(byte) MOS4569_VICIII::B7PIX
(byte) MOS4569_VICIII::B7_ADDR
(byte) MOS4569_VICIII::BG_COLOR
(byte) MOS4569_VICIII::BG_COLOR1
(byte) MOS4569_VICIII::BG_COLOR2
(byte) MOS4569_VICIII::BG_COLOR3
(byte) MOS4569_VICIII::BORDER_COLOR
(byte) MOS4569_VICIII::BPCOMP
(byte) MOS4569_VICIII::BPX
(byte) MOS4569_VICIII::BPY
(byte) MOS4569_VICIII::CONTROL1
(byte) MOS4569_VICIII::CONTROL2
(byte) MOS4569_VICIII::CONTROLA
(byte) MOS4569_VICIII::CONTROLB
(byte) MOS4569_VICIII::HPOS
(byte) MOS4569_VICIII::IRQ_ENABLE
(byte) MOS4569_VICIII::IRQ_STATUS
(byte) MOS4569_VICIII::KEY
(byte) MOS4569_VICIII::LIGHTPEN_X
(byte) MOS4569_VICIII::LIGHTPEN_Y
(byte) MOS4569_VICIII::MEMORY
(byte) MOS4569_VICIII::RASTER
(byte) MOS4569_VICIII::SPRITE0_COLOR
(byte) MOS4569_VICIII::SPRITE0_X
(byte) MOS4569_VICIII::SPRITE0_Y
(byte) MOS4569_VICIII::SPRITE1_COLOR
(byte) MOS4569_VICIII::SPRITE1_X
(byte) MOS4569_VICIII::SPRITE1_Y
(byte) MOS4569_VICIII::SPRITE2_COLOR
(byte) MOS4569_VICIII::SPRITE2_X
(byte) MOS4569_VICIII::SPRITE2_Y
(byte) MOS4569_VICIII::SPRITE3_COLOR
(byte) MOS4569_VICIII::SPRITE3_X
(byte) MOS4569_VICIII::SPRITE3_Y
(byte) MOS4569_VICIII::SPRITE4_COLOR
(byte) MOS4569_VICIII::SPRITE4_X
(byte) MOS4569_VICIII::SPRITE4_Y
(byte) MOS4569_VICIII::SPRITE5_COLOR
(byte) MOS4569_VICIII::SPRITE5_X
(byte) MOS4569_VICIII::SPRITE5_Y
(byte) MOS4569_VICIII::SPRITE6_COLOR
(byte) MOS4569_VICIII::SPRITE6_X
(byte) MOS4569_VICIII::SPRITE6_Y
(byte) MOS4569_VICIII::SPRITE7_COLOR
(byte) MOS4569_VICIII::SPRITE7_X
(byte) MOS4569_VICIII::SPRITE7_Y
(byte) MOS4569_VICIII::SPRITES_BG_COLLISION
(byte) MOS4569_VICIII::SPRITES_COLLISION
(byte) MOS4569_VICIII::SPRITES_ENABLE
(byte) MOS4569_VICIII::SPRITES_EXPAND_X
(byte) MOS4569_VICIII::SPRITES_EXPAND_Y
(byte) MOS4569_VICIII::SPRITES_MC
(byte) MOS4569_VICIII::SPRITES_MCOLOR1
(byte) MOS4569_VICIII::SPRITES_MCOLOR2
(byte) MOS4569_VICIII::SPRITES_PRIORITY
(byte) MOS4569_VICIII::SPRITES_XMSB
(byte) MOS4569_VICIII::UNUSED
(byte) MOS4569_VICIII::VPOS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const nomodify byte) NUMBERL = (byte) $e0
(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL = (byte) $5a
(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB = (byte) $31
(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC = (byte) $54
(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0 = (byte) $6f
(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO = (byte) $5c
(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO = (byte) $4c
(const byte) OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR = (byte) $21
(const byte) OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR = (byte) $20
(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY = (byte) $2f
(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = (byte) $d
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = (byte) $11
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = (byte) $16
(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = (byte) $1a
(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = (byte) $19
(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER = (byte) $12
(const nomodify byte*) PALETTE_BLUE = (byte*) 54016
(const nomodify byte*) PALETTE_GREEN = (byte*) 53760
(const nomodify byte*) PALETTE_RED = (byte*) 53504
(const byte*) PAL_BLUE[]  = { (byte) 0, (byte) $f3, (byte) $d4, (byte) $b5, (byte) $a6, (byte) $97, (byte) $88, (byte) $79, (byte) $1a, (byte) $fa, (byte) $eb, (byte) $ec, (byte) $bd, (byte) $be, (byte) $af, (byte) $ff, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $c0, (byte) $b1, (byte) $a2, (byte) $a3, (byte) $34, (byte) $35, (byte) $26, (byte) $27, (byte) $f7, (byte) $f8, (byte) $f9, (byte) $ea, (byte) 0, (byte) 0, (byte) $30, (byte) $11, (byte) $22, (byte) $13, (byte) $14, (byte) 5, (byte) $b5, (byte) $96, (byte) $97, (byte) $98, (byte) $79, (byte) $6a, (byte) $5b, (byte) $4c, (byte) $81, (byte) $42, (byte) $43, (byte) $34, (byte) 5, (byte) 6, (byte) $f6, (byte) $f7, (byte) $78, (byte) $69, (byte) $5a, (byte) $5b, (byte) $4c, (byte) $3d, (byte) $1e, (byte) $f, (byte) $17, (byte) $c7, (byte) $a8, (byte) $89, (byte) $5a, (byte) $5b, (byte) $3c, (byte) $1d, (byte) $ad, (byte) $9e, (byte) $7f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $78, (byte) 9, (byte) $e9, (byte) $ca, (byte) $ab, (byte) $7c, (byte) $5d, (byte) $5e, (byte) $de, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $59, (byte) $a, (byte) $ca, (byte) $bb, (byte) $8c, (byte) $6d, (byte) $3e, (byte) $2f, (byte) $bf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $49, (byte) $f9, (byte) $da, (byte) $ab, (byte) $7c, (byte) $5d, (byte) $2e, (byte) $2f, (byte) $af, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $48, (byte) $d8, (byte) $b9, (byte) $aa, (byte) $7b, (byte) $5c, (byte) $2d, (byte) $2e, (byte) $be, (byte) $9f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) 7, (byte) $97, (byte) $88, (byte) $69, (byte) $4a, (byte) $2b, (byte) $1c, (byte) $2d, (byte) $9d, (byte) $7e, (byte) $6f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $81, (byte) $62, (byte) $53, (byte) $44, (byte) 5, (byte) 6, (byte) $f6, (byte) $e7, (byte) $78, (byte) $69, (byte) $5a, (byte) $5b, (byte) $3c, (byte) $2d, (byte) $2e, (byte) $1f, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $b0, (byte) $b1, (byte) $a2, (byte) $b3, (byte) $44, (byte) $35, (byte) $36, (byte) $37, (byte) 8, (byte) $f8, (byte) $a, (byte) $b, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $70, (byte) $61, (byte) $62, (byte) $f2, (byte) $e3, (byte) $d4, (byte) $c5, (byte) $b6, (byte) $b7, (byte) $b8, (byte) $99, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $f0, (byte) $f1, (byte) $82, (byte) $83, (byte) $84, (byte) $85, (byte) $66, (byte) $57, (byte) $58, (byte) $59, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $70, (byte) $61, (byte) $62, (byte) $e2, (byte) $e3, (byte) $d4, (byte) $d5, (byte) $b6, (byte) $a7, (byte) $b8, (byte) $a9, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) $a0, (byte) $b1, (byte) $a2, (byte) $a3, (byte) $44, (byte) $35, (byte) $26, (byte) $37, (byte) $f7, (byte) $19, (byte) $f9, (byte) $fa }
(const byte*) PAL_GREEN[]  = { (byte) 0, (byte) $e3, (byte) $c4, (byte) $b5, (byte) $96, (byte) $87, (byte) $78, (byte) $79, (byte) $a, (byte) $fa, (byte) $eb, (byte) $dc, (byte) $bd, (byte) $ae, (byte) $af, (byte) $ff, (byte) $e2, (byte) $b3, (byte) $a4, (byte) $85, (byte) $76, (byte) $67, (byte) $48, (byte) $49, (byte) $d9, (byte) $da, (byte) $bb, (byte) $bc, (byte) $8d, (byte) $8e, (byte) $7f, (byte) $ff, (byte) $42, (byte) 3, (byte) 4, (byte) $e4, (byte) $d5, (byte) $c6, (byte) $b7, (byte) $a8, (byte) $39, (byte) $3a, (byte) $1b, (byte) $2c, (byte) $fc, (byte) $fd, (byte) $de, (byte) $df, (byte) $61, (byte) $32, (byte) $13, (byte) 4, (byte) $e4, (byte) $e5, (byte) $d6, (byte) $d7, (byte) $78, (byte) $59, (byte) $4a, (byte) $4b, (byte) $2c, (byte) $1d, (byte) $e, (byte) $fe, (byte) $e0, (byte) $b1, (byte) $a2, (byte) $93, (byte) $74, (byte) $75, (byte) $56, (byte) $57, (byte) $e7, (byte) $d8, (byte) $79, (byte) $ca, (byte) $ab, (byte) $9c, (byte) $9d, (byte) $8e, (byte) $f0, (byte) $d1, (byte) $c2, (byte) $a3, (byte) $84, (byte) $85, (byte) $76, (byte) $77, (byte) 8, (byte) 9, (byte) $f9, (byte) $fa, (byte) $db, (byte) $cc, (byte) $bd, (byte) $ae, (byte) $61, (byte) $22, (byte) $23, (byte) $14, (byte) $f4, (byte) $e5, (byte) $d6, (byte) $c7, (byte) $58, (byte) $59, (byte) $3a, (byte) $3b, (byte) $1c, (byte) $d, (byte) $fd, (byte) $fe, (byte) $92, (byte) $53, (byte) $44, (byte) $35, (byte) $16, (byte) $f6, (byte) $e7, (byte) $e8, (byte) $79, (byte) $6a, (byte) $5b, (byte) $4c, (byte) $2d, (byte) $3e, (byte) $1f, (byte) $ef, (byte) $53, (byte) $14, (byte) 5, (byte) $e5, (byte) $c6, (byte) $b7, (byte) $a8, (byte) $99, (byte) $2a, (byte) $2b, (byte) $c, (byte) $d, (byte) $dd, (byte) $ce, (byte) $cf, (byte) $ff, (byte) $f3, (byte) $b4, (byte) $95, (byte) $86, (byte) $57, (byte) $38, (byte) $29, (byte) $1a, (byte) $ba, (byte) $ab, (byte) $9c, (byte) $8d, (byte) $6e, (byte) $5f, (byte) $ff, (byte) $ff, (byte) $95, (byte) $56, (byte) $27, (byte) $18, (byte) $e8, (byte) $d9, (byte) $ca, (byte) $bb, (byte) $4c, (byte) $3d, (byte) $2e, (byte) $1f, (byte) $ef, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $c5, (byte) $86, (byte) $57, (byte) $38, (byte) $19, (byte) $a, (byte) $ea, (byte) $db, (byte) $6c, (byte) $5d, (byte) $3e, (byte) $3f, (byte) $ef, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $65, (byte) $26, (byte) 7, (byte) $e7, (byte) $c8, (byte) $b9, (byte) $9a, (byte) $9b, (byte) $2c, (byte) $1d, (byte) $fd, (byte) $fe, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $b4, (byte) $75, (byte) $56, (byte) $37, (byte) $28, (byte) $19, (byte) $e9, (byte) $ea, (byte) $7b, (byte) $6c, (byte) $5d, (byte) $4e, (byte) $2f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $c3, (byte) $94, (byte) $75, (byte) $56, (byte) $47, (byte) $38, (byte) $19, (byte) $1a, (byte) $aa, (byte) $ab, (byte) $7c, (byte) $7d, (byte) $5e, (byte) $4f, (byte) $ff, (byte) $ff, (byte) $e2, (byte) $a3, (byte) $94, (byte) $85, (byte) $76, (byte) $67, (byte) $38, (byte) $49, (byte) $d9, (byte) $ca, (byte) $ab, (byte) $bc, (byte) $7d, (byte) $7e, (byte) $6f, (byte) $ff }
(const byte*) PAL_RED[]  = { (byte) 0, (byte) $f3, (byte) $d4, (byte) $b5, (byte) $a6, (byte) $97, (byte) $88, (byte) $79, (byte) $1a, (byte) $fa, (byte) $eb, (byte) $ec, (byte) $bd, (byte) $be, (byte) $af, (byte) $ff, (byte) $16, (byte) $c6, (byte) $a7, (byte) $88, (byte) $49, (byte) $5a, (byte) $2b, (byte) $1c, (byte) $ac, (byte) $ad, (byte) $8e, (byte) $8f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $c6, (byte) $77, (byte) $48, (byte) $29, (byte) $e9, (byte) $fa, (byte) $cb, (byte) $cc, (byte) $5d, (byte) $4e, (byte) $2f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $57, (byte) $18, (byte) $f8, (byte) $d9, (byte) $aa, (byte) $8b, (byte) $6c, (byte) $5d, (byte) $ed, (byte) $de, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $26, (byte) $e6, (byte) $b7, (byte) $a8, (byte) $69, (byte) $5a, (byte) $3b, (byte) $3c, (byte) $dc, (byte) $cd, (byte) $ae, (byte) $9f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $65, (byte) $16, (byte) $17, (byte) $f7, (byte) $d8, (byte) $b9, (byte) $9a, (byte) $8b, (byte) $2c, (byte) $d, (byte) $fd, (byte) $ee, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $64, (byte) $15, (byte) 6, (byte) $e6, (byte) $c7, (byte) $a8, (byte) $99, (byte) $8a, (byte) $1b, (byte) $c, (byte) $fc, (byte) $fd, (byte) $ee, (byte) $cf, (byte) $ff, (byte) $ff, (byte) $12, (byte) $d2, (byte) $d3, (byte) $b4, (byte) $95, (byte) $86, (byte) $77, (byte) $78, (byte) 9, (byte) $69, (byte) $ea, (byte) $fb, (byte) $dc, (byte) $ad, (byte) $ae, (byte) $af, (byte) $f0, (byte) $c1, (byte) $c2, (byte) $a3, (byte) $84, (byte) $85, (byte) $76, (byte) $67, (byte) 8, (byte) $f8, (byte) $e9, (byte) $da, (byte) $db, (byte) $bc, (byte) $bd, (byte) $ae, (byte) $40, (byte) $11, (byte) $12, (byte) $f2, (byte) $e3, (byte) $d4, (byte) $c5, (byte) $c6, (byte) $47, (byte) $38, (byte) $39, (byte) $2a, (byte) $1b, (byte) $c, (byte) $d, (byte) $ed, (byte) 0, (byte) 0, (byte) $f0, (byte) $d1, (byte) $c2, (byte) $b3, (byte) $a4, (byte) $95, (byte) $36, (byte) $27, (byte) $28, (byte) $29, (byte) $f9, (byte) $ea, (byte) $eb, (byte) $ec, (byte) $70, (byte) $41, (byte) $22, (byte) $23, (byte) $f3, (byte) $f4, (byte) $e5, (byte) $e6, (byte) $77, (byte) $78, (byte) $69, (byte) $7a, (byte) $3b, (byte) $3c, (byte) $3d, (byte) $3e, (byte) $a1, (byte) $82, (byte) $63, (byte) $54, (byte) $35, (byte) $26, (byte) 7, (byte) 8, (byte) $98, (byte) $99, (byte) $8a, (byte) $7b, (byte) $5c, (byte) $5d, (byte) $3e, (byte) $3f, (byte) $33, (byte) 4, (byte) $d4, (byte) $d5, (byte) $a6, (byte) $a7, (byte) $88, (byte) $89, (byte) $1a, (byte) $ab, (byte) $fb, (byte) $ec, (byte) $cd, (byte) $be, (byte) $af, (byte) $ff, (byte) $b4, (byte) $85, (byte) $56, (byte) $47, (byte) $18, (byte) 9, (byte) $f9, (byte) $ea, (byte) $7b, (byte) $7c, (byte) $5d, (byte) $5e, (byte) $2f, (byte) $ef, (byte) $ff, (byte) $ff, (byte) 6, (byte) $d6, (byte) $a7, (byte) $98, (byte) $59, (byte) $4a, (byte) $2b, (byte) $2c, (byte) $bc, (byte) $ad, (byte) $8e, (byte) $8f, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff }
(const nomodify byte*) PROCPORT = (byte*) 1
(const nomodify byte*) PROCPORT_DDR = (byte*) 0
(const nomodify byte) PROCPORT_DDR_MEMORY_MASK = (byte) 7
(const nomodify byte) PROCPORT_RAM_IO = (byte) 5
(const nomodify byte*) SCREEN = (byte*) 1024
(const byte*) SINUS[(number) $100]  = kickasm {{ .fill 256, 91.5 + 91.5*sin(i*2*PI/256)
 }}
(const byte) SIZEOF_BYTE = (byte) 1
(const byte*) SONG[]  = kickasm {{ .import c64 "DiscoZak_2SID_patched.prg"
 }}
(const nomodify struct MOS6569_VICII*) VICII = (struct MOS6569_VICII*) 53248
(const nomodify struct MOS4569_VICIII*) VICIII = (struct MOS4569_VICIII*) 53248
(const nomodify struct MEGA65_VICIV*) VICIV = (struct MEGA65_VICIV*) 53248
(void()) __start()
(label) __start::@1
(label) __start::@return
(label) __start::__init1
(volatile byte) greetnm loadstore zp[1]:9 1.3529411764705883
interrupt(HARDWARE_STACK)(void()) irq1()
(byte~) irq1::$12 reg byte a 22.0
(byte~) irq1::$22 reg byte a 22.0
(byte~) irq1::$23 reg byte a 22.0
(byte~) irq1::$7 reg byte a 22.0
(label) irq1::@1
(label) irq1::@10
(label) irq1::@11
(label) irq1::@12
(label) irq1::@13
(label) irq1::@14
(label) irq1::@15
(label) irq1::@16
(label) irq1::@17
(label) irq1::@18
(label) irq1::@19
(label) irq1::@2
(label) irq1::@20
(label) irq1::@21
(label) irq1::@22
(label) irq1::@23
(label) irq1::@24
(label) irq1::@25
(label) irq1::@26
(label) irq1::@3
(label) irq1::@4
(label) irq1::@5
(label) irq1::@6
(label) irq1::@7
(label) irq1::@8
(label) irq1::@9
(label) irq1::@return
(byte) irq1::barcnt
(byte) irq1::barcnt#1 barcnt zp[1]:2 22.0
(byte) irq1::barcnt#2 barcnt zp[1]:2 2.588235294117647
(byte) irq1::barcol
(byte) irq1::barcol#0 reg byte z 22.0
(byte) irq1::barcol#1 reg byte z 101.0
(byte) irq1::barcol#2 reg byte z 75.75
(byte) irq1::barcol#3 reg byte z 103.75
(byte) irq1::barcol#4 reg byte z 151.5
(byte) irq1::barsin
(byte) irq1::barsin#0 barsin zp[1]:3 4.0
(byte) irq1::barsin#1 barsin zp[1]:3 11.0
(byte) irq1::barsin#2 barsin zp[1]:3 2.1875
(const nomodify byte) irq1::blackbar = (byte) $13
(byte) irq1::col
(byte) irq1::col#0 reg byte a 16.5
(byte) irq1::i
(byte) irq1::i#1 reg byte x 202.0
(byte) irq1::i#2 reg byte x 60.599999999999994
(byte) irq1::i1
(byte) irq1::i1#1 reg byte x 202.0
(byte) irq1::i1#2 reg byte x 60.599999999999994
(byte) irq1::i2
(byte) irq1::i2#1 reg byte x 22.0
(byte) irq1::i2#2 reg byte x 11.0
(byte) irq1::idx
(byte) irq1::idx#0 reg byte y 11.0
(byte) irq1::idx#1 reg byte y 67.33333333333333
(byte) irq1::idx#2 reg byte y 101.0
(byte) irq1::idx#3 reg byte y 138.33333333333331
(byte) irq1::idx#4 reg byte y 101.0
(byte) irq1::l
(byte) irq1::l#1 reg byte x 22.0
(byte) irq1::l#2 reg byte x 14.666666666666666
(byte) irq1::line
(byte) irq1::line#1 reg byte z 22.0
(byte) irq1::line#10 reg byte z 3.142857142857143
(byte) irq1::raster
(byte) irq1::raster#0 reg byte a 56.0
(const nomodify byte) irq1::scrollypos = (byte) $66
(byte) irq1::wobblepos
(byte) irq1::wobblepos#0 reg byte x 4.0
(byte) irq1::wobblepos#1 reg byte x 11.0
(byte) irq1::wobblepos#10 reg byte x 4.391304347826087
(byte) irq1::wobblepos#7 reg byte x 22.0
(byte) irq1::zoomval
(byte) irq1::zoomval#0 reg byte a 11.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(byte) main::i
(byte) main::i#1 reg byte x 151.5
(byte) main::i#2 reg byte x 202.0
(byte) main::i1
(byte) main::i1#1 reg byte x 202.0
(byte) main::i1#2 reg byte x 168.33333333333331
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:4 2002.0
(byte*) memset::dst#2 dst zp[2]:4 1334.6666666666667
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word)(number) $28*(number) $19
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const nomodify byte*) SCREEN
(const byte*) rasters[(number) $100]  = { fill( $100, 0) }
(volatile byte) sinpos loadstore zp[1]:6 0.2564102564102564
(const void()*) songInit = (void()*)(const byte*) SONG
(const void()*) songPlay = (void()*)(const byte*) SONG+(byte) 3
(volatile byte) xpos loadstore zp[1]:8 0.3823529411764706
(volatile byte) zoomx loadstore zp[1]:7 1.3529411764705883

reg byte z [ irq1::line#10 irq1::line#1 ]
reg byte x [ irq1::wobblepos#10 irq1::wobblepos#0 irq1::wobblepos#7 irq1::wobblepos#1 ]
reg byte x [ irq1::l#2 irq1::l#1 ]
zp[1]:2 [ irq1::barcnt#2 irq1::barcnt#1 ]
zp[1]:3 [ irq1::barsin#2 irq1::barsin#0 irq1::barsin#1 ]
reg byte x [ irq1::i2#2 irq1::i2#1 ]
reg byte x [ irq1::i#2 irq1::i#1 ]
reg byte x [ irq1::i1#2 irq1::i1#1 ]
reg byte z [ irq1::barcol#4 irq1::barcol#3 irq1::barcol#0 irq1::barcol#1 irq1::barcol#2 ]
reg byte y [ irq1::idx#4 irq1::idx#3 irq1::idx#0 irq1::idx#1 irq1::idx#2 ]
reg byte x [ main::i1#2 main::i1#1 ]
reg byte x [ main::i#2 main::i#1 ]
zp[2]:4 [ memset::dst#2 memset::dst#1 ]
zp[1]:6 [ sinpos ]
zp[1]:7 [ zoomx ]
zp[1]:8 [ xpos ]
zp[1]:9 [ greetnm ]
reg byte a [ irq1::$22 ]
reg byte a [ irq1::$23 ]
reg byte a [ irq1::col#0 ]
reg byte a [ irq1::zoomval#0 ]
reg byte a [ irq1::$7 ]
reg byte a [ irq1::raster#0 ]
reg byte a [ irq1::$12 ]
