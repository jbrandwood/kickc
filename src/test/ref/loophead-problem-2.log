
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start
  call scan_for_lowest 
  (byte) scan_for_lowest::return#0 ← (byte) scan_for_lowest::return#2
  to:main::@1
main::@1: scope:[main]  from main
  (byte) scan_for_lowest::return#3 ← phi( main/(byte) scan_for_lowest::return#0 )
  (byte~) main::$0 ← (byte) scan_for_lowest::return#3
  (byte) main::hit_check#0 ← (byte~) main::$0
  *((const nomodify byte*) main::screen + (number) 0) ← (byte) main::hit_check#0
  (byte~) main::$3 ← (byte) main::hit_check#0 * (const byte) SIZEOF_SIGNED_WORD
  (byte~) main::$1 ← < *((const signed word*) ball_y + (byte~) main::$3)
  *((const nomodify byte*) main::screen + (number) 2) ← (byte~) main::$1
  (byte~) main::$4 ← (byte) main::hit_check#0 * (const byte) SIZEOF_SIGNED_WORD
  (byte~) main::$2 ← > *((const signed word*) ball_y + (byte~) main::$4)
  *((const nomodify byte*) main::screen + (number) 3) ← (byte~) main::$2
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(byte()) scan_for_lowest()
scan_for_lowest: scope:[scan_for_lowest]  from main
  (byte) scan_for_lowest::lowest#0 ← (byte) $ff
  (signed word) scan_for_lowest::height#0 ← (signed word) $258
  (byte) scan_for_lowest::i#0 ← (byte) 0
  to:scan_for_lowest::@1
scan_for_lowest::@1: scope:[scan_for_lowest]  from scan_for_lowest scan_for_lowest::@4
  (byte) scan_for_lowest::lowest#3 ← phi( scan_for_lowest/(byte) scan_for_lowest::lowest#0 scan_for_lowest::@4/(byte) scan_for_lowest::lowest#4 )
  (signed word) scan_for_lowest::height#3 ← phi( scan_for_lowest/(signed word) scan_for_lowest::height#0 scan_for_lowest::@4/(signed word) scan_for_lowest::height#4 )
  (byte) scan_for_lowest::i#2 ← phi( scan_for_lowest/(byte) scan_for_lowest::i#0 scan_for_lowest::@4/(byte) scan_for_lowest::i#1 )
  (bool~) scan_for_lowest::$0 ← (byte) scan_for_lowest::i#2 < (number) 8
  if((bool~) scan_for_lowest::$0) goto scan_for_lowest::@2
  to:scan_for_lowest::@3
scan_for_lowest::@2: scope:[scan_for_lowest]  from scan_for_lowest::@1
  (byte) scan_for_lowest::lowest#5 ← phi( scan_for_lowest::@1/(byte) scan_for_lowest::lowest#3 )
  (signed word) scan_for_lowest::height#2 ← phi( scan_for_lowest::@1/(signed word) scan_for_lowest::height#3 )
  (byte) scan_for_lowest::i#3 ← phi( scan_for_lowest::@1/(byte) scan_for_lowest::i#2 )
  (byte~) scan_for_lowest::$3 ← (byte) scan_for_lowest::i#3 * (const byte) SIZEOF_SIGNED_WORD
  (bool~) scan_for_lowest::$1 ← *((const signed word*) ball_y + (byte~) scan_for_lowest::$3) < (signed word) scan_for_lowest::height#2
  (bool~) scan_for_lowest::$2 ← ! (bool~) scan_for_lowest::$1
  if((bool~) scan_for_lowest::$2) goto scan_for_lowest::@4
  to:scan_for_lowest::@5
scan_for_lowest::@3: scope:[scan_for_lowest]  from scan_for_lowest::@1
  (byte) scan_for_lowest::lowest#2 ← phi( scan_for_lowest::@1/(byte) scan_for_lowest::lowest#3 )
  (byte) scan_for_lowest::return#1 ← (byte) scan_for_lowest::lowest#2
  to:scan_for_lowest::@return
scan_for_lowest::@4: scope:[scan_for_lowest]  from scan_for_lowest::@2 scan_for_lowest::@5
  (byte) scan_for_lowest::lowest#4 ← phi( scan_for_lowest::@2/(byte) scan_for_lowest::lowest#5 scan_for_lowest::@5/(byte) scan_for_lowest::lowest#1 )
  (signed word) scan_for_lowest::height#4 ← phi( scan_for_lowest::@2/(signed word) scan_for_lowest::height#2 scan_for_lowest::@5/(signed word) scan_for_lowest::height#1 )
  (byte) scan_for_lowest::i#4 ← phi( scan_for_lowest::@2/(byte) scan_for_lowest::i#3 scan_for_lowest::@5/(byte) scan_for_lowest::i#5 )
  (byte) scan_for_lowest::i#1 ← ++ (byte) scan_for_lowest::i#4
  to:scan_for_lowest::@1
scan_for_lowest::@5: scope:[scan_for_lowest]  from scan_for_lowest::@2
  (byte) scan_for_lowest::i#5 ← phi( scan_for_lowest::@2/(byte) scan_for_lowest::i#3 )
  (byte~) scan_for_lowest::$4 ← (byte) scan_for_lowest::i#5 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) scan_for_lowest::height#1 ← *((const signed word*) ball_y + (byte~) scan_for_lowest::$4)
  (byte) scan_for_lowest::lowest#1 ← (byte) scan_for_lowest::i#5
  to:scan_for_lowest::@4
scan_for_lowest::@return: scope:[scan_for_lowest]  from scan_for_lowest::@3
  (byte) scan_for_lowest::return#4 ← phi( scan_for_lowest::@3/(byte) scan_for_lowest::return#1 )
  (byte) scan_for_lowest::return#2 ← (byte) scan_for_lowest::return#4
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(void()) __start()
(label) __start::@1
(label) __start::@return
(const signed word*) ball_y[(number) 8]  = { (signed word) $32, (signed word) $64, (signed word) -$c8, (signed word) $c, (signed word) -$64, (signed word) $4b, (signed word) 0, (signed word) -$79 }
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(label) main::@1
(label) main::@return
(byte) main::hit_check
(byte) main::hit_check#0
(const nomodify byte*) main::screen = (byte*)(number) $400
(byte()) scan_for_lowest()
(bool~) scan_for_lowest::$0
(bool~) scan_for_lowest::$1
(bool~) scan_for_lowest::$2
(byte~) scan_for_lowest::$3
(byte~) scan_for_lowest::$4
(label) scan_for_lowest::@1
(label) scan_for_lowest::@2
(label) scan_for_lowest::@3
(label) scan_for_lowest::@4
(label) scan_for_lowest::@5
(label) scan_for_lowest::@return
(signed word) scan_for_lowest::height
(signed word) scan_for_lowest::height#0
(signed word) scan_for_lowest::height#1
(signed word) scan_for_lowest::height#2
(signed word) scan_for_lowest::height#3
(signed word) scan_for_lowest::height#4
(byte) scan_for_lowest::i
(byte) scan_for_lowest::i#0
(byte) scan_for_lowest::i#1
(byte) scan_for_lowest::i#2
(byte) scan_for_lowest::i#3
(byte) scan_for_lowest::i#4
(byte) scan_for_lowest::i#5
(byte) scan_for_lowest::lowest
(byte) scan_for_lowest::lowest#0
(byte) scan_for_lowest::lowest#1
(byte) scan_for_lowest::lowest#2
(byte) scan_for_lowest::lowest#3
(byte) scan_for_lowest::lowest#4
(byte) scan_for_lowest::lowest#5
(byte) scan_for_lowest::return
(byte) scan_for_lowest::return#0
(byte) scan_for_lowest::return#1
(byte) scan_for_lowest::return#2
(byte) scan_for_lowest::return#3
(byte) scan_for_lowest::return#4

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) main::screen + (number) 0) ← (byte) main::hit_check#0
Adding number conversion cast (unumber) 2 in *((const nomodify byte*) main::screen + (number) 2) ← (byte~) main::$1
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) main::screen + (number) 3) ← (byte~) main::$2
Adding number conversion cast (unumber) 8 in (bool~) scan_for_lowest::$0 ← (byte) scan_for_lowest::i#2 < (number) 8
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [22] (bool~) scan_for_lowest::$2 ← *((const signed word*) ball_y + (byte~) scan_for_lowest::$3) >= (signed word) scan_for_lowest::height#2 from [21] (bool~) scan_for_lowest::$1 ← *((const signed word*) ball_y + (byte~) scan_for_lowest::$3) < (signed word) scan_for_lowest::height#2
Successful SSA optimization Pass2UnaryNotSimplification
Alias scan_for_lowest::return#0 = scan_for_lowest::return#3 
Alias main::hit_check#0 = main::$0 
Alias scan_for_lowest::i#2 = scan_for_lowest::i#3 scan_for_lowest::i#5 scan_for_lowest::lowest#1 
Alias scan_for_lowest::height#2 = scan_for_lowest::height#3 
Alias scan_for_lowest::lowest#2 = scan_for_lowest::lowest#5 scan_for_lowest::lowest#3 scan_for_lowest::return#1 scan_for_lowest::return#4 scan_for_lowest::return#2 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (phi-usage) scan_for_lowest::i#2 = scan_for_lowest::i#4 
Identical Phi Values (byte) scan_for_lowest::i#4 (byte) scan_for_lowest::i#2
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [9] (byte~) main::$4 ← (byte) main::hit_check#0 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) scan_for_lowest::$0 [16] if((byte) scan_for_lowest::i#2<(byte) 8) goto scan_for_lowest::@2
Simple Condition (bool~) scan_for_lowest::$2 [19] if(*((const signed word*) ball_y + (byte~) scan_for_lowest::$3)>=(signed word) scan_for_lowest::height#2) goto scan_for_lowest::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) scan_for_lowest::lowest#0 = $ff
Constant (const signed word) scan_for_lowest::height#0 = $258
Constant (const byte) scan_for_lowest::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::screen in [3] *((const nomodify byte*) main::screen + (byte) 0) ← (byte) main::hit_check#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Alias main::$4 = main::$3 
Successful SSA optimization Pass2AliasElimination
Rewriting multiplication to use shift [4] (byte~) main::$4 ← (byte) main::hit_check#0 * (const byte) SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [12] (byte~) scan_for_lowest::$3 ← (byte) scan_for_lowest::i#2 * (const byte) SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [16] (byte~) scan_for_lowest::$4 ← (byte) scan_for_lowest::i#2 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) scan_for_lowest::lowest#0
Inlining constant with var siblings (const signed word) scan_for_lowest::height#0
Inlining constant with var siblings (const byte) scan_for_lowest::i#0
Constant inlined scan_for_lowest::i#0 = (byte) 0
Constant inlined scan_for_lowest::lowest#0 = (byte) $ff
Constant inlined scan_for_lowest::height#0 = (signed word) $258
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::screen+2)
Consolidated array index constant in *(main::screen+3)
Successful SSA optimization Pass2ConstantAdditionElimination
Identified duplicate assignment right side [16] (byte~) scan_for_lowest::$4 ← (byte) scan_for_lowest::i#2 << (byte) 1
Successful SSA optimization Pass2DuplicateRValueIdentification
Eliminating unused constant (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization PassNEliminateUnusedVars
Alias scan_for_lowest::$4 = scan_for_lowest::$3 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting scan_for_lowest::@6(between scan_for_lowest::@2 and scan_for_lowest::@4)
Adding NOP phi() at start of main
Adding NOP phi() at start of scan_for_lowest
Adding NOP phi() at start of scan_for_lowest::@3
CALL GRAPH
Calls in [main] to scan_for_lowest:1 

Created 5 initial phi equivalence classes
Coalesced [19] scan_for_lowest::height#7 ← scan_for_lowest::height#1
Not coalescing [20] scan_for_lowest::lowest#8 ← scan_for_lowest::i#2
Coalesced [23] scan_for_lowest::i#6 ← scan_for_lowest::i#1
Coalesced [24] scan_for_lowest::height#5 ← scan_for_lowest::height#4
Coalesced [25] scan_for_lowest::lowest#6 ← scan_for_lowest::lowest#4
Coalesced (already) [26] scan_for_lowest::height#6 ← scan_for_lowest::height#2
Coalesced (already) [27] scan_for_lowest::lowest#7 ← scan_for_lowest::lowest#2
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) scan_for_lowest::@3
Culled Empty Block (label) scan_for_lowest::@6
Renumbering block scan_for_lowest::@4 to scan_for_lowest::@3
Renumbering block scan_for_lowest::@5 to scan_for_lowest::@4
Adding NOP phi() at start of main
Adding NOP phi() at start of scan_for_lowest

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call scan_for_lowest 
  [2] (byte) scan_for_lowest::return#0 ← (byte) scan_for_lowest::lowest#2
  to:main::@1
main::@1: scope:[main]  from main
  [3] (byte) main::hit_check#0 ← (byte) scan_for_lowest::return#0
  [4] *((const nomodify byte*) main::screen) ← (byte) main::hit_check#0
  [5] (byte~) main::$4 ← (byte) main::hit_check#0 << (byte) 1
  [6] (byte~) main::$1 ← < *((const signed word*) ball_y + (byte~) main::$4)
  [7] *((const nomodify byte*) main::screen+(byte) 2) ← (byte~) main::$1
  [8] (byte~) main::$2 ← > *((const signed word*) ball_y + (byte~) main::$4)
  [9] *((const nomodify byte*) main::screen+(byte) 3) ← (byte~) main::$2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return 
  to:@return

(byte()) scan_for_lowest()
scan_for_lowest: scope:[scan_for_lowest]  from main
  [11] phi()
  to:scan_for_lowest::@1
scan_for_lowest::@1: scope:[scan_for_lowest]  from scan_for_lowest scan_for_lowest::@3
  [12] (byte) scan_for_lowest::lowest#2 ← phi( scan_for_lowest/(byte) $ff scan_for_lowest::@3/(byte) scan_for_lowest::lowest#4 )
  [12] (signed word) scan_for_lowest::height#2 ← phi( scan_for_lowest/(signed word) $258 scan_for_lowest::@3/(signed word) scan_for_lowest::height#4 )
  [12] (byte) scan_for_lowest::i#2 ← phi( scan_for_lowest/(byte) 0 scan_for_lowest::@3/(byte) scan_for_lowest::i#1 )
  [13] if((byte) scan_for_lowest::i#2<(byte) 8) goto scan_for_lowest::@2
  to:scan_for_lowest::@return
scan_for_lowest::@return: scope:[scan_for_lowest]  from scan_for_lowest::@1
  [14] return 
  to:@return
scan_for_lowest::@2: scope:[scan_for_lowest]  from scan_for_lowest::@1
  [15] (byte~) scan_for_lowest::$4 ← (byte) scan_for_lowest::i#2 << (byte) 1
  [16] if(*((const signed word*) ball_y + (byte~) scan_for_lowest::$4)>=(signed word) scan_for_lowest::height#2) goto scan_for_lowest::@3
  to:scan_for_lowest::@4
scan_for_lowest::@4: scope:[scan_for_lowest]  from scan_for_lowest::@2
  [17] (signed word) scan_for_lowest::height#1 ← *((const signed word*) ball_y + (byte~) scan_for_lowest::$4)
  [18] (byte) scan_for_lowest::lowest#8 ← (byte) scan_for_lowest::i#2
  to:scan_for_lowest::@3
scan_for_lowest::@3: scope:[scan_for_lowest]  from scan_for_lowest::@2 scan_for_lowest::@4
  [19] (byte) scan_for_lowest::lowest#4 ← phi( scan_for_lowest::@2/(byte) scan_for_lowest::lowest#2 scan_for_lowest::@4/(byte) scan_for_lowest::lowest#8 )
  [19] (signed word) scan_for_lowest::height#4 ← phi( scan_for_lowest::@2/(signed word) scan_for_lowest::height#2 scan_for_lowest::@4/(signed word) scan_for_lowest::height#1 )
  [20] (byte) scan_for_lowest::i#1 ← ++ (byte) scan_for_lowest::i#2
  to:scan_for_lowest::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$1 4.0
(byte~) main::$2 4.0
(byte~) main::$4 2.0
(byte) main::hit_check
(byte) main::hit_check#0 3.0
(byte()) scan_for_lowest()
(byte~) scan_for_lowest::$4 151.5
(signed word) scan_for_lowest::height
(signed word) scan_for_lowest::height#1 101.0
(signed word) scan_for_lowest::height#2 75.75
(signed word) scan_for_lowest::height#4 151.5
(byte) scan_for_lowest::i
(byte) scan_for_lowest::i#1 202.0
(byte) scan_for_lowest::i#2 72.14285714285714
(byte) scan_for_lowest::lowest
(byte) scan_for_lowest::lowest#2 34.0
(byte) scan_for_lowest::lowest#4 151.5
(byte) scan_for_lowest::lowest#8 202.0
(byte) scan_for_lowest::return
(byte) scan_for_lowest::return#0 4.0

Initial phi equivalence classes
[ scan_for_lowest::i#2 scan_for_lowest::i#1 ]
[ scan_for_lowest::height#2 scan_for_lowest::height#4 scan_for_lowest::height#1 ]
[ scan_for_lowest::lowest#2 scan_for_lowest::lowest#4 scan_for_lowest::lowest#8 ]
Added variable scan_for_lowest::return#0 to live range equivalence class [ scan_for_lowest::return#0 ]
Added variable main::hit_check#0 to live range equivalence class [ main::hit_check#0 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable scan_for_lowest::$4 to live range equivalence class [ scan_for_lowest::$4 ]
Complete equivalence classes
[ scan_for_lowest::i#2 scan_for_lowest::i#1 ]
[ scan_for_lowest::height#2 scan_for_lowest::height#4 scan_for_lowest::height#1 ]
[ scan_for_lowest::lowest#2 scan_for_lowest::lowest#4 scan_for_lowest::lowest#8 ]
[ scan_for_lowest::return#0 ]
[ main::hit_check#0 ]
[ main::$4 ]
[ main::$1 ]
[ main::$2 ]
[ scan_for_lowest::$4 ]
Allocated zp[1]:2 [ scan_for_lowest::i#2 scan_for_lowest::i#1 ]
Allocated zp[2]:3 [ scan_for_lowest::height#2 scan_for_lowest::height#4 scan_for_lowest::height#1 ]
Allocated zp[1]:5 [ scan_for_lowest::lowest#2 scan_for_lowest::lowest#4 scan_for_lowest::lowest#8 ]
Allocated zp[1]:6 [ scan_for_lowest::return#0 ]
Allocated zp[1]:7 [ main::hit_check#0 ]
Allocated zp[1]:8 [ main::$4 ]
Allocated zp[1]:9 [ main::$1 ]
Allocated zp[1]:10 [ main::$2 ]
Allocated zp[1]:11 [ scan_for_lowest::$4 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Call returns wrong value
// Reported by Clay Cowgill as an NPE (which has been fixed - but this return-value problem has popped up instead)
// Caused by constant loop head unroll
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label __1 = 9
    .label __2 = $a
    .label __4 = 8
    .label hit_check = 7
    // [1] call scan_for_lowest 
    // [11] phi from main to scan_for_lowest [phi:main->scan_for_lowest]
  scan_for_lowest_from_main:
    jsr scan_for_lowest
    // [2] (byte) scan_for_lowest::return#0 ← (byte) scan_for_lowest::lowest#2 -- vbuz1=vbuz2 
    lda.z scan_for_lowest.lowest
    sta.z scan_for_lowest.return
    jmp __b1
    // main::@1
  __b1:
    // [3] (byte) main::hit_check#0 ← (byte) scan_for_lowest::return#0 -- vbuz1=vbuz2 
    lda.z scan_for_lowest.return
    sta.z hit_check
    // [4] *((const nomodify byte*) main::screen) ← (byte) main::hit_check#0 -- _deref_pbuc1=vbuz1 
    lda.z hit_check
    sta screen
    // [5] (byte~) main::$4 ← (byte) main::hit_check#0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z hit_check
    asl
    sta.z __4
    // [6] (byte~) main::$1 ← < *((const signed word*) ball_y + (byte~) main::$4) -- vbuz1=_lo_pwsc1_derefidx_vbuz2 
    ldy.z __4
    lda ball_y,y
    sta.z __1
    // [7] *((const nomodify byte*) main::screen+(byte) 2) ← (byte~) main::$1 -- _deref_pbuc1=vbuz1 
    lda.z __1
    sta screen+2
    // [8] (byte~) main::$2 ← > *((const signed word*) ball_y + (byte~) main::$4) -- vbuz1=_hi_pwsc1_derefidx_vbuz2 
    ldy.z __4
    lda ball_y+1,y
    sta.z __2
    // [9] *((const nomodify byte*) main::screen+(byte) 3) ← (byte~) main::$2 -- _deref_pbuc1=vbuz1 
    lda.z __2
    sta screen+3
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // scan_for_lowest
scan_for_lowest: {
    .label __4 = $b
    .label return = 6
    .label i = 2
    .label height = 3
    .label lowest = 5
    // [12] phi from scan_for_lowest to scan_for_lowest::@1 [phi:scan_for_lowest->scan_for_lowest::@1]
  __b1_from_scan_for_lowest:
    // [12] phi (byte) scan_for_lowest::lowest#2 = (byte) $ff [phi:scan_for_lowest->scan_for_lowest::@1#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z lowest
    // [12] phi (signed word) scan_for_lowest::height#2 = (signed word) $258 [phi:scan_for_lowest->scan_for_lowest::@1#1] -- vwsz1=vwsc1 
    lda #<$258
    sta.z height
    lda #>$258
    sta.z height+1
    // [12] phi (byte) scan_for_lowest::i#2 = (byte) 0 [phi:scan_for_lowest->scan_for_lowest::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // scan_for_lowest::@1
  __b1:
    // [13] if((byte) scan_for_lowest::i#2<(byte) 8) goto scan_for_lowest::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b2
    jmp __breturn
    // scan_for_lowest::@return
  __breturn:
    // [14] return 
    rts
    // scan_for_lowest::@2
  __b2:
    // [15] (byte~) scan_for_lowest::$4 ← (byte) scan_for_lowest::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z __4
    // [16] if(*((const signed word*) ball_y + (byte~) scan_for_lowest::$4)>=(signed word) scan_for_lowest::height#2) goto scan_for_lowest::@3 -- pwsc1_derefidx_vbuz1_ge_vwsz2_then_la1 
    ldy.z __4
    lda ball_y,y
    cmp.z height
    lda ball_y+1,y
    sbc.z height+1
    bvc !+
    eor #$80
  !:
    bpl __b3_from___b2
    jmp __b4
    // scan_for_lowest::@4
  __b4:
    // [17] (signed word) scan_for_lowest::height#1 ← *((const signed word*) ball_y + (byte~) scan_for_lowest::$4) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __4
    lda ball_y,y
    sta.z height
    lda ball_y+1,y
    sta.z height+1
    // [18] (byte) scan_for_lowest::lowest#8 ← (byte) scan_for_lowest::i#2 -- vbuz1=vbuz2 
    lda.z i
    sta.z lowest
    // [19] phi from scan_for_lowest::@2 scan_for_lowest::@4 to scan_for_lowest::@3 [phi:scan_for_lowest::@2/scan_for_lowest::@4->scan_for_lowest::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [19] phi (byte) scan_for_lowest::lowest#4 = (byte) scan_for_lowest::lowest#2 [phi:scan_for_lowest::@2/scan_for_lowest::@4->scan_for_lowest::@3#0] -- register_copy 
    // [19] phi (signed word) scan_for_lowest::height#4 = (signed word) scan_for_lowest::height#2 [phi:scan_for_lowest::@2/scan_for_lowest::@4->scan_for_lowest::@3#1] -- register_copy 
    jmp __b3
    // scan_for_lowest::@3
  __b3:
    // [20] (byte) scan_for_lowest::i#1 ← ++ (byte) scan_for_lowest::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [12] phi from scan_for_lowest::@3 to scan_for_lowest::@1 [phi:scan_for_lowest::@3->scan_for_lowest::@1]
  __b1_from___b3:
    // [12] phi (byte) scan_for_lowest::lowest#2 = (byte) scan_for_lowest::lowest#4 [phi:scan_for_lowest::@3->scan_for_lowest::@1#0] -- register_copy 
    // [12] phi (signed word) scan_for_lowest::height#2 = (signed word) scan_for_lowest::height#4 [phi:scan_for_lowest::@3->scan_for_lowest::@1#1] -- register_copy 
    // [12] phi (byte) scan_for_lowest::i#2 = (byte) scan_for_lowest::i#1 [phi:scan_for_lowest::@3->scan_for_lowest::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
  ball_y: .word $32, $64, -$c8, $c, -$64, $4b, 0, -$79

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] (byte~) main::$4 ← (byte) main::hit_check#0 << (byte) 1 [ main::$4 ] (  [ main::$4 ] { }  ) always clobbers reg byte a 
Statement [6] (byte~) main::$1 ← < *((const signed word*) ball_y + (byte~) main::$4) [ main::$4 main::$1 ] (  [ main::$4 main::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::$4 ]
Statement [8] (byte~) main::$2 ← > *((const signed word*) ball_y + (byte~) main::$4) [ main::$2 ] (  [ main::$2 ] { }  ) always clobbers reg byte a 
Statement [15] (byte~) scan_for_lowest::$4 ← (byte) scan_for_lowest::i#2 << (byte) 1 [ scan_for_lowest::lowest#2 scan_for_lowest::i#2 scan_for_lowest::height#2 scan_for_lowest::$4 ] ( scan_for_lowest:1 [ scan_for_lowest::lowest#2 scan_for_lowest::i#2 scan_for_lowest::height#2 scan_for_lowest::$4 ] { { scan_for_lowest::return#0 = scan_for_lowest::lowest#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ scan_for_lowest::lowest#2 scan_for_lowest::lowest#4 scan_for_lowest::lowest#8 ]
Removing always clobbered register reg byte a as potential for zp[1]:2 [ scan_for_lowest::i#2 scan_for_lowest::i#1 ]
Statement [16] if(*((const signed word*) ball_y + (byte~) scan_for_lowest::$4)>=(signed word) scan_for_lowest::height#2) goto scan_for_lowest::@3 [ scan_for_lowest::lowest#2 scan_for_lowest::i#2 scan_for_lowest::height#2 scan_for_lowest::$4 ] ( scan_for_lowest:1 [ scan_for_lowest::lowest#2 scan_for_lowest::i#2 scan_for_lowest::height#2 scan_for_lowest::$4 ] { { scan_for_lowest::return#0 = scan_for_lowest::lowest#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ scan_for_lowest::$4 ]
Statement [17] (signed word) scan_for_lowest::height#1 ← *((const signed word*) ball_y + (byte~) scan_for_lowest::$4) [ scan_for_lowest::i#2 scan_for_lowest::height#1 ] ( scan_for_lowest:1 [ scan_for_lowest::i#2 scan_for_lowest::height#1 ] { { scan_for_lowest::return#0 = scan_for_lowest::lowest#2 } }  ) always clobbers reg byte a 
Statement [5] (byte~) main::$4 ← (byte) main::hit_check#0 << (byte) 1 [ main::$4 ] (  [ main::$4 ] { }  ) always clobbers reg byte a 
Statement [6] (byte~) main::$1 ← < *((const signed word*) ball_y + (byte~) main::$4) [ main::$4 main::$1 ] (  [ main::$4 main::$1 ] { }  ) always clobbers reg byte a 
Statement [8] (byte~) main::$2 ← > *((const signed word*) ball_y + (byte~) main::$4) [ main::$2 ] (  [ main::$2 ] { }  ) always clobbers reg byte a 
Statement [15] (byte~) scan_for_lowest::$4 ← (byte) scan_for_lowest::i#2 << (byte) 1 [ scan_for_lowest::lowest#2 scan_for_lowest::i#2 scan_for_lowest::height#2 scan_for_lowest::$4 ] ( scan_for_lowest:1 [ scan_for_lowest::lowest#2 scan_for_lowest::i#2 scan_for_lowest::height#2 scan_for_lowest::$4 ] { { scan_for_lowest::return#0 = scan_for_lowest::lowest#2 } }  ) always clobbers reg byte a 
Statement [16] if(*((const signed word*) ball_y + (byte~) scan_for_lowest::$4)>=(signed word) scan_for_lowest::height#2) goto scan_for_lowest::@3 [ scan_for_lowest::lowest#2 scan_for_lowest::i#2 scan_for_lowest::height#2 scan_for_lowest::$4 ] ( scan_for_lowest:1 [ scan_for_lowest::lowest#2 scan_for_lowest::i#2 scan_for_lowest::height#2 scan_for_lowest::$4 ] { { scan_for_lowest::return#0 = scan_for_lowest::lowest#2 } }  ) always clobbers reg byte a 
Statement [17] (signed word) scan_for_lowest::height#1 ← *((const signed word*) ball_y + (byte~) scan_for_lowest::$4) [ scan_for_lowest::i#2 scan_for_lowest::height#1 ] ( scan_for_lowest:1 [ scan_for_lowest::i#2 scan_for_lowest::height#1 ] { { scan_for_lowest::return#0 = scan_for_lowest::lowest#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ scan_for_lowest::i#2 scan_for_lowest::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ scan_for_lowest::height#2 scan_for_lowest::height#4 scan_for_lowest::height#1 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ scan_for_lowest::lowest#2 scan_for_lowest::lowest#4 scan_for_lowest::lowest#8 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ scan_for_lowest::return#0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::hit_check#0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::$4 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ main::$1 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ main::$2 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ scan_for_lowest::$4 ] : zp[1]:11 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [scan_for_lowest] 387.5: zp[1]:5 [ scan_for_lowest::lowest#2 scan_for_lowest::lowest#4 scan_for_lowest::lowest#8 ] 328.25: zp[2]:3 [ scan_for_lowest::height#2 scan_for_lowest::height#4 scan_for_lowest::height#1 ] 274.14: zp[1]:2 [ scan_for_lowest::i#2 scan_for_lowest::i#1 ] 151.5: zp[1]:11 [ scan_for_lowest::$4 ] 4: zp[1]:6 [ scan_for_lowest::return#0 ] 
Uplift Scope [main] 4: zp[1]:9 [ main::$1 ] 4: zp[1]:10 [ main::$2 ] 3: zp[1]:7 [ main::hit_check#0 ] 2: zp[1]:8 [ main::$4 ] 
Uplift Scope [] 

Uplifting [scan_for_lowest] best 924 combination zp[1]:5 [ scan_for_lowest::lowest#2 scan_for_lowest::lowest#4 scan_for_lowest::lowest#8 ] zp[2]:3 [ scan_for_lowest::height#2 scan_for_lowest::height#4 scan_for_lowest::height#1 ] reg byte y [ scan_for_lowest::i#2 scan_for_lowest::i#1 ] reg byte x [ scan_for_lowest::$4 ] reg byte a [ scan_for_lowest::return#0 ] 
Limited combination testing to 100 combinations of 108 possible.
Uplifting [main] best 896 combination reg byte a [ main::$1 ] reg byte a [ main::$2 ] reg byte a [ main::hit_check#0 ] reg byte x [ main::$4 ] 
Limited combination testing to 100 combinations of 192 possible.
Uplifting [] best 896 combination 
Attempting to uplift remaining variables inzp[1]:5 [ scan_for_lowest::lowest#2 scan_for_lowest::lowest#4 scan_for_lowest::lowest#8 ]
Uplifting [scan_for_lowest] best 896 combination zp[1]:5 [ scan_for_lowest::lowest#2 scan_for_lowest::lowest#4 scan_for_lowest::lowest#8 ] 
Allocated (was zp[2]:3) zp[2]:2 [ scan_for_lowest::height#2 scan_for_lowest::height#4 scan_for_lowest::height#1 ]
Allocated (was zp[1]:5) zp[1]:4 [ scan_for_lowest::lowest#2 scan_for_lowest::lowest#4 scan_for_lowest::lowest#8 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Call returns wrong value
// Reported by Clay Cowgill as an NPE (which has been fixed - but this return-value problem has popped up instead)
// Caused by constant loop head unroll
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // [1] call scan_for_lowest 
    // [11] phi from main to scan_for_lowest [phi:main->scan_for_lowest]
  scan_for_lowest_from_main:
    jsr scan_for_lowest
    // [2] (byte) scan_for_lowest::return#0 ← (byte) scan_for_lowest::lowest#2 -- vbuaa=vbuz1 
    lda.z scan_for_lowest.lowest
    jmp __b1
    // main::@1
  __b1:
    // [3] (byte) main::hit_check#0 ← (byte) scan_for_lowest::return#0
    // [4] *((const nomodify byte*) main::screen) ← (byte) main::hit_check#0 -- _deref_pbuc1=vbuaa 
    sta screen
    // [5] (byte~) main::$4 ← (byte) main::hit_check#0 << (byte) 1 -- vbuxx=vbuaa_rol_1 
    asl
    tax
    // [6] (byte~) main::$1 ← < *((const signed word*) ball_y + (byte~) main::$4) -- vbuaa=_lo_pwsc1_derefidx_vbuxx 
    lda ball_y,x
    // [7] *((const nomodify byte*) main::screen+(byte) 2) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta screen+2
    // [8] (byte~) main::$2 ← > *((const signed word*) ball_y + (byte~) main::$4) -- vbuaa=_hi_pwsc1_derefidx_vbuxx 
    lda ball_y+1,x
    // [9] *((const nomodify byte*) main::screen+(byte) 3) ← (byte~) main::$2 -- _deref_pbuc1=vbuaa 
    sta screen+3
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // scan_for_lowest
scan_for_lowest: {
    .label height = 2
    .label lowest = 4
    // [12] phi from scan_for_lowest to scan_for_lowest::@1 [phi:scan_for_lowest->scan_for_lowest::@1]
  __b1_from_scan_for_lowest:
    // [12] phi (byte) scan_for_lowest::lowest#2 = (byte) $ff [phi:scan_for_lowest->scan_for_lowest::@1#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z lowest
    // [12] phi (signed word) scan_for_lowest::height#2 = (signed word) $258 [phi:scan_for_lowest->scan_for_lowest::@1#1] -- vwsz1=vwsc1 
    lda #<$258
    sta.z height
    lda #>$258
    sta.z height+1
    // [12] phi (byte) scan_for_lowest::i#2 = (byte) 0 [phi:scan_for_lowest->scan_for_lowest::@1#2] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // scan_for_lowest::@1
  __b1:
    // [13] if((byte) scan_for_lowest::i#2<(byte) 8) goto scan_for_lowest::@2 -- vbuyy_lt_vbuc1_then_la1 
    cpy #8
    bcc __b2
    jmp __breturn
    // scan_for_lowest::@return
  __breturn:
    // [14] return 
    rts
    // scan_for_lowest::@2
  __b2:
    // [15] (byte~) scan_for_lowest::$4 ← (byte) scan_for_lowest::i#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [16] if(*((const signed word*) ball_y + (byte~) scan_for_lowest::$4)>=(signed word) scan_for_lowest::height#2) goto scan_for_lowest::@3 -- pwsc1_derefidx_vbuxx_ge_vwsz1_then_la1 
    lda ball_y,x
    cmp.z height
    lda ball_y+1,x
    sbc.z height+1
    bvc !+
    eor #$80
  !:
    bpl __b3_from___b2
    jmp __b4
    // scan_for_lowest::@4
  __b4:
    // [17] (signed word) scan_for_lowest::height#1 ← *((const signed word*) ball_y + (byte~) scan_for_lowest::$4) -- vwsz1=pwsc1_derefidx_vbuxx 
    lda ball_y,x
    sta.z height
    lda ball_y+1,x
    sta.z height+1
    // [18] (byte) scan_for_lowest::lowest#8 ← (byte) scan_for_lowest::i#2 -- vbuz1=vbuyy 
    sty.z lowest
    // [19] phi from scan_for_lowest::@2 scan_for_lowest::@4 to scan_for_lowest::@3 [phi:scan_for_lowest::@2/scan_for_lowest::@4->scan_for_lowest::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [19] phi (byte) scan_for_lowest::lowest#4 = (byte) scan_for_lowest::lowest#2 [phi:scan_for_lowest::@2/scan_for_lowest::@4->scan_for_lowest::@3#0] -- register_copy 
    // [19] phi (signed word) scan_for_lowest::height#4 = (signed word) scan_for_lowest::height#2 [phi:scan_for_lowest::@2/scan_for_lowest::@4->scan_for_lowest::@3#1] -- register_copy 
    jmp __b3
    // scan_for_lowest::@3
  __b3:
    // [20] (byte) scan_for_lowest::i#1 ← ++ (byte) scan_for_lowest::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [12] phi from scan_for_lowest::@3 to scan_for_lowest::@1 [phi:scan_for_lowest::@3->scan_for_lowest::@1]
  __b1_from___b3:
    // [12] phi (byte) scan_for_lowest::lowest#2 = (byte) scan_for_lowest::lowest#4 [phi:scan_for_lowest::@3->scan_for_lowest::@1#0] -- register_copy 
    // [12] phi (signed word) scan_for_lowest::height#2 = (signed word) scan_for_lowest::height#4 [phi:scan_for_lowest::@3->scan_for_lowest::@1#1] -- register_copy 
    // [12] phi (byte) scan_for_lowest::i#2 = (byte) scan_for_lowest::i#1 [phi:scan_for_lowest::@3->scan_for_lowest::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
  ball_y: .word $32, $64, -$c8, $c, -$64, $4b, 0, -$79

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b3_from___b2 with __b3
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction scan_for_lowest_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_scan_for_lowest:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const signed word*) ball_y[(number) 8]  = { (signed word) $32, (signed word) $64, (signed word) -$c8, (signed word) $c, (signed word) -$64, (signed word) $4b, (signed word) 0, (signed word) -$79 }
(void()) main()
(byte~) main::$1 reg byte a 4.0
(byte~) main::$2 reg byte a 4.0
(byte~) main::$4 reg byte x 2.0
(label) main::@1
(label) main::@return
(byte) main::hit_check
(byte) main::hit_check#0 reg byte a 3.0
(const nomodify byte*) main::screen = (byte*) 1024
(byte()) scan_for_lowest()
(byte~) scan_for_lowest::$4 reg byte x 151.5
(label) scan_for_lowest::@1
(label) scan_for_lowest::@2
(label) scan_for_lowest::@3
(label) scan_for_lowest::@4
(label) scan_for_lowest::@return
(signed word) scan_for_lowest::height
(signed word) scan_for_lowest::height#1 height zp[2]:2 101.0
(signed word) scan_for_lowest::height#2 height zp[2]:2 75.75
(signed word) scan_for_lowest::height#4 height zp[2]:2 151.5
(byte) scan_for_lowest::i
(byte) scan_for_lowest::i#1 reg byte y 202.0
(byte) scan_for_lowest::i#2 reg byte y 72.14285714285714
(byte) scan_for_lowest::lowest
(byte) scan_for_lowest::lowest#2 lowest zp[1]:4 34.0
(byte) scan_for_lowest::lowest#4 lowest zp[1]:4 151.5
(byte) scan_for_lowest::lowest#8 lowest zp[1]:4 202.0
(byte) scan_for_lowest::return
(byte) scan_for_lowest::return#0 reg byte a 4.0

reg byte y [ scan_for_lowest::i#2 scan_for_lowest::i#1 ]
zp[2]:2 [ scan_for_lowest::height#2 scan_for_lowest::height#4 scan_for_lowest::height#1 ]
zp[1]:4 [ scan_for_lowest::lowest#2 scan_for_lowest::lowest#4 scan_for_lowest::lowest#8 ]
reg byte a [ scan_for_lowest::return#0 ]
reg byte a [ main::hit_check#0 ]
reg byte x [ main::$4 ]
reg byte a [ main::$1 ]
reg byte a [ main::$2 ]
reg byte x [ scan_for_lowest::$4 ]


FINAL ASSEMBLER
Score: 770

  // File Comments
// Call returns wrong value
// Reported by Clay Cowgill as an NPE (which has been fixed - but this return-value problem has popped up instead)
// Caused by constant loop head unroll
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // scan_for_lowest()
    // [1] call scan_for_lowest 
    // [11] phi from main to scan_for_lowest [phi:main->scan_for_lowest]
    jsr scan_for_lowest
    // scan_for_lowest()
    // [2] (byte) scan_for_lowest::return#0 ← (byte) scan_for_lowest::lowest#2 -- vbuaa=vbuz1 
    lda.z scan_for_lowest.lowest
    // main::@1
    // hit_check=scan_for_lowest()
    // [3] (byte) main::hit_check#0 ← (byte) scan_for_lowest::return#0
    // screen[0] = hit_check
    // [4] *((const nomodify byte*) main::screen) ← (byte) main::hit_check#0 -- _deref_pbuc1=vbuaa 
    sta screen
    // <ball_y[hit_check]
    // [5] (byte~) main::$4 ← (byte) main::hit_check#0 << (byte) 1 -- vbuxx=vbuaa_rol_1 
    asl
    tax
    // [6] (byte~) main::$1 ← < *((const signed word*) ball_y + (byte~) main::$4) -- vbuaa=_lo_pwsc1_derefidx_vbuxx 
    lda ball_y,x
    // screen[2] = <ball_y[hit_check]
    // [7] *((const nomodify byte*) main::screen+(byte) 2) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta screen+2
    // >ball_y[hit_check]
    // [8] (byte~) main::$2 ← > *((const signed word*) ball_y + (byte~) main::$4) -- vbuaa=_hi_pwsc1_derefidx_vbuxx 
    lda ball_y+1,x
    // screen[3] = >ball_y[hit_check]
    // [9] *((const nomodify byte*) main::screen+(byte) 3) ← (byte~) main::$2 -- _deref_pbuc1=vbuaa 
    sta screen+3
    // main::@return
    // }
    // [10] return 
    rts
}
  // scan_for_lowest
scan_for_lowest: {
    .label height = 2
    .label lowest = 4
    // [12] phi from scan_for_lowest to scan_for_lowest::@1 [phi:scan_for_lowest->scan_for_lowest::@1]
    // [12] phi (byte) scan_for_lowest::lowest#2 = (byte) $ff [phi:scan_for_lowest->scan_for_lowest::@1#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z lowest
    // [12] phi (signed word) scan_for_lowest::height#2 = (signed word) $258 [phi:scan_for_lowest->scan_for_lowest::@1#1] -- vwsz1=vwsc1 
    lda #<$258
    sta.z height
    lda #>$258
    sta.z height+1
    // [12] phi (byte) scan_for_lowest::i#2 = (byte) 0 [phi:scan_for_lowest->scan_for_lowest::@1#2] -- vbuyy=vbuc1 
    ldy #0
    // scan_for_lowest::@1
  __b1:
    // for (char i=0;i<8;i++)
    // [13] if((byte) scan_for_lowest::i#2<(byte) 8) goto scan_for_lowest::@2 -- vbuyy_lt_vbuc1_then_la1 
    cpy #8
    bcc __b2
    // scan_for_lowest::@return
    // }
    // [14] return 
    rts
    // scan_for_lowest::@2
  __b2:
    // ball_y[i]<height
    // [15] (byte~) scan_for_lowest::$4 ← (byte) scan_for_lowest::i#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // if (ball_y[i]<height)
    // [16] if(*((const signed word*) ball_y + (byte~) scan_for_lowest::$4)>=(signed word) scan_for_lowest::height#2) goto scan_for_lowest::@3 -- pwsc1_derefidx_vbuxx_ge_vwsz1_then_la1 
    lda ball_y,x
    cmp.z height
    lda ball_y+1,x
    sbc.z height+1
    bvc !+
    eor #$80
  !:
    bpl __b3
    // scan_for_lowest::@4
    // height=ball_y[i]
    // [17] (signed word) scan_for_lowest::height#1 ← *((const signed word*) ball_y + (byte~) scan_for_lowest::$4) -- vwsz1=pwsc1_derefidx_vbuxx 
    lda ball_y,x
    sta.z height
    lda ball_y+1,x
    sta.z height+1
    // [18] (byte) scan_for_lowest::lowest#8 ← (byte) scan_for_lowest::i#2 -- vbuz1=vbuyy 
    sty.z lowest
    // [19] phi from scan_for_lowest::@2 scan_for_lowest::@4 to scan_for_lowest::@3 [phi:scan_for_lowest::@2/scan_for_lowest::@4->scan_for_lowest::@3]
    // [19] phi (byte) scan_for_lowest::lowest#4 = (byte) scan_for_lowest::lowest#2 [phi:scan_for_lowest::@2/scan_for_lowest::@4->scan_for_lowest::@3#0] -- register_copy 
    // [19] phi (signed word) scan_for_lowest::height#4 = (signed word) scan_for_lowest::height#2 [phi:scan_for_lowest::@2/scan_for_lowest::@4->scan_for_lowest::@3#1] -- register_copy 
    // scan_for_lowest::@3
  __b3:
    // for (char i=0;i<8;i++)
    // [20] (byte) scan_for_lowest::i#1 ← ++ (byte) scan_for_lowest::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [12] phi from scan_for_lowest::@3 to scan_for_lowest::@1 [phi:scan_for_lowest::@3->scan_for_lowest::@1]
    // [12] phi (byte) scan_for_lowest::lowest#2 = (byte) scan_for_lowest::lowest#4 [phi:scan_for_lowest::@3->scan_for_lowest::@1#0] -- register_copy 
    // [12] phi (signed word) scan_for_lowest::height#2 = (signed word) scan_for_lowest::height#4 [phi:scan_for_lowest::@3->scan_for_lowest::@1#1] -- register_copy 
    // [12] phi (byte) scan_for_lowest::i#2 = (byte) scan_for_lowest::i#1 [phi:scan_for_lowest::@3->scan_for_lowest::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
  ball_y: .word $32, $64, -$c8, $c, -$64, $4b, 0, -$79

