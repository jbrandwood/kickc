
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::idx#0 = 0
  main::i#0 = -2
  to:main::@1
main::@1: scope:[main]  from main main::@4
  main::idx#5 = phi( main/main::idx#0, main::@4/main::idx#1 )
  main::i#2 = phi( main/main::i#0, main::@4/main::i#1 )
  main::$4 = 0 != main::i#2
  if(main::$4) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::i#4 = phi( main::@1/main::i#2 )
  main::idx#3 = phi( main::@1/main::idx#5 )
  main::$1 = '+'
  to:main::@4
main::@3: scope:[main]  from main::@1
  main::i#5 = phi( main::@1/main::i#2 )
  main::idx#4 = phi( main::@1/main::idx#5 )
  main::$0 = '0'
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@3
  main::i#3 = phi( main::@2/main::i#4, main::@3/main::i#5 )
  main::idx#2 = phi( main::@2/main::idx#3, main::@3/main::idx#4 )
  main::$2 = phi( main::@2/main::$1, main::@3/main::$0 )
  main::j#0 = main::$2
  SCREEN[main::idx#2] = main::j#0
  main::idx#1 = ++ main::idx#2
  main::i#1 = main::i#3 + rangenext(-2,2)
  main::$3 = main::i#1 != rangelast(-2,2)
  if(main::$3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
void main()
byte~ main::$0
byte~ main::$1
byte~ main::$2
bool~ main::$3
bool~ main::$4
signed byte main::i
signed byte main::i#0
signed byte main::i#1
signed byte main::i#2
signed byte main::i#3
signed byte main::i#4
signed byte main::i#5
byte main::idx
byte main::idx#0
byte main::idx#1
byte main::idx#2
byte main::idx#3
byte main::idx#4
byte main::idx#5
byte main::j
byte main::j#0

Adding number conversion cast (snumber) 0 in main::$4 = 0 != main::i#2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized signed number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::idx#3 = main::idx#5 main::idx#4 
Alias main::i#2 = main::i#4 main::i#5 
Alias main::j#0 = main::$2 
Successful SSA optimization Pass2AliasElimination
Alias main::idx#2 = main::idx#3 
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$4 [4] if(0!=main::i#2) goto main::@2
Simple Condition main::$3 [12] if(main::i#1!=rangelast(-2,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::idx#0 = 0
Constant main::i#0 = -2
Constant main::$1 = '+'
Constant main::$0 = '0'
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [10] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [12] if(main::i#1!=rangelast(-2,2)) goto main::@1 to 3
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (snumber) 3 in [6] if(main::i#1!=3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized signed number type 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::idx#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = -2
Constant inlined main::idx#0 = 0
Constant inlined main::$1 = '+'
Constant inlined main::$0 = '0'
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@4 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@2
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [10] main::i#6 = main::i#1
Coalesced [11] main::idx#6 = main::idx#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label main::@5
Renumbering block main::@4 to main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::idx#2 = phi( main/0, main::@3/main::idx#1 )
  [1] main::i#2 = phi( main/-2, main::@3/main::i#1 )
  [2] if(0!=main::i#2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  [3] phi()
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2
  [4] main::j#0 = phi( main::@2/'+', main::@1/'0' )
  [5] SCREEN[main::idx#2] = main::j#0
  [6] main::idx#1 = ++ main::idx#2
  [7] main::i#1 = ++ main::i#2
  [8] if(main::i#1!=3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
signed byte main::i
signed byte main::i#1 16.5
signed byte main::i#2 5.5
byte main::idx
byte main::idx#1 7.333333333333333
byte main::idx#2 6.6000000000000005
byte main::j
byte main::j#0 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#2 main::idx#1 ]
[ main::j#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#2 main::idx#1 ]
[ main::j#0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::idx#2 main::idx#1 ]
Allocated zp[1]:4 [ main::j#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::idx#2 main::idx#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::j#0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22: zp[1]:2 [ main::i#2 main::i#1 ] 13.93: zp[1]:3 [ main::idx#2 main::idx#1 ] 11: zp[1]:4 [ main::j#0 ] 
Uplift Scope [] 

Uplifting [main] best 446 combination reg byte y [ main::i#2 main::i#1 ] reg byte x [ main::idx#2 main::idx#1 ] reg byte a [ main::j#0 ] 
Uplifting [] best 446 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests using integer conditions in ternary operator
// This should produce '++0++' at the top of the screen
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::idx#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::i#2 = -2 [phi:main->main::@1#1] -- vbsyy=vbsc1 
    ldy #-2
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::idx#2 = main::idx#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] if(0!=main::i#2) goto main::@2 -- vbsc1_neq_vbsyy_then_la1 
    cpy #0
    bne __b2_from___b1
    // [4] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [4] phi main::j#0 = '0' [phi:main::@1->main::@3#0] -- vbuaa=vbuc1 
    lda #'0'
    jmp __b3
    // [3] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [4] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [4] phi main::j#0 = '+' [phi:main::@2->main::@3#0] -- vbuaa=vbuc1 
    lda #'+'
    jmp __b3
    // main::@3
  __b3:
    // [5] SCREEN[main::idx#2] = main::j#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [6] main::idx#1 = ++ main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] main::i#1 = ++ main::i#2 -- vbsyy=_inc_vbsyy 
    iny
    // [8] if(main::i#1!=3) goto main::@1 -- vbsyy_neq_vbsc1_then_la1 
    cpy #3
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b2_from___b1 with __b2
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void main()
signed byte main::i
signed byte main::i#1 reg byte y 16.5
signed byte main::i#2 reg byte y 5.5
byte main::idx
byte main::idx#1 reg byte x 7.333333333333333
byte main::idx#2 reg byte x 6.6000000000000005
byte main::j
byte main::j#0 reg byte a 11.0

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ main::idx#2 main::idx#1 ]
reg byte a [ main::j#0 ]


FINAL ASSEMBLER
Score: 296

  // File Comments
// Tests using integer conditions in ternary operator
// This should produce '++0++' at the top of the screen
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::idx#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::i#2 = -2 [phi:main->main::@1#1] -- vbsyy=vbsc1 
    ldy #-2
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::idx#2 = main::idx#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // i?'+':'0'
    // [2] if(0!=main::i#2) goto main::@2 -- vbsc1_neq_vbsyy_then_la1 
    cpy #0
    bne __b2
    // [4] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // [4] phi main::j#0 = '0' [phi:main::@1->main::@3#0] -- vbuaa=vbuc1 
    lda #'0'
    jmp __b3
    // [3] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
  __b2:
    // i?'+':'0'
    // [4] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [4] phi main::j#0 = '+' [phi:main::@2->main::@3#0] -- vbuaa=vbuc1 
    lda #'+'
    // main::@3
  __b3:
    // SCREEN[idx++] = j
    // [5] SCREEN[main::idx#2] = main::j#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = j;
    // [6] main::idx#1 = ++ main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // for( signed byte i: -2..2)
    // [7] main::i#1 = ++ main::i#2 -- vbsyy=_inc_vbsyy 
    iny
    // [8] if(main::i#1!=3) goto main::@1 -- vbsyy_neq_vbsc1_then_la1 
    cpy #3
    bne __b1
    // main::@return
    // }
    // [9] return 
    rts
}
  // File Data

