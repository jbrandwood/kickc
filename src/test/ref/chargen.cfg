
(void()) main()
main: scope:[main]  from
  asm { sei  }
  [1] *((const byte*) PROCPORT) ← (byte) $32
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [2] (byte*) main::sc#7 ← phi( main/(const byte*) SCREEN main::@5/(byte*) main::sc#2 )
  [2] (byte) main::y#2 ← phi( main/(byte) 0 main::@5/(byte) main::y#1 )
  [3] (byte) main::bits#0 ← *((const byte*) main::CHAR_A#0 + (byte) main::y#2)
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [4] (byte) main::x#2 ← phi( main::@1/(byte) 0 main::@3/(byte) main::x#1 )
  [4] (byte*) main::sc#3 ← phi( main::@1/(byte*) main::sc#7 main::@3/(byte*) main::sc#1 )
  [4] (byte) main::bits#2 ← phi( main::@1/(byte) main::bits#0 main::@3/(byte) main::bits#1 )
  [5] (byte~) main::$1 ← (byte) main::bits#2 & (byte) $80
  [6] if((byte~) main::$1==(byte) 0) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [7] phi()
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [8] (byte) main::c#2 ← phi( main::@2/(byte) '.' main::@4/(byte) '*' )
  [9] *((byte*) main::sc#3) ← (byte) main::c#2
  [10] (byte*) main::sc#1 ← ++ (byte*) main::sc#3
  [11] (byte) main::bits#1 ← (byte) main::bits#2 << (byte) 1
  [12] (byte) main::x#1 ← ++ (byte) main::x#2
  [13] if((byte) main::x#1!=(byte) 8) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@3
  [14] (byte*) main::sc#2 ← (byte*) main::sc#1 + (byte) $20
  [15] (byte) main::y#1 ← ++ (byte) main::y#2
  [16] if((byte) main::y#1!=(byte) 8) goto main::@1
  to:main::@6
main::@6: scope:[main]  from main::@5
  [17] *((const byte*) PROCPORT) ← (byte) $37
  asm { cli  }
  to:main::@return
main::@return: scope:[main]  from main::@6
  [19] return 
  to:@return
